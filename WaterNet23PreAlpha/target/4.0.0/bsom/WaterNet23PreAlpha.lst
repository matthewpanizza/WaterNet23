
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014ab0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c8ad0  000c8ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c8af4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003db28  000c8af8  0002db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ac8  2003dd28  2003dd28  0003dd28  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8cf8  000c8cf8  00038cf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8d20  000c8d20  00038d20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022e1d2  00000000  00000000  00038d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f72  00000000  00000000  00266ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000712d6  00000000  00000000  00287e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f88  00000000  00000000  002f913e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011578  00000000  00000000  002fe0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004f672  00000000  00000000  0030f63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00086dab  00000000  00000000  0035ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c1b1  00000000  00000000  003e5a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fdb4  00000000  00000000  00541c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f010 fac9 	bl	c45c8 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 faeb 	bl	c4618 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db28 	.word	0x2003db28
   b404c:	000c8af8 	.word	0x000c8af8
   b4050:	2003dd28 	.word	0x2003dd28
   b4054:	2003dd28 	.word	0x2003dd28
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f00c ffb9 	bl	c0fd8 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c8aac 	.word	0x000c8aac
   b4080:	000c8ad0 	.word	0x000c8ad0

000b4084 <module_user_setup>:
   b4084:	f000 beb0 	b.w	b4de8 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f002 fb17 	bl	b66bc <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f00c bf59 	b.w	c0f48 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f00a b945 	b.w	be324 <malloc>

000b409a <_Znaj>:
   b409a:	f00a b943 	b.w	be324 <malloc>

000b409e <_ZdaPv>:
   b409e:	f00a b949 	b.w	be334 <free>

000b40a2 <_ZdlPvj>:
   b40a2:	f00a b947 	b.w	be334 <free>
	...

000b40a8 <__cxa_pure_virtual>:
   b40a8:	b508      	push	{r3, lr}
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f00a f82a 	bl	be108 <panic_>
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bdc45 	.word	0x000bdc45
   b40bc:	000c6778 	.word	0x000c6778

000b40c0 <__cxa_guard_acquire>:
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_Z13StatusHandlerv>:

//ISR Function to calculate bitmasked status number and signal to the main loop that the status is ready
void StatusHandler(){
    statusFlags = 0;                    //Reset status flags to 0, then add up the individual flags
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b40f8:	4b15      	ldr	r3, [pc, #84]	; (b4150 <_Z13StatusHandlerv+0x58>)
   b40fa:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b40fc:	4b15      	ldr	r3, [pc, #84]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b40fe:	781b      	ldrb	r3, [r3, #0]
   b4100:	009b      	lsls	r3, r3, #2
   b4102:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
   b4106:	4b14      	ldr	r3, [pc, #80]	; (b4158 <_Z13StatusHandlerv+0x60>)
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b4108:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b410a:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;    //Bit 3 indicates bot is currently offloading
   b410c:	4a13      	ldr	r2, [pc, #76]	; (b415c <_Z13StatusHandlerv+0x64>)
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;      //Bit 4 indicates the current drive mode
   b4114:	4a12      	ldr	r2, [pc, #72]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4116:	7812      	ldrb	r2, [r2, #0]
   b4118:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;     //Bit 6 indicates that the battery is low
   b411c:	4a11      	ldr	r2, [pc, #68]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b411e:	7812      	ldrb	r2, [r2, #0]
   b4120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;     //Bit 7 indicates that the Atlas sensors are being logged to the SD card
   b4124:	4a10      	ldr	r2, [pc, #64]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4126:	7812      	ldrb	r2, [r2, #0]
   b4128:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;       //Bit 8 indicates neo-m8u GPS is available and receiving non-null data
   b412c:	4a0f      	ldr	r2, [pc, #60]	; (b416c <_Z13StatusHandlerv+0x74>)
   b412e:	7812      	ldrb	r2, [r2, #0]
   b4130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;   //Bit 9 indicates the LIS3MDL compass is connected and providing dat
   b4134:	4a0e      	ldr	r2, [pc, #56]	; (b4170 <_Z13StatusHandlerv+0x78>)
   b4136:	7812      	ldrb	r2, [r2, #0]
   b4138:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    statusFlags |= SDAvail << 10;       //Bit 10 indicates the SD card is functional and can record data
   b413c:	4a0d      	ldr	r2, [pc, #52]	; (b4174 <_Z13StatusHandlerv+0x7c>)
   b413e:	7812      	ldrb	r2, [r2, #0]
   b4140:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   b4144:	4a0c      	ldr	r2, [pc, #48]	; (b4178 <_Z13StatusHandlerv+0x80>)
   b4146:	8013      	strh	r3, [r2, #0]
    statusReady = true;                 //Set flag true, so the main loop will transmit out status to CChub
   b4148:	4b0c      	ldr	r3, [pc, #48]	; (b417c <_Z13StatusHandlerv+0x84>)
   b414a:	2201      	movs	r2, #1
   b414c:	701a      	strb	r2, [r3, #0]
    //Serial.println("Sending a status update!");
}
   b414e:	4770      	bx	lr
   b4150:	2003dd7c 	.word	0x2003dd7c
   b4154:	2003dd34 	.word	0x2003dd34
   b4158:	2003dd69 	.word	0x2003dd69
   b415c:	2003e0b0 	.word	0x2003e0b0
   b4160:	2003ddb1 	.word	0x2003ddb1
   b4164:	2003dedc 	.word	0x2003dedc
   b4168:	2003ded5 	.word	0x2003ded5
   b416c:	2003dd68 	.word	0x2003dd68
   b4170:	2003dd44 	.word	0x2003dd44
   b4174:	2003dd6c 	.word	0x2003dd6c
   b4178:	2003e5a8 	.word	0x2003e5a8
   b417c:	2003e5c8 	.word	0x2003e5c8

000b4180 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4180:	4770      	bx	lr

000b4182 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4182:	b510      	push	{r4, lr}
  }
   b4184:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4186:	4604      	mov	r4, r0
  }
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4FileD0Ev>:
   b4190:	b510      	push	{r4, lr}
   b4192:	2134      	movs	r1, #52	; 0x34
   b4194:	4604      	mov	r4, r0
   b4196:	f7ff ff84 	bl	b40a2 <_ZdlPvj>
   b419a:	4620      	mov	r0, r4
   b419c:	bd10      	pop	{r4, pc}

000b419e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b419e:	6943      	ldr	r3, [r0, #20]
   b41a0:	b113      	cbz	r3, b41a8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41a2:	6983      	ldr	r3, [r0, #24]
   b41a4:	300c      	adds	r0, #12
   b41a6:	4718      	bx	r3
            callback();
        }
    }
   b41a8:	4770      	bx	lr

000b41aa <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41aa:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41ac:	2100      	movs	r1, #0
   b41ae:	4604      	mov	r4, r0
   b41b0:	4608      	mov	r0, r1
   b41b2:	f009 fdf9 	bl	bdda8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41b6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41b8:	4620      	mov	r0, r4
   b41ba:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41bc:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41be:	f009 fe0b 	bl	bddd8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41c2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b41c4:	b10c      	cbz	r4, b41ca <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41c6:	2301      	movs	r3, #1
   b41c8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41ca:	2100      	movs	r1, #0
   b41cc:	2001      	movs	r0, #1
   b41ce:	f009 fdeb 	bl	bdda8 <os_thread_scheduling>
            }
        }
        if (t) {
   b41d2:	b12c      	cbz	r4, b41e0 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41d4:	6823      	ldr	r3, [r4, #0]
   b41d6:	4620      	mov	r0, r4
   b41d8:	689b      	ldr	r3, [r3, #8]
   b41da:	4798      	blx	r3
            t->running = false;
   b41dc:	2300      	movs	r3, #0
   b41de:	7123      	strb	r3, [r4, #4]
        }
    }
   b41e0:	b002      	add	sp, #8
   b41e2:	bd10      	pop	{r4, pc}

000b41e4 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b41e4:	3010      	adds	r0, #16
   b41e6:	f003 bab9 	b.w	b775c <_ZN7FatFile4syncEv>

000b41ea <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b41ea:	3010      	adds	r0, #16
   b41ec:	f003 b99a 	b.w	b7524 <_ZN7FatFile4peekEv>

000b41f0 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b41f0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b41f2:	2201      	movs	r2, #1
   b41f4:	f10d 0107 	add.w	r1, sp, #7
   b41f8:	3010      	adds	r0, #16
   b41fa:	f003 f8e5 	bl	b73c8 <_ZN7FatFile4readEPvj>
   b41fe:	2801      	cmp	r0, #1
   b4200:	bf0c      	ite	eq
   b4202:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4206:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b420a:	b003      	add	sp, #12
   b420c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4210 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4210:	3010      	adds	r0, #16
   b4212:	f003 bb2d 	b.w	b7870 <_ZN7FatFile5writeEPKvj>

000b4216 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4216:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4218:	2201      	movs	r2, #1
   b421a:	f88d 1007 	strb.w	r1, [sp, #7]
   b421e:	3010      	adds	r0, #16
   b4220:	f10d 0107 	add.w	r1, sp, #7
   b4224:	f003 fb24 	bl	b7870 <_ZN7FatFile5writeEPKvj>
  }
   b4228:	b003      	add	sp, #12
   b422a:	f85d fb04 	ldr.w	pc, [sp], #4

000b422e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b422e:	2a01      	cmp	r2, #1
   b4230:	d102      	bne.n	b4238 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4232:	6001      	str	r1, [r0, #0]
      }
   b4234:	2000      	movs	r0, #0
   b4236:	4770      	bx	lr
	  switch (__op)
   b4238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b423a:	bf04      	itt	eq
   b423c:	680b      	ldreq	r3, [r1, #0]
   b423e:	6003      	streq	r3, [r0, #0]
	      break;
   b4240:	e7f8      	b.n	b4234 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4242 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4242:	6803      	ldr	r3, [r0, #0]
   b4244:	4718      	bx	r3

000b4246 <_ZN5Timer5_stopEjb.isra.0>:
    bool _stop(unsigned block, bool fromISR=false)
   b4246:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4248:	6880      	ldr	r0, [r0, #8]
   b424a:	b128      	cbz	r0, b4258 <_ZN5Timer5_stopEjb.isra.0+0x12>
   b424c:	2300      	movs	r3, #0
   b424e:	e9cd 1300 	strd	r1, r3, [sp]
   b4252:	2102      	movs	r1, #2
   b4254:	f009 fdc8 	bl	bdde8 <os_timer_change>
    }
   b4258:	b003      	add	sp, #12
   b425a:	f85d fb04 	ldr.w	pc, [sp], #4

000b425e <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	b2c9      	uxtb	r1, r1
   b4262:	689b      	ldr	r3, [r3, #8]
   b4264:	4718      	bx	r3
	...

000b4268 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4268:	b510      	push	{r4, lr}
   b426a:	4b05      	ldr	r3, [pc, #20]	; (b4280 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b426c:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b426e:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4270:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4272:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4276:	f009 ff67 	bl	be148 <led_set_status_active>
}
   b427a:	4620      	mov	r0, r4
   b427c:	bd10      	pop	{r4, pc}
   b427e:	bf00      	nop
   b4280:	000c6e28 	.word	0x000c6e28

000b4284 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4284:	b510      	push	{r4, lr}
   b4286:	4604      	mov	r4, r0
}
   b4288:	f7ff ffee 	bl	b4268 <_ZN8particle9LEDStatusD1Ev>
   b428c:	4620      	mov	r0, r4
   b428e:	2120      	movs	r1, #32
   b4290:	f7ff ff07 	bl	b40a2 <_ZdlPvj>
   b4294:	4620      	mov	r0, r4
   b4296:	bd10      	pop	{r4, pc}

000b4298 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4298:	4b0a      	ldr	r3, [pc, #40]	; (b42c4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b429a:	b510      	push	{r4, lr}
   b429c:	4604      	mov	r4, r0
   b429e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42a0:	f00b ff38 	bl	c0114 <_ZN5spark10LogManager8instanceEv>
   b42a4:	4621      	mov	r1, r4
   b42a6:	f00c f970 	bl	c058a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b42aa:	f00d fa5f 	bl	c176c <_Z16_fetch_usbserialv>
   b42ae:	f00d fa51 	bl	c1754 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b42b2:	4620      	mov	r0, r4
   b42b4:	4b04      	ldr	r3, [pc, #16]	; (b42c8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b42b6:	f840 3b04 	str.w	r3, [r0], #4
   b42ba:	f00c f801 	bl	c02c0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42be:	4620      	mov	r0, r4
   b42c0:	bd10      	pop	{r4, pc}
   b42c2:	bf00      	nop
   b42c4:	000c6e3c 	.word	0x000c6e3c
   b42c8:	000c6e10 	.word	0x000c6e10

000b42cc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42cc:	b510      	push	{r4, lr}
   b42ce:	4604      	mov	r4, r0
    }
   b42d0:	f7ff ffe2 	bl	b4298 <_ZN5spark16SerialLogHandlerD1Ev>
   b42d4:	4620      	mov	r0, r4
   b42d6:	2124      	movs	r1, #36	; 0x24
   b42d8:	f7ff fee3 	bl	b40a2 <_ZdlPvj>
   b42dc:	4620      	mov	r0, r4
   b42de:	bd10      	pop	{r4, pc}

000b42e0 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b42e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42e2:	4606      	mov	r6, r0
   b42e4:	4614      	mov	r4, r2
   b42e6:	460d      	mov	r5, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b42e8:	2200      	movs	r2, #0
   b42ea:	4621      	mov	r1, r4
   b42ec:	f7ff ffab 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42f0:	68b0      	ldr	r0, [r6, #8]
   b42f2:	b130      	cbz	r0, b4302 <_ZN5Timer6_startEjb.isra.0+0x22>
   b42f4:	2300      	movs	r3, #0
   b42f6:	e9cd 5300 	strd	r5, r3, [sp]
   b42fa:	4622      	mov	r2, r4
   b42fc:	4619      	mov	r1, r3
   b42fe:	f009 fd73 	bl	bdde8 <os_timer_change>
    }
   b4302:	b002      	add	sp, #8
   b4304:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4308 <_Z13buttonHandlerv>:
    if(digitalRead(PWR_BUT)) digitalWrite(PWR_EN, LOW); //Turn off system
    shutdownTimer.stopFromISR();
}

//ISR triggered when button is pressed or released
void buttonHandler(){
   b4308:	b538      	push	{r3, r4, r5, lr}
    if(digitalRead(PWR_BUT)){               //If the interrupt was triggered by the button being pressed
   b430a:	2012      	movs	r0, #18
   b430c:	f00d feb4 	bl	c2078 <digitalRead>
   b4310:	4d08      	ldr	r5, [pc, #32]	; (b4334 <_Z13buttonHandlerv+0x2c>)
   b4312:	4604      	mov	r4, r0
    bool startFromISR() { return _start(0, true); }
   b4314:	2201      	movs	r2, #1
   b4316:	b130      	cbz	r0, b4326 <_Z13buttonHandlerv+0x1e>
   b4318:	4807      	ldr	r0, [pc, #28]	; (b4338 <_Z13buttonHandlerv+0x30>)
   b431a:	2100      	movs	r1, #0
   b431c:	f7ff ffe0 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
        shutdownTimer.startFromISR();       //Start the shutdown timer, which will check if the button has been held for long enough
        shutdownActive = true;              //Set flag to true to make LED flash and indicate shutdown initiate
   b4320:	2301      	movs	r3, #1
   b4322:	702b      	strb	r3, [r5, #0]
    }
    else{                                   //If the interrupt was triggered by the button being released
        shutdownTimer.stopFromISR();        //Stop the ISR which will shut off the bot
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
    }
}
   b4324:	bd38      	pop	{r3, r4, r5, pc}
    bool stopFromISR() { return _stop(0, true); }
   b4326:	4601      	mov	r1, r0
   b4328:	4803      	ldr	r0, [pc, #12]	; (b4338 <_Z13buttonHandlerv+0x30>)
   b432a:	f7ff ff8c 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
   b432e:	702c      	strb	r4, [r5, #0]
}
   b4330:	e7f8      	b.n	b4324 <_Z13buttonHandlerv+0x1c>
   b4332:	bf00      	nop
   b4334:	2003e562 	.word	0x2003e562
   b4338:	2003e564 	.word	0x2003e564

000b433c <_Z11buttonTimerv>:
void buttonTimer(){
   b433c:	b508      	push	{r3, lr}
    if(digitalRead(PWR_BUT)) digitalWrite(PWR_EN, LOW); //Turn off system
   b433e:	2012      	movs	r0, #18
   b4340:	f00d fe9a 	bl	c2078 <digitalRead>
   b4344:	b118      	cbz	r0, b434e <_Z11buttonTimerv+0x12>
   b4346:	2100      	movs	r1, #0
   b4348:	201c      	movs	r0, #28
   b434a:	f00d fe7c 	bl	c2046 <digitalWrite>
}
   b434e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4352:	4802      	ldr	r0, [pc, #8]	; (b435c <_Z11buttonTimerv+0x20>)
   b4354:	2201      	movs	r2, #1
   b4356:	2100      	movs	r1, #0
   b4358:	f7ff bf75 	b.w	b4246 <_ZN5Timer5_stopEjb.isra.0>
   b435c:	2003e564 	.word	0x2003e564

000b4360 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	b40e      	push	{r1, r2, r3}
   b4362:	b503      	push	{r0, r1, lr}
   b4364:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4366:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4368:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b436c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b436e:	f00b fcfe 	bl	bfd6e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4372:	b002      	add	sp, #8
   b4374:	f85d eb04 	ldr.w	lr, [sp], #4
   b4378:	b003      	add	sp, #12
   b437a:	4770      	bx	lr

000b437c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b437c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b437e:	4604      	mov	r4, r0
   b4380:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4382:	7922      	ldrb	r2, [r4, #4]
   b4384:	68a3      	ldr	r3, [r4, #8]
   b4386:	b132      	cbz	r2, b4396 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4388:	b9a3      	cbnz	r3, b43b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b438a:	490b      	ldr	r1, [pc, #44]	; (b43b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b438c:	b002      	add	sp, #8
   b438e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4392:	f00b bcab 	b.w	bfcec <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4396:	4a09      	ldr	r2, [pc, #36]	; (b43bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4398:	7b26      	ldrb	r6, [r4, #12]
   b439a:	4d09      	ldr	r5, [pc, #36]	; (b43c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b439c:	4909      	ldr	r1, [pc, #36]	; (b43c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b439e:	7b64      	ldrb	r4, [r4, #13]
   b43a0:	2e01      	cmp	r6, #1
   b43a2:	bf18      	it	ne
   b43a4:	4629      	movne	r1, r5
   b43a6:	e9cd 1400 	strd	r1, r4, [sp]
   b43aa:	4907      	ldr	r1, [pc, #28]	; (b43c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b43ac:	f7ff ffd8 	bl	b4360 <_ZN5Print6printfEPKcz>
  }
   b43b0:	b002      	add	sp, #8
   b43b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b43b4:	4a05      	ldr	r2, [pc, #20]	; (b43cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b43b6:	e7ef      	b.n	b4398 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b43b8:	000c679e 	.word	0x000c679e
   b43bc:	000c7f40 	.word	0x000c7f40
   b43c0:	000c679a 	.word	0x000c679a
   b43c4:	000c6796 	.word	0x000c6796
   b43c8:	000c67b4 	.word	0x000c67b4
   b43cc:	000c678d 	.word	0x000c678d

000b43d0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d0:	b40e      	push	{r1, r2, r3}
   b43d2:	b503      	push	{r0, r1, lr}
   b43d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43de:	f00b fcc6 	bl	bfd6e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43e2:	b002      	add	sp, #8
   b43e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e8:	b003      	add	sp, #12
   b43ea:	4770      	bx	lr

000b43ec <_Z13motionHandlerv>:
void motionHandler(){
   b43ec:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b43ee:	4d2b      	ldr	r5, [pc, #172]	; (b449c <_Z13motionHandlerv+0xb0>)
   b43f0:	782b      	ldrb	r3, [r5, #0]
   b43f2:	bb3b      	cbnz	r3, b4444 <_Z13motionHandlerv+0x58>
   b43f4:	4e2a      	ldr	r6, [pc, #168]	; (b44a0 <_Z13motionHandlerv+0xb4>)
   b43f6:	7833      	ldrb	r3, [r6, #0]
   b43f8:	2b5a      	cmp	r3, #90	; 0x5a
   b43fa:	d023      	beq.n	b4444 <_Z13motionHandlerv+0x58>
   b43fc:	4c29      	ldr	r4, [pc, #164]	; (b44a4 <_Z13motionHandlerv+0xb8>)
   b43fe:	7823      	ldrb	r3, [r4, #0]
   b4400:	2b5a      	cmp	r3, #90	; 0x5a
   b4402:	d01f      	beq.n	b4444 <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4404:	f009 fc2e 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   b4408:	4b27      	ldr	r3, [pc, #156]	; (b44a8 <_Z13motionHandlerv+0xbc>)
   b440a:	681b      	ldr	r3, [r3, #0]
   b440c:	1ac0      	subs	r0, r0, r3
   b440e:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b4412:	d917      	bls.n	b4444 <_Z13motionHandlerv+0x58>
        leftMotorSpeed = 90;
   b4414:	4b25      	ldr	r3, [pc, #148]	; (b44ac <_Z13motionHandlerv+0xc0>)
        ESCL.write(setLSpeed);
   b4416:	4826      	ldr	r0, [pc, #152]	; (b44b0 <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b4418:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b441a:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b441c:	4b25      	ldr	r3, [pc, #148]	; (b44b4 <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b441e:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b4420:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4422:	4b25      	ldr	r3, [pc, #148]	; (b44b8 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4424:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4426:	2201      	movs	r2, #1
   b4428:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b442a:	f00a f91f 	bl	be66c <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b442e:	7821      	ldrb	r1, [r4, #0]
   b4430:	4822      	ldr	r0, [pc, #136]	; (b44bc <_Z13motionHandlerv+0xd0>)
   b4432:	f00a f91b 	bl	be66c <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b4436:	f00d f999 	bl	c176c <_Z16_fetch_usbserialv>
   b443a:	4921      	ldr	r1, [pc, #132]	; (b44c0 <_Z13motionHandlerv+0xd4>)
   b443c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4440:	f7ff ffc6 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b4444:	4e1f      	ldr	r6, [pc, #124]	; (b44c4 <_Z13motionHandlerv+0xd8>)
   b4446:	7834      	ldrb	r4, [r6, #0]
   b4448:	bb3c      	cbnz	r4, b449a <_Z13motionHandlerv+0xae>
   b444a:	782b      	ldrb	r3, [r5, #0]
   b444c:	b32b      	cbz	r3, b449a <_Z13motionHandlerv+0xae>
   b444e:	f009 fc09 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   b4452:	4b1d      	ldr	r3, [pc, #116]	; (b44c8 <_Z13motionHandlerv+0xdc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	1ac0      	subs	r0, r0, r3
   b4458:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b445c:	d91d      	bls.n	b449a <_Z13motionHandlerv+0xae>
        pointArrived = false;
   b445e:	4b1b      	ldr	r3, [pc, #108]	; (b44cc <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b4460:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b4462:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b4464:	4b0e      	ldr	r3, [pc, #56]	; (b44a0 <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b4466:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b4468:	215a      	movs	r1, #90	; 0x5a
   b446a:	7019      	strb	r1, [r3, #0]
        leftMotorSpeed = 90;
   b446c:	4b0f      	ldr	r3, [pc, #60]	; (b44ac <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b446e:	4c0d      	ldr	r4, [pc, #52]	; (b44a4 <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b4470:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b4472:	4b10      	ldr	r3, [pc, #64]	; (b44b4 <_Z13motionHandlerv+0xc8>)
        ESCL.write(setLSpeed);
   b4474:	480e      	ldr	r0, [pc, #56]	; (b44b0 <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b4476:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4478:	4b0f      	ldr	r3, [pc, #60]	; (b44b8 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b447a:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b447c:	2201      	movs	r2, #1
   b447e:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4480:	f00a f8f4 	bl	be66c <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4484:	7821      	ldrb	r1, [r4, #0]
   b4486:	480d      	ldr	r0, [pc, #52]	; (b44bc <_Z13motionHandlerv+0xd0>)
   b4488:	f00a f8f0 	bl	be66c <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b448c:	f00d f96e 	bl	c176c <_Z16_fetch_usbserialv>
   b4490:	490f      	ldr	r1, [pc, #60]	; (b44d0 <_Z13motionHandlerv+0xe4>)
   b4492:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4496:	f7ff ff9b 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
}
   b449a:	bd70      	pop	{r4, r5, r6, pc}
   b449c:	2003ddb1 	.word	0x2003ddb1
   b44a0:	2003e560 	.word	0x2003e560
   b44a4:	2003e561 	.word	0x2003e561
   b44a8:	2003ddf0 	.word	0x2003ddf0
   b44ac:	2003de1c 	.word	0x2003de1c
   b44b0:	2003dd48 	.word	0x2003dd48
   b44b4:	2003e0b9 	.word	0x2003e0b9
   b44b8:	2003e5ec 	.word	0x2003e5ec
   b44bc:	2003dd58 	.word	0x2003dd58
   b44c0:	000c67d1 	.word	0x000c67d1
   b44c4:	2003e5d8 	.word	0x2003e5d8
   b44c8:	2003ddf8 	.word	0x2003ddf8
   b44cc:	2003e0b1 	.word	0x2003e0b1
   b44d0:	000c681b 	.word	0x000c681b

000b44d4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b44d4:	b510      	push	{r4, lr}
      if (_M_manager)
   b44d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b44d8:	4604      	mov	r4, r0
      if (_M_manager)
   b44da:	b113      	cbz	r3, b44e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b44dc:	2203      	movs	r2, #3
   b44de:	4601      	mov	r1, r0
   b44e0:	4798      	blx	r3
    }
   b44e2:	4620      	mov	r0, r4
   b44e4:	bd10      	pop	{r4, pc}
	...

000b44e8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b44e8:	b538      	push	{r3, r4, r5, lr}
   b44ea:	4b10      	ldr	r3, [pc, #64]	; (b452c <_ZN5TimerD1Ev+0x44>)
   b44ec:	6003      	str	r3, [r0, #0]
        if (handle) {
   b44ee:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b44f0:	4604      	mov	r4, r0
        if (handle) {
   b44f2:	b1a3      	cbz	r3, b451e <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b44f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b44f8:	2200      	movs	r2, #0
   b44fa:	f7ff fea4 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
            os_timer_set_id(handle, nullptr);
   b44fe:	68a0      	ldr	r0, [r4, #8]
   b4500:	2100      	movs	r1, #0
   b4502:	f009 fc99 	bl	bde38 <os_timer_set_id>
            while (running) {
   b4506:	7923      	ldrb	r3, [r4, #4]
   b4508:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b450c:	b113      	cbz	r3, b4514 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   b450e:	f009 fc43 	bl	bdd98 <os_thread_yield>
            while (running) {
   b4512:	e7f8      	b.n	b4506 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   b4514:	68a0      	ldr	r0, [r4, #8]
   b4516:	4629      	mov	r1, r5
   b4518:	f009 fc56 	bl	bddc8 <os_timer_destroy>
            handle = nullptr;
   b451c:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b451e:	f104 000c 	add.w	r0, r4, #12
   b4522:	f7ff ffd7 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    }
   b4526:	4620      	mov	r0, r4
   b4528:	bd38      	pop	{r3, r4, r5, pc}
   b452a:	bf00      	nop
   b452c:	000c6dfc 	.word	0x000c6dfc

000b4530 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4530:	b510      	push	{r4, lr}
   b4532:	4604      	mov	r4, r0
    }
   b4534:	f7ff ffd8 	bl	b44e8 <_ZN5TimerD1Ev>
   b4538:	4620      	mov	r0, r4
   b453a:	211c      	movs	r1, #28
   b453c:	f7ff fdb1 	bl	b40a2 <_ZdlPvj>
   b4540:	4620      	mov	r0, r4
   b4542:	bd10      	pop	{r4, pc}

000b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4544:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4546:	468c      	mov	ip, r1
   b4548:	2500      	movs	r5, #0
   b454a:	4914      	ldr	r1, [pc, #80]	; (b459c <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b454c:	7105      	strb	r5, [r0, #4]
   b454e:	4604      	mov	r4, r0
   b4550:	6085      	str	r5, [r0, #8]
   b4552:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4554:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4558:	b085      	sub	sp, #20
   b455a:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b455c:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4560:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4564:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4568:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b456c:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4570:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4574:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4576:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4578:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b457a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b457c:	6095      	str	r5, [r2, #8]
   b457e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4580:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4582:	e9cd 3500 	strd	r3, r5, [sp]
   b4586:	4a06      	ldr	r2, [pc, #24]	; (b45a0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4588:	4623      	mov	r3, r4
   b458a:	4661      	mov	r1, ip
   b458c:	f104 0008 	add.w	r0, r4, #8
   b4590:	f009 fc12 	bl	bddb8 <os_timer_create>
    }
   b4594:	4620      	mov	r0, r4
   b4596:	b005      	add	sp, #20
   b4598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b459a:	bf00      	nop
   b459c:	000c6dfc 	.word	0x000c6dfc
   b45a0:	000b41ab 	.word	0x000b41ab

000b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b45a4:	b510      	push	{r4, lr}
   b45a6:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b45a8:	2200      	movs	r2, #0
   b45aa:	7c40      	ldrb	r0, [r0, #17]
   b45ac:	f009 fe06 	bl	be1bc <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b45b0:	7c63      	ldrb	r3, [r4, #17]
   b45b2:	2b0f      	cmp	r3, #15
        d_.period = period;
   b45b4:	bf18      	it	ne
   b45b6:	8320      	strhne	r0, [r4, #24]
}
   b45b8:	bd10      	pop	{r4, pc}
	...

000b45bc <_Z10LEDHandlerv>:

//ISR timer to update the color and pattern of the LED based on the status of the system
void LEDHandler(){
   b45bc:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    //Special LED Modes
    if(shutdownActive){     //The user is holding down the power off button
   b45be:	4b2e      	ldr	r3, [pc, #184]	; (b4678 <_Z10LEDHandlerv+0xbc>)
   b45c0:	781a      	ldrb	r2, [r3, #0]
   b45c2:	4b2e      	ldr	r3, [pc, #184]	; (b467c <_Z10LEDHandlerv+0xc0>)
   b45c4:	b162      	cbz	r2, b45e0 <_Z10LEDHandlerv+0x24>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45c6:	7c5a      	ldrb	r2, [r3, #17]
   b45c8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45ca:	bf1c      	itt	ne
   b45cc:	2202      	movne	r2, #2
   b45ce:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45d0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b45d4:	615a      	str	r2, [r3, #20]
        return;                
    }
    if(signalLED){          //The user has enabled the "Signal" menu item
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b45d6:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b45d8:	4828      	ldr	r0, [pc, #160]	; (b467c <_Z10LEDHandlerv+0xc0>)
   b45da:	f7ff ffe3 	bl	b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b45de:	bd10      	pop	{r4, pc}
    if(stopActive){         //The user has pressed the stop button on the CChub
   b45e0:	4a27      	ldr	r2, [pc, #156]	; (b4680 <_Z10LEDHandlerv+0xc4>)
   b45e2:	7812      	ldrb	r2, [r2, #0]
   b45e4:	b132      	cbz	r2, b45f4 <_Z10LEDHandlerv+0x38>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45e6:	7c5a      	ldrb	r2, [r3, #17]
   b45e8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45ea:	bf1c      	itt	ne
   b45ec:	2202      	movne	r2, #2
   b45ee:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45f0:	4a24      	ldr	r2, [pc, #144]	; (b4684 <_Z10LEDHandlerv+0xc8>)
   b45f2:	e7ef      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(offloadMode){        //The CChub is offloading data over BLE
   b45f4:	4a24      	ldr	r2, [pc, #144]	; (b4688 <_Z10LEDHandlerv+0xcc>)
   b45f6:	7812      	ldrb	r2, [r2, #0]
   b45f8:	b132      	cbz	r2, b4608 <_Z10LEDHandlerv+0x4c>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45fa:	7c5a      	ldrb	r2, [r3, #17]
   b45fc:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45fe:	bf1c      	itt	ne
   b4600:	2202      	movne	r2, #2
   b4602:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4604:	22ff      	movs	r2, #255	; 0xff
   b4606:	e7e5      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(signalLED){          //The user has enabled the "Signal" menu item
   b4608:	4a20      	ldr	r2, [pc, #128]	; (b468c <_Z10LEDHandlerv+0xd0>)
   b460a:	7812      	ldrb	r2, [r2, #0]
   b460c:	b132      	cbz	r2, b461c <_Z10LEDHandlerv+0x60>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b460e:	7c5a      	ldrb	r2, [r3, #17]
   b4610:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4612:	bf1c      	itt	ne
   b4614:	2202      	movne	r2, #2
   b4616:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4618:	4a1d      	ldr	r2, [pc, #116]	; (b4690 <_Z10LEDHandlerv+0xd4>)
   b461a:	e7db      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(lowBattery){     //Flash the status color quickly if the battery is low
   b461c:	4a1d      	ldr	r2, [pc, #116]	; (b4694 <_Z10LEDHandlerv+0xd8>)
   b461e:	7812      	ldrb	r2, [r2, #0]
   b4620:	bb1a      	cbnz	r2, b466a <_Z10LEDHandlerv+0xae>
    else if(driveMode == 2){    //If we're in autonomous mode, do a fade pattern
   b4622:	4a1d      	ldr	r2, [pc, #116]	; (b4698 <_Z10LEDHandlerv+0xdc>)
   b4624:	7812      	ldrb	r2, [r2, #0]
   b4626:	2a02      	cmp	r2, #2
   b4628:	d022      	beq.n	b4670 <_Z10LEDHandlerv+0xb4>
        SetSpeed = LED_SPEED_NORMAL;
   b462a:	2a01      	cmp	r2, #1
   b462c:	bf0b      	itete	eq
   b462e:	210a      	moveq	r1, #10
   b4630:	2114      	movne	r1, #20
   b4632:	2002      	moveq	r0, #2
   b4634:	2001      	movne	r0, #1
    statusMode |= XBeeAvail << 1;
   b4636:	4a19      	ldr	r2, [pc, #100]	; (b469c <_Z10LEDHandlerv+0xe0>)
   b4638:	7814      	ldrb	r4, [r2, #0]
    statusMode |= BLEAvail << 2;
   b463a:	4a19      	ldr	r2, [pc, #100]	; (b46a0 <_Z10LEDHandlerv+0xe4>)
   b463c:	7812      	ldrb	r2, [r2, #0]
   b463e:	0092      	lsls	r2, r2, #2
   b4640:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    statusMode = LTEAvail;          //Create bit mask with each of the available mode shifted into different bits
   b4644:	4c17      	ldr	r4, [pc, #92]	; (b46a4 <_Z10LEDHandlerv+0xe8>)
    statusMode |= BLEAvail << 2;
   b4646:	7824      	ldrb	r4, [r4, #0]
   b4648:	4322      	orrs	r2, r4
   b464a:	3a01      	subs	r2, #1
   b464c:	b2d2      	uxtb	r2, r2
   b464e:	2a06      	cmp	r2, #6
   b4650:	bf9c      	itt	ls
   b4652:	4c15      	ldrls	r4, [pc, #84]	; (b46a8 <_Z10LEDHandlerv+0xec>)
   b4654:	f854 2022 	ldrls.w	r2, [r4, r2, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4658:	7c5c      	ldrb	r4, [r3, #17]
    switch (statusMode){
   b465a:	bf88      	it	hi
   b465c:	f44f 027f 	movhi.w	r2, #16711680	; 0xff0000
   b4660:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b4662:	bf18      	it	ne
   b4664:	7458      	strbne	r0, [r3, #17]
    d_.color = color;
   b4666:	615a      	str	r2, [r3, #20]
   b4668:	e7b6      	b.n	b45d8 <_Z10LEDHandlerv+0x1c>
        SetSpeed = LED_SPEED_NORMAL;
   b466a:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b466c:	2002      	movs	r0, #2
   b466e:	e7e2      	b.n	b4636 <_Z10LEDHandlerv+0x7a>
        SetSpeed = LED_SPEED_NORMAL;
   b4670:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_FADE;
   b4672:	2003      	movs	r0, #3
   b4674:	e7df      	b.n	b4636 <_Z10LEDHandlerv+0x7a>
   b4676:	bf00      	nop
   b4678:	2003e562 	.word	0x2003e562
   b467c:	2003e588 	.word	0x2003e588
   b4680:	2003e5c9 	.word	0x2003e5c9
   b4684:	00ffff00 	.word	0x00ffff00
   b4688:	2003e0b0 	.word	0x2003e0b0
   b468c:	2003e580 	.word	0x2003e580
   b4690:	00ff6000 	.word	0x00ff6000
   b4694:	2003dedc 	.word	0x2003dedc
   b4698:	2003ddb1 	.word	0x2003ddb1
   b469c:	2003dd7c 	.word	0x2003dd7c
   b46a0:	2003dd34 	.word	0x2003dd34
   b46a4:	2003dd69 	.word	0x2003dd69
   b46a8:	000c6f30 	.word	0x000c6f30

000b46ac <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b46ac:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b46ae:	460a      	mov	r2, r1
   b46b0:	4901      	ldr	r1, [pc, #4]	; (b46b8 <_ZN7FatFile4openEPKci+0xc>)
   b46b2:	6809      	ldr	r1, [r1, #0]
   b46b4:	f003 b88f 	b.w	b77d6 <_ZN7FatFile4openEPS_PKci>
   b46b8:	2003e610 	.word	0x2003e610

000b46bc <_Z11wdogHandlerv>:
void wdogHandler(){
   b46bc:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46be:	f009 fe09 	bl	be2d4 <spark_cloud_flag_connected>
   b46c2:	4c2e      	ldr	r4, [pc, #184]	; (b477c <_Z11wdogHandlerv+0xc0>)
    if(Particle.connected()) LTEAvail = true;   //If particle cloud is connected, assume that LTE is available
   b46c4:	b308      	cbz	r0, b470a <_Z11wdogHandlerv+0x4e>
   b46c6:	2301      	movs	r3, #1
        LTEAvail = false;
   b46c8:	7023      	strb	r3, [r4, #0]
   b46ca:	f009 facb 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){   //If the time since the last XBee message is too long, print warning and set status flag to false
   b46ce:	4b2c      	ldr	r3, [pc, #176]	; (b4780 <_Z11wdogHandlerv+0xc4>)
   b46d0:	4c2c      	ldr	r4, [pc, #176]	; (b4784 <_Z11wdogHandlerv+0xc8>)
   b46d2:	681b      	ldr	r3, [r3, #0]
   b46d4:	f247 5230 	movw	r2, #30000	; 0x7530
   b46d8:	1ac0      	subs	r0, r0, r3
   b46da:	4290      	cmp	r0, r2
   b46dc:	d828      	bhi.n	b4730 <_Z11wdogHandlerv+0x74>
   b46de:	b33b      	cbz	r3, b4730 <_Z11wdogHandlerv+0x74>
    else XBeeAvail = true;
   b46e0:	2301      	movs	r3, #1
        XBeeAvail = false;
   b46e2:	7023      	strb	r3, [r4, #0]
   b46e4:	f009 fabe 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){      //If the time since the last BLE message is too long, print warning and set status flag to false
   b46e8:	4b27      	ldr	r3, [pc, #156]	; (b4788 <_Z11wdogHandlerv+0xcc>)
   b46ea:	4c28      	ldr	r4, [pc, #160]	; (b478c <_Z11wdogHandlerv+0xd0>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	f247 5230 	movw	r2, #30000	; 0x7530
   b46f2:	1ac0      	subs	r0, r0, r3
   b46f4:	4290      	cmp	r0, r2
   b46f6:	d82d      	bhi.n	b4754 <_Z11wdogHandlerv+0x98>
   b46f8:	b363      	cbz	r3, b4754 <_Z11wdogHandlerv+0x98>
    else BLEAvail = true;
   b46fa:	2301      	movs	r3, #1
        BLEAvail = false;
   b46fc:	7023      	strb	r3, [r4, #0]
    if(stopActive) stopActive = false;                          //Set stop to false in case the CChub somehow crashed (though we have already entered a "float" mode where drivemode = 0)
   b46fe:	4b24      	ldr	r3, [pc, #144]	; (b4790 <_Z11wdogHandlerv+0xd4>)
   b4700:	781a      	ldrb	r2, [r3, #0]
   b4702:	b10a      	cbz	r2, b4708 <_Z11wdogHandlerv+0x4c>
   b4704:	2200      	movs	r2, #0
   b4706:	701a      	strb	r2, [r3, #0]
}
   b4708:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b470a:	7823      	ldrb	r3, [r4, #0]
   b470c:	2b00      	cmp	r3, #0
   b470e:	d0dc      	beq.n	b46ca <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4710:	4820      	ldr	r0, [pc, #128]	; (b4794 <_Z11wdogHandlerv+0xd8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4712:	7c03      	ldrb	r3, [r0, #16]
   b4714:	b92b      	cbnz	r3, b4722 <_Z11wdogHandlerv+0x66>
   b4716:	4920      	ldr	r1, [pc, #128]	; (b4798 <_Z11wdogHandlerv+0xdc>)
   b4718:	f244 2202 	movw	r2, #16898	; 0x4202
   b471c:	3010      	adds	r0, #16
   b471e:	f7ff ffc5 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] LTE Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4722:	491e      	ldr	r1, [pc, #120]	; (b479c <_Z11wdogHandlerv+0xe0>)
   b4724:	481b      	ldr	r0, [pc, #108]	; (b4794 <_Z11wdogHandlerv+0xd8>)
   b4726:	221e      	movs	r2, #30
   b4728:	f7ff fe52 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b472c:	2300      	movs	r3, #0
   b472e:	e7cb      	b.n	b46c8 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4730:	7823      	ldrb	r3, [r4, #0]
   b4732:	b16b      	cbz	r3, b4750 <_Z11wdogHandlerv+0x94>
   b4734:	4817      	ldr	r0, [pc, #92]	; (b4794 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4736:	7c03      	ldrb	r3, [r0, #16]
   b4738:	b92b      	cbnz	r3, b4746 <_Z11wdogHandlerv+0x8a>
   b473a:	4917      	ldr	r1, [pc, #92]	; (b4798 <_Z11wdogHandlerv+0xdc>)
   b473c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4740:	3010      	adds	r0, #16
   b4742:	f7ff ffb3 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4746:	4916      	ldr	r1, [pc, #88]	; (b47a0 <_Z11wdogHandlerv+0xe4>)
   b4748:	4812      	ldr	r0, [pc, #72]	; (b4794 <_Z11wdogHandlerv+0xd8>)
   b474a:	221e      	movs	r2, #30
   b474c:	f7ff fe40 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4750:	2300      	movs	r3, #0
   b4752:	e7c6      	b.n	b46e2 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b4754:	7822      	ldrb	r2, [r4, #0]
   b4756:	b172      	cbz	r2, b4776 <_Z11wdogHandlerv+0xba>
   b4758:	b16b      	cbz	r3, b4776 <_Z11wdogHandlerv+0xba>
   b475a:	480e      	ldr	r0, [pc, #56]	; (b4794 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b475c:	7c03      	ldrb	r3, [r0, #16]
   b475e:	b92b      	cbnz	r3, b476c <_Z11wdogHandlerv+0xb0>
   b4760:	490d      	ldr	r1, [pc, #52]	; (b4798 <_Z11wdogHandlerv+0xdc>)
   b4762:	f244 2202 	movw	r2, #16898	; 0x4202
   b4766:	3010      	adds	r0, #16
   b4768:	f7ff ffa0 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b476c:	490d      	ldr	r1, [pc, #52]	; (b47a4 <_Z11wdogHandlerv+0xe8>)
   b476e:	4809      	ldr	r0, [pc, #36]	; (b4794 <_Z11wdogHandlerv+0xd8>)
   b4770:	221e      	movs	r2, #30
   b4772:	f7ff fe2d 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b4776:	2300      	movs	r3, #0
   b4778:	e7c0      	b.n	b46fc <_Z11wdogHandlerv+0x40>
   b477a:	bf00      	nop
   b477c:	2003dd69 	.word	0x2003dd69
   b4780:	2003dd80 	.word	0x2003dd80
   b4784:	2003dd7c 	.word	0x2003dd7c
   b4788:	2003dd40 	.word	0x2003dd40
   b478c:	2003dd34 	.word	0x2003dd34
   b4790:	2003e5c9 	.word	0x2003e5c9
   b4794:	2003de7c 	.word	0x2003de7c
   b4798:	2003ddd0 	.word	0x2003ddd0
   b479c:	000c6875 	.word	0x000c6875
   b47a0:	000c68c5 	.word	0x000c68c5
   b47a4:	000c6916 	.word	0x000c6916

000b47a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47a8:	b530      	push	{r4, r5, lr}
   b47aa:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b47ac:	4b1b      	ldr	r3, [pc, #108]	; (b481c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b47ae:	9300      	str	r3, [sp, #0]
   b47b0:	7913      	ldrb	r3, [r2, #4]
   b47b2:	f88d 3004 	strb.w	r3, [sp, #4]
   b47b6:	6893      	ldr	r3, [r2, #8]
   b47b8:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47ba:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47be:	8993      	ldrh	r3, [r2, #12]
   b47c0:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47c4:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47c6:	460a      	mov	r2, r1
   b47c8:	466b      	mov	r3, sp
   b47ca:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b47ce:	4628      	mov	r0, r5
   b47d0:	f003 fb8a 	bl	b7ee8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b47d4:	b910      	cbnz	r0, b47dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b47d6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b47d8:	b005      	add	sp, #20
   b47da:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b47dc:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b47de:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b47e2:	4628      	mov	r0, r5
   b47e4:	f002 fff0 	bl	b77c8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b47e8:	2101      	movs	r1, #1
   b47ea:	4620      	mov	r0, r4
   b47ec:	f003 fa26 	bl	b7c3c <_ZN9FatVolume4initEh>
   b47f0:	4601      	mov	r1, r0
   b47f2:	b168      	cbz	r0, b4810 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b47f4:	4621      	mov	r1, r4
   b47f6:	4628      	mov	r0, r5
   b47f8:	f002 fde0 	bl	b73bc <_ZN7FatFile8openRootEP9FatVolume>
   b47fc:	2800      	cmp	r0, #0
   b47fe:	d0ea      	beq.n	b47d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4800:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4804:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4808:	d0e5      	beq.n	b47d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b480a:	4b05      	ldr	r3, [pc, #20]	; (b4820 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b480c:	601d      	str	r5, [r3, #0]
    return true;
   b480e:	e7e3      	b.n	b47d8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4810:	4620      	mov	r0, r4
   b4812:	f003 fa13 	bl	b7c3c <_ZN9FatVolume4initEh>
   b4816:	2800      	cmp	r0, #0
   b4818:	d1ec      	bne.n	b47f4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b481a:	e7dc      	b.n	b47d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b481c:	000c6de8 	.word	0x000c6de8
   b4820:	2003e610 	.word	0x2003e610

000b4824 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4828:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b482a:	7883      	ldrb	r3, [r0, #2]
   b482c:	2b42      	cmp	r3, #66	; 0x42
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b482e:	af04      	add	r7, sp, #16
   b4830:	4604      	mov	r4, r0
   b4832:	468a      	mov	sl, r1
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b4834:	d14e      	bne.n	b48d4 <_Z14processCommandPKchb+0xb0>
   b4836:	78c3      	ldrb	r3, [r0, #3]
   b4838:	2b31      	cmp	r3, #49	; 0x31
   b483a:	f040 80ef 	bne.w	b4a1c <_Z14processCommandPKchb+0x1f8>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b483e:	4620      	mov	r0, r4
   b4840:	f00f ff75 	bl	c472e <strlen>
   b4844:	3801      	subs	r0, #1
   b4846:	f020 0007 	bic.w	r0, r0, #7
        }
   b484a:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b484c:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b4850:	4620      	mov	r0, r4
   b4852:	f00f ff6c 	bl	c472e <strlen>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b4856:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b4858:	4428      	add	r0, r5
   b485a:	2600      	movs	r6, #0
   b485c:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4860:	4620      	mov	r0, r4
        cmdStr[3] = '\0';                   //Set null at end of command string
   b4862:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4864:	813e      	strh	r6, [r7, #8]
   b4866:	72be      	strb	r6, [r7, #10]
   b4868:	f00f ff61 	bl	c472e <strlen>
   b486c:	4420      	add	r0, r4
   b486e:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4872:	723b      	strb	r3, [r7, #8]
   b4874:	4620      	mov	r0, r4
   b4876:	f00f ff5a 	bl	c472e <strlen>
   b487a:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b487c:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b487e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4882:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b4884:	2210      	movs	r2, #16
   b4886:	f107 0008 	add.w	r0, r7, #8
   b488a:	f010 fe79 	bl	c5580 <strtol>
   b488e:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4890:	fa5f f888 	uxtb.w	r8, r8
   b4894:	f00c ff6a 	bl	c176c <_Z16_fetch_usbserialv>
   b4898:	49ae      	ldr	r1, [pc, #696]	; (b4b54 <_Z14processCommandPKchb+0x330>)
   b489a:	4643      	mov	r3, r8
   b489c:	4642      	mov	r2, r8
   b489e:	f7ff fd97 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48a2:	2604      	movs	r6, #4
   b48a4:	4620      	mov	r0, r4
   b48a6:	f00f ff42 	bl	c472e <strlen>
   b48aa:	3802      	subs	r0, #2
   b48ac:	4286      	cmp	r6, r0
   b48ae:	d217      	bcs.n	b48e0 <_Z14processCommandPKchb+0xbc>
            if(i < 7) cmdStr[i-4] = command[i];
   b48b0:	2e06      	cmp	r6, #6
   b48b2:	bf9b      	ittet	ls
   b48b4:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b48b8:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b48ba:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b48bc:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b48be:	bf8c      	ite	hi
   b48c0:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b48c2:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48c6:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b48ca:	bf88      	it	hi
   b48cc:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48d0:	b2f6      	uxtb	r6, r6
   b48d2:	e7e7      	b.n	b48a4 <_Z14processCommandPKchb+0x80>
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b48d4:	2b41      	cmp	r3, #65	; 0x41
   b48d6:	f040 80a1 	bne.w	b4a1c <_Z14processCommandPKchb+0x1f8>
   b48da:	78c3      	ldrb	r3, [r0, #3]
   b48dc:	2b42      	cmp	r3, #66	; 0x42
   b48de:	e7ac      	b.n	b483a <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){      //Check if the received checksum matches the length of the string received
   b48e0:	4540      	cmp	r0, r8
   b48e2:	d02a      	beq.n	b493a <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum); //Print to console
   b48e4:	f00c ff42 	bl	c176c <_Z16_fetch_usbserialv>
   b48e8:	4605      	mov	r5, r0
   b48ea:	4620      	mov	r0, r4
   b48ec:	f00f ff1f 	bl	c472e <strlen>
   b48f0:	4643      	mov	r3, r8
   b48f2:	1e82      	subs	r2, r0, #2
   b48f4:	4998      	ldr	r1, [pc, #608]	; (b4b58 <_Z14processCommandPKchb+0x334>)
   b48f6:	4628      	mov	r0, r5
    return m_attr;
   b48f8:	4d98      	ldr	r5, [pc, #608]	; (b4b5c <_Z14processCommandPKchb+0x338>)
   b48fa:	f7ff fd69 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
            Serial.println("Warning, checksum does not match");
   b48fe:	f00c ff35 	bl	c176c <_Z16_fetch_usbserialv>
   b4902:	4997      	ldr	r1, [pc, #604]	; (b4b60 <_Z14processCommandPKchb+0x33c>)
   b4904:	f00b fa09 	bl	bfd1a <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){  //Print to SD Card
   b4908:	7c2b      	ldrb	r3, [r5, #16]
   b490a:	b983      	cbnz	r3, b492e <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b490c:	4995      	ldr	r1, [pc, #596]	; (b4b64 <_Z14processCommandPKchb+0x340>)
   b490e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4912:	f105 0010 	add.w	r0, r5, #16
   b4916:	f7ff fec9 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b491a:	4993      	ldr	r1, [pc, #588]	; (b4b68 <_Z14processCommandPKchb+0x344>)
   b491c:	4622      	mov	r2, r4
   b491e:	4628      	mov	r0, r5
   b4920:	f7ff fd56 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4924:	f105 0010 	add.w	r0, r5, #16
                logFile.close();
   b4928:	f002 ff4e 	bl	b77c8 <_ZN7FatFile5closeEv>
   b492c:	e075      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b492e:	498e      	ldr	r1, [pc, #568]	; (b4b68 <_Z14processCommandPKchb+0x344>)
   b4930:	4622      	mov	r2, r4
   b4932:	4628      	mov	r0, r5
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4934:	f7ff fd4c 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b4938:	e06f      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
        if(!strcmp(cmdStr,"ctl")){      //Control command from CC that contains data about the drive mode, target latitude and longitude, and offloading
   b493a:	498c      	ldr	r1, [pc, #560]	; (b4b6c <_Z14processCommandPKchb+0x348>)
   b493c:	f107 000c 	add.w	r0, r7, #12
   b4940:	f00f fec6 	bl	c46d0 <strcmp>
   b4944:	2800      	cmp	r0, #0
   b4946:	d139      	bne.n	b49bc <_Z14processCommandPKchb+0x198>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b4948:	4b89      	ldr	r3, [pc, #548]	; (b4b70 <_Z14processCommandPKchb+0x34c>)
   b494a:	9302      	str	r3, [sp, #8]
   b494c:	4b89      	ldr	r3, [pc, #548]	; (b4b74 <_Z14processCommandPKchb+0x350>)
   b494e:	9301      	str	r3, [sp, #4]
   b4950:	4b89      	ldr	r3, [pc, #548]	; (b4b78 <_Z14processCommandPKchb+0x354>)
   b4952:	498a      	ldr	r1, [pc, #552]	; (b4b7c <_Z14processCommandPKchb+0x358>)
   b4954:	9300      	str	r3, [sp, #0]
   b4956:	f107 0210 	add.w	r2, r7, #16
   b495a:	f107 031c 	add.w	r3, r7, #28
   b495e:	4628      	mov	r0, r5
   b4960:	f009 fd00 	bl	be364 <sscanf>
            targetLat = atof(tLat);     //Convert latitude string to float
   b4964:	f107 0010 	add.w	r0, r7, #16
   b4968:	f00f fe0e 	bl	c4588 <atof>
   b496c:	ec51 0b10 	vmov	r0, r1, d0
   b4970:	f00f fd96 	bl	c44a0 <__aeabi_d2f>
   b4974:	f8df 827c 	ldr.w	r8, [pc, #636]	; b4bf4 <_Z14processCommandPKchb+0x3d0>
            targetLon = atof(tLon);     //Convert longitude string to float
   b4978:	4e81      	ldr	r6, [pc, #516]	; (b4b80 <_Z14processCommandPKchb+0x35c>)
            targetLat = atof(tLat);     //Convert latitude string to float
   b497a:	f8c8 0000 	str.w	r0, [r8]
            targetLon = atof(tLon);     //Convert longitude string to float
   b497e:	f107 001c 	add.w	r0, r7, #28
   b4982:	f00f fe01 	bl	c4588 <atof>
   b4986:	ec51 0b10 	vmov	r0, r1, d0
   b498a:	f00f fd89 	bl	c44a0 <__aeabi_d2f>
   b498e:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b4990:	f00c feec 	bl	c176c <_Z16_fetch_usbserialv>
   b4994:	4604      	mov	r4, r0
   b4996:	f8d8 0000 	ldr.w	r0, [r8]
   b499a:	f00f fa31 	bl	c3e00 <__aeabi_f2d>
   b499e:	4602      	mov	r2, r0
   b49a0:	460b      	mov	r3, r1
   b49a2:	6830      	ldr	r0, [r6, #0]
   b49a4:	e9c7 2300 	strd	r2, r3, [r7]
   b49a8:	f00f fa2a 	bl	c3e00 <__aeabi_f2d>
   b49ac:	e9cd 0100 	strd	r0, r1, [sp]
   b49b0:	e9d7 2300 	ldrd	r2, r3, [r7]
   b49b4:	4973      	ldr	r1, [pc, #460]	; (b4b84 <_Z14processCommandPKchb+0x360>)
   b49b6:	4620      	mov	r0, r4
   b49b8:	f7ff fd0a 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b49bc:	4972      	ldr	r1, [pc, #456]	; (b4b88 <_Z14processCommandPKchb+0x364>)
   b49be:	f107 000c 	add.w	r0, r7, #12
   b49c2:	f00f fe85 	bl	c46d0 <strcmp>
   b49c6:	4604      	mov	r4, r0
   b49c8:	bb60      	cbnz	r0, b4a24 <_Z14processCommandPKchb+0x200>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};  //Get the first three characters of the data for the left target speed
   b49ca:	782b      	ldrb	r3, [r5, #0]
   b49cc:	743b      	strb	r3, [r7, #16]
   b49ce:	786b      	ldrb	r3, [r5, #1]
   b49d0:	747b      	strb	r3, [r7, #17]
   b49d2:	78ab      	ldrb	r3, [r5, #2]
   b49d4:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49d6:	78eb      	ldrb	r3, [r5, #3]
   b49d8:	773b      	strb	r3, [r7, #28]
   b49da:	792b      	ldrb	r3, [r5, #4]
   b49dc:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49de:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49e2:	796b      	ldrb	r3, [r5, #5]
   b49e4:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49e6:	f00f fdd2 	bl	c458e <atoi>
   b49ea:	4d68      	ldr	r5, [pc, #416]	; (b4b8c <_Z14processCommandPKchb+0x368>)
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49ec:	4e68      	ldr	r6, [pc, #416]	; (b4b90 <_Z14processCommandPKchb+0x36c>)
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49ee:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49f0:	f107 001c 	add.w	r0, r7, #28
   b49f4:	f00f fdcb 	bl	c458e <atoi>
   b49f8:	7030      	strb	r0, [r6, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b49fa:	f00c feb7 	bl	c176c <_Z16_fetch_usbserialv>
   b49fe:	7833      	ldrb	r3, [r6, #0]
   b4a00:	782a      	ldrb	r2, [r5, #0]
   b4a02:	4964      	ldr	r1, [pc, #400]	; (b4b94 <_Z14processCommandPKchb+0x370>)
   b4a04:	f7ff fce4 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
            updateMotorControl = true;      //Set flag to indicate to updateMotors that a new speed has been received
   b4a08:	4b63      	ldr	r3, [pc, #396]	; (b4b98 <_Z14processCommandPKchb+0x374>)
   b4a0a:	2201      	movs	r2, #1
   b4a0c:	701a      	strb	r2, [r3, #0]
   b4a0e:	f009 f929 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();         //Update timer for the watchdog that a motor speed was received from CC hub
   b4a12:	4b62      	ldr	r3, [pc, #392]	; (b4b9c <_Z14processCommandPKchb+0x378>)
   b4a14:	6018      	str	r0, [r3, #0]
            driveMode = 0;                  //In case we missed the switch from an autonomous to manual mode, switch to manual mode
   b4a16:	4b58      	ldr	r3, [pc, #352]	; (b4b78 <_Z14processCommandPKchb+0x354>)
   b4a18:	701c      	strb	r4, [r3, #0]
   b4a1a:	46cd      	mov	sp, r9
}
   b4a1c:	3728      	adds	r7, #40	; 0x28
   b4a1e:	46bd      	mov	sp, r7
   b4a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(!strcmp(cmdStr,"req")){     //Data Request from CChub to get the bundle of sensor data and transmit it out
   b4a24:	495e      	ldr	r1, [pc, #376]	; (b4ba0 <_Z14processCommandPKchb+0x37c>)
   b4a26:	f107 000c 	add.w	r0, r7, #12
   b4a2a:	f00f fe51 	bl	c46d0 <strcmp>
   b4a2e:	b918      	cbnz	r0, b4a38 <_Z14processCommandPKchb+0x214>
            requestActive = mode;           //Set flag, as it's not possible to use 2/3 communication modes in an interrupt handler (which is where processCommand is called from)
   b4a30:	4b5c      	ldr	r3, [pc, #368]	; (b4ba4 <_Z14processCommandPKchb+0x380>)
   b4a32:	f883 a000 	strb.w	sl, [r3]
   b4a36:	e7f0      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"pts")){     //Command used for debugging, which allows the CChub (or any bluetooth device) to print a string to the console and to the SD card
   b4a38:	495b      	ldr	r1, [pc, #364]	; (b4ba8 <_Z14processCommandPKchb+0x384>)
   b4a3a:	f107 000c 	add.w	r0, r7, #12
   b4a3e:	f00f fe47 	bl	c46d0 <strcmp>
   b4a42:	b9d0      	cbnz	r0, b4a7a <_Z14processCommandPKchb+0x256>
   b4a44:	4c45      	ldr	r4, [pc, #276]	; (b4b5c <_Z14processCommandPKchb+0x338>)
            Serial.println(dataStr);        //Print to console
   b4a46:	f00c fe91 	bl	c176c <_Z16_fetch_usbserialv>
   b4a4a:	4629      	mov	r1, r5
   b4a4c:	f00b f965 	bl	bfd1a <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){          //Print to SD card
   b4a50:	7c23      	ldrb	r3, [r4, #16]
   b4a52:	b973      	cbnz	r3, b4a72 <_Z14processCommandPKchb+0x24e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a54:	4943      	ldr	r1, [pc, #268]	; (b4b64 <_Z14processCommandPKchb+0x340>)
   b4a56:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a5a:	f104 0010 	add.w	r0, r4, #16
   b4a5e:	f7ff fe25 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a62:	4952      	ldr	r1, [pc, #328]	; (b4bac <_Z14processCommandPKchb+0x388>)
   b4a64:	462a      	mov	r2, r5
   b4a66:	4620      	mov	r0, r4
   b4a68:	f7ff fcb2 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a6c:	f104 0010 	add.w	r0, r4, #16
   b4a70:	e75a      	b.n	b4928 <_Z14processCommandPKchb+0x104>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a72:	494e      	ldr	r1, [pc, #312]	; (b4bac <_Z14processCommandPKchb+0x388>)
   b4a74:	462a      	mov	r2, r5
   b4a76:	4620      	mov	r0, r4
   b4a78:	e75c      	b.n	b4934 <_Z14processCommandPKchb+0x110>
        else if(!strcmp(cmdStr,"spc")){         //Incoming communication status from CChub, this data is used in addition to control strings to determine which communication methods are available between this bot and CChub
   b4a7a:	494d      	ldr	r1, [pc, #308]	; (b4bb0 <_Z14processCommandPKchb+0x38c>)
   b4a7c:	f107 000c 	add.w	r0, r7, #12
   b4a80:	f00f fe26 	bl	c46d0 <strcmp>
   b4a84:	b920      	cbnz	r0, b4a90 <_Z14processCommandPKchb+0x26c>
   b4a86:	f009 f8ed 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();          //Update timer with the current time, and the watchdog will automatically set the flags based on this timer and the current time
   b4a8a:	4b4a      	ldr	r3, [pc, #296]	; (b4bb4 <_Z14processCommandPKchb+0x390>)
   b4a8c:	6018      	str	r0, [r3, #0]
   b4a8e:	e7c4      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"hwa")){         //Hello-world acknowledge command from the CCHub, which will bring this bot out of pairing mode on startup
   b4a90:	4949      	ldr	r1, [pc, #292]	; (b4bb8 <_Z14processCommandPKchb+0x394>)
   b4a92:	f107 000c 	add.w	r0, r7, #12
   b4a96:	f00f fe1b 	bl	c46d0 <strcmp>
   b4a9a:	b910      	cbnz	r0, b4aa2 <_Z14processCommandPKchb+0x27e>
            waitForConnection = false;          //Setup loop waits for this to be set true before moving into main loop
   b4a9c:	4b47      	ldr	r3, [pc, #284]	; (b4bbc <_Z14processCommandPKchb+0x398>)
   b4a9e:	7018      	strb	r0, [r3, #0]
   b4aa0:	e7bb      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"dmp")){         //Enter SD Card "Dump Mode" for Bluetooth offloading
   b4aa2:	4947      	ldr	r1, [pc, #284]	; (b4bc0 <_Z14processCommandPKchb+0x39c>)
   b4aa4:	f107 000c 	add.w	r0, r7, #12
   b4aa8:	f00f fe12 	bl	c46d0 <strcmp>
   b4aac:	b978      	cbnz	r0, b4ace <_Z14processCommandPKchb+0x2aa>
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4aae:	4b45      	ldr	r3, [pc, #276]	; (b4bc4 <_Z14processCommandPKchb+0x3a0>)
            status.setSpeed(LED_SPEED_FAST);
   b4ab0:	4845      	ldr	r0, [pc, #276]	; (b4bc8 <_Z14processCommandPKchb+0x3a4>)
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4ab2:	2201      	movs	r2, #1
   b4ab4:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4ab6:	4b44      	ldr	r3, [pc, #272]	; (b4bc8 <_Z14processCommandPKchb+0x3a4>)
   b4ab8:	7c5a      	ldrb	r2, [r3, #17]
   b4aba:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4abc:	bf1c      	itt	ne
   b4abe:	2202      	movne	r2, #2
   b4ac0:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4ac2:	211e      	movs	r1, #30
    d_.color = color;
   b4ac4:	22ff      	movs	r2, #255	; 0xff
   b4ac6:	615a      	str	r2, [r3, #20]
   b4ac8:	f7ff fd6c 	bl	b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4acc:	e7a5      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"egp")){         //Emulated GPS point for testing purposes. Set the target latitude and longitude which allows testing of the distance and bearing functions for the GPS and compass
   b4ace:	493f      	ldr	r1, [pc, #252]	; (b4bcc <_Z14processCommandPKchb+0x3a8>)
   b4ad0:	f107 000c 	add.w	r0, r7, #12
   b4ad4:	f00f fdfc 	bl	c46d0 <strcmp>
   b4ad8:	b9e0      	cbnz	r0, b4b14 <_Z14processCommandPKchb+0x2f0>
            sscanf(dataStr,"%s %s",tLat,tLon);      //Scan in the target latitude and longitude from the data string
   b4ada:	f107 0210 	add.w	r2, r7, #16
   b4ade:	f107 031c 	add.w	r3, r7, #28
   b4ae2:	493b      	ldr	r1, [pc, #236]	; (b4bd0 <_Z14processCommandPKchb+0x3ac>)
   b4ae4:	4628      	mov	r0, r5
   b4ae6:	f009 fc3d 	bl	be364 <sscanf>
            latitude = atof(tLat);              //Convert strings with latitude and longitude to a float variable
   b4aea:	f107 0010 	add.w	r0, r7, #16
   b4aee:	f00f fd4b 	bl	c4588 <atof>
   b4af2:	ec51 0b10 	vmov	r0, r1, d0
   b4af6:	f00f fcd3 	bl	c44a0 <__aeabi_d2f>
   b4afa:	4b36      	ldr	r3, [pc, #216]	; (b4bd4 <_Z14processCommandPKchb+0x3b0>)
   b4afc:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b4afe:	f107 001c 	add.w	r0, r7, #28
   b4b02:	f00f fd41 	bl	c4588 <atof>
   b4b06:	ec51 0b10 	vmov	r0, r1, d0
   b4b0a:	f00f fcc9 	bl	c44a0 <__aeabi_d2f>
   b4b0e:	4b32      	ldr	r3, [pc, #200]	; (b4bd8 <_Z14processCommandPKchb+0x3b4>)
   b4b10:	6018      	str	r0, [r3, #0]
   b4b12:	e782      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"stp")){         //Stop Command (Emergency stop for motors)
   b4b14:	4931      	ldr	r1, [pc, #196]	; (b4bdc <_Z14processCommandPKchb+0x3b8>)
   b4b16:	f107 000c 	add.w	r0, r7, #12
   b4b1a:	f00f fdd9 	bl	c46d0 <strcmp>
   b4b1e:	2800      	cmp	r0, #0
   b4b20:	f47f af7b 	bne.w	b4a1a <_Z14processCommandPKchb+0x1f6>
            driveMode = 0;                      //Set drive mode back to manual mode
   b4b24:	4b14      	ldr	r3, [pc, #80]	; (b4b78 <_Z14processCommandPKchb+0x354>)
   b4b26:	7018      	strb	r0, [r3, #0]
            setLSpeed = 90;                     //Stop motors
   b4b28:	4b18      	ldr	r3, [pc, #96]	; (b4b8c <_Z14processCommandPKchb+0x368>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b2a:	482d      	ldr	r0, [pc, #180]	; (b4be0 <_Z14processCommandPKchb+0x3bc>)
            setLSpeed = 90;                     //Stop motors
   b4b2c:	245a      	movs	r4, #90	; 0x5a
   b4b2e:	701c      	strb	r4, [r3, #0]
            setRSpeed = 90;                 
   b4b30:	4b17      	ldr	r3, [pc, #92]	; (b4b90 <_Z14processCommandPKchb+0x36c>)
   b4b32:	701c      	strb	r4, [r3, #0]
            leftMotorSpeed = 90;                //Immediately stop motors (no ramp)
   b4b34:	4b2b      	ldr	r3, [pc, #172]	; (b4be4 <_Z14processCommandPKchb+0x3c0>)
   b4b36:	701c      	strb	r4, [r3, #0]
            rightMotorSpeed = 90;
   b4b38:	4b2b      	ldr	r3, [pc, #172]	; (b4be8 <_Z14processCommandPKchb+0x3c4>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b3a:	4621      	mov	r1, r4
            rightMotorSpeed = 90;
   b4b3c:	701c      	strb	r4, [r3, #0]
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b3e:	f009 fd95 	bl	be66c <_ZN5Servo5writeEi>
            ESCR.write(90);
   b4b42:	482a      	ldr	r0, [pc, #168]	; (b4bec <_Z14processCommandPKchb+0x3c8>)
   b4b44:	4621      	mov	r1, r4
   b4b46:	f009 fd91 	bl	be66c <_ZN5Servo5writeEi>
            stopActive = true;                  //Set flag to indicate that stop was hit
   b4b4a:	4b29      	ldr	r3, [pc, #164]	; (b4bf0 <_Z14processCommandPKchb+0x3cc>)
   b4b4c:	2201      	movs	r2, #1
   b4b4e:	701a      	strb	r2, [r3, #0]
   b4b50:	e763      	b.n	b4a1a <_Z14processCommandPKchb+0x1f6>
   b4b52:	bf00      	nop
   b4b54:	000c6965 	.word	0x000c6965
   b4b58:	000c697a 	.word	0x000c697a
   b4b5c:	2003de7c 	.word	0x2003de7c
   b4b60:	000c6997 	.word	0x000c6997
   b4b64:	2003ddd0 	.word	0x2003ddd0
   b4b68:	000c69b8 	.word	0x000c69b8
   b4b6c:	000c69e4 	.word	0x000c69e4
   b4b70:	2003e580 	.word	0x2003e580
   b4b74:	2003ded5 	.word	0x2003ded5
   b4b78:	2003ddb1 	.word	0x2003ddb1
   b4b7c:	000c69e8 	.word	0x000c69e8
   b4b80:	2003e5d4 	.word	0x2003e5d4
   b4b84:	000c69f7 	.word	0x000c69f7
   b4b88:	000c6a17 	.word	0x000c6a17
   b4b8c:	2003e560 	.word	0x2003e560
   b4b90:	2003e561 	.word	0x2003e561
   b4b94:	000c6a1b 	.word	0x000c6a1b
   b4b98:	2003e5ec 	.word	0x2003e5ec
   b4b9c:	2003ddf0 	.word	0x2003ddf0
   b4ba0:	000c6a47 	.word	0x000c6a47
   b4ba4:	2003e0b8 	.word	0x2003e0b8
   b4ba8:	000c6a4b 	.word	0x000c6a4b
   b4bac:	000c6a4f 	.word	0x000c6a4f
   b4bb0:	000c6a72 	.word	0x000c6a72
   b4bb4:	2003ddf4 	.word	0x2003ddf4
   b4bb8:	000c6a76 	.word	0x000c6a76
   b4bbc:	2003e5ed 	.word	0x2003e5ed
   b4bc0:	000c6a7a 	.word	0x000c6a7a
   b4bc4:	2003e0b0 	.word	0x2003e0b0
   b4bc8:	2003e588 	.word	0x2003e588
   b4bcc:	000c6a7e 	.word	0x000c6a7e
   b4bd0:	000c6a82 	.word	0x000c6a82
   b4bd4:	2003ddfc 	.word	0x2003ddfc
   b4bd8:	2003ded8 	.word	0x2003ded8
   b4bdc:	000c6a88 	.word	0x000c6a88
   b4be0:	2003dd48 	.word	0x2003dd48
   b4be4:	2003de1c 	.word	0x2003de1c
   b4be8:	2003e0b9 	.word	0x2003e0b9
   b4bec:	2003dd58 	.word	0x2003dd58
   b4bf0:	2003e5c9 	.word	0x2003e5c9
   b4bf4:	2003e5d0 	.word	0x2003e5d0

000b4bf8 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4bf8:	b510      	push	{r4, lr}
   b4bfa:	460c      	mov	r4, r1
    processCommand(data, 4,false);      //Pass received string directly to the processCommand directory
   b4bfc:	2200      	movs	r2, #0
   b4bfe:	2104      	movs	r1, #4
   b4c00:	4620      	mov	r0, r4
   b4c02:	f7ff fe0f 	bl	b4824 <_Z14processCommandPKchb>
    if(logMessages){                    //Log message to the SD card for later debugging
   b4c06:	4b0b      	ldr	r3, [pc, #44]	; (b4c34 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4c08:	781b      	ldrb	r3, [r3, #0]
   b4c0a:	b193      	cbz	r3, b4c32 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4c0c:	480a      	ldr	r0, [pc, #40]	; (b4c38 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c0e:	7c03      	ldrb	r3, [r0, #16]
   b4c10:	b92b      	cbnz	r3, b4c1e <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4c12:	490a      	ldr	r1, [pc, #40]	; (b4c3c <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4c14:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c18:	3010      	adds	r0, #16
   b4c1a:	f7ff fd47 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4c1e:	4622      	mov	r2, r4
   b4c20:	4907      	ldr	r1, [pc, #28]	; (b4c40 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4c22:	4805      	ldr	r0, [pc, #20]	; (b4c38 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4c24:	f7ff fbd4 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
}
   b4c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4c2c:	4805      	ldr	r0, [pc, #20]	; (b4c44 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4c2e:	f002 bdcb 	b.w	b77c8 <_ZN7FatFile5closeEv>
}
   b4c32:	bd10      	pop	{r4, pc}
   b4c34:	2003ded4 	.word	0x2003ded4
   b4c38:	2003de7c 	.word	0x2003de7c
   b4c3c:	2003ddd0 	.word	0x2003ddd0
   b4c40:	000c6a8c 	.word	0x000c6a8c
   b4c44:	2003de8c 	.word	0x2003de8c

000b4c48 <_Z15LTEInputCommand6String>:
    }
    else logFile.println(message);
}

//Particle function for processing a debug string, for testing things like an emulated GPS point
int LTEInputCommand(String cmd){
   b4c48:	b500      	push	{lr}
   b4c4a:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4c4c:	2300      	movs	r3, #0
   b4c4e:	2264      	movs	r2, #100	; 0x64
   b4c50:	a901      	add	r1, sp, #4
   b4c52:	f009 fe67 	bl	be924 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b4c56:	2104      	movs	r1, #4
   b4c58:	2200      	movs	r2, #0
   b4c5a:	eb0d 0001 	add.w	r0, sp, r1
   b4c5e:	f7ff fde1 	bl	b4824 <_Z14processCommandPKchb>
    if(logMessages){
   b4c62:	4b0c      	ldr	r3, [pc, #48]	; (b4c94 <_Z15LTEInputCommand6String+0x4c>)
   b4c64:	781b      	ldrb	r3, [r3, #0]
   b4c66:	b183      	cbz	r3, b4c8a <_Z15LTEInputCommand6String+0x42>
   b4c68:	480b      	ldr	r0, [pc, #44]	; (b4c98 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c6a:	7c03      	ldrb	r3, [r0, #16]
   b4c6c:	b92b      	cbnz	r3, b4c7a <_Z15LTEInputCommand6String+0x32>
   b4c6e:	490b      	ldr	r1, [pc, #44]	; (b4c9c <_Z15LTEInputCommand6String+0x54>)
   b4c70:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c74:	3010      	adds	r0, #16
   b4c76:	f7ff fd19 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b4c7a:	4909      	ldr	r1, [pc, #36]	; (b4ca0 <_Z15LTEInputCommand6String+0x58>)
   b4c7c:	4806      	ldr	r0, [pc, #24]	; (b4c98 <_Z15LTEInputCommand6String+0x50>)
   b4c7e:	aa01      	add	r2, sp, #4
   b4c80:	f7ff fba6 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4c84:	4807      	ldr	r0, [pc, #28]	; (b4ca4 <_Z15LTEInputCommand6String+0x5c>)
   b4c86:	f002 fd9f 	bl	b77c8 <_ZN7FatFile5closeEv>
    }
    return 1;
   b4c8a:	2001      	movs	r0, #1
   b4c8c:	b01b      	add	sp, #108	; 0x6c
   b4c8e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4c92:	bf00      	nop
   b4c94:	2003ded4 	.word	0x2003ded4
   b4c98:	2003de7c 	.word	0x2003de7c
   b4c9c:	2003ddd0 	.word	0x2003ddd0
   b4ca0:	000c6a8c 	.word	0x000c6a8c
   b4ca4:	2003de8c 	.word	0x2003de8c

000b4ca8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4ca8:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];                                              //Create character array for the received command
   b4caa:	f101 0308 	add.w	r3, r1, #8
   b4cae:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4cb2:	af00      	add	r7, sp, #0
    char btBuf[len+1];                                              //Create character array for the received command
   b4cb4:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4cb8:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];       //Convert byte array into character array
   b4cba:	460a      	mov	r2, r1
   b4cbc:	4601      	mov	r1, r0
   b4cbe:	4668      	mov	r0, sp
   b4cc0:	f00f fc82 	bl	c45c8 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4cc4:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];                                              //Create character array for the received command
   b4cc8:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4cca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4cce:	b113      	cbz	r3, b4cd6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4cd0:	2300      	movs	r3, #0
   b4cd2:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4cd6:	f00c fd49 	bl	c176c <_Z16_fetch_usbserialv>
   b4cda:	4916      	ldr	r1, [pc, #88]	; (b4d34 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4cdc:	f00b f81d 	bl	bfd1a <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);                                          //Print out command for debugging purposes
   b4ce0:	f00c fd44 	bl	c176c <_Z16_fetch_usbserialv>
   b4ce4:	4629      	mov	r1, r5
   b4ce6:	f00b f818 	bl	bfd1a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);                                   //Process the command received over BLE using the dictionary
   b4cea:	2201      	movs	r2, #1
   b4cec:	4611      	mov	r1, r2
   b4cee:	4628      	mov	r0, r5
   b4cf0:	f7ff fd98 	bl	b4824 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();    //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b4cf4:	782b      	ldrb	r3, [r5, #0]
   b4cf6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4cfa:	2b41      	cmp	r3, #65	; 0x41
   b4cfc:	d103      	bne.n	b4d06 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4cfe:	f008 ffb1 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   b4d02:	4b0d      	ldr	r3, [pc, #52]	; (b4d38 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4d04:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4d06:	4b0d      	ldr	r3, [pc, #52]	; (b4d3c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4d08:	781b      	ldrb	r3, [r3, #0]
   b4d0a:	b183      	cbz	r3, b4d2e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4d0c:	480c      	ldr	r0, [pc, #48]	; (b4d40 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4d0e:	7c03      	ldrb	r3, [r0, #16]
   b4d10:	b92b      	cbnz	r3, b4d1e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4d12:	490c      	ldr	r1, [pc, #48]	; (b4d44 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4d14:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d18:	3010      	adds	r0, #16
   b4d1a:	f7ff fcc7 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4d1e:	490a      	ldr	r1, [pc, #40]	; (b4d48 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4d20:	4807      	ldr	r0, [pc, #28]	; (b4d40 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4d22:	462a      	mov	r2, r5
   b4d24:	f7ff fb54 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4d28:	4808      	ldr	r0, [pc, #32]	; (b4d4c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4d2a:	f002 fd4d 	bl	b77c8 <_ZN7FatFile5closeEv>
}
   b4d2e:	46bd      	mov	sp, r7
   b4d30:	bdb0      	pop	{r4, r5, r7, pc}
   b4d32:	bf00      	nop
   b4d34:	000c6aac 	.word	0x000c6aac
   b4d38:	2003dd40 	.word	0x2003dd40
   b4d3c:	2003ded4 	.word	0x2003ded4
   b4d40:	2003de7c 	.word	0x2003de7c
   b4d44:	2003ddd0 	.word	0x2003ddd0
   b4d48:	000c6abc 	.word	0x000c6abc
   b4d4c:	2003de8c 	.word	0x2003de8c

000b4d50 <_Z9setupXBeev>:
void setupXBee(){
   b4d50:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4d52:	f00d f9d7 	bl	c2104 <_Z22__fetch_global_Serial1v>
   b4d56:	4908      	ldr	r1, [pc, #32]	; (b4d78 <_Z9setupXBeev+0x28>)
   b4d58:	f7ff fb02 	bl	b4360 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4d5c:	2014      	movs	r0, #20
   b4d5e:	f00c f8c7 	bl	c0ef0 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4d62:	f00d f9cf 	bl	c2104 <_Z22__fetch_global_Serial1v>
   b4d66:	4905      	ldr	r1, [pc, #20]	; (b4d7c <_Z9setupXBeev+0x2c>)
   b4d68:	f7ff fafa 	bl	b4360 <_ZN5Print6printfEPKcz>
}
   b4d6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4d70:	2014      	movs	r0, #20
   b4d72:	f00c b8bd 	b.w	c0ef0 <delay>
   b4d76:	bf00      	nop
   b4d78:	000c7f3f 	.word	0x000c7f3f
   b4d7c:	000c679c 	.word	0x000c679c

000b4d80 <_Z8setupGPSv>:
void setupGPS(){
   b4d80:	b513      	push	{r0, r1, r4, lr}
    GPSAvail = true;
   b4d82:	4c15      	ldr	r4, [pc, #84]	; (b4dd8 <_Z8setupGPSv+0x58>)
   b4d84:	2301      	movs	r3, #1
   b4d86:	7023      	strb	r3, [r4, #0]
    if(myGPS.begin() == false){
   b4d88:	f00d f9f8 	bl	c217c <_Z19__fetch_global_Wirev>
   b4d8c:	2300      	movs	r3, #0
   b4d8e:	4601      	mov	r1, r0
   b4d90:	9300      	str	r3, [sp, #0]
   b4d92:	4812      	ldr	r0, [pc, #72]	; (b4ddc <_Z8setupGPSv+0x5c>)
   b4d94:	f240 434c 	movw	r3, #1100	; 0x44c
   b4d98:	2242      	movs	r2, #66	; 0x42
   b4d9a:	f008 f967 	bl	bd06c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4d9e:	b928      	cbnz	r0, b4dac <_Z8setupGPSv+0x2c>
        GPSAvail = false;
   b4da0:	7020      	strb	r0, [r4, #0]
        Serial.println("Error, Could not initialize GPS");
   b4da2:	f00c fce3 	bl	c176c <_Z16_fetch_usbserialv>
   b4da6:	490e      	ldr	r1, [pc, #56]	; (b4de0 <_Z8setupGPSv+0x60>)
   b4da8:	f00a ffb7 	bl	bfd1a <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4dac:	f240 424c 	movw	r2, #1100	; 0x44c
   b4db0:	2101      	movs	r1, #1
   b4db2:	480a      	ldr	r0, [pc, #40]	; (b4ddc <_Z8setupGPSv+0x5c>)
   b4db4:	f008 f88e 	bl	bced4 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4db8:	f240 434c 	movw	r3, #1100	; 0x44c
   b4dbc:	2201      	movs	r2, #1
   b4dbe:	2100      	movs	r1, #0
   b4dc0:	4806      	ldr	r0, [pc, #24]	; (b4ddc <_Z8setupGPSv+0x5c>)
   b4dc2:	f008 f867 	bl	bce94 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4dc6:	f00d f9d9 	bl	c217c <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4dca:	4906      	ldr	r1, [pc, #24]	; (b4de4 <_Z8setupGPSv+0x64>)
}
   b4dcc:	b002      	add	sp, #8
   b4dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4dd2:	f00c be1b 	b.w	c1a0c <_ZN7TwoWire8setSpeedEm>
   b4dd6:	bf00      	nop
   b4dd8:	2003dd68 	.word	0x2003dd68
   b4ddc:	2003df30 	.word	0x2003df30
   b4de0:	000c6adc 	.word	0x000c6adc
   b4de4:	00061a80 	.word	0x00061a80

000b4de8 <setup>:
void setup(){
   b4de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4dec:	4bc8      	ldr	r3, [pc, #800]	; (b5110 <setup+0x328>)
    led_set_status_active(&d_, active, nullptr);
   b4dee:	48c9      	ldr	r0, [pc, #804]	; (b5114 <setup+0x32c>)
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4df0:	7c1a      	ldrb	r2, [r3, #16]
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4df2:	4fc9      	ldr	r7, [pc, #804]	; (b5118 <setup+0x330>)
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4df4:	4ec9      	ldr	r6, [pc, #804]	; (b511c <setup+0x334>)
   b4df6:	f002 0203 	and.w	r2, r2, #3
   b4dfa:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   b4dfe:	741a      	strb	r2, [r3, #16]
    d_.color = color;
   b4e00:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b4e04:	615a      	str	r2, [r3, #20]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4e06:	7c5a      	ldrb	r2, [r3, #17]
   b4e08:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4e0a:	bf18      	it	ne
   b4e0c:	2201      	movne	r2, #1
void setup(){
   b4e0e:	b095      	sub	sp, #84	; 0x54
   b4e10:	bf18      	it	ne
   b4e12:	745a      	strbne	r2, [r3, #17]
    led_set_status_active(&d_, active, nullptr);
   b4e14:	2101      	movs	r1, #1
   b4e16:	2200      	movs	r2, #0
   b4e18:	f009 f996 	bl	be148 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);                          //Configure the pin for the Atlas sensors as an output and pull low to enable power to the Atlas sensors
   b4e1c:	2101      	movs	r1, #1
   b4e1e:	2002      	movs	r0, #2
   b4e20:	f00d f900 	bl	c2024 <pinMode>
    digitalWrite(SENSE_EN,LOW);                     
   b4e24:	2100      	movs	r1, #0
   b4e26:	2002      	movs	r0, #2
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4e28:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);                     
   b4e2a:	f00d f90c 	bl	c2046 <digitalWrite>
    pinMode(PWR_BUT, INPUT);                            //Configure power button input as an input, no pull as the resistor divider will handle pin floating
   b4e2e:	2100      	movs	r1, #0
   b4e30:	2012      	movs	r0, #18
   b4e32:	f00d f8f7 	bl	c2024 <pinMode>
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4e36:	f04f 33ff 	mov.w	r3, #4294967295
   b4e3a:	4622      	mov	r2, r4
   b4e3c:	49b8      	ldr	r1, [pc, #736]	; (b5120 <setup+0x338>)
   b4e3e:	9400      	str	r4, [sp, #0]
   b4e40:	2012      	movs	r0, #18
   b4e42:	f00c fcbb 	bl	c17bc <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(LEAK_DET,INPUT);                            //Configure the leak detect output of the PCB to be an input with no pull. External pull on PCB
   b4e46:	4621      	mov	r1, r4
   b4e48:	201d      	movs	r0, #29
   b4e4a:	f00d f8eb 	bl	c2024 <pinMode>
    pinMode(BAT_LEAK_DET,INPUT);                        //Configure the battery leak detect output of the PCB to be an input with no pull. External pull on PCB
   b4e4e:	4621      	mov	r1, r4
   b4e50:	200f      	movs	r0, #15
   b4e52:	f00d f8e7 	bl	c2024 <pinMode>
        pinMode(PWR_EN, OUTPUT);
   b4e56:	2101      	movs	r1, #1
   b4e58:	201c      	movs	r0, #28
   b4e5a:	f00d f8e3 	bl	c2024 <pinMode>
        digitalWrite(PWR_EN,HIGH);                      //Set the power enable pin output high to latch the mosfet on the PCB so the system maintains power
   b4e5e:	2101      	movs	r1, #1
   b4e60:	201c      	movs	r0, #28
   b4e62:	f00d f8f0 	bl	c2046 <digitalWrite>
        pinMode(LEAK_DET, INPUT);
   b4e66:	4621      	mov	r1, r4
   b4e68:	201d      	movs	r0, #29
   b4e6a:	f00d f8db 	bl	c2024 <pinMode>
   b4e6e:	f008 fef9 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e72:	4aac      	ldr	r2, [pc, #688]	; (b5124 <setup+0x33c>)
   b4e74:	235a      	movs	r3, #90	; 0x5a
   b4e76:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e78:	4aab      	ldr	r2, [pc, #684]	; (b5128 <setup+0x340>)
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e7a:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e7c:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e80:	7033      	strb	r3, [r6, #0]
   b4e82:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e84:	2106      	movs	r1, #6
   b4e86:	e9cd 4800 	strd	r4, r8, [sp]
   b4e8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4e92:	4605      	mov	r5, r0
   b4e94:	48a5      	ldr	r0, [pc, #660]	; (b512c <setup+0x344>)
   b4e96:	f009 fc25 	bl	be6e4 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4ea2:	e9cd 4800 	strd	r4, r8, [sp]
   b4ea6:	2105      	movs	r1, #5
   b4ea8:	48a1      	ldr	r0, [pc, #644]	; (b5130 <setup+0x348>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4eaa:	f8df 8330 	ldr.w	r8, [pc, #816]	; b51dc <setup+0x3f4>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4eae:	f009 fc19 	bl	be6e4 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4eb2:	7839      	ldrb	r1, [r7, #0]
   b4eb4:	489d      	ldr	r0, [pc, #628]	; (b512c <setup+0x344>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4eb6:	4f9f      	ldr	r7, [pc, #636]	; (b5134 <setup+0x34c>)
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4eb8:	f009 fbd8 	bl	be66c <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4ebc:	7831      	ldrb	r1, [r6, #0]
   b4ebe:	489c      	ldr	r0, [pc, #624]	; (b5130 <setup+0x348>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4ec0:	4e9d      	ldr	r6, [pc, #628]	; (b5138 <setup+0x350>)
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4ec2:	f009 fbd3 	bl	be66c <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b4ec6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4eca:	f00c f811 	bl	c0ef0 <delay>
    BLE.on();                                   //Turn on Bluetooth
   b4ece:	f00a f88d 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ed2:	f00a f8d5 	bl	bf080 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);                          //Max transmitting power
   b4ed6:	f00a f889 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4eda:	2108      	movs	r1, #8
   b4edc:	f00a f8d7 	bl	bf08e <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   b4ee0:	f00c fc44 	bl	c176c <_Z16_fetch_usbserialv>
   b4ee4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4ee8:	f00c fc30 	bl	c174c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b4eec:	f00d f90a 	bl	c2104 <_Z22__fetch_global_Serial1v>
   b4ef0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4ef4:	f00c fd32 	bl	c195c <_ZN11USARTSerial5beginEm>
    setupXBee();                                //Setup XBee module
   b4ef8:	f7ff ff2a 	bl	b4d50 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b4efc:	f7ff ff40 	bl	b4d80 <_Z8setupGPSv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4f00:	2301      	movs	r3, #1
   b4f02:	498e      	ldr	r1, [pc, #568]	; (b513c <setup+0x354>)
   b4f04:	488e      	ldr	r0, [pc, #568]	; (b5140 <setup+0x358>)
   b4f06:	4622      	mov	r2, r4
   b4f08:	e9cd 4400 	strd	r4, r4, [sp]
   b4f0c:	f009 f9f2 	bl	be2f4 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4f10:	498c      	ldr	r1, [pc, #560]	; (b5144 <setup+0x35c>)
   b4f12:	4a8d      	ldr	r2, [pc, #564]	; (b5148 <setup+0x360>)
   b4f14:	488d      	ldr	r0, [pc, #564]	; (b514c <setup+0x364>)
   b4f16:	f00c f8ec 	bl	c10f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4f1a:	4b8d      	ldr	r3, [pc, #564]	; (b5150 <setup+0x368>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4f1c:	f04f 0901 	mov.w	r9, #1
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4f20:	701c      	strb	r4, [r3, #0]
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4f22:	f886 9000 	strb.w	r9, [r6]
   b4f26:	f008 fe9d 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f2a:	4b8a      	ldr	r3, [pc, #552]	; (b5154 <setup+0x36c>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4f2c:	f888 9000 	strb.w	r9, [r8]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f30:	6018      	str	r0, [r3, #0]
   b4f32:	4b89      	ldr	r3, [pc, #548]	; (b5158 <setup+0x370>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4f34:	f887 9000 	strb.w	r9, [r7]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f38:	6018      	str	r0, [r3, #0]
   b4f3a:	4b88      	ldr	r3, [pc, #544]	; (b515c <setup+0x374>)
   b4f3c:	6018      	str	r0, [r3, #0]
   b4f3e:	4b88      	ldr	r3, [pc, #544]	; (b5160 <setup+0x378>)
   b4f40:	6018      	str	r0, [r3, #0]
   b4f42:	4b88      	ldr	r3, [pc, #544]	; (b5164 <setup+0x37c>)
   b4f44:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;                             //Initialize timer for checking that XBee is available
   b4f46:	4b88      	ldr	r3, [pc, #544]	; (b5168 <setup+0x380>)
   b4f48:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;                              //Initialize timer for checking that BLE is available
   b4f4a:	4b88      	ldr	r3, [pc, #544]	; (b516c <setup+0x384>)
   b4f4c:	601c      	str	r4, [r3, #0]
    dataWait = false;                           //Set false initially to first request data to sensors before attempting to read data
   b4f4e:	4b88      	ldr	r3, [pc, #544]	; (b5170 <setup+0x388>)
   b4f50:	701c      	strb	r4, [r3, #0]
    offloadMode = false;                        //Set offload to false, otherwise could try to offload with no CC connected
   b4f52:	4b88      	ldr	r3, [pc, #544]	; (b5174 <setup+0x38c>)
   b4f54:	701c      	strb	r4, [r3, #0]
    requestActive = false;                      //Set request to false, otherwise we are trying to send sensor data with no CC connected
   b4f56:	4b88      	ldr	r3, [pc, #544]	; (b5178 <setup+0x390>)
   b4f58:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;            //Initialize counter for LTE backup messages. This counter limits the number of LTE messages being sent so we don't burn through the data limit
   b4f5a:	4b88      	ldr	r3, [pc, #544]	; (b517c <setup+0x394>)
   b4f5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b4f60:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;                     //Initially assume GPS and compass are not available until we receive the first point from each
   b4f62:	4b87      	ldr	r3, [pc, #540]	; (b5180 <setup+0x398>)
   b4f64:	701c      	strb	r4, [r3, #0]
    shutdownActive = false;                     //Initially set the shutdown state to false until the button is pressed and held for 3 seconds, then shut off
   b4f66:	4b87      	ldr	r3, [pc, #540]	; (b5184 <setup+0x39c>)
   b4f68:	701c      	strb	r4, [r3, #0]
    stopActive = false;                         //Initially disable stop, otherwise user might not know that the stop button must be pressed
   b4f6a:	4b87      	ldr	r3, [pc, #540]	; (b5188 <setup+0x3a0>)
   b4f6c:	701c      	strb	r4, [r3, #0]
    warnedBattLeak = false;                     //Initially set false so at least one leak message will be sent in the case of a leak
   b4f6e:	4b87      	ldr	r3, [pc, #540]	; (b518c <setup+0x3a4>)
   b4f70:	701c      	strb	r4, [r3, #0]
    warnedLeak = false;                         //Initially set false so at least one leak message will be sent in the case of a leak
   b4f72:	4b87      	ldr	r3, [pc, #540]	; (b5190 <setup+0x3a8>)
   b4f74:	701c      	strb	r4, [r3, #0]
    battPercent = 50;                           //Initially set battery reading to 50% until we read the actual voltage so the LED states are not affected 
   b4f76:	4b87      	ldr	r3, [pc, #540]	; (b5194 <setup+0x3ac>)
   b4f78:	2232      	movs	r2, #50	; 0x32
   b4f7a:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add characteristic for the stream of transmitting out data over BLE
   b4f7c:	f00a f836 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f80:	4a85      	ldr	r2, [pc, #532]	; (b5198 <setup+0x3b0>)
   b4f82:	4601      	mov	r1, r0
   b4f84:	a80f      	add	r0, sp, #60	; 0x3c
   b4f86:	f00a fd8b 	bl	bfaa0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f8a:	a80f      	add	r0, sp, #60	; 0x3c
   b4f8c:	f00a f93b 	bl	bf206 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);    //Add characteristic for the stream of receiving data from BLE
   b4f90:	f00a f82c 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f94:	4a81      	ldr	r2, [pc, #516]	; (b519c <setup+0x3b4>)
   b4f96:	4601      	mov	r1, r0
   b4f98:	a80f      	add	r0, sp, #60	; 0x3c
   b4f9a:	f00a fd81 	bl	bfaa0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f9e:	a80f      	add	r0, sp, #60	; 0x3c
   b4fa0:	f00a f931 	bl	bf206 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);   //Add characteristic for offloading stream for BLE
   b4fa4:	f00a f822 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fa8:	4a7d      	ldr	r2, [pc, #500]	; (b51a0 <setup+0x3b8>)
   b4faa:	4601      	mov	r1, r0
   b4fac:	a80f      	add	r0, sp, #60	; 0x3c
   b4fae:	f00a fd77 	bl	bfaa0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fb2:	a80f      	add	r0, sp, #60	; 0x3c
   b4fb4:	f00a f927 	bl	bf206 <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);    //Add BLE Characteristics for BLE serial debug stream
   b4fb8:	f00a f818 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fbc:	4a79      	ldr	r2, [pc, #484]	; (b51a4 <setup+0x3bc>)
   b4fbe:	4601      	mov	r1, r0
   b4fc0:	a80f      	add	r0, sp, #60	; 0x3c
   b4fc2:	f00a fd6d 	bl	bfaa0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fc6:	a80f      	add	r0, sp, #60	; 0x3c
   b4fc8:	f00a f91d 	bl	bf206 <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;                  //Put this bot's bot number in the advertising data so other bots can see it's ID without connecting to it
   b4fcc:	4b76      	ldr	r3, [pc, #472]	; (b51a8 <setup+0x3c0>)
   b4fce:	f883 9000 	strb.w	r9, [r3]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b4fd2:	4b76      	ldr	r3, [pc, #472]	; (b51ac <setup+0x3c4>)
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4fd4:	a80f      	add	r0, sp, #60	; 0x3c
   b4fd6:	6819      	ldr	r1, [r3, #0]
   b4fd8:	f009 feba 	bl	bed50 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4fdc:	a80f      	add	r0, sp, #60	; 0x3c
   b4fde:	f009 fe19 	bl	bec14 <_ZNK8particle7BleUuid4typeEv>
   b4fe2:	4681      	mov	r9, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4fe4:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4fe6:	f1b9 0f00 	cmp.w	r9, #0
   b4fea:	f040 8130 	bne.w	b524e <setup+0x466>
            uint16_t uuid16 = tempUUID.shorted();
   b4fee:	f009 fe2d 	bl	bec4c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4ff2:	f8cd 9000 	str.w	r9, [sp]
            uint16_t uuid16 = tempUUID.shorted();
   b4ff6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4ffa:	2302      	movs	r3, #2
   b4ffc:	aa0b      	add	r2, sp, #44	; 0x2c
   b4ffe:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5000:	486b      	ldr	r0, [pc, #428]	; (b51b0 <setup+0x3c8>)
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b5002:	4c6c      	ldr	r4, [pc, #432]	; (b51b4 <setup+0x3cc>)
   b5004:	f00a fa2a 	bl	bf45c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b5008:	2300      	movs	r3, #0
   b500a:	4967      	ldr	r1, [pc, #412]	; (b51a8 <setup+0x3c0>)
   b500c:	4868      	ldr	r0, [pc, #416]	; (b51b0 <setup+0x3c8>)
   b500e:	2208      	movs	r2, #8
   b5010:	f00a fa42 	bl	bf498 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b5014:	f009 ffea 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5018:	2200      	movs	r2, #0
   b501a:	4965      	ldr	r1, [pc, #404]	; (b51b0 <setup+0x3c8>)
   b501c:	f00a f897 	bl	bf14e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5020:	f00d f8ac 	bl	c217c <_Z19__fetch_global_Wirev>
   b5024:	f00c fcf6 	bl	c1a14 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b5028:	f00d f8a8 	bl	c217c <_Z19__fetch_global_Wirev>
   b502c:	4962      	ldr	r1, [pc, #392]	; (b51b8 <setup+0x3d0>)
   b502e:	f00c fced 	bl	c1a0c <_ZN7TwoWire8setSpeedEm>
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b5032:	2301      	movs	r3, #1
   b5034:	7023      	strb	r3, [r4, #0]
    if (! lis3mdl.begin_I2C()) {                // hardware I2C mode, can pass in address & alt Wire
   b5036:	f00d f8a1 	bl	c217c <_Z19__fetch_global_Wirev>
   b503a:	211c      	movs	r1, #28
   b503c:	4602      	mov	r2, r0
   b503e:	485f      	ldr	r0, [pc, #380]	; (b51bc <setup+0x3d4>)
   b5040:	f008 fa67 	bl	bd512 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5044:	2800      	cmp	r0, #0
   b5046:	f040 8109 	bne.w	b525c <setup+0x474>
        CompassAvail = false;                   //Couldn't connect over I2C, so assume the compass is unavailable. Flag disables Autonomous/Sentry mode
   b504a:	7020      	strb	r0, [r4, #0]
        Serial.println("Failed to find LIS3MDL chip");
   b504c:	f00c fb8e 	bl	c176c <_Z16_fetch_usbserialv>
   b5050:	495b      	ldr	r1, [pc, #364]	; (b51c0 <setup+0x3d8>)
    else Serial.println("LIS3MDL Found!");
   b5052:	f00a fe62 	bl	bfd1a <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b5056:	4859      	ldr	r0, [pc, #356]	; (b51bc <setup+0x3d4>)
   b5058:	2102      	movs	r1, #2
   b505a:	f008 f953 	bl	bd304 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b505e:	4857      	ldr	r0, [pc, #348]	; (b51bc <setup+0x3d4>)
   b5060:	2100      	movs	r1, #0
   b5062:	f008 f9b3 	bl	bd3cc <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5066:	4855      	ldr	r0, [pc, #340]	; (b51bc <setup+0x3d4>)
   b5068:	2101      	movs	r1, #1
   b506a:	f008 f97d 	bl	bd368 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b506e:	4853      	ldr	r0, [pc, #332]	; (b51bc <setup+0x3d4>)
   b5070:	2101      	movs	r1, #1
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5072:	2400      	movs	r4, #0
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b5074:	f008 f9c5 	bl	bd402 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5078:	f04f 0901 	mov.w	r9, #1
    lis3mdl.setIntThreshold(500);
   b507c:	484f      	ldr	r0, [pc, #316]	; (b51bc <setup+0x3d4>)
   b507e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5082:	f008 fa65 	bl	bd550 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5086:	4622      	mov	r2, r4
   b5088:	4621      	mov	r1, r4
   b508a:	464b      	mov	r3, r9
   b508c:	e9cd 4901 	strd	r4, r9, [sp, #4]
   b5090:	484a      	ldr	r0, [pc, #296]	; (b51bc <setup+0x3d4>)
   b5092:	f8cd 9000 	str.w	r9, [sp]
   b5096:	f008 fa73 	bl	bd580 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b509a:	f00b feff 	bl	c0e9c <_ZN9TimeClass5monthEv>
   b509e:	9009      	str	r0, [sp, #36]	; 0x24
   b50a0:	f00b fef0 	bl	c0e84 <_ZN9TimeClass3dayEv>
   b50a4:	4682      	mov	sl, r0
   b50a6:	f00b ff01 	bl	c0eac <_ZN9TimeClass4yearEv>
   b50aa:	4683      	mov	fp, r0
   b50ac:	f00b fec6 	bl	c0e3c <_ZN9TimeClass4hourEv>
   b50b0:	9008      	str	r0, [sp, #32]
   b50b2:	f00b fecf 	bl	c0e54 <_ZN9TimeClass6minuteEv>
   b50b6:	9007      	str	r0, [sp, #28]
   b50b8:	f00b fed8 	bl	c0e6c <_ZN9TimeClass6secondEv>
   b50bc:	9a08      	ldr	r2, [sp, #32]
   b50be:	9907      	ldr	r1, [sp, #28]
   b50c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b50c2:	9004      	str	r0, [sp, #16]
   b50c4:	e9cd b201 	strd	fp, r2, [sp, #4]
   b50c8:	9103      	str	r1, [sp, #12]
   b50ca:	4a3e      	ldr	r2, [pc, #248]	; (b51c4 <setup+0x3dc>)
   b50cc:	f8cd a000 	str.w	sl, [sp]
   b50d0:	2110      	movs	r1, #16
   b50d2:	a80b      	add	r0, sp, #44	; 0x2c
   b50d4:	f009 f94e 	bl	be374 <snprintf>
    strcpy(filename,DEF_FILENAME);              //Copy in all of the necessary elements of the file name
   b50d8:	493b      	ldr	r1, [pc, #236]	; (b51c8 <setup+0x3e0>)
   b50da:	483c      	ldr	r0, [pc, #240]	; (b51cc <setup+0x3e4>)
   b50dc:	f00f fb02 	bl	c46e4 <strcpy>
    strcat(filename,timestamp);
   b50e0:	a90b      	add	r1, sp, #44	; 0x2c
   b50e2:	483a      	ldr	r0, [pc, #232]	; (b51cc <setup+0x3e4>)
   b50e4:	f00f face 	bl	c4684 <strcat>
    strcpy(filenameMessages,filename);
   b50e8:	4938      	ldr	r1, [pc, #224]	; (b51cc <setup+0x3e4>)
   b50ea:	4839      	ldr	r0, [pc, #228]	; (b51d0 <setup+0x3e8>)
   b50ec:	f00f fafa 	bl	c46e4 <strcpy>
    strcat(filename,".csv");
   b50f0:	4938      	ldr	r1, [pc, #224]	; (b51d4 <setup+0x3ec>)
   b50f2:	4836      	ldr	r0, [pc, #216]	; (b51cc <setup+0x3e4>)
   b50f4:	f00f fac6 	bl	c4684 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b50f8:	4937      	ldr	r1, [pc, #220]	; (b51d8 <setup+0x3f0>)
   b50fa:	4835      	ldr	r0, [pc, #212]	; (b51d0 <setup+0x3e8>)
   b50fc:	f00f fac2 	bl	c4684 <strcat>
    Serial.println(filename);                   //Print the filenames to the console for debugging
   b5100:	f00c fb34 	bl	c176c <_Z16_fetch_usbserialv>
   b5104:	4931      	ldr	r1, [pc, #196]	; (b51cc <setup+0x3e4>)
   b5106:	f00a fe08 	bl	bfd1a <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b510a:	f00c fb2f 	bl	c176c <_Z16_fetch_usbserialv>
   b510e:	e067      	b.n	b51e0 <setup+0x3f8>
   b5110:	2003e588 	.word	0x2003e588
   b5114:	2003e58c 	.word	0x2003e58c
   b5118:	2003e560 	.word	0x2003e560
   b511c:	2003e561 	.word	0x2003e561
   b5120:	000b4309 	.word	0x000b4309
   b5124:	2003de1c 	.word	0x2003de1c
   b5128:	2003e0b9 	.word	0x2003e0b9
   b512c:	2003dd48 	.word	0x2003dd48
   b5130:	2003dd58 	.word	0x2003dd58
   b5134:	2003ded4 	.word	0x2003ded4
   b5138:	2003dd6c 	.word	0x2003dd6c
   b513c:	000b4bf9 	.word	0x000b4bf9
   b5140:	000c6afc 	.word	0x000c6afc
   b5144:	000b4c49 	.word	0x000b4c49
   b5148:	000c6b02 	.word	0x000c6b02
   b514c:	000c10c7 	.word	0x000c10c7
   b5150:	2003dd69 	.word	0x2003dd69
   b5154:	2003e55c 	.word	0x2003e55c
   b5158:	2003ddac 	.word	0x2003ddac
   b515c:	2003ddf4 	.word	0x2003ddf4
   b5160:	2003ddf8 	.word	0x2003ddf8
   b5164:	2003e0b4 	.word	0x2003e0b4
   b5168:	2003dd80 	.word	0x2003dd80
   b516c:	2003dd40 	.word	0x2003dd40
   b5170:	2003ddb0 	.word	0x2003ddb0
   b5174:	2003e0b0 	.word	0x2003e0b0
   b5178:	2003e0b8 	.word	0x2003e0b8
   b517c:	2003dd6a 	.word	0x2003dd6a
   b5180:	2003e5d8 	.word	0x2003e5d8
   b5184:	2003e562 	.word	0x2003e562
   b5188:	2003e5c9 	.word	0x2003e5c9
   b518c:	2003e5ee 	.word	0x2003e5ee
   b5190:	2003e5ef 	.word	0x2003e5ef
   b5194:	2003dd98 	.word	0x2003dd98
   b5198:	2003e5e4 	.word	0x2003e5e4
   b519c:	2003e0bc 	.word	0x2003e0bc
   b51a0:	2003e0a8 	.word	0x2003e0a8
   b51a4:	2003dda0 	.word	0x2003dda0
   b51a8:	2003dd35 	.word	0x2003dd35
   b51ac:	2003db28 	.word	0x2003db28
   b51b0:	2003dd88 	.word	0x2003dd88
   b51b4:	2003dd44 	.word	0x2003dd44
   b51b8:	00061a80 	.word	0x00061a80
   b51bc:	2003de20 	.word	0x2003de20
   b51c0:	000c6b10 	.word	0x000c6b10
   b51c4:	000c6b3b 	.word	0x000c6b3b
   b51c8:	000c6b54 	.word	0x000c6b54
   b51cc:	2003ddb2 	.word	0x2003ddb2
   b51d0:	2003ddd0 	.word	0x2003ddd0
   b51d4:	000c6b5d 	.word	0x000c6b5d
   b51d8:	000c6b62 	.word	0x000c6b62
   b51dc:	2003ded5 	.word	0x2003ded5
   b51e0:	4934      	ldr	r1, [pc, #208]	; (b52b4 <setup+0x4cc>)
   b51e2:	f00a fd9a 	bl	bfd1a <_ZN5Print7printlnEPKc>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b51e6:	4622      	mov	r2, r4
   b51e8:	4833      	ldr	r0, [pc, #204]	; (b52b8 <setup+0x4d0>)
   b51ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b51ee:	f7ff f877 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
   b51f2:	4622      	mov	r2, r4
   b51f4:	4831      	ldr	r0, [pc, #196]	; (b52bc <setup+0x4d4>)
   b51f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b51fa:	f7ff f871 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
   b51fe:	4622      	mov	r2, r4
   b5200:	482f      	ldr	r0, [pc, #188]	; (b52c0 <setup+0x4d8>)
   b5202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5206:	f7ff f86b 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
      dataMode_{dataMode}
   b520a:	4b2e      	ldr	r3, [pc, #184]	; (b52c4 <setup+0x4dc>)
   b520c:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {     //Try to connect to the SD card
   b520e:	482e      	ldr	r0, [pc, #184]	; (b52c8 <setup+0x4e0>)
   b5210:	4b2e      	ldr	r3, [pc, #184]	; (b52cc <setup+0x4e4>)
   b5212:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   b5216:	aa0f      	add	r2, sp, #60	; 0x3c
   b5218:	2108      	movs	r1, #8
   b521a:	9311      	str	r3, [sp, #68]	; 0x44
   b521c:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
   b5220:	f7ff fac2 	bl	b47a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5224:	4604      	mov	r4, r0
   b5226:	b9e8      	cbnz	r0, b5264 <setup+0x47c>
        Serial.println("Error: could not connect to SD card!");     //If not, warn the user in the console
   b5228:	f00c faa0 	bl	c176c <_Z16_fetch_usbserialv>
   b522c:	4928      	ldr	r1, [pc, #160]	; (b52d0 <setup+0x4e8>)
   b522e:	f00a fd74 	bl	bfd1a <_ZN5Print7printlnEPKc>
        logSensors = false;                         //Set flags that the SD card is not available which will warn the user on the CChub
   b5232:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   b5236:	703c      	strb	r4, [r7, #0]
        SDAvail = false;
   b5238:	7034      	strb	r4, [r6, #0]
   b523a:	f008 fd13 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);   //Check that the we've been in this setup function for at least two seconds so the ESC's will arm and allow movement
   b523e:	1b40      	subs	r0, r0, r5
   b5240:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5244:	d233      	bcs.n	b52ae <setup+0x4c6>
   b5246:	2005      	movs	r0, #5
   b5248:	f00b fe52 	bl	c0ef0 <delay>
   b524c:	e7f5      	b.n	b523a <setup+0x452>
   b524e:	f009 fcff 	bl	bec50 <_ZNK8particle7BleUuid8rawBytesEv>
   b5252:	9400      	str	r4, [sp, #0]
   b5254:	4602      	mov	r2, r0
   b5256:	2310      	movs	r3, #16
   b5258:	2107      	movs	r1, #7
   b525a:	e6d1      	b.n	b5000 <setup+0x218>
    else Serial.println("LIS3MDL Found!");
   b525c:	f00c fa86 	bl	c176c <_Z16_fetch_usbserialv>
   b5260:	491c      	ldr	r1, [pc, #112]	; (b52d4 <setup+0x4ec>)
   b5262:	e6f6      	b.n	b5052 <setup+0x26a>
    if(logSensors){                                 //Logsensors enables logging of sensor data, if enabled, then create the file on the SD card
   b5264:	f898 3000 	ldrb.w	r3, [r8]
   b5268:	b163      	cbz	r3, b5284 <setup+0x49c>
        myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b526a:	491b      	ldr	r1, [pc, #108]	; (b52d8 <setup+0x4f0>)
   b526c:	481b      	ldr	r0, [pc, #108]	; (b52dc <setup+0x4f4>)
   b526e:	f244 2202 	movw	r2, #16898	; 0x4202
   b5272:	f7ff fa1b 	bl	b46ac <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5276:	491a      	ldr	r1, [pc, #104]	; (b52e0 <setup+0x4f8>)
   b5278:	481a      	ldr	r0, [pc, #104]	; (b52e4 <setup+0x4fc>)
   b527a:	f00a fd4e 	bl	bfd1a <_ZN5Print7printlnEPKc>
        myFile.close();
   b527e:	4817      	ldr	r0, [pc, #92]	; (b52dc <setup+0x4f4>)
   b5280:	f002 faa2 	bl	b77c8 <_ZN7FatFile5closeEv>
    if(logMessages){                                //Logsensors enables logging of messages, if enabled, then create the file on the SD card
   b5284:	783b      	ldrb	r3, [r7, #0]
   b5286:	2b00      	cmp	r3, #0
   b5288:	d0d7      	beq.n	b523a <setup+0x452>
   b528a:	4817      	ldr	r0, [pc, #92]	; (b52e8 <setup+0x500>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b528c:	7c03      	ldrb	r3, [r0, #16]
   b528e:	b92b      	cbnz	r3, b529c <setup+0x4b4>
   b5290:	4908      	ldr	r1, [pc, #32]	; (b52b4 <setup+0x4cc>)
   b5292:	f244 2202 	movw	r2, #16898	; 0x4202
   b5296:	3010      	adds	r0, #16
   b5298:	f7ff fa08 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b529c:	4913      	ldr	r1, [pc, #76]	; (b52ec <setup+0x504>)
   b529e:	4812      	ldr	r0, [pc, #72]	; (b52e8 <setup+0x500>)
   b52a0:	2201      	movs	r2, #1
   b52a2:	f7ff f895 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b52a6:	4812      	ldr	r0, [pc, #72]	; (b52f0 <setup+0x508>)
   b52a8:	f002 fa8e 	bl	b77c8 <_ZN7FatFile5closeEv>
   b52ac:	e7c5      	b.n	b523a <setup+0x452>
}
   b52ae:	b015      	add	sp, #84	; 0x54
   b52b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b52b4:	2003ddd0 	.word	0x2003ddd0
   b52b8:	2003e5f0 	.word	0x2003e5f0
   b52bc:	2003de00 	.word	0x2003de00
   b52c0:	2003e5ac 	.word	0x2003e5ac
   b52c4:	000c6de8 	.word	0x000c6de8
   b52c8:	2003e0c4 	.word	0x2003e0c4
   b52cc:	007a1200 	.word	0x007a1200
   b52d0:	000c6b6b 	.word	0x000c6b6b
   b52d4:	000c6b2c 	.word	0x000c6b2c
   b52d8:	2003ddb2 	.word	0x2003ddb2
   b52dc:	2003df0c 	.word	0x2003df0c
   b52e0:	000c6b90 	.word	0x000c6b90
   b52e4:	2003defc 	.word	0x2003defc
   b52e8:	2003de7c 	.word	0x2003de7c
   b52ec:	000c6be6 	.word	0x000c6be6
   b52f0:	2003de8c 	.word	0x2003de8c
   b52f4:	00000000 	.word	0x00000000

000b52f8 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b52f8:	b538      	push	{r3, r4, r5, lr}
   b52fa:	eef0 7a60 	vmov.f32	s15, s1
   b52fe:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b5302:	eef0 0a40 	vmov.f32	s1, s0
   b5306:	eeb0 0a67 	vmov.f32	s0, s15
   b530a:	f00d f923 	bl	c2554 <atan2f>
   b530e:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;  //Convert x and y compass acceleration to a heading
   b5312:	f00e fd75 	bl	c3e00 <__aeabi_f2d>
   b5316:	4b8e      	ldr	r3, [pc, #568]	; (b5550 <_Z18readCompassHeadingff+0x258>)
   b5318:	2200      	movs	r2, #0
   b531a:	f00e fdc9 	bl	c3eb0 <__aeabi_dmul>
   b531e:	a384      	add	r3, pc, #528	; (adr r3, b5530 <_Z18readCompassHeadingff+0x238>)
   b5320:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5324:	f00e feee 	bl	c4104 <__aeabi_ddiv>
   b5328:	f00f f8ba 	bl	c44a0 <__aeabi_d2f>
   b532c:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b5330:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b5334:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b5338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b533c:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b5340:	db13      	blt.n	b536a <_Z18readCompassHeadingff+0x72>
   b5342:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b5346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b534a:	d50e      	bpl.n	b536a <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b534c:	f00e fd58 	bl	c3e00 <__aeabi_f2d>
   b5350:	4b80      	ldr	r3, [pc, #512]	; (b5554 <_Z18readCompassHeadingff+0x25c>)
   b5352:	2200      	movs	r2, #0
   b5354:	f00e fbf4 	bl	c3b40 <__aeabi_dsub>
   b5358:	4b7f      	ldr	r3, [pc, #508]	; (b5558 <_Z18readCompassHeadingff+0x260>)
   b535a:	2200      	movs	r2, #0
   b535c:	f00e fda8 	bl	c3eb0 <__aeabi_dmul>
   b5360:	4b7e      	ldr	r3, [pc, #504]	; (b555c <_Z18readCompassHeadingff+0x264>)
   b5362:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b5364:	f00e fece 	bl	c4104 <__aeabi_ddiv>
   b5368:	e021      	b.n	b53ae <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b536a:	ee18 0a10 	vmov	r0, s16
   b536e:	f00e fd47 	bl	c3e00 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b5372:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b5376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b537a:	eddf 7a79 	vldr	s15, [pc, #484]	; b5560 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b537e:	4604      	mov	r4, r0
   b5380:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b5382:	db1b      	blt.n	b53bc <_Z18readCompassHeadingff+0xc4>
   b5384:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b538c:	d516      	bpl.n	b53bc <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b538e:	4b75      	ldr	r3, [pc, #468]	; (b5564 <_Z18readCompassHeadingff+0x26c>)
   b5390:	2200      	movs	r2, #0
   b5392:	f00e fbd5 	bl	c3b40 <__aeabi_dsub>
   b5396:	4b70      	ldr	r3, [pc, #448]	; (b5558 <_Z18readCompassHeadingff+0x260>)
   b5398:	2200      	movs	r2, #0
   b539a:	f00e fd89 	bl	c3eb0 <__aeabi_dmul>
   b539e:	4b72      	ldr	r3, [pc, #456]	; (b5568 <_Z18readCompassHeadingff+0x270>)
   b53a0:	2200      	movs	r2, #0
   b53a2:	f00e feaf 	bl	c4104 <__aeabi_ddiv>
   b53a6:	4b6c      	ldr	r3, [pc, #432]	; (b5558 <_Z18readCompassHeadingff+0x260>)
   b53a8:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b53aa:	f00e fbcb 	bl	c3b44 <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b53ae:	f00f f877 	bl	c44a0 <__aeabi_d2f>
}
   b53b2:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b53b6:	ee00 0a10 	vmov	s0, r0
}
   b53ba:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b53bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b53c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53c4:	eddf 7a69 	vldr	s15, [pc, #420]	; b556c <_Z18readCompassHeadingff+0x274>
   b53c8:	db15      	blt.n	b53f6 <_Z18readCompassHeadingff+0xfe>
   b53ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b53ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53d2:	d510      	bpl.n	b53f6 <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b53d4:	4b66      	ldr	r3, [pc, #408]	; (b5570 <_Z18readCompassHeadingff+0x278>)
   b53d6:	2200      	movs	r2, #0
   b53d8:	4620      	mov	r0, r4
   b53da:	4629      	mov	r1, r5
   b53dc:	f00e fbb0 	bl	c3b40 <__aeabi_dsub>
   b53e0:	4b5d      	ldr	r3, [pc, #372]	; (b5558 <_Z18readCompassHeadingff+0x260>)
   b53e2:	2200      	movs	r2, #0
   b53e4:	f00e fd64 	bl	c3eb0 <__aeabi_dmul>
   b53e8:	4b62      	ldr	r3, [pc, #392]	; (b5574 <_Z18readCompassHeadingff+0x27c>)
   b53ea:	2200      	movs	r2, #0
   b53ec:	f00e fe8a 	bl	c4104 <__aeabi_ddiv>
   b53f0:	4b61      	ldr	r3, [pc, #388]	; (b5578 <_Z18readCompassHeadingff+0x280>)
   b53f2:	2200      	movs	r2, #0
   b53f4:	e7d9      	b.n	b53aa <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b53f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b53fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53fe:	db18      	blt.n	b5432 <_Z18readCompassHeadingff+0x13a>
   b5400:	eddf 7a5e 	vldr	s15, [pc, #376]	; b557c <_Z18readCompassHeadingff+0x284>
   b5404:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b540c:	d511      	bpl.n	b5432 <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b540e:	4b5c      	ldr	r3, [pc, #368]	; (b5580 <_Z18readCompassHeadingff+0x288>)
   b5410:	2200      	movs	r2, #0
   b5412:	4620      	mov	r0, r4
   b5414:	4629      	mov	r1, r5
   b5416:	f00e fb93 	bl	c3b40 <__aeabi_dsub>
   b541a:	4b4f      	ldr	r3, [pc, #316]	; (b5558 <_Z18readCompassHeadingff+0x260>)
   b541c:	2200      	movs	r2, #0
   b541e:	f00e fd47 	bl	c3eb0 <__aeabi_dmul>
   b5422:	4b58      	ldr	r3, [pc, #352]	; (b5584 <_Z18readCompassHeadingff+0x28c>)
   b5424:	2200      	movs	r2, #0
   b5426:	f00e fe6d 	bl	c4104 <__aeabi_ddiv>
   b542a:	a343      	add	r3, pc, #268	; (adr r3, b5538 <_Z18readCompassHeadingff+0x240>)
   b542c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5430:	e7bb      	b.n	b53aa <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b5432:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b5436:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b543e:	db11      	blt.n	b5464 <_Z18readCompassHeadingff+0x16c>
   b5440:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b5444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5448:	d50c      	bpl.n	b5464 <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b544a:	4b42      	ldr	r3, [pc, #264]	; (b5554 <_Z18readCompassHeadingff+0x25c>)
   b544c:	2200      	movs	r2, #0
   b544e:	4620      	mov	r0, r4
   b5450:	4629      	mov	r1, r5
   b5452:	f00e fb75 	bl	c3b40 <__aeabi_dsub>
   b5456:	4b4c      	ldr	r3, [pc, #304]	; (b5588 <_Z18readCompassHeadingff+0x290>)
   b5458:	2200      	movs	r2, #0
   b545a:	f00e fd29 	bl	c3eb0 <__aeabi_dmul>
   b545e:	4b4b      	ldr	r3, [pc, #300]	; (b558c <_Z18readCompassHeadingff+0x294>)
   b5460:	2200      	movs	r2, #0
   b5462:	e77f      	b.n	b5364 <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b5464:	eddf 7a4a 	vldr	s15, [pc, #296]	; b5590 <_Z18readCompassHeadingff+0x298>
   b5468:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b546c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5470:	db17      	blt.n	b54a2 <_Z18readCompassHeadingff+0x1aa>
   b5472:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b5476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b547a:	d512      	bpl.n	b54a2 <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b547c:	4b45      	ldr	r3, [pc, #276]	; (b5594 <_Z18readCompassHeadingff+0x29c>)
   b547e:	2200      	movs	r2, #0
   b5480:	4620      	mov	r0, r4
   b5482:	4629      	mov	r1, r5
   b5484:	f00e fb5e 	bl	c3b44 <__adddf3>
   b5488:	4b3f      	ldr	r3, [pc, #252]	; (b5588 <_Z18readCompassHeadingff+0x290>)
   b548a:	2200      	movs	r2, #0
   b548c:	f00e fd10 	bl	c3eb0 <__aeabi_dmul>
   b5490:	4b41      	ldr	r3, [pc, #260]	; (b5598 <_Z18readCompassHeadingff+0x2a0>)
   b5492:	2200      	movs	r2, #0
   b5494:	f00e fe36 	bl	c4104 <__aeabi_ddiv>
   b5498:	4b2f      	ldr	r3, [pc, #188]	; (b5558 <_Z18readCompassHeadingff+0x260>)
   b549a:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b549c:	f00e fb50 	bl	c3b40 <__aeabi_dsub>
   b54a0:	e785      	b.n	b53ae <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b54a2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b559c <_Z18readCompassHeadingff+0x2a4>
   b54a6:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b54aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54ae:	db15      	blt.n	b54dc <_Z18readCompassHeadingff+0x1e4>
   b54b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b54b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54b8:	d510      	bpl.n	b54dc <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b54ba:	4b39      	ldr	r3, [pc, #228]	; (b55a0 <_Z18readCompassHeadingff+0x2a8>)
   b54bc:	2200      	movs	r2, #0
   b54be:	4620      	mov	r0, r4
   b54c0:	4629      	mov	r1, r5
   b54c2:	f00e fb3f 	bl	c3b44 <__adddf3>
   b54c6:	4b30      	ldr	r3, [pc, #192]	; (b5588 <_Z18readCompassHeadingff+0x290>)
   b54c8:	2200      	movs	r2, #0
   b54ca:	f00e fcf1 	bl	c3eb0 <__aeabi_dmul>
   b54ce:	4b35      	ldr	r3, [pc, #212]	; (b55a4 <_Z18readCompassHeadingff+0x2ac>)
   b54d0:	2200      	movs	r2, #0
   b54d2:	f00e fe17 	bl	c4104 <__aeabi_ddiv>
   b54d6:	4b28      	ldr	r3, [pc, #160]	; (b5578 <_Z18readCompassHeadingff+0x280>)
   b54d8:	2200      	movs	r2, #0
   b54da:	e7df      	b.n	b549c <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b54dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b54e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b54e4:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b54e8:	dd10      	ble.n	b550c <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b54ea:	4b2f      	ldr	r3, [pc, #188]	; (b55a8 <_Z18readCompassHeadingff+0x2b0>)
   b54ec:	4620      	mov	r0, r4
   b54ee:	4629      	mov	r1, r5
   b54f0:	f00e fb26 	bl	c3b40 <__aeabi_dsub>
   b54f4:	4b18      	ldr	r3, [pc, #96]	; (b5558 <_Z18readCompassHeadingff+0x260>)
   b54f6:	2200      	movs	r2, #0
   b54f8:	f00e fcda 	bl	c3eb0 <__aeabi_dmul>
   b54fc:	a310      	add	r3, pc, #64	; (adr r3, b5540 <_Z18readCompassHeadingff+0x248>)
   b54fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5502:	f00e fdff 	bl	c4104 <__aeabi_ddiv>
   b5506:	4b12      	ldr	r3, [pc, #72]	; (b5550 <_Z18readCompassHeadingff+0x258>)
   b5508:	2200      	movs	r2, #0
   b550a:	e7c7      	b.n	b549c <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b550c:	4b27      	ldr	r3, [pc, #156]	; (b55ac <_Z18readCompassHeadingff+0x2b4>)
   b550e:	4620      	mov	r0, r4
   b5510:	4629      	mov	r1, r5
   b5512:	f00e fb17 	bl	c3b44 <__adddf3>
   b5516:	a30c      	add	r3, pc, #48	; (adr r3, b5548 <_Z18readCompassHeadingff+0x250>)
   b5518:	e9d3 2300 	ldrd	r2, r3, [r3]
   b551c:	f00e fcc8 	bl	c3eb0 <__aeabi_dmul>
   b5520:	4b23      	ldr	r3, [pc, #140]	; (b55b0 <_Z18readCompassHeadingff+0x2b8>)
   b5522:	2200      	movs	r2, #0
   b5524:	f00e fdee 	bl	c4104 <__aeabi_ddiv>
   b5528:	a303      	add	r3, pc, #12	; (adr r3, b5538 <_Z18readCompassHeadingff+0x240>)
   b552a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b552e:	e7b5      	b.n	b549c <_Z18readCompassHeadingff+0x1a4>
   b5530:	54442d18 	.word	0x54442d18
   b5534:	400921fb 	.word	0x400921fb
   b5538:	00000000 	.word	0x00000000
   b553c:	4060e000 	.word	0x4060e000
   b5540:	00000000 	.word	0x00000000
   b5544:	4063a000 	.word	0x4063a000
   b5548:	bb000000 	.word	0xbb000000
   b554c:	403d3c54 	.word	0x403d3c54
   b5550:	40668000 	.word	0x40668000
   b5554:	40180000 	.word	0x40180000
   b5558:	40468000 	.word	0x40468000
   b555c:	40390000 	.word	0x40390000
   b5560:	42680000 	.word	0x42680000
   b5564:	403f0000 	.word	0x403f0000
   b5568:	403b0000 	.word	0x403b0000
   b556c:	42ac0000 	.word	0x42ac0000
   b5570:	404d0000 	.word	0x404d0000
   b5574:	403c0000 	.word	0x403c0000
   b5578:	40568000 	.word	0x40568000
   b557c:	42fa0000 	.word	0x42fa0000
   b5580:	40558000 	.word	0x40558000
   b5584:	40438000 	.word	0x40438000
   b5588:	c0468000 	.word	0xc0468000
   b558c:	c0380000 	.word	0xc0380000
   b5590:	c2200000 	.word	0xc2200000
   b5594:	40320000 	.word	0x40320000
   b5598:	c0360000 	.word	0xc0360000
   b559c:	c29c0000 	.word	0xc29c0000
   b55a0:	40440000 	.word	0x40440000
   b55a4:	c0430000 	.word	0xc0430000
   b55a8:	405f4000 	.word	0x405f4000
   b55ac:	40538000 	.word	0x40538000
   b55b0:	40598000 	.word	0x40598000
   b55b4:	00000000 	.word	0x00000000

000b55b8 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b55b8:	b510      	push	{r4, lr}
   b55ba:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);   //Multiply by Pi/180
   b55be:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b55c2:	b082      	sub	sp, #8
  return deg * (3.14159/180);   //Multiply by Pi/180
   b55c4:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b55c8:	eef0 aa41 	vmov.f32	s21, s2
   b55cc:	eeb0 aa61 	vmov.f32	s20, s3
   b55d0:	eef0 8a60 	vmov.f32	s17, s1
   b55d4:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b55d8:	f00e fc12 	bl	c3e00 <__aeabi_f2d>
   b55dc:	a342      	add	r3, pc, #264	; (adr r3, b56e8 <_Z12calcDistanceffff+0x130>)
   b55de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55e2:	f00e fc65 	bl	c3eb0 <__aeabi_dmul>
   b55e6:	f00e ff5b 	bl	c44a0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b55ea:	ee07 0a90 	vmov	s15, r0
   b55ee:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b55f2:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b55f6:	f00c ff37 	bl	c2468 <sinf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b55fa:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b55fe:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5602:	f00e fbfd 	bl	c3e00 <__aeabi_f2d>
   b5606:	a338      	add	r3, pc, #224	; (adr r3, b56e8 <_Z12calcDistanceffff+0x130>)
   b5608:	e9d3 2300 	ldrd	r2, r3, [r3]
   b560c:	f00e fc50 	bl	c3eb0 <__aeabi_dmul>
   b5610:	f00e ff46 	bl	c44a0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5614:	ee00 0a10 	vmov	s0, r0
   b5618:	f00c feee 	bl	c23f8 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b561c:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5620:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5624:	f00e fbec 	bl	c3e00 <__aeabi_f2d>
   b5628:	a32f      	add	r3, pc, #188	; (adr r3, b56e8 <_Z12calcDistanceffff+0x130>)
   b562a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b562e:	f00e fc3f 	bl	c3eb0 <__aeabi_dmul>
   b5632:	f00e ff35 	bl	c44a0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5636:	ee00 0a10 	vmov	s0, r0
   b563a:	f00c fedd 	bl	c23f8 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b563e:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5642:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5646:	ee17 0a90 	vmov	r0, s15
   b564a:	f00e fbd9 	bl	c3e00 <__aeabi_f2d>
   b564e:	a326      	add	r3, pc, #152	; (adr r3, b56e8 <_Z12calcDistanceffff+0x130>)
   b5650:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5654:	f00e fc2c 	bl	c3eb0 <__aeabi_dmul>
   b5658:	f00e ff22 	bl	c44a0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b565c:	ee07 0a90 	vmov	s15, r0
   b5660:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b5664:	f00c ff00 	bl	c2468 <sinf>
   b5668:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b566c:	ee68 8a80 	vmul.f32	s17, s17, s0
   b5670:	ee28 8a80 	vmul.f32	s16, s17, s0
   b5674:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b5678:	eeb0 0a48 	vmov.f32	s0, s16
   b567c:	f00c ff6c 	bl	c2558 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b5680:	ee18 0a10 	vmov	r0, s16
   b5684:	ee10 4a10 	vmov	r4, s0
   b5688:	f00e fbba 	bl	c3e00 <__aeabi_f2d>
   b568c:	4602      	mov	r2, r0
   b568e:	460b      	mov	r3, r1
   b5690:	2000      	movs	r0, #0
   b5692:	4913      	ldr	r1, [pc, #76]	; (b56e0 <_Z12calcDistanceffff+0x128>)
   b5694:	f00e fa54 	bl	c3b40 <__aeabi_dsub>
   b5698:	ec41 0b10 	vmov	d0, r0, r1
   b569c:	f00c ff20 	bl	c24e0 <sqrt>
      return atan2(__type(__y), __type(__x));
   b56a0:	4620      	mov	r0, r4
   b56a2:	ed8d 0b00 	vstr	d0, [sp]
   b56a6:	f00e fbab 	bl	c3e00 <__aeabi_f2d>
   b56aa:	ed9d 1b00 	vldr	d1, [sp]
   b56ae:	ec41 0b10 	vmov	d0, r0, r1
   b56b2:	f00c ff13 	bl	c24dc <atan2>
   b56b6:	ec53 2b10 	vmov	r2, r3, d0
   b56ba:	ee10 0a10 	vmov	r0, s0
   b56be:	4619      	mov	r1, r3
   b56c0:	f00e fa40 	bl	c3b44 <__adddf3>
   b56c4:	f00e feec 	bl	c44a0 <__aeabi_d2f>
}
   b56c8:	ed9f 0a06 	vldr	s0, [pc, #24]	; b56e4 <_Z12calcDistanceffff+0x12c>
   b56cc:	ee07 0a90 	vmov	s15, r0
   b56d0:	ee27 0a80 	vmul.f32	s0, s15, s0
   b56d4:	b002      	add	sp, #8
   b56d6:	ecbd 8b08 	vpop	{d8-d11}
   b56da:	bd10      	pop	{r4, pc}
   b56dc:	f3af 8000 	nop.w
   b56e0:	3ff00000 	.word	0x3ff00000
   b56e4:	4ac26d70 	.word	0x4ac26d70
   b56e8:	a50de270 	.word	0xa50de270
   b56ec:	3f91df45 	.word	0x3f91df45

000b56f0 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   b56f0:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){ 
   b56f2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   b56f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   b56fa:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   b56fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   b5702:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){ 
   b5706:	dd37      	ble.n	b5778 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   b5708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b570c:	dd04      	ble.n	b5718 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   b570e:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   b5712:	ecbd 8b02 	vpop	{d8}
   b5716:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   b5718:	eddf 7a2b 	vldr	s15, [pc, #172]	; b57c8 <_Z9calcDeltaff+0xd8>
   b571c:	ee77 7ae0 	vsub.f32	s15, s15, s1
   b5720:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   b5724:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b572c:	dcef      	bgt.n	b570e <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   b572e:	ee10 0a10 	vmov	r0, s0
   b5732:	f00e fb65 	bl	c3e00 <__aeabi_f2d>
   b5736:	4b25      	ldr	r3, [pc, #148]	; (b57cc <_Z9calcDeltaff+0xdc>)
   b5738:	2200      	movs	r2, #0
   b573a:	f00e fa03 	bl	c3b44 <__adddf3>
   b573e:	4602      	mov	r2, r0
   b5740:	460b      	mov	r3, r1
   b5742:	2000      	movs	r0, #0
   b5744:	2100      	movs	r1, #0
   b5746:	f00e f9fb 	bl	c3b40 <__aeabi_dsub>
   b574a:	4604      	mov	r4, r0
   b574c:	ee18 0a10 	vmov	r0, s16
   b5750:	460d      	mov	r5, r1
   b5752:	f00e fb55 	bl	c3e00 <__aeabi_f2d>
   b5756:	4602      	mov	r2, r0
   b5758:	460b      	mov	r3, r1
   b575a:	2000      	movs	r0, #0
   b575c:	491b      	ldr	r1, [pc, #108]	; (b57cc <_Z9calcDeltaff+0xdc>)
   b575e:	f00e f9ef 	bl	c3b40 <__aeabi_dsub>
   b5762:	4602      	mov	r2, r0
   b5764:	460b      	mov	r3, r1
   b5766:	4620      	mov	r0, r4
   b5768:	4629      	mov	r1, r5
   b576a:	f00e f9e9 	bl	c3b40 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b576e:	f00e fe97 	bl	c44a0 <__aeabi_d2f>
   b5772:	ee00 0a10 	vmov	s0, r0
   b5776:	e7cc      	b.n	b5712 <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   b5778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b577c:	ddc7      	ble.n	b570e <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   b577e:	eddf 7a12 	vldr	s15, [pc, #72]	; b57c8 <_Z9calcDeltaff+0xd8>
   b5782:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   b5786:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b578e:	d4be      	bmi.n	b570e <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b5790:	ee10 0a10 	vmov	r0, s0
   b5794:	f00e fb34 	bl	c3e00 <__aeabi_f2d>
   b5798:	4602      	mov	r2, r0
   b579a:	460b      	mov	r3, r1
   b579c:	2000      	movs	r0, #0
   b579e:	490b      	ldr	r1, [pc, #44]	; (b57cc <_Z9calcDeltaff+0xdc>)
   b57a0:	f00e f9ce 	bl	c3b40 <__aeabi_dsub>
   b57a4:	4604      	mov	r4, r0
   b57a6:	ee18 0a10 	vmov	r0, s16
   b57aa:	460d      	mov	r5, r1
   b57ac:	f00e fb28 	bl	c3e00 <__aeabi_f2d>
   b57b0:	4b06      	ldr	r3, [pc, #24]	; (b57cc <_Z9calcDeltaff+0xdc>)
   b57b2:	2200      	movs	r2, #0
   b57b4:	f00e f9c6 	bl	c3b44 <__adddf3>
   b57b8:	4602      	mov	r2, r0
   b57ba:	460b      	mov	r3, r1
   b57bc:	4620      	mov	r0, r4
   b57be:	4629      	mov	r1, r5
   b57c0:	f00e f9c0 	bl	c3b44 <__adddf3>
   b57c4:	e7d3      	b.n	b576e <_Z9calcDeltaff+0x7e>
   b57c6:	bf00      	nop
   b57c8:	43340000 	.word	0x43340000
   b57cc:	40668000 	.word	0x40668000

000b57d0 <_Z15getPositionDatav>:
void getPositionData(){
   b57d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b57d4:	ed2d 8b02 	vpush	{d8}
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   b57d8:	4c59      	ldr	r4, [pc, #356]	; (b5940 <_Z15getPositionDatav+0x170>)
void getPositionData(){
   b57da:	b08b      	sub	sp, #44	; 0x2c
   b57dc:	f008 fa42 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   b57e0:	6823      	ldr	r3, [r4, #0]
   b57e2:	1ac0      	subs	r0, r0, r3
   b57e4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b57e8:	f240 809c 	bls.w	b5924 <_Z15getPositionDatav+0x154>
   b57ec:	f008 fa3a 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b57f0:	4b54      	ldr	r3, [pc, #336]	; (b5944 <_Z15getPositionDatav+0x174>)
        positionTimer = millis();                       //Reset timer
   b57f2:	6020      	str	r0, [r4, #0]
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b57f4:	2501      	movs	r5, #1
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   b57f6:	4854      	ldr	r0, [pc, #336]	; (b5948 <_Z15getPositionDatav+0x178>)
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b57f8:	701d      	strb	r5, [r3, #0]
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   b57fa:	f240 414c 	movw	r1, #1100	; 0x44c
   b57fe:	f007 fc11 	bl	bd024 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b5802:	4c52      	ldr	r4, [pc, #328]	; (b594c <_Z15getPositionDatav+0x17c>)
   b5804:	2800      	cmp	r0, #0
   b5806:	f000 8092 	beq.w	b592e <_Z15getPositionDatav+0x15e>
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b580a:	f240 414c 	movw	r1, #1100	; 0x44c
   b580e:	484e      	ldr	r0, [pc, #312]	; (b5948 <_Z15getPositionDatav+0x178>)
   b5810:	ed9f 8a4f 	vldr	s16, [pc, #316]	; b5950 <_Z15getPositionDatav+0x180>
   b5814:	f007 fca9 	bl	bd16a <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b5818:	ee07 0a90 	vmov	s15, r0
   b581c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5820:	4b4c      	ldr	r3, [pc, #304]	; (b5954 <_Z15getPositionDatav+0x184>)
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5822:	4849      	ldr	r0, [pc, #292]	; (b5948 <_Z15getPositionDatav+0x178>)
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b5824:	ee87 7a88 	vdiv.f32	s14, s15, s16
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5828:	f240 414c 	movw	r1, #1100	; 0x44c
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b582c:	ed83 7a00 	vstr	s14, [r3]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5830:	f007 fc78 	bl	bd124 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b5834:	ee07 0a90 	vmov	s15, r0
   b5838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b583c:	4b46      	ldr	r3, [pc, #280]	; (b5958 <_Z15getPositionDatav+0x188>)
            GPSAvail = true;
   b583e:	7025      	strb	r5, [r4, #0]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5840:	ee87 7a88 	vdiv.f32	s14, s15, s16
   b5844:	ed83 7a00 	vstr	s14, [r3]
        lis3mdl.read();                                 // get X Y and Z data at once
   b5848:	4844      	ldr	r0, [pc, #272]	; (b595c <_Z15getPositionDatav+0x18c>)
   b584a:	f007 fce9 	bl	bd220 <_ZN16Adafruit_LIS3MDL4readEv>
        bool CompassAvail = lis3mdl.getEvent(&event);   //Get event data over I2C from compass
   b584e:	4843      	ldr	r0, [pc, #268]	; (b595c <_Z15getPositionDatav+0x18c>)
   b5850:	a901      	add	r1, sp, #4
   b5852:	f007 fd2b 	bl	bd2ac <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(CompassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b5856:	4604      	mov	r4, r0
   b5858:	b140      	cbz	r0, b586c <_Z15getPositionDatav+0x9c>
   b585a:	eddd 0a07 	vldr	s1, [sp, #28]
   b585e:	ed9d 0a06 	vldr	s0, [sp, #24]
   b5862:	f7ff fd49 	bl	b52f8 <_Z18readCompassHeadingff>
   b5866:	4b3e      	ldr	r3, [pc, #248]	; (b5960 <_Z15getPositionDatav+0x190>)
   b5868:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){         //Check that the target latitude and longitude are valid
   b586c:	4e3d      	ldr	r6, [pc, #244]	; (b5964 <_Z15getPositionDatav+0x194>)
   b586e:	ed9f 6a3e 	vldr	s12, [pc, #248]	; b5968 <_Z15getPositionDatav+0x198>
   b5872:	ed96 7a00 	vldr	s14, [r6]
   b5876:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b587e:	db51      	blt.n	b5924 <_Z15getPositionDatav+0x154>
   b5880:	eddf 6a3a 	vldr	s13, [pc, #232]	; b596c <_Z15getPositionDatav+0x19c>
   b5884:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b5888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b588c:	d84a      	bhi.n	b5924 <_Z15getPositionDatav+0x154>
   b588e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; b5988 <_Z15getPositionDatav+0x1b8>
   b5892:	edd8 7a00 	vldr	s15, [r8]
   b5896:	eef4 7ac6 	vcmpe.f32	s15, s12
   b589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b589e:	db41      	blt.n	b5924 <_Z15getPositionDatav+0x154>
   b58a0:	eef4 7ae6 	vcmpe.f32	s15, s13
   b58a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b58a8:	d83c      	bhi.n	b5924 <_Z15getPositionDatav+0x154>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   b58aa:	4f2a      	ldr	r7, [pc, #168]	; (b5954 <_Z15getPositionDatav+0x184>)
   b58ac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; b5958 <_Z15getPositionDatav+0x188>
   b58b0:	edd7 0a00 	vldr	s1, [r7]
   b58b4:	ed99 0a00 	vldr	s0, [r9]
   b58b8:	4d2d      	ldr	r5, [pc, #180]	; (b5970 <_Z15getPositionDatav+0x1a0>)
  { return __builtin_atan2f(__y, __x); }
   b58ba:	ee77 0a60 	vsub.f32	s1, s14, s1
   b58be:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b58c2:	f00c fe47 	bl	c2554 <atan2f>
   b58c6:	eddf 7a2b 	vldr	s15, [pc, #172]	; b5974 <_Z15getPositionDatav+0x1a4>
   b58ca:	ee60 7a27 	vmul.f32	s15, s0, s15
   b58ce:	ee17 0a90 	vmov	r0, s15
   b58d2:	f00e fa95 	bl	c3e00 <__aeabi_f2d>
   b58d6:	a318      	add	r3, pc, #96	; (adr r3, b5938 <_Z15getPositionDatav+0x168>)
   b58d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b58dc:	f00e fc12 	bl	c4104 <__aeabi_ddiv>
   b58e0:	f00e fdde 	bl	c44a0 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b58e4:	edd9 1a00 	vldr	s3, [r9]
   b58e8:	ed98 1a00 	vldr	s2, [r8]
   b58ec:	edd7 0a00 	vldr	s1, [r7]
   b58f0:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   b58f4:	6028      	str	r0, [r5, #0]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b58f6:	f7ff fe5f 	bl	b55b8 <_Z12calcDistanceffff>
   b58fa:	4b1f      	ldr	r3, [pc, #124]	; (b5978 <_Z15getPositionDatav+0x1a8>)
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   b58fc:	edd5 0a00 	vldr	s1, [r5]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b5900:	ed83 0a00 	vstr	s0, [r3]
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   b5904:	4b16      	ldr	r3, [pc, #88]	; (b5960 <_Z15getPositionDatav+0x190>)
   b5906:	ed93 0a00 	vldr	s0, [r3]
   b590a:	f7ff fef1 	bl	b56f0 <_Z9calcDeltaff>
   b590e:	4b1b      	ldr	r3, [pc, #108]	; (b597c <_Z15getPositionDatav+0x1ac>)
   b5910:	ed83 0a00 	vstr	s0, [r3]
   b5914:	f008 f9a6 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();                                                           //Update telemetry time
   b5918:	4b19      	ldr	r3, [pc, #100]	; (b5980 <_Z15getPositionDatav+0x1b0>)
   b591a:	6018      	str	r0, [r3, #0]
            if(CompassAvail) telemetryAvail = true;                                             //If compass and GPS are available, set flag to true
   b591c:	b114      	cbz	r4, b5924 <_Z15getPositionDatav+0x154>
   b591e:	4b19      	ldr	r3, [pc, #100]	; (b5984 <_Z15getPositionDatav+0x1b4>)
   b5920:	2201      	movs	r2, #1
   b5922:	701a      	strb	r2, [r3, #0]
}
   b5924:	b00b      	add	sp, #44	; 0x2c
   b5926:	ecbd 8b02 	vpop	{d8}
   b592a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else GPSAvail = false;                          //Set flag to indicate GPS unavailable if not connected
   b592e:	7020      	strb	r0, [r4, #0]
   b5930:	e78a      	b.n	b5848 <_Z15getPositionDatav+0x78>
   b5932:	bf00      	nop
   b5934:	f3af 8000 	nop.w
   b5938:	54442d18 	.word	0x54442d18
   b593c:	400921fb 	.word	0x400921fb
   b5940:	2003e0b4 	.word	0x2003e0b4
   b5944:	2003e5ec 	.word	0x2003e5ec
   b5948:	2003df30 	.word	0x2003df30
   b594c:	2003dd68 	.word	0x2003dd68
   b5950:	49742400 	.word	0x49742400
   b5954:	2003ddfc 	.word	0x2003ddfc
   b5958:	2003ded8 	.word	0x2003ded8
   b595c:	2003de20 	.word	0x2003de20
   b5960:	2003dda8 	.word	0x2003dda8
   b5964:	2003e5d0 	.word	0x2003e5d0
   b5968:	c2b40000 	.word	0xc2b40000
   b596c:	42b40000 	.word	0x42b40000
   b5970:	2003e5e0 	.word	0x2003e5e0
   b5974:	43340000 	.word	0x43340000
   b5978:	2003e5dc 	.word	0x2003e5dc
   b597c:	2003e5cc 	.word	0x2003e5cc
   b5980:	2003ddf8 	.word	0x2003ddf8
   b5984:	2003e5d8 	.word	0x2003e5d8
   b5988:	2003e5d4 	.word	0x2003e5d4

000b598c <_Z12updateMotorsv>:
void updateMotors(){
   b598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b5990:	f8df a254 	ldr.w	sl, [pc, #596]	; b5be8 <_Z12updateMotorsv+0x25c>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5994:	4b85      	ldr	r3, [pc, #532]	; (b5bac <_Z12updateMotorsv+0x220>)
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b5996:	f89a 2000 	ldrb.w	r2, [sl]
void updateMotors(){
   b599a:	ed2d 8b04 	vpush	{d8-d9}
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b599e:	781b      	ldrb	r3, [r3, #0]
void updateMotors(){
   b59a0:	b083      	sub	sp, #12
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b59a2:	2a00      	cmp	r2, #0
   b59a4:	f000 80f0 	beq.w	b5b88 <_Z12updateMotorsv+0x1fc>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b59a8:	3b01      	subs	r3, #1
   b59aa:	2b01      	cmp	r3, #1
   b59ac:	4c80      	ldr	r4, [pc, #512]	; (b5bb0 <_Z12updateMotorsv+0x224>)
   b59ae:	4f81      	ldr	r7, [pc, #516]	; (b5bb4 <_Z12updateMotorsv+0x228>)
   b59b0:	4d81      	ldr	r5, [pc, #516]	; (b5bb8 <_Z12updateMotorsv+0x22c>)
   b59b2:	4e82      	ldr	r6, [pc, #520]	; (b5bbc <_Z12updateMotorsv+0x230>)
   b59b4:	f200 8099 	bhi.w	b5aea <_Z12updateMotorsv+0x15e>
            if(travelDistance < MTR_CUTOFF_RAD){            //If the bot is close enough to the center when in autonomous and sentry, then disable motors and float there
   b59b8:	4b81      	ldr	r3, [pc, #516]	; (b5bc0 <_Z12updateMotorsv+0x234>)
   b59ba:	edd3 7a00 	vldr	s15, [r3]
   b59be:	4b81      	ldr	r3, [pc, #516]	; (b5bc4 <_Z12updateMotorsv+0x238>)
   b59c0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b59c4:	eef4 7ac7 	vcmpe.f32	s15, s14
   b59c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b59cc:	d53d      	bpl.n	b5a4a <_Z12updateMotorsv+0xbe>
                pointArrived = true;                        //Indicate that the bot has arrived at the target point, which acts as a disable until it drifts out of the larger radius
   b59ce:	2201      	movs	r2, #1
   b59d0:	701a      	strb	r2, [r3, #0]
                leftMotorSpeed = setLSpeed = 90;            //Set left and right motor speeds to off
   b59d2:	235a      	movs	r3, #90	; 0x5a
   b59d4:	7023      	strb	r3, [r4, #0]
   b59d6:	703b      	strb	r3, [r7, #0]
                rightMotorSpeed = setRSpeed = 90;
   b59d8:	702b      	strb	r3, [r5, #0]
   b59da:	7033      	strb	r3, [r6, #0]
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b59dc:	7823      	ldrb	r3, [r4, #0]
   b59de:	3b43      	subs	r3, #67	; 0x43
   b59e0:	2b16      	cmp	r3, #22
   b59e2:	bf9c      	itt	ls
   b59e4:	2343      	movls	r3, #67	; 0x43
   b59e6:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b59e8:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b59ea:	7822      	ldrb	r2, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b59ec:	3b43      	subs	r3, #67	; 0x43
   b59ee:	2b16      	cmp	r3, #22
   b59f0:	bf9c      	itt	ls
   b59f2:	2343      	movls	r3, #67	; 0x43
   b59f4:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b59f6:	783b      	ldrb	r3, [r7, #0]
   b59f8:	4293      	cmp	r3, r2
   b59fa:	f080 80b3 	bcs.w	b5b64 <_Z12updateMotorsv+0x1d8>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;   //If we're off by more than one step size, then increment by one step
   b59fe:	1ad1      	subs	r1, r2, r3
   b5a00:	2903      	cmp	r1, #3
   b5a02:	f340 80b6 	ble.w	b5b72 <_Z12updateMotorsv+0x1e6>
   b5a06:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b5a08:	703b      	strb	r3, [r7, #0]
        if(rightMotorSpeed < setRSpeed){                                                    //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5a0a:	7833      	ldrb	r3, [r6, #0]
   b5a0c:	782a      	ldrb	r2, [r5, #0]
   b5a0e:	4293      	cmp	r3, r2
   b5a10:	f080 80b1 	bcs.w	b5b76 <_Z12updateMotorsv+0x1ea>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD; //If we're off by more than one step size, then increment by one step
   b5a14:	1ad1      	subs	r1, r2, r3
   b5a16:	2903      	cmp	r1, #3
   b5a18:	f340 80b4 	ble.w	b5b84 <_Z12updateMotorsv+0x1f8>
   b5a1c:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b5a1e:	7033      	strb	r3, [r6, #0]
        if(!stopActive){                    //If there has not been a stop command, then update the ESC
   b5a20:	4b69      	ldr	r3, [pc, #420]	; (b5bc8 <_Z12updateMotorsv+0x23c>)
   b5a22:	781b      	ldrb	r3, [r3, #0]
   b5a24:	b94b      	cbnz	r3, b5a3a <_Z12updateMotorsv+0xae>
            ESCL.write(leftMotorSpeed);
   b5a26:	7839      	ldrb	r1, [r7, #0]
   b5a28:	4868      	ldr	r0, [pc, #416]	; (b5bcc <_Z12updateMotorsv+0x240>)
   b5a2a:	f008 fe1f 	bl	be66c <_ZN5Servo5writeEi>
            ESCR.write(180-rightMotorSpeed);
   b5a2e:	7831      	ldrb	r1, [r6, #0]
   b5a30:	4867      	ldr	r0, [pc, #412]	; (b5bd0 <_Z12updateMotorsv+0x244>)
   b5a32:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b5a36:	f008 fe19 	bl	be66c <_ZN5Servo5writeEi>
        updateMotorControl = false;        //Set the flag to false
   b5a3a:	2300      	movs	r3, #0
   b5a3c:	f88a 3000 	strb.w	r3, [sl]
}
   b5a40:	b003      	add	sp, #12
   b5a42:	ecbd 8b04 	vpop	{d8-d9}
   b5a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){      //Check if the bot is inside of the larger radius of approaching the target point, start slowing motors here
   b5a4a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b5a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5a56:	d55e      	bpl.n	b5b16 <_Z12updateMotorsv+0x18a>
                if(pointArrived){                           //If we had already arrived at the target point, then use this larger radius as a deadzone so we don't have rapid on/off on the small radius border
   b5a58:	781b      	ldrb	r3, [r3, #0]
   b5a5a:	9301      	str	r3, [sp, #4]
   b5a5c:	b11b      	cbz	r3, b5a66 <_Z12updateMotorsv+0xda>
                    setLSpeed = 90;                         //Keep motors off here
   b5a5e:	235a      	movs	r3, #90	; 0x5a
   b5a60:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b5a62:	702b      	strb	r3, [r5, #0]
   b5a64:	e7ba      	b.n	b59dc <_Z12updateMotorsv+0x50>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);    //Take the base 90 (stopped speed), add the delta for how much the heading is off, and slow with distance
   b5a66:	4b5b      	ldr	r3, [pc, #364]	; (b5bd4 <_Z12updateMotorsv+0x248>)
   b5a68:	eddf 8a5b 	vldr	s17, [pc, #364]	; b5bd8 <_Z12updateMotorsv+0x24c>
   b5a6c:	ed93 8a00 	vldr	s16, [r3]
   b5a70:	4b5a      	ldr	r3, [pc, #360]	; (b5bdc <_Z12updateMotorsv+0x250>)
   b5a72:	eee8 8a28 	vfma.f32	s17, s16, s17
   b5a76:	ed93 7a00 	vldr	s14, [r3]
   b5a7a:	ee17 0a90 	vmov	r0, s15
   b5a7e:	ee28 8a07 	vmul.f32	s16, s16, s14
   b5a82:	f00e f9bd 	bl	c3e00 <__aeabi_f2d>
   b5a86:	4b56      	ldr	r3, [pc, #344]	; (b5be0 <_Z12updateMotorsv+0x254>)
   b5a88:	2200      	movs	r2, #0
   b5a8a:	f00e fa11 	bl	c3eb0 <__aeabi_dmul>
   b5a8e:	ee78 7a88 	vadd.f32	s15, s17, s16
   b5a92:	4680      	mov	r8, r0
   b5a94:	4689      	mov	r9, r1
   b5a96:	ee17 0a90 	vmov	r0, s15
   b5a9a:	f00e f9b1 	bl	c3e00 <__aeabi_f2d>
   b5a9e:	4642      	mov	r2, r8
   b5aa0:	464b      	mov	r3, r9
   b5aa2:	f00e fa05 	bl	c3eb0 <__aeabi_dmul>
   b5aa6:	f00e fcb3 	bl	c4410 <__aeabi_d2iz>
   b5aaa:	4683      	mov	fp, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b5aac:	ee18 0a90 	vmov	r0, s17
   b5ab0:	f00e f9a6 	bl	c3e00 <__aeabi_f2d>
   b5ab4:	ec41 0b19 	vmov	d9, r0, r1
   b5ab8:	ee18 0a10 	vmov	r0, s16
   b5abc:	f00e f9a0 	bl	c3e00 <__aeabi_f2d>
   b5ac0:	4642      	mov	r2, r8
   b5ac2:	464b      	mov	r3, r9
   b5ac4:	f00e f9f4 	bl	c3eb0 <__aeabi_dmul>
   b5ac8:	4602      	mov	r2, r0
   b5aca:	460b      	mov	r3, r1
   b5acc:	ec51 0b19 	vmov	r0, r1, d9
   b5ad0:	f00e f836 	bl	c3b40 <__aeabi_dsub>
   b5ad4:	f00e fc9c 	bl	c4410 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;             //Cap the speed between 0 and 180
   b5ad8:	f1bb 0f00 	cmp.w	fp, #0
   b5adc:	da12      	bge.n	b5b04 <_Z12updateMotorsv+0x178>
   b5ade:	9b01      	ldr	r3, [sp, #4]
                    else if(Lset > 180) setLSpeed = 180;
   b5ae0:	7023      	strb	r3, [r4, #0]
                    if(Rset < 0) setRSpeed = 0;
   b5ae2:	2800      	cmp	r0, #0
   b5ae4:	da13      	bge.n	b5b0e <_Z12updateMotorsv+0x182>
   b5ae6:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b5ae8:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123; //Push motor speed out of deadzone to make sure the motors actually respond to non-90 inputs
   b5aea:	7823      	ldrb	r3, [r4, #0]
   b5aec:	3b5b      	subs	r3, #91	; 0x5b
   b5aee:	2b20      	cmp	r3, #32
   b5af0:	bf9c      	itt	ls
   b5af2:	237b      	movls	r3, #123	; 0x7b
   b5af4:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b5af6:	782b      	ldrb	r3, [r5, #0]
   b5af8:	3b5b      	subs	r3, #91	; 0x5b
   b5afa:	2b20      	cmp	r3, #32
   b5afc:	f63f af6e 	bhi.w	b59dc <_Z12updateMotorsv+0x50>
   b5b00:	237b      	movs	r3, #123	; 0x7b
   b5b02:	e7ae      	b.n	b5a62 <_Z12updateMotorsv+0xd6>
                    else if(Lset > 180) setLSpeed = 180;
   b5b04:	f1bb 0fb4 	cmp.w	fp, #180	; 0xb4
   b5b08:	ddeb      	ble.n	b5ae2 <_Z12updateMotorsv+0x156>
   b5b0a:	23b4      	movs	r3, #180	; 0xb4
   b5b0c:	e7e8      	b.n	b5ae0 <_Z12updateMotorsv+0x154>
                    else if(Rset > 180) setRSpeed = 180;
   b5b0e:	28b4      	cmp	r0, #180	; 0xb4
   b5b10:	ddeb      	ble.n	b5aea <_Z12updateMotorsv+0x15e>
   b5b12:	23b4      	movs	r3, #180	; 0xb4
   b5b14:	e7e8      	b.n	b5ae8 <_Z12updateMotorsv+0x15c>
                pointArrived = false;                       //Set flag back to false so we have to travel to the inner circle, also happens usually when a new point is specified
   b5b16:	2100      	movs	r1, #0
   b5b18:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5b1a:	4b2e      	ldr	r3, [pc, #184]	; (b5bd4 <_Z12updateMotorsv+0x248>)
   b5b1c:	eddf 7a2e 	vldr	s15, [pc, #184]	; b5bd8 <_Z12updateMotorsv+0x24c>
   b5b20:	edd3 6a00 	vldr	s13, [r3]
   b5b24:	4b2d      	ldr	r3, [pc, #180]	; (b5bdc <_Z12updateMotorsv+0x250>)
   b5b26:	eee6 7aa7 	vfma.f32	s15, s13, s15
   b5b2a:	ed93 6a00 	vldr	s12, [r3]
   b5b2e:	eeb0 7a67 	vmov.f32	s14, s15
   b5b32:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5b36:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5b3a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5b42:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b5b46:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5b48:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b5b4c:	da05      	bge.n	b5b5a <_Z12updateMotorsv+0x1ce>
   b5b4e:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b5b50:	2b00      	cmp	r3, #0
   b5b52:	dbc8      	blt.n	b5ae6 <_Z12updateMotorsv+0x15a>
                else if(Rset > 180) setRSpeed = 180;
   b5b54:	2bb4      	cmp	r3, #180	; 0xb4
   b5b56:	dcdc      	bgt.n	b5b12 <_Z12updateMotorsv+0x186>
   b5b58:	e7c6      	b.n	b5ae8 <_Z12updateMotorsv+0x15c>
                else if(Lset > 180) setLSpeed = 180;
   b5b5a:	2ab4      	cmp	r2, #180	; 0xb4
   b5b5c:	bfc8      	it	gt
   b5b5e:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b5b60:	7022      	strb	r2, [r4, #0]
   b5b62:	e7f5      	b.n	b5b50 <_Z12updateMotorsv+0x1c4>
        else if(leftMotorSpeed > setLSpeed){                                                //If the acutal motor (leftMotorSpeed) speed is greater than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5b64:	f67f af51 	bls.w	b5a0a <_Z12updateMotorsv+0x7e>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b5b68:	1a99      	subs	r1, r3, r2
   b5b6a:	2903      	cmp	r1, #3
   b5b6c:	dd01      	ble.n	b5b72 <_Z12updateMotorsv+0x1e6>
   b5b6e:	3b03      	subs	r3, #3
   b5b70:	e74a      	b.n	b5a08 <_Z12updateMotorsv+0x7c>
            else leftMotorSpeed = setLSpeed;                                                //Otherwise, we're less than one step, so finish step function
   b5b72:	703a      	strb	r2, [r7, #0]
   b5b74:	e749      	b.n	b5a0a <_Z12updateMotorsv+0x7e>
        else if(rightMotorSpeed > setRSpeed){                                               //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5b76:	f67f af53 	bls.w	b5a20 <_Z12updateMotorsv+0x94>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b5b7a:	1a99      	subs	r1, r3, r2
   b5b7c:	2903      	cmp	r1, #3
   b5b7e:	dd01      	ble.n	b5b84 <_Z12updateMotorsv+0x1f8>
   b5b80:	3b03      	subs	r3, #3
   b5b82:	e74c      	b.n	b5a1e <_Z12updateMotorsv+0x92>
            else rightMotorSpeed = setRSpeed;                                               //Otherwise, we're less than one step, so finish step function
   b5b84:	7032      	strb	r2, [r6, #0]
   b5b86:	e74b      	b.n	b5a20 <_Z12updateMotorsv+0x94>
    else if(driveMode == 0 && millis() - positionTimer > MANUAL_RAMP_PD){   //If in manual movement mode, there isn't a trigger for updating the motor speed, so trigger with time periodically
   b5b88:	2b00      	cmp	r3, #0
   b5b8a:	f47f af59 	bne.w	b5a40 <_Z12updateMotorsv+0xb4>
   b5b8e:	4c15      	ldr	r4, [pc, #84]	; (b5be4 <_Z12updateMotorsv+0x258>)
   b5b90:	f008 f868 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   b5b94:	6823      	ldr	r3, [r4, #0]
   b5b96:	1ac0      	subs	r0, r0, r3
   b5b98:	2864      	cmp	r0, #100	; 0x64
   b5b9a:	f67f af51 	bls.w	b5a40 <_Z12updateMotorsv+0xb4>
        updateMotorControl = true;
   b5b9e:	2301      	movs	r3, #1
   b5ba0:	f88a 3000 	strb.w	r3, [sl]
   b5ba4:	f008 f85e 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
        positionTimer = millis();
   b5ba8:	6020      	str	r0, [r4, #0]
}
   b5baa:	e749      	b.n	b5a40 <_Z12updateMotorsv+0xb4>
   b5bac:	2003ddb1 	.word	0x2003ddb1
   b5bb0:	2003e560 	.word	0x2003e560
   b5bb4:	2003de1c 	.word	0x2003de1c
   b5bb8:	2003e561 	.word	0x2003e561
   b5bbc:	2003e0b9 	.word	0x2003e0b9
   b5bc0:	2003e5dc 	.word	0x2003e5dc
   b5bc4:	2003e0b1 	.word	0x2003e0b1
   b5bc8:	2003e5c9 	.word	0x2003e5c9
   b5bcc:	2003dd48 	.word	0x2003dd48
   b5bd0:	2003dd58 	.word	0x2003dd58
   b5bd4:	2003db2c 	.word	0x2003db2c
   b5bd8:	42b40000 	.word	0x42b40000
   b5bdc:	2003e5cc 	.word	0x2003e5cc
   b5be0:	3fd00000 	.word	0x3fd00000
   b5be4:	2003e0b4 	.word	0x2003e0b4
   b5be8:	2003e5ec 	.word	0x2003e5ec

000b5bec <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5bf0:	b084      	sub	sp, #16
   b5bf2:	af02      	add	r7, sp, #8
   b5bf4:	4604      	mov	r4, r0
   b5bf6:	460e      	mov	r6, r1
   b5bf8:	4691      	mov	r9, r2
   b5bfa:	4698      	mov	r8, r3
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b5bfc:	f00e fd97 	bl	c472e <strlen>
   b5c00:	3009      	adds	r0, #9
   b5c02:	f020 0307 	bic.w	r3, r0, #7
   b5c06:	ebad 0d03 	sub.w	sp, sp, r3
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	f00e fd8f 	bl	c472e <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5c10:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5c14:	492e      	ldr	r1, [pc, #184]	; (b5cd0 <_Z8sendDataPKchbbb+0xe4>)
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b5c16:	ad02      	add	r5, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5c18:	4603      	mov	r3, r0
   b5c1a:	4622      	mov	r2, r4
   b5c1c:	4628      	mov	r0, r5
   b5c1e:	f008 fb99 	bl	be354 <sprintf>
    if(sendLTE || sendMode == 4){                               //If sending over LTE, just use the particle event
   b5c22:	f1ba 0f00 	cmp.w	sl, #0
   b5c26:	d101      	bne.n	b5c2c <_Z8sendDataPKchbbb+0x40>
   b5c28:	2e04      	cmp	r6, #4
   b5c2a:	d11b      	bne.n	b5c64 <_Z8sendDataPKchbbb+0x78>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5c2c:	4b29      	ldr	r3, [pc, #164]	; (b5cd4 <_Z8sendDataPKchbbb+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c2e:	492a      	ldr	r1, [pc, #168]	; (b5cd8 <_Z8sendDataPKchbbb+0xec>)
   b5c30:	781b      	ldrb	r3, [r3, #0]
   b5c32:	f88d 3000 	strb.w	r3, [sp]
   b5c36:	462a      	mov	r2, r5
   b5c38:	233c      	movs	r3, #60	; 0x3c
   b5c3a:	4638      	mov	r0, r7
   b5c3c:	f00b fb50 	bl	c12e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5c40:	687c      	ldr	r4, [r7, #4]
   b5c42:	b17c      	cbz	r4, b5c64 <_Z8sendDataPKchbbb+0x78>
      if (--_M_use_count == 0)
   b5c44:	6863      	ldr	r3, [r4, #4]
   b5c46:	3b01      	subs	r3, #1
   b5c48:	6063      	str	r3, [r4, #4]
   b5c4a:	b95b      	cbnz	r3, b5c64 <_Z8sendDataPKchbbb+0x78>
          _M_dispose();
   b5c4c:	6823      	ldr	r3, [r4, #0]
   b5c4e:	4620      	mov	r0, r4
   b5c50:	689b      	ldr	r3, [r3, #8]
   b5c52:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5c54:	68a3      	ldr	r3, [r4, #8]
   b5c56:	3b01      	subs	r3, #1
   b5c58:	60a3      	str	r3, [r4, #8]
   b5c5a:	b91b      	cbnz	r3, b5c64 <_Z8sendDataPKchbbb+0x78>
            _M_destroy();
   b5c5c:	6823      	ldr	r3, [r4, #0]
   b5c5e:	4620      	mov	r0, r4
   b5c60:	68db      	ldr	r3, [r3, #12]
   b5c62:	4798      	blx	r3
    if((sendBLE || sendMode == 1) && BLE.connected()){          //Check that BLE is connected before trying to transmit here
   b5c64:	f1b9 0f00 	cmp.w	r9, #0
   b5c68:	d101      	bne.n	b5c6e <_Z8sendDataPKchbbb+0x82>
   b5c6a:	2e01      	cmp	r6, #1
   b5c6c:	d121      	bne.n	b5cb2 <_Z8sendDataPKchbbb+0xc6>
   b5c6e:	f009 f9bd 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5c72:	f009 fa19 	bl	bf0a8 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5c76:	b1e0      	cbz	r0, b5cb2 <_Z8sendDataPKchbbb+0xc6>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5c78:	4628      	mov	r0, r5
   b5c7a:	f00e fd58 	bl	c472e <strlen>
   b5c7e:	3007      	adds	r0, #7
   b5c80:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5c84:	466c      	mov	r4, sp
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5c86:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b5c8a:	4628      	mov	r0, r5
   b5c8c:	f00e fd4f 	bl	c472e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5c90:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b5c94:	4602      	mov	r2, r0
   b5c96:	4629      	mov	r1, r5
   b5c98:	4648      	mov	r0, r9
   b5c9a:	f00e fc95 	bl	c45c8 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5c9e:	4628      	mov	r0, r5
   b5ca0:	f00e fd45 	bl	c472e <strlen>
   b5ca4:	2300      	movs	r3, #0
   b5ca6:	4602      	mov	r2, r0
   b5ca8:	4649      	mov	r1, r9
   b5caa:	480c      	ldr	r0, [pc, #48]	; (b5cdc <_Z8sendDataPKchbbb+0xf0>)
   b5cac:	f009 f88e 	bl	bedcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5cb0:	46a5      	mov	sp, r4
    if(sendXBee || sendMode == 2){                              //Send out over the harware serial to go through XBee
   b5cb2:	f1b8 0f00 	cmp.w	r8, #0
   b5cb6:	d101      	bne.n	b5cbc <_Z8sendDataPKchbbb+0xd0>
   b5cb8:	2e02      	cmp	r6, #2
   b5cba:	d104      	bne.n	b5cc6 <_Z8sendDataPKchbbb+0xda>
        Serial1.println(outStr);
   b5cbc:	f00c fa22 	bl	c2104 <_Z22__fetch_global_Serial1v>
   b5cc0:	4629      	mov	r1, r5
   b5cc2:	f00a f82a 	bl	bfd1a <_ZN5Print7printlnEPKc>
}
   b5cc6:	3708      	adds	r7, #8
   b5cc8:	46bd      	mov	sp, r7
   b5cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5cce:	bf00      	nop
   b5cd0:	000c6c0b 	.word	0x000c6c0b
   b5cd4:	2003dd84 	.word	0x2003dd84
   b5cd8:	000c6c12 	.word	0x000c6c12
   b5cdc:	2003e5e4 	.word	0x2003e5e4

000b5ce0 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b5ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b5ce2:	2015      	movs	r0, #21
uint8_t readPowerSys(){
   b5ce4:	b087      	sub	sp, #28
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b5ce6:	f00c f9da 	bl	c209e <analogRead>
   b5cea:	ee07 0a90 	vmov	s15, r0
   b5cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b5cf2:	4e53      	ldr	r6, [pc, #332]	; (b5e40 <_Z12readPowerSysv+0x160>)
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b5cf4:	ee17 0a90 	vmov	r0, s15
   b5cf8:	f00e f882 	bl	c3e00 <__aeabi_f2d>
   b5cfc:	a348      	add	r3, pc, #288	; (adr r3, b5e20 <_Z12readPowerSysv+0x140>)
   b5cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d02:	f00e f8d5 	bl	c3eb0 <__aeabi_dmul>
   b5d06:	f00e fbcb 	bl	c44a0 <__aeabi_d2f>
   b5d0a:	4b4e      	ldr	r3, [pc, #312]	; (b5e44 <_Z12readPowerSysv+0x164>)
   b5d0c:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));  //Get raw percentage from voltage divider
   b5d0e:	f00e f877 	bl	c3e00 <__aeabi_f2d>
   b5d12:	a345      	add	r3, pc, #276	; (adr r3, b5e28 <_Z12readPowerSysv+0x148>)
   b5d14:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d18:	f00d ff12 	bl	c3b40 <__aeabi_dsub>
   b5d1c:	4b4a      	ldr	r3, [pc, #296]	; (b5e48 <_Z12readPowerSysv+0x168>)
   b5d1e:	2200      	movs	r2, #0
   b5d20:	f00e f8c6 	bl	c3eb0 <__aeabi_dmul>
   b5d24:	a342      	add	r3, pc, #264	; (adr r3, b5e30 <_Z12readPowerSysv+0x150>)
   b5d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d2a:	f00e f9eb 	bl	c4104 <__aeabi_ddiv>
   b5d2e:	f00e fb6f 	bl	c4410 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;                                              //Max/min percentage so there is a slight deadzone at either end
   b5d32:	2864      	cmp	r0, #100	; 0x64
   b5d34:	4603      	mov	r3, r0
   b5d36:	bfa8      	it	ge
   b5d38:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b5d3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b5d3e:	2814      	cmp	r0, #20
   b5d40:	7033      	strb	r3, [r6, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;                      //Check if battery percentage is low, if low then set flag so the LED flashes and the CChub pops up an alert
   b5d42:	4b42      	ldr	r3, [pc, #264]	; (b5e4c <_Z12readPowerSysv+0x16c>)
   b5d44:	bfcc      	ite	gt
   b5d46:	2000      	movgt	r0, #0
   b5d48:	2001      	movle	r0, #1
   b5d4a:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095; //Read the amplified input from the shunt from the batter and solar array and calculate the multiplier based on the resistor value and datasheet
   b5d4c:	2010      	movs	r0, #16
   b5d4e:	f00c f9a6 	bl	c209e <analogRead>
   b5d52:	ee07 0a90 	vmov	s15, r0
   b5d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5d5a:	ee17 0a90 	vmov	r0, s15
   b5d5e:	f00e f84f 	bl	c3e00 <__aeabi_f2d>
   b5d62:	4b3b      	ldr	r3, [pc, #236]	; (b5e50 <_Z12readPowerSysv+0x170>)
   b5d64:	2200      	movs	r2, #0
   b5d66:	f00e f8a3 	bl	c3eb0 <__aeabi_dmul>
   b5d6a:	a333      	add	r3, pc, #204	; (adr r3, b5e38 <_Z12readPowerSysv+0x158>)
   b5d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d70:	f00e f9c8 	bl	c4104 <__aeabi_ddiv>
   b5d74:	f00e fb94 	bl	c44a0 <__aeabi_d2f>
   b5d78:	4b36      	ldr	r3, [pc, #216]	; (b5e54 <_Z12readPowerSysv+0x174>)
   b5d7a:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b5d7c:	2011      	movs	r0, #17
   b5d7e:	f00c f98e 	bl	c209e <analogRead>
   b5d82:	ee07 0a90 	vmov	s15, r0
   b5d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5d8a:	ee17 0a90 	vmov	r0, s15
   b5d8e:	f00e f837 	bl	c3e00 <__aeabi_f2d>
   b5d92:	4b31      	ldr	r3, [pc, #196]	; (b5e58 <_Z12readPowerSysv+0x178>)
   b5d94:	2200      	movs	r2, #0
   b5d96:	f00e f88b 	bl	c3eb0 <__aeabi_dmul>
   b5d9a:	a327      	add	r3, pc, #156	; (adr r3, b5e38 <_Z12readPowerSysv+0x158>)
   b5d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5da0:	f00e f9b0 	bl	c4104 <__aeabi_ddiv>
   b5da4:	f00e fb7c 	bl	c44a0 <__aeabi_d2f>
   b5da8:	4b2c      	ldr	r3, [pc, #176]	; (b5e5c <_Z12readPowerSysv+0x17c>)
   b5daa:	6018      	str	r0, [r3, #0]
    if(!digitalRead(LEAK_DET) && warnedLeak){                               //LEAK_DET pin is pulled low when a leak is detected
   b5dac:	201d      	movs	r0, #29
   b5dae:	f00c f963 	bl	c2078 <digitalRead>
   b5db2:	4604      	mov	r4, r0
   b5db4:	b9b8      	cbnz	r0, b5de6 <_Z12readPowerSysv+0x106>
   b5db6:	4f2a      	ldr	r7, [pc, #168]	; (b5e60 <_Z12readPowerSysv+0x180>)
   b5db8:	783b      	ldrb	r3, [r7, #0]
   b5dba:	b1a3      	cbz	r3, b5de6 <_Z12readPowerSysv+0x106>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5dbc:	2501      	movs	r5, #1
        if(!LEAK_DET_BYPASS) sprintf(warnChar,"B%dCCldt",BOTNUM);           //Create error string based on if it's a cutoff trigger or a just a warning
   b5dbe:	4929      	ldr	r1, [pc, #164]	; (b5e64 <_Z12readPowerSysv+0x184>)
   b5dc0:	2201      	movs	r2, #1
   b5dc2:	a803      	add	r0, sp, #12
   b5dc4:	f008 fac6 	bl	be354 <sprintf>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5dc8:	462b      	mov	r3, r5
   b5dca:	462a      	mov	r2, r5
   b5dcc:	4621      	mov	r1, r4
   b5dce:	a803      	add	r0, sp, #12
   b5dd0:	9500      	str	r5, [sp, #0]
   b5dd2:	f7ff ff0b 	bl	b5bec <_Z8sendDataPKchbbb>
        delay(50);                                                          //wait 50ms for data to go out
   b5dd6:	2032      	movs	r0, #50	; 0x32
   b5dd8:	f00b f88a 	bl	c0ef0 <delay>
        if(!LEAK_DET_BYPASS) digitalWrite(PWR_EN,LOW);                      //kill system
   b5ddc:	4621      	mov	r1, r4
   b5dde:	201c      	movs	r0, #28
   b5de0:	f00c f931 	bl	c2046 <digitalWrite>
        warnedLeak = true;                                                  //Set flag to not spam console in case cutoff doesn't work
   b5de4:	703d      	strb	r5, [r7, #0]
    if(!digitalRead(BAT_LEAK_DET) && !warnedBattLeak){                      //BAT_LEAK_DET pin is pulled low when a leak is detected
   b5de6:	200f      	movs	r0, #15
   b5de8:	f00c f946 	bl	c2078 <digitalRead>
   b5dec:	b998      	cbnz	r0, b5e16 <_Z12readPowerSysv+0x136>
   b5dee:	4d1e      	ldr	r5, [pc, #120]	; (b5e68 <_Z12readPowerSysv+0x188>)
   b5df0:	782f      	ldrb	r7, [r5, #0]
   b5df2:	b987      	cbnz	r7, b5e16 <_Z12readPowerSysv+0x136>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5df4:	2401      	movs	r4, #1
        else sprintf(warnChar,"B%dCCwlb",BOTNUM);                           //Message to warn leak in battery
   b5df6:	491d      	ldr	r1, [pc, #116]	; (b5e6c <_Z12readPowerSysv+0x18c>)
   b5df8:	2201      	movs	r2, #1
   b5dfa:	a803      	add	r0, sp, #12
   b5dfc:	f008 faaa 	bl	be354 <sprintf>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5e00:	4623      	mov	r3, r4
   b5e02:	4622      	mov	r2, r4
   b5e04:	4639      	mov	r1, r7
   b5e06:	a803      	add	r0, sp, #12
   b5e08:	9400      	str	r4, [sp, #0]
   b5e0a:	f7ff feef 	bl	b5bec <_Z8sendDataPKchbbb>
        delay(50);                                                          //wait 50ms for data to go out
   b5e0e:	2032      	movs	r0, #50	; 0x32
   b5e10:	f00b f86e 	bl	c0ef0 <delay>
        warnedBattLeak = true;
   b5e14:	702c      	strb	r4, [r5, #0]
}
   b5e16:	7830      	ldrb	r0, [r6, #0]
   b5e18:	b007      	add	sp, #28
   b5e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5e1c:	f3af 8000 	nop.w
   b5e20:	6e04c059 	.word	0x6e04c059
   b5e24:	3f73cddd 	.word	0x3f73cddd
   b5e28:	66666666 	.word	0x66666666
   b5e2c:	40246666 	.word	0x40246666
   b5e30:	cccccccc 	.word	0xcccccccc
   b5e34:	4018cccc 	.word	0x4018cccc
   b5e38:	00000000 	.word	0x00000000
   b5e3c:	40affe00 	.word	0x40affe00
   b5e40:	2003dd98 	.word	0x2003dd98
   b5e44:	2003dd9c 	.word	0x2003dd9c
   b5e48:	40590000 	.word	0x40590000
   b5e4c:	2003dedc 	.word	0x2003dedc
   b5e50:	40408000 	.word	0x40408000
   b5e54:	2003dd94 	.word	0x2003dd94
   b5e58:	40308000 	.word	0x40308000
   b5e5c:	2003e584 	.word	0x2003e584
   b5e60:	2003e5ef 	.word	0x2003e5ef
   b5e64:	000c6c1a 	.word	0x000c6c1a
   b5e68:	2003e5ee 	.word	0x2003e5ee
   b5e6c:	000c6c23 	.word	0x000c6c23

000b5e70 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5e70:	b530      	push	{r4, r5, lr}
    if(requestActive){              //If the CC has requested data using the req command
   b5e72:	4d2a      	ldr	r5, [pc, #168]	; (b5f1c <_Z16sendResponseDatav+0xac>)
   b5e74:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5e76:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){              //If the CC has requested data using the req command
   b5e78:	2b00      	cmp	r3, #0
   b5e7a:	d04d      	beq.n	b5f18 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);   //Empty the string if it had something
   b5e7c:	2241      	movs	r2, #65	; 0x41
   b5e7e:	2100      	movs	r1, #0
   b5e80:	a80b      	add	r0, sp, #44	; 0x2c
   b5e82:	f00e fbc9 	bl	c4618 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5e86:	4b26      	ldr	r3, [pc, #152]	; (b5f20 <_Z16sendResponseDatav+0xb0>)
   b5e88:	ed9f 7a26 	vldr	s14, [pc, #152]	; b5f24 <_Z16sendResponseDatav+0xb4>
   b5e8c:	edd3 7a00 	vldr	s15, [r3]
   b5e90:	4b25      	ldr	r3, [pc, #148]	; (b5f28 <_Z16sendResponseDatav+0xb8>)
   b5e92:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b5e96:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5e9c:	edcd 7a08 	vstr	s15, [sp, #32]
   b5ea0:	edd3 7a00 	vldr	s15, [r3]
   b5ea4:	4b21      	ldr	r3, [pc, #132]	; (b5f2c <_Z16sendResponseDatav+0xbc>)
   b5ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5eae:	edcd 7a07 	vstr	s15, [sp, #28]
   b5eb2:	edd3 7a00 	vldr	s15, [r3]
   b5eb6:	4b1e      	ldr	r3, [pc, #120]	; (b5f30 <_Z16sendResponseDatav+0xc0>)
   b5eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ec0:	edcd 7a06 	vstr	s15, [sp, #24]
   b5ec4:	edd3 7a00 	vldr	s15, [r3]
   b5ec8:	4b1a      	ldr	r3, [pc, #104]	; (b5f34 <_Z16sendResponseDatav+0xc4>)
   b5eca:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ed2:	edcd 7a05 	vstr	s15, [sp, #20]
   b5ed6:	edd3 7a00 	vldr	s15, [r3]
   b5eda:	4b17      	ldr	r3, [pc, #92]	; (b5f38 <_Z16sendResponseDatav+0xc8>)
   b5edc:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ee4:	edcd 7a04 	vstr	s15, [sp, #16]
   b5ee8:	6818      	ldr	r0, [r3, #0]
   b5eea:	f00d ff89 	bl	c3e00 <__aeabi_f2d>
   b5eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5ef2:	4b12      	ldr	r3, [pc, #72]	; (b5f3c <_Z16sendResponseDatav+0xcc>)
   b5ef4:	6818      	ldr	r0, [r3, #0]
   b5ef6:	f00d ff83 	bl	c3e00 <__aeabi_f2d>
   b5efa:	2201      	movs	r2, #1
   b5efc:	e9cd 0100 	strd	r0, r1, [sp]
   b5f00:	490f      	ldr	r1, [pc, #60]	; (b5f40 <_Z16sendResponseDatav+0xd0>)
   b5f02:	a80b      	add	r0, sp, #44	; 0x2c
   b5f04:	f008 fa26 	bl	be354 <sprintf>
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b5f08:	7829      	ldrb	r1, [r5, #0]
   b5f0a:	9400      	str	r4, [sp, #0]
   b5f0c:	4623      	mov	r3, r4
   b5f0e:	4622      	mov	r2, r4
   b5f10:	a80b      	add	r0, sp, #44	; 0x2c
   b5f12:	f7ff fe6b 	bl	b5bec <_Z8sendDataPKchbbb>
        requestActive = 0;          //Set flag back to 0
   b5f16:	702c      	strb	r4, [r5, #0]
}
   b5f18:	b01d      	add	sp, #116	; 0x74
   b5f1a:	bd30      	pop	{r4, r5, pc}
   b5f1c:	2003e0b8 	.word	0x2003e0b8
   b5f20:	2003e558 	.word	0x2003e558
   b5f24:	447a0000 	.word	0x447a0000
   b5f28:	2003e550 	.word	0x2003e550
   b5f2c:	2003e548 	.word	0x2003e548
   b5f30:	2003e554 	.word	0x2003e554
   b5f34:	2003e54c 	.word	0x2003e54c
   b5f38:	2003ded8 	.word	0x2003ded8
   b5f3c:	2003ddfc 	.word	0x2003ddfc
   b5f40:	000c6c2c 	.word	0x000c6c2c

000b5f44 <_Z12statusUpdatev>:
void statusUpdate(){
   b5f44:	b530      	push	{r4, r5, lr}
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b5f46:	4d22      	ldr	r5, [pc, #136]	; (b5fd0 <_Z12statusUpdatev+0x8c>)
   b5f48:	782b      	ldrb	r3, [r5, #0]
void statusUpdate(){
   b5f4a:	b093      	sub	sp, #76	; 0x4c
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b5f4c:	2b00      	cmp	r3, #0
   b5f4e:	d035      	beq.n	b5fbc <_Z12statusUpdatev+0x78>
        Serial.println("Sending a status update!");     //Log to console (for debug purposes)
   b5f50:	f00b fc0c 	bl	c176c <_Z16_fetch_usbserialv>
   b5f54:	491f      	ldr	r1, [pc, #124]	; (b5fd4 <_Z12statusUpdatev+0x90>)
   b5f56:	4c20      	ldr	r4, [pc, #128]	; (b5fd8 <_Z12statusUpdatev+0x94>)
   b5f58:	f009 fedf 	bl	bfd1a <_ZN5Print7printlnEPKc>
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);  //Print status flags, battery, latitude and logitude
   b5f5c:	4a1f      	ldr	r2, [pc, #124]	; (b5fdc <_Z12statusUpdatev+0x98>)
   b5f5e:	4b20      	ldr	r3, [pc, #128]	; (b5fe0 <_Z12statusUpdatev+0x9c>)
   b5f60:	6810      	ldr	r0, [r2, #0]
   b5f62:	781b      	ldrb	r3, [r3, #0]
   b5f64:	9307      	str	r3, [sp, #28]
   b5f66:	f00d ff4b 	bl	c3e00 <__aeabi_f2d>
   b5f6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5f6e:	4a1d      	ldr	r2, [pc, #116]	; (b5fe4 <_Z12statusUpdatev+0xa0>)
   b5f70:	6810      	ldr	r0, [r2, #0]
   b5f72:	f00d ff45 	bl	c3e00 <__aeabi_f2d>
   b5f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5f7a:	4a1b      	ldr	r2, [pc, #108]	; (b5fe8 <_Z12statusUpdatev+0xa4>)
   b5f7c:	9b07      	ldr	r3, [sp, #28]
   b5f7e:	8812      	ldrh	r2, [r2, #0]
   b5f80:	9200      	str	r2, [sp, #0]
   b5f82:	491a      	ldr	r1, [pc, #104]	; (b5fec <_Z12statusUpdatev+0xa8>)
   b5f84:	2201      	movs	r2, #1
   b5f86:	a808      	add	r0, sp, #32
   b5f88:	f008 f9e4 	bl	be354 <sprintf>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){     //If BLE and XBee are not available, send status over LTE, but only 1 in LTE_STAT_PD updates (to not suck up data)
   b5f8c:	4b18      	ldr	r3, [pc, #96]	; (b5ff0 <_Z12statusUpdatev+0xac>)
   b5f8e:	781b      	ldrb	r3, [r3, #0]
   b5f90:	b9b3      	cbnz	r3, b5fc0 <_Z12statusUpdatev+0x7c>
   b5f92:	4b18      	ldr	r3, [pc, #96]	; (b5ff4 <_Z12statusUpdatev+0xb0>)
   b5f94:	781b      	ldrb	r3, [r3, #0]
   b5f96:	b99b      	cbnz	r3, b5fc0 <_Z12statusUpdatev+0x7c>
   b5f98:	8823      	ldrh	r3, [r4, #0]
   b5f9a:	b1a3      	cbz	r3, b5fc6 <_Z12statusUpdatev+0x82>
   b5f9c:	f013 0303 	ands.w	r3, r3, #3
   b5fa0:	d111      	bne.n	b5fc6 <_Z12statusUpdatev+0x82>
            sendData(updateStr,0,false,false,true);     //Only send out over LTE
   b5fa2:	2201      	movs	r2, #1
   b5fa4:	9200      	str	r2, [sp, #0]
   b5fa6:	4619      	mov	r1, r3
   b5fa8:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5faa:	a808      	add	r0, sp, #32
   b5fac:	f7ff fe1e 	bl	b5bec <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;            //Decrement a large coounter for the LTE status. This stops sending the status over LTE after a while to not burn up monthly quota. Should be recovering bots if on cell only
   b5fb0:	8823      	ldrh	r3, [r4, #0]
   b5fb2:	b10b      	cbz	r3, b5fb8 <_Z12statusUpdatev+0x74>
   b5fb4:	3b01      	subs	r3, #1
   b5fb6:	8023      	strh	r3, [r4, #0]
        statusReady = false;                            //Clear ready flag
   b5fb8:	2300      	movs	r3, #0
   b5fba:	702b      	strb	r3, [r5, #0]
}
   b5fbc:	b013      	add	sp, #76	; 0x4c
   b5fbe:	bd30      	pop	{r4, r5, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;  //Otherwise, we're sending updates over BLE or XBee, reset counter for cellular
   b5fc0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5fc4:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b5fc6:	2100      	movs	r1, #0
   b5fc8:	2301      	movs	r3, #1
   b5fca:	9100      	str	r1, [sp, #0]
   b5fcc:	461a      	mov	r2, r3
   b5fce:	e7ec      	b.n	b5faa <_Z12statusUpdatev+0x66>
   b5fd0:	2003e5c8 	.word	0x2003e5c8
   b5fd4:	000c6c50 	.word	0x000c6c50
   b5fd8:	2003dd6a 	.word	0x2003dd6a
   b5fdc:	2003ded8 	.word	0x2003ded8
   b5fe0:	2003dd98 	.word	0x2003dd98
   b5fe4:	2003ddfc 	.word	0x2003ddfc
   b5fe8:	2003e5a8 	.word	0x2003e5a8
   b5fec:	000c6c69 	.word	0x000c6c69
   b5ff0:	2003dd34 	.word	0x2003dd34
   b5ff4:	2003dd7c 	.word	0x2003dd7c

000b5ff8 <_Z13sensorHandlerv>:
void sensorHandler(){
   b5ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b5ffc:	4d60      	ldr	r5, [pc, #384]	; (b6180 <_Z13sensorHandlerv+0x188>)
void sensorHandler(){
   b5ffe:	b097      	sub	sp, #92	; 0x5c
   b6000:	f007 fe30 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b6004:	682b      	ldr	r3, [r5, #0]
   b6006:	4283      	cmp	r3, r0
   b6008:	f080 8139 	bcs.w	b627e <_Z13sensorHandlerv+0x286>
   b600c:	4e5d      	ldr	r6, [pc, #372]	; (b6184 <_Z13sensorHandlerv+0x18c>)
   b600e:	7833      	ldrb	r3, [r6, #0]
   b6010:	2b00      	cmp	r3, #0
   b6012:	f000 8134 	beq.w	b627e <_Z13sensorHandlerv+0x286>
        if(Wire.requestFrom(PHADDR, 20, 1)){    //Request 20 bytes from the PH sensor
   b6016:	f00c f8b1 	bl	c217c <_Z19__fetch_global_Wirev>
   b601a:	2301      	movs	r3, #1
   b601c:	2214      	movs	r2, #20
   b601e:	2163      	movs	r1, #99	; 0x63
   b6020:	f00b fd15 	bl	c1a4e <_ZN7TwoWire11requestFromEhjh>
   b6024:	b1e8      	cbz	r0, b6062 <_Z13sensorHandlerv+0x6a>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b6026:	f00c f8a9 	bl	c217c <_Z19__fetch_global_Wirev>
   b602a:	6803      	ldr	r3, [r0, #0]
   b602c:	695b      	ldr	r3, [r3, #20]
   b602e:	4798      	blx	r3
            int c = 0;                          //Index variable for the temporary string
   b6030:	ac11      	add	r4, sp, #68	; 0x44
   b6032:	4627      	mov	r7, r4
            while(Wire.available()){            // slave may send less than requested
   b6034:	f00c f8a2 	bl	c217c <_Z19__fetch_global_Wirev>
   b6038:	6803      	ldr	r3, [r0, #0]
   b603a:	691b      	ldr	r3, [r3, #16]
   b603c:	4798      	blx	r3
   b603e:	b138      	cbz	r0, b6050 <_Z13sensorHandlerv+0x58>
                tempSense[c++] = Wire.read();   //Read each of the bytes returned by the sensor into a string
   b6040:	f00c f89c 	bl	c217c <_Z19__fetch_global_Wirev>
   b6044:	6803      	ldr	r3, [r0, #0]
   b6046:	695b      	ldr	r3, [r3, #20]
   b6048:	4798      	blx	r3
   b604a:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){            // slave may send less than requested
   b604e:	e7f1      	b.n	b6034 <_Z13sensorHandlerv+0x3c>
            sensePH = atof(tempSense);          //Convert the string to a float and store it in the global pH variable
   b6050:	4638      	mov	r0, r7
   b6052:	f00e fa99 	bl	c4588 <atof>
   b6056:	ec51 0b10 	vmov	r0, r1, d0
   b605a:	f00e fa21 	bl	c44a0 <__aeabi_d2f>
   b605e:	4b4a      	ldr	r3, [pc, #296]	; (b6188 <_Z13sensorHandlerv+0x190>)
   b6060:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(MCOND, 20, 1)){
   b6062:	f00c f88b 	bl	c217c <_Z19__fetch_global_Wirev>
   b6066:	2301      	movs	r3, #1
   b6068:	2214      	movs	r2, #20
   b606a:	2164      	movs	r1, #100	; 0x64
   b606c:	f00b fcef 	bl	c1a4e <_ZN7TwoWire11requestFromEhjh>
   b6070:	b1e8      	cbz	r0, b60ae <_Z13sensorHandlerv+0xb6>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b6072:	f00c f883 	bl	c217c <_Z19__fetch_global_Wirev>
   b6076:	6803      	ldr	r3, [r0, #0]
   b6078:	695b      	ldr	r3, [r3, #20]
   b607a:	4798      	blx	r3
            int c = 0;
   b607c:	ac11      	add	r4, sp, #68	; 0x44
   b607e:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b6080:	f00c f87c 	bl	c217c <_Z19__fetch_global_Wirev>
   b6084:	6803      	ldr	r3, [r0, #0]
   b6086:	691b      	ldr	r3, [r3, #16]
   b6088:	4798      	blx	r3
   b608a:	b138      	cbz	r0, b609c <_Z13sensorHandlerv+0xa4>
                mcondSense[c++] = Wire.read();
   b608c:	f00c f876 	bl	c217c <_Z19__fetch_global_Wirev>
   b6090:	6803      	ldr	r3, [r0, #0]
   b6092:	695b      	ldr	r3, [r3, #20]
   b6094:	4798      	blx	r3
   b6096:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b609a:	e7f1      	b.n	b6080 <_Z13sensorHandlerv+0x88>
            senseMCond = atof(mcondSense);
   b609c:	4638      	mov	r0, r7
   b609e:	f00e fa73 	bl	c4588 <atof>
   b60a2:	ec51 0b10 	vmov	r0, r1, d0
   b60a6:	f00e f9fb 	bl	c44a0 <__aeabi_d2f>
   b60aa:	4b38      	ldr	r3, [pc, #224]	; (b618c <_Z13sensorHandlerv+0x194>)
   b60ac:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(COND, 20, 1)){
   b60ae:	f00c f865 	bl	c217c <_Z19__fetch_global_Wirev>
   b60b2:	2301      	movs	r3, #1
   b60b4:	2214      	movs	r2, #20
   b60b6:	2165      	movs	r1, #101	; 0x65
   b60b8:	f00b fcc9 	bl	c1a4e <_ZN7TwoWire11requestFromEhjh>
   b60bc:	b1e8      	cbz	r0, b60fa <_Z13sensorHandlerv+0x102>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b60be:	f00c f85d 	bl	c217c <_Z19__fetch_global_Wirev>
   b60c2:	6803      	ldr	r3, [r0, #0]
   b60c4:	695b      	ldr	r3, [r3, #20]
   b60c6:	4798      	blx	r3
            int c = 0;
   b60c8:	ac11      	add	r4, sp, #68	; 0x44
   b60ca:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b60cc:	f00c f856 	bl	c217c <_Z19__fetch_global_Wirev>
   b60d0:	6803      	ldr	r3, [r0, #0]
   b60d2:	691b      	ldr	r3, [r3, #16]
   b60d4:	4798      	blx	r3
   b60d6:	b138      	cbz	r0, b60e8 <_Z13sensorHandlerv+0xf0>
                condSense[c++] = Wire.read();
   b60d8:	f00c f850 	bl	c217c <_Z19__fetch_global_Wirev>
   b60dc:	6803      	ldr	r3, [r0, #0]
   b60de:	695b      	ldr	r3, [r3, #20]
   b60e0:	4798      	blx	r3
   b60e2:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b60e6:	e7f1      	b.n	b60cc <_Z13sensorHandlerv+0xd4>
            senseCond = atof(condSense);
   b60e8:	4638      	mov	r0, r7
   b60ea:	f00e fa4d 	bl	c4588 <atof>
   b60ee:	ec51 0b10 	vmov	r0, r1, d0
   b60f2:	f00e f9d5 	bl	c44a0 <__aeabi_d2f>
   b60f6:	4b26      	ldr	r3, [pc, #152]	; (b6190 <_Z13sensorHandlerv+0x198>)
   b60f8:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(TEMPADDR, 20, 1)){
   b60fa:	f00c f83f 	bl	c217c <_Z19__fetch_global_Wirev>
   b60fe:	2301      	movs	r3, #1
   b6100:	2214      	movs	r2, #20
   b6102:	2166      	movs	r1, #102	; 0x66
   b6104:	f00b fca3 	bl	c1a4e <_ZN7TwoWire11requestFromEhjh>
   b6108:	b1e8      	cbz	r0, b6146 <_Z13sensorHandlerv+0x14e>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b610a:	f00c f837 	bl	c217c <_Z19__fetch_global_Wirev>
   b610e:	6803      	ldr	r3, [r0, #0]
   b6110:	695b      	ldr	r3, [r3, #20]
   b6112:	4798      	blx	r3
            int c = 0;
   b6114:	ac11      	add	r4, sp, #68	; 0x44
   b6116:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b6118:	f00c f830 	bl	c217c <_Z19__fetch_global_Wirev>
   b611c:	6803      	ldr	r3, [r0, #0]
   b611e:	691b      	ldr	r3, [r3, #16]
   b6120:	4798      	blx	r3
   b6122:	b138      	cbz	r0, b6134 <_Z13sensorHandlerv+0x13c>
                addrSense[c++] = Wire.read();
   b6124:	f00c f82a 	bl	c217c <_Z19__fetch_global_Wirev>
   b6128:	6803      	ldr	r3, [r0, #0]
   b612a:	695b      	ldr	r3, [r3, #20]
   b612c:	4798      	blx	r3
   b612e:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b6132:	e7f1      	b.n	b6118 <_Z13sensorHandlerv+0x120>
            senseTemp = atof(addrSense);
   b6134:	4638      	mov	r0, r7
   b6136:	f00e fa27 	bl	c4588 <atof>
   b613a:	ec51 0b10 	vmov	r0, r1, d0
   b613e:	f00e f9af 	bl	c44a0 <__aeabi_d2f>
   b6142:	4b14      	ldr	r3, [pc, #80]	; (b6194 <_Z13sensorHandlerv+0x19c>)
   b6144:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(DOADDR, 20, 1)){
   b6146:	f00c f819 	bl	c217c <_Z19__fetch_global_Wirev>
   b614a:	2301      	movs	r3, #1
   b614c:	2214      	movs	r2, #20
   b614e:	2161      	movs	r1, #97	; 0x61
   b6150:	f00b fc7d 	bl	c1a4e <_ZN7TwoWire11requestFromEhjh>
   b6154:	b348      	cbz	r0, b61aa <_Z13sensorHandlerv+0x1b2>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b6156:	f00c f811 	bl	c217c <_Z19__fetch_global_Wirev>
   b615a:	6803      	ldr	r3, [r0, #0]
   b615c:	695b      	ldr	r3, [r3, #20]
   b615e:	4798      	blx	r3
            int c = 0;
   b6160:	ac11      	add	r4, sp, #68	; 0x44
   b6162:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b6164:	f00c f80a 	bl	c217c <_Z19__fetch_global_Wirev>
   b6168:	6803      	ldr	r3, [r0, #0]
   b616a:	691b      	ldr	r3, [r3, #16]
   b616c:	4798      	blx	r3
   b616e:	b198      	cbz	r0, b6198 <_Z13sensorHandlerv+0x1a0>
                addrSense[c++] = Wire.read();
   b6170:	f00c f804 	bl	c217c <_Z19__fetch_global_Wirev>
   b6174:	6803      	ldr	r3, [r0, #0]
   b6176:	695b      	ldr	r3, [r3, #20]
   b6178:	4798      	blx	r3
   b617a:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b617e:	e7f1      	b.n	b6164 <_Z13sensorHandlerv+0x16c>
   b6180:	2003ddac 	.word	0x2003ddac
   b6184:	2003ddb0 	.word	0x2003ddb0
   b6188:	2003e554 	.word	0x2003e554
   b618c:	2003e550 	.word	0x2003e550
   b6190:	2003e548 	.word	0x2003e548
   b6194:	2003e558 	.word	0x2003e558
            senseDO = atof(addrSense);
   b6198:	4638      	mov	r0, r7
   b619a:	f00e f9f5 	bl	c4588 <atof>
   b619e:	ec51 0b10 	vmov	r0, r1, d0
   b61a2:	f00e f97d 	bl	c44a0 <__aeabi_d2f>
   b61a6:	4b7a      	ldr	r3, [pc, #488]	; (b6390 <_Z13sensorHandlerv+0x398>)
   b61a8:	6018      	str	r0, [r3, #0]
        dataWait = false;                       //Set flag false until next data request has been made
   b61aa:	2300      	movs	r3, #0
   b61ac:	7033      	strb	r3, [r6, #0]
        if(logSensors){                         //Log sensors to SD card if enabled
   b61ae:	4b79      	ldr	r3, [pc, #484]	; (b6394 <_Z13sensorHandlerv+0x39c>)
   b61b0:	781b      	ldrb	r3, [r3, #0]
   b61b2:	2b00      	cmp	r3, #0
   b61b4:	d063      	beq.n	b627e <_Z13sensorHandlerv+0x286>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b61b6:	f00a fe71 	bl	c0e9c <_ZN9TimeClass5monthEv>
   b61ba:	900f      	str	r0, [sp, #60]	; 0x3c
   b61bc:	f00a fe62 	bl	c0e84 <_ZN9TimeClass3dayEv>
   b61c0:	4604      	mov	r4, r0
   b61c2:	f00a fe73 	bl	c0eac <_ZN9TimeClass4yearEv>
   b61c6:	4606      	mov	r6, r0
   b61c8:	f00a fe38 	bl	c0e3c <_ZN9TimeClass4hourEv>
   b61cc:	4607      	mov	r7, r0
   b61ce:	f00a fe41 	bl	c0e54 <_ZN9TimeClass6minuteEv>
   b61d2:	4680      	mov	r8, r0
   b61d4:	f00a fe4a 	bl	c0e6c <_ZN9TimeClass6secondEv>
   b61d8:	9400      	str	r4, [sp, #0]
   b61da:	4c6f      	ldr	r4, [pc, #444]	; (b6398 <_Z13sensorHandlerv+0x3a0>)
   b61dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b61de:	4a6f      	ldr	r2, [pc, #444]	; (b639c <_Z13sensorHandlerv+0x3a4>)
   b61e0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; b63bc <_Z13sensorHandlerv+0x3c4>
   b61e4:	f8df b1d8 	ldr.w	fp, [pc, #472]	; b63c0 <_Z13sensorHandlerv+0x3c8>
   b61e8:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b6390 <_Z13sensorHandlerv+0x398>
   b61ec:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b61f0:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b61f4:	2110      	movs	r1, #16
   b61f6:	a811      	add	r0, sp, #68	; 0x44
   b61f8:	f008 f8bc 	bl	be374 <snprintf>
            if(!myFile.isOpen()){               //Print out each of the global sensor values
   b61fc:	7c22      	ldrb	r2, [r4, #16]
   b61fe:	4b68      	ldr	r3, [pc, #416]	; (b63a0 <_Z13sensorHandlerv+0x3a8>)
   b6200:	f8df 81c0 	ldr.w	r8, [pc, #448]	; b63c4 <_Z13sensorHandlerv+0x3cc>
   b6204:	4f67      	ldr	r7, [pc, #412]	; (b63a4 <_Z13sensorHandlerv+0x3ac>)
   b6206:	4e68      	ldr	r6, [pc, #416]	; (b63a8 <_Z13sensorHandlerv+0x3b0>)
   b6208:	2a00      	cmp	r2, #0
   b620a:	f040 8094 	bne.w	b6336 <_Z13sensorHandlerv+0x33e>
                myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b620e:	f244 2202 	movw	r2, #16898	; 0x4202
   b6212:	4966      	ldr	r1, [pc, #408]	; (b63ac <_Z13sensorHandlerv+0x3b4>)
   b6214:	f104 0010 	add.w	r0, r4, #16
   b6218:	f7fe fa48 	bl	b46ac <_ZN7FatFile4openEPKci>
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b621c:	4b60      	ldr	r3, [pc, #384]	; (b63a0 <_Z13sensorHandlerv+0x3a8>)
   b621e:	6818      	ldr	r0, [r3, #0]
   b6220:	f00d fdee 	bl	c3e00 <__aeabi_f2d>
   b6224:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b6228:	f8db 0000 	ldr.w	r0, [fp]
   b622c:	f00d fde8 	bl	c3e00 <__aeabi_f2d>
   b6230:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b6234:	f8da 0000 	ldr.w	r0, [sl]
   b6238:	f00d fde2 	bl	c3e00 <__aeabi_f2d>
   b623c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b6240:	f8d9 0000 	ldr.w	r0, [r9]
   b6244:	f00d fddc 	bl	c3e00 <__aeabi_f2d>
   b6248:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b624c:	f8d8 0000 	ldr.w	r0, [r8]
   b6250:	f00d fdd6 	bl	c3e00 <__aeabi_f2d>
   b6254:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b6258:	6838      	ldr	r0, [r7, #0]
   b625a:	f00d fdd1 	bl	c3e00 <__aeabi_f2d>
   b625e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b6262:	6830      	ldr	r0, [r6, #0]
   b6264:	f00d fdcc 	bl	c3e00 <__aeabi_f2d>
   b6268:	aa11      	add	r2, sp, #68	; 0x44
   b626a:	e9cd 0100 	strd	r0, r1, [sp]
   b626e:	4950      	ldr	r1, [pc, #320]	; (b63b0 <_Z13sensorHandlerv+0x3b8>)
   b6270:	4620      	mov	r0, r4
   b6272:	f7fe f8ad 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                myFile.close();
   b6276:	f104 0010 	add.w	r0, r4, #16
   b627a:	f001 faa5 	bl	b77c8 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){                  //Check time to see if we should request more data
   b627e:	4c4d      	ldr	r4, [pc, #308]	; (b63b4 <_Z13sensorHandlerv+0x3bc>)
   b6280:	f007 fcf0 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   b6284:	6823      	ldr	r3, [r4, #0]
   b6286:	4283      	cmp	r3, r0
   b6288:	d252      	bcs.n	b6330 <_Z13sensorHandlerv+0x338>
   b628a:	f007 fceb 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;   //Calculate next time to request data from the sensors
   b628e:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b6292:	6020      	str	r0, [r4, #0]
   b6294:	f007 fce6 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;   //Calculate the time to read the data that has just been requested
   b6298:	f200 3039 	addw	r0, r0, #825	; 0x339
   b629c:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);         //call the circuit by its ID number.
   b629e:	f00b ff6d 	bl	c217c <_Z19__fetch_global_Wirev>
   b62a2:	2163      	movs	r1, #99	; 0x63
   b62a4:	f00b fbec 	bl	c1a80 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b62a8:	f00b ff68 	bl	c217c <_Z19__fetch_global_Wirev>
   b62ac:	2172      	movs	r1, #114	; 0x72
   b62ae:	f7fd ffd6 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b62b2:	f00b ff63 	bl	c217c <_Z19__fetch_global_Wirev>
   b62b6:	f00b fbea 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);          //call the circuit by its ID number.
   b62ba:	f00b ff5f 	bl	c217c <_Z19__fetch_global_Wirev>
   b62be:	2164      	movs	r1, #100	; 0x64
   b62c0:	f00b fbde 	bl	c1a80 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b62c4:	f00b ff5a 	bl	c217c <_Z19__fetch_global_Wirev>
   b62c8:	2172      	movs	r1, #114	; 0x72
   b62ca:	f7fd ffc8 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b62ce:	f00b ff55 	bl	c217c <_Z19__fetch_global_Wirev>
   b62d2:	f00b fbdc 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);           //call the circuit by its ID number.
   b62d6:	f00b ff51 	bl	c217c <_Z19__fetch_global_Wirev>
   b62da:	2165      	movs	r1, #101	; 0x65
   b62dc:	f00b fbd0 	bl	c1a80 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b62e0:	f00b ff4c 	bl	c217c <_Z19__fetch_global_Wirev>
   b62e4:	2172      	movs	r1, #114	; 0x72
   b62e6:	f7fd ffba 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b62ea:	f00b ff47 	bl	c217c <_Z19__fetch_global_Wirev>
   b62ee:	f00b fbce 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);       //call the circuit by its ID number.
   b62f2:	f00b ff43 	bl	c217c <_Z19__fetch_global_Wirev>
   b62f6:	2166      	movs	r1, #102	; 0x66
   b62f8:	f00b fbc2 	bl	c1a80 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b62fc:	f00b ff3e 	bl	c217c <_Z19__fetch_global_Wirev>
   b6300:	2172      	movs	r1, #114	; 0x72
   b6302:	f7fd ffac 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b6306:	f00b ff39 	bl	c217c <_Z19__fetch_global_Wirev>
   b630a:	f00b fbc0 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(DOADDR);         //call the circuit by its ID number.
   b630e:	f00b ff35 	bl	c217c <_Z19__fetch_global_Wirev>
   b6312:	2161      	movs	r1, #97	; 0x61
   b6314:	f00b fbb4 	bl	c1a80 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6318:	f00b ff30 	bl	c217c <_Z19__fetch_global_Wirev>
   b631c:	2172      	movs	r1, #114	; 0x72
   b631e:	f7fd ff9e 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();      
   b6322:	f00b ff2b 	bl	c217c <_Z19__fetch_global_Wirev>
   b6326:	f00b fbb2 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b632a:	4b23      	ldr	r3, [pc, #140]	; (b63b8 <_Z13sensorHandlerv+0x3c0>)
   b632c:	2201      	movs	r2, #1
   b632e:	701a      	strb	r2, [r3, #0]
}
   b6330:	b017      	add	sp, #92	; 0x5c
   b6332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b6336:	6818      	ldr	r0, [r3, #0]
   b6338:	f00d fd62 	bl	c3e00 <__aeabi_f2d>
   b633c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b6340:	f8db 0000 	ldr.w	r0, [fp]
   b6344:	f00d fd5c 	bl	c3e00 <__aeabi_f2d>
   b6348:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b634c:	f8da 0000 	ldr.w	r0, [sl]
   b6350:	f00d fd56 	bl	c3e00 <__aeabi_f2d>
   b6354:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b6358:	f8d9 0000 	ldr.w	r0, [r9]
   b635c:	f00d fd50 	bl	c3e00 <__aeabi_f2d>
   b6360:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b6364:	f8d8 0000 	ldr.w	r0, [r8]
   b6368:	f00d fd4a 	bl	c3e00 <__aeabi_f2d>
   b636c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b6370:	6838      	ldr	r0, [r7, #0]
   b6372:	f00d fd45 	bl	c3e00 <__aeabi_f2d>
   b6376:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b637a:	6830      	ldr	r0, [r6, #0]
   b637c:	f00d fd40 	bl	c3e00 <__aeabi_f2d>
   b6380:	aa11      	add	r2, sp, #68	; 0x44
   b6382:	e9cd 0100 	strd	r0, r1, [sp]
   b6386:	490a      	ldr	r1, [pc, #40]	; (b63b0 <_Z13sensorHandlerv+0x3b8>)
   b6388:	4620      	mov	r0, r4
   b638a:	f7fe f821 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b638e:	e776      	b.n	b627e <_Z13sensorHandlerv+0x286>
   b6390:	2003e54c 	.word	0x2003e54c
   b6394:	2003ded5 	.word	0x2003ded5
   b6398:	2003defc 	.word	0x2003defc
   b639c:	000c6b3b 	.word	0x000c6b3b
   b63a0:	2003e548 	.word	0x2003e548
   b63a4:	2003ded8 	.word	0x2003ded8
   b63a8:	2003ddfc 	.word	0x2003ddfc
   b63ac:	2003ddb2 	.word	0x2003ddb2
   b63b0:	000c6c84 	.word	0x000c6c84
   b63b4:	2003e55c 	.word	0x2003e55c
   b63b8:	2003ddb0 	.word	0x2003ddb0
   b63bc:	2003e554 	.word	0x2003e554
   b63c0:	2003e550 	.word	0x2003e550
   b63c4:	2003e558 	.word	0x2003e558

000b63c8 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b63c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b63cc:	4e3c      	ldr	r6, [pc, #240]	; (b64c0 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b63ce:	f8df 8104 	ldr.w	r8, [pc, #260]	; b64d4 <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b63d2:	f8df 9104 	ldr.w	r9, [pc, #260]	; b64d8 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b63d6:	b089      	sub	sp, #36	; 0x24
   b63d8:	af00      	add	r7, sp, #0
    while(Serial1.available()){                         //Read data from the XBee buffer
   b63da:	f00b fe93 	bl	c2104 <_Z22__fetch_global_Serial1v>
   b63de:	6803      	ldr	r3, [r0, #0]
   b63e0:	691b      	ldr	r3, [r3, #16]
   b63e2:	4798      	blx	r3
   b63e4:	2800      	cmp	r0, #0
   b63e6:	d066      	beq.n	b64b6 <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b63e8:	f00b fe8c 	bl	c2104 <_Z22__fetch_global_Serial1v>
   b63ec:	220a      	movs	r2, #10
   b63ee:	4601      	mov	r1, r0
   b63f0:	4638      	mov	r0, r7
   b63f2:	f009 fd1b 	bl	bfe2c <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b63f6:	68bb      	ldr	r3, [r7, #8]
   b63f8:	3307      	adds	r3, #7
   b63fa:	f023 0307 	bic.w	r3, r3, #7
    }
   b63fe:	466d      	mov	r5, sp
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b6400:	ebad 0d03 	sub.w	sp, sp, r3
   b6404:	46ea      	mov	sl, sp
   b6406:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b6408:	68b9      	ldr	r1, [r7, #8]
   b640a:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);    //Loop over characters and copy them into char array
   b640e:	458b      	cmp	fp, r1
   b6410:	f103 0401 	add.w	r4, r3, #1
   b6414:	d207      	bcs.n	b6426 <_Z11XBeeHandlerv+0x5e>
   b6416:	4659      	mov	r1, fp
   b6418:	4638      	mov	r0, r7
   b641a:	f008 fa81 	bl	be920 <_ZNK6String6charAtEj>
   b641e:	4623      	mov	r3, r4
   b6420:	f80a 000b 	strb.w	r0, [sl, fp]
   b6424:	e7f0      	b.n	b6408 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;      //If there was a carriage return, then get rid of it and set to terminate character
   b6426:	2901      	cmp	r1, #1
   b6428:	d90a      	bls.n	b6440 <_Z11XBeeHandlerv+0x78>
   b642a:	3901      	subs	r1, #1
   b642c:	4638      	mov	r0, r7
   b642e:	f008 fa77 	bl	be920 <_ZNK6String6charAtEj>
   b6432:	280d      	cmp	r0, #13
   b6434:	bf01      	itttt	eq
   b6436:	68bb      	ldreq	r3, [r7, #8]
   b6438:	4453      	addeq	r3, sl
   b643a:	2200      	moveq	r2, #0
   b643c:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        Serial.println("New XBee Command:");
   b6440:	f00b f994 	bl	c176c <_Z16_fetch_usbserialv>
   b6444:	4631      	mov	r1, r6
   b6446:	f009 fc68 	bl	bfd1a <_ZN5Print7printlnEPKc>
        Serial.println(data);                           //Print out command for debugging
   b644a:	f00b f98f 	bl	c176c <_Z16_fetch_usbserialv>
   b644e:	6839      	ldr	r1, [r7, #0]
   b6450:	f009 fc63 	bl	bfd1a <_ZN5Print7printlnEPKc>
        processCommand(buffer,2,true);                  //Process the command received over Xbee using the dictionary
   b6454:	2201      	movs	r2, #1
   b6456:	2102      	movs	r1, #2
   b6458:	4650      	mov	r0, sl
   b645a:	f7fe f9e3 	bl	b4824 <_Z14processCommandPKchb>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b645e:	f89a 3000 	ldrb.w	r3, [sl]
   b6462:	3b42      	subs	r3, #66	; 0x42
   b6464:	2b01      	cmp	r3, #1
   b6466:	d803      	bhi.n	b6470 <_Z11XBeeHandlerv+0xa8>
   b6468:	f007 fbfc 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   b646c:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b6470:	f899 3000 	ldrb.w	r3, [r9]
   b6474:	b1d3      	cbz	r3, b64ac <_Z11XBeeHandlerv+0xe4>
   b6476:	4813      	ldr	r0, [pc, #76]	; (b64c4 <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b6478:	7c03      	ldrb	r3, [r0, #16]
   b647a:	b92b      	cbnz	r3, b6488 <_Z11XBeeHandlerv+0xc0>
   b647c:	4912      	ldr	r1, [pc, #72]	; (b64c8 <_Z11XBeeHandlerv+0x100>)
   b647e:	f244 2202 	movw	r2, #16898	; 0x4202
   b6482:	3010      	adds	r0, #16
   b6484:	f7fe f912 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b6488:	4639      	mov	r1, r7
   b648a:	f107 0010 	add.w	r0, r7, #16
   b648e:	f008 f9fd 	bl	be88c <_ZN6StringC1ERKS_>
   b6492:	490e      	ldr	r1, [pc, #56]	; (b64cc <_Z11XBeeHandlerv+0x104>)
   b6494:	480b      	ldr	r0, [pc, #44]	; (b64c4 <_Z11XBeeHandlerv+0xfc>)
   b6496:	f107 0210 	add.w	r2, r7, #16
   b649a:	f7fd ff99 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b649e:	f107 0010 	add.w	r0, r7, #16
   b64a2:	f008 f95d 	bl	be760 <_ZN6StringD1Ev>
            logFile.close();
   b64a6:	480a      	ldr	r0, [pc, #40]	; (b64d0 <_Z11XBeeHandlerv+0x108>)
   b64a8:	f001 f98e 	bl	b77c8 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b64ac:	4638      	mov	r0, r7
   b64ae:	f008 f957 	bl	be760 <_ZN6StringD1Ev>
   b64b2:	46ad      	mov	sp, r5
    while(Serial1.available()){                         //Read data from the XBee buffer
   b64b4:	e791      	b.n	b63da <_Z11XBeeHandlerv+0x12>
}
   b64b6:	3724      	adds	r7, #36	; 0x24
   b64b8:	46bd      	mov	sp, r7
   b64ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b64be:	bf00      	nop
   b64c0:	000c6c9c 	.word	0x000c6c9c
   b64c4:	2003de7c 	.word	0x2003de7c
   b64c8:	2003ddd0 	.word	0x2003ddd0
   b64cc:	000c6cae 	.word	0x000c6cae
   b64d0:	2003de8c 	.word	0x2003de8c
   b64d4:	2003dd80 	.word	0x2003dd80
   b64d8:	2003ded4 	.word	0x2003ded4

000b64dc <_Z13dataOffloaderv>:
void dataOffloader(){
   b64dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b64e0:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b64e2:	f00b f943 	bl	c176c <_Z16_fetch_usbserialv>
   b64e6:	4963      	ldr	r1, [pc, #396]	; (b6674 <_Z13dataOffloaderv+0x198>)
   b64e8:	f009 fc17 	bl	bfd1a <_ZN5Print7printlnEPKc>
    myFile.close();
   b64ec:	4862      	ldr	r0, [pc, #392]	; (b6678 <_Z13dataOffloaderv+0x19c>)
   b64ee:	f001 f96b 	bl	b77c8 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   b64f2:	4962      	ldr	r1, [pc, #392]	; (b667c <_Z13dataOffloaderv+0x1a0>)
   b64f4:	4862      	ldr	r0, [pc, #392]	; (b6680 <_Z13dataOffloaderv+0x1a4>)
   b64f6:	2200      	movs	r2, #0
   b64f8:	f7fe f8d8 	bl	b46ac <_ZN7FatFile4openEPKci>
   b64fc:	b948      	cbnz	r0, b6512 <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   b64fe:	4b61      	ldr	r3, [pc, #388]	; (b6684 <_Z13dataOffloaderv+0x1a8>)
   b6500:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b6502:	f00b f933 	bl	c176c <_Z16_fetch_usbserialv>
   b6506:	4960      	ldr	r1, [pc, #384]	; (b6688 <_Z13dataOffloaderv+0x1ac>)
}
   b6508:	b02d      	add	sp, #180	; 0xb4
   b650a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b650e:	f009 bc04 	b.w	bfd1a <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b6512:	f00b f92b 	bl	c176c <_Z16_fetch_usbserialv>
   b6516:	495d      	ldr	r1, [pc, #372]	; (b668c <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   b6518:	4d5d      	ldr	r5, [pc, #372]	; (b6690 <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   b651a:	f009 fbfe 	bl	bfd1a <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b651e:	f008 fd65 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6522:	f008 fdc1 	bl	bf0a8 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6526:	4604      	mov	r4, r0
   b6528:	b948      	cbnz	r0, b653e <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   b652a:	f008 fd5f 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b652e:	4622      	mov	r2, r4
   b6530:	4629      	mov	r1, r5
   b6532:	f008 fe0c 	bl	bf14e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b6536:	200a      	movs	r0, #10
   b6538:	f00a fcda 	bl	c0ef0 <delay>
    while(!BLE.connected()){
   b653c:	e7ef      	b.n	b651e <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   b653e:	f00b f915 	bl	c176c <_Z16_fetch_usbserialv>
   b6542:	4954      	ldr	r1, [pc, #336]	; (b6694 <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b6544:	4f4e      	ldr	r7, [pc, #312]	; (b6680 <_Z13dataOffloaderv+0x1a4>)
   b6546:	4d4c      	ldr	r5, [pc, #304]	; (b6678 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b6548:	f8df 816c 	ldr.w	r8, [pc, #364]	; b66b8 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   b654c:	f009 fbe5 	bl	bfd1a <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b6550:	2200      	movs	r2, #0
   b6552:	4639      	mov	r1, r7
   b6554:	4628      	mov	r0, r5
   b6556:	f001 f8c4 	bl	b76e2 <_ZN7FatFile8openNextEPS_i>
   b655a:	b1f8      	cbz	r0, b659c <_Z13dataOffloaderv+0xc0>
   b655c:	f008 fd46 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6560:	f008 fda2 	bl	bf0a8 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6564:	b1d0      	cbz	r0, b659c <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b6566:	221e      	movs	r2, #30
   b6568:	a901      	add	r1, sp, #4
   b656a:	4628      	mov	r0, r5
   b656c:	f000 fb1d 	bl	b6baa <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b6570:	f00b f8fc 	bl	c176c <_Z16_fetch_usbserialv>
   b6574:	4641      	mov	r1, r8
   b6576:	aa01      	add	r2, sp, #4
   b6578:	f7fd ff2a 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b657c:	a801      	add	r0, sp, #4
   b657e:	f00e f8d6 	bl	c472e <strlen>
   b6582:	ab01      	add	r3, sp, #4
   b6584:	3804      	subs	r0, #4
   b6586:	4418      	add	r0, r3
   b6588:	f00e f8da 	bl	c4740 <strlwr>
   b658c:	4942      	ldr	r1, [pc, #264]	; (b6698 <_Z13dataOffloaderv+0x1bc>)
   b658e:	f00e f930 	bl	c47f2 <strstr>
   b6592:	b9d8      	cbnz	r0, b65cc <_Z13dataOffloaderv+0xf0>
            myFile.close();
   b6594:	4628      	mov	r0, r5
   b6596:	f001 f917 	bl	b77c8 <_ZN7FatFile5closeEv>
   b659a:	e7d9      	b.n	b6550 <_Z13dataOffloaderv+0x74>
    logDir.close();
   b659c:	4838      	ldr	r0, [pc, #224]	; (b6680 <_Z13dataOffloaderv+0x1a4>)
   b659e:	f001 f913 	bl	b77c8 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b65a2:	2226      	movs	r2, #38	; 0x26
   b65a4:	2100      	movs	r1, #0
   b65a6:	a809      	add	r0, sp, #36	; 0x24
   b65a8:	f00e f836 	bl	c4618 <memset>
    strcpy(fileCode,"filedone");
   b65ac:	493b      	ldr	r1, [pc, #236]	; (b669c <_Z13dataOffloaderv+0x1c0>)
   b65ae:	a809      	add	r0, sp, #36	; 0x24
   b65b0:	f00e f898 	bl	c46e4 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b65b4:	2300      	movs	r3, #0
   b65b6:	2226      	movs	r2, #38	; 0x26
   b65b8:	a909      	add	r1, sp, #36	; 0x24
   b65ba:	4839      	ldr	r0, [pc, #228]	; (b66a0 <_Z13dataOffloaderv+0x1c4>)
   b65bc:	f008 fc06 	bl	bedcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b65c0:	4b30      	ldr	r3, [pc, #192]	; (b6684 <_Z13dataOffloaderv+0x1a8>)
   b65c2:	2200      	movs	r2, #0
   b65c4:	701a      	strb	r2, [r3, #0]
}
   b65c6:	b02d      	add	sp, #180	; 0xb4
   b65c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b65cc:	2226      	movs	r2, #38	; 0x26
   b65ce:	2100      	movs	r1, #0
   b65d0:	a809      	add	r0, sp, #36	; 0x24
   b65d2:	f00e f821 	bl	c4618 <memset>
            strcpy(fileCode,"filename");
   b65d6:	4933      	ldr	r1, [pc, #204]	; (b66a4 <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   b65d8:	4e33      	ldr	r6, [pc, #204]	; (b66a8 <_Z13dataOffloaderv+0x1cc>)
   b65da:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b66a0 <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   b65de:	a809      	add	r0, sp, #36	; 0x24
   b65e0:	f00e f880 	bl	c46e4 <strcpy>
            strcat(fileCode,namebuf);
   b65e4:	a901      	add	r1, sp, #4
   b65e6:	a809      	add	r0, sp, #36	; 0x24
   b65e8:	f00e f84c 	bl	c4684 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b65ec:	f00b f8be 	bl	c176c <_Z16_fetch_usbserialv>
   b65f0:	492e      	ldr	r1, [pc, #184]	; (b66ac <_Z13dataOffloaderv+0x1d0>)
   b65f2:	aa09      	add	r2, sp, #36	; 0x24
   b65f4:	f7fd feec 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b65f8:	2300      	movs	r3, #0
   b65fa:	2226      	movs	r2, #38	; 0x26
   b65fc:	a909      	add	r1, sp, #36	; 0x24
   b65fe:	4828      	ldr	r0, [pc, #160]	; (b66a0 <_Z13dataOffloaderv+0x1c4>)
   b6600:	f008 fbe4 	bl	bedcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b6604:	f00b f8b2 	bl	c176c <_Z16_fetch_usbserialv>
   b6608:	4929      	ldr	r1, [pc, #164]	; (b66b0 <_Z13dataOffloaderv+0x1d4>)
   b660a:	aa01      	add	r2, sp, #4
   b660c:	f7fd fee0 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b6610:	2096      	movs	r0, #150	; 0x96
   b6612:	f00a fc6d 	bl	c0ef0 <delay>
            noInterrupts();
   b6616:	f00b f8fb 	bl	c1810 <_Z12noInterruptsv>
            while(myFile.available()){
   b661a:	4630      	mov	r0, r6
   b661c:	f7fd fd5f 	bl	b40de <_ZN4File9availableEv>
   b6620:	4604      	mov	r4, r0
   b6622:	b188      	cbz	r0, b6648 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b6624:	2264      	movs	r2, #100	; 0x64
   b6626:	2100      	movs	r1, #0
   b6628:	a813      	add	r0, sp, #76	; 0x4c
   b662a:	f00d fff5 	bl	c4618 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b662e:	aa13      	add	r2, sp, #76	; 0x4c
   b6630:	2364      	movs	r3, #100	; 0x64
   b6632:	210d      	movs	r1, #13
   b6634:	4630      	mov	r0, r6
   b6636:	f009 fbe0 	bl	bfdfa <_ZN6Stream14readBytesUntilEcPcj>
   b663a:	2300      	movs	r3, #0
   b663c:	2264      	movs	r2, #100	; 0x64
   b663e:	a913      	add	r1, sp, #76	; 0x4c
   b6640:	4648      	mov	r0, r9
   b6642:	f008 fbc3 	bl	bedcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b6646:	e7e8      	b.n	b661a <_Z13dataOffloaderv+0x13e>
            interrupts();
   b6648:	f00b f8e4 	bl	c1814 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b664c:	2226      	movs	r2, #38	; 0x26
   b664e:	4621      	mov	r1, r4
   b6650:	a809      	add	r0, sp, #36	; 0x24
   b6652:	f00d ffe1 	bl	c4618 <memset>
            strcpy(fileCode,"filecomp");
   b6656:	4917      	ldr	r1, [pc, #92]	; (b66b4 <_Z13dataOffloaderv+0x1d8>)
   b6658:	a809      	add	r0, sp, #36	; 0x24
   b665a:	f00e f843 	bl	c46e4 <strcpy>
   b665e:	4623      	mov	r3, r4
   b6660:	2226      	movs	r2, #38	; 0x26
   b6662:	a909      	add	r1, sp, #36	; 0x24
   b6664:	480e      	ldr	r0, [pc, #56]	; (b66a0 <_Z13dataOffloaderv+0x1c4>)
   b6666:	f008 fbb1 	bl	bedcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b666a:	2096      	movs	r0, #150	; 0x96
   b666c:	f00a fc40 	bl	c0ef0 <delay>
   b6670:	e790      	b.n	b6594 <_Z13dataOffloaderv+0xb8>
   b6672:	bf00      	nop
   b6674:	000c6ccf 	.word	0x000c6ccf
   b6678:	2003df0c 	.word	0x2003df0c
   b667c:	000c6cec 	.word	0x000c6cec
   b6680:	2003de58 	.word	0x2003de58
   b6684:	2003e0b0 	.word	0x2003e0b0
   b6688:	000c6cee 	.word	0x000c6cee
   b668c:	000c6d1b 	.word	0x000c6d1b
   b6690:	2003dd88 	.word	0x2003dd88
   b6694:	000c6d3b 	.word	0x000c6d3b
   b6698:	000c6b5d 	.word	0x000c6b5d
   b669c:	000c6d79 	.word	0x000c6d79
   b66a0:	2003e0a8 	.word	0x2003e0a8
   b66a4:	000c6d82 	.word	0x000c6d82
   b66a8:	2003defc 	.word	0x2003defc
   b66ac:	000c6d8b 	.word	0x000c6d8b
   b66b0:	000c6d9e 	.word	0x000c6d9e
   b66b4:	000c6dc6 	.word	0x000c6dc6
   b66b8:	000c6d50 	.word	0x000c6d50

000b66bc <loop>:
void loop(){
   b66bc:	b508      	push	{r3, lr}
    getPositionData();      //Grab position data from GPS and Compass
   b66be:	f7ff f887 	bl	b57d0 <_Z15getPositionDatav>
    readPowerSys();         //Read power from battery and solar panel
   b66c2:	f7ff fb0d 	bl	b5ce0 <_Z12readPowerSysv>
    sensorHandler();        //Read and request data from Atlas sensor
   b66c6:	f7ff fc97 	bl	b5ff8 <_Z13sensorHandlerv>
    XBeeHandler();          //Check if a string has come in from XBee
   b66ca:	f7ff fe7d 	bl	b63c8 <_Z11XBeeHandlerv>
    statusUpdate();         //Check if a status update has to be sent out
   b66ce:	f7ff fc39 	bl	b5f44 <_Z12statusUpdatev>
    updateMotors();         //Update the motor speeds dependent on the mode
   b66d2:	f7ff f95b 	bl	b598c <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();    //Check if a signal to offload has been received
   b66d6:	4b06      	ldr	r3, [pc, #24]	; (b66f0 <loop+0x34>)
   b66d8:	781b      	ldrb	r3, [r3, #0]
   b66da:	b10b      	cbz	r3, b66e0 <loop+0x24>
   b66dc:	f7ff fefe 	bl	b64dc <_Z13dataOffloaderv>
    sendResponseData();     //Send sensor data if requested from the CC
   b66e0:	f7ff fbc6 	bl	b5e70 <_Z16sendResponseDatav>
}
   b66e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(10);              //Slow down the program a little bit, 10ms per loop
   b66e8:	200a      	movs	r0, #10
   b66ea:	f00a bc01 	b.w	c0ef0 <delay>
   b66ee:	bf00      	nop
   b66f0:	2003e0b0 	.word	0x2003e0b0

000b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b66f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b66f6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b66fa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b66fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b66fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6702:	42ae      	cmp	r6, r5
   b6704:	d004      	beq.n	b6710 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6706:	4628      	mov	r0, r5
   b6708:	f008 f82a 	bl	be760 <_ZN6StringD1Ev>
   b670c:	3514      	adds	r5, #20
   b670e:	e7f8      	b.n	b6702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6710:	6820      	ldr	r0, [r4, #0]
   b6712:	f007 fe0f 	bl	be334 <free>
    AllocatorT::free(data_);
}
   b6716:	4620      	mov	r0, r4
   b6718:	bd70      	pop	{r4, r5, r6, pc}

000b671a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b671a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b671c:	4616      	mov	r6, r2
   b671e:	b08f      	sub	sp, #60	; 0x3c
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b6720:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6722:	e9c0 2200 	strd	r2, r2, [r0]
   b6726:	4604      	mov	r4, r0
   b6728:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b672a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b672c:	4619      	mov	r1, r3
   b672e:	a804      	add	r0, sp, #16
   b6730:	f008 fb0e 	bl	bed50 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b6734:	9914      	ldr	r1, [sp, #80]	; 0x50
   b6736:	4638      	mov	r0, r7
   b6738:	f008 fb0a 	bl	bed50 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b673c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b673e:	9302      	str	r3, [sp, #8]
   b6740:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6742:	4620      	mov	r0, r4
   b6744:	e9cd 7300 	strd	r7, r3, [sp]
   b6748:	4632      	mov	r2, r6
   b674a:	ab04      	add	r3, sp, #16
   b674c:	4629      	mov	r1, r5
   b674e:	f009 f87d 	bl	bf84c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b6752:	4620      	mov	r0, r4
   b6754:	b00f      	add	sp, #60	; 0x3c
   b6756:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6758 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6758:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b675a:	4c0b      	ldr	r4, [pc, #44]	; (b6788 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b675c:	7821      	ldrb	r1, [r4, #0]
   b675e:	f3bf 8f5b 	dmb	ish
   b6762:	f011 0101 	ands.w	r1, r1, #1
   b6766:	d10b      	bne.n	b6780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6768:	4620      	mov	r0, r4
   b676a:	9101      	str	r1, [sp, #4]
   b676c:	f7fd fca8 	bl	b40c0 <__cxa_guard_acquire>
   b6770:	9901      	ldr	r1, [sp, #4]
   b6772:	b128      	cbz	r0, b6780 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6774:	4805      	ldr	r0, [pc, #20]	; (b678c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6776:	f007 fea9 	bl	be4cc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b677a:	4620      	mov	r0, r4
   b677c:	f7fd fca5 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b6780:	4802      	ldr	r0, [pc, #8]	; (b678c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6782:	b002      	add	sp, #8
   b6784:	bd10      	pop	{r4, pc}
   b6786:	bf00      	nop
   b6788:	2003dd28 	.word	0x2003dd28
   b678c:	2003dd2c 	.word	0x2003dd2c

000b6790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6790:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6794:	4604      	mov	r4, r0
   b6796:	460d      	mov	r5, r1
   b6798:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b679a:	d916      	bls.n	b67ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b679c:	4290      	cmp	r0, r2
   b679e:	d215      	bcs.n	b67cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b67a0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b67a4:	1a75      	subs	r5, r6, r1
   b67a6:	f1a1 0714 	sub.w	r7, r1, #20
   b67aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b67ac:	42b7      	cmp	r7, r6
   b67ae:	d01c      	beq.n	b67ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b67b0:	b12c      	cbz	r4, b67be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b67b2:	4631      	mov	r1, r6
   b67b4:	4620      	mov	r0, r4
   b67b6:	f008 f84f 	bl	be858 <_ZN6StringC1EOS_>
   b67ba:	7c33      	ldrb	r3, [r6, #16]
   b67bc:	7423      	strb	r3, [r4, #16]
   b67be:	4630      	mov	r0, r6
   b67c0:	f007 ffce 	bl	be760 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b67c4:	3e14      	subs	r6, #20
   b67c6:	3c14      	subs	r4, #20
   b67c8:	e7f0      	b.n	b67ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b67ca:	d00e      	beq.n	b67ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b67cc:	42b5      	cmp	r5, r6
   b67ce:	d00c      	beq.n	b67ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b67d0:	b12c      	cbz	r4, b67de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b67d2:	4629      	mov	r1, r5
   b67d4:	4620      	mov	r0, r4
   b67d6:	f008 f83f 	bl	be858 <_ZN6StringC1EOS_>
   b67da:	7c2b      	ldrb	r3, [r5, #16]
   b67dc:	7423      	strb	r3, [r4, #16]
   b67de:	4628      	mov	r0, r5
   b67e0:	f007 ffbe 	bl	be760 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b67e4:	3514      	adds	r5, #20
   b67e6:	3414      	adds	r4, #20
   b67e8:	e7f0      	b.n	b67cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b67ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b67ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b67f0:	2300      	movs	r3, #0
   b67f2:	e9c0 3300 	strd	r3, r3, [r0]
   b67f6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b67f8:	684f      	ldr	r7, [r1, #4]
   b67fa:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b67fc:	4604      	mov	r4, r0
   b67fe:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6800:	dd23      	ble.n	b684a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6802:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b6806:	fb08 f007 	mul.w	r0, r8, r7
   b680a:	f007 fd8b 	bl	be324 <malloc>
            if (!d) {
   b680e:	4605      	mov	r5, r0
   b6810:	b1d8      	cbz	r0, b684a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b6812:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6816:	fb08 1202 	mla	r2, r8, r2, r1
   b681a:	f7ff ffb9 	bl	b6790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b681e:	6820      	ldr	r0, [r4, #0]
   b6820:	f007 fd88 	bl	be334 <free>
        data_ = d;
   b6824:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6826:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6828:	e9d6 7300 	ldrd	r7, r3, [r6]
   b682c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b6830:	45b8      	cmp	r8, r7
   b6832:	d008      	beq.n	b6846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b6834:	4639      	mov	r1, r7
   b6836:	4628      	mov	r0, r5
   b6838:	f008 f828 	bl	be88c <_ZN6StringC1ERKS_>
   b683c:	7c3b      	ldrb	r3, [r7, #16]
   b683e:	742b      	strb	r3, [r5, #16]
   b6840:	3714      	adds	r7, #20
   b6842:	3514      	adds	r5, #20
   b6844:	e7f4      	b.n	b6830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b6846:	6873      	ldr	r3, [r6, #4]
   b6848:	6063      	str	r3, [r4, #4]
}
   b684a:	4620      	mov	r0, r4
   b684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6850 <_GLOBAL__sub_I_SystemMode>:
   b6850:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b6852:	4b85      	ldr	r3, [pc, #532]	; (b6a68 <_GLOBAL__sub_I_SystemMode+0x218>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b6854:	4a85      	ldr	r2, [pc, #532]	; (b6a6c <_GLOBAL__sub_I_SystemMode+0x21c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b6856:	4d86      	ldr	r5, [pc, #536]	; (b6a70 <_GLOBAL__sub_I_SystemMode+0x220>)
	    _M_invoker = &_My_handler::_M_invoke;
   b6858:	4f86      	ldr	r7, [pc, #536]	; (b6a74 <_GLOBAL__sub_I_SystemMode+0x224>)
   b685a:	2601      	movs	r6, #1
   b685c:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b685e:	4b86      	ldr	r3, [pc, #536]	; (b6a78 <_GLOBAL__sub_I_SystemMode+0x228>)
   b6860:	2400      	movs	r4, #0
   b6862:	b093      	sub	sp, #76	; 0x4c
    SleepResult() {}
   b6864:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6866:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b686a:	2003      	movs	r0, #3
   b686c:	f007 fc7e 	bl	be16c <set_system_mode>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b6870:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6874:	682b      	ldr	r3, [r5, #0]
   b6876:	9300      	str	r3, [sp, #0]
   b6878:	4b80      	ldr	r3, [pc, #512]	; (b6a7c <_GLOBAL__sub_I_SystemMode+0x22c>)
   b687a:	4981      	ldr	r1, [pc, #516]	; (b6a80 <_GLOBAL__sub_I_SystemMode+0x230>)
   b687c:	681b      	ldr	r3, [r3, #0]
   b687e:	4881      	ldr	r0, [pc, #516]	; (b6a84 <_GLOBAL__sub_I_SystemMode+0x234>)
   b6880:	f04f 0210 	mov.w	r2, #16
   b6884:	f7ff ff49 	bl	b671a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b6888:	4b7f      	ldr	r3, [pc, #508]	; (b6a88 <_GLOBAL__sub_I_SystemMode+0x238>)
   b688a:	9402      	str	r4, [sp, #8]
   b688c:	9301      	str	r3, [sp, #4]
   b688e:	682b      	ldr	r3, [r5, #0]
   b6890:	9300      	str	r3, [sp, #0]
   b6892:	4b7e      	ldr	r3, [pc, #504]	; (b6a8c <_GLOBAL__sub_I_SystemMode+0x23c>)
   b6894:	497e      	ldr	r1, [pc, #504]	; (b6a90 <_GLOBAL__sub_I_SystemMode+0x240>)
   b6896:	681b      	ldr	r3, [r3, #0]
   b6898:	487e      	ldr	r0, [pc, #504]	; (b6a94 <_GLOBAL__sub_I_SystemMode+0x244>)
   b689a:	f04f 0204 	mov.w	r2, #4
   b689e:	f7ff ff3c 	bl	b671a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b68a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b68a6:	682b      	ldr	r3, [r5, #0]
   b68a8:	9300      	str	r3, [sp, #0]
   b68aa:	4b7b      	ldr	r3, [pc, #492]	; (b6a98 <_GLOBAL__sub_I_SystemMode+0x248>)
   b68ac:	497b      	ldr	r1, [pc, #492]	; (b6a9c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b68ae:	681b      	ldr	r3, [r3, #0]
   b68b0:	487b      	ldr	r0, [pc, #492]	; (b6aa0 <_GLOBAL__sub_I_SystemMode+0x250>)
   b68b2:	f04f 0210 	mov.w	r2, #16
   b68b6:	f7ff ff30 	bl	b671a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b68ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b68be:	682b      	ldr	r3, [r5, #0]
   b68c0:	9300      	str	r3, [sp, #0]
   b68c2:	4b78      	ldr	r3, [pc, #480]	; (b6aa4 <_GLOBAL__sub_I_SystemMode+0x254>)
   b68c4:	4978      	ldr	r1, [pc, #480]	; (b6aa8 <_GLOBAL__sub_I_SystemMode+0x258>)
   b68c6:	681b      	ldr	r3, [r3, #0]
   b68c8:	4878      	ldr	r0, [pc, #480]	; (b6aac <_GLOBAL__sub_I_SystemMode+0x25c>)
	    _M_manager = &_My_handler::_M_manager;
   b68ca:	4d79      	ldr	r5, [pc, #484]	; (b6ab0 <_GLOBAL__sub_I_SystemMode+0x260>)
   b68cc:	f04f 0210 	mov.w	r2, #16
   b68d0:	f7ff ff23 	bl	b671a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                         //Advertising data
   b68d4:	4877      	ldr	r0, [pc, #476]	; (b6ab4 <_GLOBAL__sub_I_SystemMode+0x264>)
   b68d6:	f008 fdcc 	bl	bf472 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b68da:	4b77      	ldr	r3, [pc, #476]	; (b6ab8 <_GLOBAL__sub_I_SystemMode+0x268>)
   b68dc:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);           //Create timer for watchdog, which checks if certain methods of communication are available
   b68de:	aa0e      	add	r2, sp, #56	; 0x38
   b68e0:	4623      	mov	r3, r4
   b68e2:	f643 2198 	movw	r1, #15000	; 0x3a98
   b68e6:	4875      	ldr	r0, [pc, #468]	; (b6abc <_GLOBAL__sub_I_SystemMode+0x26c>)
	    _M_manager = &_My_handler::_M_manager;
   b68e8:	9510      	str	r5, [sp, #64]	; 0x40
	    _M_invoker = &_My_handler::_M_invoke;
   b68ea:	9711      	str	r7, [sp, #68]	; 0x44
   b68ec:	f7fd fe2a 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b68f0:	a80e      	add	r0, sp, #56	; 0x38
   b68f2:	f7fd fdef 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b68f6:	4b72      	ldr	r3, [pc, #456]	; (b6ac0 <_GLOBAL__sub_I_SystemMode+0x270>)
   b68f8:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(300,LEDHandler);                     //Create timer for LED, which updates the color of the LED based on what communication/hardware modes are available
   b68fa:	aa0e      	add	r2, sp, #56	; 0x38
   b68fc:	4623      	mov	r3, r4
   b68fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6902:	4870      	ldr	r0, [pc, #448]	; (b6ac4 <_GLOBAL__sub_I_SystemMode+0x274>)
	    _M_manager = &_My_handler::_M_manager;
   b6904:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6908:	f7fd fe1c 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b690c:	a80e      	add	r0, sp, #56	; 0x38
   b690e:	f7fd fde1 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6912:	4b6d      	ldr	r3, [pc, #436]	; (b6ac8 <_GLOBAL__sub_I_SystemMode+0x278>)
   b6914:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);             //Create timer for motor watchdog, which cuts off motors if messages from CC have not been received recently enough
   b6916:	aa0e      	add	r2, sp, #56	; 0x38
   b6918:	4623      	mov	r3, r4
   b691a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b691e:	486b      	ldr	r0, [pc, #428]	; (b6acc <_GLOBAL__sub_I_SystemMode+0x27c>)
	    _M_manager = &_My_handler::_M_manager;
   b6920:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6924:	f7fd fe0e 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6928:	a80e      	add	r0, sp, #56	; 0x38
   b692a:	f7fd fdd3 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b692e:	4b68      	ldr	r3, [pc, #416]	; (b6ad0 <_GLOBAL__sub_I_SystemMode+0x280>)
   b6930:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);            //Create timer for status, which calculates the status values that will be transmitted to CC and sets a flag for transmitting out the status
   b6932:	aa0e      	add	r2, sp, #56	; 0x38
   b6934:	4623      	mov	r3, r4
   b6936:	f242 7110 	movw	r1, #10000	; 0x2710
   b693a:	4866      	ldr	r0, [pc, #408]	; (b6ad4 <_GLOBAL__sub_I_SystemMode+0x284>)
	    _M_manager = &_My_handler::_M_manager;
   b693c:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6940:	f7fd fe00 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6944:	a80e      	add	r0, sp, #56	; 0x38
   b6946:	f7fd fdc5 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b694a:	4b63      	ldr	r3, [pc, #396]	; (b6ad8 <_GLOBAL__sub_I_SystemMode+0x288>)
   b694c:	930e      	str	r3, [sp, #56]	; 0x38
Timer shutdownTimer(SHUTDOWN_HOLD, buttonTimer);    //Create timer for shutdown, which runs when the button is pressed to calculate if the button has been held for SHUTDOWN_HOLD seconds 
   b694e:	aa0e      	add	r2, sp, #56	; 0x38
   b6950:	4623      	mov	r3, r4
   b6952:	f640 31b8 	movw	r1, #3000	; 0xbb8
   b6956:	4861      	ldr	r0, [pc, #388]	; (b6adc <_GLOBAL__sub_I_SystemMode+0x28c>)
	    _M_manager = &_My_handler::_M_manager;
   b6958:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b695c:	f7fd fdf2 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6960:	a80e      	add	r0, sp, #56	; 0x38
   b6962:	f7fd fdb7 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
SFE_UBLOX_GNSS myGPS;                           //GPS Buffer and Objects
   b6966:	485e      	ldr	r0, [pc, #376]	; (b6ae0 <_GLOBAL__sub_I_SystemMode+0x290>)
  explicit SdFat(SPIClass* spiPort) {
   b6968:	4d5e      	ldr	r5, [pc, #376]	; (b6ae4 <_GLOBAL__sub_I_SystemMode+0x294>)
   b696a:	f001 fd03 	bl	b8374 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;                       //Compass object
   b696e:	485e      	ldr	r0, [pc, #376]	; (b6ae8 <_GLOBAL__sub_I_SystemMode+0x298>)
   b6970:	f006 fc4c 	bl	bd20c <_ZN16Adafruit_LIS3MDLC1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6974:	4622      	mov	r2, r4
   b6976:	2114      	movs	r1, #20
   b6978:	4630      	mov	r0, r6
   b697a:	f007 fc1f 	bl	be1bc <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b697e:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6980:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b6982:	9200      	str	r2, [sp, #0]
   b6984:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b6988:	4632      	mov	r2, r6
   b698a:	4858      	ldr	r0, [pc, #352]	; (b6aec <_GLOBAL__sub_I_SystemMode+0x29c>)
   b698c:	9601      	str	r6, [sp, #4]
   b698e:	f007 fd75 	bl	be47c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b6992:	f7ff fee1 	bl	b6758 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6996:	2364      	movs	r3, #100	; 0x64
   b6998:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
  {
   b699c:	4b54      	ldr	r3, [pc, #336]	; (b6af0 <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b699e:	606c      	str	r4, [r5, #4]
   b69a0:	f8c5 443c 	str.w	r4, [r5, #1084]	; 0x43c
   b69a4:	f8c5 4468 	str.w	r4, [r5, #1128]	; 0x468
   b69a8:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   b69ac:	f885 6474 	strb.w	r6, [r5, #1140]	; 0x474
   b69b0:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   b69b4:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b69b8:	b908      	cbnz	r0, b69be <_GLOBAL__sub_I_SystemMode+0x16e>
   b69ba:	f7ff fecd 	bl	b6758 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b69be:	4a4d      	ldr	r2, [pc, #308]	; (b6af4 <_GLOBAL__sub_I_SystemMode+0x2a4>)
  File() {}
   b69c0:	494d      	ldr	r1, [pc, #308]	; (b6af8 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   b69c2:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b69c6:	2300      	movs	r3, #0
   b69c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b69cc:	e9c2 3001 	strd	r3, r0, [r2, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b69d0:	6113      	str	r3, [r2, #16]
   b69d2:	6011      	str	r1, [r2, #0]
   b69d4:	4a49      	ldr	r2, [pc, #292]	; (b6afc <_GLOBAL__sub_I_SystemMode+0x2ac>)
        capacity_(0) {
   b69d6:	9307      	str	r3, [sp, #28]
   b69d8:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b69dc:	6113      	str	r3, [r2, #16]
   b69de:	6011      	str	r1, [r2, #0]
   b69e0:	4a47      	ldr	r2, [pc, #284]	; (b6b00 <_GLOBAL__sub_I_SystemMode+0x2b0>)
        filter_(level, filters) {
   b69e2:	4c48      	ldr	r4, [pc, #288]	; (b6b04 <_GLOBAL__sub_I_SystemMode+0x2b4>)
   b69e4:	6113      	str	r3, [r2, #16]
   b69e6:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b69ea:	6011      	str	r1, [r2, #0]
   b69ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b69f0:	f00a febc 	bl	c176c <_Z16_fetch_usbserialv>
   b69f4:	a905      	add	r1, sp, #20
   b69f6:	4605      	mov	r5, r0
   b69f8:	a808      	add	r0, sp, #32
   b69fa:	f7ff fef7 	bl	b67ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b69fe:	a908      	add	r1, sp, #32
   b6a00:	a80b      	add	r0, sp, #44	; 0x2c
   b6a02:	f7ff fef3 	bl	b67ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6a06:	4b40      	ldr	r3, [pc, #256]	; (b6b08 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   b6a08:	6023      	str	r3, [r4, #0]
   b6a0a:	a90b      	add	r1, sp, #44	; 0x2c
   b6a0c:	a80e      	add	r0, sp, #56	; 0x38
   b6a0e:	f7ff feed 	bl	b67ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6a12:	aa0e      	add	r2, sp, #56	; 0x38
   b6a14:	211e      	movs	r1, #30
   b6a16:	1d20      	adds	r0, r4, #4
   b6a18:	f009 fe9a 	bl	c0750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a1c:	a80e      	add	r0, sp, #56	; 0x38
   b6a1e:	f7ff fe69 	bl	b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6a22:	a80b      	add	r0, sp, #44	; 0x2c
   b6a24:	f7ff fe66 	bl	b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a28:	4b38      	ldr	r3, [pc, #224]	; (b6b0c <_GLOBAL__sub_I_SystemMode+0x2bc>)
   b6a2a:	6023      	str	r3, [r4, #0]
   b6a2c:	6225      	str	r5, [r4, #32]
   b6a2e:	a808      	add	r0, sp, #32
   b6a30:	f7ff fe60 	bl	b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a34:	4b36      	ldr	r3, [pc, #216]	; (b6b10 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b6a36:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6a38:	f00a fe98 	bl	c176c <_Z16_fetch_usbserialv>
   b6a3c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6a40:	f00a fe84 	bl	c174c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6a44:	f009 fb66 	bl	c0114 <_ZN5spark10LogManager8instanceEv>
   b6a48:	4621      	mov	r1, r4
   b6a4a:	f009 fd57 	bl	c04fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);    //Log Configuration
   b6a4e:	a805      	add	r0, sp, #20
   b6a50:	f7ff fe50 	bl	b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL;                                     //Object for servo esc of left motor 
   b6a54:	482f      	ldr	r0, [pc, #188]	; (b6b14 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   b6a56:	f007 fe31 	bl	be6bc <_ZN5ServoC1Ev>
Servo ESCR;                                     //Object for servo esc of right motor
   b6a5a:	482f      	ldr	r0, [pc, #188]	; (b6b18 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   b6a5c:	b013      	add	sp, #76	; 0x4c
   b6a5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
Servo ESCR;                                     //Object for servo esc of right motor
   b6a62:	f007 be2b 	b.w	be6bc <_ZN5ServoC1Ev>
   b6a66:	bf00      	nop
   b6a68:	2003dd84 	.word	0x2003dd84
   b6a6c:	ffff0000 	.word	0xffff0000
   b6a70:	2003db28 	.word	0x2003db28
   b6a74:	000b4243 	.word	0x000b4243
   b6a78:	2003dd70 	.word	0x2003dd70
   b6a7c:	2003db3c 	.word	0x2003db3c
   b6a80:	000c6dcf 	.word	0x000c6dcf
   b6a84:	2003e5e4 	.word	0x2003e5e4
   b6a88:	000b4ca9 	.word	0x000b4ca9
   b6a8c:	2003db38 	.word	0x2003db38
   b6a90:	000c6dd2 	.word	0x000c6dd2
   b6a94:	2003e0bc 	.word	0x2003e0bc
   b6a98:	2003db34 	.word	0x2003db34
   b6a9c:	000c6dd5 	.word	0x000c6dd5
   b6aa0:	2003e0a8 	.word	0x2003e0a8
   b6aa4:	2003db30 	.word	0x2003db30
   b6aa8:	000c6dd9 	.word	0x000c6dd9
   b6aac:	2003dda0 	.word	0x2003dda0
   b6ab0:	000b422f 	.word	0x000b422f
   b6ab4:	2003dd88 	.word	0x2003dd88
   b6ab8:	000b46bd 	.word	0x000b46bd
   b6abc:	2003e5f0 	.word	0x2003e5f0
   b6ac0:	000b45bd 	.word	0x000b45bd
   b6ac4:	2003de00 	.word	0x2003de00
   b6ac8:	000b43ed 	.word	0x000b43ed
   b6acc:	2003dee0 	.word	0x2003dee0
   b6ad0:	000b40f9 	.word	0x000b40f9
   b6ad4:	2003e5ac 	.word	0x2003e5ac
   b6ad8:	000b433d 	.word	0x000b433d
   b6adc:	2003e564 	.word	0x2003e564
   b6ae0:	2003df30 	.word	0x2003df30
   b6ae4:	2003e0c4 	.word	0x2003e0c4
   b6ae8:	2003de20 	.word	0x2003de20
   b6aec:	2003e588 	.word	0x2003e588
   b6af0:	000c6de8 	.word	0x000c6de8
   b6af4:	2003defc 	.word	0x2003defc
   b6af8:	000c6e54 	.word	0x000c6e54
   b6afc:	2003de7c 	.word	0x2003de7c
   b6b00:	2003de48 	.word	0x2003de48
   b6b04:	2003deb0 	.word	0x2003deb0
   b6b08:	000c6e10 	.word	0x000c6e10
   b6b0c:	000c7f78 	.word	0x000c7f78
   b6b10:	000c6e3c 	.word	0x000c6e3c
   b6b14:	2003dd48 	.word	0x2003dd48
   b6b18:	2003dd58 	.word	0x2003dd58

000b6b1c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6b1c:	2904      	cmp	r1, #4
   b6b1e:	d804      	bhi.n	b6b2a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6b20:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6b24:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6b28:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6b2a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6b2c:	bf9b      	ittet	ls
   b6b2e:	f101 31ff 	addls.w	r1, r1, #4294967295
   b6b32:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6b36:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6b38:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6b3a:	bf84      	itt	hi
   b6b3c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6b40:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6b42:	4770      	bx	lr

000b6b44 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6b44:	b510      	push	{r4, lr}
   b6b46:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6b48:	3024      	adds	r0, #36	; 0x24
   b6b4a:	f000 ff69 	bl	b7a20 <_ZN8FatCache4syncEv>
   b6b4e:	b128      	cbz	r0, b6b5c <_ZN9FatVolume9cacheSyncEv+0x18>
   b6b50:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6b58:	f000 bf62 	b.w	b7a20 <_ZN8FatCache4syncEv>
  }
   b6b5c:	bd10      	pop	{r4, pc}

000b6b5e <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6b5e:	1e41      	subs	r1, r0, #1
   b6b60:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6b64:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6b66:	0842      	lsrs	r2, r0, #1
   b6b68:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6b6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6b70:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6b74:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6b76:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6b78:	d1f5      	bne.n	b6b66 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6b7a:	4770      	bx	lr

000b6b7c <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6b7c:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6b7e:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6b80:	4604      	mov	r4, r0
   b6b82:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6b84:	b923      	cbnz	r3, b6b90 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6b8a:	6889      	ldr	r1, [r1, #8]
   b6b8c:	f000 bc16 	b.w	b73bc <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6b90:	2224      	movs	r2, #36	; 0x24
   b6b92:	2100      	movs	r1, #0
   b6b94:	f00d fd40 	bl	c4618 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6b98:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6b9a:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6b9c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6b9e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6ba0:	68ab      	ldr	r3, [r5, #8]
   b6ba2:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6ba4:	68eb      	ldr	r3, [r5, #12]
   b6ba6:	6223      	str	r3, [r4, #32]
}
   b6ba8:	bd38      	pop	{r3, r4, r5, pc}

000b6baa <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b6baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6bae:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6bb0:	7803      	ldrb	r3, [r0, #0]
   b6bb2:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b6bb6:	4606      	mov	r6, r0
   b6bb8:	460f      	mov	r7, r1
   b6bba:	4690      	mov	r8, r2
   b6bbc:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6bc0:	2b00      	cmp	r3, #0
   b6bc2:	d05d      	beq.n	b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
   b6bc4:	2a0c      	cmp	r2, #12
   b6bc6:	d95b      	bls.n	b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b6bc8:	78c3      	ldrb	r3, [r0, #3]
   b6bca:	b933      	cbnz	r3, b6bda <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b6bcc:	f000 fb46 	bl	b725c <_ZN7FatFile6getSFNEPc>
   b6bd0:	4604      	mov	r4, r0
}
   b6bd2:	4620      	mov	r0, r4
   b6bd4:	b00d      	add	sp, #52	; 0x34
   b6bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b6bda:	4601      	mov	r1, r0
   b6bdc:	a803      	add	r0, sp, #12
   b6bde:	f7ff ffcd 	bl	b6b7c <_ZN7FatFile11openClusterEPS_>
   b6be2:	2800      	cmp	r0, #0
   b6be4:	d04c      	beq.n	b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b6be6:	eb07 0308 	add.w	r3, r7, r8
   b6bea:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6bee:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b6bf2:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6bf4:	78f3      	ldrb	r3, [r6, #3]
   b6bf6:	fa5f f58b 	uxtb.w	r5, fp
   b6bfa:	42ab      	cmp	r3, r5
   b6bfc:	d340      	bcc.n	b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6bfe:	88b1      	ldrh	r1, [r6, #4]
   b6c00:	eba1 010b 	sub.w	r1, r1, fp
   b6c04:	0149      	lsls	r1, r1, #5
   b6c06:	a803      	add	r0, sp, #12
   b6c08:	f000 fcbe 	bl	b7588 <_ZN7FatFile7seekSetEm>
   b6c0c:	4604      	mov	r4, r0
   b6c0e:	2800      	cmp	r0, #0
   b6c10:	d036      	beq.n	b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6c12:	2100      	movs	r1, #0
   b6c14:	a803      	add	r0, sp, #12
   b6c16:	f000 fc98 	bl	b754a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6c1a:	4603      	mov	r3, r0
   b6c1c:	b380      	cbz	r0, b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b6c1e:	7ac2      	ldrb	r2, [r0, #11]
   b6c20:	2a0f      	cmp	r2, #15
   b6c22:	d12d      	bne.n	b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b6c24:	7802      	ldrb	r2, [r0, #0]
   b6c26:	f002 021f 	and.w	r2, r2, #31
   b6c2a:	42aa      	cmp	r2, r5
   b6c2c:	d128      	bne.n	b6c80 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6c2e:	f10b 35ff 	add.w	r5, fp, #4294967295
   b6c32:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b6c36:	197a      	adds	r2, r7, r5
   b6c38:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b6c3a:	4618      	mov	r0, r3
   b6c3c:	9101      	str	r1, [sp, #4]
   b6c3e:	f7ff ff6d 	bl	b6b1c <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6c42:	b168      	cbz	r0, b6c60 <_ZN7FatFile7getNameEPcj+0xb6>
   b6c44:	45a8      	cmp	r8, r5
   b6c46:	d912      	bls.n	b6c6e <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b6c48:	9901      	ldr	r1, [sp, #4]
   b6c4a:	3101      	adds	r1, #1
   b6c4c:	287f      	cmp	r0, #127	; 0x7f
   b6c4e:	b2c9      	uxtb	r1, r1
   b6c50:	bf28      	it	cs
   b6c52:	203f      	movcs	r0, #63	; 0x3f
   b6c54:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b6c56:	f802 0b01 	strb.w	r0, [r2], #1
   b6c5a:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6c5e:	d1ec      	bne.n	b6c3a <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6c60:	45a8      	cmp	r8, r5
   b6c62:	d904      	bls.n	b6c6e <_ZN7FatFile7getNameEPcj+0xc4>
   b6c64:	781a      	ldrb	r2, [r3, #0]
   b6c66:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b6c68:	bf48      	it	mi
   b6c6a:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6c6e:	9a00      	ldr	r2, [sp, #0]
   b6c70:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6c74:	781b      	ldrb	r3, [r3, #0]
   b6c76:	065b      	lsls	r3, r3, #25
   b6c78:	f10b 0b01 	add.w	fp, fp, #1
   b6c7c:	d5ba      	bpl.n	b6bf4 <_ZN7FatFile7getNameEPcj+0x4a>
   b6c7e:	e7a8      	b.n	b6bd2 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6c80:	2400      	movs	r4, #0
   b6c82:	703c      	strb	r4, [r7, #0]
  return false;
   b6c84:	e7a5      	b.n	b6bd2 <_ZN7FatFile7getNameEPcj+0x28>
	...

000b6c88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6c8c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6c92:	2b20      	cmp	r3, #32
   b6c94:	d0fa      	beq.n	b6c8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6c96:	4d6a      	ldr	r5, [pc, #424]	; (b6e40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6c98:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6c9a:	2400      	movs	r4, #0
    c = path[len];
   b6c9c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6c9e:	b1c3      	cbz	r3, b6cd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6ca0:	2b2f      	cmp	r3, #47	; 0x2f
   b6ca2:	d016      	beq.n	b6cd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6ca4:	2b5c      	cmp	r3, #92	; 0x5c
   b6ca6:	d102      	bne.n	b6cae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6ca8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6cae:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6cb2:	b2c0      	uxtb	r0, r0
   b6cb4:	281d      	cmp	r0, #29
   b6cb6:	d803      	bhi.n	b6cc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6cb8:	fa25 f000 	lsr.w	r0, r5, r0
   b6cbc:	07c0      	lsls	r0, r0, #31
   b6cbe:	d4f3      	bmi.n	b6ca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6cc0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6cc4:	283c      	cmp	r0, #60	; 0x3c
   b6cc6:	d0ef      	beq.n	b6ca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6cc8:	3b20      	subs	r3, #32
   b6cca:	2b5e      	cmp	r3, #94	; 0x5e
   b6ccc:	d8ec      	bhi.n	b6ca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6cce:	3401      	adds	r4, #1
    c = path[len];
   b6cd0:	e7e4      	b.n	b6c9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6cd2:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6cd4:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6cd6:	4607      	mov	r7, r0
   b6cd8:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6cdc:	2d20      	cmp	r5, #32
   b6cde:	d0fa      	beq.n	b6cd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6ce0:	2d2f      	cmp	r5, #47	; 0x2f
   b6ce2:	d0f8      	beq.n	b6cd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6ce4:	6017      	str	r7, [r2, #0]
  while (len) {
   b6ce6:	b14c      	cbz	r4, b6cfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6cec:	2a2e      	cmp	r2, #46	; 0x2e
   b6cee:	d001      	beq.n	b6cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6cf0:	2a20      	cmp	r2, #32
   b6cf2:	d101      	bne.n	b6cf8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6cf4:	3c01      	subs	r4, #1
  while (len) {
   b6cf6:	e7f6      	b.n	b6ce6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6cf8:	2cff      	cmp	r4, #255	; 0xff
   b6cfa:	dcd5      	bgt.n	b6ca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6cfc:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6d00:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6d04:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6d06:	f8c1 300d 	str.w	r3, [r1, #13]
   b6d0a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6d0c:	f04f 0800 	mov.w	r8, #0
   b6d10:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6d14:	2b2e      	cmp	r3, #46	; 0x2e
   b6d16:	d001      	beq.n	b6d1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6d18:	2b20      	cmp	r3, #32
   b6d1a:	d102      	bne.n	b6d22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6d1c:	f108 0801 	add.w	r8, r8, #1
   b6d20:	e7f6      	b.n	b6d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6d22:	fab8 f088 	clz	r0, r8
   b6d26:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6d28:	1e65      	subs	r5, r4, #1
   b6d2a:	1c6b      	adds	r3, r5, #1
   b6d2c:	d002      	beq.n	b6d34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6d2e:	5d73      	ldrb	r3, [r6, r5]
   b6d30:	2b2e      	cmp	r3, #46	; 0x2e
   b6d32:	d114      	bne.n	b6d5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6d34:	f04f 0900 	mov.w	r9, #0
   b6d38:	2707      	movs	r7, #7
   b6d3a:	464a      	mov	r2, r9
   b6d3c:	46ca      	mov	sl, r9
   b6d3e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6d42:	45a0      	cmp	r8, r4
   b6d44:	da68      	bge.n	b6e18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6d46:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6d4a:	2b20      	cmp	r3, #32
   b6d4c:	d003      	beq.n	b6d56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6d4e:	2b2e      	cmp	r3, #46	; 0x2e
   b6d50:	d107      	bne.n	b6d62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6d52:	45a8      	cmp	r8, r5
   b6d54:	d012      	beq.n	b6d7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6d56:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6d58:	f108 0801 	add.w	r8, r8, #1
   b6d5c:	e7f1      	b.n	b6d42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6d5e:	3d01      	subs	r5, #1
   b6d60:	e7e3      	b.n	b6d2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6d62:	2b22      	cmp	r3, #34	; 0x22
   b6d64:	d008      	beq.n	b6d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6d66:	2b7c      	cmp	r3, #124	; 0x7c
   b6d68:	d006      	beq.n	b6d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6d6a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6d6e:	f1bc 0f05 	cmp.w	ip, #5
   b6d72:	d80a      	bhi.n	b6d8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6d74:	2b2d      	cmp	r3, #45	; 0x2d
   b6d76:	d012      	beq.n	b6d9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6d78:	45a8      	cmp	r8, r5
   b6d7a:	d15b      	bne.n	b6e34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6d7c:	2f0a      	cmp	r7, #10
   b6d7e:	d04a      	beq.n	b6e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6d80:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6d82:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6d84:	f04f 0e10 	mov.w	lr, #16
   b6d88:	e7e6      	b.n	b6d58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6d8a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6d8e:	f1bc 0f05 	cmp.w	ip, #5
   b6d92:	d9f1      	bls.n	b6d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6d94:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6d98:	f1bc 0f02 	cmp.w	ip, #2
   b6d9c:	d9ec      	bls.n	b6d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6d9e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6da2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6da6:	d8e7      	bhi.n	b6d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6da8:	45a8      	cmp	r8, r5
   b6daa:	d0e7      	beq.n	b6d7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6dac:	42ba      	cmp	r2, r7
   b6dae:	d830      	bhi.n	b6e12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6db0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6db4:	f1bc 0f19 	cmp.w	ip, #25
   b6db8:	d81a      	bhi.n	b6df0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6dba:	3b20      	subs	r3, #32
        lc |= bit;
   b6dbc:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6dc0:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6dc2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6dc6:	f102 0c01 	add.w	ip, r2, #1
   b6dca:	fa5f fc8c 	uxtb.w	ip, ip
   b6dce:	440a      	add	r2, r1
      if (i < 7) {
   b6dd0:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6dd4:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6dd6:	d801      	bhi.n	b6ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6dd8:	f881 c00c 	strb.w	ip, [r1, #12]
   b6ddc:	4662      	mov	r2, ip
   b6dde:	e7bb      	b.n	b6d58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6de0:	45a8      	cmp	r8, r5
   b6de2:	dc18      	bgt.n	b6e16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6de4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6de6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6de8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6dea:	f04f 0e10 	mov.w	lr, #16
   b6dee:	e7b2      	b.n	b6d56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6df0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6df4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6df8:	bf98      	it	ls
   b6dfa:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6dfe:	e7e2      	b.n	b6dc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6e00:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6e02:	2001      	movs	r0, #1
   b6e04:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6e06:	4419      	add	r1, r3
   b6e08:	237e      	movs	r3, #126	; 0x7e
   b6e0a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6e0c:	2331      	movs	r3, #49	; 0x31
   b6e0e:	738b      	strb	r3, [r1, #14]
   b6e10:	e74b      	b.n	b6caa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6e12:	2f0a      	cmp	r7, #10
   b6e14:	d1e4      	bne.n	b6de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6e16:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6e18:	7b4b      	ldrb	r3, [r1, #13]
   b6e1a:	2b20      	cmp	r3, #32
   b6e1c:	f43f af44 	beq.w	b6ca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6e20:	2800      	cmp	r0, #0
   b6e22:	d0ed      	beq.n	b6e00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6e24:	ea1a 0f09 	tst.w	sl, r9
   b6e28:	bf18      	it	ne
   b6e2a:	f04f 0902 	movne.w	r9, #2
   b6e2e:	f881 9000 	strb.w	r9, [r1]
   b6e32:	e73a      	b.n	b6caa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6e34:	42ba      	cmp	r2, r7
   b6e36:	d8ec      	bhi.n	b6e12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6e38:	2000      	movs	r0, #0
      c = '_';
   b6e3a:	235f      	movs	r3, #95	; 0x5f
   b6e3c:	e7c3      	b.n	b6dc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6e3e:	bf00      	nop
   b6e40:	31000101 	.word	0x31000101

000b6e44 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6e48:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6e4c:	4606      	mov	r6, r0
   b6e4e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6e50:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6e52:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6e54:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6e58:	6861      	ldr	r1, [r4, #4]
   b6e5a:	68a2      	ldr	r2, [r4, #8]
   b6e5c:	186b      	adds	r3, r5, r1
   b6e5e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6e60:	4411      	add	r1, r2
   b6e62:	4291      	cmp	r1, r2
   b6e64:	d006      	beq.n	b6e74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6e66:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6e6a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6e6e:	4043      	eors	r3, r0
   b6e70:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6e72:	e7f6      	b.n	b6e62 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6e74:	f1b9 0f03 	cmp.w	r9, #3
   b6e78:	bf28      	it	cs
   b6e7a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6e7e:	f109 0204 	add.w	r2, r9, #4
   b6e82:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6e84:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6e88:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6e8a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6e8c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6e8e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6e90:	bf94      	ite	ls
   b6e92:	3130      	addls	r1, #48	; 0x30
   b6e94:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6e96:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6e98:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6e9a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6e9e:	d1f1      	bne.n	b6e84 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6ea0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6ea4:	2100      	movs	r1, #0
   b6ea6:	735f      	strb	r7, [r3, #13]
   b6ea8:	4630      	mov	r0, r6
   b6eaa:	f000 fb6d 	bl	b7588 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6eae:	2101      	movs	r1, #1
   b6eb0:	4630      	mov	r0, r6
   b6eb2:	f000 fb4a 	bl	b754a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6eb6:	4601      	mov	r1, r0
   b6eb8:	b928      	cbnz	r0, b6ec6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6eba:	7870      	ldrb	r0, [r6, #1]
   b6ebc:	fab0 f080 	clz	r0, r0
   b6ec0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6ec6:	7803      	ldrb	r3, [r0, #0]
   b6ec8:	b16b      	cbz	r3, b6ee6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6eca:	7ac3      	ldrb	r3, [r0, #11]
   b6ecc:	071b      	lsls	r3, r3, #28
   b6ece:	d4ee      	bmi.n	b6eae <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6ed0:	220b      	movs	r2, #11
   b6ed2:	4640      	mov	r0, r8
   b6ed4:	f00d fb68 	bl	c45a8 <memcmp>
   b6ed8:	2800      	cmp	r0, #0
   b6eda:	d1e8      	bne.n	b6eae <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6edc:	3501      	adds	r5, #1
   b6ede:	b2ad      	uxth	r5, r5
   b6ee0:	2d64      	cmp	r5, #100	; 0x64
   b6ee2:	d1b9      	bne.n	b6e58 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6ee4:	e7ed      	b.n	b6ec2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6ee6:	2001      	movs	r0, #1
   b6ee8:	e7eb      	b.n	b6ec2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6eec <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ef0:	ed2d 8b02 	vpush	{d8}
   b6ef4:	b08b      	sub	sp, #44	; 0x2c
   b6ef6:	460d      	mov	r5, r1
   b6ef8:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6efa:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6efc:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6efe:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6f02:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6f04:	d105      	bne.n	b6f12 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6f06:	2000      	movs	r0, #0
}
   b6f08:	b00b      	add	sp, #44	; 0x2c
   b6f0a:	ecbd 8b02 	vpop	{d8}
   b6f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6f12:	9b07      	ldr	r3, [sp, #28]
   b6f14:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6f16:	2b00      	cmp	r3, #0
   b6f18:	d1f5      	bne.n	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6f1a:	6853      	ldr	r3, [r2, #4]
   b6f1c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6f1e:	7813      	ldrb	r3, [r2, #0]
   b6f20:	079c      	lsls	r4, r3, #30
   b6f22:	bf1f      	itttt	ne
   b6f24:	9b05      	ldrne	r3, [sp, #20]
   b6f26:	330c      	addne	r3, #12
   b6f28:	220d      	movne	r2, #13
   b6f2a:	fbb3 f3f2 	udivne	r3, r3, r2
   b6f2e:	bf1a      	itte	ne
   b6f30:	3301      	addne	r3, #1
   b6f32:	b2db      	uxtbne	r3, r3
   b6f34:	2301      	moveq	r3, #1
    seekSet(0);
   b6f36:	2100      	movs	r1, #0
   b6f38:	4628      	mov	r0, r5
   b6f3a:	9303      	str	r3, [sp, #12]
   b6f3c:	f000 fb24 	bl	b7588 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6f40:	f107 030d 	add.w	r3, r7, #13
  }
   b6f44:	f04f 0b00 	mov.w	fp, #0
   b6f48:	ee08 3a10 	vmov	s16, r3
   b6f4c:	46da      	mov	sl, fp
   b6f4e:	465c      	mov	r4, fp
   b6f50:	465e      	mov	r6, fp
   b6f52:	f8cd b010 	str.w	fp, [sp, #16]
   b6f56:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6f58:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6f5a:	2101      	movs	r1, #1
   b6f5c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6f5e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6f62:	f000 faf2 	bl	b754a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6f66:	4603      	mov	r3, r0
   b6f68:	2800      	cmp	r0, #0
   b6f6a:	d171      	bne.n	b7050 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6f6c:	786b      	ldrb	r3, [r5, #1]
   b6f6e:	2b00      	cmp	r3, #0
   b6f70:	d1c9      	bne.n	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6f72:	9b06      	ldr	r3, [sp, #24]
   b6f74:	059a      	lsls	r2, r3, #22
   b6f76:	d5c6      	bpl.n	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6f78:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6f7c:	3b01      	subs	r3, #1
   b6f7e:	2b01      	cmp	r3, #1
   b6f80:	d8c1      	bhi.n	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6f82:	9b04      	ldr	r3, [sp, #16]
   b6f84:	2c00      	cmp	r4, #0
   b6f86:	bf08      	it	eq
   b6f88:	4643      	moveq	r3, r8
   b6f8a:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6f8c:	9b03      	ldr	r3, [sp, #12]
   b6f8e:	429c      	cmp	r4, r3
   b6f90:	f0c0 80f1 	bcc.w	b7176 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6f94:	f1b9 0f00 	cmp.w	r9, #0
   b6f98:	f040 810a 	bne.w	b71b0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6f9c:	9b04      	ldr	r3, [sp, #16]
   b6f9e:	4628      	mov	r0, r5
   b6fa0:	0159      	lsls	r1, r3, #5
   b6fa2:	f000 faf1 	bl	b7588 <_ZN7FatFile7seekSetEm>
   b6fa6:	2800      	cmp	r0, #0
   b6fa8:	d0ad      	beq.n	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6faa:	9b03      	ldr	r3, [sp, #12]
   b6fac:	f103 39ff 	add.w	r9, r3, #4294967295
   b6fb0:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6fb4:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6fb6:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6fba:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6fbe:	2e00      	cmp	r6, #0
   b6fc0:	f000 810d 	beq.w	b71de <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6fc4:	2100      	movs	r1, #0
   b6fc6:	4628      	mov	r0, r5
   b6fc8:	f000 fabf 	bl	b754a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6fcc:	4604      	mov	r4, r0
   b6fce:	2800      	cmp	r0, #0
   b6fd0:	d099      	beq.n	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6fd2:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6fd4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6fd8:	454e      	cmp	r6, r9
   b6fda:	f043 0301 	orr.w	r3, r3, #1
   b6fde:	bf0c      	ite	eq
   b6fe0:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6fe4:	46b3      	movne	fp, r6
   b6fe6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6fea:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6fee:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6ff2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6ff6:	f107 000d 	add.w	r0, r7, #13
   b6ffa:	f7ff fdb0 	bl	b6b5e <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6ffe:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7002:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b7004:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7008:	f00b 031f 	and.w	r3, fp, #31
   b700c:	220d      	movs	r2, #13
   b700e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b7010:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7014:	4353      	muls	r3, r2
   b7016:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7018:	9905      	ldr	r1, [sp, #20]
   b701a:	4299      	cmp	r1, r3
   b701c:	f240 80d0 	bls.w	b71c0 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7020:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7024:	2a04      	cmp	r2, #4
   b7026:	fa5f fe82 	uxtb.w	lr, r2
   b702a:	f102 0001 	add.w	r0, r2, #1
   b702e:	f200 80cd 	bhi.w	b71cc <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7032:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7036:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b703a:	280d      	cmp	r0, #13
   b703c:	f103 0301 	add.w	r3, r3, #1
   b7040:	4602      	mov	r2, r0
   b7042:	d1e9      	bne.n	b7018 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7044:	3e01      	subs	r6, #1
   b7046:	b2f6      	uxtb	r6, r6
   b7048:	e7b9      	b.n	b6fbe <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b704a:	f04f 0901 	mov.w	r9, #1
   b704e:	e783      	b.n	b6f58 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7050:	7802      	ldrb	r2, [r0, #0]
   b7052:	2ae5      	cmp	r2, #229	; 0xe5
   b7054:	d000      	beq.n	b7058 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7056:	b97a      	cbnz	r2, b7078 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7058:	9904      	ldr	r1, [sp, #16]
   b705a:	2c00      	cmp	r4, #0
   b705c:	bf08      	it	eq
   b705e:	4641      	moveq	r1, r8
   b7060:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7062:	9903      	ldr	r1, [sp, #12]
   b7064:	428c      	cmp	r4, r1
        freeFound++;
   b7066:	bf3c      	itt	cc
   b7068:	3401      	addcc	r4, #1
   b706a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b706c:	2a00      	cmp	r2, #0
   b706e:	d080      	beq.n	b6f72 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7070:	2ae5      	cmp	r2, #229	; 0xe5
   b7072:	d105      	bne.n	b7080 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7074:	2600      	movs	r6, #0
   b7076:	e76f      	b.n	b6f58 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7078:	9903      	ldr	r1, [sp, #12]
   b707a:	428c      	cmp	r4, r1
   b707c:	bf38      	it	cc
   b707e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7080:	2a2e      	cmp	r2, #46	; 0x2e
   b7082:	d0f7      	beq.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7084:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7086:	290f      	cmp	r1, #15
   b7088:	d14a      	bne.n	b7120 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b708a:	bb16      	cbnz	r6, b70d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b708c:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7090:	f43f af62 	beq.w	b6f58 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7094:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7098:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b709c:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b709e:	220d      	movs	r2, #13
   b70a0:	f10a 38ff 	add.w	r8, sl, #4294967295
   b70a4:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b70a8:	9a05      	ldr	r2, [sp, #20]
   b70aa:	4542      	cmp	r2, r8
   b70ac:	d9e2      	bls.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b70ae:	eba2 0208 	sub.w	r2, r2, r8
   b70b2:	9208      	str	r2, [sp, #32]
   b70b4:	2200      	movs	r2, #0
   b70b6:	eb02 0108 	add.w	r1, r2, r8
   b70ba:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b70bc:	4618      	mov	r0, r3
   b70be:	b2d1      	uxtb	r1, r2
   b70c0:	f7ff fd2c 	bl	b6b1c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b70c4:	9908      	ldr	r1, [sp, #32]
   b70c6:	428a      	cmp	r2, r1
   b70c8:	d10d      	bne.n	b70e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b70ca:	2800      	cmp	r0, #0
   b70cc:	bf18      	it	ne
   b70ce:	2600      	movne	r6, #0
   b70d0:	e742      	b.n	b6f58 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b70d2:	f10a 3aff 	add.w	sl, sl, #4294967295
   b70d6:	fa5f fa8a 	uxtb.w	sl, sl
   b70da:	4552      	cmp	r2, sl
   b70dc:	d1ca      	bne.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b70de:	7b5a      	ldrb	r2, [r3, #13]
   b70e0:	455a      	cmp	r2, fp
   b70e2:	d0dc      	beq.n	b709e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b70e4:	e7c6      	b.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b70e6:	28ff      	cmp	r0, #255	; 0xff
   b70e8:	d8c4      	bhi.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b70ea:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b70ee:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b70f2:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b70f4:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b70f6:	bf9c      	itt	ls
   b70f8:	f10e 0020 	addls.w	r0, lr, #32
   b70fc:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7100:	4608      	mov	r0, r1
   b7102:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7104:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7106:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b710a:	f1bc 0f19 	cmp.w	ip, #25
   b710e:	bf9c      	itt	ls
   b7110:	3120      	addls	r1, #32
   b7112:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7114:	4571      	cmp	r1, lr
   b7116:	d1ad      	bne.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7118:	3201      	adds	r2, #1
   b711a:	2a0d      	cmp	r2, #13
   b711c:	d1cb      	bne.n	b70b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b711e:	e71b      	b.n	b6f58 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7120:	0708      	lsls	r0, r1, #28
   b7122:	d4a7      	bmi.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7124:	b15e      	cbz	r6, b713e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7126:	f1ba 0f01 	cmp.w	sl, #1
   b712a:	f47f aeec 	bne.w	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b712e:	4618      	mov	r0, r3
   b7130:	f7ff fd15 	bl	b6b5e <_ZN7FatFile11lfnChecksumEPh>
   b7134:	4558      	cmp	r0, fp
   b7136:	f47f aee6 	bne.w	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b713a:	46b1      	mov	r9, r6
   b713c:	e00e      	b.n	b715c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b713e:	ee18 1a10 	vmov	r1, s16
   b7142:	220b      	movs	r2, #11
   b7144:	4618      	mov	r0, r3
   b7146:	f00d fa2f 	bl	c45a8 <memcmp>
   b714a:	2800      	cmp	r0, #0
   b714c:	f47f af04 	bne.w	b6f58 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7150:	f897 9000 	ldrb.w	r9, [r7]
   b7154:	f019 0901 	ands.w	r9, r9, #1
   b7158:	f47f af77 	bne.w	b704a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b715c:	9b06      	ldr	r3, [sp, #24]
   b715e:	0519      	lsls	r1, r3, #20
   b7160:	f53f aed1 	bmi.w	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7164:	9b06      	ldr	r3, [sp, #24]
   b7166:	9807      	ldr	r0, [sp, #28]
   b7168:	f8cd 9000 	str.w	r9, [sp]
   b716c:	4642      	mov	r2, r8
   b716e:	4629      	mov	r1, r5
   b7170:	f000 fa4d 	bl	b760e <_ZN7FatFile15openCachedEntryEPS_tih>
   b7174:	e6c8      	b.n	b6f08 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7176:	2100      	movs	r1, #0
   b7178:	4628      	mov	r0, r5
   b717a:	f000 f9e6 	bl	b754a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b717e:	b9a0      	cbnz	r0, b71aa <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7180:	786b      	ldrb	r3, [r5, #1]
   b7182:	2b00      	cmp	r3, #0
   b7184:	f47f aebf 	bne.w	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7188:	4628      	mov	r0, r5
   b718a:	f000 f89f 	bl	b72cc <_ZN7FatFile13addDirClusterEv>
   b718e:	2800      	cmp	r0, #0
   b7190:	f43f aeb9 	beq.w	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7194:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b7196:	791b      	ldrb	r3, [r3, #4]
   b7198:	2b01      	cmp	r3, #1
   b719a:	f63f aefb 	bhi.w	b6f94 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b719e:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b71a0:	3410      	adds	r4, #16
   b71a2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b71a4:	42a3      	cmp	r3, r4
   b71a6:	d8ef      	bhi.n	b7188 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b71a8:	e6f4      	b.n	b6f94 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b71aa:	3401      	adds	r4, #1
   b71ac:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b71ae:	e6ed      	b.n	b6f8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b71b0:	4639      	mov	r1, r7
   b71b2:	4628      	mov	r0, r5
   b71b4:	f7ff fe46 	bl	b6e44 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b71b8:	2800      	cmp	r0, #0
   b71ba:	f47f aeef 	bne.w	b6f9c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b71be:	e6a2      	b.n	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b71c0:	bf14      	ite	ne
   b71c2:	f04f 31ff 	movne.w	r1, #4294967295
   b71c6:	2100      	moveq	r1, #0
   b71c8:	b289      	uxth	r1, r1
   b71ca:	e72b      	b.n	b7024 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b71cc:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b71d0:	bf94      	ite	ls
   b71d2:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b71d6:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b71da:	8091      	strh	r1, [r2, #4]
   b71dc:	e72d      	b.n	b703a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b71de:	4631      	mov	r1, r6
   b71e0:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b71e2:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b71e6:	f000 f9b0 	bl	b754a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b71ea:	4604      	mov	r4, r0
   b71ec:	2800      	cmp	r0, #0
   b71ee:	f43f ae8a 	beq.w	b6f06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b71f2:	2220      	movs	r2, #32
   b71f4:	4631      	mov	r1, r6
   b71f6:	f00d fa0f 	bl	c4618 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b71fa:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b71fe:	6023      	str	r3, [r4, #0]
   b7200:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7204:	6063      	str	r3, [r4, #4]
   b7206:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b720a:	8123      	strh	r3, [r4, #8]
   b720c:	7dfb      	ldrb	r3, [r7, #23]
   b720e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7210:	783b      	ldrb	r3, [r7, #0]
   b7212:	f003 0318 	and.w	r3, r3, #24
   b7216:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7218:	4b0f      	ldr	r3, [pc, #60]	; (b7258 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b721a:	681b      	ldr	r3, [r3, #0]
   b721c:	b19b      	cbz	r3, b7246 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b721e:	f104 010e 	add.w	r1, r4, #14
   b7222:	f104 0010 	add.w	r0, r4, #16
   b7226:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7228:	8a23      	ldrh	r3, [r4, #16]
   b722a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b722c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b722e:	89e3      	ldrh	r3, [r4, #14]
   b7230:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7232:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7234:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7238:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b723c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7240:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b7244:	e78e      	b.n	b7164 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7246:	2321      	movs	r3, #33	; 0x21
   b7248:	7423      	strb	r3, [r4, #16]
   b724a:	2328      	movs	r3, #40	; 0x28
   b724c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b724e:	2308      	movs	r3, #8
   b7250:	73a6      	strb	r6, [r4, #14]
   b7252:	73e3      	strb	r3, [r4, #15]
   b7254:	e7e8      	b.n	b7228 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7256:	bf00      	nop
   b7258:	2003e60c 	.word	0x2003e60c

000b725c <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b725c:	b510      	push	{r4, lr}
   b725e:	460c      	mov	r4, r1
    return m_attr;
   b7260:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b7262:	b909      	cbnz	r1, b7268 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b7264:	2000      	movs	r0, #0
}
   b7266:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b7268:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b726c:	d005      	beq.n	b727a <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b726e:	232f      	movs	r3, #47	; 0x2f
   b7270:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b7272:	2300      	movs	r3, #0
   b7274:	7063      	strb	r3, [r4, #1]
  return true;
   b7276:	2001      	movs	r0, #1
   b7278:	e7f5      	b.n	b7266 <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b727a:	f000 f865 	bl	b7348 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b727e:	2800      	cmp	r0, #0
   b7280:	d0f0      	beq.n	b7264 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b7282:	4621      	mov	r1, r4
   b7284:	f000 f86f 	bl	b7366 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b7288:	e7f5      	b.n	b7276 <_ZN7FatFile6getSFNEPc+0x1a>

000b728a <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b728a:	b538      	push	{r3, r4, r5, lr}
   b728c:	4604      	mov	r4, r0
   b728e:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b7290:	2224      	movs	r2, #36	; 0x24
   b7292:	2100      	movs	r1, #0
   b7294:	f00d f9c0 	bl	c4618 <memset>

  m_vol = vol;
   b7298:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b729a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b729c:	2b10      	cmp	r3, #16
   b729e:	d003      	beq.n	b72a8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b72a0:	2b20      	cmp	r3, #32
   b72a2:	d006      	beq.n	b72b2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b72a4:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b72a6:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b72a8:	2320      	movs	r3, #32
  m_flags = F_READ;
   b72aa:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b72ac:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b72ae:	70a0      	strb	r0, [r4, #2]
  return true;
   b72b0:	e7f9      	b.n	b72a6 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b72b2:	2340      	movs	r3, #64	; 0x40
   b72b4:	e7f9      	b.n	b72aa <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b72b6 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b72b6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b72b8:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b72ba:	f043 0304 	orr.w	r3, r3, #4
   b72be:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b72c0:	f100 0210 	add.w	r2, r0, #16
   b72c4:	6880      	ldr	r0, [r0, #8]
   b72c6:	f000 bc61 	b.w	b7b8c <_ZN9FatVolume15allocateClusterEmPm>
	...

000b72cc <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b72cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b72d0:	7801      	ldrb	r1, [r0, #0]
   b72d2:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b72d6:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b72d8:	d003      	beq.n	b72e2 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b72da:	2600      	movs	r6, #0
}
   b72dc:	4630      	mov	r0, r6
   b72de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b72e2:	6942      	ldr	r2, [r0, #20]
   b72e4:	4b17      	ldr	r3, [pc, #92]	; (b7344 <_ZN7FatFile13addDirClusterEv+0x78>)
   b72e6:	429a      	cmp	r2, r3
   b72e8:	d2f7      	bcs.n	b72da <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b72ea:	f7ff ffe4 	bl	b72b6 <_ZN7FatFile10addClusterEv>
   b72ee:	4606      	mov	r6, r0
   b72f0:	2800      	cmp	r0, #0
   b72f2:	d0f2      	beq.n	b72da <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b72f4:	6921      	ldr	r1, [r4, #16]
   b72f6:	68a0      	ldr	r0, [r4, #8]
   b72f8:	f000 fbdd 	bl	b7ab6 <_ZNK9FatVolume17clusterFirstBlockEm>
   b72fc:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b72fe:	68a0      	ldr	r0, [r4, #8]
   b7300:	2205      	movs	r2, #5
   b7302:	4639      	mov	r1, r7
   b7304:	3024      	adds	r0, #36	; 0x24
   b7306:	f000 fbb3 	bl	b7a70 <_ZN8FatCache4readEmh>
  if (!pc) {
   b730a:	4680      	mov	r8, r0
   b730c:	2800      	cmp	r0, #0
   b730e:	d0e4      	beq.n	b72da <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b7310:	4629      	mov	r1, r5
   b7312:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7316:	f00d f97f 	bl	c4618 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b731a:	2501      	movs	r5, #1
   b731c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b731e:	791a      	ldrb	r2, [r3, #4]
   b7320:	42aa      	cmp	r2, r5
   b7322:	d909      	bls.n	b7338 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b7324:	6818      	ldr	r0, [r3, #0]
   b7326:	4642      	mov	r2, r8
   b7328:	19e9      	adds	r1, r5, r7
   b732a:	f000 ff0e 	bl	b814a <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b732e:	2800      	cmp	r0, #0
   b7330:	d0d3      	beq.n	b72da <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b7332:	3501      	adds	r5, #1
   b7334:	b2ed      	uxtb	r5, r5
   b7336:	e7f1      	b.n	b731c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b7338:	6963      	ldr	r3, [r4, #20]
   b733a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b733e:	6163      	str	r3, [r4, #20]
  return true;
   b7340:	e7cc      	b.n	b72dc <_ZN7FatFile13addDirClusterEv+0x10>
   b7342:	bf00      	nop
   b7344:	001ffe00 	.word	0x001ffe00

000b7348 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b7348:	b510      	push	{r4, lr}
   b734a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b734c:	6880      	ldr	r0, [r0, #8]
   b734e:	460a      	mov	r2, r1
   b7350:	3024      	adds	r0, #36	; 0x24
   b7352:	69a1      	ldr	r1, [r4, #24]
   b7354:	f000 fb8c 	bl	b7a70 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7358:	b120      	cbz	r0, b7364 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b735a:	88a3      	ldrh	r3, [r4, #4]
   b735c:	f003 030f 	and.w	r3, r3, #15
   b7360:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b7364:	bd10      	pop	{r4, pc}

000b7366 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b7366:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b7368:	b5f0      	push	{r4, r5, r6, r7, lr}
   b736a:	4604      	mov	r4, r0
   b736c:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b736e:	2608      	movs	r6, #8
  uint8_t j = 0;
   b7370:	4618      	mov	r0, r3
      name[j++] = '.';
   b7372:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b7374:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b7378:	2a20      	cmp	r2, #32
   b737a:	d018      	beq.n	b73ae <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b737c:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b737e:	bf02      	ittt	eq
   b7380:	540f      	strbeq	r7, [r1, r0]
   b7382:	1c42      	addeq	r2, r0, #1
   b7384:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b7386:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b7388:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b738c:	bf08      	it	eq
   b738e:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b7390:	f1bc 0f19 	cmp.w	ip, #25
   b7394:	d806      	bhi.n	b73a4 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b7396:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b739a:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b739e:	bf1c      	itt	ne
   b73a0:	3220      	addne	r2, #32
   b73a2:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b73a4:	f100 0c01 	add.w	ip, r0, #1
   b73a8:	540a      	strb	r2, [r1, r0]
   b73aa:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b73ae:	3301      	adds	r3, #1
   b73b0:	b2db      	uxtb	r3, r3
   b73b2:	2b0b      	cmp	r3, #11
   b73b4:	d1de      	bne.n	b7374 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b73b6:	2300      	movs	r3, #0
   b73b8:	540b      	strb	r3, [r1, r0]
}
   b73ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b73bc <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b73bc:	7803      	ldrb	r3, [r0, #0]
   b73be:	b90b      	cbnz	r3, b73c4 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b73c0:	f7ff bf63 	b.w	b728a <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b73c4:	2000      	movs	r0, #0
   b73c6:	4770      	bx	lr

000b73c8 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b73c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b73cc:	7803      	ldrb	r3, [r0, #0]
   b73ce:	4604      	mov	r4, r0
   b73d0:	4688      	mov	r8, r1
   b73d2:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b73d4:	2b00      	cmp	r3, #0
   b73d6:	d05d      	beq.n	b7494 <_ZN7FatFile4readEPvj+0xcc>
   b73d8:	7882      	ldrb	r2, [r0, #2]
   b73da:	07d1      	lsls	r1, r2, #31
   b73dc:	d55a      	bpl.n	b7494 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b73de:	071a      	lsls	r2, r3, #28
   b73e0:	d52d      	bpl.n	b743e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b73e2:	69c3      	ldr	r3, [r0, #28]
   b73e4:	6942      	ldr	r2, [r0, #20]
   b73e6:	1a9b      	subs	r3, r3, r2
   b73e8:	429d      	cmp	r5, r3
   b73ea:	bf28      	it	cs
   b73ec:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b73ee:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b73f0:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b73f4:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b73f8:	2e00      	cmp	r6, #0
   b73fa:	f000 808f 	beq.w	b751c <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b73fe:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b7400:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7402:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b7404:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b7406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b740a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b740e:	d51f      	bpl.n	b7450 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7410:	6a00      	ldr	r0, [r0, #32]
   b7412:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b7414:	68a0      	ldr	r0, [r4, #8]
   b7416:	f1ba 0f00 	cmp.w	sl, #0
   b741a:	d142      	bne.n	b74a2 <_ZN7FatFile4readEPvj+0xda>
   b741c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7420:	d33f      	bcc.n	b74a2 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b7422:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7424:	4299      	cmp	r1, r3
   b7426:	d03c      	beq.n	b74a2 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b7428:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b742c:	d252      	bcs.n	b74d4 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b742e:	6800      	ldr	r0, [r0, #0]
   b7430:	4642      	mov	r2, r8
   b7432:	f000 fe01 	bl	b8038 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b7436:	b368      	cbz	r0, b7494 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b7438:	f44f 7700 	mov.w	r7, #512	; 0x200
   b743c:	e044      	b.n	b74c8 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b743e:	069b      	lsls	r3, r3, #26
   b7440:	d5d5      	bpl.n	b73ee <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b7442:	6883      	ldr	r3, [r0, #8]
   b7444:	891a      	ldrh	r2, [r3, #8]
   b7446:	6943      	ldr	r3, [r0, #20]
   b7448:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b744c:	b29b      	uxth	r3, r3
   b744e:	e7cb      	b.n	b73e8 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b7450:	f890 9005 	ldrb.w	r9, [r0, #5]
   b7454:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b7458:	f1ba 0f00 	cmp.w	sl, #0
   b745c:	d108      	bne.n	b7470 <_ZN7FatFile4readEPvj+0xa8>
   b745e:	f1b9 0f00 	cmp.w	r9, #0
   b7462:	d105      	bne.n	b7470 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b7464:	b95b      	cbnz	r3, b747e <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b7466:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b7468:	bf4c      	ite	mi
   b746a:	6a03      	ldrmi	r3, [r0, #32]
   b746c:	6a23      	ldrpl	r3, [r4, #32]
   b746e:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b7470:	6921      	ldr	r1, [r4, #16]
   b7472:	68a0      	ldr	r0, [r4, #8]
   b7474:	f000 fb1f 	bl	b7ab6 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7478:	eb09 0100 	add.w	r1, r9, r0
   b747c:	e7ca      	b.n	b7414 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b747e:	6921      	ldr	r1, [r4, #16]
   b7480:	465a      	mov	r2, fp
   b7482:	f000 fb1e 	bl	b7ac2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b7486:	2800      	cmp	r0, #0
   b7488:	db04      	blt.n	b7494 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b748a:	d1f1      	bne.n	b7470 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b748c:	7823      	ldrb	r3, [r4, #0]
   b748e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7492:	d143      	bne.n	b751c <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b7494:	7863      	ldrb	r3, [r4, #1]
   b7496:	f043 0302 	orr.w	r3, r3, #2
   b749a:	7063      	strb	r3, [r4, #1]
  return -1;
   b749c:	f04f 30ff 	mov.w	r0, #4294967295
   b74a0:	e03d      	b.n	b751e <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b74a2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b74a6:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b74a8:	f04f 0200 	mov.w	r2, #0
   b74ac:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b74b0:	bf28      	it	cs
   b74b2:	4637      	movcs	r7, r6
   b74b4:	f000 fadc 	bl	b7a70 <_ZN8FatCache4readEmh>
      if (!pc) {
   b74b8:	2800      	cmp	r0, #0
   b74ba:	d0eb      	beq.n	b7494 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b74bc:	eb00 010a 	add.w	r1, r0, sl
   b74c0:	463a      	mov	r2, r7
   b74c2:	4640      	mov	r0, r8
   b74c4:	f00d f880 	bl	c45c8 <memcpy>
    m_curPosition += n;
   b74c8:	6963      	ldr	r3, [r4, #20]
   b74ca:	443b      	add	r3, r7
    dst += n;
   b74cc:	44b8      	add	r8, r7
    m_curPosition += n;
   b74ce:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b74d0:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b74d2:	e791      	b.n	b73f8 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b74d4:	7822      	ldrb	r2, [r4, #0]
   b74d6:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b74d8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b74dc:	d406      	bmi.n	b74ec <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b74de:	7902      	ldrb	r2, [r0, #4]
   b74e0:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b74e4:	b2d2      	uxtb	r2, r2
   b74e6:	4592      	cmp	sl, r2
   b74e8:	bf28      	it	cs
   b74ea:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b74ec:	4299      	cmp	r1, r3
      n = 512*nb;
   b74ee:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b74f2:	d208      	bcs.n	b7506 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b74f4:	68a0      	ldr	r0, [r4, #8]
   b74f6:	4653      	mov	r3, sl
   b74f8:	6800      	ldr	r0, [r0, #0]
   b74fa:	4642      	mov	r2, r8
   b74fc:	f000 fde4 	bl	b80c8 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b7500:	2800      	cmp	r0, #0
   b7502:	d1e1      	bne.n	b74c8 <_ZN7FatFile4readEPvj+0x100>
   b7504:	e7c6      	b.n	b7494 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7506:	4453      	add	r3, sl
   b7508:	428b      	cmp	r3, r1
   b750a:	d9f3      	bls.n	b74f4 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b750c:	3024      	adds	r0, #36	; 0x24
   b750e:	9101      	str	r1, [sp, #4]
   b7510:	f000 fa86 	bl	b7a20 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b7514:	9901      	ldr	r1, [sp, #4]
   b7516:	2800      	cmp	r0, #0
   b7518:	d1ec      	bne.n	b74f4 <_ZN7FatFile4readEPvj+0x12c>
   b751a:	e7bb      	b.n	b7494 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b751c:	1ba8      	subs	r0, r5, r6
}
   b751e:	b003      	add	sp, #12
   b7520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7524 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b7524:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b7526:	2201      	movs	r2, #1
   b7528:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b752c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b7530:	4604      	mov	r4, r0
   b7532:	f7ff ff49 	bl	b73c8 <_ZN7FatFile4readEPvj>
   b7536:	2801      	cmp	r0, #1
   b7538:	bf0a      	itet	eq
   b753a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b753e:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b7542:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b7546:	b002      	add	sp, #8
   b7548:	bd70      	pop	{r4, r5, r6, pc}

000b754a <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b754a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b754c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b754e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b7552:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b7554:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b7558:	d000      	beq.n	b755c <_ZN7FatFile12readDirCacheEb+0x12>
   b755a:	b999      	cbnz	r1, b7584 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b755c:	2201      	movs	r2, #1
   b755e:	f10d 0107 	add.w	r1, sp, #7
   b7562:	4620      	mov	r0, r4
   b7564:	f7ff ff30 	bl	b73c8 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b7568:	b240      	sxtb	r0, r0
   b756a:	2801      	cmp	r0, #1
   b756c:	d002      	beq.n	b7574 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b756e:	2000      	movs	r0, #0
}
   b7570:	b003      	add	sp, #12
   b7572:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b7574:	6963      	ldr	r3, [r4, #20]
   b7576:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b7578:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b757a:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b757c:	3030      	adds	r0, #48	; 0x30
   b757e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b7582:	e7f5      	b.n	b7570 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b7584:	3320      	adds	r3, #32
   b7586:	e7f7      	b.n	b7578 <_ZN7FatFile12readDirCacheEb+0x2e>

000b7588 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b7588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b758c:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b758e:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b7590:	4604      	mov	r4, r0
   b7592:	460d      	mov	r5, r1
  if (!isOpen()) {
   b7594:	b162      	cbz	r2, b75b0 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b7596:	6940      	ldr	r0, [r0, #20]
   b7598:	4288      	cmp	r0, r1
   b759a:	d002      	beq.n	b75a2 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b759c:	b919      	cbnz	r1, b75a6 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b759e:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b75a0:	6165      	str	r5, [r4, #20]
    return true;
   b75a2:	2001      	movs	r0, #1
   b75a4:	e006      	b.n	b75b4 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b75a6:	0716      	lsls	r6, r2, #28
   b75a8:	d506      	bpl.n	b75b8 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b75aa:	69e3      	ldr	r3, [r4, #28]
   b75ac:	428b      	cmp	r3, r1
   b75ae:	d20b      	bcs.n	b75c8 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b75b0:	6127      	str	r7, [r4, #16]
  return false;
   b75b2:	2000      	movs	r0, #0
}
   b75b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b75b8:	0691      	lsls	r1, r2, #26
   b75ba:	d505      	bpl.n	b75c8 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b75bc:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b75be:	891b      	ldrh	r3, [r3, #8]
   b75c0:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b75c4:	d9ec      	bls.n	b75a0 <_ZN7FatFile7seekSetEm+0x18>
   b75c6:	e7f3      	b.n	b75b0 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b75c8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b75cc:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b75d0:	1e43      	subs	r3, r0, #1
   b75d2:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b75d6:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b75d8:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b75da:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b75dc:	42b3      	cmp	r3, r6
   b75de:	d800      	bhi.n	b75e2 <_ZN7FatFile7seekSetEm+0x5a>
   b75e0:	b998      	cbnz	r0, b760a <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b75e2:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b75e4:	bf4c      	ite	mi
   b75e6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b75ea:	6a23      	ldrpl	r3, [r4, #32]
   b75ec:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b75ee:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b75f2:	2e00      	cmp	r6, #0
   b75f4:	d0d4      	beq.n	b75a0 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b75f6:	6921      	ldr	r1, [r4, #16]
   b75f8:	68a0      	ldr	r0, [r4, #8]
   b75fa:	4642      	mov	r2, r8
   b75fc:	f000 fa61 	bl	b7ac2 <_ZN9FatVolume6fatGetEmPm>
   b7600:	2800      	cmp	r0, #0
   b7602:	f106 36ff 	add.w	r6, r6, #4294967295
   b7606:	dcf4      	bgt.n	b75f2 <_ZN7FatFile7seekSetEm+0x6a>
   b7608:	e7d2      	b.n	b75b0 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b760a:	1af6      	subs	r6, r6, r3
   b760c:	e7ef      	b.n	b75ee <_ZN7FatFile7seekSetEm+0x66>

000b760e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b760e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7610:	460f      	mov	r7, r1
   b7612:	4604      	mov	r4, r0
   b7614:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7616:	2100      	movs	r1, #0
   b7618:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b761a:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b761c:	f00c fffc 	bl	c4618 <memset>
  m_vol = dirFile->m_vol;
   b7620:	68b8      	ldr	r0, [r7, #8]
   b7622:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b7624:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b7626:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b762a:	6a3b      	ldr	r3, [r7, #32]
   b762c:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b762e:	016a      	lsls	r2, r5, #5
   b7630:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b7634:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7638:	071f      	lsls	r7, r3, #28
   b763a:	d444      	bmi.n	b76c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b763c:	f003 0317 	and.w	r3, r3, #23
   b7640:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b7642:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b7646:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b764a:	bf04      	itt	eq
   b764c:	f043 0308 	orreq.w	r3, r3, #8
   b7650:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b7652:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b7656:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b7658:	f006 0303 	and.w	r3, r6, #3
   b765c:	2b01      	cmp	r3, #1
   b765e:	d02c      	beq.n	b76ba <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b7660:	2b02      	cmp	r3, #2
   b7662:	d028      	beq.n	b76b6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b7664:	bb7b      	cbnz	r3, b76c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b7666:	0571      	lsls	r1, r6, #21
   b7668:	d42d      	bmi.n	b76c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b766a:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b766c:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b766e:	78a1      	ldrb	r1, [r4, #2]
   b7670:	078b      	lsls	r3, r1, #30
   b7672:	d504      	bpl.n	b767e <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b7674:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b7676:	06df      	lsls	r7, r3, #27
   b7678:	d425      	bmi.n	b76c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b767a:	07dd      	lsls	r5, r3, #31
   b767c:	d423      	bmi.n	b76c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b767e:	11b3      	asrs	r3, r6, #6
   b7680:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b7684:	f006 0508 	and.w	r5, r6, #8
   b7688:	432b      	orrs	r3, r5
   b768a:	430b      	orrs	r3, r1
   b768c:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b768e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b7690:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b7692:	1883      	adds	r3, r0, r2
   b7694:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b7698:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b769c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b76a0:	0572      	lsls	r2, r6, #21
   b76a2:	d513      	bpl.n	b76cc <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b76a4:	b959      	cbnz	r1, b76be <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b76a6:	78a3      	ldrb	r3, [r4, #2]
   b76a8:	f043 0304 	orr.w	r3, r3, #4
   b76ac:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b76ae:	0473      	lsls	r3, r6, #17
   b76b0:	d410      	bmi.n	b76d4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b76b2:	2001      	movs	r0, #1
}
   b76b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b76b6:	2303      	movs	r3, #3
   b76b8:	e7d8      	b.n	b766c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b76ba:	2302      	movs	r3, #2
   b76bc:	e7d6      	b.n	b766c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b76be:	f000 faa0 	bl	b7c02 <_ZN9FatVolume9freeChainEm>
   b76c2:	2800      	cmp	r0, #0
   b76c4:	d1ef      	bne.n	b76a6 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b76c6:	2000      	movs	r0, #0
   b76c8:	7020      	strb	r0, [r4, #0]
  return false;
   b76ca:	e7f3      	b.n	b76b4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b76cc:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b76ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b76d0:	61e3      	str	r3, [r4, #28]
   b76d2:	e7ec      	b.n	b76ae <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b76d4:	69e1      	ldr	r1, [r4, #28]
   b76d6:	4620      	mov	r0, r4
   b76d8:	f7ff ff56 	bl	b7588 <_ZN7FatFile7seekSetEm>
   b76dc:	2800      	cmp	r0, #0
   b76de:	d1e8      	bne.n	b76b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b76e0:	e7f1      	b.n	b76c6 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b76e2 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b76e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b76e6:	7803      	ldrb	r3, [r0, #0]
   b76e8:	4607      	mov	r7, r0
   b76ea:	460d      	mov	r5, r1
   b76ec:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b76ee:	bb53      	cbnz	r3, b7746 <_ZN7FatFile8openNextEPS_i+0x64>
   b76f0:	780b      	ldrb	r3, [r1, #0]
   b76f2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b76f6:	d026      	beq.n	b7746 <_ZN7FatFile8openNextEPS_i+0x64>
   b76f8:	694c      	ldr	r4, [r1, #20]
   b76fa:	f014 041f 	ands.w	r4, r4, #31
   b76fe:	d122      	bne.n	b7746 <_ZN7FatFile8openNextEPS_i+0x64>
   b7700:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b7702:	2100      	movs	r1, #0
   b7704:	4628      	mov	r0, r5
    return m_curPosition;
   b7706:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b770a:	f7ff ff1e 	bl	b754a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b770e:	b1d0      	cbz	r0, b7746 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b7710:	7806      	ldrb	r6, [r0, #0]
   b7712:	b1c6      	cbz	r6, b7746 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b7714:	2e2e      	cmp	r6, #46	; 0x2e
   b7716:	d010      	beq.n	b773a <_ZN7FatFile8openNextEPS_i+0x58>
   b7718:	2ee5      	cmp	r6, #229	; 0xe5
   b771a:	d00e      	beq.n	b773a <_ZN7FatFile8openNextEPS_i+0x58>
   b771c:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b771e:	071a      	lsls	r2, r3, #28
   b7720:	d413      	bmi.n	b774a <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b7722:	b964      	cbnz	r4, b773e <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b7724:	9400      	str	r4, [sp, #0]
   b7726:	4653      	mov	r3, sl
   b7728:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b772c:	4629      	mov	r1, r5
   b772e:	4638      	mov	r0, r7
   b7730:	f7ff ff6d 	bl	b760e <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b7734:	b002      	add	sp, #8
   b7736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b773a:	2400      	movs	r4, #0
   b773c:	e7e1      	b.n	b7702 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b773e:	f7ff fa0e 	bl	b6b5e <_ZN7FatFile11lfnChecksumEPh>
   b7742:	4540      	cmp	r0, r8
   b7744:	d0ee      	beq.n	b7724 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b7746:	2000      	movs	r0, #0
   b7748:	e7f4      	b.n	b7734 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b774a:	2b0f      	cmp	r3, #15
   b774c:	d1f5      	bne.n	b773a <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b774e:	0673      	lsls	r3, r6, #25
   b7750:	d5d7      	bpl.n	b7702 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b7752:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b7756:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b775a:	e7d2      	b.n	b7702 <_ZN7FatFile8openNextEPS_i+0x20>

000b775c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b775c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b775e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b7760:	4604      	mov	r4, r0
  if (!isOpen()) {
   b7762:	b90b      	cbnz	r3, b7768 <_ZN7FatFile4syncEv+0xc>
    return true;
   b7764:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b7766:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7768:	7883      	ldrb	r3, [r0, #2]
   b776a:	075a      	lsls	r2, r3, #29
   b776c:	d523      	bpl.n	b77b6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b776e:	2101      	movs	r1, #1
   b7770:	f7ff fdea 	bl	b7348 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7774:	4605      	mov	r5, r0
   b7776:	b928      	cbnz	r0, b7784 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7778:	7863      	ldrb	r3, [r4, #1]
   b777a:	f043 0301 	orr.w	r3, r3, #1
   b777e:	7063      	strb	r3, [r4, #1]
  return false;
   b7780:	2000      	movs	r0, #0
   b7782:	e7f0      	b.n	b7766 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7784:	7803      	ldrb	r3, [r0, #0]
   b7786:	2be5      	cmp	r3, #229	; 0xe5
   b7788:	d0f6      	beq.n	b7778 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b778a:	7823      	ldrb	r3, [r4, #0]
   b778c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b778e:	bf44      	itt	mi
   b7790:	69e3      	ldrmi	r3, [r4, #28]
   b7792:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b7794:	6a23      	ldr	r3, [r4, #32]
   b7796:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7798:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b779a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b779c:	4b09      	ldr	r3, [pc, #36]	; (b77c4 <_ZN7FatFile4syncEv+0x68>)
   b779e:	681b      	ldr	r3, [r3, #0]
   b77a0:	b12b      	cbz	r3, b77ae <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b77a2:	f100 0116 	add.w	r1, r0, #22
   b77a6:	3018      	adds	r0, #24
   b77a8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b77aa:	8b2b      	ldrh	r3, [r5, #24]
   b77ac:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b77ae:	78a3      	ldrb	r3, [r4, #2]
   b77b0:	f023 0304 	bic.w	r3, r3, #4
   b77b4:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b77b6:	68a0      	ldr	r0, [r4, #8]
   b77b8:	f7ff f9c4 	bl	b6b44 <_ZN9FatVolume9cacheSyncEv>
   b77bc:	2800      	cmp	r0, #0
   b77be:	d0db      	beq.n	b7778 <_ZN7FatFile4syncEv+0x1c>
   b77c0:	e7d0      	b.n	b7764 <_ZN7FatFile4syncEv+0x8>
   b77c2:	bf00      	nop
   b77c4:	2003e60c 	.word	0x2003e60c

000b77c8 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b77c8:	b510      	push	{r4, lr}
   b77ca:	4604      	mov	r4, r0
  bool rtn = sync();
   b77cc:	f7ff ffc6 	bl	b775c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b77d0:	2300      	movs	r3, #0
   b77d2:	7023      	strb	r3, [r4, #0]
}
   b77d4:	bd10      	pop	{r4, pc}

000b77d6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b77d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b77d8:	b093      	sub	sp, #76	; 0x4c
   b77da:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b77dc:	2300      	movs	r3, #0
   b77de:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b77e0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b77e2:	9201      	str	r2, [sp, #4]
   b77e4:	4606      	mov	r6, r0
   b77e6:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b77e8:	b113      	cbz	r3, b77f0 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b77ea:	2000      	movs	r0, #0
}
   b77ec:	b013      	add	sp, #76	; 0x4c
   b77ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b77f0:	780b      	ldrb	r3, [r1, #0]
   b77f2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b77f6:	d0f8      	beq.n	b77ea <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b77f8:	7813      	ldrb	r3, [r2, #0]
   b77fa:	2b2f      	cmp	r3, #47	; 0x2f
   b77fc:	d112      	bne.n	b7824 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b77fe:	9a01      	ldr	r2, [sp, #4]
   b7800:	7813      	ldrb	r3, [r2, #0]
   b7802:	2b2f      	cmp	r3, #47	; 0x2f
   b7804:	d102      	bne.n	b780c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b7806:	3201      	adds	r2, #1
   b7808:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b780a:	e7f8      	b.n	b77fe <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b780c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b780e:	b91b      	cbnz	r3, b7818 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b7810:	4630      	mov	r0, r6
   b7812:	f7ff fdd3 	bl	b73bc <_ZN7FatFile8openRootEP9FatVolume>
   b7816:	e7e9      	b.n	b77ec <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b7818:	a809      	add	r0, sp, #36	; 0x24
   b781a:	f7ff fd36 	bl	b728a <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b781e:	2800      	cmp	r0, #0
   b7820:	d0e3      	beq.n	b77ea <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b7822:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b7824:	9801      	ldr	r0, [sp, #4]
   b7826:	aa01      	add	r2, sp, #4
   b7828:	a903      	add	r1, sp, #12
   b782a:	f7ff fa2d 	bl	b6c88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b782e:	2800      	cmp	r0, #0
   b7830:	d0db      	beq.n	b77ea <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b7832:	9b01      	ldr	r3, [sp, #4]
   b7834:	781b      	ldrb	r3, [r3, #0]
   b7836:	b19b      	cbz	r3, b7860 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7838:	2300      	movs	r3, #0
   b783a:	aa03      	add	r2, sp, #12
   b783c:	4621      	mov	r1, r4
   b783e:	4630      	mov	r0, r6
   b7840:	f7ff fb54 	bl	b6eec <_ZN7FatFile4openEPS_P7fname_ti>
   b7844:	2800      	cmp	r0, #0
   b7846:	d0d0      	beq.n	b77ea <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7848:	4635      	mov	r5, r6
   b784a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b784c:	ac09      	add	r4, sp, #36	; 0x24
   b784e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7854:	682b      	ldr	r3, [r5, #0]
   b7856:	6023      	str	r3, [r4, #0]
    close();
   b7858:	4630      	mov	r0, r6
   b785a:	f7ff ffb5 	bl	b77c8 <_ZN7FatFile5closeEv>
  while (1) {
   b785e:	e7e0      	b.n	b7822 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b7860:	463b      	mov	r3, r7
   b7862:	aa03      	add	r2, sp, #12
   b7864:	4621      	mov	r1, r4
   b7866:	4630      	mov	r0, r6
   b7868:	f7ff fb40 	bl	b6eec <_ZN7FatFile4openEPS_P7fname_ti>
   b786c:	e7be      	b.n	b77ec <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b7870 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b7870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7874:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b7876:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7878:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b787a:	4604      	mov	r4, r0
   b787c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b787e:	d55b      	bpl.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
   b7880:	7883      	ldrb	r3, [r0, #2]
   b7882:	079a      	lsls	r2, r3, #30
   b7884:	d558      	bpl.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b7886:	071b      	lsls	r3, r3, #28
   b7888:	d451      	bmi.n	b792e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b788a:	6963      	ldr	r3, [r4, #20]
   b788c:	43db      	mvns	r3, r3
   b788e:	42bb      	cmp	r3, r7
   b7890:	d352      	bcc.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
   b7892:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7894:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7898:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b789a:	f1b8 0f00 	cmp.w	r8, #0
   b789e:	f000 8091 	beq.w	b79c4 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b78a2:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b78a4:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b78a6:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b78aa:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b78ae:	d10e      	bne.n	b78ce <_ZN7FatFile5writeEPKvj+0x5e>
   b78b0:	b96d      	cbnz	r5, b78ce <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b78b2:	6921      	ldr	r1, [r4, #16]
   b78b4:	2900      	cmp	r1, #0
   b78b6:	d046      	beq.n	b7946 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b78b8:	4652      	mov	r2, sl
   b78ba:	f000 f902 	bl	b7ac2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b78be:	2800      	cmp	r0, #0
   b78c0:	db3a      	blt.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b78c2:	d104      	bne.n	b78ce <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b78c4:	4620      	mov	r0, r4
   b78c6:	f7ff fcf6 	bl	b72b6 <_ZN7FatFile10addClusterEv>
   b78ca:	2800      	cmp	r0, #0
   b78cc:	d034      	beq.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b78ce:	6921      	ldr	r1, [r4, #16]
   b78d0:	68a0      	ldr	r0, [r4, #8]
   b78d2:	f000 f8f0 	bl	b7ab6 <_ZNK9FatVolume17clusterFirstBlockEm>
   b78d6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b78d8:	68a0      	ldr	r0, [r4, #8]
   b78da:	b915      	cbnz	r5, b78e2 <_ZN7FatFile5writeEPKvj+0x72>
   b78dc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b78e0:	d23f      	bcs.n	b7962 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b78e2:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b78e6:	4546      	cmp	r6, r8
   b78e8:	bf28      	it	cs
   b78ea:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b78ec:	2d00      	cmp	r5, #0
   b78ee:	d136      	bne.n	b795e <_ZN7FatFile5writeEPKvj+0xee>
   b78f0:	6962      	ldr	r2, [r4, #20]
   b78f2:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b78f4:	429a      	cmp	r2, r3
   b78f6:	bf34      	ite	cc
   b78f8:	2201      	movcc	r2, #1
   b78fa:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b78fc:	3024      	adds	r0, #36	; 0x24
   b78fe:	f000 f8b7 	bl	b7a70 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b7902:	b1c8      	cbz	r0, b7938 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7904:	4428      	add	r0, r5
   b7906:	4632      	mov	r2, r6
   b7908:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b790a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b790c:	f00c fe5c 	bl	c45c8 <memcpy>
      if (512 == (n + blockOffset)) {
   b7910:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b7914:	d104      	bne.n	b7920 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b7916:	68a0      	ldr	r0, [r4, #8]
   b7918:	3024      	adds	r0, #36	; 0x24
   b791a:	f000 f881 	bl	b7a20 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b791e:	b158      	cbz	r0, b7938 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b7920:	6963      	ldr	r3, [r4, #20]
   b7922:	4433      	add	r3, r6
   b7924:	6163      	str	r3, [r4, #20]
    src += n;
   b7926:	44b1      	add	r9, r6
    nToWrite -= n;
   b7928:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b792c:	e7b4      	b.n	b7898 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b792e:	69c1      	ldr	r1, [r0, #28]
   b7930:	f7ff fe2a 	bl	b7588 <_ZN7FatFile7seekSetEm>
   b7934:	2800      	cmp	r0, #0
   b7936:	d1a8      	bne.n	b788a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7938:	7863      	ldrb	r3, [r4, #1]
   b793a:	f043 0301 	orr.w	r3, r3, #1
   b793e:	7063      	strb	r3, [r4, #1]
  return -1;
   b7940:	f04f 30ff 	mov.w	r0, #4294967295
   b7944:	e050      	b.n	b79e8 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b7946:	6a23      	ldr	r3, [r4, #32]
   b7948:	b93b      	cbnz	r3, b795a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b794a:	4620      	mov	r0, r4
   b794c:	f7ff fcb3 	bl	b72b6 <_ZN7FatFile10addClusterEv>
   b7950:	2800      	cmp	r0, #0
   b7952:	d0f1      	beq.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b7954:	6923      	ldr	r3, [r4, #16]
   b7956:	6223      	str	r3, [r4, #32]
   b7958:	e7b9      	b.n	b78ce <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b795a:	6123      	str	r3, [r4, #16]
   b795c:	e7b7      	b.n	b78ce <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b795e:	2201      	movs	r2, #1
   b7960:	e7cc      	b.n	b78fc <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b7962:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b7966:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7968:	d31b      	bcc.n	b79a2 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b796a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b796e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b7972:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7974:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7978:	4573      	cmp	r3, lr
   b797a:	bf28      	it	cs
   b797c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b797e:	4291      	cmp	r1, r2
      n = 512*nb;
   b7980:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7984:	d307      	bcc.n	b7996 <_ZN7FatFile5writeEPKvj+0x126>
   b7986:	441a      	add	r2, r3
   b7988:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b798a:	bf82      	ittt	hi
   b798c:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b7990:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7994:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b7996:	68a5      	ldr	r5, [r4, #8]
   b7998:	464a      	mov	r2, r9
   b799a:	6828      	ldr	r0, [r5, #0]
   b799c:	f000 fc4b 	bl	b8236 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b79a0:	e7bd      	b.n	b791e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b79a2:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b79a4:	bf02      	ittt	eq
   b79a6:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b79aa:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b79ae:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b79b0:	68a3      	ldr	r3, [r4, #8]
   b79b2:	464a      	mov	r2, r9
   b79b4:	6818      	ldr	r0, [r3, #0]
   b79b6:	f000 fbc8 	bl	b814a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b79ba:	2800      	cmp	r0, #0
   b79bc:	d0bc      	beq.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b79be:	f44f 7600 	mov.w	r6, #512	; 0x200
   b79c2:	e7ad      	b.n	b7920 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b79c4:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b79c6:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b79c8:	42b2      	cmp	r2, r6
   b79ca:	d204      	bcs.n	b79d6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b79cc:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b79ce:	f043 0304 	orr.w	r3, r3, #4
   b79d2:	70a3      	strb	r3, [r4, #2]
   b79d4:	e003      	b.n	b79de <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b79d6:	4a08      	ldr	r2, [pc, #32]	; (b79f8 <_ZN7FatFile5writeEPKvj+0x188>)
   b79d8:	6812      	ldr	r2, [r2, #0]
   b79da:	2a00      	cmp	r2, #0
   b79dc:	d1f7      	bne.n	b79ce <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b79de:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b79e2:	2b00      	cmp	r3, #0
   b79e4:	db02      	blt.n	b79ec <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b79e6:	4638      	mov	r0, r7
}
   b79e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b79ec:	4620      	mov	r0, r4
   b79ee:	f7ff feb5 	bl	b775c <_ZN7FatFile4syncEv>
   b79f2:	2800      	cmp	r0, #0
   b79f4:	d1f7      	bne.n	b79e6 <_ZN7FatFile5writeEPKvj+0x176>
   b79f6:	e79f      	b.n	b7938 <_ZN7FatFile5writeEPKvj+0xc8>
   b79f8:	2003e60c 	.word	0x2003e60c

000b79fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b79fc:	b513      	push	{r0, r1, r4, lr}
   b79fe:	4604      	mov	r4, r0
    }
   b7a00:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7a02:	b159      	cbz	r1, b7a1c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7a04:	9101      	str	r1, [sp, #4]
   b7a06:	f00c fe92 	bl	c472e <strlen>
   b7a0a:	6823      	ldr	r3, [r4, #0]
   b7a0c:	9901      	ldr	r1, [sp, #4]
   b7a0e:	68db      	ldr	r3, [r3, #12]
   b7a10:	4602      	mov	r2, r0
   b7a12:	4620      	mov	r0, r4
    }
   b7a14:	b002      	add	sp, #8
   b7a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7a1a:	4718      	bx	r3
    }
   b7a1c:	b002      	add	sp, #8
   b7a1e:	bd10      	pop	{r4, pc}

000b7a20 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7a22:	7803      	ldrb	r3, [r0, #0]
   b7a24:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7a26:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7a28:	d520      	bpl.n	b7a6c <_ZN8FatCache4syncEv+0x4c>
   b7a2a:	6843      	ldr	r3, [r0, #4]
   b7a2c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7a2e:	f100 020c 	add.w	r2, r0, #12
   b7a32:	6818      	ldr	r0, [r3, #0]
   b7a34:	9201      	str	r2, [sp, #4]
   b7a36:	f000 fb88 	bl	b814a <_ZN9SdSpiCard10writeBlockEmPKh>
   b7a3a:	9a01      	ldr	r2, [sp, #4]
   b7a3c:	4605      	mov	r5, r0
   b7a3e:	b918      	cbnz	r0, b7a48 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7a40:	2500      	movs	r5, #0
}
   b7a42:	4628      	mov	r0, r5
   b7a44:	b003      	add	sp, #12
   b7a46:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7a48:	7823      	ldrb	r3, [r4, #0]
   b7a4a:	079b      	lsls	r3, r3, #30
   b7a4c:	d404      	bmi.n	b7a58 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7a4e:	7823      	ldrb	r3, [r4, #0]
   b7a50:	f023 0301 	bic.w	r3, r3, #1
   b7a54:	7023      	strb	r3, [r4, #0]
   b7a56:	e7f4      	b.n	b7a42 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7a58:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7a5c:	6919      	ldr	r1, [r3, #16]
   b7a5e:	4401      	add	r1, r0
   b7a60:	6818      	ldr	r0, [r3, #0]
   b7a62:	f000 fb72 	bl	b814a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7a66:	2800      	cmp	r0, #0
   b7a68:	d1f1      	bne.n	b7a4e <_ZN8FatCache4syncEv+0x2e>
   b7a6a:	e7e9      	b.n	b7a40 <_ZN8FatCache4syncEv+0x20>
  return true;
   b7a6c:	2501      	movs	r5, #1
   b7a6e:	e7e8      	b.n	b7a42 <_ZN8FatCache4syncEv+0x22>

000b7a70 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7a70:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7a72:	6883      	ldr	r3, [r0, #8]
   b7a74:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7a76:	4604      	mov	r4, r0
   b7a78:	460e      	mov	r6, r1
   b7a7a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7a7c:	d009      	beq.n	b7a92 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7a7e:	f7ff ffcf 	bl	b7a20 <_ZN8FatCache4syncEv>
   b7a82:	b908      	cbnz	r0, b7a88 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7a84:	2000      	movs	r0, #0
}
   b7a86:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7a88:	076b      	lsls	r3, r5, #29
   b7a8a:	d50a      	bpl.n	b7aa2 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7a8c:	2300      	movs	r3, #0
   b7a8e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7a90:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7a92:	7822      	ldrb	r2, [r4, #0]
   b7a94:	f005 0503 	and.w	r5, r5, #3
   b7a98:	4620      	mov	r0, r4
   b7a9a:	4315      	orrs	r5, r2
   b7a9c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7aa0:	e7f1      	b.n	b7a86 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7aa2:	6863      	ldr	r3, [r4, #4]
   b7aa4:	f104 020c 	add.w	r2, r4, #12
   b7aa8:	6818      	ldr	r0, [r3, #0]
   b7aaa:	4631      	mov	r1, r6
   b7aac:	f000 fac4 	bl	b8038 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7ab0:	2800      	cmp	r0, #0
   b7ab2:	d1eb      	bne.n	b7a8c <_ZN8FatCache4readEmh+0x1c>
   b7ab4:	e7e6      	b.n	b7a84 <_ZN8FatCache4readEmh+0x14>

000b7ab6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7ab6:	7983      	ldrb	r3, [r0, #6]
   b7ab8:	6940      	ldr	r0, [r0, #20]
   b7aba:	3902      	subs	r1, #2
   b7abc:	4099      	lsls	r1, r3
}
   b7abe:	4408      	add	r0, r1
   b7ac0:	4770      	bx	lr

000b7ac2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ac2:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7ac4:	b570      	push	{r4, r5, r6, lr}
   b7ac6:	4605      	mov	r5, r0
   b7ac8:	460c      	mov	r4, r1
   b7aca:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7acc:	d802      	bhi.n	b7ad4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7ace:	f04f 30ff 	mov.w	r0, #4294967295
}
   b7ad2:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ad4:	69c3      	ldr	r3, [r0, #28]
   b7ad6:	428b      	cmp	r3, r1
   b7ad8:	d3f9      	bcc.n	b7ace <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7ada:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7adc:	2b20      	cmp	r3, #32
   b7ade:	d116      	bne.n	b7b0e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7ae0:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7ae2:	2202      	movs	r2, #2
   b7ae4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7ae8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7aec:	f7ff ffc0 	bl	b7a70 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7af0:	2800      	cmp	r0, #0
   b7af2:	d0ec      	beq.n	b7ace <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7af4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7af8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7afc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7b00:	69ea      	ldr	r2, [r5, #28]
   b7b02:	429a      	cmp	r2, r3
  *value = next;
   b7b04:	bf26      	itte	cs
   b7b06:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7b08:	2001      	movcs	r0, #1
    return 0;
   b7b0a:	2000      	movcc	r0, #0
   b7b0c:	e7e1      	b.n	b7ad2 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7b0e:	2b10      	cmp	r3, #16
   b7b10:	d1dd      	bne.n	b7ace <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7b12:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7b16:	6981      	ldr	r1, [r0, #24]
   b7b18:	2202      	movs	r2, #2
   b7b1a:	4419      	add	r1, r3
   b7b1c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b20:	f7ff ffa6 	bl	b7a70 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b24:	2800      	cmp	r0, #0
   b7b26:	d0d2      	beq.n	b7ace <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7b28:	b2e4      	uxtb	r4, r4
   b7b2a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7b2e:	e7e7      	b.n	b7b00 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7b30 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b30:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7b32:	b538      	push	{r3, r4, r5, lr}
   b7b34:	460c      	mov	r4, r1
   b7b36:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b38:	d801      	bhi.n	b7b3e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7b3a:	2000      	movs	r0, #0
}
   b7b3c:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b3e:	69c3      	ldr	r3, [r0, #28]
   b7b40:	428b      	cmp	r3, r1
   b7b42:	d3fa      	bcc.n	b7b3a <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7b44:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7b46:	2b20      	cmp	r3, #32
   b7b48:	d10f      	bne.n	b7b6a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7b4a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7b4c:	2203      	movs	r2, #3
   b7b4e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7b52:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b56:	f7ff ff8b 	bl	b7a70 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b5a:	2800      	cmp	r0, #0
   b7b5c:	d0ed      	beq.n	b7b3a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7b5e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7b62:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7b66:	2001      	movs	r0, #1
   b7b68:	e7e8      	b.n	b7b3c <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7b6a:	2b10      	cmp	r3, #16
   b7b6c:	d1e5      	bne.n	b7b3a <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7b6e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7b72:	6981      	ldr	r1, [r0, #24]
   b7b74:	2203      	movs	r2, #3
   b7b76:	4419      	add	r1, r3
   b7b78:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b7c:	f7ff ff78 	bl	b7a70 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b80:	2800      	cmp	r0, #0
   b7b82:	d0da      	beq.n	b7b3a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7b84:	b2e4      	uxtb	r4, r4
   b7b86:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7b8a:	e7ec      	b.n	b7b66 <_ZN9FatVolume6fatPutEmm+0x36>

000b7b8c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7b8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7b90:	68c4      	ldr	r4, [r0, #12]
   b7b92:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7b94:	4605      	mov	r5, r0
   b7b96:	460e      	mov	r6, r1
   b7b98:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7b9a:	d301      	bcc.n	b7ba0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7b9c:	2701      	movs	r7, #1
   b7b9e:	e001      	b.n	b7ba4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7ba0:	460c      	mov	r4, r1
    setStart = false;
   b7ba2:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7ba4:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7ba6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7ba8:	42a3      	cmp	r3, r4
   b7baa:	d202      	bcs.n	b7bb2 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7bac:	b9c7      	cbnz	r7, b7be0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7bae:	68ec      	ldr	r4, [r5, #12]
   b7bb0:	e7f4      	b.n	b7b9c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7bb2:	42a6      	cmp	r6, r4
   b7bb4:	d014      	beq.n	b7be0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7bb6:	aa01      	add	r2, sp, #4
   b7bb8:	4621      	mov	r1, r4
   b7bba:	4628      	mov	r0, r5
   b7bbc:	f7ff ff81 	bl	b7ac2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7bc0:	2800      	cmp	r0, #0
   b7bc2:	db0d      	blt.n	b7be0 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7bc4:	d0ee      	beq.n	b7ba4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7bc6:	9b01      	ldr	r3, [sp, #4]
   b7bc8:	2b00      	cmp	r3, #0
   b7bca:	d1eb      	bne.n	b7ba4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7bcc:	b107      	cbz	r7, b7bd0 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7bce:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7bd0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7bd4:	4621      	mov	r1, r4
   b7bd6:	4628      	mov	r0, r5
   b7bd8:	f7ff ffaa 	bl	b7b30 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7bdc:	4607      	mov	r7, r0
   b7bde:	b920      	cbnz	r0, b7bea <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7be0:	2700      	movs	r7, #0
}
   b7be2:	4638      	mov	r0, r7
   b7be4:	b002      	add	sp, #8
   b7be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7bea:	b916      	cbnz	r6, b7bf2 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7bec:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7bf0:	e7f7      	b.n	b7be2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7bf2:	4622      	mov	r2, r4
   b7bf4:	4631      	mov	r1, r6
   b7bf6:	4628      	mov	r0, r5
   b7bf8:	f7ff ff9a 	bl	b7b30 <_ZN9FatVolume6fatPutEmm>
   b7bfc:	2800      	cmp	r0, #0
   b7bfe:	d1f5      	bne.n	b7bec <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7c00:	e7ee      	b.n	b7be0 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7c02 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c04:	4605      	mov	r5, r0
   b7c06:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7c08:	aa01      	add	r2, sp, #4
   b7c0a:	4621      	mov	r1, r4
   b7c0c:	4628      	mov	r0, r5
   b7c0e:	f7ff ff58 	bl	b7ac2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7c12:	1e06      	subs	r6, r0, #0
   b7c14:	db10      	blt.n	b7c38 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7c16:	2200      	movs	r2, #0
   b7c18:	4621      	mov	r1, r4
   b7c1a:	4628      	mov	r0, r5
   b7c1c:	f7ff ff88 	bl	b7b30 <_ZN9FatVolume6fatPutEmm>
   b7c20:	b150      	cbz	r0, b7c38 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7c22:	68eb      	ldr	r3, [r5, #12]
   b7c24:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7c26:	bf24      	itt	cs
   b7c28:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b7c2c:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7c2e:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7c30:	2e00      	cmp	r6, #0
   b7c32:	d1e9      	bne.n	b7c08 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7c34:	b002      	add	sp, #8
   b7c36:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7c38:	2000      	movs	r0, #0
   b7c3a:	e7fb      	b.n	b7c34 <_ZN9FatVolume9freeChainEm+0x32>

000b7c3c <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7c3c:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7c3e:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7c40:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7c42:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7c44:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b7c48:	4604      	mov	r4, r0
  m_fatType = 0;
   b7c4a:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7c4c:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7c50:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7c52:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7c56:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7c58:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7c5c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7c60:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7c64:	460d      	mov	r5, r1
   b7c66:	b1b9      	cbz	r1, b7c98 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7c68:	2904      	cmp	r1, #4
   b7c6a:	d901      	bls.n	b7c70 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7c6c:	2000      	movs	r0, #0
}
   b7c6e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7c70:	4611      	mov	r1, r2
   b7c72:	4630      	mov	r0, r6
   b7c74:	f7ff fefc 	bl	b7a70 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7c78:	2800      	cmp	r0, #0
   b7c7a:	d0f7      	beq.n	b7c6c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7c7c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7c80:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7c84:	065b      	lsls	r3, r3, #25
   b7c86:	d1f1      	bne.n	b7c6c <_ZN9FatVolume4initEh+0x30>
   b7c88:	f105 011b 	add.w	r1, r5, #27
   b7c8c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7c90:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7c94:	2d00      	cmp	r5, #0
   b7c96:	d0e9      	beq.n	b7c6c <_ZN9FatVolume4initEh+0x30>
   b7c98:	2200      	movs	r2, #0
   b7c9a:	4629      	mov	r1, r5
   b7c9c:	4630      	mov	r0, r6
   b7c9e:	f7ff fee7 	bl	b7a70 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7ca2:	2800      	cmp	r0, #0
   b7ca4:	d0e2      	beq.n	b7c6c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7ca6:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7cae:	d1dd      	bne.n	b7c6c <_ZN9FatVolume4initEh+0x30>
   b7cb0:	7c03      	ldrb	r3, [r0, #16]
   b7cb2:	2b02      	cmp	r3, #2
   b7cb4:	d1da      	bne.n	b7c6c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7cb6:	89c3      	ldrh	r3, [r0, #14]
   b7cb8:	2b00      	cmp	r3, #0
   b7cba:	d0d7      	beq.n	b7c6c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7cbc:	7b41      	ldrb	r1, [r0, #13]
   b7cbe:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7cc0:	1e4b      	subs	r3, r1, #1
   b7cc2:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7cc4:	2300      	movs	r3, #0
   b7cc6:	71a3      	strb	r3, [r4, #6]
   b7cc8:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7cca:	2301      	movs	r3, #1
   b7ccc:	4299      	cmp	r1, r3
   b7cce:	d007      	beq.n	b7ce0 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7cd0:	3e01      	subs	r6, #1
   b7cd2:	d0cb      	beq.n	b7c6c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7cd4:	79a2      	ldrb	r2, [r4, #6]
   b7cd6:	005b      	lsls	r3, r3, #1
   b7cd8:	3201      	adds	r2, #1
   b7cda:	b2db      	uxtb	r3, r3
   b7cdc:	71a2      	strb	r2, [r4, #6]
   b7cde:	e7f5      	b.n	b7ccc <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7ce0:	8ac1      	ldrh	r1, [r0, #22]
   b7ce2:	b901      	cbnz	r1, b7ce6 <_ZN9FatVolume4initEh+0xaa>
   b7ce4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7ce6:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7ce8:	89c3      	ldrh	r3, [r0, #14]
   b7cea:	442b      	add	r3, r5
   b7cec:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7cee:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7cf2:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7cf4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7cf8:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7cfa:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7cfe:	0149      	lsls	r1, r1, #5
   b7d00:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7d04:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7d08:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7d0a:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7d0e:	b902      	cbnz	r2, b7d12 <_ZN9FatVolume4initEh+0xd6>
   b7d10:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7d12:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7d14:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7d16:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7d18:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7d1a:	1c4b      	adds	r3, r1, #1
   b7d1c:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7d1e:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7d22:	4299      	cmp	r1, r3
   b7d24:	d802      	bhi.n	b7d2c <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7d26:	230c      	movs	r3, #12
   b7d28:	71e3      	strb	r3, [r4, #7]
   b7d2a:	e79f      	b.n	b7c6c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7d2c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7d30:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7d32:	bf85      	ittet	hi
   b7d34:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7d36:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7d38:	2310      	movls	r3, #16
    m_fatType = 32;
   b7d3a:	2320      	movhi	r3, #32
   b7d3c:	71e3      	strb	r3, [r4, #7]
  return true;
   b7d3e:	2001      	movs	r0, #1
   b7d40:	e795      	b.n	b7c6e <_ZN9FatVolume4initEh+0x32>

000b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7d42:	f000 bacb 	b.w	b82dc <_ZN14SdSpiAltDriver4sendEh>

000b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7d46:	f000 baae 	b.w	b82a6 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7d4c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7d4c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7d4e:	4e0e      	ldr	r6, [pc, #56]	; (b7d88 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7d50:	460d      	mov	r5, r1
   b7d52:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7d54:	f005 ff7e 	bl	bdc54 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7d58:	6833      	ldr	r3, [r6, #0]
   b7d5a:	1ac0      	subs	r0, r0, r3
   b7d5c:	4b0b      	ldr	r3, [pc, #44]	; (b7d8c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7d5e:	4298      	cmp	r0, r3
   b7d60:	d908      	bls.n	b7d74 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7d62:	f005 ff7f 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7d66:	4b0a      	ldr	r3, [pc, #40]	; (b7d90 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7d68:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7d6a:	f006 faab 	bl	be2c4 <spark_process>
   b7d6e:	f005 ff71 	bl	bdc54 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7d72:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7d74:	f005 ff76 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7d78:	b280      	uxth	r0, r0
   b7d7a:	1b40      	subs	r0, r0, r5
}
   b7d7c:	42a0      	cmp	r0, r4
   b7d7e:	bfd4      	ite	le
   b7d80:	2000      	movle	r0, #0
   b7d82:	2001      	movgt	r0, #1
   b7d84:	bd70      	pop	{r4, r5, r6, pc}
   b7d86:	bf00      	nop
   b7d88:	2003e614 	.word	0x2003e614
   b7d8c:	000186a0 	.word	0x000186a0
   b7d90:	2003e740 	.word	0x2003e740

000b7d94 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7d94:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7d96:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7d98:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7d9a:	b94d      	cbnz	r5, b7db0 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7d9c:	6840      	ldr	r0, [r0, #4]
   b7d9e:	f000 fa6b 	bl	b8278 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7da2:	6863      	ldr	r3, [r4, #4]
   b7da4:	4629      	mov	r1, r5
   b7da6:	7d18      	ldrb	r0, [r3, #20]
   b7da8:	f00a f94d 	bl	c2046 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7dac:	2301      	movs	r3, #1
   b7dae:	7223      	strb	r3, [r4, #8]
  }
}
   b7db0:	bd38      	pop	{r3, r4, r5, pc}

000b7db2 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7db2:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7db4:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7db6:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7db8:	b16b      	cbz	r3, b7dd6 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7dba:	6843      	ldr	r3, [r0, #4]
   b7dbc:	2101      	movs	r1, #1
   b7dbe:	7d18      	ldrb	r0, [r3, #20]
   b7dc0:	f00a f941 	bl	c2046 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7dc4:	6860      	ldr	r0, [r4, #4]
   b7dc6:	21ff      	movs	r1, #255	; 0xff
   b7dc8:	f7ff ffbb 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7dcc:	6860      	ldr	r0, [r4, #4]
   b7dce:	f000 fa67 	bl	b82a0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7dd2:	2300      	movs	r3, #0
   b7dd4:	7223      	strb	r3, [r4, #8]
  }
}
   b7dd6:	bd10      	pop	{r4, pc}

000b7dd8 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dda:	4604      	mov	r4, r0
   b7ddc:	460d      	mov	r5, r1
   b7dde:	4616      	mov	r6, r2
   b7de0:	f005 ff40 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7de4:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7de6:	6860      	ldr	r0, [r4, #4]
   b7de8:	f7ff ffad 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7dec:	28ff      	cmp	r0, #255	; 0xff
   b7dee:	7260      	strb	r0, [r4, #9]
   b7df0:	d10e      	bne.n	b7e10 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7df2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7df6:	4639      	mov	r1, r7
   b7df8:	4620      	mov	r0, r4
   b7dfa:	f7ff ffa7 	bl	b7d4c <_ZN9SdSpiCard10isTimedOutEtt>
   b7dfe:	2800      	cmp	r0, #0
   b7e00:	d0f1      	beq.n	b7de6 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7e02:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7e04:	4620      	mov	r0, r4
   b7e06:	7023      	strb	r3, [r4, #0]
   b7e08:	f7ff ffd3 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7e0c:	2000      	movs	r0, #0
}
   b7e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7e10:	28fe      	cmp	r0, #254	; 0xfe
   b7e12:	d001      	beq.n	b7e18 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7e14:	2350      	movs	r3, #80	; 0x50
   b7e16:	e7f5      	b.n	b7e04 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7e18:	6860      	ldr	r0, [r4, #4]
   b7e1a:	4632      	mov	r2, r6
   b7e1c:	4629      	mov	r1, r5
   b7e1e:	f000 fa47 	bl	b82b0 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7e22:	7260      	strb	r0, [r4, #9]
   b7e24:	b108      	cbz	r0, b7e2a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7e26:	2360      	movs	r3, #96	; 0x60
   b7e28:	e7ec      	b.n	b7e04 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7e2a:	6860      	ldr	r0, [r4, #4]
   b7e2c:	f7ff ff8b 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7e30:	6860      	ldr	r0, [r4, #4]
   b7e32:	f7ff ff88 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7e36:	2001      	movs	r0, #1
   b7e38:	e7e9      	b.n	b7e0e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7e3a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7e3a:	b570      	push	{r4, r5, r6, lr}
   b7e3c:	4604      	mov	r4, r0
   b7e3e:	460e      	mov	r6, r1
   b7e40:	f005 ff10 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   b7e44:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7e46:	4632      	mov	r2, r6
   b7e48:	4629      	mov	r1, r5
   b7e4a:	4620      	mov	r0, r4
   b7e4c:	f7ff ff7e 	bl	b7d4c <_ZN9SdSpiCard10isTimedOutEtt>
   b7e50:	b930      	cbnz	r0, b7e60 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7e52:	6860      	ldr	r0, [r4, #4]
   b7e54:	f7ff ff77 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e58:	28ff      	cmp	r0, #255	; 0xff
   b7e5a:	d1f4      	bne.n	b7e46 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7e5c:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7e5e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7e60:	2000      	movs	r0, #0
   b7e62:	e7fc      	b.n	b7e5e <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7e64 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7e66:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7e68:	9201      	str	r2, [sp, #4]
   b7e6a:	4604      	mov	r4, r0
   b7e6c:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7e6e:	b90b      	cbnz	r3, b7e74 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7e70:	f7ff ff90 	bl	b7d94 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7e74:	b125      	cbz	r5, b7e80 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7e76:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7e7a:	4620      	mov	r0, r4
   b7e7c:	f7ff ffdd 	bl	b7e3a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7e80:	6860      	ldr	r0, [r4, #4]
   b7e82:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7e86:	f7ff ff5c 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7e8a:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7e8c:	af01      	add	r7, sp, #4
   b7e8e:	5db9      	ldrb	r1, [r7, r6]
   b7e90:	6860      	ldr	r0, [r4, #4]
   b7e92:	f7ff ff56 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7e96:	3e01      	subs	r6, #1
   b7e98:	d2f9      	bcs.n	b7e8e <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7e9a:	2d00      	cmp	r5, #0
   b7e9c:	6860      	ldr	r0, [r4, #4]
   b7e9e:	bf0c      	ite	eq
   b7ea0:	2195      	moveq	r1, #149	; 0x95
   b7ea2:	2187      	movne	r1, #135	; 0x87
   b7ea4:	f7ff ff4d 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7ea8:	6860      	ldr	r0, [r4, #4]
   b7eaa:	f7ff ff4c 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7eae:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7eb0:	6860      	ldr	r0, [r4, #4]
   b7eb2:	f7ff ff48 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7eb6:	0603      	lsls	r3, r0, #24
   b7eb8:	7260      	strb	r0, [r4, #9]
   b7eba:	d503      	bpl.n	b7ec4 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7ebc:	3d01      	subs	r5, #1
   b7ebe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7ec2:	d1f5      	bne.n	b7eb0 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7ec4:	b003      	add	sp, #12
   b7ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ec8 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7ec8:	b570      	push	{r4, r5, r6, lr}
   b7eca:	4604      	mov	r4, r0
   b7ecc:	460d      	mov	r5, r1
   b7ece:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7ed0:	2137      	movs	r1, #55	; 0x37
   b7ed2:	2200      	movs	r2, #0
   b7ed4:	f7ff ffc6 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7ed8:	4632      	mov	r2, r6
   b7eda:	4629      	mov	r1, r5
   b7edc:	4620      	mov	r0, r4
  }
   b7ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7ee2:	f7ff bfbf 	b.w	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7ee8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7eec:	2500      	movs	r5, #0
   b7eee:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7ef0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7ef2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7ef4:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7ef6:	4604      	mov	r4, r0
   b7ef8:	4690      	mov	r8, r2
   b7efa:	461e      	mov	r6, r3
   b7efc:	f005 feb2 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7f00:	4641      	mov	r1, r8
   b7f02:	4607      	mov	r7, r0
   b7f04:	6860      	ldr	r0, [r4, #4]
   b7f06:	f000 f9bb 	bl	b8280 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7f0a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7f0c:	4a49      	ldr	r2, [pc, #292]	; (b8034 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7f0e:	721d      	strb	r5, [r3, #8]
   b7f10:	2501      	movs	r5, #1
   b7f12:	60da      	str	r2, [r3, #12]
   b7f14:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7f16:	4620      	mov	r0, r4
   b7f18:	f7ff ff3c 	bl	b7d94 <_ZN9SdSpiCard8spiStartEv>
   b7f1c:	6863      	ldr	r3, [r4, #4]
   b7f1e:	4629      	mov	r1, r5
   b7f20:	7d18      	ldrb	r0, [r3, #20]
   b7f22:	f00a f890 	bl	c2046 <digitalWrite>
   b7f26:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7f28:	6860      	ldr	r0, [r4, #4]
   b7f2a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7f2c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7f2e:	f7ff ff08 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7f32:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7f36:	d1f7      	bne.n	b7f28 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7f38:	6863      	ldr	r3, [r4, #4]
   b7f3a:	4629      	mov	r1, r5
   b7f3c:	7d18      	ldrb	r0, [r3, #20]
   b7f3e:	f00a f882 	bl	c2046 <digitalWrite>
  }
   b7f42:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7f44:	2200      	movs	r2, #0
   b7f46:	4611      	mov	r1, r2
   b7f48:	4620      	mov	r0, r4
   b7f4a:	f7ff ff8b 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b7f4e:	2801      	cmp	r0, #1
   b7f50:	4680      	mov	r8, r0
   b7f52:	d018      	beq.n	b7f86 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7f54:	3d01      	subs	r5, #1
   b7f56:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7f5a:	d107      	bne.n	b7f6c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7f5c:	2320      	movs	r3, #32
  spiStop();
   b7f5e:	4620      	mov	r0, r4
   b7f60:	7023      	strb	r3, [r4, #0]
   b7f62:	f7ff ff26 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7f66:	2000      	movs	r0, #0
}
   b7f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7f6c:	6860      	ldr	r0, [r4, #4]
   b7f6e:	21fd      	movs	r1, #253	; 0xfd
   b7f70:	f7ff fee7 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7f74:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7f78:	6860      	ldr	r0, [r4, #4]
   b7f7a:	f7ff fee4 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7f7e:	f1b8 0801 	subs.w	r8, r8, #1
   b7f82:	d1f9      	bne.n	b7f78 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7f84:	e7de      	b.n	b7f44 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7f86:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7f8a:	2108      	movs	r1, #8
   b7f8c:	4620      	mov	r0, r4
   b7f8e:	f7ff ff69 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b7f92:	2805      	cmp	r0, #5
   b7f94:	d114      	bne.n	b7fc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7f96:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7f9a:	2500      	movs	r5, #0
   b7f9c:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7f9e:	462a      	mov	r2, r5
   b7fa0:	2129      	movs	r1, #41	; 0x29
   b7fa2:	4620      	mov	r0, r4
   b7fa4:	f7ff ff90 	bl	b7ec8 <_ZN9SdSpiCard8cardAcmdEhm>
   b7fa8:	4602      	mov	r2, r0
   b7faa:	b1d8      	cbz	r0, b7fe4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7fac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7fb0:	4639      	mov	r1, r7
   b7fb2:	4620      	mov	r0, r4
   b7fb4:	f7ff feca 	bl	b7d4c <_ZN9SdSpiCard10isTimedOutEtt>
   b7fb8:	2800      	cmp	r0, #0
   b7fba:	d0f0      	beq.n	b7f9e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7fbc:	2343      	movs	r3, #67	; 0x43
   b7fbe:	e7ce      	b.n	b7f5e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7fc0:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7fc2:	6860      	ldr	r0, [r4, #4]
   b7fc4:	f7ff febf 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7fc8:	3d01      	subs	r5, #1
   b7fca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7fce:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7fd0:	d1f7      	bne.n	b7fc2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7fd2:	28aa      	cmp	r0, #170	; 0xaa
   b7fd4:	d104      	bne.n	b7fe0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7fd6:	2302      	movs	r3, #2
   b7fd8:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7fda:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7fde:	e7dd      	b.n	b7f9c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7fe0:	2325      	movs	r3, #37	; 0x25
   b7fe2:	e7bc      	b.n	b7f5e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7fe4:	7aa3      	ldrb	r3, [r4, #10]
   b7fe6:	2b02      	cmp	r3, #2
   b7fe8:	d118      	bne.n	b801c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7fea:	213a      	movs	r1, #58	; 0x3a
   b7fec:	4620      	mov	r0, r4
   b7fee:	f7ff ff39 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b7ff2:	b108      	cbz	r0, b7ff8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7ff4:	2337      	movs	r3, #55	; 0x37
   b7ff6:	e7b2      	b.n	b7f5e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7ff8:	6860      	ldr	r0, [r4, #4]
   b7ffa:	f7ff fea4 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ffe:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b8002:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b8004:	bf04      	itt	eq
   b8006:	2303      	moveq	r3, #3
   b8008:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b800a:	6860      	ldr	r0, [r4, #4]
   b800c:	f7ff fe9b 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8010:	6860      	ldr	r0, [r4, #4]
   b8012:	f7ff fe98 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8016:	6860      	ldr	r0, [r4, #4]
   b8018:	f7ff fe95 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b801c:	4620      	mov	r0, r4
   b801e:	f7ff fec8 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b8022:	6863      	ldr	r3, [r4, #4]
   b8024:	7930      	ldrb	r0, [r6, #4]
   b8026:	68b1      	ldr	r1, [r6, #8]
   b8028:	89b2      	ldrh	r2, [r6, #12]
   b802a:	821a      	strh	r2, [r3, #16]
   b802c:	7218      	strb	r0, [r3, #8]
   b802e:	60d9      	str	r1, [r3, #12]
  return true;
   b8030:	2001      	movs	r0, #1
   b8032:	e799      	b.n	b7f68 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b8034:	0003d090 	.word	0x0003d090

000b8038 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8038:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b803a:	7a83      	ldrb	r3, [r0, #10]
   b803c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b803e:	bf18      	it	ne
   b8040:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8042:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b8044:	460a      	mov	r2, r1
   b8046:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b8048:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b804a:	f7ff ff0b 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b804e:	b130      	cbz	r0, b805e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b8050:	2330      	movs	r3, #48	; 0x30
   b8052:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8054:	4620      	mov	r0, r4
   b8056:	f7ff feac 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b805a:	2500      	movs	r5, #0
   b805c:	e00b      	b.n	b8076 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b805e:	4629      	mov	r1, r5
   b8060:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8064:	4620      	mov	r0, r4
   b8066:	f7ff feb7 	bl	b7dd8 <_ZN9SdSpiCard8readDataEPhj>
   b806a:	4605      	mov	r5, r0
   b806c:	2800      	cmp	r0, #0
   b806e:	d0f1      	beq.n	b8054 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b8070:	4620      	mov	r0, r4
   b8072:	f7ff fe9e 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
}
   b8076:	4628      	mov	r0, r5
   b8078:	bd38      	pop	{r3, r4, r5, pc}

000b807a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b807a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b807c:	7a83      	ldrb	r3, [r0, #10]
   b807e:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8080:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b8082:	bf18      	it	ne
   b8084:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b8086:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b8088:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b808a:	f7ff feeb 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b808e:	b130      	cbz	r0, b809e <_ZN9SdSpiCard9readStartEm+0x24>
   b8090:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b8092:	4620      	mov	r0, r4
   b8094:	7023      	strb	r3, [r4, #0]
   b8096:	f7ff fe8c 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b809a:	2000      	movs	r0, #0
}
   b809c:	bd10      	pop	{r4, pc}
  return true;
   b809e:	2001      	movs	r0, #1
   b80a0:	e7fc      	b.n	b809c <_ZN9SdSpiCard9readStartEm+0x22>

000b80a2 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b80a2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b80a4:	2200      	movs	r2, #0
   b80a6:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b80a8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b80aa:	f7ff fedb 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b80ae:	b130      	cbz	r0, b80be <_ZN9SdSpiCard8readStopEv+0x1c>
   b80b0:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b80b2:	4620      	mov	r0, r4
   b80b4:	7023      	strb	r3, [r4, #0]
   b80b6:	f7ff fe7c 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b80ba:	2000      	movs	r0, #0
}
   b80bc:	bd10      	pop	{r4, pc}
  spiStop();
   b80be:	4620      	mov	r0, r4
   b80c0:	f7ff fe77 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b80c4:	2001      	movs	r0, #1
   b80c6:	e7f9      	b.n	b80bc <_ZN9SdSpiCard8readStopEv+0x1a>

000b80c8 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b80c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80ca:	4604      	mov	r4, r0
   b80cc:	4616      	mov	r6, r2
   b80ce:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b80d0:	f7ff ffd3 	bl	b807a <_ZN9SdSpiCard9readStartEm>
   b80d4:	b168      	cbz	r0, b80f2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b80d6:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b80d8:	b2ab      	uxth	r3, r5
   b80da:	429f      	cmp	r7, r3
   b80dc:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b80e0:	d909      	bls.n	b80f6 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b80e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   b80e6:	4620      	mov	r0, r4
   b80e8:	f7ff fe76 	bl	b7dd8 <_ZN9SdSpiCard8readDataEPhj>
   b80ec:	3501      	adds	r5, #1
   b80ee:	2800      	cmp	r0, #0
   b80f0:	d1f2      	bne.n	b80d8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b80f2:	2000      	movs	r0, #0
   b80f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b80f6:	4620      	mov	r0, r4
}
   b80f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b80fc:	f7ff bfd1 	b.w	b80a2 <_ZN9SdSpiCard8readStopEv>

000b8100 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b8100:	b538      	push	{r3, r4, r5, lr}
   b8102:	4604      	mov	r4, r0
   b8104:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b8106:	6840      	ldr	r0, [r0, #4]
   b8108:	f7ff fe1b 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b810c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8110:	6860      	ldr	r0, [r4, #4]
   b8112:	4629      	mov	r1, r5
   b8114:	f000 f8e6 	bl	b82e4 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b8118:	6860      	ldr	r0, [r4, #4]
   b811a:	21ff      	movs	r1, #255	; 0xff
   b811c:	f7ff fe11 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b8120:	6860      	ldr	r0, [r4, #4]
   b8122:	21ff      	movs	r1, #255	; 0xff
   b8124:	f7ff fe0d 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b8128:	6860      	ldr	r0, [r4, #4]
   b812a:	f7ff fe0c 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b812e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b8130:	f000 001f 	and.w	r0, r0, #31
   b8134:	2805      	cmp	r0, #5
   b8136:	d006      	beq.n	b8146 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b8138:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b813a:	4620      	mov	r0, r4
   b813c:	7023      	strb	r3, [r4, #0]
   b813e:	f7ff fe38 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8142:	2000      	movs	r0, #0
}
   b8144:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b8146:	2001      	movs	r0, #1
   b8148:	e7fc      	b.n	b8144 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b814a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b814a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b814c:	7a83      	ldrb	r3, [r0, #10]
   b814e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b8150:	bf18      	it	ne
   b8152:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b8154:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b8156:	460a      	mov	r2, r1
   b8158:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b815a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b815c:	f7ff fe82 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b8160:	4606      	mov	r6, r0
   b8162:	b130      	cbz	r0, b8172 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b8164:	2332      	movs	r3, #50	; 0x32
   b8166:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8168:	4620      	mov	r0, r4
   b816a:	f7ff fe22 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b816e:	2500      	movs	r5, #0
   b8170:	e01f      	b.n	b81b2 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b8172:	462a      	mov	r2, r5
   b8174:	21fe      	movs	r1, #254	; 0xfe
   b8176:	4620      	mov	r0, r4
   b8178:	f7ff ffc2 	bl	b8100 <_ZN9SdSpiCard9writeDataEhPKh>
   b817c:	2800      	cmp	r0, #0
   b817e:	d0f3      	beq.n	b8168 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8180:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b8184:	4620      	mov	r0, r4
   b8186:	f7ff fe58 	bl	b7e3a <_ZN9SdSpiCard11waitNotBusyEt>
   b818a:	4605      	mov	r5, r0
   b818c:	b908      	cbnz	r0, b8192 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b818e:	235a      	movs	r3, #90	; 0x5a
   b8190:	e7e9      	b.n	b8166 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b8192:	4632      	mov	r2, r6
   b8194:	210d      	movs	r1, #13
   b8196:	4620      	mov	r0, r4
   b8198:	f7ff fe64 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b819c:	b108      	cbz	r0, b81a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b819e:	2329      	movs	r3, #41	; 0x29
   b81a0:	e7e1      	b.n	b8166 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b81a2:	6860      	ldr	r0, [r4, #4]
   b81a4:	f7ff fdcf 	bl	b7d46 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b81a8:	2800      	cmp	r0, #0
   b81aa:	d1f8      	bne.n	b819e <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b81ac:	4620      	mov	r0, r4
   b81ae:	f7ff fe00 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
}
   b81b2:	4628      	mov	r0, r5
   b81b4:	bd70      	pop	{r4, r5, r6, pc}

000b81b6 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b81b6:	b513      	push	{r0, r1, r4, lr}
   b81b8:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b81ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b81be:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b81c0:	f7ff fe3b 	bl	b7e3a <_ZN9SdSpiCard11waitNotBusyEt>
   b81c4:	9a01      	ldr	r2, [sp, #4]
   b81c6:	b930      	cbnz	r0, b81d6 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b81c8:	235b      	movs	r3, #91	; 0x5b
   b81ca:	7023      	strb	r3, [r4, #0]
  spiStop();
   b81cc:	4620      	mov	r0, r4
   b81ce:	f7ff fdf0 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b81d2:	2000      	movs	r0, #0
   b81d4:	e005      	b.n	b81e2 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b81d6:	21fc      	movs	r1, #252	; 0xfc
   b81d8:	4620      	mov	r0, r4
   b81da:	f7ff ff91 	bl	b8100 <_ZN9SdSpiCard9writeDataEhPKh>
   b81de:	2800      	cmp	r0, #0
   b81e0:	d0f4      	beq.n	b81cc <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b81e2:	b002      	add	sp, #8
   b81e4:	bd10      	pop	{r4, pc}

000b81e6 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b81e6:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b81e8:	7a83      	ldrb	r3, [r0, #10]
   b81ea:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b81ec:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b81ee:	bf18      	it	ne
   b81f0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b81f2:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b81f4:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b81f6:	f7ff fe35 	bl	b7e64 <_ZN9SdSpiCard11cardCommandEhm>
   b81fa:	b130      	cbz	r0, b820a <_ZN9SdSpiCard10writeStartEm+0x24>
   b81fc:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b81fe:	4620      	mov	r0, r4
   b8200:	7023      	strb	r3, [r4, #0]
   b8202:	f7ff fdd6 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8206:	2000      	movs	r0, #0
}
   b8208:	bd10      	pop	{r4, pc}
  return true;
   b820a:	2001      	movs	r0, #1
   b820c:	e7fc      	b.n	b8208 <_ZN9SdSpiCard10writeStartEm+0x22>

000b820e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b820e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8210:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8214:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8216:	f7ff fe10 	bl	b7e3a <_ZN9SdSpiCard11waitNotBusyEt>
   b821a:	4605      	mov	r5, r0
   b821c:	b930      	cbnz	r0, b822c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b821e:	2356      	movs	r3, #86	; 0x56
   b8220:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b8222:	4620      	mov	r0, r4
   b8224:	f7ff fdc5 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b8228:	4628      	mov	r0, r5
   b822a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b822c:	6860      	ldr	r0, [r4, #4]
   b822e:	21fd      	movs	r1, #253	; 0xfd
   b8230:	f7ff fd87 	bl	b7d42 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8234:	e7f5      	b.n	b8222 <_ZN9SdSpiCard9writeStopEv+0x14>

000b8236 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b8236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8238:	4604      	mov	r4, r0
   b823a:	4616      	mov	r6, r2
   b823c:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b823e:	f7ff ffd2 	bl	b81e6 <_ZN9SdSpiCard10writeStartEm>
   b8242:	b170      	cbz	r0, b8262 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8244:	2500      	movs	r5, #0
   b8246:	42bd      	cmp	r5, r7
   b8248:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b824c:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b824e:	d004      	beq.n	b825a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b8250:	f7ff ffb1 	bl	b81b6 <_ZN9SdSpiCard9writeDataEPKh>
   b8254:	b128      	cbz	r0, b8262 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b8256:	3501      	adds	r5, #1
   b8258:	e7f5      	b.n	b8246 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b825a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b825e:	f7ff bfd6 	b.w	b820e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b8262:	4620      	mov	r0, r4
   b8264:	f7ff fda5 	bl	b7db2 <_ZN9SdSpiCard7spiStopEv>
}
   b8268:	2000      	movs	r0, #0
   b826a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b826c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b826c:	4b01      	ldr	r3, [pc, #4]	; (b8274 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b826e:	2201      	movs	r2, #1
   b8270:	701a      	strb	r2, [r3, #0]
}
   b8272:	4770      	bx	lr
   b8274:	2003e618 	.word	0x2003e618

000b8278 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b8278:	1d01      	adds	r1, r0, #4
   b827a:	6800      	ldr	r0, [r0, #0]
   b827c:	f006 b95e 	b.w	be53c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b8280 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b8280:	b510      	push	{r4, lr}
   b8282:	4604      	mov	r4, r0
  m_csPin = csPin;
   b8284:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b8286:	6800      	ldr	r0, [r0, #0]
   b8288:	f006 f92a 	bl	be4e0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b828c:	7d20      	ldrb	r0, [r4, #20]
   b828e:	2101      	movs	r1, #1
   b8290:	f009 fec8 	bl	c2024 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b8294:	7d20      	ldrb	r0, [r4, #20]
   b8296:	2101      	movs	r1, #1
}
   b8298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b829c:	f009 bed3 	b.w	c2046 <digitalWrite>

000b82a0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b82a0:	6800      	ldr	r0, [r0, #0]
   b82a2:	f006 b931 	b.w	be508 <_ZN8SPIClass14endTransactionEv>

000b82a6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b82a6:	6800      	ldr	r0, [r0, #0]
   b82a8:	21ff      	movs	r1, #255	; 0xff
   b82aa:	f006 b9b5 	b.w	be618 <_ZN8SPIClass8transferEh>
	...

000b82b0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b82b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82b2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b82b4:	4a07      	ldr	r2, [pc, #28]	; (b82d4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b82b6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b82b8:	2500      	movs	r5, #0
   b82ba:	4c07      	ldr	r4, [pc, #28]	; (b82d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b82bc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b82be:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b82c0:	460a      	mov	r2, r1
   b82c2:	4629      	mov	r1, r5
   b82c4:	f006 f9ae 	bl	be624 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b82c8:	7823      	ldrb	r3, [r4, #0]
   b82ca:	2b00      	cmp	r3, #0
   b82cc:	d0fc      	beq.n	b82c8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b82ce:	2000      	movs	r0, #0
   b82d0:	b003      	add	sp, #12
   b82d2:	bd30      	pop	{r4, r5, pc}
   b82d4:	000b826d 	.word	0x000b826d
   b82d8:	2003e618 	.word	0x2003e618

000b82dc <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b82dc:	6800      	ldr	r0, [r0, #0]
   b82de:	f006 b99b 	b.w	be618 <_ZN8SPIClass8transferEh>
	...

000b82e4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b82e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82e6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b82e8:	4a06      	ldr	r2, [pc, #24]	; (b8304 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b82ea:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b82ec:	2500      	movs	r5, #0
   b82ee:	4c06      	ldr	r4, [pc, #24]	; (b8308 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b82f0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b82f2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b82f4:	462a      	mov	r2, r5
   b82f6:	f006 f995 	bl	be624 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b82fa:	7823      	ldrb	r3, [r4, #0]
   b82fc:	2b00      	cmp	r3, #0
   b82fe:	d0fc      	beq.n	b82fa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b8300:	b003      	add	sp, #12
   b8302:	bd30      	pop	{r4, r5, pc}
   b8304:	000b826d 	.word	0x000b826d
   b8308:	2003e618 	.word	0x2003e618

000b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b830c:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b830e:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b8310:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8312:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8314:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8316:	041b      	lsls	r3, r3, #16
   b8318:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b831c:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b831e:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b8320:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b8324:	bd10      	pop	{r4, pc}

000b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8326:	1843      	adds	r3, r0, r1
   b8328:	5c40      	ldrb	r0, [r0, r1]
   b832a:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b832c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b8330:	4770      	bx	lr

000b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b8332:	b410      	push	{r4}
{
    if (base == 0) {
   b8334:	b92a      	cbnz	r2, b8342 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b8336:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b8338:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b833c:	6892      	ldr	r2, [r2, #8]
   b833e:	b2c9      	uxtb	r1, r1
   b8340:	4710      	bx	r2
}
   b8342:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b8346:	b2d2      	uxtb	r2, r2
   b8348:	f007 bcf3 	b.w	bfd32 <_ZN5Print11printNumberEmh>

000b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b834c:	b912      	cbnz	r2, b8354 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b834e:	6803      	ldr	r3, [r0, #0]
   b8350:	689b      	ldr	r3, [r3, #8]
   b8352:	4718      	bx	r3
        return printNumber(val, base) + t;
   b8354:	b2d2      	uxtb	r2, r2
   b8356:	f007 bcec 	b.w	bfd32 <_ZN5Print11printNumberEmh>

000b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b835a:	b510      	push	{r4, lr}
   b835c:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b835e:	f7ff fff5 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b8362:	4620      	mov	r0, r4
    }
   b8364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b8368:	f007 bccb 	b.w	bfd02 <_ZN5Print7printlnEv>

000b836c <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b836c:	6803      	ldr	r3, [r0, #0]
   b836e:	b2c9      	uxtb	r1, r1
   b8370:	689b      	ldr	r3, [r3, #8]
   b8372:	4718      	bx	r3

000b8374 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b8374:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b8378:	8002      	strh	r2, [r0, #0]
   b837a:	2142      	movs	r1, #66	; 0x42
   b837c:	2200      	movs	r2, #0
   b837e:	b510      	push	{r4, lr}
   b8380:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8384:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b8388:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b838c:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b8390:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b8394:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b8398:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b839c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b83a0:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b83a4:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b83a8:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b83ac:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b83b0:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b83b4:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b83b8:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b83bc:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b83c0:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b83c4:	2180      	movs	r1, #128	; 0x80
   b83c6:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b83ca:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b83ce:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b83d2:	4925      	ldr	r1, [pc, #148]	; (b8468 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b83d4:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b83d8:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b83dc:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b83e0:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b83e4:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b83e8:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b83ec:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b83f0:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b83f4:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b83f8:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b83fc:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b8400:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b8404:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b8408:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b840c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b8410:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b8414:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b8418:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b841c:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b8420:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b8424:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b8428:	4910      	ldr	r1, [pc, #64]	; (b846c <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b842a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b842e:	f640 1164 	movw	r1, #2404	; 0x964
   b8432:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b8436:	2158      	movs	r1, #88	; 0x58
   b8438:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b843c:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b843e:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b8442:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b8446:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b844a:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b844e:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b8452:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b8456:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b845a:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b845e:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b8462:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b8466:	bd10      	pop	{r4, pc}
   b8468:	02020000 	.word	0x02020000
   b846c:	64640200 	.word	0x64640200

000b8470 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b8470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8472:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b8474:	460d      	mov	r5, r1
   b8476:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b847a:	b9a9      	cbnz	r1, b84a8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b847c:	b1a8      	cbz	r0, b84aa <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b847e:	f7fb fe0e 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8482:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b8486:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b848a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b848e:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8492:	b913      	cbnz	r3, b849a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b8494:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8498:	b123      	cbz	r3, b84a4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b849a:	4920      	ldr	r1, [pc, #128]	; (b851c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b849c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b84a0:	f007 fc45 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b84a4:	2001      	movs	r0, #1
   b84a6:	e011      	b.n	b84cc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b84a8:	b9b8      	cbnz	r0, b84da <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b84aa:	4628      	mov	r0, r5
   b84ac:	f7fb fdf5 	bl	b409a <_Znaj>
   b84b0:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b84b4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b84b8:	bb60      	cbnz	r0, b8514 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b84ba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b84be:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b84c2:	b923      	cbnz	r3, b84ce <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b84c4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b84c8:	b90b      	cbnz	r3, b84ce <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b84ca:	2000      	movs	r0, #0
}
   b84cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b84ce:	4914      	ldr	r1, [pc, #80]	; (b8520 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b84d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b84d4:	f007 fc2b 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   b84d8:	e7f7      	b.n	b84ca <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b84da:	4608      	mov	r0, r1
   b84dc:	f7fb fddd 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b84e0:	4606      	mov	r6, r0
   b84e2:	b940      	cbnz	r0, b84f6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b84e4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b84e8:	b91b      	cbnz	r3, b84f2 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b84ea:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b84ee:	2b00      	cmp	r3, #0
   b84f0:	d0eb      	beq.n	b84ca <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b84f2:	490c      	ldr	r1, [pc, #48]	; (b8524 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b84f4:	e7ec      	b.n	b84d0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b84f6:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b84fa:	42aa      	cmp	r2, r5
   b84fc:	bf28      	it	cs
   b84fe:	462a      	movcs	r2, r5
   b8500:	4639      	mov	r1, r7
   b8502:	f00c f861 	bl	c45c8 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b8506:	4638      	mov	r0, r7
   b8508:	f7fb fdc9 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b850c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b8510:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b8514:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b8518:	e7c4      	b.n	b84a4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b851a:	bf00      	nop
   b851c:	000c6f4c 	.word	0x000c6f4c
   b8520:	000c6f77 	.word	0x000c6f77
   b8524:	000c6fa2 	.word	0x000c6fa2

000b8528 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b8528:	290d      	cmp	r1, #13
   b852a:	f000 80cd 	beq.w	b86c8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b852e:	d809      	bhi.n	b8544 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b8530:	2902      	cmp	r1, #2
   b8532:	f000 80a7 	beq.w	b8684 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b8536:	2906      	cmp	r1, #6
   b8538:	f000 80be 	beq.w	b86b8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b853c:	2901      	cmp	r1, #1
   b853e:	d016      	beq.n	b856e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b8540:	2000      	movs	r0, #0
}
   b8542:	4770      	bx	lr
  switch (Class)
   b8544:	2913      	cmp	r1, #19
   b8546:	f000 80d4 	beq.w	b86f2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b854a:	2928      	cmp	r1, #40	; 0x28
   b854c:	f000 80dc 	beq.w	b8708 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b8550:	2910      	cmp	r1, #16
   b8552:	d1f5      	bne.n	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b8554:	2a10      	cmp	r2, #16
   b8556:	f000 80c9 	beq.w	b86ec <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b855a:	f200 80ba 	bhi.w	b86d2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b855e:	2a02      	cmp	r2, #2
   b8560:	f000 80c1 	beq.w	b86e6 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b8564:	2a03      	cmp	r2, #3
   b8566:	d1eb      	bne.n	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b8568:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b856c:	e066      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b856e:	2a26      	cmp	r2, #38	; 0x26
   b8570:	d854      	bhi.n	b861c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b8572:	2a00      	cmp	r2, #0
   b8574:	d0e4      	beq.n	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8576:	3a01      	subs	r2, #1
   b8578:	2a25      	cmp	r2, #37	; 0x25
   b857a:	d8e1      	bhi.n	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b857c:	a301      	add	r3, pc, #4	; (adr r3, b8584 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b857e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b8582:	bf00      	nop
   b8584:	000b863b 	.word	0x000b863b
   b8588:	000b8541 	.word	0x000b8541
   b858c:	000b8645 	.word	0x000b8645
   b8590:	000b8649 	.word	0x000b8649
   b8594:	000b864d 	.word	0x000b864d
   b8598:	000b8541 	.word	0x000b8541
   b859c:	000b8651 	.word	0x000b8651
   b85a0:	000b8541 	.word	0x000b8541
   b85a4:	000b8655 	.word	0x000b8655
   b85a8:	000b8541 	.word	0x000b8541
   b85ac:	000b8541 	.word	0x000b8541
   b85b0:	000b8541 	.word	0x000b8541
   b85b4:	000b8541 	.word	0x000b8541
   b85b8:	000b8541 	.word	0x000b8541
   b85bc:	000b8541 	.word	0x000b8541
   b85c0:	000b8541 	.word	0x000b8541
   b85c4:	000b8659 	.word	0x000b8659
   b85c8:	000b865d 	.word	0x000b865d
   b85cc:	000b8661 	.word	0x000b8661
   b85d0:	000b8665 	.word	0x000b8665
   b85d4:	000b8541 	.word	0x000b8541
   b85d8:	000b8541 	.word	0x000b8541
   b85dc:	000b8669 	.word	0x000b8669
   b85e0:	000b8541 	.word	0x000b8541
   b85e4:	000b8541 	.word	0x000b8541
   b85e8:	000b8541 	.word	0x000b8541
   b85ec:	000b8541 	.word	0x000b8541
   b85f0:	000b8541 	.word	0x000b8541
   b85f4:	000b8541 	.word	0x000b8541
   b85f8:	000b8541 	.word	0x000b8541
   b85fc:	000b8541 	.word	0x000b8541
   b8600:	000b8541 	.word	0x000b8541
   b8604:	000b866d 	.word	0x000b866d
   b8608:	000b8671 	.word	0x000b8671
   b860c:	000b8541 	.word	0x000b8541
   b8610:	000b8541 	.word	0x000b8541
   b8614:	000b8541 	.word	0x000b8541
   b8618:	000b8675 	.word	0x000b8675
   b861c:	2a3c      	cmp	r2, #60	; 0x3c
   b861e:	d02d      	beq.n	b867c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b8620:	d805      	bhi.n	b862e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b8622:	2a35      	cmp	r2, #53	; 0x35
   b8624:	d028      	beq.n	b8678 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b8626:	2a3b      	cmp	r2, #59	; 0x3b
   b8628:	d18a      	bne.n	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b862a:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b862c:	e006      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b862e:	2a60      	cmp	r2, #96	; 0x60
   b8630:	d026      	beq.n	b8680 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b8632:	2a61      	cmp	r2, #97	; 0x61
   b8634:	d184      	bne.n	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b8636:	6980      	ldr	r0, [r0, #24]
   b8638:	e000      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b863a:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b863c:	3800      	subs	r0, #0
   b863e:	bf18      	it	ne
   b8640:	2001      	movne	r0, #1
   b8642:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b8644:	6900      	ldr	r0, [r0, #16]
   b8646:	e7f9      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b8648:	6940      	ldr	r0, [r0, #20]
   b864a:	e7f7      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b864c:	69c0      	ldr	r0, [r0, #28]
   b864e:	e7f5      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b8650:	6a00      	ldr	r0, [r0, #32]
   b8652:	e7f3      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b8654:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8656:	e7f1      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b8658:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b865a:	e7ef      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b865c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b865e:	e7ed      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b8660:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b8662:	e7eb      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b8664:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b8666:	e7e9      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b8668:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b866a:	e7e7      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b866c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b866e:	e7e5      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b8670:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b8672:	e7e3      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b8674:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b8676:	e7e1      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b8678:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b867a:	e7df      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b867c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b867e:	e7dd      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b8680:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b8682:	e7db      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8684:	2a34      	cmp	r2, #52	; 0x34
   b8686:	d015      	beq.n	b86b4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b8688:	d806      	bhi.n	b8698 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b868a:	2a13      	cmp	r2, #19
   b868c:	d00b      	beq.n	b86a6 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b868e:	2a15      	cmp	r2, #21
   b8690:	f47f af56 	bne.w	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b8694:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b8696:	e7d1      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8698:	2a72      	cmp	r2, #114	; 0x72
   b869a:	d006      	beq.n	b86aa <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b869c:	2a73      	cmp	r2, #115	; 0x73
   b869e:	f47f af4f 	bne.w	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b86a2:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b86a4:	e7ca      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b86a6:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b86a8:	e7c8      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b86aa:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b86ac:	2b00      	cmp	r3, #0
   b86ae:	d13b      	bne.n	b8728 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b86b0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b86b2:	e7c3      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b86b4:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b86b6:	e7c1      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b86b8:	b122      	cbz	r2, b86c4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b86ba:	2a08      	cmp	r2, #8
   b86bc:	f47f af40 	bne.w	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b86c0:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b86c2:	e7bb      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b86c4:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b86c6:	e7b9      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b86c8:	2a03      	cmp	r2, #3
   b86ca:	f47f af39 	bne.w	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b86ce:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b86d0:	e7b4      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b86d2:	2a14      	cmp	r2, #20
   b86d4:	d005      	beq.n	b86e2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b86d6:	2a15      	cmp	r2, #21
   b86d8:	f47f af32 	bne.w	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b86dc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b86e0:	e7ac      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b86e2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b86e4:	e7aa      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b86e6:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b86ea:	e7a7      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b86ec:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b86f0:	e7a4      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b86f2:	2a60      	cmp	r2, #96	; 0x60
   b86f4:	d005      	beq.n	b8702 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b86f6:	2a80      	cmp	r2, #128	; 0x80
   b86f8:	f47f af22 	bne.w	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b86fc:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8700:	e79c      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8702:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8706:	e799      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8708:	2a01      	cmp	r2, #1
   b870a:	d007      	beq.n	b871c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b870c:	2a02      	cmp	r2, #2
   b870e:	d008      	beq.n	b8722 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b8710:	2a00      	cmp	r2, #0
   b8712:	f47f af15 	bne.w	b8540 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8716:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b871a:	e78f      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b871c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b8720:	e78c      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b8722:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8726:	e789      	b.n	b863c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8728:	2001      	movs	r0, #1
   b872a:	4770      	bx	lr

000b872c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b872c:	290d      	cmp	r1, #13
   b872e:	d035      	beq.n	b879c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b8730:	d807      	bhi.n	b8742 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b8732:	2902      	cmp	r1, #2
   b8734:	d019      	beq.n	b876a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8736:	2906      	cmp	r1, #6
   b8738:	d02a      	beq.n	b8790 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b873a:	2901      	cmp	r1, #1
   b873c:	d00d      	beq.n	b875a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b873e:	2000      	movs	r0, #0
}
   b8740:	4770      	bx	lr
  switch (Class)
   b8742:	2913      	cmp	r1, #19
   b8744:	d02f      	beq.n	b87a6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b8746:	2928      	cmp	r1, #40	; 0x28
   b8748:	d034      	beq.n	b87b4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b874a:	2910      	cmp	r1, #16
   b874c:	d1f7      	bne.n	b873e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b874e:	3a02      	subs	r2, #2
   b8750:	b2d2      	uxtb	r2, r2
   b8752:	2a13      	cmp	r2, #19
   b8754:	d8f3      	bhi.n	b873e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8756:	4b1f      	ldr	r3, [pc, #124]	; (b87d4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b8758:	e004      	b.n	b8764 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b875a:	3a01      	subs	r2, #1
   b875c:	b2d2      	uxtb	r2, r2
   b875e:	2a60      	cmp	r2, #96	; 0x60
   b8760:	d8ed      	bhi.n	b873e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8762:	4b1d      	ldr	r3, [pc, #116]	; (b87d8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b8764:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b8768:	4770      	bx	lr
    switch (ID)
   b876a:	2a34      	cmp	r2, #52	; 0x34
   b876c:	d027      	beq.n	b87be <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b876e:	d807      	bhi.n	b8780 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b8770:	2a13      	cmp	r2, #19
   b8772:	d026      	beq.n	b87c2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b8774:	2a15      	cmp	r2, #21
   b8776:	bf14      	ite	ne
   b8778:	2000      	movne	r0, #0
   b877a:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b877e:	4770      	bx	lr
   b8780:	2a72      	cmp	r2, #114	; 0x72
   b8782:	d020      	beq.n	b87c6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b8784:	2a73      	cmp	r2, #115	; 0x73
   b8786:	bf14      	ite	ne
   b8788:	2000      	movne	r0, #0
   b878a:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b878e:	4770      	bx	lr
    switch (ID)
   b8790:	b1e2      	cbz	r2, b87cc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b8792:	2a08      	cmp	r2, #8
   b8794:	bf14      	ite	ne
   b8796:	2000      	movne	r0, #0
   b8798:	2006      	moveq	r0, #6
   b879a:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b879c:	2a03      	cmp	r2, #3
   b879e:	bf14      	ite	ne
   b87a0:	2000      	movne	r0, #0
   b87a2:	201c      	moveq	r0, #28
   b87a4:	4770      	bx	lr
    switch (ID)
   b87a6:	2a60      	cmp	r2, #96	; 0x60
   b87a8:	d012      	beq.n	b87d0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b87aa:	2a80      	cmp	r2, #128	; 0x80
   b87ac:	bf14      	ite	ne
   b87ae:	2000      	movne	r0, #0
   b87b0:	20a4      	moveq	r0, #164	; 0xa4
   b87b2:	4770      	bx	lr
    switch (ID)
   b87b4:	2a02      	cmp	r2, #2
   b87b6:	d8c2      	bhi.n	b873e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b87b8:	4b08      	ldr	r3, [pc, #32]	; (b87dc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b87ba:	5c98      	ldrb	r0, [r3, r2]
   b87bc:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b87be:	200c      	movs	r0, #12
   b87c0:	4770      	bx	lr
   b87c2:	2048      	movs	r0, #72	; 0x48
   b87c4:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b87c6:	f44f 7004 	mov.w	r0, #528	; 0x210
   b87ca:	4770      	bx	lr
   b87cc:	2014      	movs	r0, #20
   b87ce:	4770      	bx	lr
   b87d0:	2008      	movs	r0, #8
   b87d2:	4770      	bx	lr
   b87d4:	000c7c62 	.word	0x000c7c62
   b87d8:	000c7ba0 	.word	0x000c7ba0
   b87dc:	000c7c8a 	.word	0x000c7c8a

000b87e0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b87e0:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b87e2:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b87e6:	07ca      	lsls	r2, r1, #31
   b87e8:	d415      	bmi.n	b8816 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b87ea:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b87ee:	4b59      	ldr	r3, [pc, #356]	; (b8954 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b87f0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b87f4:	429a      	cmp	r2, r3
   b87f6:	d101      	bne.n	b87fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b87f8:	078b      	lsls	r3, r1, #30
   b87fa:	d40c      	bmi.n	b8816 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b87fc:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8800:	2b47      	cmp	r3, #71	; 0x47
   b8802:	d174      	bne.n	b88ee <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8804:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8808:	f245 1441 	movw	r4, #20801	; 0x5141
   b880c:	42a3      	cmp	r3, r4
   b880e:	d104      	bne.n	b881a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b8810:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8814:	d06b      	beq.n	b88ee <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8816:	2001      	movs	r0, #1
   b8818:	e070      	b.n	b88fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b881a:	f245 1442 	movw	r4, #20802	; 0x5142
   b881e:	42a3      	cmp	r3, r4
   b8820:	d102      	bne.n	b8828 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b8822:	f011 0f08 	tst.w	r1, #8
   b8826:	e7f5      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8828:	f245 3442 	movw	r4, #21314	; 0x5342
   b882c:	42a3      	cmp	r3, r4
   b882e:	d102      	bne.n	b8836 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b8830:	f011 0f10 	tst.w	r1, #16
   b8834:	e7ee      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8836:	f244 1447 	movw	r4, #16711	; 0x4147
   b883a:	42a3      	cmp	r3, r4
   b883c:	d102      	bne.n	b8844 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b883e:	f011 0f20 	tst.w	r1, #32
   b8842:	e7e7      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b8844:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8848:	42a3      	cmp	r3, r4
   b884a:	d102      	bne.n	b8852 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b884c:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8850:	e7e0      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b8852:	f245 144c 	movw	r4, #20812	; 0x514c
   b8856:	42a3      	cmp	r3, r4
   b8858:	d102      	bne.n	b8860 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b885a:	f011 0f80 	tst.w	r1, #128	; 0x80
   b885e:	e7d9      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b8860:	f245 114e 	movw	r1, #20814	; 0x514e
   b8864:	428b      	cmp	r3, r1
   b8866:	d104      	bne.n	b8872 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b8868:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b886c:	f013 0f01 	tst.w	r3, #1
   b8870:	e7d0      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b8872:	f245 314e 	movw	r1, #21326	; 0x534e
   b8876:	428b      	cmp	r3, r1
   b8878:	d104      	bne.n	b8884 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b887a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b887e:	f013 0f02 	tst.w	r3, #2
   b8882:	e7c7      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b8884:	f245 1150 	movw	r1, #20816	; 0x5150
   b8888:	428b      	cmp	r3, r1
   b888a:	d104      	bne.n	b8896 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b888c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8890:	f013 0f04 	tst.w	r3, #4
   b8894:	e7be      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8896:	f245 1151 	movw	r1, #20817	; 0x5151
   b889a:	428b      	cmp	r3, r1
   b889c:	d104      	bne.n	b88a8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b889e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b88a2:	f013 0f08 	tst.w	r3, #8
   b88a6:	e7b5      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b88a8:	f245 3152 	movw	r1, #21330	; 0x5352
   b88ac:	428b      	cmp	r3, r1
   b88ae:	d104      	bne.n	b88ba <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b88b0:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b88b4:	f013 0f10 	tst.w	r3, #16
   b88b8:	e7ac      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b88ba:	f244 1153 	movw	r1, #16723	; 0x4153
   b88be:	428b      	cmp	r3, r1
   b88c0:	d104      	bne.n	b88cc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b88c2:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b88c6:	f013 0f20 	tst.w	r3, #32
   b88ca:	e7a3      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b88cc:	f245 4153 	movw	r1, #21587	; 0x5453
   b88d0:	428b      	cmp	r3, r1
   b88d2:	d104      	bne.n	b88de <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b88d4:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b88d8:	f013 0f40 	tst.w	r3, #64	; 0x40
   b88dc:	e79a      	b.n	b8814 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b88de:	f245 6153 	movw	r1, #22099	; 0x5653
   b88e2:	428b      	cmp	r3, r1
   b88e4:	d103      	bne.n	b88ee <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b88e6:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b88ea:	2b00      	cmp	r3, #0
   b88ec:	db93      	blt.n	b8816 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b88ee:	4b1a      	ldr	r3, [pc, #104]	; (b8958 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b88f0:	429a      	cmp	r2, r3
   b88f2:	d104      	bne.n	b88fe <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b88f4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b88f8:	f000 0001 	and.w	r0, r0, #1
}
   b88fc:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b88fe:	4b17      	ldr	r3, [pc, #92]	; (b895c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8900:	429a      	cmp	r2, r3
   b8902:	d104      	bne.n	b890e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8904:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8908:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b890c:	e7f6      	b.n	b88fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b890e:	4b14      	ldr	r3, [pc, #80]	; (b8960 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8910:	429a      	cmp	r2, r3
   b8912:	d104      	bne.n	b891e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8914:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8918:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b891c:	e7ee      	b.n	b88fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b891e:	4b11      	ldr	r3, [pc, #68]	; (b8964 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8920:	429a      	cmp	r2, r3
   b8922:	d104      	bne.n	b892e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8924:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8928:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b892c:	e7e6      	b.n	b88fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b892e:	4b0e      	ldr	r3, [pc, #56]	; (b8968 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b8930:	429a      	cmp	r2, r3
   b8932:	d104      	bne.n	b893e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8934:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8938:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b893c:	e7de      	b.n	b88fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b893e:	4b0b      	ldr	r3, [pc, #44]	; (b896c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b8940:	429a      	cmp	r2, r3
   b8942:	d104      	bne.n	b894e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b8944:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8948:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b894c:	e7d6      	b.n	b88fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b894e:	2000      	movs	r0, #0
   b8950:	e7d4      	b.n	b88fc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b8952:	bf00      	nop
   b8954:	4d544400 	.word	0x4d544400
   b8958:	4d4c5200 	.word	0x4d4c5200
   b895c:	434d5200 	.word	0x434d5200
   b8960:	54585400 	.word	0x54585400
   b8964:	574c5600 	.word	0x574c5600
   b8968:	47545600 	.word	0x47545600
   b896c:	41445a00 	.word	0x41445a00

000b8970 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8970:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8974:	2b2a      	cmp	r3, #42	; 0x2a
   b8976:	d157      	bne.n	b8a28 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8978:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b897c:	2b47      	cmp	r3, #71	; 0x47
   b897e:	d153      	bne.n	b8a28 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8980:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8984:	4a29      	ldr	r2, [pc, #164]	; (b8a2c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b898a:	4293      	cmp	r3, r2
   b898c:	d011      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b898e:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8992:	2a47      	cmp	r2, #71	; 0x47
   b8994:	d11a      	bne.n	b89cc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8996:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b899a:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b899e:	3941      	subs	r1, #65	; 0x41
   b89a0:	b289      	uxth	r1, r1
   b89a2:	2910      	cmp	r1, #16
   b89a4:	d907      	bls.n	b89b6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b89a6:	f022 0110 	bic.w	r1, r2, #16
   b89aa:	f245 3042 	movw	r0, #21314	; 0x5342
   b89ae:	4281      	cmp	r1, r0
   b89b0:	d129      	bne.n	b8a06 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b89b2:	2001      	movs	r0, #1
}
   b89b4:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b89b6:	481e      	ldr	r0, [pc, #120]	; (b8a30 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b89b8:	fa20 f101 	lsr.w	r1, r0, r1
   b89bc:	07c9      	lsls	r1, r1, #31
   b89be:	d4f8      	bmi.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b89c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b89c4:	f245 4153 	movw	r1, #21587	; 0x5453
   b89c8:	428a      	cmp	r2, r1
   b89ca:	d0f2      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b89cc:	4a19      	ldr	r2, [pc, #100]	; (b8a34 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b89ce:	4293      	cmp	r3, r2
   b89d0:	d0ef      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b89d2:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b89d6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b89da:	4293      	cmp	r3, r2
   b89dc:	d0e9      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b89de:	4a16      	ldr	r2, [pc, #88]	; (b8a38 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b89e0:	4293      	cmp	r3, r2
   b89e2:	d0e6      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b89e4:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b89e8:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b89ec:	4293      	cmp	r3, r2
   b89ee:	d0e0      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b89f0:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b89f4:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b89f8:	4293      	cmp	r3, r2
   b89fa:	d0da      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b89fc:	480f      	ldr	r0, [pc, #60]	; (b8a3c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b89fe:	1a1b      	subs	r3, r3, r0
   b8a00:	4258      	negs	r0, r3
   b8a02:	4158      	adcs	r0, r3
   b8a04:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8a06:	f244 1147 	movw	r1, #16711	; 0x4147
   b8a0a:	428a      	cmp	r2, r1
   b8a0c:	d0d1      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b8a0e:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8a12:	428a      	cmp	r2, r1
   b8a14:	d0cd      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8a16:	f245 314e 	movw	r1, #21326	; 0x534e
   b8a1a:	428a      	cmp	r2, r1
   b8a1c:	d0c9      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b8a1e:	f244 1153 	movw	r1, #16723	; 0x4153
   b8a22:	428a      	cmp	r2, r1
   b8a24:	d0c5      	beq.n	b89b2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8a26:	e7cb      	b.n	b89c0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8a28:	2000      	movs	r0, #0
   b8a2a:	4770      	bx	lr
   b8a2c:	4d544400 	.word	0x4d544400
   b8a30:	0001a803 	.word	0x0001a803
   b8a34:	4d4c5200 	.word	0x4d4c5200
   b8a38:	54585400 	.word	0x54585400
   b8a3c:	41445a00 	.word	0x41445a00

000b8a40 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8a40:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b8a42:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8a46:	07ca      	lsls	r2, r1, #31
   b8a48:	d415      	bmi.n	b8a76 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8a4a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8a4e:	4b59      	ldr	r3, [pc, #356]	; (b8bb4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8a50:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8a54:	429a      	cmp	r2, r3
   b8a56:	d101      	bne.n	b8a5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8a58:	078b      	lsls	r3, r1, #30
   b8a5a:	d40c      	bmi.n	b8a76 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8a5c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8a60:	2b47      	cmp	r3, #71	; 0x47
   b8a62:	d174      	bne.n	b8b4e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b8a64:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8a68:	f245 1441 	movw	r4, #20801	; 0x5141
   b8a6c:	42a3      	cmp	r3, r4
   b8a6e:	d104      	bne.n	b8a7a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8a70:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8a74:	d06b      	beq.n	b8b4e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8a76:	2001      	movs	r0, #1
   b8a78:	e070      	b.n	b8b5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8a7a:	f245 1442 	movw	r4, #20802	; 0x5142
   b8a7e:	42a3      	cmp	r3, r4
   b8a80:	d102      	bne.n	b8a88 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8a82:	f011 0f08 	tst.w	r1, #8
   b8a86:	e7f5      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8a88:	f245 3442 	movw	r4, #21314	; 0x5342
   b8a8c:	42a3      	cmp	r3, r4
   b8a8e:	d102      	bne.n	b8a96 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8a90:	f011 0f10 	tst.w	r1, #16
   b8a94:	e7ee      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8a96:	f244 1447 	movw	r4, #16711	; 0x4147
   b8a9a:	42a3      	cmp	r3, r4
   b8a9c:	d102      	bne.n	b8aa4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b8a9e:	f011 0f20 	tst.w	r1, #32
   b8aa2:	e7e7      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8aa4:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8aa8:	42a3      	cmp	r3, r4
   b8aaa:	d102      	bne.n	b8ab2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8aac:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8ab0:	e7e0      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8ab2:	f245 144c 	movw	r4, #20812	; 0x514c
   b8ab6:	42a3      	cmp	r3, r4
   b8ab8:	d102      	bne.n	b8ac0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8aba:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8abe:	e7d9      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8ac0:	f245 114e 	movw	r1, #20814	; 0x514e
   b8ac4:	428b      	cmp	r3, r1
   b8ac6:	d104      	bne.n	b8ad2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8ac8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8acc:	f013 0f01 	tst.w	r3, #1
   b8ad0:	e7d0      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8ad2:	f245 314e 	movw	r1, #21326	; 0x534e
   b8ad6:	428b      	cmp	r3, r1
   b8ad8:	d104      	bne.n	b8ae4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8ada:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8ade:	f013 0f02 	tst.w	r3, #2
   b8ae2:	e7c7      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8ae4:	f245 1150 	movw	r1, #20816	; 0x5150
   b8ae8:	428b      	cmp	r3, r1
   b8aea:	d104      	bne.n	b8af6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8aec:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8af0:	f013 0f04 	tst.w	r3, #4
   b8af4:	e7be      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8af6:	f245 1151 	movw	r1, #20817	; 0x5151
   b8afa:	428b      	cmp	r3, r1
   b8afc:	d104      	bne.n	b8b08 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b8afe:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b02:	f013 0f08 	tst.w	r3, #8
   b8b06:	e7b5      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8b08:	f245 3152 	movw	r1, #21330	; 0x5352
   b8b0c:	428b      	cmp	r3, r1
   b8b0e:	d104      	bne.n	b8b1a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8b10:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b14:	f013 0f10 	tst.w	r3, #16
   b8b18:	e7ac      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8b1a:	f244 1153 	movw	r1, #16723	; 0x4153
   b8b1e:	428b      	cmp	r3, r1
   b8b20:	d104      	bne.n	b8b2c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8b22:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b26:	f013 0f20 	tst.w	r3, #32
   b8b2a:	e7a3      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8b2c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8b30:	428b      	cmp	r3, r1
   b8b32:	d104      	bne.n	b8b3e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8b34:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8b38:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8b3c:	e79a      	b.n	b8a74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b8b3e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8b42:	428b      	cmp	r3, r1
   b8b44:	d103      	bne.n	b8b4e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8b46:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8b4a:	2b00      	cmp	r3, #0
   b8b4c:	db93      	blt.n	b8a76 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b8b4e:	4b1a      	ldr	r3, [pc, #104]	; (b8bb8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8b50:	429a      	cmp	r2, r3
   b8b52:	d104      	bne.n	b8b5e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b8b54:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8b58:	f000 0001 	and.w	r0, r0, #1
}
   b8b5c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b8b5e:	4b17      	ldr	r3, [pc, #92]	; (b8bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b8b60:	429a      	cmp	r2, r3
   b8b62:	d104      	bne.n	b8b6e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b8b64:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8b68:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8b6c:	e7f6      	b.n	b8b5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b8b6e:	4b14      	ldr	r3, [pc, #80]	; (b8bc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8b70:	429a      	cmp	r2, r3
   b8b72:	d104      	bne.n	b8b7e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8b74:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8b78:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8b7c:	e7ee      	b.n	b8b5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b8b7e:	4b11      	ldr	r3, [pc, #68]	; (b8bc4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8b80:	429a      	cmp	r2, r3
   b8b82:	d104      	bne.n	b8b8e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8b84:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8b88:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8b8c:	e7e6      	b.n	b8b5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b8b8e:	4b0e      	ldr	r3, [pc, #56]	; (b8bc8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8b90:	429a      	cmp	r2, r3
   b8b92:	d104      	bne.n	b8b9e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8b94:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8b98:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8b9c:	e7de      	b.n	b8b5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b8b9e:	4b0b      	ldr	r3, [pc, #44]	; (b8bcc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8ba0:	429a      	cmp	r2, r3
   b8ba2:	d104      	bne.n	b8bae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8ba4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8ba8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8bac:	e7d6      	b.n	b8b5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b8bae:	2000      	movs	r0, #0
   b8bb0:	e7d4      	b.n	b8b5c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8bb2:	bf00      	nop
   b8bb4:	4d544400 	.word	0x4d544400
   b8bb8:	4d4c5200 	.word	0x4d4c5200
   b8bbc:	434d5200 	.word	0x434d5200
   b8bc0:	54585400 	.word	0x54585400
   b8bc4:	574c5600 	.word	0x574c5600
   b8bc8:	47545600 	.word	0x47545600
   b8bcc:	41445a00 	.word	0x41445a00

000b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8bd0:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8bd4:	b110      	cbz	r0, b8bdc <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8bd6:	6803      	ldr	r3, [r0, #0]
   b8bd8:	689b      	ldr	r3, [r3, #8]
   b8bda:	4718      	bx	r3
}
   b8bdc:	4770      	bx	lr
	...

000b8be0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8be2:	4b3d      	ldr	r3, [pc, #244]	; (b8cd8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8be4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8be6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8bea:	6818      	ldr	r0, [r3, #0]
   b8bec:	9000      	str	r0, [sp, #0]
   b8bee:	889b      	ldrh	r3, [r3, #4]
   b8bf0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bf4:	2205      	movs	r2, #5
   b8bf6:	4629      	mov	r1, r5
   b8bf8:	4668      	mov	r0, sp
   b8bfa:	f00b fcd5 	bl	c45a8 <memcmp>
   b8bfe:	b928      	cbnz	r0, b8c0c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8c00:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8c04:	b113      	cbz	r3, b8c0c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8c06:	2001      	movs	r0, #1
}
   b8c08:	b003      	add	sp, #12
   b8c0a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c0c:	4933      	ldr	r1, [pc, #204]	; (b8cdc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b8c0e:	4668      	mov	r0, sp
   b8c10:	f00b fd68 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c14:	2205      	movs	r2, #5
   b8c16:	4629      	mov	r1, r5
   b8c18:	4668      	mov	r0, sp
   b8c1a:	f00b fcc5 	bl	c45a8 <memcmp>
   b8c1e:	b918      	cbnz	r0, b8c28 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b8c20:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8c24:	2b00      	cmp	r3, #0
   b8c26:	d1ee      	bne.n	b8c06 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8c28:	492d      	ldr	r1, [pc, #180]	; (b8ce0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b8c2a:	4668      	mov	r0, sp
   b8c2c:	f00b fd5a 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c30:	2205      	movs	r2, #5
   b8c32:	4629      	mov	r1, r5
   b8c34:	4668      	mov	r0, sp
   b8c36:	f00b fcb7 	bl	c45a8 <memcmp>
   b8c3a:	b918      	cbnz	r0, b8c44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b8c3c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8c40:	2b00      	cmp	r3, #0
   b8c42:	d1e0      	bne.n	b8c06 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b8c44:	4927      	ldr	r1, [pc, #156]	; (b8ce4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b8c46:	4668      	mov	r0, sp
   b8c48:	f00b fd4c 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c4c:	2205      	movs	r2, #5
   b8c4e:	4629      	mov	r1, r5
   b8c50:	4668      	mov	r0, sp
   b8c52:	f00b fca9 	bl	c45a8 <memcmp>
   b8c56:	b918      	cbnz	r0, b8c60 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b8c58:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8c5c:	2b00      	cmp	r3, #0
   b8c5e:	d1d2      	bne.n	b8c06 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b8c60:	4921      	ldr	r1, [pc, #132]	; (b8ce8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b8c62:	4668      	mov	r0, sp
   b8c64:	f00b fd3e 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c68:	2205      	movs	r2, #5
   b8c6a:	4629      	mov	r1, r5
   b8c6c:	4668      	mov	r0, sp
   b8c6e:	f00b fc9b 	bl	c45a8 <memcmp>
   b8c72:	b918      	cbnz	r0, b8c7c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8c74:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8c78:	2b00      	cmp	r3, #0
   b8c7a:	d1c4      	bne.n	b8c06 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b8c7c:	491b      	ldr	r1, [pc, #108]	; (b8cec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b8c7e:	4668      	mov	r0, sp
   b8c80:	f00b fd30 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c84:	2205      	movs	r2, #5
   b8c86:	4629      	mov	r1, r5
   b8c88:	4668      	mov	r0, sp
   b8c8a:	f00b fc8d 	bl	c45a8 <memcmp>
   b8c8e:	b918      	cbnz	r0, b8c98 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8c90:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8c94:	2b00      	cmp	r3, #0
   b8c96:	d1b6      	bne.n	b8c06 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8c98:	4915      	ldr	r1, [pc, #84]	; (b8cf0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b8c9a:	4668      	mov	r0, sp
   b8c9c:	f00b fd22 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ca0:	2205      	movs	r2, #5
   b8ca2:	4629      	mov	r1, r5
   b8ca4:	4668      	mov	r0, sp
   b8ca6:	f00b fc7f 	bl	c45a8 <memcmp>
   b8caa:	b918      	cbnz	r0, b8cb4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b8cac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8cb0:	2b00      	cmp	r3, #0
   b8cb2:	d1a8      	bne.n	b8c06 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8cb4:	490f      	ldr	r1, [pc, #60]	; (b8cf4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8cb6:	4668      	mov	r0, sp
   b8cb8:	f00b fd14 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cbc:	2205      	movs	r2, #5
   b8cbe:	4629      	mov	r1, r5
   b8cc0:	4668      	mov	r0, sp
   b8cc2:	f00b fc71 	bl	c45a8 <memcmp>
   b8cc6:	b928      	cbnz	r0, b8cd4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8cc8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8ccc:	3800      	subs	r0, #0
   b8cce:	bf18      	it	ne
   b8cd0:	2001      	movne	r0, #1
   b8cd2:	e799      	b.n	b8c08 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8cd4:	2000      	movs	r0, #0
   b8cd6:	e797      	b.n	b8c08 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8cd8:	000c6ff8 	.word	0x000c6ff8
   b8cdc:	000c6fce 	.word	0x000c6fce
   b8ce0:	000c6fd4 	.word	0x000c6fd4
   b8ce4:	000c6fda 	.word	0x000c6fda
   b8ce8:	000c6fe0 	.word	0x000c6fe0
   b8cec:	000c6fe6 	.word	0x000c6fe6
   b8cf0:	000c6fec 	.word	0x000c6fec
   b8cf4:	000c6ff2 	.word	0x000c6ff2

000b8cf8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8cfa:	4b62      	ldr	r3, [pc, #392]	; (b8e84 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b8cfc:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cfe:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d02:	6818      	ldr	r0, [r3, #0]
   b8d04:	9000      	str	r0, [sp, #0]
   b8d06:	889b      	ldrh	r3, [r3, #4]
   b8d08:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d0c:	2205      	movs	r2, #5
   b8d0e:	4629      	mov	r1, r5
   b8d10:	4668      	mov	r0, sp
   b8d12:	f00b fc49 	bl	c45a8 <memcmp>
   b8d16:	b978      	cbnz	r0, b8d38 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8d18:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8d1c:	b163      	cbz	r3, b8d38 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b8d1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8d22:	b14a      	cbz	r2, b8d38 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8d24:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8d28:	2a00      	cmp	r2, #0
   b8d2a:	f040 80a3 	bne.w	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8d2e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8d32:	2b00      	cmp	r3, #0
   b8d34:	f040 809e 	bne.w	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b8d38:	4953      	ldr	r1, [pc, #332]	; (b8e88 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b8d3a:	4668      	mov	r0, sp
   b8d3c:	f00b fcd2 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d40:	2205      	movs	r2, #5
   b8d42:	4629      	mov	r1, r5
   b8d44:	4668      	mov	r0, sp
   b8d46:	f00b fc2f 	bl	c45a8 <memcmp>
   b8d4a:	b978      	cbnz	r0, b8d6c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b8d4c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8d50:	b163      	cbz	r3, b8d6c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b8d52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8d56:	b14a      	cbz	r2, b8d6c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b8d58:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8d5c:	2a00      	cmp	r2, #0
   b8d5e:	f040 8089 	bne.w	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8d62:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8d66:	2b00      	cmp	r3, #0
   b8d68:	f040 8084 	bne.w	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b8d6c:	4947      	ldr	r1, [pc, #284]	; (b8e8c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b8d6e:	4668      	mov	r0, sp
   b8d70:	f00b fcb8 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d74:	2205      	movs	r2, #5
   b8d76:	4629      	mov	r1, r5
   b8d78:	4668      	mov	r0, sp
   b8d7a:	f00b fc15 	bl	c45a8 <memcmp>
   b8d7e:	b968      	cbnz	r0, b8d9c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b8d80:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8d84:	b153      	cbz	r3, b8d9c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8d86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8d8a:	b13a      	cbz	r2, b8d9c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b8d8c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8d90:	2a00      	cmp	r2, #0
   b8d92:	d16f      	bne.n	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8d94:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8d98:	2b00      	cmp	r3, #0
   b8d9a:	d16b      	bne.n	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b8d9c:	493c      	ldr	r1, [pc, #240]	; (b8e90 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b8d9e:	4668      	mov	r0, sp
   b8da0:	f00b fca0 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da4:	2205      	movs	r2, #5
   b8da6:	4629      	mov	r1, r5
   b8da8:	4668      	mov	r0, sp
   b8daa:	f00b fbfd 	bl	c45a8 <memcmp>
   b8dae:	b968      	cbnz	r0, b8dcc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8db0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8db4:	b153      	cbz	r3, b8dcc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8db6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8dba:	b13a      	cbz	r2, b8dcc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b8dbc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8dc0:	2a00      	cmp	r2, #0
   b8dc2:	d157      	bne.n	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8dc4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8dc8:	2b00      	cmp	r3, #0
   b8dca:	d153      	bne.n	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b8dcc:	4931      	ldr	r1, [pc, #196]	; (b8e94 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b8dce:	4668      	mov	r0, sp
   b8dd0:	f00b fc88 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd4:	2205      	movs	r2, #5
   b8dd6:	4629      	mov	r1, r5
   b8dd8:	4668      	mov	r0, sp
   b8dda:	f00b fbe5 	bl	c45a8 <memcmp>
   b8dde:	b968      	cbnz	r0, b8dfc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8de0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8de4:	b153      	cbz	r3, b8dfc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8de6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8dea:	b13a      	cbz	r2, b8dfc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b8dec:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8df0:	2a00      	cmp	r2, #0
   b8df2:	d13f      	bne.n	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8df4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8df8:	2b00      	cmp	r3, #0
   b8dfa:	d13b      	bne.n	b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b8dfc:	4926      	ldr	r1, [pc, #152]	; (b8e98 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b8dfe:	4668      	mov	r0, sp
   b8e00:	f00b fc70 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e04:	2205      	movs	r2, #5
   b8e06:	4629      	mov	r1, r5
   b8e08:	4668      	mov	r0, sp
   b8e0a:	f00b fbcd 	bl	c45a8 <memcmp>
   b8e0e:	b958      	cbnz	r0, b8e28 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b8e10:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8e14:	b143      	cbz	r3, b8e28 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8e16:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8e1a:	b12a      	cbz	r2, b8e28 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b8e1c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8e20:	bb42      	cbnz	r2, b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8e22:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8e26:	bb2b      	cbnz	r3, b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b8e28:	491c      	ldr	r1, [pc, #112]	; (b8e9c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b8e2a:	4668      	mov	r0, sp
   b8e2c:	f00b fc5a 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e30:	2205      	movs	r2, #5
   b8e32:	4629      	mov	r1, r5
   b8e34:	4668      	mov	r0, sp
   b8e36:	f00b fbb7 	bl	c45a8 <memcmp>
   b8e3a:	b940      	cbnz	r0, b8e4e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b8e3c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8e40:	b12b      	cbz	r3, b8e4e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b8e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b8e44:	b11a      	cbz	r2, b8e4e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b8e46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8e48:	b9a2      	cbnz	r2, b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8e4c:	b993      	cbnz	r3, b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b8e4e:	4914      	ldr	r1, [pc, #80]	; (b8ea0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b8e50:	4668      	mov	r0, sp
   b8e52:	f00b fc47 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e56:	2205      	movs	r2, #5
   b8e58:	4629      	mov	r1, r5
   b8e5a:	4668      	mov	r0, sp
   b8e5c:	f00b fba4 	bl	c45a8 <memcmp>
   b8e60:	b958      	cbnz	r0, b8e7a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b8e62:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8e66:	b153      	cbz	r3, b8e7e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b8e68:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8e6a:	b120      	cbz	r0, b8e76 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b8e6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8e6e:	b90a      	cbnz	r2, b8e74 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8e70:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b8e72:	b100      	cbz	r0, b8e76 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b8e74:	2001      	movs	r0, #1
}
   b8e76:	b003      	add	sp, #12
   b8e78:	bd30      	pop	{r4, r5, pc}
  return false;
   b8e7a:	2000      	movs	r0, #0
   b8e7c:	e7fb      	b.n	b8e76 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8e7e:	4618      	mov	r0, r3
   b8e80:	e7f9      	b.n	b8e76 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8e82:	bf00      	nop
   b8e84:	000c6ff8 	.word	0x000c6ff8
   b8e88:	000c6fce 	.word	0x000c6fce
   b8e8c:	000c6fd4 	.word	0x000c6fd4
   b8e90:	000c6fda 	.word	0x000c6fda
   b8e94:	000c6fe0 	.word	0x000c6fe0
   b8e98:	000c6fe6 	.word	0x000c6fe6
   b8e9c:	000c6fec 	.word	0x000c6fec
   b8ea0:	000c6ff2 	.word	0x000c6ff2

000b8ea4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8ea6:	4b38      	ldr	r3, [pc, #224]	; (b8f88 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8ea8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eaa:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8eae:	6818      	ldr	r0, [r3, #0]
   b8eb0:	9000      	str	r0, [sp, #0]
   b8eb2:	889b      	ldrh	r3, [r3, #4]
   b8eb4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eb8:	2205      	movs	r2, #5
   b8eba:	4629      	mov	r1, r5
   b8ebc:	4668      	mov	r0, sp
   b8ebe:	f00b fb73 	bl	c45a8 <memcmp>
   b8ec2:	b920      	cbnz	r0, b8ece <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8ec4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8ec8:	3001      	adds	r0, #1
}
   b8eca:	b003      	add	sp, #12
   b8ecc:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8ece:	492f      	ldr	r1, [pc, #188]	; (b8f8c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8ed0:	4668      	mov	r0, sp
   b8ed2:	f00b fc07 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ed6:	2205      	movs	r2, #5
   b8ed8:	4629      	mov	r1, r5
   b8eda:	4668      	mov	r0, sp
   b8edc:	f00b fb64 	bl	c45a8 <memcmp>
   b8ee0:	b910      	cbnz	r0, b8ee8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8ee2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8ee6:	e7ef      	b.n	b8ec8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8ee8:	4929      	ldr	r1, [pc, #164]	; (b8f90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b8eea:	4668      	mov	r0, sp
   b8eec:	f00b fbfa 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ef0:	2205      	movs	r2, #5
   b8ef2:	4629      	mov	r1, r5
   b8ef4:	4668      	mov	r0, sp
   b8ef6:	f00b fb57 	bl	c45a8 <memcmp>
   b8efa:	b910      	cbnz	r0, b8f02 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b8efc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8f00:	e7e2      	b.n	b8ec8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8f02:	4924      	ldr	r1, [pc, #144]	; (b8f94 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8f04:	4668      	mov	r0, sp
   b8f06:	f00b fbed 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f0a:	2205      	movs	r2, #5
   b8f0c:	4629      	mov	r1, r5
   b8f0e:	4668      	mov	r0, sp
   b8f10:	f00b fb4a 	bl	c45a8 <memcmp>
   b8f14:	b910      	cbnz	r0, b8f1c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b8f16:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8f1a:	e7d5      	b.n	b8ec8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8f1c:	491e      	ldr	r1, [pc, #120]	; (b8f98 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b8f1e:	4668      	mov	r0, sp
   b8f20:	f00b fbe0 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f24:	2205      	movs	r2, #5
   b8f26:	4629      	mov	r1, r5
   b8f28:	4668      	mov	r0, sp
   b8f2a:	f00b fb3d 	bl	c45a8 <memcmp>
   b8f2e:	b910      	cbnz	r0, b8f36 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b8f30:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8f34:	e7c8      	b.n	b8ec8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8f36:	4919      	ldr	r1, [pc, #100]	; (b8f9c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b8f38:	4668      	mov	r0, sp
   b8f3a:	f00b fbd3 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f3e:	2205      	movs	r2, #5
   b8f40:	4629      	mov	r1, r5
   b8f42:	4668      	mov	r0, sp
   b8f44:	f00b fb30 	bl	c45a8 <memcmp>
   b8f48:	b910      	cbnz	r0, b8f50 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b8f4a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8f4e:	e7bb      	b.n	b8ec8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8f50:	4913      	ldr	r1, [pc, #76]	; (b8fa0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b8f52:	4668      	mov	r0, sp
   b8f54:	f00b fbc6 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f58:	2205      	movs	r2, #5
   b8f5a:	4629      	mov	r1, r5
   b8f5c:	4668      	mov	r0, sp
   b8f5e:	f00b fb23 	bl	c45a8 <memcmp>
   b8f62:	b910      	cbnz	r0, b8f6a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b8f64:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8f68:	e7ae      	b.n	b8ec8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8f6a:	490e      	ldr	r1, [pc, #56]	; (b8fa4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b8f6c:	4668      	mov	r0, sp
   b8f6e:	f00b fbb9 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f72:	2205      	movs	r2, #5
   b8f74:	4629      	mov	r1, r5
   b8f76:	4668      	mov	r0, sp
   b8f78:	f00b fb16 	bl	c45a8 <memcmp>
   b8f7c:	b910      	cbnz	r0, b8f84 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b8f7e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8f82:	e7a1      	b.n	b8ec8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b8f84:	2000      	movs	r0, #0
   b8f86:	e7a0      	b.n	b8eca <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b8f88:	000c6ff8 	.word	0x000c6ff8
   b8f8c:	000c6fce 	.word	0x000c6fce
   b8f90:	000c6fd4 	.word	0x000c6fd4
   b8f94:	000c6fda 	.word	0x000c6fda
   b8f98:	000c6fe0 	.word	0x000c6fe0
   b8f9c:	000c6fe6 	.word	0x000c6fe6
   b8fa0:	000c6fec 	.word	0x000c6fec
   b8fa4:	000c6ff2 	.word	0x000c6ff2

000b8fa8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8faa:	4b38      	ldr	r3, [pc, #224]	; (b908c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b8fac:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fae:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8fb2:	6818      	ldr	r0, [r3, #0]
   b8fb4:	9000      	str	r0, [sp, #0]
   b8fb6:	889b      	ldrh	r3, [r3, #4]
   b8fb8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fbc:	2205      	movs	r2, #5
   b8fbe:	4629      	mov	r1, r5
   b8fc0:	4668      	mov	r0, sp
   b8fc2:	f00b faf1 	bl	c45a8 <memcmp>
   b8fc6:	b920      	cbnz	r0, b8fd2 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8fc8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8fcc:	3002      	adds	r0, #2
}
   b8fce:	b003      	add	sp, #12
   b8fd0:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8fd2:	492f      	ldr	r1, [pc, #188]	; (b9090 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8fd4:	4668      	mov	r0, sp
   b8fd6:	f00b fb85 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fda:	2205      	movs	r2, #5
   b8fdc:	4629      	mov	r1, r5
   b8fde:	4668      	mov	r0, sp
   b8fe0:	f00b fae2 	bl	c45a8 <memcmp>
   b8fe4:	b910      	cbnz	r0, b8fec <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8fe6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8fea:	e7ef      	b.n	b8fcc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8fec:	4929      	ldr	r1, [pc, #164]	; (b9094 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b8fee:	4668      	mov	r0, sp
   b8ff0:	f00b fb78 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ff4:	2205      	movs	r2, #5
   b8ff6:	4629      	mov	r1, r5
   b8ff8:	4668      	mov	r0, sp
   b8ffa:	f00b fad5 	bl	c45a8 <memcmp>
   b8ffe:	b910      	cbnz	r0, b9006 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b9000:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9004:	e7e2      	b.n	b8fcc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9006:	4924      	ldr	r1, [pc, #144]	; (b9098 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b9008:	4668      	mov	r0, sp
   b900a:	f00b fb6b 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b900e:	2205      	movs	r2, #5
   b9010:	4629      	mov	r1, r5
   b9012:	4668      	mov	r0, sp
   b9014:	f00b fac8 	bl	c45a8 <memcmp>
   b9018:	b910      	cbnz	r0, b9020 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b901a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b901e:	e7d5      	b.n	b8fcc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9020:	491e      	ldr	r1, [pc, #120]	; (b909c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b9022:	4668      	mov	r0, sp
   b9024:	f00b fb5e 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9028:	2205      	movs	r2, #5
   b902a:	4629      	mov	r1, r5
   b902c:	4668      	mov	r0, sp
   b902e:	f00b fabb 	bl	c45a8 <memcmp>
   b9032:	b910      	cbnz	r0, b903a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b9034:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9038:	e7c8      	b.n	b8fcc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b903a:	4919      	ldr	r1, [pc, #100]	; (b90a0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b903c:	4668      	mov	r0, sp
   b903e:	f00b fb51 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9042:	2205      	movs	r2, #5
   b9044:	4629      	mov	r1, r5
   b9046:	4668      	mov	r0, sp
   b9048:	f00b faae 	bl	c45a8 <memcmp>
   b904c:	b910      	cbnz	r0, b9054 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b904e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9052:	e7bb      	b.n	b8fcc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9054:	4913      	ldr	r1, [pc, #76]	; (b90a4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b9056:	4668      	mov	r0, sp
   b9058:	f00b fb44 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b905c:	2205      	movs	r2, #5
   b905e:	4629      	mov	r1, r5
   b9060:	4668      	mov	r0, sp
   b9062:	f00b faa1 	bl	c45a8 <memcmp>
   b9066:	b910      	cbnz	r0, b906e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b9068:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b906c:	e7ae      	b.n	b8fcc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b906e:	490e      	ldr	r1, [pc, #56]	; (b90a8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b9070:	4668      	mov	r0, sp
   b9072:	f00b fb37 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9076:	2205      	movs	r2, #5
   b9078:	4629      	mov	r1, r5
   b907a:	4668      	mov	r0, sp
   b907c:	f00b fa94 	bl	c45a8 <memcmp>
   b9080:	b910      	cbnz	r0, b9088 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b9082:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9086:	e7a1      	b.n	b8fcc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b9088:	2000      	movs	r0, #0
   b908a:	e7a0      	b.n	b8fce <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b908c:	000c6ff8 	.word	0x000c6ff8
   b9090:	000c6fce 	.word	0x000c6fce
   b9094:	000c6fd4 	.word	0x000c6fd4
   b9098:	000c6fda 	.word	0x000c6fda
   b909c:	000c6fe0 	.word	0x000c6fe0
   b90a0:	000c6fe6 	.word	0x000c6fe6
   b90a4:	000c6fec 	.word	0x000c6fec
   b90a8:	000c6ff2 	.word	0x000c6ff2

000b90ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b90ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b90ae:	4b39      	ldr	r3, [pc, #228]	; (b9194 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b90b0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90b2:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b90b6:	6818      	ldr	r0, [r3, #0]
   b90b8:	9000      	str	r0, [sp, #0]
   b90ba:	889b      	ldrh	r3, [r3, #4]
   b90bc:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90c0:	2205      	movs	r2, #5
   b90c2:	4629      	mov	r1, r5
   b90c4:	4668      	mov	r0, sp
   b90c6:	f00b fa6f 	bl	c45a8 <memcmp>
   b90ca:	b920      	cbnz	r0, b90d6 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b90cc:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b90d0:	3066      	adds	r0, #102	; 0x66
}
   b90d2:	b003      	add	sp, #12
   b90d4:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b90d6:	4930      	ldr	r1, [pc, #192]	; (b9198 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b90d8:	4668      	mov	r0, sp
   b90da:	f00b fb03 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90de:	2205      	movs	r2, #5
   b90e0:	4629      	mov	r1, r5
   b90e2:	4668      	mov	r0, sp
   b90e4:	f00b fa60 	bl	c45a8 <memcmp>
   b90e8:	b910      	cbnz	r0, b90f0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b90ea:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b90ee:	e7ef      	b.n	b90d0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b90f0:	492a      	ldr	r1, [pc, #168]	; (b919c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b90f2:	4668      	mov	r0, sp
   b90f4:	f00b faf6 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90f8:	2205      	movs	r2, #5
   b90fa:	4629      	mov	r1, r5
   b90fc:	4668      	mov	r0, sp
   b90fe:	f00b fa53 	bl	c45a8 <memcmp>
   b9102:	b910      	cbnz	r0, b910a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b9104:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9108:	e7e2      	b.n	b90d0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b910a:	4925      	ldr	r1, [pc, #148]	; (b91a0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b910c:	4668      	mov	r0, sp
   b910e:	f00b fae9 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9112:	2205      	movs	r2, #5
   b9114:	4629      	mov	r1, r5
   b9116:	4668      	mov	r0, sp
   b9118:	f00b fa46 	bl	c45a8 <memcmp>
   b911c:	b910      	cbnz	r0, b9124 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b911e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9122:	e7d5      	b.n	b90d0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9124:	491f      	ldr	r1, [pc, #124]	; (b91a4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b9126:	4668      	mov	r0, sp
   b9128:	f00b fadc 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b912c:	2205      	movs	r2, #5
   b912e:	4629      	mov	r1, r5
   b9130:	4668      	mov	r0, sp
   b9132:	f00b fa39 	bl	c45a8 <memcmp>
   b9136:	b910      	cbnz	r0, b913e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b9138:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b913c:	e7c8      	b.n	b90d0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b913e:	491a      	ldr	r1, [pc, #104]	; (b91a8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b9140:	4668      	mov	r0, sp
   b9142:	f00b facf 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9146:	2205      	movs	r2, #5
   b9148:	4629      	mov	r1, r5
   b914a:	4668      	mov	r0, sp
   b914c:	f00b fa2c 	bl	c45a8 <memcmp>
   b9150:	b910      	cbnz	r0, b9158 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b9152:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9156:	e7bb      	b.n	b90d0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9158:	4914      	ldr	r1, [pc, #80]	; (b91ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b915a:	4668      	mov	r0, sp
   b915c:	f00b fac2 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9160:	2205      	movs	r2, #5
   b9162:	4629      	mov	r1, r5
   b9164:	4668      	mov	r0, sp
   b9166:	f00b fa1f 	bl	c45a8 <memcmp>
   b916a:	b918      	cbnz	r0, b9174 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b916c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b9170:	3034      	adds	r0, #52	; 0x34
   b9172:	e7ae      	b.n	b90d2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9174:	490e      	ldr	r1, [pc, #56]	; (b91b0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b9176:	4668      	mov	r0, sp
   b9178:	f00b fab4 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b917c:	2205      	movs	r2, #5
   b917e:	4629      	mov	r1, r5
   b9180:	4668      	mov	r0, sp
   b9182:	f00b fa11 	bl	c45a8 <memcmp>
   b9186:	b910      	cbnz	r0, b918e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b9188:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b918c:	e7f0      	b.n	b9170 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b918e:	2000      	movs	r0, #0
   b9190:	e79f      	b.n	b90d2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b9192:	bf00      	nop
   b9194:	000c6ff8 	.word	0x000c6ff8
   b9198:	000c6fce 	.word	0x000c6fce
   b919c:	000c6fd4 	.word	0x000c6fd4
   b91a0:	000c6fda 	.word	0x000c6fda
   b91a4:	000c6fe0 	.word	0x000c6fe0
   b91a8:	000c6fe6 	.word	0x000c6fe6
   b91ac:	000c6fec 	.word	0x000c6fec
   b91b0:	000c6ff2 	.word	0x000c6ff2

000b91b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b91b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b91b6:	4b39      	ldr	r3, [pc, #228]	; (b929c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b91b8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91ba:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b91be:	6818      	ldr	r0, [r3, #0]
   b91c0:	9000      	str	r0, [sp, #0]
   b91c2:	889b      	ldrh	r3, [r3, #4]
   b91c4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91c8:	2205      	movs	r2, #5
   b91ca:	4629      	mov	r1, r5
   b91cc:	4668      	mov	r0, sp
   b91ce:	f00b f9eb 	bl	c45a8 <memcmp>
   b91d2:	b920      	cbnz	r0, b91de <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b91d4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b91d8:	3067      	adds	r0, #103	; 0x67
}
   b91da:	b003      	add	sp, #12
   b91dc:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b91de:	4930      	ldr	r1, [pc, #192]	; (b92a0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b91e0:	4668      	mov	r0, sp
   b91e2:	f00b fa7f 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91e6:	2205      	movs	r2, #5
   b91e8:	4629      	mov	r1, r5
   b91ea:	4668      	mov	r0, sp
   b91ec:	f00b f9dc 	bl	c45a8 <memcmp>
   b91f0:	b910      	cbnz	r0, b91f8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b91f2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b91f6:	e7ef      	b.n	b91d8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b91f8:	492a      	ldr	r1, [pc, #168]	; (b92a4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b91fa:	4668      	mov	r0, sp
   b91fc:	f00b fa72 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9200:	2205      	movs	r2, #5
   b9202:	4629      	mov	r1, r5
   b9204:	4668      	mov	r0, sp
   b9206:	f00b f9cf 	bl	c45a8 <memcmp>
   b920a:	b910      	cbnz	r0, b9212 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b920c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9210:	e7e2      	b.n	b91d8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9212:	4925      	ldr	r1, [pc, #148]	; (b92a8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b9214:	4668      	mov	r0, sp
   b9216:	f00b fa65 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b921a:	2205      	movs	r2, #5
   b921c:	4629      	mov	r1, r5
   b921e:	4668      	mov	r0, sp
   b9220:	f00b f9c2 	bl	c45a8 <memcmp>
   b9224:	b910      	cbnz	r0, b922c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b9226:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b922a:	e7d5      	b.n	b91d8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b922c:	491f      	ldr	r1, [pc, #124]	; (b92ac <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b922e:	4668      	mov	r0, sp
   b9230:	f00b fa58 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9234:	2205      	movs	r2, #5
   b9236:	4629      	mov	r1, r5
   b9238:	4668      	mov	r0, sp
   b923a:	f00b f9b5 	bl	c45a8 <memcmp>
   b923e:	b910      	cbnz	r0, b9246 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b9240:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9244:	e7c8      	b.n	b91d8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9246:	491a      	ldr	r1, [pc, #104]	; (b92b0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b9248:	4668      	mov	r0, sp
   b924a:	f00b fa4b 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b924e:	2205      	movs	r2, #5
   b9250:	4629      	mov	r1, r5
   b9252:	4668      	mov	r0, sp
   b9254:	f00b f9a8 	bl	c45a8 <memcmp>
   b9258:	b910      	cbnz	r0, b9260 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b925a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b925e:	e7bb      	b.n	b91d8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9260:	4914      	ldr	r1, [pc, #80]	; (b92b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b9262:	4668      	mov	r0, sp
   b9264:	f00b fa3e 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9268:	2205      	movs	r2, #5
   b926a:	4629      	mov	r1, r5
   b926c:	4668      	mov	r0, sp
   b926e:	f00b f99b 	bl	c45a8 <memcmp>
   b9272:	b918      	cbnz	r0, b927c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b9274:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9278:	3035      	adds	r0, #53	; 0x35
   b927a:	e7ae      	b.n	b91da <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b927c:	490e      	ldr	r1, [pc, #56]	; (b92b8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b927e:	4668      	mov	r0, sp
   b9280:	f00b fa30 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9284:	2205      	movs	r2, #5
   b9286:	4629      	mov	r1, r5
   b9288:	4668      	mov	r0, sp
   b928a:	f00b f98d 	bl	c45a8 <memcmp>
   b928e:	b910      	cbnz	r0, b9296 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9290:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9294:	e7f0      	b.n	b9278 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b9296:	2000      	movs	r0, #0
   b9298:	e79f      	b.n	b91da <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b929a:	bf00      	nop
   b929c:	000c6ff8 	.word	0x000c6ff8
   b92a0:	000c6fce 	.word	0x000c6fce
   b92a4:	000c6fd4 	.word	0x000c6fd4
   b92a8:	000c6fda 	.word	0x000c6fda
   b92ac:	000c6fe0 	.word	0x000c6fe0
   b92b0:	000c6fe6 	.word	0x000c6fe6
   b92b4:	000c6fec 	.word	0x000c6fec
   b92b8:	000c6ff2 	.word	0x000c6ff2

000b92bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b92bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b92be:	4b39      	ldr	r3, [pc, #228]	; (b93a4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b92c0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92c2:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b92c6:	6818      	ldr	r0, [r3, #0]
   b92c8:	9000      	str	r0, [sp, #0]
   b92ca:	889b      	ldrh	r3, [r3, #4]
   b92cc:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92d0:	2205      	movs	r2, #5
   b92d2:	4629      	mov	r1, r5
   b92d4:	4668      	mov	r0, sp
   b92d6:	f00b f967 	bl	c45a8 <memcmp>
   b92da:	b928      	cbnz	r0, b92e8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b92dc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b92e0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b92e4:	b003      	add	sp, #12
   b92e6:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b92e8:	492f      	ldr	r1, [pc, #188]	; (b93a8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b92ea:	4668      	mov	r0, sp
   b92ec:	f00b f9fa 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92f0:	2205      	movs	r2, #5
   b92f2:	4629      	mov	r1, r5
   b92f4:	4668      	mov	r0, sp
   b92f6:	f00b f957 	bl	c45a8 <memcmp>
   b92fa:	b910      	cbnz	r0, b9302 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b92fc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9300:	e7ee      	b.n	b92e0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9302:	492a      	ldr	r1, [pc, #168]	; (b93ac <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b9304:	4668      	mov	r0, sp
   b9306:	f00b f9ed 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b930a:	2205      	movs	r2, #5
   b930c:	4629      	mov	r1, r5
   b930e:	4668      	mov	r0, sp
   b9310:	f00b f94a 	bl	c45a8 <memcmp>
   b9314:	b910      	cbnz	r0, b931c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b9316:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b931a:	e7e1      	b.n	b92e0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b931c:	4924      	ldr	r1, [pc, #144]	; (b93b0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b931e:	4668      	mov	r0, sp
   b9320:	f00b f9e0 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9324:	2205      	movs	r2, #5
   b9326:	4629      	mov	r1, r5
   b9328:	4668      	mov	r0, sp
   b932a:	f00b f93d 	bl	c45a8 <memcmp>
   b932e:	b910      	cbnz	r0, b9336 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b9330:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9334:	e7d4      	b.n	b92e0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9336:	491f      	ldr	r1, [pc, #124]	; (b93b4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b9338:	4668      	mov	r0, sp
   b933a:	f00b f9d3 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b933e:	2205      	movs	r2, #5
   b9340:	4629      	mov	r1, r5
   b9342:	4668      	mov	r0, sp
   b9344:	f00b f930 	bl	c45a8 <memcmp>
   b9348:	b910      	cbnz	r0, b9350 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b934a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b934e:	e7c7      	b.n	b92e0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9350:	4919      	ldr	r1, [pc, #100]	; (b93b8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b9352:	4668      	mov	r0, sp
   b9354:	f00b f9c6 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9358:	2205      	movs	r2, #5
   b935a:	4629      	mov	r1, r5
   b935c:	4668      	mov	r0, sp
   b935e:	f00b f923 	bl	c45a8 <memcmp>
   b9362:	b910      	cbnz	r0, b936a <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b9364:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9368:	e7ba      	b.n	b92e0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b936a:	4914      	ldr	r1, [pc, #80]	; (b93bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b936c:	4668      	mov	r0, sp
   b936e:	f00b f9b9 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9372:	2205      	movs	r2, #5
   b9374:	4629      	mov	r1, r5
   b9376:	4668      	mov	r0, sp
   b9378:	f00b f916 	bl	c45a8 <memcmp>
   b937c:	b918      	cbnz	r0, b9386 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b937e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b9382:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9384:	e7ae      	b.n	b92e4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9386:	490e      	ldr	r1, [pc, #56]	; (b93c0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b9388:	4668      	mov	r0, sp
   b938a:	f00b f9ab 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b938e:	2205      	movs	r2, #5
   b9390:	4629      	mov	r1, r5
   b9392:	4668      	mov	r0, sp
   b9394:	f00b f908 	bl	c45a8 <memcmp>
   b9398:	b910      	cbnz	r0, b93a0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b939a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b939e:	e7f0      	b.n	b9382 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b93a0:	2000      	movs	r0, #0
   b93a2:	e79f      	b.n	b92e4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b93a4:	000c6ff8 	.word	0x000c6ff8
   b93a8:	000c6fce 	.word	0x000c6fce
   b93ac:	000c6fd4 	.word	0x000c6fd4
   b93b0:	000c6fda 	.word	0x000c6fda
   b93b4:	000c6fe0 	.word	0x000c6fe0
   b93b8:	000c6fe6 	.word	0x000c6fe6
   b93bc:	000c6fec 	.word	0x000c6fec
   b93c0:	000c6ff2 	.word	0x000c6ff2

000b93c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b93c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b93c6:	4b3a      	ldr	r3, [pc, #232]	; (b94b0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b93c8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93ca:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b93ce:	6818      	ldr	r0, [r3, #0]
   b93d0:	9000      	str	r0, [sp, #0]
   b93d2:	889b      	ldrh	r3, [r3, #4]
   b93d4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93d8:	2205      	movs	r2, #5
   b93da:	4629      	mov	r1, r5
   b93dc:	4668      	mov	r0, sp
   b93de:	f00b f8e3 	bl	c45a8 <memcmp>
   b93e2:	b930      	cbnz	r0, b93f2 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b93e4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b93e8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b93ec:	3001      	adds	r0, #1
}
   b93ee:	b003      	add	sp, #12
   b93f0:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b93f2:	4930      	ldr	r1, [pc, #192]	; (b94b4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b93f4:	4668      	mov	r0, sp
   b93f6:	f00b f975 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93fa:	2205      	movs	r2, #5
   b93fc:	4629      	mov	r1, r5
   b93fe:	4668      	mov	r0, sp
   b9400:	f00b f8d2 	bl	c45a8 <memcmp>
   b9404:	b910      	cbnz	r0, b940c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b9406:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b940a:	e7ed      	b.n	b93e8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b940c:	492a      	ldr	r1, [pc, #168]	; (b94b8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b940e:	4668      	mov	r0, sp
   b9410:	f00b f968 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9414:	2205      	movs	r2, #5
   b9416:	4629      	mov	r1, r5
   b9418:	4668      	mov	r0, sp
   b941a:	f00b f8c5 	bl	c45a8 <memcmp>
   b941e:	b910      	cbnz	r0, b9426 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b9420:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9424:	e7e0      	b.n	b93e8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9426:	4925      	ldr	r1, [pc, #148]	; (b94bc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b9428:	4668      	mov	r0, sp
   b942a:	f00b f95b 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b942e:	2205      	movs	r2, #5
   b9430:	4629      	mov	r1, r5
   b9432:	4668      	mov	r0, sp
   b9434:	f00b f8b8 	bl	c45a8 <memcmp>
   b9438:	b910      	cbnz	r0, b9440 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b943a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b943e:	e7d3      	b.n	b93e8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9440:	491f      	ldr	r1, [pc, #124]	; (b94c0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b9442:	4668      	mov	r0, sp
   b9444:	f00b f94e 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9448:	2205      	movs	r2, #5
   b944a:	4629      	mov	r1, r5
   b944c:	4668      	mov	r0, sp
   b944e:	f00b f8ab 	bl	c45a8 <memcmp>
   b9452:	b910      	cbnz	r0, b945a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b9454:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9458:	e7c6      	b.n	b93e8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b945a:	491a      	ldr	r1, [pc, #104]	; (b94c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b945c:	4668      	mov	r0, sp
   b945e:	f00b f941 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9462:	2205      	movs	r2, #5
   b9464:	4629      	mov	r1, r5
   b9466:	4668      	mov	r0, sp
   b9468:	f00b f89e 	bl	c45a8 <memcmp>
   b946c:	b910      	cbnz	r0, b9474 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b946e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9472:	e7b9      	b.n	b93e8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9474:	4914      	ldr	r1, [pc, #80]	; (b94c8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b9476:	4668      	mov	r0, sp
   b9478:	f00b f934 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b947c:	2205      	movs	r2, #5
   b947e:	4629      	mov	r1, r5
   b9480:	4668      	mov	r0, sp
   b9482:	f00b f891 	bl	c45a8 <memcmp>
   b9486:	b918      	cbnz	r0, b9490 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b9488:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b948c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b948e:	e7ad      	b.n	b93ec <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9490:	490e      	ldr	r1, [pc, #56]	; (b94cc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b9492:	4668      	mov	r0, sp
   b9494:	f00b f926 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9498:	2205      	movs	r2, #5
   b949a:	4629      	mov	r1, r5
   b949c:	4668      	mov	r0, sp
   b949e:	f00b f883 	bl	c45a8 <memcmp>
   b94a2:	b910      	cbnz	r0, b94aa <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b94a4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b94a8:	e7f0      	b.n	b948c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b94aa:	2000      	movs	r0, #0
   b94ac:	e79f      	b.n	b93ee <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b94ae:	bf00      	nop
   b94b0:	000c6ff8 	.word	0x000c6ff8
   b94b4:	000c6fce 	.word	0x000c6fce
   b94b8:	000c6fd4 	.word	0x000c6fd4
   b94bc:	000c6fda 	.word	0x000c6fda
   b94c0:	000c6fe0 	.word	0x000c6fe0
   b94c4:	000c6fe6 	.word	0x000c6fe6
   b94c8:	000c6fec 	.word	0x000c6fec
   b94cc:	000c6ff2 	.word	0x000c6ff2

000b94d0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b94d0:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b94d2:	4b30      	ldr	r3, [pc, #192]	; (b9594 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b94d4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94d6:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b94da:	6818      	ldr	r0, [r3, #0]
   b94dc:	9000      	str	r0, [sp, #0]
   b94de:	889b      	ldrh	r3, [r3, #4]
   b94e0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94e4:	2205      	movs	r2, #5
   b94e6:	4621      	mov	r1, r4
   b94e8:	4668      	mov	r0, sp
   b94ea:	f00b f85d 	bl	c45a8 <memcmp>
   b94ee:	b910      	cbnz	r0, b94f6 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b94f0:	2064      	movs	r0, #100	; 0x64
}
   b94f2:	b002      	add	sp, #8
   b94f4:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b94f6:	4928      	ldr	r1, [pc, #160]	; (b9598 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b94f8:	4668      	mov	r0, sp
   b94fa:	f00b f8f3 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94fe:	2205      	movs	r2, #5
   b9500:	4621      	mov	r1, r4
   b9502:	4668      	mov	r0, sp
   b9504:	f00b f850 	bl	c45a8 <memcmp>
   b9508:	2800      	cmp	r0, #0
   b950a:	d0f1      	beq.n	b94f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b950c:	4923      	ldr	r1, [pc, #140]	; (b959c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b950e:	4668      	mov	r0, sp
   b9510:	f00b f8e8 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9514:	2205      	movs	r2, #5
   b9516:	4621      	mov	r1, r4
   b9518:	4668      	mov	r0, sp
   b951a:	f00b f845 	bl	c45a8 <memcmp>
   b951e:	2800      	cmp	r0, #0
   b9520:	d0e6      	beq.n	b94f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b9522:	491f      	ldr	r1, [pc, #124]	; (b95a0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b9524:	4668      	mov	r0, sp
   b9526:	f00b f8dd 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b952a:	2205      	movs	r2, #5
   b952c:	4621      	mov	r1, r4
   b952e:	4668      	mov	r0, sp
   b9530:	f00b f83a 	bl	c45a8 <memcmp>
   b9534:	2800      	cmp	r0, #0
   b9536:	d0db      	beq.n	b94f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b9538:	491a      	ldr	r1, [pc, #104]	; (b95a4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b953a:	4668      	mov	r0, sp
   b953c:	f00b f8d2 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9540:	2205      	movs	r2, #5
   b9542:	4621      	mov	r1, r4
   b9544:	4668      	mov	r0, sp
   b9546:	f00b f82f 	bl	c45a8 <memcmp>
   b954a:	2800      	cmp	r0, #0
   b954c:	d0d0      	beq.n	b94f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b954e:	4916      	ldr	r1, [pc, #88]	; (b95a8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b9550:	4668      	mov	r0, sp
   b9552:	f00b f8c7 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9556:	2205      	movs	r2, #5
   b9558:	4621      	mov	r1, r4
   b955a:	4668      	mov	r0, sp
   b955c:	f00b f824 	bl	c45a8 <memcmp>
   b9560:	2800      	cmp	r0, #0
   b9562:	d0c5      	beq.n	b94f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b9564:	4911      	ldr	r1, [pc, #68]	; (b95ac <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b9566:	4668      	mov	r0, sp
   b9568:	f00b f8bc 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b956c:	2205      	movs	r2, #5
   b956e:	4621      	mov	r1, r4
   b9570:	4668      	mov	r0, sp
   b9572:	f00b f819 	bl	c45a8 <memcmp>
   b9576:	b148      	cbz	r0, b958c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b9578:	490d      	ldr	r1, [pc, #52]	; (b95b0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b957a:	4668      	mov	r0, sp
   b957c:	f00b f8b2 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9580:	2205      	movs	r2, #5
   b9582:	4621      	mov	r1, r4
   b9584:	4668      	mov	r0, sp
   b9586:	f00b f80f 	bl	c45a8 <memcmp>
   b958a:	b908      	cbnz	r0, b9590 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b958c:	2032      	movs	r0, #50	; 0x32
   b958e:	e7b0      	b.n	b94f2 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b9590:	2000      	movs	r0, #0
   b9592:	e7ae      	b.n	b94f2 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b9594:	000c6ff8 	.word	0x000c6ff8
   b9598:	000c6fce 	.word	0x000c6fce
   b959c:	000c6fd4 	.word	0x000c6fd4
   b95a0:	000c6fda 	.word	0x000c6fda
   b95a4:	000c6fe0 	.word	0x000c6fe0
   b95a8:	000c6fe6 	.word	0x000c6fe6
   b95ac:	000c6fec 	.word	0x000c6fec
   b95b0:	000c6ff2 	.word	0x000c6ff2

000b95b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b95b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b95b6:	4b38      	ldr	r3, [pc, #224]	; (b9698 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b95b8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95ba:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b95be:	6818      	ldr	r0, [r3, #0]
   b95c0:	9000      	str	r0, [sp, #0]
   b95c2:	889b      	ldrh	r3, [r3, #4]
   b95c4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95c8:	2205      	movs	r2, #5
   b95ca:	4629      	mov	r1, r5
   b95cc:	4668      	mov	r0, sp
   b95ce:	f00a ffeb 	bl	c45a8 <memcmp>
   b95d2:	b918      	cbnz	r0, b95dc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b95d4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b95d8:	b003      	add	sp, #12
   b95da:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b95dc:	492f      	ldr	r1, [pc, #188]	; (b969c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b95de:	4668      	mov	r0, sp
   b95e0:	f00b f880 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95e4:	2205      	movs	r2, #5
   b95e6:	4629      	mov	r1, r5
   b95e8:	4668      	mov	r0, sp
   b95ea:	f00a ffdd 	bl	c45a8 <memcmp>
   b95ee:	b910      	cbnz	r0, b95f6 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b95f0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b95f4:	e7f0      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b95f6:	492a      	ldr	r1, [pc, #168]	; (b96a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b95f8:	4668      	mov	r0, sp
   b95fa:	f00b f873 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95fe:	2205      	movs	r2, #5
   b9600:	4629      	mov	r1, r5
   b9602:	4668      	mov	r0, sp
   b9604:	f00a ffd0 	bl	c45a8 <memcmp>
   b9608:	b910      	cbnz	r0, b9610 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b960a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b960e:	e7e3      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9610:	4924      	ldr	r1, [pc, #144]	; (b96a4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b9612:	4668      	mov	r0, sp
   b9614:	f00b f866 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9618:	2205      	movs	r2, #5
   b961a:	4629      	mov	r1, r5
   b961c:	4668      	mov	r0, sp
   b961e:	f00a ffc3 	bl	c45a8 <memcmp>
   b9622:	b910      	cbnz	r0, b962a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b9624:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9628:	e7d6      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b962a:	491f      	ldr	r1, [pc, #124]	; (b96a8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b962c:	4668      	mov	r0, sp
   b962e:	f00b f859 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9632:	2205      	movs	r2, #5
   b9634:	4629      	mov	r1, r5
   b9636:	4668      	mov	r0, sp
   b9638:	f00a ffb6 	bl	c45a8 <memcmp>
   b963c:	b910      	cbnz	r0, b9644 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b963e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9642:	e7c9      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9644:	4919      	ldr	r1, [pc, #100]	; (b96ac <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b9646:	4668      	mov	r0, sp
   b9648:	f00b f84c 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b964c:	2205      	movs	r2, #5
   b964e:	4629      	mov	r1, r5
   b9650:	4668      	mov	r0, sp
   b9652:	f00a ffa9 	bl	c45a8 <memcmp>
   b9656:	b910      	cbnz	r0, b965e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b9658:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b965c:	e7bc      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b965e:	4914      	ldr	r1, [pc, #80]	; (b96b0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b9660:	4668      	mov	r0, sp
   b9662:	f00b f83f 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9666:	2205      	movs	r2, #5
   b9668:	4629      	mov	r1, r5
   b966a:	4668      	mov	r0, sp
   b966c:	f00a ff9c 	bl	c45a8 <memcmp>
   b9670:	b910      	cbnz	r0, b9678 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b9672:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9676:	e7af      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9678:	490e      	ldr	r1, [pc, #56]	; (b96b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b967a:	4668      	mov	r0, sp
   b967c:	f00b f832 	bl	c46e4 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9680:	2205      	movs	r2, #5
   b9682:	4629      	mov	r1, r5
   b9684:	4668      	mov	r0, sp
   b9686:	f00a ff8f 	bl	c45a8 <memcmp>
   b968a:	b910      	cbnz	r0, b9692 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b968c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9690:	e7a2      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b9692:	2000      	movs	r0, #0
   b9694:	e7a0      	b.n	b95d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b9696:	bf00      	nop
   b9698:	000c6ff8 	.word	0x000c6ff8
   b969c:	000c6fce 	.word	0x000c6fce
   b96a0:	000c6fd4 	.word	0x000c6fd4
   b96a4:	000c6fda 	.word	0x000c6fda
   b96a8:	000c6fe0 	.word	0x000c6fe0
   b96ac:	000c6fe6 	.word	0x000c6fe6
   b96b0:	000c6fec 	.word	0x000c6fec
   b96b4:	000c6ff2 	.word	0x000c6ff2

000b96b8 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b96b8:	4770      	bx	lr
	...

000b96bc <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b96bc:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b96be:	8813      	ldrh	r3, [r2, #0]
   b96c0:	4d0c      	ldr	r5, [pc, #48]	; (b96f4 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b96c2:	2b01      	cmp	r3, #1
{
   b96c4:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b96c6:	d10e      	bne.n	b96e6 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b96c8:	020a      	lsls	r2, r1, #8
   b96ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b96ce:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b96d0:	3301      	adds	r3, #1
   b96d2:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b96d4:	f7ff fff0 	bl	b96b8 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b96d8:	8820      	ldrh	r0, [r4, #0]
   b96da:	882b      	ldrh	r3, [r5, #0]
}
   b96dc:	4298      	cmp	r0, r3
   b96de:	bf14      	ite	ne
   b96e0:	2003      	movne	r0, #3
   b96e2:	2000      	moveq	r0, #0
   b96e4:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b96e6:	2b02      	cmp	r3, #2
   b96e8:	d1f2      	bne.n	b96d0 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b96ea:	882a      	ldrh	r2, [r5, #0]
   b96ec:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b96ee:	3206      	adds	r2, #6
   b96f0:	e7ed      	b.n	b96ce <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b96f2:	bf00      	nop
   b96f4:	2003e61a 	.word	0x2003e61a

000b96f8 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b96f8:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b96fa:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b96fc:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b96fe:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9700:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9702:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9706:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b970a:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b970e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b9712:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9716:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9718:	4413      	add	r3, r2
   b971a:	734b      	strb	r3, [r1, #13]
   b971c:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b971e:	b293      	uxth	r3, r2
   b9720:	429c      	cmp	r4, r3
   b9722:	d90a      	bls.n	b973a <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9724:	688b      	ldr	r3, [r1, #8]
   b9726:	7b08      	ldrb	r0, [r1, #12]
   b9728:	5c9b      	ldrb	r3, [r3, r2]
   b972a:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b972c:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b972e:	b2db      	uxtb	r3, r3
   b9730:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b9732:	4403      	add	r3, r0
   b9734:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9736:	3201      	adds	r2, #1
   b9738:	e7f1      	b.n	b971e <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b973a:	bd30      	pop	{r4, r5, pc}

000b973c <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b973c:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b9740:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b9742:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b9746:	b2c9      	uxtb	r1, r1
   b9748:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b974c:	4419      	add	r1, r3
   b974e:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b9752:	4770      	bx	lr

000b9754 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b9754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b9758:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b975c:	f10b 0b08 	add.w	fp, fp, #8
   b9760:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b9764:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9768:	f1ab 0302 	sub.w	r3, fp, #2
{
   b976c:	4604      	mov	r4, r0
   b976e:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b9770:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b9772:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9774:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b9776:	f1ba 0f00 	cmp.w	sl, #0
   b977a:	f000 80a6 	beq.w	b98ca <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b977e:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9780:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b9784:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9788:	4556      	cmp	r6, sl
   b978a:	bf28      	it	cs
   b978c:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b978e:	ebaa 0a06 	sub.w	sl, sl, r6
   b9792:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b9796:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b979a:	bf02      	ittt	eq
   b979c:	f106 36ff 	addeq.w	r6, r6, #4294967295
   b97a0:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b97a2:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b97a6:	f008 f967 	bl	c1a78 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b97aa:	f1b9 0f00 	cmp.w	r9, #0
   b97ae:	d15c      	bne.n	b986a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b97b0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97b4:	6803      	ldr	r3, [r0, #0]
   b97b6:	21b5      	movs	r1, #181	; 0xb5
   b97b8:	689b      	ldr	r3, [r3, #8]
   b97ba:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b97bc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97c0:	6803      	ldr	r3, [r0, #0]
   b97c2:	2162      	movs	r1, #98	; 0x62
   b97c4:	689b      	ldr	r3, [r3, #8]
   b97c6:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b97c8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97cc:	7829      	ldrb	r1, [r5, #0]
   b97ce:	6803      	ldr	r3, [r0, #0]
   b97d0:	689b      	ldr	r3, [r3, #8]
   b97d2:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b97d4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97d8:	7869      	ldrb	r1, [r5, #1]
   b97da:	6803      	ldr	r3, [r0, #0]
   b97dc:	689b      	ldr	r3, [r3, #8]
   b97de:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b97e0:	78a9      	ldrb	r1, [r5, #2]
   b97e2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97e6:	f7fe fdc1 	bl	b836c <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b97ea:	8869      	ldrh	r1, [r5, #2]
   b97ec:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97f0:	0a09      	lsrs	r1, r1, #8
   b97f2:	f7fe fdbb 	bl	b836c <_ZN7TwoWire5writeEi.isra.0>
   b97f6:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b97f8:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b97fa:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b97fe:	fa1f f983 	uxth.w	r9, r3
   b9802:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9806:	454a      	cmp	r2, r9
   b9808:	b2bf      	uxth	r7, r7
   b980a:	d90d      	bls.n	b9828 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b980c:	42be      	cmp	r6, r7
   b980e:	d90b      	bls.n	b9828 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9810:	68aa      	ldr	r2, [r5, #8]
   b9812:	6801      	ldr	r1, [r0, #0]
   b9814:	9301      	str	r3, [sp, #4]
   b9816:	4442      	add	r2, r8
   b9818:	688f      	ldr	r7, [r1, #8]
   b981a:	5cd1      	ldrb	r1, [r2, r3]
   b981c:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b981e:	9b01      	ldr	r3, [sp, #4]
   b9820:	3301      	adds	r3, #1
   b9822:	e7e9      	b.n	b97f8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9824:	46b9      	mov	r9, r7
   b9826:	e7a6      	b.n	b9776 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9828:	3e02      	subs	r6, #2
      startSpot += x;
   b982a:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b982c:	42b7      	cmp	r7, r6
      startSpot += x;
   b982e:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b9832:	d10c      	bne.n	b984e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9834:	6803      	ldr	r3, [r0, #0]
   b9836:	7b29      	ldrb	r1, [r5, #12]
   b9838:	689b      	ldr	r3, [r3, #8]
   b983a:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b983c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9840:	7b69      	ldrb	r1, [r5, #13]
   b9842:	6803      	ldr	r3, [r0, #0]
   b9844:	689b      	ldr	r3, [r3, #8]
   b9846:	4798      	blx	r3
        bytesSent += 2;
   b9848:	f109 0708 	add.w	r7, r9, #8
   b984c:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b984e:	455f      	cmp	r7, fp
   b9850:	d2e8      	bcs.n	b9824 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b9852:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b9856:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b985a:	f008 f914 	bl	c1a86 <_ZN7TwoWire15endTransmissionEh>
   b985e:	2800      	cmp	r0, #0
   b9860:	d0e0      	beq.n	b9824 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b9862:	200c      	movs	r0, #12
}
   b9864:	b003      	add	sp, #12
   b9866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b986a:	2200      	movs	r2, #0
   b986c:	b291      	uxth	r1, r2
   b986e:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9872:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9874:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9878:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b987a:	d910      	bls.n	b989e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b987c:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9880:	eb08 0c02 	add.w	ip, r8, r2
   b9884:	1c53      	adds	r3, r2, #1
   b9886:	45f4      	cmp	ip, lr
   b9888:	9301      	str	r3, [sp, #4]
   b988a:	da08      	bge.n	b989e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b988c:	68a9      	ldr	r1, [r5, #8]
   b988e:	6802      	ldr	r2, [r0, #0]
   b9890:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9894:	6892      	ldr	r2, [r2, #8]
   b9896:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9898:	9b01      	ldr	r3, [sp, #4]
   b989a:	461a      	mov	r2, r3
   b989c:	e7e6      	b.n	b986c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b989e:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b98a0:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b98a2:	429f      	cmp	r7, r3
      startSpot += x;
   b98a4:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b98a8:	d1d1      	bne.n	b984e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b98aa:	3e02      	subs	r6, #2
   b98ac:	42b2      	cmp	r2, r6
   b98ae:	d1ce      	bne.n	b984e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b98b0:	6803      	ldr	r3, [r0, #0]
   b98b2:	7b29      	ldrb	r1, [r5, #12]
   b98b4:	689b      	ldr	r3, [r3, #8]
   b98b6:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b98b8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b98bc:	7b69      	ldrb	r1, [r5, #13]
   b98be:	6803      	ldr	r3, [r0, #0]
   b98c0:	689b      	ldr	r3, [r3, #8]
   b98c2:	4798      	blx	r3
        bytesSent += 2;
   b98c4:	fa1f f78b 	uxth.w	r7, fp
   b98c8:	e7c1      	b.n	b984e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b98ca:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b98ce:	f008 f8de 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
   b98d2:	2800      	cmp	r0, #0
   b98d4:	d0c6      	beq.n	b9864 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b98d6:	e7c4      	b.n	b9862 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b98d8 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b98d8:	b570      	push	{r4, r5, r6, lr}
   b98da:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b98dc:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b98e0:	6803      	ldr	r3, [r0, #0]
{
   b98e2:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b98e4:	689b      	ldr	r3, [r3, #8]
   b98e6:	21b5      	movs	r1, #181	; 0xb5
   b98e8:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b98ea:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b98ee:	6803      	ldr	r3, [r0, #0]
   b98f0:	2162      	movs	r1, #98	; 0x62
   b98f2:	689b      	ldr	r3, [r3, #8]
   b98f4:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b98f6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b98fa:	7821      	ldrb	r1, [r4, #0]
   b98fc:	6803      	ldr	r3, [r0, #0]
   b98fe:	689b      	ldr	r3, [r3, #8]
   b9900:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9902:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9906:	7861      	ldrb	r1, [r4, #1]
   b9908:	6803      	ldr	r3, [r0, #0]
   b990a:	689b      	ldr	r3, [r3, #8]
   b990c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b990e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9912:	78a1      	ldrb	r1, [r4, #2]
   b9914:	6803      	ldr	r3, [r0, #0]
   b9916:	689b      	ldr	r3, [r3, #8]
   b9918:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b991a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b991e:	8861      	ldrh	r1, [r4, #2]
   b9920:	6803      	ldr	r3, [r0, #0]
   b9922:	0a09      	lsrs	r1, r1, #8
   b9924:	689b      	ldr	r3, [r3, #8]
   b9926:	4798      	blx	r3
   b9928:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b992a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b992e:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b9930:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9932:	b2b2      	uxth	r2, r6
   b9934:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9936:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9938:	d904      	bls.n	b9944 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b993a:	68a1      	ldr	r1, [r4, #8]
   b993c:	5c89      	ldrb	r1, [r1, r2]
   b993e:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9940:	3601      	adds	r6, #1
   b9942:	e7f2      	b.n	b992a <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b9944:	7b21      	ldrb	r1, [r4, #12]
   b9946:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9948:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b994c:	7b61      	ldrb	r1, [r4, #13]
   b994e:	6803      	ldr	r3, [r0, #0]
}
   b9950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b9954:	689b      	ldr	r3, [r3, #8]
   b9956:	4718      	bx	r3

000b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b9958:	b510      	push	{r4, lr}
   b995a:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b995c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9960:	f004 fe5a 	bl	be618 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b9964:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9968:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b996c:	429a      	cmp	r2, r3
   b996e:	d90b      	bls.n	b9988 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9970:	28ff      	cmp	r0, #255	; 0xff
   b9972:	d101      	bne.n	b9978 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9974:	7822      	ldrb	r2, [r4, #0]
   b9976:	b13a      	cbz	r2, b9988 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9978:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b997c:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b997e:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9982:	3301      	adds	r3, #1
   b9984:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9988:	bd10      	pop	{r4, pc}
	...

000b998c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b998c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9990:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9994:	4604      	mov	r4, r0
   b9996:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9998:	b97b      	cbnz	r3, b99ba <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b999a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b999e:	b923      	cbnz	r3, b99aa <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b99a0:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b99a4:	2b00      	cmp	r3, #0
   b99a6:	f000 80ca 	beq.w	b9b3e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b99aa:	4966      	ldr	r1, [pc, #408]	; (b9b44 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b99ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b99b0:	b004      	add	sp, #16
   b99b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b99b6:	f006 b9a0 	b.w	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b99ba:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b99be:	4a62      	ldr	r2, [pc, #392]	; (b9b48 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b99c0:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b99c2:	2600      	movs	r6, #0
   b99c4:	2301      	movs	r3, #1
   b99c6:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b99ca:	4669      	mov	r1, sp
   b99cc:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b99d0:	f8ad 300c 	strh.w	r3, [sp, #12]
   b99d4:	9200      	str	r2, [sp, #0]
   b99d6:	f88d 6004 	strb.w	r6, [sp, #4]
   b99da:	f004 fdaf 	bl	be53c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b99de:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b99e2:	4631      	mov	r1, r6
   b99e4:	f008 fb2f 	bl	c2046 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b99e8:	21b5      	movs	r1, #181	; 0xb5
   b99ea:	4620      	mov	r0, r4
   b99ec:	f7ff ffb4 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b99f0:	2162      	movs	r1, #98	; 0x62
   b99f2:	4620      	mov	r0, r4
   b99f4:	f7ff ffb0 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b99f8:	7829      	ldrb	r1, [r5, #0]
   b99fa:	4620      	mov	r0, r4
   b99fc:	f7ff ffac 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9a00:	7869      	ldrb	r1, [r5, #1]
   b9a02:	4620      	mov	r0, r4
   b9a04:	f7ff ffa8 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9a08:	78a9      	ldrb	r1, [r5, #2]
   b9a0a:	4620      	mov	r0, r4
   b9a0c:	f7ff ffa4 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9a10:	8869      	ldrh	r1, [r5, #2]
   b9a12:	4620      	mov	r0, r4
   b9a14:	0a09      	lsrs	r1, r1, #8
   b9a16:	f7ff ff9f 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9a1a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9a1e:	2b00      	cmp	r3, #0
   b9a20:	d042      	beq.n	b9aa8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9a22:	494a      	ldr	r1, [pc, #296]	; (b9b4c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9a24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a28:	f006 f967 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9a2c:	2210      	movs	r2, #16
   b9a2e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a32:	21b5      	movs	r1, #181	; 0xb5
   b9a34:	f7fe fc8a 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9a38:	4945      	ldr	r1, [pc, #276]	; (b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9a3a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a3e:	f006 f95c 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b9a42:	2210      	movs	r2, #16
   b9a44:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a48:	2162      	movs	r1, #98	; 0x62
   b9a4a:	f7fe fc7f 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9a4e:	4940      	ldr	r1, [pc, #256]	; (b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9a50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a54:	f006 f951 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9a58:	2210      	movs	r2, #16
   b9a5a:	7829      	ldrb	r1, [r5, #0]
   b9a5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a60:	f7fe fc74 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9a64:	493a      	ldr	r1, [pc, #232]	; (b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9a66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a6a:	f006 f946 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b9a6e:	2210      	movs	r2, #16
   b9a70:	7869      	ldrb	r1, [r5, #1]
   b9a72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a76:	f7fe fc69 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9a7a:	4935      	ldr	r1, [pc, #212]	; (b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9a7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a80:	f006 f93b 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9a84:	2210      	movs	r2, #16
   b9a86:	78a9      	ldrb	r1, [r5, #2]
   b9a88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a8c:	f006 f951 	bl	bfd32 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9a90:	492f      	ldr	r1, [pc, #188]	; (b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9a92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a96:	f006 f930 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9a9a:	8869      	ldrh	r1, [r5, #2]
   b9a9c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9aa0:	2210      	movs	r2, #16
   b9aa2:	0a09      	lsrs	r1, r1, #8
   b9aa4:	f006 f945 	bl	bfd32 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9aa8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9aac:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9aae:	886a      	ldrh	r2, [r5, #2]
   b9ab0:	b2b3      	uxth	r3, r6
   b9ab2:	429a      	cmp	r2, r3
   b9ab4:	d916      	bls.n	b9ae4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9ab6:	461f      	mov	r7, r3
   b9ab8:	68ab      	ldr	r3, [r5, #8]
   b9aba:	4620      	mov	r0, r4
   b9abc:	5dd9      	ldrb	r1, [r3, r7]
   b9abe:	f7ff ff4b 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9ac2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9ac6:	b15b      	cbz	r3, b9ae0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9ac8:	4641      	mov	r1, r8
   b9aca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ace:	f006 f914 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9ad2:	68ab      	ldr	r3, [r5, #8]
   b9ad4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ad8:	5dd9      	ldrb	r1, [r3, r7]
   b9ada:	2210      	movs	r2, #16
   b9adc:	f7fe fc36 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9ae0:	3601      	adds	r6, #1
   b9ae2:	e7e4      	b.n	b9aae <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9ae4:	7b29      	ldrb	r1, [r5, #12]
   b9ae6:	4620      	mov	r0, r4
   b9ae8:	f7ff ff36 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9aec:	7b69      	ldrb	r1, [r5, #13]
   b9aee:	4620      	mov	r0, r4
   b9af0:	f7ff ff32 	bl	b9958 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9af4:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9af8:	2101      	movs	r1, #1
   b9afa:	f008 faa4 	bl	c2046 <digitalWrite>
  _spiPort->endTransaction();
   b9afe:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9b02:	f004 fd01 	bl	be508 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9b06:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9b0a:	b1c3      	cbz	r3, b9b3e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9b0c:	4910      	ldr	r1, [pc, #64]	; (b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9b0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b12:	f006 f8f2 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9b16:	7b29      	ldrb	r1, [r5, #12]
   b9b18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b1c:	2210      	movs	r2, #16
   b9b1e:	f7fe fc15 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9b22:	490b      	ldr	r1, [pc, #44]	; (b9b50 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9b24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b28:	f006 f8e7 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9b2c:	7b69      	ldrb	r1, [r5, #13]
   b9b2e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b32:	2210      	movs	r2, #16
}
   b9b34:	b004      	add	sp, #16
   b9b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9b3a:	f7fe bc0e 	b.w	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b9b3e:	b004      	add	sp, #16
   b9b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9b44:	000c6ffe 	.word	0x000c6ffe
   b9b48:	000c6de8 	.word	0x000c6de8
   b9b4c:	000c7033 	.word	0x000c7033
   b9b50:	000c7f1e 	.word	0x000c7f1e

000b9b54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b9b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b9b56:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b9b5a:	4604      	mov	r4, r0
   b9b5c:	460d      	mov	r5, r1
   b9b5e:	4616      	mov	r6, r2
  if (_printDebug == true)
   b9b60:	2b00      	cmp	r3, #0
   b9b62:	f000 8082 	beq.w	b9c6a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b9b66:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9b6a:	4940      	ldr	r1, [pc, #256]	; (b9c6c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9b6c:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9b70:	f006 f8c3 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9b74:	782b      	ldrb	r3, [r5, #0]
   b9b76:	2b01      	cmp	r3, #1
   b9b78:	d13c      	bne.n	b9bf4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b9b7a:	493d      	ldr	r1, [pc, #244]	; (b9c70 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b9b7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9b80:	f006 f8bb 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9b84:	493b      	ldr	r1, [pc, #236]	; (b9c74 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9b86:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9b8a:	f006 f8b6 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b9b8e:	882b      	ldrh	r3, [r5, #0]
   b9b90:	f240 7201 	movw	r2, #1793	; 0x701
   b9b94:	4293      	cmp	r3, r2
   b9b96:	d145      	bne.n	b9c24 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9b98:	4937      	ldr	r1, [pc, #220]	; (b9c78 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b9b9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b9b9e:	f006 f8ac 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9ba2:	4936      	ldr	r1, [pc, #216]	; (b9c7c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9ba4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ba8:	f006 f8a7 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
   b9bac:	8869      	ldrh	r1, [r5, #2]
   b9bae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9bb2:	2210      	movs	r2, #16
   b9bb4:	f006 f8bd 	bl	bfd32 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9bb8:	2f01      	cmp	r7, #1
   b9bba:	d101      	bne.n	b9bc0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9bbc:	2e00      	cmp	r6, #0
   b9bbe:	d049      	beq.n	b9c54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9bc0:	492f      	ldr	r1, [pc, #188]	; (b9c80 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9bc2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9bc6:	4f2f      	ldr	r7, [pc, #188]	; (b9c84 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9bc8:	f006 f897 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
   b9bcc:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b9bce:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9bd0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9bd4:	b2b3      	uxth	r3, r6
   b9bd6:	429a      	cmp	r2, r3
   b9bd8:	d941      	bls.n	b9c5e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9bda:	4639      	mov	r1, r7
   b9bdc:	f006 f88d 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9be0:	b2b3      	uxth	r3, r6
   b9be2:	68a9      	ldr	r1, [r5, #8]
   b9be4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9be8:	5cc9      	ldrb	r1, [r1, r3]
   b9bea:	2210      	movs	r2, #16
   b9bec:	f7fe fbae 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9bf0:	3601      	adds	r6, #1
   b9bf2:	e7ec      	b.n	b9bce <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9bf4:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9bf6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9bfa:	d101      	bne.n	b9c00 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b9bfc:	4922      	ldr	r1, [pc, #136]	; (b9c88 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b9bfe:	e7bf      	b.n	b9b80 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9c00:	2b06      	cmp	r3, #6
   b9c02:	d101      	bne.n	b9c08 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9c04:	4921      	ldr	r1, [pc, #132]	; (b9c8c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9c06:	e7bb      	b.n	b9b80 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9c08:	2b0a      	cmp	r3, #10
   b9c0a:	d101      	bne.n	b9c10 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b9c0c:	4920      	ldr	r1, [pc, #128]	; (b9c90 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b9c0e:	e7b7      	b.n	b9b80 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b9c10:	4920      	ldr	r1, [pc, #128]	; (b9c94 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9c12:	f006 f872 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9c16:	7829      	ldrb	r1, [r5, #0]
   b9c18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c1c:	2210      	movs	r2, #16
   b9c1e:	f7fe fb95 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9c22:	e7af      	b.n	b9b84 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9c24:	f640 0206 	movw	r2, #2054	; 0x806
   b9c28:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b9c2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9c2e:	d101      	bne.n	b9c34 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b9c30:	4919      	ldr	r1, [pc, #100]	; (b9c98 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b9c32:	e7b4      	b.n	b9b9e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b9c34:	f640 1206 	movw	r2, #2310	; 0x906
   b9c38:	4293      	cmp	r3, r2
   b9c3a:	d101      	bne.n	b9c40 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b9c3c:	4917      	ldr	r1, [pc, #92]	; (b9c9c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b9c3e:	e7ae      	b.n	b9b9e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b9c40:	4914      	ldr	r1, [pc, #80]	; (b9c94 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9c42:	f006 f85a 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b9c46:	7869      	ldrb	r1, [r5, #1]
   b9c48:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c4c:	2210      	movs	r2, #16
   b9c4e:	f7fe fb7d 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9c52:	e7a6      	b.n	b9ba2 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b9c54:	4912      	ldr	r1, [pc, #72]	; (b9ca0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b9c56:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9c5a:	f006 f84e 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b9c5e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b9c66:	f006 b84c 	b.w	bfd02 <_ZN5Print7printlnEv>
}
   b9c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9c6c:	000c7044 	.word	0x000c7044
   b9c70:	000c7049 	.word	0x000c7049
   b9c74:	000c7059 	.word	0x000c7059
   b9c78:	000c705e 	.word	0x000c705e
   b9c7c:	000c706c 	.word	0x000c706c
   b9c80:	000c7075 	.word	0x000c7075
   b9c84:	000c7f1e 	.word	0x000c7f1e
   b9c88:	000c704d 	.word	0x000c704d
   b9c8c:	000c7051 	.word	0x000c7051
   b9c90:	000c7055 	.word	0x000c7055
   b9c94:	000c72ca 	.word	0x000c72ca
   b9c98:	000c7062 	.word	0x000c7062
   b9c9c:	000c7067 	.word	0x000c7067
   b9ca0:	000c707f 	.word	0x000c707f

000b9ca4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9ca4:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9ca6:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b9caa:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9cac:	b955      	cbnz	r5, b9cc4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b9cae:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9cb2:	b90b      	cbnz	r3, b9cb8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9cb4:	2000      	movs	r0, #0
}
   b9cb6:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9cb8:	491a      	ldr	r1, [pc, #104]	; (b9d24 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9cba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9cbe:	f006 f836 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9cc2:	e7f7      	b.n	b9cb4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9cc4:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9cc8:	b12b      	cbz	r3, b9cd6 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b9cca:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9cce:	2b00      	cmp	r3, #0
   b9cd0:	d0f0      	beq.n	b9cb4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9cd2:	4915      	ldr	r1, [pc, #84]	; (b9d28 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9cd4:	e7f1      	b.n	b9cba <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9cd6:	4628      	mov	r0, r5
   b9cd8:	f7fa f9df 	bl	b409a <_Znaj>
   b9cdc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9ce0:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9ce4:	b930      	cbnz	r0, b9cf4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9ce6:	b91b      	cbnz	r3, b9cf0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9ce8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b9cec:	2b00      	cmp	r3, #0
   b9cee:	d0e1      	beq.n	b9cb4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9cf0:	490e      	ldr	r1, [pc, #56]	; (b9d2c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9cf2:	e7e2      	b.n	b9cba <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9cf4:	b17b      	cbz	r3, b9d16 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9cf6:	490e      	ldr	r1, [pc, #56]	; (b9d30 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9cf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9cfc:	f005 fffd 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9d00:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9d04:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9d08:	220a      	movs	r2, #10
   b9d0a:	4628      	mov	r0, r5
   b9d0c:	f006 f811 	bl	bfd32 <_ZN5Print11printNumberEmh>
        n += println();
   b9d10:	4628      	mov	r0, r5
   b9d12:	f005 fff6 	bl	bfd02 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9d16:	2300      	movs	r3, #0
   b9d18:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b9d1c:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b9d20:	2001      	movs	r0, #1
   b9d22:	e7c8      	b.n	b9cb6 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9d24:	000c7091 	.word	0x000c7091
   b9d28:	000c70e2 	.word	0x000c70e2
   b9d2c:	000c7125 	.word	0x000c7125
   b9d30:	000c7149 	.word	0x000c7149

000b9d34 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b9d34:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9d38:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b9d3c:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9d3e:	bf3b      	ittet	cc
   b9d40:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b9d44:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b9d46:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9d48:	1a80      	subcc	r0, r0, r2
   b9d4a:	b280      	uxth	r0, r0
}
   b9d4c:	4770      	bx	lr

000b9d4e <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b9d4e:	b508      	push	{r3, lr}
   b9d50:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b9d52:	f7ff ffef 	bl	b9d34 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b9d56:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b9d5a:	1a18      	subs	r0, r3, r0
}
   b9d5c:	b280      	uxth	r0, r0
   b9d5e:	bd08      	pop	{r3, pc}

000b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b9d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b9d64:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9d68:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b9d6c:	1aed      	subs	r5, r5, r3
   b9d6e:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b9d70:	4295      	cmp	r5, r2
   b9d72:	bf28      	it	cs
   b9d74:	4615      	movcs	r5, r2
{
   b9d76:	4616      	mov	r6, r2
   b9d78:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9d7a:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9d7e:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9d80:	462a      	mov	r2, r5
   b9d82:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9d84:	b2bf      	uxth	r7, r7
{
   b9d86:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9d88:	f00a fc1e 	bl	c45c8 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b9d8c:	b19f      	cbz	r7, b9db6 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b9d8e:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9d92:	463a      	mov	r2, r7
   b9d94:	eb08 0105 	add.w	r1, r8, r5
   b9d98:	f00a fc16 	bl	c45c8 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b9d9c:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9da0:	4620      	mov	r0, r4
   b9da2:	f7ff ffc7 	bl	b9d34 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9da6:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b9daa:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b9dac:	bf38      	it	cc
   b9dae:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9db6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b9dba:	4416      	add	r6, r2
   b9dbc:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9dc0:	e7ee      	b.n	b9da0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9dc4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9dc6:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b9dca:	4604      	mov	r4, r0
   b9dcc:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9dce:	b113      	cbz	r3, b9dd6 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9dd0:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9dd4:	b953      	cbnz	r3, b9dec <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9dd6:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b9dda:	b128      	cbz	r0, b9de8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b9ddc:	4924      	ldr	r1, [pc, #144]	; (b9e70 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9dde:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9de2:	f005 ffa4 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9de6:	2000      	movs	r0, #0
}
   b9de8:	b003      	add	sp, #12
   b9dea:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b9dec:	f7ff ffaf 	bl	b9d4e <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9df0:	886b      	ldrh	r3, [r5, #2]
   b9df2:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9df4:	b29b      	uxth	r3, r3
   b9df6:	4283      	cmp	r3, r0
   b9df8:	d908      	bls.n	b9e0c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9dfa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9dfe:	b91b      	cbnz	r3, b9e08 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9e00:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9e04:	2800      	cmp	r0, #0
   b9e06:	d0ef      	beq.n	b9de8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9e08:	491a      	ldr	r1, [pc, #104]	; (b9e74 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b9e0a:	e7e8      	b.n	b9dde <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9e0c:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b9e10:	2202      	movs	r2, #2
   b9e12:	4669      	mov	r1, sp
   b9e14:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9e16:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b9e1a:	f7ff ffa1 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b9e1e:	2201      	movs	r2, #1
   b9e20:	4629      	mov	r1, r5
   b9e22:	4620      	mov	r0, r4
   b9e24:	f7ff ff9c 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b9e28:	2201      	movs	r2, #1
   b9e2a:	18a9      	adds	r1, r5, r2
   b9e2c:	4620      	mov	r0, r4
   b9e2e:	f7ff ff97 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b9e32:	886b      	ldrh	r3, [r5, #2]
   b9e34:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b9e38:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b9e3a:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b9e3c:	a901      	add	r1, sp, #4
   b9e3e:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b9e40:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b9e44:	f7ff ff8c 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b9e48:	886a      	ldrh	r2, [r5, #2]
   b9e4a:	68a9      	ldr	r1, [r5, #8]
   b9e4c:	4620      	mov	r0, r4
   b9e4e:	f7ff ff87 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b9e52:	2201      	movs	r2, #1
   b9e54:	f105 010c 	add.w	r1, r5, #12
   b9e58:	4620      	mov	r0, r4
   b9e5a:	f7ff ff81 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b9e5e:	4620      	mov	r0, r4
   b9e60:	2201      	movs	r2, #1
   b9e62:	f105 010d 	add.w	r1, r5, #13
   b9e66:	f7ff ff7b 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b9e6a:	2001      	movs	r0, #1
   b9e6c:	e7bc      	b.n	b9de8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b9e6e:	bf00      	nop
   b9e70:	000c716f 	.word	0x000c716f
   b9e74:	000c7197 	.word	0x000c7197

000b9e78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b9e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b9e7c:	780e      	ldrb	r6, [r1, #0]
   b9e7e:	2e0d      	cmp	r6, #13
{
   b9e80:	4604      	mov	r4, r0
   b9e82:	460d      	mov	r5, r1
  switch (msg->cls)
   b9e84:	f001 8228 	beq.w	bb2d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b9e88:	d809      	bhi.n	b9e9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b9e8a:	2e02      	cmp	r6, #2
   b9e8c:	f000 879a 	beq.w	badc4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b9e90:	2e06      	cmp	r6, #6
   b9e92:	f001 81cc 	beq.w	bb22e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9e96:	2e01      	cmp	r6, #1
   b9e98:	d04f      	beq.n	b9f3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b9e9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b9e9e:	2e13      	cmp	r6, #19
   b9ea0:	f001 83eb 	beq.w	bb67a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9ea4:	2e28      	cmp	r6, #40	; 0x28
   b9ea6:	f001 84ca 	beq.w	bb83e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b9eaa:	2e10      	cmp	r6, #16
   b9eac:	d1f5      	bne.n	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b9eae:	680b      	ldr	r3, [r1, #0]
   b9eb0:	4a8e      	ldr	r2, [pc, #568]	; (ba0ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b9eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9eb6:	4293      	cmp	r3, r2
   b9eb8:	f041 826a 	bne.w	bb390 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b9ebc:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b9ebe:	2e00      	cmp	r6, #0
   b9ec0:	d0eb      	beq.n	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9ec2:	68a8      	ldr	r0, [r5, #8]
   b9ec4:	2100      	movs	r1, #0
   b9ec6:	f7fe fa21 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eca:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b9ecc:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9ece:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9ed0:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9ed2:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9ed4:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9ed6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9ed8:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9eda:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9edc:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9ede:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9ee0:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9ee2:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9ee4:	68a8      	ldr	r0, [r5, #8]
   b9ee6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9ee8:	2108      	movs	r1, #8
   b9eea:	f7fe fa0f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eee:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9ef0:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9ef2:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9ef4:	210c      	movs	r1, #12
   b9ef6:	f7fe fa16 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9efa:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9efc:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9efe:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9f00:	210e      	movs	r1, #14
   b9f02:	f7fe fa10 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9f06:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f08:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9f0a:	f04f 32ff 	mov.w	r2, #4294967295
   b9f0e:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f10:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9f12:	6a1a      	ldr	r2, [r3, #32]
   b9f14:	b17a      	cbz	r2, b9f36 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f16:	7819      	ldrb	r1, [r3, #0]
   b9f18:	0708      	lsls	r0, r1, #28
   b9f1a:	d40c      	bmi.n	b9f36 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b9f1c:	1d19      	adds	r1, r3, #4
   b9f1e:	3314      	adds	r3, #20
   b9f20:	f851 0b04 	ldr.w	r0, [r1], #4
   b9f24:	f842 0b04 	str.w	r0, [r2], #4
   b9f28:	4299      	cmp	r1, r3
   b9f2a:	d1f9      	bne.n	b9f20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b9f2c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b9f2e:	7813      	ldrb	r3, [r2, #0]
   b9f30:	f043 0308 	orr.w	r3, r3, #8
   b9f34:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b9f36:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9f38:	e03d      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b9f3a:	680b      	ldr	r3, [r1, #0]
   b9f3c:	4a6c      	ldr	r2, [pc, #432]	; (ba0f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b9f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9f42:	4293      	cmp	r3, r2
   b9f44:	d141      	bne.n	b9fca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b9f46:	68c6      	ldr	r6, [r0, #12]
   b9f48:	2e00      	cmp	r6, #0
   b9f4a:	d0a6      	beq.n	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b9f4c:	68a8      	ldr	r0, [r5, #8]
   b9f4e:	2100      	movs	r1, #0
   b9f50:	f7fe f9dc 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f54:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f56:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9f58:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f5a:	2104      	movs	r1, #4
   b9f5c:	f7fe f9d6 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9f60:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f62:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9f64:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f66:	2108      	movs	r1, #8
   b9f68:	f7fe f9d0 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9f6c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9f70:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f72:	210c      	movs	r1, #12
   b9f74:	f7fe f9ca 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9f78:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b9f7a:	68a8      	ldr	r0, [r5, #8]
   b9f7c:	68e6      	ldr	r6, [r4, #12]
   b9f7e:	2110      	movs	r1, #16
   b9f80:	f7fe f9c4 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f84:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f86:	68e3      	ldr	r3, [r4, #12]
   b9f88:	f04f 32ff 	mov.w	r2, #4294967295
   b9f8c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f8e:	68e3      	ldr	r3, [r4, #12]
   b9f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9f92:	b17a      	cbz	r2, b9fb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f94:	7819      	ldrb	r1, [r3, #0]
   b9f96:	0709      	lsls	r1, r1, #28
   b9f98:	d40c      	bmi.n	b9fb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b9f9a:	1d19      	adds	r1, r3, #4
   b9f9c:	3318      	adds	r3, #24
   b9f9e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9fa2:	f842 0b04 	str.w	r0, [r2], #4
   b9fa6:	4299      	cmp	r1, r3
   b9fa8:	d1f9      	bne.n	b9f9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9faa:	68e2      	ldr	r2, [r4, #12]
   b9fac:	7813      	ldrb	r3, [r2, #0]
   b9fae:	f043 0308 	orr.w	r3, r3, #8
   b9fb2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9fb4:	68e3      	ldr	r3, [r4, #12]
   b9fb6:	781b      	ldrb	r3, [r3, #0]
   b9fb8:	075f      	lsls	r7, r3, #29
   b9fba:	f57f af6e 	bpl.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b9fbe:	4629      	mov	r1, r5
   b9fc0:	4620      	mov	r0, r4
}
   b9fc2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9fc6:	f7ff befd 	b.w	b9dc4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b9fca:	4a4a      	ldr	r2, [pc, #296]	; (ba0f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b9fcc:	4293      	cmp	r3, r2
   b9fce:	d13d      	bne.n	ba04c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9fd0:	6906      	ldr	r6, [r0, #16]
   b9fd2:	2e00      	cmp	r6, #0
   b9fd4:	f43f af61 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9fd8:	68a8      	ldr	r0, [r5, #8]
   b9fda:	2100      	movs	r1, #0
   b9fdc:	f7fe f996 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fe0:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9fe2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9fe4:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9fe6:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9fe8:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9fea:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9fec:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9fee:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9ff0:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9ff2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9ff4:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9ff6:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9ff8:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9ffa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9ffc:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9ffe:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba000:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   ba002:	68a8      	ldr	r0, [r5, #8]
   ba004:	6926      	ldr	r6, [r4, #16]
   ba006:	2108      	movs	r1, #8
   ba008:	f7fe f980 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba00c:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   ba00e:	68a8      	ldr	r0, [r5, #8]
   ba010:	6926      	ldr	r6, [r4, #16]
   ba012:	210c      	movs	r1, #12
   ba014:	f7fe f97a 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba018:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba01a:	6923      	ldr	r3, [r4, #16]
   ba01c:	f04f 32ff 	mov.w	r2, #4294967295
   ba020:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba022:	6923      	ldr	r3, [r4, #16]
   ba024:	6a1a      	ldr	r2, [r3, #32]
   ba026:	b17a      	cbz	r2, ba048 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba028:	7819      	ldrb	r1, [r3, #0]
   ba02a:	070e      	lsls	r6, r1, #28
   ba02c:	d40c      	bmi.n	ba048 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   ba02e:	1d19      	adds	r1, r3, #4
   ba030:	3314      	adds	r3, #20
   ba032:	f851 0b04 	ldr.w	r0, [r1], #4
   ba036:	f842 0b04 	str.w	r0, [r2], #4
   ba03a:	4299      	cmp	r1, r3
   ba03c:	d1f9      	bne.n	ba032 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba03e:	6922      	ldr	r2, [r4, #16]
   ba040:	7813      	ldrb	r3, [r2, #0]
   ba042:	f043 0308 	orr.w	r3, r3, #8
   ba046:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba048:	6923      	ldr	r3, [r4, #16]
   ba04a:	e7b4      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   ba04c:	4a2a      	ldr	r2, [pc, #168]	; (ba0f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   ba04e:	4293      	cmp	r3, r2
   ba050:	d154      	bne.n	ba0fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   ba052:	6946      	ldr	r6, [r0, #20]
   ba054:	2e00      	cmp	r6, #0
   ba056:	f43f af20 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   ba05a:	68a8      	ldr	r0, [r5, #8]
   ba05c:	2100      	movs	r1, #0
   ba05e:	f7fe f955 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba062:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   ba064:	68a8      	ldr	r0, [r5, #8]
   ba066:	6966      	ldr	r6, [r4, #20]
   ba068:	2104      	movs	r1, #4
   ba06a:	f7fe f95c 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba06e:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   ba070:	68a8      	ldr	r0, [r5, #8]
   ba072:	6966      	ldr	r6, [r4, #20]
   ba074:	2106      	movs	r1, #6
   ba076:	f7fe f956 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba07a:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   ba07c:	68a8      	ldr	r0, [r5, #8]
   ba07e:	6966      	ldr	r6, [r4, #20]
   ba080:	2108      	movs	r1, #8
   ba082:	f7fe f950 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba086:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   ba088:	68a8      	ldr	r0, [r5, #8]
   ba08a:	6966      	ldr	r6, [r4, #20]
   ba08c:	210a      	movs	r1, #10
   ba08e:	f7fe f94a 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba092:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   ba094:	68a8      	ldr	r0, [r5, #8]
   ba096:	6966      	ldr	r6, [r4, #20]
   ba098:	210c      	movs	r1, #12
   ba09a:	f7fe f944 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba09e:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   ba0a0:	68a8      	ldr	r0, [r5, #8]
   ba0a2:	6966      	ldr	r6, [r4, #20]
   ba0a4:	210e      	movs	r1, #14
   ba0a6:	f7fe f93e 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0aa:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   ba0ac:	68a8      	ldr	r0, [r5, #8]
   ba0ae:	6966      	ldr	r6, [r4, #20]
   ba0b0:	2110      	movs	r1, #16
   ba0b2:	f7fe f938 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0b6:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba0b8:	6963      	ldr	r3, [r4, #20]
   ba0ba:	f04f 32ff 	mov.w	r2, #4294967295
   ba0be:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba0c0:	6963      	ldr	r3, [r4, #20]
   ba0c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba0c4:	b17a      	cbz	r2, ba0e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba0c6:	7819      	ldrb	r1, [r3, #0]
   ba0c8:	0708      	lsls	r0, r1, #28
   ba0ca:	d40c      	bmi.n	ba0e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   ba0cc:	1d19      	adds	r1, r3, #4
   ba0ce:	3318      	adds	r3, #24
   ba0d0:	f851 0b04 	ldr.w	r0, [r1], #4
   ba0d4:	f842 0b04 	str.w	r0, [r2], #4
   ba0d8:	4299      	cmp	r1, r3
   ba0da:	d1f9      	bne.n	ba0d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   ba0dc:	6962      	ldr	r2, [r4, #20]
   ba0de:	7813      	ldrb	r3, [r2, #0]
   ba0e0:	f043 0308 	orr.w	r3, r3, #8
   ba0e4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   ba0e6:	6963      	ldr	r3, [r4, #20]
   ba0e8:	e765      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba0ea:	bf00      	nop
   ba0ec:	00101400 	.word	0x00101400
   ba0f0:	00140100 	.word	0x00140100
   ba0f4:	00100300 	.word	0x00100300
   ba0f8:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   ba0fc:	4a8c      	ldr	r2, [pc, #560]	; (ba330 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   ba0fe:	4293      	cmp	r3, r2
   ba100:	d149      	bne.n	ba196 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   ba102:	69c6      	ldr	r6, [r0, #28]
   ba104:	2e00      	cmp	r6, #0
   ba106:	f43f aec8 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   ba10a:	68a8      	ldr	r0, [r5, #8]
   ba10c:	2100      	movs	r1, #0
   ba10e:	f7fe f8fd 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba112:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba114:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba116:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   ba118:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba11a:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba11c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba11e:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba120:	2108      	movs	r1, #8
   ba122:	f7fe f8f3 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba126:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba128:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba12a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba12c:	210c      	movs	r1, #12
   ba12e:	f7fe f8ed 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba132:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba134:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba136:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba138:	2110      	movs	r1, #16
   ba13a:	f7fe f8e7 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba13e:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   ba140:	68a8      	ldr	r0, [r5, #8]
   ba142:	69e6      	ldr	r6, [r4, #28]
   ba144:	2114      	movs	r1, #20
   ba146:	f7fe f8e1 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba14a:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   ba14c:	68a8      	ldr	r0, [r5, #8]
   ba14e:	69e6      	ldr	r6, [r4, #28]
   ba150:	2118      	movs	r1, #24
   ba152:	f7fe f8db 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba156:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   ba158:	68a8      	ldr	r0, [r5, #8]
   ba15a:	69e6      	ldr	r6, [r4, #28]
   ba15c:	211c      	movs	r1, #28
   ba15e:	f7fe f8d5 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba162:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba164:	69e3      	ldr	r3, [r4, #28]
   ba166:	f04f 32ff 	mov.w	r2, #4294967295
   ba16a:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba16c:	69e3      	ldr	r3, [r4, #28]
   ba16e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   ba170:	b17a      	cbz	r2, ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba172:	7819      	ldrb	r1, [r3, #0]
   ba174:	0709      	lsls	r1, r1, #28
   ba176:	d40c      	bmi.n	ba192 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   ba178:	1d19      	adds	r1, r3, #4
   ba17a:	3324      	adds	r3, #36	; 0x24
   ba17c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba180:	f842 0b04 	str.w	r0, [r2], #4
   ba184:	4299      	cmp	r1, r3
   ba186:	d1f9      	bne.n	ba17c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba188:	69e2      	ldr	r2, [r4, #28]
   ba18a:	7813      	ldrb	r3, [r2, #0]
   ba18c:	f043 0308 	orr.w	r3, r3, #8
   ba190:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   ba192:	69e3      	ldr	r3, [r4, #28]
   ba194:	e70f      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   ba196:	4a67      	ldr	r2, [pc, #412]	; (ba334 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   ba198:	4293      	cmp	r3, r2
   ba19a:	f040 80cd 	bne.w	ba338 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   ba19e:	6a06      	ldr	r6, [r0, #32]
   ba1a0:	2e00      	cmp	r6, #0
   ba1a2:	f43f ae7a 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   ba1a6:	68a8      	ldr	r0, [r5, #8]
   ba1a8:	2100      	movs	r1, #0
   ba1aa:	f7fe f8af 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1ae:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   ba1b0:	68a8      	ldr	r0, [r5, #8]
   ba1b2:	6a26      	ldr	r6, [r4, #32]
   ba1b4:	2104      	movs	r1, #4
   ba1b6:	f7fe f8b6 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba1ba:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   ba1bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba1be:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba1c0:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba1c2:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba1c4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba1c6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba1c8:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba1ca:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba1cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba1ce:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba1d0:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba1d2:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba1d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba1d6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba1d8:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba1da:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba1dc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba1de:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba1e0:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba1e2:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba1e4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba1e6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba1e8:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba1ea:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   ba1ec:	210c      	movs	r1, #12
   ba1ee:	68a8      	ldr	r0, [r5, #8]
   ba1f0:	6a26      	ldr	r6, [r4, #32]
   ba1f2:	f7fe f88b 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1f6:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba1fa:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1fc:	2110      	movs	r1, #16
   ba1fe:	f7fe f885 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba202:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba204:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba206:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba208:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba20a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba20c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba20e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba210:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba212:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba214:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba216:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba218:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba21a:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba21c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba21e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba220:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba222:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba224:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba226:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba228:	2118      	movs	r1, #24
   ba22a:	f7fe f86f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba22e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba230:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba232:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba234:	211c      	movs	r1, #28
   ba236:	f7fe f869 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba23a:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba23c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba23e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba240:	2120      	movs	r1, #32
   ba242:	f7fe f863 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba246:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba248:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba24a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba24c:	2124      	movs	r1, #36	; 0x24
   ba24e:	f7fe f85d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba252:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba254:	68a8      	ldr	r0, [r5, #8]
   ba256:	6a26      	ldr	r6, [r4, #32]
   ba258:	2128      	movs	r1, #40	; 0x28
   ba25a:	f7fe f857 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba25e:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba260:	6a26      	ldr	r6, [r4, #32]
   ba262:	68a8      	ldr	r0, [r5, #8]
   ba264:	212c      	movs	r1, #44	; 0x2c
   ba266:	f7fe f851 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba26a:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba26c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba26e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba270:	2130      	movs	r1, #48	; 0x30
   ba272:	f7fe f84b 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba276:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba278:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba27a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba27c:	2134      	movs	r1, #52	; 0x34
   ba27e:	f7fe f845 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba282:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba284:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba286:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba288:	2138      	movs	r1, #56	; 0x38
   ba28a:	f7fe f83f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba28e:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba290:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba292:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba294:	213c      	movs	r1, #60	; 0x3c
   ba296:	f7fe f839 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba29a:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba29c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba29e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2a0:	2140      	movs	r1, #64	; 0x40
   ba2a2:	f7fe f833 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba2a6:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba2a8:	68a8      	ldr	r0, [r5, #8]
   ba2aa:	6a26      	ldr	r6, [r4, #32]
   ba2ac:	2144      	movs	r1, #68	; 0x44
   ba2ae:	f7fe f82d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2b2:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba2b4:	68a8      	ldr	r0, [r5, #8]
   ba2b6:	6a26      	ldr	r6, [r4, #32]
   ba2b8:	2148      	movs	r1, #72	; 0x48
   ba2ba:	f7fe f827 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2be:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba2c0:	68a8      	ldr	r0, [r5, #8]
   ba2c2:	6a26      	ldr	r6, [r4, #32]
   ba2c4:	214c      	movs	r1, #76	; 0x4c
   ba2c6:	f7fe f82e 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba2ca:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba2ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba2d0:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba2d2:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba2d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba2da:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2dc:	68a8      	ldr	r0, [r5, #8]
   ba2de:	2154      	movs	r1, #84	; 0x54
   ba2e0:	f7fe f814 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba2e4:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba2e6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba2e8:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba2ea:	2158      	movs	r1, #88	; 0x58
   ba2ec:	f7fe f81b 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba2f0:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba2f4:	68a8      	ldr	r0, [r5, #8]
   ba2f6:	6a26      	ldr	r6, [r4, #32]
   ba2f8:	215a      	movs	r1, #90	; 0x5a
   ba2fa:	f7fe f814 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba2fe:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba302:	6a22      	ldr	r2, [r4, #32]
   ba304:	f04f 33ff 	mov.w	r3, #4294967295
   ba308:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba30a:	6a22      	ldr	r2, [r4, #32]
   ba30c:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba30e:	6a21      	ldr	r1, [r4, #32]
   ba310:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba312:	b158      	cbz	r0, ba32c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba314:	780b      	ldrb	r3, [r1, #0]
   ba316:	071b      	lsls	r3, r3, #28
   ba318:	d408      	bmi.n	ba32c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba31a:	225c      	movs	r2, #92	; 0x5c
   ba31c:	3104      	adds	r1, #4
   ba31e:	f00a f953 	bl	c45c8 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba322:	6a22      	ldr	r2, [r4, #32]
   ba324:	7813      	ldrb	r3, [r2, #0]
   ba326:	f043 0308 	orr.w	r3, r3, #8
   ba32a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba32c:	6a23      	ldr	r3, [r4, #32]
   ba32e:	e642      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba330:	00200500 	.word	0x00200500
   ba334:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba338:	4a8e      	ldr	r2, [pc, #568]	; (ba574 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba33a:	4293      	cmp	r3, r2
   ba33c:	d137      	bne.n	ba3ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba33e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba340:	2b00      	cmp	r3, #0
   ba342:	f43f adaa 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba346:	688a      	ldr	r2, [r1, #8]
   ba348:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba34a:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba34c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba34e:	68a8      	ldr	r0, [r5, #8]
   ba350:	2104      	movs	r1, #4
   ba352:	f7fd ffdb 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba356:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba358:	68a8      	ldr	r0, [r5, #8]
   ba35a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba35c:	2108      	movs	r1, #8
   ba35e:	f7fd ffd5 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba362:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba364:	68a8      	ldr	r0, [r5, #8]
   ba366:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba368:	210c      	movs	r1, #12
   ba36a:	f7fd ffcf 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba36e:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba370:	68a8      	ldr	r0, [r5, #8]
   ba372:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba374:	2110      	movs	r1, #16
   ba376:	f7fd ffc9 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba37a:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba37e:	f04f 32ff 	mov.w	r2, #4294967295
   ba382:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba384:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba388:	b17a      	cbz	r2, ba3aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba38a:	7819      	ldrb	r1, [r3, #0]
   ba38c:	070f      	lsls	r7, r1, #28
   ba38e:	d40c      	bmi.n	ba3aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba390:	1d19      	adds	r1, r3, #4
   ba392:	3318      	adds	r3, #24
   ba394:	f851 0b04 	ldr.w	r0, [r1], #4
   ba398:	f842 0b04 	str.w	r0, [r2], #4
   ba39c:	4299      	cmp	r1, r3
   ba39e:	d1f9      	bne.n	ba394 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba3a2:	7813      	ldrb	r3, [r2, #0]
   ba3a4:	f043 0308 	orr.w	r3, r3, #8
   ba3a8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba3ac:	e603      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba3ae:	4a72      	ldr	r2, [pc, #456]	; (ba578 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba3b0:	4293      	cmp	r3, r2
   ba3b2:	d139      	bne.n	ba428 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba3b4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba3b6:	2e00      	cmp	r6, #0
   ba3b8:	f43f ad6f 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba3bc:	68a8      	ldr	r0, [r5, #8]
   ba3be:	2100      	movs	r1, #0
   ba3c0:	f7fd ffa4 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3c4:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3ca:	2104      	movs	r1, #4
   ba3cc:	f7fd ff9e 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba3d0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba3d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3d6:	2108      	movs	r1, #8
   ba3d8:	f7fd ff98 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba3dc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3de:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3e2:	210c      	movs	r1, #12
   ba3e4:	f7fd ff92 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba3e8:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba3ea:	68a8      	ldr	r0, [r5, #8]
   ba3ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba3ee:	2110      	movs	r1, #16
   ba3f0:	f7fd ff8c 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3f4:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba3f8:	f04f 32ff 	mov.w	r2, #4294967295
   ba3fc:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba402:	b17a      	cbz	r2, ba424 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba404:	7819      	ldrb	r1, [r3, #0]
   ba406:	070e      	lsls	r6, r1, #28
   ba408:	d40c      	bmi.n	ba424 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba40a:	1d19      	adds	r1, r3, #4
   ba40c:	3318      	adds	r3, #24
   ba40e:	f851 0b04 	ldr.w	r0, [r1], #4
   ba412:	f842 0b04 	str.w	r0, [r2], #4
   ba416:	4299      	cmp	r1, r3
   ba418:	d1f9      	bne.n	ba40e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba41a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba41c:	7813      	ldrb	r3, [r2, #0]
   ba41e:	f043 0308 	orr.w	r3, r3, #8
   ba422:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba424:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba426:	e5c6      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba428:	4a54      	ldr	r2, [pc, #336]	; (ba57c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba42a:	4293      	cmp	r3, r2
   ba42c:	d151      	bne.n	ba4d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba42e:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba430:	2e00      	cmp	r6, #0
   ba432:	f43f ad32 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba436:	68a8      	ldr	r0, [r5, #8]
   ba438:	2100      	movs	r1, #0
   ba43a:	f7fd ff67 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba43e:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba440:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba442:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba444:	2104      	movs	r1, #4
   ba446:	f7fd ff61 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba44a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba44c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba44e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba450:	2108      	movs	r1, #8
   ba452:	f7fd ff5b 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba456:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba458:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba45a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba45c:	210c      	movs	r1, #12
   ba45e:	f7fd ff55 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba462:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba464:	68a8      	ldr	r0, [r5, #8]
   ba466:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba468:	2110      	movs	r1, #16
   ba46a:	f7fd ff4f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba46e:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba470:	68a8      	ldr	r0, [r5, #8]
   ba472:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba474:	2114      	movs	r1, #20
   ba476:	f7fd ff49 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba47a:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba47c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba47e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba480:	2118      	movs	r1, #24
   ba482:	f7fd ff43 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba486:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba488:	68a8      	ldr	r0, [r5, #8]
   ba48a:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba48c:	211c      	movs	r1, #28
   ba48e:	f7fd ff3d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba492:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba494:	68a8      	ldr	r0, [r5, #8]
   ba496:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba498:	2120      	movs	r1, #32
   ba49a:	f7fd ff37 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba49e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba4a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba4a2:	f04f 32ff 	mov.w	r2, #4294967295
   ba4a6:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba4a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba4aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba4ac:	b17a      	cbz	r2, ba4ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4ae:	7819      	ldrb	r1, [r3, #0]
   ba4b0:	0708      	lsls	r0, r1, #28
   ba4b2:	d40c      	bmi.n	ba4ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba4b4:	1d19      	adds	r1, r3, #4
   ba4b6:	3328      	adds	r3, #40	; 0x28
   ba4b8:	f851 0b04 	ldr.w	r0, [r1], #4
   ba4bc:	f842 0b04 	str.w	r0, [r2], #4
   ba4c0:	4299      	cmp	r1, r3
   ba4c2:	d1f9      	bne.n	ba4b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba4c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba4c6:	7813      	ldrb	r3, [r2, #0]
   ba4c8:	f043 0308 	orr.w	r3, r3, #8
   ba4cc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba4ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba4d0:	e571      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba4d2:	4a2b      	ldr	r2, [pc, #172]	; (ba580 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba4d4:	4293      	cmp	r3, r2
   ba4d6:	d155      	bne.n	ba584 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba4d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba4da:	2b00      	cmp	r3, #0
   ba4dc:	f43f acdd 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba4e0:	688a      	ldr	r2, [r1, #8]
   ba4e2:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba4e4:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba4e6:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba4e8:	68a8      	ldr	r0, [r5, #8]
   ba4ea:	2104      	movs	r1, #4
   ba4ec:	f7fd ff0e 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4f0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4f2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba4f4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4f6:	2108      	movs	r1, #8
   ba4f8:	f7fd ff08 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba4fc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba500:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba502:	210c      	movs	r1, #12
   ba504:	f7fd ff02 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba508:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba50a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba50c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba50e:	2110      	movs	r1, #16
   ba510:	f7fd fefc 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba514:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba516:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba518:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba51a:	7d12      	ldrb	r2, [r2, #20]
   ba51c:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba51e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba520:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba522:	7d52      	ldrb	r2, [r2, #21]
   ba524:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba526:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba528:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba52a:	7d92      	ldrb	r2, [r2, #22]
   ba52c:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba52e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba530:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba532:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba534:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba536:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba538:	68a8      	ldr	r0, [r5, #8]
   ba53a:	2118      	movs	r1, #24
   ba53c:	f7fd fee6 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba540:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba542:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba544:	f04f 32ff 	mov.w	r2, #4294967295
   ba548:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba54e:	b17a      	cbz	r2, ba570 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba550:	7819      	ldrb	r1, [r3, #0]
   ba552:	0709      	lsls	r1, r1, #28
   ba554:	d40c      	bmi.n	ba570 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba556:	1d19      	adds	r1, r3, #4
   ba558:	3320      	adds	r3, #32
   ba55a:	f851 0b04 	ldr.w	r0, [r1], #4
   ba55e:	f842 0b04 	str.w	r0, [r2], #4
   ba562:	4299      	cmp	r1, r3
   ba564:	d1f9      	bne.n	ba55a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba566:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba568:	7813      	ldrb	r3, [r2, #0]
   ba56a:	f043 0308 	orr.w	r3, r3, #8
   ba56e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba570:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba572:	e520      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba574:	00140900 	.word	0x00140900
   ba578:	00141100 	.word	0x00141100
   ba57c:	00241200 	.word	0x00241200
   ba580:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   ba584:	4a30      	ldr	r2, [pc, #192]	; (ba648 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   ba586:	4293      	cmp	r3, r2
   ba588:	d160      	bne.n	ba64c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   ba58a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba58c:	2b00      	cmp	r3, #0
   ba58e:	f43f ac84 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba592:	688a      	ldr	r2, [r1, #8]
   ba594:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   ba596:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba598:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba59a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   ba59c:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba59e:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   ba5a0:	6b86      	ldr	r6, [r0, #56]	; 0x38
   ba5a2:	68a8      	ldr	r0, [r5, #8]
   ba5a4:	2104      	movs	r1, #4
   ba5a6:	f7fd feb1 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5aa:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba5ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b0:	2108      	movs	r1, #8
   ba5b2:	f7fd feab 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba5b6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba5ba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5bc:	210c      	movs	r1, #12
   ba5be:	f7fd fea5 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba5c2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba5c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5c8:	2110      	movs	r1, #16
   ba5ca:	f7fd fe9f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba5ce:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5d0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba5d2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5d4:	2114      	movs	r1, #20
   ba5d6:	f7fd fe99 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba5da:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba5dc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   ba5de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba5e0:	7e12      	ldrb	r2, [r2, #24]
   ba5e2:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba5e4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   ba5e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba5e8:	7e52      	ldrb	r2, [r2, #25]
   ba5ea:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba5ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   ba5ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba5f0:	7e92      	ldrb	r2, [r2, #26]
   ba5f2:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba5f4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   ba5f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba5f8:	7ed2      	ldrb	r2, [r2, #27]
   ba5fa:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   ba5fc:	68a8      	ldr	r0, [r5, #8]
   ba5fe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba600:	211c      	movs	r1, #28
   ba602:	f7fd fe83 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba606:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   ba608:	68a8      	ldr	r0, [r5, #8]
   ba60a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba60c:	2120      	movs	r1, #32
   ba60e:	f7fd fe7d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba612:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba616:	f04f 32ff 	mov.w	r2, #4294967295
   ba61a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba61c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba61e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba620:	b17a      	cbz	r2, ba642 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba622:	7819      	ldrb	r1, [r3, #0]
   ba624:	070f      	lsls	r7, r1, #28
   ba626:	d40c      	bmi.n	ba642 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   ba628:	1d19      	adds	r1, r3, #4
   ba62a:	3328      	adds	r3, #40	; 0x28
   ba62c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba630:	f842 0b04 	str.w	r0, [r2], #4
   ba634:	4299      	cmp	r1, r3
   ba636:	d1f9      	bne.n	ba62c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   ba638:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba63a:	7813      	ldrb	r3, [r2, #0]
   ba63c:	f043 0308 	orr.w	r3, r3, #8
   ba640:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   ba642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba644:	e4b7      	b.n	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba646:	bf00      	nop
   ba648:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   ba64c:	4aa1      	ldr	r2, [pc, #644]	; (ba8d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   ba64e:	4293      	cmp	r3, r2
   ba650:	f040 80f0 	bne.w	ba834 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   ba654:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   ba656:	2e00      	cmp	r6, #0
   ba658:	f43f ac1f 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   ba65c:	68a8      	ldr	r0, [r5, #8]
   ba65e:	2100      	movs	r1, #0
   ba660:	f7fd fe54 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba664:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba666:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba668:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba66a:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba66c:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba66e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba672:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba674:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   ba676:	68a8      	ldr	r0, [r5, #8]
   ba678:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba67a:	2106      	movs	r1, #6
   ba67c:	f7fd fe53 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba680:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba682:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba684:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba686:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba688:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba68a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba68c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba68e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba690:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba692:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba696:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba698:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba69a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba69c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba69e:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba6a0:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   ba6a2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba6a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6a6:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba6a8:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba6aa:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba6ac:	68a8      	ldr	r0, [r5, #8]
   ba6ae:	2110      	movs	r1, #16
   ba6b0:	f7fd fe2c 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6b4:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6b6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba6b8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6ba:	2114      	movs	r1, #20
   ba6bc:	f7fd fe26 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba6c0:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba6c2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba6c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6c6:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba6c8:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba6ca:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba6cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6ce:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba6d0:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba6d2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba6d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6d6:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba6d8:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba6da:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba6dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba6de:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba6e0:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba6e4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6e6:	211c      	movs	r1, #28
   ba6e8:	f7fd fe10 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba6ec:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6ee:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba6f0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6f2:	2120      	movs	r1, #32
   ba6f4:	f7fd fe0a 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba6f8:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6fa:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba6fc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6fe:	2124      	movs	r1, #36	; 0x24
   ba700:	f7fd fe04 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba704:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba706:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba708:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba70a:	2128      	movs	r1, #40	; 0x28
   ba70c:	f7fd fdfe 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba710:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba712:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba714:	68a8      	ldr	r0, [r5, #8]
   ba716:	212c      	movs	r1, #44	; 0x2c
   ba718:	f7fd fdf8 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba71c:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba71e:	68a8      	ldr	r0, [r5, #8]
   ba720:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba722:	2130      	movs	r1, #48	; 0x30
   ba724:	f7fd fdf2 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba728:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba72a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba72c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba72e:	2134      	movs	r1, #52	; 0x34
   ba730:	f7fd fdec 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba734:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba736:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba738:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba73a:	2138      	movs	r1, #56	; 0x38
   ba73c:	f7fd fde6 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba740:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba742:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba744:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba746:	213c      	movs	r1, #60	; 0x3c
   ba748:	f7fd fde0 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba74c:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba74e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba750:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba752:	2140      	movs	r1, #64	; 0x40
   ba754:	f7fd fdda 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba758:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba75a:	68a8      	ldr	r0, [r5, #8]
   ba75c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba75e:	2144      	movs	r1, #68	; 0x44
   ba760:	f7fd fdd4 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba764:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba766:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba768:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba76a:	2148      	movs	r1, #72	; 0x48
   ba76c:	f7fd fdce 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba770:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba772:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba774:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba776:	214c      	movs	r1, #76	; 0x4c
   ba778:	f7fd fdc8 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba77c:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba77e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba780:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba782:	2150      	movs	r1, #80	; 0x50
   ba784:	f7fd fdc2 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba788:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba78a:	2154      	movs	r1, #84	; 0x54
   ba78c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba78e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba790:	f7fd fdbc 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba794:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba796:	68a8      	ldr	r0, [r5, #8]
   ba798:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba79a:	2158      	movs	r1, #88	; 0x58
   ba79c:	f7fd fdc3 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7a0:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba7a4:	68a8      	ldr	r0, [r5, #8]
   ba7a6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7a8:	215a      	movs	r1, #90	; 0x5a
   ba7aa:	f7fd fdbc 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7ae:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba7b2:	68a8      	ldr	r0, [r5, #8]
   ba7b4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7b6:	215c      	movs	r1, #92	; 0x5c
   ba7b8:	f7fd fdb5 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7bc:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba7c0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba7c2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba7c4:	215e      	movs	r1, #94	; 0x5e
   ba7c6:	f7fd fdae 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba7ca:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba7ce:	68a8      	ldr	r0, [r5, #8]
   ba7d0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7d2:	2160      	movs	r1, #96	; 0x60
   ba7d4:	f7fd fda7 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7d8:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba7dc:	68a8      	ldr	r0, [r5, #8]
   ba7de:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7e0:	2162      	movs	r1, #98	; 0x62
   ba7e2:	f7fd fda0 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7e6:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba7ea:	68a8      	ldr	r0, [r5, #8]
   ba7ec:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7ee:	2164      	movs	r1, #100	; 0x64
   ba7f0:	f7fd fd8c 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7f4:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba7f6:	68a8      	ldr	r0, [r5, #8]
   ba7f8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba7fa:	2168      	movs	r1, #104	; 0x68
   ba7fc:	f7fd fd86 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba800:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba802:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba804:	f04f 33ff 	mov.w	r3, #4294967295
   ba808:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba80a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba80c:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba80e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba810:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba814:	b158      	cbz	r0, ba82e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba816:	780b      	ldrb	r3, [r1, #0]
   ba818:	071e      	lsls	r6, r3, #28
   ba81a:	d408      	bmi.n	ba82e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba81c:	2274      	movs	r2, #116	; 0x74
   ba81e:	3104      	adds	r1, #4
   ba820:	f009 fed2 	bl	c45c8 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba824:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba826:	7813      	ldrb	r3, [r2, #0]
   ba828:	f043 0308 	orr.w	r3, r3, #8
   ba82c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba82e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba830:	f7ff bbc1 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba834:	4a28      	ldr	r2, [pc, #160]	; (ba8d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba836:	4293      	cmp	r3, r2
   ba838:	d150      	bne.n	ba8dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba83a:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba83c:	2e00      	cmp	r6, #0
   ba83e:	f43f ab2c 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba842:	68a8      	ldr	r0, [r5, #8]
   ba844:	2100      	movs	r1, #0
   ba846:	f7fd fd61 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba84a:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba84c:	68a8      	ldr	r0, [r5, #8]
   ba84e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba850:	2104      	movs	r1, #4
   ba852:	f7fd fd5b 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba856:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba858:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba85a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba85c:	2108      	movs	r1, #8
   ba85e:	f7fd fd55 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba862:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba864:	68a8      	ldr	r0, [r5, #8]
   ba866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba868:	210c      	movs	r1, #12
   ba86a:	f7fd fd5c 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba86e:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba870:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba874:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba876:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba878:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba87a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba87c:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba87e:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba880:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba884:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba886:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba888:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba88a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba88c:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba88e:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba890:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba894:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba896:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba898:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba89a:	68aa      	ldr	r2, [r5, #8]
   ba89c:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba89e:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba8a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba8a2:	f04f 32ff 	mov.w	r2, #4294967295
   ba8a6:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba8a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba8aa:	6a1a      	ldr	r2, [r3, #32]
   ba8ac:	b17a      	cbz	r2, ba8ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba8ae:	7819      	ldrb	r1, [r3, #0]
   ba8b0:	0708      	lsls	r0, r1, #28
   ba8b2:	d40c      	bmi.n	ba8ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba8b4:	1d19      	adds	r1, r3, #4
   ba8b6:	3318      	adds	r3, #24
   ba8b8:	f851 0b04 	ldr.w	r0, [r1], #4
   ba8bc:	f842 0b04 	str.w	r0, [r2], #4
   ba8c0:	4299      	cmp	r1, r3
   ba8c2:	d1f9      	bne.n	ba8b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba8c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba8c6:	7813      	ldrb	r3, [r2, #0]
   ba8c8:	f043 0308 	orr.w	r3, r3, #8
   ba8cc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba8ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba8d0:	f7ff bb71 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba8d4:	00741700 	.word	0x00741700
   ba8d8:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba8dc:	4a84      	ldr	r2, [pc, #528]	; (baaf0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba8de:	4293      	cmp	r3, r2
   ba8e0:	d13a      	bne.n	ba958 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba8e2:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba8e4:	2e00      	cmp	r6, #0
   ba8e6:	f43f aad8 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba8ea:	68a8      	ldr	r0, [r5, #8]
   ba8ec:	2100      	movs	r1, #0
   ba8ee:	f7fd fd0d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8f2:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8f4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba8f6:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8f8:	2104      	movs	r1, #4
   ba8fa:	f7fd fd07 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba8fe:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba900:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba902:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba904:	2108      	movs	r1, #8
   ba906:	f7fd fd01 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba90a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba90c:	68a8      	ldr	r0, [r5, #8]
   ba90e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba910:	210c      	movs	r1, #12
   ba912:	f7fd fcfb 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba916:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba918:	68a8      	ldr	r0, [r5, #8]
   ba91a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba91c:	2110      	movs	r1, #16
   ba91e:	f7fd fcf5 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba922:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba924:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba926:	f04f 32ff 	mov.w	r2, #4294967295
   ba92a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba92c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba92e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba930:	b17a      	cbz	r2, ba952 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba932:	7819      	ldrb	r1, [r3, #0]
   ba934:	0709      	lsls	r1, r1, #28
   ba936:	d40c      	bmi.n	ba952 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba938:	1d19      	adds	r1, r3, #4
   ba93a:	3318      	adds	r3, #24
   ba93c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba940:	f842 0b04 	str.w	r0, [r2], #4
   ba944:	4299      	cmp	r1, r3
   ba946:	d1f9      	bne.n	ba93c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba948:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba94a:	7813      	ldrb	r3, [r2, #0]
   ba94c:	f043 0308 	orr.w	r3, r3, #8
   ba950:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba952:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba954:	f7ff bb2f 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba958:	4a66      	ldr	r2, [pc, #408]	; (baaf4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba95a:	4293      	cmp	r3, r2
   ba95c:	d138      	bne.n	ba9d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba95e:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba960:	2e00      	cmp	r6, #0
   ba962:	f43f aa9a 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba966:	68a8      	ldr	r0, [r5, #8]
   ba968:	2100      	movs	r1, #0
   ba96a:	f7fd fccf 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba96e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba970:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba972:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba974:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba976:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba978:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba97a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba97c:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba97e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba980:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba982:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba984:	7a52      	ldrb	r2, [r2, #9]
   ba986:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba988:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba98a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba98c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba98e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba990:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba992:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba994:	7ad2      	ldrb	r2, [r2, #11]
   ba996:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba998:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba99a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba99c:	210c      	movs	r1, #12
   ba99e:	f7fd fcb5 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba9a2:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba9a4:	68a8      	ldr	r0, [r5, #8]
   ba9a6:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba9a8:	2110      	movs	r1, #16
   ba9aa:	f7fd fcbc 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9ae:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba9b0:	68a8      	ldr	r0, [r5, #8]
   ba9b2:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba9b4:	2112      	movs	r1, #18
   ba9b6:	f7fd fcb6 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9ba:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba9bc:	68ab      	ldr	r3, [r5, #8]
   ba9be:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba9c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba9c2:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba9c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba9c6:	f04f 32ff 	mov.w	r2, #4294967295
   ba9ca:	61da      	str	r2, [r3, #28]
   ba9cc:	f7ff ba65 	b.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba9d0:	4a49      	ldr	r2, [pc, #292]	; (baaf8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba9d2:	4293      	cmp	r3, r2
   ba9d4:	d162      	bne.n	baa9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba9d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba9d8:	2b00      	cmp	r3, #0
   ba9da:	f43f aa5e 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba9de:	688a      	ldr	r2, [r1, #8]
   ba9e0:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba9e2:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba9e4:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba9e6:	68a8      	ldr	r0, [r5, #8]
   ba9e8:	2104      	movs	r1, #4
   ba9ea:	f7fd fc8f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9ee:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba9f0:	68a8      	ldr	r0, [r5, #8]
   ba9f2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba9f4:	2108      	movs	r1, #8
   ba9f6:	f7fd fc89 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9fa:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9fc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba9fe:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa00:	210c      	movs	r1, #12
   baa02:	f7fd fc83 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   baa06:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa08:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   baa0a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa0c:	2110      	movs	r1, #16
   baa0e:	f7fd fc7d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   baa12:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa14:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   baa16:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa18:	2114      	movs	r1, #20
   baa1a:	f7fd fc77 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   baa1e:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   baa20:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   baa22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa24:	7e12      	ldrb	r2, [r2, #24]
   baa26:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   baa28:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   baa2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa2c:	7e52      	ldrb	r2, [r2, #25]
   baa2e:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   baa30:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   baa32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa34:	7e92      	ldrb	r2, [r2, #26]
   baa36:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   baa38:	211c      	movs	r1, #28
   baa3a:	68a8      	ldr	r0, [r5, #8]
   baa3c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   baa3e:	f7fd fc65 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa42:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   baa44:	68a8      	ldr	r0, [r5, #8]
   baa46:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   baa48:	2120      	movs	r1, #32
   baa4a:	f7fd fc5f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa4e:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   baa50:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   baa52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa54:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   baa58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baa5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   baa5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa60:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   baa64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baa68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa6a:	f04f 32ff 	mov.w	r2, #4294967295
   baa6e:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   baa74:	b17a      	cbz	r2, baa96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baa76:	7819      	ldrb	r1, [r3, #0]
   baa78:	070f      	lsls	r7, r1, #28
   baa7a:	d40c      	bmi.n	baa96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   baa7c:	1d19      	adds	r1, r3, #4
   baa7e:	332c      	adds	r3, #44	; 0x2c
   baa80:	f851 0b04 	ldr.w	r0, [r1], #4
   baa84:	f842 0b04 	str.w	r0, [r2], #4
   baa88:	4299      	cmp	r1, r3
   baa8a:	d1f9      	bne.n	baa80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   baa8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   baa8e:	7813      	ldrb	r3, [r2, #0]
   baa90:	f043 0308 	orr.w	r3, r3, #8
   baa94:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   baa96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baa98:	f7ff ba8d 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   baa9c:	784a      	ldrb	r2, [r1, #1]
   baa9e:	2a35      	cmp	r2, #53	; 0x35
   baaa0:	d17f      	bne.n	baba2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   baaa2:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   baaa4:	2e00      	cmp	r6, #0
   baaa6:	f43f a9f8 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   baaaa:	68a8      	ldr	r0, [r5, #8]
   baaac:	2100      	movs	r1, #0
   baaae:	f7fd fc2d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baab2:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baab4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   baab6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baab8:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   baaba:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baabc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   baabe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baac0:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   baac2:	725a      	strb	r2, [r3, #9]
   baac4:	f04f 0808 	mov.w	r8, #8
   baac8:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baaca:	f04f 0a0c 	mov.w	sl, #12
   baace:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baad0:	7a59      	ldrb	r1, [r3, #9]
   baad2:	b2ba      	uxth	r2, r7
   baad4:	4291      	cmp	r1, r2
   baad6:	d811      	bhi.n	baafc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   baad8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baada:	2201      	movs	r2, #1
   baadc:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baae0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   baae2:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   baae6:	2800      	cmp	r0, #0
   baae8:	d14d      	bne.n	bab86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   baaea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baaec:	f7ff ba63 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baaf0:	00142200 	.word	0x00142200
   baaf4:	00182600 	.word	0x00182600
   baaf8:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baafc:	886a      	ldrh	r2, [r5, #2]
   baafe:	fb0a f607 	mul.w	r6, sl, r7
   bab02:	3a08      	subs	r2, #8
   bab04:	42b2      	cmp	r2, r6
   bab06:	dde7      	ble.n	baad8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   bab08:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bab0a:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bab0c:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bab10:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bab12:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bab14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab16:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bab18:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bab1a:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bab1c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bab1e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bab20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab22:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bab24:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bab26:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bab28:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bab2a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bab2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bab2e:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bab30:	4433      	add	r3, r6
   bab32:	78d2      	ldrb	r2, [r2, #3]
   bab34:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bab36:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bab3a:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bab3e:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bab42:	68a8      	ldr	r0, [r5, #8]
   bab44:	b289      	uxth	r1, r1
   bab46:	f7fd fbee 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bab4a:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bab4c:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bab50:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bab54:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bab58:	68a8      	ldr	r0, [r5, #8]
   bab5a:	b289      	uxth	r1, r1
   bab5c:	f7fd fbe3 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bab60:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bab62:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bab66:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bab6a:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   bab6e:	68a8      	ldr	r0, [r5, #8]
   bab70:	b289      	uxth	r1, r1
   bab72:	f7fd fbcb 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab76:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bab78:	3701      	adds	r7, #1
   bab7a:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bab7c:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bab7e:	f108 080c 	add.w	r8, r8, #12
   bab82:	d1a4      	bne.n	baace <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   bab84:	e7a8      	b.n	baad8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab86:	780b      	ldrb	r3, [r1, #0]
   bab88:	071e      	lsls	r6, r3, #28
   bab8a:	d4ae      	bmi.n	baaea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   bab8c:	f640 32fc 	movw	r2, #3068	; 0xbfc
   bab90:	3104      	adds	r1, #4
   bab92:	f009 fd19 	bl	c45c8 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   bab96:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   bab98:	7813      	ldrb	r3, [r2, #0]
   bab9a:	f043 0308 	orr.w	r3, r3, #8
   bab9e:	7013      	strb	r3, [r2, #0]
   baba0:	e7a3      	b.n	baaea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   baba2:	2a3c      	cmp	r2, #60	; 0x3c
   baba4:	f040 80bf 	bne.w	bad26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   baba8:	884a      	ldrh	r2, [r1, #2]
   babaa:	2a28      	cmp	r2, #40	; 0x28
   babac:	d002      	beq.n	babb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   babae:	2a40      	cmp	r2, #64	; 0x40
   babb0:	f040 80b9 	bne.w	bad26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   babb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   babb6:	2b00      	cmp	r3, #0
   babb8:	f43f a96f 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   babbc:	68aa      	ldr	r2, [r5, #8]
   babbe:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   babc0:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   babc2:	68a8      	ldr	r0, [r5, #8]
   babc4:	6d26      	ldr	r6, [r4, #80]	; 0x50
   babc6:	2102      	movs	r1, #2
   babc8:	f7fd fbad 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babcc:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   babce:	68a8      	ldr	r0, [r5, #8]
   babd0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   babd2:	2104      	movs	r1, #4
   babd4:	f7fd fb9a 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babd8:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babda:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   babdc:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babde:	2108      	movs	r1, #8
   babe0:	f7fd fb94 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   babe4:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babe6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   babe8:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babea:	210c      	movs	r1, #12
   babec:	f7fd fb8e 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   babf0:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babf2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   babf4:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babf6:	2110      	movs	r1, #16
   babf8:	f7fd fb88 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   babfc:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   babfe:	886b      	ldrh	r3, [r5, #2]
   bac00:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bac02:	2b28      	cmp	r3, #40	; 0x28
   bac04:	d14b      	bne.n	bac9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   bac06:	2600      	movs	r6, #0
   bac08:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   bac0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac0c:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   bac0e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   bac10:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac12:	7d12      	ldrb	r2, [r2, #20]
   bac14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bac18:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   bac1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac1c:	7d52      	ldrb	r2, [r2, #21]
   bac1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bac22:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   bac24:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac26:	7d92      	ldrb	r2, [r2, #22]
   bac28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   bac2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac2e:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   bac32:	68a8      	ldr	r0, [r5, #8]
   bac34:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bac36:	2118      	movs	r1, #24
   bac38:	f7fd fb68 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac3c:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   bac3e:	68a8      	ldr	r0, [r5, #8]
   bac40:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bac42:	211c      	movs	r1, #28
   bac44:	f7fd fb62 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac48:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   bac4a:	68a8      	ldr	r0, [r5, #8]
   bac4c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bac4e:	2120      	movs	r1, #32
   bac50:	f7fd fb5c 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac54:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   bac56:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac58:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   bac5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac5c:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   bac5e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bac60:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bac62:	68a8      	ldr	r0, [r5, #8]
   bac64:	f7fd fb52 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac68:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac6c:	f04f 32ff 	mov.w	r2, #4294967295
   bac70:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac72:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   bac76:	b17a      	cbz	r2, bac98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bac78:	7819      	ldrb	r1, [r3, #0]
   bac7a:	0708      	lsls	r0, r1, #28
   bac7c:	d40c      	bmi.n	bac98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   bac7e:	1d19      	adds	r1, r3, #4
   bac80:	3344      	adds	r3, #68	; 0x44
   bac82:	f851 0b04 	ldr.w	r0, [r1], #4
   bac86:	f842 0b04 	str.w	r0, [r2], #4
   bac8a:	4299      	cmp	r1, r3
   bac8c:	d1f9      	bne.n	bac82 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   bac8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   bac90:	7813      	ldrb	r3, [r2, #0]
   bac92:	f043 0308 	orr.w	r3, r3, #8
   bac96:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   bac98:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bac9a:	f7ff b98c 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac9e:	68a8      	ldr	r0, [r5, #8]
   baca0:	2114      	movs	r1, #20
   baca2:	f7fd fb33 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   baca6:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baca8:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bacaa:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bacac:	2118      	movs	r1, #24
   bacae:	f7fd fb2d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bacb2:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   bacb4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   bacb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacb8:	f892 2020 	ldrb.w	r2, [r2, #32]
   bacbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bacc0:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   bacc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacc4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   bacc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   baccc:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   bacce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacd0:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   bacd4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   bacd8:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   bacda:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bacdc:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   bace0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   bace4:	68a8      	ldr	r0, [r5, #8]
   bace6:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bace8:	2124      	movs	r1, #36	; 0x24
   bacea:	f7fd fb0f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacee:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   bacf0:	68a8      	ldr	r0, [r5, #8]
   bacf2:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bacf4:	2128      	movs	r1, #40	; 0x28
   bacf6:	f7fd fb09 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacfa:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   bacfc:	68a8      	ldr	r0, [r5, #8]
   bacfe:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad00:	212c      	movs	r1, #44	; 0x2c
   bad02:	f7fd fb03 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad06:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   bad08:	68a8      	ldr	r0, [r5, #8]
   bad0a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad0c:	2130      	movs	r1, #48	; 0x30
   bad0e:	f7fd fafd 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad12:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   bad14:	2134      	movs	r1, #52	; 0x34
   bad16:	68a8      	ldr	r0, [r5, #8]
   bad18:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad1a:	f7fd faf7 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad1e:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bad20:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bad22:	213c      	movs	r1, #60	; 0x3c
   bad24:	e79d      	b.n	bac62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   bad26:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   bad2a:	d12a      	bne.n	bad82 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   bad2c:	6d66      	ldr	r6, [r4, #84]	; 0x54
   bad2e:	2e00      	cmp	r6, #0
   bad30:	f43f a8b3 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   bad34:	68a8      	ldr	r0, [r5, #8]
   bad36:	2100      	movs	r1, #0
   bad38:	f7fd fae8 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad3c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bad3e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bad40:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bad42:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bad44:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bad46:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bad48:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bad4a:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bad4c:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bad50:	f04f 32ff 	mov.w	r2, #4294967295
   bad54:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bad56:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bad58:	6a1a      	ldr	r2, [r3, #32]
   bad5a:	b17a      	cbz	r2, bad7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad5c:	7819      	ldrb	r1, [r3, #0]
   bad5e:	0709      	lsls	r1, r1, #28
   bad60:	d40c      	bmi.n	bad7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   bad62:	1d19      	adds	r1, r3, #4
   bad64:	3314      	adds	r3, #20
   bad66:	f851 0b04 	ldr.w	r0, [r1], #4
   bad6a:	f842 0b04 	str.w	r0, [r2], #4
   bad6e:	4299      	cmp	r1, r3
   bad70:	d1f9      	bne.n	bad66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bad72:	6d62      	ldr	r2, [r4, #84]	; 0x54
   bad74:	7813      	ldrb	r3, [r2, #0]
   bad76:	f043 0308 	orr.w	r3, r3, #8
   bad7a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bad7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bad7e:	f7ff b91a 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   bad82:	4aa1      	ldr	r2, [pc, #644]	; (bb008 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   bad84:	4293      	cmp	r3, r2
   bad86:	f47f a888 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   bad8a:	69a6      	ldr	r6, [r4, #24]
   bad8c:	2e00      	cmp	r6, #0
   bad8e:	f43f a884 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   bad92:	68a8      	ldr	r0, [r5, #8]
   bad94:	2100      	movs	r1, #0
   bad96:	f7fd fab9 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad9a:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad9c:	69a3      	ldr	r3, [r4, #24]
   bad9e:	f04f 32ff 	mov.w	r2, #4294967295
   bada2:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bada4:	69a3      	ldr	r3, [r4, #24]
   bada6:	691a      	ldr	r2, [r3, #16]
   bada8:	b14a      	cbz	r2, badbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   badaa:	7819      	ldrb	r1, [r3, #0]
   badac:	070f      	lsls	r7, r1, #28
   badae:	d406      	bmi.n	badbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   badb0:	685b      	ldr	r3, [r3, #4]
   badb2:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   badb4:	69a2      	ldr	r2, [r4, #24]
   badb6:	7813      	ldrb	r3, [r2, #0]
   badb8:	f043 0308 	orr.w	r3, r3, #8
   badbc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   badbe:	69a3      	ldr	r3, [r4, #24]
   badc0:	f7ff b8f9 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   badc4:	784b      	ldrb	r3, [r1, #1]
   badc6:	2b72      	cmp	r3, #114	; 0x72
   badc8:	f040 80a4 	bne.w	baf14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   badcc:	6d83      	ldr	r3, [r0, #88]	; 0x58
   badce:	2b00      	cmp	r3, #0
   badd0:	d069      	beq.n	baea6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   badd2:	689b      	ldr	r3, [r3, #8]
   badd4:	2b00      	cmp	r3, #0
   badd6:	d066      	beq.n	baea6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   badd8:	688a      	ldr	r2, [r1, #8]
   badda:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   baddc:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   badde:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bade0:	68a8      	ldr	r0, [r5, #8]
   bade2:	689f      	ldr	r7, [r3, #8]
   bade4:	4631      	mov	r1, r6
   bade6:	f7fd fa9e 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badea:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   badec:	6da3      	ldr	r3, [r4, #88]	; 0x58
   badee:	68a8      	ldr	r0, [r5, #8]
   badf0:	689e      	ldr	r6, [r3, #8]
   badf2:	2104      	movs	r1, #4
   badf4:	f7fd fa8a 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badf8:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   badfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   badfc:	68a8      	ldr	r0, [r5, #8]
   badfe:	689e      	ldr	r6, [r3, #8]
   bae00:	2108      	movs	r1, #8
   bae02:	f7fd fa83 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae06:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   bae08:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae0a:	68a8      	ldr	r0, [r5, #8]
   bae0c:	689e      	ldr	r6, [r3, #8]
   bae0e:	210c      	movs	r1, #12
   bae10:	f7fd fa7c 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae14:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   bae16:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae18:	68a8      	ldr	r0, [r5, #8]
   bae1a:	689e      	ldr	r6, [r3, #8]
   bae1c:	2110      	movs	r1, #16
   bae1e:	f7fd fa82 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae22:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bae24:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bae26:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bae28:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bae2a:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bae2c:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bae2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bae30:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bae32:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bae34:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bae36:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bae38:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae3a:	689e      	ldr	r6, [r3, #8]
   bae3c:	7833      	ldrb	r3, [r6, #0]
   bae3e:	bb23      	cbnz	r3, bae8a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   bae40:	68a8      	ldr	r0, [r5, #8]
   bae42:	f44f 7103 	mov.w	r1, #524	; 0x20c
   bae46:	f7fd fa6e 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae4a:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bae4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bae4e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bae50:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bae52:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bae56:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bae58:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bae5a:	689b      	ldr	r3, [r3, #8]
   bae5c:	781a      	ldrb	r2, [r3, #0]
   bae5e:	2a00      	cmp	r2, #0
   bae60:	f040 865d 	bne.w	bbb1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   bae64:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bae66:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   bae6a:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bae6c:	b299      	uxth	r1, r3
   bae6e:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bae70:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bae72:	d914      	bls.n	bae9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   bae74:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   bae78:	d011      	beq.n	bae9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   bae7a:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bae7c:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   bae7e:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bae80:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   bae82:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bae84:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bae86:	3301      	adds	r3, #1
   bae88:	e7f0      	b.n	bae6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   bae8a:	68a8      	ldr	r0, [r5, #8]
   bae8c:	2114      	movs	r1, #20
   bae8e:	f7fd fa4a 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae92:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bae94:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bae96:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bae98:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bae9a:	7d92      	ldrb	r2, [r2, #22]
   bae9c:	e7db      	b.n	bae56 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bae9e:	7813      	ldrb	r3, [r2, #0]
   baea0:	f043 0308 	orr.w	r3, r3, #8
   baea4:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   baea6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baea8:	2b00      	cmp	r3, #0
   baeaa:	f43e aff6 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   baeae:	689b      	ldr	r3, [r3, #8]
   baeb0:	2b00      	cmp	r3, #0
   baeb2:	f43e aff2 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   baeb6:	22b5      	movs	r2, #181	; 0xb5
   baeb8:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   baeba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baebc:	689b      	ldr	r3, [r3, #8]
   baebe:	2262      	movs	r2, #98	; 0x62
   baec0:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   baec2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baec4:	689b      	ldr	r3, [r3, #8]
   baec6:	2202      	movs	r2, #2
   baec8:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   baeca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baecc:	689b      	ldr	r3, [r3, #8]
   baece:	2272      	movs	r2, #114	; 0x72
   baed0:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   baed2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baed4:	886a      	ldrh	r2, [r5, #2]
   baed6:	689b      	ldr	r3, [r3, #8]
   baed8:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   baeda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baedc:	689a      	ldr	r2, [r3, #8]
   baede:	886b      	ldrh	r3, [r5, #2]
   baee0:	0a1b      	lsrs	r3, r3, #8
   baee2:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   baee4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baee6:	886a      	ldrh	r2, [r5, #2]
   baee8:	6898      	ldr	r0, [r3, #8]
   baeea:	68a9      	ldr	r1, [r5, #8]
   baeec:	3006      	adds	r0, #6
   baeee:	f009 fb6b 	bl	c45c8 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   baef2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baef4:	7b2a      	ldrb	r2, [r5, #12]
   baef6:	689b      	ldr	r3, [r3, #8]
   baef8:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   baefc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baefe:	7b6a      	ldrb	r2, [r5, #13]
   baf00:	689b      	ldr	r3, [r3, #8]
   baf02:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   baf06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   baf08:	7813      	ldrb	r3, [r2, #0]
   baf0a:	f043 0308 	orr.w	r3, r3, #8
   baf0e:	7013      	strb	r3, [r2, #0]
   baf10:	f7fe bfc3 	b.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   baf14:	2b73      	cmp	r3, #115	; 0x73
   baf16:	d14d      	bne.n	bafb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   baf18:	6e01      	ldr	r1, [r0, #96]	; 0x60
   baf1a:	780b      	ldrb	r3, [r1, #0]
   baf1c:	071e      	lsls	r6, r3, #28
   baf1e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   baf22:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   baf26:	d543      	bpl.n	bafb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   baf28:	0843      	lsrs	r3, r0, #1
   baf2a:	f47e afb6 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   baf2e:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   baf30:	f44f 7688 	mov.w	r6, #272	; 0x110
   baf34:	688b      	ldr	r3, [r1, #8]
   baf36:	437e      	muls	r6, r7
   baf38:	22b5      	movs	r2, #181	; 0xb5
   baf3a:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   baf3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf3e:	689b      	ldr	r3, [r3, #8]
   baf40:	4433      	add	r3, r6
   baf42:	2262      	movs	r2, #98	; 0x62
   baf44:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   baf46:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf48:	689b      	ldr	r3, [r3, #8]
   baf4a:	4433      	add	r3, r6
   baf4c:	2202      	movs	r2, #2
   baf4e:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   baf50:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf52:	689b      	ldr	r3, [r3, #8]
   baf54:	4433      	add	r3, r6
   baf56:	2273      	movs	r2, #115	; 0x73
   baf58:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   baf5a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf5c:	886a      	ldrh	r2, [r5, #2]
   baf5e:	689b      	ldr	r3, [r3, #8]
   baf60:	4433      	add	r3, r6
   baf62:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   baf64:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf66:	886a      	ldrh	r2, [r5, #2]
   baf68:	689b      	ldr	r3, [r3, #8]
   baf6a:	4433      	add	r3, r6
   baf6c:	0a12      	lsrs	r2, r2, #8
   baf6e:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   baf70:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf72:	886a      	ldrh	r2, [r5, #2]
   baf74:	6898      	ldr	r0, [r3, #8]
   baf76:	68a9      	ldr	r1, [r5, #8]
   baf78:	4430      	add	r0, r6
   baf7a:	3006      	adds	r0, #6
   baf7c:	f009 fb24 	bl	c45c8 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   baf80:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf82:	7b2a      	ldrb	r2, [r5, #12]
   baf84:	689b      	ldr	r3, [r3, #8]
   baf86:	4433      	add	r3, r6
   baf88:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   baf8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baf8e:	7b6a      	ldrb	r2, [r5, #13]
   baf90:	689b      	ldr	r3, [r3, #8]
   baf92:	441e      	add	r6, r3
   baf94:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   baf98:	6e21      	ldr	r1, [r4, #96]	; 0x60
   baf9a:	780b      	ldrb	r3, [r1, #0]
   baf9c:	2201      	movs	r2, #1
   baf9e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bafa2:	40ba      	lsls	r2, r7
   bafa4:	4302      	orrs	r2, r0
   bafa6:	f362 03c4 	bfi	r3, r2, #3, #2
   bafaa:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   bafac:	f7fe bf75 	b.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bafb0:	4617      	mov	r7, r2
   bafb2:	e7bd      	b.n	baf30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bafb4:	2b34      	cmp	r3, #52	; 0x34
   bafb6:	d129      	bne.n	bb00c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bafb8:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bafba:	2b00      	cmp	r3, #0
   bafbc:	f43e af6d 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bafc0:	689b      	ldr	r3, [r3, #8]
   bafc2:	2b00      	cmp	r3, #0
   bafc4:	f43e af69 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bafc8:	688a      	ldr	r2, [r1, #8]
   bafca:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bafcc:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bafce:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bafd0:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bafd2:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bafd4:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bafd6:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bafd8:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bafda:	68a8      	ldr	r0, [r5, #8]
   bafdc:	689e      	ldr	r6, [r3, #8]
   bafde:	2104      	movs	r1, #4
   bafe0:	f7fd f994 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafe4:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   bafe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bafe8:	68a8      	ldr	r0, [r5, #8]
   bafea:	689e      	ldr	r6, [r3, #8]
   bafec:	2108      	movs	r1, #8
   bafee:	f7fd f99a 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baff2:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   baff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   baff6:	68a8      	ldr	r0, [r5, #8]
   baff8:	689e      	ldr	r6, [r3, #8]
   baffa:	210a      	movs	r1, #10
   baffc:	f7fd f993 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb000:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb002:	6e62      	ldr	r2, [r4, #100]	; 0x64
   bb004:	e780      	b.n	baf08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   bb006:	bf00      	nop
   bb008:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   bb00c:	2b13      	cmp	r3, #19
   bb00e:	d14a      	bne.n	bb0a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   bb010:	6e83      	ldr	r3, [r0, #104]	; 0x68
   bb012:	2b00      	cmp	r3, #0
   bb014:	f43e af41 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb018:	688a      	ldr	r2, [r1, #8]
   bb01a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bb01c:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb01e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb020:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb022:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb024:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   bb026:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb028:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb02a:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb02c:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb02e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb030:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb032:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb034:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb036:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb038:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb03a:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb03c:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bb03e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb040:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb042:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb044:	729a      	strb	r2, [r3, #10]
   bb046:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb048:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bb04a:	7a3a      	ldrb	r2, [r7, #8]
   bb04c:	b2f3      	uxtb	r3, r6
   bb04e:	429a      	cmp	r2, r3
   bb050:	d809      	bhi.n	bb066 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bb052:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb054:	2201      	movs	r2, #1
   bb056:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb05a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   bb05c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb05e:	b9a8      	cbnz	r0, bb08c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   bb060:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb062:	f7fe bfa8 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb066:	886b      	ldrh	r3, [r5, #2]
   bb068:	3b08      	subs	r3, #8
   bb06a:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb06e:	ea4f 0186 	mov.w	r1, r6, lsl #2
   bb072:	ddee      	ble.n	bb052 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb074:	3108      	adds	r1, #8
   bb076:	68a8      	ldr	r0, [r5, #8]
   bb078:	b289      	uxth	r1, r1
   bb07a:	f7fd f947 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb07e:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb082:	3601      	adds	r6, #1
   bb084:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb086:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb088:	d1de      	bne.n	bb048 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   bb08a:	e7e2      	b.n	bb052 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb08c:	780b      	ldrb	r3, [r1, #0]
   bb08e:	071b      	lsls	r3, r3, #28
   bb090:	d4e6      	bmi.n	bb060 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   bb092:	2248      	movs	r2, #72	; 0x48
   bb094:	3104      	adds	r1, #4
   bb096:	f009 fa97 	bl	c45c8 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb09a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   bb09c:	7813      	ldrb	r3, [r2, #0]
   bb09e:	f043 0308 	orr.w	r3, r3, #8
   bb0a2:	7013      	strb	r3, [r2, #0]
   bb0a4:	e7dc      	b.n	bb060 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   bb0a6:	2b15      	cmp	r3, #21
   bb0a8:	f47e aef7 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   bb0ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   bb0ae:	2b00      	cmp	r3, #0
   bb0b0:	f43e aef3 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb0b4:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb0b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb0b8:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb0ba:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   bb0bc:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb0be:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   bb0c0:	3101      	adds	r1, #1
   bb0c2:	2908      	cmp	r1, #8
   bb0c4:	d1f7      	bne.n	bb0b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   bb0c6:	68a8      	ldr	r0, [r5, #8]
   bb0c8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   bb0ca:	f7fd f92c 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0ce:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bb0d0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   bb0d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb0d4:	7a92      	ldrb	r2, [r2, #10]
   bb0d6:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb0d8:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb0da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb0dc:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb0de:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb0e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb0e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb0e4:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb0e6:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb0e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb0ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb0ec:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb0ee:	73da      	strb	r2, [r3, #15]
   bb0f0:	2610      	movs	r6, #16
   bb0f2:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb0f4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb0f6:	7b51      	ldrb	r1, [r2, #13]
   bb0f8:	b2da      	uxtb	r2, r3
   bb0fa:	4291      	cmp	r1, r2
   bb0fc:	d80b      	bhi.n	bb116 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   bb0fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb100:	2201      	movs	r2, #1
   bb102:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb106:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   bb108:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   bb10c:	2800      	cmp	r0, #0
   bb10e:	d17f      	bne.n	bb210 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   bb110:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb112:	f7fe bf50 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb116:	886a      	ldrh	r2, [r5, #2]
   bb118:	3a10      	subs	r2, #16
   bb11a:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   bb11e:	ea4f 1843 	mov.w	r8, r3, lsl #5
   bb122:	ddec      	ble.n	bb0fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   bb124:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb126:	46b4      	mov	ip, r6
   bb128:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb12a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb12c:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb12e:	4440      	add	r0, r8
   bb130:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb132:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb136:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   bb138:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb13a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb13c:	4437      	add	r7, r6
   bb13e:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb140:	4440      	add	r0, r8
   bb142:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb144:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb146:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   bb148:	2a03      	cmp	r2, #3
   bb14a:	d80b      	bhi.n	bb164 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb14c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb14e:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb150:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   bb154:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb158:	4440      	add	r0, r8
   bb15a:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb15c:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb160:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   bb164:	3201      	adds	r2, #1
   bb166:	2a08      	cmp	r2, #8
   bb168:	f10c 0c01 	add.w	ip, ip, #1
   bb16c:	d1dd      	bne.n	bb12a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   bb16e:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb170:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb172:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bb174:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb176:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb17a:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb17c:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bb17e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb180:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb182:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb184:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb188:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb18a:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb18c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb18e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb190:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb192:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb196:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb198:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb19a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb19c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb19e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb1a0:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb1a4:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb1a6:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb1a8:	3118      	adds	r1, #24
   bb1aa:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bb1ae:	68a8      	ldr	r0, [r5, #8]
   bb1b0:	b289      	uxth	r1, r1
   bb1b2:	f7fd f8b8 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1b6:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb1b8:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb1ba:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bb1be:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb1c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1c2:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb1c4:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb1c6:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb1c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bb1cc:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb1ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1d0:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb1d2:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb1d4:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb1d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bb1da:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb1dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1de:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb1e0:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb1e2:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb1e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bb1e8:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb1ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1ec:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb1ee:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb1f0:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb1f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb1f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb1f8:	68aa      	ldr	r2, [r5, #8]
   bb1fa:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb1fc:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb1fe:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb204:	f106 0620 	add.w	r6, r6, #32
   bb208:	463b      	mov	r3, r7
   bb20a:	f47f af73 	bne.w	bb0f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bb20e:	e776      	b.n	bb0fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb210:	780b      	ldrb	r3, [r1, #0]
   bb212:	071f      	lsls	r7, r3, #28
   bb214:	f53f af7c 	bmi.w	bb110 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bb218:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bb21c:	3102      	adds	r1, #2
   bb21e:	f009 f9d3 	bl	c45c8 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb222:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb224:	7813      	ldrb	r3, [r2, #0]
   bb226:	f043 0308 	orr.w	r3, r3, #8
   bb22a:	7013      	strb	r3, [r2, #0]
   bb22c:	e770      	b.n	bb110 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bb22e:	680b      	ldr	r3, [r1, #0]
   bb230:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb234:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb238:	d12f      	bne.n	bb29a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb23a:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb23c:	2b00      	cmp	r3, #0
   bb23e:	f43e ae2c 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb242:	688a      	ldr	r2, [r1, #8]
   bb244:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb246:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb248:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb24a:	68a8      	ldr	r0, [r5, #8]
   bb24c:	2102      	movs	r1, #2
   bb24e:	f7fd f86a 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb252:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb254:	68a8      	ldr	r0, [r5, #8]
   bb256:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb258:	2104      	movs	r1, #4
   bb25a:	f7fd f857 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb25e:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb260:	68a8      	ldr	r0, [r5, #8]
   bb262:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb264:	2108      	movs	r1, #8
   bb266:	f7fd f851 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb26a:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb26c:	68a8      	ldr	r0, [r5, #8]
   bb26e:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb270:	210c      	movs	r1, #12
   bb272:	f7fd f858 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb276:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb278:	68a8      	ldr	r0, [r5, #8]
   bb27a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb27c:	210e      	movs	r1, #14
   bb27e:	f7fd f852 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb282:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb284:	68a8      	ldr	r0, [r5, #8]
   bb286:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb288:	2110      	movs	r1, #16
   bb28a:	f7fd f84c 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb28e:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb290:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb292:	2201      	movs	r2, #1
   bb294:	751a      	strb	r2, [r3, #20]
   bb296:	f7fe be00 	b.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb29a:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb29e:	f47e adfc 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb2a2:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb2a4:	2e00      	cmp	r6, #0
   bb2a6:	f43e adf8 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb2aa:	68a8      	ldr	r0, [r5, #8]
   bb2ac:	2100      	movs	r1, #0
   bb2ae:	f7fd f83a 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2b2:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb2b4:	68a8      	ldr	r0, [r5, #8]
   bb2b6:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb2b8:	2102      	movs	r1, #2
   bb2ba:	f7fd f834 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2be:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb2c0:	68a8      	ldr	r0, [r5, #8]
   bb2c2:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb2c4:	2104      	movs	r1, #4
   bb2c6:	f7fd f82e 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2ca:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb2cc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb2ce:	f04f 32ff 	mov.w	r2, #4294967295
   bb2d2:	609a      	str	r2, [r3, #8]
   bb2d4:	f7fe bde1 	b.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb2d8:	680b      	ldr	r3, [r1, #0]
   bb2da:	4ab0      	ldr	r2, [pc, #704]	; (bb59c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb2dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb2e0:	4293      	cmp	r3, r2
   bb2e2:	f47e adda 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb2e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb2e8:	2b00      	cmp	r3, #0
   bb2ea:	f43e add6 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb2ee:	688a      	ldr	r2, [r1, #8]
   bb2f0:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb2f2:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb2f4:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb2f6:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb2f8:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb2fa:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb2fc:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb2fe:	68a8      	ldr	r0, [r5, #8]
   bb300:	2102      	movs	r1, #2
   bb302:	f7fd f810 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb306:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb308:	68a8      	ldr	r0, [r5, #8]
   bb30a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb30c:	2104      	movs	r1, #4
   bb30e:	f7fd f80a 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb312:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb314:	68a8      	ldr	r0, [r5, #8]
   bb316:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb318:	2106      	movs	r1, #6
   bb31a:	f7fd f804 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb31e:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb320:	68a8      	ldr	r0, [r5, #8]
   bb322:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb324:	2108      	movs	r1, #8
   bb326:	f7fc fff1 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb32a:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb32c:	68a8      	ldr	r0, [r5, #8]
   bb32e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb330:	210c      	movs	r1, #12
   bb332:	f7fc ffeb 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb336:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb338:	68a8      	ldr	r0, [r5, #8]
   bb33a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb33c:	2110      	movs	r1, #16
   bb33e:	f7fc ffe5 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb342:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb344:	68a8      	ldr	r0, [r5, #8]
   bb346:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb348:	2114      	movs	r1, #20
   bb34a:	f7fc ffdf 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb34e:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb350:	68a8      	ldr	r0, [r5, #8]
   bb352:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb354:	2118      	movs	r1, #24
   bb356:	f7fc ffd9 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb35a:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb35c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb35e:	f04f 32ff 	mov.w	r2, #4294967295
   bb362:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb364:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb368:	b17a      	cbz	r2, bb38a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb36a:	7819      	ldrb	r1, [r3, #0]
   bb36c:	070e      	lsls	r6, r1, #28
   bb36e:	d40c      	bmi.n	bb38a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb370:	1d19      	adds	r1, r3, #4
   bb372:	3320      	adds	r3, #32
   bb374:	f851 0b04 	ldr.w	r0, [r1], #4
   bb378:	f842 0b04 	str.w	r0, [r2], #4
   bb37c:	4299      	cmp	r1, r3
   bb37e:	d1f9      	bne.n	bb374 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb380:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb382:	7813      	ldrb	r3, [r2, #0]
   bb384:	f043 0308 	orr.w	r3, r3, #8
   bb388:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb38a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb38c:	f7fe be13 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb390:	4a83      	ldr	r2, [pc, #524]	; (bb5a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb392:	4293      	cmp	r3, r2
   bb394:	d158      	bne.n	bb448 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb396:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb39a:	2f00      	cmp	r7, #0
   bb39c:	f43e ad7d 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb3a0:	68a8      	ldr	r0, [r5, #8]
   bb3a2:	2100      	movs	r1, #0
   bb3a4:	f7fc ffb2 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3a8:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb3aa:	68a8      	ldr	r0, [r5, #8]
   bb3ac:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb3b0:	2108      	movs	r1, #8
   bb3b2:	f7fc ffab 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3b6:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb3ba:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3be:	210c      	movs	r1, #12
   bb3c0:	f7fc ffa4 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb3c4:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb3c8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3cc:	4631      	mov	r1, r6
   bb3ce:	f7fc ff9d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb3d2:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3d4:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb3d6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3da:	2114      	movs	r1, #20
   bb3dc:	f7fc ff96 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb3e0:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb3e4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3e8:	2118      	movs	r1, #24
   bb3ea:	f7fc ff8f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb3ee:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3f0:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb3f2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3f6:	211c      	movs	r1, #28
   bb3f8:	f7fc ff88 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb3fc:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb400:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb404:	2120      	movs	r1, #32
   bb406:	f7fc ff81 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb40a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb40c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb410:	f04f 32ff 	mov.w	r2, #4294967295
   bb414:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb416:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb41a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb41c:	b182      	cbz	r2, bb440 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb41e:	7819      	ldrb	r1, [r3, #0]
   bb420:	0709      	lsls	r1, r1, #28
   bb422:	d40d      	bmi.n	bb440 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb424:	1d19      	adds	r1, r3, #4
   bb426:	3328      	adds	r3, #40	; 0x28
   bb428:	f851 0b04 	ldr.w	r0, [r1], #4
   bb42c:	f842 0b04 	str.w	r0, [r2], #4
   bb430:	4299      	cmp	r1, r3
   bb432:	d1f9      	bne.n	bb428 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb434:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb438:	7813      	ldrb	r3, [r2, #0]
   bb43a:	f043 0308 	orr.w	r3, r3, #8
   bb43e:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb440:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb444:	f7fe bdb7 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb448:	784b      	ldrb	r3, [r1, #1]
   bb44a:	2b02      	cmp	r3, #2
   bb44c:	d158      	bne.n	bb500 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb44e:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb452:	2e00      	cmp	r6, #0
   bb454:	f43e ad21 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb458:	68a8      	ldr	r0, [r5, #8]
   bb45a:	2100      	movs	r1, #0
   bb45c:	f7fc ff56 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb460:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb462:	68a8      	ldr	r0, [r5, #8]
   bb464:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb468:	2104      	movs	r1, #4
   bb46a:	f7fc ff5c 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb46e:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb470:	68a8      	ldr	r0, [r5, #8]
   bb472:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb476:	2106      	movs	r1, #6
   bb478:	f7fc ff55 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb47c:	8170      	strh	r0, [r6, #10]
   bb47e:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb480:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb484:	886b      	ldrh	r3, [r5, #2]
   bb486:	7a7a      	ldrb	r2, [r7, #9]
   bb488:	b2b1      	uxth	r1, r6
   bb48a:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb48e:	d320      	bcc.n	bb4d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb490:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb494:	886a      	ldrh	r2, [r5, #2]
   bb496:	7a73      	ldrb	r3, [r6, #9]
   bb498:	08db      	lsrs	r3, r3, #3
   bb49a:	3302      	adds	r3, #2
   bb49c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb4a0:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb4a4:	d826      	bhi.n	bb4f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb4a6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb4aa:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb4ae:	b160      	cbz	r0, bb4ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb4b0:	780b      	ldrb	r3, [r1, #0]
   bb4b2:	071a      	lsls	r2, r3, #28
   bb4b4:	d409      	bmi.n	bb4ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb4b6:	2288      	movs	r2, #136	; 0x88
   bb4b8:	3104      	adds	r1, #4
   bb4ba:	f009 f885 	bl	c45c8 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb4be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb4c2:	7813      	ldrb	r3, [r2, #0]
   bb4c4:	f043 0308 	orr.w	r3, r3, #8
   bb4c8:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb4ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb4ce:	f7fe bd72 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb4d2:	3b08      	subs	r3, #8
   bb4d4:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb4d8:	ddda      	ble.n	bb490 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb4da:	0089      	lsls	r1, r1, #2
   bb4dc:	3108      	adds	r1, #8
   bb4de:	68a8      	ldr	r0, [r5, #8]
   bb4e0:	b289      	uxth	r1, r1
   bb4e2:	f7fc ff13 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb4e6:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb4ea:	3601      	adds	r6, #1
   bb4ec:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb4ee:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb4f0:	d1c6      	bne.n	bb480 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb4f2:	e7cd      	b.n	bb490 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb4f4:	68a8      	ldr	r0, [r5, #8]
   bb4f6:	f7fc ff09 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb4fa:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb4fe:	e7d2      	b.n	bb4a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb500:	2b03      	cmp	r3, #3
   bb502:	d14f      	bne.n	bb5a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb504:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb508:	2900      	cmp	r1, #0
   bb50a:	f43e acc6 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb50e:	886a      	ldrh	r2, [r5, #2]
   bb510:	1f13      	subs	r3, r2, #4
   bb512:	bf48      	it	mi
   bb514:	1cd3      	addmi	r3, r2, #3
   bb516:	10db      	asrs	r3, r3, #3
   bb518:	2700      	movs	r7, #0
   bb51a:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb51e:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb520:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb522:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb526:	3b04      	subs	r3, #4
   bb528:	42bb      	cmp	r3, r7
   bb52a:	dc08      	bgt.n	bb53e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb52c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb530:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb534:	bb10      	cbnz	r0, bb57c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb536:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb53a:	f7fe bd3c 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb53e:	fa1f f887 	uxth.w	r8, r7
   bb542:	f108 0104 	add.w	r1, r8, #4
   bb546:	68a8      	ldr	r0, [r5, #8]
   bb548:	b289      	uxth	r1, r1
   bb54a:	f7fc fedf 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb54e:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb552:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb556:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb55a:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb55e:	68a8      	ldr	r0, [r5, #8]
   bb560:	b289      	uxth	r1, r1
   bb562:	f7fc fed3 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb566:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb56a:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb56c:	3601      	adds	r6, #1
   bb56e:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb570:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb574:	f107 0708 	add.w	r7, r7, #8
   bb578:	d1d2      	bne.n	bb520 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bb57a:	e7d7      	b.n	bb52c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb57c:	780b      	ldrb	r3, [r1, #0]
   bb57e:	071b      	lsls	r3, r3, #28
   bb580:	d4d9      	bmi.n	bb536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bb582:	f44f 720e 	mov.w	r2, #568	; 0x238
   bb586:	3108      	adds	r1, #8
   bb588:	3004      	adds	r0, #4
   bb58a:	f009 f81d 	bl	c45c8 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bb58e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bb592:	7813      	ldrb	r3, [r2, #0]
   bb594:	f043 0308 	orr.w	r3, r3, #8
   bb598:	7013      	strb	r3, [r2, #0]
   bb59a:	e7cc      	b.n	bb536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bb59c:	001c0300 	.word	0x001c0300
   bb5a0:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bb5a4:	2b10      	cmp	r3, #16
   bb5a6:	f47e ac78 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bb5aa:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bb5ae:	2e00      	cmp	r6, #0
   bb5b0:	f43e ac73 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bb5b4:	68a8      	ldr	r0, [r5, #8]
   bb5b6:	2100      	movs	r1, #0
   bb5b8:	f7fc fea8 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb5bc:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb5be:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb5c0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb5c4:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb5c6:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb5c8:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb5ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb5ce:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb5d0:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bb5d2:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb5d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb5d8:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb5da:	74da      	strb	r2, [r3, #19]
   bb5dc:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb5de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bb5e2:	7cc6      	ldrb	r6, [r0, #19]
   bb5e4:	b28a      	uxth	r2, r1
   bb5e6:	4296      	cmp	r6, r2
   bb5e8:	d80c      	bhi.n	bb604 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb5ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb5ee:	f04f 32ff 	mov.w	r2, #4294967295
   bb5f2:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb5f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb5f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bb5fa:	bb62      	cbnz	r2, bb656 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb5fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb600:	f7fe bcd9 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb604:	886a      	ldrh	r2, [r5, #2]
   bb606:	3a10      	subs	r2, #16
   bb608:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bb60c:	dded      	ble.n	bb5ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bb60e:	68aa      	ldr	r2, [r5, #8]
   bb610:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb612:	1d0a      	adds	r2, r1, #4
   bb614:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb618:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb61a:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bb61c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb61e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb622:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb624:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb628:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb62a:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bb62c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb62e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb632:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb634:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb638:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb63a:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bb63c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb63e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb642:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb644:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb648:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb64a:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb64c:	2907      	cmp	r1, #7
   bb64e:	f103 0304 	add.w	r3, r3, #4
   bb652:	d1c4      	bne.n	bb5de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bb654:	e7c9      	b.n	bb5ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb656:	7819      	ldrb	r1, [r3, #0]
   bb658:	070f      	lsls	r7, r1, #28
   bb65a:	d4cf      	bmi.n	bb5fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bb65c:	1d19      	adds	r1, r3, #4
   bb65e:	3330      	adds	r3, #48	; 0x30
   bb660:	f851 0b04 	ldr.w	r0, [r1], #4
   bb664:	f842 0b04 	str.w	r0, [r2], #4
   bb668:	4299      	cmp	r1, r3
   bb66a:	d1f9      	bne.n	bb660 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb66c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb670:	7813      	ldrb	r3, [r2, #0]
   bb672:	f043 0308 	orr.w	r3, r3, #8
   bb676:	7013      	strb	r3, [r2, #0]
   bb678:	e7c0      	b.n	bb5fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bb67a:	680b      	ldr	r3, [r1, #0]
   bb67c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb680:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bb684:	d16a      	bne.n	bb75c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bb686:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bb68a:	2b00      	cmp	r3, #0
   bb68c:	f43e ac05 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bb690:	7818      	ldrb	r0, [r3, #0]
   bb692:	7859      	ldrb	r1, [r3, #1]
   bb694:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb696:	bf36      	itet	cc
   bb698:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bb69c:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb69e:	1a52      	subcc	r2, r2, r1
   bb6a0:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bb6a2:	2a0e      	cmp	r2, #14
   bb6a4:	d84b      	bhi.n	bb73e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb6a6:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb6a8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb6ac:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb6ae:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb6b0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb6b4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb6b6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb6b8:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb6ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb6be:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb6c0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb6c4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb6c6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb6c8:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb6ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb6ce:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb6d0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb6d4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb6d6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb6d8:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb6da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb6de:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb6e0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb6e4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb6e6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb6e8:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb6ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb6ee:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb6f0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb6f4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb6f6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb6f8:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb6fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb6fe:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb700:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb704:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb706:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb708:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb70a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb70e:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb710:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb714:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb716:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb718:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb71a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb71e:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb720:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb724:	7813      	ldrb	r3, [r2, #0]
   bb726:	3301      	adds	r3, #1
   bb728:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb72a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb72e:	781a      	ldrb	r2, [r3, #0]
   bb730:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb732:	f47e abb2 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb736:	2200      	movs	r2, #0
   bb738:	701a      	strb	r2, [r3, #0]
   bb73a:	f7fe bbae 	b.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb73e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb742:	b923      	cbnz	r3, bb74e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb744:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb748:	2b00      	cmp	r3, #0
   bb74a:	f43e aba6 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb74e:	4996      	ldr	r1, [pc, #600]	; (bb9a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb750:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb754:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb758:	f004 bae9 	b.w	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb75c:	784b      	ldrb	r3, [r1, #1]
   bb75e:	2b80      	cmp	r3, #128	; 0x80
   bb760:	f47e ab9b 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb764:	884b      	ldrh	r3, [r1, #2]
   bb766:	2ba4      	cmp	r3, #164	; 0xa4
   bb768:	f63e ab97 	bhi.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb76c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb770:	2a00      	cmp	r2, #0
   bb772:	f43e ab92 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb776:	7810      	ldrb	r0, [r2, #0]
   bb778:	7851      	ldrb	r1, [r2, #1]
   bb77a:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb77c:	bf36      	itet	cc
   bb77e:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb780:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb782:	1a5b      	subcc	r3, r3, r1
   bb784:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb786:	2bf8      	cmp	r3, #248	; 0xf8
   bb788:	d84f      	bhi.n	bb82a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb78a:	23ac      	movs	r3, #172	; 0xac
   bb78c:	fb03 2200 	mla	r2, r3, r0, r2
   bb790:	21b5      	movs	r1, #181	; 0xb5
   bb792:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb794:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb798:	7811      	ldrb	r1, [r2, #0]
   bb79a:	fb03 2201 	mla	r2, r3, r1, r2
   bb79e:	2162      	movs	r1, #98	; 0x62
   bb7a0:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb7a2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb7a6:	7811      	ldrb	r1, [r2, #0]
   bb7a8:	fb03 2201 	mla	r2, r3, r1, r2
   bb7ac:	2113      	movs	r1, #19
   bb7ae:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb7b0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb7b4:	7811      	ldrb	r1, [r2, #0]
   bb7b6:	fb03 2201 	mla	r2, r3, r1, r2
   bb7ba:	2180      	movs	r1, #128	; 0x80
   bb7bc:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb7be:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb7c2:	7811      	ldrb	r1, [r2, #0]
   bb7c4:	fb03 2201 	mla	r2, r3, r1, r2
   bb7c8:	8869      	ldrh	r1, [r5, #2]
   bb7ca:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb7cc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb7d0:	7811      	ldrb	r1, [r2, #0]
   bb7d2:	fb03 2201 	mla	r2, r3, r1, r2
   bb7d6:	8869      	ldrh	r1, [r5, #2]
   bb7d8:	0a09      	lsrs	r1, r1, #8
   bb7da:	71d1      	strb	r1, [r2, #7]
   bb7dc:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb7de:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb7e0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb7e4:	b28e      	uxth	r6, r1
   bb7e6:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb7e8:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb7ea:	d907      	bls.n	bb7fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb7ec:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb7ee:	fb03 2200 	mla	r2, r3, r0, r2
   bb7f2:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb7f4:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb7f6:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb7f8:	3101      	adds	r1, #1
   bb7fa:	e7f0      	b.n	bb7de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb7fc:	fb03 2200 	mla	r2, r3, r0, r2
   bb800:	7b29      	ldrb	r1, [r5, #12]
   bb802:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb806:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb80a:	7b69      	ldrb	r1, [r5, #13]
   bb80c:	7810      	ldrb	r0, [r2, #0]
   bb80e:	fb03 2300 	mla	r3, r3, r0, r2
   bb812:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb816:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb81a:	7813      	ldrb	r3, [r2, #0]
   bb81c:	3301      	adds	r3, #1
   bb81e:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb820:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb824:	781a      	ldrb	r2, [r3, #0]
   bb826:	2afa      	cmp	r2, #250	; 0xfa
   bb828:	e783      	b.n	bb732 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb82a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb82e:	b923      	cbnz	r3, bb83a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb830:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb834:	2b00      	cmp	r3, #0
   bb836:	f43e ab30 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb83a:	495c      	ldr	r1, [pc, #368]	; (bb9ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb83c:	e788      	b.n	bb750 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb83e:	680b      	ldr	r3, [r1, #0]
   bb840:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb844:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb848:	f040 80b2 	bne.w	bb9b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb84c:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb850:	2f00      	cmp	r7, #0
   bb852:	f43e ab22 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb856:	68a8      	ldr	r0, [r5, #8]
   bb858:	2100      	movs	r1, #0
   bb85a:	f7fc fd57 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb85e:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb860:	68a8      	ldr	r0, [r5, #8]
   bb862:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb866:	2104      	movs	r1, #4
   bb868:	f7fc fd5d 	bl	b8326 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb86c:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb86e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb870:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb874:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb876:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb878:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb87a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb87e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb880:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb882:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb884:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb888:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb88a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb88c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb88e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb892:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb894:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb896:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb898:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb89c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb89e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb8a0:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb8a2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8a6:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb8a8:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8aa:	210c      	movs	r1, #12
   bb8ac:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb8ae:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8b2:	f7fc fd2b 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb8b6:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb8b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb8ba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8be:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb8c0:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb8c2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb8c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb8c8:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb8ca:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb8ce:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8d2:	2114      	movs	r1, #20
   bb8d4:	f7fc fd1a 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb8d8:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8da:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb8dc:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8e0:	2118      	movs	r1, #24
   bb8e2:	f7fc fd13 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb8e6:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8e8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb8ea:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8ee:	211c      	movs	r1, #28
   bb8f0:	f7fc fd0c 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb8f4:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8f6:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb8f8:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8fc:	2120      	movs	r1, #32
   bb8fe:	f7fc fd05 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb902:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb904:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb906:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb90a:	2124      	movs	r1, #36	; 0x24
   bb90c:	f7fc fcfe 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb910:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb912:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb914:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb918:	4631      	mov	r1, r6
   bb91a:	f7fc fcf7 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb91e:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb920:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb922:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb926:	212c      	movs	r1, #44	; 0x2c
   bb928:	f7fc fcf0 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb92c:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb92e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb930:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb934:	2130      	movs	r1, #48	; 0x30
   bb936:	f7fc fce9 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb93a:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb93c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb940:	68a8      	ldr	r0, [r5, #8]
   bb942:	2134      	movs	r1, #52	; 0x34
   bb944:	f7fc fce2 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb948:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb94a:	68a8      	ldr	r0, [r5, #8]
   bb94c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb950:	2138      	movs	r1, #56	; 0x38
   bb952:	f7fc fcdb 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb956:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb958:	68a8      	ldr	r0, [r5, #8]
   bb95a:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb95e:	213c      	movs	r1, #60	; 0x3c
   bb960:	f7fc fcd4 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb964:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb966:	68a8      	ldr	r0, [r5, #8]
   bb968:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb96c:	2140      	movs	r1, #64	; 0x40
   bb96e:	f7fc fccd 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb972:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb974:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb978:	f04f 32ff 	mov.w	r2, #4294967295
   bb97c:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb97e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb982:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb984:	b160      	cbz	r0, bb9a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb986:	780b      	ldrb	r3, [r1, #0]
   bb988:	071e      	lsls	r6, r3, #28
   bb98a:	d409      	bmi.n	bb9a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb98c:	2248      	movs	r2, #72	; 0x48
   bb98e:	3104      	adds	r1, #4
   bb990:	f008 fe1a 	bl	c45c8 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb994:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb998:	7813      	ldrb	r3, [r2, #0]
   bb99a:	f043 0308 	orr.w	r3, r3, #8
   bb99e:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb9a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb9a4:	f7fe bb07 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb9a8:	000c71d5 	.word	0x000c71d5
   bb9ac:	000c7212 	.word	0x000c7212
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb9b0:	4a5d      	ldr	r2, [pc, #372]	; (bbb28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb9b2:	4293      	cmp	r3, r2
   bb9b4:	d156      	bne.n	bba64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb9b6:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb9ba:	2e00      	cmp	r6, #0
   bb9bc:	f43e aa6d 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb9c0:	68a8      	ldr	r0, [r5, #8]
   bb9c2:	2100      	movs	r1, #0
   bb9c4:	f7fc fca2 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb9c8:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb9ca:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb9cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb9d0:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb9d2:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb9d4:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb9d6:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb9da:	2108      	movs	r1, #8
   bb9dc:	f7fc fc96 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb9e0:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb9e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb9e4:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb9e8:	210c      	movs	r1, #12
   bb9ea:	f7fc fc8f 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb9ee:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb9f0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb9f2:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb9f6:	2110      	movs	r1, #16
   bb9f8:	f7fc fc88 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb9fc:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb9fe:	68a8      	ldr	r0, [r5, #8]
   bba00:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bba04:	2114      	movs	r1, #20
   bba06:	f7fc fc81 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba0a:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bba0c:	68a8      	ldr	r0, [r5, #8]
   bba0e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bba12:	2118      	movs	r1, #24
   bba14:	f7fc fc7a 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba18:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bba1a:	68a8      	ldr	r0, [r5, #8]
   bba1c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bba20:	211c      	movs	r1, #28
   bba22:	f7fc fc73 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba26:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bba28:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bba2c:	f04f 32ff 	mov.w	r2, #4294967295
   bba30:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bba32:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bba36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bba38:	b182      	cbz	r2, bba5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bba3a:	7819      	ldrb	r1, [r3, #0]
   bba3c:	0708      	lsls	r0, r1, #28
   bba3e:	d40d      	bmi.n	bba5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bba40:	1d19      	adds	r1, r3, #4
   bba42:	3324      	adds	r3, #36	; 0x24
   bba44:	f851 0b04 	ldr.w	r0, [r1], #4
   bba48:	f842 0b04 	str.w	r0, [r2], #4
   bba4c:	4299      	cmp	r1, r3
   bba4e:	d1f9      	bne.n	bba44 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bba50:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bba54:	7813      	ldrb	r3, [r2, #0]
   bba56:	f043 0308 	orr.w	r3, r3, #8
   bba5a:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bba5c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bba60:	f7fe baa9 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bba64:	4a31      	ldr	r2, [pc, #196]	; (bbb2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bba66:	4293      	cmp	r3, r2
   bba68:	f47e aa17 	bne.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bba6c:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bba70:	2e00      	cmp	r6, #0
   bba72:	f43e aa12 	beq.w	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bba76:	68a8      	ldr	r0, [r5, #8]
   bba78:	2100      	movs	r1, #0
   bba7a:	f7fc fc47 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba7e:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bba80:	68a8      	ldr	r0, [r5, #8]
   bba82:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bba86:	2108      	movs	r1, #8
   bba88:	f7fc fc40 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba8c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba8e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bba90:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba94:	210c      	movs	r1, #12
   bba96:	f7fc fc39 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bba9a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bba9c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bba9e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaa2:	2110      	movs	r1, #16
   bbaa4:	f7fc fc32 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbaa8:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbaaa:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbaac:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbab0:	2114      	movs	r1, #20
   bbab2:	f7fc fc2b 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbab6:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbab8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbaba:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbabe:	2118      	movs	r1, #24
   bbac0:	f7fc fc24 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbac4:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbac6:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbac8:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbacc:	211c      	movs	r1, #28
   bbace:	f7fc fc1d 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbad2:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbad4:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbad6:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbada:	2120      	movs	r1, #32
   bbadc:	f7fc fc16 	bl	b830c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbae0:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbae2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbae6:	f04f 32ff 	mov.w	r2, #4294967295
   bbaea:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbaec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbaf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bbaf2:	b182      	cbz	r2, bbb16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbaf4:	7819      	ldrb	r1, [r3, #0]
   bbaf6:	0709      	lsls	r1, r1, #28
   bbaf8:	d40d      	bmi.n	bbb16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bbafa:	1d19      	adds	r1, r3, #4
   bbafc:	3328      	adds	r3, #40	; 0x28
   bbafe:	f851 0b04 	ldr.w	r0, [r1], #4
   bbb02:	f842 0b04 	str.w	r0, [r2], #4
   bbb06:	4299      	cmp	r1, r3
   bbb08:	d1f9      	bne.n	bbafe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bbb0a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bbb0e:	7813      	ldrb	r3, [r2, #0]
   bbb10:	f043 0308 	orr.w	r3, r3, #8
   bbb14:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bbb16:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbb1a:	f7fe ba4c 	b.w	b9fb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bbb1e:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bbb20:	2018      	movs	r0, #24
   bbb22:	f7ff b9a2 	b.w	bae6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bbb26:	bf00      	nop
   bbb28:	00200100 	.word	0x00200100
   bbb2c:	00240200 	.word	0x00240200

000bbb30 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bbb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbb34:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbb36:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bbb3a:	f89d a020 	ldrb.w	sl, [sp, #32]
   bbb3e:	4604      	mov	r4, r0
   bbb40:	460f      	mov	r7, r1
   bbb42:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbb44:	b993      	cbnz	r3, bbb6c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bbb46:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bbb4a:	886b      	ldrh	r3, [r5, #2]
   bbb4c:	88aa      	ldrh	r2, [r5, #4]
   bbb4e:	3303      	adds	r3, #3
   bbb50:	4293      	cmp	r3, r2
   bbb52:	db03      	blt.n	bbb5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bbb54:	4639      	mov	r1, r7
   bbb56:	4620      	mov	r0, r4
   bbb58:	f7fd fdf0 	bl	b973c <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bbb5c:	88ae      	ldrh	r6, [r5, #4]
   bbb5e:	bb7e      	cbnz	r6, bbbc0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bbb60:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bbb62:	88ab      	ldrh	r3, [r5, #4]
   bbb64:	3301      	adds	r3, #1
   bbb66:	80ab      	strh	r3, [r5, #4]
}
   bbb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbb6c:	2b03      	cmp	r3, #3
   bbb6e:	d124      	bne.n	bbbba <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bbb70:	7852      	ldrb	r2, [r2, #1]
   bbb72:	7829      	ldrb	r1, [r5, #0]
   bbb74:	f7fc fdda 	bl	b872c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bbb78:	4680      	mov	r8, r0
   bbb7a:	2800      	cmp	r0, #0
   bbb7c:	d1e5      	bne.n	bbb4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbb7e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb82:	b91b      	cbnz	r3, bbb8c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bbb84:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbb88:	2b00      	cmp	r3, #0
   bbb8a:	d0de      	beq.n	bbb4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bbb8c:	49b7      	ldr	r1, [pc, #732]	; (bbe6c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bbb8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb92:	f004 f8b2 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bbb96:	7829      	ldrb	r1, [r5, #0]
   bbb98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb9c:	220a      	movs	r2, #10
   bbb9e:	f7fc fbd5 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bbba2:	49b3      	ldr	r1, [pc, #716]	; (bbe70 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbba4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbba8:	f004 f8a7 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bbbac:	7869      	ldrb	r1, [r5, #1]
   bbbae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbb2:	220a      	movs	r2, #10
   bbbb4:	f7fc fbd1 	bl	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbbb8:	e7c7      	b.n	bbb4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bbbba:	f04f 0802 	mov.w	r8, #2
   bbbbe:	e7c4      	b.n	bbb4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bbbc0:	2e01      	cmp	r6, #1
   bbbc2:	d101      	bne.n	bbbc8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bbbc4:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbbc6:	e7cc      	b.n	bbb62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bbbc8:	2e02      	cmp	r6, #2
   bbbca:	d101      	bne.n	bbbd0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bbbcc:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbbce:	e7c8      	b.n	bbb62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bbbd0:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bbbd2:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bbbd4:	d103      	bne.n	bbbde <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bbbd6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bbbda:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbbdc:	e7c1      	b.n	bbb62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bbbde:	1d0b      	adds	r3, r1, #4
   bbbe0:	429e      	cmp	r6, r3
   bbbe2:	d136      	bne.n	bbc52 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bbbe4:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbbe6:	88aa      	ldrh	r2, [r5, #4]
   bbbe8:	f108 0306 	add.w	r3, r8, #6
   bbbec:	429a      	cmp	r2, r3
   bbbee:	d1b8      	bne.n	bbb62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bbbf0:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbbf4:	2b00      	cmp	r3, #0
   bbbf6:	d1b4      	bne.n	bbb62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bbbf8:	2200      	movs	r2, #0
   bbbfa:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbbfc:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bbc00:	b91a      	cbnz	r2, bbc0a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bbc02:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bbc06:	2a00      	cmp	r2, #0
   bbc08:	d0ab      	beq.n	bbb62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbc0a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bbc0e:	2b00      	cmp	r3, #0
   bbc10:	f000 8170 	beq.w	bbef4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbc14:	4997      	ldr	r1, [pc, #604]	; (bbe74 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbc16:	f004 f870 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bbc1a:	4997      	ldr	r1, [pc, #604]	; (bbe78 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bbc1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc20:	f004 f86b 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbc24:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bbc28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc2c:	220a      	movs	r2, #10
   bbc2e:	f004 f880 	bl	bfd32 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bbc32:	4992      	ldr	r1, [pc, #584]	; (bbe7c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bbc34:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc38:	f004 f85f 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bbc3c:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bbc40:	220a      	movs	r2, #10
   bbc42:	4641      	mov	r1, r8
   bbc44:	4620      	mov	r0, r4
   bbc46:	f004 f874 	bl	bfd32 <_ZN5Print11printNumberEmh>
        n += println();
   bbc4a:	4620      	mov	r0, r4
   bbc4c:	f004 f859 	bl	bfd02 <_ZN5Print7printlnEv>
        return n;
   bbc50:	e787      	b.n	bbb62 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bbc52:	3105      	adds	r1, #5
   bbc54:	428e      	cmp	r6, r1
   bbc56:	f040 812f 	bne.w	bbeb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbc5a:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bbc5c:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbc5e:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bbc60:	89a9      	ldrh	r1, [r5, #12]
   bbc62:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bbc66:	4291      	cmp	r1, r2
   bbc68:	f040 80ae 	bne.w	bbdc8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bbc6c:	2301      	movs	r3, #1
   bbc6e:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bbc70:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbc74:	7829      	ldrb	r1, [r5, #0]
   bbc76:	4549      	cmp	r1, r9
   bbc78:	d155      	bne.n	bbd26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bbc7a:	786b      	ldrb	r3, [r5, #1]
   bbc7c:	4553      	cmp	r3, sl
   bbc7e:	d152      	bne.n	bbd26 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bbc80:	2301      	movs	r3, #1
   bbc82:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bbc84:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbc88:	b3b3      	cbz	r3, bbcf8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bbc8a:	497d      	ldr	r1, [pc, #500]	; (bbe80 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bbc8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc90:	f004 f833 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbc94:	220a      	movs	r2, #10
   bbc96:	8869      	ldrh	r1, [r5, #2]
   bbc98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc9c:	f004 f849 	bl	bfd32 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bbca0:	4978      	ldr	r1, [pc, #480]	; (bbe84 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bbca2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbca6:	f004 f828 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bbcaa:	2200      	movs	r2, #0
   bbcac:	4629      	mov	r1, r5
   bbcae:	4620      	mov	r0, r4
   bbcb0:	f7fd ff50 	bl	b9b54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbcb4:	7bab      	ldrb	r3, [r5, #14]
   bbcb6:	2b01      	cmp	r3, #1
   bbcb8:	d104      	bne.n	bbcc4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bbcba:	4973      	ldr	r1, [pc, #460]	; (bbe88 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bbcbc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcc0:	f004 f835 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbcc4:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bbcc8:	2b01      	cmp	r3, #1
   bbcca:	d104      	bne.n	bbcd6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bbccc:	496f      	ldr	r1, [pc, #444]	; (bbe8c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bbcce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcd2:	f004 f82c 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbcd6:	7beb      	ldrb	r3, [r5, #15]
   bbcd8:	2b01      	cmp	r3, #1
   bbcda:	d104      	bne.n	bbce6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bbcdc:	496c      	ldr	r1, [pc, #432]	; (bbe90 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bbcde:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbce2:	f004 f824 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbce6:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bbcea:	2b01      	cmp	r3, #1
   bbcec:	d104      	bne.n	bbcf8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bbcee:	4969      	ldr	r1, [pc, #420]	; (bbe94 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bbcf0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcf4:	f004 f81b 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bbcf8:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbcfc:	b91b      	cbnz	r3, bbd06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bbcfe:	4629      	mov	r1, r5
   bbd00:	4620      	mov	r0, r4
   bbd02:	f7fe f8b9 	bl	b9e78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbd06:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbd0a:	2b03      	cmp	r3, #3
   bbd0c:	f47f af6b 	bne.w	bbbe6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bbd10:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bbd14:	b108      	cbz	r0, bbd1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bbd16:	f7f8 f9c2 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bbd1a:	2300      	movs	r3, #0
   bbd1c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bbd20:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbd24:	e75f      	b.n	bbbe6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbd26:	882b      	ldrh	r3, [r5, #0]
   bbd28:	f240 1205 	movw	r2, #261	; 0x105
   bbd2c:	4293      	cmp	r3, r2
   bbd2e:	d123      	bne.n	bbd78 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bbd30:	68ab      	ldr	r3, [r5, #8]
   bbd32:	781a      	ldrb	r2, [r3, #0]
   bbd34:	454a      	cmp	r2, r9
   bbd36:	d102      	bne.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbd38:	785b      	ldrb	r3, [r3, #1]
   bbd3a:	4553      	cmp	r3, sl
   bbd3c:	d0a0      	beq.n	bbc80 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbd3e:	786a      	ldrb	r2, [r5, #1]
   bbd40:	4620      	mov	r0, r4
   bbd42:	f7fc fbf1 	bl	b8528 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bbd46:	2800      	cmp	r0, #0
   bbd48:	d09c      	beq.n	bbc84 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bbd4a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd4e:	2b00      	cmp	r3, #0
   bbd50:	d0d2      	beq.n	bbcf8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bbd52:	4951      	ldr	r1, [pc, #324]	; (bbe98 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bbd54:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd58:	f003 ffcf 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bbd5c:	2210      	movs	r2, #16
   bbd5e:	7829      	ldrb	r1, [r5, #0]
   bbd60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd64:	f7fc faf2 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbd68:	4941      	ldr	r1, [pc, #260]	; (bbe70 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbd6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd6e:	f003 ffc4 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bbd72:	7869      	ldrb	r1, [r5, #1]
   bbd74:	2210      	movs	r2, #16
   bbd76:	e022      	b.n	bbdbe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbd78:	2b05      	cmp	r3, #5
   bbd7a:	d1e0      	bne.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbd7c:	68ab      	ldr	r3, [r5, #8]
   bbd7e:	781a      	ldrb	r2, [r3, #0]
   bbd80:	454a      	cmp	r2, r9
   bbd82:	d1dc      	bne.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbd84:	785b      	ldrb	r3, [r3, #1]
   bbd86:	4553      	cmp	r3, sl
   bbd88:	d1d9      	bne.n	bbd3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bbd8a:	2303      	movs	r3, #3
   bbd8c:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bbd8e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd92:	2b00      	cmp	r3, #0
   bbd94:	d0b0      	beq.n	bbcf8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bbd96:	4941      	ldr	r1, [pc, #260]	; (bbe9c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bbd98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd9c:	f003 ffad 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bbda0:	68ab      	ldr	r3, [r5, #8]
   bbda2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbda6:	7819      	ldrb	r1, [r3, #0]
   bbda8:	2210      	movs	r2, #16
   bbdaa:	f7fc facf 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bbdae:	493c      	ldr	r1, [pc, #240]	; (bbea0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bbdb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdb4:	f003 ffa1 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bbdb8:	68ab      	ldr	r3, [r5, #8]
   bbdba:	7859      	ldrb	r1, [r3, #1]
   bbdbc:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bbdbe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdc2:	f7fc faca 	bl	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbdc6:	e75d      	b.n	bbc84 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bbdc8:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbdca:	782b      	ldrb	r3, [r5, #0]
   bbdcc:	454b      	cmp	r3, r9
   bbdce:	d143      	bne.n	bbe58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bbdd0:	786a      	ldrb	r2, [r5, #1]
   bbdd2:	4552      	cmp	r2, sl
   bbdd4:	d140      	bne.n	bbe58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bbdd6:	2300      	movs	r3, #0
   bbdd8:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbdda:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbdde:	b91b      	cbnz	r3, bbde8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bbde0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbde4:	2b00      	cmp	r3, #0
   bbde6:	d08e      	beq.n	bbd06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bbde8:	492e      	ldr	r1, [pc, #184]	; (bbea4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bbdea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdee:	f003 ff84 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bbdf2:	492d      	ldr	r1, [pc, #180]	; (bbea8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bbdf4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdf8:	f003 ff7f 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bbdfc:	7b29      	ldrb	r1, [r5, #12]
   bbdfe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe02:	220a      	movs	r2, #10
   bbe04:	f7fc faa2 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bbe08:	4928      	ldr	r1, [pc, #160]	; (bbeac <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bbe0a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe0e:	f003 ff74 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bbe12:	7b69      	ldrb	r1, [r5, #13]
   bbe14:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe18:	220a      	movs	r2, #10
   bbe1a:	f7fc fa97 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bbe1e:	4924      	ldr	r1, [pc, #144]	; (bbeb0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bbe20:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe24:	f003 ff69 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bbe28:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bbe2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe30:	220a      	movs	r2, #10
   bbe32:	f7fc fa8b 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bbe36:	491f      	ldr	r1, [pc, #124]	; (bbeb4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bbe38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe3c:	f003 ff5d 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bbe40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe44:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bbe48:	220a      	movs	r2, #10
   bbe4a:	f7fc fa7f 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bbe4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe52:	f003 ff56 	bl	bfd02 <_ZN5Print7printlnEv>
   bbe56:	e756      	b.n	bbd06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbe58:	2b05      	cmp	r3, #5
   bbe5a:	d1be      	bne.n	bbdda <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbe5c:	68ab      	ldr	r3, [r5, #8]
   bbe5e:	781a      	ldrb	r2, [r3, #0]
   bbe60:	454a      	cmp	r2, r9
   bbe62:	d1ba      	bne.n	bbdda <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbe64:	785b      	ldrb	r3, [r3, #1]
   bbe66:	4553      	cmp	r3, sl
   bbe68:	d1b7      	bne.n	bbdda <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbe6a:	e7b4      	b.n	bbdd6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bbe6c:	000c7254 	.word	0x000c7254
   bbe70:	000c72c5 	.word	0x000c72c5
   bbe74:	000c73cd 	.word	0x000c73cd
   bbe78:	000c7424 	.word	0x000c7424
   bbe7c:	000c743a 	.word	0x000c743a
   bbe80:	000c7301 	.word	0x000c7301
   bbe84:	000c7312 	.word	0x000c7312
   bbe88:	000c731e 	.word	0x000c731e
   bbe8c:	000c7332 	.word	0x000c7332
   bbe90:	000c7346 	.word	0x000c7346
   bbe94:	000c7360 	.word	0x000c7360
   bbe98:	000c72cd 	.word	0x000c72cd
   bbe9c:	000c728c 	.word	0x000c728c
   bbea0:	000c72bb 	.word	0x000c72bb
   bbea4:	000c737a 	.word	0x000c737a
   bbea8:	000c738b 	.word	0x000c738b
   bbeac:	000c7398 	.word	0x000c7398
   bbeb0:	000c73a5 	.word	0x000c73a5
   bbeb4:	000c73b9 	.word	0x000c73b9
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbeb8:	786a      	ldrb	r2, [r5, #1]
   bbeba:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bbebc:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbec0:	4620      	mov	r0, r4
   bbec2:	f7fc fb31 	bl	b8528 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bbec6:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bbeca:	2800      	cmp	r0, #0
   bbecc:	bf18      	it	ne
   bbece:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bbed2:	2b00      	cmp	r3, #0
   bbed4:	f47f ae87 	bne.w	bbbe6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bbed8:	1ef3      	subs	r3, r6, #3
   bbeda:	454b      	cmp	r3, r9
   bbedc:	f77f ae83 	ble.w	bbbe6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bbee0:	3e04      	subs	r6, #4
   bbee2:	eba6 0609 	sub.w	r6, r6, r9
   bbee6:	4546      	cmp	r6, r8
   bbee8:	da02      	bge.n	bbef0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bbeea:	68ab      	ldr	r3, [r5, #8]
   bbeec:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbeee:	e67a      	b.n	bbbe6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bbef0:	2301      	movs	r3, #1
   bbef2:	e681      	b.n	bbbf8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbef4:	4900      	ldr	r1, [pc, #0]	; (bbef8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bbef6:	e68e      	b.n	bbc16 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bbef8:	000c73f2 	.word	0x000c73f2

000bbefc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bbefc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbefe:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bbf02:	4604      	mov	r4, r0
   bbf04:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbf06:	b113      	cbz	r3, bbf0e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bbf08:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bbf0c:	b953      	cbnz	r3, bbf24 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bbf0e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bbf12:	b128      	cbz	r0, bbf20 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bbf14:	490e      	ldr	r1, [pc, #56]	; (bbf50 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbf16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf1a:	f003 ff08 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bbf1e:	2000      	movs	r0, #0
}
   bbf20:	b003      	add	sp, #12
   bbf22:	bd30      	pop	{r4, r5, pc}
   bbf24:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bbf26:	f7fd ff12 	bl	b9d4e <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bbf2a:	4285      	cmp	r5, r0
   bbf2c:	9901      	ldr	r1, [sp, #4]
   bbf2e:	d908      	bls.n	bbf42 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf30:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf34:	b91b      	cbnz	r3, bbf3e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bbf36:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bbf3a:	2800      	cmp	r0, #0
   bbf3c:	d0f0      	beq.n	bbf20 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbf3e:	4905      	ldr	r1, [pc, #20]	; (bbf54 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bbf40:	e7e9      	b.n	bbf16 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bbf42:	4620      	mov	r0, r4
   bbf44:	462a      	mov	r2, r5
   bbf46:	f7fd ff0b 	bl	b9d60 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bbf4a:	2001      	movs	r0, #1
   bbf4c:	e7e8      	b.n	bbf20 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bbf4e:	bf00      	nop
   bbf50:	000c7452 	.word	0x000c7452
   bbf54:	000c747d 	.word	0x000c747d

000bbf58 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bbf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbf5c:	4604      	mov	r4, r0
   bbf5e:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bbf60:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bbf64:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bbf68:	f88d 100f 	strb.w	r1, [sp, #15]
   bbf6c:	4615      	mov	r5, r2
   bbf6e:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bbf70:	b118      	cbz	r0, bbf7a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bbf72:	6803      	ldr	r3, [r0, #0]
   bbf74:	b2c9      	uxtb	r1, r1
   bbf76:	689b      	ldr	r3, [r3, #8]
   bbf78:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bbf7a:	7823      	ldrb	r3, [r4, #0]
   bbf7c:	2b01      	cmp	r3, #1
   bbf7e:	d80e      	bhi.n	bbf9e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbf80:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbf84:	2bb5      	cmp	r3, #181	; 0xb5
   bbf86:	d12e      	bne.n	bbfe6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bbf88:	2300      	movs	r3, #0
   bbf8a:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbf8e:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bbf90:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbf94:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbf98:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbf9a:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bbf9e:	7826      	ldrb	r6, [r4, #0]
   bbfa0:	2e02      	cmp	r6, #2
   bbfa2:	f040 81d5 	bne.w	bc350 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bbfa6:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bbfaa:	bb5b      	cbnz	r3, bc004 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bbfac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbfb0:	2bb5      	cmp	r3, #181	; 0xb5
   bbfb2:	d001      	beq.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bbfb4:	2300      	movs	r3, #0
   bbfb6:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bbfb8:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bbfbc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbfc0:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bbfc4:	2b01      	cmp	r3, #1
   bbfc6:	f040 81a3 	bne.w	bc310 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bbfca:	463b      	mov	r3, r7
   bbfcc:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbfd0:	4620      	mov	r0, r4
   bbfd2:	f7ff fdad 	bl	bbb30 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bbfd6:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bbfda:	3301      	adds	r3, #1
   bbfdc:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bbfe0:	b005      	add	sp, #20
   bbfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bbfe6:	2b24      	cmp	r3, #36	; 0x24
   bbfe8:	d105      	bne.n	bbff6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bbfea:	2300      	movs	r3, #0
   bbfec:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bbff0:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bbff2:	7023      	strb	r3, [r4, #0]
   bbff4:	e7d3      	b.n	bbf9e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bbff6:	2bd3      	cmp	r3, #211	; 0xd3
   bbff8:	d1d1      	bne.n	bbf9e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bbffa:	2300      	movs	r3, #0
   bbffc:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc000:	2303      	movs	r3, #3
   bc002:	e7f6      	b.n	bbff2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bc004:	2b01      	cmp	r3, #1
   bc006:	d103      	bne.n	bc010 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bc008:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc00c:	2b62      	cmp	r3, #98	; 0x62
   bc00e:	e7d0      	b.n	bbfb2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bc010:	2b02      	cmp	r3, #2
   bc012:	d10e      	bne.n	bc032 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bc014:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc018:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bc01c:	2200      	movs	r2, #0
   bc01e:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bc022:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bc026:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bc02a:	88eb      	ldrh	r3, [r5, #6]
   bc02c:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bc030:	e7c2      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bc032:	2b03      	cmp	r3, #3
   bc034:	f040 80b7 	bne.w	bc1a6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc038:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bc03c:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bc040:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc044:	2905      	cmp	r1, #5
   bc046:	d0b7      	beq.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bc048:	42b9      	cmp	r1, r7
   bc04a:	d10c      	bne.n	bc066 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bc04c:	4546      	cmp	r6, r8
   bc04e:	d10a      	bne.n	bc066 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc050:	2300      	movs	r3, #0
   bc052:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc056:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bc058:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bc05c:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bc05e:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bc062:	80ab      	strh	r3, [r5, #4]
   bc064:	e7a8      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bc066:	4632      	mov	r2, r6
   bc068:	4620      	mov	r0, r4
   bc06a:	f7fc fa5d 	bl	b8528 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc06e:	2800      	cmp	r0, #0
   bc070:	f000 8095 	beq.w	bc19e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bc074:	4632      	mov	r2, r6
   bc076:	4620      	mov	r0, r4
   bc078:	f7fc fb58 	bl	b872c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bc07c:	4606      	mov	r6, r0
   bc07e:	b9e8      	cbnz	r0, bc0bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc080:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc084:	b913      	cbnz	r3, bc08c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bc086:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc08a:	b1bb      	cbz	r3, bc0bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bc08c:	49a7      	ldr	r1, [pc, #668]	; (bc32c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bc08e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc092:	f003 fe32 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bc096:	220a      	movs	r2, #10
   bc098:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc09c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0a0:	f7fc f954 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc0a4:	49a2      	ldr	r1, [pc, #648]	; (bc330 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc0a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0aa:	f003 fe26 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bc0ae:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc0b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0b6:	220a      	movs	r2, #10
   bc0b8:	f7fc f94f 	bl	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bc0bc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bc0c0:	b1a3      	cbz	r3, bc0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc0c2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0c6:	b913      	cbnz	r3, bc0ce <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bc0c8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc0cc:	b123      	cbz	r3, bc0d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bc0ce:	4999      	ldr	r1, [pc, #612]	; (bc334 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bc0d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0d4:	f003 fe2b 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bc0d8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc0dc:	b108      	cbz	r0, bc0e2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bc0de:	f7f7 ffde 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bc0e2:	2300      	movs	r3, #0
   bc0e4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bc0e8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bc0ec:	4630      	mov	r0, r6
   bc0ee:	f7f7 ffd4 	bl	b409a <_Znaj>
   bc0f2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0f6:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bc0fa:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bc0fe:	bb38      	cbnz	r0, bc150 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc100:	b913      	cbnz	r3, bc108 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bc102:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc106:	b1e3      	cbz	r3, bc142 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bc108:	498b      	ldr	r1, [pc, #556]	; (bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bc10a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc10e:	f003 fdf4 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc112:	2210      	movs	r2, #16
   bc114:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc118:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc11c:	f7fc f916 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc120:	4983      	ldr	r1, [pc, #524]	; (bc330 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc122:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc126:	f003 fde8 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc12a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc12e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc132:	2210      	movs	r2, #16
   bc134:	f7fc f911 	bl	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bc138:	4980      	ldr	r1, [pc, #512]	; (bc33c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bc13a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc13e:	f003 fdf6 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc142:	2300      	movs	r3, #0
   bc144:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc148:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bc14c:	702b      	strb	r3, [r5, #0]
   bc14e:	e783      	b.n	bc058 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bc150:	2203      	movs	r2, #3
   bc152:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bc156:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bc15a:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bc15e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bc162:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bc166:	2b00      	cmp	r3, #0
   bc168:	f43f af26 	beq.w	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bc16c:	4974      	ldr	r1, [pc, #464]	; (bc340 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bc16e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc172:	f003 fdc2 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc176:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc17a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc17e:	2210      	movs	r2, #16
   bc180:	f7fc f8e4 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc184:	496a      	ldr	r1, [pc, #424]	; (bc330 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc186:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc18a:	f003 fdb6 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc18e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc192:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc196:	2210      	movs	r2, #16
   bc198:	f7fc f8df 	bl	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc19c:	e70c      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bc19e:	2301      	movs	r3, #1
   bc1a0:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bc1a4:	e708      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bc1a6:	2b04      	cmp	r3, #4
   bc1a8:	d104      	bne.n	bc1b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bc1aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bc1ae:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bc1b2:	e701      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bc1b4:	2b05      	cmp	r3, #5
   bc1b6:	d106      	bne.n	bc1c6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bc1b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc1bc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc1c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bc1c4:	e7f3      	b.n	bc1ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bc1c6:	2b06      	cmp	r3, #6
   bc1c8:	d12b      	bne.n	bc222 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc1ca:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc1ce:	bb13      	cbnz	r3, bc216 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc1d0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc1d4:	b913      	cbnz	r3, bc1dc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bc1d6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc1da:	b1bb      	cbz	r3, bc20c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bc1dc:	4959      	ldr	r1, [pc, #356]	; (bc344 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bc1de:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1e2:	f003 fd8a 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bc1e6:	2210      	movs	r2, #16
   bc1e8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc1ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1f0:	f7fc f8ac 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc1f4:	494e      	ldr	r1, [pc, #312]	; (bc330 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc1f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1fa:	f003 fd7e 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bc1fe:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc202:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc206:	2210      	movs	r2, #16
   bc208:	f7fc f8a7 	bl	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bc20c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc210:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bc214:	e6d0      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bc216:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc21a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc21e:	701a      	strb	r2, [r3, #0]
   bc220:	e6ca      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc222:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc224:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc228:	f47f aec6 	bne.w	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc22c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc230:	bb9b      	cbnz	r3, bc29a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bc232:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bc236:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc23a:	2b02      	cmp	r3, #2
   bc23c:	f47f aebc 	bne.w	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc240:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc244:	2905      	cmp	r1, #5
   bc246:	f47f aeb7 	bne.w	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc24a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc24e:	781a      	ldrb	r2, [r3, #0]
   bc250:	42ba      	cmp	r2, r7
   bc252:	f47f aeb1 	bne.w	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc256:	785a      	ldrb	r2, [r3, #1]
   bc258:	4542      	cmp	r2, r8
   bc25a:	f47f aead 	bne.w	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc25e:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc262:	2a02      	cmp	r2, #2
   bc264:	d121      	bne.n	bc2aa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc266:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc26a:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc26e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc272:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc276:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc27a:	2001      	movs	r0, #1
   bc27c:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc280:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc284:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc288:	781b      	ldrb	r3, [r3, #0]
   bc28a:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc28c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc290:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc294:	7852      	ldrb	r2, [r2, #1]
   bc296:	705a      	strb	r2, [r3, #1]
   bc298:	e68e      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc29a:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc29c:	bf16      	itet	ne
   bc29e:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc2a2:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc2a6:	705a      	strbne	r2, [r3, #1]
   bc2a8:	e7c5      	b.n	bc236 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc2aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc2ae:	b923      	cbnz	r3, bc2ba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc2b0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc2b4:	2b00      	cmp	r3, #0
   bc2b6:	f43f ae7f 	beq.w	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc2ba:	4923      	ldr	r1, [pc, #140]	; (bc348 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc2bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2c0:	f003 fd1b 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc2c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc2c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2cc:	7819      	ldrb	r1, [r3, #0]
   bc2ce:	2210      	movs	r2, #16
   bc2d0:	f7fc f83c 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc2d4:	4916      	ldr	r1, [pc, #88]	; (bc330 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc2d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2da:	f003 fd0e 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc2de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc2e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2e6:	7859      	ldrb	r1, [r3, #1]
   bc2e8:	2210      	movs	r2, #16
   bc2ea:	f7fc f82f 	bl	b834c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc2ee:	4917      	ldr	r1, [pc, #92]	; (bc34c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc2f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2f4:	f003 fd01 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc2f8:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc2fc:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc300:	220a      	movs	r2, #10
   bc302:	4630      	mov	r0, r6
   bc304:	f003 fd15 	bl	bfd32 <_ZN5Print11printNumberEmh>
        n += println();
   bc308:	4630      	mov	r0, r6
   bc30a:	f003 fcfa 	bl	bfd02 <_ZN5Print7printlnEv>
        return n;
   bc30e:	e653      	b.n	bbfb8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc310:	b913      	cbnz	r3, bc318 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc312:	463b      	mov	r3, r7
   bc314:	462a      	mov	r2, r5
   bc316:	e65b      	b.n	bbfd0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc318:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc31a:	bf08      	it	eq
   bc31c:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc320:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc322:	bf18      	it	ne
   bc324:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc328:	e652      	b.n	bbfd0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc32a:	bf00      	nop
   bc32c:	000c74be 	.word	0x000c74be
   bc330:	000c72c5 	.word	0x000c72c5
   bc334:	000c74f3 	.word	0x000c74f3
   bc338:	000c7535 	.word	0x000c7535
   bc33c:	000c757a 	.word	0x000c757a
   bc340:	000c75ac 	.word	0x000c75ac
   bc344:	000c75dd 	.word	0x000c75dd
   bc348:	000c760d 	.word	0x000c760d
   bc34c:	000c763d 	.word	0x000c763d
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc350:	2e01      	cmp	r6, #1
   bc352:	f040 8188 	bne.w	bc666 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc356:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc35a:	2b00      	cmp	r3, #0
   bc35c:	d146      	bne.n	bc3ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc35e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc362:	2a24      	cmp	r2, #36	; 0x24
   bc364:	f000 8086 	beq.w	bc474 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc368:	2300      	movs	r3, #0
   bc36a:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc36c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc370:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc372:	bf04      	itt	eq
   bc374:	23fb      	moveq	r3, #251	; 0xfb
   bc376:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc37a:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc37e:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc382:	3501      	adds	r5, #1
   bc384:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc386:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc388:	bf08      	it	eq
   bc38a:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc38c:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc390:	bf08      	it	eq
   bc392:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc394:	2d00      	cmp	r5, #0
   bc396:	f47f ae23 	bne.w	bbfe0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc39a:	4620      	mov	r0, r4
   bc39c:	f7fc fc20 	bl	b8be0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc3a0:	2800      	cmp	r0, #0
   bc3a2:	f000 8120 	beq.w	bc5e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc3a6:	4620      	mov	r0, r4
   bc3a8:	f7fc fd7c 	bl	b8ea4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc3ac:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc3ae:	4620      	mov	r0, r4
   bc3b0:	f7fc fdfa 	bl	b8fa8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc3b4:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc3b6:	4620      	mov	r0, r4
   bc3b8:	f7fd f88a 	bl	b94d0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc3bc:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc3be:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc3c0:	1e41      	subs	r1, r0, #1
   bc3c2:	428e      	cmp	r6, r1
   bc3c4:	f280 80b4 	bge.w	bc530 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc3c8:	783a      	ldrb	r2, [r7, #0]
   bc3ca:	3a04      	subs	r2, #4
   bc3cc:	4296      	cmp	r6, r2
   bc3ce:	f280 80af 	bge.w	bc530 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc3d2:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc3d4:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc3d8:	f000 80ad 	beq.w	bc536 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc3dc:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc3de:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc3e2:	bf18      	it	ne
   bc3e4:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc3e6:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc3e8:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc3ea:	e7ea      	b.n	bc3c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc3ec:	2b01      	cmp	r3, #1
   bc3ee:	d103      	bne.n	bc3f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc3f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc3f4:	2a47      	cmp	r2, #71	; 0x47
   bc3f6:	e7b5      	b.n	bc364 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc3f8:	b2da      	uxtb	r2, r3
   bc3fa:	2a05      	cmp	r2, #5
   bc3fc:	d93a      	bls.n	bc474 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc3fe:	4620      	mov	r0, r4
   bc400:	f7fc fbee 	bl	b8be0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc404:	b308      	cbz	r0, bc44a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc406:	4620      	mov	r0, r4
   bc408:	f7fc fd4c 	bl	b8ea4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc40c:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc40e:	4620      	mov	r0, r4
   bc410:	f7fc fdca 	bl	b8fa8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc414:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc416:	4620      	mov	r0, r4
   bc418:	f7fd f85a 	bl	b94d0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc41c:	782b      	ldrb	r3, [r5, #0]
   bc41e:	4283      	cmp	r3, r0
   bc420:	d213      	bcs.n	bc44a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc422:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc426:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc428:	782b      	ldrb	r3, [r5, #0]
   bc42a:	3301      	adds	r3, #1
   bc42c:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc42e:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc430:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc432:	d10a      	bne.n	bc44a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc434:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc438:	b913      	cbnz	r3, bc440 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc43a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc43e:	b123      	cbz	r3, bc44a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc440:	498f      	ldr	r1, [pc, #572]	; (bc680 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc442:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc446:	f003 fc72 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc44a:	4620      	mov	r0, r4
   bc44c:	f7fc f9c8 	bl	b87e0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc450:	b128      	cbz	r0, bc45e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc452:	2201      	movs	r2, #1
   bc454:	f10d 010f 	add.w	r1, sp, #15
   bc458:	4620      	mov	r0, r4
   bc45a:	f7ff fd4f 	bl	bbefc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc45e:	4620      	mov	r0, r4
   bc460:	f7fc faee 	bl	b8a40 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc464:	2800      	cmp	r0, #0
   bc466:	d081      	beq.n	bc36c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc468:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc46c:	4620      	mov	r0, r4
   bc46e:	f7fc fbaf 	bl	b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc472:	e77b      	b.n	bc36c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc474:	18e2      	adds	r2, r4, r3
   bc476:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc47a:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc47e:	2b05      	cmp	r3, #5
   bc480:	f47f af74 	bne.w	bc36c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc484:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc488:	b923      	cbnz	r3, bc494 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc48a:	4620      	mov	r0, r4
   bc48c:	f7fc fa70 	bl	b8970 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc490:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc494:	4620      	mov	r0, r4
   bc496:	f7fc fba3 	bl	b8be0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc49a:	b1b8      	cbz	r0, bc4cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc49c:	4620      	mov	r0, r4
   bc49e:	f7fc fd01 	bl	b8ea4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc4a2:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc4a4:	4620      	mov	r0, r4
   bc4a6:	f7fc fd7f 	bl	b8fa8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc4aa:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc4ac:	4620      	mov	r0, r4
   bc4ae:	f7fd f80f 	bl	b94d0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc4b2:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc4b4:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc4b6:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc4b8:	2100      	movs	r1, #0
   bc4ba:	4628      	mov	r0, r5
   bc4bc:	f008 f8ac 	bl	c4618 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc4c0:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc4c4:	602b      	str	r3, [r5, #0]
   bc4c6:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc4ca:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc4cc:	4620      	mov	r0, r4
   bc4ce:	f7fc f987 	bl	b87e0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc4d2:	b128      	cbz	r0, bc4e0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc4d4:	2206      	movs	r2, #6
   bc4d6:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc4da:	4620      	mov	r0, r4
   bc4dc:	f7ff fd0e 	bl	bbefc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc4e0:	4620      	mov	r0, r4
   bc4e2:	f7fc faad 	bl	b8a40 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc4e6:	b1e8      	cbz	r0, bc524 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc4e8:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc4ec:	4620      	mov	r0, r4
   bc4ee:	f7fc fb6f 	bl	b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc4f2:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc4f6:	4620      	mov	r0, r4
   bc4f8:	f7fc fb6a 	bl	b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc4fc:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc500:	4620      	mov	r0, r4
   bc502:	f7fc fb65 	bl	b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc506:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc50a:	4620      	mov	r0, r4
   bc50c:	f7fc fb60 	bl	b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc510:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc514:	4620      	mov	r0, r4
   bc516:	f7fc fb5b 	bl	b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc51a:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc51e:	4620      	mov	r0, r4
   bc520:	f7fc fb56 	bl	b8bd0 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc524:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc528:	2b05      	cmp	r3, #5
   bc52a:	f67f af1f 	bls.w	bc36c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc52e:	e766      	b.n	bc3fe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc530:	2d2a      	cmp	r5, #42	; 0x2a
   bc532:	f040 808b 	bne.w	bc64c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc536:	091a      	lsrs	r2, r3, #4
   bc538:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc53c:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc53e:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc540:	f003 030f 	and.w	r3, r3, #15
   bc544:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc548:	bf84      	itt	hi
   bc54a:	3237      	addhi	r2, #55	; 0x37
   bc54c:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc54e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc552:	bf88      	it	hi
   bc554:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc558:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc55c:	42ab      	cmp	r3, r5
   bc55e:	eb08 0b06 	add.w	fp, r8, r6
   bc562:	d143      	bne.n	bc5ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc564:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc568:	4553      	cmp	r3, sl
   bc56a:	d13f      	bne.n	bc5ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc56c:	4620      	mov	r0, r4
   bc56e:	f7fc fd9d 	bl	b90ac <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc572:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc574:	4620      	mov	r0, r4
   bc576:	f7fc fe1d 	bl	b91b4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc57a:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc57c:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc57e:	2100      	movs	r1, #0
   bc580:	f008 f84a 	bl	c4618 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bc584:	783a      	ldrb	r2, [r7, #0]
   bc586:	4641      	mov	r1, r8
   bc588:	4630      	mov	r0, r6
   bc58a:	f008 f81d 	bl	c45c8 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bc58e:	783b      	ldrb	r3, [r7, #0]
   bc590:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc592:	4620      	mov	r0, r4
   bc594:	f7fd f80e 	bl	b95b4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bc598:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bc59a:	f025 0503 	bic.w	r5, r5, #3
   bc59e:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc5a2:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bc5a4:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bc5a8:	4620      	mov	r0, r4
   bc5aa:	f7fc fba5 	bl	b8cf8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bc5ae:	b1d0      	cbz	r0, bc5e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bc5b0:	f01a 0104 	ands.w	r1, sl, #4
   bc5b4:	d117      	bne.n	bc5e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bc5b6:	4620      	mov	r0, r4
   bc5b8:	9102      	str	r1, [sp, #8]
   bc5ba:	f7fc fe7f 	bl	b92bc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bc5be:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc5c0:	4620      	mov	r0, r4
   bc5c2:	f7fc feff 	bl	b93c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc5c6:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc5c8:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc5ca:	464a      	mov	r2, r9
   bc5cc:	f008 f824 	bl	c4618 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bc5d0:	783a      	ldrb	r2, [r7, #0]
   bc5d2:	4641      	mov	r1, r8
   bc5d4:	4650      	mov	r0, sl
   bc5d6:	f007 fff7 	bl	c45c8 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc5da:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bc5de:	783b      	ldrb	r3, [r7, #0]
   bc5e0:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc5e4:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bc5e6:	2300      	movs	r3, #0
   bc5e8:	7023      	strb	r3, [r4, #0]
   bc5ea:	e4f9      	b.n	bbfe0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc5ec:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc5f0:	b91b      	cbnz	r3, bc5fa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bc5f2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc5f6:	2b00      	cmp	r3, #0
   bc5f8:	d0f5      	beq.n	bc5e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bc5fa:	4922      	ldr	r1, [pc, #136]	; (bc684 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bc5fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc600:	f003 fb7b 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bc604:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc608:	6803      	ldr	r3, [r0, #0]
   bc60a:	4629      	mov	r1, r5
   bc60c:	689b      	ldr	r3, [r3, #8]
   bc60e:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bc610:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc614:	6803      	ldr	r3, [r0, #0]
   bc616:	4651      	mov	r1, sl
   bc618:	689b      	ldr	r3, [r3, #8]
   bc61a:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bc61c:	491a      	ldr	r1, [pc, #104]	; (bc688 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bc61e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc622:	f003 fb6a 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bc626:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc62a:	f89b 1000 	ldrb.w	r1, [fp]
   bc62e:	6803      	ldr	r3, [r0, #0]
   bc630:	689b      	ldr	r3, [r3, #8]
   bc632:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bc634:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc638:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bc63c:	6803      	ldr	r3, [r0, #0]
   bc63e:	689b      	ldr	r3, [r3, #8]
   bc640:	4798      	blx	r3
              _debugSerial->println();
   bc642:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc646:	f003 fb5c 	bl	bfd02 <_ZN5Print7printlnEv>
   bc64a:	e7cc      	b.n	bc5e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc64c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc650:	b91b      	cbnz	r3, bc65a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bc652:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc656:	2b00      	cmp	r3, #0
   bc658:	d0c5      	beq.n	bc5e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bc65a:	490c      	ldr	r1, [pc, #48]	; (bc68c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bc65c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc660:	f003 fb65 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc664:	e7bf      	b.n	bc5e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bc666:	2e03      	cmp	r6, #3
   bc668:	f47f acba 	bne.w	bbfe0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bc66c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc670:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bc674:	4620      	mov	r0, r4
   bc676:	f7fd f821 	bl	b96bc <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bc67a:	7020      	strb	r0, [r4, #0]
}
   bc67c:	e4b0      	b.n	bbfe0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bc67e:	bf00      	nop
   bc680:	000c7644 	.word	0x000c7644
   bc684:	000c7662 	.word	0x000c7662
   bc688:	000c768d 	.word	0x000c768d
   bc68c:	000c7693 	.word	0x000c7693

000bc690 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bc690:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc694:	4604      	mov	r4, r0
   bc696:	4699      	mov	r9, r3
   bc698:	460f      	mov	r7, r1
   bc69a:	4690      	mov	r8, r2
   bc69c:	f001 fae2 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bc6a0:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc6a4:	1ac0      	subs	r0, r0, r3
   bc6a6:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc6aa:	4298      	cmp	r0, r3
   bc6ac:	f0c0 80a8 	bcc.w	bc800 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc6b0:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc6b4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc6b8:	f005 f9de 	bl	c1a78 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc6bc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc6c0:	21fd      	movs	r1, #253	; 0xfd
   bc6c2:	f7fb fe53 	bl	b836c <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc6c6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc6ca:	2100      	movs	r1, #0
   bc6cc:	f005 f9db 	bl	c1a86 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc6d0:	4605      	mov	r5, r0
   bc6d2:	b1a8      	cbz	r0, bc700 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc6d4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc6d8:	b933      	cbnz	r3, bc6e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc6da:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc6de:	b91b      	cbnz	r3, bc6e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc6e0:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc6e2:	b002      	add	sp, #8
   bc6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc6e8:	4946      	ldr	r1, [pc, #280]	; (bc804 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc6ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6ee:	f003 fb04 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc6f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6f6:	220a      	movs	r2, #10
   bc6f8:	4629      	mov	r1, r5
   bc6fa:	f7fb fe2e 	bl	b835a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc6fe:	e7ef      	b.n	bc6e0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc700:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc704:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc708:	2202      	movs	r2, #2
   bc70a:	f005 f9b2 	bl	c1a72 <_ZN7TwoWire11requestFromEhj>
   bc70e:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc710:	2d02      	cmp	r5, #2
   bc712:	d008      	beq.n	bc726 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc714:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc718:	b91b      	cbnz	r3, bc722 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc71a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc71e:	2b00      	cmp	r3, #0
   bc720:	d0de      	beq.n	bc6e0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc722:	4939      	ldr	r1, [pc, #228]	; (bc808 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc724:	e7e1      	b.n	bc6ea <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc726:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc72a:	6803      	ldr	r3, [r0, #0]
   bc72c:	695b      	ldr	r3, [r3, #20]
   bc72e:	4798      	blx	r3
   bc730:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc732:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc736:	6803      	ldr	r3, [r0, #0]
   bc738:	695b      	ldr	r3, [r3, #20]
   bc73a:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc73c:	b2c6      	uxtb	r6, r0
   bc73e:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc742:	b22a      	sxth	r2, r5
   bc744:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc746:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc74a:	b955      	cbnz	r5, bc762 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc74c:	b123      	cbz	r3, bc758 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc74e:	492f      	ldr	r1, [pc, #188]	; (bc80c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc750:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc754:	f003 faeb 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc758:	f001 fa84 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc75c:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc760:	e7be      	b.n	bc6e0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc762:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc764:	bfb8      	it	lt
   bc766:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc76a:	2d64      	cmp	r5, #100	; 0x64
   bc76c:	d936      	bls.n	bc7dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc76e:	b17b      	cbz	r3, bc790 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc770:	4927      	ldr	r1, [pc, #156]	; (bc810 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc772:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc776:	f003 fac0 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc77a:	4629      	mov	r1, r5
   bc77c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc780:	220a      	movs	r2, #10
   bc782:	f003 fad6 	bl	bfd32 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc786:	4923      	ldr	r1, [pc, #140]	; (bc814 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc788:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc78c:	f003 facf 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc790:	2d00      	cmp	r5, #0
   bc792:	d035      	beq.n	bc800 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc794:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc796:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc79a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc79e:	42ae      	cmp	r6, r5
   bc7a0:	bf28      	it	cs
   bc7a2:	462e      	movcs	r6, r5
   bc7a4:	4632      	mov	r2, r6
   bc7a6:	f005 f964 	bl	c1a72 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc7aa:	b2c0      	uxtb	r0, r0
   bc7ac:	4286      	cmp	r6, r0
   bc7ae:	d197      	bne.n	bc6e0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc7b0:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc7b4:	fa1f f38a 	uxth.w	r3, sl
   bc7b8:	429e      	cmp	r6, r3
   bc7ba:	d91e      	bls.n	bc7fa <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc7bc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc7c0:	6803      	ldr	r3, [r0, #0]
   bc7c2:	695b      	ldr	r3, [r3, #20]
   bc7c4:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc7c6:	f8cd 9000 	str.w	r9, [sp]
   bc7ca:	b2c1      	uxtb	r1, r0
   bc7cc:	4643      	mov	r3, r8
   bc7ce:	463a      	mov	r2, r7
   bc7d0:	4620      	mov	r0, r4
   bc7d2:	f7ff fbc1 	bl	bbf58 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc7d6:	f10a 0a01 	add.w	sl, sl, #1
   bc7da:	e7eb      	b.n	bc7b4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc7dc:	2b00      	cmp	r3, #0
   bc7de:	d0d7      	beq.n	bc790 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc7e0:	490d      	ldr	r1, [pc, #52]	; (bc818 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc7e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7e6:	f003 fa88 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
   bc7ea:	4629      	mov	r1, r5
   bc7ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7f0:	220a      	movs	r2, #10
   bc7f2:	f003 fa9e 	bl	bfd32 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc7f6:	4909      	ldr	r1, [pc, #36]	; (bc81c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc7f8:	e7c6      	b.n	bc788 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc7fa:	1bad      	subs	r5, r5, r6
   bc7fc:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc7fe:	e7c7      	b.n	bc790 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc800:	2001      	movs	r0, #1
   bc802:	e76e      	b.n	bc6e2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc804:	000c76b4 	.word	0x000c76b4
   bc808:	000c76e8 	.word	0x000c76e8
   bc80c:	000c771d 	.word	0x000c771d
   bc810:	000c7745 	.word	0x000c7745
   bc814:	000c7765 	.word	0x000c7765
   bc818:	000c7775 	.word	0x000c7775
   bc81c:	000c778d 	.word	0x000c778d

000bc820 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc822:	4604      	mov	r4, r0
   bc824:	460d      	mov	r5, r1
   bc826:	4616      	mov	r6, r2
   bc828:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc82a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc82e:	6803      	ldr	r3, [r0, #0]
   bc830:	691b      	ldr	r3, [r3, #16]
   bc832:	4798      	blx	r3
   bc834:	b160      	cbz	r0, bc850 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc836:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc83a:	6803      	ldr	r3, [r0, #0]
   bc83c:	695b      	ldr	r3, [r3, #20]
   bc83e:	4798      	blx	r3
   bc840:	9700      	str	r7, [sp, #0]
   bc842:	b2c1      	uxtb	r1, r0
   bc844:	4633      	mov	r3, r6
   bc846:	462a      	mov	r2, r5
   bc848:	4620      	mov	r0, r4
   bc84a:	f7ff fb85 	bl	bbf58 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc84e:	e7ec      	b.n	bc82a <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc850:	2001      	movs	r0, #1
   bc852:	b003      	add	sp, #12
   bc854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc858 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc85c:	4604      	mov	r4, r0
   bc85e:	b087      	sub	sp, #28
   bc860:	460d      	mov	r5, r1
   bc862:	4616      	mov	r6, r2
   bc864:	461f      	mov	r7, r3
   bc866:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc86a:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc86e:	fa5f f388 	uxtb.w	r3, r8
   bc872:	429a      	cmp	r2, r3
   bc874:	d90b      	bls.n	bc88e <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc876:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc87a:	4620      	mov	r0, r4
   bc87c:	5cd1      	ldrb	r1, [r2, r3]
   bc87e:	9700      	str	r7, [sp, #0]
   bc880:	4633      	mov	r3, r6
   bc882:	462a      	mov	r2, r5
   bc884:	f7ff fb68 	bl	bbf58 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc888:	f108 0801 	add.w	r8, r8, #1
   bc88c:	e7ed      	b.n	bc86a <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc88e:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc892:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc896:	4a25      	ldr	r2, [pc, #148]	; (bc92c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc898:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc89c:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc8a0:	a902      	add	r1, sp, #8
   bc8a2:	f04f 0901 	mov.w	r9, #1
   bc8a6:	9202      	str	r2, [sp, #8]
   bc8a8:	9304      	str	r3, [sp, #16]
   bc8aa:	f88d 800c 	strb.w	r8, [sp, #12]
   bc8ae:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc8b2:	f001 fe43 	bl	be53c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc8b6:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc8ba:	4641      	mov	r1, r8
   bc8bc:	f005 fbc3 	bl	c2046 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc8c0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc8c4:	21ff      	movs	r1, #255	; 0xff
   bc8c6:	f001 fea7 	bl	be618 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc8ca:	28ff      	cmp	r0, #255	; 0xff
   bc8cc:	d116      	bne.n	bc8fc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc8ce:	7823      	ldrb	r3, [r4, #0]
   bc8d0:	b983      	cbnz	r3, bc8f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc8d2:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc8d6:	4649      	mov	r1, r9
   bc8d8:	f005 fbb5 	bl	c2046 <digitalWrite>
    _spiPort->endTransaction();
   bc8dc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc8e0:	f001 fe12 	bl	be508 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc8e4:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc8e8:	f004 fb02 	bl	c0ef0 <delay>
} // end checkUbloxSpi()
   bc8ec:	2001      	movs	r0, #1
   bc8ee:	b007      	add	sp, #28
   bc8f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc8f4:	28ff      	cmp	r0, #255	; 0xff
   bc8f6:	d101      	bne.n	bc8fc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc8f8:	7823      	ldrb	r3, [r4, #0]
   bc8fa:	b163      	cbz	r3, bc916 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc8fc:	4601      	mov	r1, r0
   bc8fe:	9700      	str	r7, [sp, #0]
   bc900:	4620      	mov	r0, r4
   bc902:	4633      	mov	r3, r6
   bc904:	462a      	mov	r2, r5
   bc906:	f7ff fb27 	bl	bbf58 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc90a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc90e:	21ff      	movs	r1, #255	; 0xff
   bc910:	f001 fe82 	bl	be618 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc914:	e7ee      	b.n	bc8f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc916:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc91a:	2101      	movs	r1, #1
   bc91c:	f005 fb93 	bl	c2046 <digitalWrite>
  _spiPort->endTransaction();
   bc920:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc924:	f001 fdf0 	bl	be508 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc928:	e7e0      	b.n	bc8ec <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc92a:	bf00      	nop
   bc92c:	000c6de8 	.word	0x000c6de8

000bc930 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc930:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc932:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc936:	b91c      	cbnz	r4, bc940 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc938:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc93c:	f7ff bea8 	b.w	bc690 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc940:	2c01      	cmp	r4, #1
   bc942:	d103      	bne.n	bc94c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc944:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc948:	f7ff bf6a 	b.w	bc820 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc94c:	2c02      	cmp	r4, #2
   bc94e:	d103      	bne.n	bc958 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc950:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc954:	f7ff bf80 	b.w	bc858 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc958:	2000      	movs	r0, #0
   bc95a:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc95e:	4770      	bx	lr

000bc960 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc964:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc966:	2102      	movs	r1, #2
   bc968:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc96a:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc96e:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc972:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc976:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc978:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc97c:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc980:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc984:	4604      	mov	r4, r0
   bc986:	4617      	mov	r7, r2
   bc988:	4698      	mov	r8, r3
   bc98a:	f001 f96b 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc98e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc992:	4606      	mov	r6, r0
   bc994:	4481      	add	r9, r0
   bc996:	f001 f965 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bc99a:	4581      	cmp	r9, r0
   bc99c:	f240 80a8 	bls.w	bcaf0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc9a0:	4643      	mov	r3, r8
   bc9a2:	463a      	mov	r2, r7
   bc9a4:	4629      	mov	r1, r5
   bc9a6:	4620      	mov	r0, r4
   bc9a8:	f7ff ffc2 	bl	bc930 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc9ac:	2800      	cmp	r0, #0
   bc9ae:	f000 809b 	beq.w	bcae8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc9b2:	7beb      	ldrb	r3, [r5, #15]
   bc9b4:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc9b8:	2b01      	cmp	r3, #1
   bc9ba:	d125      	bne.n	bca08 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc9bc:	2901      	cmp	r1, #1
   bc9be:	f040 80ec 	bne.w	bcb9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc9c2:	7bab      	ldrb	r3, [r5, #14]
   bc9c4:	2b01      	cmp	r3, #1
   bc9c6:	782b      	ldrb	r3, [r5, #0]
   bc9c8:	d13b      	bne.n	bca42 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc9ca:	42bb      	cmp	r3, r7
   bc9cc:	d13e      	bne.n	bca4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc9ce:	786a      	ldrb	r2, [r5, #1]
   bc9d0:	4542      	cmp	r2, r8
   bc9d2:	d136      	bne.n	bca42 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc9d4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9d8:	b913      	cbnz	r3, bc9e0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc9da:	200b      	movs	r0, #11
}
   bc9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc9e0:	4978      	ldr	r1, [pc, #480]	; (bcbc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc9e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9e6:	f003 f988 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc9ea:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc9ee:	f001 f939 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bc9f2:	220a      	movs	r2, #10
   bc9f4:	1b81      	subs	r1, r0, r6
   bc9f6:	4628      	mov	r0, r5
   bc9f8:	f7fb fc9b 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc9fc:	4972      	ldr	r1, [pc, #456]	; (bcbc8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc9fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca02:	f003 f994 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bca06:	e7e8      	b.n	bc9da <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bca08:	2b02      	cmp	r3, #2
   bca0a:	d137      	bne.n	bca7c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bca0c:	2901      	cmp	r1, #1
   bca0e:	f040 80aa 	bne.w	bcb66 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bca12:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca16:	b193      	cbz	r3, bca3e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bca18:	496c      	ldr	r1, [pc, #432]	; (bcbcc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bca1a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca1e:	f003 f96c 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bca22:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bca26:	f001 f91d 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bca2a:	220a      	movs	r2, #10
   bca2c:	1b81      	subs	r1, r0, r6
   bca2e:	4628      	mov	r0, r5
   bca30:	f7fb fc7f 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bca34:	4964      	ldr	r1, [pc, #400]	; (bcbc8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bca36:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca3a:	f003 f978 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bca3e:	200a      	movs	r0, #10
   bca40:	e7cc      	b.n	bc9dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bca42:	42bb      	cmp	r3, r7
   bca44:	d102      	bne.n	bca4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bca46:	786b      	ldrb	r3, [r5, #1]
   bca48:	4543      	cmp	r3, r8
   bca4a:	d019      	beq.n	bca80 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bca4c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca50:	b193      	cbz	r3, bca78 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bca52:	495f      	ldr	r1, [pc, #380]	; (bcbd0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bca54:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca58:	f003 f94f 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bca5c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bca60:	f001 f900 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bca64:	220a      	movs	r2, #10
   bca66:	1b81      	subs	r1, r0, r6
   bca68:	4628      	mov	r0, r5
   bca6a:	f7fb fc62 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bca6e:	4956      	ldr	r1, [pc, #344]	; (bcbc8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bca70:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca74:	f003 f95b 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bca78:	200d      	movs	r0, #13
   bca7a:	e7af      	b.n	bc9dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bca7c:	2901      	cmp	r1, #1
   bca7e:	d172      	bne.n	bcb66 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bca80:	89eb      	ldrh	r3, [r5, #14]
   bca82:	bb8b      	cbnz	r3, bcae8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bca84:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca88:	b193      	cbz	r3, bcab0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bca8a:	4952      	ldr	r1, [pc, #328]	; (bcbd4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bca8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca90:	f003 f933 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bca94:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bca98:	f001 f8e4 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bca9c:	220a      	movs	r2, #10
   bca9e:	1b81      	subs	r1, r0, r6
   bcaa0:	4628      	mov	r0, r5
   bcaa2:	f7fb fc46 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcaa6:	4948      	ldr	r1, [pc, #288]	; (bcbc8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcaa8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaac:	f003 f93f 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bcab0:	2002      	movs	r0, #2
   bcab2:	e793      	b.n	bc9dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcab4:	430b      	orrs	r3, r1
   bcab6:	d117      	bne.n	bcae8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcab8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcabc:	b193      	cbz	r3, bcae4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bcabe:	4946      	ldr	r1, [pc, #280]	; (bcbd8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bcac0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcac4:	f003 f919 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcac8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcacc:	f001 f8ca 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bcad0:	220a      	movs	r2, #10
   bcad2:	1b81      	subs	r1, r0, r6
   bcad4:	4628      	mov	r0, r5
   bcad6:	f7fb fc2c 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcada:	493b      	ldr	r1, [pc, #236]	; (bcbc8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcadc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcae0:	f003 f925 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bcae4:	2001      	movs	r0, #1
   bcae6:	e779      	b.n	bc9dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcae8:	2001      	movs	r0, #1
   bcaea:	f004 fa01 	bl	c0ef0 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bcaee:	e752      	b.n	bc996 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcaf0:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bcaf2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcaf6:	2a01      	cmp	r2, #1
   bcaf8:	d11f      	bne.n	bcb3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcafa:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bcafe:	2a02      	cmp	r2, #2
   bcb00:	d11b      	bne.n	bcb3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcb02:	7baa      	ldrb	r2, [r5, #14]
   bcb04:	2a01      	cmp	r2, #1
   bcb06:	d118      	bne.n	bcb3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcb08:	782a      	ldrb	r2, [r5, #0]
   bcb0a:	42ba      	cmp	r2, r7
   bcb0c:	d115      	bne.n	bcb3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcb0e:	786a      	ldrb	r2, [r5, #1]
   bcb10:	4542      	cmp	r2, r8
   bcb12:	d112      	bne.n	bcb3a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bcb14:	2b00      	cmp	r3, #0
   bcb16:	f43f af60 	beq.w	bc9da <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bcb1a:	4930      	ldr	r1, [pc, #192]	; (bcbdc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bcb1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb20:	f003 f8eb 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bcb24:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb28:	f001 f89c 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bcb2c:	220a      	movs	r2, #10
   bcb2e:	1b81      	subs	r1, r0, r6
   bcb30:	4628      	mov	r0, r5
   bcb32:	f7fb fbfe 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bcb36:	492a      	ldr	r1, [pc, #168]	; (bcbe0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bcb38:	e761      	b.n	bc9fe <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bcb3a:	b193      	cbz	r3, bcb62 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bcb3c:	4929      	ldr	r1, [pc, #164]	; (bcbe4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bcb3e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb42:	f003 f8da 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcb46:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb4a:	f001 f88b 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bcb4e:	220a      	movs	r2, #10
   bcb50:	1b81      	subs	r1, r0, r6
   bcb52:	4628      	mov	r0, r5
   bcb54:	f7fb fbed 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bcb58:	4923      	ldr	r1, [pc, #140]	; (bcbe8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bcb5a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb5e:	f003 f8e6 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcb62:	2003      	movs	r0, #3
   bcb64:	e73a      	b.n	bc9dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcb66:	2903      	cmp	r1, #3
   bcb68:	d1a4      	bne.n	bcab4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bcb6a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb6e:	b193      	cbz	r3, bcb96 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bcb70:	491e      	ldr	r1, [pc, #120]	; (bcbec <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bcb72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb76:	f003 f8c0 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcb7a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcb7e:	f001 f871 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bcb82:	220a      	movs	r2, #10
   bcb84:	1b81      	subs	r1, r0, r6
   bcb86:	4628      	mov	r0, r5
   bcb88:	f7fb fbd3 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcb8c:	490e      	ldr	r1, [pc, #56]	; (bcbc8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcb8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb92:	f003 f8cc 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bcb96:	2004      	movs	r0, #4
   bcb98:	e720      	b.n	bc9dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcb9a:	2903      	cmp	r1, #3
   bcb9c:	d0e5      	beq.n	bcb6a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcb9e:	2900      	cmp	r1, #0
   bcba0:	d1a2      	bne.n	bcae8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcba2:	7bab      	ldrb	r3, [r5, #14]
   bcba4:	2b01      	cmp	r3, #1
   bcba6:	d19f      	bne.n	bcae8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcba8:	782b      	ldrb	r3, [r5, #0]
   bcbaa:	42bb      	cmp	r3, r7
   bcbac:	d19c      	bne.n	bcae8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcbae:	786b      	ldrb	r3, [r5, #1]
   bcbb0:	4543      	cmp	r3, r8
   bcbb2:	d199      	bne.n	bcae8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcbb4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcbb8:	2b00      	cmp	r3, #0
   bcbba:	f43f af0e 	beq.w	bc9da <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bcbbe:	490c      	ldr	r1, [pc, #48]	; (bcbf0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bcbc0:	e70f      	b.n	bc9e2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bcbc2:	bf00      	nop
   bcbc4:	000c7794 	.word	0x000c7794
   bcbc8:	000c77d1 	.word	0x000c77d1
   bcbcc:	000c77d7 	.word	0x000c77d7
   bcbd0:	000c7808 	.word	0x000c7808
   bcbd4:	000c783a 	.word	0x000c783a
   bcbd8:	000c78da 	.word	0x000c78da
   bcbdc:	000c791b 	.word	0x000c791b
   bcbe0:	000c794e 	.word	0x000c794e
   bcbe4:	000c7956 	.word	0x000c7956
   bcbe8:	000c7979 	.word	0x000c7979
   bcbec:	000c7860 	.word	0x000c7860
   bcbf0:	000c789b 	.word	0x000c789b

000bcbf4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bcbf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcbf8:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcbfa:	2102      	movs	r1, #2
   bcbfc:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcbfe:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc02:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc06:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bcc0a:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc0c:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc10:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcc14:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bcc18:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bcc1c:	4604      	mov	r4, r0
   bcc1e:	4617      	mov	r7, r2
   bcc20:	4698      	mov	r8, r3
   bcc22:	f001 f81f 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcc26:	f240 1a01 	movw	sl, #257	; 0x101
   bcc2a:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bcc2c:	f240 2b01 	movw	fp, #513	; 0x201
   bcc30:	f001 f818 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bcc34:	1b80      	subs	r0, r0, r6
   bcc36:	4548      	cmp	r0, r9
   bcc38:	d269      	bcs.n	bcd0e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bcc3a:	4643      	mov	r3, r8
   bcc3c:	463a      	mov	r2, r7
   bcc3e:	4629      	mov	r1, r5
   bcc40:	4620      	mov	r0, r4
   bcc42:	f7ff fe75 	bl	bc930 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bcc46:	2800      	cmp	r0, #0
   bcc48:	d05d      	beq.n	bcd06 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcc4a:	89ea      	ldrh	r2, [r5, #14]
   bcc4c:	4552      	cmp	r2, sl
   bcc4e:	d11e      	bne.n	bcc8e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bcc50:	782b      	ldrb	r3, [r5, #0]
   bcc52:	42bb      	cmp	r3, r7
   bcc54:	d11b      	bne.n	bcc8e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bcc56:	786b      	ldrb	r3, [r5, #1]
   bcc58:	4543      	cmp	r3, r8
   bcc5a:	d118      	bne.n	bcc8e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bcc5c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcc60:	b193      	cbz	r3, bcc88 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bcc62:	4937      	ldr	r1, [pc, #220]	; (bcd40 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bcc64:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc68:	f003 f847 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcc6c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcc70:	f000 fff8 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bcc74:	220a      	movs	r2, #10
   bcc76:	1b81      	subs	r1, r0, r6
   bcc78:	4628      	mov	r0, r5
   bcc7a:	f7fb fb5a 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcc7e:	4931      	ldr	r1, [pc, #196]	; (bcd44 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcc80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc84:	f003 f853 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bcc88:	200b      	movs	r0, #11
}
   bcc8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bcc8e:	7beb      	ldrb	r3, [r5, #15]
   bcc90:	2b01      	cmp	r3, #1
   bcc92:	d11d      	bne.n	bccd0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bcc94:	782b      	ldrb	r3, [r5, #0]
   bcc96:	42bb      	cmp	r3, r7
   bcc98:	d102      	bne.n	bcca0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bcc9a:	786b      	ldrb	r3, [r5, #1]
   bcc9c:	4543      	cmp	r3, r8
   bcc9e:	d032      	beq.n	bcd06 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bcca0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcca4:	b193      	cbz	r3, bcccc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bcca6:	4928      	ldr	r1, [pc, #160]	; (bcd48 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bcca8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bccac:	f003 f825 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bccb0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bccb4:	f000 ffd6 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bccb8:	220a      	movs	r2, #10
   bccba:	1b81      	subs	r1, r0, r6
   bccbc:	4628      	mov	r0, r5
   bccbe:	f7fb fb38 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bccc2:	4920      	ldr	r1, [pc, #128]	; (bcd44 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bccc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bccc8:	f003 f831 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcccc:	200d      	movs	r0, #13
   bccce:	e7dc      	b.n	bcc8a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bccd0:	455a      	cmp	r2, fp
   bccd2:	d018      	beq.n	bcd06 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bccd4:	b9bb      	cbnz	r3, bcd06 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bccd6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bccda:	b193      	cbz	r3, bcd02 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bccdc:	491b      	ldr	r1, [pc, #108]	; (bcd4c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bccde:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcce2:	f003 f80a 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcce6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bccea:	f000 ffbb 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bccee:	220a      	movs	r2, #10
   bccf0:	1b81      	subs	r1, r0, r6
   bccf2:	4628      	mov	r0, r5
   bccf4:	f7fb fb1d 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bccf8:	4912      	ldr	r1, [pc, #72]	; (bcd44 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bccfa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bccfe:	f003 f816 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bcd02:	2002      	movs	r0, #2
   bcd04:	e7c1      	b.n	bcc8a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcd06:	2001      	movs	r0, #1
   bcd08:	f004 f8f2 	bl	c0ef0 <delay>
  while (millis() - startTime < maxTime)
   bcd0c:	e790      	b.n	bcc30 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bcd0e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd12:	b193      	cbz	r3, bcd3a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bcd14:	490e      	ldr	r1, [pc, #56]	; (bcd50 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bcd16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd1a:	f002 ffee 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcd1e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd22:	f000 ff9f 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
   bcd26:	220a      	movs	r2, #10
   bcd28:	1b81      	subs	r1, r0, r6
   bcd2a:	4628      	mov	r0, r5
   bcd2c:	f7fb fb01 	bl	b8332 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bcd30:	4908      	ldr	r1, [pc, #32]	; (bcd54 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bcd32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd36:	f002 fffa 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcd3a:	2003      	movs	r0, #3
   bcd3c:	e7a5      	b.n	bcc8a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bcd3e:	bf00      	nop
   bcd40:	000c7980 	.word	0x000c7980
   bcd44:	000c77d1 	.word	0x000c77d1
   bcd48:	000c79ba 	.word	0x000c79ba
   bcd4c:	000c79ee 	.word	0x000c79ee
   bcd50:	000c7a27 	.word	0x000c7a27
   bcd54:	000c7a4c 	.word	0x000c7a4c

000bcd58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bcd58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcd5c:	4604      	mov	r4, r0
   bcd5e:	4698      	mov	r8, r3
   bcd60:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bcd62:	f7fc fcc9 	bl	b96f8 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bcd66:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bcd6a:	460d      	mov	r5, r1
  if (_printDebug == true)
   bcd6c:	b14b      	cbz	r3, bcd82 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bcd6e:	492a      	ldr	r1, [pc, #168]	; (bce18 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bcd70:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd74:	f002 ffc1 	bl	bfcfa <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bcd78:	2201      	movs	r2, #1
   bcd7a:	4629      	mov	r1, r5
   bcd7c:	4620      	mov	r0, r4
   bcd7e:	f7fc fee9 	bl	b9b54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bcd82:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bcd86:	b993      	cbnz	r3, bcdae <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bcd88:	463a      	mov	r2, r7
   bcd8a:	4629      	mov	r1, r5
   bcd8c:	4620      	mov	r0, r4
   bcd8e:	f7fc fce1 	bl	b9754 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bcd92:	4606      	mov	r6, r0
   bcd94:	b188      	cbz	r0, bcdba <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcd96:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd9a:	b123      	cbz	r3, bcda6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bcd9c:	491f      	ldr	r1, [pc, #124]	; (bce1c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bcd9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcda2:	f002 ffc4 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bcda6:	4630      	mov	r0, r6
   bcda8:	b002      	add	sp, #8
   bcdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bcdae:	2b01      	cmp	r3, #1
   bcdb0:	d11b      	bne.n	bcdea <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bcdb2:	4629      	mov	r1, r5
   bcdb4:	4620      	mov	r0, r4
   bcdb6:	f7fc fd8f 	bl	b98d8 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bcdba:	b35f      	cbz	r7, bce14 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcdbc:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bcdbe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcdc2:	2a06      	cmp	r2, #6
   bcdc4:	d002      	beq.n	bcdcc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bcdc6:	f1b8 0f00 	cmp.w	r8, #0
   bcdca:	d015      	beq.n	bcdf8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bcdcc:	b123      	cbz	r3, bcdd8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bcdce:	4914      	ldr	r1, [pc, #80]	; (bce20 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bcdd0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdd4:	f002 ffab 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcdd8:	786b      	ldrb	r3, [r5, #1]
   bcdda:	782a      	ldrb	r2, [r5, #0]
   bcddc:	9700      	str	r7, [sp, #0]
   bcdde:	4629      	mov	r1, r5
   bcde0:	4620      	mov	r0, r4
   bcde2:	f7ff fdbd 	bl	bc960 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcde6:	4606      	mov	r6, r0
   bcde8:	e7dd      	b.n	bcda6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bcdea:	2b02      	cmp	r3, #2
   bcdec:	d1e5      	bne.n	bcdba <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bcdee:	4629      	mov	r1, r5
   bcdf0:	4620      	mov	r0, r4
   bcdf2:	f7fc fdcb 	bl	b998c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bcdf6:	e7e0      	b.n	bcdba <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcdf8:	b123      	cbz	r3, bce04 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bcdfa:	490a      	ldr	r1, [pc, #40]	; (bce24 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bcdfc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce00:	f002 ff95 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bce04:	786b      	ldrb	r3, [r5, #1]
   bce06:	782a      	ldrb	r2, [r5, #0]
   bce08:	9700      	str	r7, [sp, #0]
   bce0a:	4629      	mov	r1, r5
   bce0c:	4620      	mov	r0, r4
   bce0e:	f7ff fef1 	bl	bcbf4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bce12:	e7e8      	b.n	bcde6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bce14:	463e      	mov	r6, r7
   bce16:	e7c6      	b.n	bcda6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bce18:	000c7a67 	.word	0x000c7a67
   bce1c:	000c7a72 	.word	0x000c7a72
   bce20:	000c7a8a 	.word	0x000c7a8a
   bce24:	000c7ab0 	.word	0x000c7ab0

000bce28 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bce28:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bce2a:	4b09      	ldr	r3, [pc, #36]	; (bce50 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bce2c:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bce30:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bce34:	2300      	movs	r3, #0
   bce36:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bce3a:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bce3c:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bce40:	f7ff ff8a 	bl	bcd58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bce44:	f1a0 030b 	sub.w	r3, r0, #11
   bce48:	4258      	negs	r0, r3
   bce4a:	4158      	adcs	r0, r3
   bce4c:	bd38      	pop	{r3, r4, r5, pc}
   bce4e:	bf00      	nop
   bce50:	00010006 	.word	0x00010006

000bce54 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bce54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bce56:	4615      	mov	r5, r2
   bce58:	461a      	mov	r2, r3
   bce5a:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bce5c:	9301      	str	r3, [sp, #4]
   bce5e:	f7ff ffe3 	bl	bce28 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bce62:	b190      	cbz	r0, bce8a <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bce64:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bce68:	4b09      	ldr	r3, [pc, #36]	; (bce90 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bce6a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bce6e:	2300      	movs	r3, #0
   bce70:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bce74:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bce76:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bce78:	4620      	mov	r0, r4
   bce7a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bce7e:	f7ff ff6b 	bl	bcd58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bce82:	f1a0 030a 	sub.w	r3, r0, #10
   bce86:	4258      	negs	r0, r3
   bce88:	4158      	adcs	r0, r3
}
   bce8a:	b003      	add	sp, #12
   bce8c:	bd30      	pop	{r4, r5, pc}
   bce8e:	bf00      	nop
   bce90:	00140006 	.word	0x00140006

000bce94 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bce94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bce96:	4615      	mov	r5, r2
   bce98:	461a      	mov	r2, r3
   bce9a:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bce9c:	9301      	str	r3, [sp, #4]
   bce9e:	f7ff ffc3 	bl	bce28 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bcea2:	b190      	cbz	r0, bceca <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bcea4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcea8:	4b09      	ldr	r3, [pc, #36]	; (bced0 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bceaa:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bceae:	2300      	movs	r3, #0
   bceb0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bceb4:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bceb6:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bceb8:	4620      	mov	r0, r4
   bceba:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcebe:	f7ff ff4b 	bl	bcd58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bcec2:	f1a0 030a 	sub.w	r3, r0, #10
   bcec6:	4258      	negs	r0, r3
   bcec8:	4158      	adcs	r0, r3
}
   bceca:	b003      	add	sp, #12
   bcecc:	bd30      	pop	{r4, r5, pc}
   bcece:	bf00      	nop
   bced0:	00140006 	.word	0x00140006

000bced4 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bced4:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bced6:	460a      	mov	r2, r1
   bced8:	2100      	movs	r1, #0
   bceda:	f7ff bfbb 	b.w	bce54 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bcee0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bcee0:	b510      	push	{r4, lr}
   bcee2:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bcee4:	2074      	movs	r0, #116	; 0x74
   bcee6:	f7f7 f8d6 	bl	b4096 <_Znwj>
   bceea:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bceec:	b960      	cbnz	r0, bcf08 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bceee:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcef2:	b913      	cbnz	r3, bcefa <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bcef4:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bcef8:	b128      	cbz	r0, bcf06 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bcefa:	4908      	ldr	r1, [pc, #32]	; (bcf1c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bcefc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf00:	f002 ff15 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcf04:	2000      	movs	r0, #0
}
   bcf06:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bcf08:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bcf0a:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bcf0e:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bcf12:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bcf14:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bcf16:	2001      	movs	r0, #1
   bcf18:	e7f5      	b.n	bcf06 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bcf1a:	bf00      	nop
   bcf1c:	000c7ad9 	.word	0x000c7ad9

000bcf20 <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bcf20:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bcf22:	6a03      	ldr	r3, [r0, #32]
{
   bcf24:	4604      	mov	r4, r0
   bcf26:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bcf28:	b91b      	cbnz	r3, bcf32 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bcf2a:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bcf2c:	f7ff ffd8 	bl	bcee0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bcf30:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bcf32:	6a20      	ldr	r0, [r4, #32]
   bcf34:	b180      	cbz	r0, bcf58 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bcf36:	7803      	ldrb	r3, [r0, #0]
   bcf38:	f003 0303 	and.w	r3, r3, #3
   bcf3c:	2b03      	cmp	r3, #3
   bcf3e:	d10d      	bne.n	bcf5c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bcf40:	2307      	movs	r3, #7
   bcf42:	2201      	movs	r2, #1
   bcf44:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcf48:	4620      	mov	r0, r4
   bcf4a:	f7ff fcf1 	bl	bc930 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bcf4e:	6a23      	ldr	r3, [r4, #32]
   bcf50:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bcf54:	f000 0001 	and.w	r0, r0, #1
}
   bcf58:	b002      	add	sp, #8
   bcf5a:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bcf5c:	2b01      	cmp	r3, #1
   bcf5e:	f04f 0300 	mov.w	r3, #0
   bcf62:	d011      	beq.n	bcf88 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bcf64:	f240 7101 	movw	r1, #1793	; 0x701
   bcf68:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bcf6c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bcf70:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcf74:	4620      	mov	r0, r4
   bcf76:	f7ff feef 	bl	bcd58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bcf7a:	280b      	cmp	r0, #11
   bcf7c:	d006      	beq.n	bcf8c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bcf7e:	f1a0 030d 	sub.w	r3, r0, #13
   bcf82:	4258      	negs	r0, r3
   bcf84:	4158      	adcs	r0, r3
   bcf86:	e7e7      	b.n	bcf58 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bcf88:	4618      	mov	r0, r3
   bcf8a:	e7e5      	b.n	bcf58 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bcf8c:	2001      	movs	r0, #1
   bcf8e:	e7e3      	b.n	bcf58 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bcf90 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bcf90:	b510      	push	{r4, lr}
   bcf92:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bcf94:	2018      	movs	r0, #24
   bcf96:	f7f7 f87e 	bl	b4096 <_Znwj>
   bcf9a:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bcf9c:	b960      	cbnz	r0, bcfb8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcf9e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcfa2:	b913      	cbnz	r3, bcfaa <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bcfa4:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bcfa8:	b128      	cbz	r0, bcfb6 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bcfaa:	4905      	ldr	r1, [pc, #20]	; (bcfc0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bcfac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcfb0:	f002 febd 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcfb4:	2000      	movs	r0, #0
}
   bcfb6:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bcfb8:	2300      	movs	r3, #0
   bcfba:	7503      	strb	r3, [r0, #20]
  return (true);
   bcfbc:	2001      	movs	r0, #1
   bcfbe:	e7fa      	b.n	bcfb6 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bcfc0:	000c7b00 	.word	0x000c7b00

000bcfc4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bcfc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bcfc6:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bcfc8:	4605      	mov	r5, r0
   bcfca:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bcfcc:	b18b      	cbz	r3, bcff2 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bcfce:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcfd2:	4b13      	ldr	r3, [pc, #76]	; (bd020 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bcfd4:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcfd8:	2300      	movs	r3, #0
   bcfda:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bcfde:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bcfe0:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bcfe2:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bcfe6:	f7ff feb7 	bl	bcd58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bcfea:	280b      	cmp	r0, #11
   bcfec:	d10b      	bne.n	bd006 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bcfee:	2401      	movs	r4, #1
   bcff0:	e00d      	b.n	bd00e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bcff2:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bcff4:	f7ff ffcc 	bl	bcf90 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bcff8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bcffa:	9a01      	ldr	r2, [sp, #4]
   bcffc:	2c00      	cmp	r4, #0
   bcffe:	d1e6      	bne.n	bcfce <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bd000:	4620      	mov	r0, r4
   bd002:	b002      	add	sp, #8
   bd004:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd006:	f1a0 030d 	sub.w	r3, r0, #13
   bd00a:	425c      	negs	r4, r3
   bd00c:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bd00e:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bd010:	b110      	cbz	r0, bd018 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bd012:	2118      	movs	r1, #24
   bd014:	f7f7 f845 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bd018:	2300      	movs	r3, #0
   bd01a:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bd01c:	e7f0      	b.n	bd000 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bd01e:	bf00      	nop
   bd020:	00010006 	.word	0x00010006

000bd024 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bd024:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bd026:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bd02a:	4604      	mov	r4, r0
   bd02c:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bd02e:	b145      	cbz	r5, bd042 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bd030:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bd034:	b9b1      	cbnz	r1, bd064 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd036:	4620      	mov	r0, r4
}
   bd038:	b003      	add	sp, #12
   bd03a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd03e:	f7ff bfc1 	b.w	bcfc4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bd042:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bd044:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bd048:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bd04c:	f004 fd14 	bl	c1a78 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bd050:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bd054:	f004 fd1b 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
   bd058:	9a01      	ldr	r2, [sp, #4]
   bd05a:	2800      	cmp	r0, #0
   bd05c:	d0e8      	beq.n	bd030 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bd05e:	4628      	mov	r0, r5
   bd060:	b003      	add	sp, #12
   bd062:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd064:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd066:	bf18      	it	ne
   bd068:	2104      	movne	r1, #4
   bd06a:	e7e4      	b.n	bd036 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bd06c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bd06c:	b570      	push	{r4, r5, r6, lr}
   bd06e:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bd070:	2300      	movs	r3, #0
   bd072:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bd076:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bd07a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bd07e:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bd082:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bd086:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bd088:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bd08c:	b91b      	cbnz	r3, bd096 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bd08e:	f44f 7180 	mov.w	r1, #256	; 0x100
   bd092:	f7fb f9ed 	bl	b8470 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bd096:	4620      	mov	r0, r4
   bd098:	f7fc fe04 	bl	b9ca4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bd09c:	4631      	mov	r1, r6
   bd09e:	4620      	mov	r0, r4
   bd0a0:	f7ff ffc0 	bl	bd024 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd0a4:	b110      	cbz	r0, bd0ac <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bd0a6:	2501      	movs	r5, #1
}
   bd0a8:	4628      	mov	r0, r5
   bd0aa:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd0ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd0b0:	b913      	cbnz	r3, bd0b8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bd0b2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd0b6:	b123      	cbz	r3, bd0c2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bd0b8:	4917      	ldr	r1, [pc, #92]	; (bd118 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bd0ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0be:	f002 fe36 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd0c2:	4631      	mov	r1, r6
   bd0c4:	4620      	mov	r0, r4
   bd0c6:	f7ff ffad 	bl	bd024 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd0ca:	2800      	cmp	r0, #0
   bd0cc:	d1eb      	bne.n	bd0a6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd0ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd0d2:	b913      	cbnz	r3, bd0da <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bd0d4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd0d8:	b123      	cbz	r3, bd0e4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bd0da:	4910      	ldr	r1, [pc, #64]	; (bd11c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bd0dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0e0:	f002 fe25 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd0e4:	4631      	mov	r1, r6
   bd0e6:	4620      	mov	r0, r4
   bd0e8:	f7ff ff9c 	bl	bd024 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bd0ec:	2800      	cmp	r0, #0
   bd0ee:	d1da      	bne.n	bd0a6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bd0f0:	2d00      	cmp	r5, #0
   bd0f2:	d0d9      	beq.n	bd0a8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd0f4:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bd0f8:	2d00      	cmp	r5, #0
   bd0fa:	d0d5      	beq.n	bd0a8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd0fc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd100:	b91b      	cbnz	r3, bd10a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bd102:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd106:	2b00      	cmp	r3, #0
   bd108:	d0cd      	beq.n	bd0a6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bd10a:	4905      	ldr	r1, [pc, #20]	; (bd120 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bd10c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd110:	f002 fe0d 	bl	bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd114:	e7c8      	b.n	bd0a8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd116:	bf00      	nop
   bd118:	000c7b27 	.word	0x000c7b27
   bd11c:	000c7b4b 	.word	0x000c7b4b
   bd120:	000c7b6e 	.word	0x000c7b6e

000bd124 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bd124:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd126:	6a03      	ldr	r3, [r0, #32]
{
   bd128:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd12a:	b91b      	cbnz	r3, bd134 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bd12c:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd12e:	f7ff fed7 	bl	bcee0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd132:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd134:	6a20      	ldr	r0, [r4, #32]
   bd136:	b1b0      	cbz	r0, bd166 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bd138:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd13c:	07db      	lsls	r3, r3, #31
   bd13e:	d402      	bmi.n	bd146 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bd140:	4620      	mov	r0, r4
   bd142:	f7ff feed 	bl	bcf20 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bd146:	6a23      	ldr	r3, [r4, #32]
   bd148:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd14c:	f36f 0200 	bfc	r2, #0, #1
   bd150:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd154:	6a23      	ldr	r3, [r4, #32]
   bd156:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd15a:	f36f 0200 	bfc	r2, #0, #1
   bd15e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bd162:	6a23      	ldr	r3, [r4, #32]
   bd164:	69d8      	ldr	r0, [r3, #28]
}
   bd166:	b002      	add	sp, #8
   bd168:	bd10      	pop	{r4, pc}

000bd16a <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bd16a:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd16c:	6a03      	ldr	r3, [r0, #32]
{
   bd16e:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd170:	b91b      	cbnz	r3, bd17a <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bd172:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd174:	f7ff feb4 	bl	bcee0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd178:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd17a:	6a20      	ldr	r0, [r4, #32]
   bd17c:	b1b0      	cbz	r0, bd1ac <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bd17e:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd182:	079b      	lsls	r3, r3, #30
   bd184:	d402      	bmi.n	bd18c <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bd186:	4620      	mov	r0, r4
   bd188:	f7ff feca 	bl	bcf20 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bd18c:	6a23      	ldr	r3, [r4, #32]
   bd18e:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd192:	f36f 0241 	bfc	r2, #1, #1
   bd196:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd19a:	6a23      	ldr	r3, [r4, #32]
   bd19c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd1a0:	f36f 0200 	bfc	r2, #0, #1
   bd1a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bd1a8:	6a23      	ldr	r3, [r4, #32]
   bd1aa:	6a18      	ldr	r0, [r3, #32]
}
   bd1ac:	b002      	add	sp, #8
   bd1ae:	bd10      	pop	{r4, pc}

000bd1b0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   bd1b0:	4770      	bx	lr

000bd1b2 <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   bd1b2:	4770      	bx	lr

000bd1b4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   bd1b4:	b538      	push	{r3, r4, r5, lr}
   bd1b6:	460c      	mov	r4, r1
   bd1b8:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   bd1ba:	2220      	movs	r2, #32
   bd1bc:	2100      	movs	r1, #0
   bd1be:	f104 0008 	add.w	r0, r4, #8
   bd1c2:	f007 fa29 	bl	c4618 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   bd1c6:	4909      	ldr	r1, [pc, #36]	; (bd1ec <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   bd1c8:	220b      	movs	r2, #11
   bd1ca:	4620      	mov	r0, r4
   bd1cc:	f007 fade 	bl	c478c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   bd1d0:	2301      	movs	r3, #1
   bd1d2:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   bd1d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd1d6:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   bd1d8:	2302      	movs	r3, #2
   bd1da:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   bd1dc:	4b04      	ldr	r3, [pc, #16]	; (bd1f0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   bd1de:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   bd1e0:	4b04      	ldr	r3, [pc, #16]	; (bd1f4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   bd1e2:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   bd1e4:	4b04      	ldr	r3, [pc, #16]	; (bd1f8 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   bd1e6:	6223      	str	r3, [r4, #32]
}
   bd1e8:	bd38      	pop	{r3, r4, r5, pc}
   bd1ea:	bf00      	nop
   bd1ec:	000c7c8d 	.word	0x000c7c8d
   bd1f0:	c4c80000 	.word	0xc4c80000
   bd1f4:	44c80000 	.word	0x44c80000
   bd1f8:	3c75c28f 	.word	0x3c75c28f

000bd1fc <_ZN16Adafruit_LIS3MDLD0Ev>:
   bd1fc:	b510      	push	{r4, lr}
   bd1fe:	2128      	movs	r1, #40	; 0x28
   bd200:	4604      	mov	r4, r0
   bd202:	f7f6 ff4e 	bl	b40a2 <_ZdlPvj>
   bd206:	4620      	mov	r0, r4
   bd208:	bd10      	pop	{r4, pc}
	...

000bd20c <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   bd20c:	4a03      	ldr	r2, [pc, #12]	; (bd21c <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   bd20e:	6002      	str	r2, [r0, #0]
   bd210:	2200      	movs	r2, #0
   bd212:	e9c0 2207 	strd	r2, r2, [r0, #28]
   bd216:	7602      	strb	r2, [r0, #24]
   bd218:	4770      	bx	lr
   bd21a:	bf00      	nop
   bd21c:	000c7cb0 	.word	0x000c7cb0

000bd220 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   bd220:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bd222:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   bd224:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bd226:	2200      	movs	r2, #0
   bd228:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bd22c:	2506      	movs	r5, #6
   bd22e:	2228      	movs	r2, #40	; 0x28
   bd230:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   bd234:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   bd236:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd23a:	a806      	add	r0, sp, #24
   bd23c:	f000 f9c8 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   bd240:	462a      	mov	r2, r5
   bd242:	a904      	add	r1, sp, #16
   bd244:	a806      	add	r0, sp, #24
   bd246:	f000 fa41 	bl	bd6cc <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   bd24a:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   bd24c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   bd250:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   bd254:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   bd258:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   bd25a:	2d03      	cmp	r5, #3
   bd25c:	bf98      	it	ls
   bd25e:	4812      	ldrls	r0, [pc, #72]	; (bd2a8 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   bd260:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   bd262:	ee07 1a10 	vmov	s14, r1
   bd266:	bf9c      	itt	ls
   bd268:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   bd26c:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   bd270:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   bd272:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   bd276:	bf88      	it	hi
   bd278:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   bd27c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   bd280:	ee07 2a10 	vmov	s14, r2
   bd284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   bd288:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   bd28c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   bd290:	ee07 3a10 	vmov	s14, r3
   bd294:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   bd298:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   bd29c:	eec7 6a27 	vdiv.f32	s13, s14, s15
   bd2a0:	edc4 6a05 	vstr	s13, [r4, #20]
}
   bd2a4:	b00d      	add	sp, #52	; 0x34
   bd2a6:	bd30      	pop	{r4, r5, pc}
   bd2a8:	000c7c98 	.word	0x000c7c98

000bd2ac <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   bd2ac:	b538      	push	{r3, r4, r5, lr}
   bd2ae:	460c      	mov	r4, r1
   bd2b0:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   bd2b2:	2220      	movs	r2, #32
   bd2b4:	2100      	movs	r1, #0
   bd2b6:	1d20      	adds	r0, r4, #4
   bd2b8:	f007 f9ae 	bl	c4618 <memset>
  event->version = sizeof(sensors_event_t);
   bd2bc:	2324      	movs	r3, #36	; 0x24
   bd2be:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   bd2c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd2c2:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   bd2c4:	2302      	movs	r3, #2
   bd2c6:	60a3      	str	r3, [r4, #8]
   bd2c8:	f000 fccc 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   bd2cc:	6120      	str	r0, [r4, #16]
  read();
   bd2ce:	4628      	mov	r0, r5
   bd2d0:	f7ff ffa6 	bl	bd220 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   bd2d4:	edd5 7a03 	vldr	s15, [r5, #12]
   bd2d8:	ed9f 7a09 	vldr	s14, [pc, #36]	; bd300 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   bd2dc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   bd2e0:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   bd2e2:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   bd2e6:	edd5 7a04 	vldr	s15, [r5, #16]
   bd2ea:	ee67 7a87 	vmul.f32	s15, s15, s14
   bd2ee:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   bd2f2:	edd5 7a05 	vldr	s15, [r5, #20]
   bd2f6:	ee67 7a87 	vmul.f32	s15, s15, s14
   bd2fa:	edc4 7a07 	vstr	s15, [r4, #28]
}
   bd2fe:	bd38      	pop	{r3, r4, r5, pc}
   bd300:	42c80000 	.word	0x42c80000

000bd304 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bd304:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd306:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bd308:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd30a:	2700      	movs	r7, #0
   bd30c:	e9cd 7502 	strd	r7, r5, [sp, #8]
   bd310:	2320      	movs	r3, #32
   bd312:	9300      	str	r3, [sp, #0]
   bd314:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   bd316:	460e      	mov	r6, r1
   bd318:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd31a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd31e:	462b      	mov	r3, r5
   bd320:	a808      	add	r0, sp, #32
   bd322:	f000 f955 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   bd326:	2305      	movs	r3, #5
   bd328:	2202      	movs	r2, #2
   bd32a:	a908      	add	r1, sp, #32
   bd32c:	a804      	add	r0, sp, #16
   bd32e:	f000 fa2b 	bl	bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   bd332:	4631      	mov	r1, r6
   bd334:	a804      	add	r0, sp, #16
   bd336:	f000 fa39 	bl	bd7ac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   bd33a:	2323      	movs	r3, #35	; 0x23
   bd33c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   bd340:	9300      	str	r3, [sp, #0]
   bd342:	e9cd 7502 	strd	r7, r5, [sp, #8]
   bd346:	462b      	mov	r3, r5
   bd348:	9501      	str	r5, [sp, #4]
   bd34a:	a80e      	add	r0, sp, #56	; 0x38
   bd34c:	f000 f940 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   bd350:	2302      	movs	r3, #2
   bd352:	461a      	mov	r2, r3
   bd354:	a90e      	add	r1, sp, #56	; 0x38
   bd356:	a806      	add	r0, sp, #24
   bd358:	f000 fa16 	bl	bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   bd35c:	4631      	mov	r1, r6
   bd35e:	a806      	add	r0, sp, #24
   bd360:	f000 fa24 	bl	bd7ac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bd364:	b015      	add	sp, #84	; 0x54
   bd366:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd368 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   bd368:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   bd36a:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   bd36c:	b08c      	sub	sp, #48	; 0x30
   bd36e:	4606      	mov	r6, r0
   bd370:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   bd372:	d103      	bne.n	bd37c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   bd374:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   bd376:	f7ff ffc5 	bl	bd304 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   bd37a:	e009      	b.n	bd390 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   bd37c:	2903      	cmp	r1, #3
   bd37e:	d003      	beq.n	bd388 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   bd380:	2905      	cmp	r1, #5
   bd382:	d103      	bne.n	bd38c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   bd384:	2101      	movs	r1, #1
   bd386:	e7f6      	b.n	bd376 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   bd388:	2102      	movs	r1, #2
   bd38a:	e7f4      	b.n	bd376 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   bd38c:	2907      	cmp	r1, #7
   bd38e:	d01b      	beq.n	bd3c8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   bd390:	200a      	movs	r0, #10
   bd392:	f003 fdad 	bl	c0ef0 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   bd396:	2501      	movs	r5, #1
   bd398:	2300      	movs	r3, #0
   bd39a:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bd39e:	2320      	movs	r3, #32
   bd3a0:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   bd3a4:	9300      	str	r3, [sp, #0]
   bd3a6:	9501      	str	r5, [sp, #4]
   bd3a8:	462b      	mov	r3, r5
   bd3aa:	a806      	add	r0, sp, #24
   bd3ac:	f000 f910 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   bd3b0:	462b      	mov	r3, r5
   bd3b2:	2204      	movs	r2, #4
   bd3b4:	a906      	add	r1, sp, #24
   bd3b6:	a804      	add	r0, sp, #16
   bd3b8:	f000 f9e6 	bl	bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   bd3bc:	4621      	mov	r1, r4
   bd3be:	a804      	add	r0, sp, #16
   bd3c0:	f000 f9f4 	bl	bd7ac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bd3c4:	b00c      	add	sp, #48	; 0x30
   bd3c6:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   bd3c8:	2100      	movs	r1, #0
   bd3ca:	e7d4      	b.n	bd376 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000bd3cc <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bd3cc:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   bd3ce:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bd3d0:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   bd3d2:	2500      	movs	r5, #0
   bd3d4:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bd3d8:	2222      	movs	r2, #34	; 0x22
   bd3da:	9301      	str	r3, [sp, #4]
   bd3dc:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   bd3de:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   bd3e0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd3e4:	a806      	add	r0, sp, #24
   bd3e6:	f000 f8f3 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   bd3ea:	462b      	mov	r3, r5
   bd3ec:	2202      	movs	r2, #2
   bd3ee:	a906      	add	r1, sp, #24
   bd3f0:	a804      	add	r0, sp, #16
   bd3f2:	f000 f9c9 	bl	bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   bd3f6:	4621      	mov	r1, r4
   bd3f8:	a804      	add	r0, sp, #16
   bd3fa:	f000 f9d7 	bl	bd7ac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   bd3fe:	b00d      	add	sp, #52	; 0x34
   bd400:	bd30      	pop	{r4, r5, pc}

000bd402 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bd402:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd404:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bd406:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd408:	2200      	movs	r2, #0
   bd40a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bd40e:	2221      	movs	r2, #33	; 0x21
   bd410:	9301      	str	r3, [sp, #4]
   bd412:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   bd414:	460d      	mov	r5, r1
   bd416:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd418:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd41c:	a806      	add	r0, sp, #24
   bd41e:	f000 f8d7 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   bd422:	2305      	movs	r3, #5
   bd424:	2202      	movs	r2, #2
   bd426:	a906      	add	r1, sp, #24
   bd428:	a804      	add	r0, sp, #16
   bd42a:	f000 f9ad 	bl	bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   bd42e:	4629      	mov	r1, r5
   bd430:	a804      	add	r0, sp, #16
   bd432:	f000 f9bb 	bl	bd7ac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   bd436:	7625      	strb	r5, [r4, #24]
}
   bd438:	b00d      	add	sp, #52	; 0x34
   bd43a:	bd30      	pop	{r4, r5, pc}

000bd43c <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bd43c:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd43e:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bd440:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd442:	2200      	movs	r2, #0
   bd444:	e9cd 2302 	strd	r2, r3, [sp, #8]
   bd448:	2221      	movs	r2, #33	; 0x21
   bd44a:	9301      	str	r3, [sp, #4]
   bd44c:	9200      	str	r2, [sp, #0]
   bd44e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   bd452:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd454:	a806      	add	r0, sp, #24
   bd456:	f000 f8bb 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   bd45a:	2305      	movs	r3, #5
   bd45c:	2202      	movs	r2, #2
   bd45e:	a906      	add	r1, sp, #24
   bd460:	a804      	add	r0, sp, #16
   bd462:	f000 f991 	bl	bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   bd466:	a804      	add	r0, sp, #16
   bd468:	f000 f993 	bl	bd792 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   bd46c:	b2c0      	uxtb	r0, r0
   bd46e:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   bd470:	b00c      	add	sp, #48	; 0x30
   bd472:	bd10      	pop	{r4, pc}

000bd474 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   bd474:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd476:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   bd478:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd47a:	2501      	movs	r5, #1
   bd47c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bd480:	2321      	movs	r3, #33	; 0x21
   bd482:	9300      	str	r3, [sp, #0]
   bd484:	9501      	str	r5, [sp, #4]
   bd486:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   bd48a:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   bd48c:	462b      	mov	r3, r5
   bd48e:	a806      	add	r0, sp, #24
   bd490:	f000 f89e 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   bd494:	2302      	movs	r3, #2
   bd496:	462a      	mov	r2, r5
   bd498:	a906      	add	r1, sp, #24
   bd49a:	a804      	add	r0, sp, #16
   bd49c:	f000 f974 	bl	bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   bd4a0:	4629      	mov	r1, r5
   bd4a2:	a804      	add	r0, sp, #16
   bd4a4:	f000 f982 	bl	bd7ac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   bd4a8:	200a      	movs	r0, #10
   bd4aa:	f003 fd21 	bl	c0ef0 <delay>
  getRange();
   bd4ae:	4620      	mov	r0, r4
   bd4b0:	f7ff ffc4 	bl	bd43c <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   bd4b4:	b00d      	add	sp, #52	; 0x34
   bd4b6:	bd30      	pop	{r4, r5, pc}

000bd4b8 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   bd4b8:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   bd4ba:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   bd4bc:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   bd4be:	2500      	movs	r5, #0
   bd4c0:	e9cd 5602 	strd	r5, r6, [sp, #8]
   bd4c4:	230f      	movs	r3, #15
   bd4c6:	9300      	str	r3, [sp, #0]
   bd4c8:	9601      	str	r6, [sp, #4]
   bd4ca:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd4ce:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   bd4d0:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   bd4d2:	a804      	add	r0, sp, #16
   bd4d4:	f000 f87c 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   bd4d8:	a804      	add	r0, sp, #16
   bd4da:	f000 f939 	bl	bd750 <_ZN23Adafruit_BusIO_Register4readEv>
   bd4de:	283d      	cmp	r0, #61	; 0x3d
   bd4e0:	d115      	bne.n	bd50e <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   bd4e2:	4620      	mov	r0, r4
   bd4e4:	f7ff ffc6 	bl	bd474 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   bd4e8:	2103      	movs	r1, #3
   bd4ea:	4620      	mov	r0, r4
   bd4ec:	f7ff ff0a 	bl	bd304 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   bd4f0:	4631      	mov	r1, r6
   bd4f2:	4620      	mov	r0, r4
   bd4f4:	f7ff ff38 	bl	bd368 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   bd4f8:	4629      	mov	r1, r5
   bd4fa:	4620      	mov	r0, r4
   bd4fc:	f7ff ff81 	bl	bd402 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   bd500:	4620      	mov	r0, r4
   bd502:	4629      	mov	r1, r5
   bd504:	f7ff ff62 	bl	bd3cc <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   bd508:	4630      	mov	r0, r6
}
   bd50a:	b00a      	add	sp, #40	; 0x28
   bd50c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   bd50e:	4628      	mov	r0, r5
   bd510:	e7fb      	b.n	bd50a <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000bd512 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   bd512:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   bd514:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   bd516:	4604      	mov	r4, r0
  if (!i2c_dev) {
   bd518:	b95b      	cbnz	r3, bd532 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   bd51a:	2010      	movs	r0, #16
   bd51c:	e9cd 1200 	strd	r1, r2, [sp]
   bd520:	f7f6 fdb9 	bl	b4096 <_Znwj>
   bd524:	4605      	mov	r5, r0
   bd526:	b118      	cbz	r0, bd530 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   bd528:	e9dd 1200 	ldrd	r1, r2, [sp]
   bd52c:	f000 fa71 	bl	bda12 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   bd530:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   bd532:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   bd534:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   bd536:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   bd538:	2101      	movs	r1, #1
   bd53a:	f000 fa86 	bl	bda4a <_ZN18Adafruit_I2CDevice5beginEb>
   bd53e:	b128      	cbz	r0, bd54c <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   bd540:	4620      	mov	r0, r4
}
   bd542:	b003      	add	sp, #12
   bd544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   bd548:	f7ff bfb6 	b.w	bd4b8 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   bd54c:	b003      	add	sp, #12
   bd54e:	bd30      	pop	{r4, r5, pc}

000bd550 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   bd550:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   bd552:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   bd554:	b08b      	sub	sp, #44	; 0x2c
   bd556:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   bd558:	2500      	movs	r5, #0
   bd55a:	2232      	movs	r2, #50	; 0x32
   bd55c:	2102      	movs	r1, #2
   bd55e:	e9cd 5302 	strd	r5, r3, [sp, #8]
   bd562:	e9cd 2100 	strd	r2, r1, [sp]
   bd566:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd56a:	a804      	add	r0, sp, #16
   bd56c:	f000 f830 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   bd570:	462a      	mov	r2, r5
   bd572:	f3c4 010e 	ubfx	r1, r4, #0, #15
   bd576:	a804      	add	r0, sp, #16
   bd578:	f000 f88a 	bl	bd690 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   bd57c:	b00b      	add	sp, #44	; 0x2c
   bd57e:	bd30      	pop	{r4, r5, pc}

000bd580 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   bd580:	b530      	push	{r4, r5, lr}
   bd582:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd584:	2500      	movs	r5, #0
  value |= latch << 1;
   bd586:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   bd58a:	0064      	lsls	r4, r4, #1
   bd58c:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   bd590:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   bd594:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   bd598:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   bd59c:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   bd5a0:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd5a4:	2301      	movs	r3, #1
  value |= latch << 1;
   bd5a6:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd5aa:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   bd5ae:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   bd5b0:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   bd5b2:	2230      	movs	r2, #48	; 0x30
   bd5b4:	9301      	str	r3, [sp, #4]
   bd5b6:	9200      	str	r2, [sp, #0]
   bd5b8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   bd5bc:	a804      	add	r0, sp, #16
   bd5be:	f000 f807 	bl	bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   bd5c2:	462a      	mov	r2, r5
   bd5c4:	4621      	mov	r1, r4
   bd5c6:	a804      	add	r0, sp, #16
   bd5c8:	f000 f862 	bl	bd690 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   bd5cc:	b00b      	add	sp, #44	; 0x2c
   bd5ce:	bd30      	pop	{r4, r5, pc}

000bd5d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bd5d0:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bd5d2:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bd5d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bd5d8:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bd5da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bd5de:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bd5e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd5e4:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bd5e6:	2500      	movs	r5, #0
  _width = width;
   bd5e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bd5ec:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bd5ee:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bd5f2:	7303      	strb	r3, [r0, #12]
}
   bd5f4:	bd30      	pop	{r4, r5, pc}

000bd5f6 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd5f6:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd5f8:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd5fa:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd5fc:	b085      	sub	sp, #20
   bd5fe:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bd600:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd602:	f88d 400c 	strb.w	r4, [sp, #12]
   bd606:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd608:	460e      	mov	r6, r1
   bd60a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bd60c:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bd610:	b140      	cbz	r0, bd624 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd612:	7b5b      	ldrb	r3, [r3, #13]
   bd614:	9301      	str	r3, [sp, #4]
   bd616:	ab03      	add	r3, sp, #12
   bd618:	9300      	str	r3, [sp, #0]
   bd61a:	2301      	movs	r3, #1
   bd61c:	f000 fa24 	bl	bda68 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd620:	b005      	add	sp, #20
   bd622:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bd624:	6858      	ldr	r0, [r3, #4]
   bd626:	2800      	cmp	r0, #0
   bd628:	d0fa      	beq.n	bd620 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd62a:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd62e:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd632:	f1be 0f03 	cmp.w	lr, #3
   bd636:	d10c      	bne.n	bd652 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd638:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bd63c:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd640:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bd642:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd646:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd64a:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd64c:	f000 f97b 	bl	bd946 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd650:	e7e6      	b.n	bd620 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd652:	f1be 0f00 	cmp.w	lr, #0
   bd656:	d109      	bne.n	bd66c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bd658:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bd65c:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd660:	f8cd c000 	str.w	ip, [sp]
   bd664:	ab03      	add	r3, sp, #12
   bd666:	463a      	mov	r2, r7
   bd668:	4631      	mov	r1, r6
   bd66a:	e7ef      	b.n	bd64c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd66c:	f1be 0f02 	cmp.w	lr, #2
   bd670:	d102      	bne.n	bd678 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bd672:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bd676:	e7f1      	b.n	bd65c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd678:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bd67c:	bf01      	itttt	eq
   bd67e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bd682:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd686:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bd68a:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bd68e:	e7e7      	b.n	bd660 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bd690 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd690:	b4f0      	push	{r4, r5, r6, r7}
   bd692:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd694:	b902      	cbnz	r2, bd698 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd696:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd698:	2a04      	cmp	r2, #4
   bd69a:	d814      	bhi.n	bd6c6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd69c:	f100 050f 	add.w	r5, r0, #15
   bd6a0:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd6a2:	1884      	adds	r4, r0, r2
   bd6a4:	4629      	mov	r1, r5
   bd6a6:	4284      	cmp	r4, r0
   bd6a8:	d009      	beq.n	bd6be <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd6aa:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd6ac:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd6ae:	b927      	cbnz	r7, bd6ba <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd6b0:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd6b2:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd6b4:	3501      	adds	r5, #1
   bd6b6:	3c01      	subs	r4, #1
   bd6b8:	e7f5      	b.n	bd6a6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd6ba:	73a6      	strb	r6, [r4, #14]
   bd6bc:	e7f9      	b.n	bd6b2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd6be:	4620      	mov	r0, r4
}
   bd6c0:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd6c2:	f7ff bf98 	b.w	bd5f6 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd6c6:	2000      	movs	r0, #0
   bd6c8:	bcf0      	pop	{r4, r5, r6, r7}
   bd6ca:	4770      	bx	lr

000bd6cc <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd6cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd6ce:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd6d0:	7a85      	ldrb	r5, [r0, #10]
   bd6d2:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd6d6:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bd6d8:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd6da:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd6dc:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bd6de:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bd6e2:	b140      	cbz	r0, bd6f6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd6e4:	2100      	movs	r1, #0
   bd6e6:	e9cd 2100 	strd	r2, r1, [sp]
   bd6ea:	a903      	add	r1, sp, #12
   bd6ec:	7b62      	ldrb	r2, [r4, #13]
   bd6ee:	f000 fa29 	bl	bdb44 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd6f2:	b004      	add	sp, #16
   bd6f4:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd6f6:	6860      	ldr	r0, [r4, #4]
   bd6f8:	2800      	cmp	r0, #0
   bd6fa:	d0fa      	beq.n	bd6f2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd6fc:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd6fe:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd700:	2903      	cmp	r1, #3
   bd702:	d10d      	bne.n	bd720 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bd704:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd708:	21ff      	movs	r1, #255	; 0xff
   bd70a:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bd70e:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd712:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd716:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd718:	a903      	add	r1, sp, #12
   bd71a:	f000 f946 	bl	bd9aa <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd71e:	e7e8      	b.n	bd6f2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd720:	b941      	cbnz	r1, bd734 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bd722:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bd726:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd72a:	21ff      	movs	r1, #255	; 0xff
   bd72c:	e9cd 2100 	strd	r2, r1, [sp]
   bd730:	4622      	mov	r2, r4
   bd732:	e7f1      	b.n	bd718 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd734:	2902      	cmp	r1, #2
   bd736:	d102      	bne.n	bd73e <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bd738:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bd73c:	e7f3      	b.n	bd726 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd73e:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bd740:	bf02      	ittt	eq
   bd742:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bd746:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bd74a:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bd74e:	e7ec      	b.n	bd72a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bd750 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd750:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd752:	f100 050f 	add.w	r5, r0, #15
   bd756:	7b02      	ldrb	r2, [r0, #12]
   bd758:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd75a:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd75c:	f7ff ffb6 	bl	bd6cc <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd760:	b178      	cbz	r0, bd782 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd762:	7b22      	ldrb	r2, [r4, #12]
   bd764:	4629      	mov	r1, r5
   bd766:	4422      	add	r2, r4
  uint32_t value = 0;
   bd768:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd76a:	42a2      	cmp	r2, r4
   bd76c:	d00b      	beq.n	bd786 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd76e:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd770:	7ba0      	ldrb	r0, [r4, #14]
   bd772:	b920      	cbnz	r0, bd77e <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd774:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd776:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd778:	3a01      	subs	r2, #1
   bd77a:	3101      	adds	r1, #1
   bd77c:	e7f5      	b.n	bd76a <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd77e:	7808      	ldrb	r0, [r1, #0]
   bd780:	e7f9      	b.n	bd776 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd782:	f04f 30ff 	mov.w	r0, #4294967295
}
   bd786:	bd38      	pop	{r3, r4, r5, pc}

000bd788 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd788:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd78a:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd78c:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd78e:	7143      	strb	r3, [r0, #5]
}
   bd790:	bd10      	pop	{r4, pc}

000bd792 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd792:	b510      	push	{r4, lr}
   bd794:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd796:	6800      	ldr	r0, [r0, #0]
   bd798:	f7ff ffda 	bl	bd750 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd79c:	7922      	ldrb	r2, [r4, #4]
   bd79e:	2301      	movs	r3, #1
   bd7a0:	4093      	lsls	r3, r2
  val >>= _shift;
   bd7a2:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd7a4:	3b01      	subs	r3, #1
  val >>= _shift;
   bd7a6:	40d0      	lsrs	r0, r2
}
   bd7a8:	4018      	ands	r0, r3
   bd7aa:	bd10      	pop	{r4, pc}

000bd7ac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd7ac:	b570      	push	{r4, r5, r6, lr}
   bd7ae:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd7b0:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd7b2:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd7b4:	f7ff ffcc 	bl	bd750 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd7b8:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd7ba:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd7bc:	2201      	movs	r2, #1
   bd7be:	409a      	lsls	r2, r3
   bd7c0:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd7c2:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd7c6:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd7ca:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd7cc:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd7ce:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd7d2:	4329      	orrs	r1, r5
   bd7d4:	7b02      	ldrb	r2, [r0, #12]
}
   bd7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd7da:	f7ff bf59 	b.w	bd690 <_ZN23Adafruit_BusIO_Register5writeEmh>
	...

000bd7e0 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd7e4:	4604      	mov	r4, r0
  if (_spi) {
   bd7e6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd7e8:	b085      	sub	sp, #20
   bd7ea:	460d      	mov	r5, r1
  if (_spi) {
   bd7ec:	b140      	cbz	r0, bd800 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd7ee:	2300      	movs	r3, #0
   bd7f0:	9300      	str	r3, [sp, #0]
   bd7f2:	4613      	mov	r3, r2
   bd7f4:	460a      	mov	r2, r1
   bd7f6:	f000 ff15 	bl	be624 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd7fa:	b005      	add	sp, #20
   bd7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd800:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd802:	68a0      	ldr	r0, [r4, #8]
   bd804:	4f48      	ldr	r7, [pc, #288]	; (bd928 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd806:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd80a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd80c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd80e:	bf0c      	ite	eq
   bd810:	f04f 0b01 	moveq.w	fp, #1
   bd814:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd818:	ea1b 0f03 	tst.w	fp, r3
   bd81c:	eb01 0302 	add.w	r3, r1, r2
   bd820:	bf0c      	ite	eq
   bd822:	f04f 0901 	moveq.w	r9, #1
   bd826:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd82a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd82c:	9303      	str	r3, [sp, #12]
   bd82e:	9b03      	ldr	r3, [sp, #12]
   bd830:	42ab      	cmp	r3, r5
   bd832:	d0e2      	beq.n	bd7fa <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd834:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd838:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd83a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd83e:	b117      	cbz	r7, bd846 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd840:	4638      	mov	r0, r7
   bd842:	f000 f9ff 	bl	bdc44 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd846:	7b63      	ldrb	r3, [r4, #13]
   bd848:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd84c:	d141      	bne.n	bd8d2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd84e:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd852:	1c5a      	adds	r2, r3, #1
   bd854:	d00f      	beq.n	bd876 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd856:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd85a:	bf14      	ite	ne
   bd85c:	2301      	movne	r3, #1
   bd85e:	2300      	moveq	r3, #0
   bd860:	454b      	cmp	r3, r9
   bd862:	d008      	beq.n	bd876 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd864:	6963      	ldr	r3, [r4, #20]
   bd866:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd868:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd86a:	2900      	cmp	r1, #0
   bd86c:	d02c      	beq.n	bd8c8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd86e:	4302      	orrs	r2, r0
   bd870:	601a      	str	r2, [r3, #0]
   bd872:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd876:	69a1      	ldr	r1, [r4, #24]
   bd878:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd87a:	680a      	ldr	r2, [r1, #0]
   bd87c:	4313      	orrs	r3, r2
   bd87e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd880:	b117      	cbz	r7, bd888 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd882:	4638      	mov	r0, r7
   bd884:	f000 f9de 	bl	bdc44 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd888:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd88c:	3301      	adds	r3, #1
   bd88e:	d006      	beq.n	bd89e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd890:	69e3      	ldr	r3, [r4, #28]
   bd892:	681a      	ldr	r2, [r3, #0]
   bd894:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd896:	421a      	tst	r2, r3
            reply |= b;
   bd898:	bf18      	it	ne
   bd89a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd89e:	69a1      	ldr	r1, [r4, #24]
   bd8a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd8a2:	680a      	ldr	r2, [r1, #0]
   bd8a4:	ea22 0303 	bic.w	r3, r2, r3
   bd8a8:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd8aa:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd8ae:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd8b0:	bf18      	it	ne
   bd8b2:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd8b6:	7b23      	ldrb	r3, [r4, #12]
   bd8b8:	2b00      	cmp	r3, #0
   bd8ba:	d132      	bne.n	bd922 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd8bc:	0076      	lsls	r6, r6, #1
   bd8be:	b2f6      	uxtb	r6, r6
   bd8c0:	2e00      	cmp	r6, #0
   bd8c2:	d1bc      	bne.n	bd83e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd8c4:	3501      	adds	r5, #1
   bd8c6:	e7b2      	b.n	bd82e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd8c8:	ea22 0200 	bic.w	r2, r2, r0
   bd8cc:	601a      	str	r2, [r3, #0]
   bd8ce:	4689      	mov	r9, r1
   bd8d0:	e7d1      	b.n	bd876 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd8d2:	69a1      	ldr	r1, [r4, #24]
   bd8d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd8d6:	680a      	ldr	r2, [r1, #0]
   bd8d8:	4313      	orrs	r3, r2
   bd8da:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd8dc:	b117      	cbz	r7, bd8e4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd8de:	4638      	mov	r0, r7
   bd8e0:	f000 f9b0 	bl	bdc44 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd8e4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd8e8:	3301      	adds	r3, #1
   bd8ea:	d008      	beq.n	bd8fe <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd8ec:	6963      	ldr	r3, [r4, #20]
   bd8ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd8f0:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd8f2:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd8f6:	bf14      	ite	ne
   bd8f8:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd8fa:	438a      	biceq	r2, r1
   bd8fc:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd8fe:	69a1      	ldr	r1, [r4, #24]
   bd900:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd902:	680a      	ldr	r2, [r1, #0]
   bd904:	ea22 0303 	bic.w	r3, r2, r3
   bd908:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd90a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd90e:	3301      	adds	r3, #1
   bd910:	d0cb      	beq.n	bd8aa <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd912:	69e3      	ldr	r3, [r4, #28]
   bd914:	681a      	ldr	r2, [r3, #0]
   bd916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd918:	421a      	tst	r2, r3
            reply |= b;
   bd91a:	bf18      	it	ne
   bd91c:	ea46 0808 	orrne.w	r8, r6, r8
   bd920:	e7c3      	b.n	bd8aa <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd922:	0876      	lsrs	r6, r6, #1
   bd924:	e7cc      	b.n	bd8c0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd926:	bf00      	nop
   bd928:	0007a120 	.word	0x0007a120

000bd92c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd92c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd92e:	2201      	movs	r2, #1
  uint8_t data = send;
   bd930:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd934:	f10d 0107 	add.w	r1, sp, #7
   bd938:	f7ff ff52 	bl	bd7e0 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd93c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd940:	b003      	add	sp, #12
   bd942:	f85d fb04 	ldr.w	pc, [sp], #4

000bd946 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd94a:	4604      	mov	r4, r0
  if (_spi) {
   bd94c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd94e:	460e      	mov	r6, r1
   bd950:	4617      	mov	r7, r2
   bd952:	461d      	mov	r5, r3
  if (_spi) {
   bd954:	b110      	cbz	r0, bd95c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd956:	6861      	ldr	r1, [r4, #4]
   bd958:	f000 fdf0 	bl	be53c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd95c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd960:	2100      	movs	r1, #0
   bd962:	b280      	uxth	r0, r0
   bd964:	f004 fb6f 	bl	c2046 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd968:	9b06      	ldr	r3, [sp, #24]
   bd96a:	eb05 0803 	add.w	r8, r5, r3
   bd96e:	4545      	cmp	r5, r8
   bd970:	d108      	bne.n	bd984 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd972:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd974:	42b7      	cmp	r7, r6
   bd976:	d00b      	beq.n	bd990 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd978:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd97c:	4620      	mov	r0, r4
   bd97e:	f7ff ffd5 	bl	bd92c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd982:	e7f7      	b.n	bd974 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd984:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd988:	4620      	mov	r0, r4
   bd98a:	f7ff ffcf 	bl	bd92c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd98e:	e7ee      	b.n	bd96e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd990:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd994:	2101      	movs	r1, #1
   bd996:	b280      	uxth	r0, r0
   bd998:	f004 fb55 	bl	c2046 <digitalWrite>

  if (_spi) {
   bd99c:	6820      	ldr	r0, [r4, #0]
   bd99e:	b108      	cbz	r0, bd9a4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd9a0:	f000 fdb2 	bl	be508 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd9a4:	2001      	movs	r0, #1
   bd9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd9aa <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd9ae:	4604      	mov	r4, r0
  if (_spi) {
   bd9b0:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd9b2:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd9b6:	460e      	mov	r6, r1
   bd9b8:	4617      	mov	r7, r2
   bd9ba:	461d      	mov	r5, r3
  if (_spi) {
   bd9bc:	b110      	cbz	r0, bd9c4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd9be:	6861      	ldr	r1, [r4, #4]
   bd9c0:	f000 fdbc 	bl	be53c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd9c4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd9c8:	2100      	movs	r1, #0
   bd9ca:	b280      	uxth	r0, r0
   bd9cc:	f004 fb3b 	bl	c2046 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd9d0:	4437      	add	r7, r6
   bd9d2:	42be      	cmp	r6, r7
   bd9d4:	d10a      	bne.n	bd9ec <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd9d6:	9b06      	ldr	r3, [sp, #24]
   bd9d8:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd9da:	42ae      	cmp	r6, r5
   bd9dc:	d00c      	beq.n	bd9f8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd9de:	4641      	mov	r1, r8
   bd9e0:	4620      	mov	r0, r4
   bd9e2:	f7ff ffa3 	bl	bd92c <_ZN18Adafruit_SPIDevice8transferEh>
   bd9e6:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd9ea:	e7f6      	b.n	bd9da <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd9ec:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd9f0:	4620      	mov	r0, r4
   bd9f2:	f7ff ff9b 	bl	bd92c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd9f6:	e7ec      	b.n	bd9d2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd9f8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd9fc:	2101      	movs	r1, #1
   bd9fe:	b280      	uxth	r0, r0
   bda00:	f004 fb21 	bl	c2046 <digitalWrite>

  if (_spi) {
   bda04:	6820      	ldr	r0, [r4, #0]
   bda06:	b108      	cbz	r0, bda0c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bda08:	f000 fd7e 	bl	be508 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bda0c:	2001      	movs	r0, #1
   bda0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bda12 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bda12:	6042      	str	r2, [r0, #4]
  _begun = false;
   bda14:	2200      	movs	r2, #0
   bda16:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bda18:	2220      	movs	r2, #32
  _addr = addr;
   bda1a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bda1c:	60c2      	str	r2, [r0, #12]
#endif
}
   bda1e:	4770      	bx	lr

000bda20 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bda20:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bda22:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bda24:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bda26:	b153      	cbz	r3, bda3e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bda28:	7821      	ldrb	r1, [r4, #0]
   bda2a:	6860      	ldr	r0, [r4, #4]
   bda2c:	f004 f824 	bl	c1a78 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bda30:	6860      	ldr	r0, [r4, #4]
   bda32:	f004 f82c 	bl	c1a8e <_ZN7TwoWire15endTransmissionEv>
   bda36:	fab0 f080 	clz	r0, r0
   bda3a:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bda3c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bda3e:	2101      	movs	r1, #1
   bda40:	f000 f803 	bl	bda4a <_ZN18Adafruit_I2CDevice5beginEb>
   bda44:	2800      	cmp	r0, #0
   bda46:	d1ef      	bne.n	bda28 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bda48:	e7f8      	b.n	bda3c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bda4a <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bda4a:	b538      	push	{r3, r4, r5, lr}
   bda4c:	4604      	mov	r4, r0
  _wire->begin();
   bda4e:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bda50:	460d      	mov	r5, r1
  _wire->begin();
   bda52:	f003 ffdf 	bl	c1a14 <_ZN7TwoWire5beginEv>
  _begun = true;
   bda56:	2001      	movs	r0, #1
   bda58:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bda5a:	b125      	cbz	r5, bda66 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bda5c:	4620      	mov	r0, r4
}
   bda5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bda62:	f7ff bfdd 	b.w	bda20 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bda66:	bd38      	pop	{r3, r4, r5, pc}

000bda68 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bda68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bda6c:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bda70:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bda72:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bda74:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bda76:	4432      	add	r2, r6
   bda78:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bda7a:	4604      	mov	r4, r0
   bda7c:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bda7e:	d902      	bls.n	bda86 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bda80:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bda82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bda86:	7801      	ldrb	r1, [r0, #0]
   bda88:	6840      	ldr	r0, [r0, #4]
   bda8a:	f003 fff5 	bl	c1a78 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bda8e:	b97e      	cbnz	r6, bdab0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bda90:	6860      	ldr	r0, [r4, #4]
   bda92:	6803      	ldr	r3, [r0, #0]
   bda94:	462a      	mov	r2, r5
   bda96:	68db      	ldr	r3, [r3, #12]
   bda98:	4641      	mov	r1, r8
   bda9a:	4798      	blx	r3
   bda9c:	4285      	cmp	r5, r0
   bda9e:	d1ef      	bne.n	bda80 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bdaa0:	6860      	ldr	r0, [r4, #4]
   bdaa2:	4639      	mov	r1, r7
   bdaa4:	f003 ffef 	bl	c1a86 <_ZN7TwoWire15endTransmissionEh>
   bdaa8:	fab0 f080 	clz	r0, r0
   bdaac:	0940      	lsrs	r0, r0, #5
   bdaae:	e7e8      	b.n	bda82 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bdab0:	f1b9 0f00 	cmp.w	r9, #0
   bdab4:	d0ec      	beq.n	bda90 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bdab6:	6860      	ldr	r0, [r4, #4]
   bdab8:	6803      	ldr	r3, [r0, #0]
   bdaba:	4632      	mov	r2, r6
   bdabc:	68db      	ldr	r3, [r3, #12]
   bdabe:	4649      	mov	r1, r9
   bdac0:	4798      	blx	r3
   bdac2:	4286      	cmp	r6, r0
   bdac4:	d1dc      	bne.n	bda80 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bdac6:	e7e3      	b.n	bda90 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bdac8 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bdac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdacc:	4615      	mov	r5, r2
   bdace:	4604      	mov	r4, r0
   bdad0:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bdad2:	b2d2      	uxtb	r2, r2
   bdad4:	7801      	ldrb	r1, [r0, #0]
   bdad6:	6840      	ldr	r0, [r0, #4]
   bdad8:	f003 ffb9 	bl	c1a4e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bdadc:	4285      	cmp	r5, r0
   bdade:	d10d      	bne.n	bdafc <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bdae0:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bdae2:	fa1f f887 	uxth.w	r8, r7
   bdae6:	45a8      	cmp	r8, r5
   bdae8:	f107 0701 	add.w	r7, r7, #1
   bdaec:	d209      	bcs.n	bdb02 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bdaee:	6860      	ldr	r0, [r4, #4]
   bdaf0:	6803      	ldr	r3, [r0, #0]
   bdaf2:	695b      	ldr	r3, [r3, #20]
   bdaf4:	4798      	blx	r3
   bdaf6:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bdafa:	e7f2      	b.n	bdae2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bdafc:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bdafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdb02:	2001      	movs	r0, #1
   bdb04:	e7fb      	b.n	bdafe <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bdb06 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bdb06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdb0a:	4607      	mov	r7, r0
   bdb0c:	4688      	mov	r8, r1
   bdb0e:	4616      	mov	r6, r2
   bdb10:	4699      	mov	r9, r3
  size_t pos = 0;
   bdb12:	2500      	movs	r5, #0
  while (pos < len) {
   bdb14:	42b5      	cmp	r5, r6
   bdb16:	d212      	bcs.n	bdb3e <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bdb18:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bdb1a:	1b74      	subs	r4, r6, r5
   bdb1c:	4294      	cmp	r4, r2
   bdb1e:	bf28      	it	cs
   bdb20:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bdb22:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bdb24:	42ab      	cmp	r3, r5
   bdb26:	bf94      	ite	ls
   bdb28:	464b      	movls	r3, r9
   bdb2a:	2300      	movhi	r3, #0
   bdb2c:	4622      	mov	r2, r4
   bdb2e:	eb08 0105 	add.w	r1, r8, r5
   bdb32:	4638      	mov	r0, r7
   bdb34:	f7ff ffc8 	bl	bdac8 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bdb38:	b110      	cbz	r0, bdb40 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bdb3a:	4425      	add	r5, r4
  while (pos < len) {
   bdb3c:	e7ea      	b.n	bdb14 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bdb3e:	2001      	movs	r0, #1
}
   bdb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bdb44 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bdb44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bdb46:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bdb48:	2300      	movs	r3, #0
   bdb4a:	e9cd 3300 	strd	r3, r3, [sp]
   bdb4e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bdb52:	9e06      	ldr	r6, [sp, #24]
   bdb54:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bdb56:	f7ff ff87 	bl	bda68 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bdb5a:	b140      	cbz	r0, bdb6e <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bdb5c:	2301      	movs	r3, #1
   bdb5e:	4632      	mov	r2, r6
   bdb60:	4629      	mov	r1, r5
   bdb62:	4620      	mov	r0, r4
}
   bdb64:	b002      	add	sp, #8
   bdb66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bdb6a:	f7ff bfcc 	b.w	bdb06 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bdb6e:	b002      	add	sp, #8
   bdb70:	bd70      	pop	{r4, r5, r6, pc}
	...

000bdb74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bdb74:	b508      	push	{r3, lr}
   bdb76:	4b02      	ldr	r3, [pc, #8]	; (bdb80 <netdb_freeaddrinfo+0xc>)
   bdb78:	681b      	ldr	r3, [r3, #0]
   bdb7a:	689b      	ldr	r3, [r3, #8]
   bdb7c:	9301      	str	r3, [sp, #4]
   bdb7e:	bd08      	pop	{r3, pc}
   bdb80:	00030268 	.word	0x00030268

000bdb84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bdb84:	b508      	push	{r3, lr}
   bdb86:	4b02      	ldr	r3, [pc, #8]	; (bdb90 <netdb_getaddrinfo+0xc>)
   bdb88:	681b      	ldr	r3, [r3, #0]
   bdb8a:	68db      	ldr	r3, [r3, #12]
   bdb8c:	9301      	str	r3, [sp, #4]
   bdb8e:	bd08      	pop	{r3, pc}
   bdb90:	00030268 	.word	0x00030268

000bdb94 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bdb94:	b508      	push	{r3, lr}
   bdb96:	4b02      	ldr	r3, [pc, #8]	; (bdba0 <HAL_Validate_Pin_Function+0xc>)
   bdb98:	681b      	ldr	r3, [r3, #0]
   bdb9a:	685b      	ldr	r3, [r3, #4]
   bdb9c:	9301      	str	r3, [sp, #4]
   bdb9e:	bd08      	pop	{r3, pc}
   bdba0:	0003022c 	.word	0x0003022c

000bdba4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bdba4:	b508      	push	{r3, lr}
   bdba6:	4b02      	ldr	r3, [pc, #8]	; (bdbb0 <HAL_Pin_Mode+0xc>)
   bdba8:	681b      	ldr	r3, [r3, #0]
   bdbaa:	689b      	ldr	r3, [r3, #8]
   bdbac:	9301      	str	r3, [sp, #4]
   bdbae:	bd08      	pop	{r3, pc}
   bdbb0:	0003022c 	.word	0x0003022c

000bdbb4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bdbb4:	b508      	push	{r3, lr}
   bdbb6:	4b02      	ldr	r3, [pc, #8]	; (bdbc0 <HAL_Get_Pin_Mode+0xc>)
   bdbb8:	681b      	ldr	r3, [r3, #0]
   bdbba:	68db      	ldr	r3, [r3, #12]
   bdbbc:	9301      	str	r3, [sp, #4]
   bdbbe:	bd08      	pop	{r3, pc}
   bdbc0:	0003022c 	.word	0x0003022c

000bdbc4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bdbc4:	b508      	push	{r3, lr}
   bdbc6:	4b02      	ldr	r3, [pc, #8]	; (bdbd0 <HAL_GPIO_Write+0xc>)
   bdbc8:	681b      	ldr	r3, [r3, #0]
   bdbca:	691b      	ldr	r3, [r3, #16]
   bdbcc:	9301      	str	r3, [sp, #4]
   bdbce:	bd08      	pop	{r3, pc}
   bdbd0:	0003022c 	.word	0x0003022c

000bdbd4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bdbd4:	b508      	push	{r3, lr}
   bdbd6:	4b02      	ldr	r3, [pc, #8]	; (bdbe0 <HAL_GPIO_Read+0xc>)
   bdbd8:	681b      	ldr	r3, [r3, #0]
   bdbda:	695b      	ldr	r3, [r3, #20]
   bdbdc:	9301      	str	r3, [sp, #4]
   bdbde:	bd08      	pop	{r3, pc}
   bdbe0:	0003022c 	.word	0x0003022c

000bdbe4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bdbe4:	b508      	push	{r3, lr}
   bdbe6:	4b02      	ldr	r3, [pc, #8]	; (bdbf0 <HAL_Interrupts_Attach+0xc>)
   bdbe8:	681b      	ldr	r3, [r3, #0]
   bdbea:	699b      	ldr	r3, [r3, #24]
   bdbec:	9301      	str	r3, [sp, #4]
   bdbee:	bd08      	pop	{r3, pc}
   bdbf0:	0003022c 	.word	0x0003022c

000bdbf4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bdbf4:	b508      	push	{r3, lr}
   bdbf6:	4b02      	ldr	r3, [pc, #8]	; (bdc00 <HAL_Interrupts_Detach+0xc>)
   bdbf8:	681b      	ldr	r3, [r3, #0]
   bdbfa:	69db      	ldr	r3, [r3, #28]
   bdbfc:	9301      	str	r3, [sp, #4]
   bdbfe:	bd08      	pop	{r3, pc}
   bdc00:	0003022c 	.word	0x0003022c

000bdc04 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bdc04:	b508      	push	{r3, lr}
   bdc06:	4b02      	ldr	r3, [pc, #8]	; (bdc10 <HAL_Interrupts_Enable_All+0xc>)
   bdc08:	681b      	ldr	r3, [r3, #0]
   bdc0a:	6a1b      	ldr	r3, [r3, #32]
   bdc0c:	9301      	str	r3, [sp, #4]
   bdc0e:	bd08      	pop	{r3, pc}
   bdc10:	0003022c 	.word	0x0003022c

000bdc14 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bdc14:	b508      	push	{r3, lr}
   bdc16:	4b02      	ldr	r3, [pc, #8]	; (bdc20 <HAL_Interrupts_Disable_All+0xc>)
   bdc18:	681b      	ldr	r3, [r3, #0]
   bdc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdc1c:	9301      	str	r3, [sp, #4]
   bdc1e:	bd08      	pop	{r3, pc}
   bdc20:	0003022c 	.word	0x0003022c

000bdc24 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bdc24:	b508      	push	{r3, lr}
   bdc26:	4b02      	ldr	r3, [pc, #8]	; (bdc30 <hal_adc_read+0xc>)
   bdc28:	681b      	ldr	r3, [r3, #0]
   bdc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdc2c:	9301      	str	r3, [sp, #4]
   bdc2e:	bd08      	pop	{r3, pc}
   bdc30:	0003022c 	.word	0x0003022c

000bdc34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bdc34:	b508      	push	{r3, lr}
   bdc36:	4b02      	ldr	r3, [pc, #8]	; (bdc40 <HAL_RNG_GetRandomNumber+0xc>)
   bdc38:	681b      	ldr	r3, [r3, #0]
   bdc3a:	685b      	ldr	r3, [r3, #4]
   bdc3c:	9301      	str	r3, [sp, #4]
   bdc3e:	bd08      	pop	{r3, pc}
   bdc40:	00030218 	.word	0x00030218

000bdc44 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bdc44:	b508      	push	{r3, lr}
   bdc46:	4b02      	ldr	r3, [pc, #8]	; (bdc50 <HAL_Delay_Microseconds+0xc>)
   bdc48:	681b      	ldr	r3, [r3, #0]
   bdc4a:	68db      	ldr	r3, [r3, #12]
   bdc4c:	9301      	str	r3, [sp, #4]
   bdc4e:	bd08      	pop	{r3, pc}
   bdc50:	00030218 	.word	0x00030218

000bdc54 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bdc54:	b508      	push	{r3, lr}
   bdc56:	4b02      	ldr	r3, [pc, #8]	; (bdc60 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bdc58:	681b      	ldr	r3, [r3, #0]
   bdc5a:	691b      	ldr	r3, [r3, #16]
   bdc5c:	9301      	str	r3, [sp, #4]
   bdc5e:	bd08      	pop	{r3, pc}
   bdc60:	00030218 	.word	0x00030218

000bdc64 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bdc64:	b508      	push	{r3, lr}
   bdc66:	4b02      	ldr	r3, [pc, #8]	; (bdc70 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bdc68:	681b      	ldr	r3, [r3, #0]
   bdc6a:	695b      	ldr	r3, [r3, #20]
   bdc6c:	9301      	str	r3, [sp, #4]
   bdc6e:	bd08      	pop	{r3, pc}
   bdc70:	00030218 	.word	0x00030218

000bdc74 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bdc74:	b508      	push	{r3, lr}
   bdc76:	4b02      	ldr	r3, [pc, #8]	; (bdc80 <hal_rtc_time_is_valid+0xc>)
   bdc78:	681b      	ldr	r3, [r3, #0]
   bdc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdc7c:	9301      	str	r3, [sp, #4]
   bdc7e:	bd08      	pop	{r3, pc}
   bdc80:	00030218 	.word	0x00030218

000bdc84 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bdc84:	b508      	push	{r3, lr}
   bdc86:	4b02      	ldr	r3, [pc, #8]	; (bdc90 <hal_rtc_get_time+0xc>)
   bdc88:	681b      	ldr	r3, [r3, #0]
   bdc8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bdc8c:	9301      	str	r3, [sp, #4]
   bdc8e:	bd08      	pop	{r3, pc}
   bdc90:	00030218 	.word	0x00030218

000bdc94 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bdc94:	b508      	push	{r3, lr}
   bdc96:	4b02      	ldr	r3, [pc, #8]	; (bdca0 <hal_ble_stack_init+0xc>)
   bdc98:	681b      	ldr	r3, [r3, #0]
   bdc9a:	689b      	ldr	r3, [r3, #8]
   bdc9c:	9301      	str	r3, [sp, #4]
   bdc9e:	bd08      	pop	{r3, pc}
   bdca0:	00030278 	.word	0x00030278

000bdca4 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bdca4:	b508      	push	{r3, lr}
   bdca6:	4b02      	ldr	r3, [pc, #8]	; (bdcb0 <hal_ble_gap_set_tx_power+0xc>)
   bdca8:	681b      	ldr	r3, [r3, #0]
   bdcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdcac:	9301      	str	r3, [sp, #4]
   bdcae:	bd08      	pop	{r3, pc}
   bdcb0:	00030278 	.word	0x00030278

000bdcb4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bdcb4:	b508      	push	{r3, lr}
   bdcb6:	4b02      	ldr	r3, [pc, #8]	; (bdcc0 <hal_ble_gap_set_advertising_data+0xc>)
   bdcb8:	681b      	ldr	r3, [r3, #0]
   bdcba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdcbc:	9301      	str	r3, [sp, #4]
   bdcbe:	bd08      	pop	{r3, pc}
   bdcc0:	00030278 	.word	0x00030278

000bdcc4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bdcc4:	b508      	push	{r3, lr}
   bdcc6:	4b02      	ldr	r3, [pc, #8]	; (bdcd0 <hal_ble_gap_set_scan_response_data+0xc>)
   bdcc8:	681b      	ldr	r3, [r3, #0]
   bdcca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdccc:	9301      	str	r3, [sp, #4]
   bdcce:	bd08      	pop	{r3, pc}
   bdcd0:	00030278 	.word	0x00030278

000bdcd4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bdcd4:	b508      	push	{r3, lr}
   bdcd6:	4b02      	ldr	r3, [pc, #8]	; (bdce0 <hal_ble_gap_start_advertising+0xc>)
   bdcd8:	681b      	ldr	r3, [r3, #0]
   bdcda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bdcdc:	9301      	str	r3, [sp, #4]
   bdcde:	bd08      	pop	{r3, pc}
   bdce0:	00030278 	.word	0x00030278

000bdce4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bdce4:	b508      	push	{r3, lr}
   bdce6:	4b03      	ldr	r3, [pc, #12]	; (bdcf4 <hal_ble_gap_disconnect+0x10>)
   bdce8:	681b      	ldr	r3, [r3, #0]
   bdcea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bdcee:	9301      	str	r3, [sp, #4]
   bdcf0:	bd08      	pop	{r3, pc}
   bdcf2:	0000      	.short	0x0000
   bdcf4:	00030278 	.word	0x00030278

000bdcf8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bdcf8:	b508      	push	{r3, lr}
   bdcfa:	4b03      	ldr	r3, [pc, #12]	; (bdd08 <hal_ble_gatt_server_add_service+0x10>)
   bdcfc:	681b      	ldr	r3, [r3, #0]
   bdcfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bdd02:	9301      	str	r3, [sp, #4]
   bdd04:	bd08      	pop	{r3, pc}
   bdd06:	0000      	.short	0x0000
   bdd08:	00030278 	.word	0x00030278

000bdd0c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdd0c:	b508      	push	{r3, lr}
   bdd0e:	4b03      	ldr	r3, [pc, #12]	; (bdd1c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bdd10:	681b      	ldr	r3, [r3, #0]
   bdd12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bdd16:	9301      	str	r3, [sp, #4]
   bdd18:	bd08      	pop	{r3, pc}
   bdd1a:	0000      	.short	0x0000
   bdd1c:	00030278 	.word	0x00030278

000bdd20 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdd20:	b508      	push	{r3, lr}
   bdd22:	4b03      	ldr	r3, [pc, #12]	; (bdd30 <hal_ble_gatt_client_write_with_response+0x10>)
   bdd24:	681b      	ldr	r3, [r3, #0]
   bdd26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bdd2a:	9301      	str	r3, [sp, #4]
   bdd2c:	bd08      	pop	{r3, pc}
   bdd2e:	0000      	.short	0x0000
   bdd30:	00030278 	.word	0x00030278

000bdd34 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdd34:	b508      	push	{r3, lr}
   bdd36:	4b03      	ldr	r3, [pc, #12]	; (bdd44 <hal_ble_gatt_client_write_without_response+0x10>)
   bdd38:	681b      	ldr	r3, [r3, #0]
   bdd3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bdd3e:	9301      	str	r3, [sp, #4]
   bdd40:	bd08      	pop	{r3, pc}
   bdd42:	0000      	.short	0x0000
   bdd44:	00030278 	.word	0x00030278

000bdd48 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bdd48:	b508      	push	{r3, lr}
   bdd4a:	4b03      	ldr	r3, [pc, #12]	; (bdd58 <hal_ble_gatt_server_add_characteristic+0x10>)
   bdd4c:	681b      	ldr	r3, [r3, #0]
   bdd4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bdd52:	9301      	str	r3, [sp, #4]
   bdd54:	bd08      	pop	{r3, pc}
   bdd56:	0000      	.short	0x0000
   bdd58:	00030278 	.word	0x00030278

000bdd5c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bdd5c:	b508      	push	{r3, lr}
   bdd5e:	4b03      	ldr	r3, [pc, #12]	; (bdd6c <hal_ble_set_callback_on_periph_link_events+0x10>)
   bdd60:	681b      	ldr	r3, [r3, #0]
   bdd62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bdd66:	9301      	str	r3, [sp, #4]
   bdd68:	bd08      	pop	{r3, pc}
   bdd6a:	0000      	.short	0x0000
   bdd6c:	00030278 	.word	0x00030278

000bdd70 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdd70:	b508      	push	{r3, lr}
   bdd72:	4b03      	ldr	r3, [pc, #12]	; (bdd80 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bdd74:	681b      	ldr	r3, [r3, #0]
   bdd76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bdd7a:	9301      	str	r3, [sp, #4]
   bdd7c:	bd08      	pop	{r3, pc}
   bdd7e:	0000      	.short	0x0000
   bdd80:	00030278 	.word	0x00030278

000bdd84 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdd84:	b508      	push	{r3, lr}
   bdd86:	4b03      	ldr	r3, [pc, #12]	; (bdd94 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bdd88:	681b      	ldr	r3, [r3, #0]
   bdd8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bdd8e:	9301      	str	r3, [sp, #4]
   bdd90:	bd08      	pop	{r3, pc}
   bdd92:	0000      	.short	0x0000
   bdd94:	00030278 	.word	0x00030278

000bdd98 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bdd98:	b508      	push	{r3, lr}
   bdd9a:	4b02      	ldr	r3, [pc, #8]	; (bdda4 <os_thread_yield+0xc>)
   bdd9c:	681b      	ldr	r3, [r3, #0]
   bdd9e:	68db      	ldr	r3, [r3, #12]
   bdda0:	9301      	str	r3, [sp, #4]
   bdda2:	bd08      	pop	{r3, pc}
   bdda4:	00030248 	.word	0x00030248

000bdda8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bdda8:	b508      	push	{r3, lr}
   bddaa:	4b02      	ldr	r3, [pc, #8]	; (bddb4 <os_thread_scheduling+0xc>)
   bddac:	681b      	ldr	r3, [r3, #0]
   bddae:	69db      	ldr	r3, [r3, #28]
   bddb0:	9301      	str	r3, [sp, #4]
   bddb2:	bd08      	pop	{r3, pc}
   bddb4:	00030248 	.word	0x00030248

000bddb8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bddb8:	b508      	push	{r3, lr}
   bddba:	4b02      	ldr	r3, [pc, #8]	; (bddc4 <os_timer_create+0xc>)
   bddbc:	681b      	ldr	r3, [r3, #0]
   bddbe:	6a1b      	ldr	r3, [r3, #32]
   bddc0:	9301      	str	r3, [sp, #4]
   bddc2:	bd08      	pop	{r3, pc}
   bddc4:	00030248 	.word	0x00030248

000bddc8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bddc8:	b508      	push	{r3, lr}
   bddca:	4b02      	ldr	r3, [pc, #8]	; (bddd4 <os_timer_destroy+0xc>)
   bddcc:	681b      	ldr	r3, [r3, #0]
   bddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bddd0:	9301      	str	r3, [sp, #4]
   bddd2:	bd08      	pop	{r3, pc}
   bddd4:	00030248 	.word	0x00030248

000bddd8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bddd8:	b508      	push	{r3, lr}
   bddda:	4b02      	ldr	r3, [pc, #8]	; (bdde4 <os_timer_get_id+0xc>)
   bdddc:	681b      	ldr	r3, [r3, #0]
   bddde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdde0:	9301      	str	r3, [sp, #4]
   bdde2:	bd08      	pop	{r3, pc}
   bdde4:	00030248 	.word	0x00030248

000bdde8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bdde8:	b508      	push	{r3, lr}
   bddea:	4b02      	ldr	r3, [pc, #8]	; (bddf4 <os_timer_change+0xc>)
   bddec:	681b      	ldr	r3, [r3, #0]
   bddee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bddf0:	9301      	str	r3, [sp, #4]
   bddf2:	bd08      	pop	{r3, pc}
   bddf4:	00030248 	.word	0x00030248

000bddf8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bddf8:	b508      	push	{r3, lr}
   bddfa:	4b02      	ldr	r3, [pc, #8]	; (bde04 <os_mutex_recursive_create+0xc>)
   bddfc:	681b      	ldr	r3, [r3, #0]
   bddfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bde00:	9301      	str	r3, [sp, #4]
   bde02:	bd08      	pop	{r3, pc}
   bde04:	00030248 	.word	0x00030248

000bde08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bde08:	b508      	push	{r3, lr}
   bde0a:	4b02      	ldr	r3, [pc, #8]	; (bde14 <os_mutex_recursive_destroy+0xc>)
   bde0c:	681b      	ldr	r3, [r3, #0]
   bde0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bde10:	9301      	str	r3, [sp, #4]
   bde12:	bd08      	pop	{r3, pc}
   bde14:	00030248 	.word	0x00030248

000bde18 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bde18:	b508      	push	{r3, lr}
   bde1a:	4b02      	ldr	r3, [pc, #8]	; (bde24 <os_mutex_recursive_lock+0xc>)
   bde1c:	681b      	ldr	r3, [r3, #0]
   bde1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bde20:	9301      	str	r3, [sp, #4]
   bde22:	bd08      	pop	{r3, pc}
   bde24:	00030248 	.word	0x00030248

000bde28 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bde28:	b508      	push	{r3, lr}
   bde2a:	4b02      	ldr	r3, [pc, #8]	; (bde34 <os_mutex_recursive_unlock+0xc>)
   bde2c:	681b      	ldr	r3, [r3, #0]
   bde2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bde30:	9301      	str	r3, [sp, #4]
   bde32:	bd08      	pop	{r3, pc}
   bde34:	00030248 	.word	0x00030248

000bde38 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bde38:	b508      	push	{r3, lr}
   bde3a:	4b02      	ldr	r3, [pc, #8]	; (bde44 <os_timer_set_id+0xc>)
   bde3c:	681b      	ldr	r3, [r3, #0]
   bde3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bde40:	9301      	str	r3, [sp, #4]
   bde42:	bd08      	pop	{r3, pc}
   bde44:	00030248 	.word	0x00030248

000bde48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bde48:	b508      	push	{r3, lr}
   bde4a:	4b02      	ldr	r3, [pc, #8]	; (bde54 <inet_inet_ntop+0xc>)
   bde4c:	681b      	ldr	r3, [r3, #0]
   bde4e:	695b      	ldr	r3, [r3, #20]
   bde50:	9301      	str	r3, [sp, #4]
   bde52:	bd08      	pop	{r3, pc}
   bde54:	00030264 	.word	0x00030264

000bde58 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bde58:	b508      	push	{r3, lr}
   bde5a:	4b02      	ldr	r3, [pc, #8]	; (bde64 <hal_usart_end+0xc>)
   bde5c:	681b      	ldr	r3, [r3, #0]
   bde5e:	689b      	ldr	r3, [r3, #8]
   bde60:	9301      	str	r3, [sp, #4]
   bde62:	bd08      	pop	{r3, pc}
   bde64:	0003023c 	.word	0x0003023c

000bde68 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bde68:	b508      	push	{r3, lr}
   bde6a:	4b02      	ldr	r3, [pc, #8]	; (bde74 <hal_usart_write+0xc>)
   bde6c:	681b      	ldr	r3, [r3, #0]
   bde6e:	68db      	ldr	r3, [r3, #12]
   bde70:	9301      	str	r3, [sp, #4]
   bde72:	bd08      	pop	{r3, pc}
   bde74:	0003023c 	.word	0x0003023c

000bde78 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bde78:	b508      	push	{r3, lr}
   bde7a:	4b02      	ldr	r3, [pc, #8]	; (bde84 <hal_usart_available+0xc>)
   bde7c:	681b      	ldr	r3, [r3, #0]
   bde7e:	691b      	ldr	r3, [r3, #16]
   bde80:	9301      	str	r3, [sp, #4]
   bde82:	bd08      	pop	{r3, pc}
   bde84:	0003023c 	.word	0x0003023c

000bde88 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bde88:	b508      	push	{r3, lr}
   bde8a:	4b02      	ldr	r3, [pc, #8]	; (bde94 <hal_usart_read+0xc>)
   bde8c:	681b      	ldr	r3, [r3, #0]
   bde8e:	695b      	ldr	r3, [r3, #20]
   bde90:	9301      	str	r3, [sp, #4]
   bde92:	bd08      	pop	{r3, pc}
   bde94:	0003023c 	.word	0x0003023c

000bde98 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bde98:	b508      	push	{r3, lr}
   bde9a:	4b02      	ldr	r3, [pc, #8]	; (bdea4 <hal_usart_peek+0xc>)
   bde9c:	681b      	ldr	r3, [r3, #0]
   bde9e:	699b      	ldr	r3, [r3, #24]
   bdea0:	9301      	str	r3, [sp, #4]
   bdea2:	bd08      	pop	{r3, pc}
   bdea4:	0003023c 	.word	0x0003023c

000bdea8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bdea8:	b508      	push	{r3, lr}
   bdeaa:	4b02      	ldr	r3, [pc, #8]	; (bdeb4 <hal_usart_flush+0xc>)
   bdeac:	681b      	ldr	r3, [r3, #0]
   bdeae:	69db      	ldr	r3, [r3, #28]
   bdeb0:	9301      	str	r3, [sp, #4]
   bdeb2:	bd08      	pop	{r3, pc}
   bdeb4:	0003023c 	.word	0x0003023c

000bdeb8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bdeb8:	b508      	push	{r3, lr}
   bdeba:	4b02      	ldr	r3, [pc, #8]	; (bdec4 <hal_usart_is_enabled+0xc>)
   bdebc:	681b      	ldr	r3, [r3, #0]
   bdebe:	6a1b      	ldr	r3, [r3, #32]
   bdec0:	9301      	str	r3, [sp, #4]
   bdec2:	bd08      	pop	{r3, pc}
   bdec4:	0003023c 	.word	0x0003023c

000bdec8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bdec8:	b508      	push	{r3, lr}
   bdeca:	4b02      	ldr	r3, [pc, #8]	; (bded4 <hal_usart_available_data_for_write+0xc>)
   bdecc:	681b      	ldr	r3, [r3, #0]
   bdece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bded0:	9301      	str	r3, [sp, #4]
   bded2:	bd08      	pop	{r3, pc}
   bded4:	0003023c 	.word	0x0003023c

000bded8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bded8:	b508      	push	{r3, lr}
   bdeda:	4b02      	ldr	r3, [pc, #8]	; (bdee4 <hal_usart_begin_config+0xc>)
   bdedc:	681b      	ldr	r3, [r3, #0]
   bdede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdee0:	9301      	str	r3, [sp, #4]
   bdee2:	bd08      	pop	{r3, pc}
   bdee4:	0003023c 	.word	0x0003023c

000bdee8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bdee8:	b508      	push	{r3, lr}
   bdeea:	4b02      	ldr	r3, [pc, #8]	; (bdef4 <hal_usart_init_ex+0xc>)
   bdeec:	681b      	ldr	r3, [r3, #0]
   bdeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdef0:	9301      	str	r3, [sp, #4]
   bdef2:	bd08      	pop	{r3, pc}
   bdef4:	0003023c 	.word	0x0003023c

000bdef8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bdef8:	b508      	push	{r3, lr}
   bdefa:	4b02      	ldr	r3, [pc, #8]	; (bdf04 <hal_i2c_set_speed+0xc>)
   bdefc:	681b      	ldr	r3, [r3, #0]
   bdefe:	681b      	ldr	r3, [r3, #0]
   bdf00:	9301      	str	r3, [sp, #4]
   bdf02:	bd08      	pop	{r3, pc}
   bdf04:	00030228 	.word	0x00030228

000bdf08 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bdf08:	b508      	push	{r3, lr}
   bdf0a:	4b02      	ldr	r3, [pc, #8]	; (bdf14 <hal_i2c_begin+0xc>)
   bdf0c:	681b      	ldr	r3, [r3, #0]
   bdf0e:	68db      	ldr	r3, [r3, #12]
   bdf10:	9301      	str	r3, [sp, #4]
   bdf12:	bd08      	pop	{r3, pc}
   bdf14:	00030228 	.word	0x00030228

000bdf18 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bdf18:	b508      	push	{r3, lr}
   bdf1a:	4b02      	ldr	r3, [pc, #8]	; (bdf24 <hal_i2c_begin_transmission+0xc>)
   bdf1c:	681b      	ldr	r3, [r3, #0]
   bdf1e:	699b      	ldr	r3, [r3, #24]
   bdf20:	9301      	str	r3, [sp, #4]
   bdf22:	bd08      	pop	{r3, pc}
   bdf24:	00030228 	.word	0x00030228

000bdf28 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bdf28:	b508      	push	{r3, lr}
   bdf2a:	4b02      	ldr	r3, [pc, #8]	; (bdf34 <hal_i2c_end_transmission+0xc>)
   bdf2c:	681b      	ldr	r3, [r3, #0]
   bdf2e:	69db      	ldr	r3, [r3, #28]
   bdf30:	9301      	str	r3, [sp, #4]
   bdf32:	bd08      	pop	{r3, pc}
   bdf34:	00030228 	.word	0x00030228

000bdf38 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bdf38:	b508      	push	{r3, lr}
   bdf3a:	4b02      	ldr	r3, [pc, #8]	; (bdf44 <hal_i2c_write+0xc>)
   bdf3c:	681b      	ldr	r3, [r3, #0]
   bdf3e:	6a1b      	ldr	r3, [r3, #32]
   bdf40:	9301      	str	r3, [sp, #4]
   bdf42:	bd08      	pop	{r3, pc}
   bdf44:	00030228 	.word	0x00030228

000bdf48 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bdf48:	b508      	push	{r3, lr}
   bdf4a:	4b02      	ldr	r3, [pc, #8]	; (bdf54 <hal_i2c_available+0xc>)
   bdf4c:	681b      	ldr	r3, [r3, #0]
   bdf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdf50:	9301      	str	r3, [sp, #4]
   bdf52:	bd08      	pop	{r3, pc}
   bdf54:	00030228 	.word	0x00030228

000bdf58 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bdf58:	b508      	push	{r3, lr}
   bdf5a:	4b02      	ldr	r3, [pc, #8]	; (bdf64 <hal_i2c_read+0xc>)
   bdf5c:	681b      	ldr	r3, [r3, #0]
   bdf5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdf60:	9301      	str	r3, [sp, #4]
   bdf62:	bd08      	pop	{r3, pc}
   bdf64:	00030228 	.word	0x00030228

000bdf68 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bdf68:	b508      	push	{r3, lr}
   bdf6a:	4b02      	ldr	r3, [pc, #8]	; (bdf74 <hal_i2c_peek+0xc>)
   bdf6c:	681b      	ldr	r3, [r3, #0]
   bdf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdf70:	9301      	str	r3, [sp, #4]
   bdf72:	bd08      	pop	{r3, pc}
   bdf74:	00030228 	.word	0x00030228

000bdf78 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bdf78:	b508      	push	{r3, lr}
   bdf7a:	4b02      	ldr	r3, [pc, #8]	; (bdf84 <hal_i2c_flush+0xc>)
   bdf7c:	681b      	ldr	r3, [r3, #0]
   bdf7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdf80:	9301      	str	r3, [sp, #4]
   bdf82:	bd08      	pop	{r3, pc}
   bdf84:	00030228 	.word	0x00030228

000bdf88 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bdf88:	b508      	push	{r3, lr}
   bdf8a:	4b02      	ldr	r3, [pc, #8]	; (bdf94 <hal_i2c_is_enabled+0xc>)
   bdf8c:	681b      	ldr	r3, [r3, #0]
   bdf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdf90:	9301      	str	r3, [sp, #4]
   bdf92:	bd08      	pop	{r3, pc}
   bdf94:	00030228 	.word	0x00030228

000bdf98 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bdf98:	b508      	push	{r3, lr}
   bdf9a:	4b02      	ldr	r3, [pc, #8]	; (bdfa4 <hal_i2c_init+0xc>)
   bdf9c:	681b      	ldr	r3, [r3, #0]
   bdf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdfa0:	9301      	str	r3, [sp, #4]
   bdfa2:	bd08      	pop	{r3, pc}
   bdfa4:	00030228 	.word	0x00030228

000bdfa8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bdfa8:	b508      	push	{r3, lr}
   bdfaa:	4b02      	ldr	r3, [pc, #8]	; (bdfb4 <hal_i2c_request_ex+0xc>)
   bdfac:	681b      	ldr	r3, [r3, #0]
   bdfae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdfb0:	9301      	str	r3, [sp, #4]
   bdfb2:	bd08      	pop	{r3, pc}
   bdfb4:	00030228 	.word	0x00030228

000bdfb8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bdfb8:	b508      	push	{r3, lr}
   bdfba:	4b02      	ldr	r3, [pc, #8]	; (bdfc4 <hal_spi_begin+0xc>)
   bdfbc:	681b      	ldr	r3, [r3, #0]
   bdfbe:	681b      	ldr	r3, [r3, #0]
   bdfc0:	9301      	str	r3, [sp, #4]
   bdfc2:	bd08      	pop	{r3, pc}
   bdfc4:	00030230 	.word	0x00030230

000bdfc8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bdfc8:	b508      	push	{r3, lr}
   bdfca:	4b02      	ldr	r3, [pc, #8]	; (bdfd4 <hal_spi_transfer+0xc>)
   bdfcc:	681b      	ldr	r3, [r3, #0]
   bdfce:	695b      	ldr	r3, [r3, #20]
   bdfd0:	9301      	str	r3, [sp, #4]
   bdfd2:	bd08      	pop	{r3, pc}
   bdfd4:	00030230 	.word	0x00030230

000bdfd8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bdfd8:	b508      	push	{r3, lr}
   bdfda:	4b02      	ldr	r3, [pc, #8]	; (bdfe4 <hal_spi_init+0xc>)
   bdfdc:	681b      	ldr	r3, [r3, #0]
   bdfde:	69db      	ldr	r3, [r3, #28]
   bdfe0:	9301      	str	r3, [sp, #4]
   bdfe2:	bd08      	pop	{r3, pc}
   bdfe4:	00030230 	.word	0x00030230

000bdfe8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bdfe8:	b508      	push	{r3, lr}
   bdfea:	4b02      	ldr	r3, [pc, #8]	; (bdff4 <hal_spi_is_enabled+0xc>)
   bdfec:	681b      	ldr	r3, [r3, #0]
   bdfee:	6a1b      	ldr	r3, [r3, #32]
   bdff0:	9301      	str	r3, [sp, #4]
   bdff2:	bd08      	pop	{r3, pc}
   bdff4:	00030230 	.word	0x00030230

000bdff8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bdff8:	b508      	push	{r3, lr}
   bdffa:	4b02      	ldr	r3, [pc, #8]	; (be004 <hal_spi_info+0xc>)
   bdffc:	681b      	ldr	r3, [r3, #0]
   bdffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be000:	9301      	str	r3, [sp, #4]
   be002:	bd08      	pop	{r3, pc}
   be004:	00030230 	.word	0x00030230

000be008 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   be008:	b508      	push	{r3, lr}
   be00a:	4b02      	ldr	r3, [pc, #8]	; (be014 <hal_spi_transfer_dma+0xc>)
   be00c:	681b      	ldr	r3, [r3, #0]
   be00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   be010:	9301      	str	r3, [sp, #4]
   be012:	bd08      	pop	{r3, pc}
   be014:	00030230 	.word	0x00030230

000be018 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   be018:	b508      	push	{r3, lr}
   be01a:	4b02      	ldr	r3, [pc, #8]	; (be024 <hal_spi_transfer_dma_status+0xc>)
   be01c:	681b      	ldr	r3, [r3, #0]
   be01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   be020:	9301      	str	r3, [sp, #4]
   be022:	bd08      	pop	{r3, pc}
   be024:	00030230 	.word	0x00030230

000be028 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   be028:	b508      	push	{r3, lr}
   be02a:	4b02      	ldr	r3, [pc, #8]	; (be034 <hal_spi_set_settings+0xc>)
   be02c:	681b      	ldr	r3, [r3, #0]
   be02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be030:	9301      	str	r3, [sp, #4]
   be032:	bd08      	pop	{r3, pc}
   be034:	00030230 	.word	0x00030230

000be038 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   be038:	b508      	push	{r3, lr}
   be03a:	4b02      	ldr	r3, [pc, #8]	; (be044 <hal_spi_acquire+0xc>)
   be03c:	681b      	ldr	r3, [r3, #0]
   be03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be040:	9301      	str	r3, [sp, #4]
   be042:	bd08      	pop	{r3, pc}
   be044:	00030230 	.word	0x00030230

000be048 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   be048:	b508      	push	{r3, lr}
   be04a:	4b02      	ldr	r3, [pc, #8]	; (be054 <hal_spi_release+0xc>)
   be04c:	681b      	ldr	r3, [r3, #0]
   be04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be050:	9301      	str	r3, [sp, #4]
   be052:	bd08      	pop	{r3, pc}
   be054:	00030230 	.word	0x00030230

000be058 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   be058:	b508      	push	{r3, lr}
   be05a:	4b02      	ldr	r3, [pc, #8]	; (be064 <HAL_Servo_Attach+0xc>)
   be05c:	681b      	ldr	r3, [r3, #0]
   be05e:	691b      	ldr	r3, [r3, #16]
   be060:	9301      	str	r3, [sp, #4]
   be062:	bd08      	pop	{r3, pc}
   be064:	00030224 	.word	0x00030224

000be068 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   be068:	b508      	push	{r3, lr}
   be06a:	4b02      	ldr	r3, [pc, #8]	; (be074 <HAL_Servo_Detach+0xc>)
   be06c:	681b      	ldr	r3, [r3, #0]
   be06e:	695b      	ldr	r3, [r3, #20]
   be070:	9301      	str	r3, [sp, #4]
   be072:	bd08      	pop	{r3, pc}
   be074:	00030224 	.word	0x00030224

000be078 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   be078:	b508      	push	{r3, lr}
   be07a:	4b02      	ldr	r3, [pc, #8]	; (be084 <HAL_Servo_Write_Pulse_Width+0xc>)
   be07c:	681b      	ldr	r3, [r3, #0]
   be07e:	699b      	ldr	r3, [r3, #24]
   be080:	9301      	str	r3, [sp, #4]
   be082:	bd08      	pop	{r3, pc}
   be084:	00030224 	.word	0x00030224

000be088 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   be088:	b508      	push	{r3, lr}
   be08a:	4b02      	ldr	r3, [pc, #8]	; (be094 <HAL_USB_USART_Init+0xc>)
   be08c:	681b      	ldr	r3, [r3, #0]
   be08e:	681b      	ldr	r3, [r3, #0]
   be090:	9301      	str	r3, [sp, #4]
   be092:	bd08      	pop	{r3, pc}
   be094:	0003024c 	.word	0x0003024c

000be098 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   be098:	b508      	push	{r3, lr}
   be09a:	4b02      	ldr	r3, [pc, #8]	; (be0a4 <HAL_USB_USART_Begin+0xc>)
   be09c:	681b      	ldr	r3, [r3, #0]
   be09e:	685b      	ldr	r3, [r3, #4]
   be0a0:	9301      	str	r3, [sp, #4]
   be0a2:	bd08      	pop	{r3, pc}
   be0a4:	0003024c 	.word	0x0003024c

000be0a8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   be0a8:	b508      	push	{r3, lr}
   be0aa:	4b02      	ldr	r3, [pc, #8]	; (be0b4 <HAL_USB_USART_End+0xc>)
   be0ac:	681b      	ldr	r3, [r3, #0]
   be0ae:	689b      	ldr	r3, [r3, #8]
   be0b0:	9301      	str	r3, [sp, #4]
   be0b2:	bd08      	pop	{r3, pc}
   be0b4:	0003024c 	.word	0x0003024c

000be0b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   be0b8:	b508      	push	{r3, lr}
   be0ba:	4b02      	ldr	r3, [pc, #8]	; (be0c4 <HAL_USB_USART_Available_Data+0xc>)
   be0bc:	681b      	ldr	r3, [r3, #0]
   be0be:	691b      	ldr	r3, [r3, #16]
   be0c0:	9301      	str	r3, [sp, #4]
   be0c2:	bd08      	pop	{r3, pc}
   be0c4:	0003024c 	.word	0x0003024c

000be0c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   be0c8:	b508      	push	{r3, lr}
   be0ca:	4b02      	ldr	r3, [pc, #8]	; (be0d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   be0cc:	681b      	ldr	r3, [r3, #0]
   be0ce:	695b      	ldr	r3, [r3, #20]
   be0d0:	9301      	str	r3, [sp, #4]
   be0d2:	bd08      	pop	{r3, pc}
   be0d4:	0003024c 	.word	0x0003024c

000be0d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be0d8:	b508      	push	{r3, lr}
   be0da:	4b02      	ldr	r3, [pc, #8]	; (be0e4 <HAL_USB_USART_Receive_Data+0xc>)
   be0dc:	681b      	ldr	r3, [r3, #0]
   be0de:	699b      	ldr	r3, [r3, #24]
   be0e0:	9301      	str	r3, [sp, #4]
   be0e2:	bd08      	pop	{r3, pc}
   be0e4:	0003024c 	.word	0x0003024c

000be0e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be0e8:	b508      	push	{r3, lr}
   be0ea:	4b02      	ldr	r3, [pc, #8]	; (be0f4 <HAL_USB_USART_Send_Data+0xc>)
   be0ec:	681b      	ldr	r3, [r3, #0]
   be0ee:	69db      	ldr	r3, [r3, #28]
   be0f0:	9301      	str	r3, [sp, #4]
   be0f2:	bd08      	pop	{r3, pc}
   be0f4:	0003024c 	.word	0x0003024c

000be0f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   be0f8:	b508      	push	{r3, lr}
   be0fa:	4b02      	ldr	r3, [pc, #8]	; (be104 <HAL_USB_USART_Flush_Data+0xc>)
   be0fc:	681b      	ldr	r3, [r3, #0]
   be0fe:	6a1b      	ldr	r3, [r3, #32]
   be100:	9301      	str	r3, [sp, #4]
   be102:	bd08      	pop	{r3, pc}
   be104:	0003024c 	.word	0x0003024c

000be108 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   be108:	b508      	push	{r3, lr}
   be10a:	4b02      	ldr	r3, [pc, #8]	; (be114 <panic_+0xc>)
   be10c:	681b      	ldr	r3, [r3, #0]
   be10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be110:	9301      	str	r3, [sp, #4]
   be112:	bd08      	pop	{r3, pc}
   be114:	00030260 	.word	0x00030260

000be118 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   be118:	b508      	push	{r3, lr}
   be11a:	4b02      	ldr	r3, [pc, #8]	; (be124 <log_message+0xc>)
   be11c:	681b      	ldr	r3, [r3, #0]
   be11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   be120:	9301      	str	r3, [sp, #4]
   be122:	bd08      	pop	{r3, pc}
   be124:	00030260 	.word	0x00030260

000be128 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   be128:	b508      	push	{r3, lr}
   be12a:	4b02      	ldr	r3, [pc, #8]	; (be134 <log_level_name+0xc>)
   be12c:	681b      	ldr	r3, [r3, #0]
   be12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   be130:	9301      	str	r3, [sp, #4]
   be132:	bd08      	pop	{r3, pc}
   be134:	00030260 	.word	0x00030260

000be138 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   be138:	b508      	push	{r3, lr}
   be13a:	4b02      	ldr	r3, [pc, #8]	; (be144 <log_set_callbacks+0xc>)
   be13c:	681b      	ldr	r3, [r3, #0]
   be13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   be140:	9301      	str	r3, [sp, #4]
   be142:	bd08      	pop	{r3, pc}
   be144:	00030260 	.word	0x00030260

000be148 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   be148:	b508      	push	{r3, lr}
   be14a:	4b03      	ldr	r3, [pc, #12]	; (be158 <led_set_status_active+0x10>)
   be14c:	681b      	ldr	r3, [r3, #0]
   be14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   be152:	9301      	str	r3, [sp, #4]
   be154:	bd08      	pop	{r3, pc}
   be156:	0000      	.short	0x0000
   be158:	00030260 	.word	0x00030260

000be15c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   be15c:	b508      	push	{r3, lr}
   be15e:	4b02      	ldr	r3, [pc, #8]	; (be168 <system_mode+0xc>)
   be160:	681b      	ldr	r3, [r3, #0]
   be162:	681b      	ldr	r3, [r3, #0]
   be164:	9301      	str	r3, [sp, #4]
   be166:	bd08      	pop	{r3, pc}
   be168:	00030220 	.word	0x00030220

000be16c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   be16c:	b508      	push	{r3, lr}
   be16e:	4b02      	ldr	r3, [pc, #8]	; (be178 <set_system_mode+0xc>)
   be170:	681b      	ldr	r3, [r3, #0]
   be172:	685b      	ldr	r3, [r3, #4]
   be174:	9301      	str	r3, [sp, #4]
   be176:	bd08      	pop	{r3, pc}
   be178:	00030220 	.word	0x00030220

000be17c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   be17c:	b508      	push	{r3, lr}
   be17e:	4b02      	ldr	r3, [pc, #8]	; (be188 <system_delay_ms+0xc>)
   be180:	681b      	ldr	r3, [r3, #0]
   be182:	695b      	ldr	r3, [r3, #20]
   be184:	9301      	str	r3, [sp, #4]
   be186:	bd08      	pop	{r3, pc}
   be188:	00030220 	.word	0x00030220

000be18c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   be18c:	b508      	push	{r3, lr}
   be18e:	4b02      	ldr	r3, [pc, #8]	; (be198 <application_thread_current+0xc>)
   be190:	681b      	ldr	r3, [r3, #0]
   be192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be194:	9301      	str	r3, [sp, #4]
   be196:	bd08      	pop	{r3, pc}
   be198:	00030220 	.word	0x00030220

000be19c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   be19c:	b508      	push	{r3, lr}
   be19e:	4b02      	ldr	r3, [pc, #8]	; (be1a8 <application_thread_invoke+0xc>)
   be1a0:	681b      	ldr	r3, [r3, #0]
   be1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   be1a4:	9301      	str	r3, [sp, #4]
   be1a6:	bd08      	pop	{r3, pc}
   be1a8:	00030220 	.word	0x00030220

000be1ac <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   be1ac:	b508      	push	{r3, lr}
   be1ae:	4b02      	ldr	r3, [pc, #8]	; (be1b8 <system_thread_get_state+0xc>)
   be1b0:	681b      	ldr	r3, [r3, #0]
   be1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   be1b4:	9301      	str	r3, [sp, #4]
   be1b6:	bd08      	pop	{r3, pc}
   be1b8:	00030220 	.word	0x00030220

000be1bc <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   be1bc:	b508      	push	{r3, lr}
   be1be:	4b02      	ldr	r3, [pc, #8]	; (be1c8 <led_pattern_period+0xc>)
   be1c0:	681b      	ldr	r3, [r3, #0]
   be1c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   be1c4:	9301      	str	r3, [sp, #4]
   be1c6:	bd08      	pop	{r3, pc}
   be1c8:	00030220 	.word	0x00030220

000be1cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   be1cc:	b508      	push	{r3, lr}
   be1ce:	4b03      	ldr	r3, [pc, #12]	; (be1dc <system_ctrl_set_app_request_handler+0x10>)
   be1d0:	681b      	ldr	r3, [r3, #0]
   be1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   be1d6:	9301      	str	r3, [sp, #4]
   be1d8:	bd08      	pop	{r3, pc}
   be1da:	0000      	.short	0x0000
   be1dc:	00030220 	.word	0x00030220

000be1e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   be1e0:	b508      	push	{r3, lr}
   be1e2:	4b03      	ldr	r3, [pc, #12]	; (be1f0 <system_ctrl_set_result+0x10>)
   be1e4:	681b      	ldr	r3, [r3, #0]
   be1e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   be1ea:	9301      	str	r3, [sp, #4]
   be1ec:	bd08      	pop	{r3, pc}
   be1ee:	0000      	.short	0x0000
   be1f0:	00030220 	.word	0x00030220

000be1f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   be1f4:	b508      	push	{r3, lr}
   be1f6:	4b02      	ldr	r3, [pc, #8]	; (be200 <network_connect+0xc>)
   be1f8:	681b      	ldr	r3, [r3, #0]
   be1fa:	685b      	ldr	r3, [r3, #4]
   be1fc:	9301      	str	r3, [sp, #4]
   be1fe:	bd08      	pop	{r3, pc}
   be200:	00030240 	.word	0x00030240

000be204 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   be204:	b508      	push	{r3, lr}
   be206:	4b02      	ldr	r3, [pc, #8]	; (be210 <network_connecting+0xc>)
   be208:	681b      	ldr	r3, [r3, #0]
   be20a:	689b      	ldr	r3, [r3, #8]
   be20c:	9301      	str	r3, [sp, #4]
   be20e:	bd08      	pop	{r3, pc}
   be210:	00030240 	.word	0x00030240

000be214 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   be214:	b508      	push	{r3, lr}
   be216:	4b02      	ldr	r3, [pc, #8]	; (be220 <network_disconnect+0xc>)
   be218:	681b      	ldr	r3, [r3, #0]
   be21a:	68db      	ldr	r3, [r3, #12]
   be21c:	9301      	str	r3, [sp, #4]
   be21e:	bd08      	pop	{r3, pc}
   be220:	00030240 	.word	0x00030240

000be224 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   be224:	b508      	push	{r3, lr}
   be226:	4b02      	ldr	r3, [pc, #8]	; (be230 <network_ready+0xc>)
   be228:	681b      	ldr	r3, [r3, #0]
   be22a:	691b      	ldr	r3, [r3, #16]
   be22c:	9301      	str	r3, [sp, #4]
   be22e:	bd08      	pop	{r3, pc}
   be230:	00030240 	.word	0x00030240

000be234 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   be234:	b508      	push	{r3, lr}
   be236:	4b02      	ldr	r3, [pc, #8]	; (be240 <network_on+0xc>)
   be238:	681b      	ldr	r3, [r3, #0]
   be23a:	695b      	ldr	r3, [r3, #20]
   be23c:	9301      	str	r3, [sp, #4]
   be23e:	bd08      	pop	{r3, pc}
   be240:	00030240 	.word	0x00030240

000be244 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   be244:	b508      	push	{r3, lr}
   be246:	4b02      	ldr	r3, [pc, #8]	; (be250 <network_off+0xc>)
   be248:	681b      	ldr	r3, [r3, #0]
   be24a:	699b      	ldr	r3, [r3, #24]
   be24c:	9301      	str	r3, [sp, #4]
   be24e:	bd08      	pop	{r3, pc}
   be250:	00030240 	.word	0x00030240

000be254 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   be254:	b508      	push	{r3, lr}
   be256:	4b02      	ldr	r3, [pc, #8]	; (be260 <network_listen+0xc>)
   be258:	681b      	ldr	r3, [r3, #0]
   be25a:	69db      	ldr	r3, [r3, #28]
   be25c:	9301      	str	r3, [sp, #4]
   be25e:	bd08      	pop	{r3, pc}
   be260:	00030240 	.word	0x00030240

000be264 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   be264:	b508      	push	{r3, lr}
   be266:	4b02      	ldr	r3, [pc, #8]	; (be270 <network_listening+0xc>)
   be268:	681b      	ldr	r3, [r3, #0]
   be26a:	6a1b      	ldr	r3, [r3, #32]
   be26c:	9301      	str	r3, [sp, #4]
   be26e:	bd08      	pop	{r3, pc}
   be270:	00030240 	.word	0x00030240

000be274 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   be274:	b508      	push	{r3, lr}
   be276:	4b02      	ldr	r3, [pc, #8]	; (be280 <network_set_listen_timeout+0xc>)
   be278:	681b      	ldr	r3, [r3, #0]
   be27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be27c:	9301      	str	r3, [sp, #4]
   be27e:	bd08      	pop	{r3, pc}
   be280:	00030240 	.word	0x00030240

000be284 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   be284:	b508      	push	{r3, lr}
   be286:	4b02      	ldr	r3, [pc, #8]	; (be290 <network_get_listen_timeout+0xc>)
   be288:	681b      	ldr	r3, [r3, #0]
   be28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be28c:	9301      	str	r3, [sp, #4]
   be28e:	bd08      	pop	{r3, pc}
   be290:	00030240 	.word	0x00030240

000be294 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   be294:	b508      	push	{r3, lr}
   be296:	4b02      	ldr	r3, [pc, #8]	; (be2a0 <network_is_on+0xc>)
   be298:	681b      	ldr	r3, [r3, #0]
   be29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be29c:	9301      	str	r3, [sp, #4]
   be29e:	bd08      	pop	{r3, pc}
   be2a0:	00030240 	.word	0x00030240

000be2a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   be2a4:	b508      	push	{r3, lr}
   be2a6:	4b02      	ldr	r3, [pc, #8]	; (be2b0 <network_is_off+0xc>)
   be2a8:	681b      	ldr	r3, [r3, #0]
   be2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be2ac:	9301      	str	r3, [sp, #4]
   be2ae:	bd08      	pop	{r3, pc}
   be2b0:	00030240 	.word	0x00030240

000be2b4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   be2b4:	b508      	push	{r3, lr}
   be2b6:	4b02      	ldr	r3, [pc, #8]	; (be2c0 <spark_function+0xc>)
   be2b8:	681b      	ldr	r3, [r3, #0]
   be2ba:	685b      	ldr	r3, [r3, #4]
   be2bc:	9301      	str	r3, [sp, #4]
   be2be:	bd08      	pop	{r3, pc}
   be2c0:	00030244 	.word	0x00030244

000be2c4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   be2c4:	b508      	push	{r3, lr}
   be2c6:	4b02      	ldr	r3, [pc, #8]	; (be2d0 <spark_process+0xc>)
   be2c8:	681b      	ldr	r3, [r3, #0]
   be2ca:	689b      	ldr	r3, [r3, #8]
   be2cc:	9301      	str	r3, [sp, #4]
   be2ce:	bd08      	pop	{r3, pc}
   be2d0:	00030244 	.word	0x00030244

000be2d4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   be2d4:	b508      	push	{r3, lr}
   be2d6:	4b02      	ldr	r3, [pc, #8]	; (be2e0 <spark_cloud_flag_connected+0xc>)
   be2d8:	681b      	ldr	r3, [r3, #0]
   be2da:	695b      	ldr	r3, [r3, #20]
   be2dc:	9301      	str	r3, [sp, #4]
   be2de:	bd08      	pop	{r3, pc}
   be2e0:	00030244 	.word	0x00030244

000be2e4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   be2e4:	b508      	push	{r3, lr}
   be2e6:	4b02      	ldr	r3, [pc, #8]	; (be2f0 <spark_send_event+0xc>)
   be2e8:	681b      	ldr	r3, [r3, #0]
   be2ea:	6a1b      	ldr	r3, [r3, #32]
   be2ec:	9301      	str	r3, [sp, #4]
   be2ee:	bd08      	pop	{r3, pc}
   be2f0:	00030244 	.word	0x00030244

000be2f4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   be2f4:	b508      	push	{r3, lr}
   be2f6:	4b02      	ldr	r3, [pc, #8]	; (be300 <spark_subscribe+0xc>)
   be2f8:	681b      	ldr	r3, [r3, #0]
   be2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be2fc:	9301      	str	r3, [sp, #4]
   be2fe:	bd08      	pop	{r3, pc}
   be300:	00030244 	.word	0x00030244

000be304 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   be304:	b508      	push	{r3, lr}
   be306:	4b02      	ldr	r3, [pc, #8]	; (be310 <spark_sync_time_pending+0xc>)
   be308:	681b      	ldr	r3, [r3, #0]
   be30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be30c:	9301      	str	r3, [sp, #4]
   be30e:	bd08      	pop	{r3, pc}
   be310:	00030244 	.word	0x00030244

000be314 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   be314:	b508      	push	{r3, lr}
   be316:	4b02      	ldr	r3, [pc, #8]	; (be320 <spark_set_random_seed_from_cloud_handler+0xc>)
   be318:	681b      	ldr	r3, [r3, #0]
   be31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be31c:	9301      	str	r3, [sp, #4]
   be31e:	bd08      	pop	{r3, pc}
   be320:	00030244 	.word	0x00030244

000be324 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   be324:	b508      	push	{r3, lr}
   be326:	4b02      	ldr	r3, [pc, #8]	; (be330 <malloc+0xc>)
   be328:	681b      	ldr	r3, [r3, #0]
   be32a:	681b      	ldr	r3, [r3, #0]
   be32c:	9301      	str	r3, [sp, #4]
   be32e:	bd08      	pop	{r3, pc}
   be330:	0003021c 	.word	0x0003021c

000be334 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   be334:	b508      	push	{r3, lr}
   be336:	4b02      	ldr	r3, [pc, #8]	; (be340 <free+0xc>)
   be338:	681b      	ldr	r3, [r3, #0]
   be33a:	685b      	ldr	r3, [r3, #4]
   be33c:	9301      	str	r3, [sp, #4]
   be33e:	bd08      	pop	{r3, pc}
   be340:	0003021c 	.word	0x0003021c

000be344 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   be344:	b508      	push	{r3, lr}
   be346:	4b02      	ldr	r3, [pc, #8]	; (be350 <realloc+0xc>)
   be348:	681b      	ldr	r3, [r3, #0]
   be34a:	689b      	ldr	r3, [r3, #8]
   be34c:	9301      	str	r3, [sp, #4]
   be34e:	bd08      	pop	{r3, pc}
   be350:	0003021c 	.word	0x0003021c

000be354 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   be354:	b508      	push	{r3, lr}
   be356:	4b02      	ldr	r3, [pc, #8]	; (be360 <sprintf+0xc>)
   be358:	681b      	ldr	r3, [r3, #0]
   be35a:	68db      	ldr	r3, [r3, #12]
   be35c:	9301      	str	r3, [sp, #4]
   be35e:	bd08      	pop	{r3, pc}
   be360:	0003021c 	.word	0x0003021c

000be364 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   be364:	b508      	push	{r3, lr}
   be366:	4b02      	ldr	r3, [pc, #8]	; (be370 <sscanf+0xc>)
   be368:	681b      	ldr	r3, [r3, #0]
   be36a:	695b      	ldr	r3, [r3, #20]
   be36c:	9301      	str	r3, [sp, #4]
   be36e:	bd08      	pop	{r3, pc}
   be370:	0003021c 	.word	0x0003021c

000be374 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   be374:	b508      	push	{r3, lr}
   be376:	4b02      	ldr	r3, [pc, #8]	; (be380 <snprintf+0xc>)
   be378:	681b      	ldr	r3, [r3, #0]
   be37a:	69db      	ldr	r3, [r3, #28]
   be37c:	9301      	str	r3, [sp, #4]
   be37e:	bd08      	pop	{r3, pc}
   be380:	0003021c 	.word	0x0003021c

000be384 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   be384:	b508      	push	{r3, lr}
   be386:	4b02      	ldr	r3, [pc, #8]	; (be390 <vsnprintf+0xc>)
   be388:	681b      	ldr	r3, [r3, #0]
   be38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be38c:	9301      	str	r3, [sp, #4]
   be38e:	bd08      	pop	{r3, pc}
   be390:	0003021c 	.word	0x0003021c

000be394 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   be394:	b508      	push	{r3, lr}
   be396:	4b02      	ldr	r3, [pc, #8]	; (be3a0 <abort+0xc>)
   be398:	681b      	ldr	r3, [r3, #0]
   be39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be39c:	9301      	str	r3, [sp, #4]
   be39e:	bd08      	pop	{r3, pc}
   be3a0:	0003021c 	.word	0x0003021c

000be3a4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   be3a4:	b508      	push	{r3, lr}
   be3a6:	4b02      	ldr	r3, [pc, #8]	; (be3b0 <_malloc_r+0xc>)
   be3a8:	681b      	ldr	r3, [r3, #0]
   be3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be3ac:	9301      	str	r3, [sp, #4]
   be3ae:	bd08      	pop	{r3, pc}
   be3b0:	0003021c 	.word	0x0003021c

000be3b4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   be3b4:	b508      	push	{r3, lr}
   be3b6:	4b02      	ldr	r3, [pc, #8]	; (be3c0 <__errno+0xc>)
   be3b8:	681b      	ldr	r3, [r3, #0]
   be3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be3bc:	9301      	str	r3, [sp, #4]
   be3be:	bd08      	pop	{r3, pc}
   be3c0:	0003021c 	.word	0x0003021c

000be3c4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   be3c4:	b508      	push	{r3, lr}
   be3c6:	4b02      	ldr	r3, [pc, #8]	; (be3d0 <__assert_func+0xc>)
   be3c8:	681b      	ldr	r3, [r3, #0]
   be3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be3cc:	9301      	str	r3, [sp, #4]
   be3ce:	bd08      	pop	{r3, pc}
   be3d0:	0003021c 	.word	0x0003021c

000be3d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   be3d4:	b508      	push	{r3, lr}
   be3d6:	4b02      	ldr	r3, [pc, #8]	; (be3e0 <newlib_impure_ptr_callback+0xc>)
   be3d8:	681b      	ldr	r3, [r3, #0]
   be3da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be3dc:	9301      	str	r3, [sp, #4]
   be3de:	bd08      	pop	{r3, pc}
   be3e0:	0003021c 	.word	0x0003021c

000be3e4 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   be3e4:	b508      	push	{r3, lr}
   be3e6:	4b02      	ldr	r3, [pc, #8]	; (be3f0 <localtime_r+0xc>)
   be3e8:	681b      	ldr	r3, [r3, #0]
   be3ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be3ec:	9301      	str	r3, [sp, #4]
   be3ee:	bd08      	pop	{r3, pc}
   be3f0:	0003021c 	.word	0x0003021c

000be3f4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   be3f4:	2200      	movs	r2, #0
   be3f6:	6840      	ldr	r0, [r0, #4]
   be3f8:	4611      	mov	r1, r2
   be3fa:	f7ff bf33 	b.w	be264 <network_listening>

000be3fe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   be3fe:	2200      	movs	r2, #0
   be400:	6840      	ldr	r0, [r0, #4]
   be402:	4611      	mov	r1, r2
   be404:	f7ff bf3e 	b.w	be284 <network_get_listen_timeout>

000be408 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   be408:	6840      	ldr	r0, [r0, #4]
   be40a:	2200      	movs	r2, #0
   be40c:	f7ff bf32 	b.w	be274 <network_set_listen_timeout>

000be410 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   be410:	6840      	ldr	r0, [r0, #4]
   be412:	2200      	movs	r2, #0
   be414:	f081 0101 	eor.w	r1, r1, #1
   be418:	f7ff bf1c 	b.w	be254 <network_listen>

000be41c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   be41c:	2300      	movs	r3, #0
   be41e:	6840      	ldr	r0, [r0, #4]
   be420:	461a      	mov	r2, r3
   be422:	4619      	mov	r1, r3
   be424:	f7ff bf0e 	b.w	be244 <network_off>

000be428 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   be428:	2300      	movs	r3, #0
   be42a:	6840      	ldr	r0, [r0, #4]
   be42c:	461a      	mov	r2, r3
   be42e:	4619      	mov	r1, r3
   be430:	f7ff bf00 	b.w	be234 <network_on>

000be434 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   be434:	2200      	movs	r2, #0
   be436:	6840      	ldr	r0, [r0, #4]
   be438:	4611      	mov	r1, r2
   be43a:	f7ff bef3 	b.w	be224 <network_ready>

000be43e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   be43e:	2200      	movs	r2, #0
   be440:	6840      	ldr	r0, [r0, #4]
   be442:	4611      	mov	r1, r2
   be444:	f7ff bede 	b.w	be204 <network_connecting>

000be448 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   be448:	6840      	ldr	r0, [r0, #4]
   be44a:	2200      	movs	r2, #0
   be44c:	2102      	movs	r1, #2
   be44e:	f7ff bee1 	b.w	be214 <network_disconnect>

000be452 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   be452:	2300      	movs	r3, #0
   be454:	6840      	ldr	r0, [r0, #4]
   be456:	461a      	mov	r2, r3
   be458:	f7ff becc 	b.w	be1f4 <network_connect>

000be45c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   be45c:	4b02      	ldr	r3, [pc, #8]	; (be468 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   be45e:	2203      	movs	r2, #3
   be460:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   be462:	4a02      	ldr	r2, [pc, #8]	; (be46c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   be464:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   be466:	4770      	bx	lr
   be468:	2003e61c 	.word	0x2003e61c
   be46c:	000c7ccc 	.word	0x000c7ccc

000be470 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   be470:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   be472:	460b      	mov	r3, r1
    s->update(ticks);
   be474:	6892      	ldr	r2, [r2, #8]
   be476:	4601      	mov	r1, r0
   be478:	4618      	mov	r0, r3
   be47a:	4710      	bx	r2

000be47c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   be47c:	b570      	push	{r4, r5, r6, lr}
   be47e:	4c0e      	ldr	r4, [pc, #56]	; (be4b8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   be480:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   be482:	2500      	movs	r5, #0
   be484:	241c      	movs	r4, #28
   be486:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be48a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   be48e:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   be492:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be494:	f004 0403 	and.w	r4, r4, #3
   be498:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   be49c:	b2e4      	uxtb	r4, r4
   be49e:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   be4a0:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   be4a2:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   be4a4:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   be4a6:	7c42      	ldrb	r2, [r0, #17]
   be4a8:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   be4aa:	bf0a      	itet	eq
   be4ac:	4b03      	ldreq	r3, [pc, #12]	; (be4bc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   be4ae:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   be4b0:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   be4b4:	bd70      	pop	{r4, r5, r6, pc}
   be4b6:	bf00      	nop
   be4b8:	000c6e28 	.word	0x000c6e28
   be4bc:	000be471 	.word	0x000be471

000be4c0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   be4c0:	2100      	movs	r1, #0
   be4c2:	f7ff bdc1 	b.w	be048 <hal_spi_release>

000be4c6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   be4c6:	2100      	movs	r1, #0
   be4c8:	f7ff bdb6 	b.w	be038 <hal_spi_acquire>

000be4cc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   be4cc:	b510      	push	{r4, lr}
   be4ce:	4604      	mov	r4, r0
   be4d0:	4608      	mov	r0, r1
{
    _spi = spi;
   be4d2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   be4d4:	f7ff fd80 	bl	bdfd8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   be4d8:	2300      	movs	r3, #0
   be4da:	6063      	str	r3, [r4, #4]
}
   be4dc:	4620      	mov	r0, r4
   be4de:	bd10      	pop	{r4, pc}

000be4e0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   be4e0:	b513      	push	{r0, r1, r4, lr}
   be4e2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   be4e4:	7800      	ldrb	r0, [r0, #0]
   be4e6:	f7ff ffee 	bl	be4c6 <_ZN8SPIClass4lockEv.isra.0>
   be4ea:	b958      	cbnz	r0, be504 <_ZN8SPIClass5beginEv+0x24>
   be4ec:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   be4ee:	9001      	str	r0, [sp, #4]
   be4f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be4f4:	f7ff fd60 	bl	bdfb8 <hal_spi_begin>
        unlock();
   be4f8:	9801      	ldr	r0, [sp, #4]
    }
}
   be4fa:	b002      	add	sp, #8
   be4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be500:	f7ff bfde 	b.w	be4c0 <_ZN8SPIClass6unlockEv.isra.0>
   be504:	b002      	add	sp, #8
   be506:	bd10      	pop	{r4, pc}

000be508 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   be508:	7800      	ldrb	r0, [r0, #0]
   be50a:	f7ff bfd9 	b.w	be4c0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000be510 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   be510:	0840      	lsrs	r0, r0, #1
{
   be512:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   be514:	6018      	str	r0, [r3, #0]
   be516:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   be518:	6818      	ldr	r0, [r3, #0]
   be51a:	4288      	cmp	r0, r1
   be51c:	b2e5      	uxtb	r5, r4
   be51e:	d906      	bls.n	be52e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   be520:	3401      	adds	r4, #1
   be522:	2c08      	cmp	r4, #8
   be524:	d002      	beq.n	be52c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   be526:	0840      	lsrs	r0, r0, #1
   be528:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   be52a:	e7f5      	b.n	be518 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   be52c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   be52e:	4b02      	ldr	r3, [pc, #8]	; (be538 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   be530:	5d5b      	ldrb	r3, [r3, r5]
   be532:	7013      	strb	r3, [r2, #0]
}
   be534:	bd30      	pop	{r4, r5, pc}
   be536:	bf00      	nop
   be538:	000c7d00 	.word	0x000c7d00

000be53c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   be53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be540:	4606      	mov	r6, r0
   be542:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   be544:	7800      	ldrb	r0, [r0, #0]
{
   be546:	460c      	mov	r4, r1
    CHECK(lock());
   be548:	f7ff ffbd 	bl	be4c6 <_ZN8SPIClass4lockEv.isra.0>
   be54c:	2800      	cmp	r0, #0
   be54e:	db1b      	blt.n	be588 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   be550:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   be552:	2214      	movs	r2, #20
   be554:	2100      	movs	r1, #0
   be556:	a809      	add	r0, sp, #36	; 0x24
   be558:	f006 f85e 	bl	c4618 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   be55c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   be55e:	2200      	movs	r2, #0
   be560:	a909      	add	r1, sp, #36	; 0x24
   be562:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   be564:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   be568:	f7ff fd46 	bl	bdff8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   be56c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   be570:	b113      	cbz	r3, be578 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   be572:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   be576:	b155      	cbz	r5, be58e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   be578:	2700      	movs	r7, #0
   be57a:	46b9      	mov	r9, r7
   be57c:	46b8      	mov	r8, r7
   be57e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   be580:	7923      	ldrb	r3, [r4, #4]
   be582:	b15d      	cbz	r5, be59c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   be584:	b1c3      	cbz	r3, be5b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   be586:	2000      	movs	r0, #0
}
   be588:	b00f      	add	sp, #60	; 0x3c
   be58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   be58e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   be592:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   be596:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   be59a:	e7f1      	b.n	be580 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   be59c:	2b00      	cmp	r3, #0
   be59e:	d135      	bne.n	be60c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   be5a0:	68a3      	ldr	r3, [r4, #8]
   be5a2:	4543      	cmp	r3, r8
   be5a4:	d108      	bne.n	be5b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   be5a6:	f88d 9020 	strb.w	r9, [sp, #32]
   be5aa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be5ae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be5b2:	89a3      	ldrh	r3, [r4, #12]
   be5b4:	429a      	cmp	r2, r3
   be5b6:	d0e6      	beq.n	be586 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   be5b8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be5ba:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   be5bc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be5c0:	980a      	ldr	r0, [sp, #40]	; 0x28
   be5c2:	ab04      	add	r3, sp, #16
   be5c4:	f10d 020f 	add.w	r2, sp, #15
   be5c8:	f7ff ffa2 	bl	be510 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   be5cc:	7921      	ldrb	r1, [r4, #4]
   be5ce:	b985      	cbnz	r5, be5f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   be5d0:	b989      	cbnz	r1, be5f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be5d2:	68a3      	ldr	r3, [r4, #8]
   be5d4:	4543      	cmp	r3, r8
   be5d6:	d30e      	bcc.n	be5f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   be5d8:	f88d 9020 	strb.w	r9, [sp, #32]
   be5dc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be5e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be5e4:	89a3      	ldrh	r3, [r4, #12]
   be5e6:	429a      	cmp	r2, r3
   be5e8:	d105      	bne.n	be5f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   be5ea:	9b04      	ldr	r3, [sp, #16]
   be5ec:	4543      	cmp	r3, r8
   be5ee:	d102      	bne.n	be5f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be5f0:	e7c9      	b.n	be586 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   be5f2:	2900      	cmp	r1, #0
   be5f4:	d1f9      	bne.n	be5ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   be5f6:	2300      	movs	r3, #0
   be5f8:	9301      	str	r3, [sp, #4]
   be5fa:	7b63      	ldrb	r3, [r4, #13]
   be5fc:	9300      	str	r3, [sp, #0]
   be5fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   be602:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   be604:	7830      	ldrb	r0, [r6, #0]
   be606:	f7ff fd0f 	bl	be028 <hal_spi_set_settings>
   be60a:	e7bc      	b.n	be586 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   be60c:	e9cd 5500 	strd	r5, r5, [sp]
   be610:	462b      	mov	r3, r5
   be612:	462a      	mov	r2, r5
   be614:	2101      	movs	r1, #1
   be616:	e7f5      	b.n	be604 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000be618 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   be618:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   be61a:	7800      	ldrb	r0, [r0, #0]
   be61c:	f7ff fcd4 	bl	bdfc8 <hal_spi_transfer>
}
   be620:	b2c0      	uxtb	r0, r0
   be622:	bd08      	pop	{r3, pc}

000be624 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   be624:	b530      	push	{r4, r5, lr}
   be626:	b087      	sub	sp, #28
   be628:	4604      	mov	r4, r0
   be62a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   be62c:	9500      	str	r5, [sp, #0]
   be62e:	7800      	ldrb	r0, [r0, #0]
   be630:	f7ff fcea 	bl	be008 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   be634:	b93d      	cbnz	r5, be646 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   be636:	7820      	ldrb	r0, [r4, #0]
   be638:	a902      	add	r1, sp, #8
   be63a:	f7ff fced 	bl	be018 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   be63e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   be642:	07db      	lsls	r3, r3, #31
   be644:	d4f7      	bmi.n	be636 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   be646:	b007      	add	sp, #28
   be648:	bd30      	pop	{r4, r5, pc}

000be64a <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   be64a:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   be64e:	1c53      	adds	r3, r2, #1
   be650:	d00b      	beq.n	be66a <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   be652:	8843      	ldrh	r3, [r0, #2]
   be654:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   be656:	428b      	cmp	r3, r1
   be658:	d803      	bhi.n	be662 <_ZN5Servo17writeMicrosecondsEt+0x18>
   be65a:	4288      	cmp	r0, r1
   be65c:	4603      	mov	r3, r0
   be65e:	bf28      	it	cs
   be660:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   be662:	4619      	mov	r1, r3
   be664:	b290      	uxth	r0, r2
   be666:	f7ff bd07 	b.w	be078 <HAL_Servo_Write_Pulse_Width>
}
   be66a:	4770      	bx	lr

000be66c <_ZN5Servo5writeEi>:
{
   be66c:	b513      	push	{r0, r1, r4, lr}
   be66e:	4604      	mov	r4, r0
   be670:	4608      	mov	r0, r1
   be672:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   be676:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   be67a:	4288      	cmp	r0, r1
   be67c:	db10      	blt.n	be6a0 <_ZN5Servo5writeEi+0x34>
   be67e:	4290      	cmp	r0, r2
   be680:	bfa8      	it	ge
   be682:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   be684:	88a3      	ldrh	r3, [r4, #4]
   be686:	9300      	str	r3, [sp, #0]
   be688:	8863      	ldrh	r3, [r4, #2]
   be68a:	f002 fc25 	bl	c0ed8 <_Z3mapiiiii>
   be68e:	68e1      	ldr	r1, [r4, #12]
   be690:	4401      	add	r1, r0
   be692:	b289      	uxth	r1, r1
   be694:	4620      	mov	r0, r4
}
   be696:	b002      	add	sp, #8
   be698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   be69c:	f7ff bfd5 	b.w	be64a <_ZN5Servo17writeMicrosecondsEt>
   be6a0:	4608      	mov	r0, r1
   be6a2:	e7ef      	b.n	be684 <_ZN5Servo5writeEi+0x18>

000be6a4 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   be6a4:	4a04      	ldr	r2, [pc, #16]	; (be6b8 <_ZN5Servo11resetFieldsEv+0x14>)
   be6a6:	f44f 6316 	mov.w	r3, #2400	; 0x960
   be6aa:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   be6ae:	23b4      	movs	r3, #180	; 0xb4
   be6b0:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   be6b2:	2300      	movs	r3, #0
   be6b4:	60c3      	str	r3, [r0, #12]
}
   be6b6:	4770      	bx	lr
   be6b8:	0220ffff 	.word	0x0220ffff

000be6bc <_ZN5ServoC1Ev>:
Servo::Servo()
   be6bc:	b508      	push	{r3, lr}
  this->resetFields();
   be6be:	f7ff fff1 	bl	be6a4 <_ZN5Servo11resetFieldsEv>
}
   be6c2:	bd08      	pop	{r3, pc}

000be6c4 <_ZN5Servo6detachEv>:
{
   be6c4:	b510      	push	{r4, lr}
   be6c6:	4604      	mov	r4, r0
   be6c8:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   be6cc:	1c43      	adds	r3, r0, #1
   be6ce:	d007      	beq.n	be6e0 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   be6d0:	b280      	uxth	r0, r0
   be6d2:	f7ff fcc9 	bl	be068 <HAL_Servo_Detach>
  this->resetFields();
   be6d6:	4620      	mov	r0, r4
   be6d8:	f7ff ffe4 	bl	be6a4 <_ZN5Servo11resetFieldsEv>
  return true;
   be6dc:	2001      	movs	r0, #1
}
   be6de:	bd10      	pop	{r4, pc}
    return false;
   be6e0:	2000      	movs	r0, #0
   be6e2:	e7fc      	b.n	be6de <_ZN5Servo6detachEv+0x1a>

000be6e4 <_ZN5Servo6attachEtttss>:
{
   be6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be6e8:	460d      	mov	r5, r1
   be6ea:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   be6ec:	2102      	movs	r1, #2
   be6ee:	4628      	mov	r0, r5
{
   be6f0:	4690      	mov	r8, r2
   be6f2:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   be6f4:	f7ff fa4e 	bl	bdb94 <HAL_Validate_Pin_Function>
   be6f8:	2802      	cmp	r0, #2
   be6fa:	d003      	beq.n	be704 <_ZN5Servo6attachEtttss+0x20>
    return false;
   be6fc:	2600      	movs	r6, #0
}
   be6fe:	4630      	mov	r0, r6
   be700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   be704:	4628      	mov	r0, r5
   be706:	f003 fc4f 	bl	c1fa8 <pinAvailable>
   be70a:	4606      	mov	r6, r0
   be70c:	2800      	cmp	r0, #0
   be70e:	d0f5      	beq.n	be6fc <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   be710:	f9b4 3000 	ldrsh.w	r3, [r4]
   be714:	3301      	adds	r3, #1
   be716:	d002      	beq.n	be71e <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   be718:	4620      	mov	r0, r4
   be71a:	f7ff ffd3 	bl	be6c4 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   be71e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   be722:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   be724:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   be728:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   be72a:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   be72e:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   be730:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   be732:	4628      	mov	r0, r5
   be734:	f7ff fc90 	bl	be058 <HAL_Servo_Attach>
  return true;
   be738:	e7e1      	b.n	be6fe <_ZN5Servo6attachEtttss+0x1a>
	...

000be73c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   be73c:	4b05      	ldr	r3, [pc, #20]	; (be754 <_GLOBAL__sub_I_System+0x18>)
   be73e:	2202      	movs	r2, #2
   be740:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   be742:	4b05      	ldr	r3, [pc, #20]	; (be758 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   be744:	4a05      	ldr	r2, [pc, #20]	; (be75c <_GLOBAL__sub_I_System+0x20>)
   be746:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   be748:	2000      	movs	r0, #0
   be74a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   be74e:	f7ff bd0d 	b.w	be16c <set_system_mode>
   be752:	bf00      	nop
   be754:	2003e630 	.word	0x2003e630
   be758:	2003e624 	.word	0x2003e624
   be75c:	ffff0000 	.word	0xffff0000

000be760 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   be760:	b510      	push	{r4, lr}
   be762:	4604      	mov	r4, r0
{
	free(buffer);
   be764:	6800      	ldr	r0, [r0, #0]
   be766:	f7ff fde5 	bl	be334 <free>
}
   be76a:	4620      	mov	r0, r4
   be76c:	bd10      	pop	{r4, pc}

000be76e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   be76e:	b510      	push	{r4, lr}
   be770:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   be772:	6800      	ldr	r0, [r0, #0]
   be774:	b108      	cbz	r0, be77a <_ZN6String10invalidateEv+0xc>
   be776:	f7ff fddd 	bl	be334 <free>
	buffer = NULL;
   be77a:	2300      	movs	r3, #0
	capacity = len = 0;
   be77c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   be780:	6023      	str	r3, [r4, #0]
}
   be782:	bd10      	pop	{r4, pc}

000be784 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   be784:	b538      	push	{r3, r4, r5, lr}
   be786:	4604      	mov	r4, r0
   be788:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   be78a:	6800      	ldr	r0, [r0, #0]
   be78c:	3101      	adds	r1, #1
   be78e:	f7ff fdd9 	bl	be344 <realloc>
	if (newbuffer) {
   be792:	b110      	cbz	r0, be79a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   be794:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   be798:	2001      	movs	r0, #1
	}
	return 0;
}
   be79a:	bd38      	pop	{r3, r4, r5, pc}

000be79c <_ZN6String7reserveEj>:
{
   be79c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   be79e:	6803      	ldr	r3, [r0, #0]
{
   be7a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   be7a2:	b123      	cbz	r3, be7ae <_ZN6String7reserveEj+0x12>
   be7a4:	6843      	ldr	r3, [r0, #4]
   be7a6:	428b      	cmp	r3, r1
   be7a8:	d301      	bcc.n	be7ae <_ZN6String7reserveEj+0x12>
   be7aa:	2001      	movs	r0, #1
}
   be7ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   be7ae:	4620      	mov	r0, r4
   be7b0:	f7ff ffe8 	bl	be784 <_ZN6String12changeBufferEj>
   be7b4:	2800      	cmp	r0, #0
   be7b6:	d0f9      	beq.n	be7ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   be7b8:	68a3      	ldr	r3, [r4, #8]
   be7ba:	2b00      	cmp	r3, #0
   be7bc:	d1f5      	bne.n	be7aa <_ZN6String7reserveEj+0xe>
   be7be:	6822      	ldr	r2, [r4, #0]
   be7c0:	7013      	strb	r3, [r2, #0]
   be7c2:	e7f2      	b.n	be7aa <_ZN6String7reserveEj+0xe>

000be7c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   be7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be7c6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   be7c8:	4611      	mov	r1, r2
   be7ca:	9201      	str	r2, [sp, #4]
{
   be7cc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   be7ce:	f7ff ffe5 	bl	be79c <_ZN6String7reserveEj>
   be7d2:	9a01      	ldr	r2, [sp, #4]
   be7d4:	b928      	cbnz	r0, be7e2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   be7d6:	4620      	mov	r0, r4
   be7d8:	f7ff ffc9 	bl	be76e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   be7dc:	4620      	mov	r0, r4
   be7de:	b003      	add	sp, #12
   be7e0:	bd30      	pop	{r4, r5, pc}
	len = length;
   be7e2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   be7e4:	4629      	mov	r1, r5
   be7e6:	6820      	ldr	r0, [r4, #0]
   be7e8:	f005 feee 	bl	c45c8 <memcpy>
	buffer[len] = 0;
   be7ec:	6822      	ldr	r2, [r4, #0]
   be7ee:	68a3      	ldr	r3, [r4, #8]
   be7f0:	2100      	movs	r1, #0
   be7f2:	54d1      	strb	r1, [r2, r3]
	return *this;
   be7f4:	e7f2      	b.n	be7dc <_ZN6String4copyEPKcj+0x18>

000be7f6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   be7f6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   be7f8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   be7fa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   be7fe:	4604      	mov	r4, r0
	len = 0;
   be800:	6083      	str	r3, [r0, #8]
	flags = 0;
   be802:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   be804:	b141      	cbz	r1, be818 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   be806:	4608      	mov	r0, r1
   be808:	9101      	str	r1, [sp, #4]
   be80a:	f005 ff90 	bl	c472e <strlen>
   be80e:	9901      	ldr	r1, [sp, #4]
   be810:	4602      	mov	r2, r0
   be812:	4620      	mov	r0, r4
   be814:	f7ff ffd6 	bl	be7c4 <_ZN6String4copyEPKcj>
}
   be818:	4620      	mov	r0, r4
   be81a:	b002      	add	sp, #8
   be81c:	bd10      	pop	{r4, pc}

000be81e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   be81e:	b538      	push	{r3, r4, r5, lr}
   be820:	4605      	mov	r5, r0
	if (buffer) {
   be822:	6800      	ldr	r0, [r0, #0]
{
   be824:	460c      	mov	r4, r1
	if (buffer) {
   be826:	b168      	cbz	r0, be844 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   be828:	686a      	ldr	r2, [r5, #4]
   be82a:	688b      	ldr	r3, [r1, #8]
   be82c:	429a      	cmp	r2, r3
   be82e:	d307      	bcc.n	be840 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   be830:	6809      	ldr	r1, [r1, #0]
   be832:	f005 ff57 	bl	c46e4 <strcpy>
			len = rhs.len;
   be836:	68a3      	ldr	r3, [r4, #8]
   be838:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   be83a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   be83c:	60a3      	str	r3, [r4, #8]
}
   be83e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   be840:	f7ff fd78 	bl	be334 <free>
	buffer = rhs.buffer;
   be844:	6823      	ldr	r3, [r4, #0]
   be846:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   be848:	6863      	ldr	r3, [r4, #4]
   be84a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   be84c:	68a3      	ldr	r3, [r4, #8]
   be84e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   be850:	2300      	movs	r3, #0
	rhs.capacity = 0;
   be852:	e9c4 3300 	strd	r3, r3, [r4]
   be856:	e7f1      	b.n	be83c <_ZN6String4moveERS_+0x1e>

000be858 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   be858:	b510      	push	{r4, lr}
	buffer = NULL;
   be85a:	2300      	movs	r3, #0
	capacity = 0;
   be85c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   be860:	4604      	mov	r4, r0
	len = 0;
   be862:	6083      	str	r3, [r0, #8]
	flags = 0;
   be864:	7303      	strb	r3, [r0, #12]
	move(rval);
   be866:	f7ff ffda 	bl	be81e <_ZN6String4moveERS_>
}
   be86a:	4620      	mov	r0, r4
   be86c:	bd10      	pop	{r4, pc}

000be86e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   be86e:	4288      	cmp	r0, r1
{
   be870:	b510      	push	{r4, lr}
   be872:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   be874:	d005      	beq.n	be882 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   be876:	680b      	ldr	r3, [r1, #0]
   be878:	b12b      	cbz	r3, be886 <_ZN6StringaSERKS_+0x18>
   be87a:	688a      	ldr	r2, [r1, #8]
   be87c:	4619      	mov	r1, r3
   be87e:	f7ff ffa1 	bl	be7c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be882:	4620      	mov	r0, r4
   be884:	bd10      	pop	{r4, pc}
	else invalidate();
   be886:	f7ff ff72 	bl	be76e <_ZN6String10invalidateEv>
   be88a:	e7fa      	b.n	be882 <_ZN6StringaSERKS_+0x14>

000be88c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   be88c:	b510      	push	{r4, lr}
	buffer = NULL;
   be88e:	2300      	movs	r3, #0
String::String(const String &value)
   be890:	4604      	mov	r4, r0
	capacity = 0;
   be892:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   be896:	6083      	str	r3, [r0, #8]
	flags = 0;
   be898:	7303      	strb	r3, [r0, #12]
	*this = value;
   be89a:	f7ff ffe8 	bl	be86e <_ZN6StringaSERKS_>
}
   be89e:	4620      	mov	r0, r4
   be8a0:	bd10      	pop	{r4, pc}

000be8a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   be8a2:	b513      	push	{r0, r1, r4, lr}
   be8a4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   be8a6:	b159      	cbz	r1, be8c0 <_ZN6StringaSEPKc+0x1e>
   be8a8:	4608      	mov	r0, r1
   be8aa:	9101      	str	r1, [sp, #4]
   be8ac:	f005 ff3f 	bl	c472e <strlen>
   be8b0:	9901      	ldr	r1, [sp, #4]
   be8b2:	4602      	mov	r2, r0
   be8b4:	4620      	mov	r0, r4
   be8b6:	f7ff ff85 	bl	be7c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be8ba:	4620      	mov	r0, r4
   be8bc:	b002      	add	sp, #8
   be8be:	bd10      	pop	{r4, pc}
	else invalidate();
   be8c0:	f7ff ff55 	bl	be76e <_ZN6String10invalidateEv>
   be8c4:	e7f9      	b.n	be8ba <_ZN6StringaSEPKc+0x18>

000be8c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   be8c6:	b570      	push	{r4, r5, r6, lr}
   be8c8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   be8ca:	460e      	mov	r6, r1
   be8cc:	b909      	cbnz	r1, be8d2 <_ZN6String6concatEPKcj+0xc>
   be8ce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   be8d0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   be8d2:	b16a      	cbz	r2, be8f0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   be8d4:	6884      	ldr	r4, [r0, #8]
   be8d6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   be8d8:	4621      	mov	r1, r4
   be8da:	f7ff ff5f 	bl	be79c <_ZN6String7reserveEj>
   be8de:	2800      	cmp	r0, #0
   be8e0:	d0f5      	beq.n	be8ce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   be8e2:	6828      	ldr	r0, [r5, #0]
   be8e4:	68ab      	ldr	r3, [r5, #8]
   be8e6:	4631      	mov	r1, r6
   be8e8:	4418      	add	r0, r3
   be8ea:	f005 fefb 	bl	c46e4 <strcpy>
	len = newlen;
   be8ee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   be8f0:	2001      	movs	r0, #1
   be8f2:	e7ed      	b.n	be8d0 <_ZN6String6concatEPKcj+0xa>

000be8f4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   be8f4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   be8f6:	2300      	movs	r3, #0
	buf[0] = c;
   be8f8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   be8fc:	2201      	movs	r2, #1
   be8fe:	a901      	add	r1, sp, #4
	buf[1] = 0;
   be900:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   be904:	f7ff ffdf 	bl	be8c6 <_ZN6String6concatEPKcj>
}
   be908:	b003      	add	sp, #12
   be90a:	f85d fb04 	ldr.w	pc, [sp], #4

000be90e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   be90e:	6883      	ldr	r3, [r0, #8]
   be910:	428b      	cmp	r3, r1
   be912:	d903      	bls.n	be91c <_ZNK6StringixEj+0xe>
   be914:	6800      	ldr	r0, [r0, #0]
   be916:	b110      	cbz	r0, be91e <_ZNK6StringixEj+0x10>
	return buffer[index];
   be918:	5c40      	ldrb	r0, [r0, r1]
   be91a:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   be91c:	2000      	movs	r0, #0
}
   be91e:	4770      	bx	lr

000be920 <_ZNK6String6charAtEj>:
	return operator[](loc);
   be920:	f7ff bff5 	b.w	be90e <_ZNK6StringixEj>

000be924 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   be924:	b558      	push	{r3, r4, r6, lr}
   be926:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   be928:	b12a      	cbz	r2, be936 <_ZNK6String8getBytesEPhjj+0x12>
   be92a:	b121      	cbz	r1, be936 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   be92c:	6884      	ldr	r4, [r0, #8]
   be92e:	42a3      	cmp	r3, r4
   be930:	d302      	bcc.n	be938 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   be932:	2300      	movs	r3, #0
   be934:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   be936:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   be938:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   be93a:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   be93c:	6801      	ldr	r1, [r0, #0]
   be93e:	4294      	cmp	r4, r2
   be940:	bf28      	it	cs
   be942:	4614      	movcs	r4, r2
   be944:	4419      	add	r1, r3
   be946:	4622      	mov	r2, r4
   be948:	4630      	mov	r0, r6
   be94a:	f005 ff1f 	bl	c478c <strncpy>
	buf[n] = 0;
   be94e:	2300      	movs	r3, #0
   be950:	5533      	strb	r3, [r6, r4]
   be952:	e7f0      	b.n	be936 <_ZNK6String8getBytesEPhjj+0x12>

000be954 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be954:	4770      	bx	lr

000be956 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be956:	4770      	bx	lr

000be958 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be958:	4770      	bx	lr

000be95a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be95a:	4770      	bx	lr

000be95c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be95c:	4b06      	ldr	r3, [pc, #24]	; (be978 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be95e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be960:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be962:	f100 040c 	add.w	r4, r0, #12
	    ||
   be966:	d005      	beq.n	be974 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be968:	4608      	mov	r0, r1
   be96a:	f003 fc33 	bl	c21d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be96e:	2800      	cmp	r0, #0
   be970:	bf08      	it	eq
   be972:	2400      	moveq	r4, #0
      }
   be974:	4620      	mov	r0, r4
   be976:	bd10      	pop	{r4, pc}
   be978:	000c7ea8 	.word	0x000c7ea8

000be97c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be97c:	4b06      	ldr	r3, [pc, #24]	; (be998 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be97e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be980:	b510      	push	{r4, lr}
   be982:	f100 040c 	add.w	r4, r0, #12
	    ||
   be986:	d005      	beq.n	be994 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be988:	4608      	mov	r0, r1
   be98a:	f003 fc23 	bl	c21d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be98e:	2800      	cmp	r0, #0
   be990:	bf08      	it	eq
   be992:	2400      	moveq	r4, #0
      }
   be994:	4620      	mov	r0, r4
   be996:	bd10      	pop	{r4, pc}
   be998:	000c7ea8 	.word	0x000c7ea8

000be99c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be99c:	4b06      	ldr	r3, [pc, #24]	; (be9b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be99e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be9a0:	b510      	push	{r4, lr}
   be9a2:	f100 040c 	add.w	r4, r0, #12
	    ||
   be9a6:	d005      	beq.n	be9b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be9a8:	4608      	mov	r0, r1
   be9aa:	f003 fc13 	bl	c21d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be9ae:	2800      	cmp	r0, #0
   be9b0:	bf08      	it	eq
   be9b2:	2400      	moveq	r4, #0
      }
   be9b4:	4620      	mov	r0, r4
   be9b6:	bd10      	pop	{r4, pc}
   be9b8:	000c7ea8 	.word	0x000c7ea8

000be9bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be9bc:	b510      	push	{r4, lr}
   be9be:	2168      	movs	r1, #104	; 0x68
   be9c0:	4604      	mov	r4, r0
   be9c2:	f7f5 fb6e 	bl	b40a2 <_ZdlPvj>
   be9c6:	4620      	mov	r0, r4
   be9c8:	bd10      	pop	{r4, pc}

000be9ca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be9ca:	b510      	push	{r4, lr}
   be9cc:	2128      	movs	r1, #40	; 0x28
   be9ce:	4604      	mov	r4, r0
   be9d0:	f7f5 fb67 	bl	b40a2 <_ZdlPvj>
   be9d4:	4620      	mov	r0, r4
   be9d6:	bd10      	pop	{r4, pc}

000be9d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be9d8:	b510      	push	{r4, lr}
   be9da:	2130      	movs	r1, #48	; 0x30
   be9dc:	4604      	mov	r4, r0
   be9de:	f7f5 fb60 	bl	b40a2 <_ZdlPvj>
   be9e2:	4620      	mov	r0, r4
   be9e4:	bd10      	pop	{r4, pc}

000be9e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be9e6:	2168      	movs	r1, #104	; 0x68
   be9e8:	f7f5 bb5b 	b.w	b40a2 <_ZdlPvj>

000be9ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be9ec:	2128      	movs	r1, #40	; 0x28
   be9ee:	f7f5 bb58 	b.w	b40a2 <_ZdlPvj>

000be9f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be9f2:	2130      	movs	r1, #48	; 0x30
   be9f4:	f7f5 bb55 	b.w	b40a2 <_ZdlPvj>

000be9f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be9fa:	2500      	movs	r5, #0
   be9fc:	1cec      	adds	r4, r5, #3
   be9fe:	428c      	cmp	r4, r1
   bea00:	d80d      	bhi.n	bea1e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bea02:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bea04:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bea06:	5d87      	ldrb	r7, [r0, r6]
   bea08:	4297      	cmp	r7, r2
   bea0a:	d105      	bne.n	bea18 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bea0c:	4426      	add	r6, r4
   bea0e:	42b1      	cmp	r1, r6
   bea10:	d305      	bcc.n	bea1e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bea12:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bea14:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bea16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bea18:	3401      	adds	r4, #1
   bea1a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bea1c:	e7ee      	b.n	be9fc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bea1e:	2000      	movs	r0, #0
   bea20:	e7f9      	b.n	bea16 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bea24 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bea24:	4a02      	ldr	r2, [pc, #8]	; (bea30 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bea26:	4903      	ldr	r1, [pc, #12]	; (bea34 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bea28:	200a      	movs	r0, #10
   bea2a:	f7ff bb6d 	b.w	be108 <panic_>
   bea2e:	bf00      	nop
   bea30:	000bdc45 	.word	0x000bdc45
   bea34:	000c7d08 	.word	0x000c7d08

000bea38 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bea38:	b430      	push	{r4, r5}
   bea3a:	460d      	mov	r5, r1
   bea3c:	4611      	mov	r1, r2
   bea3e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bea40:	6803      	ldr	r3, [r0, #0]
   bea42:	6809      	ldr	r1, [r1, #0]
   bea44:	6828      	ldr	r0, [r5, #0]
   bea46:	e9d3 4300 	ldrd	r4, r3, [r3]
   bea4a:	46a4      	mov	ip, r4
      }
   bea4c:	bc30      	pop	{r4, r5}
   bea4e:	4760      	bx	ip

000bea50 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bea50:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bea52:	b538      	push	{r3, r4, r5, lr}
   bea54:	4604      	mov	r4, r0
	switch (__op)
   bea56:	d102      	bne.n	bea5e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bea58:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bea5a:	6023      	str	r3, [r4, #0]
	}
   bea5c:	e003      	b.n	bea66 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bea5e:	2a02      	cmp	r2, #2
   bea60:	d003      	beq.n	bea6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bea62:	2a03      	cmp	r2, #3
   bea64:	d00d      	beq.n	bea82 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bea66:	2000      	movs	r0, #0
   bea68:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bea6a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bea6c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bea6e:	f7f5 fb12 	bl	b4096 <_Znwj>
   bea72:	4603      	mov	r3, r0
   bea74:	2800      	cmp	r0, #0
   bea76:	d0f0      	beq.n	bea5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bea78:	e895 0003 	ldmia.w	r5, {r0, r1}
   bea7c:	e883 0003 	stmia.w	r3, {r0, r1}
   bea80:	e7eb      	b.n	bea5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bea82:	6800      	ldr	r0, [r0, #0]
   bea84:	2800      	cmp	r0, #0
   bea86:	d0ee      	beq.n	bea66 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bea88:	2108      	movs	r1, #8
   bea8a:	f7f5 fb0a 	bl	b40a2 <_ZdlPvj>
   bea8e:	e7ea      	b.n	bea66 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bea90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bea90:	b510      	push	{r4, lr}
   bea92:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bea94:	3058      	adds	r0, #88	; 0x58
   bea96:	f7f5 fd1d 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bea9a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bea9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   beaa2:	f7ff be5d 	b.w	be760 <_ZN6StringD1Ev>

000beaa6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   beaa6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   beaa8:	6843      	ldr	r3, [r0, #4]
   beaaa:	3b01      	subs	r3, #1
    {
   beaac:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   beaae:	6043      	str	r3, [r0, #4]
   beab0:	b963      	cbnz	r3, beacc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   beab2:	6803      	ldr	r3, [r0, #0]
   beab4:	689b      	ldr	r3, [r3, #8]
   beab6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   beab8:	68a3      	ldr	r3, [r4, #8]
   beaba:	3b01      	subs	r3, #1
   beabc:	60a3      	str	r3, [r4, #8]
   beabe:	b92b      	cbnz	r3, beacc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   beac0:	6823      	ldr	r3, [r4, #0]
   beac2:	4620      	mov	r0, r4
   beac4:	68db      	ldr	r3, [r3, #12]
    }
   beac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   beaca:	4718      	bx	r3
    }
   beacc:	bd10      	pop	{r4, pc}

000beace <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   beace:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bead2:	b2da      	uxtb	r2, r3
   bead4:	2a09      	cmp	r2, #9
   bead6:	d801      	bhi.n	beadc <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bead8:	4618      	mov	r0, r3
   beada:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   beadc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   beae0:	2b05      	cmp	r3, #5
   beae2:	d801      	bhi.n	beae8 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   beae4:	3857      	subs	r0, #87	; 0x57
   beae6:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   beae8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   beaec:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   beaee:	bf94      	ite	ls
   beaf0:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   beaf2:	f04f 30ff 	movhi.w	r0, #4294967295
}
   beaf6:	4770      	bx	lr

000beaf8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   beaf8:	b510      	push	{r4, lr}
            locked_(false) {
   beafa:	2300      	movs	r3, #0
   beafc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   beafe:	4b04      	ldr	r3, [pc, #16]	; (beb10 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   beb00:	4604      	mov	r4, r0
   beb02:	6818      	ldr	r0, [r3, #0]
   beb04:	f7ff f988 	bl	bde18 <os_mutex_recursive_lock>
        locked_ = true;
   beb08:	2301      	movs	r3, #1
   beb0a:	7023      	strb	r3, [r4, #0]
    }
   beb0c:	4620      	mov	r0, r4
   beb0e:	bd10      	pop	{r4, pc}
   beb10:	2003e63c 	.word	0x2003e63c

000beb14 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   beb14:	b510      	push	{r4, lr}
        if (locked_) {
   beb16:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   beb18:	4604      	mov	r4, r0
        if (locked_) {
   beb1a:	b11b      	cbz	r3, beb24 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   beb1c:	4b02      	ldr	r3, [pc, #8]	; (beb28 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   beb1e:	6818      	ldr	r0, [r3, #0]
   beb20:	f7ff f982 	bl	bde28 <os_mutex_recursive_unlock>
    }
   beb24:	4620      	mov	r0, r4
   beb26:	bd10      	pop	{r4, pc}
   beb28:	2003e63c 	.word	0x2003e63c

000beb2c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   beb2c:	b082      	sub	sp, #8
   beb2e:	4603      	mov	r3, r0
    address_ = addr;
   beb30:	6808      	ldr	r0, [r1, #0]
   beb32:	6849      	ldr	r1, [r1, #4]
   beb34:	466a      	mov	r2, sp
   beb36:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   beb38:	466a      	mov	r2, sp
   beb3a:	ca03      	ldmia	r2!, {r0, r1}
   beb3c:	6018      	str	r0, [r3, #0]
}
   beb3e:	4618      	mov	r0, r3
    address_ = addr.address_;
   beb40:	6059      	str	r1, [r3, #4]
}
   beb42:	b002      	add	sp, #8
   beb44:	4770      	bx	lr

000beb46 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   beb46:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   beb48:	7982      	ldrb	r2, [r0, #6]
   beb4a:	798b      	ldrb	r3, [r1, #6]
   beb4c:	429a      	cmp	r2, r3
   beb4e:	d106      	bne.n	beb5e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   beb50:	2206      	movs	r2, #6
   beb52:	f005 fd29 	bl	c45a8 <memcmp>
   beb56:	fab0 f080 	clz	r0, r0
   beb5a:	0940      	lsrs	r0, r0, #5
}
   beb5c:	bd08      	pop	{r3, pc}
    return false;
   beb5e:	2000      	movs	r0, #0
   beb60:	e7fc      	b.n	beb5c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000beb62 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   beb62:	f04f 33ff 	mov.w	r3, #4294967295
   beb66:	6003      	str	r3, [r0, #0]
   beb68:	8083      	strh	r3, [r0, #4]
}
   beb6a:	2000      	movs	r0, #0
   beb6c:	4770      	bx	lr

000beb6e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   beb6e:	b508      	push	{r3, lr}
   beb70:	4602      	mov	r2, r0
        : address_{} {
   beb72:	2100      	movs	r1, #0
   beb74:	6001      	str	r1, [r0, #0]
   beb76:	6041      	str	r1, [r0, #4]
    clear();
   beb78:	f7ff fff3 	bl	beb62 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   beb7c:	7191      	strb	r1, [r2, #6]
}
   beb7e:	4610      	mov	r0, r2
   beb80:	bd08      	pop	{r3, pc}
	...

000beb84 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   beb84:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   beb86:	2301      	movs	r3, #1
   beb88:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   beb8a:	4b05      	ldr	r3, [pc, #20]	; (beba0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   beb8c:	4602      	mov	r2, r0
   beb8e:	f103 0110 	add.w	r1, r3, #16
   beb92:	f853 4b04 	ldr.w	r4, [r3], #4
   beb96:	f842 4b04 	str.w	r4, [r2], #4
   beb9a:	428b      	cmp	r3, r1
   beb9c:	d1f9      	bne.n	beb92 <_ZN8particle7BleUuidC1Ev+0xe>
}
   beb9e:	bd10      	pop	{r4, pc}
   beba0:	000c7eb6 	.word	0x000c7eb6

000beba4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   beba4:	b510      	push	{r4, lr}
    if (uuid128) {
   beba6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   beba8:	4604      	mov	r4, r0
    if (uuid128) {
   bebaa:	b1b1      	cbz	r1, bebda <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bebac:	2a01      	cmp	r2, #1
   bebae:	f101 0210 	add.w	r2, r1, #16
   bebb2:	d10a      	bne.n	bebca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bebb4:	4601      	mov	r1, r0
   bebb6:	f853 0b04 	ldr.w	r0, [r3], #4
   bebba:	f841 0b04 	str.w	r0, [r1], #4
   bebbe:	4293      	cmp	r3, r2
   bebc0:	d1f9      	bne.n	bebb6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bebc2:	2301      	movs	r3, #1
   bebc4:	6123      	str	r3, [r4, #16]
}
   bebc6:	4620      	mov	r0, r4
   bebc8:	bd10      	pop	{r4, pc}
   bebca:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bebcc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bebd0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bebd4:	429a      	cmp	r2, r3
   bebd6:	d1f9      	bne.n	bebcc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bebd8:	e7f3      	b.n	bebc2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bebda:	2210      	movs	r2, #16
   bebdc:	f005 fd1c 	bl	c4618 <memset>
   bebe0:	e7f1      	b.n	bebc6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bebe2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bebe2:	b538      	push	{r3, r4, r5, lr}
   bebe4:	4604      	mov	r4, r0
   bebe6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bebe8:	461a      	mov	r2, r3
   bebea:	f7ff ffdb 	bl	beba4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bebee:	81a5      	strh	r5, [r4, #12]
}
   bebf0:	4620      	mov	r0, r4
   bebf2:	bd38      	pop	{r3, r4, r5, pc}

000bebf4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bebf4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bebf6:	6902      	ldr	r2, [r0, #16]
   bebf8:	b922      	cbnz	r2, bec04 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bebfa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bebfc:	3800      	subs	r0, #0
   bebfe:	bf18      	it	ne
   bec00:	2001      	movne	r0, #1
}
   bec02:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bec04:	4902      	ldr	r1, [pc, #8]	; (bec10 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bec06:	2210      	movs	r2, #16
   bec08:	f005 fcce 	bl	c45a8 <memcmp>
   bec0c:	e7f6      	b.n	bebfc <_ZNK8particle7BleUuid7isValidEv+0x8>
   bec0e:	bf00      	nop
   bec10:	000c7ed6 	.word	0x000c7ed6

000bec14 <_ZNK8particle7BleUuid4typeEv>:
}
   bec14:	6900      	ldr	r0, [r0, #16]
   bec16:	4770      	bx	lr

000bec18 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bec18:	b538      	push	{r3, r4, r5, lr}
   bec1a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bec1c:	2214      	movs	r2, #20
   bec1e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bec20:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bec22:	f005 fcf9 	bl	c4618 <memset>
    if (type_ == BleUuidType::SHORT) {
   bec26:	6923      	ldr	r3, [r4, #16]
   bec28:	b91b      	cbnz	r3, bec32 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bec2a:	89a3      	ldrh	r3, [r4, #12]
   bec2c:	802b      	strh	r3, [r5, #0]
}
   bec2e:	4628      	mov	r0, r5
   bec30:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bec32:	2301      	movs	r3, #1
   bec34:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bec36:	4621      	mov	r1, r4
   bec38:	462b      	mov	r3, r5
   bec3a:	f104 0210 	add.w	r2, r4, #16
   bec3e:	f851 0b04 	ldr.w	r0, [r1], #4
   bec42:	f843 0b04 	str.w	r0, [r3], #4
   bec46:	4291      	cmp	r1, r2
   bec48:	d1f9      	bne.n	bec3e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bec4a:	e7f0      	b.n	bec2e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bec4c <_ZNK8particle7BleUuid7shortedEv>:
}
   bec4c:	8980      	ldrh	r0, [r0, #12]
   bec4e:	4770      	bx	lr

000bec50 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bec50:	4770      	bx	lr

000bec52 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bec52:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bec54:	6902      	ldr	r2, [r0, #16]
   bec56:	690b      	ldr	r3, [r1, #16]
   bec58:	429a      	cmp	r2, r3
   bec5a:	d106      	bne.n	bec6a <_ZNK8particle7BleUuideqERKS0_+0x18>
   bec5c:	2210      	movs	r2, #16
   bec5e:	f005 fca3 	bl	c45a8 <memcmp>
   bec62:	fab0 f080 	clz	r0, r0
   bec66:	0940      	lsrs	r0, r0, #5
}
   bec68:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bec6a:	2000      	movs	r0, #0
   bec6c:	e7fc      	b.n	bec68 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bec70 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bec70:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bec72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bec76:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bec78:	4b34      	ldr	r3, [pc, #208]	; (bed4c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bec7a:	460c      	mov	r4, r1
   bec7c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bec7e:	4602      	mov	r2, r0
   bec80:	f103 0110 	add.w	r1, r3, #16
   bec84:	f853 0b04 	ldr.w	r0, [r3], #4
   bec88:	f842 0b04 	str.w	r0, [r2], #4
   bec8c:	428b      	cmp	r3, r1
   bec8e:	d1f9      	bne.n	bec84 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bec90:	b344      	cbz	r4, bece4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bec92:	2124      	movs	r1, #36	; 0x24
   bec94:	4620      	mov	r0, r4
   bec96:	f005 fd8c 	bl	c47b2 <strnlen>
   bec9a:	2804      	cmp	r0, #4
   bec9c:	f04f 0500 	mov.w	r5, #0
   beca0:	d123      	bne.n	becea <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   beca2:	f8ad 5004 	strh.w	r5, [sp, #4]
   beca6:	af01      	add	r7, sp, #4
   beca8:	1ca5      	adds	r5, r4, #2
   becaa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   becac:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   becb0:	f7ff ff0d 	bl	beace <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   becb4:	f1b0 0800 	subs.w	r8, r0, #0
   becb8:	db12      	blt.n	bece0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   becba:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   becbe:	f7ff ff06 	bl	beace <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   becc2:	2800      	cmp	r0, #0
   becc4:	db0c      	blt.n	bece0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   becc6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   becc8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   beccc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   becce:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   becd2:	d1eb      	bne.n	becac <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   becd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   becd8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   becda:	f89d 3004 	ldrb.w	r3, [sp, #4]
   becde:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bece0:	2300      	movs	r3, #0
   bece2:	6133      	str	r3, [r6, #16]
}
   bece4:	b002      	add	sp, #8
   bece6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   becea:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   becee:	2124      	movs	r1, #36	; 0x24
   becf0:	4620      	mov	r0, r4
   becf2:	f005 fd5e 	bl	c47b2 <strnlen>
   becf6:	42a8      	cmp	r0, r5
   becf8:	d807      	bhi.n	bed0a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   becfa:	4642      	mov	r2, r8
   becfc:	2100      	movs	r1, #0
   becfe:	4630      	mov	r0, r6
}
   bed00:	b002      	add	sp, #8
   bed02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bed06:	f005 bc87 	b.w	c4618 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bed0a:	f1b8 0f00 	cmp.w	r8, #0
   bed0e:	d0e9      	beq.n	bece4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bed10:	5d60      	ldrb	r0, [r4, r5]
   bed12:	f7ff fedc 	bl	beace <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bed16:	0603      	lsls	r3, r0, #24
   bed18:	d415      	bmi.n	bed46 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bed1a:	0100      	lsls	r0, r0, #4
   bed1c:	f108 38ff 	add.w	r8, r8, #4294967295
   bed20:	b2c7      	uxtb	r7, r0
   bed22:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bed26:	2124      	movs	r1, #36	; 0x24
   bed28:	4620      	mov	r0, r4
   bed2a:	f005 fd42 	bl	c47b2 <strnlen>
   bed2e:	3501      	adds	r5, #1
   bed30:	42a8      	cmp	r0, r5
   bed32:	d908      	bls.n	bed46 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bed34:	5d60      	ldrb	r0, [r4, r5]
   bed36:	f7ff feca 	bl	beace <_ZN8particle11hexToNibbleEc>
   bed3a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bed3c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bed3e:	bfa4      	itt	ge
   bed40:	4338      	orrge	r0, r7
   bed42:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bed46:	3501      	adds	r5, #1
   bed48:	e7d1      	b.n	becee <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bed4a:	bf00      	nop
   bed4c:	000c7eb6 	.word	0x000c7eb6

000bed50 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bed50:	b513      	push	{r0, r1, r4, lr}
   bed52:	4604      	mov	r4, r0
   bed54:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bed56:	f7ff ff15 	bl	beb84 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bed5a:	4620      	mov	r0, r4
   bed5c:	9901      	ldr	r1, [sp, #4]
   bed5e:	f7ff ff87 	bl	bec70 <_ZN8particle7BleUuid9constructEPKc>
}
   bed62:	4620      	mov	r0, r4
   bed64:	b002      	add	sp, #8
   bed66:	bd10      	pop	{r4, pc}

000bed68 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bed68:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bed6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bed6e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bed70:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bed72:	8043      	strh	r3, [r0, #2]
   bed74:	220e      	movs	r2, #14
   bed76:	4629      	mov	r1, r5
   bed78:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bed7a:	7105      	strb	r5, [r0, #4]
   bed7c:	3006      	adds	r0, #6
   bed7e:	f005 fc4b 	bl	c4618 <memset>
   bed82:	f104 0014 	add.w	r0, r4, #20
   bed86:	f7ff fefd 	bl	beb84 <_ZN8particle7BleUuidC1Ev>
   bed8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bed8e:	f7ff fef9 	bl	beb84 <_ZN8particle7BleUuidC1Ev>
   bed92:	4904      	ldr	r1, [pc, #16]	; (beda4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bed94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bed98:	f7ff fd2d 	bl	be7f6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bed9c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bed9e:	4620      	mov	r0, r4
   beda0:	bd38      	pop	{r3, r4, r5, pc}
   beda2:	bf00      	nop
   beda4:	000c7f40 	.word	0x000c7f40

000beda8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   beda8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bedaa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bedae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bedb2:	4293      	cmp	r3, r2
   bedb4:	4618      	mov	r0, r3
   bedb6:	d006      	beq.n	bedc6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bedb8:	6804      	ldr	r4, [r0, #0]
   bedba:	8824      	ldrh	r4, [r4, #0]
   bedbc:	428c      	cmp	r4, r1
   bedbe:	f103 0308 	add.w	r3, r3, #8
   bedc2:	d1f6      	bne.n	bedb2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bedc4:	bd10      	pop	{r4, pc}
        return nullptr;
   bedc6:	2000      	movs	r0, #0
   bedc8:	e7fc      	b.n	bedc4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bedcc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bedcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bedce:	4606      	mov	r6, r0
   bedd0:	b085      	sub	sp, #20
   bedd2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bedd4:	460d      	mov	r5, r1
   bedd6:	2900      	cmp	r1, #0
   bedd8:	d050      	beq.n	bee7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bedda:	2a00      	cmp	r2, #0
   beddc:	d04e      	beq.n	bee7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bedde:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bede0:	7823      	ldrb	r3, [r4, #0]
   bede2:	2af4      	cmp	r2, #244	; 0xf4
   bede4:	bf28      	it	cs
   bede6:	22f4      	movcs	r2, #244	; 0xf4
   bede8:	b343      	cbz	r3, bee3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bedea:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bedec:	0798      	lsls	r0, r3, #30
   bedee:	d509      	bpl.n	bee04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bedf0:	89a0      	ldrh	r0, [r4, #12]
   bedf2:	9203      	str	r2, [sp, #12]
   bedf4:	2300      	movs	r3, #0
   bedf6:	f7fe ff89 	bl	bdd0c <hal_ble_gatt_server_set_characteristic_value>
   bedfa:	2800      	cmp	r0, #0
   bedfc:	9a03      	ldr	r2, [sp, #12]
   bedfe:	da03      	bge.n	bee08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bee00:	b005      	add	sp, #20
   bee02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bee04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bee08:	6834      	ldr	r4, [r6, #0]
   bee0a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bee0c:	06d9      	lsls	r1, r3, #27
   bee0e:	d509      	bpl.n	bee24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bee10:	2f01      	cmp	r7, #1
   bee12:	d007      	beq.n	bee24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bee14:	89a0      	ldrh	r0, [r4, #12]
   bee16:	2300      	movs	r3, #0
   bee18:	4629      	mov	r1, r5
}
   bee1a:	b005      	add	sp, #20
   bee1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bee20:	f7fe bfa6 	b.w	bdd70 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bee24:	069b      	lsls	r3, r3, #26
   bee26:	d5eb      	bpl.n	bee00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bee28:	2f02      	cmp	r7, #2
   bee2a:	d0e9      	beq.n	bee00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bee2c:	89a0      	ldrh	r0, [r4, #12]
   bee2e:	2300      	movs	r3, #0
   bee30:	4629      	mov	r1, r5
}
   bee32:	b005      	add	sp, #20
   bee34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bee38:	f7fe bfa4 	b.w	bdd84 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bee3c:	8860      	ldrh	r0, [r4, #2]
   bee3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bee42:	4288      	cmp	r0, r1
   bee44:	d01c      	beq.n	bee80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bee46:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bee48:	074e      	lsls	r6, r1, #29
   bee4a:	d501      	bpl.n	bee50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bee4c:	2f01      	cmp	r7, #1
   bee4e:	d104      	bne.n	bee5a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bee50:	070b      	lsls	r3, r1, #28
   bee52:	d409      	bmi.n	bee68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bee54:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bee58:	e7d2      	b.n	bee00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bee5a:	89a1      	ldrh	r1, [r4, #12]
   bee5c:	9300      	str	r3, [sp, #0]
   bee5e:	4613      	mov	r3, r2
   bee60:	462a      	mov	r2, r5
   bee62:	f7fe ff67 	bl	bdd34 <hal_ble_gatt_client_write_without_response>
   bee66:	e7cb      	b.n	bee00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bee68:	2f02      	cmp	r7, #2
   bee6a:	d0f3      	beq.n	bee54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bee6c:	2300      	movs	r3, #0
   bee6e:	89a1      	ldrh	r1, [r4, #12]
   bee70:	9300      	str	r3, [sp, #0]
   bee72:	4613      	mov	r3, r2
   bee74:	462a      	mov	r2, r5
   bee76:	f7fe ff53 	bl	bdd20 <hal_ble_gatt_client_write_with_response>
   bee7a:	e7c1      	b.n	bee00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bee7c:	4802      	ldr	r0, [pc, #8]	; (bee88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bee7e:	e7bf      	b.n	bee00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bee80:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bee84:	e7bc      	b.n	bee00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bee86:	bf00      	nop
   bee88:	fffffef2 	.word	0xfffffef2

000bee8c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bee8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bee90:	2600      	movs	r6, #0
   bee92:	6006      	str	r6, [r0, #0]
   bee94:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bee96:	2028      	movs	r0, #40	; 0x28
   bee98:	460c      	mov	r4, r1
   bee9a:	f7f5 f8fc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bee9e:	1e05      	subs	r5, r0, #0
   beea0:	f105 080c 	add.w	r8, r5, #12
   beea4:	d00f      	beq.n	beec6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   beea6:	2301      	movs	r3, #1
   beea8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   beeac:	4b08      	ldr	r3, [pc, #32]	; (beed0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   beeae:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   beeb0:	4640      	mov	r0, r8
   beeb2:	f7ff fe67 	bl	beb84 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   beeb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   beeb8:	622e      	str	r6, [r5, #32]
   beeba:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   beebe:	4646      	mov	r6, r8
   beec0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   beec2:	6823      	ldr	r3, [r4, #0]
   beec4:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   beec6:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   beeca:	4638      	mov	r0, r7
   beecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   beed0:	000c7e78 	.word	0x000c7e78

000beed4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   beed4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   beed6:	2500      	movs	r5, #0
   beed8:	6005      	str	r5, [r0, #0]
   beeda:	4606      	mov	r6, r0
   beedc:	2030      	movs	r0, #48	; 0x30
   beede:	f7f5 f8da 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   beee2:	4604      	mov	r4, r0
   beee4:	b188      	cbz	r0, bef0a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   beee6:	2301      	movs	r3, #1
   beee8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   beeec:	4b09      	ldr	r3, [pc, #36]	; (bef14 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   beeee:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   beef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   beef4:	8183      	strh	r3, [r0, #12]
   beef6:	300e      	adds	r0, #14
   beef8:	f7ff fe39 	bl	beb6e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   beefc:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bef00:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bef04:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bef08:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bef0a:	6074      	str	r4, [r6, #4]
   bef0c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bef0e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bef10:	4630      	mov	r0, r6
   bef12:	bd70      	pop	{r4, r5, r6, pc}
   bef14:	000c7e94 	.word	0x000c7e94

000bef18 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bef18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bef1a:	460d      	mov	r5, r1
   bef1c:	4604      	mov	r4, r0
    WiringBleLock lk;
   bef1e:	a801      	add	r0, sp, #4
   bef20:	f7ff fdea 	bl	beaf8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bef24:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bef26:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bef2a:	6023      	str	r3, [r4, #0]
   bef2c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bef30:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bef32:	a801      	add	r0, sp, #4
   bef34:	f7ff fdee 	bl	beb14 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bef38:	4620      	mov	r0, r4
   bef3a:	b003      	add	sp, #12
   bef3c:	bd30      	pop	{r4, r5, pc}

000bef3e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bef3e:	b530      	push	{r4, r5, lr}
   bef40:	4605      	mov	r5, r0
   bef42:	b087      	sub	sp, #28
   bef44:	460c      	mov	r4, r1
    WiringBleLock lk;
   bef46:	a801      	add	r0, sp, #4
   bef48:	f7ff fdd6 	bl	beaf8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bef4c:	682a      	ldr	r2, [r5, #0]
   bef4e:	6823      	ldr	r3, [r4, #0]
   bef50:	8812      	ldrh	r2, [r2, #0]
   bef52:	881b      	ldrh	r3, [r3, #0]
   bef54:	429a      	cmp	r2, r3
   bef56:	d10d      	bne.n	bef74 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bef58:	4629      	mov	r1, r5
   bef5a:	a802      	add	r0, sp, #8
   bef5c:	f7ff ffdc 	bl	bef18 <_ZNK8particle13BlePeerDevice7addressEv>
   bef60:	4621      	mov	r1, r4
   bef62:	a804      	add	r0, sp, #16
   bef64:	f7ff ffd8 	bl	bef18 <_ZNK8particle13BlePeerDevice7addressEv>
   bef68:	a904      	add	r1, sp, #16
   bef6a:	a802      	add	r0, sp, #8
   bef6c:	f7ff fdeb 	bl	beb46 <_ZNK8particle10BleAddresseqERKS0_>
   bef70:	4604      	mov	r4, r0
   bef72:	b900      	cbnz	r0, bef76 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bef74:	2400      	movs	r4, #0
    WiringBleLock lk;
   bef76:	a801      	add	r0, sp, #4
   bef78:	f7ff fdcc 	bl	beb14 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bef7c:	4620      	mov	r0, r4
   bef7e:	b007      	add	sp, #28
   bef80:	bd30      	pop	{r4, r5, pc}
	...

000bef84 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bef84:	b510      	push	{r4, lr}
   bef86:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bef88:	2064      	movs	r0, #100	; 0x64
   bef8a:	f7f5 f884 	bl	b4096 <_Znwj>
   bef8e:	b168      	cbz	r0, befac <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bef90:	2300      	movs	r3, #0
   bef92:	e9c0 3300 	strd	r3, r3, [r0]
   bef96:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bef9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bef9e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   befa2:	6203      	str	r3, [r0, #32]
   befa4:	62c3      	str	r3, [r0, #44]	; 0x2c
   befa6:	63c3      	str	r3, [r0, #60]	; 0x3c
   befa8:	64c3      	str	r3, [r0, #76]	; 0x4c
   befaa:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   befac:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   befae:	b920      	cbnz	r0, befba <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   befb0:	4a0a      	ldr	r2, [pc, #40]	; (befdc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   befb2:	490b      	ldr	r1, [pc, #44]	; (befe0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   befb4:	200a      	movs	r0, #10
   befb6:	f7ff f8a7 	bl	be108 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   befba:	2000      	movs	r0, #0
   befbc:	f7fe fe6a 	bl	bdc94 <hal_ble_stack_init>
   befc0:	b120      	cbz	r0, befcc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   befc2:	4a06      	ldr	r2, [pc, #24]	; (befdc <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   befc4:	4907      	ldr	r1, [pc, #28]	; (befe4 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   befc6:	200a      	movs	r0, #10
   befc8:	f7ff f89e 	bl	be108 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   befcc:	6821      	ldr	r1, [r4, #0]
   befce:	4806      	ldr	r0, [pc, #24]	; (befe8 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   befd0:	2200      	movs	r2, #0
   befd2:	f7fe fec3 	bl	bdd5c <hal_ble_set_callback_on_periph_link_events>
}
   befd6:	4620      	mov	r0, r4
   befd8:	bd10      	pop	{r4, pc}
   befda:	bf00      	nop
   befdc:	000bdc45 	.word	0x000bdc45
   befe0:	000c7d08 	.word	0x000c7d08
   befe4:	000c7d46 	.word	0x000c7d46
   befe8:	000bf5b9 	.word	0x000bf5b9

000befec <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   befec:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   befee:	4c0a      	ldr	r4, [pc, #40]	; (bf018 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   beff0:	7823      	ldrb	r3, [r4, #0]
   beff2:	f3bf 8f5b 	dmb	ish
   beff6:	07db      	lsls	r3, r3, #31
   beff8:	d40c      	bmi.n	bf014 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   beffa:	4620      	mov	r0, r4
   beffc:	f7f5 f860 	bl	b40c0 <__cxa_guard_acquire>
   bf000:	b140      	cbz	r0, bf014 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bf002:	4806      	ldr	r0, [pc, #24]	; (bf01c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bf004:	f7ff ffbe 	bl	bef84 <_ZN8particle14BleLocalDeviceC1Ev>
   bf008:	4620      	mov	r0, r4
   bf00a:	f7f5 f85e 	bl	b40ca <__cxa_guard_release>
   bf00e:	4804      	ldr	r0, [pc, #16]	; (bf020 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bf010:	f005 fab4 	bl	c457c <atexit>
    return instance;
}
   bf014:	4801      	ldr	r0, [pc, #4]	; (bf01c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bf016:	bd10      	pop	{r4, pc}
   bf018:	2003e634 	.word	0x2003e634
   bf01c:	2003e640 	.word	0x2003e640
   bf020:	000bf271 	.word	0x000bf271

000bf024 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bf024:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bf026:	6803      	ldr	r3, [r0, #0]
   bf028:	3b09      	subs	r3, #9
   bf02a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bf02c:	b08d      	sub	sp, #52	; 0x34
   bf02e:	4604      	mov	r4, r0
   bf030:	460d      	mov	r5, r1
    switch (event->type) {
   bf032:	d811      	bhi.n	bf058 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bf034:	f7ff ffda 	bl	befec <_ZN8particle14BleLocalDevice11getInstanceEv>
   bf038:	88a1      	ldrh	r1, [r4, #4]
   bf03a:	6800      	ldr	r0, [r0, #0]
   bf03c:	f7ff feb4 	bl	beda8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   bf040:	4603      	mov	r3, r0
   bf042:	b958      	cbnz	r0, bf05c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   bf044:	2220      	movs	r2, #32
   bf046:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bf04a:	4a0b      	ldr	r2, [pc, #44]	; (bf078 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bf04c:	9200      	str	r2, [sp, #0]
   bf04e:	490b      	ldr	r1, [pc, #44]	; (bf07c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bf050:	aa04      	add	r2, sp, #16
   bf052:	2032      	movs	r0, #50	; 0x32
   bf054:	f7ff f860 	bl	be118 <log_message>
}
   bf058:	b00d      	add	sp, #52	; 0x34
   bf05a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bf05c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bf05e:	2a00      	cmp	r2, #0
   bf060:	d0fa      	beq.n	bf058 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bf062:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf066:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bf06a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bf06e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bf070:	aa04      	add	r2, sp, #16
   bf072:	a903      	add	r1, sp, #12
   bf074:	47a0      	blx	r4
}
   bf076:	e7ef      	b.n	bf058 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bf078:	000c7d88 	.word	0x000c7d88
   bf07c:	000c7d1f 	.word	0x000c7d1f

000bf080 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bf080:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bf082:	2000      	movs	r0, #0
   bf084:	f7fe fe06 	bl	bdc94 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bf088:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bf08c:	bd08      	pop	{r3, pc}

000bf08e <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bf08e:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bf090:	2100      	movs	r1, #0
   bf092:	f7fe be07 	b.w	bdca4 <hal_ble_gap_set_tx_power>

000bf096 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bf096:	b919      	cbnz	r1, bf0a0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bf098:	460a      	mov	r2, r1
   bf09a:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bf09c:	f7fe be0a 	b.w	bdcb4 <hal_ble_gap_set_advertising_data>
   bf0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf0a4:	2200      	movs	r2, #0
   bf0a6:	e7f9      	b.n	bf09c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bf0a8 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bf0a8:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bf0aa:	69d8      	ldr	r0, [r3, #28]
}
   bf0ac:	2800      	cmp	r0, #0
   bf0ae:	bfd4      	ite	le
   bf0b0:	2000      	movle	r0, #0
   bf0b2:	2001      	movgt	r0, #1
   bf0b4:	4770      	bx	lr

000bf0b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0b6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf0b8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf0bc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf0be:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bf0c2:	42ae      	cmp	r6, r5
   bf0c4:	d004      	beq.n	bf0d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bf0c6:	4628      	mov	r0, r5
   bf0c8:	f7ff fb4a 	bl	be760 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bf0cc:	3510      	adds	r5, #16
   bf0ce:	e7f8      	b.n	bf0c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf0d0:	6820      	ldr	r0, [r4, #0]
   bf0d2:	f7ff f92f 	bl	be334 <free>
}
   bf0d6:	4620      	mov	r0, r4
   bf0d8:	bd70      	pop	{r4, r5, r6, pc}

000bf0da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bf0da:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bf0dc:	1e14      	subs	r4, r2, #0
   bf0de:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bf0e0:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bf0e2:	db02      	blt.n	bf0ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bf0e4:	1862      	adds	r2, r4, r1
   bf0e6:	429a      	cmp	r2, r3
   bf0e8:	dd00      	ble.n	bf0ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bf0ea:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bf0ec:	682a      	ldr	r2, [r5, #0]
   bf0ee:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bf0f0:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bf0f2:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf0f4:	1a52      	subs	r2, r2, r1
   bf0f6:	f005 fa75 	bl	c45e4 <memmove>
    size_ -= n;
   bf0fa:	686a      	ldr	r2, [r5, #4]
   bf0fc:	1b12      	subs	r2, r2, r4
   bf0fe:	606a      	str	r2, [r5, #4]
}
   bf100:	bd38      	pop	{r3, r4, r5, pc}

000bf102 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bf102:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bf104:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bf106:	4604      	mov	r4, r0
   bf108:	460d      	mov	r5, r1
   bf10a:	ab01      	add	r3, sp, #4
   bf10c:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf110:	f7ff fc72 	bl	be9f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bf114:	4602      	mov	r2, r0
   bf116:	b138      	cbz	r0, bf128 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bf118:	9901      	ldr	r1, [sp, #4]
   bf11a:	4620      	mov	r0, r4
   bf11c:	f7ff ffdd 	bl	bf0da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bf120:	4629      	mov	r1, r5
   bf122:	4620      	mov	r0, r4
   bf124:	f7ff ffed 	bl	bf102 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bf128:	b003      	add	sp, #12
   bf12a:	bd30      	pop	{r4, r5, pc}

000bf12c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bf12c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bf12e:	460c      	mov	r4, r1
   bf130:	b929      	cbnz	r1, bf13e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bf132:	460a      	mov	r2, r1
   bf134:	4608      	mov	r0, r1
}
   bf136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bf13a:	f7fe bdc3 	b.w	bdcc4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   bf13e:	2101      	movs	r1, #1
   bf140:	4620      	mov	r0, r4
   bf142:	f7ff ffde 	bl	bf102 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bf146:	e9d4 0100 	ldrd	r0, r1, [r4]
   bf14a:	2200      	movs	r2, #0
   bf14c:	e7f3      	b.n	bf136 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000bf14e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   bf14e:	b538      	push	{r3, r4, r5, lr}
   bf150:	4604      	mov	r4, r0
   bf152:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   bf154:	f7ff ff9f 	bl	bf096 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   bf158:	2800      	cmp	r0, #0
   bf15a:	db0a      	blt.n	bf172 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   bf15c:	4629      	mov	r1, r5
   bf15e:	4620      	mov	r0, r4
   bf160:	f7ff ffe4 	bl	bf12c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   bf164:	2800      	cmp	r0, #0
   bf166:	db04      	blt.n	bf172 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   bf168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bf16c:	2000      	movs	r0, #0
   bf16e:	f7fe bdb1 	b.w	bdcd4 <hal_ble_gap_start_advertising>
}
   bf172:	bd38      	pop	{r3, r4, r5, pc}

000bf174 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bf174:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf176:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bf178:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bf17a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf17c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bf17e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf180:	f7f4 ff89 	bl	b4096 <_Znwj>
   bf184:	b118      	cbz	r0, bf18e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bf186:	682b      	ldr	r3, [r5, #0]
   bf188:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf18a:	686b      	ldr	r3, [r5, #4]
   bf18c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bf18e:	4b03      	ldr	r3, [pc, #12]	; (bf19c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bf190:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf192:	4b03      	ldr	r3, [pc, #12]	; (bf1a0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf194:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf196:	60a3      	str	r3, [r4, #8]
      }
   bf198:	4620      	mov	r0, r4
   bf19a:	bd38      	pop	{r3, r4, r5, pc}
   bf19c:	000bea39 	.word	0x000bea39
   bf1a0:	000bea51 	.word	0x000bea51

000bf1a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bf1a4:	680b      	ldr	r3, [r1, #0]
   bf1a6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bf1a8:	b113      	cbz	r3, bf1b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bf1aa:	685a      	ldr	r2, [r3, #4]
   bf1ac:	3201      	adds	r2, #1
   bf1ae:	605a      	str	r2, [r3, #4]
      }
   bf1b0:	4770      	bx	lr

000bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bf1b2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf1b4:	f851 3b04 	ldr.w	r3, [r1], #4
   bf1b8:	4604      	mov	r4, r0
   bf1ba:	f840 3b04 	str.w	r3, [r0], #4
   bf1be:	f7ff fff1 	bl	bf1a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bf1c2:	6823      	ldr	r3, [r4, #0]
   bf1c4:	b90b      	cbnz	r3, bf1ca <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bf1c6:	f7ff fc2d 	bl	bea24 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bf1ca:	4620      	mov	r0, r4
   bf1cc:	bd10      	pop	{r4, pc}

000bf1ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bf1ce:	b510      	push	{r4, lr}
   bf1d0:	f851 3b04 	ldr.w	r3, [r1], #4
   bf1d4:	4604      	mov	r4, r0
   bf1d6:	f840 3b04 	str.w	r3, [r0], #4
   bf1da:	f7ff ffe3 	bl	bf1a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bf1de:	4620      	mov	r0, r4
   bf1e0:	bd10      	pop	{r4, pc}

000bf1e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bf1e2:	b510      	push	{r4, lr}
   bf1e4:	f851 3b04 	ldr.w	r3, [r1], #4
   bf1e8:	4604      	mov	r4, r0
   bf1ea:	f840 3b04 	str.w	r3, [r0], #4
   bf1ee:	f7ff ffd9 	bl	bf1a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bf1f2:	4620      	mov	r0, r4
   bf1f4:	bd10      	pop	{r4, pc}

000bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bf1f6:	b510      	push	{r4, lr}
   bf1f8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bf1fa:	6800      	ldr	r0, [r0, #0]
   bf1fc:	b108      	cbz	r0, bf202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bf1fe:	f7ff fc52 	bl	beaa6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bf202:	4620      	mov	r0, r4
   bf204:	bd10      	pop	{r4, pc}

000bf206 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bf206:	b510      	push	{r4, lr}
   bf208:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf20a:	3004      	adds	r0, #4
   bf20c:	f7ff fff3 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf210:	4620      	mov	r0, r4
   bf212:	bd10      	pop	{r4, pc}

000bf214 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf214:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf216:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf21a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf21c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf220:	42ae      	cmp	r6, r5
   bf222:	d004      	beq.n	bf22e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bf224:	1d28      	adds	r0, r5, #4
   bf226:	f7ff ffe6 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf22a:	3508      	adds	r5, #8
   bf22c:	e7f8      	b.n	bf220 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf22e:	6820      	ldr	r0, [r4, #0]
   bf230:	f7ff f880 	bl	be334 <free>
}
   bf234:	4620      	mov	r0, r4
   bf236:	bd70      	pop	{r4, r5, r6, pc}

000bf238 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf238:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf23a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf23e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf240:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf244:	42ae      	cmp	r6, r5
   bf246:	d004      	beq.n	bf252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bf248:	1d28      	adds	r0, r5, #4
   bf24a:	f7ff ffd4 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf24e:	3508      	adds	r5, #8
   bf250:	e7f8      	b.n	bf244 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf252:	6820      	ldr	r0, [r4, #0]
   bf254:	f7ff f86e 	bl	be334 <free>
}
   bf258:	4620      	mov	r0, r4
   bf25a:	bd70      	pop	{r4, r5, r6, pc}

000bf25c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf25c:	b510      	push	{r4, lr}
   bf25e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bf260:	3024      	adds	r0, #36	; 0x24
   bf262:	f7ff ffe9 	bl	bf238 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bf266:	f104 0018 	add.w	r0, r4, #24
   bf26a:	f7ff ffd3 	bl	bf214 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bf26e:	bd10      	pop	{r4, pc}

000bf270 <__tcf_0>:
    static BleLocalDevice instance;
   bf270:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bf272:	4b17      	ldr	r3, [pc, #92]	; (bf2d0 <__tcf_0+0x60>)
   bf274:	681c      	ldr	r4, [r3, #0]
   bf276:	b354      	cbz	r4, bf2ce <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bf278:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf27c:	f7f5 f92a 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf280:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf284:	f7f5 f926 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf288:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf28c:	f7f5 f922 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf290:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf294:	f7f5 f91e 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bf298:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bf29c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf2a0:	42ae      	cmp	r6, r5
   bf2a2:	d004      	beq.n	bf2ae <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bf2a4:	1d28      	adds	r0, r5, #4
   bf2a6:	f7ff ffa6 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf2aa:	3508      	adds	r5, #8
   bf2ac:	e7f8      	b.n	bf2a0 <__tcf_0+0x30>
    ::free(ptr);
   bf2ae:	69a0      	ldr	r0, [r4, #24]
   bf2b0:	f7ff f840 	bl	be334 <free>
    ~BleLocalDeviceImpl() = default;
   bf2b4:	f104 000c 	add.w	r0, r4, #12
   bf2b8:	f7ff ffbe 	bl	bf238 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bf2bc:	4620      	mov	r0, r4
   bf2be:	f7ff ffa9 	bl	bf214 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bf2c2:	4620      	mov	r0, r4
   bf2c4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bf2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bf2ca:	f7f4 beea 	b.w	b40a2 <_ZdlPvj>
   bf2ce:	bd70      	pop	{r4, r5, r6, pc}
   bf2d0:	2003e640 	.word	0x2003e640

000bf2d4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bf2d4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bf2d6:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf2d8:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bf2dc:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bf2e0:	6803      	ldr	r3, [r0, #0]
   bf2e2:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf2e4:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf2e6:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bf2e8:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bf2ea:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bf2ec:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bf2ee:	f7ff ff82 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bf2f2:	b002      	add	sp, #8
   bf2f4:	bd10      	pop	{r4, pc}

000bf2f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bf2f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf2f8:	b510      	push	{r4, lr}
      if (_M_empty())
   bf2fa:	b90a      	cbnz	r2, bf300 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bf2fc:	f002 ff66 	bl	c21cc <_ZSt25__throw_bad_function_callv>
    }
   bf300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf304:	68c3      	ldr	r3, [r0, #12]
   bf306:	4718      	bx	r3

000bf308 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bf308:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bf30a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bf30c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bf30e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bf310:	dd03      	ble.n	bf31a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bf312:	f7ff f817 	bl	be344 <realloc>
            if (!d) {
   bf316:	b918      	cbnz	r0, bf320 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bf318:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bf31a:	f7ff f80b 	bl	be334 <free>
        T* d = nullptr;
   bf31e:	2000      	movs	r0, #0
        data_ = d;
   bf320:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bf322:	60a5      	str	r5, [r4, #8]
        return true;
   bf324:	2001      	movs	r0, #1
   bf326:	e7f7      	b.n	bf318 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bf328 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bf328:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bf32a:	6883      	ldr	r3, [r0, #8]
   bf32c:	428b      	cmp	r3, r1
   bf32e:	da02      	bge.n	bf336 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bf330:	f7ff ffea 	bl	bf308 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bf334:	bd08      	pop	{r3, pc}
    return true;
   bf336:	2001      	movs	r0, #1
   bf338:	e7fc      	b.n	bf334 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bf33a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf33e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf340:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf342:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf344:	4419      	add	r1, r3
   bf346:	6883      	ldr	r3, [r0, #8]
   bf348:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf34a:	4604      	mov	r4, r0
   bf34c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf34e:	dc12      	bgt.n	bf376 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bf350:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf352:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf354:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf356:	1bd2      	subs	r2, r2, r7
   bf358:	4631      	mov	r1, r6
   bf35a:	1970      	adds	r0, r6, r5
   bf35c:	f005 f942 	bl	c45e4 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bf360:	462a      	mov	r2, r5
   bf362:	4641      	mov	r1, r8
   bf364:	4630      	mov	r0, r6
   bf366:	f005 f92f 	bl	c45c8 <memcpy>
    size_ += n;
   bf36a:	6863      	ldr	r3, [r4, #4]
   bf36c:	442b      	add	r3, r5
   bf36e:	6063      	str	r3, [r4, #4]
    return true;
   bf370:	2001      	movs	r0, #1
}
   bf372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf376:	f7ff ffc7 	bl	bf308 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bf37a:	2800      	cmp	r0, #0
   bf37c:	d1e8      	bne.n	bf350 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bf37e:	e7f8      	b.n	bf372 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bf380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bf380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf382:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf384:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bf388:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bf38a:	4604      	mov	r4, r0
   bf38c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf38e:	da0b      	bge.n	bf3a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bf390:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf392:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf394:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf396:	1b52      	subs	r2, r2, r5
   bf398:	1c48      	adds	r0, r1, #1
   bf39a:	f005 f923 	bl	c45e4 <memmove>
    new(p) T(std::move(value));
   bf39e:	557e      	strb	r6, [r7, r5]
    ++size_;
   bf3a0:	6863      	ldr	r3, [r4, #4]
   bf3a2:	3301      	adds	r3, #1
   bf3a4:	6063      	str	r3, [r4, #4]
}
   bf3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf3a8:	3101      	adds	r1, #1
   bf3aa:	f7ff ffad 	bl	bf308 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bf3ae:	2800      	cmp	r0, #0
   bf3b0:	d1ee      	bne.n	bf390 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bf3b2:	e7f8      	b.n	bf3a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bf3b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf3b4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bf3b6:	6841      	ldr	r1, [r0, #4]
   bf3b8:	f7ff bfe2 	b.w	bf380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bf3bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bf3bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bf3c0:	4604      	mov	r4, r0
   bf3c2:	461d      	mov	r5, r3
   bf3c4:	460f      	mov	r7, r1
   bf3c6:	ab01      	add	r3, sp, #4
   bf3c8:	4690      	mov	r8, r2
   bf3ca:	460a      	mov	r2, r1
   bf3cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf3d0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bf3d4:	f7ff fb10 	bl	be9f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bf3d8:	1cae      	adds	r6, r5, #2
   bf3da:	6863      	ldr	r3, [r4, #4]
   bf3dc:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bf3de:	f1b9 0f00 	cmp.w	r9, #0
   bf3e2:	d126      	bne.n	bf432 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bf3e4:	b328      	cbz	r0, bf432 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bf3e6:	4433      	add	r3, r6
   bf3e8:	1a1b      	subs	r3, r3, r0
   bf3ea:	2bff      	cmp	r3, #255	; 0xff
   bf3ec:	d809      	bhi.n	bf402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bf3ee:	9901      	ldr	r1, [sp, #4]
   bf3f0:	4620      	mov	r0, r4
   bf3f2:	f7ff fe72 	bl	bf0da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bf3f6:	6861      	ldr	r1, [r4, #4]
   bf3f8:	4620      	mov	r0, r4
   bf3fa:	4431      	add	r1, r6
   bf3fc:	f7ff ff94 	bl	bf328 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bf400:	b918      	cbnz	r0, bf40a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bf402:	6860      	ldr	r0, [r4, #4]
}
   bf404:	b003      	add	sp, #12
   bf406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bf40a:	1c6a      	adds	r2, r5, #1
   bf40c:	9901      	ldr	r1, [sp, #4]
   bf40e:	b2d2      	uxtb	r2, r2
   bf410:	4620      	mov	r0, r4
   bf412:	f7ff ffb5 	bl	bf380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bf416:	9901      	ldr	r1, [sp, #4]
   bf418:	463a      	mov	r2, r7
   bf41a:	3101      	adds	r1, #1
   bf41c:	4620      	mov	r0, r4
   bf41e:	f7ff ffaf 	bl	bf380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bf422:	9901      	ldr	r1, [sp, #4]
   bf424:	462b      	mov	r3, r5
   bf426:	4642      	mov	r2, r8
   bf428:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bf42a:	4620      	mov	r0, r4
   bf42c:	f7ff ff85 	bl	bf33a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bf430:	e7e7      	b.n	bf402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bf432:	18f1      	adds	r1, r6, r3
   bf434:	29ff      	cmp	r1, #255	; 0xff
   bf436:	d8e4      	bhi.n	bf402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bf438:	4620      	mov	r0, r4
   bf43a:	f7ff ff75 	bl	bf328 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bf43e:	2800      	cmp	r0, #0
   bf440:	d0df      	beq.n	bf402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bf442:	1c69      	adds	r1, r5, #1
   bf444:	b2c9      	uxtb	r1, r1
   bf446:	4620      	mov	r0, r4
   bf448:	f7ff ffb4 	bl	bf3b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bf44c:	4639      	mov	r1, r7
   bf44e:	4620      	mov	r0, r4
   bf450:	f7ff ffb0 	bl	bf3b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bf454:	6861      	ldr	r1, [r4, #4]
   bf456:	462b      	mov	r3, r5
   bf458:	4642      	mov	r2, r8
   bf45a:	e7e6      	b.n	bf42a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bf45c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bf45c:	b430      	push	{r4, r5}
   bf45e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bf462:	b11a      	cbz	r2, bf46c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bf464:	9502      	str	r5, [sp, #8]
}
   bf466:	bc30      	pop	{r4, r5}
   bf468:	f7ff bfa8 	b.w	bf3bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bf46c:	6840      	ldr	r0, [r0, #4]
}
   bf46e:	bc30      	pop	{r4, r5}
   bf470:	4770      	bx	lr

000bf472 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bf472:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bf474:	2300      	movs	r3, #0
   bf476:	e9c0 3300 	strd	r3, r3, [r0]
   bf47a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bf47c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf47e:	9300      	str	r3, [sp, #0]
   bf480:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bf482:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf486:	4619      	mov	r1, r3
   bf488:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bf48c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf48e:	f7ff ffe5 	bl	bf45c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bf492:	4620      	mov	r0, r4
   bf494:	b004      	add	sp, #16
   bf496:	bd10      	pop	{r4, pc}

000bf498 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bf498:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bf49a:	9300      	str	r3, [sp, #0]
   bf49c:	4613      	mov	r3, r2
   bf49e:	460a      	mov	r2, r1
   bf4a0:	21ff      	movs	r1, #255	; 0xff
   bf4a2:	f7ff ffdb 	bl	bf45c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bf4a6:	b003      	add	sp, #12
   bf4a8:	f85d fb04 	ldr.w	pc, [sp], #4

000bf4ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf4ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf4b0:	4604      	mov	r4, r0
   bf4b2:	460d      	mov	r5, r1
   bf4b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf4b6:	d914      	bls.n	bf4e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf4b8:	4290      	cmp	r0, r2
   bf4ba:	d213      	bcs.n	bf4e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf4bc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf4c0:	1a75      	subs	r5, r6, r1
   bf4c2:	f1a1 0708 	sub.w	r7, r1, #8
   bf4c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf4c8:	42b7      	cmp	r7, r6
   bf4ca:	d018      	beq.n	bf4fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf4cc:	b11c      	cbz	r4, bf4d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf4ce:	4631      	mov	r1, r6
   bf4d0:	4620      	mov	r0, r4
   bf4d2:	f7ff fe86 	bl	bf1e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bf4d6:	1d30      	adds	r0, r6, #4
   bf4d8:	f7ff fe8d 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf4dc:	3e08      	subs	r6, #8
   bf4de:	3c08      	subs	r4, #8
   bf4e0:	e7f2      	b.n	bf4c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf4e2:	d00c      	beq.n	bf4fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf4e4:	42b5      	cmp	r5, r6
   bf4e6:	d00a      	beq.n	bf4fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf4e8:	b11c      	cbz	r4, bf4f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf4ea:	4629      	mov	r1, r5
   bf4ec:	4620      	mov	r0, r4
   bf4ee:	f7ff fe78 	bl	bf1e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf4f2:	1d28      	adds	r0, r5, #4
   bf4f4:	f7ff fe7f 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf4f8:	3508      	adds	r5, #8
   bf4fa:	3408      	adds	r4, #8
   bf4fc:	e7f2      	b.n	bf4e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf500 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bf502:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf504:	6846      	ldr	r6, [r0, #4]
   bf506:	4668      	mov	r0, sp
   bf508:	f7ff fe6b 	bl	bf1e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf50c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bf510:	429f      	cmp	r7, r3
   bf512:	db12      	blt.n	bf53a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bf514:	3701      	adds	r7, #1
        if (n > 0) {
   bf516:	2f00      	cmp	r7, #0
   bf518:	dd29      	ble.n	bf56e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bf51a:	00f8      	lsls	r0, r7, #3
   bf51c:	f7fe ff02 	bl	be324 <malloc>
            if (!d) {
   bf520:	4605      	mov	r5, r0
   bf522:	b1f0      	cbz	r0, bf562 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bf524:	e9d4 1200 	ldrd	r1, r2, [r4]
   bf528:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf52c:	f7ff ffbe 	bl	bf4ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf530:	6820      	ldr	r0, [r4, #0]
   bf532:	f7fe feff 	bl	be334 <free>
        data_ = d;
   bf536:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bf538:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bf53a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf53c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf53e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bf542:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf546:	4631      	mov	r1, r6
   bf548:	f106 0008 	add.w	r0, r6, #8
   bf54c:	f7ff ffae 	bl	bf4ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf550:	b11e      	cbz	r6, bf55a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bf552:	4669      	mov	r1, sp
   bf554:	4630      	mov	r0, r6
   bf556:	f7ff fe44 	bl	bf1e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bf55a:	6863      	ldr	r3, [r4, #4]
   bf55c:	3301      	adds	r3, #1
   bf55e:	6063      	str	r3, [r4, #4]
    return true;
   bf560:	2501      	movs	r5, #1
   bf562:	a801      	add	r0, sp, #4
   bf564:	f7ff fe47 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf568:	4628      	mov	r0, r5
   bf56a:	b003      	add	sp, #12
   bf56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bf56e:	2500      	movs	r5, #0
   bf570:	e7de      	b.n	bf530 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bf572 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bf574:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf578:	4605      	mov	r5, r0
   bf57a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bf57c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bf580:	42a6      	cmp	r6, r4
   bf582:	d005      	beq.n	bf590 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bf584:	4639      	mov	r1, r7
   bf586:	4620      	mov	r0, r4
   bf588:	f7ff fcd9 	bl	bef3e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bf58c:	b108      	cbz	r0, bf592 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bf58e:	b914      	cbnz	r4, bf596 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bf590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bf592:	3408      	adds	r4, #8
   bf594:	e7f4      	b.n	bf580 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bf596:	1d20      	adds	r0, r4, #4
   bf598:	f7ff fe2d 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bf59c:	e9d5 3200 	ldrd	r3, r2, [r5]
   bf5a0:	f104 0108 	add.w	r1, r4, #8
   bf5a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf5a8:	4620      	mov	r0, r4
   bf5aa:	f7ff ff7f 	bl	bf4ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bf5ae:	686b      	ldr	r3, [r5, #4]
   bf5b0:	3b01      	subs	r3, #1
   bf5b2:	606b      	str	r3, [r5, #4]
    return true;
   bf5b4:	e7ec      	b.n	bf590 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bf5b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf5bc:	4605      	mov	r5, r0
   bf5be:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bf5c0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf5c2:	460c      	mov	r4, r1
        WiringBleLock lk;
   bf5c4:	f7ff fa98 	bl	beaf8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bf5c8:	682e      	ldr	r6, [r5, #0]
   bf5ca:	1ef3      	subs	r3, r6, #3
   bf5cc:	2b0d      	cmp	r3, #13
   bf5ce:	d83c      	bhi.n	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf5d0:	e8df f013 	tbh	[pc, r3, lsl #1]
   bf5d4:	0053000e 	.word	0x0053000e
   bf5d8:	00d1003b 	.word	0x00d1003b
   bf5dc:	003b003b 	.word	0x003b003b
   bf5e0:	003b003b 	.word	0x003b003b
   bf5e4:	009b003b 	.word	0x009b003b
   bf5e8:	009b009b 	.word	0x009b009b
   bf5ec:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bf5f0:	a804      	add	r0, sp, #16
   bf5f2:	f7ff fc6f 	bl	beed4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bf5f6:	9b04      	ldr	r3, [sp, #16]
   bf5f8:	89aa      	ldrh	r2, [r5, #12]
   bf5fa:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bf5fc:	6869      	ldr	r1, [r5, #4]
   bf5fe:	9804      	ldr	r0, [sp, #16]
   bf600:	3108      	adds	r1, #8
   bf602:	3002      	adds	r0, #2
   bf604:	f7ff fa92 	bl	beb2c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bf608:	a904      	add	r1, sp, #16
   bf60a:	a806      	add	r0, sp, #24
   bf60c:	f7ff fde9 	bl	bf1e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bf610:	a906      	add	r1, sp, #24
   bf612:	f104 0018 	add.w	r0, r4, #24
   bf616:	f7ff ff73 	bl	bf500 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bf61a:	4605      	mov	r5, r0
   bf61c:	a807      	add	r0, sp, #28
   bf61e:	f7ff fdea 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf622:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bf624:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bf626:	b9b5      	cbnz	r5, bf656 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bf628:	4b5d      	ldr	r3, [pc, #372]	; (bf7a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bf62a:	495e      	ldr	r1, [pc, #376]	; (bf7a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf62c:	9300      	str	r3, [sp, #0]
   bf62e:	2032      	movs	r0, #50	; 0x32
   bf630:	462b      	mov	r3, r5
   bf632:	aa06      	add	r2, sp, #24
   bf634:	9507      	str	r5, [sp, #28]
   bf636:	f7fe fd6f 	bl	be118 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bf63a:	9b04      	ldr	r3, [sp, #16]
   bf63c:	4629      	mov	r1, r5
   bf63e:	8818      	ldrh	r0, [r3, #0]
   bf640:	f7fe fb50 	bl	bdce4 <hal_ble_gap_disconnect>
   bf644:	a805      	add	r0, sp, #20
   bf646:	f7ff fdd6 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bf64a:	a803      	add	r0, sp, #12
   bf64c:	f7ff fa62 	bl	beb14 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bf650:	b00e      	add	sp, #56	; 0x38
   bf652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bf656:	4a54      	ldr	r2, [pc, #336]	; (bf7a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bf658:	9200      	str	r2, [sp, #0]
   bf65a:	2300      	movs	r3, #0
   bf65c:	4951      	ldr	r1, [pc, #324]	; (bf7a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf65e:	9307      	str	r3, [sp, #28]
   bf660:	aa06      	add	r2, sp, #24
   bf662:	2001      	movs	r0, #1
   bf664:	f7fe fd58 	bl	be118 <log_message>
                if (impl->connectedCallback_) {
   bf668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bf66a:	2b00      	cmp	r3, #0
   bf66c:	d0ea      	beq.n	bf644 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bf66e:	a904      	add	r1, sp, #16
   bf670:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf674:	f7ff fe3f 	bl	bf2f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bf678:	e7e4      	b.n	bf644 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf67a:	89a9      	ldrh	r1, [r5, #12]
   bf67c:	4620      	mov	r0, r4
   bf67e:	f7ff fb93 	bl	beda8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf682:	4606      	mov	r6, r0
   bf684:	2800      	cmp	r0, #0
   bf686:	d0e0      	beq.n	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bf688:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bf68a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bf68e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf692:	8029      	strh	r1, [r5, #0]
   bf694:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bf698:	429a      	cmp	r2, r3
   bf69a:	d003      	beq.n	bf6a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bf69c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bf6a0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bf6a2:	e7f9      	b.n	bf698 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bf6a4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bf6a8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf6ac:	45b8      	cmp	r8, r7
   bf6ae:	d004      	beq.n	bf6ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bf6b0:	1d38      	adds	r0, r7, #4
   bf6b2:	f7ff fda0 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf6b6:	3708      	adds	r7, #8
   bf6b8:	e7f8      	b.n	bf6ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bf6ba:	2300      	movs	r3, #0
   bf6bc:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bf6be:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bf6c2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf6c6:	45b8      	cmp	r8, r7
   bf6c8:	d004      	beq.n	bf6d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bf6ca:	1d38      	adds	r0, r7, #4
   bf6cc:	f7ff fd93 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf6d0:	3708      	adds	r7, #8
   bf6d2:	e7f8      	b.n	bf6c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bf6d4:	2300      	movs	r3, #0
   bf6d6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bf6d8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bf6da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf6dc:	b123      	cbz	r3, bf6e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bf6de:	4631      	mov	r1, r6
   bf6e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf6e4:	f7ff fe07 	bl	bf2f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bf6e8:	2300      	movs	r3, #0
   bf6ea:	2220      	movs	r2, #32
   bf6ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bf6f0:	4a2e      	ldr	r2, [pc, #184]	; (bf7ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bf6f2:	9200      	str	r2, [sp, #0]
   bf6f4:	492b      	ldr	r1, [pc, #172]	; (bf7a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf6f6:	aa06      	add	r2, sp, #24
   bf6f8:	2001      	movs	r0, #1
   bf6fa:	f7fe fd0d 	bl	be118 <log_message>
                    impl->peers_.removeOne(*peer);
   bf6fe:	4631      	mov	r1, r6
   bf700:	f104 0018 	add.w	r0, r4, #24
   bf704:	f7ff ff35 	bl	bf572 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bf708:	e79f      	b.n	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf70a:	89a9      	ldrh	r1, [r5, #12]
   bf70c:	4620      	mov	r0, r4
   bf70e:	f7ff fb4b 	bl	beda8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf712:	2800      	cmp	r0, #0
   bf714:	d099      	beq.n	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bf716:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bf718:	2b00      	cmp	r3, #0
   bf71a:	d096      	beq.n	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bf71c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf71e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bf720:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf724:	d001      	beq.n	bf72a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bf726:	2e10      	cmp	r6, #16
   bf728:	d117      	bne.n	bf75a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bf72a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bf72c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bf72e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bf730:	2506      	movs	r5, #6
                        };
   bf732:	f88d 3015 	strb.w	r3, [sp, #21]
   bf736:	9104      	str	r1, [sp, #16]
   bf738:	f88d 2014 	strb.w	r2, [sp, #20]
   bf73c:	9006      	str	r0, [sp, #24]
   bf73e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bf742:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bf744:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bf748:	9508      	str	r5, [sp, #32]
   bf74a:	e883 0003 	stmia.w	r3, {r0, r1}
   bf74e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bf750:	a906      	add	r1, sp, #24
   bf752:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf756:	4798      	blx	r3
   bf758:	e777      	b.n	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bf75a:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf75c:	bf01      	itttt	eq
   bf75e:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bf760:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf762:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bf766:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bf768:	bf0f      	iteee	eq
   bf76a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bf76e:	461a      	movne	r2, r3
   bf770:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bf772:	461d      	movne	r5, r3
   bf774:	e7dd      	b.n	bf732 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf776:	89a9      	ldrh	r1, [r5, #12]
   bf778:	4620      	mov	r0, r4
   bf77a:	f7ff fb15 	bl	beda8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf77e:	4601      	mov	r1, r0
   bf780:	2800      	cmp	r0, #0
   bf782:	f43f af62 	beq.w	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf786:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf788:	2b00      	cmp	r3, #0
   bf78a:	f43f af5e 	beq.w	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf78e:	686b      	ldr	r3, [r5, #4]
   bf790:	9306      	str	r3, [sp, #24]
   bf792:	aa06      	add	r2, sp, #24
   bf794:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf796:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf79a:	4798      	blx	r3
   bf79c:	e755      	b.n	bf64a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf79e:	bf00      	nop
   bf7a0:	000c7da0 	.word	0x000c7da0
   bf7a4:	000c7d1f 	.word	0x000c7d1f
   bf7a8:	000c7dc6 	.word	0x000c7dc6
   bf7ac:	000c7de3 	.word	0x000c7de3

000bf7b0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf7b0:	b513      	push	{r0, r1, r4, lr}
   bf7b2:	460b      	mov	r3, r1
   bf7b4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf7b6:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf7ba:	466c      	mov	r4, sp
   bf7bc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf7c0:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf7c4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf7c8:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf7cc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf7d0:	b002      	add	sp, #8
   bf7d2:	bd10      	pop	{r4, pc}

000bf7d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf7d4:	b538      	push	{r3, r4, r5, lr}
   bf7d6:	4605      	mov	r5, r0
   bf7d8:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf7da:	f7ff ffe9 	bl	bf7b0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf7de:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf7e0:	68a2      	ldr	r2, [r4, #8]
   bf7e2:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf7e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf7e6:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf7e8:	68e2      	ldr	r2, [r4, #12]
   bf7ea:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf7ec:	60e3      	str	r3, [r4, #12]
      }
   bf7ee:	bd38      	pop	{r3, r4, r5, pc}

000bf7f0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf7f0:	b570      	push	{r4, r5, r6, lr}
   bf7f2:	4604      	mov	r4, r0
   bf7f4:	b08c      	sub	sp, #48	; 0x30
   bf7f6:	460e      	mov	r6, r1
   bf7f8:	9201      	str	r2, [sp, #4]
   bf7fa:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf7fc:	f7ff fab4 	bl	bed68 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf800:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf802:	9901      	ldr	r1, [sp, #4]
   bf804:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf808:	f7ff f84b 	bl	be8a2 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf80c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf810:	b1cd      	cbz	r5, bf846 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf812:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf814:	9502      	str	r5, [sp, #8]
   bf816:	a902      	add	r1, sp, #8
   bf818:	a804      	add	r0, sp, #16
   bf81a:	9303      	str	r3, [sp, #12]
   bf81c:	f7ff fcaa 	bl	bf174 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf820:	2300      	movs	r3, #0
	__x.swap(*this);
   bf822:	a908      	add	r1, sp, #32
   bf824:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf826:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf828:	f7ff ffd4 	bl	bf7d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf82c:	4631      	mov	r1, r6
   bf82e:	a808      	add	r0, sp, #32
   bf830:	f7ff ffd0 	bl	bf7d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf834:	a808      	add	r0, sp, #32
   bf836:	f7f4 fe4d 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf83a:	a804      	add	r0, sp, #16
   bf83c:	f7f4 fe4a 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    }
   bf840:	4620      	mov	r0, r4
   bf842:	b00c      	add	sp, #48	; 0x30
   bf844:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf846:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf848:	e7ea      	b.n	bf820 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf84c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf850:	b087      	sub	sp, #28
   bf852:	461d      	mov	r5, r3
   bf854:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf858:	4680      	mov	r8, r0
   bf85a:	468b      	mov	fp, r1
   bf85c:	4692      	mov	sl, r2
   bf85e:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf860:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf862:	2200      	movs	r2, #0
   bf864:	2068      	movs	r0, #104	; 0x68
   bf866:	9102      	str	r1, [sp, #8]
   bf868:	9204      	str	r2, [sp, #16]
   bf86a:	f7f4 fc14 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf86e:	1e06      	subs	r6, r0, #0
   bf870:	f106 090c 	add.w	r9, r6, #12
   bf874:	d018      	beq.n	bf8a8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf876:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf878:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf87a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf87e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf880:	4a15      	ldr	r2, [pc, #84]	; (bf8d8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf882:	f847 2b20 	str.w	r2, [r7], #32
   bf886:	9b03      	ldr	r3, [sp, #12]
   bf888:	9100      	str	r1, [sp, #0]
   bf88a:	465a      	mov	r2, fp
   bf88c:	4651      	mov	r1, sl
   bf88e:	4648      	mov	r0, r9
   bf890:	f7ff ffae 	bl	bf7f0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf896:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf898:	682b      	ldr	r3, [r5, #0]
   bf89a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf89c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf89e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf8a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf8a4:	6823      	ldr	r3, [r4, #0]
   bf8a6:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf8a8:	a904      	add	r1, sp, #16
   bf8aa:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf8ac:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf8b0:	f7ff fd10 	bl	bf2d4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf8b4:	a805      	add	r0, sp, #20
   bf8b6:	f7ff fc9e 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf8ba:	f8d8 3000 	ldr.w	r3, [r8]
   bf8be:	b93b      	cbnz	r3, bf8d0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf8c0:	4a06      	ldr	r2, [pc, #24]	; (bf8dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf8c2:	4907      	ldr	r1, [pc, #28]	; (bf8e0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf8c4:	200a      	movs	r0, #10
}
   bf8c6:	b007      	add	sp, #28
   bf8c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf8cc:	f7fe bc1c 	b.w	be108 <panic_>
}
   bf8d0:	b007      	add	sp, #28
   bf8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf8d6:	bf00      	nop
   bf8d8:	000c7e5c 	.word	0x000c7e5c
   bf8dc:	000bdc45 	.word	0x000bdc45
   bf8e0:	000c7d08 	.word	0x000c7d08

000bf8e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf8e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf8e8:	4604      	mov	r4, r0
   bf8ea:	460d      	mov	r5, r1
   bf8ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf8ee:	d914      	bls.n	bf91a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf8f0:	4290      	cmp	r0, r2
   bf8f2:	d213      	bcs.n	bf91c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf8f4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf8f8:	1a75      	subs	r5, r6, r1
   bf8fa:	f1a1 0708 	sub.w	r7, r1, #8
   bf8fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf900:	42b7      	cmp	r7, r6
   bf902:	d018      	beq.n	bf936 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf904:	b11c      	cbz	r4, bf90e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf906:	4631      	mov	r1, r6
   bf908:	4620      	mov	r0, r4
   bf90a:	f7ff fc60 	bl	bf1ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf90e:	1d30      	adds	r0, r6, #4
   bf910:	f7ff fc71 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf914:	3e08      	subs	r6, #8
   bf916:	3c08      	subs	r4, #8
   bf918:	e7f2      	b.n	bf900 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf91a:	d00c      	beq.n	bf936 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf91c:	42b5      	cmp	r5, r6
   bf91e:	d00a      	beq.n	bf936 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf920:	b11c      	cbz	r4, bf92a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf922:	4629      	mov	r1, r5
   bf924:	4620      	mov	r0, r4
   bf926:	f7ff fc52 	bl	bf1ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf92a:	1d28      	adds	r0, r5, #4
   bf92c:	f7ff fc63 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf930:	3508      	adds	r5, #8
   bf932:	3408      	adds	r4, #8
   bf934:	e7f2      	b.n	bf91c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf938 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf938:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf93a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf93c:	4605      	mov	r5, r0
        if (n > 0) {
   bf93e:	dd11      	ble.n	bf964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf940:	00f0      	lsls	r0, r6, #3
   bf942:	f7fe fcef 	bl	be324 <malloc>
            if (!d) {
   bf946:	4604      	mov	r4, r0
   bf948:	b158      	cbz	r0, bf962 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf94a:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf94e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf952:	f7ff ffc7 	bl	bf8e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf956:	6828      	ldr	r0, [r5, #0]
   bf958:	f7fe fcec 	bl	be334 <free>
        data_ = d;
   bf95c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf95e:	60ae      	str	r6, [r5, #8]
        return true;
   bf960:	2001      	movs	r0, #1
    }
   bf962:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf964:	2400      	movs	r4, #0
   bf966:	e7f6      	b.n	bf956 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf968 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf968:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf96a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf96c:	6845      	ldr	r5, [r0, #4]
   bf96e:	4668      	mov	r0, sp
   bf970:	f7ff fc2d 	bl	bf1ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf974:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf978:	4299      	cmp	r1, r3
   bf97a:	da10      	bge.n	bf99e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf97c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf97e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf980:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf984:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf988:	4629      	mov	r1, r5
   bf98a:	f105 0008 	add.w	r0, r5, #8
   bf98e:	f7ff ffa9 	bl	bf8e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf992:	b98d      	cbnz	r5, bf9b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf994:	6863      	ldr	r3, [r4, #4]
   bf996:	3301      	adds	r3, #1
   bf998:	6063      	str	r3, [r4, #4]
    return true;
   bf99a:	2601      	movs	r6, #1
   bf99c:	e006      	b.n	bf9ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf99e:	3101      	adds	r1, #1
   bf9a0:	4620      	mov	r0, r4
   bf9a2:	f7ff ffc9 	bl	bf938 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf9a6:	4606      	mov	r6, r0
   bf9a8:	2800      	cmp	r0, #0
   bf9aa:	d1e7      	bne.n	bf97c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf9ac:	a801      	add	r0, sp, #4
   bf9ae:	f7ff fc22 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf9b2:	4630      	mov	r0, r6
   bf9b4:	b002      	add	sp, #8
   bf9b6:	bd70      	pop	{r4, r5, r6, pc}
   bf9b8:	4669      	mov	r1, sp
   bf9ba:	4628      	mov	r0, r5
   bf9bc:	f7ff fc07 	bl	bf1ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf9c0:	e7e8      	b.n	bf994 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf9c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf9c2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf9c6:	4604      	mov	r4, r0
   bf9c8:	460d      	mov	r5, r1
   bf9ca:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf9cc:	d914      	bls.n	bf9f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf9ce:	4290      	cmp	r0, r2
   bf9d0:	d213      	bcs.n	bf9fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf9d2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf9d6:	1a75      	subs	r5, r6, r1
   bf9d8:	f1a1 0708 	sub.w	r7, r1, #8
   bf9dc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf9de:	42b7      	cmp	r7, r6
   bf9e0:	d018      	beq.n	bfa14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf9e2:	b11c      	cbz	r4, bf9ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf9e4:	4631      	mov	r1, r6
   bf9e6:	4620      	mov	r0, r4
   bf9e8:	f7ff fbe3 	bl	bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf9ec:	1d30      	adds	r0, r6, #4
   bf9ee:	f7ff fc02 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf9f2:	3e08      	subs	r6, #8
   bf9f4:	3c08      	subs	r4, #8
   bf9f6:	e7f2      	b.n	bf9de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf9f8:	d00c      	beq.n	bfa14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf9fa:	42b5      	cmp	r5, r6
   bf9fc:	d00a      	beq.n	bfa14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf9fe:	b11c      	cbz	r4, bfa08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bfa00:	4629      	mov	r1, r5
   bfa02:	4620      	mov	r0, r4
   bfa04:	f7ff fbd5 	bl	bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfa08:	1d28      	adds	r0, r5, #4
   bfa0a:	f7ff fbf4 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bfa0e:	3508      	adds	r5, #8
   bfa10:	3408      	adds	r4, #8
   bfa12:	e7f2      	b.n	bf9fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bfa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfa16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bfa16:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bfa18:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bfa1a:	4605      	mov	r5, r0
        if (n > 0) {
   bfa1c:	dd11      	ble.n	bfa42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bfa1e:	00f0      	lsls	r0, r6, #3
   bfa20:	f7fe fc80 	bl	be324 <malloc>
            if (!d) {
   bfa24:	4604      	mov	r4, r0
   bfa26:	b158      	cbz	r0, bfa40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bfa28:	e9d5 1200 	ldrd	r1, r2, [r5]
   bfa2c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bfa30:	f7ff ffc7 	bl	bf9c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bfa34:	6828      	ldr	r0, [r5, #0]
   bfa36:	f7fe fc7d 	bl	be334 <free>
        data_ = d;
   bfa3a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bfa3c:	60ae      	str	r6, [r5, #8]
        return true;
   bfa3e:	2001      	movs	r0, #1
    }
   bfa40:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bfa42:	2400      	movs	r4, #0
   bfa44:	e7f6      	b.n	bfa34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bfa46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfa46:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bfa48:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bfa4a:	6845      	ldr	r5, [r0, #4]
   bfa4c:	4668      	mov	r0, sp
   bfa4e:	f7ff fbb0 	bl	bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfa52:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bfa56:	4299      	cmp	r1, r3
   bfa58:	da10      	bge.n	bfa7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bfa5a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bfa5c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bfa5e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bfa62:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bfa66:	4629      	mov	r1, r5
   bfa68:	f105 0008 	add.w	r0, r5, #8
   bfa6c:	f7ff ffa9 	bl	bf9c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bfa70:	b98d      	cbnz	r5, bfa96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bfa72:	6863      	ldr	r3, [r4, #4]
   bfa74:	3301      	adds	r3, #1
   bfa76:	6063      	str	r3, [r4, #4]
    return true;
   bfa78:	2601      	movs	r6, #1
   bfa7a:	e006      	b.n	bfa8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfa7c:	3101      	adds	r1, #1
   bfa7e:	4620      	mov	r0, r4
   bfa80:	f7ff ffc9 	bl	bfa16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bfa84:	4606      	mov	r6, r0
   bfa86:	2800      	cmp	r0, #0
   bfa88:	d1e7      	bne.n	bfa5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bfa8a:	a801      	add	r0, sp, #4
   bfa8c:	f7ff fbb3 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfa90:	4630      	mov	r0, r6
   bfa92:	b002      	add	sp, #8
   bfa94:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bfa96:	4669      	mov	r1, sp
   bfa98:	4628      	mov	r0, r5
   bfa9a:	f7ff fb8a 	bl	bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfa9e:	e7e8      	b.n	bfa72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bfaa0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bfaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfaa4:	4617      	mov	r7, r2
   bfaa6:	b0a1      	sub	sp, #132	; 0x84
   bfaa8:	4680      	mov	r8, r0
    WiringBleLock lk;
   bfaaa:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bfaac:	460e      	mov	r6, r1
    WiringBleLock lk;
   bfaae:	f7ff f823 	bl	beaf8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bfab2:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bfab4:	7923      	ldrb	r3, [r4, #4]
   bfab6:	b953      	cbnz	r3, bface <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bfab8:	4639      	mov	r1, r7
   bfaba:	4640      	mov	r0, r8
   bfabc:	f7ff fb79 	bl	bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bfac0:	a80a      	add	r0, sp, #40	; 0x28
   bfac2:	f7ff f827 	bl	beb14 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bfac6:	4640      	mov	r0, r8
   bfac8:	b021      	add	sp, #132	; 0x84
   bfaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bface:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bfad0:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bfad4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bfad8:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bfada:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bfade:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bfae2:	9b03      	ldr	r3, [sp, #12]
   bfae4:	429d      	cmp	r5, r3
   bfae6:	d021      	beq.n	bfb2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bfae8:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bfaec:	4658      	mov	r0, fp
   bfaee:	f109 0114 	add.w	r1, r9, #20
   bfaf2:	f7ff f8ae 	bl	bec52 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bfaf6:	b1b8      	cbz	r0, bfb28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bfaf8:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bfafc:	4650      	mov	r0, sl
   bfafe:	f7ff f8a8 	bl	bec52 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bfb02:	b188      	cbz	r0, bfb28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bfb04:	6823      	ldr	r3, [r4, #0]
   bfb06:	f8d9 2000 	ldr.w	r2, [r9]
   bfb0a:	4053      	eors	r3, r2
   bfb0c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bfb10:	d10a      	bne.n	bfb28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bfb12:	2220      	movs	r2, #32
   bfb14:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bfb18:	4a5e      	ldr	r2, [pc, #376]	; (bfc94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bfb1a:	9200      	str	r2, [sp, #0]
   bfb1c:	aa15      	add	r2, sp, #84	; 0x54
   bfb1e:	495e      	ldr	r1, [pc, #376]	; (bfc98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bfb20:	2032      	movs	r0, #50	; 0x32
   bfb22:	f7fe faf9 	bl	be118 <log_message>
   bfb26:	e7c7      	b.n	bfab8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bfb28:	3508      	adds	r5, #8
   bfb2a:	e7da      	b.n	bfae2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bfb2c:	4650      	mov	r0, sl
   bfb2e:	f7ff f861 	bl	bebf4 <_ZNK8particle7BleUuid7isValidEv>
   bfb32:	b960      	cbnz	r0, bfb4e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bfb34:	4959      	ldr	r1, [pc, #356]	; (bfc9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bfb36:	2201      	movs	r2, #1
   bfb38:	a815      	add	r0, sp, #84	; 0x54
   bfb3a:	ad15      	add	r5, sp, #84	; 0x54
   bfb3c:	f7ff f832 	bl	beba4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bfb40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bfb42:	46d4      	mov	ip, sl
   bfb44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bfb48:	682b      	ldr	r3, [r5, #0]
   bfb4a:	f8cc 3000 	str.w	r3, [ip]
   bfb4e:	6833      	ldr	r3, [r6, #0]
   bfb50:	e9d3 5300 	ldrd	r5, r3, [r3]
   bfb54:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bfb58:	455d      	cmp	r5, fp
   bfb5a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bfb5c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bfb5e:	d06e      	beq.n	bfc3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bfb60:	f855 0b08 	ldr.w	r0, [r5], #8
   bfb64:	f7ff f875 	bl	bec52 <_ZNK8particle7BleUuideqERKS0_>
   bfb68:	2800      	cmp	r0, #0
   bfb6a:	d0f5      	beq.n	bfb58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bfb6c:	f104 0a14 	add.w	sl, r4, #20
   bfb70:	4650      	mov	r0, sl
   bfb72:	f7ff f83f 	bl	bebf4 <_ZNK8particle7BleUuid7isValidEv>
   bfb76:	b988      	cbnz	r0, bfb9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bfb78:	4b49      	ldr	r3, [pc, #292]	; (bfca0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfb7a:	4948      	ldr	r1, [pc, #288]	; (bfc9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bfb7c:	881a      	ldrh	r2, [r3, #0]
   bfb7e:	3201      	adds	r2, #1
   bfb80:	b292      	uxth	r2, r2
   bfb82:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfb84:	a815      	add	r0, sp, #84	; 0x54
   bfb86:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bfb88:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfb8a:	f7ff f82a 	bl	bebe2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bfb8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bfb90:	46d4      	mov	ip, sl
   bfb92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bfb96:	682b      	ldr	r3, [r5, #0]
   bfb98:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bfb9c:	4b41      	ldr	r3, [pc, #260]	; (bfca4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bfb9e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bfba0:	2228      	movs	r2, #40	; 0x28
   bfba2:	2100      	movs	r1, #0
   bfba4:	a816      	add	r0, sp, #88	; 0x58
   bfba6:	f004 fd37 	bl	c4618 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bfbaa:	4651      	mov	r1, sl
   bfbac:	a804      	add	r0, sp, #16
   bfbae:	f7ff f833 	bl	bec18 <_ZN8particle7BleUuid7halUUIDEv>
   bfbb2:	ab04      	add	r3, sp, #16
   bfbb4:	aa18      	add	r2, sp, #96	; 0x60
   bfbb6:	f10d 0c20 	add.w	ip, sp, #32
   bfbba:	6818      	ldr	r0, [r3, #0]
   bfbbc:	6859      	ldr	r1, [r3, #4]
   bfbbe:	4615      	mov	r5, r2
   bfbc0:	c503      	stmia	r5!, {r0, r1}
   bfbc2:	3308      	adds	r3, #8
   bfbc4:	4563      	cmp	r3, ip
   bfbc6:	462a      	mov	r2, r5
   bfbc8:	d1f7      	bne.n	bfbba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bfbca:	6818      	ldr	r0, [r3, #0]
   bfbcc:	6028      	str	r0, [r5, #0]
    return value_;
   bfbce:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bfbd0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bfbd4:	f8d9 3000 	ldr.w	r3, [r9]
   bfbd8:	8a9b      	ldrh	r3, [r3, #20]
   bfbda:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bfbde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bfbe0:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bfbe2:	4b31      	ldr	r3, [pc, #196]	; (bfca8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bfbe4:	2200      	movs	r2, #0
   bfbe6:	1da1      	adds	r1, r4, #6
   bfbe8:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bfbea:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bfbee:	f7fe f8ab 	bl	bdd48 <hal_ble_gatt_server_add_characteristic>
   bfbf2:	2800      	cmp	r0, #0
   bfbf4:	f47f af60 	bne.w	bfab8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bfbf8:	2301      	movs	r3, #1
   bfbfa:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bfbfc:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bfbfe:	4639      	mov	r1, r7
        return characteristics_;
   bfc00:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bfc02:	a80d      	add	r0, sp, #52	; 0x34
   bfc04:	f7ff fad5 	bl	bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfc08:	4620      	mov	r0, r4
   bfc0a:	a90d      	add	r1, sp, #52	; 0x34
   bfc0c:	f7ff ff1b 	bl	bfa46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bfc10:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bfc12:	a80e      	add	r0, sp, #56	; 0x38
   bfc14:	f7ff faef 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc18:	2c00      	cmp	r4, #0
   bfc1a:	f47f af4d 	bne.w	bfab8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bfc1e:	2320      	movs	r3, #32
   bfc20:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bfc24:	4b21      	ldr	r3, [pc, #132]	; (bfcac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bfc26:	9300      	str	r3, [sp, #0]
   bfc28:	aa0d      	add	r2, sp, #52	; 0x34
   bfc2a:	4623      	mov	r3, r4
   bfc2c:	e777      	b.n	bfb1e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bfc2e:	4639      	mov	r1, r7
   bfc30:	4640      	mov	r0, r8
   bfc32:	f7ff fabe 	bl	bf1b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfc36:	a80c      	add	r0, sp, #48	; 0x30
   bfc38:	f7ff fadd 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc3c:	e740      	b.n	bfac0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bfc3e:	a80b      	add	r0, sp, #44	; 0x2c
   bfc40:	f7ff f924 	bl	bee8c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bfc44:	4651      	mov	r1, sl
   bfc46:	a815      	add	r0, sp, #84	; 0x54
   bfc48:	f7fe ffe6 	bl	bec18 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bfc4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bfc4e:	2300      	movs	r3, #0
   bfc50:	3214      	adds	r2, #20
   bfc52:	a915      	add	r1, sp, #84	; 0x54
   bfc54:	2001      	movs	r0, #1
   bfc56:	f7fe f84f 	bl	bdcf8 <hal_ble_gatt_server_add_service>
   bfc5a:	2800      	cmp	r0, #0
   bfc5c:	d1e7      	bne.n	bfc2e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bfc5e:	6835      	ldr	r5, [r6, #0]
   bfc60:	a90b      	add	r1, sp, #44	; 0x2c
   bfc62:	a80d      	add	r0, sp, #52	; 0x34
   bfc64:	f7ff fab3 	bl	bf1ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bfc68:	4628      	mov	r0, r5
   bfc6a:	a90d      	add	r1, sp, #52	; 0x34
   bfc6c:	f7ff fe7c 	bl	bf968 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bfc70:	4605      	mov	r5, r0
   bfc72:	a80e      	add	r0, sp, #56	; 0x38
   bfc74:	f7ff fabf 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc78:	2d00      	cmp	r5, #0
   bfc7a:	d0d8      	beq.n	bfc2e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bfc7c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bfc7e:	6853      	ldr	r3, [r2, #4]
   bfc80:	6812      	ldr	r2, [r2, #0]
   bfc82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bfc86:	3b01      	subs	r3, #1
   bfc88:	a80c      	add	r0, sp, #48	; 0x30
   bfc8a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bfc8e:	f7ff fab2 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc92:	e76b      	b.n	bfb6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bfc94:	000c7e02 	.word	0x000c7e02
   bfc98:	000c7d1f 	.word	0x000c7d1f
   bfc9c:	000c7ec6 	.word	0x000c7ec6
   bfca0:	2003e638 	.word	0x2003e638
   bfca4:	002c0003 	.word	0x002c0003
   bfca8:	000bf025 	.word	0x000bf025
   bfcac:	000c7e2d 	.word	0x000c7e2d

000bfcb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bfcb0:	4802      	ldr	r0, [pc, #8]	; (bfcbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bfcb2:	2300      	movs	r3, #0
   bfcb4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bfcb6:	f7fe b89f 	b.w	bddf8 <os_mutex_recursive_create>
   bfcba:	bf00      	nop
   bfcbc:	2003e63c 	.word	0x2003e63c

000bfcc0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bfcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfcc2:	4606      	mov	r6, r0
   bfcc4:	460d      	mov	r5, r1
  size_t n = 0;
   bfcc6:	188f      	adds	r7, r1, r2
   bfcc8:	2400      	movs	r4, #0
  while (size--) {
   bfcca:	42bd      	cmp	r5, r7
   bfccc:	d00c      	beq.n	bfce8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bfcce:	6833      	ldr	r3, [r6, #0]
   bfcd0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bfcd4:	689b      	ldr	r3, [r3, #8]
   bfcd6:	4630      	mov	r0, r6
   bfcd8:	4798      	blx	r3
     if (chunk>=0)
   bfcda:	1e03      	subs	r3, r0, #0
   bfcdc:	db01      	blt.n	bfce2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bfcde:	441c      	add	r4, r3
  while (size--) {
   bfce0:	e7f3      	b.n	bfcca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bfce2:	2c00      	cmp	r4, #0
   bfce4:	bf08      	it	eq
   bfce6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bfce8:	4620      	mov	r0, r4
   bfcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfcec <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bfcec:	b508      	push	{r3, lr}
  return write(str);
   bfcee:	f7f7 fe85 	bl	b79fc <_ZN5Print5writeEPKc>
}
   bfcf2:	bd08      	pop	{r3, pc}

000bfcf4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bfcf4:	6803      	ldr	r3, [r0, #0]
   bfcf6:	689b      	ldr	r3, [r3, #8]
   bfcf8:	4718      	bx	r3

000bfcfa <_ZN5Print5printEPK19__FlashStringHelper>:
   bfcfa:	b508      	push	{r3, lr}
   bfcfc:	f7f7 fe7e 	bl	b79fc <_ZN5Print5writeEPKc>
   bfd00:	bd08      	pop	{r3, pc}

000bfd02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bfd02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bfd04:	210d      	movs	r1, #13
{
   bfd06:	4605      	mov	r5, r0
  size_t n = print('\r');
   bfd08:	f7ff fff4 	bl	bfcf4 <_ZN5Print5printEc>
  n += print('\n');
   bfd0c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bfd0e:	4604      	mov	r4, r0
  n += print('\n');
   bfd10:	4628      	mov	r0, r5
   bfd12:	f7ff ffef 	bl	bfcf4 <_ZN5Print5printEc>
  return n;
}
   bfd16:	4420      	add	r0, r4
   bfd18:	bd38      	pop	{r3, r4, r5, pc}

000bfd1a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bfd1a:	b538      	push	{r3, r4, r5, lr}
   bfd1c:	4605      	mov	r5, r0
  return write(str);
   bfd1e:	f7f7 fe6d 	bl	b79fc <_ZN5Print5writeEPKc>
   bfd22:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bfd24:	4628      	mov	r0, r5
   bfd26:	f7ff ffec 	bl	bfd02 <_ZN5Print7printlnEv>
  return n;
}
   bfd2a:	4420      	add	r0, r4
   bfd2c:	bd38      	pop	{r3, r4, r5, pc}

000bfd2e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   bfd2e:	f7ff bff4 	b.w	bfd1a <_ZN5Print7printlnEPKc>

000bfd32 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bfd32:	b530      	push	{r4, r5, lr}
   bfd34:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bfd36:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bfd38:	2a01      	cmp	r2, #1
  *str = '\0';
   bfd3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bfd3e:	bf98      	it	ls
   bfd40:	220a      	movls	r2, #10
   bfd42:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bfd44:	460d      	mov	r5, r1
   bfd46:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bfd4a:	fb01 5312 	mls	r3, r1, r2, r5
   bfd4e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bfd52:	2b09      	cmp	r3, #9
   bfd54:	bf94      	ite	ls
   bfd56:	3330      	addls	r3, #48	; 0x30
   bfd58:	3337      	addhi	r3, #55	; 0x37
   bfd5a:	b2db      	uxtb	r3, r3
  } while(n);
   bfd5c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bfd5e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bfd62:	d9ef      	bls.n	bfd44 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bfd64:	4621      	mov	r1, r4
   bfd66:	f7f7 fe49 	bl	b79fc <_ZN5Print5writeEPKc>
}
   bfd6a:	b00b      	add	sp, #44	; 0x2c
   bfd6c:	bd30      	pop	{r4, r5, pc}

000bfd6e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bfd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfd72:	b086      	sub	sp, #24
   bfd74:	af00      	add	r7, sp, #0
   bfd76:	4605      	mov	r5, r0
   bfd78:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bfd7a:	1d38      	adds	r0, r7, #4
   bfd7c:	2114      	movs	r1, #20
{
   bfd7e:	4614      	mov	r4, r2
    va_copy(args2, args);
   bfd80:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bfd82:	f7fe faff 	bl	be384 <vsnprintf>

    if (n<bufsize)
   bfd86:	2813      	cmp	r0, #19
   bfd88:	d80e      	bhi.n	bfda8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bfd8a:	1d39      	adds	r1, r7, #4
   bfd8c:	4628      	mov	r0, r5
   bfd8e:	f7f7 fe35 	bl	b79fc <_ZN5Print5writeEPKc>
   bfd92:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bfd94:	b11e      	cbz	r6, bfd9e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bfd96:	4628      	mov	r0, r5
   bfd98:	f7ff ffb3 	bl	bfd02 <_ZN5Print7printlnEv>
   bfd9c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bfd9e:	4620      	mov	r0, r4
   bfda0:	3718      	adds	r7, #24
   bfda2:	46bd      	mov	sp, r7
   bfda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bfda8:	f100 0308 	add.w	r3, r0, #8
   bfdac:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bfdb0:	46e8      	mov	r8, sp
        char bigger[n+1];
   bfdb2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bfdb6:	4622      	mov	r2, r4
   bfdb8:	1c41      	adds	r1, r0, #1
   bfdba:	683b      	ldr	r3, [r7, #0]
   bfdbc:	4668      	mov	r0, sp
   bfdbe:	f7fe fae1 	bl	be384 <vsnprintf>
  return write(str);
   bfdc2:	4669      	mov	r1, sp
   bfdc4:	4628      	mov	r0, r5
   bfdc6:	f7f7 fe19 	bl	b79fc <_ZN5Print5writeEPKc>
   bfdca:	4604      	mov	r4, r0
   bfdcc:	46c5      	mov	sp, r8
   bfdce:	e7e1      	b.n	bfd94 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bfdd0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bfdd0:	b510      	push	{r4, lr}
   bfdd2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bfdd4:	f7fd ff46 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bfdd8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bfdda:	6823      	ldr	r3, [r4, #0]
   bfddc:	4620      	mov	r0, r4
   bfdde:	695b      	ldr	r3, [r3, #20]
   bfde0:	4798      	blx	r3
    if (c >= 0) return c;
   bfde2:	2800      	cmp	r0, #0
   bfde4:	da08      	bge.n	bfdf8 <_ZN6Stream9timedReadEv+0x28>
   bfde6:	f7fd ff3d 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bfdea:	68e3      	ldr	r3, [r4, #12]
   bfdec:	1ac0      	subs	r0, r0, r3
   bfdee:	68a3      	ldr	r3, [r4, #8]
   bfdf0:	4298      	cmp	r0, r3
   bfdf2:	d3f2      	bcc.n	bfdda <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bfdf4:	f04f 30ff 	mov.w	r0, #4294967295
}
   bfdf8:	bd10      	pop	{r4, pc}

000bfdfa <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   bfdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfdfe:	4607      	mov	r7, r0
   bfe00:	4688      	mov	r8, r1
   bfe02:	4616      	mov	r6, r2
  if (length < 1) return 0;
   bfe04:	461d      	mov	r5, r3
   bfe06:	b173      	cbz	r3, bfe26 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   bfe08:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   bfe0a:	4638      	mov	r0, r7
   bfe0c:	f7ff ffe0 	bl	bfdd0 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   bfe10:	1e03      	subs	r3, r0, #0
   bfe12:	db05      	blt.n	bfe20 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   bfe14:	4543      	cmp	r3, r8
   bfe16:	d003      	beq.n	bfe20 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   bfe18:	5533      	strb	r3, [r6, r4]
    index++;
   bfe1a:	3401      	adds	r4, #1
  while (index < length) {
   bfe1c:	42a5      	cmp	r5, r4
   bfe1e:	d1f4      	bne.n	bfe0a <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   bfe20:	4620      	mov	r0, r4
   bfe22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   bfe26:	461c      	mov	r4, r3
   bfe28:	e7fa      	b.n	bfe20 <_ZN6Stream14readBytesUntilEcPcj+0x26>
	...

000bfe2c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bfe2c:	b570      	push	{r4, r5, r6, lr}
   bfe2e:	460d      	mov	r5, r1
  String ret;
   bfe30:	4909      	ldr	r1, [pc, #36]	; (bfe58 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bfe32:	4604      	mov	r4, r0
   bfe34:	4616      	mov	r6, r2
  String ret;
   bfe36:	f7fe fcde 	bl	be7f6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bfe3a:	4628      	mov	r0, r5
   bfe3c:	f7ff ffc8 	bl	bfdd0 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bfe40:	2800      	cmp	r0, #0
   bfe42:	db06      	blt.n	bfe52 <_ZN6Stream15readStringUntilEc+0x26>
   bfe44:	4286      	cmp	r6, r0
   bfe46:	d004      	beq.n	bfe52 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   bfe48:	b2c1      	uxtb	r1, r0
   bfe4a:	4620      	mov	r0, r4
   bfe4c:	f7fe fd52 	bl	be8f4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bfe50:	e7f3      	b.n	bfe3a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bfe52:	4620      	mov	r0, r4
   bfe54:	bd70      	pop	{r4, r5, r6, pc}
   bfe56:	bf00      	nop
   bfe58:	000c7f40 	.word	0x000c7f40

000bfe5c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bfe5c:	6880      	ldr	r0, [r0, #8]
   bfe5e:	6803      	ldr	r3, [r0, #0]
   bfe60:	68db      	ldr	r3, [r3, #12]
   bfe62:	4718      	bx	r3

000bfe64 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bfe64:	4770      	bx	lr

000bfe66 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bfe66:	4608      	mov	r0, r1
   bfe68:	b111      	cbz	r1, bfe70 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bfe6a:	680b      	ldr	r3, [r1, #0]
   bfe6c:	685b      	ldr	r3, [r3, #4]
   bfe6e:	4718      	bx	r3
}
   bfe70:	4770      	bx	lr

000bfe72 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bfe72:	4770      	bx	lr

000bfe74 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfe74:	4770      	bx	lr

000bfe76 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bfe76:	4770      	bx	lr

000bfe78 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bfe78:	4770      	bx	lr

000bfe7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bfe7a:	b538      	push	{r3, r4, r5, lr}
   bfe7c:	4604      	mov	r4, r0
   bfe7e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bfe80:	6800      	ldr	r0, [r0, #0]
   bfe82:	212e      	movs	r1, #46	; 0x2e
   bfe84:	f004 fc1a 	bl	c46bc <strchrnul>
    size = s - category;
   bfe88:	6823      	ldr	r3, [r4, #0]
   bfe8a:	1ac3      	subs	r3, r0, r3
   bfe8c:	602b      	str	r3, [r5, #0]
    if (size) {
   bfe8e:	b123      	cbz	r3, bfe9a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bfe90:	7803      	ldrb	r3, [r0, #0]
   bfe92:	b103      	cbz	r3, bfe96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bfe94:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   bfe96:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bfe98:	6020      	str	r0, [r4, #0]
}
   bfe9a:	4618      	mov	r0, r3
   bfe9c:	bd38      	pop	{r3, r4, r5, pc}

000bfe9e <_ZN5spark16JSONStreamWriterD0Ev>:
   bfe9e:	b510      	push	{r4, lr}
   bfea0:	210c      	movs	r1, #12
   bfea2:	4604      	mov	r4, r0
   bfea4:	f7f4 f8fd 	bl	b40a2 <_ZdlPvj>
   bfea8:	4620      	mov	r0, r4
   bfeaa:	bd10      	pop	{r4, pc}

000bfeac <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bfeac:	b510      	push	{r4, lr}
   bfeae:	2104      	movs	r1, #4
   bfeb0:	4604      	mov	r4, r0
   bfeb2:	f7f4 f8f6 	bl	b40a2 <_ZdlPvj>
   bfeb6:	4620      	mov	r0, r4
   bfeb8:	bd10      	pop	{r4, pc}

000bfeba <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfeba:	b510      	push	{r4, lr}
   bfebc:	2104      	movs	r1, #4
   bfebe:	4604      	mov	r4, r0
   bfec0:	f7f4 f8ef 	bl	b40a2 <_ZdlPvj>
   bfec4:	4620      	mov	r0, r4
   bfec6:	bd10      	pop	{r4, pc}

000bfec8 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bfec8:	f7fd bfa6 	b.w	bde18 <os_mutex_recursive_lock>

000bfecc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bfecc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bfece:	f004 fbff 	bl	c46d0 <strcmp>
}
   bfed2:	fab0 f080 	clz	r0, r0
   bfed6:	0940      	lsrs	r0, r0, #5
   bfed8:	bd08      	pop	{r3, pc}

000bfeda <__tcf_1>:
   bfeda:	4770      	bx	lr

000bfedc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bfedc:	b510      	push	{r4, lr}
   bfede:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bfee0:	f001 fc44 	bl	c176c <_Z16_fetch_usbserialv>
   bfee4:	4284      	cmp	r4, r0
   bfee6:	d010      	beq.n	bff0a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bfee8:	f002 f90c 	bl	c2104 <_Z22__fetch_global_Serial1v>
   bfeec:	4284      	cmp	r4, r0
   bfeee:	d105      	bne.n	bfefc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bfef0:	f002 f908 	bl	c2104 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bfef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bfef8:	f001 bd33 	b.w	c1962 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bfefc:	b12c      	cbz	r4, bff0a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bfefe:	6823      	ldr	r3, [r4, #0]
   bff00:	4620      	mov	r0, r4
   bff02:	685b      	ldr	r3, [r3, #4]
}
   bff04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bff08:	4718      	bx	r3
   bff0a:	bd10      	pop	{r4, pc}

000bff0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bff0c:	680b      	ldr	r3, [r1, #0]
   bff0e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bff10:	684b      	ldr	r3, [r1, #4]
   bff12:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bff14:	b113      	cbz	r3, bff1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bff16:	685a      	ldr	r2, [r3, #4]
   bff18:	3201      	adds	r2, #1
   bff1a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bff1c:	4770      	bx	lr

000bff1e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bff1e:	b513      	push	{r0, r1, r4, lr}
   bff20:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bff22:	4608      	mov	r0, r1
   bff24:	9101      	str	r1, [sp, #4]
   bff26:	f004 fc02 	bl	c472e <strlen>
   bff2a:	9901      	ldr	r1, [sp, #4]
   bff2c:	4602      	mov	r2, r0
   bff2e:	4620      	mov	r0, r4
}
   bff30:	b002      	add	sp, #8
   bff32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bff36:	f002 b827 	b.w	c1f88 <_ZN5spark10JSONWriter5valueEPKcj>

000bff3a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bff3a:	b513      	push	{r0, r1, r4, lr}
   bff3c:	4604      	mov	r4, r0
    write(str, strlen(str));
   bff3e:	4608      	mov	r0, r1
   bff40:	9101      	str	r1, [sp, #4]
   bff42:	f004 fbf4 	bl	c472e <strlen>
   bff46:	6823      	ldr	r3, [r4, #0]
   bff48:	9901      	ldr	r1, [sp, #4]
   bff4a:	68db      	ldr	r3, [r3, #12]
   bff4c:	4602      	mov	r2, r0
   bff4e:	4620      	mov	r0, r4
}
   bff50:	b002      	add	sp, #8
   bff52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bff56:	4718      	bx	r3

000bff58 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bff58:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bff5a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bff5c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bff60:	68db      	ldr	r3, [r3, #12]
   bff62:	2201      	movs	r2, #1
   bff64:	f10d 0107 	add.w	r1, sp, #7
   bff68:	4798      	blx	r3
}
   bff6a:	b003      	add	sp, #12
   bff6c:	f85d fb04 	ldr.w	pc, [sp], #4

000bff70 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bff70:	b40e      	push	{r1, r2, r3}
   bff72:	b503      	push	{r0, r1, lr}
   bff74:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bff76:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bff78:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bff7c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bff7e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bff80:	f7ff fef5 	bl	bfd6e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bff84:	b002      	add	sp, #8
   bff86:	f85d eb04 	ldr.w	lr, [sp], #4
   bff8a:	b003      	add	sp, #12
   bff8c:	4770      	bx	lr

000bff8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bff8e:	680a      	ldr	r2, [r1, #0]
   bff90:	6002      	str	r2, [r0, #0]
   bff92:	684a      	ldr	r2, [r1, #4]
   bff94:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bff96:	2200      	movs	r2, #0
   bff98:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bff9c:	b510      	push	{r4, lr}
   bff9e:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bffa0:	688c      	ldr	r4, [r1, #8]
   bffa2:	6084      	str	r4, [r0, #8]
   bffa4:	68cc      	ldr	r4, [r1, #12]
   bffa6:	60c4      	str	r4, [r0, #12]
   bffa8:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bffaa:	608a      	str	r2, [r1, #8]
   bffac:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bffae:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bffb0:	610a      	str	r2, [r1, #16]
   bffb2:	bd10      	pop	{r4, pc}

000bffb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bffb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bffb8:	e9d0 8400 	ldrd	r8, r4, [r0]
   bffbc:	f04f 0a14 	mov.w	sl, #20
   bffc0:	9300      	str	r3, [sp, #0]
   bffc2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bffc6:	4b18      	ldr	r3, [pc, #96]	; (c0028 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bffc8:	10a4      	asrs	r4, r4, #2
   bffca:	4617      	mov	r7, r2
   bffcc:	435c      	muls	r4, r3
   bffce:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bffd0:	2c00      	cmp	r4, #0
   bffd2:	dd21      	ble.n	c0018 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bffd4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bffd6:	fb0a f006 	mul.w	r0, sl, r6
   bffda:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bffde:	463a      	mov	r2, r7
   bffe0:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bffe4:	5828      	ldr	r0, [r5, r0]
   bffe6:	9101      	str	r1, [sp, #4]
   bffe8:	455f      	cmp	r7, fp
   bffea:	bf28      	it	cs
   bffec:	465a      	movcs	r2, fp
   bffee:	f004 fbb9 	bl	c4764 <strncmp>
                if (cmp == 0) {
   bfff2:	2800      	cmp	r0, #0
   bfff4:	9901      	ldr	r1, [sp, #4]
   bfff6:	f04f 0301 	mov.w	r3, #1
   bfffa:	d10b      	bne.n	c0014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bfffc:	455f      	cmp	r7, fp
   bfffe:	d103      	bne.n	c0008 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   c0000:	9a00      	ldr	r2, [sp, #0]
   c0002:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0004:	4634      	mov	r4, r6
   c0006:	e7e3      	b.n	bffd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   c0008:	d9fc      	bls.n	c0004 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   c000a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   c000c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   c0010:	3e01      	subs	r6, #1
   c0012:	e7f7      	b.n	c0004 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   c0014:	dbf9      	blt.n	c000a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   c0016:	e7f5      	b.n	c0004 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   c0018:	eba5 0508 	sub.w	r5, r5, r8
}
   c001c:	4802      	ldr	r0, [pc, #8]	; (c0028 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c001e:	10ad      	asrs	r5, r5, #2
   c0020:	4368      	muls	r0, r5
   c0022:	b003      	add	sp, #12
   c0024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0028:	cccccccd 	.word	0xcccccccd

000c002c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c002c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   c002e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   c0030:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c0032:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   c0034:	b303      	cbz	r3, c0078 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   c0036:	b1f9      	cbz	r1, c0078 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   c0038:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   c003a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   c003e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   c0040:	a903      	add	r1, sp, #12
   c0042:	a801      	add	r0, sp, #4
   c0044:	f7ff ff19 	bl	bfe7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0048:	4601      	mov	r1, r0
   c004a:	b1a8      	cbz	r0, c0078 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   c004c:	f10d 030b 	add.w	r3, sp, #11
   c0050:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   c0052:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0056:	4620      	mov	r0, r4
   c0058:	f7ff ffac 	bl	bffb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   c005c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c0060:	b153      	cbz	r3, c0078 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   c0062:	6823      	ldr	r3, [r4, #0]
   c0064:	2414      	movs	r4, #20
   c0066:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   c006a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   c006c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   c0070:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   c0072:	bfa8      	it	ge
   c0074:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   c0076:	e7e3      	b.n	c0040 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   c0078:	4628      	mov	r0, r5
   c007a:	b004      	add	sp, #16
   c007c:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0080 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   c0080:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   c0082:	4c09      	ldr	r4, [pc, #36]	; (c00a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   c0084:	7823      	ldrb	r3, [r4, #0]
   c0086:	f3bf 8f5b 	dmb	ish
   c008a:	07db      	lsls	r3, r3, #31
   c008c:	d409      	bmi.n	c00a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c008e:	4620      	mov	r0, r4
   c0090:	f7f4 f816 	bl	b40c0 <__cxa_guard_acquire>
   c0094:	b128      	cbz	r0, c00a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c0096:	4620      	mov	r0, r4
   c0098:	f7f4 f817 	bl	b40ca <__cxa_guard_release>
   c009c:	4803      	ldr	r0, [pc, #12]	; (c00ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   c009e:	f004 fa6d 	bl	c457c <atexit>
}
   c00a2:	4803      	ldr	r0, [pc, #12]	; (c00b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c00a4:	bd10      	pop	{r4, pc}
   c00a6:	bf00      	nop
   c00a8:	2003e648 	.word	0x2003e648
   c00ac:	000bfe73 	.word	0x000bfe73
   c00b0:	2003db40 	.word	0x2003db40

000c00b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c00b4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c00b6:	4c09      	ldr	r4, [pc, #36]	; (c00dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c00b8:	7823      	ldrb	r3, [r4, #0]
   c00ba:	f3bf 8f5b 	dmb	ish
   c00be:	07db      	lsls	r3, r3, #31
   c00c0:	d409      	bmi.n	c00d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c00c2:	4620      	mov	r0, r4
   c00c4:	f7f3 fffc 	bl	b40c0 <__cxa_guard_acquire>
   c00c8:	b128      	cbz	r0, c00d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c00ca:	4620      	mov	r0, r4
   c00cc:	f7f3 fffd 	bl	b40ca <__cxa_guard_release>
   c00d0:	4803      	ldr	r0, [pc, #12]	; (c00e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c00d2:	f004 fa53 	bl	c457c <atexit>
    return &factory;
}
   c00d6:	4803      	ldr	r0, [pc, #12]	; (c00e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c00d8:	bd10      	pop	{r4, pc}
   c00da:	bf00      	nop
   c00dc:	2003e64c 	.word	0x2003e64c
   c00e0:	000bfedb 	.word	0x000bfedb
   c00e4:	2003db44 	.word	0x2003db44

000c00e8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c00e8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c00ea:	2500      	movs	r5, #0
   c00ec:	4604      	mov	r4, r0
   c00ee:	e9c0 5500 	strd	r5, r5, [r0]
   c00f2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c00f6:	6085      	str	r5, [r0, #8]
   c00f8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c00fa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c00fe:	f7fd fe7b 	bl	bddf8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c0102:	f7ff ffbd 	bl	c0080 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c0106:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c0108:	f7ff ffd4 	bl	c00b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c010c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c010e:	6220      	str	r0, [r4, #32]
}
   c0110:	4620      	mov	r0, r4
   c0112:	bd38      	pop	{r3, r4, r5, pc}

000c0114 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c0114:	b510      	push	{r4, lr}
    static LogManager mgr;
   c0116:	4c0a      	ldr	r4, [pc, #40]	; (c0140 <_ZN5spark10LogManager8instanceEv+0x2c>)
   c0118:	7823      	ldrb	r3, [r4, #0]
   c011a:	f3bf 8f5b 	dmb	ish
   c011e:	07db      	lsls	r3, r3, #31
   c0120:	d40c      	bmi.n	c013c <_ZN5spark10LogManager8instanceEv+0x28>
   c0122:	4620      	mov	r0, r4
   c0124:	f7f3 ffcc 	bl	b40c0 <__cxa_guard_acquire>
   c0128:	b140      	cbz	r0, c013c <_ZN5spark10LogManager8instanceEv+0x28>
   c012a:	4806      	ldr	r0, [pc, #24]	; (c0144 <_ZN5spark10LogManager8instanceEv+0x30>)
   c012c:	f7ff ffdc 	bl	c00e8 <_ZN5spark10LogManagerC1Ev>
   c0130:	4620      	mov	r0, r4
   c0132:	f7f3 ffca 	bl	b40ca <__cxa_guard_release>
   c0136:	4804      	ldr	r0, [pc, #16]	; (c0148 <_ZN5spark10LogManager8instanceEv+0x34>)
   c0138:	f004 fa20 	bl	c457c <atexit>
    return &mgr;
}
   c013c:	4801      	ldr	r0, [pc, #4]	; (c0144 <_ZN5spark10LogManager8instanceEv+0x30>)
   c013e:	bd10      	pop	{r4, pc}
   c0140:	2003e644 	.word	0x2003e644
   c0144:	2003e654 	.word	0x2003e654
   c0148:	000c0669 	.word	0x000c0669

000c014c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c014c:	4a02      	ldr	r2, [pc, #8]	; (c0158 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c014e:	4903      	ldr	r1, [pc, #12]	; (c015c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c0150:	4803      	ldr	r0, [pc, #12]	; (c0160 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c0152:	2300      	movs	r3, #0
   c0154:	f7fd bff0 	b.w	be138 <log_set_callbacks>
   c0158:	000c044d 	.word	0x000c044d
   c015c:	000c03d9 	.word	0x000c03d9
   c0160:	000c0359 	.word	0x000c0359

000c0164 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c0164:	2300      	movs	r3, #0
   c0166:	461a      	mov	r2, r3
   c0168:	4619      	mov	r1, r3
   c016a:	4618      	mov	r0, r3
   c016c:	f7fd bfe4 	b.w	be138 <log_set_callbacks>

000c0170 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c0170:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c0172:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c0174:	4604      	mov	r4, r0
   c0176:	4668      	mov	r0, sp
   c0178:	f7ff fec8 	bl	bff0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c017c:	466a      	mov	r2, sp
   c017e:	4629      	mov	r1, r5
   c0180:	4620      	mov	r0, r4
   c0182:	f001 fe21 	bl	c1dc8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c0186:	a801      	add	r0, sp, #4
   c0188:	f7ff f835 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c018c:	4620      	mov	r0, r4
   c018e:	b003      	add	sp, #12
   c0190:	bd30      	pop	{r4, r5, pc}

000c0192 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c0192:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c0194:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c0196:	4604      	mov	r4, r0
   c0198:	4668      	mov	r0, sp
   c019a:	f7ff feb7 	bl	bff0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c019e:	466a      	mov	r2, sp
   c01a0:	4629      	mov	r1, r5
   c01a2:	4620      	mov	r0, r4
   c01a4:	f001 fdec 	bl	c1d80 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c01a8:	a801      	add	r0, sp, #4
   c01aa:	f7ff f824 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c01ae:	4620      	mov	r0, r4
   c01b0:	b003      	add	sp, #12
   c01b2:	bd30      	pop	{r4, r5, pc}

000c01b4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c01b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c01b6:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c01b8:	4604      	mov	r4, r0
   c01ba:	4668      	mov	r0, sp
   c01bc:	f7ff fea6 	bl	bff0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c01c0:	466a      	mov	r2, sp
   c01c2:	4629      	mov	r1, r5
   c01c4:	4620      	mov	r0, r4
   c01c6:	f001 fd84 	bl	c1cd2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c01ca:	a801      	add	r0, sp, #4
   c01cc:	f7ff f813 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c01d0:	4620      	mov	r0, r4
   c01d2:	b003      	add	sp, #12
   c01d4:	bd30      	pop	{r4, r5, pc}
	...

000c01d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c01d8:	b570      	push	{r4, r5, r6, lr}
   c01da:	b08a      	sub	sp, #40	; 0x28
   c01dc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c01de:	4601      	mov	r1, r0
   c01e0:	a804      	add	r0, sp, #16
   c01e2:	f7ff ffc5 	bl	c0170 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c01e6:	4e14      	ldr	r6, [pc, #80]	; (c0238 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c01e8:	a804      	add	r0, sp, #16
   c01ea:	f001 fe05 	bl	c1df8 <_ZN5spark18JSONObjectIterator4nextEv>
   c01ee:	b1e8      	cbz	r0, c022c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c01f0:	a904      	add	r1, sp, #16
   c01f2:	4668      	mov	r0, sp
   c01f4:	f7ff ffcd 	bl	c0192 <_ZNK5spark18JSONObjectIterator4nameEv>
   c01f8:	9802      	ldr	r0, [sp, #8]
   c01fa:	4631      	mov	r1, r6
   c01fc:	f7ff fe66 	bl	bfecc <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c0200:	4604      	mov	r4, r0
   c0202:	b110      	cbz	r0, c020a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c0204:	1e2c      	subs	r4, r5, #0
   c0206:	bf18      	it	ne
   c0208:	2401      	movne	r4, #1
   c020a:	a801      	add	r0, sp, #4
   c020c:	f7fe fff3 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0210:	2c00      	cmp	r4, #0
   c0212:	d0e9      	beq.n	c01e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c0214:	a904      	add	r1, sp, #16
   c0216:	4668      	mov	r0, sp
   c0218:	f7ff ffcc 	bl	c01b4 <_ZNK5spark18JSONObjectIterator5valueEv>
   c021c:	4668      	mov	r0, sp
   c021e:	f001 fd8e 	bl	c1d3e <_ZNK5spark9JSONValue5toIntEv>
   c0222:	6028      	str	r0, [r5, #0]
   c0224:	a801      	add	r0, sp, #4
   c0226:	f7fe ffe6 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c022a:	e7dd      	b.n	c01e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c022c:	a805      	add	r0, sp, #20
   c022e:	f7fe ffe2 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0232:	b00a      	add	sp, #40	; 0x28
   c0234:	bd70      	pop	{r4, r5, r6, pc}
   c0236:	bf00      	nop
   c0238:	000c7ee6 	.word	0x000c7ee6

000c023c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c023c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c023e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c0240:	4620      	mov	r0, r4
   c0242:	4913      	ldr	r1, [pc, #76]	; (c0290 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c0244:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c0246:	f004 fa43 	bl	c46d0 <strcmp>
   c024a:	b950      	cbnz	r0, c0262 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c024c:	f001 fa8e 	bl	c176c <_Z16_fetch_usbserialv>
   c0250:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c0254:	f001 fa7a 	bl	c174c <_ZN9USBSerial5beginEl>
}
   c0258:	b003      	add	sp, #12
   c025a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c025e:	f001 ba85 	b.w	c176c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c0262:	490c      	ldr	r1, [pc, #48]	; (c0294 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c0264:	4620      	mov	r0, r4
   c0266:	f004 fa33 	bl	c46d0 <strcmp>
   c026a:	b978      	cbnz	r0, c028c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c026c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c0270:	a901      	add	r1, sp, #4
   c0272:	4628      	mov	r0, r5
        int baud = 9600;
   c0274:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c0276:	f7ff ffaf 	bl	c01d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c027a:	f001 ff43 	bl	c2104 <_Z22__fetch_global_Serial1v>
   c027e:	9901      	ldr	r1, [sp, #4]
   c0280:	f001 fb6c 	bl	c195c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c0284:	f001 ff3e 	bl	c2104 <_Z22__fetch_global_Serial1v>
}
   c0288:	b003      	add	sp, #12
   c028a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c028c:	2000      	movs	r0, #0
   c028e:	e7fb      	b.n	c0288 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c0290:	000c7eeb 	.word	0x000c7eeb
   c0294:	000c7ef2 	.word	0x000c7ef2

000c0298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0298:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c029a:	e9d0 5300 	ldrd	r5, r3, [r0]
   c029e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c02a0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c02a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c02a6:	42ae      	cmp	r6, r5
   c02a8:	d005      	beq.n	c02b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c02aa:	f105 0008 	add.w	r0, r5, #8
   c02ae:	f7ff fff3 	bl	c0298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c02b2:	3514      	adds	r5, #20
   c02b4:	e7f7      	b.n	c02a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c02b6:	6820      	ldr	r0, [r4, #0]
   c02b8:	f7fe f83c 	bl	be334 <free>
}
   c02bc:	4620      	mov	r0, r4
   c02be:	bd70      	pop	{r4, r5, r6, pc}

000c02c0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c02c0:	b510      	push	{r4, lr}
   c02c2:	4604      	mov	r4, r0
   c02c4:	300c      	adds	r0, #12
   c02c6:	f7ff ffe7 	bl	c0298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c02ca:	4620      	mov	r0, r4
   c02cc:	f7fe fef3 	bl	bf0b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c02d0:	4620      	mov	r0, r4
   c02d2:	bd10      	pop	{r4, pc}

000c02d4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c02d4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c02d6:	4b04      	ldr	r3, [pc, #16]	; (c02e8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c02d8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c02da:	f840 3b04 	str.w	r3, [r0], #4
   c02de:	f7ff ffef 	bl	c02c0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c02e2:	4620      	mov	r0, r4
   c02e4:	bd10      	pop	{r4, pc}
   c02e6:	bf00      	nop
   c02e8:	000c6e10 	.word	0x000c6e10

000c02ec <_ZN5spark16StreamLogHandlerD0Ev>:
   c02ec:	b510      	push	{r4, lr}
   c02ee:	4604      	mov	r4, r0
   c02f0:	f7ff fff0 	bl	c02d4 <_ZN5spark16StreamLogHandlerD1Ev>
   c02f4:	4620      	mov	r0, r4
   c02f6:	2124      	movs	r1, #36	; 0x24
   c02f8:	f7f3 fed3 	bl	b40a2 <_ZdlPvj>
   c02fc:	4620      	mov	r0, r4
   c02fe:	bd10      	pop	{r4, pc}

000c0300 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c0300:	b510      	push	{r4, lr}
   c0302:	4b03      	ldr	r3, [pc, #12]	; (c0310 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c0304:	6003      	str	r3, [r0, #0]
   c0306:	4604      	mov	r4, r0
   c0308:	f7ff ffe4 	bl	c02d4 <_ZN5spark16StreamLogHandlerD1Ev>
   c030c:	4620      	mov	r0, r4
   c030e:	bd10      	pop	{r4, pc}
   c0310:	000c7f90 	.word	0x000c7f90

000c0314 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c0314:	b510      	push	{r4, lr}
   c0316:	4604      	mov	r4, r0
   c0318:	f7ff fff2 	bl	c0300 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c031c:	4620      	mov	r0, r4
   c031e:	2124      	movs	r1, #36	; 0x24
   c0320:	f7f3 febf 	bl	b40a2 <_ZdlPvj>
   c0324:	4620      	mov	r0, r4
   c0326:	bd10      	pop	{r4, pc}

000c0328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c0328:	2200      	movs	r2, #0
   c032a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c032e:	b510      	push	{r4, lr}
        capacity_(0) {
   c0330:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c0332:	680c      	ldr	r4, [r1, #0]
   c0334:	6004      	str	r4, [r0, #0]
   c0336:	684c      	ldr	r4, [r1, #4]
   c0338:	6044      	str	r4, [r0, #4]
   c033a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c033c:	600a      	str	r2, [r1, #0]
   c033e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0340:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0342:	608a      	str	r2, [r1, #8]
}
   c0344:	bd10      	pop	{r4, pc}

000c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c0346:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c0348:	6803      	ldr	r3, [r0, #0]
   c034a:	4604      	mov	r4, r0
   c034c:	6818      	ldr	r0, [r3, #0]
   c034e:	f7fd fd6b 	bl	bde28 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c0352:	4620      	mov	r0, r4
   c0354:	bd10      	pop	{r4, pc}
	...

000c0358 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c0358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c035c:	b087      	sub	sp, #28
   c035e:	4680      	mov	r8, r0
   c0360:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c0362:	4b1c      	ldr	r3, [pc, #112]	; (c03d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c0364:	685b      	ldr	r3, [r3, #4]
   c0366:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c036a:	4689      	mov	r9, r1
   c036c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c036e:	b96b      	cbnz	r3, c038c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c0370:	f7ff fed0 	bl	c0114 <_ZN5spark10LogManager8instanceEv>
   c0374:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0376:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c037a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c037c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c037e:	f7ff fda3 	bl	bfec8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c0382:	7b23      	ldrb	r3, [r4, #12]
   c0384:	b12b      	cbz	r3, c0392 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c0386:	a805      	add	r0, sp, #20
   c0388:	f7ff ffdd 	bl	c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c038c:	b007      	add	sp, #28
   c038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c0392:	2301      	movs	r3, #1
   c0394:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c0396:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c039a:	fa5f f989 	uxtb.w	r9, r9
   c039e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c03a2:	45aa      	cmp	sl, r5
   c03a4:	d012      	beq.n	c03cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c03a6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c03aa:	4631      	mov	r1, r6
   c03ac:	1d38      	adds	r0, r7, #4
   c03ae:	f7ff fe3d 	bl	c002c <_ZNK5spark6detail9LogFilter5levelEPKc>
   c03b2:	4581      	cmp	r9, r0
   c03b4:	d3f5      	bcc.n	c03a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c03b6:	683b      	ldr	r3, [r7, #0]
   c03b8:	9a03      	ldr	r2, [sp, #12]
   c03ba:	9200      	str	r2, [sp, #0]
   c03bc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c03c0:	464a      	mov	r2, r9
   c03c2:	4633      	mov	r3, r6
   c03c4:	4641      	mov	r1, r8
   c03c6:	4638      	mov	r0, r7
   c03c8:	47d8      	blx	fp
   c03ca:	e7ea      	b.n	c03a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c03cc:	2300      	movs	r3, #0
   c03ce:	7323      	strb	r3, [r4, #12]
   c03d0:	e7d9      	b.n	c0386 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c03d2:	bf00      	nop
   c03d4:	e000ed00 	.word	0xe000ed00

000c03d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c03d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c03dc:	469b      	mov	fp, r3
   c03de:	4b1a      	ldr	r3, [pc, #104]	; (c0448 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c03e0:	685b      	ldr	r3, [r3, #4]
   c03e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c03e6:	4680      	mov	r8, r0
   c03e8:	4689      	mov	r9, r1
   c03ea:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c03ec:	b96b      	cbnz	r3, c040a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c03ee:	f7ff fe91 	bl	c0114 <_ZN5spark10LogManager8instanceEv>
   c03f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c03f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c03f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c03fa:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c03fc:	f7ff fd64 	bl	bfec8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c0400:	7b23      	ldrb	r3, [r4, #12]
   c0402:	b12b      	cbz	r3, c0410 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c0404:	a801      	add	r0, sp, #4
   c0406:	f7ff ff9e 	bl	c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c040a:	b003      	add	sp, #12
   c040c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c0410:	2301      	movs	r3, #1
   c0412:	7323      	strb	r3, [r4, #12]
   c0414:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c0418:	b2f6      	uxtb	r6, r6
   c041a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c041e:	4555      	cmp	r5, sl
   c0420:	d00e      	beq.n	c0440 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c0422:	f855 7b04 	ldr.w	r7, [r5], #4
   c0426:	4659      	mov	r1, fp
   c0428:	1d38      	adds	r0, r7, #4
   c042a:	f7ff fdff 	bl	c002c <_ZNK5spark6detail9LogFilter5levelEPKc>
   c042e:	4286      	cmp	r6, r0
   c0430:	d3f5      	bcc.n	c041e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c0432:	683b      	ldr	r3, [r7, #0]
   c0434:	464a      	mov	r2, r9
   c0436:	68db      	ldr	r3, [r3, #12]
   c0438:	4641      	mov	r1, r8
   c043a:	4638      	mov	r0, r7
   c043c:	4798      	blx	r3
   c043e:	e7ee      	b.n	c041e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c0440:	2300      	movs	r3, #0
   c0442:	7323      	strb	r3, [r4, #12]
   c0444:	e7de      	b.n	c0404 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c0446:	bf00      	nop
   c0448:	e000ed00 	.word	0xe000ed00

000c044c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c044c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c0450:	4b16      	ldr	r3, [pc, #88]	; (c04ac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c0452:	685b      	ldr	r3, [r3, #4]
   c0454:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0458:	4605      	mov	r5, r0
   c045a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c045c:	bb1b      	cbnz	r3, c04a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c045e:	f7ff fe59 	bl	c0114 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c0462:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c0466:	4604      	mov	r4, r0
   c0468:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c046a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c046c:	f7ff fd2c 	bl	bfec8 <_ZN14RecursiveMutex4lockEv.isra.0>
   c0470:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c0474:	2446      	movs	r4, #70	; 0x46
   c0476:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c047a:	45b0      	cmp	r8, r6
   c047c:	d109      	bne.n	c0492 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c047e:	a801      	add	r0, sp, #4
   c0480:	f7ff ff61 	bl	c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c0484:	42a5      	cmp	r5, r4
   c0486:	bfb4      	ite	lt
   c0488:	2000      	movlt	r0, #0
   c048a:	2001      	movge	r0, #1
}
   c048c:	b002      	add	sp, #8
   c048e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c0492:	f856 0b04 	ldr.w	r0, [r6], #4
   c0496:	4639      	mov	r1, r7
   c0498:	3004      	adds	r0, #4
   c049a:	f7ff fdc7 	bl	c002c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c049e:	4284      	cmp	r4, r0
   c04a0:	bfa8      	it	ge
   c04a2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c04a4:	e7e9      	b.n	c047a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c04a6:	2000      	movs	r0, #0
   c04a8:	e7f0      	b.n	c048c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c04aa:	bf00      	nop
   c04ac:	e000ed00 	.word	0xe000ed00

000c04b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c04b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c04b2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c04b6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c04b8:	4604      	mov	r4, r0
   c04ba:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c04bc:	db0d      	blt.n	c04da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c04be:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c04c0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c04c2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c04c4:	dd04      	ble.n	c04d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c04c6:	00b9      	lsls	r1, r7, #2
   c04c8:	f7fd ff3c 	bl	be344 <realloc>
            if (!d) {
   c04cc:	b918      	cbnz	r0, c04d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c04ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c04d0:	f7fd ff30 	bl	be334 <free>
        T* d = nullptr;
   c04d4:	2000      	movs	r0, #0
        data_ = d;
   c04d6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c04d8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c04da:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c04dc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c04de:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c04e2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c04e4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c04e8:	1d08      	adds	r0, r1, #4
   c04ea:	f004 f87b 	bl	c45e4 <memmove>
    new(p) T(std::move(value));
   c04ee:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c04f2:	6863      	ldr	r3, [r4, #4]
   c04f4:	3301      	adds	r3, #1
   c04f6:	6063      	str	r3, [r4, #4]
    return true;
   c04f8:	2001      	movs	r0, #1
   c04fa:	e7e8      	b.n	c04ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c04fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c04fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c04fe:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0502:	4604      	mov	r4, r0
   c0504:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0506:	9301      	str	r3, [sp, #4]
   c0508:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c050a:	f7ff fcdd 	bl	bfec8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c050e:	e9d4 3200 	ldrd	r3, r2, [r4]
   c0512:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c0516:	4293      	cmp	r3, r2
   c0518:	4619      	mov	r1, r3
   c051a:	d00b      	beq.n	c0534 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c051c:	6809      	ldr	r1, [r1, #0]
   c051e:	42a9      	cmp	r1, r5
   c0520:	f103 0304 	add.w	r3, r3, #4
   c0524:	d1f7      	bne.n	c0516 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c0526:	a801      	add	r0, sp, #4
   c0528:	f7ff ff0d 	bl	c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c052c:	2500      	movs	r5, #0
}
   c052e:	4628      	mov	r0, r5
   c0530:	b003      	add	sp, #12
   c0532:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c0534:	4629      	mov	r1, r5
   c0536:	4620      	mov	r0, r4
   c0538:	f7ff ffba 	bl	c04b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c053c:	4605      	mov	r5, r0
   c053e:	2800      	cmp	r0, #0
   c0540:	d0f1      	beq.n	c0526 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c0542:	6863      	ldr	r3, [r4, #4]
   c0544:	2b01      	cmp	r3, #1
   c0546:	d101      	bne.n	c054c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c0548:	f7ff fe00 	bl	c014c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c054c:	a801      	add	r0, sp, #4
   c054e:	f7ff fefa 	bl	c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c0552:	e7ec      	b.n	c052e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c0554 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0554:	b570      	push	{r4, r5, r6, lr}
   c0556:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c0558:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c055c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c055e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c0562:	4282      	cmp	r2, r0
   c0564:	d00f      	beq.n	c0586 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c0566:	4601      	mov	r1, r0
            if (*p == value) {
   c0568:	681d      	ldr	r5, [r3, #0]
   c056a:	f851 6b04 	ldr.w	r6, [r1], #4
   c056e:	42ae      	cmp	r6, r5
   c0570:	d107      	bne.n	c0582 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0572:	1a52      	subs	r2, r2, r1
   c0574:	f004 f836 	bl	c45e4 <memmove>
    --size_;
   c0578:	6863      	ldr	r3, [r4, #4]
   c057a:	3b01      	subs	r3, #1
   c057c:	6063      	str	r3, [r4, #4]
    return true;
   c057e:	2001      	movs	r0, #1
}
   c0580:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c0582:	4608      	mov	r0, r1
   c0584:	e7ed      	b.n	c0562 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0586:	2000      	movs	r0, #0
   c0588:	e7fa      	b.n	c0580 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c058a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c058a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c058c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0590:	4604      	mov	r4, r0
   c0592:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0594:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0596:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0598:	f7ff fc96 	bl	bfec8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c059c:	a901      	add	r1, sp, #4
   c059e:	4620      	mov	r0, r4
   c05a0:	f7ff ffd8 	bl	c0554 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c05a4:	b118      	cbz	r0, c05ae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c05a6:	6863      	ldr	r3, [r4, #4]
   c05a8:	b90b      	cbnz	r3, c05ae <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c05aa:	f7ff fddb 	bl	c0164 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c05ae:	a803      	add	r0, sp, #12
   c05b0:	f7ff fec9 	bl	c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c05b4:	b004      	add	sp, #16
   c05b6:	bd10      	pop	{r4, pc}

000c05b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c05b8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c05ba:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c05be:	2318      	movs	r3, #24
   c05c0:	4604      	mov	r4, r0
   c05c2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c05c6:	42ae      	cmp	r6, r5
   c05c8:	d015      	beq.n	c05f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c05ca:	f105 0110 	add.w	r1, r5, #16
   c05ce:	4620      	mov	r0, r4
   c05d0:	f7ff ffc0 	bl	c0554 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c05d4:	6863      	ldr	r3, [r4, #4]
   c05d6:	b90b      	cbnz	r3, c05dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c05d8:	f7ff fdc4 	bl	c0164 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c05dc:	69e0      	ldr	r0, [r4, #28]
   c05de:	6929      	ldr	r1, [r5, #16]
   c05e0:	6803      	ldr	r3, [r0, #0]
   c05e2:	68db      	ldr	r3, [r3, #12]
   c05e4:	4798      	blx	r3
        if (h.stream) {
   c05e6:	6969      	ldr	r1, [r5, #20]
   c05e8:	b119      	cbz	r1, c05f2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c05ea:	6a20      	ldr	r0, [r4, #32]
   c05ec:	6803      	ldr	r3, [r0, #0]
   c05ee:	68db      	ldr	r3, [r3, #12]
   c05f0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c05f2:	3518      	adds	r5, #24
   c05f4:	e7e7      	b.n	c05c6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c05f6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c05fa:	2618      	movs	r6, #24
   c05fc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0600:	42ae      	cmp	r6, r5
   c0602:	d004      	beq.n	c060e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0604:	4628      	mov	r0, r5
   c0606:	f7fe f8ab 	bl	be760 <_ZN6StringD1Ev>
   c060a:	3518      	adds	r5, #24
   c060c:	e7f8      	b.n	c0600 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c060e:	2300      	movs	r3, #0
   c0610:	6163      	str	r3, [r4, #20]
}
   c0612:	bd70      	pop	{r4, r5, r6, pc}

000c0614 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0614:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0616:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c0618:	f7ff fda4 	bl	c0164 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c061c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c0620:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0622:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0624:	f7ff fc50 	bl	bfec8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c0628:	4620      	mov	r0, r4
   c062a:	f7ff ffc5 	bl	c05b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c062e:	a801      	add	r0, sp, #4
   c0630:	f7ff fe89 	bl	c0346 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c0634:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c0636:	b108      	cbz	r0, c063c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c0638:	f7fd fbe6 	bl	bde08 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c063c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0640:	2618      	movs	r6, #24
   c0642:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0646:	42ae      	cmp	r6, r5
   c0648:	d004      	beq.n	c0654 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c064a:	4628      	mov	r0, r5
   c064c:	f7fe f888 	bl	be760 <_ZN6StringD1Ev>
   c0650:	3518      	adds	r5, #24
   c0652:	e7f8      	b.n	c0646 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c0654:	6920      	ldr	r0, [r4, #16]
   c0656:	f7fd fe6d 	bl	be334 <free>
   c065a:	6820      	ldr	r0, [r4, #0]
   c065c:	f7fd fe6a 	bl	be334 <free>
}
   c0660:	4620      	mov	r0, r4
   c0662:	b002      	add	sp, #8
   c0664:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0668 <__tcf_2>:
    static LogManager mgr;
   c0668:	4801      	ldr	r0, [pc, #4]	; (c0670 <__tcf_2+0x8>)
   c066a:	f7ff bfd3 	b.w	c0614 <_ZN5spark10LogManagerD1Ev>
   c066e:	bf00      	nop
   c0670:	2003e654 	.word	0x2003e654

000c0674 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0674:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0678:	4604      	mov	r4, r0
   c067a:	460d      	mov	r5, r1
   c067c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c067e:	d915      	bls.n	c06ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c0680:	4290      	cmp	r0, r2
   c0682:	d214      	bcs.n	c06ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0684:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0688:	1a75      	subs	r5, r6, r1
   c068a:	f1a1 0714 	sub.w	r7, r1, #20
   c068e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0690:	42b7      	cmp	r7, r6
   c0692:	d01a      	beq.n	c06ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0694:	b11c      	cbz	r4, c069e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0696:	4631      	mov	r1, r6
   c0698:	4620      	mov	r0, r4
   c069a:	f7ff fc78 	bl	bff8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c069e:	f106 0008 	add.w	r0, r6, #8
   c06a2:	f7ff fdf9 	bl	c0298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c06a6:	3e14      	subs	r6, #20
   c06a8:	3c14      	subs	r4, #20
   c06aa:	e7f1      	b.n	c0690 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c06ac:	d00d      	beq.n	c06ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c06ae:	42b5      	cmp	r5, r6
   c06b0:	d00b      	beq.n	c06ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c06b2:	b11c      	cbz	r4, c06bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c06b4:	4629      	mov	r1, r5
   c06b6:	4620      	mov	r0, r4
   c06b8:	f7ff fc69 	bl	bff8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c06bc:	f105 0008 	add.w	r0, r5, #8
   c06c0:	f7ff fdea 	bl	c0298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c06c4:	3514      	adds	r5, #20
   c06c6:	3414      	adds	r4, #20
   c06c8:	e7f1      	b.n	c06ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c06ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c06cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c06cc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c06ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c06d0:	4604      	mov	r4, r0
   c06d2:	460d      	mov	r5, r1
   c06d4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c06d6:	d914      	bls.n	c0702 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c06d8:	4290      	cmp	r0, r2
   c06da:	d213      	bcs.n	c0704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c06dc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c06e0:	1a75      	subs	r5, r6, r1
   c06e2:	f1a1 0710 	sub.w	r7, r1, #16
   c06e6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c06e8:	42b7      	cmp	r7, r6
   c06ea:	d018      	beq.n	c071e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c06ec:	b11c      	cbz	r4, c06f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c06ee:	4631      	mov	r1, r6
   c06f0:	4620      	mov	r0, r4
   c06f2:	f7fe f8b1 	bl	be858 <_ZN6StringC1EOS_>
                end->~T();
   c06f6:	4630      	mov	r0, r6
   c06f8:	f7fe f832 	bl	be760 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c06fc:	3e10      	subs	r6, #16
   c06fe:	3c10      	subs	r4, #16
   c0700:	e7f2      	b.n	c06e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c0702:	d00c      	beq.n	c071e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0704:	42b5      	cmp	r5, r6
   c0706:	d00a      	beq.n	c071e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0708:	b11c      	cbz	r4, c0712 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c070a:	4629      	mov	r1, r5
   c070c:	4620      	mov	r0, r4
   c070e:	f7fe f8a3 	bl	be858 <_ZN6StringC1EOS_>
                p->~T();
   c0712:	4628      	mov	r0, r5
   c0714:	f7fe f824 	bl	be760 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0718:	3510      	adds	r5, #16
   c071a:	3410      	adds	r4, #16
   c071c:	e7f2      	b.n	c0704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c071e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c0720:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c0722:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0724:	4605      	mov	r5, r0
        if (n > 0) {
   c0726:	dd11      	ble.n	c074c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0728:	0130      	lsls	r0, r6, #4
   c072a:	f7fd fdfb 	bl	be324 <malloc>
            if (!d) {
   c072e:	4604      	mov	r4, r0
   c0730:	b158      	cbz	r0, c074a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c0732:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0736:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c073a:	f7ff ffc7 	bl	c06cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c073e:	6828      	ldr	r0, [r5, #0]
   c0740:	f7fd fdf8 	bl	be334 <free>
        data_ = d;
   c0744:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c0746:	60ae      	str	r6, [r5, #8]
        return true;
   c0748:	2001      	movs	r0, #1
    }
   c074a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c074c:	2400      	movs	r4, #0
   c074e:	e7f6      	b.n	c073e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c0750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0754:	4690      	mov	r8, r2
   c0756:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0758:	2300      	movs	r3, #0
   c075a:	9103      	str	r1, [sp, #12]
    return size_;
   c075c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c0760:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0762:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0764:	4299      	cmp	r1, r3
        capacity_(0) {
   c0766:	e9c0 3300 	strd	r3, r3, [r0]
   c076a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c076e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c0772:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0776:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0778:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c077a:	dc23      	bgt.n	c07c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c077c:	e9d8 5700 	ldrd	r5, r7, [r8]
   c0780:	2314      	movs	r3, #20
   c0782:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0786:	42af      	cmp	r7, r5
   c0788:	d03b      	beq.n	c0802 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c078a:	4629      	mov	r1, r5
   c078c:	a80b      	add	r0, sp, #44	; 0x2c
   c078e:	f7fe f863 	bl	be858 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c0792:	a90b      	add	r1, sp, #44	; 0x2c
   c0794:	a80f      	add	r0, sp, #60	; 0x3c
   c0796:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0798:	f7fe f85e 	bl	be858 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c079c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c07a0:	4299      	cmp	r1, r3
   c07a2:	da1b      	bge.n	c07dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c07a4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c07a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c07a8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c07ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c07b0:	4631      	mov	r1, r6
   c07b2:	f106 0010 	add.w	r0, r6, #16
   c07b6:	f7ff ff89 	bl	c06cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c07ba:	b9ee      	cbnz	r6, c07f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c07bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c07be:	3301      	adds	r3, #1
   c07c0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c07c2:	e011      	b.n	c07e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c07c4:	a808      	add	r0, sp, #32
   c07c6:	f7ff ffab 	bl	c0720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c07ca:	2800      	cmp	r0, #0
   c07cc:	d1d6      	bne.n	c077c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c07ce:	a808      	add	r0, sp, #32
   c07d0:	f7fe fc71 	bl	bf0b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c07d4:	4620      	mov	r0, r4
   c07d6:	b015      	add	sp, #84	; 0x54
   c07d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c07dc:	3101      	adds	r1, #1
   c07de:	a808      	add	r0, sp, #32
   c07e0:	f7ff ff9e 	bl	c0720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c07e4:	2800      	cmp	r0, #0
   c07e6:	d1dd      	bne.n	c07a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c07e8:	a80f      	add	r0, sp, #60	; 0x3c
   c07ea:	f7fd ffb9 	bl	be760 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c07ee:	a80b      	add	r0, sp, #44	; 0x2c
   c07f0:	f7fd ffb6 	bl	be760 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c07f4:	3514      	adds	r5, #20
   c07f6:	e7c6      	b.n	c0786 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c07f8:	a90f      	add	r1, sp, #60	; 0x3c
   c07fa:	4630      	mov	r0, r6
   c07fc:	f7fe f82c 	bl	be858 <_ZN6StringC1EOS_>
   c0800:	e7dc      	b.n	c07bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0802:	2600      	movs	r6, #0
   c0804:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0808:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c080a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c080e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0812:	429e      	cmp	r6, r3
   c0814:	da7c      	bge.n	c0910 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0816:	0133      	lsls	r3, r6, #4
   c0818:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c081a:	9306      	str	r3, [sp, #24]
        if (!category) {
   c081c:	b90b      	cbnz	r3, c0822 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c081e:	3601      	adds	r6, #1
   c0820:	e7f5      	b.n	c080e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c0822:	2300      	movs	r3, #0
   c0824:	9307      	str	r3, [sp, #28]
   c0826:	fb09 f306 	mul.w	r3, r9, r6
   c082a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c082c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c082e:	a907      	add	r1, sp, #28
   c0830:	a806      	add	r0, sp, #24
   c0832:	f7ff fb22 	bl	bfe7a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0836:	4682      	mov	sl, r0
   c0838:	2800      	cmp	r0, #0
   c083a:	d0f0      	beq.n	c081e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c083c:	f04f 0300 	mov.w	r3, #0
   c0840:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0844:	4601      	mov	r1, r0
   c0846:	9a07      	ldr	r2, [sp, #28]
   c0848:	f10d 0317 	add.w	r3, sp, #23
   c084c:	4628      	mov	r0, r5
   c084e:	f7ff fbb1 	bl	bffb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0852:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0856:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0858:	2f00      	cmp	r7, #0
   c085a:	d14a      	bne.n	c08f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c085c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c0860:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0864:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0868:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c086c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c0870:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0874:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0876:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c087a:	4293      	cmp	r3, r2
   c087c:	db17      	blt.n	c08ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c087e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c0882:	f1ba 0f00 	cmp.w	sl, #0
   c0886:	dd30      	ble.n	c08ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0888:	fb09 f00a 	mul.w	r0, r9, sl
   c088c:	f7fd fd4a 	bl	be324 <malloc>
            if (!d) {
   c0890:	4683      	mov	fp, r0
   c0892:	b360      	cbz	r0, c08ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0894:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0898:	fb09 1202 	mla	r2, r9, r2, r1
   c089c:	f7ff feea 	bl	c0674 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c08a0:	6828      	ldr	r0, [r5, #0]
   c08a2:	f7fd fd47 	bl	be334 <free>
        data_ = d;
   c08a6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c08aa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c08ae:	682b      	ldr	r3, [r5, #0]
   c08b0:	9a01      	ldr	r2, [sp, #4]
   c08b2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c08b6:	686a      	ldr	r2, [r5, #4]
   c08b8:	4651      	mov	r1, sl
   c08ba:	fb09 3202 	mla	r2, r9, r2, r3
   c08be:	f10a 0014 	add.w	r0, sl, #20
   c08c2:	f7ff fed7 	bl	c0674 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c08c6:	f1ba 0f00 	cmp.w	sl, #0
   c08ca:	d003      	beq.n	c08d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c08cc:	a90f      	add	r1, sp, #60	; 0x3c
   c08ce:	4650      	mov	r0, sl
   c08d0:	f7ff fb5d 	bl	bff8e <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c08d4:	686b      	ldr	r3, [r5, #4]
   c08d6:	3301      	adds	r3, #1
   c08d8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c08da:	a811      	add	r0, sp, #68	; 0x44
   c08dc:	f7ff fcdc 	bl	c0298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c08e0:	b13f      	cbz	r7, c08f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c08e2:	a80b      	add	r0, sp, #44	; 0x2c
   c08e4:	f7ff fcd8 	bl	c0298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c08e8:	e771      	b.n	c07ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c08ea:	46bb      	mov	fp, r7
   c08ec:	e7d8      	b.n	c08a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c08ee:	2701      	movs	r7, #1
   c08f0:	e7f3      	b.n	c08da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c08f2:	9b01      	ldr	r3, [sp, #4]
   c08f4:	682d      	ldr	r5, [r5, #0]
   c08f6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c08fa:	9b06      	ldr	r3, [sp, #24]
   c08fc:	781b      	ldrb	r3, [r3, #0]
   c08fe:	b92b      	cbnz	r3, c090c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0900:	f8d8 3000 	ldr.w	r3, [r8]
   c0904:	9a02      	ldr	r2, [sp, #8]
   c0906:	4413      	add	r3, r2
   c0908:	7c1b      	ldrb	r3, [r3, #16]
   c090a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c090c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c090e:	e78e      	b.n	c082e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0910:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0912:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0914:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0916:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0918:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c091a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c091c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c091e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0920:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0922:	60a2      	str	r2, [r4, #8]
   c0924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0926:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0928:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c092a:	60e2      	str	r2, [r4, #12]
   c092c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c092e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0930:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0932:	6122      	str	r2, [r4, #16]
   c0934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0936:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0938:	9b03      	ldr	r3, [sp, #12]
   c093a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c093c:	6162      	str	r2, [r4, #20]
   c093e:	7623      	strb	r3, [r4, #24]
   c0940:	e7cf      	b.n	c08e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c0944 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0944:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0946:	4604      	mov	r4, r0
   c0948:	b087      	sub	sp, #28
   c094a:	460d      	mov	r5, r1
        filter_(level, filters) {
   c094c:	4626      	mov	r6, r4
        stream_(&stream) {
   c094e:	4619      	mov	r1, r3
   c0950:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0952:	4617      	mov	r7, r2
        stream_(&stream) {
   c0954:	f7f5 ff4a 	bl	b67ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0958:	4b0b      	ldr	r3, [pc, #44]	; (c0988 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c095a:	f846 3b04 	str.w	r3, [r6], #4
   c095e:	4669      	mov	r1, sp
   c0960:	a803      	add	r0, sp, #12
   c0962:	f7f5 ff43 	bl	b67ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0966:	aa03      	add	r2, sp, #12
   c0968:	4639      	mov	r1, r7
   c096a:	4630      	mov	r0, r6
   c096c:	f7ff fef0 	bl	c0750 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0970:	a803      	add	r0, sp, #12
   c0972:	f7f5 febf 	bl	b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0976:	4668      	mov	r0, sp
   c0978:	f7f5 febc 	bl	b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c097c:	4b03      	ldr	r3, [pc, #12]	; (c098c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c097e:	6023      	str	r3, [r4, #0]
}
   c0980:	4620      	mov	r0, r4
        stream_(&stream) {
   c0982:	6225      	str	r5, [r4, #32]
}
   c0984:	b007      	add	sp, #28
   c0986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0988:	000c6e10 	.word	0x000c6e10
   c098c:	000c7f78 	.word	0x000c7f78

000c0990 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c0990:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0992:	460f      	mov	r7, r1
   c0994:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0996:	491d      	ldr	r1, [pc, #116]	; (c0a0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0998:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c099a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c099c:	4616      	mov	r6, r2
   c099e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c09a0:	f003 fe96 	bl	c46d0 <strcmp>
   c09a4:	b9c0      	cbnz	r0, c09d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c09a6:	b1a4      	cbz	r4, c09d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c09a8:	4629      	mov	r1, r5
   c09aa:	a801      	add	r0, sp, #4
   c09ac:	f7ff fcbc 	bl	c0328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c09b0:	4917      	ldr	r1, [pc, #92]	; (c0a10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c09b2:	2024      	movs	r0, #36	; 0x24
   c09b4:	f001 fc06 	bl	c21c4 <_ZnwjRKSt9nothrow_t>
   c09b8:	4605      	mov	r5, r0
   c09ba:	b130      	cbz	r0, c09ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c09bc:	ab01      	add	r3, sp, #4
   c09be:	4632      	mov	r2, r6
   c09c0:	4621      	mov	r1, r4
   c09c2:	f7ff ffbf 	bl	c0944 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c09c6:	4b13      	ldr	r3, [pc, #76]	; (c0a14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c09c8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c09ca:	a801      	add	r0, sp, #4
   c09cc:	f7f5 fe92 	bl	b66f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c09d0:	462c      	mov	r4, r5
}
   c09d2:	4620      	mov	r0, r4
   c09d4:	b005      	add	sp, #20
   c09d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c09d8:	490f      	ldr	r1, [pc, #60]	; (c0a18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c09da:	4638      	mov	r0, r7
   c09dc:	f003 fe78 	bl	c46d0 <strcmp>
   c09e0:	b990      	cbnz	r0, c0a08 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c09e2:	2c00      	cmp	r4, #0
   c09e4:	d0f5      	beq.n	c09d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c09e6:	4629      	mov	r1, r5
   c09e8:	a801      	add	r0, sp, #4
   c09ea:	f7ff fc9d 	bl	c0328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c09ee:	4908      	ldr	r1, [pc, #32]	; (c0a10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c09f0:	2024      	movs	r0, #36	; 0x24
   c09f2:	f001 fbe7 	bl	c21c4 <_ZnwjRKSt9nothrow_t>
   c09f6:	4605      	mov	r5, r0
   c09f8:	2800      	cmp	r0, #0
   c09fa:	d0e6      	beq.n	c09ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c09fc:	ab01      	add	r3, sp, #4
   c09fe:	4632      	mov	r2, r6
   c0a00:	4621      	mov	r1, r4
   c0a02:	f7ff ff9f 	bl	c0944 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0a06:	e7e0      	b.n	c09ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0a08:	2400      	movs	r4, #0
   c0a0a:	e7e2      	b.n	c09d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0a0c:	000c7efa 	.word	0x000c7efa
   c0a10:	000c8125 	.word	0x000c8125
   c0a14:	000c7f90 	.word	0x000c7f90
   c0a18:	000c7efe 	.word	0x000c7efe

000c0a1c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c0a1c:	4b01      	ldr	r3, [pc, #4]	; (c0a24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c0a1e:	4a02      	ldr	r2, [pc, #8]	; (c0a28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c0a20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c0a22:	4770      	bx	lr
   c0a24:	2003e650 	.word	0x2003e650
   c0a28:	000c7f0f 	.word	0x000c7f0f

000c0a2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0a30:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c0a32:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0a36:	4604      	mov	r4, r0
   c0a38:	460e      	mov	r6, r1
   c0a3a:	4617      	mov	r7, r2
   c0a3c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c0a3e:	f000 fe95 	bl	c176c <_Z16_fetch_usbserialv>
   c0a42:	4581      	cmp	r9, r0
   c0a44:	d04c      	beq.n	c0ae0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c0a46:	792b      	ldrb	r3, [r5, #4]
   c0a48:	0719      	lsls	r1, r3, #28
   c0a4a:	d504      	bpl.n	c0a56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0a4c:	696a      	ldr	r2, [r5, #20]
   c0a4e:	4954      	ldr	r1, [pc, #336]	; (c0ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c0a50:	4620      	mov	r0, r4
   c0a52:	f7ff fa8d 	bl	bff70 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0a56:	f1b8 0f00 	cmp.w	r8, #0
   c0a5a:	d00d      	beq.n	c0a78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0a5c:	215b      	movs	r1, #91	; 0x5b
   c0a5e:	4620      	mov	r0, r4
   c0a60:	f7ff fa7a 	bl	bff58 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0a64:	4641      	mov	r1, r8
   c0a66:	4620      	mov	r0, r4
   c0a68:	f7ff fa67 	bl	bff3a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0a6c:	6823      	ldr	r3, [r4, #0]
   c0a6e:	494d      	ldr	r1, [pc, #308]	; (c0ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c0a70:	68db      	ldr	r3, [r3, #12]
   c0a72:	2202      	movs	r2, #2
   c0a74:	4620      	mov	r0, r4
   c0a76:	4798      	blx	r3
    if (attr.has_file) {
   c0a78:	792b      	ldrb	r3, [r5, #4]
   c0a7a:	07da      	lsls	r2, r3, #31
   c0a7c:	d523      	bpl.n	c0ac6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c0a7e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c0a82:	212f      	movs	r1, #47	; 0x2f
   c0a84:	4640      	mov	r0, r8
   c0a86:	f003 fea0 	bl	c47ca <strrchr>
    if (s1) {
   c0a8a:	b108      	cbz	r0, c0a90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0a8c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c0a90:	4641      	mov	r1, r8
   c0a92:	4620      	mov	r0, r4
   c0a94:	f7ff fa51 	bl	bff3a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0a98:	792b      	ldrb	r3, [r5, #4]
   c0a9a:	079b      	lsls	r3, r3, #30
   c0a9c:	d508      	bpl.n	c0ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c0a9e:	213a      	movs	r1, #58	; 0x3a
   c0aa0:	4620      	mov	r0, r4
   c0aa2:	f7ff fa59 	bl	bff58 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0aa6:	68ea      	ldr	r2, [r5, #12]
   c0aa8:	493f      	ldr	r1, [pc, #252]	; (c0ba8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0aaa:	4620      	mov	r0, r4
   c0aac:	f7ff fa60 	bl	bff70 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c0ab0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c0ab2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0ab4:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0ab8:	68db      	ldr	r3, [r3, #12]
   c0aba:	bf14      	ite	ne
   c0abc:	493b      	ldrne	r1, [pc, #236]	; (c0bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c0abe:	493c      	ldreq	r1, [pc, #240]	; (c0bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c0ac0:	2202      	movs	r2, #2
            write(": ", 2);
   c0ac2:	4620      	mov	r0, r4
   c0ac4:	4798      	blx	r3
    if (attr.has_function) {
   c0ac6:	792b      	ldrb	r3, [r5, #4]
   c0ac8:	0758      	lsls	r0, r3, #29
   c0aca:	d51d      	bpl.n	c0b08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0acc:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0ace:	460b      	mov	r3, r1
   c0ad0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c0ad2:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0ad6:	b160      	cbz	r0, c0af2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0ad8:	2820      	cmp	r0, #32
   c0ada:	d108      	bne.n	c0aee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0adc:	4619      	mov	r1, r3
   c0ade:	e7f7      	b.n	c0ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c0ae0:	4834      	ldr	r0, [pc, #208]	; (c0bb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c0ae2:	f001 f80e 	bl	c1b02 <_ZN5spark12NetworkClass9listeningEv>
   c0ae6:	2800      	cmp	r0, #0
   c0ae8:	d0ad      	beq.n	c0a46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c0aee:	2828      	cmp	r0, #40	; 0x28
   c0af0:	d1ee      	bne.n	c0ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c0af2:	6823      	ldr	r3, [r4, #0]
   c0af4:	1a52      	subs	r2, r2, r1
   c0af6:	68db      	ldr	r3, [r3, #12]
   c0af8:	4620      	mov	r0, r4
   c0afa:	4798      	blx	r3
        write("(): ", 4);
   c0afc:	6823      	ldr	r3, [r4, #0]
   c0afe:	492e      	ldr	r1, [pc, #184]	; (c0bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c0b00:	68db      	ldr	r3, [r3, #12]
   c0b02:	2204      	movs	r2, #4
   c0b04:	4620      	mov	r0, r4
   c0b06:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c0b08:	2100      	movs	r1, #0
   c0b0a:	4638      	mov	r0, r7
   c0b0c:	f7fd fb0c 	bl	be128 <log_level_name>
   c0b10:	4601      	mov	r1, r0
    write(s);
   c0b12:	4620      	mov	r0, r4
   c0b14:	f7ff fa11 	bl	bff3a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c0b18:	6823      	ldr	r3, [r4, #0]
   c0b1a:	4925      	ldr	r1, [pc, #148]	; (c0bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c0b1c:	68db      	ldr	r3, [r3, #12]
   c0b1e:	2202      	movs	r2, #2
   c0b20:	4620      	mov	r0, r4
   c0b22:	4798      	blx	r3
    if (msg) {
   c0b24:	b11e      	cbz	r6, c0b2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c0b26:	4631      	mov	r1, r6
   c0b28:	4620      	mov	r0, r4
   c0b2a:	f7ff fa06 	bl	bff3a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c0b2e:	792b      	ldrb	r3, [r5, #4]
   c0b30:	f013 0f30 	tst.w	r3, #48	; 0x30
   c0b34:	d02c      	beq.n	c0b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c0b36:	6823      	ldr	r3, [r4, #0]
   c0b38:	4920      	ldr	r1, [pc, #128]	; (c0bbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c0b3a:	68db      	ldr	r3, [r3, #12]
   c0b3c:	2202      	movs	r2, #2
   c0b3e:	4620      	mov	r0, r4
   c0b40:	4798      	blx	r3
        if (attr.has_code) {
   c0b42:	792b      	ldrb	r3, [r5, #4]
   c0b44:	06d9      	lsls	r1, r3, #27
   c0b46:	d50a      	bpl.n	c0b5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0b48:	6823      	ldr	r3, [r4, #0]
   c0b4a:	491d      	ldr	r1, [pc, #116]	; (c0bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0b4c:	68db      	ldr	r3, [r3, #12]
   c0b4e:	2207      	movs	r2, #7
   c0b50:	4620      	mov	r0, r4
   c0b52:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0b54:	69aa      	ldr	r2, [r5, #24]
   c0b56:	491b      	ldr	r1, [pc, #108]	; (c0bc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0b58:	4620      	mov	r0, r4
   c0b5a:	f7ff fa09 	bl	bff70 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0b5e:	792b      	ldrb	r3, [r5, #4]
   c0b60:	069a      	lsls	r2, r3, #26
   c0b62:	d511      	bpl.n	c0b88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0b64:	06db      	lsls	r3, r3, #27
   c0b66:	d505      	bpl.n	c0b74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0b68:	6823      	ldr	r3, [r4, #0]
   c0b6a:	4910      	ldr	r1, [pc, #64]	; (c0bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0b6c:	68db      	ldr	r3, [r3, #12]
   c0b6e:	2202      	movs	r2, #2
   c0b70:	4620      	mov	r0, r4
   c0b72:	4798      	blx	r3
            write("details = ", 10);
   c0b74:	6823      	ldr	r3, [r4, #0]
   c0b76:	4914      	ldr	r1, [pc, #80]	; (c0bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0b78:	68db      	ldr	r3, [r3, #12]
   c0b7a:	4620      	mov	r0, r4
   c0b7c:	220a      	movs	r2, #10
   c0b7e:	4798      	blx	r3
            write(attr.details);
   c0b80:	69e9      	ldr	r1, [r5, #28]
   c0b82:	4620      	mov	r0, r4
   c0b84:	f7ff f9d9 	bl	bff3a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0b88:	215d      	movs	r1, #93	; 0x5d
   c0b8a:	4620      	mov	r0, r4
   c0b8c:	f7ff f9e4 	bl	bff58 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0b90:	6823      	ldr	r3, [r4, #0]
   c0b92:	490e      	ldr	r1, [pc, #56]	; (c0bcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0b94:	68db      	ldr	r3, [r3, #12]
   c0b96:	4620      	mov	r0, r4
   c0b98:	2202      	movs	r2, #2
}
   c0b9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0b9e:	4718      	bx	r3
   c0ba0:	000c7f13 	.word	0x000c7f13
   c0ba4:	000c7f1a 	.word	0x000c7f1a
   c0ba8:	000c6994 	.word	0x000c6994
   c0bac:	000c7f1d 	.word	0x000c7f1d
   c0bb0:	000c7f22 	.word	0x000c7f22
   c0bb4:	2003e720 	.word	0x2003e720
   c0bb8:	000c7f20 	.word	0x000c7f20
   c0bbc:	000c7f25 	.word	0x000c7f25
   c0bc0:	000c7f28 	.word	0x000c7f28
   c0bc4:	000c7f30 	.word	0x000c7f30
   c0bc8:	000c7f33 	.word	0x000c7f33
   c0bcc:	000c7f3e 	.word	0x000c7f3e

000c0bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0bd4:	b085      	sub	sp, #20
    return stream_;
   c0bd6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0bda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0bdc:	4605      	mov	r5, r0
   c0bde:	460f      	mov	r7, r1
   c0be0:	4690      	mov	r8, r2
   c0be2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0be4:	f000 fdc2 	bl	c176c <_Z16_fetch_usbserialv>
   c0be8:	4581      	cmp	r9, r0
   c0bea:	d105      	bne.n	c0bf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0bec:	4849      	ldr	r0, [pc, #292]	; (c0d14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c0bee:	f000 ff88 	bl	c1b02 <_ZN5spark12NetworkClass9listeningEv>
   c0bf2:	2800      	cmp	r0, #0
   c0bf4:	f040 808a 	bne.w	c0d0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0bf8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0bfa:	4a47      	ldr	r2, [pc, #284]	; (c0d18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0bfc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c0bfe:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0c02:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0c04:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0c06:	f88d 9008 	strb.w	r9, [sp, #8]
   c0c0a:	f001 f91e 	bl	c1e4a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0c0e:	4649      	mov	r1, r9
   c0c10:	4640      	mov	r0, r8
   c0c12:	f7fd fa89 	bl	be128 <log_level_name>
    json.name("l", 1).value(s);
   c0c16:	4941      	ldr	r1, [pc, #260]	; (c0d1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0c18:	4680      	mov	r8, r0
   c0c1a:	2201      	movs	r2, #1
   c0c1c:	a801      	add	r0, sp, #4
   c0c1e:	f001 f9a3 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c22:	4641      	mov	r1, r8
   c0c24:	f7ff f97b 	bl	bff1e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c0c28:	b13f      	cbz	r7, c0c3a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c0c2a:	493d      	ldr	r1, [pc, #244]	; (c0d20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c0c2c:	2201      	movs	r2, #1
   c0c2e:	a801      	add	r0, sp, #4
   c0c30:	f001 f99a 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c34:	4639      	mov	r1, r7
   c0c36:	f7ff f972 	bl	bff1e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c0c3a:	b13e      	cbz	r6, c0c4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c0c3c:	4939      	ldr	r1, [pc, #228]	; (c0d24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c0c3e:	2201      	movs	r2, #1
   c0c40:	a801      	add	r0, sp, #4
   c0c42:	f001 f991 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c46:	4631      	mov	r1, r6
   c0c48:	f7ff f969 	bl	bff1e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0c4c:	7923      	ldrb	r3, [r4, #4]
   c0c4e:	07df      	lsls	r7, r3, #31
   c0c50:	d50e      	bpl.n	c0c70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c0c52:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0c54:	212f      	movs	r1, #47	; 0x2f
   c0c56:	4630      	mov	r0, r6
   c0c58:	f003 fdb7 	bl	c47ca <strrchr>
    if (s1) {
   c0c5c:	b100      	cbz	r0, c0c60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c0c5e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c0c60:	4931      	ldr	r1, [pc, #196]	; (c0d28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c0c62:	2201      	movs	r2, #1
   c0c64:	a801      	add	r0, sp, #4
   c0c66:	f001 f97f 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c6a:	4631      	mov	r1, r6
   c0c6c:	f7ff f957 	bl	bff1e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c0c70:	7923      	ldrb	r3, [r4, #4]
   c0c72:	079e      	lsls	r6, r3, #30
   c0c74:	d507      	bpl.n	c0c86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0c76:	492d      	ldr	r1, [pc, #180]	; (c0d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0c78:	2202      	movs	r2, #2
   c0c7a:	a801      	add	r0, sp, #4
   c0c7c:	f001 f974 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c80:	68e1      	ldr	r1, [r4, #12]
   c0c82:	f001 f8ef 	bl	c1e64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0c86:	7923      	ldrb	r3, [r4, #4]
   c0c88:	0758      	lsls	r0, r3, #29
   c0c8a:	d514      	bpl.n	c0cb6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0c8c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0c8e:	4633      	mov	r3, r6
   c0c90:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c0c92:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0c96:	b12a      	cbz	r2, c0ca4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0c98:	2a20      	cmp	r2, #32
   c0c9a:	d101      	bne.n	c0ca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0c9c:	461e      	mov	r6, r3
   c0c9e:	e7f7      	b.n	c0c90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c0ca0:	2a28      	cmp	r2, #40	; 0x28
   c0ca2:	d1f5      	bne.n	c0c90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0ca4:	4922      	ldr	r1, [pc, #136]	; (c0d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0ca6:	2202      	movs	r2, #2
   c0ca8:	a801      	add	r0, sp, #4
   c0caa:	f001 f95d 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0cae:	1bba      	subs	r2, r7, r6
   c0cb0:	4631      	mov	r1, r6
   c0cb2:	f001 f969 	bl	c1f88 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0cb6:	7923      	ldrb	r3, [r4, #4]
   c0cb8:	0719      	lsls	r1, r3, #28
   c0cba:	d507      	bpl.n	c0ccc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0cbc:	491d      	ldr	r1, [pc, #116]	; (c0d34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0cbe:	2201      	movs	r2, #1
   c0cc0:	a801      	add	r0, sp, #4
   c0cc2:	f001 f951 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0cc6:	6961      	ldr	r1, [r4, #20]
   c0cc8:	f001 f8de 	bl	c1e88 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0ccc:	7923      	ldrb	r3, [r4, #4]
   c0cce:	06da      	lsls	r2, r3, #27
   c0cd0:	d508      	bpl.n	c0ce4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c0cd2:	2204      	movs	r2, #4
   c0cd4:	4918      	ldr	r1, [pc, #96]	; (c0d38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0cd6:	eb0d 0002 	add.w	r0, sp, r2
   c0cda:	f001 f945 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0cde:	69a1      	ldr	r1, [r4, #24]
   c0ce0:	f001 f8c0 	bl	c1e64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0ce4:	7923      	ldrb	r3, [r4, #4]
   c0ce6:	069b      	lsls	r3, r3, #26
   c0ce8:	d507      	bpl.n	c0cfa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0cea:	4914      	ldr	r1, [pc, #80]	; (c0d3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0cec:	2206      	movs	r2, #6
   c0cee:	a801      	add	r0, sp, #4
   c0cf0:	f001 f93a 	bl	c1f68 <_ZN5spark10JSONWriter4nameEPKcj>
   c0cf4:	69e1      	ldr	r1, [r4, #28]
   c0cf6:	f7ff f912 	bl	bff1e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c0cfa:	a801      	add	r0, sp, #4
   c0cfc:	f001 f88f 	bl	c1e1e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c0d00:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c0d02:	490f      	ldr	r1, [pc, #60]	; (c0d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0d04:	6803      	ldr	r3, [r0, #0]
   c0d06:	2202      	movs	r2, #2
   c0d08:	68db      	ldr	r3, [r3, #12]
   c0d0a:	4798      	blx	r3
}
   c0d0c:	b005      	add	sp, #20
   c0d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0d12:	bf00      	nop
   c0d14:	2003e720 	.word	0x2003e720
   c0d18:	000c7f60 	.word	0x000c7f60
   c0d1c:	000c7ef0 	.word	0x000c7ef0
   c0d20:	000c7f41 	.word	0x000c7f41
   c0d24:	000c89ae 	.word	0x000c89ae
   c0d28:	000c6a15 	.word	0x000c6a15
   c0d2c:	000c7f43 	.word	0x000c7f43
   c0d30:	000c7f46 	.word	0x000c7f46
   c0d34:	000c6c18 	.word	0x000c6c18
   c0d38:	000c7f49 	.word	0x000c7f49
   c0d3c:	000c7f4e 	.word	0x000c7f4e
   c0d40:	000c7f3e 	.word	0x000c7f3e

000c0d44 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0d48:	4a15      	ldr	r2, [pc, #84]	; (c0da0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0d4a:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0dac <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0d4e:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0d52:	1980      	adds	r0, r0, r6
   c0d54:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0d58:	4b12      	ldr	r3, [pc, #72]	; (c0da4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0d5a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c0d5e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c0d62:	1986      	adds	r6, r0, r6
   c0d64:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0d68:	42bb      	cmp	r3, r7
   c0d6a:	bf08      	it	eq
   c0d6c:	42b2      	cmpeq	r2, r6
{
   c0d6e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c0d70:	d013      	beq.n	c0d9a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c0d72:	a903      	add	r1, sp, #12
   c0d74:	4668      	mov	r0, sp
   c0d76:	e9cd 6700 	strd	r6, r7, [sp]
   c0d7a:	f7fd fb33 	bl	be3e4 <localtime_r>
	calendar_time.tm_year += 1900;
   c0d7e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0d80:	4d09      	ldr	r5, [pc, #36]	; (c0da8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0d82:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0d86:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c0d88:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c0d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c0d92:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0d96:	6823      	ldr	r3, [r4, #0]
   c0d98:	602b      	str	r3, [r5, #0]
    }
}
   c0d9a:	b00c      	add	sp, #48	; 0x30
   c0d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0da0:	2003e6b0 	.word	0x2003e6b0
   c0da4:	2003e6a8 	.word	0x2003e6a8
   c0da8:	2003e680 	.word	0x2003e680
   c0dac:	2003e6b8 	.word	0x2003e6b8

000c0db0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   c0db0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0db2:	2000      	movs	r0, #0
   c0db4:	f7fd faa6 	bl	be304 <spark_sync_time_pending>
   c0db8:	b128      	cbz	r0, c0dc6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0dba:	f7fd fa8b 	bl	be2d4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0dbe:	f080 0001 	eor.w	r0, r0, #1
   c0dc2:	b2c0      	uxtb	r0, r0
    }
   c0dc4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0dc6:	2001      	movs	r0, #1
   c0dc8:	e7fc      	b.n	c0dc4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0dcc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c0dcc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c0dce:	f7ff ffb9 	bl	c0d44 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c0dd2:	4b02      	ldr	r3, [pc, #8]	; (c0ddc <_ZN9TimeClass5monthEx+0x10>)
   c0dd4:	6918      	ldr	r0, [r3, #16]
}
   c0dd6:	3001      	adds	r0, #1
   c0dd8:	bd08      	pop	{r3, pc}
   c0dda:	bf00      	nop
   c0ddc:	2003e680 	.word	0x2003e680

000c0de0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c0de0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0de2:	2000      	movs	r0, #0
   c0de4:	f7fc ff46 	bl	bdc74 <hal_rtc_time_is_valid>
    if (rtcstate)
   c0de8:	4604      	mov	r4, r0
   c0dea:	b9a0      	cbnz	r0, c0e16 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c0dec:	f7fd f9b6 	bl	be15c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0df0:	2801      	cmp	r0, #1
   c0df2:	d110      	bne.n	c0e16 <_ZN9TimeClass7isValidEv+0x36>
   c0df4:	4620      	mov	r0, r4
   c0df6:	f7fd f9d9 	bl	be1ac <system_thread_get_state>
   c0dfa:	b960      	cbnz	r0, c0e16 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c0dfc:	f7ff ffd8 	bl	c0db0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0e00:	b910      	cbnz	r0, c0e08 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0e02:	f7fd fa5f 	bl	be2c4 <spark_process>
        while (_while() && !_condition()) {
   c0e06:	e7f9      	b.n	c0dfc <_ZN9TimeClass7isValidEv+0x1c>
   c0e08:	f7ff ffd2 	bl	c0db0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c0e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0e10:	2000      	movs	r0, #0
   c0e12:	f7fc bf2f 	b.w	bdc74 <hal_rtc_time_is_valid>
}
   c0e16:	4620      	mov	r0, r4
   c0e18:	bd10      	pop	{r4, pc}

000c0e1a <_ZN9TimeClass3nowEv>:
{
   c0e1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c0e1c:	f7ff ffe0 	bl	c0de0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c0e20:	2210      	movs	r2, #16
   c0e22:	2100      	movs	r1, #0
   c0e24:	4668      	mov	r0, sp
   c0e26:	f003 fbf7 	bl	c4618 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c0e2a:	2100      	movs	r1, #0
   c0e2c:	4668      	mov	r0, sp
   c0e2e:	f7fc ff29 	bl	bdc84 <hal_rtc_get_time>
}
   c0e32:	9800      	ldr	r0, [sp, #0]
   c0e34:	b005      	add	sp, #20
   c0e36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0e3c <_ZN9TimeClass4hourEv>:
{
   c0e3c:	b508      	push	{r3, lr}
	return hour(now());
   c0e3e:	f7ff ffec 	bl	c0e1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0e42:	17c1      	asrs	r1, r0, #31
   c0e44:	f7ff ff7e 	bl	c0d44 <_ZL22Refresh_UnixTime_Cachex>
}
   c0e48:	4b01      	ldr	r3, [pc, #4]	; (c0e50 <_ZN9TimeClass4hourEv+0x14>)
   c0e4a:	6898      	ldr	r0, [r3, #8]
   c0e4c:	bd08      	pop	{r3, pc}
   c0e4e:	bf00      	nop
   c0e50:	2003e680 	.word	0x2003e680

000c0e54 <_ZN9TimeClass6minuteEv>:
{
   c0e54:	b508      	push	{r3, lr}
	return minute(now());
   c0e56:	f7ff ffe0 	bl	c0e1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0e5a:	17c1      	asrs	r1, r0, #31
   c0e5c:	f7ff ff72 	bl	c0d44 <_ZL22Refresh_UnixTime_Cachex>
}
   c0e60:	4b01      	ldr	r3, [pc, #4]	; (c0e68 <_ZN9TimeClass6minuteEv+0x14>)
   c0e62:	6858      	ldr	r0, [r3, #4]
   c0e64:	bd08      	pop	{r3, pc}
   c0e66:	bf00      	nop
   c0e68:	2003e680 	.word	0x2003e680

000c0e6c <_ZN9TimeClass6secondEv>:
{
   c0e6c:	b508      	push	{r3, lr}
	return second(now());
   c0e6e:	f7ff ffd4 	bl	c0e1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0e72:	17c1      	asrs	r1, r0, #31
   c0e74:	f7ff ff66 	bl	c0d44 <_ZL22Refresh_UnixTime_Cachex>
}
   c0e78:	4b01      	ldr	r3, [pc, #4]	; (c0e80 <_ZN9TimeClass6secondEv+0x14>)
   c0e7a:	6818      	ldr	r0, [r3, #0]
   c0e7c:	bd08      	pop	{r3, pc}
   c0e7e:	bf00      	nop
   c0e80:	2003e680 	.word	0x2003e680

000c0e84 <_ZN9TimeClass3dayEv>:
{
   c0e84:	b508      	push	{r3, lr}
	return day(now());
   c0e86:	f7ff ffc8 	bl	c0e1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0e8a:	17c1      	asrs	r1, r0, #31
   c0e8c:	f7ff ff5a 	bl	c0d44 <_ZL22Refresh_UnixTime_Cachex>
}
   c0e90:	4b01      	ldr	r3, [pc, #4]	; (c0e98 <_ZN9TimeClass3dayEv+0x14>)
   c0e92:	68d8      	ldr	r0, [r3, #12]
   c0e94:	bd08      	pop	{r3, pc}
   c0e96:	bf00      	nop
   c0e98:	2003e680 	.word	0x2003e680

000c0e9c <_ZN9TimeClass5monthEv>:
{
   c0e9c:	b508      	push	{r3, lr}
	return month(now());
   c0e9e:	f7ff ffbc 	bl	c0e1a <_ZN9TimeClass3nowEv>
}
   c0ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c0ea6:	17c1      	asrs	r1, r0, #31
   c0ea8:	f7ff bf90 	b.w	c0dcc <_ZN9TimeClass5monthEx>

000c0eac <_ZN9TimeClass4yearEv>:
{
   c0eac:	b508      	push	{r3, lr}
	return year(now());
   c0eae:	f7ff ffb4 	bl	c0e1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0eb2:	17c1      	asrs	r1, r0, #31
   c0eb4:	f7ff ff46 	bl	c0d44 <_ZL22Refresh_UnixTime_Cachex>
}
   c0eb8:	4b01      	ldr	r3, [pc, #4]	; (c0ec0 <_ZN9TimeClass4yearEv+0x14>)
   c0eba:	6958      	ldr	r0, [r3, #20]
   c0ebc:	bd08      	pop	{r3, pc}
   c0ebe:	bf00      	nop
   c0ec0:	2003e680 	.word	0x2003e680

000c0ec4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0ec4:	4b02      	ldr	r3, [pc, #8]	; (c0ed0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c0ec6:	681a      	ldr	r2, [r3, #0]
   c0ec8:	4b02      	ldr	r3, [pc, #8]	; (c0ed4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c0eca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0ecc:	4770      	bx	lr
   c0ece:	bf00      	nop
   c0ed0:	2003db48 	.word	0x2003db48
   c0ed4:	2003e67c 	.word	0x2003e67c

000c0ed8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   c0ed8:	428a      	cmp	r2, r1
{
   c0eda:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   c0edc:	d007      	beq.n	c0eee <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   c0ede:	1a44      	subs	r4, r0, r1
   c0ee0:	9802      	ldr	r0, [sp, #8]
   c0ee2:	1ac0      	subs	r0, r0, r3
   c0ee4:	4344      	muls	r4, r0
   c0ee6:	1a50      	subs	r0, r2, r1
   c0ee8:	fb94 f0f0 	sdiv	r0, r4, r0
   c0eec:	4418      	add	r0, r3
}
   c0eee:	bd10      	pop	{r4, pc}

000c0ef0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c0ef0:	2100      	movs	r1, #0
   c0ef2:	f7fd b943 	b.w	be17c <system_delay_ms>
	...

000c0ef8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0ef8:	4b01      	ldr	r3, [pc, #4]	; (c0f00 <_GLOBAL__sub_I_RGB+0x8>)
   c0efa:	2200      	movs	r2, #0
   c0efc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0efe:	4770      	bx	lr
   c0f00:	2003e6c0 	.word	0x2003e6c0

000c0f04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c0f04:	4b01      	ldr	r3, [pc, #4]	; (c0f0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c0f06:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c0f08:	4770      	bx	lr
   c0f0a:	bf00      	nop
   c0f0c:	2003db50 	.word	0x2003db50

000c0f10 <serialEventRun>:
{
   c0f10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c0f12:	4b0b      	ldr	r3, [pc, #44]	; (c0f40 <serialEventRun+0x30>)
   c0f14:	b143      	cbz	r3, c0f28 <serialEventRun+0x18>
   c0f16:	f000 fc29 	bl	c176c <_Z16_fetch_usbserialv>
   c0f1a:	6803      	ldr	r3, [r0, #0]
   c0f1c:	691b      	ldr	r3, [r3, #16]
   c0f1e:	4798      	blx	r3
   c0f20:	2800      	cmp	r0, #0
   c0f22:	dd01      	ble.n	c0f28 <serialEventRun+0x18>
        serialEvent();
   c0f24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0f28:	4b06      	ldr	r3, [pc, #24]	; (c0f44 <serialEventRun+0x34>)
   c0f2a:	b143      	cbz	r3, c0f3e <serialEventRun+0x2e>
   c0f2c:	f001 f8ea 	bl	c2104 <_Z22__fetch_global_Serial1v>
   c0f30:	6803      	ldr	r3, [r0, #0]
   c0f32:	691b      	ldr	r3, [r3, #16]
   c0f34:	4798      	blx	r3
   c0f36:	2800      	cmp	r0, #0
   c0f38:	dd01      	ble.n	c0f3e <serialEventRun+0x2e>
        serialEvent1();
   c0f3a:	f3af 8000 	nop.w
}
   c0f3e:	bd08      	pop	{r3, pc}
	...

000c0f48 <_post_loop>:
{
   c0f48:	b508      	push	{r3, lr}
	serialEventRun();
   c0f4a:	f7ff ffe1 	bl	c0f10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c0f4e:	f7fc fe89 	bl	bdc64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c0f52:	4b01      	ldr	r3, [pc, #4]	; (c0f58 <_post_loop+0x10>)
   c0f54:	6018      	str	r0, [r3, #0]
}
   c0f56:	bd08      	pop	{r3, pc}
   c0f58:	2003e740 	.word	0x2003e740

000c0f5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0f5c:	4805      	ldr	r0, [pc, #20]	; (c0f74 <_Z33system_initialize_user_backup_ramv+0x18>)
   c0f5e:	4a06      	ldr	r2, [pc, #24]	; (c0f78 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0f60:	4906      	ldr	r1, [pc, #24]	; (c0f7c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c0f62:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0f64:	1a12      	subs	r2, r2, r0
   c0f66:	f003 fb2f 	bl	c45c8 <memcpy>
    __backup_sram_signature = signature;
   c0f6a:	4b05      	ldr	r3, [pc, #20]	; (c0f80 <_Z33system_initialize_user_backup_ramv+0x24>)
   c0f6c:	4a05      	ldr	r2, [pc, #20]	; (c0f84 <_Z33system_initialize_user_backup_ramv+0x28>)
   c0f6e:	601a      	str	r2, [r3, #0]
}
   c0f70:	bd08      	pop	{r3, pc}
   c0f72:	bf00      	nop
   c0f74:	2003f400 	.word	0x2003f400
   c0f78:	2003f404 	.word	0x2003f404
   c0f7c:	000c8af4 	.word	0x000c8af4
   c0f80:	2003f400 	.word	0x2003f400
   c0f84:	9a271c1e 	.word	0x9a271c1e

000c0f88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0f88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0f8a:	2300      	movs	r3, #0
   c0f8c:	9300      	str	r3, [sp, #0]
   c0f8e:	461a      	mov	r2, r3
   c0f90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0f94:	f7fd f924 	bl	be1e0 <system_ctrl_set_result>
}
   c0f98:	b003      	add	sp, #12
   c0f9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0fa0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0fa0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0fa2:	8843      	ldrh	r3, [r0, #2]
   c0fa4:	2b0a      	cmp	r3, #10
   c0fa6:	d008      	beq.n	c0fba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0fa8:	2b50      	cmp	r3, #80	; 0x50
   c0faa:	d10b      	bne.n	c0fc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c0fac:	4b09      	ldr	r3, [pc, #36]	; (c0fd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c0fae:	681b      	ldr	r3, [r3, #0]
   c0fb0:	b14b      	cbz	r3, c0fc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c0fb2:	b003      	add	sp, #12
   c0fb4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c0fb8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c0fba:	f7ff ffe5 	bl	c0f88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c0fbe:	b003      	add	sp, #12
   c0fc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0fc4:	2300      	movs	r3, #0
   c0fc6:	9300      	str	r3, [sp, #0]
   c0fc8:	461a      	mov	r2, r3
   c0fca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0fce:	f7fd f907 	bl	be1e0 <system_ctrl_set_result>
}
   c0fd2:	e7f4      	b.n	c0fbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c0fd4:	2003e6d4 	.word	0x2003e6d4

000c0fd8 <module_user_init_hook>:
{
   c0fd8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c0fda:	4812      	ldr	r0, [pc, #72]	; (c1024 <module_user_init_hook+0x4c>)
   c0fdc:	2100      	movs	r1, #0
   c0fde:	f7fd f9f9 	bl	be3d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c0fe2:	4b11      	ldr	r3, [pc, #68]	; (c1028 <module_user_init_hook+0x50>)
   c0fe4:	681a      	ldr	r2, [r3, #0]
   c0fe6:	4b11      	ldr	r3, [pc, #68]	; (c102c <module_user_init_hook+0x54>)
   c0fe8:	429a      	cmp	r2, r3
   c0fea:	4b11      	ldr	r3, [pc, #68]	; (c1030 <module_user_init_hook+0x58>)
   c0fec:	bf0c      	ite	eq
   c0fee:	2201      	moveq	r2, #1
   c0ff0:	2200      	movne	r2, #0
   c0ff2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c0ff4:	d001      	beq.n	c0ffa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c0ff6:	f7ff ffb1 	bl	c0f5c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c0ffa:	f7fc fe1b 	bl	bdc34 <HAL_RNG_GetRandomNumber>
   c0ffe:	4604      	mov	r4, r0
    srand(seed);
   c1000:	f003 fb12 	bl	c4628 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c1004:	4b0b      	ldr	r3, [pc, #44]	; (c1034 <module_user_init_hook+0x5c>)
   c1006:	b113      	cbz	r3, c100e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1008:	4620      	mov	r0, r4
   c100a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c100e:	2100      	movs	r1, #0
   c1010:	4808      	ldr	r0, [pc, #32]	; (c1034 <module_user_init_hook+0x5c>)
   c1012:	f7fd f97f 	bl	be314 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c1016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c101a:	4807      	ldr	r0, [pc, #28]	; (c1038 <module_user_init_hook+0x60>)
   c101c:	2100      	movs	r1, #0
   c101e:	f7fd b8d5 	b.w	be1cc <system_ctrl_set_app_request_handler>
   c1022:	bf00      	nop
   c1024:	000c0f05 	.word	0x000c0f05
   c1028:	2003f400 	.word	0x2003f400
   c102c:	9a271c1e 	.word	0x9a271c1e
   c1030:	2003e6d0 	.word	0x2003e6d0
   c1034:	00000000 	.word	0x00000000
   c1038:	000c0fa1 	.word	0x000c0fa1

000c103c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c103c:	4770      	bx	lr

000c103e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   c103e:	2000      	movs	r0, #0
   c1040:	4770      	bx	lr

000c1042 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c1042:	b510      	push	{r4, lr}
   c1044:	2110      	movs	r1, #16
   c1046:	4604      	mov	r4, r0
   c1048:	f7f3 f82b 	bl	b40a2 <_ZdlPvj>
   c104c:	4620      	mov	r0, r4
   c104e:	bd10      	pop	{r4, pc}

000c1050 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   c1050:	b508      	push	{r3, lr}
      { delete this; }
   c1052:	f7ff fff6 	bl	c1042 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   c1056:	bd08      	pop	{r3, pc}

000c1058 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   c1058:	b530      	push	{r4, r5, lr}
        type_(type) {
   c105a:	2200      	movs	r2, #0
   c105c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   c1060:	6002      	str	r2, [r0, #0]
   c1062:	8084      	strh	r4, [r0, #4]
   c1064:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   c1066:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c1068:	680c      	ldr	r4, [r1, #0]
   c106a:	8085      	strh	r5, [r0, #4]
   c106c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c106e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   c1070:	bd30      	pop	{r4, r5, pc}

000c1072 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   c1072:	b510      	push	{r4, lr}
   c1074:	4604      	mov	r4, r0
    free((void*)msg_);
   c1076:	6800      	ldr	r0, [r0, #0]
   c1078:	f7fd f95c 	bl	be334 <free>
}
   c107c:	4620      	mov	r0, r4
   c107e:	bd10      	pop	{r4, pc}

000c1080 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   c1080:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   c1082:	68c4      	ldr	r4, [r0, #12]
   c1084:	b1f4      	cbz	r4, c10c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   c1086:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   c1088:	2b02      	cmp	r3, #2
   c108a:	d103      	bne.n	c1094 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   c108c:	f104 000c 	add.w	r0, r4, #12
   c1090:	f7ff ffef 	bl	c1072 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   c1094:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   c1096:	b135      	cbz	r5, c10a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   c1098:	4628      	mov	r0, r5
   c109a:	f7f3 fa1b 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   c109e:	2110      	movs	r1, #16
   c10a0:	4628      	mov	r0, r5
   c10a2:	f7f2 fffe 	bl	b40a2 <_ZdlPvj>
   c10a6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   c10a8:	b135      	cbz	r5, c10b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   c10aa:	4628      	mov	r0, r5
   c10ac:	f7f3 fa12 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   c10b0:	2110      	movs	r1, #16
   c10b2:	4628      	mov	r0, r5
   c10b4:	f7f2 fff5 	bl	b40a2 <_ZdlPvj>
   c10b8:	4620      	mov	r0, r4
   c10ba:	2114      	movs	r1, #20
   c10bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c10c0:	f7f2 bfef 	b.w	b40a2 <_ZdlPvj>
   c10c4:	bd38      	pop	{r3, r4, r5, pc}

000c10c6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   c10c6:	b510      	push	{r4, lr}
   c10c8:	b088      	sub	sp, #32
   c10ca:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   c10cc:	4668      	mov	r0, sp
   c10ce:	f7fd fb92 	bl	be7f6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   c10d2:	4669      	mov	r1, sp
   c10d4:	a804      	add	r0, sp, #16
   c10d6:	f7fd fbd9 	bl	be88c <_ZN6StringC1ERKS_>
   c10da:	a804      	add	r0, sp, #16
   c10dc:	47a0      	blx	r4
   c10de:	4604      	mov	r4, r0
   c10e0:	a804      	add	r0, sp, #16
   c10e2:	f7fd fb3d 	bl	be760 <_ZN6StringD1Ev>
    String p(param);
   c10e6:	4668      	mov	r0, sp
   c10e8:	f7fd fb3a 	bl	be760 <_ZN6StringD1Ev>
}
   c10ec:	4620      	mov	r0, r4
   c10ee:	b008      	add	sp, #32
   c10f0:	bd10      	pop	{r4, pc}

000c10f2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   c10f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   c10f4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   c10f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   c10fa:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   c10fc:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   c10fe:	461a      	mov	r2, r3
   c1100:	4669      	mov	r1, sp
   c1102:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   c1104:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   c1108:	f8ad 4000 	strh.w	r4, [sp]
   c110c:	f7fd f8d2 	bl	be2b4 <spark_function>
}
   c1110:	b004      	add	sp, #16
   c1112:	bd10      	pop	{r4, pc}

000c1114 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c1114:	680b      	ldr	r3, [r1, #0]
   c1116:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c1118:	684b      	ldr	r3, [r1, #4]
   c111a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c111c:	b113      	cbz	r3, c1124 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   c111e:	685a      	ldr	r2, [r3, #4]
   c1120:	3201      	adds	r2, #1
   c1122:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c1124:	4770      	bx	lr

000c1126 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   c1126:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c1128:	4604      	mov	r4, r0
   c112a:	4668      	mov	r0, sp
   c112c:	460d      	mov	r5, r1
   c112e:	f7ff fff1 	bl	c1114 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c1132:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c1134:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c1136:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   c1138:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   c113a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c113c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   c113e:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   c1140:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   c1142:	f7fe f858 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   c1146:	b135      	cbz	r5, c1156 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   c1148:	1d28      	adds	r0, r5, #4
   c114a:	f7fe f854 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c114e:	2108      	movs	r1, #8
   c1150:	4628      	mov	r0, r5
   c1152:	f7f2 ffa6 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   c1156:	4620      	mov	r0, r4
   c1158:	b003      	add	sp, #12
   c115a:	bd30      	pop	{r4, r5, pc}

000c115c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   c115c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c115e:	b510      	push	{r4, lr}
      if (_M_empty())
   c1160:	b90a      	cbnz	r2, c1166 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   c1162:	f001 f833 	bl	c21cc <_ZSt25__throw_bad_function_callv>
    }
   c1166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c116a:	68c3      	ldr	r3, [r0, #12]
   c116c:	4718      	bx	r3

000c116e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c116e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c1170:	6800      	ldr	r0, [r0, #0]
   c1172:	f100 0110 	add.w	r1, r0, #16
   c1176:	f7ff fff1 	bl	c115c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   c117a:	bd08      	pop	{r3, pc}

000c117c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   c117c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c117e:	b510      	push	{r4, lr}
      if (_M_empty())
   c1180:	b90a      	cbnz	r2, c1186 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   c1182:	f001 f823 	bl	c21cc <_ZSt25__throw_bad_function_callv>
    }
   c1186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c118a:	68c3      	ldr	r3, [r0, #12]
   c118c:	4718      	bx	r3

000c118e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c118e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c1190:	6800      	ldr	r0, [r0, #0]
   c1192:	f100 0110 	add.w	r1, r0, #16
   c1196:	f7ff fff1 	bl	c117c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   c119a:	bd08      	pop	{r3, pc}

000c119c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   c119c:	b538      	push	{r3, r4, r5, lr}
   c119e:	2300      	movs	r3, #0
   c11a0:	4604      	mov	r4, r0
   c11a2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c11a4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   c11a6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c11a8:	f7f2 ff75 	bl	b4096 <_Znwj>
   c11ac:	b128      	cbz	r0, c11ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   c11ae:	2301      	movs	r3, #1
   c11b0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   c11b4:	4b02      	ldr	r3, [pc, #8]	; (c11c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   c11b6:	6003      	str	r3, [r0, #0]
   c11b8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c11ba:	6020      	str	r0, [r4, #0]
	}
   c11bc:	4620      	mov	r0, r4
   c11be:	bd38      	pop	{r3, r4, r5, pc}
   c11c0:	000c7ff4 	.word	0x000c7ff4

000c11c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   c11c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c11c6:	2300      	movs	r3, #0
   c11c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c11ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c11cc:	4604      	mov	r4, r0
   c11ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c11d0:	b12b      	cbz	r3, c11de <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c11d2:	2202      	movs	r2, #2
   c11d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c11d6:	68eb      	ldr	r3, [r5, #12]
   c11d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c11da:	68ab      	ldr	r3, [r5, #8]
   c11dc:	60a3      	str	r3, [r4, #8]
    }
   c11de:	4620      	mov	r0, r4
   c11e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000c11e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   c11e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   c11e6:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   c11e8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   c11ea:	4668      	mov	r0, sp
   c11ec:	f7ff ff34 	bl	c1058 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c11f0:	f04f 0302 	mov.w	r3, #2
   c11f4:	e8d4 2f4f 	ldrexb	r2, [r4]
   c11f8:	2a00      	cmp	r2, #0
   c11fa:	d103      	bne.n	c1204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   c11fc:	e8c4 3f41 	strexb	r1, r3, [r4]
   c1200:	2900      	cmp	r1, #0
   c1202:	d1f7      	bne.n	c11f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   c1204:	d125      	bne.n	c1252 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   c1206:	f104 050c 	add.w	r5, r4, #12
   c120a:	4669      	mov	r1, sp
   c120c:	4628      	mov	r0, r5
   c120e:	f7ff ff23 	bl	c1058 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   c1212:	f3bf 8f5b 	dmb	ish
   c1216:	2301      	movs	r3, #1
   c1218:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c121a:	2000      	movs	r0, #0
   c121c:	f104 0308 	add.w	r3, r4, #8
   c1220:	f3bf 8f5b 	dmb	ish
   c1224:	e853 6f00 	ldrex	r6, [r3]
   c1228:	e843 0200 	strex	r2, r0, [r3]
   c122c:	2a00      	cmp	r2, #0
   c122e:	d1f9      	bne.n	c1224 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   c1230:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c1234:	b16e      	cbz	r6, c1252 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   c1236:	f7fc ffa9 	bl	be18c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c123a:	b178      	cbz	r0, c125c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c123c:	4629      	mov	r1, r5
   c123e:	4630      	mov	r0, r6
   c1240:	f7ff ff8c 	bl	c115c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   c1244:	4630      	mov	r0, r6
   c1246:	f7f3 f945 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c124a:	2110      	movs	r1, #16
   c124c:	4630      	mov	r0, r6
   c124e:	f7f2 ff28 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   c1252:	4668      	mov	r0, sp
   c1254:	f7ff ff0d 	bl	c1072 <_ZN8particle5ErrorD1Ev>
    }
   c1258:	b009      	add	sp, #36	; 0x24
   c125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c125c:	4631      	mov	r1, r6
   c125e:	a802      	add	r0, sp, #8
   c1260:	f7ff ffb0 	bl	c11c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c1264:	68e0      	ldr	r0, [r4, #12]
   c1266:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c126a:	b108      	cbz	r0, c1270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   c126c:	f003 fa42 	bl	c46f4 <strdup>
        type_(type) {
   c1270:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c1272:	2010      	movs	r0, #16
   c1274:	f8ad 501c 	strh.w	r5, [sp, #28]
   c1278:	f7f2 ff0d 	bl	b4096 <_Znwj>
   c127c:	4605      	mov	r5, r0
   c127e:	b1e8      	cbz	r0, c12bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   c1280:	2700      	movs	r7, #0
   c1282:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c1284:	2018      	movs	r0, #24
   c1286:	f7f2 ff06 	bl	b4096 <_Znwj>
   c128a:	4604      	mov	r4, r0
   c128c:	b188      	cbz	r0, c12b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   c128e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   c1290:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c1292:	a802      	add	r0, sp, #8
   c1294:	f7fe fa8c 	bl	bf7b0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c1298:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   c129a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c129c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c129e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c12a0:	9204      	str	r2, [sp, #16]
   c12a2:	a906      	add	r1, sp, #24
   c12a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c12a6:	60e3      	str	r3, [r4, #12]
   c12a8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   c12ac:	9205      	str	r2, [sp, #20]
   c12ae:	f7ff fed3 	bl	c1058 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   c12b2:	4b08      	ldr	r3, [pc, #32]	; (c12d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   c12b4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c12b6:	4b08      	ldr	r3, [pc, #32]	; (c12d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c12b8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c12ba:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   c12bc:	a806      	add	r0, sp, #24
   c12be:	f7ff fed8 	bl	c1072 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c12c2:	a802      	add	r0, sp, #8
   c12c4:	f7f3 f906 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c12c8:	2200      	movs	r2, #0
   c12ca:	4629      	mov	r1, r5
   c12cc:	4803      	ldr	r0, [pc, #12]	; (c12dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   c12ce:	f7fc ff65 	bl	be19c <application_thread_invoke>
   c12d2:	e7b7      	b.n	c1244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   c12d4:	000c116f 	.word	0x000c116f
   c12d8:	000c13f1 	.word	0x000c13f1
   c12dc:	000c1969 	.word	0x000c1969

000c12e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   c12e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c12e4:	b08b      	sub	sp, #44	; 0x2c
   c12e6:	4605      	mov	r5, r0
   c12e8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   c12ec:	460f      	mov	r7, r1
   c12ee:	4690      	mov	r8, r2
   c12f0:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c12f2:	f7fc ffef 	bl	be2d4 <spark_cloud_flag_connected>
   c12f6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   c12f8:	4683      	mov	fp, r0
   c12fa:	bb38      	cbnz	r0, c134c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   c12fc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   c1300:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c1302:	a905      	add	r1, sp, #20
   c1304:	4630      	mov	r0, r6
   c1306:	f8ad 3018 	strh.w	r3, [sp, #24]
   c130a:	f7ff fea5 	bl	c1058 <_ZN8particle5ErrorC1EOS0_>
   c130e:	2014      	movs	r0, #20
   c1310:	f7f2 fec1 	bl	b4096 <_Znwj>
   c1314:	4604      	mov	r4, r0
   c1316:	b148      	cbz	r0, c132c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   c1318:	2302      	movs	r3, #2
   c131a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c131c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c131e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c1322:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   c1324:	4631      	mov	r1, r6
   c1326:	300c      	adds	r0, #12
   c1328:	f7ff fe96 	bl	c1058 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c132c:	4628      	mov	r0, r5
	: __shared_count(__p)
   c132e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c1330:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   c1334:	f7ff ff32 	bl	c119c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c1338:	4630      	mov	r0, r6
   c133a:	f7ff fe9a 	bl	c1072 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   c133e:	a805      	add	r0, sp, #20
   c1340:	f7ff fe97 	bl	c1072 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   c1344:	4628      	mov	r0, r5
   c1346:	b00b      	add	sp, #44	; 0x2c
   c1348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   c134c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   c134e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   c1350:	2014      	movs	r0, #20
   c1352:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   c1356:	9307      	str	r3, [sp, #28]
   c1358:	f7f2 fe9d 	bl	b4096 <_Znwj>
   c135c:	4601      	mov	r1, r0
   c135e:	b118      	cbz	r0, c1368 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c1360:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c1364:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c1366:	7044      	strb	r4, [r0, #1]
   c1368:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c136a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   c136c:	f7ff ff16 	bl	c119c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   c1370:	4b1e      	ldr	r3, [pc, #120]	; (c13ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   c1372:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   c1374:	2008      	movs	r0, #8
   c1376:	f7f2 fe8e 	bl	b4096 <_Znwj>
   c137a:	4604      	mov	r4, r0
   c137c:	b110      	cbz	r0, c1384 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   c137e:	a903      	add	r1, sp, #12
   c1380:	f7ff fec8 	bl	c1114 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c1384:	9600      	str	r6, [sp, #0]
   c1386:	fa5f f38a 	uxtb.w	r3, sl
   c138a:	464a      	mov	r2, r9
   c138c:	4641      	mov	r1, r8
   c138e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   c1390:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c1392:	f7fc ffa7 	bl	be2e4 <spark_send_event>
   c1396:	b9b8      	cbnz	r0, c13c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   c1398:	9b03      	ldr	r3, [sp, #12]
   c139a:	785b      	ldrb	r3, [r3, #1]
   c139c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   c13a0:	b993      	cbnz	r3, c13c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   c13a2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   c13a6:	a905      	add	r1, sp, #20
   c13a8:	a803      	add	r0, sp, #12
   c13aa:	9205      	str	r2, [sp, #20]
   c13ac:	f8ad 3018 	strh.w	r3, [sp, #24]
   c13b0:	f7ff ff18 	bl	c11e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c13b4:	a805      	add	r0, sp, #20
   c13b6:	f7ff fe5c 	bl	c1072 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   c13ba:	a805      	add	r0, sp, #20
   c13bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   c13be:	f7ff feb2 	bl	c1126 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   c13c2:	a806      	add	r0, sp, #24
   c13c4:	f7fd ff17 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c13c8:	a903      	add	r1, sp, #12
   c13ca:	a805      	add	r0, sp, #20
   c13cc:	f7ff fea2 	bl	c1114 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c13d0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c13d2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c13d4:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   c13d6:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   c13d8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c13da:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   c13dc:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   c13de:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   c13e0:	f7fd ff09 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c13e4:	a804      	add	r0, sp, #16
   c13e6:	f7fd ff06 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   c13ea:	e7ab      	b.n	c1344 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   c13ec:	000c146d 	.word	0x000c146d

000c13f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   c13f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c13f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c13f4:	4605      	mov	r5, r0
	switch (__op)
   c13f6:	d103      	bne.n	c1400 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c13f8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c13fa:	6003      	str	r3, [r0, #0]
      }
   c13fc:	2000      	movs	r0, #0
   c13fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   c1400:	2a02      	cmp	r2, #2
   c1402:	d010      	beq.n	c1426 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   c1404:	2a03      	cmp	r2, #3
   c1406:	d1f9      	bne.n	c13fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c1408:	6804      	ldr	r4, [r0, #0]
   c140a:	2c00      	cmp	r4, #0
   c140c:	d0f6      	beq.n	c13fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   c140e:	f104 0010 	add.w	r0, r4, #16
   c1412:	f7ff fe2e 	bl	c1072 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c1416:	4620      	mov	r0, r4
   c1418:	f7f3 f85c 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c141c:	2118      	movs	r1, #24
   c141e:	4620      	mov	r0, r4
   c1420:	f7f2 fe3f 	bl	b40a2 <_ZdlPvj>
   c1424:	e7ea      	b.n	c13fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c1426:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   c1428:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c142a:	f7f2 fe34 	bl	b4096 <_Znwj>
   c142e:	4604      	mov	r4, r0
   c1430:	b150      	cbz	r0, c1448 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   c1432:	4631      	mov	r1, r6
   c1434:	f7ff fec6 	bl	c11c4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c1438:	6930      	ldr	r0, [r6, #16]
   c143a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c143e:	b108      	cbz	r0, c1444 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   c1440:	f003 f958 	bl	c46f4 <strdup>
        type_(type) {
   c1444:	6120      	str	r0, [r4, #16]
   c1446:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   c1448:	602c      	str	r4, [r5, #0]
	}
   c144a:	e7d7      	b.n	c13fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000c144c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   c144c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c144e:	2300      	movs	r3, #0
   c1450:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c1452:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c1454:	4604      	mov	r4, r0
   c1456:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c1458:	b12b      	cbz	r3, c1466 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c145a:	2202      	movs	r2, #2
   c145c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c145e:	68eb      	ldr	r3, [r5, #12]
   c1460:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c1462:	68ab      	ldr	r3, [r5, #8]
   c1464:	60a3      	str	r3, [r4, #8]
    }
   c1466:	4620      	mov	r0, r4
   c1468:	bd38      	pop	{r3, r4, r5, pc}
	...

000c146c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   c146c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c146e:	b089      	sub	sp, #36	; 0x24
   c1470:	4604      	mov	r4, r0
   c1472:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   c1474:	a801      	add	r0, sp, #4
   c1476:	4611      	mov	r1, r2
   c1478:	f7ff fe55 	bl	c1126 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   c147c:	b1a4      	cbz	r4, c14a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   c147e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c1480:	b11d      	cbz	r5, c148a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   c1482:	4628      	mov	r0, r5
   c1484:	f003 f936 	bl	c46f4 <strdup>
   c1488:	4605      	mov	r5, r0
   c148a:	a801      	add	r0, sp, #4
   c148c:	a903      	add	r1, sp, #12
        type_(type) {
   c148e:	9503      	str	r5, [sp, #12]
   c1490:	f8ad 4010 	strh.w	r4, [sp, #16]
   c1494:	f7ff fea6 	bl	c11e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c1498:	a803      	add	r0, sp, #12
   c149a:	f7ff fdea 	bl	c1072 <_ZN8particle5ErrorD1Ev>
   c149e:	a802      	add	r0, sp, #8
   c14a0:	f7fd fea9 	bl	bf1f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c14a4:	b009      	add	sp, #36	; 0x24
   c14a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   c14a8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c14aa:	2301      	movs	r3, #1
   c14ac:	e8d5 2f4f 	ldrexb	r2, [r5]
   c14b0:	2a00      	cmp	r2, #0
   c14b2:	d103      	bne.n	c14bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   c14b4:	e8c5 3f41 	strexb	r1, r3, [r5]
   c14b8:	2900      	cmp	r1, #0
   c14ba:	d1f7      	bne.n	c14ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   c14bc:	d1ef      	bne.n	c149e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   c14be:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   c14c0:	f3bf 8f5b 	dmb	ish
   c14c4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c14c6:	1d2b      	adds	r3, r5, #4
   c14c8:	f3bf 8f5b 	dmb	ish
   c14cc:	e853 6f00 	ldrex	r6, [r3]
   c14d0:	e843 4200 	strex	r2, r4, [r3]
   c14d4:	2a00      	cmp	r2, #0
   c14d6:	d1f9      	bne.n	c14cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   c14d8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c14dc:	2e00      	cmp	r6, #0
   c14de:	d0de      	beq.n	c149e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   c14e0:	4620      	mov	r0, r4
   c14e2:	f7fc fe53 	bl	be18c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c14e6:	4607      	mov	r7, r0
   c14e8:	b160      	cbz	r0, c1504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c14ea:	f105 010c 	add.w	r1, r5, #12
   c14ee:	4630      	mov	r0, r6
   c14f0:	f7ff fe44 	bl	c117c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   c14f4:	4630      	mov	r0, r6
   c14f6:	f7f2 ffed 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c14fa:	2110      	movs	r1, #16
   c14fc:	4630      	mov	r0, r6
   c14fe:	f7f2 fdd0 	bl	b40a2 <_ZdlPvj>
   c1502:	e7cc      	b.n	c149e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c1504:	4631      	mov	r1, r6
   c1506:	a803      	add	r0, sp, #12
   c1508:	f7ff ffa0 	bl	c144c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c150c:	7b2b      	ldrb	r3, [r5, #12]
   c150e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c1512:	2010      	movs	r0, #16
   c1514:	f7f2 fdbf 	bl	b4096 <_Znwj>
   c1518:	4605      	mov	r5, r0
   c151a:	b1d0      	cbz	r0, c1552 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   c151c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c151e:	2014      	movs	r0, #20
   c1520:	f7f2 fdb9 	bl	b4096 <_Znwj>
   c1524:	4604      	mov	r4, r0
   c1526:	b178      	cbz	r0, c1548 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   c1528:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c152a:	4601      	mov	r1, r0
   c152c:	a803      	add	r0, sp, #12
   c152e:	f7fe f93f 	bl	bf7b0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c1532:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c1534:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c1536:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c1538:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   c153a:	9205      	str	r2, [sp, #20]
   c153c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c153e:	60e3      	str	r3, [r4, #12]
   c1540:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   c1544:	9206      	str	r2, [sp, #24]
   c1546:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   c1548:	4b06      	ldr	r3, [pc, #24]	; (c1564 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   c154a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c154c:	4b06      	ldr	r3, [pc, #24]	; (c1568 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c154e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c1550:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   c1552:	a803      	add	r0, sp, #12
   c1554:	f7f2 ffbe 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c1558:	2200      	movs	r2, #0
   c155a:	4629      	mov	r1, r5
   c155c:	4803      	ldr	r0, [pc, #12]	; (c156c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   c155e:	f7fc fe1d 	bl	be19c <application_thread_invoke>
   c1562:	e7c7      	b.n	c14f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   c1564:	000c118f 	.word	0x000c118f
   c1568:	000c1571 	.word	0x000c1571
   c156c:	000c1969 	.word	0x000c1969

000c1570 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   c1570:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c1572:	b570      	push	{r4, r5, r6, lr}
   c1574:	4604      	mov	r4, r0
	switch (__op)
   c1576:	d103      	bne.n	c1580 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c1578:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c157a:	6003      	str	r3, [r0, #0]
      }
   c157c:	2000      	movs	r0, #0
   c157e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   c1580:	2a02      	cmp	r2, #2
   c1582:	d00c      	beq.n	c159e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   c1584:	2a03      	cmp	r2, #3
   c1586:	d1f9      	bne.n	c157c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c1588:	6804      	ldr	r4, [r0, #0]
   c158a:	2c00      	cmp	r4, #0
   c158c:	d0f6      	beq.n	c157c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   c158e:	4620      	mov	r0, r4
   c1590:	f7f2 ffa0 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c1594:	2114      	movs	r1, #20
   c1596:	4620      	mov	r0, r4
   c1598:	f7f2 fd83 	bl	b40a2 <_ZdlPvj>
   c159c:	e7ee      	b.n	c157c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c159e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   c15a0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c15a2:	f7f2 fd78 	bl	b4096 <_Znwj>
   c15a6:	4605      	mov	r5, r0
   c15a8:	b120      	cbz	r0, c15b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   c15aa:	4631      	mov	r1, r6
   c15ac:	f7ff ff4e 	bl	c144c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   c15b0:	7c33      	ldrb	r3, [r6, #16]
   c15b2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   c15b4:	6025      	str	r5, [r4, #0]
	}
   c15b6:	e7e1      	b.n	c157c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000c15b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c15b8:	4770      	bx	lr

000c15ba <_ZN9IPAddressD0Ev>:
   c15ba:	b510      	push	{r4, lr}
   c15bc:	2118      	movs	r1, #24
   c15be:	4604      	mov	r4, r0
   c15c0:	f7f2 fd6f 	bl	b40a2 <_ZdlPvj>
   c15c4:	4620      	mov	r0, r4
   c15c6:	bd10      	pop	{r4, pc}

000c15c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c15c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c15ca:	7d03      	ldrb	r3, [r0, #20]
   c15cc:	2b06      	cmp	r3, #6
{
   c15ce:	b08d      	sub	sp, #52	; 0x34
   c15d0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c15d2:	f100 0704 	add.w	r7, r0, #4
   c15d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c15da:	d012      	beq.n	c1602 <_ZNK9IPAddress7printToER5Print+0x3a>
   c15dc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c15e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c15e4:	220a      	movs	r2, #10
   c15e6:	4630      	mov	r0, r6
   c15e8:	f7fe fba3 	bl	bfd32 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c15ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c15ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c15f0:	d019      	beq.n	c1626 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c15f2:	2c00      	cmp	r4, #0
   c15f4:	d0f4      	beq.n	c15e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c15f6:	212e      	movs	r1, #46	; 0x2e
   c15f8:	4630      	mov	r0, r6
   c15fa:	f7fe fb7b 	bl	bfcf4 <_ZN5Print5printEc>
   c15fe:	4404      	add	r4, r0
   c1600:	e7ee      	b.n	c15e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c1602:	232f      	movs	r3, #47	; 0x2f
   c1604:	466a      	mov	r2, sp
   c1606:	4639      	mov	r1, r7
   c1608:	200a      	movs	r0, #10
		buf[0] = 0;
   c160a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c160e:	f7fc fc1b 	bl	bde48 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c1612:	4668      	mov	r0, sp
   c1614:	f003 f88b 	bl	c472e <strlen>
   c1618:	6833      	ldr	r3, [r6, #0]
   c161a:	4602      	mov	r2, r0
   c161c:	68db      	ldr	r3, [r3, #12]
   c161e:	4669      	mov	r1, sp
   c1620:	4630      	mov	r0, r6
   c1622:	4798      	blx	r3
   c1624:	4604      	mov	r4, r0
    }
    return n;
}
   c1626:	4620      	mov	r0, r4
   c1628:	b00d      	add	sp, #52	; 0x34
   c162a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c162c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c162c:	b510      	push	{r4, lr}
   c162e:	4b05      	ldr	r3, [pc, #20]	; (c1644 <_ZN9IPAddressC1Ev+0x18>)
   c1630:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c1632:	2211      	movs	r2, #17
   c1634:	f840 3b04 	str.w	r3, [r0], #4
   c1638:	2100      	movs	r1, #0
   c163a:	f002 ffed 	bl	c4618 <memset>
}
   c163e:	4620      	mov	r0, r4
   c1640:	bd10      	pop	{r4, pc}
   c1642:	bf00      	nop
   c1644:	000c8010 	.word	0x000c8010

000c1648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c1648:	4603      	mov	r3, r0
   c164a:	4a07      	ldr	r2, [pc, #28]	; (c1668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c164c:	b510      	push	{r4, lr}
   c164e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c1652:	f101 0210 	add.w	r2, r1, #16
   c1656:	f851 4b04 	ldr.w	r4, [r1], #4
   c165a:	f843 4b04 	str.w	r4, [r3], #4
   c165e:	4291      	cmp	r1, r2
   c1660:	d1f9      	bne.n	c1656 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c1662:	780a      	ldrb	r2, [r1, #0]
   c1664:	701a      	strb	r2, [r3, #0]
}
   c1666:	bd10      	pop	{r4, pc}
   c1668:	000c8010 	.word	0x000c8010

000c166c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c166c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c166e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c1672:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c1676:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c167a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c167e:	2304      	movs	r3, #4
   c1680:	6041      	str	r1, [r0, #4]
   c1682:	7503      	strb	r3, [r0, #20]
}
   c1684:	bd10      	pop	{r4, pc}
	...

000c1688 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c1688:	b507      	push	{r0, r1, r2, lr}
   c168a:	4b06      	ldr	r3, [pc, #24]	; (c16a4 <_ZN9IPAddressC1EPKh+0x1c>)
   c168c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c168e:	78cb      	ldrb	r3, [r1, #3]
   c1690:	9300      	str	r3, [sp, #0]
   c1692:	788b      	ldrb	r3, [r1, #2]
   c1694:	784a      	ldrb	r2, [r1, #1]
   c1696:	7809      	ldrb	r1, [r1, #0]
   c1698:	f7ff ffe8 	bl	c166c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c169c:	b003      	add	sp, #12
   c169e:	f85d fb04 	ldr.w	pc, [sp], #4
   c16a2:	bf00      	nop
   c16a4:	000c8010 	.word	0x000c8010

000c16a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c16a8:	7441      	strb	r1, [r0, #17]
}
   c16aa:	4770      	bx	lr

000c16ac <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c16ac:	4770      	bx	lr

000c16ae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c16ae:	4770      	bx	lr

000c16b0 <_ZN9USBSerial4readEv>:
{
   c16b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c16b2:	2100      	movs	r1, #0
   c16b4:	7c00      	ldrb	r0, [r0, #16]
   c16b6:	f7fc fd0f 	bl	be0d8 <HAL_USB_USART_Receive_Data>
}
   c16ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c16be:	bd08      	pop	{r3, pc}

000c16c0 <_ZN9USBSerial4peekEv>:
{
   c16c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c16c2:	2101      	movs	r1, #1
   c16c4:	7c00      	ldrb	r0, [r0, #16]
   c16c6:	f7fc fd07 	bl	be0d8 <HAL_USB_USART_Receive_Data>
}
   c16ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c16ce:	bd08      	pop	{r3, pc}

000c16d0 <_ZN9USBSerial17availableForWriteEv>:
{
   c16d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c16d2:	7c00      	ldrb	r0, [r0, #16]
   c16d4:	f7fc fcf8 	bl	be0c8 <HAL_USB_USART_Available_Data_For_Write>
}
   c16d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c16dc:	bd08      	pop	{r3, pc}

000c16de <_ZN9USBSerial9availableEv>:
{
   c16de:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c16e0:	7c00      	ldrb	r0, [r0, #16]
   c16e2:	f7fc fce9 	bl	be0b8 <HAL_USB_USART_Available_Data>
}
   c16e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c16ea:	bd08      	pop	{r3, pc}

000c16ec <_ZN9USBSerial5writeEh>:
{
   c16ec:	b513      	push	{r0, r1, r4, lr}
   c16ee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c16f0:	7c00      	ldrb	r0, [r0, #16]
{
   c16f2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c16f4:	f7fc fce8 	bl	be0c8 <HAL_USB_USART_Available_Data_For_Write>
   c16f8:	2800      	cmp	r0, #0
   c16fa:	9901      	ldr	r1, [sp, #4]
   c16fc:	dc01      	bgt.n	c1702 <_ZN9USBSerial5writeEh+0x16>
   c16fe:	7c60      	ldrb	r0, [r4, #17]
   c1700:	b120      	cbz	r0, c170c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1702:	7c20      	ldrb	r0, [r4, #16]
   c1704:	f7fc fcf0 	bl	be0e8 <HAL_USB_USART_Send_Data>
   c1708:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c170c:	b002      	add	sp, #8
   c170e:	bd10      	pop	{r4, pc}

000c1710 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1710:	7c00      	ldrb	r0, [r0, #16]
   c1712:	f7fc bcf1 	b.w	be0f8 <HAL_USB_USART_Flush_Data>

000c1716 <_ZN9USBSerialD0Ev>:
   c1716:	b510      	push	{r4, lr}
   c1718:	2114      	movs	r1, #20
   c171a:	4604      	mov	r4, r0
   c171c:	f7f2 fcc1 	bl	b40a2 <_ZdlPvj>
   c1720:	4620      	mov	r0, r4
   c1722:	bd10      	pop	{r4, pc}

000c1724 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1724:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c1726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c172a:	4604      	mov	r4, r0
   c172c:	4608      	mov	r0, r1
   c172e:	2100      	movs	r1, #0
   c1730:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1734:	4b04      	ldr	r3, [pc, #16]	; (c1748 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1736:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1738:	2301      	movs	r3, #1
  _serial = serial;
   c173a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c173c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c173e:	4611      	mov	r1, r2
   c1740:	f7fc fca2 	bl	be088 <HAL_USB_USART_Init>
}
   c1744:	4620      	mov	r0, r4
   c1746:	bd10      	pop	{r4, pc}
   c1748:	000c8024 	.word	0x000c8024

000c174c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c174c:	7c00      	ldrb	r0, [r0, #16]
   c174e:	2200      	movs	r2, #0
   c1750:	f7fc bca2 	b.w	be098 <HAL_USB_USART_Begin>

000c1754 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1754:	7c00      	ldrb	r0, [r0, #16]
   c1756:	f7fc bca7 	b.w	be0a8 <HAL_USB_USART_End>

000c175a <_Z19acquireSerialBufferv>:
{
   c175a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c175c:	2214      	movs	r2, #20
{
   c175e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c1760:	2100      	movs	r1, #0
   c1762:	f002 ff59 	bl	c4618 <memset>
}
   c1766:	4620      	mov	r0, r4
   c1768:	bd10      	pop	{r4, pc}
	...

000c176c <_Z16_fetch_usbserialv>:
{
   c176c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c176e:	4c0f      	ldr	r4, [pc, #60]	; (c17ac <_Z16_fetch_usbserialv+0x40>)
{
   c1770:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c1772:	a803      	add	r0, sp, #12
   c1774:	f7ff fff1 	bl	c175a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1778:	7821      	ldrb	r1, [r4, #0]
   c177a:	f3bf 8f5b 	dmb	ish
   c177e:	f011 0101 	ands.w	r1, r1, #1
   c1782:	d10f      	bne.n	c17a4 <_Z16_fetch_usbserialv+0x38>
   c1784:	4620      	mov	r0, r4
   c1786:	9101      	str	r1, [sp, #4]
   c1788:	f7f2 fc9a 	bl	b40c0 <__cxa_guard_acquire>
   c178c:	9901      	ldr	r1, [sp, #4]
   c178e:	b148      	cbz	r0, c17a4 <_Z16_fetch_usbserialv+0x38>
   c1790:	aa03      	add	r2, sp, #12
   c1792:	4807      	ldr	r0, [pc, #28]	; (c17b0 <_Z16_fetch_usbserialv+0x44>)
   c1794:	f7ff ffc6 	bl	c1724 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c1798:	4620      	mov	r0, r4
   c179a:	f7f2 fc96 	bl	b40ca <__cxa_guard_release>
   c179e:	4805      	ldr	r0, [pc, #20]	; (c17b4 <_Z16_fetch_usbserialv+0x48>)
   c17a0:	f002 feec 	bl	c457c <atexit>
	return _usbserial;
}
   c17a4:	4802      	ldr	r0, [pc, #8]	; (c17b0 <_Z16_fetch_usbserialv+0x44>)
   c17a6:	b008      	add	sp, #32
   c17a8:	bd10      	pop	{r4, pc}
   c17aa:	bf00      	nop
   c17ac:	2003e6d8 	.word	0x2003e6d8
   c17b0:	2003e6dc 	.word	0x2003e6dc
   c17b4:	000c16ad 	.word	0x000c16ad

000c17b8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   c17b8:	4700      	bx	r0
	...

000c17bc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   c17bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   c17c0:	2400      	movs	r4, #0
{
   c17c2:	461d      	mov	r5, r3
   c17c4:	460f      	mov	r7, r1
   c17c6:	4690      	mov	r8, r2
   c17c8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   c17ca:	f7fc fa13 	bl	bdbf4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   c17ce:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c17d0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   c17d4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c17d8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   c17dc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   c17e0:	bfa2      	ittt	ge
   c17e2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   c17e6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   c17ea:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c17ec:	4907      	ldr	r1, [pc, #28]	; (c180c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   c17ee:	9400      	str	r4, [sp, #0]
   c17f0:	4643      	mov	r3, r8
   c17f2:	463a      	mov	r2, r7
   c17f4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   c17f6:	bfa8      	it	ge
   c17f8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c17fc:	f7fc f9f2 	bl	bdbe4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   c1800:	fab0 f080 	clz	r0, r0
   c1804:	0940      	lsrs	r0, r0, #5
   c1806:	b004      	add	sp, #16
   c1808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c180c:	000c17b9 	.word	0x000c17b9

000c1810 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   c1810:	f7fc ba00 	b.w	bdc14 <HAL_Interrupts_Disable_All>

000c1814 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   c1814:	f7fc b9f6 	b.w	bdc04 <HAL_Interrupts_Enable_All>

000c1818 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   c1818:	2200      	movs	r2, #0
   c181a:	6840      	ldr	r0, [r0, #4]
   c181c:	4611      	mov	r1, r2
   c181e:	f7fc bd01 	b.w	be224 <network_ready>

000c1822 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   c1822:	2200      	movs	r2, #0
   c1824:	6840      	ldr	r0, [r0, #4]
   c1826:	4611      	mov	r1, r2
   c1828:	f7fc bd1c 	b.w	be264 <network_listening>

000c182c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c182c:	2200      	movs	r2, #0
   c182e:	6840      	ldr	r0, [r0, #4]
   c1830:	4611      	mov	r1, r2
   c1832:	f7fc bd27 	b.w	be284 <network_get_listen_timeout>

000c1836 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c1836:	6840      	ldr	r0, [r0, #4]
   c1838:	2200      	movs	r2, #0
   c183a:	f7fc bd1b 	b.w	be274 <network_set_listen_timeout>

000c183e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c183e:	6840      	ldr	r0, [r0, #4]
   c1840:	2200      	movs	r2, #0
   c1842:	f081 0101 	eor.w	r1, r1, #1
   c1846:	f7fc bd05 	b.w	be254 <network_listen>

000c184a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c184a:	2300      	movs	r3, #0
   c184c:	6840      	ldr	r0, [r0, #4]
   c184e:	461a      	mov	r2, r3
   c1850:	4619      	mov	r1, r3
   c1852:	f7fc bcf7 	b.w	be244 <network_off>

000c1856 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c1856:	2300      	movs	r3, #0
   c1858:	6840      	ldr	r0, [r0, #4]
   c185a:	461a      	mov	r2, r3
   c185c:	4619      	mov	r1, r3
   c185e:	f7fc bce9 	b.w	be234 <network_on>

000c1862 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c1862:	2200      	movs	r2, #0
   c1864:	6840      	ldr	r0, [r0, #4]
   c1866:	4611      	mov	r1, r2
   c1868:	f7fc bccc 	b.w	be204 <network_connecting>

000c186c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c186c:	6840      	ldr	r0, [r0, #4]
   c186e:	2200      	movs	r2, #0
   c1870:	2102      	movs	r1, #2
   c1872:	f7fc bccf 	b.w	be214 <network_disconnect>

000c1876 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c1876:	2300      	movs	r3, #0
   c1878:	6840      	ldr	r0, [r0, #4]
   c187a:	461a      	mov	r2, r3
   c187c:	f7fc bcba 	b.w	be1f4 <network_connect>

000c1880 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   c1880:	4b08      	ldr	r3, [pc, #32]	; (c18a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   c1882:	b510      	push	{r4, lr}
   c1884:	2428      	movs	r4, #40	; 0x28
   c1886:	4622      	mov	r2, r4
   c1888:	4618      	mov	r0, r3
   c188a:	2100      	movs	r1, #0
   c188c:	f002 fec4 	bl	c4618 <memset>
   c1890:	4b05      	ldr	r3, [pc, #20]	; (c18a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   c1892:	8004      	strh	r4, [r0, #0]
        cid = -1;
   c1894:	f04f 32ff 	mov.w	r2, #4294967295
   c1898:	6042      	str	r2, [r0, #4]
   c189a:	2204      	movs	r2, #4
   c189c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   c189e:	4a03      	ldr	r2, [pc, #12]	; (c18ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   c18a0:	601a      	str	r2, [r3, #0]
   c18a2:	bd10      	pop	{r4, pc}
   c18a4:	2003e6f8 	.word	0x2003e6f8
   c18a8:	2003e6f0 	.word	0x2003e6f0
   c18ac:	000c8054 	.word	0x000c8054

000c18b0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c18b0:	4770      	bx	lr

000c18b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c18b2:	7441      	strb	r1, [r0, #17]
}
   c18b4:	4770      	bx	lr

000c18b6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c18b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c18b8:	7c00      	ldrb	r0, [r0, #16]
   c18ba:	f7fc fb05 	bl	bdec8 <hal_usart_available_data_for_write>
}
   c18be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c18c2:	bd08      	pop	{r3, pc}

000c18c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c18c4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c18c6:	7c00      	ldrb	r0, [r0, #16]
   c18c8:	f7fc fad6 	bl	bde78 <hal_usart_available>
}
   c18cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c18d0:	bd08      	pop	{r3, pc}

000c18d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c18d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c18d4:	7c00      	ldrb	r0, [r0, #16]
   c18d6:	f7fc fadf 	bl	bde98 <hal_usart_peek>
}
   c18da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c18de:	bd08      	pop	{r3, pc}

000c18e0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c18e0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c18e2:	7c00      	ldrb	r0, [r0, #16]
   c18e4:	f7fc fad0 	bl	bde88 <hal_usart_read>
}
   c18e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c18ec:	bd08      	pop	{r3, pc}

000c18ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c18ee:	7c00      	ldrb	r0, [r0, #16]
   c18f0:	f7fc bada 	b.w	bdea8 <hal_usart_flush>

000c18f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c18f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c18f6:	7c45      	ldrb	r5, [r0, #17]
{
   c18f8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c18fa:	b12d      	cbz	r5, c1908 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c18fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c18fe:	b003      	add	sp, #12
   c1900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1904:	f7fc bab0 	b.w	bde68 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1908:	7c00      	ldrb	r0, [r0, #16]
   c190a:	9101      	str	r1, [sp, #4]
   c190c:	f7fc fadc 	bl	bdec8 <hal_usart_available_data_for_write>
   c1910:	2800      	cmp	r0, #0
   c1912:	9901      	ldr	r1, [sp, #4]
   c1914:	dcf2      	bgt.n	c18fc <_ZN11USARTSerial5writeEh+0x8>
}
   c1916:	4628      	mov	r0, r5
   c1918:	b003      	add	sp, #12
   c191a:	bd30      	pop	{r4, r5, pc}

000c191c <_ZN11USARTSerialD0Ev>:
   c191c:	b510      	push	{r4, lr}
   c191e:	2114      	movs	r1, #20
   c1920:	4604      	mov	r4, r0
   c1922:	f7f2 fbbe 	bl	b40a2 <_ZdlPvj>
   c1926:	4620      	mov	r0, r4
   c1928:	bd10      	pop	{r4, pc}
	...

000c192c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c192c:	b510      	push	{r4, lr}
   c192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1932:	4604      	mov	r4, r0
   c1934:	4608      	mov	r0, r1
   c1936:	4611      	mov	r1, r2
   c1938:	2200      	movs	r2, #0
   c193a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c193e:	4b04      	ldr	r3, [pc, #16]	; (c1950 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1940:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1942:	2301      	movs	r3, #1
  _serial = serial;
   c1944:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1946:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c1948:	f7fc face 	bl	bdee8 <hal_usart_init_ex>
}
   c194c:	4620      	mov	r0, r4
   c194e:	bd10      	pop	{r4, pc}
   c1950:	000c8090 	.word	0x000c8090

000c1954 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1954:	7c00      	ldrb	r0, [r0, #16]
   c1956:	2300      	movs	r3, #0
   c1958:	f7fc babe 	b.w	bded8 <hal_usart_begin_config>

000c195c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c195c:	2200      	movs	r2, #0
   c195e:	f7ff bff9 	b.w	c1954 <_ZN11USARTSerial5beginEmm>

000c1962 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1962:	7c00      	ldrb	r0, [r0, #16]
   c1964:	f7fc ba78 	b.w	bde58 <hal_usart_end>

000c1968 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   c1968:	b510      	push	{r4, lr}
      if (_M_empty())
   c196a:	6883      	ldr	r3, [r0, #8]
   c196c:	4604      	mov	r4, r0
   c196e:	b90b      	cbnz	r3, c1974 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   c1970:	f000 fc2c 	bl	c21cc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c1974:	68c3      	ldr	r3, [r0, #12]
   c1976:	4798      	blx	r3
      if (_M_manager)
   c1978:	68a3      	ldr	r3, [r4, #8]
   c197a:	b11b      	cbz	r3, c1984 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c197c:	2203      	movs	r2, #3
   c197e:	4621      	mov	r1, r4
   c1980:	4620      	mov	r0, r4
   c1982:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   c1984:	4620      	mov	r0, r4
   c1986:	2110      	movs	r1, #16
}
   c1988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   c198c:	f7f2 bb89 	b.w	b40a2 <_ZdlPvj>

000c1990 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   c1990:	4770      	bx	lr

000c1992 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   c1992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1994:	4606      	mov	r6, r0
   c1996:	4615      	mov	r5, r2
   c1998:	460c      	mov	r4, r1
   c199a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   c199c:	42bc      	cmp	r4, r7
   c199e:	d006      	beq.n	c19ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   c19a0:	6833      	ldr	r3, [r6, #0]
   c19a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   c19a6:	689b      	ldr	r3, [r3, #8]
   c19a8:	4630      	mov	r0, r6
   c19aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   c19ac:	e7f6      	b.n	c199c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   c19ae:	4628      	mov	r0, r5
   c19b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c19b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   c19b2:	7c00      	ldrb	r0, [r0, #16]
   c19b4:	2200      	movs	r2, #0
   c19b6:	f7fc babf 	b.w	bdf38 <hal_i2c_write>

000c19ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   c19ba:	7c00      	ldrb	r0, [r0, #16]
   c19bc:	2100      	movs	r1, #0
   c19be:	f7fc bac3 	b.w	bdf48 <hal_i2c_available>

000c19c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   c19c2:	7c00      	ldrb	r0, [r0, #16]
   c19c4:	2100      	movs	r1, #0
   c19c6:	f7fc bac7 	b.w	bdf58 <hal_i2c_read>

000c19ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   c19ca:	7c00      	ldrb	r0, [r0, #16]
   c19cc:	2100      	movs	r1, #0
   c19ce:	f7fc bacb 	b.w	bdf68 <hal_i2c_peek>

000c19d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   c19d2:	7c00      	ldrb	r0, [r0, #16]
   c19d4:	2100      	movs	r1, #0
   c19d6:	f7fc bacf 	b.w	bdf78 <hal_i2c_flush>

000c19da <_ZN7TwoWireD0Ev>:
   c19da:	b510      	push	{r4, lr}
   c19dc:	2114      	movs	r1, #20
   c19de:	4604      	mov	r4, r0
   c19e0:	f7f2 fb5f 	bl	b40a2 <_ZdlPvj>
   c19e4:	4620      	mov	r0, r4
   c19e6:	bd10      	pop	{r4, pc}

000c19e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c19e8:	b510      	push	{r4, lr}
   c19ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c19ee:	4604      	mov	r4, r0
   c19f0:	4608      	mov	r0, r1
   c19f2:	2100      	movs	r1, #0
   c19f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c19f8:	4b03      	ldr	r3, [pc, #12]	; (c1a08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   c19fa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   c19fc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   c19fe:	4611      	mov	r1, r2
   c1a00:	f7fc faca 	bl	bdf98 <hal_i2c_init>
}
   c1a04:	4620      	mov	r0, r4
   c1a06:	bd10      	pop	{r4, pc}
   c1a08:	000c80c0 	.word	0x000c80c0

000c1a0c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   c1a0c:	7c00      	ldrb	r0, [r0, #16]
   c1a0e:	2200      	movs	r2, #0
   c1a10:	f7fc ba72 	b.w	bdef8 <hal_i2c_set_speed>

000c1a14 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   c1a14:	2300      	movs	r3, #0
   c1a16:	7c00      	ldrb	r0, [r0, #16]
   c1a18:	461a      	mov	r2, r3
   c1a1a:	4619      	mov	r1, r3
   c1a1c:	f7fc ba74 	b.w	bdf08 <hal_i2c_begin>

000c1a20 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   c1a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c1a22:	2200      	movs	r2, #0
   c1a24:	2314      	movs	r3, #20
   c1a26:	e9cd 2201 	strd	r2, r2, [sp, #4]
   c1a2a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   c1a2e:	780b      	ldrb	r3, [r1, #0]
   c1a30:	f88d 3008 	strb.w	r3, [sp, #8]
   c1a34:	684b      	ldr	r3, [r1, #4]
   c1a36:	9303      	str	r3, [sp, #12]
   c1a38:	68cb      	ldr	r3, [r1, #12]
   c1a3a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   c1a3c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   c1a3e:	7a0b      	ldrb	r3, [r1, #8]
   c1a40:	9305      	str	r3, [sp, #20]
   c1a42:	a901      	add	r1, sp, #4
   c1a44:	f7fc fab0 	bl	bdfa8 <hal_i2c_request_ex>
}
   c1a48:	b007      	add	sp, #28
   c1a4a:	f85d fb04 	ldr.w	pc, [sp], #4

000c1a4e <_ZN7TwoWire11requestFromEhjh>:
{
   c1a4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   c1a50:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c1a52:	f88d 1000 	strb.w	r1, [sp]
   c1a56:	f04f 0164 	mov.w	r1, #100	; 0x64
   c1a5a:	9103      	str	r1, [sp, #12]
   c1a5c:	bf18      	it	ne
   c1a5e:	2301      	movne	r3, #1
   c1a60:	4669      	mov	r1, sp
    size_ = size;
   c1a62:	9201      	str	r2, [sp, #4]
   c1a64:	f88d 3008 	strb.w	r3, [sp, #8]
   c1a68:	f7ff ffda 	bl	c1a20 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   c1a6c:	b005      	add	sp, #20
   c1a6e:	f85d fb04 	ldr.w	pc, [sp], #4

000c1a72 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   c1a72:	2301      	movs	r3, #1
   c1a74:	f7ff bfeb 	b.w	c1a4e <_ZN7TwoWire11requestFromEhjh>

000c1a78 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   c1a78:	7c00      	ldrb	r0, [r0, #16]
   c1a7a:	2200      	movs	r2, #0
   c1a7c:	f7fc ba4c 	b.w	bdf18 <hal_i2c_begin_transmission>

000c1a80 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   c1a80:	b2c9      	uxtb	r1, r1
   c1a82:	f7ff bff9 	b.w	c1a78 <_ZN7TwoWire17beginTransmissionEh>

000c1a86 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   c1a86:	7c00      	ldrb	r0, [r0, #16]
   c1a88:	2200      	movs	r2, #0
   c1a8a:	f7fc ba4d 	b.w	bdf28 <hal_i2c_end_transmission>

000c1a8e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   c1a8e:	2101      	movs	r1, #1
   c1a90:	f7ff bff9 	b.w	c1a86 <_ZN7TwoWire15endTransmissionEh>

000c1a94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c1a94:	2300      	movs	r3, #0
   c1a96:	6840      	ldr	r0, [r0, #4]
   c1a98:	461a      	mov	r2, r3
   c1a9a:	f7fc bbab 	b.w	be1f4 <network_connect>

000c1a9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c1a9e:	6840      	ldr	r0, [r0, #4]
   c1aa0:	2200      	movs	r2, #0
   c1aa2:	2102      	movs	r1, #2
   c1aa4:	f7fc bbb6 	b.w	be214 <network_disconnect>

000c1aa8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c1aa8:	2200      	movs	r2, #0
   c1aaa:	6840      	ldr	r0, [r0, #4]
   c1aac:	4611      	mov	r1, r2
   c1aae:	f7fc bba9 	b.w	be204 <network_connecting>

000c1ab2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c1ab2:	2200      	movs	r2, #0
   c1ab4:	6840      	ldr	r0, [r0, #4]
   c1ab6:	4611      	mov	r1, r2
   c1ab8:	f7fc bbb4 	b.w	be224 <network_ready>

000c1abc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c1abc:	2300      	movs	r3, #0
   c1abe:	6840      	ldr	r0, [r0, #4]
   c1ac0:	461a      	mov	r2, r3
   c1ac2:	4619      	mov	r1, r3
   c1ac4:	f7fc bbb6 	b.w	be234 <network_on>

000c1ac8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c1ac8:	2300      	movs	r3, #0
   c1aca:	6840      	ldr	r0, [r0, #4]
   c1acc:	461a      	mov	r2, r3
   c1ace:	4619      	mov	r1, r3
   c1ad0:	f7fc bbb8 	b.w	be244 <network_off>

000c1ad4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c1ad4:	6840      	ldr	r0, [r0, #4]
   c1ad6:	2100      	movs	r1, #0
   c1ad8:	f7fc bbdc 	b.w	be294 <network_is_on>

000c1adc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c1adc:	6840      	ldr	r0, [r0, #4]
   c1ade:	2100      	movs	r1, #0
   c1ae0:	f7fc bbe0 	b.w	be2a4 <network_is_off>

000c1ae4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c1ae4:	6840      	ldr	r0, [r0, #4]
   c1ae6:	2200      	movs	r2, #0
   c1ae8:	f081 0101 	eor.w	r1, r1, #1
   c1aec:	f7fc bbb2 	b.w	be254 <network_listen>

000c1af0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c1af0:	6840      	ldr	r0, [r0, #4]
   c1af2:	2200      	movs	r2, #0
   c1af4:	f7fc bbbe 	b.w	be274 <network_set_listen_timeout>

000c1af8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c1af8:	2200      	movs	r2, #0
   c1afa:	6840      	ldr	r0, [r0, #4]
   c1afc:	4611      	mov	r1, r2
   c1afe:	f7fc bbc1 	b.w	be284 <network_get_listen_timeout>

000c1b02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c1b02:	2200      	movs	r2, #0
   c1b04:	6840      	ldr	r0, [r0, #4]
   c1b06:	4611      	mov	r1, r2
   c1b08:	f7fc bbac 	b.w	be264 <network_listening>

000c1b0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c1b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1b10:	b095      	sub	sp, #84	; 0x54
   c1b12:	4614      	mov	r4, r2
   c1b14:	460d      	mov	r5, r1
   c1b16:	4607      	mov	r7, r0
    IPAddress addr;
   c1b18:	f7ff fd88 	bl	c162c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c1b1c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c1b1e:	221c      	movs	r2, #28
   c1b20:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c1b22:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1b24:	f002 fd78 	bl	c4618 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c1b28:	2340      	movs	r3, #64	; 0x40
   c1b2a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c1b2c:	4620      	mov	r0, r4
   c1b2e:	466b      	mov	r3, sp
   c1b30:	aa0c      	add	r2, sp, #48	; 0x30
   c1b32:	2100      	movs	r1, #0
   c1b34:	f7fc f826 	bl	bdb84 <netdb_getaddrinfo>
    if (!r) {
   c1b38:	4604      	mov	r4, r0
   c1b3a:	2800      	cmp	r0, #0
   c1b3c:	d14b      	bne.n	c1bd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c1b3e:	4602      	mov	r2, r0
   c1b40:	2101      	movs	r1, #1
   c1b42:	6868      	ldr	r0, [r5, #4]
   c1b44:	f7fc fb6e 	bl	be224 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1b48:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c1b4a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1b4c:	4622      	mov	r2, r4
   c1b4e:	6868      	ldr	r0, [r5, #4]
   c1b50:	f7fc fb68 	bl	be224 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1b54:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1b56:	4681      	mov	r9, r0
        bool ok = false;
   c1b58:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1b5a:	2e00      	cmp	r6, #0
   c1b5c:	d03b      	beq.n	c1bd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c1b5e:	2900      	cmp	r1, #0
   c1b60:	d139      	bne.n	c1bd6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c1b62:	6873      	ldr	r3, [r6, #4]
   c1b64:	2b02      	cmp	r3, #2
   c1b66:	d003      	beq.n	c1b70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c1b68:	2b0a      	cmp	r3, #10
   c1b6a:	d011      	beq.n	c1b90 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1b6c:	69f6      	ldr	r6, [r6, #28]
   c1b6e:	e7f4      	b.n	c1b5a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c1b70:	f1b8 0f00 	cmp.w	r8, #0
   c1b74:	d0fa      	beq.n	c1b6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c1b76:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c1b78:	a806      	add	r0, sp, #24
   c1b7a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c1b7c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c1b7e:	f7ff fd83 	bl	c1688 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c1b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1b84:	1d3c      	adds	r4, r7, #4
   c1b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1b88:	682b      	ldr	r3, [r5, #0]
   c1b8a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c1b8c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c1b8e:	e7ed      	b.n	c1b6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c1b90:	f1b9 0f00 	cmp.w	r9, #0
   c1b94:	d0ea      	beq.n	c1b6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c1b96:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c1b98:	2210      	movs	r2, #16
   c1b9a:	a801      	add	r0, sp, #4
   c1b9c:	f002 fd3c 	bl	c4618 <memset>
                    a.v = 6;
   c1ba0:	2306      	movs	r3, #6
   c1ba2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c1ba6:	ad01      	add	r5, sp, #4
   c1ba8:	f104 0308 	add.w	r3, r4, #8
   c1bac:	3418      	adds	r4, #24
   c1bae:	6818      	ldr	r0, [r3, #0]
   c1bb0:	6859      	ldr	r1, [r3, #4]
   c1bb2:	462a      	mov	r2, r5
   c1bb4:	c203      	stmia	r2!, {r0, r1}
   c1bb6:	3308      	adds	r3, #8
   c1bb8:	42a3      	cmp	r3, r4
   c1bba:	4615      	mov	r5, r2
   c1bbc:	d1f7      	bne.n	c1bae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c1bbe:	a901      	add	r1, sp, #4
   c1bc0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c1bc2:	ad07      	add	r5, sp, #28
   c1bc4:	f7ff fd40 	bl	c1648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c1bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1bca:	1d3c      	adds	r4, r7, #4
   c1bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1bce:	682b      	ldr	r3, [r5, #0]
   c1bd0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c1bd2:	4649      	mov	r1, r9
   c1bd4:	e7ca      	b.n	c1b6c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c1bd6:	9800      	ldr	r0, [sp, #0]
   c1bd8:	f7fb ffcc 	bl	bdb74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c1bdc:	4638      	mov	r0, r7
   c1bde:	b015      	add	sp, #84	; 0x54
   c1be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c1be4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c1be4:	4b02      	ldr	r3, [pc, #8]	; (c1bf0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c1be6:	4a03      	ldr	r2, [pc, #12]	; (c1bf4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c1be8:	601a      	str	r2, [r3, #0]
   c1bea:	2200      	movs	r2, #0
   c1bec:	605a      	str	r2, [r3, #4]

} // spark
   c1bee:	4770      	bx	lr
   c1bf0:	2003e720 	.word	0x2003e720
   c1bf4:	000c80e8 	.word	0x000c80e8

000c1bf8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c1bf8:	f100 0310 	add.w	r3, r0, #16
   c1bfc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c1bfe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c1c02:	2901      	cmp	r1, #1
   c1c04:	4618      	mov	r0, r3
   c1c06:	d108      	bne.n	c1c1a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c1c08:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c1c0c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c1c10:	3a01      	subs	r2, #1
   c1c12:	f103 0310 	add.w	r3, r3, #16
   c1c16:	d1f2      	bne.n	c1bfe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c1c18:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c1c1a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c1c1c:	bf04      	itt	eq
   c1c1e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c1c22:	1852      	addeq	r2, r2, r1
   c1c24:	e7f4      	b.n	c1c10 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c1c26 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c1c26:	b40e      	push	{r1, r2, r3}
   c1c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   c1c2a:	b088      	sub	sp, #32
   c1c2c:	af00      	add	r7, sp, #0
   c1c2e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1c32:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c1c34:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1c38:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c1c3a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1c3c:	462b      	mov	r3, r5
   c1c3e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c1c40:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1c42:	f7fc fb9f 	bl	be384 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c1c46:	280f      	cmp	r0, #15
   c1c48:	687a      	ldr	r2, [r7, #4]
   c1c4a:	d91a      	bls.n	c1c82 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c1c4c:	f100 0308 	add.w	r3, r0, #8
   c1c50:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c1c54:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c1c56:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1c5a:	1c41      	adds	r1, r0, #1
   c1c5c:	462b      	mov	r3, r5
   c1c5e:	4668      	mov	r0, sp
        va_start(args, fmt);
   c1c60:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1c62:	f7fc fb8f 	bl	be384 <vsnprintf>
        if (n > 0) {
   c1c66:	1e02      	subs	r2, r0, #0
   c1c68:	dd04      	ble.n	c1c74 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c1c6a:	6823      	ldr	r3, [r4, #0]
   c1c6c:	4669      	mov	r1, sp
   c1c6e:	689b      	ldr	r3, [r3, #8]
   c1c70:	4620      	mov	r0, r4
   c1c72:	4798      	blx	r3
   c1c74:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c1c76:	3720      	adds	r7, #32
   c1c78:	46bd      	mov	sp, r7
   c1c7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1c7e:	b003      	add	sp, #12
   c1c80:	4770      	bx	lr
    } else if (n > 0) {
   c1c82:	2800      	cmp	r0, #0
   c1c84:	d0f7      	beq.n	c1c76 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c1c86:	6823      	ldr	r3, [r4, #0]
   c1c88:	4602      	mov	r2, r0
   c1c8a:	689b      	ldr	r3, [r3, #8]
   c1c8c:	f107 0110 	add.w	r1, r7, #16
   c1c90:	4620      	mov	r0, r4
   c1c92:	4798      	blx	r3
}
   c1c94:	e7ef      	b.n	c1c76 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c1c96 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1c96:	b538      	push	{r3, r4, r5, lr}
   c1c98:	680b      	ldr	r3, [r1, #0]
   c1c9a:	6003      	str	r3, [r0, #0]
   c1c9c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c1c9e:	6843      	ldr	r3, [r0, #4]
   c1ca0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1ca2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c1ca4:	d008      	beq.n	c1cb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c1ca6:	b115      	cbz	r5, c1cae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c1ca8:	686b      	ldr	r3, [r5, #4]
   c1caa:	3301      	adds	r3, #1
   c1cac:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c1cae:	6860      	ldr	r0, [r4, #4]
   c1cb0:	b108      	cbz	r0, c1cb6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c1cb2:	f7fc fef8 	bl	beaa6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c1cb6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1cb8:	bd38      	pop	{r3, r4, r5, pc}

000c1cba <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   c1cba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c1cbc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c1cbe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c1cc2:	689b      	ldr	r3, [r3, #8]
   c1cc4:	2201      	movs	r2, #1
   c1cc6:	f10d 0107 	add.w	r1, sp, #7
   c1cca:	4798      	blx	r3
}
   c1ccc:	b003      	add	sp, #12
   c1cce:	f85d fb04 	ldr.w	pc, [sp], #4

000c1cd2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1cd2:	460b      	mov	r3, r1
   c1cd4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c1cd6:	2200      	movs	r2, #0
   c1cd8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c1cda:	e9c0 2200 	strd	r2, r2, [r0]
   c1cde:	4604      	mov	r4, r0
        t_ = t;
   c1ce0:	6083      	str	r3, [r0, #8]
    if (t) {
   c1ce2:	b90b      	cbnz	r3, c1ce8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c1ce4:	4620      	mov	r0, r4
   c1ce6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c1ce8:	f7ff ffd5 	bl	c1c96 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c1cec:	e7fa      	b.n	c1ce4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c1cee <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c1cee:	6883      	ldr	r3, [r0, #8]
   c1cf0:	b1eb      	cbz	r3, c1d2e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c1cf2:	781a      	ldrb	r2, [r3, #0]
   c1cf4:	2a03      	cmp	r2, #3
   c1cf6:	d81a      	bhi.n	c1d2e <_ZNK5spark9JSONValue4typeEv+0x40>
   c1cf8:	e8df f002 	tbb	[pc, r2]
   c1cfc:	1b021704 	.word	0x1b021704
   c1d00:	2005      	movs	r0, #5
   c1d02:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c1d04:	6802      	ldr	r2, [r0, #0]
   c1d06:	685b      	ldr	r3, [r3, #4]
   c1d08:	6852      	ldr	r2, [r2, #4]
   c1d0a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c1d0c:	282d      	cmp	r0, #45	; 0x2d
   c1d0e:	d012      	beq.n	c1d36 <_ZNK5spark9JSONValue4typeEv+0x48>
   c1d10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c1d14:	2b09      	cmp	r3, #9
   c1d16:	d90e      	bls.n	c1d36 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c1d18:	2874      	cmp	r0, #116	; 0x74
   c1d1a:	d00e      	beq.n	c1d3a <_ZNK5spark9JSONValue4typeEv+0x4c>
   c1d1c:	2866      	cmp	r0, #102	; 0x66
   c1d1e:	d00c      	beq.n	c1d3a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c1d20:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c1d24:	4258      	negs	r0, r3
   c1d26:	4158      	adcs	r0, r3
   c1d28:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c1d2a:	2006      	movs	r0, #6
   c1d2c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c1d2e:	2000      	movs	r0, #0
   c1d30:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c1d32:	2004      	movs	r0, #4
   c1d34:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c1d36:	2003      	movs	r0, #3
   c1d38:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c1d3a:	2002      	movs	r0, #2
}
   c1d3c:	4770      	bx	lr

000c1d3e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c1d3e:	b510      	push	{r4, lr}
   c1d40:	4604      	mov	r4, r0
    switch (type()) {
   c1d42:	f7ff ffd4 	bl	c1cee <_ZNK5spark9JSONValue4typeEv>
   c1d46:	2802      	cmp	r0, #2
   c1d48:	d00e      	beq.n	c1d68 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c1d4a:	1ec3      	subs	r3, r0, #3
   c1d4c:	b2db      	uxtb	r3, r3
   c1d4e:	2b01      	cmp	r3, #1
   c1d50:	d814      	bhi.n	c1d7c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c1d52:	6822      	ldr	r2, [r4, #0]
   c1d54:	68a3      	ldr	r3, [r4, #8]
   c1d56:	6850      	ldr	r0, [r2, #4]
   c1d58:	685b      	ldr	r3, [r3, #4]
}
   c1d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c1d5e:	220a      	movs	r2, #10
   c1d60:	2100      	movs	r1, #0
   c1d62:	4418      	add	r0, r3
   c1d64:	f003 bc0c 	b.w	c5580 <strtol>
        const char* const s = d_->json + t_->start;
   c1d68:	6822      	ldr	r2, [r4, #0]
   c1d6a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c1d6c:	6852      	ldr	r2, [r2, #4]
   c1d6e:	685b      	ldr	r3, [r3, #4]
   c1d70:	5cd0      	ldrb	r0, [r2, r3]
   c1d72:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c1d76:	4258      	negs	r0, r3
   c1d78:	4158      	adcs	r0, r3
}
   c1d7a:	bd10      	pop	{r4, pc}
    switch (type()) {
   c1d7c:	2000      	movs	r0, #0
   c1d7e:	e7fc      	b.n	c1d7a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c1d80 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1d80:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c1d82:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c1d84:	e9c0 3300 	strd	r3, r3, [r0]
   c1d88:	4604      	mov	r4, r0
        n_(0) {
   c1d8a:	480e      	ldr	r0, [pc, #56]	; (c1dc4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c1d8c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c1d90:	b1a9      	cbz	r1, c1dbe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c1d92:	780b      	ldrb	r3, [r1, #0]
   c1d94:	2b03      	cmp	r3, #3
   c1d96:	d006      	beq.n	c1da6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c1d98:	b98b      	cbnz	r3, c1dbe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c1d9a:	6813      	ldr	r3, [r2, #0]
   c1d9c:	6858      	ldr	r0, [r3, #4]
   c1d9e:	684b      	ldr	r3, [r1, #4]
   c1da0:	5cc3      	ldrb	r3, [r0, r3]
   c1da2:	2b6e      	cmp	r3, #110	; 0x6e
   c1da4:	d007      	beq.n	c1db6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c1da6:	6813      	ldr	r3, [r2, #0]
   c1da8:	684d      	ldr	r5, [r1, #4]
   c1daa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c1dac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c1dae:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c1db0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c1db2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c1db4:	60e3      	str	r3, [r4, #12]
   c1db6:	4611      	mov	r1, r2
   c1db8:	4620      	mov	r0, r4
   c1dba:	f7ff ff6c 	bl	c1c96 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c1dbe:	4620      	mov	r0, r4
   c1dc0:	bd38      	pop	{r3, r4, r5, pc}
   c1dc2:	bf00      	nop
   c1dc4:	000c7f40 	.word	0x000c7f40

000c1dc8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1dc8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c1dca:	2500      	movs	r5, #0
   c1dcc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c1dce:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c1dd2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c1dd6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c1dda:	4604      	mov	r4, r0
   c1ddc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c1dde:	b14b      	cbz	r3, c1df4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c1de0:	781a      	ldrb	r2, [r3, #0]
   c1de2:	2a01      	cmp	r2, #1
   c1de4:	d106      	bne.n	c1df4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c1de6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c1dea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c1dec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c1dee:	6143      	str	r3, [r0, #20]
   c1df0:	f7ff ff51 	bl	c1c96 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c1df4:	4620      	mov	r0, r4
   c1df6:	bd38      	pop	{r3, r4, r5, pc}

000c1df8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c1df8:	b510      	push	{r4, lr}
    if (!n_) {
   c1dfa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c1dfc:	4604      	mov	r4, r0
    if (!n_) {
   c1dfe:	b163      	cbz	r3, c1e1a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c1e00:	6880      	ldr	r0, [r0, #8]
   c1e02:	60e0      	str	r0, [r4, #12]
    --n_;
   c1e04:	3b01      	subs	r3, #1
    ++t_;
   c1e06:	3010      	adds	r0, #16
   c1e08:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c1e0a:	6120      	str	r0, [r4, #16]
    --n_;
   c1e0c:	6163      	str	r3, [r4, #20]
    if (n_) {
   c1e0e:	b113      	cbz	r3, c1e16 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c1e10:	f7ff fef2 	bl	c1bf8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c1e14:	60a0      	str	r0, [r4, #8]
    return true;
   c1e16:	2001      	movs	r0, #1
   c1e18:	e000      	b.n	c1e1c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c1e1a:	4618      	mov	r0, r3
}
   c1e1c:	bd10      	pop	{r4, pc}

000c1e1e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c1e1e:	b510      	push	{r4, lr}
    write('}');
   c1e20:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c1e22:	4604      	mov	r4, r0
    write('}');
   c1e24:	f7ff ff49 	bl	c1cba <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c1e28:	2301      	movs	r3, #1
   c1e2a:	7123      	strb	r3, [r4, #4]
}
   c1e2c:	4620      	mov	r0, r4
   c1e2e:	bd10      	pop	{r4, pc}

000c1e30 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c1e30:	b508      	push	{r3, lr}
    switch (state_) {
   c1e32:	7903      	ldrb	r3, [r0, #4]
   c1e34:	2b01      	cmp	r3, #1
   c1e36:	d002      	beq.n	c1e3e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c1e38:	2b02      	cmp	r3, #2
   c1e3a:	d004      	beq.n	c1e46 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c1e3c:	bd08      	pop	{r3, pc}
        write(',');
   c1e3e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c1e40:	f7ff ff3b 	bl	c1cba <_ZN5spark10JSONWriter5writeEc>
}
   c1e44:	e7fa      	b.n	c1e3c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c1e46:	213a      	movs	r1, #58	; 0x3a
   c1e48:	e7fa      	b.n	c1e40 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c1e4a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c1e4a:	b510      	push	{r4, lr}
   c1e4c:	4604      	mov	r4, r0
    writeSeparator();
   c1e4e:	f7ff ffef 	bl	c1e30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c1e52:	4620      	mov	r0, r4
   c1e54:	217b      	movs	r1, #123	; 0x7b
   c1e56:	f7ff ff30 	bl	c1cba <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c1e5a:	2300      	movs	r3, #0
   c1e5c:	7123      	strb	r3, [r4, #4]
}
   c1e5e:	4620      	mov	r0, r4
   c1e60:	bd10      	pop	{r4, pc}
	...

000c1e64 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c1e64:	b513      	push	{r0, r1, r4, lr}
   c1e66:	4604      	mov	r4, r0
   c1e68:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c1e6a:	f7ff ffe1 	bl	c1e30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c1e6e:	6823      	ldr	r3, [r4, #0]
   c1e70:	9a01      	ldr	r2, [sp, #4]
   c1e72:	68db      	ldr	r3, [r3, #12]
   c1e74:	4903      	ldr	r1, [pc, #12]	; (c1e84 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c1e76:	4620      	mov	r0, r4
   c1e78:	4798      	blx	r3
    state_ = NEXT;
   c1e7a:	2301      	movs	r3, #1
}
   c1e7c:	4620      	mov	r0, r4
    state_ = NEXT;
   c1e7e:	7123      	strb	r3, [r4, #4]
}
   c1e80:	b002      	add	sp, #8
   c1e82:	bd10      	pop	{r4, pc}
   c1e84:	000c6994 	.word	0x000c6994

000c1e88 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c1e88:	b513      	push	{r0, r1, r4, lr}
   c1e8a:	4604      	mov	r4, r0
   c1e8c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c1e8e:	f7ff ffcf 	bl	c1e30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c1e92:	6823      	ldr	r3, [r4, #0]
   c1e94:	9a01      	ldr	r2, [sp, #4]
   c1e96:	68db      	ldr	r3, [r3, #12]
   c1e98:	4903      	ldr	r1, [pc, #12]	; (c1ea8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c1e9a:	4620      	mov	r0, r4
   c1e9c:	4798      	blx	r3
    state_ = NEXT;
   c1e9e:	2301      	movs	r3, #1
}
   c1ea0:	4620      	mov	r0, r4
    state_ = NEXT;
   c1ea2:	7123      	strb	r3, [r4, #4]
}
   c1ea4:	b002      	add	sp, #8
   c1ea6:	bd10      	pop	{r4, pc}
   c1ea8:	000c811c 	.word	0x000c811c

000c1eac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c1eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1eb0:	460d      	mov	r5, r1
    write('"');
   c1eb2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c1eb4:	4690      	mov	r8, r2
   c1eb6:	4604      	mov	r4, r0
    write('"');
   c1eb8:	f7ff feff 	bl	c1cba <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c1ebc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c1f64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c1ec0:	44a8      	add	r8, r5
    const char *s = str;
   c1ec2:	462f      	mov	r7, r5
    while (s != end) {
   c1ec4:	4547      	cmp	r7, r8
   c1ec6:	46ba      	mov	sl, r7
   c1ec8:	d03d      	beq.n	c1f46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c1eca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c1ece:	2e22      	cmp	r6, #34	; 0x22
   c1ed0:	d006      	beq.n	c1ee0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c1ed2:	2e5c      	cmp	r6, #92	; 0x5c
   c1ed4:	d004      	beq.n	c1ee0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c1ed6:	4630      	mov	r0, r6
   c1ed8:	f002 fb5e 	bl	c4598 <isprint>
   c1edc:	2800      	cmp	r0, #0
   c1ede:	d1f1      	bne.n	c1ec4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c1ee0:	6823      	ldr	r3, [r4, #0]
   c1ee2:	ebaa 0205 	sub.w	r2, sl, r5
   c1ee6:	689b      	ldr	r3, [r3, #8]
   c1ee8:	4629      	mov	r1, r5
   c1eea:	4620      	mov	r0, r4
   c1eec:	4798      	blx	r3
            write('\\');
   c1eee:	215c      	movs	r1, #92	; 0x5c
   c1ef0:	4620      	mov	r0, r4
   c1ef2:	f7ff fee2 	bl	c1cba <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c1ef6:	2e0d      	cmp	r6, #13
   c1ef8:	d80a      	bhi.n	c1f10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c1efa:	2e07      	cmp	r6, #7
   c1efc:	d91c      	bls.n	c1f38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c1efe:	f1a6 0308 	sub.w	r3, r6, #8
   c1f02:	2b05      	cmp	r3, #5
   c1f04:	d818      	bhi.n	c1f38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c1f06:	e8df f003 	tbb	[pc, r3]
   c1f0a:	0f0d      	.short	0x0f0d
   c1f0c:	15131711 	.word	0x15131711
   c1f10:	2e22      	cmp	r6, #34	; 0x22
   c1f12:	d001      	beq.n	c1f18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c1f14:	2e5c      	cmp	r6, #92	; 0x5c
   c1f16:	d10f      	bne.n	c1f38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c1f18:	4631      	mov	r1, r6
                write('b');
   c1f1a:	4620      	mov	r0, r4
   c1f1c:	f7ff fecd 	bl	c1cba <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c1f20:	463d      	mov	r5, r7
    while (s != end) {
   c1f22:	e7cf      	b.n	c1ec4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c1f24:	2162      	movs	r1, #98	; 0x62
   c1f26:	e7f8      	b.n	c1f1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c1f28:	2174      	movs	r1, #116	; 0x74
   c1f2a:	e7f6      	b.n	c1f1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c1f2c:	216e      	movs	r1, #110	; 0x6e
   c1f2e:	e7f4      	b.n	c1f1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c1f30:	2166      	movs	r1, #102	; 0x66
   c1f32:	e7f2      	b.n	c1f1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c1f34:	2172      	movs	r1, #114	; 0x72
   c1f36:	e7f0      	b.n	c1f1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c1f38:	6823      	ldr	r3, [r4, #0]
   c1f3a:	4632      	mov	r2, r6
   c1f3c:	68db      	ldr	r3, [r3, #12]
   c1f3e:	4649      	mov	r1, r9
   c1f40:	4620      	mov	r0, r4
   c1f42:	4798      	blx	r3
                break;
   c1f44:	e7ec      	b.n	c1f20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c1f46:	42bd      	cmp	r5, r7
   c1f48:	d005      	beq.n	c1f56 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c1f4a:	6823      	ldr	r3, [r4, #0]
   c1f4c:	1b7a      	subs	r2, r7, r5
   c1f4e:	689b      	ldr	r3, [r3, #8]
   c1f50:	4629      	mov	r1, r5
   c1f52:	4620      	mov	r0, r4
   c1f54:	4798      	blx	r3
    }
    write('"');
   c1f56:	2122      	movs	r1, #34	; 0x22
   c1f58:	4620      	mov	r0, r4
   c1f5a:	f7ff feae 	bl	c1cba <_ZN5spark10JSONWriter5writeEc>
}
   c1f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1f62:	bf00      	nop
   c1f64:	000c811f 	.word	0x000c811f

000c1f68 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c1f68:	b513      	push	{r0, r1, r4, lr}
   c1f6a:	4604      	mov	r4, r0
   c1f6c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1f70:	f7ff ff5e 	bl	c1e30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c1f74:	4620      	mov	r0, r4
   c1f76:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1f7a:	f7ff ff97 	bl	c1eac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c1f7e:	2302      	movs	r3, #2
}
   c1f80:	4620      	mov	r0, r4
    state_ = VALUE;
   c1f82:	7123      	strb	r3, [r4, #4]
}
   c1f84:	b002      	add	sp, #8
   c1f86:	bd10      	pop	{r4, pc}

000c1f88 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c1f88:	b513      	push	{r0, r1, r4, lr}
   c1f8a:	4604      	mov	r4, r0
   c1f8c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1f90:	f7ff ff4e 	bl	c1e30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c1f94:	4620      	mov	r0, r4
   c1f96:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1f9a:	f7ff ff87 	bl	c1eac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c1f9e:	2301      	movs	r3, #1
}
   c1fa0:	4620      	mov	r0, r4
    state_ = NEXT;
   c1fa2:	7123      	strb	r3, [r4, #4]
}
   c1fa4:	b002      	add	sp, #8
   c1fa6:	bd10      	pop	{r4, pc}

000c1fa8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1fa8:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1faa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1fac:	d902      	bls.n	c1fb4 <pinAvailable+0xc>
    return false;
   c1fae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1fb0:	b002      	add	sp, #8
   c1fb2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1fb4:	f1a0 030b 	sub.w	r3, r0, #11
   c1fb8:	2b02      	cmp	r3, #2
   c1fba:	d81a      	bhi.n	c1ff2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1fbc:	4c17      	ldr	r4, [pc, #92]	; (c201c <pinAvailable+0x74>)
   c1fbe:	7821      	ldrb	r1, [r4, #0]
   c1fc0:	f3bf 8f5b 	dmb	ish
   c1fc4:	f011 0101 	ands.w	r1, r1, #1
   c1fc8:	d10b      	bne.n	c1fe2 <pinAvailable+0x3a>
   c1fca:	4620      	mov	r0, r4
   c1fcc:	9101      	str	r1, [sp, #4]
   c1fce:	f7f2 f877 	bl	b40c0 <__cxa_guard_acquire>
   c1fd2:	9901      	ldr	r1, [sp, #4]
   c1fd4:	b128      	cbz	r0, c1fe2 <pinAvailable+0x3a>
   c1fd6:	4812      	ldr	r0, [pc, #72]	; (c2020 <pinAvailable+0x78>)
   c1fd8:	f7fc fa78 	bl	be4cc <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1fdc:	4620      	mov	r0, r4
   c1fde:	f7f2 f874 	bl	b40ca <__cxa_guard_release>
   c1fe2:	4b0f      	ldr	r3, [pc, #60]	; (c2020 <pinAvailable+0x78>)
   c1fe4:	7818      	ldrb	r0, [r3, #0]
   c1fe6:	f7fb ffff 	bl	bdfe8 <hal_spi_is_enabled>
   c1fea:	2800      	cmp	r0, #0
   c1fec:	d1df      	bne.n	c1fae <pinAvailable+0x6>
  return true; // 'pin' is available
   c1fee:	2001      	movs	r0, #1
   c1ff0:	e7de      	b.n	c1fb0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c1ff2:	2801      	cmp	r0, #1
   c1ff4:	d809      	bhi.n	c200a <pinAvailable+0x62>
   c1ff6:	f000 f8c1 	bl	c217c <_Z19__fetch_global_Wirev>
   c1ffa:	2100      	movs	r1, #0
   c1ffc:	7c00      	ldrb	r0, [r0, #16]
   c1ffe:	f7fb ffc3 	bl	bdf88 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c2002:	f080 0001 	eor.w	r0, r0, #1
   c2006:	b2c0      	uxtb	r0, r0
   c2008:	e7d2      	b.n	c1fb0 <pinAvailable+0x8>
   c200a:	3809      	subs	r0, #9
   c200c:	2801      	cmp	r0, #1
   c200e:	d8ee      	bhi.n	c1fee <pinAvailable+0x46>
   c2010:	f000 f878 	bl	c2104 <_Z22__fetch_global_Serial1v>
   c2014:	7c00      	ldrb	r0, [r0, #16]
   c2016:	f7fb ff4f 	bl	bdeb8 <hal_usart_is_enabled>
   c201a:	e7f2      	b.n	c2002 <pinAvailable+0x5a>
   c201c:	2003dd28 	.word	0x2003dd28
   c2020:	2003dd2c 	.word	0x2003dd2c

000c2024 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c2024:	2825      	cmp	r0, #37	; 0x25
{
   c2026:	b538      	push	{r3, r4, r5, lr}
   c2028:	4604      	mov	r4, r0
   c202a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c202c:	d80a      	bhi.n	c2044 <pinMode+0x20>
   c202e:	29ff      	cmp	r1, #255	; 0xff
   c2030:	d008      	beq.n	c2044 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c2032:	f7ff ffb9 	bl	c1fa8 <pinAvailable>
   c2036:	b128      	cbz	r0, c2044 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c2038:	4629      	mov	r1, r5
   c203a:	4620      	mov	r0, r4
}
   c203c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c2040:	f7fb bdb0 	b.w	bdba4 <HAL_Pin_Mode>
}
   c2044:	bd38      	pop	{r3, r4, r5, pc}

000c2046 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c2046:	b538      	push	{r3, r4, r5, lr}
   c2048:	4604      	mov	r4, r0
   c204a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c204c:	f7fb fdb2 	bl	bdbb4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c2050:	28ff      	cmp	r0, #255	; 0xff
   c2052:	d010      	beq.n	c2076 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c2054:	2806      	cmp	r0, #6
   c2056:	d804      	bhi.n	c2062 <digitalWrite+0x1c>
   c2058:	234d      	movs	r3, #77	; 0x4d
   c205a:	fa23 f000 	lsr.w	r0, r3, r0
   c205e:	07c3      	lsls	r3, r0, #31
   c2060:	d409      	bmi.n	c2076 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c2062:	4620      	mov	r0, r4
   c2064:	f7ff ffa0 	bl	c1fa8 <pinAvailable>
   c2068:	b128      	cbz	r0, c2076 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c206a:	4629      	mov	r1, r5
   c206c:	4620      	mov	r0, r4
}
   c206e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c2072:	f7fb bda7 	b.w	bdbc4 <HAL_GPIO_Write>
}
   c2076:	bd38      	pop	{r3, r4, r5, pc}

000c2078 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c2078:	b510      	push	{r4, lr}
   c207a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c207c:	f7fb fd9a 	bl	bdbb4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c2080:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c2082:	b2db      	uxtb	r3, r3
   c2084:	2b01      	cmp	r3, #1
   c2086:	d908      	bls.n	c209a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c2088:	4620      	mov	r0, r4
   c208a:	f7ff ff8d 	bl	c1fa8 <pinAvailable>
   c208e:	b120      	cbz	r0, c209a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c2090:	4620      	mov	r0, r4
}
   c2092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c2096:	f7fb bd9d 	b.w	bdbd4 <HAL_GPIO_Read>
}
   c209a:	2000      	movs	r0, #0
   c209c:	bd10      	pop	{r4, pc}

000c209e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c209e:	280d      	cmp	r0, #13
{
   c20a0:	b510      	push	{r4, lr}
   c20a2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c20a4:	bf9c      	itt	ls
   c20a6:	340e      	addls	r4, #14
   c20a8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c20aa:	4620      	mov	r0, r4
   c20ac:	f7ff ff7c 	bl	c1fa8 <pinAvailable>
   c20b0:	b150      	cbz	r0, c20c8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c20b2:	2103      	movs	r1, #3
   c20b4:	4620      	mov	r0, r4
   c20b6:	f7fb fd6d 	bl	bdb94 <HAL_Validate_Pin_Function>
   c20ba:	2803      	cmp	r0, #3
   c20bc:	d104      	bne.n	c20c8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c20be:	4620      	mov	r0, r4
}
   c20c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c20c4:	f7fb bdae 	b.w	bdc24 <hal_adc_read>
}
   c20c8:	2000      	movs	r0, #0
   c20ca:	bd10      	pop	{r4, pc}

000c20cc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c20cc:	4770      	bx	lr
	...

000c20d0 <_Z20acquireSerial1Bufferv>:
{
   c20d0:	b538      	push	{r3, r4, r5, lr}
   c20d2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c20d4:	2514      	movs	r5, #20
   c20d6:	462a      	mov	r2, r5
   c20d8:	2100      	movs	r1, #0
   c20da:	f002 fa9d 	bl	c4618 <memset>
   c20de:	8025      	strh	r5, [r4, #0]
   c20e0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20e2:	4907      	ldr	r1, [pc, #28]	; (c2100 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c20e4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20e6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c20e8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20ea:	f000 f86d 	bl	c21c8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20ee:	4904      	ldr	r1, [pc, #16]	; (c2100 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c20f0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20f2:	4628      	mov	r0, r5
   c20f4:	f000 f868 	bl	c21c8 <_ZnajRKSt9nothrow_t>
    };
   c20f8:	60e0      	str	r0, [r4, #12]
}
   c20fa:	4620      	mov	r0, r4
   c20fc:	bd38      	pop	{r3, r4, r5, pc}
   c20fe:	bf00      	nop
   c2100:	000c8125 	.word	0x000c8125

000c2104 <_Z22__fetch_global_Serial1v>:
{
   c2104:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c2106:	4d0e      	ldr	r5, [pc, #56]	; (c2140 <_Z22__fetch_global_Serial1v+0x3c>)
   c2108:	7829      	ldrb	r1, [r5, #0]
   c210a:	f3bf 8f5b 	dmb	ish
   c210e:	f011 0401 	ands.w	r4, r1, #1
{
   c2112:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c2114:	d111      	bne.n	c213a <_Z22__fetch_global_Serial1v+0x36>
   c2116:	4628      	mov	r0, r5
   c2118:	f7f1 ffd2 	bl	b40c0 <__cxa_guard_acquire>
   c211c:	b168      	cbz	r0, c213a <_Z22__fetch_global_Serial1v+0x36>
   c211e:	a801      	add	r0, sp, #4
   c2120:	f7ff ffd6 	bl	c20d0 <_Z20acquireSerial1Bufferv>
   c2124:	aa01      	add	r2, sp, #4
   c2126:	4621      	mov	r1, r4
   c2128:	4806      	ldr	r0, [pc, #24]	; (c2144 <_Z22__fetch_global_Serial1v+0x40>)
   c212a:	f7ff fbff 	bl	c192c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c212e:	4628      	mov	r0, r5
   c2130:	f7f1 ffcb 	bl	b40ca <__cxa_guard_release>
   c2134:	4804      	ldr	r0, [pc, #16]	; (c2148 <_Z22__fetch_global_Serial1v+0x44>)
   c2136:	f002 fa21 	bl	c457c <atexit>
    return serial1;
}
   c213a:	4802      	ldr	r0, [pc, #8]	; (c2144 <_Z22__fetch_global_Serial1v+0x40>)
   c213c:	b007      	add	sp, #28
   c213e:	bd30      	pop	{r4, r5, pc}
   c2140:	2003e728 	.word	0x2003e728
   c2144:	2003e72c 	.word	0x2003e72c
   c2148:	000c20cd 	.word	0x000c20cd

000c214c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c214c:	4770      	bx	lr
	...

000c2150 <_Z17acquireWireBufferv>:
{
   c2150:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c2152:	2520      	movs	r5, #32
   c2154:	2314      	movs	r3, #20
{
   c2156:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c2158:	6003      	str	r3, [r0, #0]
   c215a:	6085      	str	r5, [r0, #8]
   c215c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c215e:	4906      	ldr	r1, [pc, #24]	; (c2178 <_Z17acquireWireBufferv+0x28>)
   c2160:	4628      	mov	r0, r5
   c2162:	f000 f831 	bl	c21c8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c2166:	4904      	ldr	r1, [pc, #16]	; (c2178 <_Z17acquireWireBufferv+0x28>)
	};
   c2168:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c216a:	4628      	mov	r0, r5
   c216c:	f000 f82c 	bl	c21c8 <_ZnajRKSt9nothrow_t>
	};
   c2170:	60e0      	str	r0, [r4, #12]
}
   c2172:	4620      	mov	r0, r4
   c2174:	bd38      	pop	{r3, r4, r5, pc}
   c2176:	bf00      	nop
   c2178:	000c8125 	.word	0x000c8125

000c217c <_Z19__fetch_global_Wirev>:
{
   c217c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c217e:	4d0e      	ldr	r5, [pc, #56]	; (c21b8 <_Z19__fetch_global_Wirev+0x3c>)
   c2180:	7829      	ldrb	r1, [r5, #0]
   c2182:	f3bf 8f5b 	dmb	ish
   c2186:	f011 0401 	ands.w	r4, r1, #1
{
   c218a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c218c:	d111      	bne.n	c21b2 <_Z19__fetch_global_Wirev+0x36>
   c218e:	4628      	mov	r0, r5
   c2190:	f7f1 ff96 	bl	b40c0 <__cxa_guard_acquire>
   c2194:	b168      	cbz	r0, c21b2 <_Z19__fetch_global_Wirev+0x36>
   c2196:	a801      	add	r0, sp, #4
   c2198:	f7ff ffda 	bl	c2150 <_Z17acquireWireBufferv>
   c219c:	aa01      	add	r2, sp, #4
   c219e:	4621      	mov	r1, r4
   c21a0:	4806      	ldr	r0, [pc, #24]	; (c21bc <_Z19__fetch_global_Wirev+0x40>)
   c21a2:	f7ff fc21 	bl	c19e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c21a6:	4628      	mov	r0, r5
   c21a8:	f7f1 ff8f 	bl	b40ca <__cxa_guard_release>
   c21ac:	4804      	ldr	r0, [pc, #16]	; (c21c0 <_Z19__fetch_global_Wirev+0x44>)
   c21ae:	f002 f9e5 	bl	c457c <atexit>
	return wire;
}
   c21b2:	4802      	ldr	r0, [pc, #8]	; (c21bc <_Z19__fetch_global_Wirev+0x40>)
   c21b4:	b007      	add	sp, #28
   c21b6:	bd30      	pop	{r4, r5, pc}
   c21b8:	2003e744 	.word	0x2003e744
   c21bc:	2003e748 	.word	0x2003e748
   c21c0:	000c214d 	.word	0x000c214d

000c21c4 <_ZnwjRKSt9nothrow_t>:
   c21c4:	f7f1 bf67 	b.w	b4096 <_Znwj>

000c21c8 <_ZnajRKSt9nothrow_t>:
   c21c8:	f7f1 bf67 	b.w	b409a <_Znaj>

000c21cc <_ZSt25__throw_bad_function_callv>:
   c21cc:	b508      	push	{r3, lr}
   c21ce:	f7fc f8e1 	bl	be394 <abort>
	...

000c21d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c21d4:	4901      	ldr	r1, [pc, #4]	; (c21dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c21d6:	f000 b8f9 	b.w	c23cc <_ZNKSt9type_infoeqERKS_>
   c21da:	bf00      	nop
   c21dc:	000c8140 	.word	0x000c8140

000c21e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c21e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c21e2:	2400      	movs	r4, #0
   c21e4:	2310      	movs	r3, #16
   c21e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c21ea:	6803      	ldr	r3, [r0, #0]
   c21ec:	4615      	mov	r5, r2
   c21ee:	699e      	ldr	r6, [r3, #24]
   c21f0:	6812      	ldr	r2, [r2, #0]
   c21f2:	466b      	mov	r3, sp
   c21f4:	e9cd 4400 	strd	r4, r4, [sp]
   c21f8:	47b0      	blx	r6
   c21fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c21fe:	f003 0306 	and.w	r3, r3, #6
   c2202:	2b06      	cmp	r3, #6
   c2204:	bf03      	ittte	eq
   c2206:	9b00      	ldreq	r3, [sp, #0]
   c2208:	602b      	streq	r3, [r5, #0]
   c220a:	2001      	moveq	r0, #1
   c220c:	4620      	movne	r0, r4
   c220e:	b004      	add	sp, #16
   c2210:	bd70      	pop	{r4, r5, r6, pc}

000c2212 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c2212:	9800      	ldr	r0, [sp, #0]
   c2214:	4290      	cmp	r0, r2
   c2216:	bf14      	ite	ne
   c2218:	2001      	movne	r0, #1
   c221a:	2006      	moveq	r0, #6
   c221c:	4770      	bx	lr
	...

000c2220 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c2220:	b510      	push	{r4, lr}
   c2222:	4b03      	ldr	r3, [pc, #12]	; (c2230 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c2224:	6003      	str	r3, [r0, #0]
   c2226:	4604      	mov	r4, r0
   c2228:	f000 f8cd 	bl	c23c6 <_ZNSt9type_infoD1Ev>
   c222c:	4620      	mov	r0, r4
   c222e:	bd10      	pop	{r4, pc}
   c2230:	000c8180 	.word	0x000c8180

000c2234 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c2234:	b510      	push	{r4, lr}
   c2236:	4604      	mov	r4, r0
   c2238:	f7ff fff2 	bl	c2220 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c223c:	4620      	mov	r0, r4
   c223e:	2108      	movs	r1, #8
   c2240:	f7f1 ff2f 	bl	b40a2 <_ZdlPvj>
   c2244:	4620      	mov	r0, r4
   c2246:	bd10      	pop	{r4, pc}

000c2248 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c2248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c224c:	461f      	mov	r7, r3
   c224e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c2252:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c2256:	4598      	cmp	r8, r3
   c2258:	4606      	mov	r6, r0
   c225a:	4615      	mov	r5, r2
   c225c:	d107      	bne.n	c226e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c225e:	9907      	ldr	r1, [sp, #28]
   c2260:	f000 f8b4 	bl	c23cc <_ZNKSt9type_infoeqERKS_>
   c2264:	b118      	cbz	r0, c226e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c2266:	7165      	strb	r5, [r4, #5]
   c2268:	2000      	movs	r0, #0
   c226a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c226e:	4639      	mov	r1, r7
   c2270:	4630      	mov	r0, r6
   c2272:	f000 f8ab 	bl	c23cc <_ZNKSt9type_infoeqERKS_>
   c2276:	2800      	cmp	r0, #0
   c2278:	d0f6      	beq.n	c2268 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c227a:	2301      	movs	r3, #1
   c227c:	f8c4 8000 	str.w	r8, [r4]
   c2280:	7125      	strb	r5, [r4, #4]
   c2282:	71a3      	strb	r3, [r4, #6]
   c2284:	e7f0      	b.n	c2268 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c2286 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c2286:	b538      	push	{r3, r4, r5, lr}
   c2288:	4615      	mov	r5, r2
   c228a:	461c      	mov	r4, r3
   c228c:	f000 f89e 	bl	c23cc <_ZNKSt9type_infoeqERKS_>
   c2290:	b120      	cbz	r0, c229c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c2292:	2308      	movs	r3, #8
   c2294:	60e3      	str	r3, [r4, #12]
   c2296:	2306      	movs	r3, #6
   c2298:	6025      	str	r5, [r4, #0]
   c229a:	7123      	strb	r3, [r4, #4]
   c229c:	bd38      	pop	{r3, r4, r5, pc}

000c229e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c229e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c22a0:	4605      	mov	r5, r0
   c22a2:	460c      	mov	r4, r1
   c22a4:	9201      	str	r2, [sp, #4]
   c22a6:	461e      	mov	r6, r3
   c22a8:	f000 f890 	bl	c23cc <_ZNKSt9type_infoeqERKS_>
   c22ac:	b950      	cbnz	r0, c22c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c22ae:	2e03      	cmp	r6, #3
   c22b0:	d808      	bhi.n	c22c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c22b2:	6823      	ldr	r3, [r4, #0]
   c22b4:	9a01      	ldr	r2, [sp, #4]
   c22b6:	695b      	ldr	r3, [r3, #20]
   c22b8:	4629      	mov	r1, r5
   c22ba:	4620      	mov	r0, r4
   c22bc:	b002      	add	sp, #8
   c22be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c22c2:	4718      	bx	r3
   c22c4:	b002      	add	sp, #8
   c22c6:	bd70      	pop	{r4, r5, r6, pc}

000c22c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c22c8:	b510      	push	{r4, lr}
   c22ca:	4b03      	ldr	r3, [pc, #12]	; (c22d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c22cc:	6003      	str	r3, [r0, #0]
   c22ce:	4604      	mov	r4, r0
   c22d0:	f7ff ffa6 	bl	c2220 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c22d4:	4620      	mov	r0, r4
   c22d6:	bd10      	pop	{r4, pc}
   c22d8:	000c81e0 	.word	0x000c81e0

000c22dc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c22dc:	b510      	push	{r4, lr}
   c22de:	4604      	mov	r4, r0
   c22e0:	f7ff fff2 	bl	c22c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c22e4:	4620      	mov	r0, r4
   c22e6:	210c      	movs	r1, #12
   c22e8:	f7f1 fedb 	bl	b40a2 <_ZdlPvj>
   c22ec:	4620      	mov	r0, r4
   c22ee:	bd10      	pop	{r4, pc}

000c22f0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c22f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c22f2:	9f08      	ldr	r7, [sp, #32]
   c22f4:	4297      	cmp	r7, r2
   c22f6:	4605      	mov	r5, r0
   c22f8:	460e      	mov	r6, r1
   c22fa:	4614      	mov	r4, r2
   c22fc:	d00a      	beq.n	c2314 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c22fe:	68a8      	ldr	r0, [r5, #8]
   c2300:	6802      	ldr	r2, [r0, #0]
   c2302:	9708      	str	r7, [sp, #32]
   c2304:	6a15      	ldr	r5, [r2, #32]
   c2306:	4631      	mov	r1, r6
   c2308:	4622      	mov	r2, r4
   c230a:	46ac      	mov	ip, r5
   c230c:	b003      	add	sp, #12
   c230e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c2312:	4760      	bx	ip
   c2314:	4619      	mov	r1, r3
   c2316:	9301      	str	r3, [sp, #4]
   c2318:	f000 f858 	bl	c23cc <_ZNKSt9type_infoeqERKS_>
   c231c:	9b01      	ldr	r3, [sp, #4]
   c231e:	2800      	cmp	r0, #0
   c2320:	d0ed      	beq.n	c22fe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c2322:	2006      	movs	r0, #6
   c2324:	b003      	add	sp, #12
   c2326:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c2328 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c2328:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c232c:	460d      	mov	r5, r1
   c232e:	4619      	mov	r1, r3
   c2330:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c2334:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c2338:	4681      	mov	r9, r0
   c233a:	4617      	mov	r7, r2
   c233c:	4698      	mov	r8, r3
   c233e:	f000 f845 	bl	c23cc <_ZNKSt9type_infoeqERKS_>
   c2342:	b190      	cbz	r0, c236a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c2344:	2d00      	cmp	r5, #0
   c2346:	6034      	str	r4, [r6, #0]
   c2348:	7137      	strb	r7, [r6, #4]
   c234a:	db09      	blt.n	c2360 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c234c:	1961      	adds	r1, r4, r5
   c234e:	458a      	cmp	sl, r1
   c2350:	bf0c      	ite	eq
   c2352:	2106      	moveq	r1, #6
   c2354:	2101      	movne	r1, #1
   c2356:	71b1      	strb	r1, [r6, #6]
   c2358:	2000      	movs	r0, #0
   c235a:	b001      	add	sp, #4
   c235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2360:	3502      	adds	r5, #2
   c2362:	d1f9      	bne.n	c2358 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c2364:	2301      	movs	r3, #1
   c2366:	71b3      	strb	r3, [r6, #6]
   c2368:	e7f6      	b.n	c2358 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c236a:	4554      	cmp	r4, sl
   c236c:	d106      	bne.n	c237c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c236e:	4659      	mov	r1, fp
   c2370:	4648      	mov	r0, r9
   c2372:	f000 f82b 	bl	c23cc <_ZNKSt9type_infoeqERKS_>
   c2376:	b108      	cbz	r0, c237c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c2378:	7177      	strb	r7, [r6, #5]
   c237a:	e7ed      	b.n	c2358 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c237c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c2380:	6803      	ldr	r3, [r0, #0]
   c2382:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c2386:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c238a:	69dc      	ldr	r4, [r3, #28]
   c238c:	463a      	mov	r2, r7
   c238e:	4643      	mov	r3, r8
   c2390:	4629      	mov	r1, r5
   c2392:	46a4      	mov	ip, r4
   c2394:	b001      	add	sp, #4
   c2396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c239a:	4760      	bx	ip

000c239c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c239c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c23a0:	4607      	mov	r7, r0
   c23a2:	460c      	mov	r4, r1
   c23a4:	4615      	mov	r5, r2
   c23a6:	461e      	mov	r6, r3
   c23a8:	f7ff ff6d 	bl	c2286 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c23ac:	b948      	cbnz	r0, c23c2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c23ae:	68b8      	ldr	r0, [r7, #8]
   c23b0:	6803      	ldr	r3, [r0, #0]
   c23b2:	699f      	ldr	r7, [r3, #24]
   c23b4:	462a      	mov	r2, r5
   c23b6:	4633      	mov	r3, r6
   c23b8:	4621      	mov	r1, r4
   c23ba:	46bc      	mov	ip, r7
   c23bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c23c0:	4760      	bx	ip
   c23c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c23c6 <_ZNSt9type_infoD1Ev>:
   c23c6:	4770      	bx	lr

000c23c8 <_ZNKSt9type_info14__is_pointer_pEv>:
   c23c8:	2000      	movs	r0, #0
   c23ca:	4770      	bx	lr

000c23cc <_ZNKSt9type_infoeqERKS_>:
   c23cc:	4281      	cmp	r1, r0
   c23ce:	b508      	push	{r3, lr}
   c23d0:	d00e      	beq.n	c23f0 <_ZNKSt9type_infoeqERKS_+0x24>
   c23d2:	6840      	ldr	r0, [r0, #4]
   c23d4:	7803      	ldrb	r3, [r0, #0]
   c23d6:	2b2a      	cmp	r3, #42	; 0x2a
   c23d8:	d00c      	beq.n	c23f4 <_ZNKSt9type_infoeqERKS_+0x28>
   c23da:	6849      	ldr	r1, [r1, #4]
   c23dc:	780b      	ldrb	r3, [r1, #0]
   c23de:	2b2a      	cmp	r3, #42	; 0x2a
   c23e0:	bf08      	it	eq
   c23e2:	3101      	addeq	r1, #1
   c23e4:	f002 f974 	bl	c46d0 <strcmp>
   c23e8:	fab0 f080 	clz	r0, r0
   c23ec:	0940      	lsrs	r0, r0, #5
   c23ee:	bd08      	pop	{r3, pc}
   c23f0:	2001      	movs	r0, #1
   c23f2:	e7fc      	b.n	c23ee <_ZNKSt9type_infoeqERKS_+0x22>
   c23f4:	2000      	movs	r0, #0
   c23f6:	e7fa      	b.n	c23ee <_ZNKSt9type_infoeqERKS_+0x22>

000c23f8 <cosf>:
   c23f8:	ee10 3a10 	vmov	r3, s0
   c23fc:	4a18      	ldr	r2, [pc, #96]	; (c2460 <cosf+0x68>)
   c23fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2402:	4293      	cmp	r3, r2
   c2404:	dd1b      	ble.n	c243e <cosf+0x46>
   c2406:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c240a:	db02      	blt.n	c2412 <cosf+0x1a>
   c240c:	ee30 0a40 	vsub.f32	s0, s0, s0
   c2410:	4770      	bx	lr
   c2412:	b500      	push	{lr}
   c2414:	b083      	sub	sp, #12
   c2416:	4668      	mov	r0, sp
   c2418:	f000 fb10 	bl	c2a3c <__ieee754_rem_pio2f>
   c241c:	f000 0003 	and.w	r0, r0, #3
   c2420:	2801      	cmp	r0, #1
   c2422:	eddd 0a01 	vldr	s1, [sp, #4]
   c2426:	ed9d 0a00 	vldr	s0, [sp]
   c242a:	d00c      	beq.n	c2446 <cosf+0x4e>
   c242c:	2802      	cmp	r0, #2
   c242e:	d012      	beq.n	c2456 <cosf+0x5e>
   c2430:	b170      	cbz	r0, c2450 <cosf+0x58>
   c2432:	2001      	movs	r0, #1
   c2434:	f000 fff4 	bl	c3420 <__kernel_sinf>
   c2438:	b003      	add	sp, #12
   c243a:	f85d fb04 	ldr.w	pc, [sp], #4
   c243e:	eddf 0a09 	vldr	s1, [pc, #36]	; c2464 <cosf+0x6c>
   c2442:	f000 bc31 	b.w	c2ca8 <__kernel_cosf>
   c2446:	f000 ffeb 	bl	c3420 <__kernel_sinf>
   c244a:	eeb1 0a40 	vneg.f32	s0, s0
   c244e:	e7f3      	b.n	c2438 <cosf+0x40>
   c2450:	f000 fc2a 	bl	c2ca8 <__kernel_cosf>
   c2454:	e7f0      	b.n	c2438 <cosf+0x40>
   c2456:	f000 fc27 	bl	c2ca8 <__kernel_cosf>
   c245a:	eeb1 0a40 	vneg.f32	s0, s0
   c245e:	e7eb      	b.n	c2438 <cosf+0x40>
   c2460:	3f490fd8 	.word	0x3f490fd8
   c2464:	00000000 	.word	0x00000000

000c2468 <sinf>:
   c2468:	ee10 3a10 	vmov	r3, s0
   c246c:	4a19      	ldr	r2, [pc, #100]	; (c24d4 <sinf+0x6c>)
   c246e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2472:	4293      	cmp	r3, r2
   c2474:	dd1c      	ble.n	c24b0 <sinf+0x48>
   c2476:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c247a:	db02      	blt.n	c2482 <sinf+0x1a>
   c247c:	ee30 0a40 	vsub.f32	s0, s0, s0
   c2480:	4770      	bx	lr
   c2482:	b500      	push	{lr}
   c2484:	b083      	sub	sp, #12
   c2486:	4668      	mov	r0, sp
   c2488:	f000 fad8 	bl	c2a3c <__ieee754_rem_pio2f>
   c248c:	f000 0003 	and.w	r0, r0, #3
   c2490:	2801      	cmp	r0, #1
   c2492:	eddd 0a01 	vldr	s1, [sp, #4]
   c2496:	ed9d 0a00 	vldr	s0, [sp]
   c249a:	d00e      	beq.n	c24ba <sinf+0x52>
   c249c:	2802      	cmp	r0, #2
   c249e:	d013      	beq.n	c24c8 <sinf+0x60>
   c24a0:	b170      	cbz	r0, c24c0 <sinf+0x58>
   c24a2:	f000 fc01 	bl	c2ca8 <__kernel_cosf>
   c24a6:	eeb1 0a40 	vneg.f32	s0, s0
   c24aa:	b003      	add	sp, #12
   c24ac:	f85d fb04 	ldr.w	pc, [sp], #4
   c24b0:	eddf 0a09 	vldr	s1, [pc, #36]	; c24d8 <sinf+0x70>
   c24b4:	2000      	movs	r0, #0
   c24b6:	f000 bfb3 	b.w	c3420 <__kernel_sinf>
   c24ba:	f000 fbf5 	bl	c2ca8 <__kernel_cosf>
   c24be:	e7f4      	b.n	c24aa <sinf+0x42>
   c24c0:	2001      	movs	r0, #1
   c24c2:	f000 ffad 	bl	c3420 <__kernel_sinf>
   c24c6:	e7f0      	b.n	c24aa <sinf+0x42>
   c24c8:	2001      	movs	r0, #1
   c24ca:	f000 ffa9 	bl	c3420 <__kernel_sinf>
   c24ce:	eeb1 0a40 	vneg.f32	s0, s0
   c24d2:	e7ea      	b.n	c24aa <sinf+0x42>
   c24d4:	3f490fd8 	.word	0x3f490fd8
   c24d8:	00000000 	.word	0x00000000

000c24dc <atan2>:
   c24dc:	f000 b864 	b.w	c25a8 <__ieee754_atan2>

000c24e0 <sqrt>:
   c24e0:	b538      	push	{r3, r4, r5, lr}
   c24e2:	ed2d 8b02 	vpush	{d8}
   c24e6:	ec55 4b10 	vmov	r4, r5, d0
   c24ea:	f000 f933 	bl	c2754 <__ieee754_sqrt>
   c24ee:	4b18      	ldr	r3, [pc, #96]	; (c2550 <sqrt+0x70>)
   c24f0:	eeb0 8a40 	vmov.f32	s16, s0
   c24f4:	eef0 8a60 	vmov.f32	s17, s1
   c24f8:	f993 3000 	ldrsb.w	r3, [r3]
   c24fc:	3301      	adds	r3, #1
   c24fe:	d00d      	beq.n	c251c <sqrt+0x3c>
   c2500:	4622      	mov	r2, r4
   c2502:	462b      	mov	r3, r5
   c2504:	4620      	mov	r0, r4
   c2506:	4629      	mov	r1, r5
   c2508:	f001 ff6c 	bl	c43e4 <__aeabi_dcmpun>
   c250c:	b930      	cbnz	r0, c251c <sqrt+0x3c>
   c250e:	2200      	movs	r2, #0
   c2510:	2300      	movs	r3, #0
   c2512:	4620      	mov	r0, r4
   c2514:	4629      	mov	r1, r5
   c2516:	f001 ff3d 	bl	c4394 <__aeabi_dcmplt>
   c251a:	b930      	cbnz	r0, c252a <sqrt+0x4a>
   c251c:	eeb0 0a48 	vmov.f32	s0, s16
   c2520:	eef0 0a68 	vmov.f32	s1, s17
   c2524:	ecbd 8b02 	vpop	{d8}
   c2528:	bd38      	pop	{r3, r4, r5, pc}
   c252a:	f7fb ff43 	bl	be3b4 <__errno>
   c252e:	2200      	movs	r2, #0
   c2530:	2300      	movs	r3, #0
   c2532:	2121      	movs	r1, #33	; 0x21
   c2534:	6001      	str	r1, [r0, #0]
   c2536:	4610      	mov	r0, r2
   c2538:	4619      	mov	r1, r3
   c253a:	f001 fde3 	bl	c4104 <__aeabi_ddiv>
   c253e:	ec41 0b18 	vmov	d8, r0, r1
   c2542:	eeb0 0a48 	vmov.f32	s0, s16
   c2546:	eef0 0a68 	vmov.f32	s1, s17
   c254a:	ecbd 8b02 	vpop	{d8}
   c254e:	bd38      	pop	{r3, r4, r5, pc}
   c2550:	2003db4c 	.word	0x2003db4c

000c2554 <atan2f>:
   c2554:	f000 b9ca 	b.w	c28ec <__ieee754_atan2f>

000c2558 <sqrtf>:
   c2558:	b508      	push	{r3, lr}
   c255a:	ed2d 8b02 	vpush	{d8}
   c255e:	eeb0 8a40 	vmov.f32	s16, s0
   c2562:	f000 fb9d 	bl	c2ca0 <__ieee754_sqrtf>
   c2566:	4b0e      	ldr	r3, [pc, #56]	; (c25a0 <sqrtf+0x48>)
   c2568:	f993 3000 	ldrsb.w	r3, [r3]
   c256c:	3301      	adds	r3, #1
   c256e:	d00b      	beq.n	c2588 <sqrtf+0x30>
   c2570:	eeb4 8a48 	vcmp.f32	s16, s16
   c2574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2578:	d606      	bvs.n	c2588 <sqrtf+0x30>
   c257a:	eddf 8a0a 	vldr	s17, [pc, #40]	; c25a4 <sqrtf+0x4c>
   c257e:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c2582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2586:	d402      	bmi.n	c258e <sqrtf+0x36>
   c2588:	ecbd 8b02 	vpop	{d8}
   c258c:	bd08      	pop	{r3, pc}
   c258e:	f7fb ff11 	bl	be3b4 <__errno>
   c2592:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c2596:	ecbd 8b02 	vpop	{d8}
   c259a:	2321      	movs	r3, #33	; 0x21
   c259c:	6003      	str	r3, [r0, #0]
   c259e:	bd08      	pop	{r3, pc}
   c25a0:	2003db4c 	.word	0x2003db4c
   c25a4:	00000000 	.word	0x00000000

000c25a8 <__ieee754_atan2>:
   c25a8:	ec51 0b11 	vmov	r0, r1, d1
   c25ac:	4243      	negs	r3, r0
   c25ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c25b2:	4303      	orrs	r3, r0
   c25b4:	4e64      	ldr	r6, [pc, #400]	; (c2748 <__ieee754_atan2+0x1a0>)
   c25b6:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c25ba:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c25be:	42b3      	cmp	r3, r6
   c25c0:	ec55 4b10 	vmov	r4, r5, d0
   c25c4:	d83e      	bhi.n	c2644 <__ieee754_atan2+0x9c>
   c25c6:	4263      	negs	r3, r4
   c25c8:	4323      	orrs	r3, r4
   c25ca:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c25ce:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c25d2:	42b3      	cmp	r3, r6
   c25d4:	46a9      	mov	r9, r5
   c25d6:	d835      	bhi.n	c2644 <__ieee754_atan2+0x9c>
   c25d8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c25dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c25e0:	4303      	orrs	r3, r0
   c25e2:	d03e      	beq.n	c2662 <__ieee754_atan2+0xba>
   c25e4:	178f      	asrs	r7, r1, #30
   c25e6:	f007 0702 	and.w	r7, r7, #2
   c25ea:	ea5a 0304 	orrs.w	r3, sl, r4
   c25ee:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c25f2:	d02f      	beq.n	c2654 <__ieee754_atan2+0xac>
   c25f4:	ea5e 0300 	orrs.w	r3, lr, r0
   c25f8:	d037      	beq.n	c266a <__ieee754_atan2+0xc2>
   c25fa:	45b6      	cmp	lr, r6
   c25fc:	d044      	beq.n	c2688 <__ieee754_atan2+0xe0>
   c25fe:	45b2      	cmp	sl, r6
   c2600:	d033      	beq.n	c266a <__ieee754_atan2+0xc2>
   c2602:	ebaa 0e0e 	sub.w	lr, sl, lr
   c2606:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c260a:	ea4f 532e 	mov.w	r3, lr, asr #20
   c260e:	da38      	bge.n	c2682 <__ieee754_atan2+0xda>
   c2610:	2900      	cmp	r1, #0
   c2612:	da45      	bge.n	c26a0 <__ieee754_atan2+0xf8>
   c2614:	333c      	adds	r3, #60	; 0x3c
   c2616:	da43      	bge.n	c26a0 <__ieee754_atan2+0xf8>
   c2618:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c2710 <__ieee754_atan2+0x168>
   c261c:	2f01      	cmp	r7, #1
   c261e:	d05d      	beq.n	c26dc <__ieee754_atan2+0x134>
   c2620:	2f02      	cmp	r7, #2
   c2622:	d04a      	beq.n	c26ba <__ieee754_atan2+0x112>
   c2624:	b1a7      	cbz	r7, c2650 <__ieee754_atan2+0xa8>
   c2626:	ec51 0b10 	vmov	r0, r1, d0
   c262a:	a33b      	add	r3, pc, #236	; (adr r3, c2718 <__ieee754_atan2+0x170>)
   c262c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2630:	f001 fa86 	bl	c3b40 <__aeabi_dsub>
   c2634:	a33a      	add	r3, pc, #232	; (adr r3, c2720 <__ieee754_atan2+0x178>)
   c2636:	e9d3 2300 	ldrd	r2, r3, [r3]
   c263a:	f001 fa81 	bl	c3b40 <__aeabi_dsub>
   c263e:	ec41 0b10 	vmov	d0, r0, r1
   c2642:	e005      	b.n	c2650 <__ieee754_atan2+0xa8>
   c2644:	4622      	mov	r2, r4
   c2646:	462b      	mov	r3, r5
   c2648:	f001 fa7c 	bl	c3b44 <__adddf3>
   c264c:	ec41 0b10 	vmov	d0, r0, r1
   c2650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2654:	2f02      	cmp	r7, #2
   c2656:	d00e      	beq.n	c2676 <__ieee754_atan2+0xce>
   c2658:	2f03      	cmp	r7, #3
   c265a:	d1f9      	bne.n	c2650 <__ieee754_atan2+0xa8>
   c265c:	ed9f 0b32 	vldr	d0, [pc, #200]	; c2728 <__ieee754_atan2+0x180>
   c2660:	e7f6      	b.n	c2650 <__ieee754_atan2+0xa8>
   c2662:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2666:	f000 bf23 	b.w	c34b0 <atan>
   c266a:	f1b9 0f00 	cmp.w	r9, #0
   c266e:	db05      	blt.n	c267c <__ieee754_atan2+0xd4>
   c2670:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c2730 <__ieee754_atan2+0x188>
   c2674:	e7ec      	b.n	c2650 <__ieee754_atan2+0xa8>
   c2676:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c2720 <__ieee754_atan2+0x178>
   c267a:	e7e9      	b.n	c2650 <__ieee754_atan2+0xa8>
   c267c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c2738 <__ieee754_atan2+0x190>
   c2680:	e7e6      	b.n	c2650 <__ieee754_atan2+0xa8>
   c2682:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c2730 <__ieee754_atan2+0x188>
   c2686:	e7c9      	b.n	c261c <__ieee754_atan2+0x74>
   c2688:	45f2      	cmp	sl, lr
   c268a:	f107 37ff 	add.w	r7, r7, #4294967295
   c268e:	d02e      	beq.n	c26ee <__ieee754_atan2+0x146>
   c2690:	2f02      	cmp	r7, #2
   c2692:	d834      	bhi.n	c26fe <__ieee754_atan2+0x156>
   c2694:	4b2d      	ldr	r3, [pc, #180]	; (c274c <__ieee754_atan2+0x1a4>)
   c2696:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c269a:	ed97 0b00 	vldr	d0, [r7]
   c269e:	e7d7      	b.n	c2650 <__ieee754_atan2+0xa8>
   c26a0:	4602      	mov	r2, r0
   c26a2:	460b      	mov	r3, r1
   c26a4:	4620      	mov	r0, r4
   c26a6:	4629      	mov	r1, r5
   c26a8:	f001 fd2c 	bl	c4104 <__aeabi_ddiv>
   c26ac:	ec41 0b10 	vmov	d0, r0, r1
   c26b0:	f001 f89e 	bl	c37f0 <fabs>
   c26b4:	f000 fefc 	bl	c34b0 <atan>
   c26b8:	e7b0      	b.n	c261c <__ieee754_atan2+0x74>
   c26ba:	a317      	add	r3, pc, #92	; (adr r3, c2718 <__ieee754_atan2+0x170>)
   c26bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c26c0:	ec51 0b10 	vmov	r0, r1, d0
   c26c4:	f001 fa3c 	bl	c3b40 <__aeabi_dsub>
   c26c8:	4602      	mov	r2, r0
   c26ca:	460b      	mov	r3, r1
   c26cc:	a114      	add	r1, pc, #80	; (adr r1, c2720 <__ieee754_atan2+0x178>)
   c26ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   c26d2:	f001 fa35 	bl	c3b40 <__aeabi_dsub>
   c26d6:	ec41 0b10 	vmov	d0, r0, r1
   c26da:	e7b9      	b.n	c2650 <__ieee754_atan2+0xa8>
   c26dc:	ee10 1a90 	vmov	r1, s1
   c26e0:	ec53 2b10 	vmov	r2, r3, d0
   c26e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c26e8:	ec43 2b10 	vmov	d0, r2, r3
   c26ec:	e7b0      	b.n	c2650 <__ieee754_atan2+0xa8>
   c26ee:	2f02      	cmp	r7, #2
   c26f0:	d808      	bhi.n	c2704 <__ieee754_atan2+0x15c>
   c26f2:	4b17      	ldr	r3, [pc, #92]	; (c2750 <__ieee754_atan2+0x1a8>)
   c26f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c26f8:	ed97 0b00 	vldr	d0, [r7]
   c26fc:	e7a8      	b.n	c2650 <__ieee754_atan2+0xa8>
   c26fe:	ed9f 0b04 	vldr	d0, [pc, #16]	; c2710 <__ieee754_atan2+0x168>
   c2702:	e7a5      	b.n	c2650 <__ieee754_atan2+0xa8>
   c2704:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c2740 <__ieee754_atan2+0x198>
   c2708:	e7a2      	b.n	c2650 <__ieee754_atan2+0xa8>
   c270a:	bf00      	nop
   c270c:	f3af 8000 	nop.w
	...
   c2718:	33145c07 	.word	0x33145c07
   c271c:	3ca1a626 	.word	0x3ca1a626
   c2720:	54442d18 	.word	0x54442d18
   c2724:	400921fb 	.word	0x400921fb
   c2728:	54442d18 	.word	0x54442d18
   c272c:	c00921fb 	.word	0xc00921fb
   c2730:	54442d18 	.word	0x54442d18
   c2734:	3ff921fb 	.word	0x3ff921fb
   c2738:	54442d18 	.word	0x54442d18
   c273c:	bff921fb 	.word	0xbff921fb
   c2740:	54442d18 	.word	0x54442d18
   c2744:	3fe921fb 	.word	0x3fe921fb
   c2748:	7ff00000 	.word	0x7ff00000
   c274c:	000c8238 	.word	0x000c8238
   c2750:	000c8220 	.word	0x000c8220

000c2754 <__ieee754_sqrt>:
   c2754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2758:	4a63      	ldr	r2, [pc, #396]	; (c28e8 <__ieee754_sqrt+0x194>)
   c275a:	ec55 4b10 	vmov	r4, r5, d0
   c275e:	43aa      	bics	r2, r5
   c2760:	f000 809f 	beq.w	c28a2 <__ieee754_sqrt+0x14e>
   c2764:	2d00      	cmp	r5, #0
   c2766:	ee10 ca10 	vmov	ip, s0
   c276a:	462b      	mov	r3, r5
   c276c:	dd54      	ble.n	c2818 <__ieee754_sqrt+0xc4>
   c276e:	1529      	asrs	r1, r5, #20
   c2770:	d063      	beq.n	c283a <__ieee754_sqrt+0xe6>
   c2772:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c2776:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c277a:	07c9      	lsls	r1, r1, #31
   c277c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c2780:	d404      	bmi.n	c278c <__ieee754_sqrt+0x38>
   c2782:	005b      	lsls	r3, r3, #1
   c2784:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c2788:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c278c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c2790:	2600      	movs	r6, #0
   c2792:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c2796:	107f      	asrs	r7, r7, #1
   c2798:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c279c:	f04f 0e16 	mov.w	lr, #22
   c27a0:	4634      	mov	r4, r6
   c27a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c27a6:	18a1      	adds	r1, r4, r2
   c27a8:	4299      	cmp	r1, r3
   c27aa:	dc02      	bgt.n	c27b2 <__ieee754_sqrt+0x5e>
   c27ac:	1a5b      	subs	r3, r3, r1
   c27ae:	188c      	adds	r4, r1, r2
   c27b0:	4416      	add	r6, r2
   c27b2:	005b      	lsls	r3, r3, #1
   c27b4:	f1be 0e01 	subs.w	lr, lr, #1
   c27b8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c27bc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c27c0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c27c4:	d1ef      	bne.n	c27a6 <__ieee754_sqrt+0x52>
   c27c6:	4675      	mov	r5, lr
   c27c8:	2020      	movs	r0, #32
   c27ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c27ce:	e00a      	b.n	c27e6 <__ieee754_sqrt+0x92>
   c27d0:	d044      	beq.n	c285c <__ieee754_sqrt+0x108>
   c27d2:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c27d6:	3801      	subs	r0, #1
   c27d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c27dc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c27e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c27e4:	d043      	beq.n	c286e <__ieee754_sqrt+0x11a>
   c27e6:	42a3      	cmp	r3, r4
   c27e8:	eb02 010e 	add.w	r1, r2, lr
   c27ec:	ddf0      	ble.n	c27d0 <__ieee754_sqrt+0x7c>
   c27ee:	2900      	cmp	r1, #0
   c27f0:	eb01 0e02 	add.w	lr, r1, r2
   c27f4:	db0a      	blt.n	c280c <__ieee754_sqrt+0xb8>
   c27f6:	46a0      	mov	r8, r4
   c27f8:	1b1b      	subs	r3, r3, r4
   c27fa:	4561      	cmp	r1, ip
   c27fc:	bf88      	it	hi
   c27fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
   c2802:	ebac 0c01 	sub.w	ip, ip, r1
   c2806:	4415      	add	r5, r2
   c2808:	4644      	mov	r4, r8
   c280a:	e7e2      	b.n	c27d2 <__ieee754_sqrt+0x7e>
   c280c:	f1be 0f00 	cmp.w	lr, #0
   c2810:	dbf1      	blt.n	c27f6 <__ieee754_sqrt+0xa2>
   c2812:	f104 0801 	add.w	r8, r4, #1
   c2816:	e7ef      	b.n	c27f8 <__ieee754_sqrt+0xa4>
   c2818:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c281c:	4322      	orrs	r2, r4
   c281e:	d038      	beq.n	c2892 <__ieee754_sqrt+0x13e>
   c2820:	2d00      	cmp	r5, #0
   c2822:	d14e      	bne.n	c28c2 <__ieee754_sqrt+0x16e>
   c2824:	4629      	mov	r1, r5
   c2826:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c282a:	3915      	subs	r1, #21
   c282c:	4613      	mov	r3, r2
   c282e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c2832:	2a00      	cmp	r2, #0
   c2834:	d0f7      	beq.n	c2826 <__ieee754_sqrt+0xd2>
   c2836:	02d6      	lsls	r6, r2, #11
   c2838:	d450      	bmi.n	c28dc <__ieee754_sqrt+0x188>
   c283a:	2000      	movs	r0, #0
   c283c:	005b      	lsls	r3, r3, #1
   c283e:	02dd      	lsls	r5, r3, #11
   c2840:	4604      	mov	r4, r0
   c2842:	f100 0001 	add.w	r0, r0, #1
   c2846:	d5f9      	bpl.n	c283c <__ieee754_sqrt+0xe8>
   c2848:	461a      	mov	r2, r3
   c284a:	4663      	mov	r3, ip
   c284c:	fa0c fc00 	lsl.w	ip, ip, r0
   c2850:	f1c0 0020 	rsb	r0, r0, #32
   c2854:	40c3      	lsrs	r3, r0
   c2856:	1b09      	subs	r1, r1, r4
   c2858:	4313      	orrs	r3, r2
   c285a:	e78a      	b.n	c2772 <__ieee754_sqrt+0x1e>
   c285c:	4561      	cmp	r1, ip
   c285e:	d8b8      	bhi.n	c27d2 <__ieee754_sqrt+0x7e>
   c2860:	2900      	cmp	r1, #0
   c2862:	eb01 0e02 	add.w	lr, r1, r2
   c2866:	dbd1      	blt.n	c280c <__ieee754_sqrt+0xb8>
   c2868:	4698      	mov	r8, r3
   c286a:	2300      	movs	r3, #0
   c286c:	e7c9      	b.n	c2802 <__ieee754_sqrt+0xae>
   c286e:	ea53 030c 	orrs.w	r3, r3, ip
   c2872:	d110      	bne.n	c2896 <__ieee754_sqrt+0x142>
   c2874:	0868      	lsrs	r0, r5, #1
   c2876:	1071      	asrs	r1, r6, #1
   c2878:	07f3      	lsls	r3, r6, #31
   c287a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c287e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c2882:	bf48      	it	mi
   c2884:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c2888:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c288c:	4602      	mov	r2, r0
   c288e:	ec43 2b10 	vmov	d0, r2, r3
   c2892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2896:	1c6a      	adds	r2, r5, #1
   c2898:	bf16      	itet	ne
   c289a:	1c68      	addne	r0, r5, #1
   c289c:	3601      	addeq	r6, #1
   c289e:	0840      	lsrne	r0, r0, #1
   c28a0:	e7e9      	b.n	c2876 <__ieee754_sqrt+0x122>
   c28a2:	ee10 2a10 	vmov	r2, s0
   c28a6:	ee10 0a10 	vmov	r0, s0
   c28aa:	462b      	mov	r3, r5
   c28ac:	4629      	mov	r1, r5
   c28ae:	f001 faff 	bl	c3eb0 <__aeabi_dmul>
   c28b2:	4622      	mov	r2, r4
   c28b4:	462b      	mov	r3, r5
   c28b6:	f001 f945 	bl	c3b44 <__adddf3>
   c28ba:	ec41 0b10 	vmov	d0, r0, r1
   c28be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c28c2:	ee10 2a10 	vmov	r2, s0
   c28c6:	4620      	mov	r0, r4
   c28c8:	4629      	mov	r1, r5
   c28ca:	f001 f939 	bl	c3b40 <__aeabi_dsub>
   c28ce:	4602      	mov	r2, r0
   c28d0:	460b      	mov	r3, r1
   c28d2:	f001 fc17 	bl	c4104 <__aeabi_ddiv>
   c28d6:	ec41 0b10 	vmov	d0, r0, r1
   c28da:	e7da      	b.n	c2892 <__ieee754_sqrt+0x13e>
   c28dc:	4663      	mov	r3, ip
   c28de:	2020      	movs	r0, #32
   c28e0:	f04f 34ff 	mov.w	r4, #4294967295
   c28e4:	e7b6      	b.n	c2854 <__ieee754_sqrt+0x100>
   c28e6:	bf00      	nop
   c28e8:	7ff00000 	.word	0x7ff00000

000c28ec <__ieee754_atan2f>:
   c28ec:	b510      	push	{r4, lr}
   c28ee:	b082      	sub	sp, #8
   c28f0:	edcd 0a01 	vstr	s1, [sp, #4]
   c28f4:	9b01      	ldr	r3, [sp, #4]
   c28f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c28fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c28fe:	eef0 7a40 	vmov.f32	s15, s0
   c2902:	dc30      	bgt.n	c2966 <__ieee754_atan2f+0x7a>
   c2904:	ee10 0a10 	vmov	r0, s0
   c2908:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c290c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2910:	dc29      	bgt.n	c2966 <__ieee754_atan2f+0x7a>
   c2912:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c2916:	d042      	beq.n	c299e <__ieee754_atan2f+0xb2>
   c2918:	179c      	asrs	r4, r3, #30
   c291a:	f004 0402 	and.w	r4, r4, #2
   c291e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c2922:	b331      	cbz	r1, c2972 <__ieee754_atan2f+0x86>
   c2924:	b37a      	cbz	r2, c2986 <__ieee754_atan2f+0x9a>
   c2926:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c292a:	d040      	beq.n	c29ae <__ieee754_atan2f+0xc2>
   c292c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2930:	d029      	beq.n	c2986 <__ieee754_atan2f+0x9a>
   c2932:	1a8a      	subs	r2, r1, r2
   c2934:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c2938:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c293c:	da34      	bge.n	c29a8 <__ieee754_atan2f+0xbc>
   c293e:	2b00      	cmp	r3, #0
   c2940:	da42      	bge.n	c29c8 <__ieee754_atan2f+0xdc>
   c2942:	313c      	adds	r1, #60	; 0x3c
   c2944:	da40      	bge.n	c29c8 <__ieee754_atan2f+0xdc>
   c2946:	ed9f 0a34 	vldr	s0, [pc, #208]	; c2a18 <__ieee754_atan2f+0x12c>
   c294a:	2c01      	cmp	r4, #1
   c294c:	d04e      	beq.n	c29ec <__ieee754_atan2f+0x100>
   c294e:	2c02      	cmp	r4, #2
   c2950:	d043      	beq.n	c29da <__ieee754_atan2f+0xee>
   c2952:	b164      	cbz	r4, c296e <__ieee754_atan2f+0x82>
   c2954:	ed9f 7a31 	vldr	s14, [pc, #196]	; c2a1c <__ieee754_atan2f+0x130>
   c2958:	eddf 7a31 	vldr	s15, [pc, #196]	; c2a20 <__ieee754_atan2f+0x134>
   c295c:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2960:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2964:	e003      	b.n	c296e <__ieee754_atan2f+0x82>
   c2966:	ed9d 7a01 	vldr	s14, [sp, #4]
   c296a:	ee37 0a27 	vadd.f32	s0, s14, s15
   c296e:	b002      	add	sp, #8
   c2970:	bd10      	pop	{r4, pc}
   c2972:	2c02      	cmp	r4, #2
   c2974:	d010      	beq.n	c2998 <__ieee754_atan2f+0xac>
   c2976:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c2a24 <__ieee754_atan2f+0x138>
   c297a:	2c03      	cmp	r4, #3
   c297c:	bf18      	it	ne
   c297e:	eeb0 0a67 	vmovne.f32	s0, s15
   c2982:	b002      	add	sp, #8
   c2984:	bd10      	pop	{r4, pc}
   c2986:	ed9f 0a28 	vldr	s0, [pc, #160]	; c2a28 <__ieee754_atan2f+0x13c>
   c298a:	eddf 7a28 	vldr	s15, [pc, #160]	; c2a2c <__ieee754_atan2f+0x140>
   c298e:	2800      	cmp	r0, #0
   c2990:	bfb8      	it	lt
   c2992:	eeb0 0a67 	vmovlt.f32	s0, s15
   c2996:	e7ea      	b.n	c296e <__ieee754_atan2f+0x82>
   c2998:	ed9f 0a21 	vldr	s0, [pc, #132]	; c2a20 <__ieee754_atan2f+0x134>
   c299c:	e7e7      	b.n	c296e <__ieee754_atan2f+0x82>
   c299e:	b002      	add	sp, #8
   c29a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c29a4:	f000 bf2e 	b.w	c3804 <atanf>
   c29a8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c2a28 <__ieee754_atan2f+0x13c>
   c29ac:	e7cd      	b.n	c294a <__ieee754_atan2f+0x5e>
   c29ae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c29b2:	f104 34ff 	add.w	r4, r4, #4294967295
   c29b6:	d020      	beq.n	c29fa <__ieee754_atan2f+0x10e>
   c29b8:	2c02      	cmp	r4, #2
   c29ba:	d826      	bhi.n	c2a0a <__ieee754_atan2f+0x11e>
   c29bc:	4b1c      	ldr	r3, [pc, #112]	; (c2a30 <__ieee754_atan2f+0x144>)
   c29be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c29c2:	ed94 0a00 	vldr	s0, [r4]
   c29c6:	e7d2      	b.n	c296e <__ieee754_atan2f+0x82>
   c29c8:	ed9d 7a01 	vldr	s14, [sp, #4]
   c29cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c29d0:	f000 fff2 	bl	c39b8 <fabsf>
   c29d4:	f000 ff16 	bl	c3804 <atanf>
   c29d8:	e7b7      	b.n	c294a <__ieee754_atan2f+0x5e>
   c29da:	ed9f 7a10 	vldr	s14, [pc, #64]	; c2a1c <__ieee754_atan2f+0x130>
   c29de:	eddf 7a10 	vldr	s15, [pc, #64]	; c2a20 <__ieee754_atan2f+0x134>
   c29e2:	ee30 0a07 	vadd.f32	s0, s0, s14
   c29e6:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c29ea:	e7c0      	b.n	c296e <__ieee754_atan2f+0x82>
   c29ec:	ee10 3a10 	vmov	r3, s0
   c29f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c29f4:	ee00 3a10 	vmov	s0, r3
   c29f8:	e7b9      	b.n	c296e <__ieee754_atan2f+0x82>
   c29fa:	2c02      	cmp	r4, #2
   c29fc:	d808      	bhi.n	c2a10 <__ieee754_atan2f+0x124>
   c29fe:	4b0d      	ldr	r3, [pc, #52]	; (c2a34 <__ieee754_atan2f+0x148>)
   c2a00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2a04:	ed94 0a00 	vldr	s0, [r4]
   c2a08:	e7b1      	b.n	c296e <__ieee754_atan2f+0x82>
   c2a0a:	ed9f 0a03 	vldr	s0, [pc, #12]	; c2a18 <__ieee754_atan2f+0x12c>
   c2a0e:	e7ae      	b.n	c296e <__ieee754_atan2f+0x82>
   c2a10:	ed9f 0a09 	vldr	s0, [pc, #36]	; c2a38 <__ieee754_atan2f+0x14c>
   c2a14:	e7ab      	b.n	c296e <__ieee754_atan2f+0x82>
   c2a16:	bf00      	nop
   c2a18:	00000000 	.word	0x00000000
   c2a1c:	33bbbd2e 	.word	0x33bbbd2e
   c2a20:	40490fdb 	.word	0x40490fdb
   c2a24:	c0490fdb 	.word	0xc0490fdb
   c2a28:	3fc90fdb 	.word	0x3fc90fdb
   c2a2c:	bfc90fdb 	.word	0xbfc90fdb
   c2a30:	000c825c 	.word	0x000c825c
   c2a34:	000c8250 	.word	0x000c8250
   c2a38:	3f490fdb 	.word	0x3f490fdb

000c2a3c <__ieee754_rem_pio2f>:
   c2a3c:	b570      	push	{r4, r5, r6, lr}
   c2a3e:	ee10 3a10 	vmov	r3, s0
   c2a42:	4a89      	ldr	r2, [pc, #548]	; (c2c68 <__ieee754_rem_pio2f+0x22c>)
   c2a44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c2a48:	4294      	cmp	r4, r2
   c2a4a:	b086      	sub	sp, #24
   c2a4c:	4605      	mov	r5, r0
   c2a4e:	dd70      	ble.n	c2b32 <__ieee754_rem_pio2f+0xf6>
   c2a50:	4a86      	ldr	r2, [pc, #536]	; (c2c6c <__ieee754_rem_pio2f+0x230>)
   c2a52:	4294      	cmp	r4, r2
   c2a54:	ee10 6a10 	vmov	r6, s0
   c2a58:	dc22      	bgt.n	c2aa0 <__ieee754_rem_pio2f+0x64>
   c2a5a:	2b00      	cmp	r3, #0
   c2a5c:	eddf 7a84 	vldr	s15, [pc, #528]	; c2c70 <__ieee754_rem_pio2f+0x234>
   c2a60:	4a84      	ldr	r2, [pc, #528]	; (c2c74 <__ieee754_rem_pio2f+0x238>)
   c2a62:	f024 040f 	bic.w	r4, r4, #15
   c2a66:	eeb0 7a40 	vmov.f32	s14, s0
   c2a6a:	f340 80e4 	ble.w	c2c36 <__ieee754_rem_pio2f+0x1fa>
   c2a6e:	4294      	cmp	r4, r2
   c2a70:	ee70 7a67 	vsub.f32	s15, s0, s15
   c2a74:	bf09      	itett	eq
   c2a76:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2c78 <__ieee754_rem_pio2f+0x23c>
   c2a7a:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2c7c <__ieee754_rem_pio2f+0x240>
   c2a7e:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2c80 <__ieee754_rem_pio2f+0x244>
   c2a82:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c2a86:	2001      	movs	r0, #1
   c2a88:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c2a8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2a90:	edc5 6a00 	vstr	s13, [r5]
   c2a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2a98:	edc5 7a01 	vstr	s15, [r5, #4]
   c2a9c:	b006      	add	sp, #24
   c2a9e:	bd70      	pop	{r4, r5, r6, pc}
   c2aa0:	4a78      	ldr	r2, [pc, #480]	; (c2c84 <__ieee754_rem_pio2f+0x248>)
   c2aa2:	4294      	cmp	r4, r2
   c2aa4:	dd54      	ble.n	c2b50 <__ieee754_rem_pio2f+0x114>
   c2aa6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2aaa:	da49      	bge.n	c2b40 <__ieee754_rem_pio2f+0x104>
   c2aac:	15e2      	asrs	r2, r4, #23
   c2aae:	3a86      	subs	r2, #134	; 0x86
   c2ab0:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c2ab4:	ee07 3a90 	vmov	s15, r3
   c2ab8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2abc:	eddf 6a72 	vldr	s13, [pc, #456]	; c2c88 <__ieee754_rem_pio2f+0x24c>
   c2ac0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2ac8:	ed8d 7a03 	vstr	s14, [sp, #12]
   c2acc:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2ad0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2ad4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2adc:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2ae0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2aec:	edcd 7a05 	vstr	s15, [sp, #20]
   c2af0:	f040 8090 	bne.w	c2c14 <__ieee754_rem_pio2f+0x1d8>
   c2af4:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c2af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2afc:	bf14      	ite	ne
   c2afe:	2302      	movne	r3, #2
   c2b00:	2301      	moveq	r3, #1
   c2b02:	4962      	ldr	r1, [pc, #392]	; (c2c8c <__ieee754_rem_pio2f+0x250>)
   c2b04:	9101      	str	r1, [sp, #4]
   c2b06:	2102      	movs	r1, #2
   c2b08:	9100      	str	r1, [sp, #0]
   c2b0a:	a803      	add	r0, sp, #12
   c2b0c:	4629      	mov	r1, r5
   c2b0e:	f000 f94d 	bl	c2dac <__kernel_rem_pio2f>
   c2b12:	2e00      	cmp	r6, #0
   c2b14:	dac2      	bge.n	c2a9c <__ieee754_rem_pio2f+0x60>
   c2b16:	ed95 7a00 	vldr	s14, [r5]
   c2b1a:	edd5 7a01 	vldr	s15, [r5, #4]
   c2b1e:	eeb1 7a47 	vneg.f32	s14, s14
   c2b22:	eef1 7a67 	vneg.f32	s15, s15
   c2b26:	ed85 7a00 	vstr	s14, [r5]
   c2b2a:	edc5 7a01 	vstr	s15, [r5, #4]
   c2b2e:	4240      	negs	r0, r0
   c2b30:	e7b4      	b.n	c2a9c <__ieee754_rem_pio2f+0x60>
   c2b32:	2200      	movs	r2, #0
   c2b34:	ed85 0a00 	vstr	s0, [r5]
   c2b38:	6042      	str	r2, [r0, #4]
   c2b3a:	2000      	movs	r0, #0
   c2b3c:	b006      	add	sp, #24
   c2b3e:	bd70      	pop	{r4, r5, r6, pc}
   c2b40:	ee70 7a40 	vsub.f32	s15, s0, s0
   c2b44:	2000      	movs	r0, #0
   c2b46:	edc5 7a01 	vstr	s15, [r5, #4]
   c2b4a:	edc5 7a00 	vstr	s15, [r5]
   c2b4e:	e7a5      	b.n	c2a9c <__ieee754_rem_pio2f+0x60>
   c2b50:	f000 ff32 	bl	c39b8 <fabsf>
   c2b54:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2c90 <__ieee754_rem_pio2f+0x254>
   c2b58:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2c70 <__ieee754_rem_pio2f+0x234>
   c2b5c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2b60:	eee0 7a07 	vfma.f32	s15, s0, s14
   c2b64:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2c7c <__ieee754_rem_pio2f+0x240>
   c2b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2b6c:	ee17 0a90 	vmov	r0, s15
   c2b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c2b74:	281f      	cmp	r0, #31
   c2b76:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2b7a:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2b7e:	eeb1 6a66 	vneg.f32	s12, s13
   c2b82:	dc1e      	bgt.n	c2bc2 <__ieee754_rem_pio2f+0x186>
   c2b84:	4a43      	ldr	r2, [pc, #268]	; (c2c94 <__ieee754_rem_pio2f+0x258>)
   c2b86:	1e41      	subs	r1, r0, #1
   c2b88:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2b8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2b90:	4293      	cmp	r3, r2
   c2b92:	d016      	beq.n	c2bc2 <__ieee754_rem_pio2f+0x186>
   c2b94:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2b98:	ed85 7a00 	vstr	s14, [r5]
   c2b9c:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2ba0:	2e00      	cmp	r6, #0
   c2ba2:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2ba6:	ed85 0a01 	vstr	s0, [r5, #4]
   c2baa:	f6bf af77 	bge.w	c2a9c <__ieee754_rem_pio2f+0x60>
   c2bae:	eeb1 7a47 	vneg.f32	s14, s14
   c2bb2:	eeb1 0a40 	vneg.f32	s0, s0
   c2bb6:	ed85 7a00 	vstr	s14, [r5]
   c2bba:	ed85 0a01 	vstr	s0, [r5, #4]
   c2bbe:	4240      	negs	r0, r0
   c2bc0:	e76c      	b.n	c2a9c <__ieee754_rem_pio2f+0x60>
   c2bc2:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2bc6:	15e2      	asrs	r2, r4, #23
   c2bc8:	ee17 3a10 	vmov	r3, s14
   c2bcc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2bd0:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c2bd4:	2c08      	cmp	r4, #8
   c2bd6:	dddf      	ble.n	c2b98 <__ieee754_rem_pio2f+0x15c>
   c2bd8:	eddf 7a27 	vldr	s15, [pc, #156]	; c2c78 <__ieee754_rem_pio2f+0x23c>
   c2bdc:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2c80 <__ieee754_rem_pio2f+0x244>
   c2be0:	eef0 5a40 	vmov.f32	s11, s0
   c2be4:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2be8:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2bec:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2bf0:	eef0 7a40 	vmov.f32	s15, s0
   c2bf4:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2bf8:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2bfc:	ee17 3a10 	vmov	r3, s14
   c2c00:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2c04:	1ad2      	subs	r2, r2, r3
   c2c06:	2a19      	cmp	r2, #25
   c2c08:	dc06      	bgt.n	c2c18 <__ieee754_rem_pio2f+0x1dc>
   c2c0a:	eeb0 0a65 	vmov.f32	s0, s11
   c2c0e:	ed85 7a00 	vstr	s14, [r5]
   c2c12:	e7c3      	b.n	c2b9c <__ieee754_rem_pio2f+0x160>
   c2c14:	2303      	movs	r3, #3
   c2c16:	e774      	b.n	c2b02 <__ieee754_rem_pio2f+0xc6>
   c2c18:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2c98 <__ieee754_rem_pio2f+0x25c>
   c2c1c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2c9c <__ieee754_rem_pio2f+0x260>
   c2c20:	eeb0 0a65 	vmov.f32	s0, s11
   c2c24:	eea6 0a07 	vfma.f32	s0, s12, s14
   c2c28:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c2c2c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2c30:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c2c34:	e7ae      	b.n	c2b94 <__ieee754_rem_pio2f+0x158>
   c2c36:	4294      	cmp	r4, r2
   c2c38:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2c3c:	bf09      	itett	eq
   c2c3e:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2c78 <__ieee754_rem_pio2f+0x23c>
   c2c42:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2c7c <__ieee754_rem_pio2f+0x240>
   c2c46:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2c80 <__ieee754_rem_pio2f+0x244>
   c2c4a:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2c4e:	f04f 30ff 	mov.w	r0, #4294967295
   c2c52:	ee77 6a87 	vadd.f32	s13, s15, s14
   c2c56:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2c5a:	edc5 6a00 	vstr	s13, [r5]
   c2c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2c62:	edc5 7a01 	vstr	s15, [r5, #4]
   c2c66:	e719      	b.n	c2a9c <__ieee754_rem_pio2f+0x60>
   c2c68:	3f490fd8 	.word	0x3f490fd8
   c2c6c:	4016cbe3 	.word	0x4016cbe3
   c2c70:	3fc90f80 	.word	0x3fc90f80
   c2c74:	3fc90fd0 	.word	0x3fc90fd0
   c2c78:	37354400 	.word	0x37354400
   c2c7c:	37354443 	.word	0x37354443
   c2c80:	2e85a308 	.word	0x2e85a308
   c2c84:	43490f80 	.word	0x43490f80
   c2c88:	43800000 	.word	0x43800000
   c2c8c:	000c82e8 	.word	0x000c82e8
   c2c90:	3f22f984 	.word	0x3f22f984
   c2c94:	000c8268 	.word	0x000c8268
   c2c98:	2e85a300 	.word	0x2e85a300
   c2c9c:	248d3132 	.word	0x248d3132

000c2ca0 <__ieee754_sqrtf>:
   c2ca0:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2ca4:	4770      	bx	lr
   c2ca6:	bf00      	nop

000c2ca8 <__kernel_cosf>:
   c2ca8:	ee10 3a10 	vmov	r3, s0
   c2cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2cb0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2cb4:	da2c      	bge.n	c2d10 <__kernel_cosf+0x68>
   c2cb6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2cba:	ee17 3a90 	vmov	r3, s15
   c2cbe:	2b00      	cmp	r3, #0
   c2cc0:	d060      	beq.n	c2d84 <__kernel_cosf+0xdc>
   c2cc2:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2cc6:	eddf 7a31 	vldr	s15, [pc, #196]	; c2d8c <__kernel_cosf+0xe4>
   c2cca:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2d90 <__kernel_cosf+0xe8>
   c2cce:	eddf 5a31 	vldr	s11, [pc, #196]	; c2d94 <__kernel_cosf+0xec>
   c2cd2:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2d98 <__kernel_cosf+0xf0>
   c2cd6:	eddf 6a31 	vldr	s13, [pc, #196]	; c2d9c <__kernel_cosf+0xf4>
   c2cda:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2cde:	eddf 7a30 	vldr	s15, [pc, #192]	; c2da0 <__kernel_cosf+0xf8>
   c2ce2:	eee7 5a05 	vfma.f32	s11, s14, s10
   c2ce6:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2cea:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2cee:	eee7 6a27 	vfma.f32	s13, s14, s15
   c2cf2:	ee67 6a26 	vmul.f32	s13, s14, s13
   c2cf6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2cfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2cfe:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2d02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2d06:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2d0a:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2d0e:	4770      	bx	lr
   c2d10:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2d14:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2d8c <__kernel_cosf+0xe4>
   c2d18:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2d90 <__kernel_cosf+0xe8>
   c2d1c:	eddf 5a1d 	vldr	s11, [pc, #116]	; c2d94 <__kernel_cosf+0xec>
   c2d20:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2d98 <__kernel_cosf+0xf0>
   c2d24:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2d9c <__kernel_cosf+0xf4>
   c2d28:	4a1e      	ldr	r2, [pc, #120]	; (c2da4 <__kernel_cosf+0xfc>)
   c2d2a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2d2e:	4293      	cmp	r3, r2
   c2d30:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2da0 <__kernel_cosf+0xf8>
   c2d34:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2d38:	eea5 6a87 	vfma.f32	s12, s11, s14
   c2d3c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2d40:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2d44:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2d48:	ddd5      	ble.n	c2cf6 <__kernel_cosf+0x4e>
   c2d4a:	4a17      	ldr	r2, [pc, #92]	; (c2da8 <__kernel_cosf+0x100>)
   c2d4c:	4293      	cmp	r3, r2
   c2d4e:	dc14      	bgt.n	c2d7a <__kernel_cosf+0xd2>
   c2d50:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c2d54:	ee07 3a90 	vmov	s15, r3
   c2d58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2d5c:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2d60:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2d64:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2d68:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2d6c:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2d70:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c2d74:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2d78:	4770      	bx	lr
   c2d7a:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2d7e:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c2d82:	e7ed      	b.n	c2d60 <__kernel_cosf+0xb8>
   c2d84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2d88:	4770      	bx	lr
   c2d8a:	bf00      	nop
   c2d8c:	ad47d74e 	.word	0xad47d74e
   c2d90:	310f74f6 	.word	0x310f74f6
   c2d94:	b493f27c 	.word	0xb493f27c
   c2d98:	37d00d01 	.word	0x37d00d01
   c2d9c:	3d2aaaab 	.word	0x3d2aaaab
   c2da0:	bab60b61 	.word	0xbab60b61
   c2da4:	3e999999 	.word	0x3e999999
   c2da8:	3f480000 	.word	0x3f480000

000c2dac <__kernel_rem_pio2f>:
   c2dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2db0:	ed2d 8b04 	vpush	{d8-d9}
   c2db4:	b0db      	sub	sp, #364	; 0x16c
   c2db6:	461c      	mov	r4, r3
   c2db8:	9303      	str	r3, [sp, #12]
   c2dba:	9106      	str	r1, [sp, #24]
   c2dbc:	4ba3      	ldr	r3, [pc, #652]	; (c304c <__kernel_rem_pio2f+0x2a0>)
   c2dbe:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2dc0:	9208      	str	r2, [sp, #32]
   c2dc2:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c2dc6:	1d11      	adds	r1, r2, #4
   c2dc8:	4682      	mov	sl, r0
   c2dca:	f104 38ff 	add.w	r8, r4, #4294967295
   c2dce:	f2c0 82a2 	blt.w	c3316 <__kernel_rem_pio2f+0x56a>
   c2dd2:	1ed3      	subs	r3, r2, #3
   c2dd4:	bf44      	itt	mi
   c2dd6:	4613      	movmi	r3, r2
   c2dd8:	3304      	addmi	r3, #4
   c2dda:	10db      	asrs	r3, r3, #3
   c2ddc:	9302      	str	r3, [sp, #8]
   c2dde:	3301      	adds	r3, #1
   c2de0:	00db      	lsls	r3, r3, #3
   c2de2:	9307      	str	r3, [sp, #28]
   c2de4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2de8:	1a9b      	subs	r3, r3, r2
   c2dea:	9305      	str	r3, [sp, #20]
   c2dec:	9b02      	ldr	r3, [sp, #8]
   c2dee:	eb15 0108 	adds.w	r1, r5, r8
   c2df2:	eba3 0308 	sub.w	r3, r3, r8
   c2df6:	d416      	bmi.n	c2e26 <__kernel_rem_pio2f+0x7a>
   c2df8:	3101      	adds	r1, #1
   c2dfa:	ed9f 7a95 	vldr	s14, [pc, #596]	; c3050 <__kernel_rem_pio2f+0x2a4>
   c2dfe:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2e00:	4419      	add	r1, r3
   c2e02:	aa1e      	add	r2, sp, #120	; 0x78
   c2e04:	2b00      	cmp	r3, #0
   c2e06:	bfa4      	itt	ge
   c2e08:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2e0c:	ee07 4a90 	vmovge	s15, r4
   c2e10:	f103 0301 	add.w	r3, r3, #1
   c2e14:	bfac      	ite	ge
   c2e16:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2e1a:	eef0 7a47 	vmovlt.f32	s15, s14
   c2e1e:	428b      	cmp	r3, r1
   c2e20:	ece2 7a01 	vstmia	r2!, {s15}
   c2e24:	d1ee      	bne.n	c2e04 <__kernel_rem_pio2f+0x58>
   c2e26:	2d00      	cmp	r5, #0
   c2e28:	f2c0 82e5 	blt.w	c33f6 <__kernel_rem_pio2f+0x64a>
   c2e2c:	9b03      	ldr	r3, [sp, #12]
   c2e2e:	a91e      	add	r1, sp, #120	; 0x78
   c2e30:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c2e34:	ae46      	add	r6, sp, #280	; 0x118
   c2e36:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2e3a:	4640      	mov	r0, r8
   c2e3c:	18ef      	adds	r7, r5, r3
   c2e3e:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c2e42:	f1b8 0f00 	cmp.w	r8, #0
   c2e46:	eddf 7a82 	vldr	s15, [pc, #520]	; c3050 <__kernel_rem_pio2f+0x2a4>
   c2e4a:	db09      	blt.n	c2e60 <__kernel_rem_pio2f+0xb4>
   c2e4c:	4622      	mov	r2, r4
   c2e4e:	4653      	mov	r3, sl
   c2e50:	ecf3 6a01 	vldmia	r3!, {s13}
   c2e54:	ed32 7a01 	vldmdb	r2!, {s14}
   c2e58:	428b      	cmp	r3, r1
   c2e5a:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2e5e:	d1f7      	bne.n	c2e50 <__kernel_rem_pio2f+0xa4>
   c2e60:	3001      	adds	r0, #1
   c2e62:	42b8      	cmp	r0, r7
   c2e64:	ece6 7a01 	vstmia	r6!, {s15}
   c2e68:	f104 0404 	add.w	r4, r4, #4
   c2e6c:	d1e9      	bne.n	c2e42 <__kernel_rem_pio2f+0x96>
   c2e6e:	ab09      	add	r3, sp, #36	; 0x24
   c2e70:	af0a      	add	r7, sp, #40	; 0x28
   c2e72:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c2e76:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2e7a:	3b08      	subs	r3, #8
   c2e7c:	ed9f 9a76 	vldr	s18, [pc, #472]	; c3058 <__kernel_rem_pio2f+0x2ac>
   c2e80:	eddf 8a74 	vldr	s17, [pc, #464]	; c3054 <__kernel_rem_pio2f+0x2a8>
   c2e84:	9805      	ldr	r0, [sp, #20]
   c2e86:	9304      	str	r3, [sp, #16]
   c2e88:	eb0a 040c 	add.w	r4, sl, ip
   c2e8c:	ae46      	add	r6, sp, #280	; 0x118
   c2e8e:	9500      	str	r5, [sp, #0]
   c2e90:	ab5a      	add	r3, sp, #360	; 0x168
   c2e92:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c2e96:	2d00      	cmp	r5, #0
   c2e98:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2e9c:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2ea0:	dd16      	ble.n	c2ed0 <__kernel_rem_pio2f+0x124>
   c2ea2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c2ea6:	463a      	mov	r2, r7
   c2ea8:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2eac:	eeb0 7a40 	vmov.f32	s14, s0
   c2eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2eb4:	ed73 6a01 	vldmdb	r3!, {s13}
   c2eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2ebc:	42b3      	cmp	r3, r6
   c2ebe:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c2ec2:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c2ec6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2eca:	eca2 7a01 	vstmia	r2!, {s14}
   c2ece:	d1eb      	bne.n	c2ea8 <__kernel_rem_pio2f+0xfc>
   c2ed0:	9001      	str	r0, [sp, #4]
   c2ed2:	f000 fdbf 	bl	c3a54 <scalbnf>
   c2ed6:	eeb0 8a40 	vmov.f32	s16, s0
   c2eda:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2ede:	ee28 0a00 	vmul.f32	s0, s16, s0
   c2ee2:	f000 fd71 	bl	c39c8 <floorf>
   c2ee6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2eea:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2eee:	9801      	ldr	r0, [sp, #4]
   c2ef0:	2800      	cmp	r0, #0
   c2ef2:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c2ef6:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2efa:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2efe:	dd79      	ble.n	c2ff4 <__kernel_rem_pio2f+0x248>
   c2f00:	f105 3eff 	add.w	lr, r5, #4294967295
   c2f04:	f1c0 0308 	rsb	r3, r0, #8
   c2f08:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2f0c:	fa41 fc03 	asr.w	ip, r1, r3
   c2f10:	fa0c f303 	lsl.w	r3, ip, r3
   c2f14:	1acb      	subs	r3, r1, r3
   c2f16:	f1c0 0207 	rsb	r2, r0, #7
   c2f1a:	ee19 1a90 	vmov	r1, s19
   c2f1e:	fa43 f202 	asr.w	r2, r3, r2
   c2f22:	4461      	add	r1, ip
   c2f24:	2a00      	cmp	r2, #0
   c2f26:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2f2a:	ee09 1a90 	vmov	s19, r1
   c2f2e:	dc69      	bgt.n	c3004 <__kernel_rem_pio2f+0x258>
   c2f30:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2f38:	f040 80c1 	bne.w	c30be <__kernel_rem_pio2f+0x312>
   c2f3c:	9b00      	ldr	r3, [sp, #0]
   c2f3e:	f105 3bff 	add.w	fp, r5, #4294967295
   c2f42:	455b      	cmp	r3, fp
   c2f44:	dc10      	bgt.n	c2f68 <__kernel_rem_pio2f+0x1bc>
   c2f46:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2f4a:	3b01      	subs	r3, #1
   c2f4c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2f50:	2100      	movs	r1, #0
   c2f52:	4694      	mov	ip, r2
   c2f54:	f853 2904 	ldr.w	r2, [r3], #-4
   c2f58:	454b      	cmp	r3, r9
   c2f5a:	ea41 0102 	orr.w	r1, r1, r2
   c2f5e:	d1f9      	bne.n	c2f54 <__kernel_rem_pio2f+0x1a8>
   c2f60:	4662      	mov	r2, ip
   c2f62:	2900      	cmp	r1, #0
   c2f64:	f040 80f3 	bne.w	c314e <__kernel_rem_pio2f+0x3a2>
   c2f68:	9b00      	ldr	r3, [sp, #0]
   c2f6a:	3b01      	subs	r3, #1
   c2f6c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2f70:	2b00      	cmp	r3, #0
   c2f72:	f040 80e8 	bne.w	c3146 <__kernel_rem_pio2f+0x39a>
   c2f76:	9b04      	ldr	r3, [sp, #16]
   c2f78:	f04f 0c01 	mov.w	ip, #1
   c2f7c:	f853 2904 	ldr.w	r2, [r3], #-4
   c2f80:	f10c 0c01 	add.w	ip, ip, #1
   c2f84:	2a00      	cmp	r2, #0
   c2f86:	d0f9      	beq.n	c2f7c <__kernel_rem_pio2f+0x1d0>
   c2f88:	1c6b      	adds	r3, r5, #1
   c2f8a:	44ac      	add	ip, r5
   c2f8c:	469e      	mov	lr, r3
   c2f8e:	9a03      	ldr	r2, [sp, #12]
   c2f90:	1951      	adds	r1, r2, r5
   c2f92:	9a02      	ldr	r2, [sp, #8]
   c2f94:	eb02 0b03 	add.w	fp, r2, r3
   c2f98:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2f9c:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2f9e:	f10b 3bff 	add.w	fp, fp, #4294967295
   c2fa2:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c2fa6:	ab1e      	add	r3, sp, #120	; 0x78
   c2fa8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2fac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2fb0:	eddb 7a01 	vldr	s15, [fp, #4]
   c2fb4:	ed9f 7a26 	vldr	s14, [pc, #152]	; c3050 <__kernel_rem_pio2f+0x2a4>
   c2fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2fbc:	f1b8 0f00 	cmp.w	r8, #0
   c2fc0:	f10b 0b04 	add.w	fp, fp, #4
   c2fc4:	edc1 7a00 	vstr	s15, [r1]
   c2fc8:	460a      	mov	r2, r1
   c2fca:	f101 0104 	add.w	r1, r1, #4
   c2fce:	db09      	blt.n	c2fe4 <__kernel_rem_pio2f+0x238>
   c2fd0:	4653      	mov	r3, sl
   c2fd2:	e001      	b.n	c2fd8 <__kernel_rem_pio2f+0x22c>
   c2fd4:	ed72 7a01 	vldmdb	r2!, {s15}
   c2fd8:	ecf3 6a01 	vldmia	r3!, {s13}
   c2fdc:	42a3      	cmp	r3, r4
   c2fde:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2fe2:	d1f7      	bne.n	c2fd4 <__kernel_rem_pio2f+0x228>
   c2fe4:	f10e 0e01 	add.w	lr, lr, #1
   c2fe8:	45e6      	cmp	lr, ip
   c2fea:	eca5 7a01 	vstmia	r5!, {s14}
   c2fee:	dddf      	ble.n	c2fb0 <__kernel_rem_pio2f+0x204>
   c2ff0:	4665      	mov	r5, ip
   c2ff2:	e74d      	b.n	c2e90 <__kernel_rem_pio2f+0xe4>
   c2ff4:	f040 809d 	bne.w	c3132 <__kernel_rem_pio2f+0x386>
   c2ff8:	1e6b      	subs	r3, r5, #1
   c2ffa:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2ffe:	1212      	asrs	r2, r2, #8
   c3000:	2a00      	cmp	r2, #0
   c3002:	dd95      	ble.n	c2f30 <__kernel_rem_pio2f+0x184>
   c3004:	ee19 3a90 	vmov	r3, s19
   c3008:	2d00      	cmp	r5, #0
   c300a:	f103 0301 	add.w	r3, r3, #1
   c300e:	ee09 3a90 	vmov	s19, r3
   c3012:	f340 8196 	ble.w	c3342 <__kernel_rem_pio2f+0x596>
   c3016:	6839      	ldr	r1, [r7, #0]
   c3018:	2900      	cmp	r1, #0
   c301a:	f040 8080 	bne.w	c311e <__kernel_rem_pio2f+0x372>
   c301e:	2d01      	cmp	r5, #1
   c3020:	d026      	beq.n	c3070 <__kernel_rem_pio2f+0x2c4>
   c3022:	463b      	mov	r3, r7
   c3024:	f04f 0c01 	mov.w	ip, #1
   c3028:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c302c:	2900      	cmp	r1, #0
   c302e:	d07a      	beq.n	c3126 <__kernel_rem_pio2f+0x37a>
   c3030:	f10c 0301 	add.w	r3, ip, #1
   c3034:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c3038:	429d      	cmp	r5, r3
   c303a:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c303e:	dd16      	ble.n	c306e <__kernel_rem_pio2f+0x2c2>
   c3040:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c3044:	44bb      	add	fp, r7
   c3046:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c304a:	e00a      	b.n	c3062 <__kernel_rem_pio2f+0x2b6>
   c304c:	000c862c 	.word	0x000c862c
   c3050:	00000000 	.word	0x00000000
   c3054:	43800000 	.word	0x43800000
   c3058:	3b800000 	.word	0x3b800000
   c305c:	3fc90000 	.word	0x3fc90000
   c3060:	6819      	ldr	r1, [r3, #0]
   c3062:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c3066:	f843 1b04 	str.w	r1, [r3], #4
   c306a:	455b      	cmp	r3, fp
   c306c:	d1f8      	bne.n	c3060 <__kernel_rem_pio2f+0x2b4>
   c306e:	2101      	movs	r1, #1
   c3070:	2800      	cmp	r0, #0
   c3072:	dd0c      	ble.n	c308e <__kernel_rem_pio2f+0x2e2>
   c3074:	2801      	cmp	r0, #1
   c3076:	f000 8145 	beq.w	c3304 <__kernel_rem_pio2f+0x558>
   c307a:	2802      	cmp	r0, #2
   c307c:	d107      	bne.n	c308e <__kernel_rem_pio2f+0x2e2>
   c307e:	f105 3cff 	add.w	ip, r5, #4294967295
   c3082:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c3086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c308a:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c308e:	2a02      	cmp	r2, #2
   c3090:	f47f af4e 	bne.w	c2f30 <__kernel_rem_pio2f+0x184>
   c3094:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c3098:	ee30 8a48 	vsub.f32	s16, s0, s16
   c309c:	2900      	cmp	r1, #0
   c309e:	f43f af47 	beq.w	c2f30 <__kernel_rem_pio2f+0x184>
   c30a2:	9209      	str	r2, [sp, #36]	; 0x24
   c30a4:	9001      	str	r0, [sp, #4]
   c30a6:	f000 fcd5 	bl	c3a54 <scalbnf>
   c30aa:	ee38 8a40 	vsub.f32	s16, s16, s0
   c30ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c30b0:	9801      	ldr	r0, [sp, #4]
   c30b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c30b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c30ba:	f43f af3f 	beq.w	c2f3c <__kernel_rem_pio2f+0x190>
   c30be:	9202      	str	r2, [sp, #8]
   c30c0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c30c4:	eeb0 0a48 	vmov.f32	s0, s16
   c30c8:	1a98      	subs	r0, r3, r2
   c30ca:	9501      	str	r5, [sp, #4]
   c30cc:	9d00      	ldr	r5, [sp, #0]
   c30ce:	f000 fcc1 	bl	c3a54 <scalbnf>
   c30d2:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c3054 <__kernel_rem_pio2f+0x2a8>
   c30d6:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c30da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c30de:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c30e2:	f2c0 8156 	blt.w	c3392 <__kernel_rem_pio2f+0x5e6>
   c30e6:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c3058 <__kernel_rem_pio2f+0x2ac>
   c30ea:	9905      	ldr	r1, [sp, #20]
   c30ec:	ee60 7a27 	vmul.f32	s15, s0, s15
   c30f0:	3108      	adds	r1, #8
   c30f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c30f6:	9105      	str	r1, [sp, #20]
   c30f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c30fc:	f103 0b01 	add.w	fp, r3, #1
   c3100:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c3104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c310c:	ee10 1a10 	vmov	r1, s0
   c3110:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c3114:	ee17 3a90 	vmov	r3, s15
   c3118:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c311c:	e02e      	b.n	c317c <__kernel_rem_pio2f+0x3d0>
   c311e:	2301      	movs	r3, #1
   c3120:	f04f 0c00 	mov.w	ip, #0
   c3124:	e786      	b.n	c3034 <__kernel_rem_pio2f+0x288>
   c3126:	f10c 0c01 	add.w	ip, ip, #1
   c312a:	45ac      	cmp	ip, r5
   c312c:	f47f af7c 	bne.w	c3028 <__kernel_rem_pio2f+0x27c>
   c3130:	e79e      	b.n	c3070 <__kernel_rem_pio2f+0x2c4>
   c3132:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c3136:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c313e:	f280 80ef 	bge.w	c3320 <__kernel_rem_pio2f+0x574>
   c3142:	2200      	movs	r2, #0
   c3144:	e6f4      	b.n	c2f30 <__kernel_rem_pio2f+0x184>
   c3146:	1c6b      	adds	r3, r5, #1
   c3148:	469e      	mov	lr, r3
   c314a:	469c      	mov	ip, r3
   c314c:	e71f      	b.n	c2f8e <__kernel_rem_pio2f+0x1e2>
   c314e:	9905      	ldr	r1, [sp, #20]
   c3150:	f1a1 0008 	sub.w	r0, r1, #8
   c3154:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c3158:	9005      	str	r0, [sp, #20]
   c315a:	462b      	mov	r3, r5
   c315c:	9d00      	ldr	r5, [sp, #0]
   c315e:	b969      	cbnz	r1, c317c <__kernel_rem_pio2f+0x3d0>
   c3160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c3164:	3b02      	subs	r3, #2
   c3166:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c316a:	4601      	mov	r1, r0
   c316c:	f853 0904 	ldr.w	r0, [r3], #-4
   c3170:	f10b 3bff 	add.w	fp, fp, #4294967295
   c3174:	3908      	subs	r1, #8
   c3176:	2800      	cmp	r0, #0
   c3178:	d0f8      	beq.n	c316c <__kernel_rem_pio2f+0x3c0>
   c317a:	9105      	str	r1, [sp, #20]
   c317c:	9805      	ldr	r0, [sp, #20]
   c317e:	9200      	str	r2, [sp, #0]
   c3180:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c3184:	f000 fc66 	bl	c3a54 <scalbnf>
   c3188:	f1bb 0f00 	cmp.w	fp, #0
   c318c:	9a00      	ldr	r2, [sp, #0]
   c318e:	f2c0 8125 	blt.w	c33dc <__kernel_rem_pio2f+0x630>
   c3192:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c3196:	ab46      	add	r3, sp, #280	; 0x118
   c3198:	eb03 060e 	add.w	r6, r3, lr
   c319c:	f10e 0c04 	add.w	ip, lr, #4
   c31a0:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c3058 <__kernel_rem_pio2f+0x2ac>
   c31a4:	eb07 030c 	add.w	r3, r7, ip
   c31a8:	1d31      	adds	r1, r6, #4
   c31aa:	ed73 7a01 	vldmdb	r3!, {s15}
   c31ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c31b2:	42bb      	cmp	r3, r7
   c31b4:	ee67 7a80 	vmul.f32	s15, s15, s0
   c31b8:	ee20 0a07 	vmul.f32	s0, s0, s14
   c31bc:	ed61 7a01 	vstmdb	r1!, {s15}
   c31c0:	d1f3      	bne.n	c31aa <__kernel_rem_pio2f+0x3fe>
   c31c2:	2d00      	cmp	r5, #0
   c31c4:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c305c <__kernel_rem_pio2f+0x2b0>
   c31c8:	f04f 0400 	mov.w	r4, #0
   c31cc:	db20      	blt.n	c3210 <__kernel_rem_pio2f+0x464>
   c31ce:	4892      	ldr	r0, [pc, #584]	; (c3418 <__kernel_rem_pio2f+0x66c>)
   c31d0:	eddf 7a92 	vldr	s15, [pc, #584]	; c341c <__kernel_rem_pio2f+0x670>
   c31d4:	eeb0 7a46 	vmov.f32	s14, s12
   c31d8:	4631      	mov	r1, r6
   c31da:	2300      	movs	r3, #0
   c31dc:	e003      	b.n	c31e6 <__kernel_rem_pio2f+0x43a>
   c31de:	429c      	cmp	r4, r3
   c31e0:	db08      	blt.n	c31f4 <__kernel_rem_pio2f+0x448>
   c31e2:	ecb0 7a01 	vldmia	r0!, {s14}
   c31e6:	ecf1 6a01 	vldmia	r1!, {s13}
   c31ea:	3301      	adds	r3, #1
   c31ec:	429d      	cmp	r5, r3
   c31ee:	eee6 7a87 	vfma.f32	s15, s13, s14
   c31f2:	daf4      	bge.n	c31de <__kernel_rem_pio2f+0x432>
   c31f4:	ab5a      	add	r3, sp, #360	; 0x168
   c31f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c31fa:	45a3      	cmp	fp, r4
   c31fc:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c3200:	f1a6 0604 	sub.w	r6, r6, #4
   c3204:	f104 0301 	add.w	r3, r4, #1
   c3208:	d005      	beq.n	c3216 <__kernel_rem_pio2f+0x46a>
   c320a:	2d00      	cmp	r5, #0
   c320c:	461c      	mov	r4, r3
   c320e:	dade      	bge.n	c31ce <__kernel_rem_pio2f+0x422>
   c3210:	eddf 7a82 	vldr	s15, [pc, #520]	; c341c <__kernel_rem_pio2f+0x670>
   c3214:	e7ee      	b.n	c31f4 <__kernel_rem_pio2f+0x448>
   c3216:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c3218:	2902      	cmp	r1, #2
   c321a:	dc1c      	bgt.n	c3256 <__kernel_rem_pio2f+0x4aa>
   c321c:	2900      	cmp	r1, #0
   c321e:	f300 8092 	bgt.w	c3346 <__kernel_rem_pio2f+0x59a>
   c3222:	d10f      	bne.n	c3244 <__kernel_rem_pio2f+0x498>
   c3224:	ab32      	add	r3, sp, #200	; 0xc8
   c3226:	eddf 7a7d 	vldr	s15, [pc, #500]	; c341c <__kernel_rem_pio2f+0x670>
   c322a:	449c      	add	ip, r3
   c322c:	ed3c 7a01 	vldmdb	ip!, {s14}
   c3230:	4563      	cmp	r3, ip
   c3232:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3236:	d1f9      	bne.n	c322c <__kernel_rem_pio2f+0x480>
   c3238:	b10a      	cbz	r2, c323e <__kernel_rem_pio2f+0x492>
   c323a:	eef1 7a67 	vneg.f32	s15, s15
   c323e:	9b06      	ldr	r3, [sp, #24]
   c3240:	edc3 7a00 	vstr	s15, [r3]
   c3244:	ee19 3a90 	vmov	r3, s19
   c3248:	f003 0007 	and.w	r0, r3, #7
   c324c:	b05b      	add	sp, #364	; 0x16c
   c324e:	ecbd 8b04 	vpop	{d8-d9}
   c3252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3256:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3258:	2b03      	cmp	r3, #3
   c325a:	d1f3      	bne.n	c3244 <__kernel_rem_pio2f+0x498>
   c325c:	f1bb 0f00 	cmp.w	fp, #0
   c3260:	f000 80d1 	beq.w	c3406 <__kernel_rem_pio2f+0x65a>
   c3264:	ab5a      	add	r3, sp, #360	; 0x168
   c3266:	4473      	add	r3, lr
   c3268:	a932      	add	r1, sp, #200	; 0xc8
   c326a:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c326e:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c3272:	ed73 7a01 	vldmdb	r3!, {s15}
   c3276:	eef0 6a47 	vmov.f32	s13, s14
   c327a:	ee37 7a27 	vadd.f32	s14, s14, s15
   c327e:	4299      	cmp	r1, r3
   c3280:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3284:	ed83 7a00 	vstr	s14, [r3]
   c3288:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c328c:	edc3 7a01 	vstr	s15, [r3, #4]
   c3290:	d1ef      	bne.n	c3272 <__kernel_rem_pio2f+0x4c6>
   c3292:	f1bb 0f01 	cmp.w	fp, #1
   c3296:	f340 80b6 	ble.w	c3406 <__kernel_rem_pio2f+0x65a>
   c329a:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c329e:	ab5a      	add	r3, sp, #360	; 0x168
   c32a0:	f10b 3bff 	add.w	fp, fp, #4294967295
   c32a4:	449e      	add	lr, r3
   c32a6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c32aa:	f10b 0304 	add.w	r3, fp, #4
   c32ae:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c32b2:	440b      	add	r3, r1
   c32b4:	a833      	add	r0, sp, #204	; 0xcc
   c32b6:	ed73 7a01 	vldmdb	r3!, {s15}
   c32ba:	eef0 6a47 	vmov.f32	s13, s14
   c32be:	ee37 7a27 	vadd.f32	s14, s14, s15
   c32c2:	4298      	cmp	r0, r3
   c32c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c32c8:	ed83 7a00 	vstr	s14, [r3]
   c32cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c32d0:	edc3 7a01 	vstr	s15, [r3, #4]
   c32d4:	d1ef      	bne.n	c32b6 <__kernel_rem_pio2f+0x50a>
   c32d6:	f10b 0b08 	add.w	fp, fp, #8
   c32da:	eddf 7a50 	vldr	s15, [pc, #320]	; c341c <__kernel_rem_pio2f+0x670>
   c32de:	eb01 030b 	add.w	r3, r1, fp
   c32e2:	3108      	adds	r1, #8
   c32e4:	ed33 7a01 	vldmdb	r3!, {s14}
   c32e8:	4299      	cmp	r1, r3
   c32ea:	ee77 7a87 	vadd.f32	s15, s15, s14
   c32ee:	d1f9      	bne.n	c32e4 <__kernel_rem_pio2f+0x538>
   c32f0:	2a00      	cmp	r2, #0
   c32f2:	d156      	bne.n	c33a2 <__kernel_rem_pio2f+0x5f6>
   c32f4:	9906      	ldr	r1, [sp, #24]
   c32f6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c32f8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c32fa:	600a      	str	r2, [r1, #0]
   c32fc:	604b      	str	r3, [r1, #4]
   c32fe:	edc1 7a02 	vstr	s15, [r1, #8]
   c3302:	e79f      	b.n	c3244 <__kernel_rem_pio2f+0x498>
   c3304:	f105 3cff 	add.w	ip, r5, #4294967295
   c3308:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c330c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c3310:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c3314:	e6bb      	b.n	c308e <__kernel_rem_pio2f+0x2e2>
   c3316:	2308      	movs	r3, #8
   c3318:	9307      	str	r3, [sp, #28]
   c331a:	2300      	movs	r3, #0
   c331c:	9302      	str	r3, [sp, #8]
   c331e:	e561      	b.n	c2de4 <__kernel_rem_pio2f+0x38>
   c3320:	ee19 3a90 	vmov	r3, s19
   c3324:	2d00      	cmp	r5, #0
   c3326:	f103 0301 	add.w	r3, r3, #1
   c332a:	ee09 3a90 	vmov	s19, r3
   c332e:	bfc8      	it	gt
   c3330:	2202      	movgt	r2, #2
   c3332:	f73f ae70 	bgt.w	c3016 <__kernel_rem_pio2f+0x26a>
   c3336:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c333a:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c333e:	2202      	movs	r2, #2
   c3340:	e5f6      	b.n	c2f30 <__kernel_rem_pio2f+0x184>
   c3342:	2100      	movs	r1, #0
   c3344:	e694      	b.n	c3070 <__kernel_rem_pio2f+0x2c4>
   c3346:	a932      	add	r1, sp, #200	; 0xc8
   c3348:	eddf 7a34 	vldr	s15, [pc, #208]	; c341c <__kernel_rem_pio2f+0x670>
   c334c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c3350:	ed33 7a01 	vldmdb	r3!, {s14}
   c3354:	4299      	cmp	r1, r3
   c3356:	ee77 7a87 	vadd.f32	s15, s15, s14
   c335a:	d1f9      	bne.n	c3350 <__kernel_rem_pio2f+0x5a4>
   c335c:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c3360:	bb8a      	cbnz	r2, c33c6 <__kernel_rem_pio2f+0x61a>
   c3362:	9b06      	ldr	r3, [sp, #24]
   c3364:	f1bb 0f00 	cmp.w	fp, #0
   c3368:	edc3 7a00 	vstr	s15, [r3]
   c336c:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3370:	dd0b      	ble.n	c338a <__kernel_rem_pio2f+0x5de>
   c3372:	a933      	add	r1, sp, #204	; 0xcc
   c3374:	2301      	movs	r3, #1
   c3376:	ecb1 7a01 	vldmia	r1!, {s14}
   c337a:	3301      	adds	r3, #1
   c337c:	459b      	cmp	fp, r3
   c337e:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3382:	daf8      	bge.n	c3376 <__kernel_rem_pio2f+0x5ca>
   c3384:	b10a      	cbz	r2, c338a <__kernel_rem_pio2f+0x5de>
   c3386:	eef1 7a67 	vneg.f32	s15, s15
   c338a:	9b06      	ldr	r3, [sp, #24]
   c338c:	edc3 7a01 	vstr	s15, [r3, #4]
   c3390:	e758      	b.n	c3244 <__kernel_rem_pio2f+0x498>
   c3392:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c3396:	469b      	mov	fp, r3
   c3398:	ee10 1a10 	vmov	r1, s0
   c339c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c33a0:	e6ec      	b.n	c317c <__kernel_rem_pio2f+0x3d0>
   c33a2:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c33a6:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c33aa:	9b06      	ldr	r3, [sp, #24]
   c33ac:	eef1 6a66 	vneg.f32	s13, s13
   c33b0:	eeb1 7a47 	vneg.f32	s14, s14
   c33b4:	eef1 7a67 	vneg.f32	s15, s15
   c33b8:	edc3 6a00 	vstr	s13, [r3]
   c33bc:	ed83 7a01 	vstr	s14, [r3, #4]
   c33c0:	edc3 7a02 	vstr	s15, [r3, #8]
   c33c4:	e73e      	b.n	c3244 <__kernel_rem_pio2f+0x498>
   c33c6:	9b06      	ldr	r3, [sp, #24]
   c33c8:	eef1 6a67 	vneg.f32	s13, s15
   c33cc:	f1bb 0f00 	cmp.w	fp, #0
   c33d0:	ee77 7a67 	vsub.f32	s15, s14, s15
   c33d4:	edc3 6a00 	vstr	s13, [r3]
   c33d8:	dccb      	bgt.n	c3372 <__kernel_rem_pio2f+0x5c6>
   c33da:	e7d4      	b.n	c3386 <__kernel_rem_pio2f+0x5da>
   c33dc:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c33de:	2b02      	cmp	r3, #2
   c33e0:	dc0d      	bgt.n	c33fe <__kernel_rem_pio2f+0x652>
   c33e2:	2b00      	cmp	r3, #0
   c33e4:	dc14      	bgt.n	c3410 <__kernel_rem_pio2f+0x664>
   c33e6:	f47f af2d 	bne.w	c3244 <__kernel_rem_pio2f+0x498>
   c33ea:	eddf 7a0c 	vldr	s15, [pc, #48]	; c341c <__kernel_rem_pio2f+0x670>
   c33ee:	2a00      	cmp	r2, #0
   c33f0:	f43f af25 	beq.w	c323e <__kernel_rem_pio2f+0x492>
   c33f4:	e721      	b.n	c323a <__kernel_rem_pio2f+0x48e>
   c33f6:	9b03      	ldr	r3, [sp, #12]
   c33f8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c33fc:	e537      	b.n	c2e6e <__kernel_rem_pio2f+0xc2>
   c33fe:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3400:	2b03      	cmp	r3, #3
   c3402:	f47f af1f 	bne.w	c3244 <__kernel_rem_pio2f+0x498>
   c3406:	eddf 7a05 	vldr	s15, [pc, #20]	; c341c <__kernel_rem_pio2f+0x670>
   c340a:	2a00      	cmp	r2, #0
   c340c:	d1c9      	bne.n	c33a2 <__kernel_rem_pio2f+0x5f6>
   c340e:	e771      	b.n	c32f4 <__kernel_rem_pio2f+0x548>
   c3410:	eddf 7a02 	vldr	s15, [pc, #8]	; c341c <__kernel_rem_pio2f+0x670>
   c3414:	e7a2      	b.n	c335c <__kernel_rem_pio2f+0x5b0>
   c3416:	bf00      	nop
   c3418:	000c8604 	.word	0x000c8604
   c341c:	00000000 	.word	0x00000000

000c3420 <__kernel_sinf>:
   c3420:	ee10 3a10 	vmov	r3, s0
   c3424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3428:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c342c:	da04      	bge.n	c3438 <__kernel_sinf+0x18>
   c342e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c3432:	ee17 3a90 	vmov	r3, s15
   c3436:	b35b      	cbz	r3, c3490 <__kernel_sinf+0x70>
   c3438:	ee60 7a00 	vmul.f32	s15, s0, s0
   c343c:	ed9f 7a15 	vldr	s14, [pc, #84]	; c3494 <__kernel_sinf+0x74>
   c3440:	eddf 5a15 	vldr	s11, [pc, #84]	; c3498 <__kernel_sinf+0x78>
   c3444:	ed9f 6a15 	vldr	s12, [pc, #84]	; c349c <__kernel_sinf+0x7c>
   c3448:	eddf 6a15 	vldr	s13, [pc, #84]	; c34a0 <__kernel_sinf+0x80>
   c344c:	eee7 5a87 	vfma.f32	s11, s15, s14
   c3450:	ed9f 7a14 	vldr	s14, [pc, #80]	; c34a4 <__kernel_sinf+0x84>
   c3454:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c3458:	ee20 5a27 	vmul.f32	s10, s0, s15
   c345c:	eee6 6a27 	vfma.f32	s13, s12, s15
   c3460:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c3464:	b930      	cbnz	r0, c3474 <__kernel_sinf+0x54>
   c3466:	eddf 6a10 	vldr	s13, [pc, #64]	; c34a8 <__kernel_sinf+0x88>
   c346a:	eee7 6a87 	vfma.f32	s13, s15, s14
   c346e:	eea6 0a85 	vfma.f32	s0, s13, s10
   c3472:	4770      	bx	lr
   c3474:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c3478:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c347c:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c3480:	eddf 6a0a 	vldr	s13, [pc, #40]	; c34ac <__kernel_sinf+0x8c>
   c3484:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c3488:	eee5 0a26 	vfma.f32	s1, s10, s13
   c348c:	ee30 0a60 	vsub.f32	s0, s0, s1
   c3490:	4770      	bx	lr
   c3492:	bf00      	nop
   c3494:	2f2ec9d3 	.word	0x2f2ec9d3
   c3498:	b2d72f34 	.word	0xb2d72f34
   c349c:	3638ef1b 	.word	0x3638ef1b
   c34a0:	b9500d01 	.word	0xb9500d01
   c34a4:	3c088889 	.word	0x3c088889
   c34a8:	be2aaaab 	.word	0xbe2aaaab
   c34ac:	3e2aaaab 	.word	0x3e2aaaab

000c34b0 <atan>:
   c34b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c34b4:	ec55 4b10 	vmov	r4, r5, d0
   c34b8:	4bc3      	ldr	r3, [pc, #780]	; (c37c8 <atan+0x318>)
   c34ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c34be:	429e      	cmp	r6, r3
   c34c0:	46aa      	mov	sl, r5
   c34c2:	dd17      	ble.n	c34f4 <atan+0x44>
   c34c4:	4bc1      	ldr	r3, [pc, #772]	; (c37cc <atan+0x31c>)
   c34c6:	429e      	cmp	r6, r3
   c34c8:	dc0a      	bgt.n	c34e0 <atan+0x30>
   c34ca:	d007      	beq.n	c34dc <atan+0x2c>
   c34cc:	f1ba 0f00 	cmp.w	sl, #0
   c34d0:	f340 80cb 	ble.w	c366a <atan+0x1ba>
   c34d4:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c3758 <atan+0x2a8>
   c34d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c34dc:	2c00      	cmp	r4, #0
   c34de:	d0f5      	beq.n	c34cc <atan+0x1c>
   c34e0:	4622      	mov	r2, r4
   c34e2:	462b      	mov	r3, r5
   c34e4:	4620      	mov	r0, r4
   c34e6:	4629      	mov	r1, r5
   c34e8:	f000 fb2c 	bl	c3b44 <__adddf3>
   c34ec:	ec41 0b10 	vmov	d0, r0, r1
   c34f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c34f4:	4bb6      	ldr	r3, [pc, #728]	; (c37d0 <atan+0x320>)
   c34f6:	429e      	cmp	r6, r3
   c34f8:	f300 80bb 	bgt.w	c3672 <atan+0x1c2>
   c34fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c3500:	429e      	cmp	r6, r3
   c3502:	f340 80a0 	ble.w	c3646 <atan+0x196>
   c3506:	f04f 3bff 	mov.w	fp, #4294967295
   c350a:	4622      	mov	r2, r4
   c350c:	462b      	mov	r3, r5
   c350e:	4620      	mov	r0, r4
   c3510:	4629      	mov	r1, r5
   c3512:	f000 fccd 	bl	c3eb0 <__aeabi_dmul>
   c3516:	4602      	mov	r2, r0
   c3518:	460b      	mov	r3, r1
   c351a:	4680      	mov	r8, r0
   c351c:	4689      	mov	r9, r1
   c351e:	f000 fcc7 	bl	c3eb0 <__aeabi_dmul>
   c3522:	a38f      	add	r3, pc, #572	; (adr r3, c3760 <atan+0x2b0>)
   c3524:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3528:	4606      	mov	r6, r0
   c352a:	460f      	mov	r7, r1
   c352c:	f000 fcc0 	bl	c3eb0 <__aeabi_dmul>
   c3530:	a38d      	add	r3, pc, #564	; (adr r3, c3768 <atan+0x2b8>)
   c3532:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3536:	f000 fb05 	bl	c3b44 <__adddf3>
   c353a:	4632      	mov	r2, r6
   c353c:	463b      	mov	r3, r7
   c353e:	f000 fcb7 	bl	c3eb0 <__aeabi_dmul>
   c3542:	a38b      	add	r3, pc, #556	; (adr r3, c3770 <atan+0x2c0>)
   c3544:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3548:	f000 fafc 	bl	c3b44 <__adddf3>
   c354c:	4632      	mov	r2, r6
   c354e:	463b      	mov	r3, r7
   c3550:	f000 fcae 	bl	c3eb0 <__aeabi_dmul>
   c3554:	a388      	add	r3, pc, #544	; (adr r3, c3778 <atan+0x2c8>)
   c3556:	e9d3 2300 	ldrd	r2, r3, [r3]
   c355a:	f000 faf3 	bl	c3b44 <__adddf3>
   c355e:	4632      	mov	r2, r6
   c3560:	463b      	mov	r3, r7
   c3562:	f000 fca5 	bl	c3eb0 <__aeabi_dmul>
   c3566:	a386      	add	r3, pc, #536	; (adr r3, c3780 <atan+0x2d0>)
   c3568:	e9d3 2300 	ldrd	r2, r3, [r3]
   c356c:	f000 faea 	bl	c3b44 <__adddf3>
   c3570:	4632      	mov	r2, r6
   c3572:	463b      	mov	r3, r7
   c3574:	f000 fc9c 	bl	c3eb0 <__aeabi_dmul>
   c3578:	a383      	add	r3, pc, #524	; (adr r3, c3788 <atan+0x2d8>)
   c357a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c357e:	f000 fae1 	bl	c3b44 <__adddf3>
   c3582:	4642      	mov	r2, r8
   c3584:	464b      	mov	r3, r9
   c3586:	f000 fc93 	bl	c3eb0 <__aeabi_dmul>
   c358a:	a381      	add	r3, pc, #516	; (adr r3, c3790 <atan+0x2e0>)
   c358c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3590:	4680      	mov	r8, r0
   c3592:	4689      	mov	r9, r1
   c3594:	4630      	mov	r0, r6
   c3596:	4639      	mov	r1, r7
   c3598:	f000 fc8a 	bl	c3eb0 <__aeabi_dmul>
   c359c:	a37e      	add	r3, pc, #504	; (adr r3, c3798 <atan+0x2e8>)
   c359e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35a2:	f000 facd 	bl	c3b40 <__aeabi_dsub>
   c35a6:	4632      	mov	r2, r6
   c35a8:	463b      	mov	r3, r7
   c35aa:	f000 fc81 	bl	c3eb0 <__aeabi_dmul>
   c35ae:	a37c      	add	r3, pc, #496	; (adr r3, c37a0 <atan+0x2f0>)
   c35b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35b4:	f000 fac4 	bl	c3b40 <__aeabi_dsub>
   c35b8:	4632      	mov	r2, r6
   c35ba:	463b      	mov	r3, r7
   c35bc:	f000 fc78 	bl	c3eb0 <__aeabi_dmul>
   c35c0:	a379      	add	r3, pc, #484	; (adr r3, c37a8 <atan+0x2f8>)
   c35c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35c6:	f000 fabb 	bl	c3b40 <__aeabi_dsub>
   c35ca:	4632      	mov	r2, r6
   c35cc:	463b      	mov	r3, r7
   c35ce:	f000 fc6f 	bl	c3eb0 <__aeabi_dmul>
   c35d2:	a377      	add	r3, pc, #476	; (adr r3, c37b0 <atan+0x300>)
   c35d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35d8:	f000 fab2 	bl	c3b40 <__aeabi_dsub>
   c35dc:	4632      	mov	r2, r6
   c35de:	463b      	mov	r3, r7
   c35e0:	f000 fc66 	bl	c3eb0 <__aeabi_dmul>
   c35e4:	f1bb 3fff 	cmp.w	fp, #4294967295
   c35e8:	4602      	mov	r2, r0
   c35ea:	460b      	mov	r3, r1
   c35ec:	4640      	mov	r0, r8
   c35ee:	4649      	mov	r1, r9
   c35f0:	d062      	beq.n	c36b8 <atan+0x208>
   c35f2:	f000 faa7 	bl	c3b44 <__adddf3>
   c35f6:	4e77      	ldr	r6, [pc, #476]	; (c37d4 <atan+0x324>)
   c35f8:	4622      	mov	r2, r4
   c35fa:	462b      	mov	r3, r5
   c35fc:	f000 fc58 	bl	c3eb0 <__aeabi_dmul>
   c3600:	4b75      	ldr	r3, [pc, #468]	; (c37d8 <atan+0x328>)
   c3602:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c3606:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c360a:	449b      	add	fp, r3
   c360c:	e9db 2300 	ldrd	r2, r3, [fp]
   c3610:	f000 fa96 	bl	c3b40 <__aeabi_dsub>
   c3614:	4622      	mov	r2, r4
   c3616:	462b      	mov	r3, r5
   c3618:	f000 fa92 	bl	c3b40 <__aeabi_dsub>
   c361c:	4602      	mov	r2, r0
   c361e:	460b      	mov	r3, r1
   c3620:	e9d6 0100 	ldrd	r0, r1, [r6]
   c3624:	f000 fa8c 	bl	c3b40 <__aeabi_dsub>
   c3628:	f1ba 0f00 	cmp.w	sl, #0
   c362c:	ec41 0b10 	vmov	d0, r0, r1
   c3630:	f6bf af5e 	bge.w	c34f0 <atan+0x40>
   c3634:	ee10 1a90 	vmov	r1, s1
   c3638:	4602      	mov	r2, r0
   c363a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c363e:	ec43 2b10 	vmov	d0, r2, r3
   c3642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3646:	a35c      	add	r3, pc, #368	; (adr r3, c37b8 <atan+0x308>)
   c3648:	e9d3 2300 	ldrd	r2, r3, [r3]
   c364c:	ee10 0a10 	vmov	r0, s0
   c3650:	4629      	mov	r1, r5
   c3652:	f000 fa77 	bl	c3b44 <__adddf3>
   c3656:	4b61      	ldr	r3, [pc, #388]	; (c37dc <atan+0x32c>)
   c3658:	2200      	movs	r2, #0
   c365a:	f000 feb9 	bl	c43d0 <__aeabi_dcmpgt>
   c365e:	2800      	cmp	r0, #0
   c3660:	f43f af51 	beq.w	c3506 <atan+0x56>
   c3664:	ec45 4b10 	vmov	d0, r4, r5
   c3668:	e742      	b.n	c34f0 <atan+0x40>
   c366a:	ed9f 0b55 	vldr	d0, [pc, #340]	; c37c0 <atan+0x310>
   c366e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3672:	f000 f8bd 	bl	c37f0 <fabs>
   c3676:	4b5a      	ldr	r3, [pc, #360]	; (c37e0 <atan+0x330>)
   c3678:	429e      	cmp	r6, r3
   c367a:	ec55 4b10 	vmov	r4, r5, d0
   c367e:	dc2b      	bgt.n	c36d8 <atan+0x228>
   c3680:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c3684:	429e      	cmp	r6, r3
   c3686:	dc56      	bgt.n	c3736 <atan+0x286>
   c3688:	ee10 2a10 	vmov	r2, s0
   c368c:	462b      	mov	r3, r5
   c368e:	ee10 0a10 	vmov	r0, s0
   c3692:	4629      	mov	r1, r5
   c3694:	f000 fa56 	bl	c3b44 <__adddf3>
   c3698:	4b50      	ldr	r3, [pc, #320]	; (c37dc <atan+0x32c>)
   c369a:	2200      	movs	r2, #0
   c369c:	f000 fa50 	bl	c3b40 <__aeabi_dsub>
   c36a0:	4602      	mov	r2, r0
   c36a2:	460b      	mov	r3, r1
   c36a4:	4620      	mov	r0, r4
   c36a6:	4629      	mov	r1, r5
   c36a8:	4614      	mov	r4, r2
   c36aa:	461d      	mov	r5, r3
   c36ac:	f04f 0b00 	mov.w	fp, #0
   c36b0:	2200      	movs	r2, #0
   c36b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c36b6:	e027      	b.n	c3708 <atan+0x258>
   c36b8:	f000 fa44 	bl	c3b44 <__adddf3>
   c36bc:	4622      	mov	r2, r4
   c36be:	462b      	mov	r3, r5
   c36c0:	f000 fbf6 	bl	c3eb0 <__aeabi_dmul>
   c36c4:	4602      	mov	r2, r0
   c36c6:	460b      	mov	r3, r1
   c36c8:	4620      	mov	r0, r4
   c36ca:	4629      	mov	r1, r5
   c36cc:	f000 fa38 	bl	c3b40 <__aeabi_dsub>
   c36d0:	ec41 0b10 	vmov	d0, r0, r1
   c36d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c36d8:	4b42      	ldr	r3, [pc, #264]	; (c37e4 <atan+0x334>)
   c36da:	429e      	cmp	r6, r3
   c36dc:	da1f      	bge.n	c371e <atan+0x26e>
   c36de:	4b42      	ldr	r3, [pc, #264]	; (c37e8 <atan+0x338>)
   c36e0:	2200      	movs	r2, #0
   c36e2:	4629      	mov	r1, r5
   c36e4:	ee10 0a10 	vmov	r0, s0
   c36e8:	f000 fa2a 	bl	c3b40 <__aeabi_dsub>
   c36ec:	4602      	mov	r2, r0
   c36ee:	460b      	mov	r3, r1
   c36f0:	4620      	mov	r0, r4
   c36f2:	4629      	mov	r1, r5
   c36f4:	4614      	mov	r4, r2
   c36f6:	461d      	mov	r5, r3
   c36f8:	2200      	movs	r2, #0
   c36fa:	4b3b      	ldr	r3, [pc, #236]	; (c37e8 <atan+0x338>)
   c36fc:	f04f 0b02 	mov.w	fp, #2
   c3700:	f000 fbd6 	bl	c3eb0 <__aeabi_dmul>
   c3704:	4b35      	ldr	r3, [pc, #212]	; (c37dc <atan+0x32c>)
   c3706:	2200      	movs	r2, #0
   c3708:	f000 fa1c 	bl	c3b44 <__adddf3>
   c370c:	4602      	mov	r2, r0
   c370e:	460b      	mov	r3, r1
   c3710:	4620      	mov	r0, r4
   c3712:	4629      	mov	r1, r5
   c3714:	f000 fcf6 	bl	c4104 <__aeabi_ddiv>
   c3718:	4604      	mov	r4, r0
   c371a:	460d      	mov	r5, r1
   c371c:	e6f5      	b.n	c350a <atan+0x5a>
   c371e:	462b      	mov	r3, r5
   c3720:	4932      	ldr	r1, [pc, #200]	; (c37ec <atan+0x33c>)
   c3722:	ee10 2a10 	vmov	r2, s0
   c3726:	2000      	movs	r0, #0
   c3728:	f000 fcec 	bl	c4104 <__aeabi_ddiv>
   c372c:	f04f 0b03 	mov.w	fp, #3
   c3730:	4604      	mov	r4, r0
   c3732:	460d      	mov	r5, r1
   c3734:	e6e9      	b.n	c350a <atan+0x5a>
   c3736:	4b29      	ldr	r3, [pc, #164]	; (c37dc <atan+0x32c>)
   c3738:	2200      	movs	r2, #0
   c373a:	4629      	mov	r1, r5
   c373c:	ee10 0a10 	vmov	r0, s0
   c3740:	f000 f9fe 	bl	c3b40 <__aeabi_dsub>
   c3744:	4602      	mov	r2, r0
   c3746:	460b      	mov	r3, r1
   c3748:	4620      	mov	r0, r4
   c374a:	4629      	mov	r1, r5
   c374c:	f04f 0b01 	mov.w	fp, #1
   c3750:	4614      	mov	r4, r2
   c3752:	461d      	mov	r5, r3
   c3754:	e7d6      	b.n	c3704 <atan+0x254>
   c3756:	bf00      	nop
   c3758:	54442d18 	.word	0x54442d18
   c375c:	3ff921fb 	.word	0x3ff921fb
   c3760:	e322da11 	.word	0xe322da11
   c3764:	3f90ad3a 	.word	0x3f90ad3a
   c3768:	24760deb 	.word	0x24760deb
   c376c:	3fa97b4b 	.word	0x3fa97b4b
   c3770:	a0d03d51 	.word	0xa0d03d51
   c3774:	3fb10d66 	.word	0x3fb10d66
   c3778:	c54c206e 	.word	0xc54c206e
   c377c:	3fb745cd 	.word	0x3fb745cd
   c3780:	920083ff 	.word	0x920083ff
   c3784:	3fc24924 	.word	0x3fc24924
   c3788:	5555550d 	.word	0x5555550d
   c378c:	3fd55555 	.word	0x3fd55555
   c3790:	2c6a6c2f 	.word	0x2c6a6c2f
   c3794:	bfa2b444 	.word	0xbfa2b444
   c3798:	52defd9a 	.word	0x52defd9a
   c379c:	3fadde2d 	.word	0x3fadde2d
   c37a0:	af749a6d 	.word	0xaf749a6d
   c37a4:	3fb3b0f2 	.word	0x3fb3b0f2
   c37a8:	fe231671 	.word	0xfe231671
   c37ac:	3fbc71c6 	.word	0x3fbc71c6
   c37b0:	9998ebc4 	.word	0x9998ebc4
   c37b4:	3fc99999 	.word	0x3fc99999
   c37b8:	8800759c 	.word	0x8800759c
   c37bc:	7e37e43c 	.word	0x7e37e43c
   c37c0:	54442d18 	.word	0x54442d18
   c37c4:	bff921fb 	.word	0xbff921fb
   c37c8:	440fffff 	.word	0x440fffff
   c37cc:	7ff00000 	.word	0x7ff00000
   c37d0:	3fdbffff 	.word	0x3fdbffff
   c37d4:	000c8638 	.word	0x000c8638
   c37d8:	000c8658 	.word	0x000c8658
   c37dc:	3ff00000 	.word	0x3ff00000
   c37e0:	3ff2ffff 	.word	0x3ff2ffff
   c37e4:	40038000 	.word	0x40038000
   c37e8:	3ff80000 	.word	0x3ff80000
   c37ec:	bff00000 	.word	0xbff00000

000c37f0 <fabs>:
   c37f0:	ec51 0b10 	vmov	r0, r1, d0
   c37f4:	ee10 2a10 	vmov	r2, s0
   c37f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c37fc:	ec43 2b10 	vmov	d0, r2, r3
   c3800:	4770      	bx	lr
   c3802:	bf00      	nop

000c3804 <atanf>:
   c3804:	b538      	push	{r3, r4, r5, lr}
   c3806:	ee10 5a10 	vmov	r5, s0
   c380a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c380e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c3812:	eef0 7a40 	vmov.f32	s15, s0
   c3816:	db0b      	blt.n	c3830 <atanf+0x2c>
   c3818:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c381c:	dc5b      	bgt.n	c38d6 <atanf+0xd2>
   c381e:	eddf 7a53 	vldr	s15, [pc, #332]	; c396c <atanf+0x168>
   c3822:	ed9f 0a53 	vldr	s0, [pc, #332]	; c3970 <atanf+0x16c>
   c3826:	2d00      	cmp	r5, #0
   c3828:	bfc8      	it	gt
   c382a:	eeb0 0a67 	vmovgt.f32	s0, s15
   c382e:	bd38      	pop	{r3, r4, r5, pc}
   c3830:	4b50      	ldr	r3, [pc, #320]	; (c3974 <atanf+0x170>)
   c3832:	429c      	cmp	r4, r3
   c3834:	dc5e      	bgt.n	c38f4 <atanf+0xf0>
   c3836:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c383a:	db4f      	blt.n	c38dc <atanf+0xd8>
   c383c:	f04f 33ff 	mov.w	r3, #4294967295
   c3840:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c3844:	eddf 4a4c 	vldr	s9, [pc, #304]	; c3978 <atanf+0x174>
   c3848:	eddf 5a4c 	vldr	s11, [pc, #304]	; c397c <atanf+0x178>
   c384c:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c3980 <atanf+0x17c>
   c3850:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c3984 <atanf+0x180>
   c3854:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c3858:	eeb0 6a66 	vmov.f32	s12, s13
   c385c:	eee7 5a24 	vfma.f32	s11, s14, s9
   c3860:	1c5a      	adds	r2, r3, #1
   c3862:	eddf 4a49 	vldr	s9, [pc, #292]	; c3988 <atanf+0x184>
   c3866:	eddf 6a49 	vldr	s13, [pc, #292]	; c398c <atanf+0x188>
   c386a:	eea5 5a87 	vfma.f32	s10, s11, s14
   c386e:	eee7 6a24 	vfma.f32	s13, s14, s9
   c3872:	eddf 5a47 	vldr	s11, [pc, #284]	; c3990 <atanf+0x18c>
   c3876:	eddf 4a47 	vldr	s9, [pc, #284]	; c3994 <atanf+0x190>
   c387a:	eee6 5a87 	vfma.f32	s11, s13, s14
   c387e:	eea5 4a07 	vfma.f32	s8, s10, s14
   c3882:	ed9f 5a45 	vldr	s10, [pc, #276]	; c3998 <atanf+0x194>
   c3886:	eddf 6a45 	vldr	s13, [pc, #276]	; c399c <atanf+0x198>
   c388a:	eea5 5a87 	vfma.f32	s10, s11, s14
   c388e:	eee4 4a07 	vfma.f32	s9, s8, s14
   c3892:	eddf 5a43 	vldr	s11, [pc, #268]	; c39a0 <atanf+0x19c>
   c3896:	eee4 6a87 	vfma.f32	s13, s9, s14
   c389a:	eee5 5a07 	vfma.f32	s11, s10, s14
   c389e:	ee66 6a86 	vmul.f32	s13, s13, s12
   c38a2:	ee25 7a87 	vmul.f32	s14, s11, s14
   c38a6:	d03a      	beq.n	c391e <atanf+0x11a>
   c38a8:	4a3e      	ldr	r2, [pc, #248]	; (c39a4 <atanf+0x1a0>)
   c38aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c38ae:	ee76 6a87 	vadd.f32	s13, s13, s14
   c38b2:	ed92 0a00 	vldr	s0, [r2]
   c38b6:	4a3c      	ldr	r2, [pc, #240]	; (c39a8 <atanf+0x1a4>)
   c38b8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c38bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c38c0:	2d00      	cmp	r5, #0
   c38c2:	ed93 7a00 	vldr	s14, [r3]
   c38c6:	ee70 7a67 	vsub.f32	s15, s0, s15
   c38ca:	ee37 0a67 	vsub.f32	s0, s14, s15
   c38ce:	daae      	bge.n	c382e <atanf+0x2a>
   c38d0:	eeb1 0a40 	vneg.f32	s0, s0
   c38d4:	bd38      	pop	{r3, r4, r5, pc}
   c38d6:	ee30 0a00 	vadd.f32	s0, s0, s0
   c38da:	bd38      	pop	{r3, r4, r5, pc}
   c38dc:	ed9f 7a33 	vldr	s14, [pc, #204]	; c39ac <atanf+0x1a8>
   c38e0:	ee30 7a07 	vadd.f32	s14, s0, s14
   c38e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c38e8:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c38ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c38f0:	dda4      	ble.n	c383c <atanf+0x38>
   c38f2:	bd38      	pop	{r3, r4, r5, pc}
   c38f4:	f000 f860 	bl	c39b8 <fabsf>
   c38f8:	4b2d      	ldr	r3, [pc, #180]	; (c39b0 <atanf+0x1ac>)
   c38fa:	429c      	cmp	r4, r3
   c38fc:	dc16      	bgt.n	c392c <atanf+0x128>
   c38fe:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c3902:	429c      	cmp	r4, r3
   c3904:	dc27      	bgt.n	c3956 <atanf+0x152>
   c3906:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c390a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c390e:	eea0 7a27 	vfma.f32	s14, s0, s15
   c3912:	2300      	movs	r3, #0
   c3914:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3918:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c391c:	e790      	b.n	c3840 <atanf+0x3c>
   c391e:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3922:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c3926:	eeb0 0a67 	vmov.f32	s0, s15
   c392a:	bd38      	pop	{r3, r4, r5, pc}
   c392c:	4b21      	ldr	r3, [pc, #132]	; (c39b4 <atanf+0x1b0>)
   c392e:	429c      	cmp	r4, r3
   c3930:	dc0b      	bgt.n	c394a <atanf+0x146>
   c3932:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c3936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c393a:	eea0 7a27 	vfma.f32	s14, s0, s15
   c393e:	2302      	movs	r3, #2
   c3940:	ee30 0a67 	vsub.f32	s0, s0, s15
   c3944:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c3948:	e77a      	b.n	c3840 <atanf+0x3c>
   c394a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c394e:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3952:	2303      	movs	r3, #3
   c3954:	e774      	b.n	c3840 <atanf+0x3c>
   c3956:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c395a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c395e:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3962:	2301      	movs	r3, #1
   c3964:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3968:	e76a      	b.n	c3840 <atanf+0x3c>
   c396a:	bf00      	nop
   c396c:	3fc90fdb 	.word	0x3fc90fdb
   c3970:	bfc90fdb 	.word	0xbfc90fdb
   c3974:	3edfffff 	.word	0x3edfffff
   c3978:	3c8569d7 	.word	0x3c8569d7
   c397c:	3d4bda59 	.word	0x3d4bda59
   c3980:	3d886b35 	.word	0x3d886b35
   c3984:	3dba2e6e 	.word	0x3dba2e6e
   c3988:	bd15a221 	.word	0xbd15a221
   c398c:	bd6ef16b 	.word	0xbd6ef16b
   c3990:	bd9d8795 	.word	0xbd9d8795
   c3994:	3e124925 	.word	0x3e124925
   c3998:	bde38e38 	.word	0xbde38e38
   c399c:	3eaaaaab 	.word	0x3eaaaaab
   c39a0:	be4ccccd 	.word	0xbe4ccccd
   c39a4:	000c8688 	.word	0x000c8688
   c39a8:	000c8678 	.word	0x000c8678
   c39ac:	7149f2ca 	.word	0x7149f2ca
   c39b0:	3f97ffff 	.word	0x3f97ffff
   c39b4:	401bffff 	.word	0x401bffff

000c39b8 <fabsf>:
   c39b8:	ee10 3a10 	vmov	r3, s0
   c39bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c39c0:	ee00 3a10 	vmov	s0, r3
   c39c4:	4770      	bx	lr
   c39c6:	bf00      	nop

000c39c8 <floorf>:
   c39c8:	ee10 2a10 	vmov	r2, s0
   c39cc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c39d0:	3b7f      	subs	r3, #127	; 0x7f
   c39d2:	2b16      	cmp	r3, #22
   c39d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c39d8:	dc28      	bgt.n	c3a2c <floorf+0x64>
   c39da:	2b00      	cmp	r3, #0
   c39dc:	db18      	blt.n	c3a10 <floorf+0x48>
   c39de:	491a      	ldr	r1, [pc, #104]	; (c3a48 <floorf+0x80>)
   c39e0:	4119      	asrs	r1, r3
   c39e2:	420a      	tst	r2, r1
   c39e4:	d021      	beq.n	c3a2a <floorf+0x62>
   c39e6:	eddf 7a19 	vldr	s15, [pc, #100]	; c3a4c <floorf+0x84>
   c39ea:	ee70 7a27 	vadd.f32	s15, s0, s15
   c39ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c39f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c39f6:	dd18      	ble.n	c3a2a <floorf+0x62>
   c39f8:	2a00      	cmp	r2, #0
   c39fa:	da04      	bge.n	c3a06 <floorf+0x3e>
   c39fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c3a00:	fa40 f303 	asr.w	r3, r0, r3
   c3a04:	441a      	add	r2, r3
   c3a06:	ea22 0301 	bic.w	r3, r2, r1
   c3a0a:	ee00 3a10 	vmov	s0, r3
   c3a0e:	4770      	bx	lr
   c3a10:	eddf 7a0e 	vldr	s15, [pc, #56]	; c3a4c <floorf+0x84>
   c3a14:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3a20:	dd03      	ble.n	c3a2a <floorf+0x62>
   c3a22:	2a00      	cmp	r2, #0
   c3a24:	db08      	blt.n	c3a38 <floorf+0x70>
   c3a26:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3a50 <floorf+0x88>
   c3a2a:	4770      	bx	lr
   c3a2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c3a30:	d3fb      	bcc.n	c3a2a <floorf+0x62>
   c3a32:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3a36:	4770      	bx	lr
   c3a38:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c3a3c:	2900      	cmp	r1, #0
   c3a3e:	bf18      	it	ne
   c3a40:	eeb0 0a67 	vmovne.f32	s0, s15
   c3a44:	4770      	bx	lr
   c3a46:	bf00      	nop
   c3a48:	007fffff 	.word	0x007fffff
   c3a4c:	7149f2ca 	.word	0x7149f2ca
   c3a50:	00000000 	.word	0x00000000

000c3a54 <scalbnf>:
   c3a54:	b082      	sub	sp, #8
   c3a56:	ed8d 0a01 	vstr	s0, [sp, #4]
   c3a5a:	9b01      	ldr	r3, [sp, #4]
   c3a5c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c3a60:	d02a      	beq.n	c3ab8 <scalbnf+0x64>
   c3a62:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c3a66:	d223      	bcs.n	c3ab0 <scalbnf+0x5c>
   c3a68:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c3a6c:	d128      	bne.n	c3ac0 <scalbnf+0x6c>
   c3a6e:	ed9d 7a01 	vldr	s14, [sp, #4]
   c3a72:	eddf 7a2a 	vldr	s15, [pc, #168]	; c3b1c <scalbnf+0xc8>
   c3a76:	4b2a      	ldr	r3, [pc, #168]	; (c3b20 <scalbnf+0xcc>)
   c3a78:	ee67 7a27 	vmul.f32	s15, s14, s15
   c3a7c:	4298      	cmp	r0, r3
   c3a7e:	edcd 7a01 	vstr	s15, [sp, #4]
   c3a82:	db37      	blt.n	c3af4 <scalbnf+0xa0>
   c3a84:	9b01      	ldr	r3, [sp, #4]
   c3a86:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c3a8a:	3a19      	subs	r2, #25
   c3a8c:	4402      	add	r2, r0
   c3a8e:	2afe      	cmp	r2, #254	; 0xfe
   c3a90:	dd1a      	ble.n	c3ac8 <scalbnf+0x74>
   c3a92:	ed9f 0a24 	vldr	s0, [pc, #144]	; c3b24 <scalbnf+0xd0>
   c3a96:	ed9f 7a24 	vldr	s14, [pc, #144]	; c3b28 <scalbnf+0xd4>
   c3a9a:	9b01      	ldr	r3, [sp, #4]
   c3a9c:	2b00      	cmp	r3, #0
   c3a9e:	eef0 7a40 	vmov.f32	s15, s0
   c3aa2:	bfb8      	it	lt
   c3aa4:	eeb0 0a47 	vmovlt.f32	s0, s14
   c3aa8:	ee20 0a27 	vmul.f32	s0, s0, s15
   c3aac:	b002      	add	sp, #8
   c3aae:	4770      	bx	lr
   c3ab0:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3ab4:	b002      	add	sp, #8
   c3ab6:	4770      	bx	lr
   c3ab8:	ed9d 0a01 	vldr	s0, [sp, #4]
   c3abc:	b002      	add	sp, #8
   c3abe:	4770      	bx	lr
   c3ac0:	0dd2      	lsrs	r2, r2, #23
   c3ac2:	4402      	add	r2, r0
   c3ac4:	2afe      	cmp	r2, #254	; 0xfe
   c3ac6:	dce4      	bgt.n	c3a92 <scalbnf+0x3e>
   c3ac8:	2a00      	cmp	r2, #0
   c3aca:	dc0b      	bgt.n	c3ae4 <scalbnf+0x90>
   c3acc:	f112 0f16 	cmn.w	r2, #22
   c3ad0:	da17      	bge.n	c3b02 <scalbnf+0xae>
   c3ad2:	f24c 3350 	movw	r3, #50000	; 0xc350
   c3ad6:	4298      	cmp	r0, r3
   c3ad8:	dcdb      	bgt.n	c3a92 <scalbnf+0x3e>
   c3ada:	ed9f 0a14 	vldr	s0, [pc, #80]	; c3b2c <scalbnf+0xd8>
   c3ade:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3b30 <scalbnf+0xdc>
   c3ae2:	e7da      	b.n	c3a9a <scalbnf+0x46>
   c3ae4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3ae8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3aec:	ee00 3a10 	vmov	s0, r3
   c3af0:	b002      	add	sp, #8
   c3af2:	4770      	bx	lr
   c3af4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c3b2c <scalbnf+0xd8>
   c3af8:	eddd 7a01 	vldr	s15, [sp, #4]
   c3afc:	ee27 0a80 	vmul.f32	s0, s15, s0
   c3b00:	e7d8      	b.n	c3ab4 <scalbnf+0x60>
   c3b02:	3219      	adds	r2, #25
   c3b04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3b08:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3b0c:	eddf 7a09 	vldr	s15, [pc, #36]	; c3b34 <scalbnf+0xe0>
   c3b10:	ee07 3a10 	vmov	s14, r3
   c3b14:	ee27 0a27 	vmul.f32	s0, s14, s15
   c3b18:	e7cc      	b.n	c3ab4 <scalbnf+0x60>
   c3b1a:	bf00      	nop
   c3b1c:	4c000000 	.word	0x4c000000
   c3b20:	ffff3cb0 	.word	0xffff3cb0
   c3b24:	7149f2ca 	.word	0x7149f2ca
   c3b28:	f149f2ca 	.word	0xf149f2ca
   c3b2c:	0da24260 	.word	0x0da24260
   c3b30:	8da24260 	.word	0x8da24260
   c3b34:	33000000 	.word	0x33000000

000c3b38 <__aeabi_drsub>:
   c3b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c3b3c:	e002      	b.n	c3b44 <__adddf3>
   c3b3e:	bf00      	nop

000c3b40 <__aeabi_dsub>:
   c3b40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c3b44 <__adddf3>:
   c3b44:	b530      	push	{r4, r5, lr}
   c3b46:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c3b4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c3b4e:	ea94 0f05 	teq	r4, r5
   c3b52:	bf08      	it	eq
   c3b54:	ea90 0f02 	teqeq	r0, r2
   c3b58:	bf1f      	itttt	ne
   c3b5a:	ea54 0c00 	orrsne.w	ip, r4, r0
   c3b5e:	ea55 0c02 	orrsne.w	ip, r5, r2
   c3b62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c3b66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3b6a:	f000 80e2 	beq.w	c3d32 <__adddf3+0x1ee>
   c3b6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c3b72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c3b76:	bfb8      	it	lt
   c3b78:	426d      	neglt	r5, r5
   c3b7a:	dd0c      	ble.n	c3b96 <__adddf3+0x52>
   c3b7c:	442c      	add	r4, r5
   c3b7e:	ea80 0202 	eor.w	r2, r0, r2
   c3b82:	ea81 0303 	eor.w	r3, r1, r3
   c3b86:	ea82 0000 	eor.w	r0, r2, r0
   c3b8a:	ea83 0101 	eor.w	r1, r3, r1
   c3b8e:	ea80 0202 	eor.w	r2, r0, r2
   c3b92:	ea81 0303 	eor.w	r3, r1, r3
   c3b96:	2d36      	cmp	r5, #54	; 0x36
   c3b98:	bf88      	it	hi
   c3b9a:	bd30      	pophi	{r4, r5, pc}
   c3b9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3ba4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3ba8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3bac:	d002      	beq.n	c3bb4 <__adddf3+0x70>
   c3bae:	4240      	negs	r0, r0
   c3bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3bb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3bb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3bbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3bc0:	d002      	beq.n	c3bc8 <__adddf3+0x84>
   c3bc2:	4252      	negs	r2, r2
   c3bc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3bc8:	ea94 0f05 	teq	r4, r5
   c3bcc:	f000 80a7 	beq.w	c3d1e <__adddf3+0x1da>
   c3bd0:	f1a4 0401 	sub.w	r4, r4, #1
   c3bd4:	f1d5 0e20 	rsbs	lr, r5, #32
   c3bd8:	db0d      	blt.n	c3bf6 <__adddf3+0xb2>
   c3bda:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3bde:	fa22 f205 	lsr.w	r2, r2, r5
   c3be2:	1880      	adds	r0, r0, r2
   c3be4:	f141 0100 	adc.w	r1, r1, #0
   c3be8:	fa03 f20e 	lsl.w	r2, r3, lr
   c3bec:	1880      	adds	r0, r0, r2
   c3bee:	fa43 f305 	asr.w	r3, r3, r5
   c3bf2:	4159      	adcs	r1, r3
   c3bf4:	e00e      	b.n	c3c14 <__adddf3+0xd0>
   c3bf6:	f1a5 0520 	sub.w	r5, r5, #32
   c3bfa:	f10e 0e20 	add.w	lr, lr, #32
   c3bfe:	2a01      	cmp	r2, #1
   c3c00:	fa03 fc0e 	lsl.w	ip, r3, lr
   c3c04:	bf28      	it	cs
   c3c06:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3c0a:	fa43 f305 	asr.w	r3, r3, r5
   c3c0e:	18c0      	adds	r0, r0, r3
   c3c10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c3c14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3c18:	d507      	bpl.n	c3c2a <__adddf3+0xe6>
   c3c1a:	f04f 0e00 	mov.w	lr, #0
   c3c1e:	f1dc 0c00 	rsbs	ip, ip, #0
   c3c22:	eb7e 0000 	sbcs.w	r0, lr, r0
   c3c26:	eb6e 0101 	sbc.w	r1, lr, r1
   c3c2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c3c2e:	d31b      	bcc.n	c3c68 <__adddf3+0x124>
   c3c30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c3c34:	d30c      	bcc.n	c3c50 <__adddf3+0x10c>
   c3c36:	0849      	lsrs	r1, r1, #1
   c3c38:	ea5f 0030 	movs.w	r0, r0, rrx
   c3c3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c3c40:	f104 0401 	add.w	r4, r4, #1
   c3c44:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3c48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3c4c:	f080 809a 	bcs.w	c3d84 <__adddf3+0x240>
   c3c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c3c54:	bf08      	it	eq
   c3c56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3c5a:	f150 0000 	adcs.w	r0, r0, #0
   c3c5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3c62:	ea41 0105 	orr.w	r1, r1, r5
   c3c66:	bd30      	pop	{r4, r5, pc}
   c3c68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3c6c:	4140      	adcs	r0, r0
   c3c6e:	eb41 0101 	adc.w	r1, r1, r1
   c3c72:	3c01      	subs	r4, #1
   c3c74:	bf28      	it	cs
   c3c76:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3c7a:	d2e9      	bcs.n	c3c50 <__adddf3+0x10c>
   c3c7c:	f091 0f00 	teq	r1, #0
   c3c80:	bf04      	itt	eq
   c3c82:	4601      	moveq	r1, r0
   c3c84:	2000      	moveq	r0, #0
   c3c86:	fab1 f381 	clz	r3, r1
   c3c8a:	bf08      	it	eq
   c3c8c:	3320      	addeq	r3, #32
   c3c8e:	f1a3 030b 	sub.w	r3, r3, #11
   c3c92:	f1b3 0220 	subs.w	r2, r3, #32
   c3c96:	da0c      	bge.n	c3cb2 <__adddf3+0x16e>
   c3c98:	320c      	adds	r2, #12
   c3c9a:	dd08      	ble.n	c3cae <__adddf3+0x16a>
   c3c9c:	f102 0c14 	add.w	ip, r2, #20
   c3ca0:	f1c2 020c 	rsb	r2, r2, #12
   c3ca4:	fa01 f00c 	lsl.w	r0, r1, ip
   c3ca8:	fa21 f102 	lsr.w	r1, r1, r2
   c3cac:	e00c      	b.n	c3cc8 <__adddf3+0x184>
   c3cae:	f102 0214 	add.w	r2, r2, #20
   c3cb2:	bfd8      	it	le
   c3cb4:	f1c2 0c20 	rsble	ip, r2, #32
   c3cb8:	fa01 f102 	lsl.w	r1, r1, r2
   c3cbc:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3cc0:	bfdc      	itt	le
   c3cc2:	ea41 010c 	orrle.w	r1, r1, ip
   c3cc6:	4090      	lslle	r0, r2
   c3cc8:	1ae4      	subs	r4, r4, r3
   c3cca:	bfa2      	ittt	ge
   c3ccc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3cd0:	4329      	orrge	r1, r5
   c3cd2:	bd30      	popge	{r4, r5, pc}
   c3cd4:	ea6f 0404 	mvn.w	r4, r4
   c3cd8:	3c1f      	subs	r4, #31
   c3cda:	da1c      	bge.n	c3d16 <__adddf3+0x1d2>
   c3cdc:	340c      	adds	r4, #12
   c3cde:	dc0e      	bgt.n	c3cfe <__adddf3+0x1ba>
   c3ce0:	f104 0414 	add.w	r4, r4, #20
   c3ce4:	f1c4 0220 	rsb	r2, r4, #32
   c3ce8:	fa20 f004 	lsr.w	r0, r0, r4
   c3cec:	fa01 f302 	lsl.w	r3, r1, r2
   c3cf0:	ea40 0003 	orr.w	r0, r0, r3
   c3cf4:	fa21 f304 	lsr.w	r3, r1, r4
   c3cf8:	ea45 0103 	orr.w	r1, r5, r3
   c3cfc:	bd30      	pop	{r4, r5, pc}
   c3cfe:	f1c4 040c 	rsb	r4, r4, #12
   c3d02:	f1c4 0220 	rsb	r2, r4, #32
   c3d06:	fa20 f002 	lsr.w	r0, r0, r2
   c3d0a:	fa01 f304 	lsl.w	r3, r1, r4
   c3d0e:	ea40 0003 	orr.w	r0, r0, r3
   c3d12:	4629      	mov	r1, r5
   c3d14:	bd30      	pop	{r4, r5, pc}
   c3d16:	fa21 f004 	lsr.w	r0, r1, r4
   c3d1a:	4629      	mov	r1, r5
   c3d1c:	bd30      	pop	{r4, r5, pc}
   c3d1e:	f094 0f00 	teq	r4, #0
   c3d22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c3d26:	bf06      	itte	eq
   c3d28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3d2c:	3401      	addeq	r4, #1
   c3d2e:	3d01      	subne	r5, #1
   c3d30:	e74e      	b.n	c3bd0 <__adddf3+0x8c>
   c3d32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3d36:	bf18      	it	ne
   c3d38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3d3c:	d029      	beq.n	c3d92 <__adddf3+0x24e>
   c3d3e:	ea94 0f05 	teq	r4, r5
   c3d42:	bf08      	it	eq
   c3d44:	ea90 0f02 	teqeq	r0, r2
   c3d48:	d005      	beq.n	c3d56 <__adddf3+0x212>
   c3d4a:	ea54 0c00 	orrs.w	ip, r4, r0
   c3d4e:	bf04      	itt	eq
   c3d50:	4619      	moveq	r1, r3
   c3d52:	4610      	moveq	r0, r2
   c3d54:	bd30      	pop	{r4, r5, pc}
   c3d56:	ea91 0f03 	teq	r1, r3
   c3d5a:	bf1e      	ittt	ne
   c3d5c:	2100      	movne	r1, #0
   c3d5e:	2000      	movne	r0, #0
   c3d60:	bd30      	popne	{r4, r5, pc}
   c3d62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c3d66:	d105      	bne.n	c3d74 <__adddf3+0x230>
   c3d68:	0040      	lsls	r0, r0, #1
   c3d6a:	4149      	adcs	r1, r1
   c3d6c:	bf28      	it	cs
   c3d6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c3d72:	bd30      	pop	{r4, r5, pc}
   c3d74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3d78:	bf3c      	itt	cc
   c3d7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3d7e:	bd30      	popcc	{r4, r5, pc}
   c3d80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3d84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3d88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3d8c:	f04f 0000 	mov.w	r0, #0
   c3d90:	bd30      	pop	{r4, r5, pc}
   c3d92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3d96:	bf1a      	itte	ne
   c3d98:	4619      	movne	r1, r3
   c3d9a:	4610      	movne	r0, r2
   c3d9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3da0:	bf1c      	itt	ne
   c3da2:	460b      	movne	r3, r1
   c3da4:	4602      	movne	r2, r0
   c3da6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3daa:	bf06      	itte	eq
   c3dac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3db0:	ea91 0f03 	teqeq	r1, r3
   c3db4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3db8:	bd30      	pop	{r4, r5, pc}
   c3dba:	bf00      	nop

000c3dbc <__aeabi_ui2d>:
   c3dbc:	f090 0f00 	teq	r0, #0
   c3dc0:	bf04      	itt	eq
   c3dc2:	2100      	moveq	r1, #0
   c3dc4:	4770      	bxeq	lr
   c3dc6:	b530      	push	{r4, r5, lr}
   c3dc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3dcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3dd0:	f04f 0500 	mov.w	r5, #0
   c3dd4:	f04f 0100 	mov.w	r1, #0
   c3dd8:	e750      	b.n	c3c7c <__adddf3+0x138>
   c3dda:	bf00      	nop

000c3ddc <__aeabi_i2d>:
   c3ddc:	f090 0f00 	teq	r0, #0
   c3de0:	bf04      	itt	eq
   c3de2:	2100      	moveq	r1, #0
   c3de4:	4770      	bxeq	lr
   c3de6:	b530      	push	{r4, r5, lr}
   c3de8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3dec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3df0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c3df4:	bf48      	it	mi
   c3df6:	4240      	negmi	r0, r0
   c3df8:	f04f 0100 	mov.w	r1, #0
   c3dfc:	e73e      	b.n	c3c7c <__adddf3+0x138>
   c3dfe:	bf00      	nop

000c3e00 <__aeabi_f2d>:
   c3e00:	0042      	lsls	r2, r0, #1
   c3e02:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c3e06:	ea4f 0131 	mov.w	r1, r1, rrx
   c3e0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3e0e:	bf1f      	itttt	ne
   c3e10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c3e14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3e18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3e1c:	4770      	bxne	lr
   c3e1e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c3e22:	bf08      	it	eq
   c3e24:	4770      	bxeq	lr
   c3e26:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3e2a:	bf04      	itt	eq
   c3e2c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3e30:	4770      	bxeq	lr
   c3e32:	b530      	push	{r4, r5, lr}
   c3e34:	f44f 7460 	mov.w	r4, #896	; 0x380
   c3e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3e3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3e40:	e71c      	b.n	c3c7c <__adddf3+0x138>
   c3e42:	bf00      	nop

000c3e44 <__aeabi_ul2d>:
   c3e44:	ea50 0201 	orrs.w	r2, r0, r1
   c3e48:	bf08      	it	eq
   c3e4a:	4770      	bxeq	lr
   c3e4c:	b530      	push	{r4, r5, lr}
   c3e4e:	f04f 0500 	mov.w	r5, #0
   c3e52:	e00a      	b.n	c3e6a <__aeabi_l2d+0x16>

000c3e54 <__aeabi_l2d>:
   c3e54:	ea50 0201 	orrs.w	r2, r0, r1
   c3e58:	bf08      	it	eq
   c3e5a:	4770      	bxeq	lr
   c3e5c:	b530      	push	{r4, r5, lr}
   c3e5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c3e62:	d502      	bpl.n	c3e6a <__aeabi_l2d+0x16>
   c3e64:	4240      	negs	r0, r0
   c3e66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3e6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3e6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3e72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c3e76:	f43f aed8 	beq.w	c3c2a <__adddf3+0xe6>
   c3e7a:	f04f 0203 	mov.w	r2, #3
   c3e7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3e82:	bf18      	it	ne
   c3e84:	3203      	addne	r2, #3
   c3e86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3e8a:	bf18      	it	ne
   c3e8c:	3203      	addne	r2, #3
   c3e8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c3e92:	f1c2 0320 	rsb	r3, r2, #32
   c3e96:	fa00 fc03 	lsl.w	ip, r0, r3
   c3e9a:	fa20 f002 	lsr.w	r0, r0, r2
   c3e9e:	fa01 fe03 	lsl.w	lr, r1, r3
   c3ea2:	ea40 000e 	orr.w	r0, r0, lr
   c3ea6:	fa21 f102 	lsr.w	r1, r1, r2
   c3eaa:	4414      	add	r4, r2
   c3eac:	e6bd      	b.n	c3c2a <__adddf3+0xe6>
   c3eae:	bf00      	nop

000c3eb0 <__aeabi_dmul>:
   c3eb0:	b570      	push	{r4, r5, r6, lr}
   c3eb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3eb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3eba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3ebe:	bf1d      	ittte	ne
   c3ec0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3ec4:	ea94 0f0c 	teqne	r4, ip
   c3ec8:	ea95 0f0c 	teqne	r5, ip
   c3ecc:	f000 f8de 	bleq	c408c <__aeabi_dmul+0x1dc>
   c3ed0:	442c      	add	r4, r5
   c3ed2:	ea81 0603 	eor.w	r6, r1, r3
   c3ed6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3eda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3ede:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c3ee2:	bf18      	it	ne
   c3ee4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3ee8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3ef0:	d038      	beq.n	c3f64 <__aeabi_dmul+0xb4>
   c3ef2:	fba0 ce02 	umull	ip, lr, r0, r2
   c3ef6:	f04f 0500 	mov.w	r5, #0
   c3efa:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3efe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c3f02:	fbe0 e503 	umlal	lr, r5, r0, r3
   c3f06:	f04f 0600 	mov.w	r6, #0
   c3f0a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3f0e:	f09c 0f00 	teq	ip, #0
   c3f12:	bf18      	it	ne
   c3f14:	f04e 0e01 	orrne.w	lr, lr, #1
   c3f18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3f1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3f20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c3f24:	d204      	bcs.n	c3f30 <__aeabi_dmul+0x80>
   c3f26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3f2a:	416d      	adcs	r5, r5
   c3f2c:	eb46 0606 	adc.w	r6, r6, r6
   c3f30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c3f34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c3f38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c3f3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c3f40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c3f44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3f48:	bf88      	it	hi
   c3f4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3f4e:	d81e      	bhi.n	c3f8e <__aeabi_dmul+0xde>
   c3f50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c3f54:	bf08      	it	eq
   c3f56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3f5a:	f150 0000 	adcs.w	r0, r0, #0
   c3f5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3f62:	bd70      	pop	{r4, r5, r6, pc}
   c3f64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3f68:	ea46 0101 	orr.w	r1, r6, r1
   c3f6c:	ea40 0002 	orr.w	r0, r0, r2
   c3f70:	ea81 0103 	eor.w	r1, r1, r3
   c3f74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3f78:	bfc2      	ittt	gt
   c3f7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3f7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3f82:	bd70      	popgt	{r4, r5, r6, pc}
   c3f84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3f88:	f04f 0e00 	mov.w	lr, #0
   c3f8c:	3c01      	subs	r4, #1
   c3f8e:	f300 80ab 	bgt.w	c40e8 <__aeabi_dmul+0x238>
   c3f92:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c3f96:	bfde      	ittt	le
   c3f98:	2000      	movle	r0, #0
   c3f9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3f9e:	bd70      	pople	{r4, r5, r6, pc}
   c3fa0:	f1c4 0400 	rsb	r4, r4, #0
   c3fa4:	3c20      	subs	r4, #32
   c3fa6:	da35      	bge.n	c4014 <__aeabi_dmul+0x164>
   c3fa8:	340c      	adds	r4, #12
   c3faa:	dc1b      	bgt.n	c3fe4 <__aeabi_dmul+0x134>
   c3fac:	f104 0414 	add.w	r4, r4, #20
   c3fb0:	f1c4 0520 	rsb	r5, r4, #32
   c3fb4:	fa00 f305 	lsl.w	r3, r0, r5
   c3fb8:	fa20 f004 	lsr.w	r0, r0, r4
   c3fbc:	fa01 f205 	lsl.w	r2, r1, r5
   c3fc0:	ea40 0002 	orr.w	r0, r0, r2
   c3fc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3fc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3fcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3fd0:	fa21 f604 	lsr.w	r6, r1, r4
   c3fd4:	eb42 0106 	adc.w	r1, r2, r6
   c3fd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3fdc:	bf08      	it	eq
   c3fde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3fe2:	bd70      	pop	{r4, r5, r6, pc}
   c3fe4:	f1c4 040c 	rsb	r4, r4, #12
   c3fe8:	f1c4 0520 	rsb	r5, r4, #32
   c3fec:	fa00 f304 	lsl.w	r3, r0, r4
   c3ff0:	fa20 f005 	lsr.w	r0, r0, r5
   c3ff4:	fa01 f204 	lsl.w	r2, r1, r4
   c3ff8:	ea40 0002 	orr.w	r0, r0, r2
   c3ffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c4004:	f141 0100 	adc.w	r1, r1, #0
   c4008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c400c:	bf08      	it	eq
   c400e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c4012:	bd70      	pop	{r4, r5, r6, pc}
   c4014:	f1c4 0520 	rsb	r5, r4, #32
   c4018:	fa00 f205 	lsl.w	r2, r0, r5
   c401c:	ea4e 0e02 	orr.w	lr, lr, r2
   c4020:	fa20 f304 	lsr.w	r3, r0, r4
   c4024:	fa01 f205 	lsl.w	r2, r1, r5
   c4028:	ea43 0302 	orr.w	r3, r3, r2
   c402c:	fa21 f004 	lsr.w	r0, r1, r4
   c4030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4034:	fa21 f204 	lsr.w	r2, r1, r4
   c4038:	ea20 0002 	bic.w	r0, r0, r2
   c403c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c4040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c4044:	bf08      	it	eq
   c4046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c404a:	bd70      	pop	{r4, r5, r6, pc}
   c404c:	f094 0f00 	teq	r4, #0
   c4050:	d10f      	bne.n	c4072 <__aeabi_dmul+0x1c2>
   c4052:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c4056:	0040      	lsls	r0, r0, #1
   c4058:	eb41 0101 	adc.w	r1, r1, r1
   c405c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4060:	bf08      	it	eq
   c4062:	3c01      	subeq	r4, #1
   c4064:	d0f7      	beq.n	c4056 <__aeabi_dmul+0x1a6>
   c4066:	ea41 0106 	orr.w	r1, r1, r6
   c406a:	f095 0f00 	teq	r5, #0
   c406e:	bf18      	it	ne
   c4070:	4770      	bxne	lr
   c4072:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c4076:	0052      	lsls	r2, r2, #1
   c4078:	eb43 0303 	adc.w	r3, r3, r3
   c407c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c4080:	bf08      	it	eq
   c4082:	3d01      	subeq	r5, #1
   c4084:	d0f7      	beq.n	c4076 <__aeabi_dmul+0x1c6>
   c4086:	ea43 0306 	orr.w	r3, r3, r6
   c408a:	4770      	bx	lr
   c408c:	ea94 0f0c 	teq	r4, ip
   c4090:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c4094:	bf18      	it	ne
   c4096:	ea95 0f0c 	teqne	r5, ip
   c409a:	d00c      	beq.n	c40b6 <__aeabi_dmul+0x206>
   c409c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c40a0:	bf18      	it	ne
   c40a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c40a6:	d1d1      	bne.n	c404c <__aeabi_dmul+0x19c>
   c40a8:	ea81 0103 	eor.w	r1, r1, r3
   c40ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c40b0:	f04f 0000 	mov.w	r0, #0
   c40b4:	bd70      	pop	{r4, r5, r6, pc}
   c40b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c40ba:	bf06      	itte	eq
   c40bc:	4610      	moveq	r0, r2
   c40be:	4619      	moveq	r1, r3
   c40c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c40c4:	d019      	beq.n	c40fa <__aeabi_dmul+0x24a>
   c40c6:	ea94 0f0c 	teq	r4, ip
   c40ca:	d102      	bne.n	c40d2 <__aeabi_dmul+0x222>
   c40cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c40d0:	d113      	bne.n	c40fa <__aeabi_dmul+0x24a>
   c40d2:	ea95 0f0c 	teq	r5, ip
   c40d6:	d105      	bne.n	c40e4 <__aeabi_dmul+0x234>
   c40d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c40dc:	bf1c      	itt	ne
   c40de:	4610      	movne	r0, r2
   c40e0:	4619      	movne	r1, r3
   c40e2:	d10a      	bne.n	c40fa <__aeabi_dmul+0x24a>
   c40e4:	ea81 0103 	eor.w	r1, r1, r3
   c40e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c40ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c40f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c40f4:	f04f 0000 	mov.w	r0, #0
   c40f8:	bd70      	pop	{r4, r5, r6, pc}
   c40fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c40fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c4102:	bd70      	pop	{r4, r5, r6, pc}

000c4104 <__aeabi_ddiv>:
   c4104:	b570      	push	{r4, r5, r6, lr}
   c4106:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c410a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c410e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c4112:	bf1d      	ittte	ne
   c4114:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c4118:	ea94 0f0c 	teqne	r4, ip
   c411c:	ea95 0f0c 	teqne	r5, ip
   c4120:	f000 f8a7 	bleq	c4272 <__aeabi_ddiv+0x16e>
   c4124:	eba4 0405 	sub.w	r4, r4, r5
   c4128:	ea81 0e03 	eor.w	lr, r1, r3
   c412c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c4130:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c4134:	f000 8088 	beq.w	c4248 <__aeabi_ddiv+0x144>
   c4138:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c413c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c4140:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c4144:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c4148:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c414c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c4150:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c4154:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c4158:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c415c:	429d      	cmp	r5, r3
   c415e:	bf08      	it	eq
   c4160:	4296      	cmpeq	r6, r2
   c4162:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c4166:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c416a:	d202      	bcs.n	c4172 <__aeabi_ddiv+0x6e>
   c416c:	085b      	lsrs	r3, r3, #1
   c416e:	ea4f 0232 	mov.w	r2, r2, rrx
   c4172:	1ab6      	subs	r6, r6, r2
   c4174:	eb65 0503 	sbc.w	r5, r5, r3
   c4178:	085b      	lsrs	r3, r3, #1
   c417a:	ea4f 0232 	mov.w	r2, r2, rrx
   c417e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c4182:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c4186:	ebb6 0e02 	subs.w	lr, r6, r2
   c418a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c418e:	bf22      	ittt	cs
   c4190:	1ab6      	subcs	r6, r6, r2
   c4192:	4675      	movcs	r5, lr
   c4194:	ea40 000c 	orrcs.w	r0, r0, ip
   c4198:	085b      	lsrs	r3, r3, #1
   c419a:	ea4f 0232 	mov.w	r2, r2, rrx
   c419e:	ebb6 0e02 	subs.w	lr, r6, r2
   c41a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c41a6:	bf22      	ittt	cs
   c41a8:	1ab6      	subcs	r6, r6, r2
   c41aa:	4675      	movcs	r5, lr
   c41ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c41b0:	085b      	lsrs	r3, r3, #1
   c41b2:	ea4f 0232 	mov.w	r2, r2, rrx
   c41b6:	ebb6 0e02 	subs.w	lr, r6, r2
   c41ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   c41be:	bf22      	ittt	cs
   c41c0:	1ab6      	subcs	r6, r6, r2
   c41c2:	4675      	movcs	r5, lr
   c41c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c41c8:	085b      	lsrs	r3, r3, #1
   c41ca:	ea4f 0232 	mov.w	r2, r2, rrx
   c41ce:	ebb6 0e02 	subs.w	lr, r6, r2
   c41d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c41d6:	bf22      	ittt	cs
   c41d8:	1ab6      	subcs	r6, r6, r2
   c41da:	4675      	movcs	r5, lr
   c41dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c41e0:	ea55 0e06 	orrs.w	lr, r5, r6
   c41e4:	d018      	beq.n	c4218 <__aeabi_ddiv+0x114>
   c41e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c41ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c41ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c41f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c41f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c41fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c41fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c4202:	d1c0      	bne.n	c4186 <__aeabi_ddiv+0x82>
   c4204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4208:	d10b      	bne.n	c4222 <__aeabi_ddiv+0x11e>
   c420a:	ea41 0100 	orr.w	r1, r1, r0
   c420e:	f04f 0000 	mov.w	r0, #0
   c4212:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c4216:	e7b6      	b.n	c4186 <__aeabi_ddiv+0x82>
   c4218:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c421c:	bf04      	itt	eq
   c421e:	4301      	orreq	r1, r0
   c4220:	2000      	moveq	r0, #0
   c4222:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c4226:	bf88      	it	hi
   c4228:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c422c:	f63f aeaf 	bhi.w	c3f8e <__aeabi_dmul+0xde>
   c4230:	ebb5 0c03 	subs.w	ip, r5, r3
   c4234:	bf04      	itt	eq
   c4236:	ebb6 0c02 	subseq.w	ip, r6, r2
   c423a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c423e:	f150 0000 	adcs.w	r0, r0, #0
   c4242:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c4246:	bd70      	pop	{r4, r5, r6, pc}
   c4248:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c424c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c4250:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c4254:	bfc2      	ittt	gt
   c4256:	ebd4 050c 	rsbsgt	r5, r4, ip
   c425a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c425e:	bd70      	popgt	{r4, r5, r6, pc}
   c4260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4264:	f04f 0e00 	mov.w	lr, #0
   c4268:	3c01      	subs	r4, #1
   c426a:	e690      	b.n	c3f8e <__aeabi_dmul+0xde>
   c426c:	ea45 0e06 	orr.w	lr, r5, r6
   c4270:	e68d      	b.n	c3f8e <__aeabi_dmul+0xde>
   c4272:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c4276:	ea94 0f0c 	teq	r4, ip
   c427a:	bf08      	it	eq
   c427c:	ea95 0f0c 	teqeq	r5, ip
   c4280:	f43f af3b 	beq.w	c40fa <__aeabi_dmul+0x24a>
   c4284:	ea94 0f0c 	teq	r4, ip
   c4288:	d10a      	bne.n	c42a0 <__aeabi_ddiv+0x19c>
   c428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c428e:	f47f af34 	bne.w	c40fa <__aeabi_dmul+0x24a>
   c4292:	ea95 0f0c 	teq	r5, ip
   c4296:	f47f af25 	bne.w	c40e4 <__aeabi_dmul+0x234>
   c429a:	4610      	mov	r0, r2
   c429c:	4619      	mov	r1, r3
   c429e:	e72c      	b.n	c40fa <__aeabi_dmul+0x24a>
   c42a0:	ea95 0f0c 	teq	r5, ip
   c42a4:	d106      	bne.n	c42b4 <__aeabi_ddiv+0x1b0>
   c42a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c42aa:	f43f aefd 	beq.w	c40a8 <__aeabi_dmul+0x1f8>
   c42ae:	4610      	mov	r0, r2
   c42b0:	4619      	mov	r1, r3
   c42b2:	e722      	b.n	c40fa <__aeabi_dmul+0x24a>
   c42b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c42b8:	bf18      	it	ne
   c42ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c42be:	f47f aec5 	bne.w	c404c <__aeabi_dmul+0x19c>
   c42c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c42c6:	f47f af0d 	bne.w	c40e4 <__aeabi_dmul+0x234>
   c42ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c42ce:	f47f aeeb 	bne.w	c40a8 <__aeabi_dmul+0x1f8>
   c42d2:	e712      	b.n	c40fa <__aeabi_dmul+0x24a>

000c42d4 <__gedf2>:
   c42d4:	f04f 3cff 	mov.w	ip, #4294967295
   c42d8:	e006      	b.n	c42e8 <__cmpdf2+0x4>
   c42da:	bf00      	nop

000c42dc <__ledf2>:
   c42dc:	f04f 0c01 	mov.w	ip, #1
   c42e0:	e002      	b.n	c42e8 <__cmpdf2+0x4>
   c42e2:	bf00      	nop

000c42e4 <__cmpdf2>:
   c42e4:	f04f 0c01 	mov.w	ip, #1
   c42e8:	f84d cd04 	str.w	ip, [sp, #-4]!
   c42ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c42f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c42f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c42f8:	bf18      	it	ne
   c42fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c42fe:	d01b      	beq.n	c4338 <__cmpdf2+0x54>
   c4300:	b001      	add	sp, #4
   c4302:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c4306:	bf0c      	ite	eq
   c4308:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c430c:	ea91 0f03 	teqne	r1, r3
   c4310:	bf02      	ittt	eq
   c4312:	ea90 0f02 	teqeq	r0, r2
   c4316:	2000      	moveq	r0, #0
   c4318:	4770      	bxeq	lr
   c431a:	f110 0f00 	cmn.w	r0, #0
   c431e:	ea91 0f03 	teq	r1, r3
   c4322:	bf58      	it	pl
   c4324:	4299      	cmppl	r1, r3
   c4326:	bf08      	it	eq
   c4328:	4290      	cmpeq	r0, r2
   c432a:	bf2c      	ite	cs
   c432c:	17d8      	asrcs	r0, r3, #31
   c432e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c4332:	f040 0001 	orr.w	r0, r0, #1
   c4336:	4770      	bx	lr
   c4338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c433c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4340:	d102      	bne.n	c4348 <__cmpdf2+0x64>
   c4342:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c4346:	d107      	bne.n	c4358 <__cmpdf2+0x74>
   c4348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c434c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4350:	d1d6      	bne.n	c4300 <__cmpdf2+0x1c>
   c4352:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4356:	d0d3      	beq.n	c4300 <__cmpdf2+0x1c>
   c4358:	f85d 0b04 	ldr.w	r0, [sp], #4
   c435c:	4770      	bx	lr
   c435e:	bf00      	nop

000c4360 <__aeabi_cdrcmple>:
   c4360:	4684      	mov	ip, r0
   c4362:	4610      	mov	r0, r2
   c4364:	4662      	mov	r2, ip
   c4366:	468c      	mov	ip, r1
   c4368:	4619      	mov	r1, r3
   c436a:	4663      	mov	r3, ip
   c436c:	e000      	b.n	c4370 <__aeabi_cdcmpeq>
   c436e:	bf00      	nop

000c4370 <__aeabi_cdcmpeq>:
   c4370:	b501      	push	{r0, lr}
   c4372:	f7ff ffb7 	bl	c42e4 <__cmpdf2>
   c4376:	2800      	cmp	r0, #0
   c4378:	bf48      	it	mi
   c437a:	f110 0f00 	cmnmi.w	r0, #0
   c437e:	bd01      	pop	{r0, pc}

000c4380 <__aeabi_dcmpeq>:
   c4380:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4384:	f7ff fff4 	bl	c4370 <__aeabi_cdcmpeq>
   c4388:	bf0c      	ite	eq
   c438a:	2001      	moveq	r0, #1
   c438c:	2000      	movne	r0, #0
   c438e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4392:	bf00      	nop

000c4394 <__aeabi_dcmplt>:
   c4394:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4398:	f7ff ffea 	bl	c4370 <__aeabi_cdcmpeq>
   c439c:	bf34      	ite	cc
   c439e:	2001      	movcc	r0, #1
   c43a0:	2000      	movcs	r0, #0
   c43a2:	f85d fb08 	ldr.w	pc, [sp], #8
   c43a6:	bf00      	nop

000c43a8 <__aeabi_dcmple>:
   c43a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c43ac:	f7ff ffe0 	bl	c4370 <__aeabi_cdcmpeq>
   c43b0:	bf94      	ite	ls
   c43b2:	2001      	movls	r0, #1
   c43b4:	2000      	movhi	r0, #0
   c43b6:	f85d fb08 	ldr.w	pc, [sp], #8
   c43ba:	bf00      	nop

000c43bc <__aeabi_dcmpge>:
   c43bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   c43c0:	f7ff ffce 	bl	c4360 <__aeabi_cdrcmple>
   c43c4:	bf94      	ite	ls
   c43c6:	2001      	movls	r0, #1
   c43c8:	2000      	movhi	r0, #0
   c43ca:	f85d fb08 	ldr.w	pc, [sp], #8
   c43ce:	bf00      	nop

000c43d0 <__aeabi_dcmpgt>:
   c43d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c43d4:	f7ff ffc4 	bl	c4360 <__aeabi_cdrcmple>
   c43d8:	bf34      	ite	cc
   c43da:	2001      	movcc	r0, #1
   c43dc:	2000      	movcs	r0, #0
   c43de:	f85d fb08 	ldr.w	pc, [sp], #8
   c43e2:	bf00      	nop

000c43e4 <__aeabi_dcmpun>:
   c43e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c43e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c43ec:	d102      	bne.n	c43f4 <__aeabi_dcmpun+0x10>
   c43ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c43f2:	d10a      	bne.n	c440a <__aeabi_dcmpun+0x26>
   c43f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c43f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c43fc:	d102      	bne.n	c4404 <__aeabi_dcmpun+0x20>
   c43fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4402:	d102      	bne.n	c440a <__aeabi_dcmpun+0x26>
   c4404:	f04f 0000 	mov.w	r0, #0
   c4408:	4770      	bx	lr
   c440a:	f04f 0001 	mov.w	r0, #1
   c440e:	4770      	bx	lr

000c4410 <__aeabi_d2iz>:
   c4410:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c4414:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c4418:	d215      	bcs.n	c4446 <__aeabi_d2iz+0x36>
   c441a:	d511      	bpl.n	c4440 <__aeabi_d2iz+0x30>
   c441c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4420:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c4424:	d912      	bls.n	c444c <__aeabi_d2iz+0x3c>
   c4426:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c442a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c442e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c4432:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c4436:	fa23 f002 	lsr.w	r0, r3, r2
   c443a:	bf18      	it	ne
   c443c:	4240      	negne	r0, r0
   c443e:	4770      	bx	lr
   c4440:	f04f 0000 	mov.w	r0, #0
   c4444:	4770      	bx	lr
   c4446:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c444a:	d105      	bne.n	c4458 <__aeabi_d2iz+0x48>
   c444c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c4450:	bf08      	it	eq
   c4452:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c4456:	4770      	bx	lr
   c4458:	f04f 0000 	mov.w	r0, #0
   c445c:	4770      	bx	lr
   c445e:	bf00      	nop

000c4460 <__aeabi_d2uiz>:
   c4460:	004a      	lsls	r2, r1, #1
   c4462:	d211      	bcs.n	c4488 <__aeabi_d2uiz+0x28>
   c4464:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c4468:	d211      	bcs.n	c448e <__aeabi_d2uiz+0x2e>
   c446a:	d50d      	bpl.n	c4488 <__aeabi_d2uiz+0x28>
   c446c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4470:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c4474:	d40e      	bmi.n	c4494 <__aeabi_d2uiz+0x34>
   c4476:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c447a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c447e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c4482:	fa23 f002 	lsr.w	r0, r3, r2
   c4486:	4770      	bx	lr
   c4488:	f04f 0000 	mov.w	r0, #0
   c448c:	4770      	bx	lr
   c448e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c4492:	d102      	bne.n	c449a <__aeabi_d2uiz+0x3a>
   c4494:	f04f 30ff 	mov.w	r0, #4294967295
   c4498:	4770      	bx	lr
   c449a:	f04f 0000 	mov.w	r0, #0
   c449e:	4770      	bx	lr

000c44a0 <__aeabi_d2f>:
   c44a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c44a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c44a8:	bf24      	itt	cs
   c44aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c44ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c44b2:	d90d      	bls.n	c44d0 <__aeabi_d2f+0x30>
   c44b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c44b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c44bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c44c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c44c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c44c8:	bf08      	it	eq
   c44ca:	f020 0001 	biceq.w	r0, r0, #1
   c44ce:	4770      	bx	lr
   c44d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c44d4:	d121      	bne.n	c451a <__aeabi_d2f+0x7a>
   c44d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c44da:	bfbc      	itt	lt
   c44dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c44e0:	4770      	bxlt	lr
   c44e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c44e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c44ea:	f1c2 0218 	rsb	r2, r2, #24
   c44ee:	f1c2 0c20 	rsb	ip, r2, #32
   c44f2:	fa10 f30c 	lsls.w	r3, r0, ip
   c44f6:	fa20 f002 	lsr.w	r0, r0, r2
   c44fa:	bf18      	it	ne
   c44fc:	f040 0001 	orrne.w	r0, r0, #1
   c4500:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c4504:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c4508:	fa03 fc0c 	lsl.w	ip, r3, ip
   c450c:	ea40 000c 	orr.w	r0, r0, ip
   c4510:	fa23 f302 	lsr.w	r3, r3, r2
   c4514:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c4518:	e7cc      	b.n	c44b4 <__aeabi_d2f+0x14>
   c451a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c451e:	d107      	bne.n	c4530 <__aeabi_d2f+0x90>
   c4520:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c4524:	bf1e      	ittt	ne
   c4526:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c452a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c452e:	4770      	bxne	lr
   c4530:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c4534:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c4538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c453c:	4770      	bx	lr
   c453e:	bf00      	nop

000c4540 <__aeabi_d2ulz>:
   c4540:	b5d0      	push	{r4, r6, r7, lr}
   c4542:	4b0c      	ldr	r3, [pc, #48]	; (c4574 <__aeabi_d2ulz+0x34>)
   c4544:	2200      	movs	r2, #0
   c4546:	4606      	mov	r6, r0
   c4548:	460f      	mov	r7, r1
   c454a:	f7ff fcb1 	bl	c3eb0 <__aeabi_dmul>
   c454e:	f7ff ff87 	bl	c4460 <__aeabi_d2uiz>
   c4552:	4604      	mov	r4, r0
   c4554:	f7ff fc32 	bl	c3dbc <__aeabi_ui2d>
   c4558:	4b07      	ldr	r3, [pc, #28]	; (c4578 <__aeabi_d2ulz+0x38>)
   c455a:	2200      	movs	r2, #0
   c455c:	f7ff fca8 	bl	c3eb0 <__aeabi_dmul>
   c4560:	4602      	mov	r2, r0
   c4562:	460b      	mov	r3, r1
   c4564:	4630      	mov	r0, r6
   c4566:	4639      	mov	r1, r7
   c4568:	f7ff faea 	bl	c3b40 <__aeabi_dsub>
   c456c:	f7ff ff78 	bl	c4460 <__aeabi_d2uiz>
   c4570:	4621      	mov	r1, r4
   c4572:	bdd0      	pop	{r4, r6, r7, pc}
   c4574:	3df00000 	.word	0x3df00000
   c4578:	41f00000 	.word	0x41f00000

000c457c <atexit>:
   c457c:	2300      	movs	r3, #0
   c457e:	4601      	mov	r1, r0
   c4580:	461a      	mov	r2, r3
   c4582:	4618      	mov	r0, r3
   c4584:	f001 b806 	b.w	c5594 <__register_exitproc>

000c4588 <atof>:
   c4588:	2100      	movs	r1, #0
   c458a:	f000 bf6b 	b.w	c5464 <strtod>

000c458e <atoi>:
   c458e:	220a      	movs	r2, #10
   c4590:	2100      	movs	r1, #0
   c4592:	f000 bff5 	b.w	c5580 <strtol>
	...

000c4598 <isprint>:
   c4598:	4b02      	ldr	r3, [pc, #8]	; (c45a4 <isprint+0xc>)
   c459a:	4418      	add	r0, r3
   c459c:	7840      	ldrb	r0, [r0, #1]
   c459e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c45a2:	4770      	bx	lr
   c45a4:	000c8788 	.word	0x000c8788

000c45a8 <memcmp>:
   c45a8:	b510      	push	{r4, lr}
   c45aa:	3901      	subs	r1, #1
   c45ac:	4402      	add	r2, r0
   c45ae:	4290      	cmp	r0, r2
   c45b0:	d101      	bne.n	c45b6 <memcmp+0xe>
   c45b2:	2000      	movs	r0, #0
   c45b4:	e005      	b.n	c45c2 <memcmp+0x1a>
   c45b6:	7803      	ldrb	r3, [r0, #0]
   c45b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c45bc:	42a3      	cmp	r3, r4
   c45be:	d001      	beq.n	c45c4 <memcmp+0x1c>
   c45c0:	1b18      	subs	r0, r3, r4
   c45c2:	bd10      	pop	{r4, pc}
   c45c4:	3001      	adds	r0, #1
   c45c6:	e7f2      	b.n	c45ae <memcmp+0x6>

000c45c8 <memcpy>:
   c45c8:	440a      	add	r2, r1
   c45ca:	4291      	cmp	r1, r2
   c45cc:	f100 33ff 	add.w	r3, r0, #4294967295
   c45d0:	d100      	bne.n	c45d4 <memcpy+0xc>
   c45d2:	4770      	bx	lr
   c45d4:	b510      	push	{r4, lr}
   c45d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   c45da:	f803 4f01 	strb.w	r4, [r3, #1]!
   c45de:	4291      	cmp	r1, r2
   c45e0:	d1f9      	bne.n	c45d6 <memcpy+0xe>
   c45e2:	bd10      	pop	{r4, pc}

000c45e4 <memmove>:
   c45e4:	4288      	cmp	r0, r1
   c45e6:	b510      	push	{r4, lr}
   c45e8:	eb01 0402 	add.w	r4, r1, r2
   c45ec:	d902      	bls.n	c45f4 <memmove+0x10>
   c45ee:	4284      	cmp	r4, r0
   c45f0:	4623      	mov	r3, r4
   c45f2:	d807      	bhi.n	c4604 <memmove+0x20>
   c45f4:	1e43      	subs	r3, r0, #1
   c45f6:	42a1      	cmp	r1, r4
   c45f8:	d008      	beq.n	c460c <memmove+0x28>
   c45fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   c45fe:	f803 2f01 	strb.w	r2, [r3, #1]!
   c4602:	e7f8      	b.n	c45f6 <memmove+0x12>
   c4604:	4402      	add	r2, r0
   c4606:	4601      	mov	r1, r0
   c4608:	428a      	cmp	r2, r1
   c460a:	d100      	bne.n	c460e <memmove+0x2a>
   c460c:	bd10      	pop	{r4, pc}
   c460e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c4612:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c4616:	e7f7      	b.n	c4608 <memmove+0x24>

000c4618 <memset>:
   c4618:	4402      	add	r2, r0
   c461a:	4603      	mov	r3, r0
   c461c:	4293      	cmp	r3, r2
   c461e:	d100      	bne.n	c4622 <memset+0xa>
   c4620:	4770      	bx	lr
   c4622:	f803 1b01 	strb.w	r1, [r3], #1
   c4626:	e7f9      	b.n	c461c <memset+0x4>

000c4628 <srand>:
   c4628:	b538      	push	{r3, r4, r5, lr}
   c462a:	4b10      	ldr	r3, [pc, #64]	; (c466c <srand+0x44>)
   c462c:	681d      	ldr	r5, [r3, #0]
   c462e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c4630:	4604      	mov	r4, r0
   c4632:	b9b3      	cbnz	r3, c4662 <srand+0x3a>
   c4634:	2018      	movs	r0, #24
   c4636:	f7f9 fe75 	bl	be324 <malloc>
   c463a:	4602      	mov	r2, r0
   c463c:	63a8      	str	r0, [r5, #56]	; 0x38
   c463e:	b920      	cbnz	r0, c464a <srand+0x22>
   c4640:	4b0b      	ldr	r3, [pc, #44]	; (c4670 <srand+0x48>)
   c4642:	480c      	ldr	r0, [pc, #48]	; (c4674 <srand+0x4c>)
   c4644:	2142      	movs	r1, #66	; 0x42
   c4646:	f7f9 febd 	bl	be3c4 <__assert_func>
   c464a:	490b      	ldr	r1, [pc, #44]	; (c4678 <srand+0x50>)
   c464c:	4b0b      	ldr	r3, [pc, #44]	; (c467c <srand+0x54>)
   c464e:	e9c0 1300 	strd	r1, r3, [r0]
   c4652:	4b0b      	ldr	r3, [pc, #44]	; (c4680 <srand+0x58>)
   c4654:	6083      	str	r3, [r0, #8]
   c4656:	230b      	movs	r3, #11
   c4658:	8183      	strh	r3, [r0, #12]
   c465a:	2100      	movs	r1, #0
   c465c:	2001      	movs	r0, #1
   c465e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c4662:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c4664:	2200      	movs	r2, #0
   c4666:	611c      	str	r4, [r3, #16]
   c4668:	615a      	str	r2, [r3, #20]
   c466a:	bd38      	pop	{r3, r4, r5, pc}
   c466c:	2003db50 	.word	0x2003db50
   c4670:	000c8698 	.word	0x000c8698
   c4674:	000c86af 	.word	0x000c86af
   c4678:	abcd330e 	.word	0xabcd330e
   c467c:	e66d1234 	.word	0xe66d1234
   c4680:	0005deec 	.word	0x0005deec

000c4684 <strcat>:
   c4684:	b510      	push	{r4, lr}
   c4686:	4602      	mov	r2, r0
   c4688:	7814      	ldrb	r4, [r2, #0]
   c468a:	4613      	mov	r3, r2
   c468c:	3201      	adds	r2, #1
   c468e:	2c00      	cmp	r4, #0
   c4690:	d1fa      	bne.n	c4688 <strcat+0x4>
   c4692:	3b01      	subs	r3, #1
   c4694:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4698:	f803 2f01 	strb.w	r2, [r3, #1]!
   c469c:	2a00      	cmp	r2, #0
   c469e:	d1f9      	bne.n	c4694 <strcat+0x10>
   c46a0:	bd10      	pop	{r4, pc}

000c46a2 <strchr>:
   c46a2:	b2c9      	uxtb	r1, r1
   c46a4:	4603      	mov	r3, r0
   c46a6:	f810 2b01 	ldrb.w	r2, [r0], #1
   c46aa:	b11a      	cbz	r2, c46b4 <strchr+0x12>
   c46ac:	428a      	cmp	r2, r1
   c46ae:	d1f9      	bne.n	c46a4 <strchr+0x2>
   c46b0:	4618      	mov	r0, r3
   c46b2:	4770      	bx	lr
   c46b4:	2900      	cmp	r1, #0
   c46b6:	bf18      	it	ne
   c46b8:	2300      	movne	r3, #0
   c46ba:	e7f9      	b.n	c46b0 <strchr+0xe>

000c46bc <strchrnul>:
   c46bc:	b510      	push	{r4, lr}
   c46be:	4604      	mov	r4, r0
   c46c0:	f7ff ffef 	bl	c46a2 <strchr>
   c46c4:	b918      	cbnz	r0, c46ce <strchrnul+0x12>
   c46c6:	4620      	mov	r0, r4
   c46c8:	f000 f831 	bl	c472e <strlen>
   c46cc:	4420      	add	r0, r4
   c46ce:	bd10      	pop	{r4, pc}

000c46d0 <strcmp>:
   c46d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   c46d4:	f811 3b01 	ldrb.w	r3, [r1], #1
   c46d8:	2a01      	cmp	r2, #1
   c46da:	bf28      	it	cs
   c46dc:	429a      	cmpcs	r2, r3
   c46de:	d0f7      	beq.n	c46d0 <strcmp>
   c46e0:	1ad0      	subs	r0, r2, r3
   c46e2:	4770      	bx	lr

000c46e4 <strcpy>:
   c46e4:	4603      	mov	r3, r0
   c46e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   c46ea:	f803 2b01 	strb.w	r2, [r3], #1
   c46ee:	2a00      	cmp	r2, #0
   c46f0:	d1f9      	bne.n	c46e6 <strcpy+0x2>
   c46f2:	4770      	bx	lr

000c46f4 <strdup>:
   c46f4:	4b02      	ldr	r3, [pc, #8]	; (c4700 <strdup+0xc>)
   c46f6:	4601      	mov	r1, r0
   c46f8:	6818      	ldr	r0, [r3, #0]
   c46fa:	f000 b803 	b.w	c4704 <_strdup_r>
   c46fe:	bf00      	nop
   c4700:	2003db50 	.word	0x2003db50

000c4704 <_strdup_r>:
   c4704:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4706:	4604      	mov	r4, r0
   c4708:	4608      	mov	r0, r1
   c470a:	460d      	mov	r5, r1
   c470c:	f000 f80f 	bl	c472e <strlen>
   c4710:	1c42      	adds	r2, r0, #1
   c4712:	4611      	mov	r1, r2
   c4714:	4620      	mov	r0, r4
   c4716:	9201      	str	r2, [sp, #4]
   c4718:	f7f9 fe44 	bl	be3a4 <_malloc_r>
   c471c:	4604      	mov	r4, r0
   c471e:	b118      	cbz	r0, c4728 <_strdup_r+0x24>
   c4720:	9a01      	ldr	r2, [sp, #4]
   c4722:	4629      	mov	r1, r5
   c4724:	f7ff ff50 	bl	c45c8 <memcpy>
   c4728:	4620      	mov	r0, r4
   c472a:	b003      	add	sp, #12
   c472c:	bd30      	pop	{r4, r5, pc}

000c472e <strlen>:
   c472e:	4603      	mov	r3, r0
   c4730:	f813 2b01 	ldrb.w	r2, [r3], #1
   c4734:	2a00      	cmp	r2, #0
   c4736:	d1fb      	bne.n	c4730 <strlen+0x2>
   c4738:	1a18      	subs	r0, r3, r0
   c473a:	3801      	subs	r0, #1
   c473c:	4770      	bx	lr
	...

000c4740 <strlwr>:
   c4740:	b510      	push	{r4, lr}
   c4742:	4c07      	ldr	r4, [pc, #28]	; (c4760 <strlwr+0x20>)
   c4744:	1e42      	subs	r2, r0, #1
   c4746:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c474a:	b903      	cbnz	r3, c474e <strlwr+0xe>
   c474c:	bd10      	pop	{r4, pc}
   c474e:	5ce1      	ldrb	r1, [r4, r3]
   c4750:	f001 0103 	and.w	r1, r1, #3
   c4754:	2901      	cmp	r1, #1
   c4756:	bf08      	it	eq
   c4758:	3320      	addeq	r3, #32
   c475a:	7013      	strb	r3, [r2, #0]
   c475c:	e7f3      	b.n	c4746 <strlwr+0x6>
   c475e:	bf00      	nop
   c4760:	000c8789 	.word	0x000c8789

000c4764 <strncmp>:
   c4764:	b510      	push	{r4, lr}
   c4766:	b17a      	cbz	r2, c4788 <strncmp+0x24>
   c4768:	4603      	mov	r3, r0
   c476a:	3901      	subs	r1, #1
   c476c:	1884      	adds	r4, r0, r2
   c476e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c4772:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c4776:	4290      	cmp	r0, r2
   c4778:	d101      	bne.n	c477e <strncmp+0x1a>
   c477a:	42a3      	cmp	r3, r4
   c477c:	d101      	bne.n	c4782 <strncmp+0x1e>
   c477e:	1a80      	subs	r0, r0, r2
   c4780:	bd10      	pop	{r4, pc}
   c4782:	2800      	cmp	r0, #0
   c4784:	d1f3      	bne.n	c476e <strncmp+0xa>
   c4786:	e7fa      	b.n	c477e <strncmp+0x1a>
   c4788:	4610      	mov	r0, r2
   c478a:	e7f9      	b.n	c4780 <strncmp+0x1c>

000c478c <strncpy>:
   c478c:	b510      	push	{r4, lr}
   c478e:	3901      	subs	r1, #1
   c4790:	4603      	mov	r3, r0
   c4792:	b132      	cbz	r2, c47a2 <strncpy+0x16>
   c4794:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c4798:	f803 4b01 	strb.w	r4, [r3], #1
   c479c:	3a01      	subs	r2, #1
   c479e:	2c00      	cmp	r4, #0
   c47a0:	d1f7      	bne.n	c4792 <strncpy+0x6>
   c47a2:	441a      	add	r2, r3
   c47a4:	2100      	movs	r1, #0
   c47a6:	4293      	cmp	r3, r2
   c47a8:	d100      	bne.n	c47ac <strncpy+0x20>
   c47aa:	bd10      	pop	{r4, pc}
   c47ac:	f803 1b01 	strb.w	r1, [r3], #1
   c47b0:	e7f9      	b.n	c47a6 <strncpy+0x1a>

000c47b2 <strnlen>:
   c47b2:	b510      	push	{r4, lr}
   c47b4:	4602      	mov	r2, r0
   c47b6:	4401      	add	r1, r0
   c47b8:	428a      	cmp	r2, r1
   c47ba:	4613      	mov	r3, r2
   c47bc:	d003      	beq.n	c47c6 <strnlen+0x14>
   c47be:	781c      	ldrb	r4, [r3, #0]
   c47c0:	3201      	adds	r2, #1
   c47c2:	2c00      	cmp	r4, #0
   c47c4:	d1f8      	bne.n	c47b8 <strnlen+0x6>
   c47c6:	1a18      	subs	r0, r3, r0
   c47c8:	bd10      	pop	{r4, pc}

000c47ca <strrchr>:
   c47ca:	b538      	push	{r3, r4, r5, lr}
   c47cc:	4603      	mov	r3, r0
   c47ce:	460c      	mov	r4, r1
   c47d0:	b969      	cbnz	r1, c47ee <strrchr+0x24>
   c47d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c47d6:	f7ff bf64 	b.w	c46a2 <strchr>
   c47da:	1c43      	adds	r3, r0, #1
   c47dc:	4605      	mov	r5, r0
   c47de:	4621      	mov	r1, r4
   c47e0:	4618      	mov	r0, r3
   c47e2:	f7ff ff5e 	bl	c46a2 <strchr>
   c47e6:	2800      	cmp	r0, #0
   c47e8:	d1f7      	bne.n	c47da <strrchr+0x10>
   c47ea:	4628      	mov	r0, r5
   c47ec:	bd38      	pop	{r3, r4, r5, pc}
   c47ee:	2500      	movs	r5, #0
   c47f0:	e7f5      	b.n	c47de <strrchr+0x14>

000c47f2 <strstr>:
   c47f2:	780a      	ldrb	r2, [r1, #0]
   c47f4:	b570      	push	{r4, r5, r6, lr}
   c47f6:	b96a      	cbnz	r2, c4814 <strstr+0x22>
   c47f8:	bd70      	pop	{r4, r5, r6, pc}
   c47fa:	429a      	cmp	r2, r3
   c47fc:	d109      	bne.n	c4812 <strstr+0x20>
   c47fe:	460c      	mov	r4, r1
   c4800:	4605      	mov	r5, r0
   c4802:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c4806:	2b00      	cmp	r3, #0
   c4808:	d0f6      	beq.n	c47f8 <strstr+0x6>
   c480a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c480e:	429e      	cmp	r6, r3
   c4810:	d0f7      	beq.n	c4802 <strstr+0x10>
   c4812:	3001      	adds	r0, #1
   c4814:	7803      	ldrb	r3, [r0, #0]
   c4816:	2b00      	cmp	r3, #0
   c4818:	d1ef      	bne.n	c47fa <strstr+0x8>
   c481a:	4618      	mov	r0, r3
   c481c:	e7ec      	b.n	c47f8 <strstr+0x6>

000c481e <sulp>:
   c481e:	b570      	push	{r4, r5, r6, lr}
   c4820:	4604      	mov	r4, r0
   c4822:	460d      	mov	r5, r1
   c4824:	ec45 4b10 	vmov	d0, r4, r5
   c4828:	4616      	mov	r6, r2
   c482a:	f001 fe0d 	bl	c6448 <__ulp>
   c482e:	ec51 0b10 	vmov	r0, r1, d0
   c4832:	b17e      	cbz	r6, c4854 <sulp+0x36>
   c4834:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c4838:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c483c:	2b00      	cmp	r3, #0
   c483e:	dd09      	ble.n	c4854 <sulp+0x36>
   c4840:	051b      	lsls	r3, r3, #20
   c4842:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c4846:	2400      	movs	r4, #0
   c4848:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c484c:	4622      	mov	r2, r4
   c484e:	462b      	mov	r3, r5
   c4850:	f7ff fb2e 	bl	c3eb0 <__aeabi_dmul>
   c4854:	bd70      	pop	{r4, r5, r6, pc}
	...

000c4858 <_strtod_l>:
   c4858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c485c:	ed2d 8b02 	vpush	{d8}
   c4860:	b09d      	sub	sp, #116	; 0x74
   c4862:	461f      	mov	r7, r3
   c4864:	2300      	movs	r3, #0
   c4866:	9318      	str	r3, [sp, #96]	; 0x60
   c4868:	4ba2      	ldr	r3, [pc, #648]	; (c4af4 <_strtod_l+0x29c>)
   c486a:	9213      	str	r2, [sp, #76]	; 0x4c
   c486c:	681b      	ldr	r3, [r3, #0]
   c486e:	9305      	str	r3, [sp, #20]
   c4870:	4604      	mov	r4, r0
   c4872:	4618      	mov	r0, r3
   c4874:	4688      	mov	r8, r1
   c4876:	f7ff ff5a 	bl	c472e <strlen>
   c487a:	f04f 0a00 	mov.w	sl, #0
   c487e:	4605      	mov	r5, r0
   c4880:	f04f 0b00 	mov.w	fp, #0
   c4884:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c488a:	781a      	ldrb	r2, [r3, #0]
   c488c:	2a2b      	cmp	r2, #43	; 0x2b
   c488e:	d04e      	beq.n	c492e <_strtod_l+0xd6>
   c4890:	d83b      	bhi.n	c490a <_strtod_l+0xb2>
   c4892:	2a0d      	cmp	r2, #13
   c4894:	d834      	bhi.n	c4900 <_strtod_l+0xa8>
   c4896:	2a08      	cmp	r2, #8
   c4898:	d834      	bhi.n	c4904 <_strtod_l+0xac>
   c489a:	2a00      	cmp	r2, #0
   c489c:	d03e      	beq.n	c491c <_strtod_l+0xc4>
   c489e:	2300      	movs	r3, #0
   c48a0:	930a      	str	r3, [sp, #40]	; 0x28
   c48a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c48a4:	7833      	ldrb	r3, [r6, #0]
   c48a6:	2b30      	cmp	r3, #48	; 0x30
   c48a8:	f040 80b0 	bne.w	c4a0c <_strtod_l+0x1b4>
   c48ac:	7873      	ldrb	r3, [r6, #1]
   c48ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c48b2:	2b58      	cmp	r3, #88	; 0x58
   c48b4:	d168      	bne.n	c4988 <_strtod_l+0x130>
   c48b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c48b8:	9301      	str	r3, [sp, #4]
   c48ba:	ab18      	add	r3, sp, #96	; 0x60
   c48bc:	9702      	str	r7, [sp, #8]
   c48be:	9300      	str	r3, [sp, #0]
   c48c0:	4a8d      	ldr	r2, [pc, #564]	; (c4af8 <_strtod_l+0x2a0>)
   c48c2:	ab19      	add	r3, sp, #100	; 0x64
   c48c4:	a917      	add	r1, sp, #92	; 0x5c
   c48c6:	4620      	mov	r0, r4
   c48c8:	f000 ff2e 	bl	c5728 <__gethex>
   c48cc:	f010 0707 	ands.w	r7, r0, #7
   c48d0:	4605      	mov	r5, r0
   c48d2:	d005      	beq.n	c48e0 <_strtod_l+0x88>
   c48d4:	2f06      	cmp	r7, #6
   c48d6:	d12c      	bne.n	c4932 <_strtod_l+0xda>
   c48d8:	3601      	adds	r6, #1
   c48da:	2300      	movs	r3, #0
   c48dc:	9617      	str	r6, [sp, #92]	; 0x5c
   c48de:	930a      	str	r3, [sp, #40]	; 0x28
   c48e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c48e2:	2b00      	cmp	r3, #0
   c48e4:	f040 8590 	bne.w	c5408 <_strtod_l+0xbb0>
   c48e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c48ea:	b1eb      	cbz	r3, c4928 <_strtod_l+0xd0>
   c48ec:	4652      	mov	r2, sl
   c48ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c48f2:	ec43 2b10 	vmov	d0, r2, r3
   c48f6:	b01d      	add	sp, #116	; 0x74
   c48f8:	ecbd 8b02 	vpop	{d8}
   c48fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4900:	2a20      	cmp	r2, #32
   c4902:	d1cc      	bne.n	c489e <_strtod_l+0x46>
   c4904:	3301      	adds	r3, #1
   c4906:	9317      	str	r3, [sp, #92]	; 0x5c
   c4908:	e7be      	b.n	c4888 <_strtod_l+0x30>
   c490a:	2a2d      	cmp	r2, #45	; 0x2d
   c490c:	d1c7      	bne.n	c489e <_strtod_l+0x46>
   c490e:	2201      	movs	r2, #1
   c4910:	920a      	str	r2, [sp, #40]	; 0x28
   c4912:	1c5a      	adds	r2, r3, #1
   c4914:	9217      	str	r2, [sp, #92]	; 0x5c
   c4916:	785b      	ldrb	r3, [r3, #1]
   c4918:	2b00      	cmp	r3, #0
   c491a:	d1c2      	bne.n	c48a2 <_strtod_l+0x4a>
   c491c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c491e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4922:	2b00      	cmp	r3, #0
   c4924:	f040 856e 	bne.w	c5404 <_strtod_l+0xbac>
   c4928:	4652      	mov	r2, sl
   c492a:	465b      	mov	r3, fp
   c492c:	e7e1      	b.n	c48f2 <_strtod_l+0x9a>
   c492e:	2200      	movs	r2, #0
   c4930:	e7ee      	b.n	c4910 <_strtod_l+0xb8>
   c4932:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4934:	b13a      	cbz	r2, c4946 <_strtod_l+0xee>
   c4936:	2135      	movs	r1, #53	; 0x35
   c4938:	a81a      	add	r0, sp, #104	; 0x68
   c493a:	f001 fe90 	bl	c665e <__copybits>
   c493e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4940:	4620      	mov	r0, r4
   c4942:	f001 fa4f 	bl	c5de4 <_Bfree>
   c4946:	3f01      	subs	r7, #1
   c4948:	2f04      	cmp	r7, #4
   c494a:	d806      	bhi.n	c495a <_strtod_l+0x102>
   c494c:	e8df f007 	tbb	[pc, r7]
   c4950:	1714030a 	.word	0x1714030a
   c4954:	0a          	.byte	0x0a
   c4955:	00          	.byte	0x00
   c4956:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c495a:	0728      	lsls	r0, r5, #28
   c495c:	d5c0      	bpl.n	c48e0 <_strtod_l+0x88>
   c495e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c4962:	e7bd      	b.n	c48e0 <_strtod_l+0x88>
   c4964:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c4968:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c496a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c496e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c4972:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c4976:	e7f0      	b.n	c495a <_strtod_l+0x102>
   c4978:	f8df b180 	ldr.w	fp, [pc, #384]	; c4afc <_strtod_l+0x2a4>
   c497c:	e7ed      	b.n	c495a <_strtod_l+0x102>
   c497e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c4982:	f04f 3aff 	mov.w	sl, #4294967295
   c4986:	e7e8      	b.n	c495a <_strtod_l+0x102>
   c4988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c498a:	1c5a      	adds	r2, r3, #1
   c498c:	9217      	str	r2, [sp, #92]	; 0x5c
   c498e:	785b      	ldrb	r3, [r3, #1]
   c4990:	2b30      	cmp	r3, #48	; 0x30
   c4992:	d0f9      	beq.n	c4988 <_strtod_l+0x130>
   c4994:	2b00      	cmp	r3, #0
   c4996:	d0a3      	beq.n	c48e0 <_strtod_l+0x88>
   c4998:	2301      	movs	r3, #1
   c499a:	f04f 0900 	mov.w	r9, #0
   c499e:	9304      	str	r3, [sp, #16]
   c49a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c49a2:	9308      	str	r3, [sp, #32]
   c49a4:	f8cd 901c 	str.w	r9, [sp, #28]
   c49a8:	464f      	mov	r7, r9
   c49aa:	220a      	movs	r2, #10
   c49ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c49ae:	7806      	ldrb	r6, [r0, #0]
   c49b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c49b4:	b2d9      	uxtb	r1, r3
   c49b6:	2909      	cmp	r1, #9
   c49b8:	d92a      	bls.n	c4a10 <_strtod_l+0x1b8>
   c49ba:	9905      	ldr	r1, [sp, #20]
   c49bc:	462a      	mov	r2, r5
   c49be:	f7ff fed1 	bl	c4764 <strncmp>
   c49c2:	b398      	cbz	r0, c4a2c <_strtod_l+0x1d4>
   c49c4:	2000      	movs	r0, #0
   c49c6:	4632      	mov	r2, r6
   c49c8:	463d      	mov	r5, r7
   c49ca:	9005      	str	r0, [sp, #20]
   c49cc:	4603      	mov	r3, r0
   c49ce:	2a65      	cmp	r2, #101	; 0x65
   c49d0:	d001      	beq.n	c49d6 <_strtod_l+0x17e>
   c49d2:	2a45      	cmp	r2, #69	; 0x45
   c49d4:	d118      	bne.n	c4a08 <_strtod_l+0x1b0>
   c49d6:	b91d      	cbnz	r5, c49e0 <_strtod_l+0x188>
   c49d8:	9a04      	ldr	r2, [sp, #16]
   c49da:	4302      	orrs	r2, r0
   c49dc:	d09e      	beq.n	c491c <_strtod_l+0xc4>
   c49de:	2500      	movs	r5, #0
   c49e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c49e4:	f108 0201 	add.w	r2, r8, #1
   c49e8:	9217      	str	r2, [sp, #92]	; 0x5c
   c49ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   c49ee:	2a2b      	cmp	r2, #43	; 0x2b
   c49f0:	d075      	beq.n	c4ade <_strtod_l+0x286>
   c49f2:	2a2d      	cmp	r2, #45	; 0x2d
   c49f4:	d07b      	beq.n	c4aee <_strtod_l+0x296>
   c49f6:	f04f 0c00 	mov.w	ip, #0
   c49fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c49fe:	2909      	cmp	r1, #9
   c4a00:	f240 8082 	bls.w	c4b08 <_strtod_l+0x2b0>
   c4a04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4a08:	2600      	movs	r6, #0
   c4a0a:	e09d      	b.n	c4b48 <_strtod_l+0x2f0>
   c4a0c:	2300      	movs	r3, #0
   c4a0e:	e7c4      	b.n	c499a <_strtod_l+0x142>
   c4a10:	2f08      	cmp	r7, #8
   c4a12:	bfd8      	it	le
   c4a14:	9907      	ldrle	r1, [sp, #28]
   c4a16:	f100 0001 	add.w	r0, r0, #1
   c4a1a:	bfda      	itte	le
   c4a1c:	fb02 3301 	mlale	r3, r2, r1, r3
   c4a20:	9307      	strle	r3, [sp, #28]
   c4a22:	fb02 3909 	mlagt	r9, r2, r9, r3
   c4a26:	3701      	adds	r7, #1
   c4a28:	9017      	str	r0, [sp, #92]	; 0x5c
   c4a2a:	e7bf      	b.n	c49ac <_strtod_l+0x154>
   c4a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a2e:	195a      	adds	r2, r3, r5
   c4a30:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a32:	5d5a      	ldrb	r2, [r3, r5]
   c4a34:	2f00      	cmp	r7, #0
   c4a36:	d037      	beq.n	c4aa8 <_strtod_l+0x250>
   c4a38:	9005      	str	r0, [sp, #20]
   c4a3a:	463d      	mov	r5, r7
   c4a3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c4a40:	2b09      	cmp	r3, #9
   c4a42:	d912      	bls.n	c4a6a <_strtod_l+0x212>
   c4a44:	2301      	movs	r3, #1
   c4a46:	e7c2      	b.n	c49ce <_strtod_l+0x176>
   c4a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a4a:	1c5a      	adds	r2, r3, #1
   c4a4c:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a4e:	785a      	ldrb	r2, [r3, #1]
   c4a50:	3001      	adds	r0, #1
   c4a52:	2a30      	cmp	r2, #48	; 0x30
   c4a54:	d0f8      	beq.n	c4a48 <_strtod_l+0x1f0>
   c4a56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c4a5a:	2b08      	cmp	r3, #8
   c4a5c:	f200 84d9 	bhi.w	c5412 <_strtod_l+0xbba>
   c4a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a62:	9005      	str	r0, [sp, #20]
   c4a64:	2000      	movs	r0, #0
   c4a66:	9308      	str	r3, [sp, #32]
   c4a68:	4605      	mov	r5, r0
   c4a6a:	3a30      	subs	r2, #48	; 0x30
   c4a6c:	f100 0301 	add.w	r3, r0, #1
   c4a70:	d014      	beq.n	c4a9c <_strtod_l+0x244>
   c4a72:	9905      	ldr	r1, [sp, #20]
   c4a74:	4419      	add	r1, r3
   c4a76:	9105      	str	r1, [sp, #20]
   c4a78:	462b      	mov	r3, r5
   c4a7a:	eb00 0e05 	add.w	lr, r0, r5
   c4a7e:	210a      	movs	r1, #10
   c4a80:	4573      	cmp	r3, lr
   c4a82:	d113      	bne.n	c4aac <_strtod_l+0x254>
   c4a84:	182b      	adds	r3, r5, r0
   c4a86:	2b08      	cmp	r3, #8
   c4a88:	f105 0501 	add.w	r5, r5, #1
   c4a8c:	4405      	add	r5, r0
   c4a8e:	dc1c      	bgt.n	c4aca <_strtod_l+0x272>
   c4a90:	9907      	ldr	r1, [sp, #28]
   c4a92:	230a      	movs	r3, #10
   c4a94:	fb03 2301 	mla	r3, r3, r1, r2
   c4a98:	9307      	str	r3, [sp, #28]
   c4a9a:	2300      	movs	r3, #0
   c4a9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4a9e:	1c51      	adds	r1, r2, #1
   c4aa0:	9117      	str	r1, [sp, #92]	; 0x5c
   c4aa2:	7852      	ldrb	r2, [r2, #1]
   c4aa4:	4618      	mov	r0, r3
   c4aa6:	e7c9      	b.n	c4a3c <_strtod_l+0x1e4>
   c4aa8:	4638      	mov	r0, r7
   c4aaa:	e7d2      	b.n	c4a52 <_strtod_l+0x1fa>
   c4aac:	2b08      	cmp	r3, #8
   c4aae:	dc04      	bgt.n	c4aba <_strtod_l+0x262>
   c4ab0:	9e07      	ldr	r6, [sp, #28]
   c4ab2:	434e      	muls	r6, r1
   c4ab4:	9607      	str	r6, [sp, #28]
   c4ab6:	3301      	adds	r3, #1
   c4ab8:	e7e2      	b.n	c4a80 <_strtod_l+0x228>
   c4aba:	f103 0c01 	add.w	ip, r3, #1
   c4abe:	f1bc 0f10 	cmp.w	ip, #16
   c4ac2:	bfd8      	it	le
   c4ac4:	fb01 f909 	mulle.w	r9, r1, r9
   c4ac8:	e7f5      	b.n	c4ab6 <_strtod_l+0x25e>
   c4aca:	2d10      	cmp	r5, #16
   c4acc:	bfdc      	itt	le
   c4ace:	230a      	movle	r3, #10
   c4ad0:	fb03 2909 	mlale	r9, r3, r9, r2
   c4ad4:	e7e1      	b.n	c4a9a <_strtod_l+0x242>
   c4ad6:	2300      	movs	r3, #0
   c4ad8:	9305      	str	r3, [sp, #20]
   c4ada:	2301      	movs	r3, #1
   c4adc:	e77c      	b.n	c49d8 <_strtod_l+0x180>
   c4ade:	f04f 0c00 	mov.w	ip, #0
   c4ae2:	f108 0202 	add.w	r2, r8, #2
   c4ae6:	9217      	str	r2, [sp, #92]	; 0x5c
   c4ae8:	f898 2002 	ldrb.w	r2, [r8, #2]
   c4aec:	e785      	b.n	c49fa <_strtod_l+0x1a2>
   c4aee:	f04f 0c01 	mov.w	ip, #1
   c4af2:	e7f6      	b.n	c4ae2 <_strtod_l+0x28a>
   c4af4:	000c8920 	.word	0x000c8920
   c4af8:	000c8738 	.word	0x000c8738
   c4afc:	7ff00000 	.word	0x7ff00000
   c4b00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b02:	1c51      	adds	r1, r2, #1
   c4b04:	9117      	str	r1, [sp, #92]	; 0x5c
   c4b06:	7852      	ldrb	r2, [r2, #1]
   c4b08:	2a30      	cmp	r2, #48	; 0x30
   c4b0a:	d0f9      	beq.n	c4b00 <_strtod_l+0x2a8>
   c4b0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c4b10:	2908      	cmp	r1, #8
   c4b12:	f63f af79 	bhi.w	c4a08 <_strtod_l+0x1b0>
   c4b16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c4b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b1c:	9206      	str	r2, [sp, #24]
   c4b1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b20:	1c51      	adds	r1, r2, #1
   c4b22:	9117      	str	r1, [sp, #92]	; 0x5c
   c4b24:	7852      	ldrb	r2, [r2, #1]
   c4b26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c4b2a:	2e09      	cmp	r6, #9
   c4b2c:	d937      	bls.n	c4b9e <_strtod_l+0x346>
   c4b2e:	9e06      	ldr	r6, [sp, #24]
   c4b30:	1b89      	subs	r1, r1, r6
   c4b32:	2908      	cmp	r1, #8
   c4b34:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c4b38:	dc02      	bgt.n	c4b40 <_strtod_l+0x2e8>
   c4b3a:	4576      	cmp	r6, lr
   c4b3c:	bfa8      	it	ge
   c4b3e:	4676      	movge	r6, lr
   c4b40:	f1bc 0f00 	cmp.w	ip, #0
   c4b44:	d000      	beq.n	c4b48 <_strtod_l+0x2f0>
   c4b46:	4276      	negs	r6, r6
   c4b48:	2d00      	cmp	r5, #0
   c4b4a:	d14d      	bne.n	c4be8 <_strtod_l+0x390>
   c4b4c:	9904      	ldr	r1, [sp, #16]
   c4b4e:	4301      	orrs	r1, r0
   c4b50:	f47f aec6 	bne.w	c48e0 <_strtod_l+0x88>
   c4b54:	2b00      	cmp	r3, #0
   c4b56:	f47f aee1 	bne.w	c491c <_strtod_l+0xc4>
   c4b5a:	2a69      	cmp	r2, #105	; 0x69
   c4b5c:	d027      	beq.n	c4bae <_strtod_l+0x356>
   c4b5e:	dc24      	bgt.n	c4baa <_strtod_l+0x352>
   c4b60:	2a49      	cmp	r2, #73	; 0x49
   c4b62:	d024      	beq.n	c4bae <_strtod_l+0x356>
   c4b64:	2a4e      	cmp	r2, #78	; 0x4e
   c4b66:	f47f aed9 	bne.w	c491c <_strtod_l+0xc4>
   c4b6a:	499f      	ldr	r1, [pc, #636]	; (c4de8 <_strtod_l+0x590>)
   c4b6c:	a817      	add	r0, sp, #92	; 0x5c
   c4b6e:	f001 f833 	bl	c5bd8 <__match>
   c4b72:	2800      	cmp	r0, #0
   c4b74:	f43f aed2 	beq.w	c491c <_strtod_l+0xc4>
   c4b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4b7a:	781b      	ldrb	r3, [r3, #0]
   c4b7c:	2b28      	cmp	r3, #40	; 0x28
   c4b7e:	d12d      	bne.n	c4bdc <_strtod_l+0x384>
   c4b80:	499a      	ldr	r1, [pc, #616]	; (c4dec <_strtod_l+0x594>)
   c4b82:	aa1a      	add	r2, sp, #104	; 0x68
   c4b84:	a817      	add	r0, sp, #92	; 0x5c
   c4b86:	f001 f83b 	bl	c5c00 <__hexnan>
   c4b8a:	2805      	cmp	r0, #5
   c4b8c:	d126      	bne.n	c4bdc <_strtod_l+0x384>
   c4b8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4b90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c4b94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4b98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4b9c:	e6a0      	b.n	c48e0 <_strtod_l+0x88>
   c4b9e:	210a      	movs	r1, #10
   c4ba0:	fb01 2e0e 	mla	lr, r1, lr, r2
   c4ba4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4ba8:	e7b9      	b.n	c4b1e <_strtod_l+0x2c6>
   c4baa:	2a6e      	cmp	r2, #110	; 0x6e
   c4bac:	e7db      	b.n	c4b66 <_strtod_l+0x30e>
   c4bae:	4990      	ldr	r1, [pc, #576]	; (c4df0 <_strtod_l+0x598>)
   c4bb0:	a817      	add	r0, sp, #92	; 0x5c
   c4bb2:	f001 f811 	bl	c5bd8 <__match>
   c4bb6:	2800      	cmp	r0, #0
   c4bb8:	f43f aeb0 	beq.w	c491c <_strtod_l+0xc4>
   c4bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4bbe:	498d      	ldr	r1, [pc, #564]	; (c4df4 <_strtod_l+0x59c>)
   c4bc0:	3b01      	subs	r3, #1
   c4bc2:	a817      	add	r0, sp, #92	; 0x5c
   c4bc4:	9317      	str	r3, [sp, #92]	; 0x5c
   c4bc6:	f001 f807 	bl	c5bd8 <__match>
   c4bca:	b910      	cbnz	r0, c4bd2 <_strtod_l+0x37a>
   c4bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4bce:	3301      	adds	r3, #1
   c4bd0:	9317      	str	r3, [sp, #92]	; 0x5c
   c4bd2:	f8df b230 	ldr.w	fp, [pc, #560]	; c4e04 <_strtod_l+0x5ac>
   c4bd6:	f04f 0a00 	mov.w	sl, #0
   c4bda:	e681      	b.n	c48e0 <_strtod_l+0x88>
   c4bdc:	4886      	ldr	r0, [pc, #536]	; (c4df8 <_strtod_l+0x5a0>)
   c4bde:	f001 fd93 	bl	c6708 <nan>
   c4be2:	ec5b ab10 	vmov	sl, fp, d0
   c4be6:	e67b      	b.n	c48e0 <_strtod_l+0x88>
   c4be8:	9b05      	ldr	r3, [sp, #20]
   c4bea:	9807      	ldr	r0, [sp, #28]
   c4bec:	1af3      	subs	r3, r6, r3
   c4bee:	2f00      	cmp	r7, #0
   c4bf0:	bf08      	it	eq
   c4bf2:	462f      	moveq	r7, r5
   c4bf4:	2d10      	cmp	r5, #16
   c4bf6:	9306      	str	r3, [sp, #24]
   c4bf8:	46a8      	mov	r8, r5
   c4bfa:	bfa8      	it	ge
   c4bfc:	f04f 0810 	movge.w	r8, #16
   c4c00:	f7ff f8dc 	bl	c3dbc <__aeabi_ui2d>
   c4c04:	2d09      	cmp	r5, #9
   c4c06:	4682      	mov	sl, r0
   c4c08:	468b      	mov	fp, r1
   c4c0a:	dd13      	ble.n	c4c34 <_strtod_l+0x3dc>
   c4c0c:	4b7b      	ldr	r3, [pc, #492]	; (c4dfc <_strtod_l+0x5a4>)
   c4c0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c4c12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c4c16:	f7ff f94b 	bl	c3eb0 <__aeabi_dmul>
   c4c1a:	4682      	mov	sl, r0
   c4c1c:	4648      	mov	r0, r9
   c4c1e:	468b      	mov	fp, r1
   c4c20:	f7ff f8cc 	bl	c3dbc <__aeabi_ui2d>
   c4c24:	4602      	mov	r2, r0
   c4c26:	460b      	mov	r3, r1
   c4c28:	4650      	mov	r0, sl
   c4c2a:	4659      	mov	r1, fp
   c4c2c:	f7fe ff8a 	bl	c3b44 <__adddf3>
   c4c30:	4682      	mov	sl, r0
   c4c32:	468b      	mov	fp, r1
   c4c34:	2d0f      	cmp	r5, #15
   c4c36:	dc38      	bgt.n	c4caa <_strtod_l+0x452>
   c4c38:	9b06      	ldr	r3, [sp, #24]
   c4c3a:	2b00      	cmp	r3, #0
   c4c3c:	f43f ae50 	beq.w	c48e0 <_strtod_l+0x88>
   c4c40:	dd24      	ble.n	c4c8c <_strtod_l+0x434>
   c4c42:	2b16      	cmp	r3, #22
   c4c44:	dc0b      	bgt.n	c4c5e <_strtod_l+0x406>
   c4c46:	496d      	ldr	r1, [pc, #436]	; (c4dfc <_strtod_l+0x5a4>)
   c4c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4c50:	4652      	mov	r2, sl
   c4c52:	465b      	mov	r3, fp
   c4c54:	f7ff f92c 	bl	c3eb0 <__aeabi_dmul>
   c4c58:	4682      	mov	sl, r0
   c4c5a:	468b      	mov	fp, r1
   c4c5c:	e640      	b.n	c48e0 <_strtod_l+0x88>
   c4c5e:	9a06      	ldr	r2, [sp, #24]
   c4c60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c4c64:	4293      	cmp	r3, r2
   c4c66:	db20      	blt.n	c4caa <_strtod_l+0x452>
   c4c68:	4c64      	ldr	r4, [pc, #400]	; (c4dfc <_strtod_l+0x5a4>)
   c4c6a:	f1c5 050f 	rsb	r5, r5, #15
   c4c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c4c72:	4652      	mov	r2, sl
   c4c74:	465b      	mov	r3, fp
   c4c76:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4c7a:	f7ff f919 	bl	c3eb0 <__aeabi_dmul>
   c4c7e:	9b06      	ldr	r3, [sp, #24]
   c4c80:	1b5d      	subs	r5, r3, r5
   c4c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c4c86:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4c8a:	e7e3      	b.n	c4c54 <_strtod_l+0x3fc>
   c4c8c:	9b06      	ldr	r3, [sp, #24]
   c4c8e:	3316      	adds	r3, #22
   c4c90:	db0b      	blt.n	c4caa <_strtod_l+0x452>
   c4c92:	9b05      	ldr	r3, [sp, #20]
   c4c94:	1b9e      	subs	r6, r3, r6
   c4c96:	4b59      	ldr	r3, [pc, #356]	; (c4dfc <_strtod_l+0x5a4>)
   c4c98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4ca0:	4650      	mov	r0, sl
   c4ca2:	4659      	mov	r1, fp
   c4ca4:	f7ff fa2e 	bl	c4104 <__aeabi_ddiv>
   c4ca8:	e7d6      	b.n	c4c58 <_strtod_l+0x400>
   c4caa:	9b06      	ldr	r3, [sp, #24]
   c4cac:	eba5 0808 	sub.w	r8, r5, r8
   c4cb0:	4498      	add	r8, r3
   c4cb2:	f1b8 0f00 	cmp.w	r8, #0
   c4cb6:	dd74      	ble.n	c4da2 <_strtod_l+0x54a>
   c4cb8:	f018 030f 	ands.w	r3, r8, #15
   c4cbc:	d00a      	beq.n	c4cd4 <_strtod_l+0x47c>
   c4cbe:	494f      	ldr	r1, [pc, #316]	; (c4dfc <_strtod_l+0x5a4>)
   c4cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4cc4:	4652      	mov	r2, sl
   c4cc6:	465b      	mov	r3, fp
   c4cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4ccc:	f7ff f8f0 	bl	c3eb0 <__aeabi_dmul>
   c4cd0:	4682      	mov	sl, r0
   c4cd2:	468b      	mov	fp, r1
   c4cd4:	f038 080f 	bics.w	r8, r8, #15
   c4cd8:	d04f      	beq.n	c4d7a <_strtod_l+0x522>
   c4cda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4cde:	dd22      	ble.n	c4d26 <_strtod_l+0x4ce>
   c4ce0:	2500      	movs	r5, #0
   c4ce2:	462e      	mov	r6, r5
   c4ce4:	9507      	str	r5, [sp, #28]
   c4ce6:	9505      	str	r5, [sp, #20]
   c4ce8:	2322      	movs	r3, #34	; 0x22
   c4cea:	f8df b118 	ldr.w	fp, [pc, #280]	; c4e04 <_strtod_l+0x5ac>
   c4cee:	6023      	str	r3, [r4, #0]
   c4cf0:	f04f 0a00 	mov.w	sl, #0
   c4cf4:	9b07      	ldr	r3, [sp, #28]
   c4cf6:	2b00      	cmp	r3, #0
   c4cf8:	f43f adf2 	beq.w	c48e0 <_strtod_l+0x88>
   c4cfc:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4cfe:	4620      	mov	r0, r4
   c4d00:	f001 f870 	bl	c5de4 <_Bfree>
   c4d04:	9905      	ldr	r1, [sp, #20]
   c4d06:	4620      	mov	r0, r4
   c4d08:	f001 f86c 	bl	c5de4 <_Bfree>
   c4d0c:	4631      	mov	r1, r6
   c4d0e:	4620      	mov	r0, r4
   c4d10:	f001 f868 	bl	c5de4 <_Bfree>
   c4d14:	9907      	ldr	r1, [sp, #28]
   c4d16:	4620      	mov	r0, r4
   c4d18:	f001 f864 	bl	c5de4 <_Bfree>
   c4d1c:	4629      	mov	r1, r5
   c4d1e:	4620      	mov	r0, r4
   c4d20:	f001 f860 	bl	c5de4 <_Bfree>
   c4d24:	e5dc      	b.n	c48e0 <_strtod_l+0x88>
   c4d26:	4b36      	ldr	r3, [pc, #216]	; (c4e00 <_strtod_l+0x5a8>)
   c4d28:	9304      	str	r3, [sp, #16]
   c4d2a:	2300      	movs	r3, #0
   c4d2c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4d30:	4650      	mov	r0, sl
   c4d32:	4659      	mov	r1, fp
   c4d34:	4699      	mov	r9, r3
   c4d36:	f1b8 0f01 	cmp.w	r8, #1
   c4d3a:	dc21      	bgt.n	c4d80 <_strtod_l+0x528>
   c4d3c:	b10b      	cbz	r3, c4d42 <_strtod_l+0x4ea>
   c4d3e:	4682      	mov	sl, r0
   c4d40:	468b      	mov	fp, r1
   c4d42:	4b2f      	ldr	r3, [pc, #188]	; (c4e00 <_strtod_l+0x5a8>)
   c4d44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4d48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4d4c:	4652      	mov	r2, sl
   c4d4e:	465b      	mov	r3, fp
   c4d50:	e9d9 0100 	ldrd	r0, r1, [r9]
   c4d54:	f7ff f8ac 	bl	c3eb0 <__aeabi_dmul>
   c4d58:	4b2a      	ldr	r3, [pc, #168]	; (c4e04 <_strtod_l+0x5ac>)
   c4d5a:	460a      	mov	r2, r1
   c4d5c:	400b      	ands	r3, r1
   c4d5e:	492a      	ldr	r1, [pc, #168]	; (c4e08 <_strtod_l+0x5b0>)
   c4d60:	428b      	cmp	r3, r1
   c4d62:	4682      	mov	sl, r0
   c4d64:	d8bc      	bhi.n	c4ce0 <_strtod_l+0x488>
   c4d66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4d6a:	428b      	cmp	r3, r1
   c4d6c:	bf86      	itte	hi
   c4d6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4e0c <_strtod_l+0x5b4>
   c4d72:	f04f 3aff 	movhi.w	sl, #4294967295
   c4d76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4d7a:	2300      	movs	r3, #0
   c4d7c:	9304      	str	r3, [sp, #16]
   c4d7e:	e084      	b.n	c4e8a <_strtod_l+0x632>
   c4d80:	f018 0f01 	tst.w	r8, #1
   c4d84:	d005      	beq.n	c4d92 <_strtod_l+0x53a>
   c4d86:	9b04      	ldr	r3, [sp, #16]
   c4d88:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4d8c:	f7ff f890 	bl	c3eb0 <__aeabi_dmul>
   c4d90:	2301      	movs	r3, #1
   c4d92:	9a04      	ldr	r2, [sp, #16]
   c4d94:	3208      	adds	r2, #8
   c4d96:	f109 0901 	add.w	r9, r9, #1
   c4d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4d9e:	9204      	str	r2, [sp, #16]
   c4da0:	e7c9      	b.n	c4d36 <_strtod_l+0x4de>
   c4da2:	d0ea      	beq.n	c4d7a <_strtod_l+0x522>
   c4da4:	f1c8 0800 	rsb	r8, r8, #0
   c4da8:	f018 020f 	ands.w	r2, r8, #15
   c4dac:	d00a      	beq.n	c4dc4 <_strtod_l+0x56c>
   c4dae:	4b13      	ldr	r3, [pc, #76]	; (c4dfc <_strtod_l+0x5a4>)
   c4db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c4db4:	4650      	mov	r0, sl
   c4db6:	4659      	mov	r1, fp
   c4db8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4dbc:	f7ff f9a2 	bl	c4104 <__aeabi_ddiv>
   c4dc0:	4682      	mov	sl, r0
   c4dc2:	468b      	mov	fp, r1
   c4dc4:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4dc8:	d0d7      	beq.n	c4d7a <_strtod_l+0x522>
   c4dca:	f1b8 0f1f 	cmp.w	r8, #31
   c4dce:	dd1f      	ble.n	c4e10 <_strtod_l+0x5b8>
   c4dd0:	2500      	movs	r5, #0
   c4dd2:	462e      	mov	r6, r5
   c4dd4:	9507      	str	r5, [sp, #28]
   c4dd6:	9505      	str	r5, [sp, #20]
   c4dd8:	2322      	movs	r3, #34	; 0x22
   c4dda:	f04f 0a00 	mov.w	sl, #0
   c4dde:	f04f 0b00 	mov.w	fp, #0
   c4de2:	6023      	str	r3, [r4, #0]
   c4de4:	e786      	b.n	c4cf4 <_strtod_l+0x49c>
   c4de6:	bf00      	nop
   c4de8:	000c8735 	.word	0x000c8735
   c4dec:	000c874c 	.word	0x000c874c
   c4df0:	000c872c 	.word	0x000c872c
   c4df4:	000c872f 	.word	0x000c872f
   c4df8:	000c7f40 	.word	0x000c7f40
   c4dfc:	000c89d8 	.word	0x000c89d8
   c4e00:	000c89b0 	.word	0x000c89b0
   c4e04:	7ff00000 	.word	0x7ff00000
   c4e08:	7ca00000 	.word	0x7ca00000
   c4e0c:	7fefffff 	.word	0x7fefffff
   c4e10:	f018 0310 	ands.w	r3, r8, #16
   c4e14:	bf18      	it	ne
   c4e16:	236a      	movne	r3, #106	; 0x6a
   c4e18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c51c8 <_strtod_l+0x970>
   c4e1c:	9304      	str	r3, [sp, #16]
   c4e1e:	4650      	mov	r0, sl
   c4e20:	4659      	mov	r1, fp
   c4e22:	2300      	movs	r3, #0
   c4e24:	f018 0f01 	tst.w	r8, #1
   c4e28:	d004      	beq.n	c4e34 <_strtod_l+0x5dc>
   c4e2a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4e2e:	f7ff f83f 	bl	c3eb0 <__aeabi_dmul>
   c4e32:	2301      	movs	r3, #1
   c4e34:	ea5f 0868 	movs.w	r8, r8, asr #1
   c4e38:	f109 0908 	add.w	r9, r9, #8
   c4e3c:	d1f2      	bne.n	c4e24 <_strtod_l+0x5cc>
   c4e3e:	b10b      	cbz	r3, c4e44 <_strtod_l+0x5ec>
   c4e40:	4682      	mov	sl, r0
   c4e42:	468b      	mov	fp, r1
   c4e44:	9b04      	ldr	r3, [sp, #16]
   c4e46:	b1c3      	cbz	r3, c4e7a <_strtod_l+0x622>
   c4e48:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4e4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4e50:	2b00      	cmp	r3, #0
   c4e52:	4659      	mov	r1, fp
   c4e54:	dd11      	ble.n	c4e7a <_strtod_l+0x622>
   c4e56:	2b1f      	cmp	r3, #31
   c4e58:	f340 8124 	ble.w	c50a4 <_strtod_l+0x84c>
   c4e5c:	2b34      	cmp	r3, #52	; 0x34
   c4e5e:	bfde      	ittt	le
   c4e60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c4e64:	f04f 33ff 	movle.w	r3, #4294967295
   c4e68:	fa03 f202 	lslle.w	r2, r3, r2
   c4e6c:	f04f 0a00 	mov.w	sl, #0
   c4e70:	bfcc      	ite	gt
   c4e72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c4e76:	ea02 0b01 	andle.w	fp, r2, r1
   c4e7a:	2200      	movs	r2, #0
   c4e7c:	2300      	movs	r3, #0
   c4e7e:	4650      	mov	r0, sl
   c4e80:	4659      	mov	r1, fp
   c4e82:	f7ff fa7d 	bl	c4380 <__aeabi_dcmpeq>
   c4e86:	2800      	cmp	r0, #0
   c4e88:	d1a2      	bne.n	c4dd0 <_strtod_l+0x578>
   c4e8a:	9b07      	ldr	r3, [sp, #28]
   c4e8c:	9300      	str	r3, [sp, #0]
   c4e8e:	9908      	ldr	r1, [sp, #32]
   c4e90:	462b      	mov	r3, r5
   c4e92:	463a      	mov	r2, r7
   c4e94:	4620      	mov	r0, r4
   c4e96:	f001 f80d 	bl	c5eb4 <__s2b>
   c4e9a:	9007      	str	r0, [sp, #28]
   c4e9c:	2800      	cmp	r0, #0
   c4e9e:	f43f af1f 	beq.w	c4ce0 <_strtod_l+0x488>
   c4ea2:	9b05      	ldr	r3, [sp, #20]
   c4ea4:	1b9e      	subs	r6, r3, r6
   c4ea6:	9b06      	ldr	r3, [sp, #24]
   c4ea8:	2b00      	cmp	r3, #0
   c4eaa:	bfb4      	ite	lt
   c4eac:	4633      	movlt	r3, r6
   c4eae:	2300      	movge	r3, #0
   c4eb0:	930c      	str	r3, [sp, #48]	; 0x30
   c4eb2:	9b06      	ldr	r3, [sp, #24]
   c4eb4:	2500      	movs	r5, #0
   c4eb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4eba:	9312      	str	r3, [sp, #72]	; 0x48
   c4ebc:	462e      	mov	r6, r5
   c4ebe:	9b07      	ldr	r3, [sp, #28]
   c4ec0:	4620      	mov	r0, r4
   c4ec2:	6859      	ldr	r1, [r3, #4]
   c4ec4:	f000 ff4e 	bl	c5d64 <_Balloc>
   c4ec8:	9005      	str	r0, [sp, #20]
   c4eca:	2800      	cmp	r0, #0
   c4ecc:	f43f af0c 	beq.w	c4ce8 <_strtod_l+0x490>
   c4ed0:	9b07      	ldr	r3, [sp, #28]
   c4ed2:	691a      	ldr	r2, [r3, #16]
   c4ed4:	3202      	adds	r2, #2
   c4ed6:	f103 010c 	add.w	r1, r3, #12
   c4eda:	0092      	lsls	r2, r2, #2
   c4edc:	300c      	adds	r0, #12
   c4ede:	f7ff fb73 	bl	c45c8 <memcpy>
   c4ee2:	ec4b ab10 	vmov	d0, sl, fp
   c4ee6:	aa1a      	add	r2, sp, #104	; 0x68
   c4ee8:	a919      	add	r1, sp, #100	; 0x64
   c4eea:	4620      	mov	r0, r4
   c4eec:	f001 fb28 	bl	c6540 <__d2b>
   c4ef0:	ec4b ab18 	vmov	d8, sl, fp
   c4ef4:	9018      	str	r0, [sp, #96]	; 0x60
   c4ef6:	2800      	cmp	r0, #0
   c4ef8:	f43f aef6 	beq.w	c4ce8 <_strtod_l+0x490>
   c4efc:	2101      	movs	r1, #1
   c4efe:	4620      	mov	r0, r4
   c4f00:	f001 f872 	bl	c5fe8 <__i2b>
   c4f04:	4606      	mov	r6, r0
   c4f06:	2800      	cmp	r0, #0
   c4f08:	f43f aeee 	beq.w	c4ce8 <_strtod_l+0x490>
   c4f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4f0e:	9904      	ldr	r1, [sp, #16]
   c4f10:	2b00      	cmp	r3, #0
   c4f12:	bfab      	itete	ge
   c4f14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c4f16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4f18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4f1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4f1e:	bfac      	ite	ge
   c4f20:	eb03 0902 	addge.w	r9, r3, r2
   c4f24:	1ad7      	sublt	r7, r2, r3
   c4f26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4f28:	eba3 0801 	sub.w	r8, r3, r1
   c4f2c:	4490      	add	r8, r2
   c4f2e:	4ba1      	ldr	r3, [pc, #644]	; (c51b4 <_strtod_l+0x95c>)
   c4f30:	f108 38ff 	add.w	r8, r8, #4294967295
   c4f34:	4598      	cmp	r8, r3
   c4f36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c4f3a:	f280 80c7 	bge.w	c50cc <_strtod_l+0x874>
   c4f3e:	eba3 0308 	sub.w	r3, r3, r8
   c4f42:	2b1f      	cmp	r3, #31
   c4f44:	eba2 0203 	sub.w	r2, r2, r3
   c4f48:	f04f 0101 	mov.w	r1, #1
   c4f4c:	f300 80b1 	bgt.w	c50b2 <_strtod_l+0x85a>
   c4f50:	fa01 f303 	lsl.w	r3, r1, r3
   c4f54:	930d      	str	r3, [sp, #52]	; 0x34
   c4f56:	2300      	movs	r3, #0
   c4f58:	9308      	str	r3, [sp, #32]
   c4f5a:	eb09 0802 	add.w	r8, r9, r2
   c4f5e:	9b04      	ldr	r3, [sp, #16]
   c4f60:	45c1      	cmp	r9, r8
   c4f62:	4417      	add	r7, r2
   c4f64:	441f      	add	r7, r3
   c4f66:	464b      	mov	r3, r9
   c4f68:	bfa8      	it	ge
   c4f6a:	4643      	movge	r3, r8
   c4f6c:	42bb      	cmp	r3, r7
   c4f6e:	bfa8      	it	ge
   c4f70:	463b      	movge	r3, r7
   c4f72:	2b00      	cmp	r3, #0
   c4f74:	bfc2      	ittt	gt
   c4f76:	eba8 0803 	subgt.w	r8, r8, r3
   c4f7a:	1aff      	subgt	r7, r7, r3
   c4f7c:	eba9 0903 	subgt.w	r9, r9, r3
   c4f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c4f82:	2b00      	cmp	r3, #0
   c4f84:	dd17      	ble.n	c4fb6 <_strtod_l+0x75e>
   c4f86:	4631      	mov	r1, r6
   c4f88:	461a      	mov	r2, r3
   c4f8a:	4620      	mov	r0, r4
   c4f8c:	f001 f8ec 	bl	c6168 <__pow5mult>
   c4f90:	4606      	mov	r6, r0
   c4f92:	2800      	cmp	r0, #0
   c4f94:	f43f aea8 	beq.w	c4ce8 <_strtod_l+0x490>
   c4f98:	4601      	mov	r1, r0
   c4f9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4f9c:	4620      	mov	r0, r4
   c4f9e:	f001 f839 	bl	c6014 <__multiply>
   c4fa2:	900b      	str	r0, [sp, #44]	; 0x2c
   c4fa4:	2800      	cmp	r0, #0
   c4fa6:	f43f ae9f 	beq.w	c4ce8 <_strtod_l+0x490>
   c4faa:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4fac:	4620      	mov	r0, r4
   c4fae:	f000 ff19 	bl	c5de4 <_Bfree>
   c4fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4fb4:	9318      	str	r3, [sp, #96]	; 0x60
   c4fb6:	f1b8 0f00 	cmp.w	r8, #0
   c4fba:	f300 808c 	bgt.w	c50d6 <_strtod_l+0x87e>
   c4fbe:	9b06      	ldr	r3, [sp, #24]
   c4fc0:	2b00      	cmp	r3, #0
   c4fc2:	dd08      	ble.n	c4fd6 <_strtod_l+0x77e>
   c4fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c4fc6:	9905      	ldr	r1, [sp, #20]
   c4fc8:	4620      	mov	r0, r4
   c4fca:	f001 f8cd 	bl	c6168 <__pow5mult>
   c4fce:	9005      	str	r0, [sp, #20]
   c4fd0:	2800      	cmp	r0, #0
   c4fd2:	f43f ae89 	beq.w	c4ce8 <_strtod_l+0x490>
   c4fd6:	2f00      	cmp	r7, #0
   c4fd8:	dd08      	ble.n	c4fec <_strtod_l+0x794>
   c4fda:	9905      	ldr	r1, [sp, #20]
   c4fdc:	463a      	mov	r2, r7
   c4fde:	4620      	mov	r0, r4
   c4fe0:	f001 f91c 	bl	c621c <__lshift>
   c4fe4:	9005      	str	r0, [sp, #20]
   c4fe6:	2800      	cmp	r0, #0
   c4fe8:	f43f ae7e 	beq.w	c4ce8 <_strtod_l+0x490>
   c4fec:	f1b9 0f00 	cmp.w	r9, #0
   c4ff0:	dd08      	ble.n	c5004 <_strtod_l+0x7ac>
   c4ff2:	4631      	mov	r1, r6
   c4ff4:	464a      	mov	r2, r9
   c4ff6:	4620      	mov	r0, r4
   c4ff8:	f001 f910 	bl	c621c <__lshift>
   c4ffc:	4606      	mov	r6, r0
   c4ffe:	2800      	cmp	r0, #0
   c5000:	f43f ae72 	beq.w	c4ce8 <_strtod_l+0x490>
   c5004:	9a05      	ldr	r2, [sp, #20]
   c5006:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5008:	4620      	mov	r0, r4
   c500a:	f001 f993 	bl	c6334 <__mdiff>
   c500e:	4605      	mov	r5, r0
   c5010:	2800      	cmp	r0, #0
   c5012:	f43f ae69 	beq.w	c4ce8 <_strtod_l+0x490>
   c5016:	68c3      	ldr	r3, [r0, #12]
   c5018:	930b      	str	r3, [sp, #44]	; 0x2c
   c501a:	2300      	movs	r3, #0
   c501c:	60c3      	str	r3, [r0, #12]
   c501e:	4631      	mov	r1, r6
   c5020:	f001 f96c 	bl	c62fc <__mcmp>
   c5024:	2800      	cmp	r0, #0
   c5026:	da60      	bge.n	c50ea <_strtod_l+0x892>
   c5028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c502a:	ea53 030a 	orrs.w	r3, r3, sl
   c502e:	f040 8082 	bne.w	c5136 <_strtod_l+0x8de>
   c5032:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5036:	2b00      	cmp	r3, #0
   c5038:	d17d      	bne.n	c5136 <_strtod_l+0x8de>
   c503a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c503e:	0d1b      	lsrs	r3, r3, #20
   c5040:	051b      	lsls	r3, r3, #20
   c5042:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c5046:	d976      	bls.n	c5136 <_strtod_l+0x8de>
   c5048:	696b      	ldr	r3, [r5, #20]
   c504a:	b913      	cbnz	r3, c5052 <_strtod_l+0x7fa>
   c504c:	692b      	ldr	r3, [r5, #16]
   c504e:	2b01      	cmp	r3, #1
   c5050:	dd71      	ble.n	c5136 <_strtod_l+0x8de>
   c5052:	4629      	mov	r1, r5
   c5054:	2201      	movs	r2, #1
   c5056:	4620      	mov	r0, r4
   c5058:	f001 f8e0 	bl	c621c <__lshift>
   c505c:	4631      	mov	r1, r6
   c505e:	4605      	mov	r5, r0
   c5060:	f001 f94c 	bl	c62fc <__mcmp>
   c5064:	2800      	cmp	r0, #0
   c5066:	dd66      	ble.n	c5136 <_strtod_l+0x8de>
   c5068:	9904      	ldr	r1, [sp, #16]
   c506a:	4a53      	ldr	r2, [pc, #332]	; (c51b8 <_strtod_l+0x960>)
   c506c:	465b      	mov	r3, fp
   c506e:	2900      	cmp	r1, #0
   c5070:	f000 8081 	beq.w	c5176 <_strtod_l+0x91e>
   c5074:	ea02 010b 	and.w	r1, r2, fp
   c5078:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c507c:	dc7b      	bgt.n	c5176 <_strtod_l+0x91e>
   c507e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c5082:	f77f aea9 	ble.w	c4dd8 <_strtod_l+0x580>
   c5086:	4b4d      	ldr	r3, [pc, #308]	; (c51bc <_strtod_l+0x964>)
   c5088:	4650      	mov	r0, sl
   c508a:	4659      	mov	r1, fp
   c508c:	2200      	movs	r2, #0
   c508e:	f7fe ff0f 	bl	c3eb0 <__aeabi_dmul>
   c5092:	460b      	mov	r3, r1
   c5094:	4303      	orrs	r3, r0
   c5096:	bf08      	it	eq
   c5098:	2322      	moveq	r3, #34	; 0x22
   c509a:	4682      	mov	sl, r0
   c509c:	468b      	mov	fp, r1
   c509e:	bf08      	it	eq
   c50a0:	6023      	streq	r3, [r4, #0]
   c50a2:	e62b      	b.n	c4cfc <_strtod_l+0x4a4>
   c50a4:	f04f 32ff 	mov.w	r2, #4294967295
   c50a8:	fa02 f303 	lsl.w	r3, r2, r3
   c50ac:	ea03 0a0a 	and.w	sl, r3, sl
   c50b0:	e6e3      	b.n	c4e7a <_strtod_l+0x622>
   c50b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c50b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c50ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c50be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c50c2:	fa01 f308 	lsl.w	r3, r1, r8
   c50c6:	9308      	str	r3, [sp, #32]
   c50c8:	910d      	str	r1, [sp, #52]	; 0x34
   c50ca:	e746      	b.n	c4f5a <_strtod_l+0x702>
   c50cc:	2300      	movs	r3, #0
   c50ce:	9308      	str	r3, [sp, #32]
   c50d0:	2301      	movs	r3, #1
   c50d2:	930d      	str	r3, [sp, #52]	; 0x34
   c50d4:	e741      	b.n	c4f5a <_strtod_l+0x702>
   c50d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c50d8:	4642      	mov	r2, r8
   c50da:	4620      	mov	r0, r4
   c50dc:	f001 f89e 	bl	c621c <__lshift>
   c50e0:	9018      	str	r0, [sp, #96]	; 0x60
   c50e2:	2800      	cmp	r0, #0
   c50e4:	f47f af6b 	bne.w	c4fbe <_strtod_l+0x766>
   c50e8:	e5fe      	b.n	c4ce8 <_strtod_l+0x490>
   c50ea:	465f      	mov	r7, fp
   c50ec:	d16e      	bne.n	c51cc <_strtod_l+0x974>
   c50ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c50f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c50f4:	b342      	cbz	r2, c5148 <_strtod_l+0x8f0>
   c50f6:	4a32      	ldr	r2, [pc, #200]	; (c51c0 <_strtod_l+0x968>)
   c50f8:	4293      	cmp	r3, r2
   c50fa:	d128      	bne.n	c514e <_strtod_l+0x8f6>
   c50fc:	9b04      	ldr	r3, [sp, #16]
   c50fe:	4651      	mov	r1, sl
   c5100:	b1eb      	cbz	r3, c513e <_strtod_l+0x8e6>
   c5102:	4b2d      	ldr	r3, [pc, #180]	; (c51b8 <_strtod_l+0x960>)
   c5104:	403b      	ands	r3, r7
   c5106:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c510a:	f04f 32ff 	mov.w	r2, #4294967295
   c510e:	d819      	bhi.n	c5144 <_strtod_l+0x8ec>
   c5110:	0d1b      	lsrs	r3, r3, #20
   c5112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c5116:	fa02 f303 	lsl.w	r3, r2, r3
   c511a:	4299      	cmp	r1, r3
   c511c:	d117      	bne.n	c514e <_strtod_l+0x8f6>
   c511e:	4b29      	ldr	r3, [pc, #164]	; (c51c4 <_strtod_l+0x96c>)
   c5120:	429f      	cmp	r7, r3
   c5122:	d102      	bne.n	c512a <_strtod_l+0x8d2>
   c5124:	3101      	adds	r1, #1
   c5126:	f43f addf 	beq.w	c4ce8 <_strtod_l+0x490>
   c512a:	4b23      	ldr	r3, [pc, #140]	; (c51b8 <_strtod_l+0x960>)
   c512c:	403b      	ands	r3, r7
   c512e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c5132:	f04f 0a00 	mov.w	sl, #0
   c5136:	9b04      	ldr	r3, [sp, #16]
   c5138:	2b00      	cmp	r3, #0
   c513a:	d1a4      	bne.n	c5086 <_strtod_l+0x82e>
   c513c:	e5de      	b.n	c4cfc <_strtod_l+0x4a4>
   c513e:	f04f 33ff 	mov.w	r3, #4294967295
   c5142:	e7ea      	b.n	c511a <_strtod_l+0x8c2>
   c5144:	4613      	mov	r3, r2
   c5146:	e7e8      	b.n	c511a <_strtod_l+0x8c2>
   c5148:	ea53 030a 	orrs.w	r3, r3, sl
   c514c:	d08c      	beq.n	c5068 <_strtod_l+0x810>
   c514e:	9b08      	ldr	r3, [sp, #32]
   c5150:	b1db      	cbz	r3, c518a <_strtod_l+0x932>
   c5152:	423b      	tst	r3, r7
   c5154:	d0ef      	beq.n	c5136 <_strtod_l+0x8de>
   c5156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5158:	9a04      	ldr	r2, [sp, #16]
   c515a:	4650      	mov	r0, sl
   c515c:	4659      	mov	r1, fp
   c515e:	b1c3      	cbz	r3, c5192 <_strtod_l+0x93a>
   c5160:	f7ff fb5d 	bl	c481e <sulp>
   c5164:	4602      	mov	r2, r0
   c5166:	460b      	mov	r3, r1
   c5168:	ec51 0b18 	vmov	r0, r1, d8
   c516c:	f7fe fcea 	bl	c3b44 <__adddf3>
   c5170:	4682      	mov	sl, r0
   c5172:	468b      	mov	fp, r1
   c5174:	e7df      	b.n	c5136 <_strtod_l+0x8de>
   c5176:	4013      	ands	r3, r2
   c5178:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c517c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c5180:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c5184:	f04f 3aff 	mov.w	sl, #4294967295
   c5188:	e7d5      	b.n	c5136 <_strtod_l+0x8de>
   c518a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c518c:	ea13 0f0a 	tst.w	r3, sl
   c5190:	e7e0      	b.n	c5154 <_strtod_l+0x8fc>
   c5192:	f7ff fb44 	bl	c481e <sulp>
   c5196:	4602      	mov	r2, r0
   c5198:	460b      	mov	r3, r1
   c519a:	ec51 0b18 	vmov	r0, r1, d8
   c519e:	f7fe fccf 	bl	c3b40 <__aeabi_dsub>
   c51a2:	2200      	movs	r2, #0
   c51a4:	2300      	movs	r3, #0
   c51a6:	4682      	mov	sl, r0
   c51a8:	468b      	mov	fp, r1
   c51aa:	f7ff f8e9 	bl	c4380 <__aeabi_dcmpeq>
   c51ae:	2800      	cmp	r0, #0
   c51b0:	d0c1      	beq.n	c5136 <_strtod_l+0x8de>
   c51b2:	e611      	b.n	c4dd8 <_strtod_l+0x580>
   c51b4:	fffffc02 	.word	0xfffffc02
   c51b8:	7ff00000 	.word	0x7ff00000
   c51bc:	39500000 	.word	0x39500000
   c51c0:	000fffff 	.word	0x000fffff
   c51c4:	7fefffff 	.word	0x7fefffff
   c51c8:	000c8760 	.word	0x000c8760
   c51cc:	4631      	mov	r1, r6
   c51ce:	4628      	mov	r0, r5
   c51d0:	f001 fa12 	bl	c65f8 <__ratio>
   c51d4:	ec59 8b10 	vmov	r8, r9, d0
   c51d8:	ee10 0a10 	vmov	r0, s0
   c51dc:	2200      	movs	r2, #0
   c51de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c51e2:	4649      	mov	r1, r9
   c51e4:	f7ff f8e0 	bl	c43a8 <__aeabi_dcmple>
   c51e8:	2800      	cmp	r0, #0
   c51ea:	d07a      	beq.n	c52e2 <_strtod_l+0xa8a>
   c51ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c51ee:	2b00      	cmp	r3, #0
   c51f0:	d04a      	beq.n	c5288 <_strtod_l+0xa30>
   c51f2:	4b95      	ldr	r3, [pc, #596]	; (c5448 <_strtod_l+0xbf0>)
   c51f4:	2200      	movs	r2, #0
   c51f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c51fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; c5448 <_strtod_l+0xbf0>
   c51fe:	f04f 0800 	mov.w	r8, #0
   c5202:	4b92      	ldr	r3, [pc, #584]	; (c544c <_strtod_l+0xbf4>)
   c5204:	403b      	ands	r3, r7
   c5206:	930d      	str	r3, [sp, #52]	; 0x34
   c5208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c520a:	4b91      	ldr	r3, [pc, #580]	; (c5450 <_strtod_l+0xbf8>)
   c520c:	429a      	cmp	r2, r3
   c520e:	f040 80b0 	bne.w	c5372 <_strtod_l+0xb1a>
   c5212:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5216:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c521a:	ec4b ab10 	vmov	d0, sl, fp
   c521e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5222:	f001 f911 	bl	c6448 <__ulp>
   c5226:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c522a:	ec53 2b10 	vmov	r2, r3, d0
   c522e:	f7fe fe3f 	bl	c3eb0 <__aeabi_dmul>
   c5232:	4652      	mov	r2, sl
   c5234:	465b      	mov	r3, fp
   c5236:	f7fe fc85 	bl	c3b44 <__adddf3>
   c523a:	460b      	mov	r3, r1
   c523c:	4983      	ldr	r1, [pc, #524]	; (c544c <_strtod_l+0xbf4>)
   c523e:	4a85      	ldr	r2, [pc, #532]	; (c5454 <_strtod_l+0xbfc>)
   c5240:	4019      	ands	r1, r3
   c5242:	4291      	cmp	r1, r2
   c5244:	4682      	mov	sl, r0
   c5246:	d960      	bls.n	c530a <_strtod_l+0xab2>
   c5248:	ee18 3a90 	vmov	r3, s17
   c524c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c5250:	4293      	cmp	r3, r2
   c5252:	d104      	bne.n	c525e <_strtod_l+0xa06>
   c5254:	ee18 3a10 	vmov	r3, s16
   c5258:	3301      	adds	r3, #1
   c525a:	f43f ad45 	beq.w	c4ce8 <_strtod_l+0x490>
   c525e:	f8df b200 	ldr.w	fp, [pc, #512]	; c5460 <_strtod_l+0xc08>
   c5262:	f04f 3aff 	mov.w	sl, #4294967295
   c5266:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5268:	4620      	mov	r0, r4
   c526a:	f000 fdbb 	bl	c5de4 <_Bfree>
   c526e:	9905      	ldr	r1, [sp, #20]
   c5270:	4620      	mov	r0, r4
   c5272:	f000 fdb7 	bl	c5de4 <_Bfree>
   c5276:	4631      	mov	r1, r6
   c5278:	4620      	mov	r0, r4
   c527a:	f000 fdb3 	bl	c5de4 <_Bfree>
   c527e:	4629      	mov	r1, r5
   c5280:	4620      	mov	r0, r4
   c5282:	f000 fdaf 	bl	c5de4 <_Bfree>
   c5286:	e61a      	b.n	c4ebe <_strtod_l+0x666>
   c5288:	f1ba 0f00 	cmp.w	sl, #0
   c528c:	d11b      	bne.n	c52c6 <_strtod_l+0xa6e>
   c528e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5292:	b9f3      	cbnz	r3, c52d2 <_strtod_l+0xa7a>
   c5294:	4b6c      	ldr	r3, [pc, #432]	; (c5448 <_strtod_l+0xbf0>)
   c5296:	2200      	movs	r2, #0
   c5298:	4640      	mov	r0, r8
   c529a:	4649      	mov	r1, r9
   c529c:	f7ff f87a 	bl	c4394 <__aeabi_dcmplt>
   c52a0:	b9d0      	cbnz	r0, c52d8 <_strtod_l+0xa80>
   c52a2:	4640      	mov	r0, r8
   c52a4:	4649      	mov	r1, r9
   c52a6:	4b6c      	ldr	r3, [pc, #432]	; (c5458 <_strtod_l+0xc00>)
   c52a8:	2200      	movs	r2, #0
   c52aa:	f7fe fe01 	bl	c3eb0 <__aeabi_dmul>
   c52ae:	4680      	mov	r8, r0
   c52b0:	4689      	mov	r9, r1
   c52b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c52b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c52ba:	9315      	str	r3, [sp, #84]	; 0x54
   c52bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c52c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c52c4:	e79d      	b.n	c5202 <_strtod_l+0x9aa>
   c52c6:	f1ba 0f01 	cmp.w	sl, #1
   c52ca:	d102      	bne.n	c52d2 <_strtod_l+0xa7a>
   c52cc:	2f00      	cmp	r7, #0
   c52ce:	f43f ad83 	beq.w	c4dd8 <_strtod_l+0x580>
   c52d2:	4b62      	ldr	r3, [pc, #392]	; (c545c <_strtod_l+0xc04>)
   c52d4:	2200      	movs	r2, #0
   c52d6:	e78e      	b.n	c51f6 <_strtod_l+0x99e>
   c52d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; c5458 <_strtod_l+0xc00>
   c52dc:	f04f 0800 	mov.w	r8, #0
   c52e0:	e7e7      	b.n	c52b2 <_strtod_l+0xa5a>
   c52e2:	4b5d      	ldr	r3, [pc, #372]	; (c5458 <_strtod_l+0xc00>)
   c52e4:	4640      	mov	r0, r8
   c52e6:	4649      	mov	r1, r9
   c52e8:	2200      	movs	r2, #0
   c52ea:	f7fe fde1 	bl	c3eb0 <__aeabi_dmul>
   c52ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c52f0:	4680      	mov	r8, r0
   c52f2:	4689      	mov	r9, r1
   c52f4:	b933      	cbnz	r3, c5304 <_strtod_l+0xaac>
   c52f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c52fa:	900e      	str	r0, [sp, #56]	; 0x38
   c52fc:	930f      	str	r3, [sp, #60]	; 0x3c
   c52fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c5302:	e7dd      	b.n	c52c0 <_strtod_l+0xa68>
   c5304:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c5308:	e7f9      	b.n	c52fe <_strtod_l+0xaa6>
   c530a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c530e:	9b04      	ldr	r3, [sp, #16]
   c5310:	2b00      	cmp	r3, #0
   c5312:	d1a8      	bne.n	c5266 <_strtod_l+0xa0e>
   c5314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c5318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c531a:	0d1b      	lsrs	r3, r3, #20
   c531c:	051b      	lsls	r3, r3, #20
   c531e:	429a      	cmp	r2, r3
   c5320:	d1a1      	bne.n	c5266 <_strtod_l+0xa0e>
   c5322:	4640      	mov	r0, r8
   c5324:	4649      	mov	r1, r9
   c5326:	f001 fa05 	bl	c6734 <__aeabi_d2lz>
   c532a:	f7fe fd93 	bl	c3e54 <__aeabi_l2d>
   c532e:	4602      	mov	r2, r0
   c5330:	460b      	mov	r3, r1
   c5332:	4640      	mov	r0, r8
   c5334:	4649      	mov	r1, r9
   c5336:	f7fe fc03 	bl	c3b40 <__aeabi_dsub>
   c533a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c533c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5340:	ea43 030a 	orr.w	r3, r3, sl
   c5344:	4313      	orrs	r3, r2
   c5346:	4680      	mov	r8, r0
   c5348:	4689      	mov	r9, r1
   c534a:	d055      	beq.n	c53f8 <_strtod_l+0xba0>
   c534c:	a336      	add	r3, pc, #216	; (adr r3, c5428 <_strtod_l+0xbd0>)
   c534e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5352:	f7ff f81f 	bl	c4394 <__aeabi_dcmplt>
   c5356:	2800      	cmp	r0, #0
   c5358:	f47f acd0 	bne.w	c4cfc <_strtod_l+0x4a4>
   c535c:	a334      	add	r3, pc, #208	; (adr r3, c5430 <_strtod_l+0xbd8>)
   c535e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5362:	4640      	mov	r0, r8
   c5364:	4649      	mov	r1, r9
   c5366:	f7ff f833 	bl	c43d0 <__aeabi_dcmpgt>
   c536a:	2800      	cmp	r0, #0
   c536c:	f43f af7b 	beq.w	c5266 <_strtod_l+0xa0e>
   c5370:	e4c4      	b.n	c4cfc <_strtod_l+0x4a4>
   c5372:	9b04      	ldr	r3, [sp, #16]
   c5374:	b333      	cbz	r3, c53c4 <_strtod_l+0xb6c>
   c5376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c5378:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c537c:	d822      	bhi.n	c53c4 <_strtod_l+0xb6c>
   c537e:	a32e      	add	r3, pc, #184	; (adr r3, c5438 <_strtod_l+0xbe0>)
   c5380:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5384:	4640      	mov	r0, r8
   c5386:	4649      	mov	r1, r9
   c5388:	f7ff f80e 	bl	c43a8 <__aeabi_dcmple>
   c538c:	b1a0      	cbz	r0, c53b8 <_strtod_l+0xb60>
   c538e:	4649      	mov	r1, r9
   c5390:	4640      	mov	r0, r8
   c5392:	f7ff f865 	bl	c4460 <__aeabi_d2uiz>
   c5396:	2801      	cmp	r0, #1
   c5398:	bf38      	it	cc
   c539a:	2001      	movcc	r0, #1
   c539c:	f7fe fd0e 	bl	c3dbc <__aeabi_ui2d>
   c53a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c53a2:	4680      	mov	r8, r0
   c53a4:	4689      	mov	r9, r1
   c53a6:	bb23      	cbnz	r3, c53f2 <_strtod_l+0xb9a>
   c53a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c53ac:	9010      	str	r0, [sp, #64]	; 0x40
   c53ae:	9311      	str	r3, [sp, #68]	; 0x44
   c53b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c53b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c53b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c53ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c53bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c53c0:	1a9b      	subs	r3, r3, r2
   c53c2:	9309      	str	r3, [sp, #36]	; 0x24
   c53c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c53c8:	eeb0 0a48 	vmov.f32	s0, s16
   c53cc:	eef0 0a68 	vmov.f32	s1, s17
   c53d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c53d4:	f001 f838 	bl	c6448 <__ulp>
   c53d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c53dc:	ec53 2b10 	vmov	r2, r3, d0
   c53e0:	f7fe fd66 	bl	c3eb0 <__aeabi_dmul>
   c53e4:	ec53 2b18 	vmov	r2, r3, d8
   c53e8:	f7fe fbac 	bl	c3b44 <__adddf3>
   c53ec:	4682      	mov	sl, r0
   c53ee:	468b      	mov	fp, r1
   c53f0:	e78d      	b.n	c530e <_strtod_l+0xab6>
   c53f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c53f6:	e7db      	b.n	c53b0 <_strtod_l+0xb58>
   c53f8:	a311      	add	r3, pc, #68	; (adr r3, c5440 <_strtod_l+0xbe8>)
   c53fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   c53fe:	f7fe ffc9 	bl	c4394 <__aeabi_dcmplt>
   c5402:	e7b2      	b.n	c536a <_strtod_l+0xb12>
   c5404:	2300      	movs	r3, #0
   c5406:	930a      	str	r3, [sp, #40]	; 0x28
   c5408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c540a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c540c:	6013      	str	r3, [r2, #0]
   c540e:	f7ff ba6b 	b.w	c48e8 <_strtod_l+0x90>
   c5412:	2a65      	cmp	r2, #101	; 0x65
   c5414:	f43f ab5f 	beq.w	c4ad6 <_strtod_l+0x27e>
   c5418:	2a45      	cmp	r2, #69	; 0x45
   c541a:	f43f ab5c 	beq.w	c4ad6 <_strtod_l+0x27e>
   c541e:	2301      	movs	r3, #1
   c5420:	f7ff bb94 	b.w	c4b4c <_strtod_l+0x2f4>
   c5424:	f3af 8000 	nop.w
   c5428:	94a03595 	.word	0x94a03595
   c542c:	3fdfffff 	.word	0x3fdfffff
   c5430:	35afe535 	.word	0x35afe535
   c5434:	3fe00000 	.word	0x3fe00000
   c5438:	ffc00000 	.word	0xffc00000
   c543c:	41dfffff 	.word	0x41dfffff
   c5440:	94a03595 	.word	0x94a03595
   c5444:	3fcfffff 	.word	0x3fcfffff
   c5448:	3ff00000 	.word	0x3ff00000
   c544c:	7ff00000 	.word	0x7ff00000
   c5450:	7fe00000 	.word	0x7fe00000
   c5454:	7c9fffff 	.word	0x7c9fffff
   c5458:	3fe00000 	.word	0x3fe00000
   c545c:	bff00000 	.word	0xbff00000
   c5460:	7fefffff 	.word	0x7fefffff

000c5464 <strtod>:
   c5464:	460a      	mov	r2, r1
   c5466:	4601      	mov	r1, r0
   c5468:	4802      	ldr	r0, [pc, #8]	; (c5474 <strtod+0x10>)
   c546a:	4b03      	ldr	r3, [pc, #12]	; (c5478 <strtod+0x14>)
   c546c:	6800      	ldr	r0, [r0, #0]
   c546e:	f7ff b9f3 	b.w	c4858 <_strtod_l>
   c5472:	bf00      	nop
   c5474:	2003db50 	.word	0x2003db50
   c5478:	2003dbbc 	.word	0x2003dbbc

000c547c <_strtol_l.constprop.0>:
   c547c:	2b01      	cmp	r3, #1
   c547e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c5482:	d001      	beq.n	c5488 <_strtol_l.constprop.0+0xc>
   c5484:	2b24      	cmp	r3, #36	; 0x24
   c5486:	d906      	bls.n	c5496 <_strtol_l.constprop.0+0x1a>
   c5488:	f7f8 ff94 	bl	be3b4 <__errno>
   c548c:	2316      	movs	r3, #22
   c548e:	6003      	str	r3, [r0, #0]
   c5490:	2000      	movs	r0, #0
   c5492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5496:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c557c <_strtol_l.constprop.0+0x100>
   c549a:	460d      	mov	r5, r1
   c549c:	462e      	mov	r6, r5
   c549e:	f815 4b01 	ldrb.w	r4, [r5], #1
   c54a2:	f814 700c 	ldrb.w	r7, [r4, ip]
   c54a6:	f017 0708 	ands.w	r7, r7, #8
   c54aa:	d1f7      	bne.n	c549c <_strtol_l.constprop.0+0x20>
   c54ac:	2c2d      	cmp	r4, #45	; 0x2d
   c54ae:	d132      	bne.n	c5516 <_strtol_l.constprop.0+0x9a>
   c54b0:	782c      	ldrb	r4, [r5, #0]
   c54b2:	2701      	movs	r7, #1
   c54b4:	1cb5      	adds	r5, r6, #2
   c54b6:	2b00      	cmp	r3, #0
   c54b8:	d05b      	beq.n	c5572 <_strtol_l.constprop.0+0xf6>
   c54ba:	2b10      	cmp	r3, #16
   c54bc:	d109      	bne.n	c54d2 <_strtol_l.constprop.0+0x56>
   c54be:	2c30      	cmp	r4, #48	; 0x30
   c54c0:	d107      	bne.n	c54d2 <_strtol_l.constprop.0+0x56>
   c54c2:	782c      	ldrb	r4, [r5, #0]
   c54c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c54c8:	2c58      	cmp	r4, #88	; 0x58
   c54ca:	d14d      	bne.n	c5568 <_strtol_l.constprop.0+0xec>
   c54cc:	786c      	ldrb	r4, [r5, #1]
   c54ce:	2310      	movs	r3, #16
   c54d0:	3502      	adds	r5, #2
   c54d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c54d6:	f108 38ff 	add.w	r8, r8, #4294967295
   c54da:	f04f 0c00 	mov.w	ip, #0
   c54de:	fbb8 f9f3 	udiv	r9, r8, r3
   c54e2:	4666      	mov	r6, ip
   c54e4:	fb03 8a19 	mls	sl, r3, r9, r8
   c54e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c54ec:	f1be 0f09 	cmp.w	lr, #9
   c54f0:	d816      	bhi.n	c5520 <_strtol_l.constprop.0+0xa4>
   c54f2:	4674      	mov	r4, lr
   c54f4:	42a3      	cmp	r3, r4
   c54f6:	dd24      	ble.n	c5542 <_strtol_l.constprop.0+0xc6>
   c54f8:	f1bc 0f00 	cmp.w	ip, #0
   c54fc:	db1e      	blt.n	c553c <_strtol_l.constprop.0+0xc0>
   c54fe:	45b1      	cmp	r9, r6
   c5500:	d31c      	bcc.n	c553c <_strtol_l.constprop.0+0xc0>
   c5502:	d101      	bne.n	c5508 <_strtol_l.constprop.0+0x8c>
   c5504:	45a2      	cmp	sl, r4
   c5506:	db19      	blt.n	c553c <_strtol_l.constprop.0+0xc0>
   c5508:	fb06 4603 	mla	r6, r6, r3, r4
   c550c:	f04f 0c01 	mov.w	ip, #1
   c5510:	f815 4b01 	ldrb.w	r4, [r5], #1
   c5514:	e7e8      	b.n	c54e8 <_strtol_l.constprop.0+0x6c>
   c5516:	2c2b      	cmp	r4, #43	; 0x2b
   c5518:	bf04      	itt	eq
   c551a:	782c      	ldrbeq	r4, [r5, #0]
   c551c:	1cb5      	addeq	r5, r6, #2
   c551e:	e7ca      	b.n	c54b6 <_strtol_l.constprop.0+0x3a>
   c5520:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c5524:	f1be 0f19 	cmp.w	lr, #25
   c5528:	d801      	bhi.n	c552e <_strtol_l.constprop.0+0xb2>
   c552a:	3c37      	subs	r4, #55	; 0x37
   c552c:	e7e2      	b.n	c54f4 <_strtol_l.constprop.0+0x78>
   c552e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c5532:	f1be 0f19 	cmp.w	lr, #25
   c5536:	d804      	bhi.n	c5542 <_strtol_l.constprop.0+0xc6>
   c5538:	3c57      	subs	r4, #87	; 0x57
   c553a:	e7db      	b.n	c54f4 <_strtol_l.constprop.0+0x78>
   c553c:	f04f 3cff 	mov.w	ip, #4294967295
   c5540:	e7e6      	b.n	c5510 <_strtol_l.constprop.0+0x94>
   c5542:	f1bc 0f00 	cmp.w	ip, #0
   c5546:	da05      	bge.n	c5554 <_strtol_l.constprop.0+0xd8>
   c5548:	2322      	movs	r3, #34	; 0x22
   c554a:	6003      	str	r3, [r0, #0]
   c554c:	4646      	mov	r6, r8
   c554e:	b942      	cbnz	r2, c5562 <_strtol_l.constprop.0+0xe6>
   c5550:	4630      	mov	r0, r6
   c5552:	e79e      	b.n	c5492 <_strtol_l.constprop.0+0x16>
   c5554:	b107      	cbz	r7, c5558 <_strtol_l.constprop.0+0xdc>
   c5556:	4276      	negs	r6, r6
   c5558:	2a00      	cmp	r2, #0
   c555a:	d0f9      	beq.n	c5550 <_strtol_l.constprop.0+0xd4>
   c555c:	f1bc 0f00 	cmp.w	ip, #0
   c5560:	d000      	beq.n	c5564 <_strtol_l.constprop.0+0xe8>
   c5562:	1e69      	subs	r1, r5, #1
   c5564:	6011      	str	r1, [r2, #0]
   c5566:	e7f3      	b.n	c5550 <_strtol_l.constprop.0+0xd4>
   c5568:	2430      	movs	r4, #48	; 0x30
   c556a:	2b00      	cmp	r3, #0
   c556c:	d1b1      	bne.n	c54d2 <_strtol_l.constprop.0+0x56>
   c556e:	2308      	movs	r3, #8
   c5570:	e7af      	b.n	c54d2 <_strtol_l.constprop.0+0x56>
   c5572:	2c30      	cmp	r4, #48	; 0x30
   c5574:	d0a5      	beq.n	c54c2 <_strtol_l.constprop.0+0x46>
   c5576:	230a      	movs	r3, #10
   c5578:	e7ab      	b.n	c54d2 <_strtol_l.constprop.0+0x56>
   c557a:	bf00      	nop
   c557c:	000c8789 	.word	0x000c8789

000c5580 <strtol>:
   c5580:	4613      	mov	r3, r2
   c5582:	460a      	mov	r2, r1
   c5584:	4601      	mov	r1, r0
   c5586:	4802      	ldr	r0, [pc, #8]	; (c5590 <strtol+0x10>)
   c5588:	6800      	ldr	r0, [r0, #0]
   c558a:	f7ff bf77 	b.w	c547c <_strtol_l.constprop.0>
   c558e:	bf00      	nop
   c5590:	2003db50 	.word	0x2003db50

000c5594 <__register_exitproc>:
   c5594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5598:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c5654 <__register_exitproc+0xc0>
   c559c:	4606      	mov	r6, r0
   c559e:	f8d8 0000 	ldr.w	r0, [r8]
   c55a2:	461f      	mov	r7, r3
   c55a4:	460d      	mov	r5, r1
   c55a6:	4691      	mov	r9, r2
   c55a8:	f000 fbc6 	bl	c5d38 <__retarget_lock_acquire_recursive>
   c55ac:	4b25      	ldr	r3, [pc, #148]	; (c5644 <__register_exitproc+0xb0>)
   c55ae:	681c      	ldr	r4, [r3, #0]
   c55b0:	b934      	cbnz	r4, c55c0 <__register_exitproc+0x2c>
   c55b2:	4c25      	ldr	r4, [pc, #148]	; (c5648 <__register_exitproc+0xb4>)
   c55b4:	601c      	str	r4, [r3, #0]
   c55b6:	4b25      	ldr	r3, [pc, #148]	; (c564c <__register_exitproc+0xb8>)
   c55b8:	b113      	cbz	r3, c55c0 <__register_exitproc+0x2c>
   c55ba:	681b      	ldr	r3, [r3, #0]
   c55bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c55c0:	6863      	ldr	r3, [r4, #4]
   c55c2:	2b1f      	cmp	r3, #31
   c55c4:	dd07      	ble.n	c55d6 <__register_exitproc+0x42>
   c55c6:	f8d8 0000 	ldr.w	r0, [r8]
   c55ca:	f000 fbb7 	bl	c5d3c <__retarget_lock_release_recursive>
   c55ce:	f04f 30ff 	mov.w	r0, #4294967295
   c55d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c55d6:	b34e      	cbz	r6, c562c <__register_exitproc+0x98>
   c55d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c55dc:	b988      	cbnz	r0, c5602 <__register_exitproc+0x6e>
   c55de:	4b1c      	ldr	r3, [pc, #112]	; (c5650 <__register_exitproc+0xbc>)
   c55e0:	b923      	cbnz	r3, c55ec <__register_exitproc+0x58>
   c55e2:	f8d8 0000 	ldr.w	r0, [r8]
   c55e6:	f000 fba8 	bl	c5d3a <__retarget_lock_release>
   c55ea:	e7f0      	b.n	c55ce <__register_exitproc+0x3a>
   c55ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   c55f0:	f7f8 fe98 	bl	be324 <malloc>
   c55f4:	2800      	cmp	r0, #0
   c55f6:	d0f4      	beq.n	c55e2 <__register_exitproc+0x4e>
   c55f8:	2300      	movs	r3, #0
   c55fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c55fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c5602:	6863      	ldr	r3, [r4, #4]
   c5604:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c5608:	2201      	movs	r2, #1
   c560a:	409a      	lsls	r2, r3
   c560c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c5610:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c5614:	4313      	orrs	r3, r2
   c5616:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c561a:	2e02      	cmp	r6, #2
   c561c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c5620:	bf02      	ittt	eq
   c5622:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c5626:	4313      	orreq	r3, r2
   c5628:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c562c:	6863      	ldr	r3, [r4, #4]
   c562e:	f8d8 0000 	ldr.w	r0, [r8]
   c5632:	1c5a      	adds	r2, r3, #1
   c5634:	3302      	adds	r3, #2
   c5636:	6062      	str	r2, [r4, #4]
   c5638:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c563c:	f000 fb7e 	bl	c5d3c <__retarget_lock_release_recursive>
   c5640:	2000      	movs	r0, #0
   c5642:	e7c6      	b.n	c55d2 <__register_exitproc+0x3e>
   c5644:	2003e7e8 	.word	0x2003e7e8
   c5648:	2003e75c 	.word	0x2003e75c
   c564c:	00000000 	.word	0x00000000
   c5650:	000be325 	.word	0x000be325
   c5654:	2003dbb4 	.word	0x2003dbb4

000c5658 <rshift>:
   c5658:	6903      	ldr	r3, [r0, #16]
   c565a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c565e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c5662:	ea4f 1261 	mov.w	r2, r1, asr #5
   c5666:	f100 0414 	add.w	r4, r0, #20
   c566a:	dd45      	ble.n	c56f8 <rshift+0xa0>
   c566c:	f011 011f 	ands.w	r1, r1, #31
   c5670:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c5674:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c5678:	d10c      	bne.n	c5694 <rshift+0x3c>
   c567a:	f100 0710 	add.w	r7, r0, #16
   c567e:	4629      	mov	r1, r5
   c5680:	42b1      	cmp	r1, r6
   c5682:	d334      	bcc.n	c56ee <rshift+0x96>
   c5684:	1a9b      	subs	r3, r3, r2
   c5686:	009b      	lsls	r3, r3, #2
   c5688:	1eea      	subs	r2, r5, #3
   c568a:	4296      	cmp	r6, r2
   c568c:	bf38      	it	cc
   c568e:	2300      	movcc	r3, #0
   c5690:	4423      	add	r3, r4
   c5692:	e015      	b.n	c56c0 <rshift+0x68>
   c5694:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c5698:	f1c1 0820 	rsb	r8, r1, #32
   c569c:	40cf      	lsrs	r7, r1
   c569e:	f105 0e04 	add.w	lr, r5, #4
   c56a2:	46a1      	mov	r9, r4
   c56a4:	4576      	cmp	r6, lr
   c56a6:	46f4      	mov	ip, lr
   c56a8:	d815      	bhi.n	c56d6 <rshift+0x7e>
   c56aa:	1a9a      	subs	r2, r3, r2
   c56ac:	0092      	lsls	r2, r2, #2
   c56ae:	3a04      	subs	r2, #4
   c56b0:	3501      	adds	r5, #1
   c56b2:	42ae      	cmp	r6, r5
   c56b4:	bf38      	it	cc
   c56b6:	2200      	movcc	r2, #0
   c56b8:	18a3      	adds	r3, r4, r2
   c56ba:	50a7      	str	r7, [r4, r2]
   c56bc:	b107      	cbz	r7, c56c0 <rshift+0x68>
   c56be:	3304      	adds	r3, #4
   c56c0:	1b1a      	subs	r2, r3, r4
   c56c2:	42a3      	cmp	r3, r4
   c56c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c56c8:	bf08      	it	eq
   c56ca:	2300      	moveq	r3, #0
   c56cc:	6102      	str	r2, [r0, #16]
   c56ce:	bf08      	it	eq
   c56d0:	6143      	streq	r3, [r0, #20]
   c56d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c56d6:	f8dc c000 	ldr.w	ip, [ip]
   c56da:	fa0c fc08 	lsl.w	ip, ip, r8
   c56de:	ea4c 0707 	orr.w	r7, ip, r7
   c56e2:	f849 7b04 	str.w	r7, [r9], #4
   c56e6:	f85e 7b04 	ldr.w	r7, [lr], #4
   c56ea:	40cf      	lsrs	r7, r1
   c56ec:	e7da      	b.n	c56a4 <rshift+0x4c>
   c56ee:	f851 cb04 	ldr.w	ip, [r1], #4
   c56f2:	f847 cf04 	str.w	ip, [r7, #4]!
   c56f6:	e7c3      	b.n	c5680 <rshift+0x28>
   c56f8:	4623      	mov	r3, r4
   c56fa:	e7e1      	b.n	c56c0 <rshift+0x68>

000c56fc <__hexdig_fun>:
   c56fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c5700:	2b09      	cmp	r3, #9
   c5702:	d802      	bhi.n	c570a <__hexdig_fun+0xe>
   c5704:	3820      	subs	r0, #32
   c5706:	b2c0      	uxtb	r0, r0
   c5708:	4770      	bx	lr
   c570a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c570e:	2b05      	cmp	r3, #5
   c5710:	d801      	bhi.n	c5716 <__hexdig_fun+0x1a>
   c5712:	3847      	subs	r0, #71	; 0x47
   c5714:	e7f7      	b.n	c5706 <__hexdig_fun+0xa>
   c5716:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c571a:	2b05      	cmp	r3, #5
   c571c:	d801      	bhi.n	c5722 <__hexdig_fun+0x26>
   c571e:	3827      	subs	r0, #39	; 0x27
   c5720:	e7f1      	b.n	c5706 <__hexdig_fun+0xa>
   c5722:	2000      	movs	r0, #0
   c5724:	4770      	bx	lr
	...

000c5728 <__gethex>:
   c5728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c572c:	ed2d 8b02 	vpush	{d8}
   c5730:	b089      	sub	sp, #36	; 0x24
   c5732:	ee08 0a10 	vmov	s16, r0
   c5736:	9304      	str	r3, [sp, #16]
   c5738:	4bb4      	ldr	r3, [pc, #720]	; (c5a0c <__gethex+0x2e4>)
   c573a:	681b      	ldr	r3, [r3, #0]
   c573c:	9301      	str	r3, [sp, #4]
   c573e:	4618      	mov	r0, r3
   c5740:	468b      	mov	fp, r1
   c5742:	4690      	mov	r8, r2
   c5744:	f7fe fff3 	bl	c472e <strlen>
   c5748:	9b01      	ldr	r3, [sp, #4]
   c574a:	f8db 2000 	ldr.w	r2, [fp]
   c574e:	4403      	add	r3, r0
   c5750:	4682      	mov	sl, r0
   c5752:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c5756:	9305      	str	r3, [sp, #20]
   c5758:	1c93      	adds	r3, r2, #2
   c575a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c575e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c5762:	32fe      	adds	r2, #254	; 0xfe
   c5764:	18d1      	adds	r1, r2, r3
   c5766:	461f      	mov	r7, r3
   c5768:	f813 0b01 	ldrb.w	r0, [r3], #1
   c576c:	9100      	str	r1, [sp, #0]
   c576e:	2830      	cmp	r0, #48	; 0x30
   c5770:	d0f8      	beq.n	c5764 <__gethex+0x3c>
   c5772:	f7ff ffc3 	bl	c56fc <__hexdig_fun>
   c5776:	4604      	mov	r4, r0
   c5778:	2800      	cmp	r0, #0
   c577a:	d13a      	bne.n	c57f2 <__gethex+0xca>
   c577c:	9901      	ldr	r1, [sp, #4]
   c577e:	4652      	mov	r2, sl
   c5780:	4638      	mov	r0, r7
   c5782:	f7fe ffef 	bl	c4764 <strncmp>
   c5786:	4605      	mov	r5, r0
   c5788:	2800      	cmp	r0, #0
   c578a:	d168      	bne.n	c585e <__gethex+0x136>
   c578c:	f817 000a 	ldrb.w	r0, [r7, sl]
   c5790:	eb07 060a 	add.w	r6, r7, sl
   c5794:	f7ff ffb2 	bl	c56fc <__hexdig_fun>
   c5798:	2800      	cmp	r0, #0
   c579a:	d062      	beq.n	c5862 <__gethex+0x13a>
   c579c:	4633      	mov	r3, r6
   c579e:	7818      	ldrb	r0, [r3, #0]
   c57a0:	2830      	cmp	r0, #48	; 0x30
   c57a2:	461f      	mov	r7, r3
   c57a4:	f103 0301 	add.w	r3, r3, #1
   c57a8:	d0f9      	beq.n	c579e <__gethex+0x76>
   c57aa:	f7ff ffa7 	bl	c56fc <__hexdig_fun>
   c57ae:	2301      	movs	r3, #1
   c57b0:	fab0 f480 	clz	r4, r0
   c57b4:	0964      	lsrs	r4, r4, #5
   c57b6:	4635      	mov	r5, r6
   c57b8:	9300      	str	r3, [sp, #0]
   c57ba:	463a      	mov	r2, r7
   c57bc:	4616      	mov	r6, r2
   c57be:	3201      	adds	r2, #1
   c57c0:	7830      	ldrb	r0, [r6, #0]
   c57c2:	f7ff ff9b 	bl	c56fc <__hexdig_fun>
   c57c6:	2800      	cmp	r0, #0
   c57c8:	d1f8      	bne.n	c57bc <__gethex+0x94>
   c57ca:	9901      	ldr	r1, [sp, #4]
   c57cc:	4652      	mov	r2, sl
   c57ce:	4630      	mov	r0, r6
   c57d0:	f7fe ffc8 	bl	c4764 <strncmp>
   c57d4:	b980      	cbnz	r0, c57f8 <__gethex+0xd0>
   c57d6:	b94d      	cbnz	r5, c57ec <__gethex+0xc4>
   c57d8:	eb06 050a 	add.w	r5, r6, sl
   c57dc:	462a      	mov	r2, r5
   c57de:	4616      	mov	r6, r2
   c57e0:	3201      	adds	r2, #1
   c57e2:	7830      	ldrb	r0, [r6, #0]
   c57e4:	f7ff ff8a 	bl	c56fc <__hexdig_fun>
   c57e8:	2800      	cmp	r0, #0
   c57ea:	d1f8      	bne.n	c57de <__gethex+0xb6>
   c57ec:	1bad      	subs	r5, r5, r6
   c57ee:	00ad      	lsls	r5, r5, #2
   c57f0:	e004      	b.n	c57fc <__gethex+0xd4>
   c57f2:	2400      	movs	r4, #0
   c57f4:	4625      	mov	r5, r4
   c57f6:	e7e0      	b.n	c57ba <__gethex+0x92>
   c57f8:	2d00      	cmp	r5, #0
   c57fa:	d1f7      	bne.n	c57ec <__gethex+0xc4>
   c57fc:	7833      	ldrb	r3, [r6, #0]
   c57fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c5802:	2b50      	cmp	r3, #80	; 0x50
   c5804:	d13b      	bne.n	c587e <__gethex+0x156>
   c5806:	7873      	ldrb	r3, [r6, #1]
   c5808:	2b2b      	cmp	r3, #43	; 0x2b
   c580a:	d02c      	beq.n	c5866 <__gethex+0x13e>
   c580c:	2b2d      	cmp	r3, #45	; 0x2d
   c580e:	d02e      	beq.n	c586e <__gethex+0x146>
   c5810:	1c71      	adds	r1, r6, #1
   c5812:	f04f 0900 	mov.w	r9, #0
   c5816:	7808      	ldrb	r0, [r1, #0]
   c5818:	f7ff ff70 	bl	c56fc <__hexdig_fun>
   c581c:	1e43      	subs	r3, r0, #1
   c581e:	b2db      	uxtb	r3, r3
   c5820:	2b18      	cmp	r3, #24
   c5822:	d82c      	bhi.n	c587e <__gethex+0x156>
   c5824:	f1a0 0210 	sub.w	r2, r0, #16
   c5828:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c582c:	f7ff ff66 	bl	c56fc <__hexdig_fun>
   c5830:	1e43      	subs	r3, r0, #1
   c5832:	b2db      	uxtb	r3, r3
   c5834:	2b18      	cmp	r3, #24
   c5836:	d91d      	bls.n	c5874 <__gethex+0x14c>
   c5838:	f1b9 0f00 	cmp.w	r9, #0
   c583c:	d000      	beq.n	c5840 <__gethex+0x118>
   c583e:	4252      	negs	r2, r2
   c5840:	4415      	add	r5, r2
   c5842:	f8cb 1000 	str.w	r1, [fp]
   c5846:	b1e4      	cbz	r4, c5882 <__gethex+0x15a>
   c5848:	9b00      	ldr	r3, [sp, #0]
   c584a:	2b00      	cmp	r3, #0
   c584c:	bf14      	ite	ne
   c584e:	2700      	movne	r7, #0
   c5850:	2706      	moveq	r7, #6
   c5852:	4638      	mov	r0, r7
   c5854:	b009      	add	sp, #36	; 0x24
   c5856:	ecbd 8b02 	vpop	{d8}
   c585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c585e:	463e      	mov	r6, r7
   c5860:	4625      	mov	r5, r4
   c5862:	2401      	movs	r4, #1
   c5864:	e7ca      	b.n	c57fc <__gethex+0xd4>
   c5866:	f04f 0900 	mov.w	r9, #0
   c586a:	1cb1      	adds	r1, r6, #2
   c586c:	e7d3      	b.n	c5816 <__gethex+0xee>
   c586e:	f04f 0901 	mov.w	r9, #1
   c5872:	e7fa      	b.n	c586a <__gethex+0x142>
   c5874:	230a      	movs	r3, #10
   c5876:	fb03 0202 	mla	r2, r3, r2, r0
   c587a:	3a10      	subs	r2, #16
   c587c:	e7d4      	b.n	c5828 <__gethex+0x100>
   c587e:	4631      	mov	r1, r6
   c5880:	e7df      	b.n	c5842 <__gethex+0x11a>
   c5882:	1bf3      	subs	r3, r6, r7
   c5884:	3b01      	subs	r3, #1
   c5886:	4621      	mov	r1, r4
   c5888:	2b07      	cmp	r3, #7
   c588a:	dc0b      	bgt.n	c58a4 <__gethex+0x17c>
   c588c:	ee18 0a10 	vmov	r0, s16
   c5890:	f000 fa68 	bl	c5d64 <_Balloc>
   c5894:	4604      	mov	r4, r0
   c5896:	b940      	cbnz	r0, c58aa <__gethex+0x182>
   c5898:	4b5d      	ldr	r3, [pc, #372]	; (c5a10 <__gethex+0x2e8>)
   c589a:	4602      	mov	r2, r0
   c589c:	21de      	movs	r1, #222	; 0xde
   c589e:	485d      	ldr	r0, [pc, #372]	; (c5a14 <__gethex+0x2ec>)
   c58a0:	f7f8 fd90 	bl	be3c4 <__assert_func>
   c58a4:	3101      	adds	r1, #1
   c58a6:	105b      	asrs	r3, r3, #1
   c58a8:	e7ee      	b.n	c5888 <__gethex+0x160>
   c58aa:	f100 0914 	add.w	r9, r0, #20
   c58ae:	f04f 0b00 	mov.w	fp, #0
   c58b2:	f1ca 0301 	rsb	r3, sl, #1
   c58b6:	f8cd 9008 	str.w	r9, [sp, #8]
   c58ba:	f8cd b000 	str.w	fp, [sp]
   c58be:	9306      	str	r3, [sp, #24]
   c58c0:	42b7      	cmp	r7, r6
   c58c2:	d340      	bcc.n	c5946 <__gethex+0x21e>
   c58c4:	9802      	ldr	r0, [sp, #8]
   c58c6:	9b00      	ldr	r3, [sp, #0]
   c58c8:	f840 3b04 	str.w	r3, [r0], #4
   c58cc:	eba0 0009 	sub.w	r0, r0, r9
   c58d0:	1080      	asrs	r0, r0, #2
   c58d2:	0146      	lsls	r6, r0, #5
   c58d4:	6120      	str	r0, [r4, #16]
   c58d6:	4618      	mov	r0, r3
   c58d8:	f000 fb36 	bl	c5f48 <__hi0bits>
   c58dc:	1a30      	subs	r0, r6, r0
   c58de:	f8d8 6000 	ldr.w	r6, [r8]
   c58e2:	42b0      	cmp	r0, r6
   c58e4:	dd63      	ble.n	c59ae <__gethex+0x286>
   c58e6:	1b87      	subs	r7, r0, r6
   c58e8:	4639      	mov	r1, r7
   c58ea:	4620      	mov	r0, r4
   c58ec:	f000 feda 	bl	c66a4 <__any_on>
   c58f0:	4682      	mov	sl, r0
   c58f2:	b1a8      	cbz	r0, c5920 <__gethex+0x1f8>
   c58f4:	1e7b      	subs	r3, r7, #1
   c58f6:	1159      	asrs	r1, r3, #5
   c58f8:	f003 021f 	and.w	r2, r3, #31
   c58fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c5900:	f04f 0a01 	mov.w	sl, #1
   c5904:	fa0a f202 	lsl.w	r2, sl, r2
   c5908:	420a      	tst	r2, r1
   c590a:	d009      	beq.n	c5920 <__gethex+0x1f8>
   c590c:	4553      	cmp	r3, sl
   c590e:	dd05      	ble.n	c591c <__gethex+0x1f4>
   c5910:	1eb9      	subs	r1, r7, #2
   c5912:	4620      	mov	r0, r4
   c5914:	f000 fec6 	bl	c66a4 <__any_on>
   c5918:	2800      	cmp	r0, #0
   c591a:	d145      	bne.n	c59a8 <__gethex+0x280>
   c591c:	f04f 0a02 	mov.w	sl, #2
   c5920:	4639      	mov	r1, r7
   c5922:	4620      	mov	r0, r4
   c5924:	f7ff fe98 	bl	c5658 <rshift>
   c5928:	443d      	add	r5, r7
   c592a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c592e:	42ab      	cmp	r3, r5
   c5930:	da4c      	bge.n	c59cc <__gethex+0x2a4>
   c5932:	ee18 0a10 	vmov	r0, s16
   c5936:	4621      	mov	r1, r4
   c5938:	f000 fa54 	bl	c5de4 <_Bfree>
   c593c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c593e:	2300      	movs	r3, #0
   c5940:	6013      	str	r3, [r2, #0]
   c5942:	27a3      	movs	r7, #163	; 0xa3
   c5944:	e785      	b.n	c5852 <__gethex+0x12a>
   c5946:	1e73      	subs	r3, r6, #1
   c5948:	9a05      	ldr	r2, [sp, #20]
   c594a:	9303      	str	r3, [sp, #12]
   c594c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c5950:	4293      	cmp	r3, r2
   c5952:	d019      	beq.n	c5988 <__gethex+0x260>
   c5954:	f1bb 0f20 	cmp.w	fp, #32
   c5958:	d107      	bne.n	c596a <__gethex+0x242>
   c595a:	9b02      	ldr	r3, [sp, #8]
   c595c:	9a00      	ldr	r2, [sp, #0]
   c595e:	f843 2b04 	str.w	r2, [r3], #4
   c5962:	9302      	str	r3, [sp, #8]
   c5964:	2300      	movs	r3, #0
   c5966:	9300      	str	r3, [sp, #0]
   c5968:	469b      	mov	fp, r3
   c596a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c596e:	f7ff fec5 	bl	c56fc <__hexdig_fun>
   c5972:	9b00      	ldr	r3, [sp, #0]
   c5974:	f000 000f 	and.w	r0, r0, #15
   c5978:	fa00 f00b 	lsl.w	r0, r0, fp
   c597c:	4303      	orrs	r3, r0
   c597e:	9300      	str	r3, [sp, #0]
   c5980:	f10b 0b04 	add.w	fp, fp, #4
   c5984:	9b03      	ldr	r3, [sp, #12]
   c5986:	e00d      	b.n	c59a4 <__gethex+0x27c>
   c5988:	9b03      	ldr	r3, [sp, #12]
   c598a:	9a06      	ldr	r2, [sp, #24]
   c598c:	4413      	add	r3, r2
   c598e:	42bb      	cmp	r3, r7
   c5990:	d3e0      	bcc.n	c5954 <__gethex+0x22c>
   c5992:	4618      	mov	r0, r3
   c5994:	9901      	ldr	r1, [sp, #4]
   c5996:	9307      	str	r3, [sp, #28]
   c5998:	4652      	mov	r2, sl
   c599a:	f7fe fee3 	bl	c4764 <strncmp>
   c599e:	9b07      	ldr	r3, [sp, #28]
   c59a0:	2800      	cmp	r0, #0
   c59a2:	d1d7      	bne.n	c5954 <__gethex+0x22c>
   c59a4:	461e      	mov	r6, r3
   c59a6:	e78b      	b.n	c58c0 <__gethex+0x198>
   c59a8:	f04f 0a03 	mov.w	sl, #3
   c59ac:	e7b8      	b.n	c5920 <__gethex+0x1f8>
   c59ae:	da0a      	bge.n	c59c6 <__gethex+0x29e>
   c59b0:	1a37      	subs	r7, r6, r0
   c59b2:	4621      	mov	r1, r4
   c59b4:	ee18 0a10 	vmov	r0, s16
   c59b8:	463a      	mov	r2, r7
   c59ba:	f000 fc2f 	bl	c621c <__lshift>
   c59be:	1bed      	subs	r5, r5, r7
   c59c0:	4604      	mov	r4, r0
   c59c2:	f100 0914 	add.w	r9, r0, #20
   c59c6:	f04f 0a00 	mov.w	sl, #0
   c59ca:	e7ae      	b.n	c592a <__gethex+0x202>
   c59cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c59d0:	42a8      	cmp	r0, r5
   c59d2:	dd72      	ble.n	c5aba <__gethex+0x392>
   c59d4:	1b45      	subs	r5, r0, r5
   c59d6:	42ae      	cmp	r6, r5
   c59d8:	dc36      	bgt.n	c5a48 <__gethex+0x320>
   c59da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c59de:	2b02      	cmp	r3, #2
   c59e0:	d02a      	beq.n	c5a38 <__gethex+0x310>
   c59e2:	2b03      	cmp	r3, #3
   c59e4:	d02c      	beq.n	c5a40 <__gethex+0x318>
   c59e6:	2b01      	cmp	r3, #1
   c59e8:	d11c      	bne.n	c5a24 <__gethex+0x2fc>
   c59ea:	42ae      	cmp	r6, r5
   c59ec:	d11a      	bne.n	c5a24 <__gethex+0x2fc>
   c59ee:	2e01      	cmp	r6, #1
   c59f0:	d112      	bne.n	c5a18 <__gethex+0x2f0>
   c59f2:	9a04      	ldr	r2, [sp, #16]
   c59f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c59f8:	6013      	str	r3, [r2, #0]
   c59fa:	2301      	movs	r3, #1
   c59fc:	6123      	str	r3, [r4, #16]
   c59fe:	f8c9 3000 	str.w	r3, [r9]
   c5a02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5a04:	2762      	movs	r7, #98	; 0x62
   c5a06:	601c      	str	r4, [r3, #0]
   c5a08:	e723      	b.n	c5852 <__gethex+0x12a>
   c5a0a:	bf00      	nop
   c5a0c:	000c8920 	.word	0x000c8920
   c5a10:	000c8889 	.word	0x000c8889
   c5a14:	000c889a 	.word	0x000c889a
   c5a18:	1e71      	subs	r1, r6, #1
   c5a1a:	4620      	mov	r0, r4
   c5a1c:	f000 fe42 	bl	c66a4 <__any_on>
   c5a20:	2800      	cmp	r0, #0
   c5a22:	d1e6      	bne.n	c59f2 <__gethex+0x2ca>
   c5a24:	ee18 0a10 	vmov	r0, s16
   c5a28:	4621      	mov	r1, r4
   c5a2a:	f000 f9db 	bl	c5de4 <_Bfree>
   c5a2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c5a30:	2300      	movs	r3, #0
   c5a32:	6013      	str	r3, [r2, #0]
   c5a34:	2750      	movs	r7, #80	; 0x50
   c5a36:	e70c      	b.n	c5852 <__gethex+0x12a>
   c5a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5a3a:	2b00      	cmp	r3, #0
   c5a3c:	d1f2      	bne.n	c5a24 <__gethex+0x2fc>
   c5a3e:	e7d8      	b.n	c59f2 <__gethex+0x2ca>
   c5a40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5a42:	2b00      	cmp	r3, #0
   c5a44:	d1d5      	bne.n	c59f2 <__gethex+0x2ca>
   c5a46:	e7ed      	b.n	c5a24 <__gethex+0x2fc>
   c5a48:	1e6f      	subs	r7, r5, #1
   c5a4a:	f1ba 0f00 	cmp.w	sl, #0
   c5a4e:	d131      	bne.n	c5ab4 <__gethex+0x38c>
   c5a50:	b127      	cbz	r7, c5a5c <__gethex+0x334>
   c5a52:	4639      	mov	r1, r7
   c5a54:	4620      	mov	r0, r4
   c5a56:	f000 fe25 	bl	c66a4 <__any_on>
   c5a5a:	4682      	mov	sl, r0
   c5a5c:	117b      	asrs	r3, r7, #5
   c5a5e:	2101      	movs	r1, #1
   c5a60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c5a64:	f007 071f 	and.w	r7, r7, #31
   c5a68:	fa01 f707 	lsl.w	r7, r1, r7
   c5a6c:	421f      	tst	r7, r3
   c5a6e:	4629      	mov	r1, r5
   c5a70:	4620      	mov	r0, r4
   c5a72:	bf18      	it	ne
   c5a74:	f04a 0a02 	orrne.w	sl, sl, #2
   c5a78:	1b76      	subs	r6, r6, r5
   c5a7a:	f7ff fded 	bl	c5658 <rshift>
   c5a7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c5a82:	2702      	movs	r7, #2
   c5a84:	f1ba 0f00 	cmp.w	sl, #0
   c5a88:	d048      	beq.n	c5b1c <__gethex+0x3f4>
   c5a8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5a8e:	2b02      	cmp	r3, #2
   c5a90:	d015      	beq.n	c5abe <__gethex+0x396>
   c5a92:	2b03      	cmp	r3, #3
   c5a94:	d017      	beq.n	c5ac6 <__gethex+0x39e>
   c5a96:	2b01      	cmp	r3, #1
   c5a98:	d109      	bne.n	c5aae <__gethex+0x386>
   c5a9a:	f01a 0f02 	tst.w	sl, #2
   c5a9e:	d006      	beq.n	c5aae <__gethex+0x386>
   c5aa0:	f8d9 0000 	ldr.w	r0, [r9]
   c5aa4:	ea4a 0a00 	orr.w	sl, sl, r0
   c5aa8:	f01a 0f01 	tst.w	sl, #1
   c5aac:	d10e      	bne.n	c5acc <__gethex+0x3a4>
   c5aae:	f047 0710 	orr.w	r7, r7, #16
   c5ab2:	e033      	b.n	c5b1c <__gethex+0x3f4>
   c5ab4:	f04f 0a01 	mov.w	sl, #1
   c5ab8:	e7d0      	b.n	c5a5c <__gethex+0x334>
   c5aba:	2701      	movs	r7, #1
   c5abc:	e7e2      	b.n	c5a84 <__gethex+0x35c>
   c5abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5ac0:	f1c3 0301 	rsb	r3, r3, #1
   c5ac4:	9315      	str	r3, [sp, #84]	; 0x54
   c5ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5ac8:	2b00      	cmp	r3, #0
   c5aca:	d0f0      	beq.n	c5aae <__gethex+0x386>
   c5acc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5ad0:	f104 0314 	add.w	r3, r4, #20
   c5ad4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5ad8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c5adc:	f04f 0c00 	mov.w	ip, #0
   c5ae0:	4618      	mov	r0, r3
   c5ae2:	f853 2b04 	ldr.w	r2, [r3], #4
   c5ae6:	f1b2 3fff 	cmp.w	r2, #4294967295
   c5aea:	d01c      	beq.n	c5b26 <__gethex+0x3fe>
   c5aec:	3201      	adds	r2, #1
   c5aee:	6002      	str	r2, [r0, #0]
   c5af0:	2f02      	cmp	r7, #2
   c5af2:	f104 0314 	add.w	r3, r4, #20
   c5af6:	d13f      	bne.n	c5b78 <__gethex+0x450>
   c5af8:	f8d8 2000 	ldr.w	r2, [r8]
   c5afc:	3a01      	subs	r2, #1
   c5afe:	42b2      	cmp	r2, r6
   c5b00:	d10a      	bne.n	c5b18 <__gethex+0x3f0>
   c5b02:	1171      	asrs	r1, r6, #5
   c5b04:	2201      	movs	r2, #1
   c5b06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c5b0a:	f006 061f 	and.w	r6, r6, #31
   c5b0e:	fa02 f606 	lsl.w	r6, r2, r6
   c5b12:	421e      	tst	r6, r3
   c5b14:	bf18      	it	ne
   c5b16:	4617      	movne	r7, r2
   c5b18:	f047 0720 	orr.w	r7, r7, #32
   c5b1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5b1e:	601c      	str	r4, [r3, #0]
   c5b20:	9b04      	ldr	r3, [sp, #16]
   c5b22:	601d      	str	r5, [r3, #0]
   c5b24:	e695      	b.n	c5852 <__gethex+0x12a>
   c5b26:	4299      	cmp	r1, r3
   c5b28:	f843 cc04 	str.w	ip, [r3, #-4]
   c5b2c:	d8d8      	bhi.n	c5ae0 <__gethex+0x3b8>
   c5b2e:	68a3      	ldr	r3, [r4, #8]
   c5b30:	459b      	cmp	fp, r3
   c5b32:	db19      	blt.n	c5b68 <__gethex+0x440>
   c5b34:	6861      	ldr	r1, [r4, #4]
   c5b36:	ee18 0a10 	vmov	r0, s16
   c5b3a:	3101      	adds	r1, #1
   c5b3c:	f000 f912 	bl	c5d64 <_Balloc>
   c5b40:	4681      	mov	r9, r0
   c5b42:	b918      	cbnz	r0, c5b4c <__gethex+0x424>
   c5b44:	4b1a      	ldr	r3, [pc, #104]	; (c5bb0 <__gethex+0x488>)
   c5b46:	4602      	mov	r2, r0
   c5b48:	2184      	movs	r1, #132	; 0x84
   c5b4a:	e6a8      	b.n	c589e <__gethex+0x176>
   c5b4c:	6922      	ldr	r2, [r4, #16]
   c5b4e:	3202      	adds	r2, #2
   c5b50:	f104 010c 	add.w	r1, r4, #12
   c5b54:	0092      	lsls	r2, r2, #2
   c5b56:	300c      	adds	r0, #12
   c5b58:	f7fe fd36 	bl	c45c8 <memcpy>
   c5b5c:	4621      	mov	r1, r4
   c5b5e:	ee18 0a10 	vmov	r0, s16
   c5b62:	f000 f93f 	bl	c5de4 <_Bfree>
   c5b66:	464c      	mov	r4, r9
   c5b68:	6923      	ldr	r3, [r4, #16]
   c5b6a:	1c5a      	adds	r2, r3, #1
   c5b6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5b70:	6122      	str	r2, [r4, #16]
   c5b72:	2201      	movs	r2, #1
   c5b74:	615a      	str	r2, [r3, #20]
   c5b76:	e7bb      	b.n	c5af0 <__gethex+0x3c8>
   c5b78:	6922      	ldr	r2, [r4, #16]
   c5b7a:	455a      	cmp	r2, fp
   c5b7c:	dd0b      	ble.n	c5b96 <__gethex+0x46e>
   c5b7e:	2101      	movs	r1, #1
   c5b80:	4620      	mov	r0, r4
   c5b82:	f7ff fd69 	bl	c5658 <rshift>
   c5b86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5b8a:	3501      	adds	r5, #1
   c5b8c:	42ab      	cmp	r3, r5
   c5b8e:	f6ff aed0 	blt.w	c5932 <__gethex+0x20a>
   c5b92:	2701      	movs	r7, #1
   c5b94:	e7c0      	b.n	c5b18 <__gethex+0x3f0>
   c5b96:	f016 061f 	ands.w	r6, r6, #31
   c5b9a:	d0fa      	beq.n	c5b92 <__gethex+0x46a>
   c5b9c:	4453      	add	r3, sl
   c5b9e:	f1c6 0620 	rsb	r6, r6, #32
   c5ba2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c5ba6:	f000 f9cf 	bl	c5f48 <__hi0bits>
   c5baa:	42b0      	cmp	r0, r6
   c5bac:	dbe7      	blt.n	c5b7e <__gethex+0x456>
   c5bae:	e7f0      	b.n	c5b92 <__gethex+0x46a>
   c5bb0:	000c8889 	.word	0x000c8889

000c5bb4 <L_shift>:
   c5bb4:	f1c2 0208 	rsb	r2, r2, #8
   c5bb8:	0092      	lsls	r2, r2, #2
   c5bba:	b570      	push	{r4, r5, r6, lr}
   c5bbc:	f1c2 0620 	rsb	r6, r2, #32
   c5bc0:	6843      	ldr	r3, [r0, #4]
   c5bc2:	6804      	ldr	r4, [r0, #0]
   c5bc4:	fa03 f506 	lsl.w	r5, r3, r6
   c5bc8:	432c      	orrs	r4, r5
   c5bca:	40d3      	lsrs	r3, r2
   c5bcc:	6004      	str	r4, [r0, #0]
   c5bce:	f840 3f04 	str.w	r3, [r0, #4]!
   c5bd2:	4288      	cmp	r0, r1
   c5bd4:	d3f4      	bcc.n	c5bc0 <L_shift+0xc>
   c5bd6:	bd70      	pop	{r4, r5, r6, pc}

000c5bd8 <__match>:
   c5bd8:	b530      	push	{r4, r5, lr}
   c5bda:	6803      	ldr	r3, [r0, #0]
   c5bdc:	3301      	adds	r3, #1
   c5bde:	f811 4b01 	ldrb.w	r4, [r1], #1
   c5be2:	b914      	cbnz	r4, c5bea <__match+0x12>
   c5be4:	6003      	str	r3, [r0, #0]
   c5be6:	2001      	movs	r0, #1
   c5be8:	bd30      	pop	{r4, r5, pc}
   c5bea:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5bee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c5bf2:	2d19      	cmp	r5, #25
   c5bf4:	bf98      	it	ls
   c5bf6:	3220      	addls	r2, #32
   c5bf8:	42a2      	cmp	r2, r4
   c5bfa:	d0f0      	beq.n	c5bde <__match+0x6>
   c5bfc:	2000      	movs	r0, #0
   c5bfe:	e7f3      	b.n	c5be8 <__match+0x10>

000c5c00 <__hexnan>:
   c5c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5c04:	680b      	ldr	r3, [r1, #0]
   c5c06:	115e      	asrs	r6, r3, #5
   c5c08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5c0c:	f013 031f 	ands.w	r3, r3, #31
   c5c10:	b087      	sub	sp, #28
   c5c12:	bf18      	it	ne
   c5c14:	3604      	addne	r6, #4
   c5c16:	2500      	movs	r5, #0
   c5c18:	1f37      	subs	r7, r6, #4
   c5c1a:	4690      	mov	r8, r2
   c5c1c:	6802      	ldr	r2, [r0, #0]
   c5c1e:	9301      	str	r3, [sp, #4]
   c5c20:	4682      	mov	sl, r0
   c5c22:	f846 5c04 	str.w	r5, [r6, #-4]
   c5c26:	46b9      	mov	r9, r7
   c5c28:	463c      	mov	r4, r7
   c5c2a:	9502      	str	r5, [sp, #8]
   c5c2c:	46ab      	mov	fp, r5
   c5c2e:	7851      	ldrb	r1, [r2, #1]
   c5c30:	1c53      	adds	r3, r2, #1
   c5c32:	9303      	str	r3, [sp, #12]
   c5c34:	b341      	cbz	r1, c5c88 <__hexnan+0x88>
   c5c36:	4608      	mov	r0, r1
   c5c38:	9205      	str	r2, [sp, #20]
   c5c3a:	9104      	str	r1, [sp, #16]
   c5c3c:	f7ff fd5e 	bl	c56fc <__hexdig_fun>
   c5c40:	2800      	cmp	r0, #0
   c5c42:	d14f      	bne.n	c5ce4 <__hexnan+0xe4>
   c5c44:	9904      	ldr	r1, [sp, #16]
   c5c46:	9a05      	ldr	r2, [sp, #20]
   c5c48:	2920      	cmp	r1, #32
   c5c4a:	d818      	bhi.n	c5c7e <__hexnan+0x7e>
   c5c4c:	9b02      	ldr	r3, [sp, #8]
   c5c4e:	459b      	cmp	fp, r3
   c5c50:	dd13      	ble.n	c5c7a <__hexnan+0x7a>
   c5c52:	454c      	cmp	r4, r9
   c5c54:	d206      	bcs.n	c5c64 <__hexnan+0x64>
   c5c56:	2d07      	cmp	r5, #7
   c5c58:	dc04      	bgt.n	c5c64 <__hexnan+0x64>
   c5c5a:	462a      	mov	r2, r5
   c5c5c:	4649      	mov	r1, r9
   c5c5e:	4620      	mov	r0, r4
   c5c60:	f7ff ffa8 	bl	c5bb4 <L_shift>
   c5c64:	4544      	cmp	r4, r8
   c5c66:	d950      	bls.n	c5d0a <__hexnan+0x10a>
   c5c68:	2300      	movs	r3, #0
   c5c6a:	f1a4 0904 	sub.w	r9, r4, #4
   c5c6e:	f844 3c04 	str.w	r3, [r4, #-4]
   c5c72:	f8cd b008 	str.w	fp, [sp, #8]
   c5c76:	464c      	mov	r4, r9
   c5c78:	461d      	mov	r5, r3
   c5c7a:	9a03      	ldr	r2, [sp, #12]
   c5c7c:	e7d7      	b.n	c5c2e <__hexnan+0x2e>
   c5c7e:	2929      	cmp	r1, #41	; 0x29
   c5c80:	d156      	bne.n	c5d30 <__hexnan+0x130>
   c5c82:	3202      	adds	r2, #2
   c5c84:	f8ca 2000 	str.w	r2, [sl]
   c5c88:	f1bb 0f00 	cmp.w	fp, #0
   c5c8c:	d050      	beq.n	c5d30 <__hexnan+0x130>
   c5c8e:	454c      	cmp	r4, r9
   c5c90:	d206      	bcs.n	c5ca0 <__hexnan+0xa0>
   c5c92:	2d07      	cmp	r5, #7
   c5c94:	dc04      	bgt.n	c5ca0 <__hexnan+0xa0>
   c5c96:	462a      	mov	r2, r5
   c5c98:	4649      	mov	r1, r9
   c5c9a:	4620      	mov	r0, r4
   c5c9c:	f7ff ff8a 	bl	c5bb4 <L_shift>
   c5ca0:	4544      	cmp	r4, r8
   c5ca2:	d934      	bls.n	c5d0e <__hexnan+0x10e>
   c5ca4:	f1a8 0204 	sub.w	r2, r8, #4
   c5ca8:	4623      	mov	r3, r4
   c5caa:	f853 1b04 	ldr.w	r1, [r3], #4
   c5cae:	f842 1f04 	str.w	r1, [r2, #4]!
   c5cb2:	429f      	cmp	r7, r3
   c5cb4:	d2f9      	bcs.n	c5caa <__hexnan+0xaa>
   c5cb6:	1b3b      	subs	r3, r7, r4
   c5cb8:	f023 0303 	bic.w	r3, r3, #3
   c5cbc:	3304      	adds	r3, #4
   c5cbe:	3401      	adds	r4, #1
   c5cc0:	3e03      	subs	r6, #3
   c5cc2:	42b4      	cmp	r4, r6
   c5cc4:	bf88      	it	hi
   c5cc6:	2304      	movhi	r3, #4
   c5cc8:	4443      	add	r3, r8
   c5cca:	2200      	movs	r2, #0
   c5ccc:	f843 2b04 	str.w	r2, [r3], #4
   c5cd0:	429f      	cmp	r7, r3
   c5cd2:	d2fb      	bcs.n	c5ccc <__hexnan+0xcc>
   c5cd4:	683b      	ldr	r3, [r7, #0]
   c5cd6:	b91b      	cbnz	r3, c5ce0 <__hexnan+0xe0>
   c5cd8:	4547      	cmp	r7, r8
   c5cda:	d127      	bne.n	c5d2c <__hexnan+0x12c>
   c5cdc:	2301      	movs	r3, #1
   c5cde:	603b      	str	r3, [r7, #0]
   c5ce0:	2005      	movs	r0, #5
   c5ce2:	e026      	b.n	c5d32 <__hexnan+0x132>
   c5ce4:	3501      	adds	r5, #1
   c5ce6:	2d08      	cmp	r5, #8
   c5ce8:	f10b 0b01 	add.w	fp, fp, #1
   c5cec:	dd06      	ble.n	c5cfc <__hexnan+0xfc>
   c5cee:	4544      	cmp	r4, r8
   c5cf0:	d9c3      	bls.n	c5c7a <__hexnan+0x7a>
   c5cf2:	2300      	movs	r3, #0
   c5cf4:	f844 3c04 	str.w	r3, [r4, #-4]
   c5cf8:	2501      	movs	r5, #1
   c5cfa:	3c04      	subs	r4, #4
   c5cfc:	6822      	ldr	r2, [r4, #0]
   c5cfe:	f000 000f 	and.w	r0, r0, #15
   c5d02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c5d06:	6022      	str	r2, [r4, #0]
   c5d08:	e7b7      	b.n	c5c7a <__hexnan+0x7a>
   c5d0a:	2508      	movs	r5, #8
   c5d0c:	e7b5      	b.n	c5c7a <__hexnan+0x7a>
   c5d0e:	9b01      	ldr	r3, [sp, #4]
   c5d10:	2b00      	cmp	r3, #0
   c5d12:	d0df      	beq.n	c5cd4 <__hexnan+0xd4>
   c5d14:	f04f 32ff 	mov.w	r2, #4294967295
   c5d18:	f1c3 0320 	rsb	r3, r3, #32
   c5d1c:	fa22 f303 	lsr.w	r3, r2, r3
   c5d20:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c5d24:	401a      	ands	r2, r3
   c5d26:	f846 2c04 	str.w	r2, [r6, #-4]
   c5d2a:	e7d3      	b.n	c5cd4 <__hexnan+0xd4>
   c5d2c:	3f04      	subs	r7, #4
   c5d2e:	e7d1      	b.n	c5cd4 <__hexnan+0xd4>
   c5d30:	2004      	movs	r0, #4
   c5d32:	b007      	add	sp, #28
   c5d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5d38 <__retarget_lock_acquire_recursive>:
   c5d38:	4770      	bx	lr

000c5d3a <__retarget_lock_release>:
   c5d3a:	4770      	bx	lr

000c5d3c <__retarget_lock_release_recursive>:
   c5d3c:	4770      	bx	lr

000c5d3e <__ascii_mbtowc>:
   c5d3e:	b082      	sub	sp, #8
   c5d40:	b901      	cbnz	r1, c5d44 <__ascii_mbtowc+0x6>
   c5d42:	a901      	add	r1, sp, #4
   c5d44:	b142      	cbz	r2, c5d58 <__ascii_mbtowc+0x1a>
   c5d46:	b14b      	cbz	r3, c5d5c <__ascii_mbtowc+0x1e>
   c5d48:	7813      	ldrb	r3, [r2, #0]
   c5d4a:	600b      	str	r3, [r1, #0]
   c5d4c:	7812      	ldrb	r2, [r2, #0]
   c5d4e:	1e10      	subs	r0, r2, #0
   c5d50:	bf18      	it	ne
   c5d52:	2001      	movne	r0, #1
   c5d54:	b002      	add	sp, #8
   c5d56:	4770      	bx	lr
   c5d58:	4610      	mov	r0, r2
   c5d5a:	e7fb      	b.n	c5d54 <__ascii_mbtowc+0x16>
   c5d5c:	f06f 0001 	mvn.w	r0, #1
   c5d60:	e7f8      	b.n	c5d54 <__ascii_mbtowc+0x16>
	...

000c5d64 <_Balloc>:
   c5d64:	b570      	push	{r4, r5, r6, lr}
   c5d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5d68:	4604      	mov	r4, r0
   c5d6a:	460d      	mov	r5, r1
   c5d6c:	b976      	cbnz	r6, c5d8c <_Balloc+0x28>
   c5d6e:	2010      	movs	r0, #16
   c5d70:	f7f8 fad8 	bl	be324 <malloc>
   c5d74:	4602      	mov	r2, r0
   c5d76:	6260      	str	r0, [r4, #36]	; 0x24
   c5d78:	b920      	cbnz	r0, c5d84 <_Balloc+0x20>
   c5d7a:	4b18      	ldr	r3, [pc, #96]	; (c5ddc <_Balloc+0x78>)
   c5d7c:	4818      	ldr	r0, [pc, #96]	; (c5de0 <_Balloc+0x7c>)
   c5d7e:	2166      	movs	r1, #102	; 0x66
   c5d80:	f7f8 fb20 	bl	be3c4 <__assert_func>
   c5d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5d88:	6006      	str	r6, [r0, #0]
   c5d8a:	60c6      	str	r6, [r0, #12]
   c5d8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5d8e:	68f3      	ldr	r3, [r6, #12]
   c5d90:	b183      	cbz	r3, c5db4 <_Balloc+0x50>
   c5d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5d94:	68db      	ldr	r3, [r3, #12]
   c5d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5d9a:	b9b8      	cbnz	r0, c5dcc <_Balloc+0x68>
   c5d9c:	2101      	movs	r1, #1
   c5d9e:	fa01 f605 	lsl.w	r6, r1, r5
   c5da2:	1d72      	adds	r2, r6, #5
   c5da4:	0092      	lsls	r2, r2, #2
   c5da6:	4620      	mov	r0, r4
   c5da8:	f000 fc9d 	bl	c66e6 <_calloc_r>
   c5dac:	b160      	cbz	r0, c5dc8 <_Balloc+0x64>
   c5dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c5db2:	e00e      	b.n	c5dd2 <_Balloc+0x6e>
   c5db4:	2221      	movs	r2, #33	; 0x21
   c5db6:	2104      	movs	r1, #4
   c5db8:	4620      	mov	r0, r4
   c5dba:	f000 fc94 	bl	c66e6 <_calloc_r>
   c5dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5dc0:	60f0      	str	r0, [r6, #12]
   c5dc2:	68db      	ldr	r3, [r3, #12]
   c5dc4:	2b00      	cmp	r3, #0
   c5dc6:	d1e4      	bne.n	c5d92 <_Balloc+0x2e>
   c5dc8:	2000      	movs	r0, #0
   c5dca:	bd70      	pop	{r4, r5, r6, pc}
   c5dcc:	6802      	ldr	r2, [r0, #0]
   c5dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c5dd2:	2300      	movs	r3, #0
   c5dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5dd8:	e7f7      	b.n	c5dca <_Balloc+0x66>
   c5dda:	bf00      	nop
   c5ddc:	000c8698 	.word	0x000c8698
   c5de0:	000c8932 	.word	0x000c8932

000c5de4 <_Bfree>:
   c5de4:	b570      	push	{r4, r5, r6, lr}
   c5de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5de8:	4605      	mov	r5, r0
   c5dea:	460c      	mov	r4, r1
   c5dec:	b976      	cbnz	r6, c5e0c <_Bfree+0x28>
   c5dee:	2010      	movs	r0, #16
   c5df0:	f7f8 fa98 	bl	be324 <malloc>
   c5df4:	4602      	mov	r2, r0
   c5df6:	6268      	str	r0, [r5, #36]	; 0x24
   c5df8:	b920      	cbnz	r0, c5e04 <_Bfree+0x20>
   c5dfa:	4b09      	ldr	r3, [pc, #36]	; (c5e20 <_Bfree+0x3c>)
   c5dfc:	4809      	ldr	r0, [pc, #36]	; (c5e24 <_Bfree+0x40>)
   c5dfe:	218a      	movs	r1, #138	; 0x8a
   c5e00:	f7f8 fae0 	bl	be3c4 <__assert_func>
   c5e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5e08:	6006      	str	r6, [r0, #0]
   c5e0a:	60c6      	str	r6, [r0, #12]
   c5e0c:	b13c      	cbz	r4, c5e1e <_Bfree+0x3a>
   c5e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5e10:	6862      	ldr	r2, [r4, #4]
   c5e12:	68db      	ldr	r3, [r3, #12]
   c5e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5e18:	6021      	str	r1, [r4, #0]
   c5e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5e1e:	bd70      	pop	{r4, r5, r6, pc}
   c5e20:	000c8698 	.word	0x000c8698
   c5e24:	000c8932 	.word	0x000c8932

000c5e28 <__multadd>:
   c5e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5e2c:	690d      	ldr	r5, [r1, #16]
   c5e2e:	4607      	mov	r7, r0
   c5e30:	460c      	mov	r4, r1
   c5e32:	461e      	mov	r6, r3
   c5e34:	f101 0c14 	add.w	ip, r1, #20
   c5e38:	2000      	movs	r0, #0
   c5e3a:	f8dc 3000 	ldr.w	r3, [ip]
   c5e3e:	b299      	uxth	r1, r3
   c5e40:	fb02 6101 	mla	r1, r2, r1, r6
   c5e44:	0c1e      	lsrs	r6, r3, #16
   c5e46:	0c0b      	lsrs	r3, r1, #16
   c5e48:	fb02 3306 	mla	r3, r2, r6, r3
   c5e4c:	b289      	uxth	r1, r1
   c5e4e:	3001      	adds	r0, #1
   c5e50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c5e54:	4285      	cmp	r5, r0
   c5e56:	f84c 1b04 	str.w	r1, [ip], #4
   c5e5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5e5e:	dcec      	bgt.n	c5e3a <__multadd+0x12>
   c5e60:	b30e      	cbz	r6, c5ea6 <__multadd+0x7e>
   c5e62:	68a3      	ldr	r3, [r4, #8]
   c5e64:	42ab      	cmp	r3, r5
   c5e66:	dc19      	bgt.n	c5e9c <__multadd+0x74>
   c5e68:	6861      	ldr	r1, [r4, #4]
   c5e6a:	4638      	mov	r0, r7
   c5e6c:	3101      	adds	r1, #1
   c5e6e:	f7ff ff79 	bl	c5d64 <_Balloc>
   c5e72:	4680      	mov	r8, r0
   c5e74:	b928      	cbnz	r0, c5e82 <__multadd+0x5a>
   c5e76:	4602      	mov	r2, r0
   c5e78:	4b0c      	ldr	r3, [pc, #48]	; (c5eac <__multadd+0x84>)
   c5e7a:	480d      	ldr	r0, [pc, #52]	; (c5eb0 <__multadd+0x88>)
   c5e7c:	21b5      	movs	r1, #181	; 0xb5
   c5e7e:	f7f8 faa1 	bl	be3c4 <__assert_func>
   c5e82:	6922      	ldr	r2, [r4, #16]
   c5e84:	3202      	adds	r2, #2
   c5e86:	f104 010c 	add.w	r1, r4, #12
   c5e8a:	0092      	lsls	r2, r2, #2
   c5e8c:	300c      	adds	r0, #12
   c5e8e:	f7fe fb9b 	bl	c45c8 <memcpy>
   c5e92:	4621      	mov	r1, r4
   c5e94:	4638      	mov	r0, r7
   c5e96:	f7ff ffa5 	bl	c5de4 <_Bfree>
   c5e9a:	4644      	mov	r4, r8
   c5e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5ea0:	3501      	adds	r5, #1
   c5ea2:	615e      	str	r6, [r3, #20]
   c5ea4:	6125      	str	r5, [r4, #16]
   c5ea6:	4620      	mov	r0, r4
   c5ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5eac:	000c8889 	.word	0x000c8889
   c5eb0:	000c8932 	.word	0x000c8932

000c5eb4 <__s2b>:
   c5eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5eb8:	460c      	mov	r4, r1
   c5eba:	4615      	mov	r5, r2
   c5ebc:	461f      	mov	r7, r3
   c5ebe:	2209      	movs	r2, #9
   c5ec0:	3308      	adds	r3, #8
   c5ec2:	4606      	mov	r6, r0
   c5ec4:	fb93 f3f2 	sdiv	r3, r3, r2
   c5ec8:	2100      	movs	r1, #0
   c5eca:	2201      	movs	r2, #1
   c5ecc:	429a      	cmp	r2, r3
   c5ece:	db09      	blt.n	c5ee4 <__s2b+0x30>
   c5ed0:	4630      	mov	r0, r6
   c5ed2:	f7ff ff47 	bl	c5d64 <_Balloc>
   c5ed6:	b940      	cbnz	r0, c5eea <__s2b+0x36>
   c5ed8:	4602      	mov	r2, r0
   c5eda:	4b19      	ldr	r3, [pc, #100]	; (c5f40 <__s2b+0x8c>)
   c5edc:	4819      	ldr	r0, [pc, #100]	; (c5f44 <__s2b+0x90>)
   c5ede:	21ce      	movs	r1, #206	; 0xce
   c5ee0:	f7f8 fa70 	bl	be3c4 <__assert_func>
   c5ee4:	0052      	lsls	r2, r2, #1
   c5ee6:	3101      	adds	r1, #1
   c5ee8:	e7f0      	b.n	c5ecc <__s2b+0x18>
   c5eea:	9b08      	ldr	r3, [sp, #32]
   c5eec:	6143      	str	r3, [r0, #20]
   c5eee:	2d09      	cmp	r5, #9
   c5ef0:	f04f 0301 	mov.w	r3, #1
   c5ef4:	6103      	str	r3, [r0, #16]
   c5ef6:	dd16      	ble.n	c5f26 <__s2b+0x72>
   c5ef8:	f104 0909 	add.w	r9, r4, #9
   c5efc:	46c8      	mov	r8, r9
   c5efe:	442c      	add	r4, r5
   c5f00:	f818 3b01 	ldrb.w	r3, [r8], #1
   c5f04:	4601      	mov	r1, r0
   c5f06:	3b30      	subs	r3, #48	; 0x30
   c5f08:	220a      	movs	r2, #10
   c5f0a:	4630      	mov	r0, r6
   c5f0c:	f7ff ff8c 	bl	c5e28 <__multadd>
   c5f10:	45a0      	cmp	r8, r4
   c5f12:	d1f5      	bne.n	c5f00 <__s2b+0x4c>
   c5f14:	f1a5 0408 	sub.w	r4, r5, #8
   c5f18:	444c      	add	r4, r9
   c5f1a:	1b2d      	subs	r5, r5, r4
   c5f1c:	1963      	adds	r3, r4, r5
   c5f1e:	42bb      	cmp	r3, r7
   c5f20:	db04      	blt.n	c5f2c <__s2b+0x78>
   c5f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5f26:	340a      	adds	r4, #10
   c5f28:	2509      	movs	r5, #9
   c5f2a:	e7f6      	b.n	c5f1a <__s2b+0x66>
   c5f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5f30:	4601      	mov	r1, r0
   c5f32:	3b30      	subs	r3, #48	; 0x30
   c5f34:	220a      	movs	r2, #10
   c5f36:	4630      	mov	r0, r6
   c5f38:	f7ff ff76 	bl	c5e28 <__multadd>
   c5f3c:	e7ee      	b.n	c5f1c <__s2b+0x68>
   c5f3e:	bf00      	nop
   c5f40:	000c8889 	.word	0x000c8889
   c5f44:	000c8932 	.word	0x000c8932

000c5f48 <__hi0bits>:
   c5f48:	0c03      	lsrs	r3, r0, #16
   c5f4a:	041b      	lsls	r3, r3, #16
   c5f4c:	b9d3      	cbnz	r3, c5f84 <__hi0bits+0x3c>
   c5f4e:	0400      	lsls	r0, r0, #16
   c5f50:	2310      	movs	r3, #16
   c5f52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c5f56:	bf04      	itt	eq
   c5f58:	0200      	lsleq	r0, r0, #8
   c5f5a:	3308      	addeq	r3, #8
   c5f5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5f60:	bf04      	itt	eq
   c5f62:	0100      	lsleq	r0, r0, #4
   c5f64:	3304      	addeq	r3, #4
   c5f66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5f6a:	bf04      	itt	eq
   c5f6c:	0080      	lsleq	r0, r0, #2
   c5f6e:	3302      	addeq	r3, #2
   c5f70:	2800      	cmp	r0, #0
   c5f72:	db05      	blt.n	c5f80 <__hi0bits+0x38>
   c5f74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5f78:	f103 0301 	add.w	r3, r3, #1
   c5f7c:	bf08      	it	eq
   c5f7e:	2320      	moveq	r3, #32
   c5f80:	4618      	mov	r0, r3
   c5f82:	4770      	bx	lr
   c5f84:	2300      	movs	r3, #0
   c5f86:	e7e4      	b.n	c5f52 <__hi0bits+0xa>

000c5f88 <__lo0bits>:
   c5f88:	6803      	ldr	r3, [r0, #0]
   c5f8a:	f013 0207 	ands.w	r2, r3, #7
   c5f8e:	4601      	mov	r1, r0
   c5f90:	d00b      	beq.n	c5faa <__lo0bits+0x22>
   c5f92:	07da      	lsls	r2, r3, #31
   c5f94:	d423      	bmi.n	c5fde <__lo0bits+0x56>
   c5f96:	0798      	lsls	r0, r3, #30
   c5f98:	bf49      	itett	mi
   c5f9a:	085b      	lsrmi	r3, r3, #1
   c5f9c:	089b      	lsrpl	r3, r3, #2
   c5f9e:	2001      	movmi	r0, #1
   c5fa0:	600b      	strmi	r3, [r1, #0]
   c5fa2:	bf5c      	itt	pl
   c5fa4:	600b      	strpl	r3, [r1, #0]
   c5fa6:	2002      	movpl	r0, #2
   c5fa8:	4770      	bx	lr
   c5faa:	b298      	uxth	r0, r3
   c5fac:	b9a8      	cbnz	r0, c5fda <__lo0bits+0x52>
   c5fae:	0c1b      	lsrs	r3, r3, #16
   c5fb0:	2010      	movs	r0, #16
   c5fb2:	b2da      	uxtb	r2, r3
   c5fb4:	b90a      	cbnz	r2, c5fba <__lo0bits+0x32>
   c5fb6:	3008      	adds	r0, #8
   c5fb8:	0a1b      	lsrs	r3, r3, #8
   c5fba:	071a      	lsls	r2, r3, #28
   c5fbc:	bf04      	itt	eq
   c5fbe:	091b      	lsreq	r3, r3, #4
   c5fc0:	3004      	addeq	r0, #4
   c5fc2:	079a      	lsls	r2, r3, #30
   c5fc4:	bf04      	itt	eq
   c5fc6:	089b      	lsreq	r3, r3, #2
   c5fc8:	3002      	addeq	r0, #2
   c5fca:	07da      	lsls	r2, r3, #31
   c5fcc:	d403      	bmi.n	c5fd6 <__lo0bits+0x4e>
   c5fce:	085b      	lsrs	r3, r3, #1
   c5fd0:	f100 0001 	add.w	r0, r0, #1
   c5fd4:	d005      	beq.n	c5fe2 <__lo0bits+0x5a>
   c5fd6:	600b      	str	r3, [r1, #0]
   c5fd8:	4770      	bx	lr
   c5fda:	4610      	mov	r0, r2
   c5fdc:	e7e9      	b.n	c5fb2 <__lo0bits+0x2a>
   c5fde:	2000      	movs	r0, #0
   c5fe0:	4770      	bx	lr
   c5fe2:	2020      	movs	r0, #32
   c5fe4:	4770      	bx	lr
	...

000c5fe8 <__i2b>:
   c5fe8:	b510      	push	{r4, lr}
   c5fea:	460c      	mov	r4, r1
   c5fec:	2101      	movs	r1, #1
   c5fee:	f7ff feb9 	bl	c5d64 <_Balloc>
   c5ff2:	4602      	mov	r2, r0
   c5ff4:	b928      	cbnz	r0, c6002 <__i2b+0x1a>
   c5ff6:	4b05      	ldr	r3, [pc, #20]	; (c600c <__i2b+0x24>)
   c5ff8:	4805      	ldr	r0, [pc, #20]	; (c6010 <__i2b+0x28>)
   c5ffa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5ffe:	f7f8 f9e1 	bl	be3c4 <__assert_func>
   c6002:	2301      	movs	r3, #1
   c6004:	6144      	str	r4, [r0, #20]
   c6006:	6103      	str	r3, [r0, #16]
   c6008:	bd10      	pop	{r4, pc}
   c600a:	bf00      	nop
   c600c:	000c8889 	.word	0x000c8889
   c6010:	000c8932 	.word	0x000c8932

000c6014 <__multiply>:
   c6014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6018:	4691      	mov	r9, r2
   c601a:	690a      	ldr	r2, [r1, #16]
   c601c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c6020:	429a      	cmp	r2, r3
   c6022:	bfb8      	it	lt
   c6024:	460b      	movlt	r3, r1
   c6026:	460c      	mov	r4, r1
   c6028:	bfbc      	itt	lt
   c602a:	464c      	movlt	r4, r9
   c602c:	4699      	movlt	r9, r3
   c602e:	6927      	ldr	r7, [r4, #16]
   c6030:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c6034:	68a3      	ldr	r3, [r4, #8]
   c6036:	6861      	ldr	r1, [r4, #4]
   c6038:	eb07 060a 	add.w	r6, r7, sl
   c603c:	42b3      	cmp	r3, r6
   c603e:	b085      	sub	sp, #20
   c6040:	bfb8      	it	lt
   c6042:	3101      	addlt	r1, #1
   c6044:	f7ff fe8e 	bl	c5d64 <_Balloc>
   c6048:	b930      	cbnz	r0, c6058 <__multiply+0x44>
   c604a:	4602      	mov	r2, r0
   c604c:	4b44      	ldr	r3, [pc, #272]	; (c6160 <__multiply+0x14c>)
   c604e:	4845      	ldr	r0, [pc, #276]	; (c6164 <__multiply+0x150>)
   c6050:	f240 115d 	movw	r1, #349	; 0x15d
   c6054:	f7f8 f9b6 	bl	be3c4 <__assert_func>
   c6058:	f100 0514 	add.w	r5, r0, #20
   c605c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c6060:	462b      	mov	r3, r5
   c6062:	2200      	movs	r2, #0
   c6064:	4543      	cmp	r3, r8
   c6066:	d321      	bcc.n	c60ac <__multiply+0x98>
   c6068:	f104 0314 	add.w	r3, r4, #20
   c606c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c6070:	f109 0314 	add.w	r3, r9, #20
   c6074:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c6078:	9202      	str	r2, [sp, #8]
   c607a:	1b3a      	subs	r2, r7, r4
   c607c:	3a15      	subs	r2, #21
   c607e:	f022 0203 	bic.w	r2, r2, #3
   c6082:	3204      	adds	r2, #4
   c6084:	f104 0115 	add.w	r1, r4, #21
   c6088:	428f      	cmp	r7, r1
   c608a:	bf38      	it	cc
   c608c:	2204      	movcc	r2, #4
   c608e:	9201      	str	r2, [sp, #4]
   c6090:	9a02      	ldr	r2, [sp, #8]
   c6092:	9303      	str	r3, [sp, #12]
   c6094:	429a      	cmp	r2, r3
   c6096:	d80c      	bhi.n	c60b2 <__multiply+0x9e>
   c6098:	2e00      	cmp	r6, #0
   c609a:	dd03      	ble.n	c60a4 <__multiply+0x90>
   c609c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c60a0:	2b00      	cmp	r3, #0
   c60a2:	d05a      	beq.n	c615a <__multiply+0x146>
   c60a4:	6106      	str	r6, [r0, #16]
   c60a6:	b005      	add	sp, #20
   c60a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c60ac:	f843 2b04 	str.w	r2, [r3], #4
   c60b0:	e7d8      	b.n	c6064 <__multiply+0x50>
   c60b2:	f8b3 a000 	ldrh.w	sl, [r3]
   c60b6:	f1ba 0f00 	cmp.w	sl, #0
   c60ba:	d024      	beq.n	c6106 <__multiply+0xf2>
   c60bc:	f104 0e14 	add.w	lr, r4, #20
   c60c0:	46a9      	mov	r9, r5
   c60c2:	f04f 0c00 	mov.w	ip, #0
   c60c6:	f85e 2b04 	ldr.w	r2, [lr], #4
   c60ca:	f8d9 1000 	ldr.w	r1, [r9]
   c60ce:	fa1f fb82 	uxth.w	fp, r2
   c60d2:	b289      	uxth	r1, r1
   c60d4:	fb0a 110b 	mla	r1, sl, fp, r1
   c60d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c60dc:	f8d9 2000 	ldr.w	r2, [r9]
   c60e0:	4461      	add	r1, ip
   c60e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c60e6:	fb0a c20b 	mla	r2, sl, fp, ip
   c60ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c60ee:	b289      	uxth	r1, r1
   c60f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c60f4:	4577      	cmp	r7, lr
   c60f6:	f849 1b04 	str.w	r1, [r9], #4
   c60fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c60fe:	d8e2      	bhi.n	c60c6 <__multiply+0xb2>
   c6100:	9a01      	ldr	r2, [sp, #4]
   c6102:	f845 c002 	str.w	ip, [r5, r2]
   c6106:	9a03      	ldr	r2, [sp, #12]
   c6108:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c610c:	3304      	adds	r3, #4
   c610e:	f1b9 0f00 	cmp.w	r9, #0
   c6112:	d020      	beq.n	c6156 <__multiply+0x142>
   c6114:	6829      	ldr	r1, [r5, #0]
   c6116:	f104 0c14 	add.w	ip, r4, #20
   c611a:	46ae      	mov	lr, r5
   c611c:	f04f 0a00 	mov.w	sl, #0
   c6120:	f8bc b000 	ldrh.w	fp, [ip]
   c6124:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c6128:	fb09 220b 	mla	r2, r9, fp, r2
   c612c:	4492      	add	sl, r2
   c612e:	b289      	uxth	r1, r1
   c6130:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c6134:	f84e 1b04 	str.w	r1, [lr], #4
   c6138:	f85c 2b04 	ldr.w	r2, [ip], #4
   c613c:	f8be 1000 	ldrh.w	r1, [lr]
   c6140:	0c12      	lsrs	r2, r2, #16
   c6142:	fb09 1102 	mla	r1, r9, r2, r1
   c6146:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c614a:	4567      	cmp	r7, ip
   c614c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c6150:	d8e6      	bhi.n	c6120 <__multiply+0x10c>
   c6152:	9a01      	ldr	r2, [sp, #4]
   c6154:	50a9      	str	r1, [r5, r2]
   c6156:	3504      	adds	r5, #4
   c6158:	e79a      	b.n	c6090 <__multiply+0x7c>
   c615a:	3e01      	subs	r6, #1
   c615c:	e79c      	b.n	c6098 <__multiply+0x84>
   c615e:	bf00      	nop
   c6160:	000c8889 	.word	0x000c8889
   c6164:	000c8932 	.word	0x000c8932

000c6168 <__pow5mult>:
   c6168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c616c:	4615      	mov	r5, r2
   c616e:	f012 0203 	ands.w	r2, r2, #3
   c6172:	4606      	mov	r6, r0
   c6174:	460f      	mov	r7, r1
   c6176:	d007      	beq.n	c6188 <__pow5mult+0x20>
   c6178:	4c25      	ldr	r4, [pc, #148]	; (c6210 <__pow5mult+0xa8>)
   c617a:	3a01      	subs	r2, #1
   c617c:	2300      	movs	r3, #0
   c617e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c6182:	f7ff fe51 	bl	c5e28 <__multadd>
   c6186:	4607      	mov	r7, r0
   c6188:	10ad      	asrs	r5, r5, #2
   c618a:	d03d      	beq.n	c6208 <__pow5mult+0xa0>
   c618c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c618e:	b97c      	cbnz	r4, c61b0 <__pow5mult+0x48>
   c6190:	2010      	movs	r0, #16
   c6192:	f7f8 f8c7 	bl	be324 <malloc>
   c6196:	4602      	mov	r2, r0
   c6198:	6270      	str	r0, [r6, #36]	; 0x24
   c619a:	b928      	cbnz	r0, c61a8 <__pow5mult+0x40>
   c619c:	4b1d      	ldr	r3, [pc, #116]	; (c6214 <__pow5mult+0xac>)
   c619e:	481e      	ldr	r0, [pc, #120]	; (c6218 <__pow5mult+0xb0>)
   c61a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c61a4:	f7f8 f90e 	bl	be3c4 <__assert_func>
   c61a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c61ac:	6004      	str	r4, [r0, #0]
   c61ae:	60c4      	str	r4, [r0, #12]
   c61b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c61b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c61b8:	b94c      	cbnz	r4, c61ce <__pow5mult+0x66>
   c61ba:	f240 2171 	movw	r1, #625	; 0x271
   c61be:	4630      	mov	r0, r6
   c61c0:	f7ff ff12 	bl	c5fe8 <__i2b>
   c61c4:	2300      	movs	r3, #0
   c61c6:	f8c8 0008 	str.w	r0, [r8, #8]
   c61ca:	4604      	mov	r4, r0
   c61cc:	6003      	str	r3, [r0, #0]
   c61ce:	f04f 0900 	mov.w	r9, #0
   c61d2:	07eb      	lsls	r3, r5, #31
   c61d4:	d50a      	bpl.n	c61ec <__pow5mult+0x84>
   c61d6:	4639      	mov	r1, r7
   c61d8:	4622      	mov	r2, r4
   c61da:	4630      	mov	r0, r6
   c61dc:	f7ff ff1a 	bl	c6014 <__multiply>
   c61e0:	4639      	mov	r1, r7
   c61e2:	4680      	mov	r8, r0
   c61e4:	4630      	mov	r0, r6
   c61e6:	f7ff fdfd 	bl	c5de4 <_Bfree>
   c61ea:	4647      	mov	r7, r8
   c61ec:	106d      	asrs	r5, r5, #1
   c61ee:	d00b      	beq.n	c6208 <__pow5mult+0xa0>
   c61f0:	6820      	ldr	r0, [r4, #0]
   c61f2:	b938      	cbnz	r0, c6204 <__pow5mult+0x9c>
   c61f4:	4622      	mov	r2, r4
   c61f6:	4621      	mov	r1, r4
   c61f8:	4630      	mov	r0, r6
   c61fa:	f7ff ff0b 	bl	c6014 <__multiply>
   c61fe:	6020      	str	r0, [r4, #0]
   c6200:	f8c0 9000 	str.w	r9, [r0]
   c6204:	4604      	mov	r4, r0
   c6206:	e7e4      	b.n	c61d2 <__pow5mult+0x6a>
   c6208:	4638      	mov	r0, r7
   c620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c620e:	bf00      	nop
   c6210:	000c8aa0 	.word	0x000c8aa0
   c6214:	000c8698 	.word	0x000c8698
   c6218:	000c8932 	.word	0x000c8932

000c621c <__lshift>:
   c621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c6220:	460c      	mov	r4, r1
   c6222:	6849      	ldr	r1, [r1, #4]
   c6224:	6923      	ldr	r3, [r4, #16]
   c6226:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c622a:	68a3      	ldr	r3, [r4, #8]
   c622c:	4607      	mov	r7, r0
   c622e:	4691      	mov	r9, r2
   c6230:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c6234:	f108 0601 	add.w	r6, r8, #1
   c6238:	42b3      	cmp	r3, r6
   c623a:	db0b      	blt.n	c6254 <__lshift+0x38>
   c623c:	4638      	mov	r0, r7
   c623e:	f7ff fd91 	bl	c5d64 <_Balloc>
   c6242:	4605      	mov	r5, r0
   c6244:	b948      	cbnz	r0, c625a <__lshift+0x3e>
   c6246:	4602      	mov	r2, r0
   c6248:	4b2a      	ldr	r3, [pc, #168]	; (c62f4 <__lshift+0xd8>)
   c624a:	482b      	ldr	r0, [pc, #172]	; (c62f8 <__lshift+0xdc>)
   c624c:	f240 11d9 	movw	r1, #473	; 0x1d9
   c6250:	f7f8 f8b8 	bl	be3c4 <__assert_func>
   c6254:	3101      	adds	r1, #1
   c6256:	005b      	lsls	r3, r3, #1
   c6258:	e7ee      	b.n	c6238 <__lshift+0x1c>
   c625a:	2300      	movs	r3, #0
   c625c:	f100 0114 	add.w	r1, r0, #20
   c6260:	f100 0210 	add.w	r2, r0, #16
   c6264:	4618      	mov	r0, r3
   c6266:	4553      	cmp	r3, sl
   c6268:	db37      	blt.n	c62da <__lshift+0xbe>
   c626a:	6920      	ldr	r0, [r4, #16]
   c626c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c6270:	f104 0314 	add.w	r3, r4, #20
   c6274:	f019 091f 	ands.w	r9, r9, #31
   c6278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c627c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c6280:	d02f      	beq.n	c62e2 <__lshift+0xc6>
   c6282:	f1c9 0e20 	rsb	lr, r9, #32
   c6286:	468a      	mov	sl, r1
   c6288:	f04f 0c00 	mov.w	ip, #0
   c628c:	681a      	ldr	r2, [r3, #0]
   c628e:	fa02 f209 	lsl.w	r2, r2, r9
   c6292:	ea42 020c 	orr.w	r2, r2, ip
   c6296:	f84a 2b04 	str.w	r2, [sl], #4
   c629a:	f853 2b04 	ldr.w	r2, [r3], #4
   c629e:	4298      	cmp	r0, r3
   c62a0:	fa22 fc0e 	lsr.w	ip, r2, lr
   c62a4:	d8f2      	bhi.n	c628c <__lshift+0x70>
   c62a6:	1b03      	subs	r3, r0, r4
   c62a8:	3b15      	subs	r3, #21
   c62aa:	f023 0303 	bic.w	r3, r3, #3
   c62ae:	3304      	adds	r3, #4
   c62b0:	f104 0215 	add.w	r2, r4, #21
   c62b4:	4290      	cmp	r0, r2
   c62b6:	bf38      	it	cc
   c62b8:	2304      	movcc	r3, #4
   c62ba:	f841 c003 	str.w	ip, [r1, r3]
   c62be:	f1bc 0f00 	cmp.w	ip, #0
   c62c2:	d001      	beq.n	c62c8 <__lshift+0xac>
   c62c4:	f108 0602 	add.w	r6, r8, #2
   c62c8:	3e01      	subs	r6, #1
   c62ca:	4638      	mov	r0, r7
   c62cc:	612e      	str	r6, [r5, #16]
   c62ce:	4621      	mov	r1, r4
   c62d0:	f7ff fd88 	bl	c5de4 <_Bfree>
   c62d4:	4628      	mov	r0, r5
   c62d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c62da:	f842 0f04 	str.w	r0, [r2, #4]!
   c62de:	3301      	adds	r3, #1
   c62e0:	e7c1      	b.n	c6266 <__lshift+0x4a>
   c62e2:	3904      	subs	r1, #4
   c62e4:	f853 2b04 	ldr.w	r2, [r3], #4
   c62e8:	f841 2f04 	str.w	r2, [r1, #4]!
   c62ec:	4298      	cmp	r0, r3
   c62ee:	d8f9      	bhi.n	c62e4 <__lshift+0xc8>
   c62f0:	e7ea      	b.n	c62c8 <__lshift+0xac>
   c62f2:	bf00      	nop
   c62f4:	000c8889 	.word	0x000c8889
   c62f8:	000c8932 	.word	0x000c8932

000c62fc <__mcmp>:
   c62fc:	b530      	push	{r4, r5, lr}
   c62fe:	6902      	ldr	r2, [r0, #16]
   c6300:	690c      	ldr	r4, [r1, #16]
   c6302:	1b12      	subs	r2, r2, r4
   c6304:	d10e      	bne.n	c6324 <__mcmp+0x28>
   c6306:	f100 0314 	add.w	r3, r0, #20
   c630a:	3114      	adds	r1, #20
   c630c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c6310:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c6314:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c6318:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c631c:	42a5      	cmp	r5, r4
   c631e:	d003      	beq.n	c6328 <__mcmp+0x2c>
   c6320:	d305      	bcc.n	c632e <__mcmp+0x32>
   c6322:	2201      	movs	r2, #1
   c6324:	4610      	mov	r0, r2
   c6326:	bd30      	pop	{r4, r5, pc}
   c6328:	4283      	cmp	r3, r0
   c632a:	d3f3      	bcc.n	c6314 <__mcmp+0x18>
   c632c:	e7fa      	b.n	c6324 <__mcmp+0x28>
   c632e:	f04f 32ff 	mov.w	r2, #4294967295
   c6332:	e7f7      	b.n	c6324 <__mcmp+0x28>

000c6334 <__mdiff>:
   c6334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6338:	460c      	mov	r4, r1
   c633a:	4606      	mov	r6, r0
   c633c:	4611      	mov	r1, r2
   c633e:	4620      	mov	r0, r4
   c6340:	4690      	mov	r8, r2
   c6342:	f7ff ffdb 	bl	c62fc <__mcmp>
   c6346:	1e05      	subs	r5, r0, #0
   c6348:	d110      	bne.n	c636c <__mdiff+0x38>
   c634a:	4629      	mov	r1, r5
   c634c:	4630      	mov	r0, r6
   c634e:	f7ff fd09 	bl	c5d64 <_Balloc>
   c6352:	b930      	cbnz	r0, c6362 <__mdiff+0x2e>
   c6354:	4b3a      	ldr	r3, [pc, #232]	; (c6440 <__mdiff+0x10c>)
   c6356:	4602      	mov	r2, r0
   c6358:	f240 2132 	movw	r1, #562	; 0x232
   c635c:	4839      	ldr	r0, [pc, #228]	; (c6444 <__mdiff+0x110>)
   c635e:	f7f8 f831 	bl	be3c4 <__assert_func>
   c6362:	2301      	movs	r3, #1
   c6364:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c6368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c636c:	bfa4      	itt	ge
   c636e:	4643      	movge	r3, r8
   c6370:	46a0      	movge	r8, r4
   c6372:	4630      	mov	r0, r6
   c6374:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c6378:	bfa6      	itte	ge
   c637a:	461c      	movge	r4, r3
   c637c:	2500      	movge	r5, #0
   c637e:	2501      	movlt	r5, #1
   c6380:	f7ff fcf0 	bl	c5d64 <_Balloc>
   c6384:	b920      	cbnz	r0, c6390 <__mdiff+0x5c>
   c6386:	4b2e      	ldr	r3, [pc, #184]	; (c6440 <__mdiff+0x10c>)
   c6388:	4602      	mov	r2, r0
   c638a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c638e:	e7e5      	b.n	c635c <__mdiff+0x28>
   c6390:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c6394:	6926      	ldr	r6, [r4, #16]
   c6396:	60c5      	str	r5, [r0, #12]
   c6398:	f104 0914 	add.w	r9, r4, #20
   c639c:	f108 0514 	add.w	r5, r8, #20
   c63a0:	f100 0e14 	add.w	lr, r0, #20
   c63a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c63a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c63ac:	f108 0210 	add.w	r2, r8, #16
   c63b0:	46f2      	mov	sl, lr
   c63b2:	2100      	movs	r1, #0
   c63b4:	f859 3b04 	ldr.w	r3, [r9], #4
   c63b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c63bc:	fa1f f883 	uxth.w	r8, r3
   c63c0:	fa11 f18b 	uxtah	r1, r1, fp
   c63c4:	0c1b      	lsrs	r3, r3, #16
   c63c6:	eba1 0808 	sub.w	r8, r1, r8
   c63ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c63ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c63d2:	fa1f f888 	uxth.w	r8, r8
   c63d6:	1419      	asrs	r1, r3, #16
   c63d8:	454e      	cmp	r6, r9
   c63da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c63de:	f84a 3b04 	str.w	r3, [sl], #4
   c63e2:	d8e7      	bhi.n	c63b4 <__mdiff+0x80>
   c63e4:	1b33      	subs	r3, r6, r4
   c63e6:	3b15      	subs	r3, #21
   c63e8:	f023 0303 	bic.w	r3, r3, #3
   c63ec:	3304      	adds	r3, #4
   c63ee:	3415      	adds	r4, #21
   c63f0:	42a6      	cmp	r6, r4
   c63f2:	bf38      	it	cc
   c63f4:	2304      	movcc	r3, #4
   c63f6:	441d      	add	r5, r3
   c63f8:	4473      	add	r3, lr
   c63fa:	469e      	mov	lr, r3
   c63fc:	462e      	mov	r6, r5
   c63fe:	4566      	cmp	r6, ip
   c6400:	d30e      	bcc.n	c6420 <__mdiff+0xec>
   c6402:	f10c 0203 	add.w	r2, ip, #3
   c6406:	1b52      	subs	r2, r2, r5
   c6408:	f022 0203 	bic.w	r2, r2, #3
   c640c:	3d03      	subs	r5, #3
   c640e:	45ac      	cmp	ip, r5
   c6410:	bf38      	it	cc
   c6412:	2200      	movcc	r2, #0
   c6414:	441a      	add	r2, r3
   c6416:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c641a:	b17b      	cbz	r3, c643c <__mdiff+0x108>
   c641c:	6107      	str	r7, [r0, #16]
   c641e:	e7a3      	b.n	c6368 <__mdiff+0x34>
   c6420:	f856 8b04 	ldr.w	r8, [r6], #4
   c6424:	fa11 f288 	uxtah	r2, r1, r8
   c6428:	1414      	asrs	r4, r2, #16
   c642a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c642e:	b292      	uxth	r2, r2
   c6430:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c6434:	f84e 2b04 	str.w	r2, [lr], #4
   c6438:	1421      	asrs	r1, r4, #16
   c643a:	e7e0      	b.n	c63fe <__mdiff+0xca>
   c643c:	3f01      	subs	r7, #1
   c643e:	e7ea      	b.n	c6416 <__mdiff+0xe2>
   c6440:	000c8889 	.word	0x000c8889
   c6444:	000c8932 	.word	0x000c8932

000c6448 <__ulp>:
   c6448:	b082      	sub	sp, #8
   c644a:	ed8d 0b00 	vstr	d0, [sp]
   c644e:	9b01      	ldr	r3, [sp, #4]
   c6450:	4912      	ldr	r1, [pc, #72]	; (c649c <__ulp+0x54>)
   c6452:	4019      	ands	r1, r3
   c6454:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c6458:	2900      	cmp	r1, #0
   c645a:	dd05      	ble.n	c6468 <__ulp+0x20>
   c645c:	2200      	movs	r2, #0
   c645e:	460b      	mov	r3, r1
   c6460:	ec43 2b10 	vmov	d0, r2, r3
   c6464:	b002      	add	sp, #8
   c6466:	4770      	bx	lr
   c6468:	4249      	negs	r1, r1
   c646a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c646e:	ea4f 5021 	mov.w	r0, r1, asr #20
   c6472:	f04f 0200 	mov.w	r2, #0
   c6476:	f04f 0300 	mov.w	r3, #0
   c647a:	da04      	bge.n	c6486 <__ulp+0x3e>
   c647c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c6480:	fa41 f300 	asr.w	r3, r1, r0
   c6484:	e7ec      	b.n	c6460 <__ulp+0x18>
   c6486:	f1a0 0114 	sub.w	r1, r0, #20
   c648a:	291e      	cmp	r1, #30
   c648c:	bfda      	itte	le
   c648e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c6492:	fa20 f101 	lsrle.w	r1, r0, r1
   c6496:	2101      	movgt	r1, #1
   c6498:	460a      	mov	r2, r1
   c649a:	e7e1      	b.n	c6460 <__ulp+0x18>
   c649c:	7ff00000 	.word	0x7ff00000

000c64a0 <__b2d>:
   c64a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c64a2:	6905      	ldr	r5, [r0, #16]
   c64a4:	f100 0714 	add.w	r7, r0, #20
   c64a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c64ac:	1f2e      	subs	r6, r5, #4
   c64ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c64b2:	4620      	mov	r0, r4
   c64b4:	f7ff fd48 	bl	c5f48 <__hi0bits>
   c64b8:	f1c0 0320 	rsb	r3, r0, #32
   c64bc:	280a      	cmp	r0, #10
   c64be:	f8df c07c 	ldr.w	ip, [pc, #124]	; c653c <__b2d+0x9c>
   c64c2:	600b      	str	r3, [r1, #0]
   c64c4:	dc14      	bgt.n	c64f0 <__b2d+0x50>
   c64c6:	f1c0 0e0b 	rsb	lr, r0, #11
   c64ca:	fa24 f10e 	lsr.w	r1, r4, lr
   c64ce:	42b7      	cmp	r7, r6
   c64d0:	ea41 030c 	orr.w	r3, r1, ip
   c64d4:	bf34      	ite	cc
   c64d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c64da:	2100      	movcs	r1, #0
   c64dc:	3015      	adds	r0, #21
   c64de:	fa04 f000 	lsl.w	r0, r4, r0
   c64e2:	fa21 f10e 	lsr.w	r1, r1, lr
   c64e6:	ea40 0201 	orr.w	r2, r0, r1
   c64ea:	ec43 2b10 	vmov	d0, r2, r3
   c64ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c64f0:	42b7      	cmp	r7, r6
   c64f2:	bf3a      	itte	cc
   c64f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c64f8:	f1a5 0608 	subcc.w	r6, r5, #8
   c64fc:	2100      	movcs	r1, #0
   c64fe:	380b      	subs	r0, #11
   c6500:	d017      	beq.n	c6532 <__b2d+0x92>
   c6502:	f1c0 0c20 	rsb	ip, r0, #32
   c6506:	fa04 f500 	lsl.w	r5, r4, r0
   c650a:	42be      	cmp	r6, r7
   c650c:	fa21 f40c 	lsr.w	r4, r1, ip
   c6510:	ea45 0504 	orr.w	r5, r5, r4
   c6514:	bf8c      	ite	hi
   c6516:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c651a:	2400      	movls	r4, #0
   c651c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c6520:	fa01 f000 	lsl.w	r0, r1, r0
   c6524:	fa24 f40c 	lsr.w	r4, r4, ip
   c6528:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c652c:	ea40 0204 	orr.w	r2, r0, r4
   c6530:	e7db      	b.n	c64ea <__b2d+0x4a>
   c6532:	ea44 030c 	orr.w	r3, r4, ip
   c6536:	460a      	mov	r2, r1
   c6538:	e7d7      	b.n	c64ea <__b2d+0x4a>
   c653a:	bf00      	nop
   c653c:	3ff00000 	.word	0x3ff00000

000c6540 <__d2b>:
   c6540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c6544:	4689      	mov	r9, r1
   c6546:	2101      	movs	r1, #1
   c6548:	ec57 6b10 	vmov	r6, r7, d0
   c654c:	4690      	mov	r8, r2
   c654e:	f7ff fc09 	bl	c5d64 <_Balloc>
   c6552:	4604      	mov	r4, r0
   c6554:	b930      	cbnz	r0, c6564 <__d2b+0x24>
   c6556:	4602      	mov	r2, r0
   c6558:	4b25      	ldr	r3, [pc, #148]	; (c65f0 <__d2b+0xb0>)
   c655a:	4826      	ldr	r0, [pc, #152]	; (c65f4 <__d2b+0xb4>)
   c655c:	f240 310a 	movw	r1, #778	; 0x30a
   c6560:	f7f7 ff30 	bl	be3c4 <__assert_func>
   c6564:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c6568:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c656c:	bb35      	cbnz	r5, c65bc <__d2b+0x7c>
   c656e:	2e00      	cmp	r6, #0
   c6570:	9301      	str	r3, [sp, #4]
   c6572:	d028      	beq.n	c65c6 <__d2b+0x86>
   c6574:	4668      	mov	r0, sp
   c6576:	9600      	str	r6, [sp, #0]
   c6578:	f7ff fd06 	bl	c5f88 <__lo0bits>
   c657c:	9900      	ldr	r1, [sp, #0]
   c657e:	b300      	cbz	r0, c65c2 <__d2b+0x82>
   c6580:	9a01      	ldr	r2, [sp, #4]
   c6582:	f1c0 0320 	rsb	r3, r0, #32
   c6586:	fa02 f303 	lsl.w	r3, r2, r3
   c658a:	430b      	orrs	r3, r1
   c658c:	40c2      	lsrs	r2, r0
   c658e:	6163      	str	r3, [r4, #20]
   c6590:	9201      	str	r2, [sp, #4]
   c6592:	9b01      	ldr	r3, [sp, #4]
   c6594:	61a3      	str	r3, [r4, #24]
   c6596:	2b00      	cmp	r3, #0
   c6598:	bf14      	ite	ne
   c659a:	2202      	movne	r2, #2
   c659c:	2201      	moveq	r2, #1
   c659e:	6122      	str	r2, [r4, #16]
   c65a0:	b1d5      	cbz	r5, c65d8 <__d2b+0x98>
   c65a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c65a6:	4405      	add	r5, r0
   c65a8:	f8c9 5000 	str.w	r5, [r9]
   c65ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c65b0:	f8c8 0000 	str.w	r0, [r8]
   c65b4:	4620      	mov	r0, r4
   c65b6:	b003      	add	sp, #12
   c65b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c65bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c65c0:	e7d5      	b.n	c656e <__d2b+0x2e>
   c65c2:	6161      	str	r1, [r4, #20]
   c65c4:	e7e5      	b.n	c6592 <__d2b+0x52>
   c65c6:	a801      	add	r0, sp, #4
   c65c8:	f7ff fcde 	bl	c5f88 <__lo0bits>
   c65cc:	9b01      	ldr	r3, [sp, #4]
   c65ce:	6163      	str	r3, [r4, #20]
   c65d0:	2201      	movs	r2, #1
   c65d2:	6122      	str	r2, [r4, #16]
   c65d4:	3020      	adds	r0, #32
   c65d6:	e7e3      	b.n	c65a0 <__d2b+0x60>
   c65d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c65dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c65e0:	f8c9 0000 	str.w	r0, [r9]
   c65e4:	6918      	ldr	r0, [r3, #16]
   c65e6:	f7ff fcaf 	bl	c5f48 <__hi0bits>
   c65ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c65ee:	e7df      	b.n	c65b0 <__d2b+0x70>
   c65f0:	000c8889 	.word	0x000c8889
   c65f4:	000c8932 	.word	0x000c8932

000c65f8 <__ratio>:
   c65f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c65fc:	4688      	mov	r8, r1
   c65fe:	4669      	mov	r1, sp
   c6600:	4681      	mov	r9, r0
   c6602:	f7ff ff4d 	bl	c64a0 <__b2d>
   c6606:	a901      	add	r1, sp, #4
   c6608:	4640      	mov	r0, r8
   c660a:	ec55 4b10 	vmov	r4, r5, d0
   c660e:	f7ff ff47 	bl	c64a0 <__b2d>
   c6612:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c6616:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c661a:	eba3 0c02 	sub.w	ip, r3, r2
   c661e:	e9dd 3200 	ldrd	r3, r2, [sp]
   c6622:	1a9b      	subs	r3, r3, r2
   c6624:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c6628:	ec51 0b10 	vmov	r0, r1, d0
   c662c:	2b00      	cmp	r3, #0
   c662e:	bfd6      	itet	le
   c6630:	460a      	movle	r2, r1
   c6632:	462a      	movgt	r2, r5
   c6634:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c6638:	468b      	mov	fp, r1
   c663a:	462f      	mov	r7, r5
   c663c:	bfd4      	ite	le
   c663e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c6642:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c6646:	4620      	mov	r0, r4
   c6648:	ee10 2a10 	vmov	r2, s0
   c664c:	465b      	mov	r3, fp
   c664e:	4639      	mov	r1, r7
   c6650:	f7fd fd58 	bl	c4104 <__aeabi_ddiv>
   c6654:	ec41 0b10 	vmov	d0, r0, r1
   c6658:	b003      	add	sp, #12
   c665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c665e <__copybits>:
   c665e:	3901      	subs	r1, #1
   c6660:	b570      	push	{r4, r5, r6, lr}
   c6662:	1149      	asrs	r1, r1, #5
   c6664:	6914      	ldr	r4, [r2, #16]
   c6666:	3101      	adds	r1, #1
   c6668:	f102 0314 	add.w	r3, r2, #20
   c666c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c6670:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c6674:	1f05      	subs	r5, r0, #4
   c6676:	42a3      	cmp	r3, r4
   c6678:	d30c      	bcc.n	c6694 <__copybits+0x36>
   c667a:	1aa3      	subs	r3, r4, r2
   c667c:	3b11      	subs	r3, #17
   c667e:	f023 0303 	bic.w	r3, r3, #3
   c6682:	3211      	adds	r2, #17
   c6684:	42a2      	cmp	r2, r4
   c6686:	bf88      	it	hi
   c6688:	2300      	movhi	r3, #0
   c668a:	4418      	add	r0, r3
   c668c:	2300      	movs	r3, #0
   c668e:	4288      	cmp	r0, r1
   c6690:	d305      	bcc.n	c669e <__copybits+0x40>
   c6692:	bd70      	pop	{r4, r5, r6, pc}
   c6694:	f853 6b04 	ldr.w	r6, [r3], #4
   c6698:	f845 6f04 	str.w	r6, [r5, #4]!
   c669c:	e7eb      	b.n	c6676 <__copybits+0x18>
   c669e:	f840 3b04 	str.w	r3, [r0], #4
   c66a2:	e7f4      	b.n	c668e <__copybits+0x30>

000c66a4 <__any_on>:
   c66a4:	f100 0214 	add.w	r2, r0, #20
   c66a8:	6900      	ldr	r0, [r0, #16]
   c66aa:	114b      	asrs	r3, r1, #5
   c66ac:	4298      	cmp	r0, r3
   c66ae:	b510      	push	{r4, lr}
   c66b0:	db11      	blt.n	c66d6 <__any_on+0x32>
   c66b2:	dd0a      	ble.n	c66ca <__any_on+0x26>
   c66b4:	f011 011f 	ands.w	r1, r1, #31
   c66b8:	d007      	beq.n	c66ca <__any_on+0x26>
   c66ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c66be:	fa24 f001 	lsr.w	r0, r4, r1
   c66c2:	fa00 f101 	lsl.w	r1, r0, r1
   c66c6:	428c      	cmp	r4, r1
   c66c8:	d10b      	bne.n	c66e2 <__any_on+0x3e>
   c66ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c66ce:	4293      	cmp	r3, r2
   c66d0:	d803      	bhi.n	c66da <__any_on+0x36>
   c66d2:	2000      	movs	r0, #0
   c66d4:	bd10      	pop	{r4, pc}
   c66d6:	4603      	mov	r3, r0
   c66d8:	e7f7      	b.n	c66ca <__any_on+0x26>
   c66da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c66de:	2900      	cmp	r1, #0
   c66e0:	d0f5      	beq.n	c66ce <__any_on+0x2a>
   c66e2:	2001      	movs	r0, #1
   c66e4:	e7f6      	b.n	c66d4 <__any_on+0x30>

000c66e6 <_calloc_r>:
   c66e6:	b513      	push	{r0, r1, r4, lr}
   c66e8:	434a      	muls	r2, r1
   c66ea:	4611      	mov	r1, r2
   c66ec:	9201      	str	r2, [sp, #4]
   c66ee:	f7f7 fe59 	bl	be3a4 <_malloc_r>
   c66f2:	4604      	mov	r4, r0
   c66f4:	b118      	cbz	r0, c66fe <_calloc_r+0x18>
   c66f6:	9a01      	ldr	r2, [sp, #4]
   c66f8:	2100      	movs	r1, #0
   c66fa:	f7fd ff8d 	bl	c4618 <memset>
   c66fe:	4620      	mov	r0, r4
   c6700:	b002      	add	sp, #8
   c6702:	bd10      	pop	{r4, pc}
   c6704:	0000      	movs	r0, r0
	...

000c6708 <nan>:
   c6708:	ed9f 0b01 	vldr	d0, [pc, #4]	; c6710 <nan+0x8>
   c670c:	4770      	bx	lr
   c670e:	bf00      	nop
   c6710:	00000000 	.word	0x00000000
   c6714:	7ff80000 	.word	0x7ff80000

000c6718 <__ascii_wctomb>:
   c6718:	b149      	cbz	r1, c672e <__ascii_wctomb+0x16>
   c671a:	2aff      	cmp	r2, #255	; 0xff
   c671c:	bf85      	ittet	hi
   c671e:	238a      	movhi	r3, #138	; 0x8a
   c6720:	6003      	strhi	r3, [r0, #0]
   c6722:	700a      	strbls	r2, [r1, #0]
   c6724:	f04f 30ff 	movhi.w	r0, #4294967295
   c6728:	bf98      	it	ls
   c672a:	2001      	movls	r0, #1
   c672c:	4770      	bx	lr
   c672e:	4608      	mov	r0, r1
   c6730:	4770      	bx	lr
	...

000c6734 <__aeabi_d2lz>:
   c6734:	b538      	push	{r3, r4, r5, lr}
   c6736:	2200      	movs	r2, #0
   c6738:	2300      	movs	r3, #0
   c673a:	4604      	mov	r4, r0
   c673c:	460d      	mov	r5, r1
   c673e:	f7fd fe29 	bl	c4394 <__aeabi_dcmplt>
   c6742:	b928      	cbnz	r0, c6750 <__aeabi_d2lz+0x1c>
   c6744:	4620      	mov	r0, r4
   c6746:	4629      	mov	r1, r5
   c6748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c674c:	f7fd bef8 	b.w	c4540 <__aeabi_d2ulz>
   c6750:	4620      	mov	r0, r4
   c6752:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c6756:	f7fd fef3 	bl	c4540 <__aeabi_d2ulz>
   c675a:	4240      	negs	r0, r0
   c675c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c6760:	bd38      	pop	{r3, r4, r5, pc}
   c6762:	bf00      	nop

000c6764 <dynalib_user>:
   c6764:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c6774:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c6784:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   c6794:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   c67a4:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   c67b4:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   c67c4:	2075 7325 4d20 444f 2545 3e75 5700 7261     u %s MODE%u>.War
   c67d4:	696e 676e 202c 6f6d 6f74 2072 6f63 6d6d     ning, motor comm
   c67e4:	6e61 2064 6168 2073 6f6e 2074 6562 6e65     and has not been
   c67f4:	7220 6365 6965 6576 2064 6e69 6f20 6576      received in ove
   c6804:	2072 6425 736d 202c 7563 7474 6e69 2067     r %dms, cutting 
   c6814:	6f6d 6f74 7372 5700 7261 696e 676e 202c     motors.Warning, 
   c6824:	5047 2053 726f 4320 6d6f 6170 7373 6420     GPS or Compass d
   c6834:	7461 2061 6f6e 2074 7661 6961 616c 6c62     ata not availabl
   c6844:	2065 6f66 2072 7267 6165 6574 2072 6874     e for greater th
   c6854:	6e61 2520 6d64 2c73 6520 6978 6974 676e     an %dms, exiting
   c6864:	6120 7475 6e6f 6d6f 756f 2073 6f6d 6564      autonomous mode
   c6874:	5b00 4157 4e52 205d 544c 2045 654d 7373     .[WARN] LTE Mess
   c6884:	6761 7365 6820 7661 2065 6f6e 2074 6562     ages have not be
   c6894:	6e65 7220 6365 6965 6576 2064 6e69 2520     en received in %
   c68a4:	7364 202c 7361 7573 696d 676e 5820 6542     ds, assuming XBe
   c68b4:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   c68c4:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c68d4:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c68e4:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c68f4:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c6904:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c6914:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c6924:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c6934:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c6944:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c6954:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c6964:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c6974:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   c6984:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   c6994:	6425 5700 7261 696e 676e 202c 6863 6365     %d.Warning, chec
   c69a4:	736b 6d75 6420 656f 2073 6f6e 2074 616d     ksum does not ma
   c69b4:	6374 0068 575b 5241 5d4e 4d20 7365 6173     tch.[WARN] Messa
   c69c4:	6567 4320 6568 6b63 7573 206d 6f44 7365     ge Checksum Does
   c69d4:	4e20 746f 4d20 7461 6863 3a21 2520 0073      Not Match!: %s.
   c69e4:	7463 006c 7325 2520 2073 6425 2520 2064     ctl.%s %s %d %d 
   c69f4:	6425 4e00 7765 7420 7261 6567 2074 5047     %d.New target GP
   c6a04:	2c53 4c20 7461 203a 6625 4c20 6e6f 203a     S, Lat: %f Lon: 
   c6a14:	6625 6d00 7274 5200 6365 6965 6576 2064     %f.mtr.Received 
   c6a24:	6f4d 6f74 2072 6f43 6d6d 6e61 3a64 4c20     Motor Command: L
   c6a34:	7053 6565 3d64 6425 522c 7053 6565 3d64     Speed=%d,RSpeed=
   c6a44:	6425 7200 7165 7000 7374 5b00 5550 5354     %d.req.pts.[PUTS
   c6a54:	205d 6552 6563 7669 6465 5320 7274 6e69     ] Received Strin
   c6a64:	2067 6f43 6d6d 6e61 3a64 2520 0073 7073     g Command: %s.sp
   c6a74:	0063 7768 0061 6d64 0070 6765 0070 7325     c.hwa.dmp.egp.%s
   c6a84:	2520 0073 7473 0070 495b 464e 5d4f 5220      %s.stp.[INFO] R
   c6a94:	6365 6965 6576 2064 544c 2045 654d 7373     eceived LTE Mess
   c6aa4:	6761 3a65 2520 0073 654e 2077 5442 4320     age: %s.New BT C
   c6ab4:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   c6ac4:	6365 6965 6576 2064 4c42 2045 654d 7373     eceived BLE Mess
   c6ad4:	6761 3a65 2520 0073 7245 6f72 2c72 4320     age: %s.Error, C
   c6ae4:	756f 646c 6e20 746f 6920 696e 6974 6c61     ould not initial
   c6af4:	7a69 2065 5047 0053 4343 7548 0062 6e49     ize GPS.CCHub.In
   c6b04:	7570 2074 6f43 6d6d 6e61 0064 6146 6c69     put Command.Fail
   c6b14:	6465 7420 206f 6966 646e 4c20 5349 4d33     ed to find LIS3M
   c6b24:	4c44 6320 6968 0070 494c 3353 444d 204c     DL chip.LIS3MDL 
   c6b34:	6f46 6e75 2164 2500 3230 2564 3230 2564     Found!.%02d%02d%
   c6b44:	3430 2564 3230 2564 3230 2564 3230 0064     04d%02d%02d%02d.
   c6b54:	6157 6574 4272 746f 2e00 7363 0076 4c5f     WaterBot..csv._L
   c6b64:	474f 742e 7478 4500 7272 726f 203a 6f63     OG.txt.Error: co
   c6b74:	6c75 2064 6f6e 2074 6f63 6e6e 6365 2074     uld not connect 
   c6b84:	6f74 5320 2044 6163 6472 0021 6954 656d     to SD card!.Time
   c6b94:	4c2c 7461 7469 6475 2c65 6f4c 676e 7469     ,Latitude,Longit
   c6ba4:	6475 2c65 6554 706d 7265 7461 7275 2c65     ude,Temperature,
   c6bb4:	4870 442c 7369 6f73 766c 6465 4f20 2c32     pH,Dissolved O2,
   c6bc4:	6f43 646e 6375 6974 6976 7974 3020 312e     Conductivity 0.1
   c6bd4:	2c4b 6f43 646e 6375 6974 6976 7974 3120     K,Conductivity 1
   c6be4:	004b 495b 464e 5d4f 5720 7461 7265 6f42     K.[INFO] WaterBo
   c6bf4:	2074 6425 203a 7453 7261 6574 2064 6f4c     t %d: Started Lo
   c6c04:	6767 6e69 2167 2500 2573 3230 0078 6f42     gging!.%s%02x.Bo
   c6c14:	3174 6164 0074 2542 4364 6c43 7464 4200     t1dat.B%dCCldt.B
   c6c24:	6425 4343 6c77 0062 2542 4364 7343 736e     %dCCwlb.B%dCCsns
   c6c34:	3025 362e 2066 3025 362e 2066 6425 2520     %0.6f %0.6f %d %
   c6c44:	2064 6425 2520 2064 6425 0020 6553 646e     d %d %d %d .Send
   c6c54:	6e69 2067 2061 7473 7461 7375 7520 6470     ing a status upd
   c6c64:	7461 2165 4200 6425 4241 7573 2570 2064     ate!.B%dABsup%d 
   c6c74:	6425 2520 2e30 6636 2520 2e30 6636 0020     %d %0.6f %0.6f .
   c6c84:	7325 252c 2c66 6625 252c 2c66 6625 252c     %s,%f,%f,%f,%f,%
   c6c94:	2c66 6625 252c 0066 654e 2077 4258 6565     f,%f,%f.New XBee
   c6ca4:	4320 6d6f 616d 646e 003a 495b 464e 5d4f      Command:.[INFO]
   c6cb4:	5220 6365 6965 6576 2064 4258 6565 4d20      Received XBee M
   c6cc4:	7365 6173 6567 203a 7325 4500 746e 7265     essage: %s.Enter
   c6cd4:	6e69 2067 6144 6174 4f20 6666 6f6c 6461     ing Data Offload
   c6ce4:	7265 4d20 646f 0065 002f 7245 6f72 2c72     er Mode./.Error,
   c6cf4:	6320 756f 646c 6e20 746f 6f20 6570 206e      could not open 
   c6d04:	6f72 746f 5320 2044 6163 6472 6420 7269     root SD card dir
   c6d14:	6365 6f74 7972 5700 6961 6974 676e 6620     ectory.Waiting f
   c6d24:	726f 4320 4843 6275 6320 6e6f 656e 7463     or CCHub connect
   c6d34:	6f69 2e6e 2e2e 5300 6174 7472 6e69 2067     ion....Starting 
   c6d44:	7274 6e61 6673 7265 2e2e 002e 6843 6365     transfer....Chec
   c6d54:	696b 676e 6920 2066 6966 656c 2520 2073     king if file %s 
   c6d64:	7369 6120 2e20 7363 2076 726f 2e20 7874     is a .csv or .tx
   c6d74:	2e74 2e2e 6600 6c69 6465 6e6f 0065 6966     t....filedone.fi
   c6d84:	656c 616e 656d 5300 6e65 6964 676e 6320     lename.Sending c
   c6d94:	6d6f 616d 646e 2520 0073 6946 656c 2520     ommand %s.File %
   c6da4:	2073 7369 6120 2e20 7363 2076 726f 2e20     s is a .csv or .
   c6db4:	7874 2074 7270 6e69 6974 676e 6420 7461     txt printing dat
   c6dc4:	0061 6966 656c 6f63 706d 7400 0078 7872     a.filecomp.tx.rx
   c6dd4:	6f00 6666 6400 6762 0000 0000               .off.dbg....

000c6de0 <_ZTVN8particle11SPISettingsE>:
	...
   c6de8:	437d 000b 40d1 000b 4183 000b               }C...@...A..

000c6df4 <_ZTV5Timer>:
	...
   c6dfc:	44e9 000b 4531 000b 419f 000b               .D..1E...A..

000c6e08 <_ZTVN5spark10LogHandlerE>:
	...
   c6e18:	40a9 000b 40d3 000b                         .@...@..

000c6e20 <_ZTVN8particle9LEDStatusE>:
	...
   c6e28:	4269 000b 4285 000b 40dd 000b               iB...B...@..

000c6e34 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6e3c:	4299 000b 42cd 000b 0a2d 000c 40d5 000b     .B...B..-....@..

000c6e4c <_ZTV4File>:
	...
   c6e54:	4181 000b 4191 000b 4217 000b 4211 000b     .A...A...B...B..
   c6e64:	40df 000b 41f1 000b 41eb 000b 41e5 000b     .@...A...A...A..
   c6e74:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c6e84:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c6e94:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c6ea4:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c6eb4:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c6ec4:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c6ed4:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c6ee4:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6ef4:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6f04:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6f14:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6f24:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6f30 <CSWTCH.406>:
   c6f30:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6f40:	ffff 00ff ff00 00ff ffff 0000 6573 5074     ............setP
   c6f50:	6361 656b 4374 6766 6150 6c79 616f 5364     acketCfgPayloadS
   c6f60:	7a69 3a65 5a20 7265 206f 6170 6c79 616f     ize: Zero payloa
   c6f70:	5364 7a69 2165 7300 7465 6150 6b63 7465     dSize!.setPacket
   c6f80:	6643 5067 7961 6f6c 6461 6953 657a 203a     CfgPayloadSize: 
   c6f90:	4152 204d 6c61 6f6c 2063 6166 6c69 6465     RAM alloc failed
   c6fa0:	0021 6573 5074 6361 656b 4374 6766 6150     !.setPacketCfgPa
   c6fb0:	6c79 616f 5364 7a69 3a65 5220 4d41 7220     yloadSize: RAM r
   c6fc0:	7365 7a69 2065 6166 6c69 6465 0021 4e47     esize failed!.GN
   c6fd0:	4747 0041 5047 5456 0047 4e47 5456 0047     GGA.GPVTG.GNVTG.
   c6fe0:	5047 4d52 0043 4e47 4d52 0043 5047 445a     GPRMC.GNRMC.GPZD
   c6ff0:	0041 4e47 445a 0041 5047 4747 0041 6573     A.GNZDA.GPGGA.se
   c7000:	646e 7053 4369 6d6f 616d 646e 203a 6f6e     ndSpiCommand: no
   c7010:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   c7020:	6e6f 6620 726f 5320 4950 4220 6675 6566     on for SPI Buffe
   c7030:	2172 7300 6e65 5364 6970 6f43 6d6d 6e61     r!.sendSpiComman
   c7040:	3a64 0020 4c43 3a53 4e00 5641 4100 4b43     d: .CLS:.NAV.ACK
   c7050:	4300 4746 4d00 4e4f 2000 4449 003a 5650     .CFG.MON. ID:.PV
   c7060:	0054 4152 4554 5300 5641 0045 4c20 6e65     T.RATE.SAVE. Len
   c7070:	203a 7830 2000 6150 6c79 616f 3a64 2000     : 0x. Payload:. 
   c7080:	6150 6c79 616f 3a64 4920 4e47 524f 4445     Payload: IGNORED
   c7090:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c70a0:	3a72 5720 7261 696e 676e 202e 6966 656c     r: Warning. file
   c70b0:	7542 6666 7265 6953 657a 6920 2073 657a     BufferSize is ze
   c70c0:	6f72 202e 6144 6174 6c20 676f 6967 676e     ro. Data logging
   c70d0:	6920 2073 6f6e 2074 6f70 7373 6269 656c      is not possible
   c70e0:	002e 7263 6165 6574 6946 656c 7542 6666     ..createFileBuff
   c70f0:	7265 203a 6157 6e72 6e69 2e67 4620 6c69     er: Warning. Fil
   c7100:	2065 7562 6666 7265 6120 726c 6165 7964     e buffer already
   c7110:	6520 6978 7473 2e73 5320 696b 7070 6e69      exists. Skippin
   c7120:	2e67 2e2e 6300 6572 7461 4665 6c69 4265     g....createFileB
   c7130:	6675 6566 3a72 5220 4d41 6120 6c6c 636f     uffer: RAM alloc
   c7140:	6620 6961 656c 2164 6300 6572 7461 4665      failed!.createF
   c7150:	6c69 4265 6675 6566 3a72 6620 6c69 4265     ileBuffer: fileB
   c7160:	6675 6566 5372 7a69 2065 7369 203a 7300     ufferSize is: .s
   c7170:	6f74 6572 6150 6b63 7465 203a 6966 656c     torePacket: file
   c7180:	6220 6675 6566 2072 6f6e 2074 7661 6961      buffer not avai
   c7190:	616c 6c62 2165 7300 6f74 6572 6150 6b63     lable!.storePack
   c71a0:	7465 203a 6e69 7573 6666 6369 6569 746e     et: insufficient
   c71b0:	7320 6170 6563 6120 6176 6c69 6261 656c      space available
   c71c0:	2021 6144 6174 7720 6c69 206c 6562 6c20     ! Data will be l
   c71d0:	736f 2174 7000 6f72 6563 7373 4255 7058     ost!.processUBXp
   c71e0:	6361 656b 3a74 7020 6361 656b 5574 5842     acket: packetUBX
   c71f0:	474d 4141 4b43 6920 2073 7566 6c6c 202e     MGAACK is full. 
   c7200:	4341 204b 6977 6c6c 6220 2065 6f6c 7473     ACK will be lost
   c7210:	0021 7270 636f 7365 5573 5842 6170 6b63     !.processUBXpack
   c7220:	7465 203a 6170 6b63 7465 4255 4d58 4147     et: packetUBXMGA
   c7230:	4244 2044 7369 6620 6c75 2e6c 4420 4442     DBD is full. DBD
   c7240:	6420 7461 2061 6977 6c6c 6220 2065 6f6c      data will be lo
   c7250:	7473 0021 7270 636f 7365 5573 5842 203a     st!.processUBX: 
   c7260:	6567 4d74 7861 6150 6c79 616f 5364 7a69     getMaxPayloadSiz
   c7270:	2065 6572 7574 6e72 6465 5a20 5245 214f     e returned ZERO!
   c7280:	2021 6c43 7361 3a73 3020 0078 7270 636f     ! Class: 0x.proc
   c7290:	7365 5573 5842 203a 414e 4b43 7220 6365     essUBX: NACK rec
   c72a0:	6965 6576 3a64 5220 7165 6575 7473 6465     eived: Requested
   c72b0:	4320 616c 7373 203a 7830 2000 6552 7571      Class: 0x. Requ
   c72c0:	7365 6574 2064 4449 203a 7830 7000 6f72     ested ID: 0x.pro
   c72d0:	6563 7373 4255 3a58 6920 636e 6d6f 6e69     cessUBX: incomin
   c72e0:	2067 6122 7475 6d6f 7461 6369 2022 656d     g "automatic" me
   c72f0:	7373 6761 3a65 4320 616c 7373 203a 7830     ssage: Class: 0x
   c7300:	4900 636e 6d6f 6e69 3a67 5320 7a69 3a65     .Incoming: Size:
   c7310:	0020 5220 6365 6965 6576 3a64 0020 6170      . Received: .pa
   c7320:	6b63 7465 6643 2067 6f6e 2077 6176 696c     cketCfg now vali
   c7330:	0064 6170 6b63 7465 6341 206b 6f6e 2077     d.packetAck now 
   c7340:	6176 696c 0064 6170 6b63 7465 6643 2067     valid.packetCfg 
   c7350:	6c63 7361 4173 646e 4449 616d 6374 0068     classAndIDmatch.
   c7360:	6170 6b63 7465 6341 206b 6c63 7361 4173     packetAck classA
   c7370:	646e 4449 616d 6374 0068 6843 6365 736b     ndIDmatch.Checks
   c7380:	6d75 6620 6961 656c 3a64 2000 6863 6365     um failed:. chec
   c7390:	736b 6d75 3a41 0020 6320 6568 6b63 7573     ksumA: . checksu
   c73a0:	426d 203a 2000 6f72 6c6c 6e69 4367 6568     mB: . rollingChe
   c73b0:	6b63 7573 416d 203a 2000 6f72 6c6c 6e69     cksumA: . rollin
   c73c0:	4367 6568 6b63 7573 426d 203a 7000 6f72     gChecksumB: .pro
   c73d0:	6563 7373 4255 3a58 6220 6675 6566 2072     cessUBX: buffer 
   c73e0:	766f 7265 7572 206e 6564 6574 7463 6465     overrun detected
   c73f0:	0021 7270 636f 7365 5573 5842 203a 6f63     !.processUBX: co
   c7400:	6e75 6574 2072 6968 2074 616d 6978 756d     unter hit maximu
   c7410:	5f6d 6170 6c79 616f 5f64 6973 657a 2b20     m_payload_size +
   c7420:	3620 0021 6120 7463 7669 5065 6361 656b      6!. activePacke
   c7430:	4274 6675 6566 3a72 0020 6d20 7861 6d69     tBuffer: . maxim
   c7440:	6d75 705f 7961 6f6c 6461 735f 7a69 3a65     um_payload_size:
   c7450:	0020 7473 726f 4665 6c69 4265 7479 7365      .storeFileBytes
   c7460:	203a 6966 656c 6220 6675 6566 2072 6f6e     : file buffer no
   c7470:	2074 7661 6961 616c 6c62 2165 7300 6f74     t available!.sto
   c7480:	6572 6946 656c 7942 6574 3a73 6920 736e     reFileBytes: ins
   c7490:	6675 6966 6963 6e65 2074 7073 6361 2065     ufficient space 
   c74a0:	7661 6961 616c 6c62 2165 4420 7461 2061     available! Data 
   c74b0:	6977 6c6c 6220 2065 6f6c 7473 0021 7270     will be lost!.pr
   c74c0:	636f 7365 3a73 6720 7465 614d 5078 7961     ocess: getMaxPay
   c74d0:	6f6c 6461 6953 657a 7220 7465 7275 656e     loadSize returne
   c74e0:	2064 455a 4f52 2121 4320 616c 7373 203a     d ZERO!! Class: 
   c74f0:	7830 7000 6f72 6563 7373 203a 656d 6f6d     0x.process: memo
   c7500:	7972 6920 2073 6c61 6572 6461 2079 6c61     ry is already al
   c7510:	6f6c 6163 6574 2064 6f66 2072 6170 6c79     located for payl
   c7520:	616f 4164 7475 216f 4420 6c65 7465 6e69     oadAuto! Deletin
   c7530:	2e67 2e2e 7000 6f72 6563 7373 203a 656d     g....process: me
   c7540:	6f6d 7972 6120 6c6c 636f 7461 6f69 206e     mory allocation 
   c7550:	6166 6c69 6465 6620 726f 2220 7561 6f74     failed for "auto
   c7560:	616d 6974 2263 6d20 7365 6173 6567 203a     matic" message: 
   c7570:	6c43 7361 3a73 3020 0078 7270 636f 7365     Class: 0x.proces
   c7580:	3a73 2220 7561 6f74 616d 6974 2263 6d20     s: "automatic" m
   c7590:	7365 6173 6567 6320 756f 646c 6f20 6576     essage could ove
   c75a0:	7772 6972 6574 6420 7461 0061 7270 636f     rwrite data.proc
   c75b0:	7365 3a73 6920 636e 6d6f 6e69 2067 6122     ess: incoming "a
   c75c0:	7475 6d6f 7461 6369 2022 656d 7373 6761     utomatic" messag
   c75d0:	3a65 4320 616c 7373 203a 7830 7000 6f72     e: Class: 0x.pro
   c75e0:	6563 7373 203a 455a 4f52 4c20 4e45 5447     cess: ZERO LENGT
   c75f0:	2048 6170 6b63 7465 7220 6365 6965 6576     H packet receive
   c7600:	3a64 4320 616c 7373 203a 7830 7000 6f72     d: Class: 0x.pro
   c7610:	6563 7373 203a 4341 204b 6572 6563 7669     cess: ACK receiv
   c7620:	6465 7720 7469 2068 6c2e 6e65 2120 203d     ed with .len != 
   c7630:	3a32 4320 616c 7373 203a 7830 2000 656c     2: Class: 0x. le
   c7640:	3a6e 0020 7270 636f 7365 3a73 4e20 454d     n: .process: NME
   c7650:	2041 7562 6666 7265 6920 2073 7566 6c6c     A buffer is full
   c7660:	0021 7270 636f 7365 3a73 4e20 454d 2041     !.process: NMEA 
   c7670:	6863 6365 736b 6d75 6620 6961 206c 3228     checksum fail (2
   c7680:	2129 4520 7078 6365 6574 2064 2000 6f47     )! Expected . Go
   c7690:	2074 7000 6f72 6563 7373 203a 4d4e 4145     t .process: NMEA
   c76a0:	6320 6568 6b63 7573 206d 6166 6c69 2820      checksum fail (
   c76b0:	2931 0021 6863 6365 556b 6c62 786f 3249     1)!.checkUbloxI2
   c76c0:	3a43 4920 4332 6520 7272 726f 203a 6e65     C: I2C error: en
   c76d0:	5464 6172 736e 696d 7373 6f69 206e 6572     dTransmission re
   c76e0:	7574 6e72 6465 0020 6863 6365 556b 6c62     turned .checkUbl
   c76f0:	786f 3249 3a43 4920 4332 6520 7272 726f     oxI2C: I2C error
   c7700:	203a 6572 7571 7365 4674 6f72 206d 7830     : requestFrom 0x
   c7710:	4446 7220 7465 7275 656e 2064 6300 6568     FD returned .che
   c7720:	6b63 6255 6f6c 4978 4332 203a 4b4f 202c     ckUbloxI2C: OK, 
   c7730:	657a 6f72 6220 7479 7365 6120 6176 6c69     zero bytes avail
   c7740:	6261 656c 6300 6568 6b63 6255 6f6c 4978     able.checkUbloxI
   c7750:	4332 203a 614c 6772 2065 6170 6b63 7465     2C: Large packet
   c7760:	6f20 2066 2000 7962 6574 2073 6572 6563      of . bytes rece
   c7770:	7669 6465 6300 6568 6b63 6255 6f6c 4978     ived.checkUbloxI
   c7780:	4332 203a 6552 6461 6e69 2067 2000 7962     2C: Reading . by
   c7790:	6574 0073 6177 7469 6f46 4172 4b43 6552     tes.waitForACKRe
   c77a0:	7073 6e6f 6573 203a 6176 696c 2064 6164     sponse: valid da
   c77b0:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c77c0:	7220 6365 6965 6576 2064 6661 6574 2072      received after 
   c77d0:	2000 736d 6365 7700 6961 4674 726f 4341     . msec.waitForAC
   c77e0:	524b 7365 6f70 736e 3a65 6e20 206f 6164     KResponse: no da
   c77f0:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c7800:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c7810:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c7820:	6220 6965 676e 4f20 4556 5752 4952 5454      being OVERWRITT
   c7830:	4e45 6120 7466 7265 0020 6177 7469 6f46     EN after .waitFo
   c7840:	4172 4b43 6552 7073 6e6f 6573 203a 5243     rACKResponse: CR
   c7850:	2043 6166 6c69 6465 6120 7466 7265 0020     C failed after .
   c7860:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c7870:	6573 203a 6164 6174 7720 7361 4e20 544f     se: data was NOT
   c7880:	4341 4e4b 574f 454c 4744 4445 2820 414e     ACKNOWLEDGED (NA
   c7890:	4b43 2029 6661 6574 2072 7700 6961 4674     CK) after .waitF
   c78a0:	726f 4341 524b 7365 6f70 736e 3a65 5620     orACKResponse: V
   c78b0:	4c41 4449 6420 7461 2061 6e61 2064 4e49     ALID data and IN
   c78c0:	4156 494c 2044 4341 204b 6572 6563 7669     VALID ACK receiv
   c78d0:	6465 6120 7466 7265 0020 6177 7469 6f46     ed after .waitFo
   c78e0:	4172 4b43 6552 7073 6e6f 6573 203a 4e49     rACKResponse: IN
   c78f0:	4156 494c 2044 6164 6174 6120 646e 4920     VALID data and I
   c7900:	564e 4c41 4449 4120 4b43 7220 6365 6965     NVALID ACK recei
   c7910:	6576 2064 6661 6574 2072 7700 6961 4674     ved after .waitF
   c7920:	726f 4341 524b 7365 6f70 736e 3a65 5420     orACKResponse: T
   c7930:	4d49 4f45 5455 7720 7469 2068 6176 696c     IMEOUT with vali
   c7940:	2064 6164 6174 6120 7466 7265 0020 6d20     d data after . m
   c7950:	6573 2e63 0020 6177 7469 6f46 4172 4b43     sec. .waitForACK
   c7960:	6552 7073 6e6f 6573 203a 4954 454d 554f     Response: TIMEOU
   c7970:	2054 6661 6574 2072 2000 736d 6365 002e     T after . msec..
   c7980:	6177 7469 6f46 4e72 416f 4b43 6552 7073     waitForNoACKResp
   c7990:	6e6f 6573 203a 6176 696c 2064 6164 6174     onse: valid data
   c79a0:	7720 7469 2068 4c43 2f53 4449 6d20 7461      with CLS/ID mat
   c79b0:	6863 6120 7466 7265 0020 6177 7469 6f46     ch after .waitFo
   c79c0:	4e72 416f 4b43 6552 7073 6e6f 6573 203a     rNoACKResponse: 
   c79d0:	6164 6174 6220 6965 676e 4f20 4556 5752     data being OVERW
   c79e0:	4952 5454 4e45 6120 7466 7265 0020 6177     RITTEN after .wa
   c79f0:	7469 6f46 4e72 416f 4b43 6552 7073 6e6f     itForNoACKRespon
   c7a00:	6573 203a 4c43 2f53 4449 6d20 7461 6863     se: CLS/ID match
   c7a10:	6220 7475 6620 6961 656c 2064 5243 2043      but failed CRC 
   c7a20:	6661 6574 2072 7700 6961 4674 726f 6f4e     after .waitForNo
   c7a30:	4341 524b 7365 6f70 736e 3a65 5420 4d49     ACKResponse: TIM
   c7a40:	4f45 5455 6120 7466 7265 0020 6d20 6573     EOUT after . mse
   c7a50:	2e63 4e20 206f 6170 6b63 7465 7220 6365     c. No packet rec
   c7a60:	6965 6576 2e64 0a00 6553 646e 6e69 3a67     eived...Sending:
   c7a70:	0020 6553 646e 4920 4332 4320 6d6f 616d      .Send I2C Comma
   c7a80:	646e 6620 6961 656c 0064 6573 646e 6f43     nd failed.sendCo
   c7a90:	6d6d 6e61 3a64 5720 6961 6974 676e 6620     mmand: Waiting f
   c7aa0:	726f 4120 4b43 7220 7365 6f70 736e 0065     or ACK response.
   c7ab0:	6573 646e 6f43 6d6d 6e61 3a64 5720 6961     sendCommand: Wai
   c7ac0:	6974 676e 6620 726f 4e20 206f 4341 204b     ting for No ACK 
   c7ad0:	6572 7073 6e6f 6573 6900 696e 5074 6361     response.initPac
   c7ae0:	656b 5574 5842 414e 5056 5456 203a 4152     ketUBXNAVPVT: RA
   c7af0:	204d 6c61 6f6c 2063 6166 6c69 6465 0021     M alloc failed!.
   c7b00:	6e69 7469 6150 6b63 7465 4255 4358 4746     initPacketUBXCFG
   c7b10:	5250 3a54 5220 4d41 6120 6c6c 636f 6620     PRT: RAM alloc f
   c7b20:	6961 656c 2164 6200 6765 6e69 203a 7369     ailed!.begin: is
   c7b30:	6f43 6e6e 6365 6574 2064 202d 6573 6f63     Connected - seco
   c7b40:	646e 6120 7474 6d65 7470 6200 6765 6e69     nd attempt.begin
   c7b50:	203a 7369 6f43 6e6e 6365 6574 2064 202d     : isConnected - 
   c7b60:	6874 7269 2064 7461 6574 706d 0074 6562     third attempt.be
   c7b70:	6967 3a6e 7420 6968 6472 6120 7474 6d65     gin: third attem
   c7b80:	7470 6620 6961 656c 2e64 4120 7373 6d75     pt failed. Assum
   c7b90:	6e69 2067 7573 6363 7365 2e73 2e2e 0000     ing success.....

000c7ba0 <CSWTCH.334>:
   c7ba0:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c7bb0:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c7bc0:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c7be0:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c7c08:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7c5c:	0000 0010 0004                              ......

000c7c62 <CSWTCH.335>:
   c7c62:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7c7e:	002c 0000 0000 0000 0010 0024               ,.........$.

000c7c8a <CSWTCH.336>:
   c7c8a:	2048 4c24 5349 4d33 4c44 0000 0000          H $LIS3MDL....

000c7c98 <CSWTCH.26>:
   c7c98:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c7ca8 <_ZTV16Adafruit_LIS3MDL>:
	...
   c7cb0:	d1b3 000b d1fd 000b d1b1 000b d2ad 000b     ................
   c7cc0:	d1b5 000b                                   ....

000c7cc4 <_ZTVN5spark13EthernetClassE>:
	...
   c7ccc:	e453 000b e449 000b e43f 000b e435 000b     S...I...?...5...
   c7cdc:	e429 000b e41d 000b 1ad5 000c 1add 000c     )...............
   c7cec:	e411 000b e409 000b e3ff 000b e3f5 000b     ................
   c7cfc:	1b0d 000c                                   ....

000c7d00 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7d00:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c7d10:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c7d20:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c7d30:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c7d40:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c7d50:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c7d60:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c7d70:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c7d80:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c7d90:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c7da0:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   c7db0:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   c7dc0:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   c7dd0:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   c7de0:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   c7df0:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   c7e00:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   c7e10:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   c7e20:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   c7e30:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   c7e40:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   c7e50:	6369 002e                                   ic..

000c7e54 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7e5c:	e95b 000b e9bd 000b ea91 000b e9e7 000b     [...............
   c7e6c:	e95d 000b                                   ]...

000c7e70 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7e78:	e957 000b e9cb 000b e959 000b e9ed 000b     W.......Y.......
   c7e88:	e97d 000b                                   }...

000c7e8c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7e94:	e955 000b e9d9 000b f25d 000b e9f3 000b     U.......].......
   c7ea4:	e99d 000b                                   ....

000c7ea8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7eb4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7ec6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7ec6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7ed6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7ed6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   c7ee6:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   c7ef6:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   c7f06:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   c7f16:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   c7f26:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   c7f36:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   c7f46:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..
	...

000c7f58 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7f60:	fe79 000b fe9f 000b fe5d 000b 1c27 000c     y.......]...'...

000c7f70 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7f78:	02d5 000c 02ed 000c 0a2d 000c 40d5 000b     ........-....@..

000c7f88 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c7f90:	0301 000c 0315 000c 0bd1 000c fe65 000b     ............e...

000c7fa0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7fa8:	fe77 000b fead 000b 0991 000c fe67 000b     w...........g...

000c7fb8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c7fc0:	fe75 000b febb 000b 023d 000c fedd 000b     u.......=.......
   c7fd0:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   c7fe0:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000c7fec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7ff4:	103d 000c 1043 000c 1081 000c 1051 000c     =...C.......Q...
   c8004:	103f 000c                                   ?...

000c8008 <_ZTV9IPAddress>:
	...
   c8010:	15c9 000c 15b9 000c 15bb 000c               ............

000c801c <_ZTV9USBSerial>:
	...
   c8024:	16af 000c 1717 000c 16ed 000c fcc1 000b     ................
   c8034:	16df 000c 16b1 000c 16c1 000c 1711 000c     ................
   c8044:	16d1 000c 16a9 000c                         ........

000c804c <_ZTVN5spark13CellularClassE>:
	...
   c8054:	1877 000c 186d 000c 1863 000c 1819 000c     w...m...c.......
   c8064:	1857 000c 184b 000c 1ad5 000c 1add 000c     W...K...........
   c8074:	183f 000c 1837 000c 182d 000c 1823 000c     ?...7...-...#...
   c8084:	1b0d 000c                                   ....

000c8088 <_ZTV11USARTSerial>:
	...
   c8090:	18b1 000c 191d 000c 18f5 000c fcc1 000b     ................
   c80a0:	18c5 000c 18e1 000c 18d3 000c 18ef 000c     ................
   c80b0:	18b3 000c 18b7 000c                         ........

000c80b8 <_ZTV7TwoWire>:
	...
   c80c0:	1991 000c 19db 000c 19b3 000c 1993 000c     ................
   c80d0:	19bb 000c 19c3 000c 19cb 000c 19d3 000c     ................

000c80e0 <_ZTVN5spark12NetworkClassE>:
	...
   c80e8:	1a95 000c 1a9f 000c 1aa9 000c 1ab3 000c     ................
   c80f8:	1abd 000c 1ac9 000c 1ad5 000c 1add 000c     ................
   c8108:	1ae5 000c 1af1 000c 1af9 000c 1b03 000c     ................
   c8118:	1b0d 000c 7525 7500 3025 7834                ....%u.u%04x.

000c8125 <_ZSt7nothrow>:
	...

000c8126 <_ZTSSt19_Sp_make_shared_tag>:
   c8126:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c8136:	6572 5f64 6174 0067 0000                    red_tag...

000c8140 <_ZTISt19_Sp_make_shared_tag>:
   c8140:	8180 000c 8126 000c                         ....&...

000c8148 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c8148:	81e0 000c 8154 000c 8204 000c               ....T.......

000c8154 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c8154:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c8164:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c8174:	0045 0000                                   E...

000c8178 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c8178:	0000 0000 8148 000c 2221 000c 2235 000c     ....H...!"..5"..
   c8188:	23c9 000c 23c9 000c 229f 000c 21e1 000c     .#...#..."...!..
   c8198:	2287 000c 2249 000c 2213 000c               ."..I"..."..

000c81a4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c81a4:	81e0 000c 81b0 000c 8148 000c               ........H...

000c81b0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c81b0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c81c0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c81d0:	666e 456f 0000 0000                         nfoE....

000c81d8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c81d8:	0000 0000 81a4 000c 22c9 000c 22dd 000c     ........."..."..
   c81e8:	23c9 000c 23c9 000c 229f 000c 21e1 000c     .#...#..."...!..
   c81f8:	239d 000c 2329 000c 22f1 000c               .#..)#..."..

000c8204 <_ZTISt9type_info>:
   c8204:	8180 000c 820c 000c                         ........

000c820c <_ZTSSt9type_info>:
   c820c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   c821c:	0000 0000                                   ....

000c8220 <CSWTCH.8>:
   c8220:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c8230:	21d2 7f33 d97c c002                         .!3.|...

000c8238 <CSWTCH.9>:
   c8238:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c8248:	2d18 5444 21fb c009                         .-DT.!..

000c8250 <CSWTCH.8>:
   c8250:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c825c <CSWTCH.9>:
   c825c:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c8268 <npio2_hw>:
   c8268:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c8278:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c8288:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c8298:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c82a8:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c82b8:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c82c8:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c82d8:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c82e8 <two_over_pi>:
   c82e8:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c82f8:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c8308:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c8318:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c8328:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c8338:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c8348:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c8358:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c8368:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c8378:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c8388:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c8398:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c83a8:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c83b8:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c83c8:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c83d8:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c83e8:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c83f8:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c8408:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c8418:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c8428:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c8438:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c8448:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c8458:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c8468:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c8478:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c8488:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c8498:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c84a8:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c84b8:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c84c8:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c84d8:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c84e8:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c84f8:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c8508:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c8518:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c8528:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c8538:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c8548:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c8558:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c8568:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c8578:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c8588:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c8598:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c85a8:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c85b8:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c85c8:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c85d8:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c85e8:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c85f8:	008c 0000 006b 0000                         ....k...

000c8600 <PIo2>:
   c8600:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c8610:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c8620:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c862c <init_jk>:
   c862c:	0004 0000 0007 0000 0009 0000               ............

000c8638 <atanhi>:
   c8638:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c8648:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c8658 <atanlo>:
   c8658:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c8668:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c8678 <atanhi>:
   c8678:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c8688 <atanlo>:
   c8688:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c8698:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c86a8:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   c86b8:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   c86c8:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   c86d8:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c86e8:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c86f8:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   c8708:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c8718:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   c8728:	2e64 0063 666e 6900 696e 7974 6100 006e     d.c.nf.inity.an.

000c8738 <fpi.1>:
   c8738:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c8748:	0000 0000                                   ....

000c874c <fpinan.0>:
   c874c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c875c:	0000 0000                                   ....

000c8760 <tinytens>:
   c8760:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c8770:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c8780:	6f43 64ac 0628 1168                         Co.d(.h.

000c8788 <_ctype_>:
   c8788:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c8798:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c87a8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c87b8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c87c8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c87d8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c87e8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c87f8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8808:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c8888:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c8898:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c88a8:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c88b8:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c88c8:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c88d8:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c88e8:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c88f8:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c8908:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c8918:	6874 7865 632e 0000                         thex.c..

000c8920 <_C_numeric_locale>:
   c8920:	7123 000c 7f40 000c dbb8 2003 4f50 4953     #q..@...... POSI
   c8930:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
   c8940:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c8950:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c8960:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c8970:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c8980:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c8990:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c89a0:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.

000c89b0 <__mprec_bigtens>:
   c89b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c89c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c89d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c89d8 <__mprec_tens>:
   c89d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c89e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c89f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c8a08:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c8a18:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8a28:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8a38:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8a48:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8a58:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8a68:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c8a78:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c8a88:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c8a98:	9db4 79d9 7843 44ea                         ...yCx.D

000c8aa0 <p05.0>:
   c8aa0:	0005 0000 0019 0000 007d 0000               ........}...

000c8aac <link_const_variable_data_end>:
   c8aac:	000b6851 	.word	0x000b6851
   c8ab0:	000be45d 	.word	0x000be45d
   c8ab4:	000be73d 	.word	0x000be73d
   c8ab8:	000bfcb1 	.word	0x000bfcb1
   c8abc:	000c0a1d 	.word	0x000c0a1d
   c8ac0:	000c0ec5 	.word	0x000c0ec5
   c8ac4:	000c0ef9 	.word	0x000c0ef9
   c8ac8:	000c1881 	.word	0x000c1881
   c8acc:	000c1be5 	.word	0x000c1be5
