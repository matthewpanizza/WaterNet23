
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013de0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c7e00  000c7e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c7e24  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  2003db80  000c7e28  0002db80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a78  2003dd78  2003dd78  0003dd78  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8020  000c8020  00038020  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8048  000c8048  00038048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022d284  00000000  00000000  0003804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f3f  00000000  00000000  002652d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00070993  00000000  00000000  0028620f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f60  00000000  00000000  002f6ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000113b8  00000000  00000000  002fbb02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ff38  00000000  00000000  0030ceba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000873c1  00000000  00000000  0035cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015beb6  00000000  00000000  003e41b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fc80  00000000  00000000  0054006c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00f fd0d 	bl	c3a50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00f fd2f 	bl	c3aa0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db80 	.word	0x2003db80
   b404c:	000c7e28 	.word	0x000c7e28
   b4050:	2003dd78 	.word	0x2003dd78
   b4054:	2003dd78 	.word	0x2003dd78
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d f9c5 	bl	c13f0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c7dd4 	.word	0x000c7dd4
   b4080:	000c7df8 	.word	0x000c7df8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bc36 	b.w	b58f4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fbb7 	bl	b57fc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d b965 	b.w	c1360 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 bbc5 	b.w	bd824 <malloc>

000b409a <_Znaj>:
   b409a:	f009 bbc3 	b.w	bd824 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 bbc9 	b.w	bd834 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f009 bbc7 	b.w	bd834 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 fab2 	bl	bd618 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bd259 	.word	0x000bd259
   b40bc:	000c5c00 	.word	0x000c5c00

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00d f8c8 	bl	c12d0 <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00c bc1a 	b.w	c097e <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003ddc4 	.word	0x2003ddc4
   b4150:	2003dd84 	.word	0x2003dd84
   b4154:	2003ddb4 	.word	0x2003ddb4
   b4158:	2003e0e8 	.word	0x2003e0e8
   b415c:	2003ddf1 	.word	0x2003ddf1
   b4160:	2003df14 	.word	0x2003df14
   b4164:	2003df0d 	.word	0x2003df0d
   b4168:	2003e5b4 	.word	0x2003e5b4
   b416c:	2003e5d4 	.word	0x2003e5d4
   b4170:	000c5c15 	.word	0x000c5c15

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f002 ba55 	b.w	b6640 <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f002 fa4c 	bl	b6640 <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 b9bc 	b.w	b652c <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f002 b89d 	b.w	b62f4 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f001 ffe8 	bl	b6198 <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f008 ffdb 	bl	bd1a8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f008 ffed 	bl	bd1d8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f008 ffcd 	bl	bd1a8 <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	b2c9      	uxtb	r1, r1
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4718      	bx	r3

000b4240 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4240:	b510      	push	{r4, lr}
   b4242:	4b05      	ldr	r3, [pc, #20]	; (b4258 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4244:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4246:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4248:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b424a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424e:	f009 fa03 	bl	bd658 <led_set_status_active>
}
   b4252:	4620      	mov	r0, r4
   b4254:	bd10      	pop	{r4, pc}
   b4256:	bf00      	nop
   b4258:	000c61e0 	.word	0x000c61e0

000b425c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0
}
   b4260:	f7ff ffee 	bl	b4240 <_ZN8particle9LEDStatusD1Ev>
   b4264:	4620      	mov	r0, r4
   b4266:	2120      	movs	r1, #32
   b4268:	f7ff ff1b 	bl	b40a2 <_ZdlPvj>
   b426c:	4620      	mov	r0, r4
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4270:	4b0a      	ldr	r3, [pc, #40]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4272:	b510      	push	{r4, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4278:	f00b fc8a 	bl	bfb90 <_ZN5spark10LogManager8instanceEv>
   b427c:	4621      	mov	r1, r4
   b427e:	f00b fec2 	bl	c0006 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4282:	f00d f825 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4286:	f00d f817 	bl	c12b8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b428a:	4620      	mov	r0, r4
   b428c:	4b04      	ldr	r3, [pc, #16]	; (b42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428e:	f840 3b04 	str.w	r3, [r0], #4
   b4292:	f00b fd53 	bl	bfd3c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
   b429a:	bf00      	nop
   b429c:	000c61f4 	.word	0x000c61f4
   b42a0:	000c61c8 	.word	0x000c61c8

000b42a4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
    }
   b42a8:	f7ff ffe2 	bl	b4270 <_ZN5spark16SerialLogHandlerD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2124      	movs	r1, #36	; 0x24
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ba:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42be:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42c0:	b130      	cbz	r0, b42d0 <_ZN5Timer5startEj.isra.0+0x18>
   b42c2:	2300      	movs	r3, #0
   b42c4:	e9cd 3300 	strd	r3, r3, [sp]
   b42c8:	461a      	mov	r2, r3
   b42ca:	2102      	movs	r1, #2
   b42cc:	f008 ff8c 	bl	bd1e8 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	b130      	cbz	r0, b42e2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42d4:	2300      	movs	r3, #0
   b42d6:	e9cd 5300 	strd	r5, r3, [sp]
   b42da:	461a      	mov	r2, r3
   b42dc:	4619      	mov	r1, r3
   b42de:	f008 ff83 	bl	bd1e8 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e2:	b003      	add	sp, #12
   b42e4:	bd30      	pop	{r4, r5, pc}

000b42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e6:	b40e      	push	{r1, r2, r3}
   b42e8:	b503      	push	{r0, r1, lr}
   b42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f4:	f00c fb6d 	bl	c09d2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f8:	b002      	add	sp, #8
   b42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fe:	b003      	add	sp, #12
   b4300:	4770      	bx	lr
	...

000b4304 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4306:	4604      	mov	r4, r0
   b4308:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b430a:	7922      	ldrb	r2, [r4, #4]
   b430c:	68a3      	ldr	r3, [r4, #8]
   b430e:	b132      	cbz	r2, b431e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4310:	b9a3      	cbnz	r3, b433c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4312:	490b      	ldr	r1, [pc, #44]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4314:	b002      	add	sp, #8
   b4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b431a:	f00c bb19 	b.w	c0950 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431e:	4a09      	ldr	r2, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4320:	7b26      	ldrb	r6, [r4, #12]
   b4322:	4d09      	ldr	r5, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4324:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4326:	7b64      	ldrb	r4, [r4, #13]
   b4328:	2e01      	cmp	r6, #1
   b432a:	bf18      	it	ne
   b432c:	4629      	movne	r1, r5
   b432e:	e9cd 1400 	strd	r1, r4, [sp]
   b4332:	4907      	ldr	r1, [pc, #28]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4334:	f7ff ffd7 	bl	b42e6 <_ZN5Print6printfEPKcz>
  }
   b4338:	b002      	add	sp, #8
   b433a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b433c:	4a05      	ldr	r2, [pc, #20]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433e:	e7ef      	b.n	b4320 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4340:	000c5c3f 	.word	0x000c5c3f
   b4344:	000c7367 	.word	0x000c7367
   b4348:	000c5c3b 	.word	0x000c5c3b
   b434c:	000c5c37 	.word	0x000c5c37
   b4350:	000c5c55 	.word	0x000c5c55
   b4354:	000c5c2e 	.word	0x000c5c2e

000b4358 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4358:	b40e      	push	{r1, r2, r3}
   b435a:	b503      	push	{r0, r1, lr}
   b435c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4364:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4366:	f00c fb34 	bl	c09d2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436a:	b002      	add	sp, #8
   b436c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4370:	b003      	add	sp, #12
   b4372:	4770      	bx	lr

000b4374 <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b4374:	b510      	push	{r4, lr}
    if(driveMode == 0 && millis() - lastMtrTime > MTR_TIMEOUT){
   b4376:	4b11      	ldr	r3, [pc, #68]	; (b43bc <_Z13motionHandlerv+0x48>)
   b4378:	781b      	ldrb	r3, [r3, #0]
   b437a:	b9eb      	cbnz	r3, b43b8 <_Z13motionHandlerv+0x44>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b437c:	f008 ff7c 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   b4380:	4b0f      	ldr	r3, [pc, #60]	; (b43c0 <_Z13motionHandlerv+0x4c>)
   b4382:	681b      	ldr	r3, [r3, #0]
   b4384:	1ac0      	subs	r0, r0, r3
   b4386:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b438a:	d915      	bls.n	b43b8 <_Z13motionHandlerv+0x44>
        setLSpeed = 90;
   b438c:	4b0d      	ldr	r3, [pc, #52]	; (b43c4 <_Z13motionHandlerv+0x50>)
        setRSpeed = 90;
   b438e:	4c0e      	ldr	r4, [pc, #56]	; (b43c8 <_Z13motionHandlerv+0x54>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b4390:	480e      	ldr	r0, [pc, #56]	; (b43cc <_Z13motionHandlerv+0x58>)
        setLSpeed = 90;
   b4392:	215a      	movs	r1, #90	; 0x5a
   b4394:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4396:	4b0e      	ldr	r3, [pc, #56]	; (b43d0 <_Z13motionHandlerv+0x5c>)
        setRSpeed = 90;
   b4398:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b439a:	2201      	movs	r2, #1
   b439c:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b439e:	f00c fb60 	bl	c0a62 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43a2:	7821      	ldrb	r1, [r4, #0]
   b43a4:	480b      	ldr	r0, [pc, #44]	; (b43d4 <_Z13motionHandlerv+0x60>)
   b43a6:	f00c fb5c 	bl	c0a62 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43aa:	f00c ff91 	bl	c12d0 <_Z16_fetch_usbserialv>
   b43ae:	490a      	ldr	r1, [pc, #40]	; (b43d8 <_Z13motionHandlerv+0x64>)
   b43b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43b4:	f7ff ffd0 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    }
}
   b43b8:	bd10      	pop	{r4, pc}
   b43ba:	bf00      	nop
   b43bc:	2003ddf1 	.word	0x2003ddf1
   b43c0:	2003de30 	.word	0x2003de30
   b43c4:	2003e58c 	.word	0x2003e58c
   b43c8:	2003e58d 	.word	0x2003e58d
   b43cc:	2003dd94 	.word	0x2003dd94
   b43d0:	2003e5f0 	.word	0x2003e5f0
   b43d4:	2003dda4 	.word	0x2003dda4
   b43d8:	000c5c72 	.word	0x000c5c72

000b43dc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43dc:	b510      	push	{r4, lr}
      if (_M_manager)
   b43de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43e0:	4604      	mov	r4, r0
      if (_M_manager)
   b43e2:	b113      	cbz	r3, b43ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43e4:	2203      	movs	r2, #3
   b43e6:	4601      	mov	r1, r0
   b43e8:	4798      	blx	r3
    }
   b43ea:	4620      	mov	r0, r4
   b43ec:	bd10      	pop	{r4, pc}
	...

000b43f0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43f2:	4b13      	ldr	r3, [pc, #76]	; (b4440 <_ZN5TimerD1Ev+0x50>)
   b43f4:	6003      	str	r3, [r0, #0]
   b43f6:	4604      	mov	r4, r0
        if (handle) {
   b43f8:	6880      	ldr	r0, [r0, #8]
   b43fa:	b1c8      	cbz	r0, b4430 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b43fc:	2500      	movs	r5, #0
   b43fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4402:	e9cd 3500 	strd	r3, r5, [sp]
   b4406:	2102      	movs	r1, #2
   b4408:	462b      	mov	r3, r5
   b440a:	462a      	mov	r2, r5
   b440c:	f008 feec 	bl	bd1e8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4410:	68a0      	ldr	r0, [r4, #8]
   b4412:	4629      	mov	r1, r5
   b4414:	f008 ff10 	bl	bd238 <os_timer_set_id>
            while (running) {
   b4418:	7923      	ldrb	r3, [r4, #4]
   b441a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b441e:	b113      	cbz	r3, b4426 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4420:	f008 feba 	bl	bd198 <os_thread_yield>
            while (running) {
   b4424:	e7f8      	b.n	b4418 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4426:	68a0      	ldr	r0, [r4, #8]
   b4428:	4629      	mov	r1, r5
   b442a:	f008 fecd 	bl	bd1c8 <os_timer_destroy>
            handle = nullptr;
   b442e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4430:	f104 000c 	add.w	r0, r4, #12
   b4434:	f7ff ffd2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   b4438:	4620      	mov	r0, r4
   b443a:	b003      	add	sp, #12
   b443c:	bd30      	pop	{r4, r5, pc}
   b443e:	bf00      	nop
   b4440:	000c61b4 	.word	0x000c61b4

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffd2 	bl	b43f0 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe27 	bl	b40a2 <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4458:	b5f0      	push	{r4, r5, r6, r7, lr}
   b445a:	468c      	mov	ip, r1
   b445c:	2500      	movs	r5, #0
   b445e:	4914      	ldr	r1, [pc, #80]	; (b44b0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4460:	7105      	strb	r5, [r0, #4]
   b4462:	4604      	mov	r4, r0
   b4464:	6085      	str	r5, [r0, #8]
   b4466:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4468:	e892 0003 	ldmia.w	r2, {r0, r1}
   b446c:	b085      	sub	sp, #20
   b446e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4470:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4474:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4478:	e896 0003 	ldmia.w	r6, {r0, r1}
   b447c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4480:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4484:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4488:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b448a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b448c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b448e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4490:	6095      	str	r5, [r2, #8]
   b4492:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4494:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4496:	e9cd 3500 	strd	r3, r5, [sp]
   b449a:	4a06      	ldr	r2, [pc, #24]	; (b44b4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b449c:	4623      	mov	r3, r4
   b449e:	4661      	mov	r1, ip
   b44a0:	f104 0008 	add.w	r0, r4, #8
   b44a4:	f008 fe88 	bl	bd1b8 <os_timer_create>
    }
   b44a8:	4620      	mov	r0, r4
   b44aa:	b005      	add	sp, #20
   b44ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b44ae:	bf00      	nop
   b44b0:	000c61b4 	.word	0x000c61b4
   b44b4:	000b41e7 	.word	0x000b41e7

000b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b44b8:	b510      	push	{r4, lr}
   b44ba:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b44bc:	2200      	movs	r2, #0
   b44be:	7c40      	ldrb	r0, [r0, #17]
   b44c0:	f009 f904 	bl	bd6cc <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b44c4:	7c63      	ldrb	r3, [r4, #17]
   b44c6:	2b0f      	cmp	r3, #15
        d_.period = period;
   b44c8:	bf18      	it	ne
   b44ca:	8320      	strhne	r0, [r4, #24]
}
   b44cc:	bd10      	pop	{r4, pc}
	...

000b44d0 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b44d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(signalLED){
   b44d2:	4b29      	ldr	r3, [pc, #164]	; (b4578 <_Z10LEDHandlerv+0xa8>)
   b44d4:	4d29      	ldr	r5, [pc, #164]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44d6:	781b      	ldrb	r3, [r3, #0]
   b44d8:	b15b      	cbz	r3, b44f2 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44da:	7c6b      	ldrb	r3, [r5, #17]
   b44dc:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44de:	bf1c      	itt	ne
   b44e0:	2302      	movne	r3, #2
   b44e2:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b44e4:	4b26      	ldr	r3, [pc, #152]	; (b4580 <_Z10LEDHandlerv+0xb0>)
   b44e6:	616b      	str	r3, [r5, #20]
        return;
    }
    if(offloadMode){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b44e8:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b44ea:	4824      	ldr	r0, [pc, #144]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44ec:	f7ff ffe4 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b44f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(offloadMode){
   b44f2:	4b24      	ldr	r3, [pc, #144]	; (b4584 <_Z10LEDHandlerv+0xb4>)
   b44f4:	781b      	ldrb	r3, [r3, #0]
   b44f6:	b133      	cbz	r3, b4506 <_Z10LEDHandlerv+0x36>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44f8:	7c6b      	ldrb	r3, [r5, #17]
   b44fa:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44fc:	bf1c      	itt	ne
   b44fe:	2302      	movne	r3, #2
   b4500:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b4502:	23ff      	movs	r3, #255	; 0xff
   b4504:	e7ef      	b.n	b44e6 <_Z10LEDHandlerv+0x16>
    if(lowBattery){
   b4506:	4b20      	ldr	r3, [pc, #128]	; (b4588 <_Z10LEDHandlerv+0xb8>)
   b4508:	781b      	ldrb	r3, [r3, #0]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d12d      	bne.n	b456a <_Z10LEDHandlerv+0x9a>
    else if(logSensors){
   b450e:	4b1f      	ldr	r3, [pc, #124]	; (b458c <_Z10LEDHandlerv+0xbc>)
   b4510:	781b      	ldrb	r3, [r3, #0]
   b4512:	2b00      	cmp	r3, #0
   b4514:	d12c      	bne.n	b4570 <_Z10LEDHandlerv+0xa0>
    else if(driveMode == 0){
   b4516:	4b1e      	ldr	r3, [pc, #120]	; (b4590 <_Z10LEDHandlerv+0xc0>)
   b4518:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b451a:	2b00      	cmp	r3, #0
   b451c:	bf0b      	itete	eq
   b451e:	260a      	moveq	r6, #10
   b4520:	2614      	movne	r6, #20
   b4522:	2702      	moveq	r7, #2
   b4524:	2703      	movne	r7, #3
    statusMode |= XBeeAvail << 1;
   b4526:	4b1b      	ldr	r3, [pc, #108]	; (b4594 <_Z10LEDHandlerv+0xc4>)
   b4528:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b452a:	4b1b      	ldr	r3, [pc, #108]	; (b4598 <_Z10LEDHandlerv+0xc8>)
   b452c:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b452e:	4b1b      	ldr	r3, [pc, #108]	; (b459c <_Z10LEDHandlerv+0xcc>)
    statusMode |= BLEAvail << 2;
   b4530:	00a4      	lsls	r4, r4, #2
   b4532:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b4536:	781a      	ldrb	r2, [r3, #0]
   b4538:	4314      	orrs	r4, r2
   b453a:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b453c:	f00c fec8 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4540:	4622      	mov	r2, r4
   b4542:	3c01      	subs	r4, #1
   b4544:	4916      	ldr	r1, [pc, #88]	; (b45a0 <_Z10LEDHandlerv+0xd0>)
   b4546:	b2e4      	uxtb	r4, r4
   b4548:	f7ff ff06 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b454c:	2c06      	cmp	r4, #6
   b454e:	bf98      	it	ls
   b4550:	4b14      	ldrls	r3, [pc, #80]	; (b45a4 <_Z10LEDHandlerv+0xd4>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4552:	7c6a      	ldrb	r2, [r5, #17]
   b4554:	bf94      	ite	ls
   b4556:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b455a:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b455e:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4560:	bf18      	it	ne
   b4562:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b4564:	4631      	mov	r1, r6
    d_.color = color;
   b4566:	616b      	str	r3, [r5, #20]
   b4568:	e7bf      	b.n	b44ea <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b456a:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b456c:	2702      	movs	r7, #2
   b456e:	e7da      	b.n	b4526 <_Z10LEDHandlerv+0x56>
        SetSpeed = LED_SPEED_NORMAL;
   b4570:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b4572:	2701      	movs	r7, #1
   b4574:	e7d7      	b.n	b4526 <_Z10LEDHandlerv+0x56>
   b4576:	bf00      	nop
   b4578:	2003e58e 	.word	0x2003e58e
   b457c:	2003e594 	.word	0x2003e594
   b4580:	00ff6000 	.word	0x00ff6000
   b4584:	2003e0e8 	.word	0x2003e0e8
   b4588:	2003df14 	.word	0x2003df14
   b458c:	2003df0d 	.word	0x2003df0d
   b4590:	2003ddf1 	.word	0x2003ddf1
   b4594:	2003ddc4 	.word	0x2003ddc4
   b4598:	2003dd84 	.word	0x2003dd84
   b459c:	2003ddb4 	.word	0x2003ddb4
   b45a0:	000c5cbc 	.word	0x000c5cbc
   b45a4:	000c62c0 	.word	0x000c62c0

000b45a8 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b45a8:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b45aa:	460a      	mov	r2, r1
   b45ac:	4901      	ldr	r1, [pc, #4]	; (b45b4 <_ZN7FatFile4openEPKci+0xc>)
   b45ae:	6809      	ldr	r1, [r1, #0]
   b45b0:	f001 bff9 	b.w	b65a6 <_ZN7FatFile4openEPS_PKci>
   b45b4:	2003e614 	.word	0x2003e614

000b45b8 <_Z11wdogHandlerv>:
void wdogHandler(){
   b45b8:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b45ba:	f009 f8ab 	bl	bd714 <spark_cloud_flag_connected>
   b45be:	4c2b      	ldr	r4, [pc, #172]	; (b466c <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b45c0:	b1e0      	cbz	r0, b45fc <_Z11wdogHandlerv+0x44>
   b45c2:	2301      	movs	r3, #1
        LTEAvail = false;
   b45c4:	7023      	strb	r3, [r4, #0]
   b45c6:	f008 fe57 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b45ca:	4b29      	ldr	r3, [pc, #164]	; (b4670 <_Z11wdogHandlerv+0xb8>)
   b45cc:	4c29      	ldr	r4, [pc, #164]	; (b4674 <_Z11wdogHandlerv+0xbc>)
   b45ce:	681b      	ldr	r3, [r3, #0]
   b45d0:	f247 5230 	movw	r2, #30000	; 0x7530
   b45d4:	1ac0      	subs	r0, r0, r3
   b45d6:	4290      	cmp	r0, r2
   b45d8:	d823      	bhi.n	b4622 <_Z11wdogHandlerv+0x6a>
   b45da:	b313      	cbz	r3, b4622 <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b45dc:	2301      	movs	r3, #1
        XBeeAvail = false;
   b45de:	7023      	strb	r3, [r4, #0]
   b45e0:	f008 fe4a 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b45e4:	4b24      	ldr	r3, [pc, #144]	; (b4678 <_Z11wdogHandlerv+0xc0>)
   b45e6:	4c25      	ldr	r4, [pc, #148]	; (b467c <_Z11wdogHandlerv+0xc4>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	f247 5230 	movw	r2, #30000	; 0x7530
   b45ee:	1ac0      	subs	r0, r0, r3
   b45f0:	4290      	cmp	r0, r2
   b45f2:	d828      	bhi.n	b4646 <_Z11wdogHandlerv+0x8e>
   b45f4:	b33b      	cbz	r3, b4646 <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b45f6:	2301      	movs	r3, #1
        BLEAvail = false;
   b45f8:	7023      	strb	r3, [r4, #0]
}
   b45fa:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b45fc:	7823      	ldrb	r3, [r4, #0]
   b45fe:	2b00      	cmp	r3, #0
   b4600:	d0e1      	beq.n	b45c6 <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4602:	481f      	ldr	r0, [pc, #124]	; (b4680 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4604:	7c03      	ldrb	r3, [r0, #16]
   b4606:	b92b      	cbnz	r3, b4614 <_Z11wdogHandlerv+0x5c>
   b4608:	491e      	ldr	r1, [pc, #120]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b460a:	f244 2202 	movw	r2, #16898	; 0x4202
   b460e:	3010      	adds	r0, #16
   b4610:	f7ff ffca 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4614:	491c      	ldr	r1, [pc, #112]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b4616:	481a      	ldr	r0, [pc, #104]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4618:	221e      	movs	r2, #30
   b461a:	f7ff fe9d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b461e:	2300      	movs	r3, #0
   b4620:	e7d0      	b.n	b45c4 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4622:	7823      	ldrb	r3, [r4, #0]
   b4624:	b16b      	cbz	r3, b4642 <_Z11wdogHandlerv+0x8a>
   b4626:	4816      	ldr	r0, [pc, #88]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4628:	7c03      	ldrb	r3, [r0, #16]
   b462a:	b92b      	cbnz	r3, b4638 <_Z11wdogHandlerv+0x80>
   b462c:	4915      	ldr	r1, [pc, #84]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b462e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4632:	3010      	adds	r0, #16
   b4634:	f7ff ffb8 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4638:	4913      	ldr	r1, [pc, #76]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b463a:	4811      	ldr	r0, [pc, #68]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b463c:	221e      	movs	r2, #30
   b463e:	f7ff fe8b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4642:	2300      	movs	r3, #0
   b4644:	e7cb      	b.n	b45de <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b4646:	7822      	ldrb	r2, [r4, #0]
   b4648:	b172      	cbz	r2, b4668 <_Z11wdogHandlerv+0xb0>
   b464a:	b16b      	cbz	r3, b4668 <_Z11wdogHandlerv+0xb0>
   b464c:	480c      	ldr	r0, [pc, #48]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b464e:	7c03      	ldrb	r3, [r0, #16]
   b4650:	b92b      	cbnz	r3, b465e <_Z11wdogHandlerv+0xa6>
   b4652:	490c      	ldr	r1, [pc, #48]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b4654:	f244 2202 	movw	r2, #16898	; 0x4202
   b4658:	3010      	adds	r0, #16
   b465a:	f7ff ffa5 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b465e:	490b      	ldr	r1, [pc, #44]	; (b468c <_Z11wdogHandlerv+0xd4>)
   b4660:	4807      	ldr	r0, [pc, #28]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4662:	221e      	movs	r2, #30
   b4664:	f7ff fe78 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b4668:	2300      	movs	r3, #0
   b466a:	e7c5      	b.n	b45f8 <_Z11wdogHandlerv+0x40>
   b466c:	2003ddb4 	.word	0x2003ddb4
   b4670:	2003ddc8 	.word	0x2003ddc8
   b4674:	2003ddc4 	.word	0x2003ddc4
   b4678:	2003dd90 	.word	0x2003dd90
   b467c:	2003dd84 	.word	0x2003dd84
   b4680:	2003deb4 	.word	0x2003deb4
   b4684:	2003de10 	.word	0x2003de10
   b4688:	000c5cc7 	.word	0x000c5cc7
   b468c:	000c5d18 	.word	0x000c5d18

000b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4690:	b530      	push	{r4, r5, lr}
   b4692:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4694:	4b1b      	ldr	r3, [pc, #108]	; (b4704 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4696:	9300      	str	r3, [sp, #0]
   b4698:	7913      	ldrb	r3, [r2, #4]
   b469a:	f88d 3004 	strb.w	r3, [sp, #4]
   b469e:	6893      	ldr	r3, [r2, #8]
   b46a0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46a2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b46a6:	8993      	ldrh	r3, [r2, #12]
   b46a8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b46ac:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46ae:	460a      	mov	r2, r1
   b46b0:	466b      	mov	r3, sp
   b46b2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b46b6:	4628      	mov	r0, r5
   b46b8:	f002 fea6 	bl	b7408 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b46bc:	b910      	cbnz	r0, b46c4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b46be:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b46c0:	b005      	add	sp, #20
   b46c2:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b46c4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b46c6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b46ca:	4628      	mov	r0, r5
   b46cc:	f001 ff64 	bl	b6598 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b46d0:	2101      	movs	r1, #1
   b46d2:	4620      	mov	r0, r4
   b46d4:	f002 fd43 	bl	b715e <_ZN9FatVolume4initEh>
   b46d8:	4601      	mov	r1, r0
   b46da:	b168      	cbz	r0, b46f8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b46dc:	4621      	mov	r1, r4
   b46de:	4628      	mov	r0, r5
   b46e0:	f001 fd54 	bl	b618c <_ZN7FatFile8openRootEP9FatVolume>
   b46e4:	2800      	cmp	r0, #0
   b46e6:	d0ea      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b46e8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b46ec:	f013 0f70 	tst.w	r3, #112	; 0x70
   b46f0:	d0e5      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b46f2:	4b05      	ldr	r3, [pc, #20]	; (b4708 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b46f4:	601d      	str	r5, [r3, #0]
    return true;
   b46f6:	e7e3      	b.n	b46c0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b46f8:	4620      	mov	r0, r4
   b46fa:	f002 fd30 	bl	b715e <_ZN9FatVolume4initEh>
   b46fe:	2800      	cmp	r0, #0
   b4700:	d1ec      	bne.n	b46dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4702:	e7dc      	b.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4704:	000c61a0 	.word	0x000c61a0
   b4708:	2003e614 	.word	0x2003e614

000b470c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4710:	b08a      	sub	sp, #40	; 0x28
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4712:	7883      	ldrb	r3, [r0, #2]
   b4714:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4716:	af04      	add	r7, sp, #16
   b4718:	4604      	mov	r4, r0
   b471a:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b471c:	d14c      	bne.n	b47b8 <_Z14processCommandPKchb+0xac>
   b471e:	78c3      	ldrb	r3, [r0, #3]
   b4720:	2b42      	cmp	r3, #66	; 0x42
   b4722:	d175      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
        char dataStr[strlen(command)-8];
   b4724:	4620      	mov	r0, r4
   b4726:	f00f fa46 	bl	c3bb6 <strlen>
   b472a:	3801      	subs	r0, #1
   b472c:	f020 0007 	bic.w	r0, r0, #7
        }
   b4730:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b4732:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4736:	4620      	mov	r0, r4
   b4738:	f00f fa3d 	bl	c3bb6 <strlen>
        char dataStr[strlen(command)-8];
   b473c:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b473e:	4428      	add	r0, r5
   b4740:	2600      	movs	r6, #0
   b4742:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4746:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b4748:	71fe      	strb	r6, [r7, #7]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b474a:	803e      	strh	r6, [r7, #0]
   b474c:	70be      	strb	r6, [r7, #2]
   b474e:	f00f fa32 	bl	c3bb6 <strlen>
   b4752:	4420      	add	r0, r4
   b4754:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4758:	703b      	strb	r3, [r7, #0]
   b475a:	4620      	mov	r0, r4
   b475c:	f00f fa2b 	bl	c3bb6 <strlen>
   b4760:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4762:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4764:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4768:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b476a:	2210      	movs	r2, #16
   b476c:	4638      	mov	r0, r7
   b476e:	f010 f94b 	bl	c4a08 <strtol>
   b4772:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4774:	fa5f f888 	uxtb.w	r8, r8
   b4778:	f00c fdaa 	bl	c12d0 <_Z16_fetch_usbserialv>
   b477c:	4980      	ldr	r1, [pc, #512]	; (b4980 <_Z14processCommandPKchb+0x274>)
   b477e:	4643      	mov	r3, r8
   b4780:	4642      	mov	r2, r8
   b4782:	f7ff fde9 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4786:	2604      	movs	r6, #4
   b4788:	4620      	mov	r0, r4
   b478a:	f00f fa14 	bl	c3bb6 <strlen>
   b478e:	3802      	subs	r0, #2
   b4790:	4286      	cmp	r6, r0
   b4792:	d216      	bcs.n	b47c2 <_Z14processCommandPKchb+0xb6>
            if(i < 7) cmdStr[i-4] = command[i];
   b4794:	2e06      	cmp	r6, #6
   b4796:	bf9b      	ittet	ls
   b4798:	f107 0318 	addls.w	r3, r7, #24
   b479c:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b479e:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b47a0:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b47a2:	bf8c      	ite	hi
   b47a4:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b47a6:	f803 2c18 	strbls.w	r2, [r3, #-24]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47aa:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b47ae:	bf88      	it	hi
   b47b0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47b4:	b2f6      	uxtb	r6, r6
   b47b6:	e7e7      	b.n	b4788 <_Z14processCommandPKchb+0x7c>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b47b8:	2b42      	cmp	r3, #66	; 0x42
   b47ba:	d129      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
   b47bc:	78c3      	ldrb	r3, [r0, #3]
   b47be:	2b31      	cmp	r3, #49	; 0x31
   b47c0:	e7af      	b.n	b4722 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b47c2:	4540      	cmp	r0, r8
   b47c4:	d02e      	beq.n	b4824 <_Z14processCommandPKchb+0x118>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b47c6:	f00c fd83 	bl	c12d0 <_Z16_fetch_usbserialv>
   b47ca:	4605      	mov	r5, r0
   b47cc:	4620      	mov	r0, r4
   b47ce:	f00f f9f2 	bl	c3bb6 <strlen>
   b47d2:	1e82      	subs	r2, r0, #2
   b47d4:	4628      	mov	r0, r5
    return m_attr;
   b47d6:	4d6b      	ldr	r5, [pc, #428]	; (b4984 <_Z14processCommandPKchb+0x278>)
   b47d8:	496b      	ldr	r1, [pc, #428]	; (b4988 <_Z14processCommandPKchb+0x27c>)
   b47da:	4643      	mov	r3, r8
   b47dc:	f7ff fdbc 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b47e0:	7c2b      	ldrb	r3, [r5, #16]
   b47e2:	b9cb      	cbnz	r3, b4818 <_Z14processCommandPKchb+0x10c>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b47e4:	4969      	ldr	r1, [pc, #420]	; (b498c <_Z14processCommandPKchb+0x280>)
   b47e6:	f244 2202 	movw	r2, #16898	; 0x4202
   b47ea:	f105 0010 	add.w	r0, r5, #16
   b47ee:	f7ff fedb 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47f2:	4967      	ldr	r1, [pc, #412]	; (b4990 <_Z14processCommandPKchb+0x284>)
   b47f4:	4622      	mov	r2, r4
   b47f6:	4628      	mov	r0, r5
   b47f8:	f7ff fdae 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b47fc:	f105 0010 	add.w	r0, r5, #16
   b4800:	f001 feca 	bl	b6598 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4804:	f00c fd64 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4808:	4962      	ldr	r1, [pc, #392]	; (b4994 <_Z14processCommandPKchb+0x288>)
   b480a:	f00c f8b8 	bl	c097e <_ZN5Print7printlnEPKc>
            return;
   b480e:	46cd      	mov	sp, r9
}
   b4810:	3718      	adds	r7, #24
   b4812:	46bd      	mov	sp, r7
   b4814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4818:	495d      	ldr	r1, [pc, #372]	; (b4990 <_Z14processCommandPKchb+0x284>)
   b481a:	4622      	mov	r2, r4
   b481c:	4628      	mov	r0, r5
   b481e:	f7ff fd9b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4822:	e7ef      	b.n	b4804 <_Z14processCommandPKchb+0xf8>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4824:	495c      	ldr	r1, [pc, #368]	; (b4998 <_Z14processCommandPKchb+0x28c>)
   b4826:	1d38      	adds	r0, r7, #4
   b4828:	f00f f996 	bl	c3b58 <strcmp>
   b482c:	2800      	cmp	r0, #0
   b482e:	d0ee      	beq.n	b480e <_Z14processCommandPKchb+0x102>
        if(!strcmp(cmdStr,"ctl")){
   b4830:	495a      	ldr	r1, [pc, #360]	; (b499c <_Z14processCommandPKchb+0x290>)
   b4832:	1d38      	adds	r0, r7, #4
   b4834:	f00f f990 	bl	c3b58 <strcmp>
   b4838:	b968      	cbnz	r0, b4856 <_Z14processCommandPKchb+0x14a>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal 
   b483a:	4b59      	ldr	r3, [pc, #356]	; (b49a0 <_Z14processCommandPKchb+0x294>)
   b483c:	9302      	str	r3, [sp, #8]
   b483e:	4b59      	ldr	r3, [pc, #356]	; (b49a4 <_Z14processCommandPKchb+0x298>)
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	4b59      	ldr	r3, [pc, #356]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b4844:	9300      	str	r3, [sp, #0]
   b4846:	4959      	ldr	r1, [pc, #356]	; (b49ac <_Z14processCommandPKchb+0x2a0>)
   b4848:	f107 0310 	add.w	r3, r7, #16
   b484c:	f107 0208 	add.w	r2, r7, #8
   b4850:	4628      	mov	r0, r5
   b4852:	f009 f807 	bl	bd864 <sscanf>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b4856:	4956      	ldr	r1, [pc, #344]	; (b49b0 <_Z14processCommandPKchb+0x2a4>)
   b4858:	1d38      	adds	r0, r7, #4
   b485a:	f00f f97d 	bl	c3b58 <strcmp>
   b485e:	4604      	mov	r4, r0
   b4860:	2800      	cmp	r0, #0
   b4862:	d130      	bne.n	b48c6 <_Z14processCommandPKchb+0x1ba>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b4864:	782b      	ldrb	r3, [r5, #0]
   b4866:	723b      	strb	r3, [r7, #8]
   b4868:	786b      	ldrb	r3, [r5, #1]
   b486a:	727b      	strb	r3, [r7, #9]
   b486c:	78ab      	ldrb	r3, [r5, #2]
   b486e:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b4870:	78eb      	ldrb	r3, [r5, #3]
   b4872:	743b      	strb	r3, [r7, #16]
   b4874:	792b      	ldrb	r3, [r5, #4]
   b4876:	747b      	strb	r3, [r7, #17]
            setLSpeed = atoi(lSpd);
   b4878:	f107 0008 	add.w	r0, r7, #8
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b487c:	796b      	ldrb	r3, [r5, #5]
   b487e:	74bb      	strb	r3, [r7, #18]
            setLSpeed = atoi(lSpd);
   b4880:	f00f f8c9 	bl	c3a16 <atoi>
   b4884:	4e4b      	ldr	r6, [pc, #300]	; (b49b4 <_Z14processCommandPKchb+0x2a8>)
            setRSpeed = atoi(rSpd);
   b4886:	4d4c      	ldr	r5, [pc, #304]	; (b49b8 <_Z14processCommandPKchb+0x2ac>)
            setLSpeed = atoi(lSpd);
   b4888:	7030      	strb	r0, [r6, #0]
            setRSpeed = atoi(rSpd);
   b488a:	f107 0010 	add.w	r0, r7, #16
   b488e:	f00f f8c2 	bl	c3a16 <atoi>
   b4892:	7028      	strb	r0, [r5, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4894:	f00c fd1c 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4898:	782b      	ldrb	r3, [r5, #0]
   b489a:	7832      	ldrb	r2, [r6, #0]
   b489c:	4947      	ldr	r1, [pc, #284]	; (b49bc <_Z14processCommandPKchb+0x2b0>)
   b489e:	f7ff fd5b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            ESCL.write(setLSpeed);
   b48a2:	7831      	ldrb	r1, [r6, #0]
   b48a4:	4846      	ldr	r0, [pc, #280]	; (b49c0 <_Z14processCommandPKchb+0x2b4>)
   b48a6:	f00c f8dc 	bl	c0a62 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b48aa:	7829      	ldrb	r1, [r5, #0]
   b48ac:	4845      	ldr	r0, [pc, #276]	; (b49c4 <_Z14processCommandPKchb+0x2b8>)
   b48ae:	f00c f8d8 	bl	c0a62 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b48b2:	4b45      	ldr	r3, [pc, #276]	; (b49c8 <_Z14processCommandPKchb+0x2bc>)
   b48b4:	2201      	movs	r2, #1
   b48b6:	701a      	strb	r2, [r3, #0]
   b48b8:	f008 fcde 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b48bc:	4b43      	ldr	r3, [pc, #268]	; (b49cc <_Z14processCommandPKchb+0x2c0>)
   b48be:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b48c0:	4b39      	ldr	r3, [pc, #228]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b48c2:	701c      	strb	r4, [r3, #0]
   b48c4:	e7a3      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b48c6:	4942      	ldr	r1, [pc, #264]	; (b49d0 <_Z14processCommandPKchb+0x2c4>)
   b48c8:	1d38      	adds	r0, r7, #4
   b48ca:	f00f f945 	bl	c3b58 <strcmp>
   b48ce:	b918      	cbnz	r0, b48d8 <_Z14processCommandPKchb+0x1cc>
            requestActive = mode;
   b48d0:	4b40      	ldr	r3, [pc, #256]	; (b49d4 <_Z14processCommandPKchb+0x2c8>)
   b48d2:	f883 a000 	strb.w	sl, [r3]
   b48d6:	e79a      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"pts")){
   b48d8:	493f      	ldr	r1, [pc, #252]	; (b49d8 <_Z14processCommandPKchb+0x2cc>)
   b48da:	1d38      	adds	r0, r7, #4
   b48dc:	f00f f93c 	bl	c3b58 <strcmp>
   b48e0:	b9f0      	cbnz	r0, b4920 <_Z14processCommandPKchb+0x214>
   b48e2:	4c28      	ldr	r4, [pc, #160]	; (b4984 <_Z14processCommandPKchb+0x278>)
            Serial.println(dataStr);
   b48e4:	f00c fcf4 	bl	c12d0 <_Z16_fetch_usbserialv>
   b48e8:	4629      	mov	r1, r5
   b48ea:	f00c f848 	bl	c097e <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b48ee:	7c23      	ldrb	r3, [r4, #16]
   b48f0:	b983      	cbnz	r3, b4914 <_Z14processCommandPKchb+0x208>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b48f2:	4926      	ldr	r1, [pc, #152]	; (b498c <_Z14processCommandPKchb+0x280>)
   b48f4:	f244 2202 	movw	r2, #16898	; 0x4202
   b48f8:	f104 0010 	add.w	r0, r4, #16
   b48fc:	f7ff fe54 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4900:	4936      	ldr	r1, [pc, #216]	; (b49dc <_Z14processCommandPKchb+0x2d0>)
   b4902:	462a      	mov	r2, r5
   b4904:	4620      	mov	r0, r4
   b4906:	f7ff fd27 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b490a:	f104 0010 	add.w	r0, r4, #16
   b490e:	f001 fe43 	bl	b6598 <_ZN7FatFile5closeEv>
   b4912:	e77c      	b.n	b480e <_Z14processCommandPKchb+0x102>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4914:	4931      	ldr	r1, [pc, #196]	; (b49dc <_Z14processCommandPKchb+0x2d0>)
   b4916:	462a      	mov	r2, r5
   b4918:	4620      	mov	r0, r4
   b491a:	f7ff fd1d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b491e:	e776      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4920:	492f      	ldr	r1, [pc, #188]	; (b49e0 <_Z14processCommandPKchb+0x2d4>)
   b4922:	1d38      	adds	r0, r7, #4
   b4924:	f00f f918 	bl	c3b58 <strcmp>
   b4928:	b920      	cbnz	r0, b4934 <_Z14processCommandPKchb+0x228>
   b492a:	f008 fca5 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b492e:	4b2d      	ldr	r3, [pc, #180]	; (b49e4 <_Z14processCommandPKchb+0x2d8>)
   b4930:	6018      	str	r0, [r3, #0]
   b4932:	e76c      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"hwa")){
   b4934:	492c      	ldr	r1, [pc, #176]	; (b49e8 <_Z14processCommandPKchb+0x2dc>)
   b4936:	1d38      	adds	r0, r7, #4
   b4938:	f00f f90e 	bl	c3b58 <strcmp>
   b493c:	b910      	cbnz	r0, b4944 <_Z14processCommandPKchb+0x238>
            waitForConnection = false;
   b493e:	4b2b      	ldr	r3, [pc, #172]	; (b49ec <_Z14processCommandPKchb+0x2e0>)
   b4940:	7018      	strb	r0, [r3, #0]
   b4942:	e764      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b4944:	492a      	ldr	r1, [pc, #168]	; (b49f0 <_Z14processCommandPKchb+0x2e4>)
   b4946:	1d38      	adds	r0, r7, #4
   b4948:	f00f f906 	bl	c3b58 <strcmp>
   b494c:	2800      	cmp	r0, #0
   b494e:	f43f af5e 	beq.w	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b4952:	4928      	ldr	r1, [pc, #160]	; (b49f4 <_Z14processCommandPKchb+0x2e8>)
   b4954:	1d38      	adds	r0, r7, #4
   b4956:	f00f f8ff 	bl	c3b58 <strcmp>
   b495a:	2800      	cmp	r0, #0
   b495c:	f47f af57 	bne.w	b480e <_Z14processCommandPKchb+0x102>
            offloadMode = true;
   b4960:	4b25      	ldr	r3, [pc, #148]	; (b49f8 <_Z14processCommandPKchb+0x2ec>)
            status.setSpeed(LED_SPEED_FAST);
   b4962:	4826      	ldr	r0, [pc, #152]	; (b49fc <_Z14processCommandPKchb+0x2f0>)
            offloadMode = true;
   b4964:	2201      	movs	r2, #1
   b4966:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4968:	4b24      	ldr	r3, [pc, #144]	; (b49fc <_Z14processCommandPKchb+0x2f0>)
   b496a:	7c5a      	ldrb	r2, [r3, #17]
   b496c:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b496e:	bf1c      	itt	ne
   b4970:	2202      	movne	r2, #2
   b4972:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4974:	211e      	movs	r1, #30
    d_.color = color;
   b4976:	22ff      	movs	r2, #255	; 0xff
   b4978:	615a      	str	r2, [r3, #20]
   b497a:	f7ff fd9d 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b497e:	e746      	b.n	b480e <_Z14processCommandPKchb+0x102>
   b4980:	000c5d67 	.word	0x000c5d67
   b4984:	2003deb4 	.word	0x2003deb4
   b4988:	000c5d7c 	.word	0x000c5d7c
   b498c:	2003de10 	.word	0x2003de10
   b4990:	000c5d99 	.word	0x000c5d99
   b4994:	000c5dc5 	.word	0x000c5dc5
   b4998:	000c5de6 	.word	0x000c5de6
   b499c:	000c5dea 	.word	0x000c5dea
   b49a0:	2003e58e 	.word	0x2003e58e
   b49a4:	2003df0d 	.word	0x2003df0d
   b49a8:	2003ddf1 	.word	0x2003ddf1
   b49ac:	000c5dee 	.word	0x000c5dee
   b49b0:	000c5dfd 	.word	0x000c5dfd
   b49b4:	2003e58c 	.word	0x2003e58c
   b49b8:	2003e58d 	.word	0x2003e58d
   b49bc:	000c5e01 	.word	0x000c5e01
   b49c0:	2003dd94 	.word	0x2003dd94
   b49c4:	2003dda4 	.word	0x2003dda4
   b49c8:	2003e5f0 	.word	0x2003e5f0
   b49cc:	2003de30 	.word	0x2003de30
   b49d0:	000c5e2d 	.word	0x000c5e2d
   b49d4:	2003e0e9 	.word	0x2003e0e9
   b49d8:	000c5e31 	.word	0x000c5e31
   b49dc:	000c5e35 	.word	0x000c5e35
   b49e0:	000c5e58 	.word	0x000c5e58
   b49e4:	2003de34 	.word	0x2003de34
   b49e8:	000c5e5c 	.word	0x000c5e5c
   b49ec:	2003e5f1 	.word	0x2003e5f1
   b49f0:	000c5e60 	.word	0x000c5e60
   b49f4:	000c5e64 	.word	0x000c5e64
   b49f8:	2003e0e8 	.word	0x2003e0e8
   b49fc:	2003e594 	.word	0x2003e594

000b4a00 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4a00:	b510      	push	{r4, lr}
   b4a02:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4a04:	2200      	movs	r2, #0
   b4a06:	2104      	movs	r1, #4
   b4a08:	4620      	mov	r0, r4
   b4a0a:	f7ff fe7f 	bl	b470c <_Z14processCommandPKchb>
    if(logMessages){
   b4a0e:	4b0b      	ldr	r3, [pc, #44]	; (b4a3c <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4a10:	781b      	ldrb	r3, [r3, #0]
   b4a12:	b193      	cbz	r3, b4a3a <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4a14:	480a      	ldr	r0, [pc, #40]	; (b4a40 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a16:	7c03      	ldrb	r3, [r0, #16]
   b4a18:	b92b      	cbnz	r3, b4a26 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4a1a:	490a      	ldr	r1, [pc, #40]	; (b4a44 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4a1c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a20:	3010      	adds	r0, #16
   b4a22:	f7ff fdc1 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4a26:	4622      	mov	r2, r4
   b4a28:	4907      	ldr	r1, [pc, #28]	; (b4a48 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4a2a:	4805      	ldr	r0, [pc, #20]	; (b4a40 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4a2c:	f7ff fc94 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4a34:	4805      	ldr	r0, [pc, #20]	; (b4a4c <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4a36:	f001 bdaf 	b.w	b6598 <_ZN7FatFile5closeEv>
}
   b4a3a:	bd10      	pop	{r4, pc}
   b4a3c:	2003df0c 	.word	0x2003df0c
   b4a40:	2003deb4 	.word	0x2003deb4
   b4a44:	2003de10 	.word	0x2003de10
   b4a48:	000c5e68 	.word	0x000c5e68
   b4a4c:	2003dec4 	.word	0x2003dec4

000b4a50 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a50:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4a52:	f101 0308 	add.w	r3, r1, #8
   b4a56:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a5a:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4a5c:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a60:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4a62:	460a      	mov	r2, r1
   b4a64:	4601      	mov	r1, r0
   b4a66:	4668      	mov	r0, sp
   b4a68:	f00e fff2 	bl	c3a50 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a6c:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4a70:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4a76:	b113      	cbz	r3, b4a7e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4a78:	2300      	movs	r3, #0
   b4a7a:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4a7e:	f00c fc27 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4a82:	4916      	ldr	r1, [pc, #88]	; (b4adc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4a84:	f00b ff7b 	bl	c097e <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4a88:	f00c fc22 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4a8c:	4629      	mov	r1, r5
   b4a8e:	f00b ff76 	bl	c097e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4a92:	2201      	movs	r2, #1
   b4a94:	4611      	mov	r1, r2
   b4a96:	4628      	mov	r0, r5
   b4a98:	f7ff fe38 	bl	b470c <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4a9c:	782b      	ldrb	r3, [r5, #0]
   b4a9e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4aa2:	2b41      	cmp	r3, #65	; 0x41
   b4aa4:	d103      	bne.n	b4aae <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4aa6:	f008 fbe7 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   b4aaa:	4b0d      	ldr	r3, [pc, #52]	; (b4ae0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4aac:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4aae:	4b0d      	ldr	r3, [pc, #52]	; (b4ae4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4ab0:	781b      	ldrb	r3, [r3, #0]
   b4ab2:	b183      	cbz	r3, b4ad6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4ab4:	480c      	ldr	r0, [pc, #48]	; (b4ae8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4ab6:	7c03      	ldrb	r3, [r0, #16]
   b4ab8:	b92b      	cbnz	r3, b4ac6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4aba:	490c      	ldr	r1, [pc, #48]	; (b4aec <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4abc:	f244 2202 	movw	r2, #16898	; 0x4202
   b4ac0:	3010      	adds	r0, #16
   b4ac2:	f7ff fd71 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4ac6:	490a      	ldr	r1, [pc, #40]	; (b4af0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4ac8:	4807      	ldr	r0, [pc, #28]	; (b4ae8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4aca:	462a      	mov	r2, r5
   b4acc:	f7ff fc44 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4ad0:	4808      	ldr	r0, [pc, #32]	; (b4af4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4ad2:	f001 fd61 	bl	b6598 <_ZN7FatFile5closeEv>
}
   b4ad6:	46bd      	mov	sp, r7
   b4ad8:	bdb0      	pop	{r4, r5, r7, pc}
   b4ada:	bf00      	nop
   b4adc:	000c5e88 	.word	0x000c5e88
   b4ae0:	2003dd90 	.word	0x2003dd90
   b4ae4:	2003df0c 	.word	0x2003df0c
   b4ae8:	2003deb4 	.word	0x2003deb4
   b4aec:	2003de10 	.word	0x2003de10
   b4af0:	000c5e98 	.word	0x000c5e98
   b4af4:	2003dec4 	.word	0x2003dec4

000b4af8 <_Z8setupLTEv>:
void setupLTE(){
   b4af8:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4afa:	2400      	movs	r4, #0
   b4afc:	e9cd 4400 	strd	r4, r4, [sp]
   b4b00:	4904      	ldr	r1, [pc, #16]	; (b4b14 <_Z8setupLTEv+0x1c>)
   b4b02:	4805      	ldr	r0, [pc, #20]	; (b4b18 <_Z8setupLTEv+0x20>)
   b4b04:	2301      	movs	r3, #1
   b4b06:	4622      	mov	r2, r4
   b4b08:	f008 fe14 	bl	bd734 <spark_subscribe>
    LTEAvail = false;
   b4b0c:	4b03      	ldr	r3, [pc, #12]	; (b4b1c <_Z8setupLTEv+0x24>)
   b4b0e:	701c      	strb	r4, [r3, #0]
}
   b4b10:	b002      	add	sp, #8
   b4b12:	bd10      	pop	{r4, pc}
   b4b14:	000b4a01 	.word	0x000b4a01
   b4b18:	000c5eb8 	.word	0x000c5eb8
   b4b1c:	2003ddb4 	.word	0x2003ddb4

000b4b20 <_Z9setupXBeev>:
void setupXBee(){
   b4b20:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4b22:	f00c fd6d 	bl	c1600 <_Z22__fetch_global_Serial1v>
   b4b26:	4908      	ldr	r1, [pc, #32]	; (b4b48 <_Z9setupXBeev+0x28>)
   b4b28:	f7ff fbdd 	bl	b42e6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4b2c:	2014      	movs	r0, #20
   b4b2e:	f008 feed 	bl	bd90c <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4b32:	f00c fd65 	bl	c1600 <_Z22__fetch_global_Serial1v>
   b4b36:	4905      	ldr	r1, [pc, #20]	; (b4b4c <_Z9setupXBeev+0x2c>)
   b4b38:	f7ff fbd5 	bl	b42e6 <_ZN5Print6printfEPKcz>
}
   b4b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4b40:	2014      	movs	r0, #20
   b4b42:	f008 bee3 	b.w	bd90c <delay>
   b4b46:	bf00      	nop
   b4b48:	000c7366 	.word	0x000c7366
   b4b4c:	000c5c3d 	.word	0x000c5c3d

000b4b50 <_Z8setupGPSv>:
void setupGPS(){
   b4b50:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4b52:	f00c fd15 	bl	c1580 <_Z19__fetch_global_Wirev>
   b4b56:	2300      	movs	r3, #0
   b4b58:	4601      	mov	r1, r0
   b4b5a:	9300      	str	r3, [sp, #0]
   b4b5c:	4812      	ldr	r0, [pc, #72]	; (b4ba8 <_Z8setupGPSv+0x58>)
   b4b5e:	f240 434c 	movw	r3, #1100	; 0x44c
   b4b62:	2242      	movs	r2, #66	; 0x42
   b4b64:	f007 ff22 	bl	bc9ac <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4b68:	b940      	cbnz	r0, b4b7c <_Z8setupGPSv+0x2c>
        delay(1000);
   b4b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4b6e:	f008 fecd 	bl	bd90c <delay>
        Serial.println("Error, Could not initialize GPS");
   b4b72:	f00c fbad 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4b76:	490d      	ldr	r1, [pc, #52]	; (b4bac <_Z8setupGPSv+0x5c>)
   b4b78:	f00b ff01 	bl	c097e <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4b7c:	f240 424c 	movw	r2, #1100	; 0x44c
   b4b80:	2101      	movs	r1, #1
   b4b82:	4809      	ldr	r0, [pc, #36]	; (b4ba8 <_Z8setupGPSv+0x58>)
   b4b84:	f007 fe46 	bl	bc814 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4b88:	f240 434c 	movw	r3, #1100	; 0x44c
   b4b8c:	2201      	movs	r2, #1
   b4b8e:	2100      	movs	r1, #0
   b4b90:	4805      	ldr	r0, [pc, #20]	; (b4ba8 <_Z8setupGPSv+0x58>)
   b4b92:	f007 fe1f 	bl	bc7d4 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4b96:	f00c fcf3 	bl	c1580 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4b9a:	4905      	ldr	r1, [pc, #20]	; (b4bb0 <_Z8setupGPSv+0x60>)
}
   b4b9c:	b003      	add	sp, #12
   b4b9e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4ba2:	f00a bbd9 	b.w	bf358 <_ZN7TwoWire8setSpeedEm>
   b4ba6:	bf00      	nop
   b4ba8:	2003df68 	.word	0x2003df68
   b4bac:	000c5ebe 	.word	0x000c5ebe
   b4bb0:	00061a80 	.word	0x00061a80
   b4bb4:	00000000 	.word	0x00000000

000b4bb8 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4bb8:	b510      	push	{r4, lr}
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4bba:	2015      	movs	r0, #21
   b4bbc:	f00c fcb2 	bl	c1524 <analogRead>
   b4bc0:	ee07 0a90 	vmov	s15, r0
   b4bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4bc8:	4c37      	ldr	r4, [pc, #220]	; (b4ca8 <_Z12readPowerSysv+0xf0>)
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4bca:	ee17 0a90 	vmov	r0, s15
   b4bce:	f00e fb5b 	bl	c3288 <__aeabi_f2d>
   b4bd2:	a32d      	add	r3, pc, #180	; (adr r3, b4c88 <_Z12readPowerSysv+0xd0>)
   b4bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bd8:	f00e fbae 	bl	c3338 <__aeabi_dmul>
   b4bdc:	f00e fea4 	bl	c3928 <__aeabi_d2f>
   b4be0:	4b32      	ldr	r3, [pc, #200]	; (b4cac <_Z12readPowerSysv+0xf4>)
   b4be2:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4be4:	f00e fb50 	bl	c3288 <__aeabi_f2d>
   b4be8:	a329      	add	r3, pc, #164	; (adr r3, b4c90 <_Z12readPowerSysv+0xd8>)
   b4bea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bee:	f00e f9eb 	bl	c2fc8 <__aeabi_dsub>
   b4bf2:	4b2f      	ldr	r3, [pc, #188]	; (b4cb0 <_Z12readPowerSysv+0xf8>)
   b4bf4:	2200      	movs	r2, #0
   b4bf6:	f00e fb9f 	bl	c3338 <__aeabi_dmul>
   b4bfa:	a327      	add	r3, pc, #156	; (adr r3, b4c98 <_Z12readPowerSysv+0xe0>)
   b4bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c00:	f00e fcc4 	bl	c358c <__aeabi_ddiv>
   b4c04:	f00e fe48 	bl	c3898 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4c08:	2864      	cmp	r0, #100	; 0x64
   b4c0a:	4603      	mov	r3, r0
   b4c0c:	bfa8      	it	ge
   b4c0e:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4c14:	2814      	cmp	r0, #20
   b4c16:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4c18:	4b26      	ldr	r3, [pc, #152]	; (b4cb4 <_Z12readPowerSysv+0xfc>)
   b4c1a:	bfcc      	ite	gt
   b4c1c:	2000      	movgt	r0, #0
   b4c1e:	2001      	movle	r0, #1
   b4c20:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4c22:	2010      	movs	r0, #16
   b4c24:	f00c fc7e 	bl	c1524 <analogRead>
   b4c28:	ee07 0a90 	vmov	s15, r0
   b4c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c30:	ee17 0a90 	vmov	r0, s15
   b4c34:	f00e fb28 	bl	c3288 <__aeabi_f2d>
   b4c38:	4b1f      	ldr	r3, [pc, #124]	; (b4cb8 <_Z12readPowerSysv+0x100>)
   b4c3a:	2200      	movs	r2, #0
   b4c3c:	f00e fb7c 	bl	c3338 <__aeabi_dmul>
   b4c40:	a317      	add	r3, pc, #92	; (adr r3, b4ca0 <_Z12readPowerSysv+0xe8>)
   b4c42:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c46:	f00e fca1 	bl	c358c <__aeabi_ddiv>
   b4c4a:	f00e fe6d 	bl	c3928 <__aeabi_d2f>
   b4c4e:	4b1b      	ldr	r3, [pc, #108]	; (b4cbc <_Z12readPowerSysv+0x104>)
   b4c50:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4c52:	2011      	movs	r0, #17
   b4c54:	f00c fc66 	bl	c1524 <analogRead>
   b4c58:	ee07 0a90 	vmov	s15, r0
   b4c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c60:	ee17 0a90 	vmov	r0, s15
   b4c64:	f00e fb10 	bl	c3288 <__aeabi_f2d>
   b4c68:	4b15      	ldr	r3, [pc, #84]	; (b4cc0 <_Z12readPowerSysv+0x108>)
   b4c6a:	2200      	movs	r2, #0
   b4c6c:	f00e fb64 	bl	c3338 <__aeabi_dmul>
   b4c70:	a30b      	add	r3, pc, #44	; (adr r3, b4ca0 <_Z12readPowerSysv+0xe8>)
   b4c72:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c76:	f00e fc89 	bl	c358c <__aeabi_ddiv>
   b4c7a:	f00e fe55 	bl	c3928 <__aeabi_d2f>
   b4c7e:	4b11      	ldr	r3, [pc, #68]	; (b4cc4 <_Z12readPowerSysv+0x10c>)
   b4c80:	6018      	str	r0, [r3, #0]
}
   b4c82:	7820      	ldrb	r0, [r4, #0]
   b4c84:	bd10      	pop	{r4, pc}
   b4c86:	bf00      	nop
   b4c88:	6e04c059 	.word	0x6e04c059
   b4c8c:	3f73cddd 	.word	0x3f73cddd
   b4c90:	66666666 	.word	0x66666666
   b4c94:	402a6666 	.word	0x402a6666
   b4c98:	99999998 	.word	0x99999998
   b4c9c:	40099999 	.word	0x40099999
   b4ca0:	00000000 	.word	0x00000000
   b4ca4:	40affe00 	.word	0x40affe00
   b4ca8:	2003dde0 	.word	0x2003dde0
   b4cac:	2003dde4 	.word	0x2003dde4
   b4cb0:	40590000 	.word	0x40590000
   b4cb4:	2003df14 	.word	0x2003df14
   b4cb8:	40408000 	.word	0x40408000
   b4cbc:	2003dddc 	.word	0x2003dddc
   b4cc0:	40308000 	.word	0x40308000
   b4cc4:	2003e590 	.word	0x2003e590

000b4cc8 <_Z15getPositionDatav>:
bool getPositionData(){
   b4cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ccc:	ed2d 8b04 	vpush	{d8-d9}
    if(myGPS.isConnected()){
   b4cd0:	4895      	ldr	r0, [pc, #596]	; (b4f28 <_Z15getPositionDatav+0x260>)
bool getPositionData(){
   b4cd2:	b08c      	sub	sp, #48	; 0x30
    if(myGPS.isConnected()){
   b4cd4:	f240 414c 	movw	r1, #1100	; 0x44c
   b4cd8:	f007 fe44 	bl	bc964 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b4cdc:	4604      	mov	r4, r0
   b4cde:	2800      	cmp	r0, #0
   b4ce0:	f000 8111 	beq.w	b4f06 <_Z15getPositionDatav+0x23e>
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4ce4:	f240 414c 	movw	r1, #1100	; 0x44c
   b4ce8:	488f      	ldr	r0, [pc, #572]	; (b4f28 <_Z15getPositionDatav+0x260>)
   b4cea:	ed9f 8a90 	vldr	s16, [pc, #576]	; b4f2c <_Z15getPositionDatav+0x264>
   b4cee:	4e90      	ldr	r6, [pc, #576]	; (b4f30 <_Z15getPositionDatav+0x268>)
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4cf0:	4d90      	ldr	r5, [pc, #576]	; (b4f34 <_Z15getPositionDatav+0x26c>)
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4cf2:	f8df 8270 	ldr.w	r8, [pc, #624]	; b4f64 <_Z15getPositionDatav+0x29c>
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4cf6:	f007 fed8 	bl	bcaaa <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b4cfa:	ee07 0a90 	vmov	s15, r0
   b4cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d02:	f240 414c 	movw	r1, #1100	; 0x44c
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4d06:	ee87 7a88 	vdiv.f32	s14, s15, s16
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d0a:	4887      	ldr	r0, [pc, #540]	; (b4f28 <_Z15getPositionDatav+0x260>)
        latitude = ((float)myGPS.getLatitude())/1000000.0;
   b4d0c:	ed86 7a00 	vstr	s14, [r6]
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d10:	f007 fea8 	bl	bca64 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b4d14:	ee07 0a90 	vmov	s15, r0
   b4d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        lis3mdl.read();      // get X Y and Z data at once
   b4d1c:	4886      	ldr	r0, [pc, #536]	; (b4f38 <_Z15getPositionDatav+0x270>)
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d1e:	ee87 7a88 	vdiv.f32	s14, s15, s16
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d22:	ed9f 8a86 	vldr	s16, [pc, #536]	; b4f3c <_Z15getPositionDatav+0x274>
        longitude = ((float)myGPS.getLongitude())/1000000.0;
   b4d26:	ed85 7a00 	vstr	s14, [r5]
        lis3mdl.read();      // get X Y and Z data at once
   b4d2a:	f002 fdb7 	bl	b789c <_ZN16Adafruit_LIS3MDL4readEv>
        lis3mdl.getEvent(&event);
   b4d2e:	a903      	add	r1, sp, #12
   b4d30:	4881      	ldr	r0, [pc, #516]	; (b4f38 <_Z15getPositionDatav+0x270>)
   b4d32:	f002 fdf9 	bl	b7928 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b4d36:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
   b4d3a:	ed9d 0a08 	vldr	s0, [sp, #32]
   b4d3e:	f00c fe4b 	bl	c19d8 <atan2f>
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d42:	ee60 7a08 	vmul.f32	s15, s0, s16
   b4d46:	ee17 0a90 	vmov	r0, s15
   b4d4a:	f00e fa9d 	bl	c3288 <__aeabi_f2d>
   b4d4e:	a372      	add	r3, pc, #456	; (adr r3, b4f18 <_Z15getPositionDatav+0x250>)
   b4d50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d54:	f00e fc1a 	bl	c358c <__aeabi_ddiv>
   b4d58:	f00e fd9e 	bl	c3898 <__aeabi_d2iz>
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d5c:	edd8 7a00 	vldr	s15, [r8]
   b4d60:	ed9f 6a77 	vldr	s12, [pc, #476]	; b4f40 <_Z15getPositionDatav+0x278>
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d64:	4b77      	ldr	r3, [pc, #476]	; (b4f44 <_Z15getPositionDatav+0x27c>)
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d66:	eef4 7ac6 	vcmpe.f32	s15, s12
   b4d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        compassHeading = (int) (atan2(event.magnetic.x, event.magnetic.y) * 180 / M_PI);
   b4d6e:	6018      	str	r0, [r3, #0]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d70:	f2c0 80c9 	blt.w	b4f06 <_Z15getPositionDatav+0x23e>
   b4d74:	eddf 6a74 	vldr	s13, [pc, #464]	; b4f48 <_Z15getPositionDatav+0x280>
   b4d78:	eef4 7ae6 	vcmpe.f32	s15, s13
   b4d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d80:	f200 80c1 	bhi.w	b4f06 <_Z15getPositionDatav+0x23e>
   b4d84:	4f71      	ldr	r7, [pc, #452]	; (b4f4c <_Z15getPositionDatav+0x284>)
   b4d86:	ed97 7a00 	vldr	s14, [r7]
   b4d8a:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b4d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d92:	f2c0 80b8 	blt.w	b4f06 <_Z15getPositionDatav+0x23e>
   b4d96:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b4d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d9e:	f200 80b2 	bhi.w	b4f06 <_Z15getPositionDatav+0x23e>
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4da2:	edd5 0a00 	vldr	s1, [r5]
   b4da6:	ed96 0a00 	vldr	s0, [r6]
   b4daa:	ee77 0a60 	vsub.f32	s1, s14, s1
   b4dae:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b4db2:	f00c fe11 	bl	c19d8 <atan2f>
   b4db6:	ee60 7a08 	vmul.f32	s15, s0, s16
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4dba:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4dbe:	ee17 0a90 	vmov	r0, s15
   b4dc2:	f00e fa61 	bl	c3288 <__aeabi_f2d>
   b4dc6:	a354      	add	r3, pc, #336	; (adr r3, b4f18 <_Z15getPositionDatav+0x250>)
   b4dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dcc:	f00e fbde 	bl	c358c <__aeabi_ddiv>
   b4dd0:	f00e fd62 	bl	c3898 <__aeabi_d2iz>
            float dLat = deg2rad(targetLat-latitude);
   b4dd4:	edd6 8a00 	vldr	s17, [r6]
   b4dd8:	edd8 9a00 	vldr	s19, [r8]
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4ddc:	4b5c      	ldr	r3, [pc, #368]	; (b4f50 <_Z15getPositionDatav+0x288>)
            travelDistance = 6371.0 * c; // Distance in km
   b4dde:	4e5d      	ldr	r6, [pc, #372]	; (b4f54 <_Z15getPositionDatav+0x28c>)
            travelHeading = (int) (atan2(targetLat-latitude,targetLon-longitude) * 180 / M_PI);
   b4de0:	6018      	str	r0, [r3, #0]
  return deg * (3.14159/180);
   b4de2:	ee79 7ae8 	vsub.f32	s15, s19, s17
   b4de6:	ee17 0a90 	vmov	r0, s15
   b4dea:	f00e fa4d 	bl	c3288 <__aeabi_f2d>
   b4dee:	a34c      	add	r3, pc, #304	; (adr r3, b4f20 <_Z15getPositionDatav+0x258>)
   b4df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4df4:	f00e faa0 	bl	c3338 <__aeabi_dmul>
   b4df8:	f00e fd96 	bl	c3928 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4dfc:	ee07 0a90 	vmov	s15, r0
   b4e00:	ee27 0a88 	vmul.f32	s0, s15, s16
   b4e04:	f00c fd72 	bl	c18ec <sinf>
  return deg * (3.14159/180);
   b4e08:	ee18 0a90 	vmov	r0, s17
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e0c:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b4e10:	f00e fa3a 	bl	c3288 <__aeabi_f2d>
   b4e14:	a342      	add	r3, pc, #264	; (adr r3, b4f20 <_Z15getPositionDatav+0x258>)
   b4e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e1a:	f00e fa8d 	bl	c3338 <__aeabi_dmul>
   b4e1e:	f00e fd83 	bl	c3928 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e22:	ee00 0a10 	vmov	s0, r0
   b4e26:	f00c fd29 	bl	c187c <cosf>
  return deg * (3.14159/180);
   b4e2a:	ee19 0a90 	vmov	r0, s19
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e2e:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b4e32:	f00e fa29 	bl	c3288 <__aeabi_f2d>
   b4e36:	a33a      	add	r3, pc, #232	; (adr r3, b4f20 <_Z15getPositionDatav+0x258>)
   b4e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e3c:	f00e fa7c 	bl	c3338 <__aeabi_dmul>
   b4e40:	f00e fd72 	bl	c3928 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e44:	ee00 0a10 	vmov	s0, r0
   b4e48:	f00c fd18 	bl	c187c <cosf>
            float dLon = deg2rad(targetLon-longitude);
   b4e4c:	ed97 7a00 	vldr	s14, [r7]
   b4e50:	edd5 7a00 	vldr	s15, [r5]
  return deg * (3.14159/180);
   b4e54:	ee77 7a67 	vsub.f32	s15, s14, s15
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e58:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b4e5c:	ee17 0a90 	vmov	r0, s15
   b4e60:	f00e fa12 	bl	c3288 <__aeabi_f2d>
   b4e64:	a32e      	add	r3, pc, #184	; (adr r3, b4f20 <_Z15getPositionDatav+0x258>)
   b4e66:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e6a:	f00e fa65 	bl	c3338 <__aeabi_dmul>
   b4e6e:	f00e fd5b 	bl	c3928 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e72:	ee07 0a90 	vmov	s15, r0
   b4e76:	ee27 0a88 	vmul.f32	s0, s15, s16
   b4e7a:	f00c fd37 	bl	c18ec <sinf>
   b4e7e:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b4e82:	ee68 8a80 	vmul.f32	s17, s17, s0
   b4e86:	ee28 8a80 	vmul.f32	s16, s17, s0
   b4e8a:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b4e8e:	eeb0 0a48 	vmov.f32	s0, s16
   b4e92:	f00c fda3 	bl	c19dc <sqrtf>
            float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b4e96:	ee18 0a10 	vmov	r0, s16
   b4e9a:	ee10 5a10 	vmov	r5, s0
   b4e9e:	f00e f9f3 	bl	c3288 <__aeabi_f2d>
   b4ea2:	4602      	mov	r2, r0
   b4ea4:	460b      	mov	r3, r1
   b4ea6:	2000      	movs	r0, #0
   b4ea8:	492b      	ldr	r1, [pc, #172]	; (b4f58 <_Z15getPositionDatav+0x290>)
   b4eaa:	f00e f88d 	bl	c2fc8 <__aeabi_dsub>
   b4eae:	ec41 0b10 	vmov	d0, r0, r1
   b4eb2:	f00c fd57 	bl	c1964 <sqrt>
      return atan2(__type(__y), __type(__x));
   b4eb6:	4628      	mov	r0, r5
   b4eb8:	ed8d 0b00 	vstr	d0, [sp]
   b4ebc:	f00e f9e4 	bl	c3288 <__aeabi_f2d>
   b4ec0:	ed9d 1b00 	vldr	d1, [sp]
   b4ec4:	ec41 0b10 	vmov	d0, r0, r1
   b4ec8:	f00c fd4a 	bl	c1960 <atan2>
   b4ecc:	ec53 2b10 	vmov	r2, r3, d0
   b4ed0:	ee10 0a10 	vmov	r0, s0
   b4ed4:	4619      	mov	r1, r3
   b4ed6:	f00e f879 	bl	c2fcc <__adddf3>
   b4eda:	f00e fd25 	bl	c3928 <__aeabi_d2f>
            travelDistance = 6371.0 * c; // Distance in km
   b4ede:	eddf 7a1f 	vldr	s15, [pc, #124]	; b4f5c <_Z15getPositionDatav+0x294>
   b4ee2:	ee07 0a10 	vmov	s14, r0
   b4ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4eea:	edc6 7a00 	vstr	s15, [r6]
            Serial.printlnf("Distance: %f",travelDistance);
   b4eee:	f00c f9ef 	bl	c12d0 <_Z16_fetch_usbserialv>
   b4ef2:	4605      	mov	r5, r0
   b4ef4:	6830      	ldr	r0, [r6, #0]
   b4ef6:	f00e f9c7 	bl	c3288 <__aeabi_f2d>
   b4efa:	4602      	mov	r2, r0
   b4efc:	460b      	mov	r3, r1
   b4efe:	4628      	mov	r0, r5
   b4f00:	4917      	ldr	r1, [pc, #92]	; (b4f60 <_Z15getPositionDatav+0x298>)
   b4f02:	f7ff fa29 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4f06:	4620      	mov	r0, r4
   b4f08:	b00c      	add	sp, #48	; 0x30
   b4f0a:	ecbd 8b04 	vpop	{d8-d9}
   b4f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f12:	bf00      	nop
   b4f14:	f3af 8000 	nop.w
   b4f18:	54442d18 	.word	0x54442d18
   b4f1c:	400921fb 	.word	0x400921fb
   b4f20:	a50de270 	.word	0xa50de270
   b4f24:	3f91df45 	.word	0x3f91df45
   b4f28:	2003df68 	.word	0x2003df68
   b4f2c:	49742400 	.word	0x49742400
   b4f30:	2003de38 	.word	0x2003de38
   b4f34:	2003df10 	.word	0x2003df10
   b4f38:	2003de58 	.word	0x2003de58
   b4f3c:	43340000 	.word	0x43340000
   b4f40:	c2b40000 	.word	0xc2b40000
   b4f44:	2003dde8 	.word	0x2003dde8
   b4f48:	42b40000 	.word	0x42b40000
   b4f4c:	2003e5dc 	.word	0x2003e5dc
   b4f50:	2003e5e4 	.word	0x2003e5e4
   b4f54:	2003e5e0 	.word	0x2003e5e0
   b4f58:	3ff00000 	.word	0x3ff00000
   b4f5c:	45c71800 	.word	0x45c71800
   b4f60:	000c5ede 	.word	0x000c5ede
   b4f64:	2003e5d8 	.word	0x2003e5d8

000b4f68 <_Z12updateMotorsv>:
void updateMotors(){
   b4f68:	b510      	push	{r4, lr}
    if(updateMotorControl){
   b4f6a:	4c08      	ldr	r4, [pc, #32]	; (b4f8c <_Z12updateMotorsv+0x24>)
   b4f6c:	7823      	ldrb	r3, [r4, #0]
   b4f6e:	b15b      	cbz	r3, b4f88 <_Z12updateMotorsv+0x20>
        ESCL.write(setLSpeed);
   b4f70:	4b07      	ldr	r3, [pc, #28]	; (b4f90 <_Z12updateMotorsv+0x28>)
   b4f72:	4808      	ldr	r0, [pc, #32]	; (b4f94 <_Z12updateMotorsv+0x2c>)
   b4f74:	7819      	ldrb	r1, [r3, #0]
   b4f76:	f00b fd74 	bl	c0a62 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4f7a:	4b07      	ldr	r3, [pc, #28]	; (b4f98 <_Z12updateMotorsv+0x30>)
   b4f7c:	4807      	ldr	r0, [pc, #28]	; (b4f9c <_Z12updateMotorsv+0x34>)
   b4f7e:	7819      	ldrb	r1, [r3, #0]
   b4f80:	f00b fd6f 	bl	c0a62 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4f84:	2300      	movs	r3, #0
   b4f86:	7023      	strb	r3, [r4, #0]
}
   b4f88:	bd10      	pop	{r4, pc}
   b4f8a:	bf00      	nop
   b4f8c:	2003e5f0 	.word	0x2003e5f0
   b4f90:	2003e58c 	.word	0x2003e58c
   b4f94:	2003dd94 	.word	0x2003dd94
   b4f98:	2003e58d 	.word	0x2003e58d
   b4f9c:	2003dda4 	.word	0x2003dda4

000b4fa0 <_Z13sensorHandlerv>:
void sensorHandler(){
   b4fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4fa4:	4da4      	ldr	r5, [pc, #656]	; (b5238 <_Z13sensorHandlerv+0x298>)
void sensorHandler(){
   b4fa6:	b0ab      	sub	sp, #172	; 0xac
   b4fa8:	f008 f966 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4fac:	682b      	ldr	r3, [r5, #0]
   b4fae:	4283      	cmp	r3, r0
   b4fb0:	f080 80f3 	bcs.w	b519a <_Z13sensorHandlerv+0x1fa>
   b4fb4:	f8df b2b0 	ldr.w	fp, [pc, #688]	; b5268 <_Z13sensorHandlerv+0x2c8>
   b4fb8:	f89b 3000 	ldrb.w	r3, [fp]
   b4fbc:	2b00      	cmp	r3, #0
   b4fbe:	f000 80ec 	beq.w	b519a <_Z13sensorHandlerv+0x1fa>
        Wire.requestFrom(PHADDR, 20, 1);
   b4fc2:	f00c fadd 	bl	c1580 <_Z19__fetch_global_Wirev>
   b4fc6:	2301      	movs	r3, #1
   b4fc8:	2214      	movs	r2, #20
   b4fca:	2163      	movs	r1, #99	; 0x63
   b4fcc:	f00a f9e5 	bl	bf39a <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4fd0:	f00c fad6 	bl	c1580 <_Z19__fetch_global_Wirev>
   b4fd4:	6803      	ldr	r3, [r0, #0]
   b4fd6:	695b      	ldr	r3, [r3, #20]
   b4fd8:	4798      	blx	r3
        int c = 0;
   b4fda:	ac16      	add	r4, sp, #88	; 0x58
   b4fdc:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4fde:	f00c facf 	bl	c1580 <_Z19__fetch_global_Wirev>
   b4fe2:	6803      	ldr	r3, [r0, #0]
   b4fe4:	691b      	ldr	r3, [r3, #16]
   b4fe6:	4798      	blx	r3
   b4fe8:	b138      	cbz	r0, b4ffa <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b4fea:	f00c fac9 	bl	c1580 <_Z19__fetch_global_Wirev>
   b4fee:	6803      	ldr	r3, [r0, #0]
   b4ff0:	695b      	ldr	r3, [r3, #20]
   b4ff2:	4798      	blx	r3
   b4ff4:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4ff8:	e7f1      	b.n	b4fde <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b4ffa:	4630      	mov	r0, r6
   b4ffc:	f00e fd08 	bl	c3a10 <atof>
   b5000:	ec51 0b10 	vmov	r0, r1, d0
   b5004:	f00e fc90 	bl	c3928 <__aeabi_d2f>
   b5008:	f8df a260 	ldr.w	sl, [pc, #608]	; b526c <_Z13sensorHandlerv+0x2cc>
   b500c:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b5010:	f00c fab6 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5014:	2301      	movs	r3, #1
   b5016:	2214      	movs	r2, #20
   b5018:	2164      	movs	r1, #100	; 0x64
   b501a:	f00a f9be 	bl	bf39a <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b501e:	f00c faaf 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5022:	6803      	ldr	r3, [r0, #0]
   b5024:	695b      	ldr	r3, [r3, #20]
   b5026:	4798      	blx	r3
        c = 0;
   b5028:	ac1b      	add	r4, sp, #108	; 0x6c
   b502a:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b502c:	f00c faa8 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5030:	6803      	ldr	r3, [r0, #0]
   b5032:	691b      	ldr	r3, [r3, #16]
   b5034:	4798      	blx	r3
   b5036:	b138      	cbz	r0, b5048 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b5038:	f00c faa2 	bl	c1580 <_Z19__fetch_global_Wirev>
   b503c:	6803      	ldr	r3, [r0, #0]
   b503e:	695b      	ldr	r3, [r3, #20]
   b5040:	4798      	blx	r3
   b5042:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5046:	e7f1      	b.n	b502c <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b5048:	4630      	mov	r0, r6
   b504a:	f00e fce1 	bl	c3a10 <atof>
        Wire.requestFrom(COND, 20, 1);
   b504e:	f00c fa97 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5052:	2301      	movs	r3, #1
   b5054:	2214      	movs	r2, #20
   b5056:	2165      	movs	r1, #101	; 0x65
   b5058:	f00a f99f 	bl	bf39a <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b505c:	f00c fa90 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5060:	6803      	ldr	r3, [r0, #0]
   b5062:	695b      	ldr	r3, [r3, #20]
   b5064:	4798      	blx	r3
        c = 0;
   b5066:	ac20      	add	r4, sp, #128	; 0x80
   b5068:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b506a:	f00c fa89 	bl	c1580 <_Z19__fetch_global_Wirev>
   b506e:	6803      	ldr	r3, [r0, #0]
   b5070:	691b      	ldr	r3, [r3, #16]
   b5072:	4798      	blx	r3
   b5074:	b138      	cbz	r0, b5086 <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b5076:	f00c fa83 	bl	c1580 <_Z19__fetch_global_Wirev>
   b507a:	6803      	ldr	r3, [r0, #0]
   b507c:	695b      	ldr	r3, [r3, #20]
   b507e:	4798      	blx	r3
   b5080:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5084:	e7f1      	b.n	b506a <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b5086:	4630      	mov	r0, r6
   b5088:	f00e fcc2 	bl	c3a10 <atof>
   b508c:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b5090:	f00c fa76 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5094:	2301      	movs	r3, #1
   b5096:	2214      	movs	r2, #20
   b5098:	2166      	movs	r1, #102	; 0x66
   b509a:	f00a f97e 	bl	bf39a <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b509e:	f00c fa6f 	bl	c1580 <_Z19__fetch_global_Wirev>
   b50a2:	6803      	ldr	r3, [r0, #0]
   b50a4:	695b      	ldr	r3, [r3, #20]
   b50a6:	4798      	blx	r3
        c = 0;
   b50a8:	af25      	add	r7, sp, #148	; 0x94
   b50aa:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b50ac:	f00c fa68 	bl	c1580 <_Z19__fetch_global_Wirev>
   b50b0:	6803      	ldr	r3, [r0, #0]
   b50b2:	691b      	ldr	r3, [r3, #16]
   b50b4:	4798      	blx	r3
   b50b6:	4604      	mov	r4, r0
   b50b8:	b138      	cbz	r0, b50ca <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b50ba:	f00c fa61 	bl	c1580 <_Z19__fetch_global_Wirev>
   b50be:	6803      	ldr	r3, [r0, #0]
   b50c0:	695b      	ldr	r3, [r3, #20]
   b50c2:	4798      	blx	r3
   b50c4:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b50c8:	e7f0      	b.n	b50ac <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b50ca:	4630      	mov	r0, r6
   b50cc:	f00e fca0 	bl	c3a10 <atof>
        if(logSensors){
   b50d0:	4b5a      	ldr	r3, [pc, #360]	; (b523c <_Z13sensorHandlerv+0x29c>)
        dataWait = false;
   b50d2:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b50d6:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b50d8:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b50dc:	2b00      	cmp	r3, #0
   b50de:	d05c      	beq.n	b519a <_Z13sensorHandlerv+0x1fa>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b50e0:	f00c f81a 	bl	c1118 <_ZN9TimeClass5monthEv>
   b50e4:	9011      	str	r0, [sp, #68]	; 0x44
   b50e6:	f00c f80b 	bl	c1100 <_ZN9TimeClass3dayEv>
   b50ea:	4604      	mov	r4, r0
   b50ec:	f00c f81c 	bl	c1128 <_ZN9TimeClass4yearEv>
   b50f0:	4683      	mov	fp, r0
   b50f2:	f00b ffe1 	bl	c10b8 <_ZN9TimeClass4hourEv>
   b50f6:	9010      	str	r0, [sp, #64]	; 0x40
   b50f8:	f00b ffea 	bl	c10d0 <_ZN9TimeClass6minuteEv>
   b50fc:	900f      	str	r0, [sp, #60]	; 0x3c
   b50fe:	f00b fff3 	bl	c10e8 <_ZN9TimeClass6secondEv>
   b5102:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b5104:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b5106:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b5108:	9004      	str	r0, [sp, #16]
   b510a:	e9cd b201 	strd	fp, r2, [sp, #4]
   b510e:	9103      	str	r1, [sp, #12]
   b5110:	4a4b      	ldr	r2, [pc, #300]	; (b5240 <_Z13sensorHandlerv+0x2a0>)
   b5112:	9400      	str	r4, [sp, #0]
   b5114:	2110      	movs	r1, #16
   b5116:	a812      	add	r0, sp, #72	; 0x48
   b5118:	f008 fbac 	bl	bd874 <snprintf>
   b511c:	4849      	ldr	r0, [pc, #292]	; (b5244 <_Z13sensorHandlerv+0x2a4>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b511e:	7c03      	ldrb	r3, [r0, #16]
   b5120:	b92b      	cbnz	r3, b512e <_Z13sensorHandlerv+0x18e>
   b5122:	4949      	ldr	r1, [pc, #292]	; (b5248 <_Z13sensorHandlerv+0x2a8>)
   b5124:	f244 2202 	movw	r2, #16898	; 0x4202
   b5128:	3010      	adds	r0, #16
   b512a:	f7ff fa3d 	bl	b45a8 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b512e:	4649      	mov	r1, r9
   b5130:	4640      	mov	r0, r8
   b5132:	f00e fbf9 	bl	c3928 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b5136:	f00e f8a7 	bl	c3288 <__aeabi_f2d>
   b513a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b513e:	4b43      	ldr	r3, [pc, #268]	; (b524c <_Z13sensorHandlerv+0x2ac>)
   b5140:	6818      	ldr	r0, [r3, #0]
   b5142:	f00e f8a1 	bl	c3288 <__aeabi_f2d>
   b5146:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b514a:	4b41      	ldr	r3, [pc, #260]	; (b5250 <_Z13sensorHandlerv+0x2b0>)
   b514c:	6818      	ldr	r0, [r3, #0]
   b514e:	f00e f89b 	bl	c3288 <__aeabi_f2d>
   b5152:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5156:	f8da 0000 	ldr.w	r0, [sl]
   b515a:	f00e f895 	bl	c3288 <__aeabi_f2d>
   b515e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b5162:	4639      	mov	r1, r7
   b5164:	4630      	mov	r0, r6
   b5166:	f00e fbdf 	bl	c3928 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b516a:	f00e f88d 	bl	c3288 <__aeabi_f2d>
   b516e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5172:	4b38      	ldr	r3, [pc, #224]	; (b5254 <_Z13sensorHandlerv+0x2b4>)
   b5174:	6818      	ldr	r0, [r3, #0]
   b5176:	f00e f887 	bl	c3288 <__aeabi_f2d>
   b517a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b517e:	4b36      	ldr	r3, [pc, #216]	; (b5258 <_Z13sensorHandlerv+0x2b8>)
   b5180:	6818      	ldr	r0, [r3, #0]
   b5182:	f00e f881 	bl	c3288 <__aeabi_f2d>
   b5186:	aa12      	add	r2, sp, #72	; 0x48
   b5188:	e9cd 0100 	strd	r0, r1, [sp]
   b518c:	4933      	ldr	r1, [pc, #204]	; (b525c <_Z13sensorHandlerv+0x2bc>)
   b518e:	482d      	ldr	r0, [pc, #180]	; (b5244 <_Z13sensorHandlerv+0x2a4>)
   b5190:	f7ff f8e2 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b5194:	4832      	ldr	r0, [pc, #200]	; (b5260 <_Z13sensorHandlerv+0x2c0>)
   b5196:	f001 f9ff 	bl	b6598 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b519a:	4c32      	ldr	r4, [pc, #200]	; (b5264 <_Z13sensorHandlerv+0x2c4>)
   b519c:	f008 f86c 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   b51a0:	6823      	ldr	r3, [r4, #0]
   b51a2:	4283      	cmp	r3, r0
   b51a4:	d244      	bcs.n	b5230 <_Z13sensorHandlerv+0x290>
   b51a6:	f008 f867 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b51aa:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b51ae:	6020      	str	r0, [r4, #0]
   b51b0:	f008 f862 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b51b4:	f200 3039 	addw	r0, r0, #825	; 0x339
   b51b8:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b51ba:	f00c f9e1 	bl	c1580 <_Z19__fetch_global_Wirev>
   b51be:	2163      	movs	r1, #99	; 0x63
   b51c0:	f00a f904 	bl	bf3cc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b51c4:	f00c f9dc 	bl	c1580 <_Z19__fetch_global_Wirev>
   b51c8:	2172      	movs	r1, #114	; 0x72
   b51ca:	f7ff f835 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b51ce:	f00c f9d7 	bl	c1580 <_Z19__fetch_global_Wirev>
   b51d2:	f00a f902 	bl	bf3da <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b51d6:	f00c f9d3 	bl	c1580 <_Z19__fetch_global_Wirev>
   b51da:	2164      	movs	r1, #100	; 0x64
   b51dc:	f00a f8f6 	bl	bf3cc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b51e0:	f00c f9ce 	bl	c1580 <_Z19__fetch_global_Wirev>
   b51e4:	2172      	movs	r1, #114	; 0x72
   b51e6:	f7ff f827 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b51ea:	f00c f9c9 	bl	c1580 <_Z19__fetch_global_Wirev>
   b51ee:	f00a f8f4 	bl	bf3da <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b51f2:	f00c f9c5 	bl	c1580 <_Z19__fetch_global_Wirev>
   b51f6:	2165      	movs	r1, #101	; 0x65
   b51f8:	f00a f8e8 	bl	bf3cc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b51fc:	f00c f9c0 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5200:	2172      	movs	r1, #114	; 0x72
   b5202:	f7ff f819 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5206:	f00c f9bb 	bl	c1580 <_Z19__fetch_global_Wirev>
   b520a:	f00a f8e6 	bl	bf3da <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b520e:	f00c f9b7 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5212:	2166      	movs	r1, #102	; 0x66
   b5214:	f00a f8da 	bl	bf3cc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5218:	f00c f9b2 	bl	c1580 <_Z19__fetch_global_Wirev>
   b521c:	2172      	movs	r1, #114	; 0x72
   b521e:	f7ff f80b 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5222:	f00c f9ad 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5226:	f00a f8d8 	bl	bf3da <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b522a:	4b0f      	ldr	r3, [pc, #60]	; (b5268 <_Z13sensorHandlerv+0x2c8>)
   b522c:	2201      	movs	r2, #1
   b522e:	701a      	strb	r2, [r3, #0]
}
   b5230:	b02b      	add	sp, #172	; 0xac
   b5232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5236:	bf00      	nop
   b5238:	2003ddec 	.word	0x2003ddec
   b523c:	2003df0d 	.word	0x2003df0d
   b5240:	000c5eeb 	.word	0x000c5eeb
   b5244:	2003df34 	.word	0x2003df34
   b5248:	2003ddf2 	.word	0x2003ddf2
   b524c:	2003e580 	.word	0x2003e580
   b5250:	2003e57c 	.word	0x2003e57c
   b5254:	2003df10 	.word	0x2003df10
   b5258:	2003de38 	.word	0x2003de38
   b525c:	000c5f04 	.word	0x000c5f04
   b5260:	2003df44 	.word	0x2003df44
   b5264:	2003e588 	.word	0x2003e588
   b5268:	2003ddf0 	.word	0x2003ddf0
   b526c:	2003e584 	.word	0x2003e584

000b5270 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5274:	4e3c      	ldr	r6, [pc, #240]	; (b5368 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5276:	f8df 8104 	ldr.w	r8, [pc, #260]	; b537c <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b527a:	f8df 9104 	ldr.w	r9, [pc, #260]	; b5380 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b527e:	b089      	sub	sp, #36	; 0x24
   b5280:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b5282:	f00c f9bd 	bl	c1600 <_Z22__fetch_global_Serial1v>
   b5286:	6803      	ldr	r3, [r0, #0]
   b5288:	691b      	ldr	r3, [r3, #16]
   b528a:	4798      	blx	r3
   b528c:	2800      	cmp	r0, #0
   b528e:	d066      	beq.n	b535e <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b5290:	f00c f9b6 	bl	c1600 <_Z22__fetch_global_Serial1v>
   b5294:	220a      	movs	r2, #10
   b5296:	4601      	mov	r1, r0
   b5298:	4638      	mov	r0, r7
   b529a:	f00b fd85 	bl	c0da8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b529e:	68bb      	ldr	r3, [r7, #8]
   b52a0:	3307      	adds	r3, #7
   b52a2:	f023 0307 	bic.w	r3, r3, #7
    }
   b52a6:	466d      	mov	r5, sp
        char buffer[data.length()];
   b52a8:	ebad 0d03 	sub.w	sp, sp, r3
   b52ac:	46ea      	mov	sl, sp
   b52ae:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b52b0:	68b9      	ldr	r1, [r7, #8]
   b52b2:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b52b6:	458b      	cmp	fp, r1
   b52b8:	f103 0401 	add.w	r4, r3, #1
   b52bc:	d207      	bcs.n	b52ce <_Z11XBeeHandlerv+0x5e>
   b52be:	4659      	mov	r1, fp
   b52c0:	4638      	mov	r0, r7
   b52c2:	f00b fe69 	bl	c0f98 <_ZNK6String6charAtEj>
   b52c6:	4623      	mov	r3, r4
   b52c8:	f80a 000b 	strb.w	r0, [sl, fp]
   b52cc:	e7f0      	b.n	b52b0 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b52ce:	2901      	cmp	r1, #1
   b52d0:	d90a      	bls.n	b52e8 <_Z11XBeeHandlerv+0x78>
   b52d2:	3901      	subs	r1, #1
   b52d4:	4638      	mov	r0, r7
   b52d6:	f00b fe5f 	bl	c0f98 <_ZNK6String6charAtEj>
   b52da:	280d      	cmp	r0, #13
   b52dc:	bf01      	itttt	eq
   b52de:	68bb      	ldreq	r3, [r7, #8]
   b52e0:	4453      	addeq	r3, sl
   b52e2:	2200      	moveq	r2, #0
   b52e4:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b52e8:	2201      	movs	r2, #1
   b52ea:	2102      	movs	r1, #2
   b52ec:	4650      	mov	r0, sl
   b52ee:	f7ff fa0d 	bl	b470c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b52f2:	f00b ffed 	bl	c12d0 <_Z16_fetch_usbserialv>
   b52f6:	4631      	mov	r1, r6
   b52f8:	f00b fb41 	bl	c097e <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b52fc:	f00b ffe8 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5300:	6839      	ldr	r1, [r7, #0]
   b5302:	f00b fb3c 	bl	c097e <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5306:	f89a 3000 	ldrb.w	r3, [sl]
   b530a:	3b42      	subs	r3, #66	; 0x42
   b530c:	2b01      	cmp	r3, #1
   b530e:	d803      	bhi.n	b5318 <_Z11XBeeHandlerv+0xa8>
   b5310:	f007 ffb2 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   b5314:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5318:	f899 3000 	ldrb.w	r3, [r9]
   b531c:	b1d3      	cbz	r3, b5354 <_Z11XBeeHandlerv+0xe4>
   b531e:	4813      	ldr	r0, [pc, #76]	; (b536c <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5320:	7c03      	ldrb	r3, [r0, #16]
   b5322:	b92b      	cbnz	r3, b5330 <_Z11XBeeHandlerv+0xc0>
   b5324:	4912      	ldr	r1, [pc, #72]	; (b5370 <_Z11XBeeHandlerv+0x100>)
   b5326:	f244 2202 	movw	r2, #16898	; 0x4202
   b532a:	3010      	adds	r0, #16
   b532c:	f7ff f93c 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5330:	4639      	mov	r1, r7
   b5332:	f107 0010 	add.w	r0, r7, #16
   b5336:	f00b fde5 	bl	c0f04 <_ZN6StringC1ERKS_>
   b533a:	490e      	ldr	r1, [pc, #56]	; (b5374 <_Z11XBeeHandlerv+0x104>)
   b533c:	480b      	ldr	r0, [pc, #44]	; (b536c <_Z11XBeeHandlerv+0xfc>)
   b533e:	f107 0210 	add.w	r2, r7, #16
   b5342:	f7ff f809 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b5346:	f107 0010 	add.w	r0, r7, #16
   b534a:	f00b fd45 	bl	c0dd8 <_ZN6StringD1Ev>
            logFile.close();
   b534e:	480a      	ldr	r0, [pc, #40]	; (b5378 <_Z11XBeeHandlerv+0x108>)
   b5350:	f001 f922 	bl	b6598 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5354:	4638      	mov	r0, r7
   b5356:	f00b fd3f 	bl	c0dd8 <_ZN6StringD1Ev>
   b535a:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b535c:	e791      	b.n	b5282 <_Z11XBeeHandlerv+0x12>
}
   b535e:	3724      	adds	r7, #36	; 0x24
   b5360:	46bd      	mov	sp, r7
   b5362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5366:	bf00      	nop
   b5368:	000c5f1c 	.word	0x000c5f1c
   b536c:	2003deb4 	.word	0x2003deb4
   b5370:	2003de10 	.word	0x2003de10
   b5374:	000c5f2e 	.word	0x000c5f2e
   b5378:	2003dec4 	.word	0x2003dec4
   b537c:	2003ddc8 	.word	0x2003ddc8
   b5380:	2003df0c 	.word	0x2003df0c

000b5384 <_Z13dataOffloaderv>:
void dataOffloader(){
   b5384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5388:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b538a:	f00b ffa1 	bl	c12d0 <_Z16_fetch_usbserialv>
   b538e:	4961      	ldr	r1, [pc, #388]	; (b5514 <_Z13dataOffloaderv+0x190>)
   b5390:	f00b faf5 	bl	c097e <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b5394:	4960      	ldr	r1, [pc, #384]	; (b5518 <_Z13dataOffloaderv+0x194>)
   b5396:	4861      	ldr	r0, [pc, #388]	; (b551c <_Z13dataOffloaderv+0x198>)
   b5398:	2200      	movs	r2, #0
   b539a:	f7ff f905 	bl	b45a8 <_ZN7FatFile4openEPKci>
   b539e:	b948      	cbnz	r0, b53b4 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b53a0:	4b5f      	ldr	r3, [pc, #380]	; (b5520 <_Z13dataOffloaderv+0x19c>)
   b53a2:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b53a4:	f00b ff94 	bl	c12d0 <_Z16_fetch_usbserialv>
   b53a8:	495e      	ldr	r1, [pc, #376]	; (b5524 <_Z13dataOffloaderv+0x1a0>)
}
   b53aa:	b02d      	add	sp, #180	; 0xb4
   b53ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b53b0:	f00b bae5 	b.w	c097e <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b53b4:	f00b ff8c 	bl	c12d0 <_Z16_fetch_usbserialv>
   b53b8:	495b      	ldr	r1, [pc, #364]	; (b5528 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b53ba:	4d5c      	ldr	r5, [pc, #368]	; (b552c <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b53bc:	f00b fadf 	bl	c097e <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b53c0:	f008 fe08 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53c4:	f008 fe64 	bl	be090 <_ZNK8particle14BleLocalDevice9connectedEv>
   b53c8:	4604      	mov	r4, r0
   b53ca:	b948      	cbnz	r0, b53e0 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b53cc:	f008 fe02 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53d0:	4622      	mov	r2, r4
   b53d2:	4629      	mov	r1, r5
   b53d4:	f008 feaf 	bl	be136 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b53d8:	200a      	movs	r0, #10
   b53da:	f008 fa97 	bl	bd90c <delay>
    while(!BLE.connected()){
   b53de:	e7ef      	b.n	b53c0 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b53e0:	f00b ff76 	bl	c12d0 <_Z16_fetch_usbserialv>
   b53e4:	4952      	ldr	r1, [pc, #328]	; (b5530 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b53e6:	4f4d      	ldr	r7, [pc, #308]	; (b551c <_Z13dataOffloaderv+0x198>)
   b53e8:	4d52      	ldr	r5, [pc, #328]	; (b5534 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b53ea:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5558 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b53ee:	f00b fac6 	bl	c097e <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b53f2:	2200      	movs	r2, #0
   b53f4:	4639      	mov	r1, r7
   b53f6:	4628      	mov	r0, r5
   b53f8:	f001 f85b 	bl	b64b2 <_ZN7FatFile8openNextEPS_i>
   b53fc:	b1f8      	cbz	r0, b543e <_Z13dataOffloaderv+0xba>
   b53fe:	f008 fde9 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5402:	f008 fe45 	bl	be090 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5406:	b1d0      	cbz	r0, b543e <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5408:	221e      	movs	r2, #30
   b540a:	a901      	add	r1, sp, #4
   b540c:	4628      	mov	r0, r5
   b540e:	f001 fa17 	bl	b6840 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5412:	f00b ff5d 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5416:	4641      	mov	r1, r8
   b5418:	aa01      	add	r2, sp, #4
   b541a:	f7fe ff9d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b541e:	a801      	add	r0, sp, #4
   b5420:	f00e fbc9 	bl	c3bb6 <strlen>
   b5424:	ab01      	add	r3, sp, #4
   b5426:	3804      	subs	r0, #4
   b5428:	4418      	add	r0, r3
   b542a:	f00e fbcd 	bl	c3bc8 <strlwr>
   b542e:	4942      	ldr	r1, [pc, #264]	; (b5538 <_Z13dataOffloaderv+0x1b4>)
   b5430:	f00e fc23 	bl	c3c7a <strstr>
   b5434:	b9d8      	cbnz	r0, b546e <_Z13dataOffloaderv+0xea>
            myFile.close();
   b5436:	4628      	mov	r0, r5
   b5438:	f001 f8ae 	bl	b6598 <_ZN7FatFile5closeEv>
   b543c:	e7d9      	b.n	b53f2 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b543e:	4837      	ldr	r0, [pc, #220]	; (b551c <_Z13dataOffloaderv+0x198>)
   b5440:	f001 f8aa 	bl	b6598 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5444:	2226      	movs	r2, #38	; 0x26
   b5446:	2100      	movs	r1, #0
   b5448:	a809      	add	r0, sp, #36	; 0x24
   b544a:	f00e fb29 	bl	c3aa0 <memset>
    strcpy(fileCode,"filedone");
   b544e:	493b      	ldr	r1, [pc, #236]	; (b553c <_Z13dataOffloaderv+0x1b8>)
   b5450:	a809      	add	r0, sp, #36	; 0x24
   b5452:	f00e fb8b 	bl	c3b6c <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5456:	2300      	movs	r3, #0
   b5458:	2226      	movs	r2, #38	; 0x26
   b545a:	a909      	add	r1, sp, #36	; 0x24
   b545c:	4838      	ldr	r0, [pc, #224]	; (b5540 <_Z13dataOffloaderv+0x1bc>)
   b545e:	f008 fca9 	bl	bddb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5462:	4b2f      	ldr	r3, [pc, #188]	; (b5520 <_Z13dataOffloaderv+0x19c>)
   b5464:	2200      	movs	r2, #0
   b5466:	701a      	strb	r2, [r3, #0]
}
   b5468:	b02d      	add	sp, #180	; 0xb4
   b546a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b546e:	2226      	movs	r2, #38	; 0x26
   b5470:	2100      	movs	r1, #0
   b5472:	a809      	add	r0, sp, #36	; 0x24
   b5474:	f00e fb14 	bl	c3aa0 <memset>
            strcpy(fileCode,"filename");
   b5478:	4932      	ldr	r1, [pc, #200]	; (b5544 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b547a:	4e33      	ldr	r6, [pc, #204]	; (b5548 <_Z13dataOffloaderv+0x1c4>)
   b547c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5540 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b5480:	a809      	add	r0, sp, #36	; 0x24
   b5482:	f00e fb73 	bl	c3b6c <strcpy>
            strcat(fileCode,namebuf);
   b5486:	a901      	add	r1, sp, #4
   b5488:	a809      	add	r0, sp, #36	; 0x24
   b548a:	f00e fb3f 	bl	c3b0c <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b548e:	f00b ff1f 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5492:	492e      	ldr	r1, [pc, #184]	; (b554c <_Z13dataOffloaderv+0x1c8>)
   b5494:	aa09      	add	r2, sp, #36	; 0x24
   b5496:	f7fe ff5f 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b549a:	2300      	movs	r3, #0
   b549c:	2226      	movs	r2, #38	; 0x26
   b549e:	a909      	add	r1, sp, #36	; 0x24
   b54a0:	4827      	ldr	r0, [pc, #156]	; (b5540 <_Z13dataOffloaderv+0x1bc>)
   b54a2:	f008 fc87 	bl	bddb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b54a6:	f00b ff13 	bl	c12d0 <_Z16_fetch_usbserialv>
   b54aa:	4929      	ldr	r1, [pc, #164]	; (b5550 <_Z13dataOffloaderv+0x1cc>)
   b54ac:	aa01      	add	r2, sp, #4
   b54ae:	f7fe ff53 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b54b2:	2096      	movs	r0, #150	; 0x96
   b54b4:	f008 fa2a 	bl	bd90c <delay>
            noInterrupts();
   b54b8:	f009 ff92 	bl	bf3e0 <_Z12noInterruptsv>
            while(myFile.available()){
   b54bc:	4630      	mov	r0, r6
   b54be:	f7fe fe0e 	bl	b40de <_ZN4File9availableEv>
   b54c2:	4604      	mov	r4, r0
   b54c4:	b188      	cbz	r0, b54ea <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b54c6:	2264      	movs	r2, #100	; 0x64
   b54c8:	2100      	movs	r1, #0
   b54ca:	a813      	add	r0, sp, #76	; 0x4c
   b54cc:	f00e fae8 	bl	c3aa0 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b54d0:	aa13      	add	r2, sp, #76	; 0x4c
   b54d2:	2364      	movs	r3, #100	; 0x64
   b54d4:	210d      	movs	r1, #13
   b54d6:	4630      	mov	r0, r6
   b54d8:	f00b fc4e 	bl	c0d78 <_ZN6Stream14readBytesUntilEcPcj>
   b54dc:	2300      	movs	r3, #0
   b54de:	2264      	movs	r2, #100	; 0x64
   b54e0:	a913      	add	r1, sp, #76	; 0x4c
   b54e2:	4648      	mov	r0, r9
   b54e4:	f008 fc66 	bl	bddb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b54e8:	e7e8      	b.n	b54bc <_Z13dataOffloaderv+0x138>
            interrupts();
   b54ea:	f009 ff7b 	bl	bf3e4 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b54ee:	2226      	movs	r2, #38	; 0x26
   b54f0:	4621      	mov	r1, r4
   b54f2:	a809      	add	r0, sp, #36	; 0x24
   b54f4:	f00e fad4 	bl	c3aa0 <memset>
            strcpy(fileCode,"filecomp");
   b54f8:	4916      	ldr	r1, [pc, #88]	; (b5554 <_Z13dataOffloaderv+0x1d0>)
   b54fa:	a809      	add	r0, sp, #36	; 0x24
   b54fc:	f00e fb36 	bl	c3b6c <strcpy>
   b5500:	4623      	mov	r3, r4
   b5502:	2226      	movs	r2, #38	; 0x26
   b5504:	a909      	add	r1, sp, #36	; 0x24
   b5506:	480e      	ldr	r0, [pc, #56]	; (b5540 <_Z13dataOffloaderv+0x1bc>)
   b5508:	f008 fc54 	bl	bddb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b550c:	2096      	movs	r0, #150	; 0x96
   b550e:	f008 f9fd 	bl	bd90c <delay>
   b5512:	e790      	b.n	b5436 <_Z13dataOffloaderv+0xb2>
   b5514:	000c5f4f 	.word	0x000c5f4f
   b5518:	000c5f6c 	.word	0x000c5f6c
   b551c:	2003de90 	.word	0x2003de90
   b5520:	2003e0e8 	.word	0x2003e0e8
   b5524:	000c5f6e 	.word	0x000c5f6e
   b5528:	000c5f9b 	.word	0x000c5f9b
   b552c:	2003ddd0 	.word	0x2003ddd0
   b5530:	000c5fbb 	.word	0x000c5fbb
   b5534:	2003df44 	.word	0x2003df44
   b5538:	000c5ff9 	.word	0x000c5ff9
   b553c:	000c5ffe 	.word	0x000c5ffe
   b5540:	2003e0e0 	.word	0x2003e0e0
   b5544:	000c6007 	.word	0x000c6007
   b5548:	2003df34 	.word	0x2003df34
   b554c:	000c6010 	.word	0x000c6010
   b5550:	000c6023 	.word	0x000c6023
   b5554:	000c604b 	.word	0x000c604b
   b5558:	000c5fd0 	.word	0x000c5fd0

000b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b555c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b555e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5560:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5562:	b17c      	cbz	r4, b5584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5564:	6863      	ldr	r3, [r4, #4]
   b5566:	3b01      	subs	r3, #1
   b5568:	6063      	str	r3, [r4, #4]
   b556a:	b95b      	cbnz	r3, b5584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b556c:	6823      	ldr	r3, [r4, #0]
   b556e:	4620      	mov	r0, r4
   b5570:	689b      	ldr	r3, [r3, #8]
   b5572:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5574:	68a3      	ldr	r3, [r4, #8]
   b5576:	3b01      	subs	r3, #1
   b5578:	60a3      	str	r3, [r4, #8]
   b557a:	b91b      	cbnz	r3, b5584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b557c:	6823      	ldr	r3, [r4, #0]
   b557e:	4620      	mov	r0, r4
   b5580:	68db      	ldr	r3, [r3, #12]
   b5582:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5584:	4628      	mov	r0, r5
   b5586:	bd38      	pop	{r3, r4, r5, pc}

000b5588 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b558c:	b084      	sub	sp, #16
   b558e:	af02      	add	r7, sp, #8
   b5590:	4680      	mov	r8, r0
   b5592:	4691      	mov	r9, r2
   b5594:	461e      	mov	r6, r3
   b5596:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5598:	f00e fb0d 	bl	c3bb6 <strlen>
   b559c:	3009      	adds	r0, #9
   b559e:	f020 0107 	bic.w	r1, r0, #7
   b55a2:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55a6:	4640      	mov	r0, r8
   b55a8:	f00e fb05 	bl	c3bb6 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b55ac:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55b0:	4925      	ldr	r1, [pc, #148]	; (b5648 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b55b2:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55b4:	4603      	mov	r3, r0
   b55b6:	4642      	mov	r2, r8
   b55b8:	4620      	mov	r0, r4
   b55ba:	f008 f94b 	bl	bd854 <sprintf>
    if(sendLTE || sendMode == 4){
   b55be:	f1ba 0f00 	cmp.w	sl, #0
   b55c2:	d101      	bne.n	b55c8 <_Z8sendDataPKchbbb+0x40>
   b55c4:	2d04      	cmp	r5, #4
   b55c6:	d10c      	bne.n	b55e2 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b55c8:	4b20      	ldr	r3, [pc, #128]	; (b564c <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b55ca:	4921      	ldr	r1, [pc, #132]	; (b5650 <_Z8sendDataPKchbbb+0xc8>)
   b55cc:	781b      	ldrb	r3, [r3, #0]
   b55ce:	f88d 3000 	strb.w	r3, [sp]
   b55d2:	4638      	mov	r0, r7
   b55d4:	233c      	movs	r3, #60	; 0x3c
   b55d6:	4622      	mov	r2, r4
   b55d8:	f009 fcd6 	bl	bef88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b55dc:	1d38      	adds	r0, r7, #4
   b55de:	f7ff ffbd 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b55e2:	f1b9 0f00 	cmp.w	r9, #0
   b55e6:	d101      	bne.n	b55ec <_Z8sendDataPKchbbb+0x64>
   b55e8:	2d01      	cmp	r5, #1
   b55ea:	d121      	bne.n	b5630 <_Z8sendDataPKchbbb+0xa8>
   b55ec:	f008 fcf2 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55f0:	f008 fd4e 	bl	be090 <_ZNK8particle14BleLocalDevice9connectedEv>
   b55f4:	b1e0      	cbz	r0, b5630 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b55f6:	4620      	mov	r0, r4
   b55f8:	f00e fadd 	bl	c3bb6 <strlen>
   b55fc:	3007      	adds	r0, #7
   b55fe:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5602:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5604:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5608:	4620      	mov	r0, r4
   b560a:	f00e fad4 	bl	c3bb6 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b560e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5612:	4602      	mov	r2, r0
   b5614:	4621      	mov	r1, r4
   b5616:	4648      	mov	r0, r9
   b5618:	f00e fa1a 	bl	c3a50 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b561c:	4620      	mov	r0, r4
   b561e:	f00e faca 	bl	c3bb6 <strlen>
   b5622:	2300      	movs	r3, #0
   b5624:	4602      	mov	r2, r0
   b5626:	4649      	mov	r1, r9
   b5628:	480a      	ldr	r0, [pc, #40]	; (b5654 <_Z8sendDataPKchbbb+0xcc>)
   b562a:	f008 fbc3 	bl	bddb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b562e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5630:	b90e      	cbnz	r6, b5636 <_Z8sendDataPKchbbb+0xae>
   b5632:	2d02      	cmp	r5, #2
   b5634:	d104      	bne.n	b5640 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5636:	f00b ffe3 	bl	c1600 <_Z22__fetch_global_Serial1v>
   b563a:	4621      	mov	r1, r4
   b563c:	f00b f99f 	bl	c097e <_ZN5Print7printlnEPKc>
}
   b5640:	3708      	adds	r7, #8
   b5642:	46bd      	mov	sp, r7
   b5644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5648:	000c6054 	.word	0x000c6054
   b564c:	2003ddcc 	.word	0x2003ddcc
   b5650:	000c605b 	.word	0x000c605b
   b5654:	2003e5e8 	.word	0x2003e5e8

000b5658 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5658:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b565a:	4d27      	ldr	r5, [pc, #156]	; (b56f8 <_Z16sendResponseDatav+0xa0>)
   b565c:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b565e:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5660:	2b00      	cmp	r3, #0
   b5662:	d046      	beq.n	b56f2 <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b5664:	2241      	movs	r2, #65	; 0x41
   b5666:	2100      	movs	r1, #0
   b5668:	a80b      	add	r0, sp, #44	; 0x2c
   b566a:	f00e fa19 	bl	c3aa0 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b566e:	4b23      	ldr	r3, [pc, #140]	; (b56fc <_Z16sendResponseDatav+0xa4>)
   b5670:	9308      	str	r3, [sp, #32]
   b5672:	4b23      	ldr	r3, [pc, #140]	; (b5700 <_Z16sendResponseDatav+0xa8>)
   b5674:	eddf 6a23 	vldr	s13, [pc, #140]	; b5704 <_Z16sendResponseDatav+0xac>
   b5678:	ed93 7a00 	vldr	s14, [r3]
   b567c:	4b22      	ldr	r3, [pc, #136]	; (b5708 <_Z16sendResponseDatav+0xb0>)
   b567e:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b5682:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b5684:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5688:	ed8d 7a07 	vstr	s14, [sp, #28]
   b568c:	ed93 7a00 	vldr	s14, [r3]
   b5690:	4b1e      	ldr	r3, [pc, #120]	; (b570c <_Z16sendResponseDatav+0xb4>)
   b5692:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5696:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b569a:	ed8d 7a06 	vstr	s14, [sp, #24]
   b569e:	ed93 7a00 	vldr	s14, [r3]
   b56a2:	4b1b      	ldr	r3, [pc, #108]	; (b5710 <_Z16sendResponseDatav+0xb8>)
   b56a4:	ee27 7a26 	vmul.f32	s14, s14, s13
   b56a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b56ac:	ed8d 7a05 	vstr	s14, [sp, #20]
   b56b0:	edd3 7a00 	vldr	s15, [r3]
   b56b4:	4b17      	ldr	r3, [pc, #92]	; (b5714 <_Z16sendResponseDatav+0xbc>)
   b56b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b56ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b56be:	edcd 7a04 	vstr	s15, [sp, #16]
   b56c2:	6818      	ldr	r0, [r3, #0]
   b56c4:	f00d fde0 	bl	c3288 <__aeabi_f2d>
   b56c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b56cc:	4b12      	ldr	r3, [pc, #72]	; (b5718 <_Z16sendResponseDatav+0xc0>)
   b56ce:	6818      	ldr	r0, [r3, #0]
   b56d0:	f00d fdda 	bl	c3288 <__aeabi_f2d>
   b56d4:	2201      	movs	r2, #1
   b56d6:	e9cd 0100 	strd	r0, r1, [sp]
   b56da:	4910      	ldr	r1, [pc, #64]	; (b571c <_Z16sendResponseDatav+0xc4>)
   b56dc:	a80b      	add	r0, sp, #44	; 0x2c
   b56de:	f008 f8b9 	bl	bd854 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b56e2:	7829      	ldrb	r1, [r5, #0]
   b56e4:	9400      	str	r4, [sp, #0]
   b56e6:	4623      	mov	r3, r4
   b56e8:	4622      	mov	r2, r4
   b56ea:	a80b      	add	r0, sp, #44	; 0x2c
   b56ec:	f7ff ff4c 	bl	b5588 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b56f0:	702c      	strb	r4, [r5, #0]
}
   b56f2:	b01d      	add	sp, #116	; 0x74
   b56f4:	bd30      	pop	{r4, r5, pc}
   b56f6:	bf00      	nop
   b56f8:	2003e0e9 	.word	0x2003e0e9
   b56fc:	00010d88 	.word	0x00010d88
   b5700:	2003e580 	.word	0x2003e580
   b5704:	447a0000 	.word	0x447a0000
   b5708:	2003e578 	.word	0x2003e578
   b570c:	2003e584 	.word	0x2003e584
   b5710:	2003e57c 	.word	0x2003e57c
   b5714:	2003df10 	.word	0x2003df10
   b5718:	2003de38 	.word	0x2003de38
   b571c:	000c6063 	.word	0x000c6063

000b5720 <_Z12statusUpdatev>:
void statusUpdate(){
   b5720:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b5722:	4e2c      	ldr	r6, [pc, #176]	; (b57d4 <_Z12statusUpdatev+0xb4>)
   b5724:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5726:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5728:	2b00      	cmp	r3, #0
   b572a:	d049      	beq.n	b57c0 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b572c:	4a2a      	ldr	r2, [pc, #168]	; (b57d8 <_Z12statusUpdatev+0xb8>)
   b572e:	4b2b      	ldr	r3, [pc, #172]	; (b57dc <_Z12statusUpdatev+0xbc>)
   b5730:	6810      	ldr	r0, [r2, #0]
   b5732:	781b      	ldrb	r3, [r3, #0]
   b5734:	9307      	str	r3, [sp, #28]
   b5736:	f00d fda7 	bl	c3288 <__aeabi_f2d>
   b573a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b573e:	4a28      	ldr	r2, [pc, #160]	; (b57e0 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b5740:	4c28      	ldr	r4, [pc, #160]	; (b57e4 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5742:	6810      	ldr	r0, [r2, #0]
   b5744:	f00d fda0 	bl	c3288 <__aeabi_f2d>
   b5748:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b574c:	4a26      	ldr	r2, [pc, #152]	; (b57e8 <_Z12statusUpdatev+0xc8>)
   b574e:	9b07      	ldr	r3, [sp, #28]
   b5750:	7812      	ldrb	r2, [r2, #0]
   b5752:	4926      	ldr	r1, [pc, #152]	; (b57ec <_Z12statusUpdatev+0xcc>)
   b5754:	9200      	str	r2, [sp, #0]
   b5756:	a809      	add	r0, sp, #36	; 0x24
   b5758:	2201      	movs	r2, #1
   b575a:	f008 f87b 	bl	bd854 <sprintf>
        Serial.println(updateStr);
   b575e:	f00b fdb7 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5762:	a909      	add	r1, sp, #36	; 0x24
   b5764:	f00b f90b 	bl	c097e <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5768:	f00b fdb2 	bl	c12d0 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b576c:	8821      	ldrh	r1, [r4, #0]
   b576e:	4605      	mov	r5, r0
   b5770:	220a      	movs	r2, #10
   b5772:	f00b f910 	bl	c0996 <_ZN5Print11printNumberEmh>
        n += println();
   b5776:	4628      	mov	r0, r5
   b5778:	f00b f8f5 	bl	c0966 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b577c:	4b1c      	ldr	r3, [pc, #112]	; (b57f0 <_Z12statusUpdatev+0xd0>)
   b577e:	781b      	ldrb	r3, [r3, #0]
   b5780:	bb03      	cbnz	r3, b57c4 <_Z12statusUpdatev+0xa4>
   b5782:	4b1c      	ldr	r3, [pc, #112]	; (b57f4 <_Z12statusUpdatev+0xd4>)
   b5784:	781b      	ldrb	r3, [r3, #0]
   b5786:	b9eb      	cbnz	r3, b57c4 <_Z12statusUpdatev+0xa4>
   b5788:	8823      	ldrh	r3, [r4, #0]
   b578a:	b1f3      	cbz	r3, b57ca <_Z12statusUpdatev+0xaa>
   b578c:	f013 0303 	ands.w	r3, r3, #3
   b5790:	d11b      	bne.n	b57ca <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b5792:	2201      	movs	r2, #1
   b5794:	9200      	str	r2, [sp, #0]
   b5796:	4619      	mov	r1, r3
   b5798:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b579a:	a809      	add	r0, sp, #36	; 0x24
   b579c:	f7ff fef4 	bl	b5588 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b57a0:	8823      	ldrh	r3, [r4, #0]
   b57a2:	b10b      	cbz	r3, b57a8 <_Z12statusUpdatev+0x88>
   b57a4:	3b01      	subs	r3, #1
   b57a6:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b57a8:	2400      	movs	r4, #0
        delay(100);
   b57aa:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b57ac:	7034      	strb	r4, [r6, #0]
        delay(100);
   b57ae:	f008 f8ad 	bl	bd90c <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b57b2:	4811      	ldr	r0, [pc, #68]	; (b57f8 <_Z12statusUpdatev+0xd8>)
   b57b4:	9400      	str	r4, [sp, #0]
   b57b6:	4623      	mov	r3, r4
   b57b8:	2201      	movs	r2, #1
   b57ba:	4621      	mov	r1, r4
   b57bc:	f7ff fee4 	bl	b5588 <_Z8sendDataPKchbbb>
}
   b57c0:	b010      	add	sp, #64	; 0x40
   b57c2:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b57c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b57c8:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b57ca:	2100      	movs	r1, #0
   b57cc:	2301      	movs	r3, #1
   b57ce:	9100      	str	r1, [sp, #0]
   b57d0:	461a      	mov	r2, r3
   b57d2:	e7e2      	b.n	b579a <_Z12statusUpdatev+0x7a>
   b57d4:	2003e5d4 	.word	0x2003e5d4
   b57d8:	2003df10 	.word	0x2003df10
   b57dc:	2003dde0 	.word	0x2003dde0
   b57e0:	2003de38 	.word	0x2003de38
   b57e4:	2003ddb6 	.word	0x2003ddb6
   b57e8:	2003e5b4 	.word	0x2003e5b4
   b57ec:	000c6087 	.word	0x000c6087
   b57f0:	2003dd84 	.word	0x2003dd84
   b57f4:	2003ddc4 	.word	0x2003ddc4
   b57f8:	000c60a0 	.word	0x000c60a0

000b57fc <loop>:
void loop(){
   b57fc:	b508      	push	{r3, lr}
    if(getPositionData()){
   b57fe:	f7ff fa63 	bl	b4cc8 <_Z15getPositionDatav>
    readPowerSys();
   b5802:	f7ff f9d9 	bl	b4bb8 <_Z12readPowerSysv>
    sensorHandler();
   b5806:	f7ff fbcb 	bl	b4fa0 <_Z13sensorHandlerv>
    XBeeHandler();
   b580a:	f7ff fd31 	bl	b5270 <_Z11XBeeHandlerv>
    statusUpdate();
   b580e:	f7ff ff87 	bl	b5720 <_Z12statusUpdatev>
    updateMotors();
   b5812:	f7ff fba9 	bl	b4f68 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5816:	4b06      	ldr	r3, [pc, #24]	; (b5830 <loop+0x34>)
   b5818:	781b      	ldrb	r3, [r3, #0]
   b581a:	b10b      	cbz	r3, b5820 <loop+0x24>
   b581c:	f7ff fdb2 	bl	b5384 <_Z13dataOffloaderv>
    sendResponseData();
   b5820:	f7ff ff1a 	bl	b5658 <_Z16sendResponseDatav>
}
   b5824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(500);
   b5828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b582c:	f008 b86e 	b.w	bd90c <delay>
   b5830:	2003e0e8 	.word	0x2003e0e8

000b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5834:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5836:	e9d0 5300 	ldrd	r5, r3, [r0]
   b583a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b583c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b583e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5842:	42ae      	cmp	r6, r5
   b5844:	d004      	beq.n	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5846:	4628      	mov	r0, r5
   b5848:	f00b fac6 	bl	c0dd8 <_ZN6StringD1Ev>
   b584c:	3514      	adds	r5, #20
   b584e:	e7f8      	b.n	b5842 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5850:	6820      	ldr	r0, [r4, #0]
   b5852:	f007 ffef 	bl	bd834 <free>
    AllocatorT::free(data_);
}
   b5856:	4620      	mov	r0, r4
   b5858:	bd70      	pop	{r4, r5, r6, pc}

000b585a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b585a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b585c:	4616      	mov	r6, r2
   b585e:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b5860:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5862:	e9c0 2200 	strd	r2, r2, [r0]
   b5866:	4604      	mov	r4, r0
   b5868:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b586a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b586c:	4619      	mov	r1, r3
   b586e:	a804      	add	r0, sp, #16
   b5870:	f008 fa62 	bl	bdd38 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b5874:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5876:	4638      	mov	r0, r7
   b5878:	f008 fa5e 	bl	bdd38 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b587c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b587e:	9302      	str	r3, [sp, #8]
   b5880:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5882:	4620      	mov	r0, r4
   b5884:	e9cd 7300 	strd	r7, r3, [sp]
   b5888:	4632      	mov	r2, r6
   b588a:	ab04      	add	r3, sp, #16
   b588c:	4629      	mov	r1, r5
   b588e:	f008 ffc9 	bl	be824 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5892:	4620      	mov	r0, r4
   b5894:	b00f      	add	sp, #60	; 0x3c
   b5896:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5898 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5898:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b589a:	4c0b      	ldr	r4, [pc, #44]	; (b58c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b589c:	7821      	ldrb	r1, [r4, #0]
   b589e:	f3bf 8f5b 	dmb	ish
   b58a2:	f011 0101 	ands.w	r1, r1, #1
   b58a6:	d10b      	bne.n	b58c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b58a8:	4620      	mov	r0, r4
   b58aa:	9101      	str	r1, [sp, #4]
   b58ac:	f7fe fc08 	bl	b40c0 <__cxa_guard_acquire>
   b58b0:	9901      	ldr	r1, [sp, #4]
   b58b2:	b128      	cbz	r0, b58c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b58b4:	4805      	ldr	r0, [pc, #20]	; (b58cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b58b6:	f00b f942 	bl	c0b3e <_ZN8SPIClassC1E19hal_spi_interface_t>
   b58ba:	4620      	mov	r0, r4
   b58bc:	f7fe fc05 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b58c0:	4802      	ldr	r0, [pc, #8]	; (b58cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b58c2:	b002      	add	sp, #8
   b58c4:	bd10      	pop	{r4, pc}
   b58c6:	bf00      	nop
   b58c8:	2003dd78 	.word	0x2003dd78
   b58cc:	2003dd7c 	.word	0x2003dd7c

000b58d0 <_Z8setupSPIv>:
void setupSPI(){
   b58d0:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b58d2:	f7ff ffe1 	bl	b5898 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b58da:	2100      	movs	r1, #0
   b58dc:	f00b f94d 	bl	c0b7a <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b58e0:	f7ff ffda 	bl	b5898 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b58e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b58e8:	4901      	ldr	r1, [pc, #4]	; (b58f0 <_Z8setupSPIv+0x20>)
   b58ea:	2201      	movs	r2, #1
   b58ec:	f00b b9e4 	b.w	c0cb8 <_ZN8SPIClass13setClockSpeedEjj>
   b58f0:	000f4240 	.word	0x000f4240

000b58f4 <setup>:
void setup(){
   b58f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b58f8:	48bc      	ldr	r0, [pc, #752]	; (b5bec <setup+0x2f8>)
    setLSpeed = 90;
   b58fa:	4ebd      	ldr	r6, [pc, #756]	; (b5bf0 <setup+0x2fc>)
   b58fc:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b58fe:	4dbd      	ldr	r5, [pc, #756]	; (b5bf4 <setup+0x300>)
   b5900:	f003 0303 	and.w	r3, r3, #3
   b5904:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5908:	b093      	sub	sp, #76	; 0x4c
   b590a:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b590c:	2200      	movs	r2, #0
   b590e:	2101      	movs	r1, #1
   b5910:	3004      	adds	r0, #4
   b5912:	f007 fea1 	bl	bd658 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b5916:	2101      	movs	r1, #1
   b5918:	2002      	movs	r0, #2
   b591a:	f00b fdd9 	bl	c14d0 <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b591e:	2101      	movs	r1, #1
   b5920:	201c      	movs	r0, #28
   b5922:	f00b fdd5 	bl	c14d0 <pinMode>
    pinMode(LEAK_DET, INPUT);
   b5926:	2100      	movs	r1, #0
   b5928:	201d      	movs	r0, #29
   b592a:	f00b fdd1 	bl	c14d0 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b592e:	2100      	movs	r1, #0
   b5930:	2002      	movs	r0, #2
   b5932:	f00b fdde 	bl	c14f2 <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b5936:	2100      	movs	r1, #0
   b5938:	201c      	movs	r0, #28
    ESCL.attach(ESC_PWM_L,1000,2000);
   b593a:	2400      	movs	r4, #0
    digitalWrite(PWR_EN,LOW);
   b593c:	f00b fdd9 	bl	c14f2 <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5940:	27b4      	movs	r7, #180	; 0xb4
   b5942:	f007 fc99 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b5946:	235a      	movs	r3, #90	; 0x5a
   b5948:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b594a:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b594c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5950:	e9cd 4700 	strd	r4, r7, [sp]
   b5954:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5958:	2106      	movs	r1, #6
   b595a:	48a7      	ldr	r0, [pc, #668]	; (b5bf8 <setup+0x304>)
   b595c:	f00b f8be 	bl	c0adc <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b5960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5964:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5968:	e9cd 4700 	strd	r4, r7, [sp]
   b596c:	2105      	movs	r1, #5
   b596e:	48a3      	ldr	r0, [pc, #652]	; (b5bfc <setup+0x308>)
    logSensors = true;
   b5970:	4fa3      	ldr	r7, [pc, #652]	; (b5c00 <setup+0x30c>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b5972:	f00b f8b3 	bl	c0adc <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b5976:	7831      	ldrb	r1, [r6, #0]
   b5978:	489f      	ldr	r0, [pc, #636]	; (b5bf8 <setup+0x304>)
    logMessages = true;
   b597a:	4ea2      	ldr	r6, [pc, #648]	; (b5c04 <setup+0x310>)
    ESCL.write(setLSpeed);
   b597c:	f00b f871 	bl	c0a62 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b5980:	7829      	ldrb	r1, [r5, #0]
   b5982:	489e      	ldr	r0, [pc, #632]	; (b5bfc <setup+0x308>)
   b5984:	f00b f86d 	bl	c0a62 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b5988:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b598c:	f007 ffbe 	bl	bd90c <delay>
    BLE.on();
   b5990:	f008 fb20 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5994:	f008 fb68 	bl	be068 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b5998:	f008 fb1c 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b599c:	2108      	movs	r1, #8
   b599e:	f008 fb6a 	bl	be076 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b59a2:	f00b fc95 	bl	c12d0 <_Z16_fetch_usbserialv>
   b59a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59aa:	f00b fc81 	bl	c12b0 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b59ae:	f00b fe27 	bl	c1600 <_Z22__fetch_global_Serial1v>
   b59b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59b6:	f00b fc23 	bl	c1200 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b59ba:	f7ff ff89 	bl	b58d0 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b59be:	f7ff f8af 	bl	b4b20 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b59c2:	f7ff f8c5 	bl	b4b50 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b59c6:	f7ff f897 	bl	b4af8 <_Z8setupLTEv>
   b59ca:	f007 fc55 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b59ce:	4b8e      	ldr	r3, [pc, #568]	; (b5c08 <setup+0x314>)
   b59d0:	6018      	str	r0, [r3, #0]
   b59d2:	f007 fc51 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b59d6:	4b8d      	ldr	r3, [pc, #564]	; (b5c0c <setup+0x318>)
   b59d8:	6018      	str	r0, [r3, #0]
   b59da:	f007 fc4d 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b59de:	4b8c      	ldr	r3, [pc, #560]	; (b5c10 <setup+0x31c>)
   b59e0:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b59e2:	4b8c      	ldr	r3, [pc, #560]	; (b5c14 <setup+0x320>)
   b59e4:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b59e6:	4b8c      	ldr	r3, [pc, #560]	; (b5c18 <setup+0x324>)
   b59e8:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b59ea:	4b8c      	ldr	r3, [pc, #560]	; (b5c1c <setup+0x328>)
   b59ec:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b59ee:	4b8c      	ldr	r3, [pc, #560]	; (b5c20 <setup+0x32c>)
   b59f0:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b59f2:	4b8c      	ldr	r3, [pc, #560]	; (b5c24 <setup+0x330>)
   b59f4:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b59f6:	4b8c      	ldr	r3, [pc, #560]	; (b5c28 <setup+0x334>)
   b59f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b59fc:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b59fe:	4b8b      	ldr	r3, [pc, #556]	; (b5c2c <setup+0x338>)
    logSensors = true;
   b5a00:	2501      	movs	r5, #1
    battPercent = 50;
   b5a02:	2232      	movs	r2, #50	; 0x32
   b5a04:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b5a06:	703d      	strb	r5, [r7, #0]
    logMessages = true;
   b5a08:	7035      	strb	r5, [r6, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b5a0a:	f008 fae3 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a0e:	4a88      	ldr	r2, [pc, #544]	; (b5c30 <setup+0x33c>)
   b5a10:	4601      	mov	r1, r0
   b5a12:	a80d      	add	r0, sp, #52	; 0x34
   b5a14:	f009 f830 	bl	bea78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a18:	a80d      	add	r0, sp, #52	; 0x34
   b5a1a:	f008 fbe0 	bl	be1de <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b5a1e:	f008 fad9 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a22:	4a84      	ldr	r2, [pc, #528]	; (b5c34 <setup+0x340>)
   b5a24:	4601      	mov	r1, r0
   b5a26:	a80d      	add	r0, sp, #52	; 0x34
   b5a28:	f009 f826 	bl	bea78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a2c:	a80d      	add	r0, sp, #52	; 0x34
   b5a2e:	f008 fbd6 	bl	be1de <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b5a32:	f008 facf 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a36:	4a80      	ldr	r2, [pc, #512]	; (b5c38 <setup+0x344>)
   b5a38:	4601      	mov	r1, r0
   b5a3a:	a80d      	add	r0, sp, #52	; 0x34
   b5a3c:	f009 f81c 	bl	bea78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a40:	a80d      	add	r0, sp, #52	; 0x34
   b5a42:	f008 fbcc 	bl	be1de <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b5a46:	4b7d      	ldr	r3, [pc, #500]	; (b5c3c <setup+0x348>)
   b5a48:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b5a4a:	4b7d      	ldr	r3, [pc, #500]	; (b5c40 <setup+0x34c>)
        BleUuid tempUUID(uuid);
   b5a4c:	a80d      	add	r0, sp, #52	; 0x34
   b5a4e:	6819      	ldr	r1, [r3, #0]
   b5a50:	f008 f972 	bl	bdd38 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5a54:	a80d      	add	r0, sp, #52	; 0x34
   b5a56:	f008 f8d1 	bl	bdbfc <_ZNK8particle7BleUuid4typeEv>
   b5a5a:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5a5c:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5a5e:	2d00      	cmp	r5, #0
   b5a60:	f040 80b8 	bne.w	b5bd4 <setup+0x2e0>
            uint16_t uuid16 = tempUUID.shorted();
   b5a64:	f008 f8e6 	bl	bdc34 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5a68:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5a6a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5a6e:	2302      	movs	r3, #2
   b5a70:	aa09      	add	r2, sp, #36	; 0x24
   b5a72:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5a74:	4873      	ldr	r0, [pc, #460]	; (b5c44 <setup+0x350>)
   b5a76:	f008 fcdd 	bl	be434 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b5a7a:	2300      	movs	r3, #0
   b5a7c:	496f      	ldr	r1, [pc, #444]	; (b5c3c <setup+0x348>)
   b5a7e:	4871      	ldr	r0, [pc, #452]	; (b5c44 <setup+0x350>)
   b5a80:	2208      	movs	r2, #8
   b5a82:	f008 fcf5 	bl	be470 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b5a86:	f008 faa5 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a8a:	2200      	movs	r2, #0
   b5a8c:	496d      	ldr	r1, [pc, #436]	; (b5c44 <setup+0x350>)
   b5a8e:	f008 fb52 	bl	be136 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5a92:	f00b fd75 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5a96:	f009 fc63 	bl	bf360 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b5a9a:	f00b fd71 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5a9e:	496a      	ldr	r1, [pc, #424]	; (b5c48 <setup+0x354>)
   b5aa0:	f009 fc5a 	bl	bf358 <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b5aa4:	f00b fd6c 	bl	c1580 <_Z19__fetch_global_Wirev>
   b5aa8:	211c      	movs	r1, #28
   b5aaa:	4602      	mov	r2, r0
   b5aac:	4867      	ldr	r0, [pc, #412]	; (b5c4c <setup+0x358>)
   b5aae:	f002 f86e 	bl	b7b8e <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5ab2:	2800      	cmp	r0, #0
   b5ab4:	f040 8095 	bne.w	b5be2 <setup+0x2ee>
        Serial.println("Failed to find LIS3MDL chip");
   b5ab8:	f00b fc0a 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5abc:	4964      	ldr	r1, [pc, #400]	; (b5c50 <setup+0x35c>)
    else Serial.println("LIS3MDL Found!");
   b5abe:	f00a ff5e 	bl	c097e <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b5ac2:	4862      	ldr	r0, [pc, #392]	; (b5c4c <setup+0x358>)
   b5ac4:	2101      	movs	r1, #1
   b5ac6:	f001 ff5b 	bl	b7980 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b5aca:	4860      	ldr	r0, [pc, #384]	; (b5c4c <setup+0x358>)
   b5acc:	2100      	movs	r1, #0
   b5ace:	f001 ffbb 	bl	b7a48 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5ad2:	485e      	ldr	r0, [pc, #376]	; (b5c4c <setup+0x358>)
   b5ad4:	2101      	movs	r1, #1
   b5ad6:	f001 ff85 	bl	b79e4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_4_GAUSS);
   b5ada:	485c      	ldr	r0, [pc, #368]	; (b5c4c <setup+0x358>)
   b5adc:	2100      	movs	r1, #0
   b5ade:	f001 ffce 	bl	b7a7e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5ae2:	2401      	movs	r4, #1
   b5ae4:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b5ae6:	4859      	ldr	r0, [pc, #356]	; (b5c4c <setup+0x358>)
   b5ae8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5aec:	f002 f86e 	bl	b7bcc <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5af0:	4623      	mov	r3, r4
   b5af2:	462a      	mov	r2, r5
   b5af4:	4629      	mov	r1, r5
   b5af6:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b5afa:	4854      	ldr	r0, [pc, #336]	; (b5c4c <setup+0x358>)
   b5afc:	9400      	str	r4, [sp, #0]
   b5afe:	f002 f87d 	bl	b7bfc <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5b02:	f00b fb09 	bl	c1118 <_ZN9TimeClass5monthEv>
   b5b06:	9007      	str	r0, [sp, #28]
   b5b08:	f00b fafa 	bl	c1100 <_ZN9TimeClass3dayEv>
   b5b0c:	4680      	mov	r8, r0
   b5b0e:	f00b fb0b 	bl	c1128 <_ZN9TimeClass4yearEv>
   b5b12:	4681      	mov	r9, r0
   b5b14:	f00b fad0 	bl	c10b8 <_ZN9TimeClass4hourEv>
   b5b18:	4682      	mov	sl, r0
   b5b1a:	f00b fad9 	bl	c10d0 <_ZN9TimeClass6minuteEv>
   b5b1e:	4683      	mov	fp, r0
   b5b20:	f00b fae2 	bl	c10e8 <_ZN9TimeClass6secondEv>
   b5b24:	9b07      	ldr	r3, [sp, #28]
   b5b26:	4a4b      	ldr	r2, [pc, #300]	; (b5c54 <setup+0x360>)
   b5b28:	f8cd 8000 	str.w	r8, [sp]
   b5b2c:	e9cd b003 	strd	fp, r0, [sp, #12]
   b5b30:	2110      	movs	r1, #16
   b5b32:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   b5b36:	a809      	add	r0, sp, #36	; 0x24
   b5b38:	f007 fe9c 	bl	bd874 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b5b3c:	4946      	ldr	r1, [pc, #280]	; (b5c58 <setup+0x364>)
   b5b3e:	4847      	ldr	r0, [pc, #284]	; (b5c5c <setup+0x368>)
   b5b40:	f00e f814 	bl	c3b6c <strcpy>
    strcat(filename,timestamp);
   b5b44:	a909      	add	r1, sp, #36	; 0x24
   b5b46:	4845      	ldr	r0, [pc, #276]	; (b5c5c <setup+0x368>)
   b5b48:	f00d ffe0 	bl	c3b0c <strcat>
    strcpy(filenameMessages,filename);
   b5b4c:	4943      	ldr	r1, [pc, #268]	; (b5c5c <setup+0x368>)
   b5b4e:	4844      	ldr	r0, [pc, #272]	; (b5c60 <setup+0x36c>)
   b5b50:	f00e f80c 	bl	c3b6c <strcpy>
    strcat(filename,".csv");
   b5b54:	4943      	ldr	r1, [pc, #268]	; (b5c64 <setup+0x370>)
   b5b56:	4841      	ldr	r0, [pc, #260]	; (b5c5c <setup+0x368>)
   b5b58:	f00d ffd8 	bl	c3b0c <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5b5c:	4942      	ldr	r1, [pc, #264]	; (b5c68 <setup+0x374>)
   b5b5e:	4840      	ldr	r0, [pc, #256]	; (b5c60 <setup+0x36c>)
   b5b60:	f00d ffd4 	bl	c3b0c <strcat>
    Serial.println(filename);
   b5b64:	f00b fbb4 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5b68:	493c      	ldr	r1, [pc, #240]	; (b5c5c <setup+0x368>)
   b5b6a:	f00a ff08 	bl	c097e <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b5b6e:	f00b fbaf 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5b72:	493b      	ldr	r1, [pc, #236]	; (b5c60 <setup+0x36c>)
   b5b74:	f00a ff03 	bl	c097e <_ZN5Print7printlnEPKc>
    watchdog.start();
   b5b78:	483c      	ldr	r0, [pc, #240]	; (b5c6c <setup+0x378>)
   b5b7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5b7e:	f7fe fb9b 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    motionTimer.start();
   b5b82:	483b      	ldr	r0, [pc, #236]	; (b5c70 <setup+0x37c>)
   b5b84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5b88:	f7fe fb96 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b5b8c:	4839      	ldr	r0, [pc, #228]	; (b5c74 <setup+0x380>)
   b5b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5b92:	f7fe fb91 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b5b96:	4838      	ldr	r0, [pc, #224]	; (b5c78 <setup+0x384>)
   b5b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5b9c:	f7fe fb8c 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b5ba0:	4b36      	ldr	r3, [pc, #216]	; (b5c7c <setup+0x388>)
   b5ba2:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5ba4:	4836      	ldr	r0, [pc, #216]	; (b5c80 <setup+0x38c>)
   b5ba6:	4b37      	ldr	r3, [pc, #220]	; (b5c84 <setup+0x390>)
   b5ba8:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b5bac:	aa0d      	add	r2, sp, #52	; 0x34
   b5bae:	2108      	movs	r1, #8
   b5bb0:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b5bb4:	930f      	str	r3, [sp, #60]	; 0x3c
   b5bb6:	f7fe fd6b 	bl	b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5bba:	4604      	mov	r4, r0
   b5bbc:	2800      	cmp	r0, #0
   b5bbe:	d167      	bne.n	b5c90 <setup+0x39c>
        Serial.println("Error: could not connect to SD card!");
   b5bc0:	f00b fb86 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5bc4:	4930      	ldr	r1, [pc, #192]	; (b5c88 <setup+0x394>)
   b5bc6:	f00a feda 	bl	c097e <_ZN5Print7printlnEPKc>
        logSensors = false;
   b5bca:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b5bcc:	7034      	strb	r4, [r6, #0]
}
   b5bce:	b013      	add	sp, #76	; 0x4c
   b5bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5bd4:	f008 f830 	bl	bdc38 <_ZNK8particle7BleUuid8rawBytesEv>
   b5bd8:	9400      	str	r4, [sp, #0]
   b5bda:	4602      	mov	r2, r0
   b5bdc:	2310      	movs	r3, #16
   b5bde:	2107      	movs	r1, #7
   b5be0:	e748      	b.n	b5a74 <setup+0x180>
    else Serial.println("LIS3MDL Found!");
   b5be2:	f00b fb75 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5be6:	4929      	ldr	r1, [pc, #164]	; (b5c8c <setup+0x398>)
   b5be8:	e769      	b.n	b5abe <setup+0x1ca>
   b5bea:	bf00      	nop
   b5bec:	2003e594 	.word	0x2003e594
   b5bf0:	2003e58c 	.word	0x2003e58c
   b5bf4:	2003e58d 	.word	0x2003e58d
   b5bf8:	2003dd94 	.word	0x2003dd94
   b5bfc:	2003dda4 	.word	0x2003dda4
   b5c00:	2003df0d 	.word	0x2003df0d
   b5c04:	2003df0c 	.word	0x2003df0c
   b5c08:	2003e588 	.word	0x2003e588
   b5c0c:	2003ddec 	.word	0x2003ddec
   b5c10:	2003de34 	.word	0x2003de34
   b5c14:	2003ddc8 	.word	0x2003ddc8
   b5c18:	2003dd90 	.word	0x2003dd90
   b5c1c:	2003ddf0 	.word	0x2003ddf0
   b5c20:	2003e0e8 	.word	0x2003e0e8
   b5c24:	2003e0e9 	.word	0x2003e0e9
   b5c28:	2003ddb6 	.word	0x2003ddb6
   b5c2c:	2003dde0 	.word	0x2003dde0
   b5c30:	2003e5e8 	.word	0x2003e5e8
   b5c34:	2003e0ec 	.word	0x2003e0ec
   b5c38:	2003e0e0 	.word	0x2003e0e0
   b5c3c:	2003dd85 	.word	0x2003dd85
   b5c40:	2003db80 	.word	0x2003db80
   b5c44:	2003ddd0 	.word	0x2003ddd0
   b5c48:	00061a80 	.word	0x00061a80
   b5c4c:	2003de58 	.word	0x2003de58
   b5c50:	000c60ae 	.word	0x000c60ae
   b5c54:	000c5eeb 	.word	0x000c5eeb
   b5c58:	000c60d9 	.word	0x000c60d9
   b5c5c:	2003ddf2 	.word	0x2003ddf2
   b5c60:	2003de10 	.word	0x2003de10
   b5c64:	000c5ff9 	.word	0x000c5ff9
   b5c68:	000c60e2 	.word	0x000c60e2
   b5c6c:	2003e5f4 	.word	0x2003e5f4
   b5c70:	2003df18 	.word	0x2003df18
   b5c74:	2003de3c 	.word	0x2003de3c
   b5c78:	2003e5b8 	.word	0x2003e5b8
   b5c7c:	000c61a0 	.word	0x000c61a0
   b5c80:	2003e0f4 	.word	0x2003e0f4
   b5c84:	007a1200 	.word	0x007a1200
   b5c88:	000c60eb 	.word	0x000c60eb
   b5c8c:	000c60ca 	.word	0x000c60ca
    if(logSensors){
   b5c90:	783b      	ldrb	r3, [r7, #0]
   b5c92:	b17b      	cbz	r3, b5cb4 <setup+0x3c0>
   b5c94:	4812      	ldr	r0, [pc, #72]	; (b5ce0 <setup+0x3ec>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5c96:	7c03      	ldrb	r3, [r0, #16]
   b5c98:	b92b      	cbnz	r3, b5ca6 <setup+0x3b2>
   b5c9a:	4912      	ldr	r1, [pc, #72]	; (b5ce4 <setup+0x3f0>)
   b5c9c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5ca0:	3010      	adds	r0, #16
   b5ca2:	f7fe fc81 	bl	b45a8 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5ca6:	4910      	ldr	r1, [pc, #64]	; (b5ce8 <setup+0x3f4>)
   b5ca8:	480d      	ldr	r0, [pc, #52]	; (b5ce0 <setup+0x3ec>)
   b5caa:	f00a fe68 	bl	c097e <_ZN5Print7printlnEPKc>
        myFile.close();
   b5cae:	480f      	ldr	r0, [pc, #60]	; (b5cec <setup+0x3f8>)
   b5cb0:	f000 fc72 	bl	b6598 <_ZN7FatFile5closeEv>
    if(logMessages){
   b5cb4:	7833      	ldrb	r3, [r6, #0]
   b5cb6:	2b00      	cmp	r3, #0
   b5cb8:	d089      	beq.n	b5bce <setup+0x2da>
   b5cba:	480d      	ldr	r0, [pc, #52]	; (b5cf0 <setup+0x3fc>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5cbc:	7c03      	ldrb	r3, [r0, #16]
   b5cbe:	b92b      	cbnz	r3, b5ccc <setup+0x3d8>
   b5cc0:	490c      	ldr	r1, [pc, #48]	; (b5cf4 <setup+0x400>)
   b5cc2:	f244 2202 	movw	r2, #16898	; 0x4202
   b5cc6:	3010      	adds	r0, #16
   b5cc8:	f7fe fc6e 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b5ccc:	490a      	ldr	r1, [pc, #40]	; (b5cf8 <setup+0x404>)
   b5cce:	4808      	ldr	r0, [pc, #32]	; (b5cf0 <setup+0x3fc>)
   b5cd0:	2201      	movs	r2, #1
   b5cd2:	f7fe fb41 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5cd6:	4809      	ldr	r0, [pc, #36]	; (b5cfc <setup+0x408>)
   b5cd8:	f000 fc5e 	bl	b6598 <_ZN7FatFile5closeEv>
}
   b5cdc:	e777      	b.n	b5bce <setup+0x2da>
   b5cde:	bf00      	nop
   b5ce0:	2003df34 	.word	0x2003df34
   b5ce4:	2003ddf2 	.word	0x2003ddf2
   b5ce8:	000c6110 	.word	0x000c6110
   b5cec:	2003df44 	.word	0x2003df44
   b5cf0:	2003deb4 	.word	0x2003deb4
   b5cf4:	2003de10 	.word	0x2003de10
   b5cf8:	000c6166 	.word	0x000c6166
   b5cfc:	2003dec4 	.word	0x2003dec4

000b5d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5d00:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d04:	4604      	mov	r4, r0
   b5d06:	460d      	mov	r5, r1
   b5d08:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5d0a:	d916      	bls.n	b5d3a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5d0c:	4290      	cmp	r0, r2
   b5d0e:	d215      	bcs.n	b5d3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5d10:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5d14:	1a75      	subs	r5, r6, r1
   b5d16:	f1a1 0714 	sub.w	r7, r1, #20
   b5d1a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d1c:	42b7      	cmp	r7, r6
   b5d1e:	d01c      	beq.n	b5d5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5d20:	b12c      	cbz	r4, b5d2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5d22:	4631      	mov	r1, r6
   b5d24:	4620      	mov	r0, r4
   b5d26:	f00b f8d3 	bl	c0ed0 <_ZN6StringC1EOS_>
   b5d2a:	7c33      	ldrb	r3, [r6, #16]
   b5d2c:	7423      	strb	r3, [r4, #16]
   b5d2e:	4630      	mov	r0, r6
   b5d30:	f00b f852 	bl	c0dd8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5d34:	3e14      	subs	r6, #20
   b5d36:	3c14      	subs	r4, #20
   b5d38:	e7f0      	b.n	b5d1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5d3a:	d00e      	beq.n	b5d5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5d3c:	42b5      	cmp	r5, r6
   b5d3e:	d00c      	beq.n	b5d5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5d40:	b12c      	cbz	r4, b5d4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5d42:	4629      	mov	r1, r5
   b5d44:	4620      	mov	r0, r4
   b5d46:	f00b f8c3 	bl	c0ed0 <_ZN6StringC1EOS_>
   b5d4a:	7c2b      	ldrb	r3, [r5, #16]
   b5d4c:	7423      	strb	r3, [r4, #16]
   b5d4e:	4628      	mov	r0, r5
   b5d50:	f00b f842 	bl	c0dd8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d54:	3514      	adds	r5, #20
   b5d56:	3414      	adds	r4, #20
   b5d58:	e7f0      	b.n	b5d3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5d60:	2300      	movs	r3, #0
   b5d62:	e9c0 3300 	strd	r3, r3, [r0]
   b5d66:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d68:	684f      	ldr	r7, [r1, #4]
   b5d6a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d6c:	4604      	mov	r4, r0
   b5d6e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d70:	dd23      	ble.n	b5dba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5d72:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5d76:	fb08 f007 	mul.w	r0, r8, r7
   b5d7a:	f007 fd53 	bl	bd824 <malloc>
            if (!d) {
   b5d7e:	4605      	mov	r5, r0
   b5d80:	b1d8      	cbz	r0, b5dba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5d82:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5d86:	fb08 1202 	mla	r2, r8, r2, r1
   b5d8a:	f7ff ffb9 	bl	b5d00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5d8e:	6820      	ldr	r0, [r4, #0]
   b5d90:	f007 fd50 	bl	bd834 <free>
        data_ = d;
   b5d94:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5d96:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5d98:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5d9c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5da0:	45b8      	cmp	r8, r7
   b5da2:	d008      	beq.n	b5db6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5da4:	4639      	mov	r1, r7
   b5da6:	4628      	mov	r0, r5
   b5da8:	f00b f8ac 	bl	c0f04 <_ZN6StringC1ERKS_>
   b5dac:	7c3b      	ldrb	r3, [r7, #16]
   b5dae:	742b      	strb	r3, [r5, #16]
   b5db0:	3714      	adds	r7, #20
   b5db2:	3514      	adds	r5, #20
   b5db4:	e7f4      	b.n	b5da0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5db6:	6873      	ldr	r3, [r6, #4]
   b5db8:	6063      	str	r3, [r4, #4]
}
   b5dba:	4620      	mov	r0, r4
   b5dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5dc0 <_GLOBAL__sub_I_SystemMode>:
   b5dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b5dc2:	4b77      	ldr	r3, [pc, #476]	; (b5fa0 <_GLOBAL__sub_I_SystemMode+0x1e0>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b5dc4:	4a77      	ldr	r2, [pc, #476]	; (b5fa4 <_GLOBAL__sub_I_SystemMode+0x1e4>)
  explicit SdFat(SPIClass* spiPort) {
   b5dc6:	4c78      	ldr	r4, [pc, #480]	; (b5fa8 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5dc8:	2601      	movs	r6, #1
   b5dca:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5dcc:	4b77      	ldr	r3, [pc, #476]	; (b5fac <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5dce:	2500      	movs	r5, #0
   b5dd0:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b5dd4:	609a      	str	r2, [r3, #8]
   b5dd6:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5dd8:	2003      	movs	r0, #3
   b5dda:	f007 fc4f 	bl	bd67c <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b5dde:	4874      	ldr	r0, [pc, #464]	; (b5fb0 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b5de0:	f001 ff68 	bl	b7cb4 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b5de4:	4873      	ldr	r0, [pc, #460]	; (b5fb4 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b5de6:	f001 fd4f 	bl	b7888 <_ZN16Adafruit_LIS3MDLC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b5dea:	f7ff fd55 	bl	b5898 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5dee:	2364      	movs	r3, #100	; 0x64
   b5df0:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b5df4:	4b70      	ldr	r3, [pc, #448]	; (b5fb8 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5df6:	6065      	str	r5, [r4, #4]
   b5df8:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b5dfc:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b5e00:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b5e04:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b5e08:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b5e0c:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5e10:	b908      	cbnz	r0, b5e16 <_GLOBAL__sub_I_SystemMode+0x56>
   b5e12:	f7ff fd41 	bl	b5898 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b5e16:	4b69      	ldr	r3, [pc, #420]	; (b5fbc <_GLOBAL__sub_I_SystemMode+0x1fc>)
  File() {}
   b5e18:	4a69      	ldr	r2, [pc, #420]	; (b5fc0 <_GLOBAL__sub_I_SystemMode+0x200>)
   b5e1a:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5e1e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   b5e22:	2400      	movs	r4, #0
   b5e24:	601a      	str	r2, [r3, #0]
   b5e26:	e9c3 4701 	strd	r4, r7, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5e2a:	611c      	str	r4, [r3, #16]
   b5e2c:	4b65      	ldr	r3, [pc, #404]	; (b5fc4 <_GLOBAL__sub_I_SystemMode+0x204>)
        capacity_(0) {
   b5e2e:	9407      	str	r4, [sp, #28]
   b5e30:	601a      	str	r2, [r3, #0]
   b5e32:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5e36:	611c      	str	r4, [r3, #16]
   b5e38:	4b63      	ldr	r3, [pc, #396]	; (b5fc8 <_GLOBAL__sub_I_SystemMode+0x208>)
        filter_(level, filters) {
   b5e3a:	4d64      	ldr	r5, [pc, #400]	; (b5fcc <_GLOBAL__sub_I_SystemMode+0x20c>)
   b5e3c:	601a      	str	r2, [r3, #0]
   b5e3e:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5e42:	611c      	str	r4, [r3, #16]
   b5e44:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5e48:	f00b fa42 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5e4c:	a905      	add	r1, sp, #20
   b5e4e:	4606      	mov	r6, r0
   b5e50:	a808      	add	r0, sp, #32
   b5e52:	f7ff ff83 	bl	b5d5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5e56:	a908      	add	r1, sp, #32
   b5e58:	a80b      	add	r0, sp, #44	; 0x2c
   b5e5a:	f7ff ff7f 	bl	b5d5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5e5e:	4b5c      	ldr	r3, [pc, #368]	; (b5fd0 <_GLOBAL__sub_I_SystemMode+0x210>)
   b5e60:	602b      	str	r3, [r5, #0]
   b5e62:	a90b      	add	r1, sp, #44	; 0x2c
   b5e64:	a80e      	add	r0, sp, #56	; 0x38
   b5e66:	f7ff ff79 	bl	b5d5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5e6a:	aa0e      	add	r2, sp, #56	; 0x38
   b5e6c:	211e      	movs	r1, #30
   b5e6e:	1d28      	adds	r0, r5, #4
   b5e70:	f00a f9ac 	bl	c01cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e74:	a80e      	add	r0, sp, #56	; 0x38
   b5e76:	f7ff fcdd 	bl	b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5e7a:	a80b      	add	r0, sp, #44	; 0x2c
   b5e7c:	f7ff fcda 	bl	b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e80:	4b54      	ldr	r3, [pc, #336]	; (b5fd4 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5e82:	602b      	str	r3, [r5, #0]
   b5e84:	622e      	str	r6, [r5, #32]
   b5e86:	a808      	add	r0, sp, #32
   b5e88:	f7ff fcd4 	bl	b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e8c:	4b52      	ldr	r3, [pc, #328]	; (b5fd8 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5e8e:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5e90:	f00b fa1e 	bl	c12d0 <_Z16_fetch_usbserialv>
   b5e94:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5e98:	f00b fa0a 	bl	c12b0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5e9c:	f009 fe78 	bl	bfb90 <_ZN5spark10LogManager8instanceEv>
   b5ea0:	4629      	mov	r1, r5
   b5ea2:	f00a f869 	bl	bff78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b5ea6:	a805      	add	r0, sp, #20
   b5ea8:	f7ff fcc4 	bl	b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b5eac:	484b      	ldr	r0, [pc, #300]	; (b5fdc <_GLOBAL__sub_I_SystemMode+0x21c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5eae:	4d4c      	ldr	r5, [pc, #304]	; (b5fe0 <_GLOBAL__sub_I_SystemMode+0x220>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5eb0:	4e4c      	ldr	r6, [pc, #304]	; (b5fe4 <_GLOBAL__sub_I_SystemMode+0x224>)
Servo ESCL; 
   b5eb2:	f00a fdff 	bl	c0ab4 <_ZN5ServoC1Ev>
Servo ESCR;
   b5eb6:	484c      	ldr	r0, [pc, #304]	; (b5fe8 <_GLOBAL__sub_I_SystemMode+0x228>)
   b5eb8:	f00a fdfc 	bl	c0ab4 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5ebc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5ec0:	682b      	ldr	r3, [r5, #0]
   b5ec2:	9300      	str	r3, [sp, #0]
   b5ec4:	4b49      	ldr	r3, [pc, #292]	; (b5fec <_GLOBAL__sub_I_SystemMode+0x22c>)
   b5ec6:	494a      	ldr	r1, [pc, #296]	; (b5ff0 <_GLOBAL__sub_I_SystemMode+0x230>)
   b5ec8:	681b      	ldr	r3, [r3, #0]
   b5eca:	484a      	ldr	r0, [pc, #296]	; (b5ff4 <_GLOBAL__sub_I_SystemMode+0x234>)
   b5ecc:	f04f 0210 	mov.w	r2, #16
   b5ed0:	f7ff fcc3 	bl	b585a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b5ed4:	4b48      	ldr	r3, [pc, #288]	; (b5ff8 <_GLOBAL__sub_I_SystemMode+0x238>)
   b5ed6:	9402      	str	r4, [sp, #8]
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	682b      	ldr	r3, [r5, #0]
   b5edc:	9300      	str	r3, [sp, #0]
   b5ede:	4b47      	ldr	r3, [pc, #284]	; (b5ffc <_GLOBAL__sub_I_SystemMode+0x23c>)
   b5ee0:	4947      	ldr	r1, [pc, #284]	; (b6000 <_GLOBAL__sub_I_SystemMode+0x240>)
   b5ee2:	681b      	ldr	r3, [r3, #0]
   b5ee4:	4847      	ldr	r0, [pc, #284]	; (b6004 <_GLOBAL__sub_I_SystemMode+0x244>)
   b5ee6:	f04f 0204 	mov.w	r2, #4
   b5eea:	f7ff fcb6 	bl	b585a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b5eee:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5ef2:	682b      	ldr	r3, [r5, #0]
   b5ef4:	9300      	str	r3, [sp, #0]
   b5ef6:	4b44      	ldr	r3, [pc, #272]	; (b6008 <_GLOBAL__sub_I_SystemMode+0x248>)
   b5ef8:	4944      	ldr	r1, [pc, #272]	; (b600c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b5efa:	681b      	ldr	r3, [r3, #0]
   b5efc:	4844      	ldr	r0, [pc, #272]	; (b6010 <_GLOBAL__sub_I_SystemMode+0x250>)
	    _M_manager = &_My_handler::_M_manager;
   b5efe:	4d45      	ldr	r5, [pc, #276]	; (b6014 <_GLOBAL__sub_I_SystemMode+0x254>)
   b5f00:	f04f 0210 	mov.w	r2, #16
   b5f04:	f7ff fca9 	bl	b585a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b5f08:	4843      	ldr	r0, [pc, #268]	; (b6018 <_GLOBAL__sub_I_SystemMode+0x258>)
   b5f0a:	f008 fa9e 	bl	be44a <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f0e:	4b43      	ldr	r3, [pc, #268]	; (b601c <_GLOBAL__sub_I_SystemMode+0x25c>)
   b5f10:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5f12:	aa0e      	add	r2, sp, #56	; 0x38
   b5f14:	4623      	mov	r3, r4
   b5f16:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5f1a:	4841      	ldr	r0, [pc, #260]	; (b6020 <_GLOBAL__sub_I_SystemMode+0x260>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f1c:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5f1e:	9510      	str	r5, [sp, #64]	; 0x40
   b5f20:	f7fe fa9a 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f24:	a80e      	add	r0, sp, #56	; 0x38
   b5f26:	f7fe fa59 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f2a:	4b3e      	ldr	r3, [pc, #248]	; (b6024 <_GLOBAL__sub_I_SystemMode+0x264>)
   b5f2c:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5f2e:	aa0e      	add	r2, sp, #56	; 0x38
   b5f30:	4623      	mov	r3, r4
   b5f32:	4639      	mov	r1, r7
   b5f34:	483c      	ldr	r0, [pc, #240]	; (b6028 <_GLOBAL__sub_I_SystemMode+0x268>)
	    _M_manager = &_My_handler::_M_manager;
   b5f36:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f3a:	f7fe fa8d 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f3e:	a80e      	add	r0, sp, #56	; 0x38
   b5f40:	f7fe fa4c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f44:	4b39      	ldr	r3, [pc, #228]	; (b602c <_GLOBAL__sub_I_SystemMode+0x26c>)
   b5f46:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b5f48:	aa0e      	add	r2, sp, #56	; 0x38
   b5f4a:	4623      	mov	r3, r4
   b5f4c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b5f50:	4837      	ldr	r0, [pc, #220]	; (b6030 <_GLOBAL__sub_I_SystemMode+0x270>)
	    _M_manager = &_My_handler::_M_manager;
   b5f52:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f56:	f7fe fa7f 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f5a:	a80e      	add	r0, sp, #56	; 0x38
   b5f5c:	f7fe fa3e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f60:	4b34      	ldr	r3, [pc, #208]	; (b6034 <_GLOBAL__sub_I_SystemMode+0x274>)
   b5f62:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5f64:	aa0e      	add	r2, sp, #56	; 0x38
   b5f66:	4623      	mov	r3, r4
   b5f68:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5f6c:	4832      	ldr	r0, [pc, #200]	; (b6038 <_GLOBAL__sub_I_SystemMode+0x278>)
	    _M_manager = &_My_handler::_M_manager;
   b5f6e:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f72:	f7fe fa71 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f76:	a80e      	add	r0, sp, #56	; 0x38
   b5f78:	f7fe fa30 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5f7c:	4622      	mov	r2, r4
   b5f7e:	2114      	movs	r1, #20
   b5f80:	2001      	movs	r0, #1
   b5f82:	f007 fba3 	bl	bd6cc <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5f86:	2201      	movs	r2, #1
   b5f88:	2114      	movs	r1, #20
   b5f8a:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5f8e:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5f90:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5f94:	4829      	ldr	r0, [pc, #164]	; (b603c <_GLOBAL__sub_I_SystemMode+0x27c>)
   b5f96:	f009 fc7d 	bl	bf894 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b5f9a:	b013      	add	sp, #76	; 0x4c
   b5f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5f9e:	bf00      	nop
   b5fa0:	2003ddcc 	.word	0x2003ddcc
   b5fa4:	ffff0000 	.word	0xffff0000
   b5fa8:	2003e0f4 	.word	0x2003e0f4
   b5fac:	2003ddb8 	.word	0x2003ddb8
   b5fb0:	2003df68 	.word	0x2003df68
   b5fb4:	2003de58 	.word	0x2003de58
   b5fb8:	000c61a0 	.word	0x000c61a0
   b5fbc:	2003df34 	.word	0x2003df34
   b5fc0:	000c620c 	.word	0x000c620c
   b5fc4:	2003deb4 	.word	0x2003deb4
   b5fc8:	2003de80 	.word	0x2003de80
   b5fcc:	2003dee8 	.word	0x2003dee8
   b5fd0:	000c61c8 	.word	0x000c61c8
   b5fd4:	000c739c 	.word	0x000c739c
   b5fd8:	000c61f4 	.word	0x000c61f4
   b5fdc:	2003dd94 	.word	0x2003dd94
   b5fe0:	2003db80 	.word	0x2003db80
   b5fe4:	000b4235 	.word	0x000b4235
   b5fe8:	2003dda4 	.word	0x2003dda4
   b5fec:	2003db8c 	.word	0x2003db8c
   b5ff0:	000c618b 	.word	0x000c618b
   b5ff4:	2003e5e8 	.word	0x2003e5e8
   b5ff8:	000b4a51 	.word	0x000b4a51
   b5ffc:	2003db88 	.word	0x2003db88
   b6000:	000c618e 	.word	0x000c618e
   b6004:	2003e0ec 	.word	0x2003e0ec
   b6008:	2003db84 	.word	0x2003db84
   b600c:	000c6191 	.word	0x000c6191
   b6010:	2003e0e0 	.word	0x2003e0e0
   b6014:	000b4221 	.word	0x000b4221
   b6018:	2003ddd0 	.word	0x2003ddd0
   b601c:	000b45b9 	.word	0x000b45b9
   b6020:	2003e5f4 	.word	0x2003e5f4
   b6024:	000b44d1 	.word	0x000b44d1
   b6028:	2003de3c 	.word	0x2003de3c
   b602c:	000b4375 	.word	0x000b4375
   b6030:	2003df18 	.word	0x2003df18
   b6034:	000b40fd 	.word	0x000b40fd
   b6038:	2003e5b8 	.word	0x2003e5b8
   b603c:	2003e594 	.word	0x2003e594

000b6040 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6040:	b538      	push	{r3, r4, r5, lr}
   b6042:	4604      	mov	r4, r0
   b6044:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6046:	2224      	movs	r2, #36	; 0x24
   b6048:	2100      	movs	r1, #0
   b604a:	f00d fd29 	bl	c3aa0 <memset>

  m_vol = vol;
   b604e:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6050:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6052:	2b10      	cmp	r3, #16
   b6054:	d003      	beq.n	b605e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6056:	2b20      	cmp	r3, #32
   b6058:	d006      	beq.n	b6068 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b605a:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b605c:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b605e:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6060:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6062:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6064:	70a0      	strb	r0, [r4, #2]
  return true;
   b6066:	e7f9      	b.n	b605c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6068:	2340      	movs	r3, #64	; 0x40
   b606a:	e7f9      	b.n	b6060 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b606c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b606c:	b510      	push	{r4, lr}
   b606e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6070:	3024      	adds	r0, #36	; 0x24
   b6072:	f000 ff66 	bl	b6f42 <_ZN8FatCache4syncEv>
   b6076:	b128      	cbz	r0, b6084 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6078:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6080:	f000 bf5f 	b.w	b6f42 <_ZN8FatCache4syncEv>
  }
   b6084:	bd10      	pop	{r4, pc}

000b6086 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6086:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6088:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b608a:	f043 0304 	orr.w	r3, r3, #4
   b608e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6090:	f100 0210 	add.w	r2, r0, #16
   b6094:	6880      	ldr	r0, [r0, #8]
   b6096:	f001 b80a 	b.w	b70ae <_ZN9FatVolume15allocateClusterEmPm>
	...

000b609c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b60a0:	7801      	ldrb	r1, [r0, #0]
   b60a2:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b60a6:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b60a8:	d003      	beq.n	b60b2 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b60aa:	2600      	movs	r6, #0
}
   b60ac:	4630      	mov	r0, r6
   b60ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b60b2:	6942      	ldr	r2, [r0, #20]
   b60b4:	4b17      	ldr	r3, [pc, #92]	; (b6114 <_ZN7FatFile13addDirClusterEv+0x78>)
   b60b6:	429a      	cmp	r2, r3
   b60b8:	d2f7      	bcs.n	b60aa <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b60ba:	f7ff ffe4 	bl	b6086 <_ZN7FatFile10addClusterEv>
   b60be:	4606      	mov	r6, r0
   b60c0:	2800      	cmp	r0, #0
   b60c2:	d0f2      	beq.n	b60aa <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b60c4:	6921      	ldr	r1, [r4, #16]
   b60c6:	68a0      	ldr	r0, [r4, #8]
   b60c8:	f000 ff86 	bl	b6fd8 <_ZNK9FatVolume17clusterFirstBlockEm>
   b60cc:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b60ce:	68a0      	ldr	r0, [r4, #8]
   b60d0:	2205      	movs	r2, #5
   b60d2:	4639      	mov	r1, r7
   b60d4:	3024      	adds	r0, #36	; 0x24
   b60d6:	f000 ff5c 	bl	b6f92 <_ZN8FatCache4readEmh>
  if (!pc) {
   b60da:	4680      	mov	r8, r0
   b60dc:	2800      	cmp	r0, #0
   b60de:	d0e4      	beq.n	b60aa <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b60e0:	4629      	mov	r1, r5
   b60e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   b60e6:	f00d fcdb 	bl	c3aa0 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b60ea:	2501      	movs	r5, #1
   b60ec:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b60ee:	791a      	ldrb	r2, [r3, #4]
   b60f0:	42aa      	cmp	r2, r5
   b60f2:	d909      	bls.n	b6108 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b60f4:	6818      	ldr	r0, [r3, #0]
   b60f6:	4642      	mov	r2, r8
   b60f8:	19e9      	adds	r1, r5, r7
   b60fa:	f001 fab6 	bl	b766a <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b60fe:	2800      	cmp	r0, #0
   b6100:	d0d3      	beq.n	b60aa <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6102:	3501      	adds	r5, #1
   b6104:	b2ed      	uxtb	r5, r5
   b6106:	e7f1      	b.n	b60ec <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6108:	6963      	ldr	r3, [r4, #20]
   b610a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b610e:	6163      	str	r3, [r4, #20]
  return true;
   b6110:	e7cc      	b.n	b60ac <_ZN7FatFile13addDirClusterEv+0x10>
   b6112:	bf00      	nop
   b6114:	001ffe00 	.word	0x001ffe00

000b6118 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6118:	b510      	push	{r4, lr}
   b611a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b611c:	6880      	ldr	r0, [r0, #8]
   b611e:	460a      	mov	r2, r1
   b6120:	3024      	adds	r0, #36	; 0x24
   b6122:	69a1      	ldr	r1, [r4, #24]
   b6124:	f000 ff35 	bl	b6f92 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6128:	b120      	cbz	r0, b6134 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b612a:	88a3      	ldrh	r3, [r4, #4]
   b612c:	f003 030f 	and.w	r3, r3, #15
   b6130:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6134:	bd10      	pop	{r4, pc}

000b6136 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b6136:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b6138:	b5f0      	push	{r4, r5, r6, r7, lr}
   b613a:	4604      	mov	r4, r0
   b613c:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b613e:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6140:	4618      	mov	r0, r3
      name[j++] = '.';
   b6142:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6144:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b6148:	2a20      	cmp	r2, #32
   b614a:	d018      	beq.n	b617e <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b614c:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b614e:	bf02      	ittt	eq
   b6150:	540f      	strbeq	r7, [r1, r0]
   b6152:	1c42      	addeq	r2, r0, #1
   b6154:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b6156:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6158:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b615c:	bf08      	it	eq
   b615e:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6160:	f1bc 0f19 	cmp.w	ip, #25
   b6164:	d806      	bhi.n	b6174 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6166:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b616a:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b616e:	bf1c      	itt	ne
   b6170:	3220      	addne	r2, #32
   b6172:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6174:	f100 0c01 	add.w	ip, r0, #1
   b6178:	540a      	strb	r2, [r1, r0]
   b617a:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b617e:	3301      	adds	r3, #1
   b6180:	b2db      	uxtb	r3, r3
   b6182:	2b0b      	cmp	r3, #11
   b6184:	d1de      	bne.n	b6144 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b6186:	2300      	movs	r3, #0
   b6188:	540b      	strb	r3, [r1, r0]
}
   b618a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b618c <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b618c:	7803      	ldrb	r3, [r0, #0]
   b618e:	b90b      	cbnz	r3, b6194 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6190:	f7ff bf56 	b.w	b6040 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6194:	2000      	movs	r0, #0
   b6196:	4770      	bx	lr

000b6198 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b619c:	7803      	ldrb	r3, [r0, #0]
   b619e:	4604      	mov	r4, r0
   b61a0:	4688      	mov	r8, r1
   b61a2:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b61a4:	2b00      	cmp	r3, #0
   b61a6:	d05d      	beq.n	b6264 <_ZN7FatFile4readEPvj+0xcc>
   b61a8:	7882      	ldrb	r2, [r0, #2]
   b61aa:	07d1      	lsls	r1, r2, #31
   b61ac:	d55a      	bpl.n	b6264 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b61ae:	071a      	lsls	r2, r3, #28
   b61b0:	d52d      	bpl.n	b620e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b61b2:	69c3      	ldr	r3, [r0, #28]
   b61b4:	6942      	ldr	r2, [r0, #20]
   b61b6:	1a9b      	subs	r3, r3, r2
   b61b8:	429d      	cmp	r5, r3
   b61ba:	bf28      	it	cs
   b61bc:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b61be:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b61c0:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b61c4:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b61c8:	2e00      	cmp	r6, #0
   b61ca:	f000 808f 	beq.w	b62ec <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b61ce:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b61d0:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b61d2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b61d4:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b61d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b61da:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b61de:	d51f      	bpl.n	b6220 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b61e0:	6a00      	ldr	r0, [r0, #32]
   b61e2:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b61e4:	68a0      	ldr	r0, [r4, #8]
   b61e6:	f1ba 0f00 	cmp.w	sl, #0
   b61ea:	d142      	bne.n	b6272 <_ZN7FatFile4readEPvj+0xda>
   b61ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b61f0:	d33f      	bcc.n	b6272 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b61f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b61f4:	4299      	cmp	r1, r3
   b61f6:	d03c      	beq.n	b6272 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b61f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b61fc:	d252      	bcs.n	b62a4 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b61fe:	6800      	ldr	r0, [r0, #0]
   b6200:	4642      	mov	r2, r8
   b6202:	f001 f9a9 	bl	b7558 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6206:	b368      	cbz	r0, b6264 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6208:	f44f 7700 	mov.w	r7, #512	; 0x200
   b620c:	e044      	b.n	b6298 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b620e:	069b      	lsls	r3, r3, #26
   b6210:	d5d5      	bpl.n	b61be <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6212:	6883      	ldr	r3, [r0, #8]
   b6214:	891a      	ldrh	r2, [r3, #8]
   b6216:	6943      	ldr	r3, [r0, #20]
   b6218:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b621c:	b29b      	uxth	r3, r3
   b621e:	e7cb      	b.n	b61b8 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6220:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6224:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6228:	f1ba 0f00 	cmp.w	sl, #0
   b622c:	d108      	bne.n	b6240 <_ZN7FatFile4readEPvj+0xa8>
   b622e:	f1b9 0f00 	cmp.w	r9, #0
   b6232:	d105      	bne.n	b6240 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6234:	b95b      	cbnz	r3, b624e <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6236:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6238:	bf4c      	ite	mi
   b623a:	6a03      	ldrmi	r3, [r0, #32]
   b623c:	6a23      	ldrpl	r3, [r4, #32]
   b623e:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6240:	6921      	ldr	r1, [r4, #16]
   b6242:	68a0      	ldr	r0, [r4, #8]
   b6244:	f000 fec8 	bl	b6fd8 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6248:	eb09 0100 	add.w	r1, r9, r0
   b624c:	e7ca      	b.n	b61e4 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b624e:	6921      	ldr	r1, [r4, #16]
   b6250:	465a      	mov	r2, fp
   b6252:	f000 fec7 	bl	b6fe4 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6256:	2800      	cmp	r0, #0
   b6258:	db04      	blt.n	b6264 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b625a:	d1f1      	bne.n	b6240 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b625c:	7823      	ldrb	r3, [r4, #0]
   b625e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6262:	d143      	bne.n	b62ec <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6264:	7863      	ldrb	r3, [r4, #1]
   b6266:	f043 0302 	orr.w	r3, r3, #2
   b626a:	7063      	strb	r3, [r4, #1]
  return -1;
   b626c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6270:	e03d      	b.n	b62ee <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6272:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6276:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6278:	f04f 0200 	mov.w	r2, #0
   b627c:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6280:	bf28      	it	cs
   b6282:	4637      	movcs	r7, r6
   b6284:	f000 fe85 	bl	b6f92 <_ZN8FatCache4readEmh>
      if (!pc) {
   b6288:	2800      	cmp	r0, #0
   b628a:	d0eb      	beq.n	b6264 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b628c:	eb00 010a 	add.w	r1, r0, sl
   b6290:	463a      	mov	r2, r7
   b6292:	4640      	mov	r0, r8
   b6294:	f00d fbdc 	bl	c3a50 <memcpy>
    m_curPosition += n;
   b6298:	6963      	ldr	r3, [r4, #20]
   b629a:	443b      	add	r3, r7
    dst += n;
   b629c:	44b8      	add	r8, r7
    m_curPosition += n;
   b629e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b62a0:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b62a2:	e791      	b.n	b61c8 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b62a4:	7822      	ldrb	r2, [r4, #0]
   b62a6:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b62a8:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b62ac:	d406      	bmi.n	b62bc <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b62ae:	7902      	ldrb	r2, [r0, #4]
   b62b0:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b62b4:	b2d2      	uxtb	r2, r2
   b62b6:	4592      	cmp	sl, r2
   b62b8:	bf28      	it	cs
   b62ba:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62bc:	4299      	cmp	r1, r3
      n = 512*nb;
   b62be:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62c2:	d208      	bcs.n	b62d6 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b62c4:	68a0      	ldr	r0, [r4, #8]
   b62c6:	4653      	mov	r3, sl
   b62c8:	6800      	ldr	r0, [r0, #0]
   b62ca:	4642      	mov	r2, r8
   b62cc:	f001 f98c 	bl	b75e8 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b62d0:	2800      	cmp	r0, #0
   b62d2:	d1e1      	bne.n	b6298 <_ZN7FatFile4readEPvj+0x100>
   b62d4:	e7c6      	b.n	b6264 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62d6:	4453      	add	r3, sl
   b62d8:	428b      	cmp	r3, r1
   b62da:	d9f3      	bls.n	b62c4 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b62dc:	3024      	adds	r0, #36	; 0x24
   b62de:	9101      	str	r1, [sp, #4]
   b62e0:	f000 fe2f 	bl	b6f42 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b62e4:	9901      	ldr	r1, [sp, #4]
   b62e6:	2800      	cmp	r0, #0
   b62e8:	d1ec      	bne.n	b62c4 <_ZN7FatFile4readEPvj+0x12c>
   b62ea:	e7bb      	b.n	b6264 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b62ec:	1ba8      	subs	r0, r5, r6
}
   b62ee:	b003      	add	sp, #12
   b62f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b62f4 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b62f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b62f6:	2201      	movs	r2, #1
   b62f8:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b62fc:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6300:	4604      	mov	r4, r0
   b6302:	f7ff ff49 	bl	b6198 <_ZN7FatFile4readEPvj>
   b6306:	2801      	cmp	r0, #1
   b6308:	bf0a      	itet	eq
   b630a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b630e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6312:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6316:	b002      	add	sp, #8
   b6318:	bd70      	pop	{r4, r5, r6, pc}

000b631a <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b631a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b631c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b631e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6322:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6324:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6328:	d000      	beq.n	b632c <_ZN7FatFile12readDirCacheEb+0x12>
   b632a:	b999      	cbnz	r1, b6354 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b632c:	2201      	movs	r2, #1
   b632e:	f10d 0107 	add.w	r1, sp, #7
   b6332:	4620      	mov	r0, r4
   b6334:	f7ff ff30 	bl	b6198 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6338:	b240      	sxtb	r0, r0
   b633a:	2801      	cmp	r0, #1
   b633c:	d002      	beq.n	b6344 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b633e:	2000      	movs	r0, #0
}
   b6340:	b003      	add	sp, #12
   b6342:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6344:	6963      	ldr	r3, [r4, #20]
   b6346:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6348:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b634a:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b634c:	3030      	adds	r0, #48	; 0x30
   b634e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6352:	e7f5      	b.n	b6340 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6354:	3320      	adds	r3, #32
   b6356:	e7f7      	b.n	b6348 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6358 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b635c:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b635e:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6360:	4604      	mov	r4, r0
   b6362:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6364:	b162      	cbz	r2, b6380 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6366:	6940      	ldr	r0, [r0, #20]
   b6368:	4288      	cmp	r0, r1
   b636a:	d002      	beq.n	b6372 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b636c:	b919      	cbnz	r1, b6376 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b636e:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6370:	6165      	str	r5, [r4, #20]
    return true;
   b6372:	2001      	movs	r0, #1
   b6374:	e006      	b.n	b6384 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6376:	0716      	lsls	r6, r2, #28
   b6378:	d506      	bpl.n	b6388 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b637a:	69e3      	ldr	r3, [r4, #28]
   b637c:	428b      	cmp	r3, r1
   b637e:	d20b      	bcs.n	b6398 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6380:	6127      	str	r7, [r4, #16]
  return false;
   b6382:	2000      	movs	r0, #0
}
   b6384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6388:	0691      	lsls	r1, r2, #26
   b638a:	d505      	bpl.n	b6398 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b638c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b638e:	891b      	ldrh	r3, [r3, #8]
   b6390:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6394:	d9ec      	bls.n	b6370 <_ZN7FatFile7seekSetEm+0x18>
   b6396:	e7f3      	b.n	b6380 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6398:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b639c:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b63a0:	1e43      	subs	r3, r0, #1
   b63a2:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b63a6:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b63a8:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b63aa:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b63ac:	42b3      	cmp	r3, r6
   b63ae:	d800      	bhi.n	b63b2 <_ZN7FatFile7seekSetEm+0x5a>
   b63b0:	b998      	cbnz	r0, b63da <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b63b2:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b63b4:	bf4c      	ite	mi
   b63b6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b63ba:	6a23      	ldrpl	r3, [r4, #32]
   b63bc:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b63be:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b63c2:	2e00      	cmp	r6, #0
   b63c4:	d0d4      	beq.n	b6370 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b63c6:	6921      	ldr	r1, [r4, #16]
   b63c8:	68a0      	ldr	r0, [r4, #8]
   b63ca:	4642      	mov	r2, r8
   b63cc:	f000 fe0a 	bl	b6fe4 <_ZN9FatVolume6fatGetEmPm>
   b63d0:	2800      	cmp	r0, #0
   b63d2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b63d6:	dcf4      	bgt.n	b63c2 <_ZN7FatFile7seekSetEm+0x6a>
   b63d8:	e7d2      	b.n	b6380 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b63da:	1af6      	subs	r6, r6, r3
   b63dc:	e7ef      	b.n	b63be <_ZN7FatFile7seekSetEm+0x66>

000b63de <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b63de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63e0:	460f      	mov	r7, r1
   b63e2:	4604      	mov	r4, r0
   b63e4:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b63e6:	2100      	movs	r1, #0
   b63e8:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b63ea:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b63ec:	f00d fb58 	bl	c3aa0 <memset>
  m_vol = dirFile->m_vol;
   b63f0:	68b8      	ldr	r0, [r7, #8]
   b63f2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b63f4:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b63f6:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b63fa:	6a3b      	ldr	r3, [r7, #32]
   b63fc:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b63fe:	016a      	lsls	r2, r5, #5
   b6400:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6404:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6408:	071f      	lsls	r7, r3, #28
   b640a:	d444      	bmi.n	b6496 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b640c:	f003 0317 	and.w	r3, r3, #23
   b6410:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6412:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6416:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b641a:	bf04      	itt	eq
   b641c:	f043 0308 	orreq.w	r3, r3, #8
   b6420:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6422:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6426:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6428:	f006 0303 	and.w	r3, r6, #3
   b642c:	2b01      	cmp	r3, #1
   b642e:	d02c      	beq.n	b648a <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6430:	2b02      	cmp	r3, #2
   b6432:	d028      	beq.n	b6486 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6434:	bb7b      	cbnz	r3, b6496 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6436:	0571      	lsls	r1, r6, #21
   b6438:	d42d      	bmi.n	b6496 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b643a:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b643c:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b643e:	78a1      	ldrb	r1, [r4, #2]
   b6440:	078b      	lsls	r3, r1, #30
   b6442:	d504      	bpl.n	b644e <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6444:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6446:	06df      	lsls	r7, r3, #27
   b6448:	d425      	bmi.n	b6496 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b644a:	07dd      	lsls	r5, r3, #31
   b644c:	d423      	bmi.n	b6496 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b644e:	11b3      	asrs	r3, r6, #6
   b6450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6454:	f006 0508 	and.w	r5, r6, #8
   b6458:	432b      	orrs	r3, r5
   b645a:	430b      	orrs	r3, r1
   b645c:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b645e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6460:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6462:	1883      	adds	r3, r0, r2
   b6464:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6468:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b646c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6470:	0572      	lsls	r2, r6, #21
   b6472:	d513      	bpl.n	b649c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6474:	b959      	cbnz	r1, b648e <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6476:	78a3      	ldrb	r3, [r4, #2]
   b6478:	f043 0304 	orr.w	r3, r3, #4
   b647c:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b647e:	0473      	lsls	r3, r6, #17
   b6480:	d410      	bmi.n	b64a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6482:	2001      	movs	r0, #1
}
   b6484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6486:	2303      	movs	r3, #3
   b6488:	e7d8      	b.n	b643c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b648a:	2302      	movs	r3, #2
   b648c:	e7d6      	b.n	b643c <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b648e:	f000 fe49 	bl	b7124 <_ZN9FatVolume9freeChainEm>
   b6492:	2800      	cmp	r0, #0
   b6494:	d1ef      	bne.n	b6476 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6496:	2000      	movs	r0, #0
   b6498:	7020      	strb	r0, [r4, #0]
  return false;
   b649a:	e7f3      	b.n	b6484 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b649c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b649e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b64a0:	61e3      	str	r3, [r4, #28]
   b64a2:	e7ec      	b.n	b647e <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b64a4:	69e1      	ldr	r1, [r4, #28]
   b64a6:	4620      	mov	r0, r4
   b64a8:	f7ff ff56 	bl	b6358 <_ZN7FatFile7seekSetEm>
   b64ac:	2800      	cmp	r0, #0
   b64ae:	d1e8      	bne.n	b6482 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b64b0:	e7f1      	b.n	b6496 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b64b2 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b64b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b64b6:	7803      	ldrb	r3, [r0, #0]
   b64b8:	4607      	mov	r7, r0
   b64ba:	460d      	mov	r5, r1
   b64bc:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b64be:	bb53      	cbnz	r3, b6516 <_ZN7FatFile8openNextEPS_i+0x64>
   b64c0:	780b      	ldrb	r3, [r1, #0]
   b64c2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b64c6:	d026      	beq.n	b6516 <_ZN7FatFile8openNextEPS_i+0x64>
   b64c8:	694c      	ldr	r4, [r1, #20]
   b64ca:	f014 041f 	ands.w	r4, r4, #31
   b64ce:	d122      	bne.n	b6516 <_ZN7FatFile8openNextEPS_i+0x64>
   b64d0:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b64d2:	2100      	movs	r1, #0
   b64d4:	4628      	mov	r0, r5
    return m_curPosition;
   b64d6:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b64da:	f7ff ff1e 	bl	b631a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b64de:	b1d0      	cbz	r0, b6516 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b64e0:	7806      	ldrb	r6, [r0, #0]
   b64e2:	b1c6      	cbz	r6, b6516 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b64e4:	2e2e      	cmp	r6, #46	; 0x2e
   b64e6:	d010      	beq.n	b650a <_ZN7FatFile8openNextEPS_i+0x58>
   b64e8:	2ee5      	cmp	r6, #229	; 0xe5
   b64ea:	d00e      	beq.n	b650a <_ZN7FatFile8openNextEPS_i+0x58>
   b64ec:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b64ee:	071a      	lsls	r2, r3, #28
   b64f0:	d413      	bmi.n	b651a <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b64f2:	b964      	cbnz	r4, b650e <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b64f4:	9400      	str	r4, [sp, #0]
   b64f6:	4653      	mov	r3, sl
   b64f8:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b64fc:	4629      	mov	r1, r5
   b64fe:	4638      	mov	r0, r7
   b6500:	f7ff ff6d 	bl	b63de <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6504:	b002      	add	sp, #8
   b6506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b650a:	2400      	movs	r4, #0
   b650c:	e7e1      	b.n	b64d2 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b650e:	f000 f971 	bl	b67f4 <_ZN7FatFile11lfnChecksumEPh>
   b6512:	4540      	cmp	r0, r8
   b6514:	d0ee      	beq.n	b64f4 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6516:	2000      	movs	r0, #0
   b6518:	e7f4      	b.n	b6504 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b651a:	2b0f      	cmp	r3, #15
   b651c:	d1f5      	bne.n	b650a <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b651e:	0673      	lsls	r3, r6, #25
   b6520:	d5d7      	bpl.n	b64d2 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b6522:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6526:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b652a:	e7d2      	b.n	b64d2 <_ZN7FatFile8openNextEPS_i+0x20>

000b652c <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b652c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b652e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6530:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6532:	b90b      	cbnz	r3, b6538 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6534:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6536:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6538:	7883      	ldrb	r3, [r0, #2]
   b653a:	075a      	lsls	r2, r3, #29
   b653c:	d523      	bpl.n	b6586 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b653e:	2101      	movs	r1, #1
   b6540:	f7ff fdea 	bl	b6118 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6544:	4605      	mov	r5, r0
   b6546:	b928      	cbnz	r0, b6554 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6548:	7863      	ldrb	r3, [r4, #1]
   b654a:	f043 0301 	orr.w	r3, r3, #1
   b654e:	7063      	strb	r3, [r4, #1]
  return false;
   b6550:	2000      	movs	r0, #0
   b6552:	e7f0      	b.n	b6536 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6554:	7803      	ldrb	r3, [r0, #0]
   b6556:	2be5      	cmp	r3, #229	; 0xe5
   b6558:	d0f6      	beq.n	b6548 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b655a:	7823      	ldrb	r3, [r4, #0]
   b655c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b655e:	bf44      	itt	mi
   b6560:	69e3      	ldrmi	r3, [r4, #28]
   b6562:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6564:	6a23      	ldr	r3, [r4, #32]
   b6566:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6568:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b656a:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b656c:	4b09      	ldr	r3, [pc, #36]	; (b6594 <_ZN7FatFile4syncEv+0x68>)
   b656e:	681b      	ldr	r3, [r3, #0]
   b6570:	b12b      	cbz	r3, b657e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6572:	f100 0116 	add.w	r1, r0, #22
   b6576:	3018      	adds	r0, #24
   b6578:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b657a:	8b2b      	ldrh	r3, [r5, #24]
   b657c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b657e:	78a3      	ldrb	r3, [r4, #2]
   b6580:	f023 0304 	bic.w	r3, r3, #4
   b6584:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6586:	68a0      	ldr	r0, [r4, #8]
   b6588:	f7ff fd70 	bl	b606c <_ZN9FatVolume9cacheSyncEv>
   b658c:	2800      	cmp	r0, #0
   b658e:	d0db      	beq.n	b6548 <_ZN7FatFile4syncEv+0x1c>
   b6590:	e7d0      	b.n	b6534 <_ZN7FatFile4syncEv+0x8>
   b6592:	bf00      	nop
   b6594:	2003e610 	.word	0x2003e610

000b6598 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6598:	b510      	push	{r4, lr}
   b659a:	4604      	mov	r4, r0
  bool rtn = sync();
   b659c:	f7ff ffc6 	bl	b652c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b65a0:	2300      	movs	r3, #0
   b65a2:	7023      	strb	r3, [r4, #0]
}
   b65a4:	bd10      	pop	{r4, pc}

000b65a6 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b65a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65a8:	b093      	sub	sp, #76	; 0x4c
   b65aa:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b65ac:	2300      	movs	r3, #0
   b65ae:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b65b0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b65b2:	9201      	str	r2, [sp, #4]
   b65b4:	4606      	mov	r6, r0
   b65b6:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b65b8:	b113      	cbz	r3, b65c0 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b65ba:	2000      	movs	r0, #0
}
   b65bc:	b013      	add	sp, #76	; 0x4c
   b65be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b65c0:	780b      	ldrb	r3, [r1, #0]
   b65c2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b65c6:	d0f8      	beq.n	b65ba <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b65c8:	7813      	ldrb	r3, [r2, #0]
   b65ca:	2b2f      	cmp	r3, #47	; 0x2f
   b65cc:	d112      	bne.n	b65f4 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b65ce:	9a01      	ldr	r2, [sp, #4]
   b65d0:	7813      	ldrb	r3, [r2, #0]
   b65d2:	2b2f      	cmp	r3, #47	; 0x2f
   b65d4:	d102      	bne.n	b65dc <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b65d6:	3201      	adds	r2, #1
   b65d8:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b65da:	e7f8      	b.n	b65ce <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b65dc:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b65de:	b91b      	cbnz	r3, b65e8 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b65e0:	4630      	mov	r0, r6
   b65e2:	f7ff fdd3 	bl	b618c <_ZN7FatFile8openRootEP9FatVolume>
   b65e6:	e7e9      	b.n	b65bc <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b65e8:	a809      	add	r0, sp, #36	; 0x24
   b65ea:	f7ff fd29 	bl	b6040 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b65ee:	2800      	cmp	r0, #0
   b65f0:	d0e3      	beq.n	b65ba <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b65f2:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b65f4:	9801      	ldr	r0, [sp, #4]
   b65f6:	aa01      	add	r2, sp, #4
   b65f8:	a903      	add	r1, sp, #12
   b65fa:	f000 f98f 	bl	b691c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b65fe:	2800      	cmp	r0, #0
   b6600:	d0db      	beq.n	b65ba <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6602:	9b01      	ldr	r3, [sp, #4]
   b6604:	781b      	ldrb	r3, [r3, #0]
   b6606:	b19b      	cbz	r3, b6630 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6608:	2300      	movs	r3, #0
   b660a:	aa03      	add	r2, sp, #12
   b660c:	4621      	mov	r1, r4
   b660e:	4630      	mov	r0, r6
   b6610:	f000 fab6 	bl	b6b80 <_ZN7FatFile4openEPS_P7fname_ti>
   b6614:	2800      	cmp	r0, #0
   b6616:	d0d0      	beq.n	b65ba <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6618:	4635      	mov	r5, r6
   b661a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b661c:	ac09      	add	r4, sp, #36	; 0x24
   b661e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6624:	682b      	ldr	r3, [r5, #0]
   b6626:	6023      	str	r3, [r4, #0]
    close();
   b6628:	4630      	mov	r0, r6
   b662a:	f7ff ffb5 	bl	b6598 <_ZN7FatFile5closeEv>
  while (1) {
   b662e:	e7e0      	b.n	b65f2 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6630:	463b      	mov	r3, r7
   b6632:	aa03      	add	r2, sp, #12
   b6634:	4621      	mov	r1, r4
   b6636:	4630      	mov	r0, r6
   b6638:	f000 faa2 	bl	b6b80 <_ZN7FatFile4openEPS_P7fname_ti>
   b663c:	e7be      	b.n	b65bc <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6640 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6644:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6646:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6648:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b664a:	4604      	mov	r4, r0
   b664c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b664e:	d55b      	bpl.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
   b6650:	7883      	ldrb	r3, [r0, #2]
   b6652:	079a      	lsls	r2, r3, #30
   b6654:	d558      	bpl.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6656:	071b      	lsls	r3, r3, #28
   b6658:	d451      	bmi.n	b66fe <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b665a:	6963      	ldr	r3, [r4, #20]
   b665c:	43db      	mvns	r3, r3
   b665e:	42bb      	cmp	r3, r7
   b6660:	d352      	bcc.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
   b6662:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6664:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6668:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b666a:	f1b8 0f00 	cmp.w	r8, #0
   b666e:	f000 8091 	beq.w	b6794 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6672:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6674:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6676:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b667a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b667e:	d10e      	bne.n	b669e <_ZN7FatFile5writeEPKvj+0x5e>
   b6680:	b96d      	cbnz	r5, b669e <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6682:	6921      	ldr	r1, [r4, #16]
   b6684:	2900      	cmp	r1, #0
   b6686:	d046      	beq.n	b6716 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6688:	4652      	mov	r2, sl
   b668a:	f000 fcab 	bl	b6fe4 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b668e:	2800      	cmp	r0, #0
   b6690:	db3a      	blt.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6692:	d104      	bne.n	b669e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6694:	4620      	mov	r0, r4
   b6696:	f7ff fcf6 	bl	b6086 <_ZN7FatFile10addClusterEv>
   b669a:	2800      	cmp	r0, #0
   b669c:	d034      	beq.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b669e:	6921      	ldr	r1, [r4, #16]
   b66a0:	68a0      	ldr	r0, [r4, #8]
   b66a2:	f000 fc99 	bl	b6fd8 <_ZNK9FatVolume17clusterFirstBlockEm>
   b66a6:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b66a8:	68a0      	ldr	r0, [r4, #8]
   b66aa:	b915      	cbnz	r5, b66b2 <_ZN7FatFile5writeEPKvj+0x72>
   b66ac:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b66b0:	d23f      	bcs.n	b6732 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b66b2:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b66b6:	4546      	cmp	r6, r8
   b66b8:	bf28      	it	cs
   b66ba:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b66bc:	2d00      	cmp	r5, #0
   b66be:	d136      	bne.n	b672e <_ZN7FatFile5writeEPKvj+0xee>
   b66c0:	6962      	ldr	r2, [r4, #20]
   b66c2:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b66c4:	429a      	cmp	r2, r3
   b66c6:	bf34      	ite	cc
   b66c8:	2201      	movcc	r2, #1
   b66ca:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b66cc:	3024      	adds	r0, #36	; 0x24
   b66ce:	f000 fc60 	bl	b6f92 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b66d2:	b1c8      	cbz	r0, b6708 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b66d4:	4428      	add	r0, r5
   b66d6:	4632      	mov	r2, r6
   b66d8:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b66da:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b66dc:	f00d f9b8 	bl	c3a50 <memcpy>
      if (512 == (n + blockOffset)) {
   b66e0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b66e4:	d104      	bne.n	b66f0 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b66e6:	68a0      	ldr	r0, [r4, #8]
   b66e8:	3024      	adds	r0, #36	; 0x24
   b66ea:	f000 fc2a 	bl	b6f42 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b66ee:	b158      	cbz	r0, b6708 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b66f0:	6963      	ldr	r3, [r4, #20]
   b66f2:	4433      	add	r3, r6
   b66f4:	6163      	str	r3, [r4, #20]
    src += n;
   b66f6:	44b1      	add	r9, r6
    nToWrite -= n;
   b66f8:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b66fc:	e7b4      	b.n	b6668 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b66fe:	69c1      	ldr	r1, [r0, #28]
   b6700:	f7ff fe2a 	bl	b6358 <_ZN7FatFile7seekSetEm>
   b6704:	2800      	cmp	r0, #0
   b6706:	d1a8      	bne.n	b665a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6708:	7863      	ldrb	r3, [r4, #1]
   b670a:	f043 0301 	orr.w	r3, r3, #1
   b670e:	7063      	strb	r3, [r4, #1]
  return -1;
   b6710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6714:	e050      	b.n	b67b8 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6716:	6a23      	ldr	r3, [r4, #32]
   b6718:	b93b      	cbnz	r3, b672a <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b671a:	4620      	mov	r0, r4
   b671c:	f7ff fcb3 	bl	b6086 <_ZN7FatFile10addClusterEv>
   b6720:	2800      	cmp	r0, #0
   b6722:	d0f1      	beq.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6724:	6923      	ldr	r3, [r4, #16]
   b6726:	6223      	str	r3, [r4, #32]
   b6728:	e7b9      	b.n	b669e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b672a:	6123      	str	r3, [r4, #16]
   b672c:	e7b7      	b.n	b669e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b672e:	2201      	movs	r2, #1
   b6730:	e7cc      	b.n	b66cc <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6732:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6736:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6738:	d31b      	bcc.n	b6772 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b673a:	f890 c004 	ldrb.w	ip, [r0, #4]
   b673e:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6742:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6744:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6748:	4573      	cmp	r3, lr
   b674a:	bf28      	it	cs
   b674c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b674e:	4291      	cmp	r1, r2
      n = 512*nb;
   b6750:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6754:	d307      	bcc.n	b6766 <_ZN7FatFile5writeEPKvj+0x126>
   b6756:	441a      	add	r2, r3
   b6758:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b675a:	bf82      	ittt	hi
   b675c:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6760:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6764:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6766:	68a5      	ldr	r5, [r4, #8]
   b6768:	464a      	mov	r2, r9
   b676a:	6828      	ldr	r0, [r5, #0]
   b676c:	f000 fff3 	bl	b7756 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6770:	e7bd      	b.n	b66ee <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6772:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6774:	bf02      	ittt	eq
   b6776:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b677a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b677e:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6780:	68a3      	ldr	r3, [r4, #8]
   b6782:	464a      	mov	r2, r9
   b6784:	6818      	ldr	r0, [r3, #0]
   b6786:	f000 ff70 	bl	b766a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b678a:	2800      	cmp	r0, #0
   b678c:	d0bc      	beq.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b678e:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6792:	e7ad      	b.n	b66f0 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6794:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6796:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6798:	42b2      	cmp	r2, r6
   b679a:	d204      	bcs.n	b67a6 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b679c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b679e:	f043 0304 	orr.w	r3, r3, #4
   b67a2:	70a3      	strb	r3, [r4, #2]
   b67a4:	e003      	b.n	b67ae <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b67a6:	4a08      	ldr	r2, [pc, #32]	; (b67c8 <_ZN7FatFile5writeEPKvj+0x188>)
   b67a8:	6812      	ldr	r2, [r2, #0]
   b67aa:	2a00      	cmp	r2, #0
   b67ac:	d1f7      	bne.n	b679e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b67ae:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b67b2:	2b00      	cmp	r3, #0
   b67b4:	db02      	blt.n	b67bc <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b67b6:	4638      	mov	r0, r7
}
   b67b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b67bc:	4620      	mov	r0, r4
   b67be:	f7ff feb5 	bl	b652c <_ZN7FatFile4syncEv>
   b67c2:	2800      	cmp	r0, #0
   b67c4:	d1f7      	bne.n	b67b6 <_ZN7FatFile5writeEPKvj+0x176>
   b67c6:	e79f      	b.n	b6708 <_ZN7FatFile5writeEPKvj+0xc8>
   b67c8:	2003e610 	.word	0x2003e610

000b67cc <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b67cc:	2904      	cmp	r1, #4
   b67ce:	d804      	bhi.n	b67da <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b67d0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b67d4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b67d8:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b67da:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b67dc:	bf9b      	ittet	ls
   b67de:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b67e2:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b67e6:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b67e8:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b67ea:	bf84      	itt	hi
   b67ec:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b67f0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b67f2:	4770      	bx	lr

000b67f4 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b67f4:	1e41      	subs	r1, r0, #1
   b67f6:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b67fa:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b67fc:	0842      	lsrs	r2, r0, #1
   b67fe:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6802:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6806:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b680a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b680c:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b680e:	d1f5      	bne.n	b67fc <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6810:	4770      	bx	lr

000b6812 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6812:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6814:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6816:	4604      	mov	r4, r0
   b6818:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b681a:	b923      	cbnz	r3, b6826 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b681c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6820:	6889      	ldr	r1, [r1, #8]
   b6822:	f7ff bcb3 	b.w	b618c <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6826:	2224      	movs	r2, #36	; 0x24
   b6828:	2100      	movs	r1, #0
   b682a:	f00d f939 	bl	c3aa0 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b682e:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6830:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6832:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6834:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6836:	68ab      	ldr	r3, [r5, #8]
   b6838:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b683a:	68eb      	ldr	r3, [r5, #12]
   b683c:	6223      	str	r3, [r4, #32]
}
   b683e:	bd38      	pop	{r3, r4, r5, pc}

000b6840 <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b6840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6844:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6846:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6848:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b684c:	4606      	mov	r6, r0
   b684e:	460f      	mov	r7, r1
   b6850:	4690      	mov	r8, r2
   b6852:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6856:	2b00      	cmp	r3, #0
   b6858:	d05d      	beq.n	b6916 <_ZN7FatFile7getNameEPcj+0xd6>
   b685a:	2a0c      	cmp	r2, #12
   b685c:	d95b      	bls.n	b6916 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b685e:	78c3      	ldrb	r3, [r0, #3]
   b6860:	b933      	cbnz	r3, b6870 <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b6862:	f000 fb57 	bl	b6f14 <_ZN7FatFile6getSFNEPc>
   b6866:	4604      	mov	r4, r0
}
   b6868:	4620      	mov	r0, r4
   b686a:	b00d      	add	sp, #52	; 0x34
   b686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b6870:	4601      	mov	r1, r0
   b6872:	a803      	add	r0, sp, #12
   b6874:	f7ff ffcd 	bl	b6812 <_ZN7FatFile11openClusterEPS_>
   b6878:	2800      	cmp	r0, #0
   b687a:	d04c      	beq.n	b6916 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b687c:	eb07 0308 	add.w	r3, r7, r8
   b6880:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6884:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b6888:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b688a:	78f3      	ldrb	r3, [r6, #3]
   b688c:	fa5f f58b 	uxtb.w	r5, fp
   b6890:	42ab      	cmp	r3, r5
   b6892:	d340      	bcc.n	b6916 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6894:	88b1      	ldrh	r1, [r6, #4]
   b6896:	eba1 010b 	sub.w	r1, r1, fp
   b689a:	0149      	lsls	r1, r1, #5
   b689c:	a803      	add	r0, sp, #12
   b689e:	f7ff fd5b 	bl	b6358 <_ZN7FatFile7seekSetEm>
   b68a2:	4604      	mov	r4, r0
   b68a4:	2800      	cmp	r0, #0
   b68a6:	d036      	beq.n	b6916 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b68a8:	2100      	movs	r1, #0
   b68aa:	a803      	add	r0, sp, #12
   b68ac:	f7ff fd35 	bl	b631a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b68b0:	4603      	mov	r3, r0
   b68b2:	b380      	cbz	r0, b6916 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b68b4:	7ac2      	ldrb	r2, [r0, #11]
   b68b6:	2a0f      	cmp	r2, #15
   b68b8:	d12d      	bne.n	b6916 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b68ba:	7802      	ldrb	r2, [r0, #0]
   b68bc:	f002 021f 	and.w	r2, r2, #31
   b68c0:	42aa      	cmp	r2, r5
   b68c2:	d128      	bne.n	b6916 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b68c4:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b68c8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b68cc:	197a      	adds	r2, r7, r5
   b68ce:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b68d0:	4618      	mov	r0, r3
   b68d2:	9101      	str	r1, [sp, #4]
   b68d4:	f7ff ff7a 	bl	b67cc <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b68d8:	b168      	cbz	r0, b68f6 <_ZN7FatFile7getNameEPcj+0xb6>
   b68da:	45a8      	cmp	r8, r5
   b68dc:	d912      	bls.n	b6904 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b68de:	9901      	ldr	r1, [sp, #4]
   b68e0:	3101      	adds	r1, #1
   b68e2:	287f      	cmp	r0, #127	; 0x7f
   b68e4:	b2c9      	uxtb	r1, r1
   b68e6:	bf28      	it	cs
   b68e8:	203f      	movcs	r0, #63	; 0x3f
   b68ea:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b68ec:	f802 0b01 	strb.w	r0, [r2], #1
   b68f0:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b68f4:	d1ec      	bne.n	b68d0 <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b68f6:	45a8      	cmp	r8, r5
   b68f8:	d904      	bls.n	b6904 <_ZN7FatFile7getNameEPcj+0xc4>
   b68fa:	781a      	ldrb	r2, [r3, #0]
   b68fc:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b68fe:	bf48      	it	mi
   b6900:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6904:	9a00      	ldr	r2, [sp, #0]
   b6906:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b690a:	781b      	ldrb	r3, [r3, #0]
   b690c:	065b      	lsls	r3, r3, #25
   b690e:	f10b 0b01 	add.w	fp, fp, #1
   b6912:	d5ba      	bpl.n	b688a <_ZN7FatFile7getNameEPcj+0x4a>
   b6914:	e7a8      	b.n	b6868 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6916:	2400      	movs	r4, #0
   b6918:	703c      	strb	r4, [r7, #0]
  return false;
   b691a:	e7a5      	b.n	b6868 <_ZN7FatFile7getNameEPcj+0x28>

000b691c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6920:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6922:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6926:	2b20      	cmp	r3, #32
   b6928:	d0fa      	beq.n	b6920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b692a:	4d6a      	ldr	r5, [pc, #424]	; (b6ad4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b692c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b692e:	2400      	movs	r4, #0
    c = path[len];
   b6930:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6932:	b1c3      	cbz	r3, b6966 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6934:	2b2f      	cmp	r3, #47	; 0x2f
   b6936:	d016      	beq.n	b6966 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6938:	2b5c      	cmp	r3, #92	; 0x5c
   b693a:	d102      	bne.n	b6942 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b693c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6942:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6946:	b2c0      	uxtb	r0, r0
   b6948:	281d      	cmp	r0, #29
   b694a:	d803      	bhi.n	b6954 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b694c:	fa25 f000 	lsr.w	r0, r5, r0
   b6950:	07c0      	lsls	r0, r0, #31
   b6952:	d4f3      	bmi.n	b693c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6954:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6958:	283c      	cmp	r0, #60	; 0x3c
   b695a:	d0ef      	beq.n	b693c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b695c:	3b20      	subs	r3, #32
   b695e:	2b5e      	cmp	r3, #94	; 0x5e
   b6960:	d8ec      	bhi.n	b693c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6962:	3401      	adds	r4, #1
    c = path[len];
   b6964:	e7e4      	b.n	b6930 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6966:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6968:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b696a:	4607      	mov	r7, r0
   b696c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6970:	2d20      	cmp	r5, #32
   b6972:	d0fa      	beq.n	b696a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6974:	2d2f      	cmp	r5, #47	; 0x2f
   b6976:	d0f8      	beq.n	b696a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6978:	6017      	str	r7, [r2, #0]
  while (len) {
   b697a:	b14c      	cbz	r4, b6990 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b697c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6980:	2a2e      	cmp	r2, #46	; 0x2e
   b6982:	d001      	beq.n	b6988 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6984:	2a20      	cmp	r2, #32
   b6986:	d101      	bne.n	b698c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6988:	3c01      	subs	r4, #1
  while (len) {
   b698a:	e7f6      	b.n	b697a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b698c:	2cff      	cmp	r4, #255	; 0xff
   b698e:	dcd5      	bgt.n	b693c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6990:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6994:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6998:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b699a:	f8c1 300d 	str.w	r3, [r1, #13]
   b699e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b69a0:	f04f 0800 	mov.w	r8, #0
   b69a4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b69a8:	2b2e      	cmp	r3, #46	; 0x2e
   b69aa:	d001      	beq.n	b69b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b69ac:	2b20      	cmp	r3, #32
   b69ae:	d102      	bne.n	b69b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b69b0:	f108 0801 	add.w	r8, r8, #1
   b69b4:	e7f6      	b.n	b69a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b69b6:	fab8 f088 	clz	r0, r8
   b69ba:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b69bc:	1e65      	subs	r5, r4, #1
   b69be:	1c6b      	adds	r3, r5, #1
   b69c0:	d002      	beq.n	b69c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b69c2:	5d73      	ldrb	r3, [r6, r5]
   b69c4:	2b2e      	cmp	r3, #46	; 0x2e
   b69c6:	d114      	bne.n	b69f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b69c8:	f04f 0900 	mov.w	r9, #0
   b69cc:	2707      	movs	r7, #7
   b69ce:	464a      	mov	r2, r9
   b69d0:	46ca      	mov	sl, r9
   b69d2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b69d6:	45a0      	cmp	r8, r4
   b69d8:	da68      	bge.n	b6aac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b69da:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b69de:	2b20      	cmp	r3, #32
   b69e0:	d003      	beq.n	b69ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b69e2:	2b2e      	cmp	r3, #46	; 0x2e
   b69e4:	d107      	bne.n	b69f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b69e6:	45a8      	cmp	r8, r5
   b69e8:	d012      	beq.n	b6a10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b69ea:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b69ec:	f108 0801 	add.w	r8, r8, #1
   b69f0:	e7f1      	b.n	b69d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b69f2:	3d01      	subs	r5, #1
   b69f4:	e7e3      	b.n	b69be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b69f6:	2b22      	cmp	r3, #34	; 0x22
   b69f8:	d008      	beq.n	b6a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b69fa:	2b7c      	cmp	r3, #124	; 0x7c
   b69fc:	d006      	beq.n	b6a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b69fe:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6a02:	f1bc 0f05 	cmp.w	ip, #5
   b6a06:	d80a      	bhi.n	b6a1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6a08:	2b2d      	cmp	r3, #45	; 0x2d
   b6a0a:	d012      	beq.n	b6a32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6a0c:	45a8      	cmp	r8, r5
   b6a0e:	d15b      	bne.n	b6ac8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6a10:	2f0a      	cmp	r7, #10
   b6a12:	d04a      	beq.n	b6aaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6a14:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6a16:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6a18:	f04f 0e10 	mov.w	lr, #16
   b6a1c:	e7e6      	b.n	b69ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6a1e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6a22:	f1bc 0f05 	cmp.w	ip, #5
   b6a26:	d9f1      	bls.n	b6a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6a28:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6a2c:	f1bc 0f02 	cmp.w	ip, #2
   b6a30:	d9ec      	bls.n	b6a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6a32:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6a36:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6a3a:	d8e7      	bhi.n	b6a0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6a3c:	45a8      	cmp	r8, r5
   b6a3e:	d0e7      	beq.n	b6a10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6a40:	42ba      	cmp	r2, r7
   b6a42:	d830      	bhi.n	b6aa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6a44:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6a48:	f1bc 0f19 	cmp.w	ip, #25
   b6a4c:	d81a      	bhi.n	b6a84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6a4e:	3b20      	subs	r3, #32
        lc |= bit;
   b6a50:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6a54:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6a56:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6a5a:	f102 0c01 	add.w	ip, r2, #1
   b6a5e:	fa5f fc8c 	uxtb.w	ip, ip
   b6a62:	440a      	add	r2, r1
      if (i < 7) {
   b6a64:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6a68:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6a6a:	d801      	bhi.n	b6a70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6a6c:	f881 c00c 	strb.w	ip, [r1, #12]
   b6a70:	4662      	mov	r2, ip
   b6a72:	e7bb      	b.n	b69ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6a74:	45a8      	cmp	r8, r5
   b6a76:	dc18      	bgt.n	b6aaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6a78:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6a7a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6a7c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6a7e:	f04f 0e10 	mov.w	lr, #16
   b6a82:	e7b2      	b.n	b69ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6a84:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6a88:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6a8c:	bf98      	it	ls
   b6a8e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6a92:	e7e2      	b.n	b6a5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6a94:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6a96:	2001      	movs	r0, #1
   b6a98:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6a9a:	4419      	add	r1, r3
   b6a9c:	237e      	movs	r3, #126	; 0x7e
   b6a9e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6aa0:	2331      	movs	r3, #49	; 0x31
   b6aa2:	738b      	strb	r3, [r1, #14]
   b6aa4:	e74b      	b.n	b693e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6aa6:	2f0a      	cmp	r7, #10
   b6aa8:	d1e4      	bne.n	b6a74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6aaa:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6aac:	7b4b      	ldrb	r3, [r1, #13]
   b6aae:	2b20      	cmp	r3, #32
   b6ab0:	f43f af44 	beq.w	b693c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6ab4:	2800      	cmp	r0, #0
   b6ab6:	d0ed      	beq.n	b6a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6ab8:	ea1a 0f09 	tst.w	sl, r9
   b6abc:	bf18      	it	ne
   b6abe:	f04f 0902 	movne.w	r9, #2
   b6ac2:	f881 9000 	strb.w	r9, [r1]
   b6ac6:	e73a      	b.n	b693e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6ac8:	42ba      	cmp	r2, r7
   b6aca:	d8ec      	bhi.n	b6aa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6acc:	2000      	movs	r0, #0
      c = '_';
   b6ace:	235f      	movs	r3, #95	; 0x5f
   b6ad0:	e7c3      	b.n	b6a5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6ad2:	bf00      	nop
   b6ad4:	31000101 	.word	0x31000101

000b6ad8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6adc:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6ae0:	4606      	mov	r6, r0
   b6ae2:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6ae4:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6ae6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6ae8:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6aec:	6861      	ldr	r1, [r4, #4]
   b6aee:	68a2      	ldr	r2, [r4, #8]
   b6af0:	186b      	adds	r3, r5, r1
   b6af2:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6af4:	4411      	add	r1, r2
   b6af6:	4291      	cmp	r1, r2
   b6af8:	d006      	beq.n	b6b08 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6afa:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6afe:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6b02:	4043      	eors	r3, r0
   b6b04:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6b06:	e7f6      	b.n	b6af6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6b08:	f1b9 0f03 	cmp.w	r9, #3
   b6b0c:	bf28      	it	cs
   b6b0e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b12:	f109 0204 	add.w	r2, r9, #4
   b6b16:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6b18:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b1c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b1e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b20:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b22:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b24:	bf94      	ite	ls
   b6b26:	3130      	addls	r1, #48	; 0x30
   b6b28:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b2a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b2c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6b2e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b32:	d1f1      	bne.n	b6b18 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6b34:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6b38:	2100      	movs	r1, #0
   b6b3a:	735f      	strb	r7, [r3, #13]
   b6b3c:	4630      	mov	r0, r6
   b6b3e:	f7ff fc0b 	bl	b6358 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6b42:	2101      	movs	r1, #1
   b6b44:	4630      	mov	r0, r6
   b6b46:	f7ff fbe8 	bl	b631a <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6b4a:	4601      	mov	r1, r0
   b6b4c:	b928      	cbnz	r0, b6b5a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6b4e:	7870      	ldrb	r0, [r6, #1]
   b6b50:	fab0 f080 	clz	r0, r0
   b6b54:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6b5a:	7803      	ldrb	r3, [r0, #0]
   b6b5c:	b16b      	cbz	r3, b6b7a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6b5e:	7ac3      	ldrb	r3, [r0, #11]
   b6b60:	071b      	lsls	r3, r3, #28
   b6b62:	d4ee      	bmi.n	b6b42 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6b64:	220b      	movs	r2, #11
   b6b66:	4640      	mov	r0, r8
   b6b68:	f00c ff62 	bl	c3a30 <memcmp>
   b6b6c:	2800      	cmp	r0, #0
   b6b6e:	d1e8      	bne.n	b6b42 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6b70:	3501      	adds	r5, #1
   b6b72:	b2ad      	uxth	r5, r5
   b6b74:	2d64      	cmp	r5, #100	; 0x64
   b6b76:	d1b9      	bne.n	b6aec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6b78:	e7ed      	b.n	b6b56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6b7a:	2001      	movs	r0, #1
   b6b7c:	e7eb      	b.n	b6b56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6b80 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b84:	ed2d 8b02 	vpush	{d8}
   b6b88:	b08b      	sub	sp, #44	; 0x2c
   b6b8a:	460d      	mov	r5, r1
   b6b8c:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6b8e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6b90:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6b92:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6b96:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6b98:	d105      	bne.n	b6ba6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6b9a:	2000      	movs	r0, #0
}
   b6b9c:	b00b      	add	sp, #44	; 0x2c
   b6b9e:	ecbd 8b02 	vpop	{d8}
   b6ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6ba6:	9b07      	ldr	r3, [sp, #28]
   b6ba8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6baa:	2b00      	cmp	r3, #0
   b6bac:	d1f5      	bne.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6bae:	6853      	ldr	r3, [r2, #4]
   b6bb0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6bb2:	7813      	ldrb	r3, [r2, #0]
   b6bb4:	079c      	lsls	r4, r3, #30
   b6bb6:	bf1f      	itttt	ne
   b6bb8:	9b05      	ldrne	r3, [sp, #20]
   b6bba:	330c      	addne	r3, #12
   b6bbc:	220d      	movne	r2, #13
   b6bbe:	fbb3 f3f2 	udivne	r3, r3, r2
   b6bc2:	bf1a      	itte	ne
   b6bc4:	3301      	addne	r3, #1
   b6bc6:	b2db      	uxtbne	r3, r3
   b6bc8:	2301      	moveq	r3, #1
    seekSet(0);
   b6bca:	2100      	movs	r1, #0
   b6bcc:	4628      	mov	r0, r5
   b6bce:	9303      	str	r3, [sp, #12]
   b6bd0:	f7ff fbc2 	bl	b6358 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6bd4:	f107 030d 	add.w	r3, r7, #13
  }
   b6bd8:	f04f 0b00 	mov.w	fp, #0
   b6bdc:	ee08 3a10 	vmov	s16, r3
   b6be0:	46da      	mov	sl, fp
   b6be2:	465c      	mov	r4, fp
   b6be4:	465e      	mov	r6, fp
   b6be6:	f8cd b010 	str.w	fp, [sp, #16]
   b6bea:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6bec:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6bee:	2101      	movs	r1, #1
   b6bf0:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6bf2:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6bf6:	f7ff fb90 	bl	b631a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6bfa:	4603      	mov	r3, r0
   b6bfc:	2800      	cmp	r0, #0
   b6bfe:	d171      	bne.n	b6ce4 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6c00:	786b      	ldrb	r3, [r5, #1]
   b6c02:	2b00      	cmp	r3, #0
   b6c04:	d1c9      	bne.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6c06:	9b06      	ldr	r3, [sp, #24]
   b6c08:	059a      	lsls	r2, r3, #22
   b6c0a:	d5c6      	bpl.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6c0c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6c10:	3b01      	subs	r3, #1
   b6c12:	2b01      	cmp	r3, #1
   b6c14:	d8c1      	bhi.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6c16:	9b04      	ldr	r3, [sp, #16]
   b6c18:	2c00      	cmp	r4, #0
   b6c1a:	bf08      	it	eq
   b6c1c:	4643      	moveq	r3, r8
   b6c1e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6c20:	9b03      	ldr	r3, [sp, #12]
   b6c22:	429c      	cmp	r4, r3
   b6c24:	f0c0 80f1 	bcc.w	b6e0a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6c28:	f1b9 0f00 	cmp.w	r9, #0
   b6c2c:	f040 810a 	bne.w	b6e44 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6c30:	9b04      	ldr	r3, [sp, #16]
   b6c32:	4628      	mov	r0, r5
   b6c34:	0159      	lsls	r1, r3, #5
   b6c36:	f7ff fb8f 	bl	b6358 <_ZN7FatFile7seekSetEm>
   b6c3a:	2800      	cmp	r0, #0
   b6c3c:	d0ad      	beq.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6c3e:	9b03      	ldr	r3, [sp, #12]
   b6c40:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b6c44:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c48:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c4a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6c4e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c52:	2e00      	cmp	r6, #0
   b6c54:	f000 810d 	beq.w	b6e72 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c58:	2100      	movs	r1, #0
   b6c5a:	4628      	mov	r0, r5
   b6c5c:	f7ff fb5d 	bl	b631a <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6c60:	4604      	mov	r4, r0
   b6c62:	2800      	cmp	r0, #0
   b6c64:	d099      	beq.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6c66:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6c68:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6c6c:	454e      	cmp	r6, r9
   b6c6e:	f043 0301 	orr.w	r3, r3, #1
   b6c72:	bf0c      	ite	eq
   b6c74:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6c78:	46b3      	movne	fp, r6
   b6c7a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6c7e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6c82:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6c86:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6c8a:	f107 000d 	add.w	r0, r7, #13
   b6c8e:	f7ff fdb1 	bl	b67f4 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6c92:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6c96:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6c98:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6c9c:	f00b 031f 	and.w	r3, fp, #31
   b6ca0:	220d      	movs	r2, #13
   b6ca2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6ca4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6ca8:	4353      	muls	r3, r2
   b6caa:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6cac:	9905      	ldr	r1, [sp, #20]
   b6cae:	4299      	cmp	r1, r3
   b6cb0:	f240 80d0 	bls.w	b6e54 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6cb4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6cb8:	2a04      	cmp	r2, #4
   b6cba:	fa5f fe82 	uxtb.w	lr, r2
   b6cbe:	f102 0001 	add.w	r0, r2, #1
   b6cc2:	f200 80cd 	bhi.w	b6e60 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6cc6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6cca:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6cce:	280d      	cmp	r0, #13
   b6cd0:	f103 0301 	add.w	r3, r3, #1
   b6cd4:	4602      	mov	r2, r0
   b6cd6:	d1e9      	bne.n	b6cac <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6cd8:	3e01      	subs	r6, #1
   b6cda:	b2f6      	uxtb	r6, r6
   b6cdc:	e7b9      	b.n	b6c52 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6cde:	f04f 0901 	mov.w	r9, #1
   b6ce2:	e783      	b.n	b6bec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6ce4:	7802      	ldrb	r2, [r0, #0]
   b6ce6:	2ae5      	cmp	r2, #229	; 0xe5
   b6ce8:	d000      	beq.n	b6cec <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6cea:	b97a      	cbnz	r2, b6d0c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6cec:	9904      	ldr	r1, [sp, #16]
   b6cee:	2c00      	cmp	r4, #0
   b6cf0:	bf08      	it	eq
   b6cf2:	4641      	moveq	r1, r8
   b6cf4:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6cf6:	9903      	ldr	r1, [sp, #12]
   b6cf8:	428c      	cmp	r4, r1
        freeFound++;
   b6cfa:	bf3c      	itt	cc
   b6cfc:	3401      	addcc	r4, #1
   b6cfe:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6d00:	2a00      	cmp	r2, #0
   b6d02:	d080      	beq.n	b6c06 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d04:	2ae5      	cmp	r2, #229	; 0xe5
   b6d06:	d105      	bne.n	b6d14 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6d08:	2600      	movs	r6, #0
   b6d0a:	e76f      	b.n	b6bec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6d0c:	9903      	ldr	r1, [sp, #12]
   b6d0e:	428c      	cmp	r4, r1
   b6d10:	bf38      	it	cc
   b6d12:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d14:	2a2e      	cmp	r2, #46	; 0x2e
   b6d16:	d0f7      	beq.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6d18:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6d1a:	290f      	cmp	r1, #15
   b6d1c:	d14a      	bne.n	b6db4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6d1e:	bb16      	cbnz	r6, b6d66 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6d20:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6d24:	f43f af62 	beq.w	b6bec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d28:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6d2c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d30:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6d32:	220d      	movs	r2, #13
   b6d34:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6d38:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6d3c:	9a05      	ldr	r2, [sp, #20]
   b6d3e:	4542      	cmp	r2, r8
   b6d40:	d9e2      	bls.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d42:	eba2 0208 	sub.w	r2, r2, r8
   b6d46:	9208      	str	r2, [sp, #32]
   b6d48:	2200      	movs	r2, #0
   b6d4a:	eb02 0108 	add.w	r1, r2, r8
   b6d4e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6d50:	4618      	mov	r0, r3
   b6d52:	b2d1      	uxtb	r1, r2
   b6d54:	f7ff fd3a 	bl	b67cc <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6d58:	9908      	ldr	r1, [sp, #32]
   b6d5a:	428a      	cmp	r2, r1
   b6d5c:	d10d      	bne.n	b6d7a <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6d5e:	2800      	cmp	r0, #0
   b6d60:	bf18      	it	ne
   b6d62:	2600      	movne	r6, #0
   b6d64:	e742      	b.n	b6bec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6d66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6d6a:	fa5f fa8a 	uxtb.w	sl, sl
   b6d6e:	4552      	cmp	r2, sl
   b6d70:	d1ca      	bne.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d72:	7b5a      	ldrb	r2, [r3, #13]
   b6d74:	455a      	cmp	r2, fp
   b6d76:	d0dc      	beq.n	b6d32 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6d78:	e7c6      	b.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6d7a:	28ff      	cmp	r0, #255	; 0xff
   b6d7c:	d8c4      	bhi.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d7e:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6d82:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6d86:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6d88:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6d8a:	bf9c      	itt	ls
   b6d8c:	f10e 0020 	addls.w	r0, lr, #32
   b6d90:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6d94:	4608      	mov	r0, r1
   b6d96:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6d98:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6d9a:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6d9e:	f1bc 0f19 	cmp.w	ip, #25
   b6da2:	bf9c      	itt	ls
   b6da4:	3120      	addls	r1, #32
   b6da6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6da8:	4571      	cmp	r1, lr
   b6daa:	d1ad      	bne.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6dac:	3201      	adds	r2, #1
   b6dae:	2a0d      	cmp	r2, #13
   b6db0:	d1cb      	bne.n	b6d4a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6db2:	e71b      	b.n	b6bec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6db4:	0708      	lsls	r0, r1, #28
   b6db6:	d4a7      	bmi.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6db8:	b15e      	cbz	r6, b6dd2 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6dba:	f1ba 0f01 	cmp.w	sl, #1
   b6dbe:	f47f aeec 	bne.w	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6dc2:	4618      	mov	r0, r3
   b6dc4:	f7ff fd16 	bl	b67f4 <_ZN7FatFile11lfnChecksumEPh>
   b6dc8:	4558      	cmp	r0, fp
   b6dca:	f47f aee6 	bne.w	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6dce:	46b1      	mov	r9, r6
   b6dd0:	e00e      	b.n	b6df0 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6dd2:	ee18 1a10 	vmov	r1, s16
   b6dd6:	220b      	movs	r2, #11
   b6dd8:	4618      	mov	r0, r3
   b6dda:	f00c fe29 	bl	c3a30 <memcmp>
   b6dde:	2800      	cmp	r0, #0
   b6de0:	f47f af04 	bne.w	b6bec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6de4:	f897 9000 	ldrb.w	r9, [r7]
   b6de8:	f019 0901 	ands.w	r9, r9, #1
   b6dec:	f47f af77 	bne.w	b6cde <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6df0:	9b06      	ldr	r3, [sp, #24]
   b6df2:	0519      	lsls	r1, r3, #20
   b6df4:	f53f aed1 	bmi.w	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6df8:	9b06      	ldr	r3, [sp, #24]
   b6dfa:	9807      	ldr	r0, [sp, #28]
   b6dfc:	f8cd 9000 	str.w	r9, [sp]
   b6e00:	4642      	mov	r2, r8
   b6e02:	4629      	mov	r1, r5
   b6e04:	f7ff faeb 	bl	b63de <_ZN7FatFile15openCachedEntryEPS_tih>
   b6e08:	e6c8      	b.n	b6b9c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6e0a:	2100      	movs	r1, #0
   b6e0c:	4628      	mov	r0, r5
   b6e0e:	f7ff fa84 	bl	b631a <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6e12:	b9a0      	cbnz	r0, b6e3e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6e14:	786b      	ldrb	r3, [r5, #1]
   b6e16:	2b00      	cmp	r3, #0
   b6e18:	f47f aebf 	bne.w	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6e1c:	4628      	mov	r0, r5
   b6e1e:	f7ff f93d 	bl	b609c <_ZN7FatFile13addDirClusterEv>
   b6e22:	2800      	cmp	r0, #0
   b6e24:	f43f aeb9 	beq.w	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6e28:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6e2a:	791b      	ldrb	r3, [r3, #4]
   b6e2c:	2b01      	cmp	r3, #1
   b6e2e:	f63f aefb 	bhi.w	b6c28 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6e32:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6e34:	3410      	adds	r4, #16
   b6e36:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e38:	42a3      	cmp	r3, r4
   b6e3a:	d8ef      	bhi.n	b6e1c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6e3c:	e6f4      	b.n	b6c28 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6e3e:	3401      	adds	r4, #1
   b6e40:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e42:	e6ed      	b.n	b6c20 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6e44:	4639      	mov	r1, r7
   b6e46:	4628      	mov	r0, r5
   b6e48:	f7ff fe46 	bl	b6ad8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6e4c:	2800      	cmp	r0, #0
   b6e4e:	f47f aeef 	bne.w	b6c30 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6e52:	e6a2      	b.n	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6e54:	bf14      	ite	ne
   b6e56:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6e5a:	2100      	moveq	r1, #0
   b6e5c:	b289      	uxth	r1, r1
   b6e5e:	e72b      	b.n	b6cb8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6e60:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6e64:	bf94      	ite	ls
   b6e66:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6e6a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6e6e:	8091      	strh	r1, [r2, #4]
   b6e70:	e72d      	b.n	b6cce <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6e72:	4631      	mov	r1, r6
   b6e74:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6e76:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6e7a:	f7ff fa4e 	bl	b631a <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6e7e:	4604      	mov	r4, r0
   b6e80:	2800      	cmp	r0, #0
   b6e82:	f43f ae8a 	beq.w	b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6e86:	2220      	movs	r2, #32
   b6e88:	4631      	mov	r1, r6
   b6e8a:	f00c fe09 	bl	c3aa0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6e8e:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6e92:	6023      	str	r3, [r4, #0]
   b6e94:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6e98:	6063      	str	r3, [r4, #4]
   b6e9a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6e9e:	8123      	strh	r3, [r4, #8]
   b6ea0:	7dfb      	ldrb	r3, [r7, #23]
   b6ea2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6ea4:	783b      	ldrb	r3, [r7, #0]
   b6ea6:	f003 0318 	and.w	r3, r3, #24
   b6eaa:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6eac:	4b0f      	ldr	r3, [pc, #60]	; (b6eec <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6eae:	681b      	ldr	r3, [r3, #0]
   b6eb0:	b19b      	cbz	r3, b6eda <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6eb2:	f104 010e 	add.w	r1, r4, #14
   b6eb6:	f104 0010 	add.w	r0, r4, #16
   b6eba:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6ebc:	8a23      	ldrh	r3, [r4, #16]
   b6ebe:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6ec0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6ec2:	89e3      	ldrh	r3, [r4, #14]
   b6ec4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6ec6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6ec8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6ecc:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6ed0:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6ed4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b6ed8:	e78e      	b.n	b6df8 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6eda:	2321      	movs	r3, #33	; 0x21
   b6edc:	7423      	strb	r3, [r4, #16]
   b6ede:	2328      	movs	r3, #40	; 0x28
   b6ee0:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6ee2:	2308      	movs	r3, #8
   b6ee4:	73a6      	strb	r6, [r4, #14]
   b6ee6:	73e3      	strb	r3, [r4, #15]
   b6ee8:	e7e8      	b.n	b6ebc <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6eea:	bf00      	nop
   b6eec:	2003e610 	.word	0x2003e610

000b6ef0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6ef0:	b513      	push	{r0, r1, r4, lr}
   b6ef2:	4604      	mov	r4, r0
    }
   b6ef4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6ef6:	b159      	cbz	r1, b6f10 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6ef8:	9101      	str	r1, [sp, #4]
   b6efa:	f00c fe5c 	bl	c3bb6 <strlen>
   b6efe:	6823      	ldr	r3, [r4, #0]
   b6f00:	9901      	ldr	r1, [sp, #4]
   b6f02:	68db      	ldr	r3, [r3, #12]
   b6f04:	4602      	mov	r2, r0
   b6f06:	4620      	mov	r0, r4
    }
   b6f08:	b002      	add	sp, #8
   b6f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6f0e:	4718      	bx	r3
    }
   b6f10:	b002      	add	sp, #8
   b6f12:	bd10      	pop	{r4, pc}

000b6f14 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b6f14:	b510      	push	{r4, lr}
   b6f16:	460c      	mov	r4, r1
    return m_attr;
   b6f18:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b6f1a:	b909      	cbnz	r1, b6f20 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b6f1c:	2000      	movs	r0, #0
}
   b6f1e:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b6f20:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b6f24:	d005      	beq.n	b6f32 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b6f26:	232f      	movs	r3, #47	; 0x2f
   b6f28:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b6f2a:	2300      	movs	r3, #0
   b6f2c:	7063      	strb	r3, [r4, #1]
  return true;
   b6f2e:	2001      	movs	r0, #1
   b6f30:	e7f5      	b.n	b6f1e <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b6f32:	f7ff f8f1 	bl	b6118 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6f36:	2800      	cmp	r0, #0
   b6f38:	d0f0      	beq.n	b6f1c <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b6f3a:	4621      	mov	r1, r4
   b6f3c:	f7ff f8fb 	bl	b6136 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b6f40:	e7f5      	b.n	b6f2e <_ZN7FatFile6getSFNEPc+0x1a>

000b6f42 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6f44:	7803      	ldrb	r3, [r0, #0]
   b6f46:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6f48:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6f4a:	d520      	bpl.n	b6f8e <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b6f4c:	6843      	ldr	r3, [r0, #4]
   b6f4e:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6f50:	f100 020c 	add.w	r2, r0, #12
   b6f54:	6818      	ldr	r0, [r3, #0]
   b6f56:	9201      	str	r2, [sp, #4]
   b6f58:	f000 fb87 	bl	b766a <_ZN9SdSpiCard10writeBlockEmPKh>
   b6f5c:	9a01      	ldr	r2, [sp, #4]
   b6f5e:	4605      	mov	r5, r0
   b6f60:	b918      	cbnz	r0, b6f6a <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6f62:	2500      	movs	r5, #0
}
   b6f64:	4628      	mov	r0, r5
   b6f66:	b003      	add	sp, #12
   b6f68:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6f6a:	7823      	ldrb	r3, [r4, #0]
   b6f6c:	079b      	lsls	r3, r3, #30
   b6f6e:	d404      	bmi.n	b6f7a <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6f70:	7823      	ldrb	r3, [r4, #0]
   b6f72:	f023 0301 	bic.w	r3, r3, #1
   b6f76:	7023      	strb	r3, [r4, #0]
   b6f78:	e7f4      	b.n	b6f64 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6f7a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6f7e:	6919      	ldr	r1, [r3, #16]
   b6f80:	4401      	add	r1, r0
   b6f82:	6818      	ldr	r0, [r3, #0]
   b6f84:	f000 fb71 	bl	b766a <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6f88:	2800      	cmp	r0, #0
   b6f8a:	d1f1      	bne.n	b6f70 <_ZN8FatCache4syncEv+0x2e>
   b6f8c:	e7e9      	b.n	b6f62 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6f8e:	2501      	movs	r5, #1
   b6f90:	e7e8      	b.n	b6f64 <_ZN8FatCache4syncEv+0x22>

000b6f92 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6f92:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6f94:	6883      	ldr	r3, [r0, #8]
   b6f96:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6f98:	4604      	mov	r4, r0
   b6f9a:	460e      	mov	r6, r1
   b6f9c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6f9e:	d009      	beq.n	b6fb4 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6fa0:	f7ff ffcf 	bl	b6f42 <_ZN8FatCache4syncEv>
   b6fa4:	b908      	cbnz	r0, b6faa <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6fa6:	2000      	movs	r0, #0
}
   b6fa8:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6faa:	076b      	lsls	r3, r5, #29
   b6fac:	d50a      	bpl.n	b6fc4 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6fae:	2300      	movs	r3, #0
   b6fb0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6fb2:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6fb4:	7822      	ldrb	r2, [r4, #0]
   b6fb6:	f005 0503 	and.w	r5, r5, #3
   b6fba:	4620      	mov	r0, r4
   b6fbc:	4315      	orrs	r5, r2
   b6fbe:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6fc2:	e7f1      	b.n	b6fa8 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6fc4:	6863      	ldr	r3, [r4, #4]
   b6fc6:	f104 020c 	add.w	r2, r4, #12
   b6fca:	6818      	ldr	r0, [r3, #0]
   b6fcc:	4631      	mov	r1, r6
   b6fce:	f000 fac3 	bl	b7558 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6fd2:	2800      	cmp	r0, #0
   b6fd4:	d1eb      	bne.n	b6fae <_ZN8FatCache4readEmh+0x1c>
   b6fd6:	e7e6      	b.n	b6fa6 <_ZN8FatCache4readEmh+0x14>

000b6fd8 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6fd8:	7983      	ldrb	r3, [r0, #6]
   b6fda:	6940      	ldr	r0, [r0, #20]
   b6fdc:	3902      	subs	r1, #2
   b6fde:	4099      	lsls	r1, r3
}
   b6fe0:	4408      	add	r0, r1
   b6fe2:	4770      	bx	lr

000b6fe4 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6fe4:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6fe6:	b570      	push	{r4, r5, r6, lr}
   b6fe8:	4605      	mov	r5, r0
   b6fea:	460c      	mov	r4, r1
   b6fec:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6fee:	d802      	bhi.n	b6ff6 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6ff4:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6ff6:	69c3      	ldr	r3, [r0, #28]
   b6ff8:	428b      	cmp	r3, r1
   b6ffa:	d3f9      	bcc.n	b6ff0 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6ffc:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6ffe:	2b20      	cmp	r3, #32
   b7000:	d116      	bne.n	b7030 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7002:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7004:	2202      	movs	r2, #2
   b7006:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b700a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b700e:	f7ff ffc0 	bl	b6f92 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7012:	2800      	cmp	r0, #0
   b7014:	d0ec      	beq.n	b6ff0 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7016:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b701a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b701e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7022:	69ea      	ldr	r2, [r5, #28]
   b7024:	429a      	cmp	r2, r3
  *value = next;
   b7026:	bf26      	itte	cs
   b7028:	6033      	strcs	r3, [r6, #0]
  return 1;
   b702a:	2001      	movcs	r0, #1
    return 0;
   b702c:	2000      	movcc	r0, #0
   b702e:	e7e1      	b.n	b6ff4 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7030:	2b10      	cmp	r3, #16
   b7032:	d1dd      	bne.n	b6ff0 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7034:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7038:	6981      	ldr	r1, [r0, #24]
   b703a:	2202      	movs	r2, #2
   b703c:	4419      	add	r1, r3
   b703e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7042:	f7ff ffa6 	bl	b6f92 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7046:	2800      	cmp	r0, #0
   b7048:	d0d2      	beq.n	b6ff0 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b704a:	b2e4      	uxtb	r4, r4
   b704c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7050:	e7e7      	b.n	b7022 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7052 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7052:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7054:	b538      	push	{r3, r4, r5, lr}
   b7056:	460c      	mov	r4, r1
   b7058:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b705a:	d801      	bhi.n	b7060 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b705c:	2000      	movs	r0, #0
}
   b705e:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7060:	69c3      	ldr	r3, [r0, #28]
   b7062:	428b      	cmp	r3, r1
   b7064:	d3fa      	bcc.n	b705c <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7066:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7068:	2b20      	cmp	r3, #32
   b706a:	d10f      	bne.n	b708c <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b706c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b706e:	2203      	movs	r2, #3
   b7070:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7074:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7078:	f7ff ff8b 	bl	b6f92 <_ZN8FatCache4readEmh>
    if (!pc) {
   b707c:	2800      	cmp	r0, #0
   b707e:	d0ed      	beq.n	b705c <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7080:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7084:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7088:	2001      	movs	r0, #1
   b708a:	e7e8      	b.n	b705e <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b708c:	2b10      	cmp	r3, #16
   b708e:	d1e5      	bne.n	b705c <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7090:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7094:	6981      	ldr	r1, [r0, #24]
   b7096:	2203      	movs	r2, #3
   b7098:	4419      	add	r1, r3
   b709a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b709e:	f7ff ff78 	bl	b6f92 <_ZN8FatCache4readEmh>
    if (!pc) {
   b70a2:	2800      	cmp	r0, #0
   b70a4:	d0da      	beq.n	b705c <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b70a6:	b2e4      	uxtb	r4, r4
   b70a8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b70ac:	e7ec      	b.n	b7088 <_ZN9FatVolume6fatPutEmm+0x36>

000b70ae <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b70ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b70b2:	68c4      	ldr	r4, [r0, #12]
   b70b4:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b70b6:	4605      	mov	r5, r0
   b70b8:	460e      	mov	r6, r1
   b70ba:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b70bc:	d301      	bcc.n	b70c2 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b70be:	2701      	movs	r7, #1
   b70c0:	e001      	b.n	b70c6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b70c2:	460c      	mov	r4, r1
    setStart = false;
   b70c4:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b70c6:	69eb      	ldr	r3, [r5, #28]
    find++;
   b70c8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b70ca:	42a3      	cmp	r3, r4
   b70cc:	d202      	bcs.n	b70d4 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b70ce:	b9c7      	cbnz	r7, b7102 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b70d0:	68ec      	ldr	r4, [r5, #12]
   b70d2:	e7f4      	b.n	b70be <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b70d4:	42a6      	cmp	r6, r4
   b70d6:	d014      	beq.n	b7102 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b70d8:	aa01      	add	r2, sp, #4
   b70da:	4621      	mov	r1, r4
   b70dc:	4628      	mov	r0, r5
   b70de:	f7ff ff81 	bl	b6fe4 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b70e2:	2800      	cmp	r0, #0
   b70e4:	db0d      	blt.n	b7102 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b70e6:	d0ee      	beq.n	b70c6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b70e8:	9b01      	ldr	r3, [sp, #4]
   b70ea:	2b00      	cmp	r3, #0
   b70ec:	d1eb      	bne.n	b70c6 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b70ee:	b107      	cbz	r7, b70f2 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b70f0:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b70f2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b70f6:	4621      	mov	r1, r4
   b70f8:	4628      	mov	r0, r5
   b70fa:	f7ff ffaa 	bl	b7052 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b70fe:	4607      	mov	r7, r0
   b7100:	b920      	cbnz	r0, b710c <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7102:	2700      	movs	r7, #0
}
   b7104:	4638      	mov	r0, r7
   b7106:	b002      	add	sp, #8
   b7108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b710c:	b916      	cbnz	r6, b7114 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b710e:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7112:	e7f7      	b.n	b7104 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7114:	4622      	mov	r2, r4
   b7116:	4631      	mov	r1, r6
   b7118:	4628      	mov	r0, r5
   b711a:	f7ff ff9a 	bl	b7052 <_ZN9FatVolume6fatPutEmm>
   b711e:	2800      	cmp	r0, #0
   b7120:	d1f5      	bne.n	b710e <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7122:	e7ee      	b.n	b7102 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7124 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7124:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7126:	4605      	mov	r5, r0
   b7128:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b712a:	aa01      	add	r2, sp, #4
   b712c:	4621      	mov	r1, r4
   b712e:	4628      	mov	r0, r5
   b7130:	f7ff ff58 	bl	b6fe4 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7134:	1e06      	subs	r6, r0, #0
   b7136:	db10      	blt.n	b715a <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7138:	2200      	movs	r2, #0
   b713a:	4621      	mov	r1, r4
   b713c:	4628      	mov	r0, r5
   b713e:	f7ff ff88 	bl	b7052 <_ZN9FatVolume6fatPutEmm>
   b7142:	b150      	cbz	r0, b715a <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7144:	68eb      	ldr	r3, [r5, #12]
   b7146:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7148:	bf24      	itt	cs
   b714a:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b714e:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7150:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7152:	2e00      	cmp	r6, #0
   b7154:	d1e9      	bne.n	b712a <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7156:	b002      	add	sp, #8
   b7158:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b715a:	2000      	movs	r0, #0
   b715c:	e7fb      	b.n	b7156 <_ZN9FatVolume9freeChainEm+0x32>

000b715e <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b715e:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7160:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7162:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7164:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b716a:	4604      	mov	r4, r0
  m_fatType = 0;
   b716c:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b716e:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7172:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7174:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7178:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b717a:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b717e:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7182:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7186:	460d      	mov	r5, r1
   b7188:	b1b9      	cbz	r1, b71ba <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b718a:	2904      	cmp	r1, #4
   b718c:	d901      	bls.n	b7192 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b718e:	2000      	movs	r0, #0
}
   b7190:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7192:	4611      	mov	r1, r2
   b7194:	4630      	mov	r0, r6
   b7196:	f7ff fefc 	bl	b6f92 <_ZN8FatCache4readEmh>
    if (!pc) {
   b719a:	2800      	cmp	r0, #0
   b719c:	d0f7      	beq.n	b718e <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b719e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b71a2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b71a6:	065b      	lsls	r3, r3, #25
   b71a8:	d1f1      	bne.n	b718e <_ZN9FatVolume4initEh+0x30>
   b71aa:	f105 011b 	add.w	r1, r5, #27
   b71ae:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b71b2:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b71b6:	2d00      	cmp	r5, #0
   b71b8:	d0e9      	beq.n	b718e <_ZN9FatVolume4initEh+0x30>
   b71ba:	2200      	movs	r2, #0
   b71bc:	4629      	mov	r1, r5
   b71be:	4630      	mov	r0, r6
   b71c0:	f7ff fee7 	bl	b6f92 <_ZN8FatCache4readEmh>
  if (!pc) {
   b71c4:	2800      	cmp	r0, #0
   b71c6:	d0e2      	beq.n	b718e <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b71c8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b71cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b71d0:	d1dd      	bne.n	b718e <_ZN9FatVolume4initEh+0x30>
   b71d2:	7c03      	ldrb	r3, [r0, #16]
   b71d4:	2b02      	cmp	r3, #2
   b71d6:	d1da      	bne.n	b718e <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b71d8:	89c3      	ldrh	r3, [r0, #14]
   b71da:	2b00      	cmp	r3, #0
   b71dc:	d0d7      	beq.n	b718e <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b71de:	7b41      	ldrb	r1, [r0, #13]
   b71e0:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b71e2:	1e4b      	subs	r3, r1, #1
   b71e4:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b71e6:	2300      	movs	r3, #0
   b71e8:	71a3      	strb	r3, [r4, #6]
   b71ea:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b71ec:	2301      	movs	r3, #1
   b71ee:	4299      	cmp	r1, r3
   b71f0:	d007      	beq.n	b7202 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b71f2:	3e01      	subs	r6, #1
   b71f4:	d0cb      	beq.n	b718e <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b71f6:	79a2      	ldrb	r2, [r4, #6]
   b71f8:	005b      	lsls	r3, r3, #1
   b71fa:	3201      	adds	r2, #1
   b71fc:	b2db      	uxtb	r3, r3
   b71fe:	71a2      	strb	r2, [r4, #6]
   b7200:	e7f5      	b.n	b71ee <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7202:	8ac1      	ldrh	r1, [r0, #22]
   b7204:	b901      	cbnz	r1, b7208 <_ZN9FatVolume4initEh+0xaa>
   b7206:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7208:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b720a:	89c3      	ldrh	r3, [r0, #14]
   b720c:	442b      	add	r3, r5
   b720e:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7210:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7214:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7216:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b721a:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b721c:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7220:	0149      	lsls	r1, r1, #5
   b7222:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7226:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b722a:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b722c:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7230:	b902      	cbnz	r2, b7234 <_ZN9FatVolume4initEh+0xd6>
   b7232:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7234:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7236:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7238:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b723a:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b723c:	1c4b      	adds	r3, r1, #1
   b723e:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7240:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7244:	4299      	cmp	r1, r3
   b7246:	d802      	bhi.n	b724e <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7248:	230c      	movs	r3, #12
   b724a:	71e3      	strb	r3, [r4, #7]
   b724c:	e79f      	b.n	b718e <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b724e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7252:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7254:	bf85      	ittet	hi
   b7256:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7258:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b725a:	2310      	movls	r3, #16
    m_fatType = 32;
   b725c:	2320      	movhi	r3, #32
   b725e:	71e3      	strb	r3, [r4, #7]
  return true;
   b7260:	2001      	movs	r0, #1
   b7262:	e795      	b.n	b7190 <_ZN9FatVolume4initEh+0x32>

000b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7264:	f000 baca 	b.w	b77fc <_ZN14SdSpiAltDriver4sendEh>

000b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7268:	f000 baad 	b.w	b77c6 <_ZN14SdSpiAltDriver7receiveEv>

000b726c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b726c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b726e:	4e0e      	ldr	r6, [pc, #56]	; (b72a8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7270:	460d      	mov	r5, r1
   b7272:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7274:	f005 fff8 	bl	bd268 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7278:	6833      	ldr	r3, [r6, #0]
   b727a:	1ac0      	subs	r0, r0, r3
   b727c:	4b0b      	ldr	r3, [pc, #44]	; (b72ac <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b727e:	4298      	cmp	r0, r3
   b7280:	d908      	bls.n	b7294 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7282:	f005 fff9 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7286:	4b0a      	ldr	r3, [pc, #40]	; (b72b0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7288:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b728a:	f006 fa3b 	bl	bd704 <spark_process>
   b728e:	f005 ffeb 	bl	bd268 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7292:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7294:	f005 fff0 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7298:	b280      	uxth	r0, r0
   b729a:	1b40      	subs	r0, r0, r5
}
   b729c:	42a0      	cmp	r0, r4
   b729e:	bfd4      	ite	le
   b72a0:	2000      	movle	r0, #0
   b72a2:	2001      	movgt	r0, #1
   b72a4:	bd70      	pop	{r4, r5, r6, pc}
   b72a6:	bf00      	nop
   b72a8:	2003e618 	.word	0x2003e618
   b72ac:	000186a0 	.word	0x000186a0
   b72b0:	2003e728 	.word	0x2003e728

000b72b4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b72b4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b72b6:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b72b8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b72ba:	b94d      	cbnz	r5, b72d0 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b72bc:	6840      	ldr	r0, [r0, #4]
   b72be:	f000 fa6b 	bl	b7798 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b72c2:	6863      	ldr	r3, [r4, #4]
   b72c4:	4629      	mov	r1, r5
   b72c6:	7d18      	ldrb	r0, [r3, #20]
   b72c8:	f00a f913 	bl	c14f2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b72cc:	2301      	movs	r3, #1
   b72ce:	7223      	strb	r3, [r4, #8]
  }
}
   b72d0:	bd38      	pop	{r3, r4, r5, pc}

000b72d2 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b72d2:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b72d4:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b72d6:	4604      	mov	r4, r0
  if (m_spiActive) {
   b72d8:	b16b      	cbz	r3, b72f6 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b72da:	6843      	ldr	r3, [r0, #4]
   b72dc:	2101      	movs	r1, #1
   b72de:	7d18      	ldrb	r0, [r3, #20]
   b72e0:	f00a f907 	bl	c14f2 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b72e4:	6860      	ldr	r0, [r4, #4]
   b72e6:	21ff      	movs	r1, #255	; 0xff
   b72e8:	f7ff ffbc 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b72ec:	6860      	ldr	r0, [r4, #4]
   b72ee:	f000 fa67 	bl	b77c0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b72f2:	2300      	movs	r3, #0
   b72f4:	7223      	strb	r3, [r4, #8]
  }
}
   b72f6:	bd10      	pop	{r4, pc}

000b72f8 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b72f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72fa:	4604      	mov	r4, r0
   b72fc:	460d      	mov	r5, r1
   b72fe:	4616      	mov	r6, r2
   b7300:	f005 ffba 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7304:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7306:	6860      	ldr	r0, [r4, #4]
   b7308:	f7ff ffae 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b730c:	28ff      	cmp	r0, #255	; 0xff
   b730e:	7260      	strb	r0, [r4, #9]
   b7310:	d10e      	bne.n	b7330 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7316:	4639      	mov	r1, r7
   b7318:	4620      	mov	r0, r4
   b731a:	f7ff ffa7 	bl	b726c <_ZN9SdSpiCard10isTimedOutEtt>
   b731e:	2800      	cmp	r0, #0
   b7320:	d0f1      	beq.n	b7306 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7322:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7324:	4620      	mov	r0, r4
   b7326:	7023      	strb	r3, [r4, #0]
   b7328:	f7ff ffd3 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b732c:	2000      	movs	r0, #0
}
   b732e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7330:	28fe      	cmp	r0, #254	; 0xfe
   b7332:	d001      	beq.n	b7338 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7334:	2350      	movs	r3, #80	; 0x50
   b7336:	e7f5      	b.n	b7324 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7338:	6860      	ldr	r0, [r4, #4]
   b733a:	4632      	mov	r2, r6
   b733c:	4629      	mov	r1, r5
   b733e:	f000 fa47 	bl	b77d0 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7342:	7260      	strb	r0, [r4, #9]
   b7344:	b108      	cbz	r0, b734a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7346:	2360      	movs	r3, #96	; 0x60
   b7348:	e7ec      	b.n	b7324 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b734a:	6860      	ldr	r0, [r4, #4]
   b734c:	f7ff ff8c 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7350:	6860      	ldr	r0, [r4, #4]
   b7352:	f7ff ff89 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7356:	2001      	movs	r0, #1
   b7358:	e7e9      	b.n	b732e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b735a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b735a:	b570      	push	{r4, r5, r6, lr}
   b735c:	4604      	mov	r4, r0
   b735e:	460e      	mov	r6, r1
   b7360:	f005 ff8a 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   b7364:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7366:	4632      	mov	r2, r6
   b7368:	4629      	mov	r1, r5
   b736a:	4620      	mov	r0, r4
   b736c:	f7ff ff7e 	bl	b726c <_ZN9SdSpiCard10isTimedOutEtt>
   b7370:	b930      	cbnz	r0, b7380 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7372:	6860      	ldr	r0, [r4, #4]
   b7374:	f7ff ff78 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7378:	28ff      	cmp	r0, #255	; 0xff
   b737a:	d1f4      	bne.n	b7366 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b737c:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b737e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7380:	2000      	movs	r0, #0
   b7382:	e7fc      	b.n	b737e <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7384 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7386:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7388:	9201      	str	r2, [sp, #4]
   b738a:	4604      	mov	r4, r0
   b738c:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b738e:	b90b      	cbnz	r3, b7394 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7390:	f7ff ff90 	bl	b72b4 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7394:	b125      	cbz	r5, b73a0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7396:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b739a:	4620      	mov	r0, r4
   b739c:	f7ff ffdd 	bl	b735a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b73a0:	6860      	ldr	r0, [r4, #4]
   b73a2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b73a6:	f7ff ff5d 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b73aa:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b73ac:	af01      	add	r7, sp, #4
   b73ae:	5db9      	ldrb	r1, [r7, r6]
   b73b0:	6860      	ldr	r0, [r4, #4]
   b73b2:	f7ff ff57 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b73b6:	3e01      	subs	r6, #1
   b73b8:	d2f9      	bcs.n	b73ae <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b73ba:	2d00      	cmp	r5, #0
   b73bc:	6860      	ldr	r0, [r4, #4]
   b73be:	bf0c      	ite	eq
   b73c0:	2195      	moveq	r1, #149	; 0x95
   b73c2:	2187      	movne	r1, #135	; 0x87
   b73c4:	f7ff ff4e 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b73c8:	6860      	ldr	r0, [r4, #4]
   b73ca:	f7ff ff4d 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b73ce:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b73d0:	6860      	ldr	r0, [r4, #4]
   b73d2:	f7ff ff49 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b73d6:	0603      	lsls	r3, r0, #24
   b73d8:	7260      	strb	r0, [r4, #9]
   b73da:	d503      	bpl.n	b73e4 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b73dc:	3d01      	subs	r5, #1
   b73de:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b73e2:	d1f5      	bne.n	b73d0 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b73e4:	b003      	add	sp, #12
   b73e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b73e8 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b73e8:	b570      	push	{r4, r5, r6, lr}
   b73ea:	4604      	mov	r4, r0
   b73ec:	460d      	mov	r5, r1
   b73ee:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b73f0:	2137      	movs	r1, #55	; 0x37
   b73f2:	2200      	movs	r2, #0
   b73f4:	f7ff ffc6 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b73f8:	4632      	mov	r2, r6
   b73fa:	4629      	mov	r1, r5
   b73fc:	4620      	mov	r0, r4
  }
   b73fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7402:	f7ff bfbf 	b.w	b7384 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7408 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b740c:	2500      	movs	r5, #0
   b740e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7410:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7412:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7414:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7416:	4604      	mov	r4, r0
   b7418:	4690      	mov	r8, r2
   b741a:	461e      	mov	r6, r3
   b741c:	f005 ff2c 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7420:	4641      	mov	r1, r8
   b7422:	4607      	mov	r7, r0
   b7424:	6860      	ldr	r0, [r4, #4]
   b7426:	f000 f9bb 	bl	b77a0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b742a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b742c:	4a49      	ldr	r2, [pc, #292]	; (b7554 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b742e:	721d      	strb	r5, [r3, #8]
   b7430:	2501      	movs	r5, #1
   b7432:	60da      	str	r2, [r3, #12]
   b7434:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7436:	4620      	mov	r0, r4
   b7438:	f7ff ff3c 	bl	b72b4 <_ZN9SdSpiCard8spiStartEv>
   b743c:	6863      	ldr	r3, [r4, #4]
   b743e:	4629      	mov	r1, r5
   b7440:	7d18      	ldrb	r0, [r3, #20]
   b7442:	f00a f856 	bl	c14f2 <digitalWrite>
   b7446:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7448:	6860      	ldr	r0, [r4, #4]
   b744a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b744c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b744e:	f7ff ff09 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7452:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7456:	d1f7      	bne.n	b7448 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7458:	6863      	ldr	r3, [r4, #4]
   b745a:	4629      	mov	r1, r5
   b745c:	7d18      	ldrb	r0, [r3, #20]
   b745e:	f00a f848 	bl	c14f2 <digitalWrite>
  }
   b7462:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7464:	2200      	movs	r2, #0
   b7466:	4611      	mov	r1, r2
   b7468:	4620      	mov	r0, r4
   b746a:	f7ff ff8b 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b746e:	2801      	cmp	r0, #1
   b7470:	4680      	mov	r8, r0
   b7472:	d018      	beq.n	b74a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7474:	3d01      	subs	r5, #1
   b7476:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b747a:	d107      	bne.n	b748c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b747c:	2320      	movs	r3, #32
  spiStop();
   b747e:	4620      	mov	r0, r4
   b7480:	7023      	strb	r3, [r4, #0]
   b7482:	f7ff ff26 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7486:	2000      	movs	r0, #0
}
   b7488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b748c:	6860      	ldr	r0, [r4, #4]
   b748e:	21fd      	movs	r1, #253	; 0xfd
   b7490:	f7ff fee8 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7494:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7498:	6860      	ldr	r0, [r4, #4]
   b749a:	f7ff fee5 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b749e:	f1b8 0801 	subs.w	r8, r8, #1
   b74a2:	d1f9      	bne.n	b7498 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b74a4:	e7de      	b.n	b7464 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b74a6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b74aa:	2108      	movs	r1, #8
   b74ac:	4620      	mov	r0, r4
   b74ae:	f7ff ff69 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b74b2:	2805      	cmp	r0, #5
   b74b4:	d114      	bne.n	b74e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b74b6:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b74ba:	2500      	movs	r5, #0
   b74bc:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b74be:	462a      	mov	r2, r5
   b74c0:	2129      	movs	r1, #41	; 0x29
   b74c2:	4620      	mov	r0, r4
   b74c4:	f7ff ff90 	bl	b73e8 <_ZN9SdSpiCard8cardAcmdEhm>
   b74c8:	4602      	mov	r2, r0
   b74ca:	b1d8      	cbz	r0, b7504 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b74cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b74d0:	4639      	mov	r1, r7
   b74d2:	4620      	mov	r0, r4
   b74d4:	f7ff feca 	bl	b726c <_ZN9SdSpiCard10isTimedOutEtt>
   b74d8:	2800      	cmp	r0, #0
   b74da:	d0f0      	beq.n	b74be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b74dc:	2343      	movs	r3, #67	; 0x43
   b74de:	e7ce      	b.n	b747e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b74e0:	2504      	movs	r5, #4
      m_status = spiReceive();
   b74e2:	6860      	ldr	r0, [r4, #4]
   b74e4:	f7ff fec0 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b74e8:	3d01      	subs	r5, #1
   b74ea:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b74ee:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b74f0:	d1f7      	bne.n	b74e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b74f2:	28aa      	cmp	r0, #170	; 0xaa
   b74f4:	d104      	bne.n	b7500 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b74f6:	2302      	movs	r3, #2
   b74f8:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b74fa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b74fe:	e7dd      	b.n	b74bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7500:	2325      	movs	r3, #37	; 0x25
   b7502:	e7bc      	b.n	b747e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7504:	7aa3      	ldrb	r3, [r4, #10]
   b7506:	2b02      	cmp	r3, #2
   b7508:	d118      	bne.n	b753c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b750a:	213a      	movs	r1, #58	; 0x3a
   b750c:	4620      	mov	r0, r4
   b750e:	f7ff ff39 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b7512:	b108      	cbz	r0, b7518 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7514:	2337      	movs	r3, #55	; 0x37
   b7516:	e7b2      	b.n	b747e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7518:	6860      	ldr	r0, [r4, #4]
   b751a:	f7ff fea5 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b751e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7522:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7524:	bf04      	itt	eq
   b7526:	2303      	moveq	r3, #3
   b7528:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b752a:	6860      	ldr	r0, [r4, #4]
   b752c:	f7ff fe9c 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7530:	6860      	ldr	r0, [r4, #4]
   b7532:	f7ff fe99 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7536:	6860      	ldr	r0, [r4, #4]
   b7538:	f7ff fe96 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b753c:	4620      	mov	r0, r4
   b753e:	f7ff fec8 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7542:	6863      	ldr	r3, [r4, #4]
   b7544:	7930      	ldrb	r0, [r6, #4]
   b7546:	68b1      	ldr	r1, [r6, #8]
   b7548:	89b2      	ldrh	r2, [r6, #12]
   b754a:	821a      	strh	r2, [r3, #16]
   b754c:	7218      	strb	r0, [r3, #8]
   b754e:	60d9      	str	r1, [r3, #12]
  return true;
   b7550:	2001      	movs	r0, #1
   b7552:	e799      	b.n	b7488 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7554:	0003d090 	.word	0x0003d090

000b7558 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7558:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b755a:	7a83      	ldrb	r3, [r0, #10]
   b755c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b755e:	bf18      	it	ne
   b7560:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7562:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7564:	460a      	mov	r2, r1
   b7566:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7568:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b756a:	f7ff ff0b 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b756e:	b130      	cbz	r0, b757e <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7570:	2330      	movs	r3, #48	; 0x30
   b7572:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7574:	4620      	mov	r0, r4
   b7576:	f7ff feac 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b757a:	2500      	movs	r5, #0
   b757c:	e00b      	b.n	b7596 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b757e:	4629      	mov	r1, r5
   b7580:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7584:	4620      	mov	r0, r4
   b7586:	f7ff feb7 	bl	b72f8 <_ZN9SdSpiCard8readDataEPhj>
   b758a:	4605      	mov	r5, r0
   b758c:	2800      	cmp	r0, #0
   b758e:	d0f1      	beq.n	b7574 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7590:	4620      	mov	r0, r4
   b7592:	f7ff fe9e 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
}
   b7596:	4628      	mov	r0, r5
   b7598:	bd38      	pop	{r3, r4, r5, pc}

000b759a <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b759a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b759c:	7a83      	ldrb	r3, [r0, #10]
   b759e:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75a0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b75a2:	bf18      	it	ne
   b75a4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b75a6:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75a8:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b75aa:	f7ff feeb 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b75ae:	b130      	cbz	r0, b75be <_ZN9SdSpiCard9readStartEm+0x24>
   b75b0:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b75b2:	4620      	mov	r0, r4
   b75b4:	7023      	strb	r3, [r4, #0]
   b75b6:	f7ff fe8c 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b75ba:	2000      	movs	r0, #0
}
   b75bc:	bd10      	pop	{r4, pc}
  return true;
   b75be:	2001      	movs	r0, #1
   b75c0:	e7fc      	b.n	b75bc <_ZN9SdSpiCard9readStartEm+0x22>

000b75c2 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b75c2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b75c4:	2200      	movs	r2, #0
   b75c6:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b75c8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b75ca:	f7ff fedb 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b75ce:	b130      	cbz	r0, b75de <_ZN9SdSpiCard8readStopEv+0x1c>
   b75d0:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b75d2:	4620      	mov	r0, r4
   b75d4:	7023      	strb	r3, [r4, #0]
   b75d6:	f7ff fe7c 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b75da:	2000      	movs	r0, #0
}
   b75dc:	bd10      	pop	{r4, pc}
  spiStop();
   b75de:	4620      	mov	r0, r4
   b75e0:	f7ff fe77 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b75e4:	2001      	movs	r0, #1
   b75e6:	e7f9      	b.n	b75dc <_ZN9SdSpiCard8readStopEv+0x1a>

000b75e8 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b75e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75ea:	4604      	mov	r4, r0
   b75ec:	4616      	mov	r6, r2
   b75ee:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b75f0:	f7ff ffd3 	bl	b759a <_ZN9SdSpiCard9readStartEm>
   b75f4:	b168      	cbz	r0, b7612 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b75f6:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b75f8:	b2ab      	uxth	r3, r5
   b75fa:	429f      	cmp	r7, r3
   b75fc:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7600:	d909      	bls.n	b7616 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7602:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7606:	4620      	mov	r0, r4
   b7608:	f7ff fe76 	bl	b72f8 <_ZN9SdSpiCard8readDataEPhj>
   b760c:	3501      	adds	r5, #1
   b760e:	2800      	cmp	r0, #0
   b7610:	d1f2      	bne.n	b75f8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7612:	2000      	movs	r0, #0
   b7614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7616:	4620      	mov	r0, r4
}
   b7618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b761c:	f7ff bfd1 	b.w	b75c2 <_ZN9SdSpiCard8readStopEv>

000b7620 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7620:	b538      	push	{r3, r4, r5, lr}
   b7622:	4604      	mov	r4, r0
   b7624:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7626:	6840      	ldr	r0, [r0, #4]
   b7628:	f7ff fe1c 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b762c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7630:	6860      	ldr	r0, [r4, #4]
   b7632:	4629      	mov	r1, r5
   b7634:	f000 f8e6 	bl	b7804 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7638:	6860      	ldr	r0, [r4, #4]
   b763a:	21ff      	movs	r1, #255	; 0xff
   b763c:	f7ff fe12 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7640:	6860      	ldr	r0, [r4, #4]
   b7642:	21ff      	movs	r1, #255	; 0xff
   b7644:	f7ff fe0e 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7648:	6860      	ldr	r0, [r4, #4]
   b764a:	f7ff fe0d 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b764e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7650:	f000 001f 	and.w	r0, r0, #31
   b7654:	2805      	cmp	r0, #5
   b7656:	d006      	beq.n	b7666 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7658:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b765a:	4620      	mov	r0, r4
   b765c:	7023      	strb	r3, [r4, #0]
   b765e:	f7ff fe38 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7662:	2000      	movs	r0, #0
}
   b7664:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7666:	2001      	movs	r0, #1
   b7668:	e7fc      	b.n	b7664 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b766a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b766a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b766c:	7a83      	ldrb	r3, [r0, #10]
   b766e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7670:	bf18      	it	ne
   b7672:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7674:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7676:	460a      	mov	r2, r1
   b7678:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b767a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b767c:	f7ff fe82 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b7680:	4606      	mov	r6, r0
   b7682:	b130      	cbz	r0, b7692 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7684:	2332      	movs	r3, #50	; 0x32
   b7686:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7688:	4620      	mov	r0, r4
   b768a:	f7ff fe22 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b768e:	2500      	movs	r5, #0
   b7690:	e01f      	b.n	b76d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7692:	462a      	mov	r2, r5
   b7694:	21fe      	movs	r1, #254	; 0xfe
   b7696:	4620      	mov	r0, r4
   b7698:	f7ff ffc2 	bl	b7620 <_ZN9SdSpiCard9writeDataEhPKh>
   b769c:	2800      	cmp	r0, #0
   b769e:	d0f3      	beq.n	b7688 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b76a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b76a4:	4620      	mov	r0, r4
   b76a6:	f7ff fe58 	bl	b735a <_ZN9SdSpiCard11waitNotBusyEt>
   b76aa:	4605      	mov	r5, r0
   b76ac:	b908      	cbnz	r0, b76b2 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b76ae:	235a      	movs	r3, #90	; 0x5a
   b76b0:	e7e9      	b.n	b7686 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b76b2:	4632      	mov	r2, r6
   b76b4:	210d      	movs	r1, #13
   b76b6:	4620      	mov	r0, r4
   b76b8:	f7ff fe64 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b76bc:	b108      	cbz	r0, b76c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b76be:	2329      	movs	r3, #41	; 0x29
   b76c0:	e7e1      	b.n	b7686 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b76c2:	6860      	ldr	r0, [r4, #4]
   b76c4:	f7ff fdd0 	bl	b7268 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b76c8:	2800      	cmp	r0, #0
   b76ca:	d1f8      	bne.n	b76be <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b76cc:	4620      	mov	r0, r4
   b76ce:	f7ff fe00 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
}
   b76d2:	4628      	mov	r0, r5
   b76d4:	bd70      	pop	{r4, r5, r6, pc}

000b76d6 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b76d6:	b513      	push	{r0, r1, r4, lr}
   b76d8:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b76da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b76de:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b76e0:	f7ff fe3b 	bl	b735a <_ZN9SdSpiCard11waitNotBusyEt>
   b76e4:	9a01      	ldr	r2, [sp, #4]
   b76e6:	b930      	cbnz	r0, b76f6 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b76e8:	235b      	movs	r3, #91	; 0x5b
   b76ea:	7023      	strb	r3, [r4, #0]
  spiStop();
   b76ec:	4620      	mov	r0, r4
   b76ee:	f7ff fdf0 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b76f2:	2000      	movs	r0, #0
   b76f4:	e005      	b.n	b7702 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b76f6:	21fc      	movs	r1, #252	; 0xfc
   b76f8:	4620      	mov	r0, r4
   b76fa:	f7ff ff91 	bl	b7620 <_ZN9SdSpiCard9writeDataEhPKh>
   b76fe:	2800      	cmp	r0, #0
   b7700:	d0f4      	beq.n	b76ec <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7702:	b002      	add	sp, #8
   b7704:	bd10      	pop	{r4, pc}

000b7706 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7706:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7708:	7a83      	ldrb	r3, [r0, #10]
   b770a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b770c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b770e:	bf18      	it	ne
   b7710:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7712:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7714:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7716:	f7ff fe35 	bl	b7384 <_ZN9SdSpiCard11cardCommandEhm>
   b771a:	b130      	cbz	r0, b772a <_ZN9SdSpiCard10writeStartEm+0x24>
   b771c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b771e:	4620      	mov	r0, r4
   b7720:	7023      	strb	r3, [r4, #0]
   b7722:	f7ff fdd6 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7726:	2000      	movs	r0, #0
}
   b7728:	bd10      	pop	{r4, pc}
  return true;
   b772a:	2001      	movs	r0, #1
   b772c:	e7fc      	b.n	b7728 <_ZN9SdSpiCard10writeStartEm+0x22>

000b772e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b772e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7730:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7734:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7736:	f7ff fe10 	bl	b735a <_ZN9SdSpiCard11waitNotBusyEt>
   b773a:	4605      	mov	r5, r0
   b773c:	b930      	cbnz	r0, b774c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b773e:	2356      	movs	r3, #86	; 0x56
   b7740:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7742:	4620      	mov	r0, r4
   b7744:	f7ff fdc5 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7748:	4628      	mov	r0, r5
   b774a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b774c:	6860      	ldr	r0, [r4, #4]
   b774e:	21fd      	movs	r1, #253	; 0xfd
   b7750:	f7ff fd88 	bl	b7264 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7754:	e7f5      	b.n	b7742 <_ZN9SdSpiCard9writeStopEv+0x14>

000b7756 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7758:	4604      	mov	r4, r0
   b775a:	4616      	mov	r6, r2
   b775c:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b775e:	f7ff ffd2 	bl	b7706 <_ZN9SdSpiCard10writeStartEm>
   b7762:	b170      	cbz	r0, b7782 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7764:	2500      	movs	r5, #0
   b7766:	42bd      	cmp	r5, r7
   b7768:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b776c:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b776e:	d004      	beq.n	b777a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7770:	f7ff ffb1 	bl	b76d6 <_ZN9SdSpiCard9writeDataEPKh>
   b7774:	b128      	cbz	r0, b7782 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7776:	3501      	adds	r5, #1
   b7778:	e7f5      	b.n	b7766 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b777a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b777e:	f7ff bfd6 	b.w	b772e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7782:	4620      	mov	r0, r4
   b7784:	f7ff fda5 	bl	b72d2 <_ZN9SdSpiCard7spiStopEv>
}
   b7788:	2000      	movs	r0, #0
   b778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b778c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b778c:	4b01      	ldr	r3, [pc, #4]	; (b7794 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b778e:	2201      	movs	r2, #1
   b7790:	701a      	strb	r2, [r3, #0]
}
   b7792:	4770      	bx	lr
   b7794:	2003e61c 	.word	0x2003e61c

000b7798 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7798:	1d01      	adds	r1, r0, #4
   b779a:	6800      	ldr	r0, [r0, #0]
   b779c:	f009 ba1e 	b.w	c0bdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b77a0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b77a0:	b510      	push	{r4, lr}
   b77a2:	4604      	mov	r4, r0
  m_csPin = csPin;
   b77a4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b77a6:	6800      	ldr	r0, [r0, #0]
   b77a8:	f009 f9d3 	bl	c0b52 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b77ac:	7d20      	ldrb	r0, [r4, #20]
   b77ae:	2101      	movs	r1, #1
   b77b0:	f009 fe8e 	bl	c14d0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b77b4:	7d20      	ldrb	r0, [r4, #20]
   b77b6:	2101      	movs	r1, #1
}
   b77b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b77bc:	f009 be99 	b.w	c14f2 <digitalWrite>

000b77c0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b77c0:	6800      	ldr	r0, [r0, #0]
   b77c2:	f009 b9f1 	b.w	c0ba8 <_ZN8SPIClass14endTransactionEv>

000b77c6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b77c6:	6800      	ldr	r0, [r0, #0]
   b77c8:	21ff      	movs	r1, #255	; 0xff
   b77ca:	f009 baa7 	b.w	c0d1c <_ZN8SPIClass8transferEh>
	...

000b77d0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b77d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b77d2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b77d4:	4a07      	ldr	r2, [pc, #28]	; (b77f4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b77d6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b77d8:	2500      	movs	r5, #0
   b77da:	4c07      	ldr	r4, [pc, #28]	; (b77f8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b77dc:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b77de:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b77e0:	460a      	mov	r2, r1
   b77e2:	4629      	mov	r1, r5
   b77e4:	f009 faa0 	bl	c0d28 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b77e8:	7823      	ldrb	r3, [r4, #0]
   b77ea:	2b00      	cmp	r3, #0
   b77ec:	d0fc      	beq.n	b77e8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b77ee:	2000      	movs	r0, #0
   b77f0:	b003      	add	sp, #12
   b77f2:	bd30      	pop	{r4, r5, pc}
   b77f4:	000b778d 	.word	0x000b778d
   b77f8:	2003e61c 	.word	0x2003e61c

000b77fc <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b77fc:	6800      	ldr	r0, [r0, #0]
   b77fe:	f009 ba8d 	b.w	c0d1c <_ZN8SPIClass8transferEh>
	...

000b7804 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7806:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7808:	4a06      	ldr	r2, [pc, #24]	; (b7824 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b780a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b780c:	2500      	movs	r5, #0
   b780e:	4c06      	ldr	r4, [pc, #24]	; (b7828 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7810:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7812:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7814:	462a      	mov	r2, r5
   b7816:	f009 fa87 	bl	c0d28 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b781a:	7823      	ldrb	r3, [r4, #0]
   b781c:	2b00      	cmp	r3, #0
   b781e:	d0fc      	beq.n	b781a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7820:	b003      	add	sp, #12
   b7822:	bd30      	pop	{r4, r5, pc}
   b7824:	000b778d 	.word	0x000b778d
   b7828:	2003e61c 	.word	0x2003e61c

000b782c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b782c:	4770      	bx	lr

000b782e <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b782e:	4770      	bx	lr

000b7830 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b7830:	b538      	push	{r3, r4, r5, lr}
   b7832:	460c      	mov	r4, r1
   b7834:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b7836:	2220      	movs	r2, #32
   b7838:	2100      	movs	r1, #0
   b783a:	f104 0008 	add.w	r0, r4, #8
   b783e:	f00c f92f 	bl	c3aa0 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b7842:	4909      	ldr	r1, [pc, #36]	; (b7868 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b7844:	220b      	movs	r2, #11
   b7846:	4620      	mov	r0, r4
   b7848:	f00c f9e4 	bl	c3c14 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b784c:	2301      	movs	r3, #1
   b784e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b7850:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7852:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7854:	2302      	movs	r3, #2
   b7856:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b7858:	4b04      	ldr	r3, [pc, #16]	; (b786c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b785a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b785c:	4b04      	ldr	r3, [pc, #16]	; (b7870 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b785e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b7860:	4b04      	ldr	r3, [pc, #16]	; (b7874 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b7862:	6223      	str	r3, [r4, #32]
}
   b7864:	bd38      	pop	{r3, r4, r5, pc}
   b7866:	bf00      	nop
   b7868:	000c62dc 	.word	0x000c62dc
   b786c:	c4c80000 	.word	0xc4c80000
   b7870:	44c80000 	.word	0x44c80000
   b7874:	3c75c28f 	.word	0x3c75c28f

000b7878 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b7878:	b510      	push	{r4, lr}
   b787a:	2128      	movs	r1, #40	; 0x28
   b787c:	4604      	mov	r4, r0
   b787e:	f7fc fc10 	bl	b40a2 <_ZdlPvj>
   b7882:	4620      	mov	r0, r4
   b7884:	bd10      	pop	{r4, pc}
	...

000b7888 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b7888:	4a03      	ldr	r2, [pc, #12]	; (b7898 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b788a:	6002      	str	r2, [r0, #0]
   b788c:	2200      	movs	r2, #0
   b788e:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7892:	7602      	strb	r2, [r0, #24]
   b7894:	4770      	bx	lr
   b7896:	bf00      	nop
   b7898:	000c62fc 	.word	0x000c62fc

000b789c <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b789c:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b789e:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b78a0:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78a2:	2200      	movs	r2, #0
   b78a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b78a8:	2506      	movs	r5, #6
   b78aa:	2228      	movs	r2, #40	; 0x28
   b78ac:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b78b0:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78b2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b78b6:	a806      	add	r0, sp, #24
   b78b8:	f005 f91a 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b78bc:	462a      	mov	r2, r5
   b78be:	a904      	add	r1, sp, #16
   b78c0:	a806      	add	r0, sp, #24
   b78c2:	f005 f993 	bl	bcbec <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b78c6:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b78c8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b78cc:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b78d0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b78d4:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b78d6:	2d03      	cmp	r5, #3
   b78d8:	bf98      	it	ls
   b78da:	4812      	ldrls	r0, [pc, #72]	; (b7924 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b78dc:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b78de:	ee07 1a10 	vmov	s14, r1
   b78e2:	bf9c      	itt	ls
   b78e4:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b78e8:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b78ec:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b78ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b78f2:	bf88      	it	hi
   b78f4:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b78f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b78fc:	ee07 2a10 	vmov	s14, r2
   b7900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b7904:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b7908:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b790c:	ee07 3a10 	vmov	s14, r3
   b7910:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b7914:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b7918:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b791c:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b7920:	b00d      	add	sp, #52	; 0x34
   b7922:	bd30      	pop	{r4, r5, pc}
   b7924:	000c62e4 	.word	0x000c62e4

000b7928 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b7928:	b538      	push	{r3, r4, r5, lr}
   b792a:	460c      	mov	r4, r1
   b792c:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b792e:	2220      	movs	r2, #32
   b7930:	2100      	movs	r1, #0
   b7932:	1d20      	adds	r0, r4, #4
   b7934:	f00c f8b4 	bl	c3aa0 <memset>
  event->version = sizeof(sensors_event_t);
   b7938:	2324      	movs	r3, #36	; 0x24
   b793a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b793c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b793e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7940:	2302      	movs	r3, #2
   b7942:	60a3      	str	r3, [r4, #8]
   b7944:	f005 fc98 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b7948:	6120      	str	r0, [r4, #16]
  read();
   b794a:	4628      	mov	r0, r5
   b794c:	f7ff ffa6 	bl	b789c <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b7950:	edd5 7a03 	vldr	s15, [r5, #12]
   b7954:	ed9f 7a09 	vldr	s14, [pc, #36]	; b797c <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b7958:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b795c:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b795e:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b7962:	edd5 7a04 	vldr	s15, [r5, #16]
   b7966:	ee67 7a87 	vmul.f32	s15, s15, s14
   b796a:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b796e:	edd5 7a05 	vldr	s15, [r5, #20]
   b7972:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7976:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b797a:	bd38      	pop	{r3, r4, r5, pc}
   b797c:	42c80000 	.word	0x42c80000

000b7980 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b7980:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7982:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b7984:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7986:	2700      	movs	r7, #0
   b7988:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b798c:	2320      	movs	r3, #32
   b798e:	9300      	str	r3, [sp, #0]
   b7990:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b7992:	460e      	mov	r6, r1
   b7994:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7996:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b799a:	462b      	mov	r3, r5
   b799c:	a808      	add	r0, sp, #32
   b799e:	f005 f8a7 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b79a2:	2305      	movs	r3, #5
   b79a4:	2202      	movs	r2, #2
   b79a6:	a908      	add	r1, sp, #32
   b79a8:	a804      	add	r0, sp, #16
   b79aa:	f005 f97d 	bl	bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b79ae:	4631      	mov	r1, r6
   b79b0:	a804      	add	r0, sp, #16
   b79b2:	f005 f98b 	bl	bcccc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b79b6:	2323      	movs	r3, #35	; 0x23
   b79b8:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b79bc:	9300      	str	r3, [sp, #0]
   b79be:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b79c2:	462b      	mov	r3, r5
   b79c4:	9501      	str	r5, [sp, #4]
   b79c6:	a80e      	add	r0, sp, #56	; 0x38
   b79c8:	f005 f892 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b79cc:	2302      	movs	r3, #2
   b79ce:	461a      	mov	r2, r3
   b79d0:	a90e      	add	r1, sp, #56	; 0x38
   b79d2:	a806      	add	r0, sp, #24
   b79d4:	f005 f968 	bl	bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b79d8:	4631      	mov	r1, r6
   b79da:	a806      	add	r0, sp, #24
   b79dc:	f005 f976 	bl	bcccc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b79e0:	b015      	add	sp, #84	; 0x54
   b79e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b79e4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b79e4:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b79e6:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b79e8:	b08c      	sub	sp, #48	; 0x30
   b79ea:	4606      	mov	r6, r0
   b79ec:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b79ee:	d103      	bne.n	b79f8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b79f0:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b79f2:	f7ff ffc5 	bl	b7980 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b79f6:	e009      	b.n	b7a0c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b79f8:	2903      	cmp	r1, #3
   b79fa:	d003      	beq.n	b7a04 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b79fc:	2905      	cmp	r1, #5
   b79fe:	d103      	bne.n	b7a08 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b7a00:	2101      	movs	r1, #1
   b7a02:	e7f6      	b.n	b79f2 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b7a04:	2102      	movs	r1, #2
   b7a06:	e7f4      	b.n	b79f2 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b7a08:	2907      	cmp	r1, #7
   b7a0a:	d01b      	beq.n	b7a44 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b7a0c:	200a      	movs	r0, #10
   b7a0e:	f005 ff7d 	bl	bd90c <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7a12:	2501      	movs	r5, #1
   b7a14:	2300      	movs	r3, #0
   b7a16:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7a1a:	2320      	movs	r3, #32
   b7a1c:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b7a20:	9300      	str	r3, [sp, #0]
   b7a22:	9501      	str	r5, [sp, #4]
   b7a24:	462b      	mov	r3, r5
   b7a26:	a806      	add	r0, sp, #24
   b7a28:	f005 f862 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b7a2c:	462b      	mov	r3, r5
   b7a2e:	2204      	movs	r2, #4
   b7a30:	a906      	add	r1, sp, #24
   b7a32:	a804      	add	r0, sp, #16
   b7a34:	f005 f938 	bl	bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b7a38:	4621      	mov	r1, r4
   b7a3a:	a804      	add	r0, sp, #16
   b7a3c:	f005 f946 	bl	bcccc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7a40:	b00c      	add	sp, #48	; 0x30
   b7a42:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7a44:	2100      	movs	r1, #0
   b7a46:	e7d4      	b.n	b79f2 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b7a48 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a48:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a4a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a4c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a4e:	2500      	movs	r5, #0
   b7a50:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7a54:	2222      	movs	r2, #34	; 0x22
   b7a56:	9301      	str	r3, [sp, #4]
   b7a58:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a5a:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a5c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7a60:	a806      	add	r0, sp, #24
   b7a62:	f005 f845 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b7a66:	462b      	mov	r3, r5
   b7a68:	2202      	movs	r2, #2
   b7a6a:	a906      	add	r1, sp, #24
   b7a6c:	a804      	add	r0, sp, #16
   b7a6e:	f005 f91b 	bl	bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b7a72:	4621      	mov	r1, r4
   b7a74:	a804      	add	r0, sp, #16
   b7a76:	f005 f929 	bl	bcccc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7a7a:	b00d      	add	sp, #52	; 0x34
   b7a7c:	bd30      	pop	{r4, r5, pc}

000b7a7e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7a7e:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7a80:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7a82:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7a84:	2200      	movs	r2, #0
   b7a86:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7a8a:	2221      	movs	r2, #33	; 0x21
   b7a8c:	9301      	str	r3, [sp, #4]
   b7a8e:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7a90:	460d      	mov	r5, r1
   b7a92:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7a94:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7a98:	a806      	add	r0, sp, #24
   b7a9a:	f005 f829 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7a9e:	2305      	movs	r3, #5
   b7aa0:	2202      	movs	r2, #2
   b7aa2:	a906      	add	r1, sp, #24
   b7aa4:	a804      	add	r0, sp, #16
   b7aa6:	f005 f8ff 	bl	bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b7aaa:	4629      	mov	r1, r5
   b7aac:	a804      	add	r0, sp, #16
   b7aae:	f005 f90d 	bl	bcccc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b7ab2:	7625      	strb	r5, [r4, #24]
}
   b7ab4:	b00d      	add	sp, #52	; 0x34
   b7ab6:	bd30      	pop	{r4, r5, pc}

000b7ab8 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7ab8:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7aba:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7abc:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7abe:	2200      	movs	r2, #0
   b7ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7ac4:	2221      	movs	r2, #33	; 0x21
   b7ac6:	9301      	str	r3, [sp, #4]
   b7ac8:	9200      	str	r2, [sp, #0]
   b7aca:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7ace:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7ad0:	a806      	add	r0, sp, #24
   b7ad2:	f005 f80d 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7ad6:	2305      	movs	r3, #5
   b7ad8:	2202      	movs	r2, #2
   b7ada:	a906      	add	r1, sp, #24
   b7adc:	a804      	add	r0, sp, #16
   b7ade:	f005 f8e3 	bl	bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b7ae2:	a804      	add	r0, sp, #16
   b7ae4:	f005 f8e5 	bl	bccb2 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b7ae8:	b2c0      	uxtb	r0, r0
   b7aea:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b7aec:	b00c      	add	sp, #48	; 0x30
   b7aee:	bd10      	pop	{r4, pc}

000b7af0 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b7af0:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7af2:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b7af4:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7af6:	2501      	movs	r5, #1
   b7af8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7afc:	2321      	movs	r3, #33	; 0x21
   b7afe:	9300      	str	r3, [sp, #0]
   b7b00:	9501      	str	r5, [sp, #4]
   b7b02:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b7b06:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b08:	462b      	mov	r3, r5
   b7b0a:	a806      	add	r0, sp, #24
   b7b0c:	f004 fff0 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b7b10:	2302      	movs	r3, #2
   b7b12:	462a      	mov	r2, r5
   b7b14:	a906      	add	r1, sp, #24
   b7b16:	a804      	add	r0, sp, #16
   b7b18:	f005 f8c6 	bl	bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b7b1c:	4629      	mov	r1, r5
   b7b1e:	a804      	add	r0, sp, #16
   b7b20:	f005 f8d4 	bl	bcccc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b7b24:	200a      	movs	r0, #10
   b7b26:	f005 fef1 	bl	bd90c <delay>
  getRange();
   b7b2a:	4620      	mov	r0, r4
   b7b2c:	f7ff ffc4 	bl	b7ab8 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b7b30:	b00d      	add	sp, #52	; 0x34
   b7b32:	bd30      	pop	{r4, r5, pc}

000b7b34 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b7b34:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b36:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b7b38:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b3a:	2500      	movs	r5, #0
   b7b3c:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b7b40:	230f      	movs	r3, #15
   b7b42:	9300      	str	r3, [sp, #0]
   b7b44:	9601      	str	r6, [sp, #4]
   b7b46:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7b4a:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b7b4c:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b4e:	a804      	add	r0, sp, #16
   b7b50:	f004 ffce 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b7b54:	a804      	add	r0, sp, #16
   b7b56:	f005 f88b 	bl	bcc70 <_ZN23Adafruit_BusIO_Register4readEv>
   b7b5a:	283d      	cmp	r0, #61	; 0x3d
   b7b5c:	d115      	bne.n	b7b8a <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b7b5e:	4620      	mov	r0, r4
   b7b60:	f7ff ffc6 	bl	b7af0 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7b64:	2103      	movs	r1, #3
   b7b66:	4620      	mov	r0, r4
   b7b68:	f7ff ff0a 	bl	b7980 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b7b6c:	4631      	mov	r1, r6
   b7b6e:	4620      	mov	r0, r4
   b7b70:	f7ff ff38 	bl	b79e4 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b7b74:	4629      	mov	r1, r5
   b7b76:	4620      	mov	r0, r4
   b7b78:	f7ff ff81 	bl	b7a7e <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	4629      	mov	r1, r5
   b7b80:	f7ff ff62 	bl	b7a48 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b7b84:	4630      	mov	r0, r6
}
   b7b86:	b00a      	add	sp, #40	; 0x28
   b7b88:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b7b8a:	4628      	mov	r0, r5
   b7b8c:	e7fb      	b.n	b7b86 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b7b8e <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b7b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b7b90:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b7b92:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b7b94:	b95b      	cbnz	r3, b7bae <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b7b96:	2010      	movs	r0, #16
   b7b98:	e9cd 1200 	strd	r1, r2, [sp]
   b7b9c:	f7fc fa7b 	bl	b4096 <_Znwj>
   b7ba0:	4605      	mov	r5, r0
   b7ba2:	b118      	cbz	r0, b7bac <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b7ba4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7ba8:	f005 f8a9 	bl	bccfe <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b7bac:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b7bae:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b7bb0:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b7bb2:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b7bb4:	2101      	movs	r1, #1
   b7bb6:	f005 f8be 	bl	bcd36 <_ZN18Adafruit_I2CDevice5beginEb>
   b7bba:	b128      	cbz	r0, b7bc8 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b7bbc:	4620      	mov	r0, r4
}
   b7bbe:	b003      	add	sp, #12
   b7bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b7bc4:	f7ff bfb6 	b.w	b7b34 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b7bc8:	b003      	add	sp, #12
   b7bca:	bd30      	pop	{r4, r5, pc}

000b7bcc <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7bcc:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b7bce:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7bd0:	b08b      	sub	sp, #44	; 0x2c
   b7bd2:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b7bd4:	2500      	movs	r5, #0
   b7bd6:	2232      	movs	r2, #50	; 0x32
   b7bd8:	2102      	movs	r1, #2
   b7bda:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7bde:	e9cd 2100 	strd	r2, r1, [sp]
   b7be2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7be6:	a804      	add	r0, sp, #16
   b7be8:	f004 ff82 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b7bec:	462a      	mov	r2, r5
   b7bee:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b7bf2:	a804      	add	r0, sp, #16
   b7bf4:	f004 ffdc 	bl	bcbb0 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7bf8:	b00b      	add	sp, #44	; 0x2c
   b7bfa:	bd30      	pop	{r4, r5, pc}

000b7bfc <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b7bfc:	b530      	push	{r4, r5, lr}
   b7bfe:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c00:	2500      	movs	r5, #0
  value |= latch << 1;
   b7c02:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b7c06:	0064      	lsls	r4, r4, #1
   b7c08:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b7c0c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b7c10:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b7c14:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b7c18:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b7c1c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c20:	2301      	movs	r3, #1
  value |= latch << 1;
   b7c22:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c26:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b7c2a:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b7c2c:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c2e:	2230      	movs	r2, #48	; 0x30
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	9200      	str	r2, [sp, #0]
   b7c34:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7c38:	a804      	add	r0, sp, #16
   b7c3a:	f004 ff59 	bl	bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b7c3e:	462a      	mov	r2, r5
   b7c40:	4621      	mov	r1, r4
   b7c42:	a804      	add	r0, sp, #16
   b7c44:	f004 ffb4 	bl	bcbb0 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7c48:	b00b      	add	sp, #44	; 0x2c
   b7c4a:	bd30      	pop	{r4, r5, pc}

000b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b7c4c:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c4e:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b7c50:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7c52:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c54:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7c56:	041b      	lsls	r3, r3, #16
   b7c58:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b7c5c:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b7c5e:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b7c60:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b7c64:	bd10      	pop	{r4, pc}

000b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c66:	1843      	adds	r3, r0, r1
   b7c68:	5c40      	ldrb	r0, [r0, r1]
   b7c6a:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b7c6c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b7c70:	4770      	bx	lr

000b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b7c72:	b410      	push	{r4}
    if (base == 0) {
   b7c74:	b92a      	cbnz	r2, b7c82 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b7c76:	6802      	ldr	r2, [r0, #0]
    }
}
   b7c78:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b7c7c:	6892      	ldr	r2, [r2, #8]
   b7c7e:	b2c9      	uxtb	r1, r1
   b7c80:	4710      	bx	r2
}
   b7c82:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b7c86:	b2d2      	uxtb	r2, r2
   b7c88:	f008 be85 	b.w	c0996 <_ZN5Print11printNumberEmh>

000b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b7c8c:	b912      	cbnz	r2, b7c94 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b7c8e:	6803      	ldr	r3, [r0, #0]
   b7c90:	689b      	ldr	r3, [r3, #8]
   b7c92:	4718      	bx	r3
        return printNumber(val, base) + t;
   b7c94:	b2d2      	uxtb	r2, r2
   b7c96:	f008 be7e 	b.w	c0996 <_ZN5Print11printNumberEmh>

000b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b7c9a:	b510      	push	{r4, lr}
   b7c9c:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b7c9e:	f7ff fff5 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b7ca2:	4620      	mov	r0, r4
    }
   b7ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b7ca8:	f008 be5d 	b.w	c0966 <_ZN5Print7printlnEv>

000b7cac <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b7cac:	6803      	ldr	r3, [r0, #0]
   b7cae:	b2c9      	uxtb	r1, r1
   b7cb0:	689b      	ldr	r3, [r3, #8]
   b7cb2:	4718      	bx	r3

000b7cb4 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b7cb8:	8002      	strh	r2, [r0, #0]
   b7cba:	2142      	movs	r1, #66	; 0x42
   b7cbc:	2200      	movs	r2, #0
   b7cbe:	b510      	push	{r4, lr}
   b7cc0:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7cc4:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7cc8:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b7ccc:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7cd0:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b7cd4:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b7cd8:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b7cdc:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b7ce0:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b7ce4:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b7ce8:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b7cec:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b7cf0:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b7cf4:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b7cf8:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b7cfc:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b7d00:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b7d04:	2180      	movs	r1, #128	; 0x80
   b7d06:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b7d0a:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b7d0e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b7d12:	4925      	ldr	r1, [pc, #148]	; (b7da8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b7d14:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b7d18:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b7d1c:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b7d20:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b7d24:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b7d28:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b7d2c:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b7d30:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b7d34:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b7d38:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b7d3c:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b7d40:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b7d44:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b7d48:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b7d4c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b7d50:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b7d54:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b7d58:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b7d5c:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b7d60:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b7d64:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b7d68:	4910      	ldr	r1, [pc, #64]	; (b7dac <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b7d6a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b7d6e:	f640 1164 	movw	r1, #2404	; 0x964
   b7d72:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b7d76:	2158      	movs	r1, #88	; 0x58
   b7d78:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7d7c:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7d7e:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b7d82:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b7d86:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b7d8a:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b7d8e:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b7d92:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b7d96:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7d9a:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7d9e:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b7da2:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b7da6:	bd10      	pop	{r4, pc}
   b7da8:	02020000 	.word	0x02020000
   b7dac:	64640200 	.word	0x64640200

000b7db0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b7db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7db2:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b7db4:	460d      	mov	r5, r1
   b7db6:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b7dba:	b9a9      	cbnz	r1, b7de8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b7dbc:	b1a8      	cbz	r0, b7dea <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b7dbe:	f7fc f96e 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7dc2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b7dc6:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7dca:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b7dce:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7dd2:	b913      	cbnz	r3, b7dda <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b7dd4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7dd8:	b123      	cbz	r3, b7de4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b7dda:	4920      	ldr	r1, [pc, #128]	; (b7e5c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b7ddc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7de0:	f008 fdd7 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b7de4:	2001      	movs	r0, #1
   b7de6:	e011      	b.n	b7e0c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b7de8:	b9b8      	cbnz	r0, b7e1a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b7dea:	4628      	mov	r0, r5
   b7dec:	f7fc f955 	bl	b409a <_Znaj>
   b7df0:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7df4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b7df8:	bb60      	cbnz	r0, b7e54 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7dfa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b7dfe:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e02:	b923      	cbnz	r3, b7e0e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b7e04:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e08:	b90b      	cbnz	r3, b7e0e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b7e0a:	2000      	movs	r0, #0
}
   b7e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b7e0e:	4914      	ldr	r1, [pc, #80]	; (b7e60 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e14:	f008 fdbd 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b7e18:	e7f7      	b.n	b7e0a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b7e1a:	4608      	mov	r0, r1
   b7e1c:	f7fc f93d 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b7e20:	4606      	mov	r6, r0
   b7e22:	b940      	cbnz	r0, b7e36 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e24:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7e28:	b91b      	cbnz	r3, b7e32 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b7e2a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e2e:	2b00      	cmp	r3, #0
   b7e30:	d0eb      	beq.n	b7e0a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e32:	490c      	ldr	r1, [pc, #48]	; (b7e64 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b7e34:	e7ec      	b.n	b7e10 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b7e36:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b7e3a:	42aa      	cmp	r2, r5
   b7e3c:	bf28      	it	cs
   b7e3e:	462a      	movcs	r2, r5
   b7e40:	4639      	mov	r1, r7
   b7e42:	f00b fe05 	bl	c3a50 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b7e46:	4638      	mov	r0, r7
   b7e48:	f7fc f929 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b7e4c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b7e50:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b7e54:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b7e58:	e7c4      	b.n	b7de4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b7e5a:	bf00      	nop
   b7e5c:	000c6310 	.word	0x000c6310
   b7e60:	000c633b 	.word	0x000c633b
   b7e64:	000c6366 	.word	0x000c6366

000b7e68 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b7e68:	290d      	cmp	r1, #13
   b7e6a:	f000 80cd 	beq.w	b8008 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b7e6e:	d809      	bhi.n	b7e84 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b7e70:	2902      	cmp	r1, #2
   b7e72:	f000 80a7 	beq.w	b7fc4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b7e76:	2906      	cmp	r1, #6
   b7e78:	f000 80be 	beq.w	b7ff8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b7e7c:	2901      	cmp	r1, #1
   b7e7e:	d016      	beq.n	b7eae <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b7e80:	2000      	movs	r0, #0
}
   b7e82:	4770      	bx	lr
  switch (Class)
   b7e84:	2913      	cmp	r1, #19
   b7e86:	f000 80d4 	beq.w	b8032 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b7e8a:	2928      	cmp	r1, #40	; 0x28
   b7e8c:	f000 80dc 	beq.w	b8048 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b7e90:	2910      	cmp	r1, #16
   b7e92:	d1f5      	bne.n	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b7e94:	2a10      	cmp	r2, #16
   b7e96:	f000 80c9 	beq.w	b802c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b7e9a:	f200 80ba 	bhi.w	b8012 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b7e9e:	2a02      	cmp	r2, #2
   b7ea0:	f000 80c1 	beq.w	b8026 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b7ea4:	2a03      	cmp	r2, #3
   b7ea6:	d1eb      	bne.n	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b7ea8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b7eac:	e066      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7eae:	2a26      	cmp	r2, #38	; 0x26
   b7eb0:	d854      	bhi.n	b7f5c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b7eb2:	2a00      	cmp	r2, #0
   b7eb4:	d0e4      	beq.n	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7eb6:	3a01      	subs	r2, #1
   b7eb8:	2a25      	cmp	r2, #37	; 0x25
   b7eba:	d8e1      	bhi.n	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7ebc:	a301      	add	r3, pc, #4	; (adr r3, b7ec4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b7ebe:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b7ec2:	bf00      	nop
   b7ec4:	000b7f7b 	.word	0x000b7f7b
   b7ec8:	000b7e81 	.word	0x000b7e81
   b7ecc:	000b7f85 	.word	0x000b7f85
   b7ed0:	000b7f89 	.word	0x000b7f89
   b7ed4:	000b7f8d 	.word	0x000b7f8d
   b7ed8:	000b7e81 	.word	0x000b7e81
   b7edc:	000b7f91 	.word	0x000b7f91
   b7ee0:	000b7e81 	.word	0x000b7e81
   b7ee4:	000b7f95 	.word	0x000b7f95
   b7ee8:	000b7e81 	.word	0x000b7e81
   b7eec:	000b7e81 	.word	0x000b7e81
   b7ef0:	000b7e81 	.word	0x000b7e81
   b7ef4:	000b7e81 	.word	0x000b7e81
   b7ef8:	000b7e81 	.word	0x000b7e81
   b7efc:	000b7e81 	.word	0x000b7e81
   b7f00:	000b7e81 	.word	0x000b7e81
   b7f04:	000b7f99 	.word	0x000b7f99
   b7f08:	000b7f9d 	.word	0x000b7f9d
   b7f0c:	000b7fa1 	.word	0x000b7fa1
   b7f10:	000b7fa5 	.word	0x000b7fa5
   b7f14:	000b7e81 	.word	0x000b7e81
   b7f18:	000b7e81 	.word	0x000b7e81
   b7f1c:	000b7fa9 	.word	0x000b7fa9
   b7f20:	000b7e81 	.word	0x000b7e81
   b7f24:	000b7e81 	.word	0x000b7e81
   b7f28:	000b7e81 	.word	0x000b7e81
   b7f2c:	000b7e81 	.word	0x000b7e81
   b7f30:	000b7e81 	.word	0x000b7e81
   b7f34:	000b7e81 	.word	0x000b7e81
   b7f38:	000b7e81 	.word	0x000b7e81
   b7f3c:	000b7e81 	.word	0x000b7e81
   b7f40:	000b7e81 	.word	0x000b7e81
   b7f44:	000b7fad 	.word	0x000b7fad
   b7f48:	000b7fb1 	.word	0x000b7fb1
   b7f4c:	000b7e81 	.word	0x000b7e81
   b7f50:	000b7e81 	.word	0x000b7e81
   b7f54:	000b7e81 	.word	0x000b7e81
   b7f58:	000b7fb5 	.word	0x000b7fb5
   b7f5c:	2a3c      	cmp	r2, #60	; 0x3c
   b7f5e:	d02d      	beq.n	b7fbc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b7f60:	d805      	bhi.n	b7f6e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b7f62:	2a35      	cmp	r2, #53	; 0x35
   b7f64:	d028      	beq.n	b7fb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b7f66:	2a3b      	cmp	r2, #59	; 0x3b
   b7f68:	d18a      	bne.n	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b7f6a:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b7f6c:	e006      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7f6e:	2a60      	cmp	r2, #96	; 0x60
   b7f70:	d026      	beq.n	b7fc0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b7f72:	2a61      	cmp	r2, #97	; 0x61
   b7f74:	d184      	bne.n	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b7f76:	6980      	ldr	r0, [r0, #24]
   b7f78:	e000      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b7f7a:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b7f7c:	3800      	subs	r0, #0
   b7f7e:	bf18      	it	ne
   b7f80:	2001      	movne	r0, #1
   b7f82:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b7f84:	6900      	ldr	r0, [r0, #16]
   b7f86:	e7f9      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b7f88:	6940      	ldr	r0, [r0, #20]
   b7f8a:	e7f7      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b7f8c:	69c0      	ldr	r0, [r0, #28]
   b7f8e:	e7f5      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b7f90:	6a00      	ldr	r0, [r0, #32]
   b7f92:	e7f3      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b7f94:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7f96:	e7f1      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b7f98:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7f9a:	e7ef      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b7f9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b7f9e:	e7ed      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b7fa0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7fa2:	e7eb      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b7fa4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b7fa6:	e7e9      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b7fa8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7faa:	e7e7      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b7fac:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7fae:	e7e5      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b7fb0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b7fb2:	e7e3      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b7fb4:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b7fb6:	e7e1      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b7fb8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b7fba:	e7df      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b7fbc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b7fbe:	e7dd      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b7fc0:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b7fc2:	e7db      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7fc4:	2a34      	cmp	r2, #52	; 0x34
   b7fc6:	d015      	beq.n	b7ff4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b7fc8:	d806      	bhi.n	b7fd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b7fca:	2a13      	cmp	r2, #19
   b7fcc:	d00b      	beq.n	b7fe6 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b7fce:	2a15      	cmp	r2, #21
   b7fd0:	f47f af56 	bne.w	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b7fd4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b7fd6:	e7d1      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7fd8:	2a72      	cmp	r2, #114	; 0x72
   b7fda:	d006      	beq.n	b7fea <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b7fdc:	2a73      	cmp	r2, #115	; 0x73
   b7fde:	f47f af4f 	bne.w	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b7fe2:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b7fe4:	e7ca      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b7fe6:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b7fe8:	e7c8      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b7fea:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b7fec:	2b00      	cmp	r3, #0
   b7fee:	d13b      	bne.n	b8068 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b7ff0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b7ff2:	e7c3      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b7ff4:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b7ff6:	e7c1      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7ff8:	b122      	cbz	r2, b8004 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b7ffa:	2a08      	cmp	r2, #8
   b7ffc:	f47f af40 	bne.w	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8000:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8002:	e7bb      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8004:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8006:	e7b9      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8008:	2a03      	cmp	r2, #3
   b800a:	f47f af39 	bne.w	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b800e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8010:	e7b4      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8012:	2a14      	cmp	r2, #20
   b8014:	d005      	beq.n	b8022 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8016:	2a15      	cmp	r2, #21
   b8018:	f47f af32 	bne.w	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b801c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b8020:	e7ac      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b8022:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8024:	e7aa      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8026:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b802a:	e7a7      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b802c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b8030:	e7a4      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8032:	2a60      	cmp	r2, #96	; 0x60
   b8034:	d005      	beq.n	b8042 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8036:	2a80      	cmp	r2, #128	; 0x80
   b8038:	f47f af22 	bne.w	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b803c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8040:	e79c      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8042:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8046:	e799      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8048:	2a01      	cmp	r2, #1
   b804a:	d007      	beq.n	b805c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b804c:	2a02      	cmp	r2, #2
   b804e:	d008      	beq.n	b8062 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b8050:	2a00      	cmp	r2, #0
   b8052:	f47f af15 	bne.w	b7e80 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8056:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b805a:	e78f      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b805c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b8060:	e78c      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b8062:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8066:	e789      	b.n	b7f7c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8068:	2001      	movs	r0, #1
   b806a:	4770      	bx	lr

000b806c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b806c:	290d      	cmp	r1, #13
   b806e:	d035      	beq.n	b80dc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b8070:	d807      	bhi.n	b8082 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b8072:	2902      	cmp	r1, #2
   b8074:	d019      	beq.n	b80aa <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8076:	2906      	cmp	r1, #6
   b8078:	d02a      	beq.n	b80d0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b807a:	2901      	cmp	r1, #1
   b807c:	d00d      	beq.n	b809a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b807e:	2000      	movs	r0, #0
}
   b8080:	4770      	bx	lr
  switch (Class)
   b8082:	2913      	cmp	r1, #19
   b8084:	d02f      	beq.n	b80e6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b8086:	2928      	cmp	r1, #40	; 0x28
   b8088:	d034      	beq.n	b80f4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b808a:	2910      	cmp	r1, #16
   b808c:	d1f7      	bne.n	b807e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b808e:	3a02      	subs	r2, #2
   b8090:	b2d2      	uxtb	r2, r2
   b8092:	2a13      	cmp	r2, #19
   b8094:	d8f3      	bhi.n	b807e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8096:	4b1f      	ldr	r3, [pc, #124]	; (b8114 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b8098:	e004      	b.n	b80a4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b809a:	3a01      	subs	r2, #1
   b809c:	b2d2      	uxtb	r2, r2
   b809e:	2a60      	cmp	r2, #96	; 0x60
   b80a0:	d8ed      	bhi.n	b807e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80a2:	4b1d      	ldr	r3, [pc, #116]	; (b8118 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b80a4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b80a8:	4770      	bx	lr
    switch (ID)
   b80aa:	2a34      	cmp	r2, #52	; 0x34
   b80ac:	d027      	beq.n	b80fe <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b80ae:	d807      	bhi.n	b80c0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b80b0:	2a13      	cmp	r2, #19
   b80b2:	d026      	beq.n	b8102 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b80b4:	2a15      	cmp	r2, #21
   b80b6:	bf14      	ite	ne
   b80b8:	2000      	movne	r0, #0
   b80ba:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b80be:	4770      	bx	lr
   b80c0:	2a72      	cmp	r2, #114	; 0x72
   b80c2:	d020      	beq.n	b8106 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b80c4:	2a73      	cmp	r2, #115	; 0x73
   b80c6:	bf14      	ite	ne
   b80c8:	2000      	movne	r0, #0
   b80ca:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b80ce:	4770      	bx	lr
    switch (ID)
   b80d0:	b1e2      	cbz	r2, b810c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b80d2:	2a08      	cmp	r2, #8
   b80d4:	bf14      	ite	ne
   b80d6:	2000      	movne	r0, #0
   b80d8:	2006      	moveq	r0, #6
   b80da:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b80dc:	2a03      	cmp	r2, #3
   b80de:	bf14      	ite	ne
   b80e0:	2000      	movne	r0, #0
   b80e2:	201c      	moveq	r0, #28
   b80e4:	4770      	bx	lr
    switch (ID)
   b80e6:	2a60      	cmp	r2, #96	; 0x60
   b80e8:	d012      	beq.n	b8110 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b80ea:	2a80      	cmp	r2, #128	; 0x80
   b80ec:	bf14      	ite	ne
   b80ee:	2000      	movne	r0, #0
   b80f0:	20a4      	moveq	r0, #164	; 0xa4
   b80f2:	4770      	bx	lr
    switch (ID)
   b80f4:	2a02      	cmp	r2, #2
   b80f6:	d8c2      	bhi.n	b807e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80f8:	4b08      	ldr	r3, [pc, #32]	; (b811c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b80fa:	5c98      	ldrb	r0, [r3, r2]
   b80fc:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b80fe:	200c      	movs	r0, #12
   b8100:	4770      	bx	lr
   b8102:	2048      	movs	r0, #72	; 0x48
   b8104:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8106:	f44f 7004 	mov.w	r0, #528	; 0x210
   b810a:	4770      	bx	lr
   b810c:	2014      	movs	r0, #20
   b810e:	4770      	bx	lr
   b8110:	2008      	movs	r0, #8
   b8112:	4770      	bx	lr
   b8114:	000c7026 	.word	0x000c7026
   b8118:	000c6f64 	.word	0x000c6f64
   b811c:	000c704e 	.word	0x000c704e

000b8120 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b8120:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b8122:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8126:	07ca      	lsls	r2, r1, #31
   b8128:	d415      	bmi.n	b8156 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b812a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b812e:	4b59      	ldr	r3, [pc, #356]	; (b8294 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b8130:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8134:	429a      	cmp	r2, r3
   b8136:	d101      	bne.n	b813c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8138:	078b      	lsls	r3, r1, #30
   b813a:	d40c      	bmi.n	b8156 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b813c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8140:	2b47      	cmp	r3, #71	; 0x47
   b8142:	d174      	bne.n	b822e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8144:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8148:	f245 1441 	movw	r4, #20801	; 0x5141
   b814c:	42a3      	cmp	r3, r4
   b814e:	d104      	bne.n	b815a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b8150:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8154:	d06b      	beq.n	b822e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8156:	2001      	movs	r0, #1
   b8158:	e070      	b.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b815a:	f245 1442 	movw	r4, #20802	; 0x5142
   b815e:	42a3      	cmp	r3, r4
   b8160:	d102      	bne.n	b8168 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b8162:	f011 0f08 	tst.w	r1, #8
   b8166:	e7f5      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8168:	f245 3442 	movw	r4, #21314	; 0x5342
   b816c:	42a3      	cmp	r3, r4
   b816e:	d102      	bne.n	b8176 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b8170:	f011 0f10 	tst.w	r1, #16
   b8174:	e7ee      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8176:	f244 1447 	movw	r4, #16711	; 0x4147
   b817a:	42a3      	cmp	r3, r4
   b817c:	d102      	bne.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b817e:	f011 0f20 	tst.w	r1, #32
   b8182:	e7e7      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b8184:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8188:	42a3      	cmp	r3, r4
   b818a:	d102      	bne.n	b8192 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b818c:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8190:	e7e0      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b8192:	f245 144c 	movw	r4, #20812	; 0x514c
   b8196:	42a3      	cmp	r3, r4
   b8198:	d102      	bne.n	b81a0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b819a:	f011 0f80 	tst.w	r1, #128	; 0x80
   b819e:	e7d9      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b81a0:	f245 114e 	movw	r1, #20814	; 0x514e
   b81a4:	428b      	cmp	r3, r1
   b81a6:	d104      	bne.n	b81b2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b81a8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81ac:	f013 0f01 	tst.w	r3, #1
   b81b0:	e7d0      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b81b2:	f245 314e 	movw	r1, #21326	; 0x534e
   b81b6:	428b      	cmp	r3, r1
   b81b8:	d104      	bne.n	b81c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b81ba:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81be:	f013 0f02 	tst.w	r3, #2
   b81c2:	e7c7      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b81c4:	f245 1150 	movw	r1, #20816	; 0x5150
   b81c8:	428b      	cmp	r3, r1
   b81ca:	d104      	bne.n	b81d6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b81cc:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81d0:	f013 0f04 	tst.w	r3, #4
   b81d4:	e7be      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b81d6:	f245 1151 	movw	r1, #20817	; 0x5151
   b81da:	428b      	cmp	r3, r1
   b81dc:	d104      	bne.n	b81e8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b81de:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81e2:	f013 0f08 	tst.w	r3, #8
   b81e6:	e7b5      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b81e8:	f245 3152 	movw	r1, #21330	; 0x5352
   b81ec:	428b      	cmp	r3, r1
   b81ee:	d104      	bne.n	b81fa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b81f0:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81f4:	f013 0f10 	tst.w	r3, #16
   b81f8:	e7ac      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b81fa:	f244 1153 	movw	r1, #16723	; 0x4153
   b81fe:	428b      	cmp	r3, r1
   b8200:	d104      	bne.n	b820c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8202:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8206:	f013 0f20 	tst.w	r3, #32
   b820a:	e7a3      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b820c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8210:	428b      	cmp	r3, r1
   b8212:	d104      	bne.n	b821e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8214:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8218:	f013 0f40 	tst.w	r3, #64	; 0x40
   b821c:	e79a      	b.n	b8154 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b821e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8222:	428b      	cmp	r3, r1
   b8224:	d103      	bne.n	b822e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8226:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b822a:	2b00      	cmp	r3, #0
   b822c:	db93      	blt.n	b8156 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b822e:	4b1a      	ldr	r3, [pc, #104]	; (b8298 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8230:	429a      	cmp	r2, r3
   b8232:	d104      	bne.n	b823e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8234:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8238:	f000 0001 	and.w	r0, r0, #1
}
   b823c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b823e:	4b17      	ldr	r3, [pc, #92]	; (b829c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8240:	429a      	cmp	r2, r3
   b8242:	d104      	bne.n	b824e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8244:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8248:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b824c:	e7f6      	b.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b824e:	4b14      	ldr	r3, [pc, #80]	; (b82a0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8250:	429a      	cmp	r2, r3
   b8252:	d104      	bne.n	b825e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8254:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8258:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b825c:	e7ee      	b.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b825e:	4b11      	ldr	r3, [pc, #68]	; (b82a4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8260:	429a      	cmp	r2, r3
   b8262:	d104      	bne.n	b826e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8264:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8268:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b826c:	e7e6      	b.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b826e:	4b0e      	ldr	r3, [pc, #56]	; (b82a8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b8270:	429a      	cmp	r2, r3
   b8272:	d104      	bne.n	b827e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8274:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8278:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b827c:	e7de      	b.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b827e:	4b0b      	ldr	r3, [pc, #44]	; (b82ac <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b8280:	429a      	cmp	r2, r3
   b8282:	d104      	bne.n	b828e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b8284:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8288:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b828c:	e7d6      	b.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b828e:	2000      	movs	r0, #0
   b8290:	e7d4      	b.n	b823c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b8292:	bf00      	nop
   b8294:	4d544400 	.word	0x4d544400
   b8298:	4d4c5200 	.word	0x4d4c5200
   b829c:	434d5200 	.word	0x434d5200
   b82a0:	54585400 	.word	0x54585400
   b82a4:	574c5600 	.word	0x574c5600
   b82a8:	47545600 	.word	0x47545600
   b82ac:	41445a00 	.word	0x41445a00

000b82b0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b82b0:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b82b4:	2b2a      	cmp	r3, #42	; 0x2a
   b82b6:	d157      	bne.n	b8368 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b82b8:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b82bc:	2b47      	cmp	r3, #71	; 0x47
   b82be:	d153      	bne.n	b8368 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b82c0:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b82c4:	4a29      	ldr	r2, [pc, #164]	; (b836c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b82c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b82ca:	4293      	cmp	r3, r2
   b82cc:	d011      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b82ce:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b82d2:	2a47      	cmp	r2, #71	; 0x47
   b82d4:	d11a      	bne.n	b830c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b82d6:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b82da:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b82de:	3941      	subs	r1, #65	; 0x41
   b82e0:	b289      	uxth	r1, r1
   b82e2:	2910      	cmp	r1, #16
   b82e4:	d907      	bls.n	b82f6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b82e6:	f022 0110 	bic.w	r1, r2, #16
   b82ea:	f245 3042 	movw	r0, #21314	; 0x5342
   b82ee:	4281      	cmp	r1, r0
   b82f0:	d129      	bne.n	b8346 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b82f2:	2001      	movs	r0, #1
}
   b82f4:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b82f6:	481e      	ldr	r0, [pc, #120]	; (b8370 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b82f8:	fa20 f101 	lsr.w	r1, r0, r1
   b82fc:	07c9      	lsls	r1, r1, #31
   b82fe:	d4f8      	bmi.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8304:	f245 4153 	movw	r1, #21587	; 0x5453
   b8308:	428a      	cmp	r2, r1
   b830a:	d0f2      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b830c:	4a19      	ldr	r2, [pc, #100]	; (b8374 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b830e:	4293      	cmp	r3, r2
   b8310:	d0ef      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8312:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8316:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b831a:	4293      	cmp	r3, r2
   b831c:	d0e9      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b831e:	4a16      	ldr	r2, [pc, #88]	; (b8378 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8320:	4293      	cmp	r3, r2
   b8322:	d0e6      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8324:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8328:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b832c:	4293      	cmp	r3, r2
   b832e:	d0e0      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8330:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8334:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8338:	4293      	cmp	r3, r2
   b833a:	d0da      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b833c:	480f      	ldr	r0, [pc, #60]	; (b837c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b833e:	1a1b      	subs	r3, r3, r0
   b8340:	4258      	negs	r0, r3
   b8342:	4158      	adcs	r0, r3
   b8344:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8346:	f244 1147 	movw	r1, #16711	; 0x4147
   b834a:	428a      	cmp	r2, r1
   b834c:	d0d1      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b834e:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8352:	428a      	cmp	r2, r1
   b8354:	d0cd      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8356:	f245 314e 	movw	r1, #21326	; 0x534e
   b835a:	428a      	cmp	r2, r1
   b835c:	d0c9      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b835e:	f244 1153 	movw	r1, #16723	; 0x4153
   b8362:	428a      	cmp	r2, r1
   b8364:	d0c5      	beq.n	b82f2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8366:	e7cb      	b.n	b8300 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8368:	2000      	movs	r0, #0
   b836a:	4770      	bx	lr
   b836c:	4d544400 	.word	0x4d544400
   b8370:	0001a803 	.word	0x0001a803
   b8374:	4d4c5200 	.word	0x4d4c5200
   b8378:	54585400 	.word	0x54585400
   b837c:	41445a00 	.word	0x41445a00

000b8380 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8380:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b8382:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8386:	07ca      	lsls	r2, r1, #31
   b8388:	d415      	bmi.n	b83b6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b838a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b838e:	4b59      	ldr	r3, [pc, #356]	; (b84f4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8390:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8394:	429a      	cmp	r2, r3
   b8396:	d101      	bne.n	b839c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8398:	078b      	lsls	r3, r1, #30
   b839a:	d40c      	bmi.n	b83b6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b839c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b83a0:	2b47      	cmp	r3, #71	; 0x47
   b83a2:	d174      	bne.n	b848e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b83a4:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b83a8:	f245 1441 	movw	r4, #20801	; 0x5141
   b83ac:	42a3      	cmp	r3, r4
   b83ae:	d104      	bne.n	b83ba <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b83b0:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b83b4:	d06b      	beq.n	b848e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b83b6:	2001      	movs	r0, #1
   b83b8:	e070      	b.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b83ba:	f245 1442 	movw	r4, #20802	; 0x5142
   b83be:	42a3      	cmp	r3, r4
   b83c0:	d102      	bne.n	b83c8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b83c2:	f011 0f08 	tst.w	r1, #8
   b83c6:	e7f5      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b83c8:	f245 3442 	movw	r4, #21314	; 0x5342
   b83cc:	42a3      	cmp	r3, r4
   b83ce:	d102      	bne.n	b83d6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b83d0:	f011 0f10 	tst.w	r1, #16
   b83d4:	e7ee      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b83d6:	f244 1447 	movw	r4, #16711	; 0x4147
   b83da:	42a3      	cmp	r3, r4
   b83dc:	d102      	bne.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b83de:	f011 0f20 	tst.w	r1, #32
   b83e2:	e7e7      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b83e4:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b83e8:	42a3      	cmp	r3, r4
   b83ea:	d102      	bne.n	b83f2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b83ec:	f011 0f40 	tst.w	r1, #64	; 0x40
   b83f0:	e7e0      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b83f2:	f245 144c 	movw	r4, #20812	; 0x514c
   b83f6:	42a3      	cmp	r3, r4
   b83f8:	d102      	bne.n	b8400 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b83fa:	f011 0f80 	tst.w	r1, #128	; 0x80
   b83fe:	e7d9      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8400:	f245 114e 	movw	r1, #20814	; 0x514e
   b8404:	428b      	cmp	r3, r1
   b8406:	d104      	bne.n	b8412 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8408:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b840c:	f013 0f01 	tst.w	r3, #1
   b8410:	e7d0      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8412:	f245 314e 	movw	r1, #21326	; 0x534e
   b8416:	428b      	cmp	r3, r1
   b8418:	d104      	bne.n	b8424 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b841a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b841e:	f013 0f02 	tst.w	r3, #2
   b8422:	e7c7      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8424:	f245 1150 	movw	r1, #20816	; 0x5150
   b8428:	428b      	cmp	r3, r1
   b842a:	d104      	bne.n	b8436 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b842c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8430:	f013 0f04 	tst.w	r3, #4
   b8434:	e7be      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8436:	f245 1151 	movw	r1, #20817	; 0x5151
   b843a:	428b      	cmp	r3, r1
   b843c:	d104      	bne.n	b8448 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b843e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8442:	f013 0f08 	tst.w	r3, #8
   b8446:	e7b5      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8448:	f245 3152 	movw	r1, #21330	; 0x5352
   b844c:	428b      	cmp	r3, r1
   b844e:	d104      	bne.n	b845a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8450:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8454:	f013 0f10 	tst.w	r3, #16
   b8458:	e7ac      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b845a:	f244 1153 	movw	r1, #16723	; 0x4153
   b845e:	428b      	cmp	r3, r1
   b8460:	d104      	bne.n	b846c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8462:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8466:	f013 0f20 	tst.w	r3, #32
   b846a:	e7a3      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b846c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8470:	428b      	cmp	r3, r1
   b8472:	d104      	bne.n	b847e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8474:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8478:	f013 0f40 	tst.w	r3, #64	; 0x40
   b847c:	e79a      	b.n	b83b4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b847e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8482:	428b      	cmp	r3, r1
   b8484:	d103      	bne.n	b848e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8486:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b848a:	2b00      	cmp	r3, #0
   b848c:	db93      	blt.n	b83b6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b848e:	4b1a      	ldr	r3, [pc, #104]	; (b84f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8490:	429a      	cmp	r2, r3
   b8492:	d104      	bne.n	b849e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b8494:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8498:	f000 0001 	and.w	r0, r0, #1
}
   b849c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b849e:	4b17      	ldr	r3, [pc, #92]	; (b84fc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b84a0:	429a      	cmp	r2, r3
   b84a2:	d104      	bne.n	b84ae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b84a4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b84ac:	e7f6      	b.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b84ae:	4b14      	ldr	r3, [pc, #80]	; (b8500 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b84b0:	429a      	cmp	r2, r3
   b84b2:	d104      	bne.n	b84be <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b84b4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84b8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b84bc:	e7ee      	b.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b84be:	4b11      	ldr	r3, [pc, #68]	; (b8504 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b84c0:	429a      	cmp	r2, r3
   b84c2:	d104      	bne.n	b84ce <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b84c4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84c8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b84cc:	e7e6      	b.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b84ce:	4b0e      	ldr	r3, [pc, #56]	; (b8508 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b84d0:	429a      	cmp	r2, r3
   b84d2:	d104      	bne.n	b84de <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b84d4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84d8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b84dc:	e7de      	b.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b84de:	4b0b      	ldr	r3, [pc, #44]	; (b850c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b84e0:	429a      	cmp	r2, r3
   b84e2:	d104      	bne.n	b84ee <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b84e4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84e8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b84ec:	e7d6      	b.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b84ee:	2000      	movs	r0, #0
   b84f0:	e7d4      	b.n	b849c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b84f2:	bf00      	nop
   b84f4:	4d544400 	.word	0x4d544400
   b84f8:	4d4c5200 	.word	0x4d4c5200
   b84fc:	434d5200 	.word	0x434d5200
   b8500:	54585400 	.word	0x54585400
   b8504:	574c5600 	.word	0x574c5600
   b8508:	47545600 	.word	0x47545600
   b850c:	41445a00 	.word	0x41445a00

000b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8510:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8514:	b110      	cbz	r0, b851c <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8516:	6803      	ldr	r3, [r0, #0]
   b8518:	689b      	ldr	r3, [r3, #8]
   b851a:	4718      	bx	r3
}
   b851c:	4770      	bx	lr
	...

000b8520 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8522:	4b3d      	ldr	r3, [pc, #244]	; (b8618 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8524:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8526:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b852a:	6818      	ldr	r0, [r3, #0]
   b852c:	9000      	str	r0, [sp, #0]
   b852e:	889b      	ldrh	r3, [r3, #4]
   b8530:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8534:	2205      	movs	r2, #5
   b8536:	4629      	mov	r1, r5
   b8538:	4668      	mov	r0, sp
   b853a:	f00b fa79 	bl	c3a30 <memcmp>
   b853e:	b928      	cbnz	r0, b854c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8540:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8544:	b113      	cbz	r3, b854c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8546:	2001      	movs	r0, #1
}
   b8548:	b003      	add	sp, #12
   b854a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b854c:	4933      	ldr	r1, [pc, #204]	; (b861c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b854e:	4668      	mov	r0, sp
   b8550:	f00b fb0c 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8554:	2205      	movs	r2, #5
   b8556:	4629      	mov	r1, r5
   b8558:	4668      	mov	r0, sp
   b855a:	f00b fa69 	bl	c3a30 <memcmp>
   b855e:	b918      	cbnz	r0, b8568 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b8560:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8564:	2b00      	cmp	r3, #0
   b8566:	d1ee      	bne.n	b8546 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8568:	492d      	ldr	r1, [pc, #180]	; (b8620 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b856a:	4668      	mov	r0, sp
   b856c:	f00b fafe 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8570:	2205      	movs	r2, #5
   b8572:	4629      	mov	r1, r5
   b8574:	4668      	mov	r0, sp
   b8576:	f00b fa5b 	bl	c3a30 <memcmp>
   b857a:	b918      	cbnz	r0, b8584 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b857c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8580:	2b00      	cmp	r3, #0
   b8582:	d1e0      	bne.n	b8546 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b8584:	4927      	ldr	r1, [pc, #156]	; (b8624 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b8586:	4668      	mov	r0, sp
   b8588:	f00b faf0 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b858c:	2205      	movs	r2, #5
   b858e:	4629      	mov	r1, r5
   b8590:	4668      	mov	r0, sp
   b8592:	f00b fa4d 	bl	c3a30 <memcmp>
   b8596:	b918      	cbnz	r0, b85a0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b8598:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b859c:	2b00      	cmp	r3, #0
   b859e:	d1d2      	bne.n	b8546 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b85a0:	4921      	ldr	r1, [pc, #132]	; (b8628 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b85a2:	4668      	mov	r0, sp
   b85a4:	f00b fae2 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85a8:	2205      	movs	r2, #5
   b85aa:	4629      	mov	r1, r5
   b85ac:	4668      	mov	r0, sp
   b85ae:	f00b fa3f 	bl	c3a30 <memcmp>
   b85b2:	b918      	cbnz	r0, b85bc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b85b4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b85b8:	2b00      	cmp	r3, #0
   b85ba:	d1c4      	bne.n	b8546 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b85bc:	491b      	ldr	r1, [pc, #108]	; (b862c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b85be:	4668      	mov	r0, sp
   b85c0:	f00b fad4 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85c4:	2205      	movs	r2, #5
   b85c6:	4629      	mov	r1, r5
   b85c8:	4668      	mov	r0, sp
   b85ca:	f00b fa31 	bl	c3a30 <memcmp>
   b85ce:	b918      	cbnz	r0, b85d8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b85d0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b85d4:	2b00      	cmp	r3, #0
   b85d6:	d1b6      	bne.n	b8546 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b85d8:	4915      	ldr	r1, [pc, #84]	; (b8630 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b85da:	4668      	mov	r0, sp
   b85dc:	f00b fac6 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85e0:	2205      	movs	r2, #5
   b85e2:	4629      	mov	r1, r5
   b85e4:	4668      	mov	r0, sp
   b85e6:	f00b fa23 	bl	c3a30 <memcmp>
   b85ea:	b918      	cbnz	r0, b85f4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b85ec:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b85f0:	2b00      	cmp	r3, #0
   b85f2:	d1a8      	bne.n	b8546 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b85f4:	490f      	ldr	r1, [pc, #60]	; (b8634 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b85f6:	4668      	mov	r0, sp
   b85f8:	f00b fab8 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85fc:	2205      	movs	r2, #5
   b85fe:	4629      	mov	r1, r5
   b8600:	4668      	mov	r0, sp
   b8602:	f00b fa15 	bl	c3a30 <memcmp>
   b8606:	b928      	cbnz	r0, b8614 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8608:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b860c:	3800      	subs	r0, #0
   b860e:	bf18      	it	ne
   b8610:	2001      	movne	r0, #1
   b8612:	e799      	b.n	b8548 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8614:	2000      	movs	r0, #0
   b8616:	e797      	b.n	b8548 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8618:	000c63bc 	.word	0x000c63bc
   b861c:	000c6392 	.word	0x000c6392
   b8620:	000c6398 	.word	0x000c6398
   b8624:	000c639e 	.word	0x000c639e
   b8628:	000c63a4 	.word	0x000c63a4
   b862c:	000c63aa 	.word	0x000c63aa
   b8630:	000c63b0 	.word	0x000c63b0
   b8634:	000c63b6 	.word	0x000c63b6

000b8638 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8638:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b863a:	4b62      	ldr	r3, [pc, #392]	; (b87c4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b863c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b863e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8642:	6818      	ldr	r0, [r3, #0]
   b8644:	9000      	str	r0, [sp, #0]
   b8646:	889b      	ldrh	r3, [r3, #4]
   b8648:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b864c:	2205      	movs	r2, #5
   b864e:	4629      	mov	r1, r5
   b8650:	4668      	mov	r0, sp
   b8652:	f00b f9ed 	bl	c3a30 <memcmp>
   b8656:	b978      	cbnz	r0, b8678 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8658:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b865c:	b163      	cbz	r3, b8678 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b865e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8662:	b14a      	cbz	r2, b8678 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8664:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8668:	2a00      	cmp	r2, #0
   b866a:	f040 80a3 	bne.w	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b866e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8672:	2b00      	cmp	r3, #0
   b8674:	f040 809e 	bne.w	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b8678:	4953      	ldr	r1, [pc, #332]	; (b87c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b867a:	4668      	mov	r0, sp
   b867c:	f00b fa76 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8680:	2205      	movs	r2, #5
   b8682:	4629      	mov	r1, r5
   b8684:	4668      	mov	r0, sp
   b8686:	f00b f9d3 	bl	c3a30 <memcmp>
   b868a:	b978      	cbnz	r0, b86ac <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b868c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8690:	b163      	cbz	r3, b86ac <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b8692:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8696:	b14a      	cbz	r2, b86ac <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b8698:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b869c:	2a00      	cmp	r2, #0
   b869e:	f040 8089 	bne.w	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b86a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86a6:	2b00      	cmp	r3, #0
   b86a8:	f040 8084 	bne.w	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b86ac:	4947      	ldr	r1, [pc, #284]	; (b87cc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b86ae:	4668      	mov	r0, sp
   b86b0:	f00b fa5c 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86b4:	2205      	movs	r2, #5
   b86b6:	4629      	mov	r1, r5
   b86b8:	4668      	mov	r0, sp
   b86ba:	f00b f9b9 	bl	c3a30 <memcmp>
   b86be:	b968      	cbnz	r0, b86dc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b86c0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b86c4:	b153      	cbz	r3, b86dc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b86c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86ca:	b13a      	cbz	r2, b86dc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b86cc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b86d0:	2a00      	cmp	r2, #0
   b86d2:	d16f      	bne.n	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b86d4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86d8:	2b00      	cmp	r3, #0
   b86da:	d16b      	bne.n	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b86dc:	493c      	ldr	r1, [pc, #240]	; (b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b86de:	4668      	mov	r0, sp
   b86e0:	f00b fa44 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86e4:	2205      	movs	r2, #5
   b86e6:	4629      	mov	r1, r5
   b86e8:	4668      	mov	r0, sp
   b86ea:	f00b f9a1 	bl	c3a30 <memcmp>
   b86ee:	b968      	cbnz	r0, b870c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b86f0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b86f4:	b153      	cbz	r3, b870c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b86f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86fa:	b13a      	cbz	r2, b870c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b86fc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8700:	2a00      	cmp	r2, #0
   b8702:	d157      	bne.n	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8704:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8708:	2b00      	cmp	r3, #0
   b870a:	d153      	bne.n	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b870c:	4931      	ldr	r1, [pc, #196]	; (b87d4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b870e:	4668      	mov	r0, sp
   b8710:	f00b fa2c 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8714:	2205      	movs	r2, #5
   b8716:	4629      	mov	r1, r5
   b8718:	4668      	mov	r0, sp
   b871a:	f00b f989 	bl	c3a30 <memcmp>
   b871e:	b968      	cbnz	r0, b873c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8720:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8724:	b153      	cbz	r3, b873c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8726:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b872a:	b13a      	cbz	r2, b873c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b872c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8730:	2a00      	cmp	r2, #0
   b8732:	d13f      	bne.n	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8734:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8738:	2b00      	cmp	r3, #0
   b873a:	d13b      	bne.n	b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b873c:	4926      	ldr	r1, [pc, #152]	; (b87d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b873e:	4668      	mov	r0, sp
   b8740:	f00b fa14 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8744:	2205      	movs	r2, #5
   b8746:	4629      	mov	r1, r5
   b8748:	4668      	mov	r0, sp
   b874a:	f00b f971 	bl	c3a30 <memcmp>
   b874e:	b958      	cbnz	r0, b8768 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b8750:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8754:	b143      	cbz	r3, b8768 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8756:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b875a:	b12a      	cbz	r2, b8768 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b875c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8760:	bb42      	cbnz	r2, b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8762:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8766:	bb2b      	cbnz	r3, b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b8768:	491c      	ldr	r1, [pc, #112]	; (b87dc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b876a:	4668      	mov	r0, sp
   b876c:	f00b f9fe 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8770:	2205      	movs	r2, #5
   b8772:	4629      	mov	r1, r5
   b8774:	4668      	mov	r0, sp
   b8776:	f00b f95b 	bl	c3a30 <memcmp>
   b877a:	b940      	cbnz	r0, b878e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b877c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8780:	b12b      	cbz	r3, b878e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b8782:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b8784:	b11a      	cbz	r2, b878e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b8786:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8788:	b9a2      	cbnz	r2, b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b878a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b878c:	b993      	cbnz	r3, b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b878e:	4914      	ldr	r1, [pc, #80]	; (b87e0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b8790:	4668      	mov	r0, sp
   b8792:	f00b f9eb 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8796:	2205      	movs	r2, #5
   b8798:	4629      	mov	r1, r5
   b879a:	4668      	mov	r0, sp
   b879c:	f00b f948 	bl	c3a30 <memcmp>
   b87a0:	b958      	cbnz	r0, b87ba <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b87a2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b87a6:	b153      	cbz	r3, b87be <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b87a8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b87aa:	b120      	cbz	r0, b87b6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b87ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b87ae:	b90a      	cbnz	r2, b87b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b87b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b87b2:	b100      	cbz	r0, b87b6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b87b4:	2001      	movs	r0, #1
}
   b87b6:	b003      	add	sp, #12
   b87b8:	bd30      	pop	{r4, r5, pc}
  return false;
   b87ba:	2000      	movs	r0, #0
   b87bc:	e7fb      	b.n	b87b6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b87be:	4618      	mov	r0, r3
   b87c0:	e7f9      	b.n	b87b6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b87c2:	bf00      	nop
   b87c4:	000c63bc 	.word	0x000c63bc
   b87c8:	000c6392 	.word	0x000c6392
   b87cc:	000c6398 	.word	0x000c6398
   b87d0:	000c639e 	.word	0x000c639e
   b87d4:	000c63a4 	.word	0x000c63a4
   b87d8:	000c63aa 	.word	0x000c63aa
   b87dc:	000c63b0 	.word	0x000c63b0
   b87e0:	000c63b6 	.word	0x000c63b6

000b87e4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b87e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b87e6:	4b38      	ldr	r3, [pc, #224]	; (b88c8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b87e8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87ea:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b87ee:	6818      	ldr	r0, [r3, #0]
   b87f0:	9000      	str	r0, [sp, #0]
   b87f2:	889b      	ldrh	r3, [r3, #4]
   b87f4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87f8:	2205      	movs	r2, #5
   b87fa:	4629      	mov	r1, r5
   b87fc:	4668      	mov	r0, sp
   b87fe:	f00b f917 	bl	c3a30 <memcmp>
   b8802:	b920      	cbnz	r0, b880e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8804:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8808:	3001      	adds	r0, #1
}
   b880a:	b003      	add	sp, #12
   b880c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b880e:	492f      	ldr	r1, [pc, #188]	; (b88cc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8810:	4668      	mov	r0, sp
   b8812:	f00b f9ab 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8816:	2205      	movs	r2, #5
   b8818:	4629      	mov	r1, r5
   b881a:	4668      	mov	r0, sp
   b881c:	f00b f908 	bl	c3a30 <memcmp>
   b8820:	b910      	cbnz	r0, b8828 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8822:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8826:	e7ef      	b.n	b8808 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8828:	4929      	ldr	r1, [pc, #164]	; (b88d0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b882a:	4668      	mov	r0, sp
   b882c:	f00b f99e 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8830:	2205      	movs	r2, #5
   b8832:	4629      	mov	r1, r5
   b8834:	4668      	mov	r0, sp
   b8836:	f00b f8fb 	bl	c3a30 <memcmp>
   b883a:	b910      	cbnz	r0, b8842 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b883c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8840:	e7e2      	b.n	b8808 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8842:	4924      	ldr	r1, [pc, #144]	; (b88d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8844:	4668      	mov	r0, sp
   b8846:	f00b f991 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b884a:	2205      	movs	r2, #5
   b884c:	4629      	mov	r1, r5
   b884e:	4668      	mov	r0, sp
   b8850:	f00b f8ee 	bl	c3a30 <memcmp>
   b8854:	b910      	cbnz	r0, b885c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b8856:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b885a:	e7d5      	b.n	b8808 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b885c:	491e      	ldr	r1, [pc, #120]	; (b88d8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b885e:	4668      	mov	r0, sp
   b8860:	f00b f984 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8864:	2205      	movs	r2, #5
   b8866:	4629      	mov	r1, r5
   b8868:	4668      	mov	r0, sp
   b886a:	f00b f8e1 	bl	c3a30 <memcmp>
   b886e:	b910      	cbnz	r0, b8876 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b8870:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8874:	e7c8      	b.n	b8808 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8876:	4919      	ldr	r1, [pc, #100]	; (b88dc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b8878:	4668      	mov	r0, sp
   b887a:	f00b f977 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b887e:	2205      	movs	r2, #5
   b8880:	4629      	mov	r1, r5
   b8882:	4668      	mov	r0, sp
   b8884:	f00b f8d4 	bl	c3a30 <memcmp>
   b8888:	b910      	cbnz	r0, b8890 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b888a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b888e:	e7bb      	b.n	b8808 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8890:	4913      	ldr	r1, [pc, #76]	; (b88e0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b8892:	4668      	mov	r0, sp
   b8894:	f00b f96a 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8898:	2205      	movs	r2, #5
   b889a:	4629      	mov	r1, r5
   b889c:	4668      	mov	r0, sp
   b889e:	f00b f8c7 	bl	c3a30 <memcmp>
   b88a2:	b910      	cbnz	r0, b88aa <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b88a4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b88a8:	e7ae      	b.n	b8808 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b88aa:	490e      	ldr	r1, [pc, #56]	; (b88e4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b88ac:	4668      	mov	r0, sp
   b88ae:	f00b f95d 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88b2:	2205      	movs	r2, #5
   b88b4:	4629      	mov	r1, r5
   b88b6:	4668      	mov	r0, sp
   b88b8:	f00b f8ba 	bl	c3a30 <memcmp>
   b88bc:	b910      	cbnz	r0, b88c4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b88be:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b88c2:	e7a1      	b.n	b8808 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b88c4:	2000      	movs	r0, #0
   b88c6:	e7a0      	b.n	b880a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b88c8:	000c63bc 	.word	0x000c63bc
   b88cc:	000c6392 	.word	0x000c6392
   b88d0:	000c6398 	.word	0x000c6398
   b88d4:	000c639e 	.word	0x000c639e
   b88d8:	000c63a4 	.word	0x000c63a4
   b88dc:	000c63aa 	.word	0x000c63aa
   b88e0:	000c63b0 	.word	0x000c63b0
   b88e4:	000c63b6 	.word	0x000c63b6

000b88e8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b88e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b88ea:	4b38      	ldr	r3, [pc, #224]	; (b89cc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b88ec:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88ee:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b88f2:	6818      	ldr	r0, [r3, #0]
   b88f4:	9000      	str	r0, [sp, #0]
   b88f6:	889b      	ldrh	r3, [r3, #4]
   b88f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88fc:	2205      	movs	r2, #5
   b88fe:	4629      	mov	r1, r5
   b8900:	4668      	mov	r0, sp
   b8902:	f00b f895 	bl	c3a30 <memcmp>
   b8906:	b920      	cbnz	r0, b8912 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8908:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b890c:	3002      	adds	r0, #2
}
   b890e:	b003      	add	sp, #12
   b8910:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8912:	492f      	ldr	r1, [pc, #188]	; (b89d0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8914:	4668      	mov	r0, sp
   b8916:	f00b f929 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b891a:	2205      	movs	r2, #5
   b891c:	4629      	mov	r1, r5
   b891e:	4668      	mov	r0, sp
   b8920:	f00b f886 	bl	c3a30 <memcmp>
   b8924:	b910      	cbnz	r0, b892c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8926:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b892a:	e7ef      	b.n	b890c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b892c:	4929      	ldr	r1, [pc, #164]	; (b89d4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b892e:	4668      	mov	r0, sp
   b8930:	f00b f91c 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8934:	2205      	movs	r2, #5
   b8936:	4629      	mov	r1, r5
   b8938:	4668      	mov	r0, sp
   b893a:	f00b f879 	bl	c3a30 <memcmp>
   b893e:	b910      	cbnz	r0, b8946 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b8940:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8944:	e7e2      	b.n	b890c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8946:	4924      	ldr	r1, [pc, #144]	; (b89d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b8948:	4668      	mov	r0, sp
   b894a:	f00b f90f 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b894e:	2205      	movs	r2, #5
   b8950:	4629      	mov	r1, r5
   b8952:	4668      	mov	r0, sp
   b8954:	f00b f86c 	bl	c3a30 <memcmp>
   b8958:	b910      	cbnz	r0, b8960 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b895a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b895e:	e7d5      	b.n	b890c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8960:	491e      	ldr	r1, [pc, #120]	; (b89dc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b8962:	4668      	mov	r0, sp
   b8964:	f00b f902 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8968:	2205      	movs	r2, #5
   b896a:	4629      	mov	r1, r5
   b896c:	4668      	mov	r0, sp
   b896e:	f00b f85f 	bl	c3a30 <memcmp>
   b8972:	b910      	cbnz	r0, b897a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b8974:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8978:	e7c8      	b.n	b890c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b897a:	4919      	ldr	r1, [pc, #100]	; (b89e0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b897c:	4668      	mov	r0, sp
   b897e:	f00b f8f5 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8982:	2205      	movs	r2, #5
   b8984:	4629      	mov	r1, r5
   b8986:	4668      	mov	r0, sp
   b8988:	f00b f852 	bl	c3a30 <memcmp>
   b898c:	b910      	cbnz	r0, b8994 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b898e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8992:	e7bb      	b.n	b890c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8994:	4913      	ldr	r1, [pc, #76]	; (b89e4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b8996:	4668      	mov	r0, sp
   b8998:	f00b f8e8 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b899c:	2205      	movs	r2, #5
   b899e:	4629      	mov	r1, r5
   b89a0:	4668      	mov	r0, sp
   b89a2:	f00b f845 	bl	c3a30 <memcmp>
   b89a6:	b910      	cbnz	r0, b89ae <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b89a8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b89ac:	e7ae      	b.n	b890c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b89ae:	490e      	ldr	r1, [pc, #56]	; (b89e8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b89b0:	4668      	mov	r0, sp
   b89b2:	f00b f8db 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89b6:	2205      	movs	r2, #5
   b89b8:	4629      	mov	r1, r5
   b89ba:	4668      	mov	r0, sp
   b89bc:	f00b f838 	bl	c3a30 <memcmp>
   b89c0:	b910      	cbnz	r0, b89c8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b89c2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b89c6:	e7a1      	b.n	b890c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b89c8:	2000      	movs	r0, #0
   b89ca:	e7a0      	b.n	b890e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b89cc:	000c63bc 	.word	0x000c63bc
   b89d0:	000c6392 	.word	0x000c6392
   b89d4:	000c6398 	.word	0x000c6398
   b89d8:	000c639e 	.word	0x000c639e
   b89dc:	000c63a4 	.word	0x000c63a4
   b89e0:	000c63aa 	.word	0x000c63aa
   b89e4:	000c63b0 	.word	0x000c63b0
   b89e8:	000c63b6 	.word	0x000c63b6

000b89ec <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b89ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b89ee:	4b39      	ldr	r3, [pc, #228]	; (b8ad4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b89f0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89f2:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b89f6:	6818      	ldr	r0, [r3, #0]
   b89f8:	9000      	str	r0, [sp, #0]
   b89fa:	889b      	ldrh	r3, [r3, #4]
   b89fc:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a00:	2205      	movs	r2, #5
   b8a02:	4629      	mov	r1, r5
   b8a04:	4668      	mov	r0, sp
   b8a06:	f00b f813 	bl	c3a30 <memcmp>
   b8a0a:	b920      	cbnz	r0, b8a16 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8a0c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8a10:	3066      	adds	r0, #102	; 0x66
}
   b8a12:	b003      	add	sp, #12
   b8a14:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8a16:	4930      	ldr	r1, [pc, #192]	; (b8ad8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8a18:	4668      	mov	r0, sp
   b8a1a:	f00b f8a7 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a1e:	2205      	movs	r2, #5
   b8a20:	4629      	mov	r1, r5
   b8a22:	4668      	mov	r0, sp
   b8a24:	f00b f804 	bl	c3a30 <memcmp>
   b8a28:	b910      	cbnz	r0, b8a30 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b8a2a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8a2e:	e7ef      	b.n	b8a10 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8a30:	492a      	ldr	r1, [pc, #168]	; (b8adc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8a32:	4668      	mov	r0, sp
   b8a34:	f00b f89a 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a38:	2205      	movs	r2, #5
   b8a3a:	4629      	mov	r1, r5
   b8a3c:	4668      	mov	r0, sp
   b8a3e:	f00a fff7 	bl	c3a30 <memcmp>
   b8a42:	b910      	cbnz	r0, b8a4a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8a44:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8a48:	e7e2      	b.n	b8a10 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8a4a:	4925      	ldr	r1, [pc, #148]	; (b8ae0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b8a4c:	4668      	mov	r0, sp
   b8a4e:	f00b f88d 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a52:	2205      	movs	r2, #5
   b8a54:	4629      	mov	r1, r5
   b8a56:	4668      	mov	r0, sp
   b8a58:	f00a ffea 	bl	c3a30 <memcmp>
   b8a5c:	b910      	cbnz	r0, b8a64 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b8a5e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8a62:	e7d5      	b.n	b8a10 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8a64:	491f      	ldr	r1, [pc, #124]	; (b8ae4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b8a66:	4668      	mov	r0, sp
   b8a68:	f00b f880 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a6c:	2205      	movs	r2, #5
   b8a6e:	4629      	mov	r1, r5
   b8a70:	4668      	mov	r0, sp
   b8a72:	f00a ffdd 	bl	c3a30 <memcmp>
   b8a76:	b910      	cbnz	r0, b8a7e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b8a78:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8a7c:	e7c8      	b.n	b8a10 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8a7e:	491a      	ldr	r1, [pc, #104]	; (b8ae8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b8a80:	4668      	mov	r0, sp
   b8a82:	f00b f873 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a86:	2205      	movs	r2, #5
   b8a88:	4629      	mov	r1, r5
   b8a8a:	4668      	mov	r0, sp
   b8a8c:	f00a ffd0 	bl	c3a30 <memcmp>
   b8a90:	b910      	cbnz	r0, b8a98 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b8a92:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8a96:	e7bb      	b.n	b8a10 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8a98:	4914      	ldr	r1, [pc, #80]	; (b8aec <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b8a9a:	4668      	mov	r0, sp
   b8a9c:	f00b f866 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8aa0:	2205      	movs	r2, #5
   b8aa2:	4629      	mov	r1, r5
   b8aa4:	4668      	mov	r0, sp
   b8aa6:	f00a ffc3 	bl	c3a30 <memcmp>
   b8aaa:	b918      	cbnz	r0, b8ab4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b8aac:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b8ab0:	3034      	adds	r0, #52	; 0x34
   b8ab2:	e7ae      	b.n	b8a12 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8ab4:	490e      	ldr	r1, [pc, #56]	; (b8af0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8ab6:	4668      	mov	r0, sp
   b8ab8:	f00b f858 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8abc:	2205      	movs	r2, #5
   b8abe:	4629      	mov	r1, r5
   b8ac0:	4668      	mov	r0, sp
   b8ac2:	f00a ffb5 	bl	c3a30 <memcmp>
   b8ac6:	b910      	cbnz	r0, b8ace <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8ac8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8acc:	e7f0      	b.n	b8ab0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b8ace:	2000      	movs	r0, #0
   b8ad0:	e79f      	b.n	b8a12 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b8ad2:	bf00      	nop
   b8ad4:	000c63bc 	.word	0x000c63bc
   b8ad8:	000c6392 	.word	0x000c6392
   b8adc:	000c6398 	.word	0x000c6398
   b8ae0:	000c639e 	.word	0x000c639e
   b8ae4:	000c63a4 	.word	0x000c63a4
   b8ae8:	000c63aa 	.word	0x000c63aa
   b8aec:	000c63b0 	.word	0x000c63b0
   b8af0:	000c63b6 	.word	0x000c63b6

000b8af4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b8af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8af6:	4b39      	ldr	r3, [pc, #228]	; (b8bdc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b8af8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8afa:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8afe:	6818      	ldr	r0, [r3, #0]
   b8b00:	9000      	str	r0, [sp, #0]
   b8b02:	889b      	ldrh	r3, [r3, #4]
   b8b04:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b08:	2205      	movs	r2, #5
   b8b0a:	4629      	mov	r1, r5
   b8b0c:	4668      	mov	r0, sp
   b8b0e:	f00a ff8f 	bl	c3a30 <memcmp>
   b8b12:	b920      	cbnz	r0, b8b1e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8b14:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b18:	3067      	adds	r0, #103	; 0x67
}
   b8b1a:	b003      	add	sp, #12
   b8b1c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8b1e:	4930      	ldr	r1, [pc, #192]	; (b8be0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b8b20:	4668      	mov	r0, sp
   b8b22:	f00b f823 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b26:	2205      	movs	r2, #5
   b8b28:	4629      	mov	r1, r5
   b8b2a:	4668      	mov	r0, sp
   b8b2c:	f00a ff80 	bl	c3a30 <memcmp>
   b8b30:	b910      	cbnz	r0, b8b38 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b32:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8b36:	e7ef      	b.n	b8b18 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8b38:	492a      	ldr	r1, [pc, #168]	; (b8be4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b8b3a:	4668      	mov	r0, sp
   b8b3c:	f00b f816 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b40:	2205      	movs	r2, #5
   b8b42:	4629      	mov	r1, r5
   b8b44:	4668      	mov	r0, sp
   b8b46:	f00a ff73 	bl	c3a30 <memcmp>
   b8b4a:	b910      	cbnz	r0, b8b52 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b8b4c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8b50:	e7e2      	b.n	b8b18 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8b52:	4925      	ldr	r1, [pc, #148]	; (b8be8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b8b54:	4668      	mov	r0, sp
   b8b56:	f00b f809 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b5a:	2205      	movs	r2, #5
   b8b5c:	4629      	mov	r1, r5
   b8b5e:	4668      	mov	r0, sp
   b8b60:	f00a ff66 	bl	c3a30 <memcmp>
   b8b64:	b910      	cbnz	r0, b8b6c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b8b66:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8b6a:	e7d5      	b.n	b8b18 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8b6c:	491f      	ldr	r1, [pc, #124]	; (b8bec <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b8b6e:	4668      	mov	r0, sp
   b8b70:	f00a fffc 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b74:	2205      	movs	r2, #5
   b8b76:	4629      	mov	r1, r5
   b8b78:	4668      	mov	r0, sp
   b8b7a:	f00a ff59 	bl	c3a30 <memcmp>
   b8b7e:	b910      	cbnz	r0, b8b86 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b8b80:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8b84:	e7c8      	b.n	b8b18 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8b86:	491a      	ldr	r1, [pc, #104]	; (b8bf0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b8b88:	4668      	mov	r0, sp
   b8b8a:	f00a ffef 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b8e:	2205      	movs	r2, #5
   b8b90:	4629      	mov	r1, r5
   b8b92:	4668      	mov	r0, sp
   b8b94:	f00a ff4c 	bl	c3a30 <memcmp>
   b8b98:	b910      	cbnz	r0, b8ba0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b8b9a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8b9e:	e7bb      	b.n	b8b18 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8ba0:	4914      	ldr	r1, [pc, #80]	; (b8bf4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b8ba2:	4668      	mov	r0, sp
   b8ba4:	f00a ffe2 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ba8:	2205      	movs	r2, #5
   b8baa:	4629      	mov	r1, r5
   b8bac:	4668      	mov	r0, sp
   b8bae:	f00a ff3f 	bl	c3a30 <memcmp>
   b8bb2:	b918      	cbnz	r0, b8bbc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b8bb4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8bb8:	3035      	adds	r0, #53	; 0x35
   b8bba:	e7ae      	b.n	b8b1a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8bbc:	490e      	ldr	r1, [pc, #56]	; (b8bf8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b8bbe:	4668      	mov	r0, sp
   b8bc0:	f00a ffd4 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bc4:	2205      	movs	r2, #5
   b8bc6:	4629      	mov	r1, r5
   b8bc8:	4668      	mov	r0, sp
   b8bca:	f00a ff31 	bl	c3a30 <memcmp>
   b8bce:	b910      	cbnz	r0, b8bd6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8bd0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8bd4:	e7f0      	b.n	b8bb8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b8bd6:	2000      	movs	r0, #0
   b8bd8:	e79f      	b.n	b8b1a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b8bda:	bf00      	nop
   b8bdc:	000c63bc 	.word	0x000c63bc
   b8be0:	000c6392 	.word	0x000c6392
   b8be4:	000c6398 	.word	0x000c6398
   b8be8:	000c639e 	.word	0x000c639e
   b8bec:	000c63a4 	.word	0x000c63a4
   b8bf0:	000c63aa 	.word	0x000c63aa
   b8bf4:	000c63b0 	.word	0x000c63b0
   b8bf8:	000c63b6 	.word	0x000c63b6

000b8bfc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b8bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8bfe:	4b39      	ldr	r3, [pc, #228]	; (b8ce4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b8c00:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c02:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c06:	6818      	ldr	r0, [r3, #0]
   b8c08:	9000      	str	r0, [sp, #0]
   b8c0a:	889b      	ldrh	r3, [r3, #4]
   b8c0c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c10:	2205      	movs	r2, #5
   b8c12:	4629      	mov	r1, r5
   b8c14:	4668      	mov	r0, sp
   b8c16:	f00a ff0b 	bl	c3a30 <memcmp>
   b8c1a:	b928      	cbnz	r0, b8c28 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b8c1c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c20:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b8c24:	b003      	add	sp, #12
   b8c26:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c28:	492f      	ldr	r1, [pc, #188]	; (b8ce8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b8c2a:	4668      	mov	r0, sp
   b8c2c:	f00a ff9e 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c30:	2205      	movs	r2, #5
   b8c32:	4629      	mov	r1, r5
   b8c34:	4668      	mov	r0, sp
   b8c36:	f00a fefb 	bl	c3a30 <memcmp>
   b8c3a:	b910      	cbnz	r0, b8c42 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c3c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8c40:	e7ee      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8c42:	492a      	ldr	r1, [pc, #168]	; (b8cec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b8c44:	4668      	mov	r0, sp
   b8c46:	f00a ff91 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c4a:	2205      	movs	r2, #5
   b8c4c:	4629      	mov	r1, r5
   b8c4e:	4668      	mov	r0, sp
   b8c50:	f00a feee 	bl	c3a30 <memcmp>
   b8c54:	b910      	cbnz	r0, b8c5c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b8c56:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8c5a:	e7e1      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8c5c:	4924      	ldr	r1, [pc, #144]	; (b8cf0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b8c5e:	4668      	mov	r0, sp
   b8c60:	f00a ff84 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c64:	2205      	movs	r2, #5
   b8c66:	4629      	mov	r1, r5
   b8c68:	4668      	mov	r0, sp
   b8c6a:	f00a fee1 	bl	c3a30 <memcmp>
   b8c6e:	b910      	cbnz	r0, b8c76 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b8c70:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8c74:	e7d4      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8c76:	491f      	ldr	r1, [pc, #124]	; (b8cf4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b8c78:	4668      	mov	r0, sp
   b8c7a:	f00a ff77 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c7e:	2205      	movs	r2, #5
   b8c80:	4629      	mov	r1, r5
   b8c82:	4668      	mov	r0, sp
   b8c84:	f00a fed4 	bl	c3a30 <memcmp>
   b8c88:	b910      	cbnz	r0, b8c90 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b8c8a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8c8e:	e7c7      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8c90:	4919      	ldr	r1, [pc, #100]	; (b8cf8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b8c92:	4668      	mov	r0, sp
   b8c94:	f00a ff6a 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c98:	2205      	movs	r2, #5
   b8c9a:	4629      	mov	r1, r5
   b8c9c:	4668      	mov	r0, sp
   b8c9e:	f00a fec7 	bl	c3a30 <memcmp>
   b8ca2:	b910      	cbnz	r0, b8caa <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b8ca4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8ca8:	e7ba      	b.n	b8c20 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8caa:	4914      	ldr	r1, [pc, #80]	; (b8cfc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b8cac:	4668      	mov	r0, sp
   b8cae:	f00a ff5d 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cb2:	2205      	movs	r2, #5
   b8cb4:	4629      	mov	r1, r5
   b8cb6:	4668      	mov	r0, sp
   b8cb8:	f00a feba 	bl	c3a30 <memcmp>
   b8cbc:	b918      	cbnz	r0, b8cc6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b8cbe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b8cc2:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8cc4:	e7ae      	b.n	b8c24 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8cc6:	490e      	ldr	r1, [pc, #56]	; (b8d00 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b8cc8:	4668      	mov	r0, sp
   b8cca:	f00a ff4f 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cce:	2205      	movs	r2, #5
   b8cd0:	4629      	mov	r1, r5
   b8cd2:	4668      	mov	r0, sp
   b8cd4:	f00a feac 	bl	c3a30 <memcmp>
   b8cd8:	b910      	cbnz	r0, b8ce0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b8cda:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8cde:	e7f0      	b.n	b8cc2 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b8ce0:	2000      	movs	r0, #0
   b8ce2:	e79f      	b.n	b8c24 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b8ce4:	000c63bc 	.word	0x000c63bc
   b8ce8:	000c6392 	.word	0x000c6392
   b8cec:	000c6398 	.word	0x000c6398
   b8cf0:	000c639e 	.word	0x000c639e
   b8cf4:	000c63a4 	.word	0x000c63a4
   b8cf8:	000c63aa 	.word	0x000c63aa
   b8cfc:	000c63b0 	.word	0x000c63b0
   b8d00:	000c63b6 	.word	0x000c63b6

000b8d04 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b8d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8d06:	4b3a      	ldr	r3, [pc, #232]	; (b8df0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b8d08:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d0a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d0e:	6818      	ldr	r0, [r3, #0]
   b8d10:	9000      	str	r0, [sp, #0]
   b8d12:	889b      	ldrh	r3, [r3, #4]
   b8d14:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d18:	2205      	movs	r2, #5
   b8d1a:	4629      	mov	r1, r5
   b8d1c:	4668      	mov	r0, sp
   b8d1e:	f00a fe87 	bl	c3a30 <memcmp>
   b8d22:	b930      	cbnz	r0, b8d32 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b8d24:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8d28:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8d2c:	3001      	adds	r0, #1
}
   b8d2e:	b003      	add	sp, #12
   b8d30:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8d32:	4930      	ldr	r1, [pc, #192]	; (b8df4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b8d34:	4668      	mov	r0, sp
   b8d36:	f00a ff19 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d3a:	2205      	movs	r2, #5
   b8d3c:	4629      	mov	r1, r5
   b8d3e:	4668      	mov	r0, sp
   b8d40:	f00a fe76 	bl	c3a30 <memcmp>
   b8d44:	b910      	cbnz	r0, b8d4c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b8d46:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8d4a:	e7ed      	b.n	b8d28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8d4c:	492a      	ldr	r1, [pc, #168]	; (b8df8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b8d4e:	4668      	mov	r0, sp
   b8d50:	f00a ff0c 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d54:	2205      	movs	r2, #5
   b8d56:	4629      	mov	r1, r5
   b8d58:	4668      	mov	r0, sp
   b8d5a:	f00a fe69 	bl	c3a30 <memcmp>
   b8d5e:	b910      	cbnz	r0, b8d66 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b8d60:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8d64:	e7e0      	b.n	b8d28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8d66:	4925      	ldr	r1, [pc, #148]	; (b8dfc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b8d68:	4668      	mov	r0, sp
   b8d6a:	f00a feff 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d6e:	2205      	movs	r2, #5
   b8d70:	4629      	mov	r1, r5
   b8d72:	4668      	mov	r0, sp
   b8d74:	f00a fe5c 	bl	c3a30 <memcmp>
   b8d78:	b910      	cbnz	r0, b8d80 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b8d7a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8d7e:	e7d3      	b.n	b8d28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8d80:	491f      	ldr	r1, [pc, #124]	; (b8e00 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b8d82:	4668      	mov	r0, sp
   b8d84:	f00a fef2 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d88:	2205      	movs	r2, #5
   b8d8a:	4629      	mov	r1, r5
   b8d8c:	4668      	mov	r0, sp
   b8d8e:	f00a fe4f 	bl	c3a30 <memcmp>
   b8d92:	b910      	cbnz	r0, b8d9a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b8d94:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8d98:	e7c6      	b.n	b8d28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8d9a:	491a      	ldr	r1, [pc, #104]	; (b8e04 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b8d9c:	4668      	mov	r0, sp
   b8d9e:	f00a fee5 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da2:	2205      	movs	r2, #5
   b8da4:	4629      	mov	r1, r5
   b8da6:	4668      	mov	r0, sp
   b8da8:	f00a fe42 	bl	c3a30 <memcmp>
   b8dac:	b910      	cbnz	r0, b8db4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8dae:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8db2:	e7b9      	b.n	b8d28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8db4:	4914      	ldr	r1, [pc, #80]	; (b8e08 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b8db6:	4668      	mov	r0, sp
   b8db8:	f00a fed8 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dbc:	2205      	movs	r2, #5
   b8dbe:	4629      	mov	r1, r5
   b8dc0:	4668      	mov	r0, sp
   b8dc2:	f00a fe35 	bl	c3a30 <memcmp>
   b8dc6:	b918      	cbnz	r0, b8dd0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b8dc8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8dcc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8dce:	e7ad      	b.n	b8d2c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8dd0:	490e      	ldr	r1, [pc, #56]	; (b8e0c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b8dd2:	4668      	mov	r0, sp
   b8dd4:	f00a feca 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd8:	2205      	movs	r2, #5
   b8dda:	4629      	mov	r1, r5
   b8ddc:	4668      	mov	r0, sp
   b8dde:	f00a fe27 	bl	c3a30 <memcmp>
   b8de2:	b910      	cbnz	r0, b8dea <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8de4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8de8:	e7f0      	b.n	b8dcc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b8dea:	2000      	movs	r0, #0
   b8dec:	e79f      	b.n	b8d2e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b8dee:	bf00      	nop
   b8df0:	000c63bc 	.word	0x000c63bc
   b8df4:	000c6392 	.word	0x000c6392
   b8df8:	000c6398 	.word	0x000c6398
   b8dfc:	000c639e 	.word	0x000c639e
   b8e00:	000c63a4 	.word	0x000c63a4
   b8e04:	000c63aa 	.word	0x000c63aa
   b8e08:	000c63b0 	.word	0x000c63b0
   b8e0c:	000c63b6 	.word	0x000c63b6

000b8e10 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b8e10:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b8e12:	4b30      	ldr	r3, [pc, #192]	; (b8ed4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b8e14:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e16:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8e1a:	6818      	ldr	r0, [r3, #0]
   b8e1c:	9000      	str	r0, [sp, #0]
   b8e1e:	889b      	ldrh	r3, [r3, #4]
   b8e20:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e24:	2205      	movs	r2, #5
   b8e26:	4621      	mov	r1, r4
   b8e28:	4668      	mov	r0, sp
   b8e2a:	f00a fe01 	bl	c3a30 <memcmp>
   b8e2e:	b910      	cbnz	r0, b8e36 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b8e30:	2064      	movs	r0, #100	; 0x64
}
   b8e32:	b002      	add	sp, #8
   b8e34:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b8e36:	4928      	ldr	r1, [pc, #160]	; (b8ed8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b8e38:	4668      	mov	r0, sp
   b8e3a:	f00a fe97 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e3e:	2205      	movs	r2, #5
   b8e40:	4621      	mov	r1, r4
   b8e42:	4668      	mov	r0, sp
   b8e44:	f00a fdf4 	bl	c3a30 <memcmp>
   b8e48:	2800      	cmp	r0, #0
   b8e4a:	d0f1      	beq.n	b8e30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b8e4c:	4923      	ldr	r1, [pc, #140]	; (b8edc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b8e4e:	4668      	mov	r0, sp
   b8e50:	f00a fe8c 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e54:	2205      	movs	r2, #5
   b8e56:	4621      	mov	r1, r4
   b8e58:	4668      	mov	r0, sp
   b8e5a:	f00a fde9 	bl	c3a30 <memcmp>
   b8e5e:	2800      	cmp	r0, #0
   b8e60:	d0e6      	beq.n	b8e30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b8e62:	491f      	ldr	r1, [pc, #124]	; (b8ee0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b8e64:	4668      	mov	r0, sp
   b8e66:	f00a fe81 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e6a:	2205      	movs	r2, #5
   b8e6c:	4621      	mov	r1, r4
   b8e6e:	4668      	mov	r0, sp
   b8e70:	f00a fdde 	bl	c3a30 <memcmp>
   b8e74:	2800      	cmp	r0, #0
   b8e76:	d0db      	beq.n	b8e30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b8e78:	491a      	ldr	r1, [pc, #104]	; (b8ee4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b8e7a:	4668      	mov	r0, sp
   b8e7c:	f00a fe76 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e80:	2205      	movs	r2, #5
   b8e82:	4621      	mov	r1, r4
   b8e84:	4668      	mov	r0, sp
   b8e86:	f00a fdd3 	bl	c3a30 <memcmp>
   b8e8a:	2800      	cmp	r0, #0
   b8e8c:	d0d0      	beq.n	b8e30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b8e8e:	4916      	ldr	r1, [pc, #88]	; (b8ee8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b8e90:	4668      	mov	r0, sp
   b8e92:	f00a fe6b 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e96:	2205      	movs	r2, #5
   b8e98:	4621      	mov	r1, r4
   b8e9a:	4668      	mov	r0, sp
   b8e9c:	f00a fdc8 	bl	c3a30 <memcmp>
   b8ea0:	2800      	cmp	r0, #0
   b8ea2:	d0c5      	beq.n	b8e30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b8ea4:	4911      	ldr	r1, [pc, #68]	; (b8eec <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b8ea6:	4668      	mov	r0, sp
   b8ea8:	f00a fe60 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eac:	2205      	movs	r2, #5
   b8eae:	4621      	mov	r1, r4
   b8eb0:	4668      	mov	r0, sp
   b8eb2:	f00a fdbd 	bl	c3a30 <memcmp>
   b8eb6:	b148      	cbz	r0, b8ecc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b8eb8:	490d      	ldr	r1, [pc, #52]	; (b8ef0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b8eba:	4668      	mov	r0, sp
   b8ebc:	f00a fe56 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ec0:	2205      	movs	r2, #5
   b8ec2:	4621      	mov	r1, r4
   b8ec4:	4668      	mov	r0, sp
   b8ec6:	f00a fdb3 	bl	c3a30 <memcmp>
   b8eca:	b908      	cbnz	r0, b8ed0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b8ecc:	2032      	movs	r0, #50	; 0x32
   b8ece:	e7b0      	b.n	b8e32 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b8ed0:	2000      	movs	r0, #0
   b8ed2:	e7ae      	b.n	b8e32 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b8ed4:	000c63bc 	.word	0x000c63bc
   b8ed8:	000c6392 	.word	0x000c6392
   b8edc:	000c6398 	.word	0x000c6398
   b8ee0:	000c639e 	.word	0x000c639e
   b8ee4:	000c63a4 	.word	0x000c63a4
   b8ee8:	000c63aa 	.word	0x000c63aa
   b8eec:	000c63b0 	.word	0x000c63b0
   b8ef0:	000c63b6 	.word	0x000c63b6

000b8ef4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b8ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8ef6:	4b38      	ldr	r3, [pc, #224]	; (b8fd8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b8ef8:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8efa:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8efe:	6818      	ldr	r0, [r3, #0]
   b8f00:	9000      	str	r0, [sp, #0]
   b8f02:	889b      	ldrh	r3, [r3, #4]
   b8f04:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f08:	2205      	movs	r2, #5
   b8f0a:	4629      	mov	r1, r5
   b8f0c:	4668      	mov	r0, sp
   b8f0e:	f00a fd8f 	bl	c3a30 <memcmp>
   b8f12:	b918      	cbnz	r0, b8f1c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b8f14:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b8f18:	b003      	add	sp, #12
   b8f1a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8f1c:	492f      	ldr	r1, [pc, #188]	; (b8fdc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b8f1e:	4668      	mov	r0, sp
   b8f20:	f00a fe24 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f24:	2205      	movs	r2, #5
   b8f26:	4629      	mov	r1, r5
   b8f28:	4668      	mov	r0, sp
   b8f2a:	f00a fd81 	bl	c3a30 <memcmp>
   b8f2e:	b910      	cbnz	r0, b8f36 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b8f30:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8f34:	e7f0      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8f36:	492a      	ldr	r1, [pc, #168]	; (b8fe0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b8f38:	4668      	mov	r0, sp
   b8f3a:	f00a fe17 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f3e:	2205      	movs	r2, #5
   b8f40:	4629      	mov	r1, r5
   b8f42:	4668      	mov	r0, sp
   b8f44:	f00a fd74 	bl	c3a30 <memcmp>
   b8f48:	b910      	cbnz	r0, b8f50 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b8f4a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8f4e:	e7e3      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8f50:	4924      	ldr	r1, [pc, #144]	; (b8fe4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b8f52:	4668      	mov	r0, sp
   b8f54:	f00a fe0a 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f58:	2205      	movs	r2, #5
   b8f5a:	4629      	mov	r1, r5
   b8f5c:	4668      	mov	r0, sp
   b8f5e:	f00a fd67 	bl	c3a30 <memcmp>
   b8f62:	b910      	cbnz	r0, b8f6a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b8f64:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8f68:	e7d6      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8f6a:	491f      	ldr	r1, [pc, #124]	; (b8fe8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b8f6c:	4668      	mov	r0, sp
   b8f6e:	f00a fdfd 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f72:	2205      	movs	r2, #5
   b8f74:	4629      	mov	r1, r5
   b8f76:	4668      	mov	r0, sp
   b8f78:	f00a fd5a 	bl	c3a30 <memcmp>
   b8f7c:	b910      	cbnz	r0, b8f84 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b8f7e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8f82:	e7c9      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8f84:	4919      	ldr	r1, [pc, #100]	; (b8fec <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b8f86:	4668      	mov	r0, sp
   b8f88:	f00a fdf0 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f8c:	2205      	movs	r2, #5
   b8f8e:	4629      	mov	r1, r5
   b8f90:	4668      	mov	r0, sp
   b8f92:	f00a fd4d 	bl	c3a30 <memcmp>
   b8f96:	b910      	cbnz	r0, b8f9e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b8f98:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8f9c:	e7bc      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8f9e:	4914      	ldr	r1, [pc, #80]	; (b8ff0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b8fa0:	4668      	mov	r0, sp
   b8fa2:	f00a fde3 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fa6:	2205      	movs	r2, #5
   b8fa8:	4629      	mov	r1, r5
   b8faa:	4668      	mov	r0, sp
   b8fac:	f00a fd40 	bl	c3a30 <memcmp>
   b8fb0:	b910      	cbnz	r0, b8fb8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b8fb2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8fb6:	e7af      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8fb8:	490e      	ldr	r1, [pc, #56]	; (b8ff4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b8fba:	4668      	mov	r0, sp
   b8fbc:	f00a fdd6 	bl	c3b6c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fc0:	2205      	movs	r2, #5
   b8fc2:	4629      	mov	r1, r5
   b8fc4:	4668      	mov	r0, sp
   b8fc6:	f00a fd33 	bl	c3a30 <memcmp>
   b8fca:	b910      	cbnz	r0, b8fd2 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b8fcc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8fd0:	e7a2      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b8fd2:	2000      	movs	r0, #0
   b8fd4:	e7a0      	b.n	b8f18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b8fd6:	bf00      	nop
   b8fd8:	000c63bc 	.word	0x000c63bc
   b8fdc:	000c6392 	.word	0x000c6392
   b8fe0:	000c6398 	.word	0x000c6398
   b8fe4:	000c639e 	.word	0x000c639e
   b8fe8:	000c63a4 	.word	0x000c63a4
   b8fec:	000c63aa 	.word	0x000c63aa
   b8ff0:	000c63b0 	.word	0x000c63b0
   b8ff4:	000c63b6 	.word	0x000c63b6

000b8ff8 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b8ff8:	4770      	bx	lr
	...

000b8ffc <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b8ffc:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b8ffe:	8813      	ldrh	r3, [r2, #0]
   b9000:	4d0c      	ldr	r5, [pc, #48]	; (b9034 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b9002:	2b01      	cmp	r3, #1
{
   b9004:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9006:	d10e      	bne.n	b9026 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9008:	020a      	lsls	r2, r1, #8
   b900a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b900e:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9010:	3301      	adds	r3, #1
   b9012:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9014:	f7ff fff0 	bl	b8ff8 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9018:	8820      	ldrh	r0, [r4, #0]
   b901a:	882b      	ldrh	r3, [r5, #0]
}
   b901c:	4298      	cmp	r0, r3
   b901e:	bf14      	ite	ne
   b9020:	2003      	movne	r0, #3
   b9022:	2000      	moveq	r0, #0
   b9024:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9026:	2b02      	cmp	r3, #2
   b9028:	d1f2      	bne.n	b9010 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b902a:	882a      	ldrh	r2, [r5, #0]
   b902c:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b902e:	3206      	adds	r2, #6
   b9030:	e7ed      	b.n	b900e <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b9032:	bf00      	nop
   b9034:	2003e61e 	.word	0x2003e61e

000b9038 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9038:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b903a:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b903c:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b903e:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9040:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9042:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9046:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b904a:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b904e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b9052:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9056:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9058:	4413      	add	r3, r2
   b905a:	734b      	strb	r3, [r1, #13]
   b905c:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b905e:	b293      	uxth	r3, r2
   b9060:	429c      	cmp	r4, r3
   b9062:	d90a      	bls.n	b907a <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9064:	688b      	ldr	r3, [r1, #8]
   b9066:	7b08      	ldrb	r0, [r1, #12]
   b9068:	5c9b      	ldrb	r3, [r3, r2]
   b906a:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b906c:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b906e:	b2db      	uxtb	r3, r3
   b9070:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b9072:	4403      	add	r3, r0
   b9074:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9076:	3201      	adds	r2, #1
   b9078:	e7f1      	b.n	b905e <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b907a:	bd30      	pop	{r4, r5, pc}

000b907c <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b907c:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b9080:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b9082:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b9086:	b2c9      	uxtb	r1, r1
   b9088:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b908c:	4419      	add	r1, r3
   b908e:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b9092:	4770      	bx	lr

000b9094 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b9094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b9098:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b909c:	f10b 0b08 	add.w	fp, fp, #8
   b90a0:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b90a4:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b90a8:	f1ab 0302 	sub.w	r3, fp, #2
{
   b90ac:	4604      	mov	r4, r0
   b90ae:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b90b0:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b90b2:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b90b4:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b90b6:	f1ba 0f00 	cmp.w	sl, #0
   b90ba:	f000 80a6 	beq.w	b920a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b90be:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b90c0:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b90c4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b90c8:	4556      	cmp	r6, sl
   b90ca:	bf28      	it	cs
   b90cc:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b90ce:	ebaa 0a06 	sub.w	sl, sl, r6
   b90d2:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b90d6:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b90da:	bf02      	ittt	eq
   b90dc:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b90e0:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b90e2:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b90e6:	f006 f96d 	bl	bf3c4 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b90ea:	f1b9 0f00 	cmp.w	r9, #0
   b90ee:	d15c      	bne.n	b91aa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b90f0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b90f4:	6803      	ldr	r3, [r0, #0]
   b90f6:	21b5      	movs	r1, #181	; 0xb5
   b90f8:	689b      	ldr	r3, [r3, #8]
   b90fa:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b90fc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9100:	6803      	ldr	r3, [r0, #0]
   b9102:	2162      	movs	r1, #98	; 0x62
   b9104:	689b      	ldr	r3, [r3, #8]
   b9106:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9108:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b910c:	7829      	ldrb	r1, [r5, #0]
   b910e:	6803      	ldr	r3, [r0, #0]
   b9110:	689b      	ldr	r3, [r3, #8]
   b9112:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9114:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9118:	7869      	ldrb	r1, [r5, #1]
   b911a:	6803      	ldr	r3, [r0, #0]
   b911c:	689b      	ldr	r3, [r3, #8]
   b911e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b9120:	78a9      	ldrb	r1, [r5, #2]
   b9122:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9126:	f7fe fdc1 	bl	b7cac <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b912a:	8869      	ldrh	r1, [r5, #2]
   b912c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9130:	0a09      	lsrs	r1, r1, #8
   b9132:	f7fe fdbb 	bl	b7cac <_ZN7TwoWire5writeEi.isra.0>
   b9136:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9138:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b913a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b913e:	fa1f f983 	uxth.w	r9, r3
   b9142:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9146:	454a      	cmp	r2, r9
   b9148:	b2bf      	uxth	r7, r7
   b914a:	d90d      	bls.n	b9168 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b914c:	42be      	cmp	r6, r7
   b914e:	d90b      	bls.n	b9168 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9150:	68aa      	ldr	r2, [r5, #8]
   b9152:	6801      	ldr	r1, [r0, #0]
   b9154:	9301      	str	r3, [sp, #4]
   b9156:	4442      	add	r2, r8
   b9158:	688f      	ldr	r7, [r1, #8]
   b915a:	5cd1      	ldrb	r1, [r2, r3]
   b915c:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b915e:	9b01      	ldr	r3, [sp, #4]
   b9160:	3301      	adds	r3, #1
   b9162:	e7e9      	b.n	b9138 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9164:	46b9      	mov	r9, r7
   b9166:	e7a6      	b.n	b90b6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9168:	3e02      	subs	r6, #2
      startSpot += x;
   b916a:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b916c:	42b7      	cmp	r7, r6
      startSpot += x;
   b916e:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b9172:	d10c      	bne.n	b918e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9174:	6803      	ldr	r3, [r0, #0]
   b9176:	7b29      	ldrb	r1, [r5, #12]
   b9178:	689b      	ldr	r3, [r3, #8]
   b917a:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b917c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9180:	7b69      	ldrb	r1, [r5, #13]
   b9182:	6803      	ldr	r3, [r0, #0]
   b9184:	689b      	ldr	r3, [r3, #8]
   b9186:	4798      	blx	r3
        bytesSent += 2;
   b9188:	f109 0708 	add.w	r7, r9, #8
   b918c:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b918e:	455f      	cmp	r7, fp
   b9190:	d2e8      	bcs.n	b9164 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b9192:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b9196:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b919a:	f006 f91a 	bl	bf3d2 <_ZN7TwoWire15endTransmissionEh>
   b919e:	2800      	cmp	r0, #0
   b91a0:	d0e0      	beq.n	b9164 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b91a2:	200c      	movs	r0, #12
}
   b91a4:	b003      	add	sp, #12
   b91a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b91aa:	2200      	movs	r2, #0
   b91ac:	b291      	uxth	r1, r2
   b91ae:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91b2:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b91b4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91b8:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91ba:	d910      	bls.n	b91de <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b91bc:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b91c0:	eb08 0c02 	add.w	ip, r8, r2
   b91c4:	1c53      	adds	r3, r2, #1
   b91c6:	45f4      	cmp	ip, lr
   b91c8:	9301      	str	r3, [sp, #4]
   b91ca:	da08      	bge.n	b91de <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b91cc:	68a9      	ldr	r1, [r5, #8]
   b91ce:	6802      	ldr	r2, [r0, #0]
   b91d0:	f811 100c 	ldrb.w	r1, [r1, ip]
   b91d4:	6892      	ldr	r2, [r2, #8]
   b91d6:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91d8:	9b01      	ldr	r3, [sp, #4]
   b91da:	461a      	mov	r2, r3
   b91dc:	e7e6      	b.n	b91ac <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b91de:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b91e0:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b91e2:	429f      	cmp	r7, r3
      startSpot += x;
   b91e4:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b91e8:	d1d1      	bne.n	b918e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b91ea:	3e02      	subs	r6, #2
   b91ec:	42b2      	cmp	r2, r6
   b91ee:	d1ce      	bne.n	b918e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b91f0:	6803      	ldr	r3, [r0, #0]
   b91f2:	7b29      	ldrb	r1, [r5, #12]
   b91f4:	689b      	ldr	r3, [r3, #8]
   b91f6:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b91f8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91fc:	7b69      	ldrb	r1, [r5, #13]
   b91fe:	6803      	ldr	r3, [r0, #0]
   b9200:	689b      	ldr	r3, [r3, #8]
   b9202:	4798      	blx	r3
        bytesSent += 2;
   b9204:	fa1f f78b 	uxth.w	r7, fp
   b9208:	e7c1      	b.n	b918e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b920a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b920e:	f006 f8e4 	bl	bf3da <_ZN7TwoWire15endTransmissionEv>
   b9212:	2800      	cmp	r0, #0
   b9214:	d0c6      	beq.n	b91a4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9216:	e7c4      	b.n	b91a2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9218 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9218:	b570      	push	{r4, r5, r6, lr}
   b921a:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b921c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9220:	6803      	ldr	r3, [r0, #0]
{
   b9222:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9224:	689b      	ldr	r3, [r3, #8]
   b9226:	21b5      	movs	r1, #181	; 0xb5
   b9228:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b922a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b922e:	6803      	ldr	r3, [r0, #0]
   b9230:	2162      	movs	r1, #98	; 0x62
   b9232:	689b      	ldr	r3, [r3, #8]
   b9234:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9236:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b923a:	7821      	ldrb	r1, [r4, #0]
   b923c:	6803      	ldr	r3, [r0, #0]
   b923e:	689b      	ldr	r3, [r3, #8]
   b9240:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9242:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9246:	7861      	ldrb	r1, [r4, #1]
   b9248:	6803      	ldr	r3, [r0, #0]
   b924a:	689b      	ldr	r3, [r3, #8]
   b924c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b924e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9252:	78a1      	ldrb	r1, [r4, #2]
   b9254:	6803      	ldr	r3, [r0, #0]
   b9256:	689b      	ldr	r3, [r3, #8]
   b9258:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b925a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b925e:	8861      	ldrh	r1, [r4, #2]
   b9260:	6803      	ldr	r3, [r0, #0]
   b9262:	0a09      	lsrs	r1, r1, #8
   b9264:	689b      	ldr	r3, [r3, #8]
   b9266:	4798      	blx	r3
   b9268:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b926a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b926e:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b9270:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9272:	b2b2      	uxth	r2, r6
   b9274:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9276:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9278:	d904      	bls.n	b9284 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b927a:	68a1      	ldr	r1, [r4, #8]
   b927c:	5c89      	ldrb	r1, [r1, r2]
   b927e:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9280:	3601      	adds	r6, #1
   b9282:	e7f2      	b.n	b926a <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b9284:	7b21      	ldrb	r1, [r4, #12]
   b9286:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9288:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b928c:	7b61      	ldrb	r1, [r4, #13]
   b928e:	6803      	ldr	r3, [r0, #0]
}
   b9290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b9294:	689b      	ldr	r3, [r3, #8]
   b9296:	4718      	bx	r3

000b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b9298:	b510      	push	{r4, lr}
   b929a:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b929c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b92a0:	f007 fd3c 	bl	c0d1c <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b92a4:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b92a8:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b92ac:	429a      	cmp	r2, r3
   b92ae:	d90b      	bls.n	b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b92b0:	28ff      	cmp	r0, #255	; 0xff
   b92b2:	d101      	bne.n	b92b8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b92b4:	7822      	ldrb	r2, [r4, #0]
   b92b6:	b13a      	cbz	r2, b92c8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b92b8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b92bc:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b92be:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b92c2:	3301      	adds	r3, #1
   b92c4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b92c8:	bd10      	pop	{r4, pc}
	...

000b92cc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b92cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b92d0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b92d4:	4604      	mov	r4, r0
   b92d6:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b92d8:	b97b      	cbnz	r3, b92fa <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b92da:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b92de:	b923      	cbnz	r3, b92ea <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b92e0:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b92e4:	2b00      	cmp	r3, #0
   b92e6:	f000 80ca 	beq.w	b947e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b92ea:	4966      	ldr	r1, [pc, #408]	; (b9484 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b92ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b92f0:	b004      	add	sp, #16
   b92f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b92f6:	f007 bb32 	b.w	c095e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b92fa:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b92fe:	4a62      	ldr	r2, [pc, #392]	; (b9488 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9300:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9302:	2600      	movs	r6, #0
   b9304:	2301      	movs	r3, #1
   b9306:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b930a:	4669      	mov	r1, sp
   b930c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9310:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9314:	9200      	str	r2, [sp, #0]
   b9316:	f88d 6004 	strb.w	r6, [sp, #4]
   b931a:	f007 fc5f 	bl	c0bdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b931e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9322:	4631      	mov	r1, r6
   b9324:	f008 f8e5 	bl	c14f2 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9328:	21b5      	movs	r1, #181	; 0xb5
   b932a:	4620      	mov	r0, r4
   b932c:	f7ff ffb4 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9330:	2162      	movs	r1, #98	; 0x62
   b9332:	4620      	mov	r0, r4
   b9334:	f7ff ffb0 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9338:	7829      	ldrb	r1, [r5, #0]
   b933a:	4620      	mov	r0, r4
   b933c:	f7ff ffac 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9340:	7869      	ldrb	r1, [r5, #1]
   b9342:	4620      	mov	r0, r4
   b9344:	f7ff ffa8 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9348:	78a9      	ldrb	r1, [r5, #2]
   b934a:	4620      	mov	r0, r4
   b934c:	f7ff ffa4 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9350:	8869      	ldrh	r1, [r5, #2]
   b9352:	4620      	mov	r0, r4
   b9354:	0a09      	lsrs	r1, r1, #8
   b9356:	f7ff ff9f 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b935a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b935e:	2b00      	cmp	r3, #0
   b9360:	d042      	beq.n	b93e8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9362:	494a      	ldr	r1, [pc, #296]	; (b948c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9364:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9368:	f007 faf9 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b936c:	2210      	movs	r2, #16
   b936e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9372:	21b5      	movs	r1, #181	; 0xb5
   b9374:	f7fe fc8a 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9378:	4945      	ldr	r1, [pc, #276]	; (b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b937a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b937e:	f007 faee 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b9382:	2210      	movs	r2, #16
   b9384:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9388:	2162      	movs	r1, #98	; 0x62
   b938a:	f7fe fc7f 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b938e:	4940      	ldr	r1, [pc, #256]	; (b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9390:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9394:	f007 fae3 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9398:	2210      	movs	r2, #16
   b939a:	7829      	ldrb	r1, [r5, #0]
   b939c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93a0:	f7fe fc74 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93a4:	493a      	ldr	r1, [pc, #232]	; (b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93aa:	f007 fad8 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b93ae:	2210      	movs	r2, #16
   b93b0:	7869      	ldrb	r1, [r5, #1]
   b93b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93b6:	f7fe fc69 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93ba:	4935      	ldr	r1, [pc, #212]	; (b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93c0:	f007 facd 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b93c4:	2210      	movs	r2, #16
   b93c6:	78a9      	ldrb	r1, [r5, #2]
   b93c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93cc:	f007 fae3 	bl	c0996 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b93d0:	492f      	ldr	r1, [pc, #188]	; (b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93d2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93d6:	f007 fac2 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b93da:	8869      	ldrh	r1, [r5, #2]
   b93dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93e0:	2210      	movs	r2, #16
   b93e2:	0a09      	lsrs	r1, r1, #8
   b93e4:	f007 fad7 	bl	c0996 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b93e8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b93ec:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b93ee:	886a      	ldrh	r2, [r5, #2]
   b93f0:	b2b3      	uxth	r3, r6
   b93f2:	429a      	cmp	r2, r3
   b93f4:	d916      	bls.n	b9424 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b93f6:	461f      	mov	r7, r3
   b93f8:	68ab      	ldr	r3, [r5, #8]
   b93fa:	4620      	mov	r0, r4
   b93fc:	5dd9      	ldrb	r1, [r3, r7]
   b93fe:	f7ff ff4b 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9402:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9406:	b15b      	cbz	r3, b9420 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9408:	4641      	mov	r1, r8
   b940a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b940e:	f007 faa6 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9412:	68ab      	ldr	r3, [r5, #8]
   b9414:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9418:	5dd9      	ldrb	r1, [r3, r7]
   b941a:	2210      	movs	r2, #16
   b941c:	f7fe fc36 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9420:	3601      	adds	r6, #1
   b9422:	e7e4      	b.n	b93ee <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9424:	7b29      	ldrb	r1, [r5, #12]
   b9426:	4620      	mov	r0, r4
   b9428:	f7ff ff36 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b942c:	7b69      	ldrb	r1, [r5, #13]
   b942e:	4620      	mov	r0, r4
   b9430:	f7ff ff32 	bl	b9298 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9434:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9438:	2101      	movs	r1, #1
   b943a:	f008 f85a 	bl	c14f2 <digitalWrite>
  _spiPort->endTransaction();
   b943e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9442:	f007 fbb1 	bl	c0ba8 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9446:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b944a:	b1c3      	cbz	r3, b947e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b944c:	4910      	ldr	r1, [pc, #64]	; (b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b944e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9452:	f007 fa84 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9456:	7b29      	ldrb	r1, [r5, #12]
   b9458:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b945c:	2210      	movs	r2, #16
   b945e:	f7fe fc15 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9462:	490b      	ldr	r1, [pc, #44]	; (b9490 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9464:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9468:	f007 fa79 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b946c:	7b69      	ldrb	r1, [r5, #13]
   b946e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9472:	2210      	movs	r2, #16
}
   b9474:	b004      	add	sp, #16
   b9476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b947a:	f7fe bc0e 	b.w	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b947e:	b004      	add	sp, #16
   b9480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9484:	000c63c2 	.word	0x000c63c2
   b9488:	000c61a0 	.word	0x000c61a0
   b948c:	000c63f7 	.word	0x000c63f7
   b9490:	000c7345 	.word	0x000c7345

000b9494 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b9494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b9496:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b949a:	4604      	mov	r4, r0
   b949c:	460d      	mov	r5, r1
   b949e:	4616      	mov	r6, r2
  if (_printDebug == true)
   b94a0:	2b00      	cmp	r3, #0
   b94a2:	f000 8082 	beq.w	b95aa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b94a6:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b94aa:	4940      	ldr	r1, [pc, #256]	; (b95ac <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b94ac:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b94b0:	f007 fa55 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b94b4:	782b      	ldrb	r3, [r5, #0]
   b94b6:	2b01      	cmp	r3, #1
   b94b8:	d13c      	bne.n	b9534 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b94ba:	493d      	ldr	r1, [pc, #244]	; (b95b0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b94bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b94c0:	f007 fa4d 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b94c4:	493b      	ldr	r1, [pc, #236]	; (b95b4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b94c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94ca:	f007 fa48 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b94ce:	882b      	ldrh	r3, [r5, #0]
   b94d0:	f240 7201 	movw	r2, #1793	; 0x701
   b94d4:	4293      	cmp	r3, r2
   b94d6:	d145      	bne.n	b9564 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b94d8:	4937      	ldr	r1, [pc, #220]	; (b95b8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b94da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b94de:	f007 fa3e 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b94e2:	4936      	ldr	r1, [pc, #216]	; (b95bc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b94e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94e8:	f007 fa39 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
   b94ec:	8869      	ldrh	r1, [r5, #2]
   b94ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94f2:	2210      	movs	r2, #16
   b94f4:	f007 fa4f 	bl	c0996 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b94f8:	2f01      	cmp	r7, #1
   b94fa:	d101      	bne.n	b9500 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b94fc:	2e00      	cmp	r6, #0
   b94fe:	d049      	beq.n	b9594 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9500:	492f      	ldr	r1, [pc, #188]	; (b95c0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9502:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9506:	4f2f      	ldr	r7, [pc, #188]	; (b95c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9508:	f007 fa29 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
   b950c:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b950e:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9510:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9514:	b2b3      	uxth	r3, r6
   b9516:	429a      	cmp	r2, r3
   b9518:	d941      	bls.n	b959e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b951a:	4639      	mov	r1, r7
   b951c:	f007 fa1f 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9520:	b2b3      	uxth	r3, r6
   b9522:	68a9      	ldr	r1, [r5, #8]
   b9524:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9528:	5cc9      	ldrb	r1, [r1, r3]
   b952a:	2210      	movs	r2, #16
   b952c:	f7fe fbae 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9530:	3601      	adds	r6, #1
   b9532:	e7ec      	b.n	b950e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9534:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9536:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b953a:	d101      	bne.n	b9540 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b953c:	4922      	ldr	r1, [pc, #136]	; (b95c8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b953e:	e7bf      	b.n	b94c0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9540:	2b06      	cmp	r3, #6
   b9542:	d101      	bne.n	b9548 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9544:	4921      	ldr	r1, [pc, #132]	; (b95cc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9546:	e7bb      	b.n	b94c0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9548:	2b0a      	cmp	r3, #10
   b954a:	d101      	bne.n	b9550 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b954c:	4920      	ldr	r1, [pc, #128]	; (b95d0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b954e:	e7b7      	b.n	b94c0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b9550:	4920      	ldr	r1, [pc, #128]	; (b95d4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9552:	f007 fa04 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9556:	7829      	ldrb	r1, [r5, #0]
   b9558:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b955c:	2210      	movs	r2, #16
   b955e:	f7fe fb95 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9562:	e7af      	b.n	b94c4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9564:	f640 0206 	movw	r2, #2054	; 0x806
   b9568:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b956a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b956e:	d101      	bne.n	b9574 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b9570:	4919      	ldr	r1, [pc, #100]	; (b95d8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b9572:	e7b4      	b.n	b94de <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b9574:	f640 1206 	movw	r2, #2310	; 0x906
   b9578:	4293      	cmp	r3, r2
   b957a:	d101      	bne.n	b9580 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b957c:	4917      	ldr	r1, [pc, #92]	; (b95dc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b957e:	e7ae      	b.n	b94de <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b9580:	4914      	ldr	r1, [pc, #80]	; (b95d4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9582:	f007 f9ec 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b9586:	7869      	ldrb	r1, [r5, #1]
   b9588:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b958c:	2210      	movs	r2, #16
   b958e:	f7fe fb7d 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9592:	e7a6      	b.n	b94e2 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b9594:	4912      	ldr	r1, [pc, #72]	; (b95e0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b9596:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b959a:	f007 f9e0 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b959e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b95a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b95a6:	f007 b9de 	b.w	c0966 <_ZN5Print7printlnEv>
}
   b95aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b95ac:	000c6408 	.word	0x000c6408
   b95b0:	000c640d 	.word	0x000c640d
   b95b4:	000c641d 	.word	0x000c641d
   b95b8:	000c6422 	.word	0x000c6422
   b95bc:	000c6430 	.word	0x000c6430
   b95c0:	000c6439 	.word	0x000c6439
   b95c4:	000c7345 	.word	0x000c7345
   b95c8:	000c6411 	.word	0x000c6411
   b95cc:	000c6415 	.word	0x000c6415
   b95d0:	000c6419 	.word	0x000c6419
   b95d4:	000c668e 	.word	0x000c668e
   b95d8:	000c6426 	.word	0x000c6426
   b95dc:	000c642b 	.word	0x000c642b
   b95e0:	000c6443 	.word	0x000c6443

000b95e4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b95e4:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b95e6:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b95ea:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b95ec:	b955      	cbnz	r5, b9604 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b95ee:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b95f2:	b90b      	cbnz	r3, b95f8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b95f4:	2000      	movs	r0, #0
}
   b95f6:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b95f8:	491a      	ldr	r1, [pc, #104]	; (b9664 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b95fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95fe:	f007 f9c8 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9602:	e7f7      	b.n	b95f4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9604:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9608:	b12b      	cbz	r3, b9616 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b960a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b960e:	2b00      	cmp	r3, #0
   b9610:	d0f0      	beq.n	b95f4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9612:	4915      	ldr	r1, [pc, #84]	; (b9668 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9614:	e7f1      	b.n	b95fa <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9616:	4628      	mov	r0, r5
   b9618:	f7fa fd3f 	bl	b409a <_Znaj>
   b961c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9620:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9624:	b930      	cbnz	r0, b9634 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9626:	b91b      	cbnz	r3, b9630 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9628:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b962c:	2b00      	cmp	r3, #0
   b962e:	d0e1      	beq.n	b95f4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9630:	490e      	ldr	r1, [pc, #56]	; (b966c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9632:	e7e2      	b.n	b95fa <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9634:	b17b      	cbz	r3, b9656 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9636:	490e      	ldr	r1, [pc, #56]	; (b9670 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9638:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b963c:	f007 f98f 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9640:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9644:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9648:	220a      	movs	r2, #10
   b964a:	4628      	mov	r0, r5
   b964c:	f007 f9a3 	bl	c0996 <_ZN5Print11printNumberEmh>
        n += println();
   b9650:	4628      	mov	r0, r5
   b9652:	f007 f988 	bl	c0966 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9656:	2300      	movs	r3, #0
   b9658:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b965c:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b9660:	2001      	movs	r0, #1
   b9662:	e7c8      	b.n	b95f6 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9664:	000c6455 	.word	0x000c6455
   b9668:	000c64a6 	.word	0x000c64a6
   b966c:	000c64e9 	.word	0x000c64e9
   b9670:	000c650d 	.word	0x000c650d

000b9674 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b9674:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9678:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b967c:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b967e:	bf3b      	ittet	cc
   b9680:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b9684:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b9686:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9688:	1a80      	subcc	r0, r0, r2
   b968a:	b280      	uxth	r0, r0
}
   b968c:	4770      	bx	lr

000b968e <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b968e:	b508      	push	{r3, lr}
   b9690:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b9692:	f7ff ffef 	bl	b9674 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b9696:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b969a:	1a18      	subs	r0, r3, r0
}
   b969c:	b280      	uxth	r0, r0
   b969e:	bd08      	pop	{r3, pc}

000b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b96a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b96a4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b96a8:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b96ac:	1aed      	subs	r5, r5, r3
   b96ae:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b96b0:	4295      	cmp	r5, r2
   b96b2:	bf28      	it	cs
   b96b4:	4615      	movcs	r5, r2
{
   b96b6:	4616      	mov	r6, r2
   b96b8:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96ba:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b96be:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96c0:	462a      	mov	r2, r5
   b96c2:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b96c4:	b2bf      	uxth	r7, r7
{
   b96c6:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96c8:	f00a f9c2 	bl	c3a50 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b96cc:	b19f      	cbz	r7, b96f6 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b96ce:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b96d2:	463a      	mov	r2, r7
   b96d4:	eb08 0105 	add.w	r1, r8, r5
   b96d8:	f00a f9ba 	bl	c3a50 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b96dc:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b96e0:	4620      	mov	r0, r4
   b96e2:	f7ff ffc7 	bl	b9674 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b96e6:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b96ea:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b96ec:	bf38      	it	cc
   b96ee:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b96f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b96f6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b96fa:	4416      	add	r6, r2
   b96fc:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9700:	e7ee      	b.n	b96e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9704 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9704:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9706:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b970a:	4604      	mov	r4, r0
   b970c:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b970e:	b113      	cbz	r3, b9716 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9710:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9714:	b953      	cbnz	r3, b972c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9716:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b971a:	b128      	cbz	r0, b9728 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b971c:	4924      	ldr	r1, [pc, #144]	; (b97b0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b971e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9722:	f007 f936 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9726:	2000      	movs	r0, #0
}
   b9728:	b003      	add	sp, #12
   b972a:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b972c:	f7ff ffaf 	bl	b968e <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9730:	886b      	ldrh	r3, [r5, #2]
   b9732:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9734:	b29b      	uxth	r3, r3
   b9736:	4283      	cmp	r3, r0
   b9738:	d908      	bls.n	b974c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b973a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b973e:	b91b      	cbnz	r3, b9748 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9740:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9744:	2800      	cmp	r0, #0
   b9746:	d0ef      	beq.n	b9728 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9748:	491a      	ldr	r1, [pc, #104]	; (b97b4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b974a:	e7e8      	b.n	b971e <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b974c:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b9750:	2202      	movs	r2, #2
   b9752:	4669      	mov	r1, sp
   b9754:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9756:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b975a:	f7ff ffa1 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b975e:	2201      	movs	r2, #1
   b9760:	4629      	mov	r1, r5
   b9762:	4620      	mov	r0, r4
   b9764:	f7ff ff9c 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b9768:	2201      	movs	r2, #1
   b976a:	18a9      	adds	r1, r5, r2
   b976c:	4620      	mov	r0, r4
   b976e:	f7ff ff97 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b9772:	886b      	ldrh	r3, [r5, #2]
   b9774:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b9778:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b977a:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b977c:	a901      	add	r1, sp, #4
   b977e:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b9780:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b9784:	f7ff ff8c 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b9788:	886a      	ldrh	r2, [r5, #2]
   b978a:	68a9      	ldr	r1, [r5, #8]
   b978c:	4620      	mov	r0, r4
   b978e:	f7ff ff87 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b9792:	2201      	movs	r2, #1
   b9794:	f105 010c 	add.w	r1, r5, #12
   b9798:	4620      	mov	r0, r4
   b979a:	f7ff ff81 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b979e:	4620      	mov	r0, r4
   b97a0:	2201      	movs	r2, #1
   b97a2:	f105 010d 	add.w	r1, r5, #13
   b97a6:	f7ff ff7b 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b97aa:	2001      	movs	r0, #1
   b97ac:	e7bc      	b.n	b9728 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b97ae:	bf00      	nop
   b97b0:	000c6533 	.word	0x000c6533
   b97b4:	000c655b 	.word	0x000c655b

000b97b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b97b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b97bc:	780e      	ldrb	r6, [r1, #0]
   b97be:	2e0d      	cmp	r6, #13
{
   b97c0:	4604      	mov	r4, r0
   b97c2:	460d      	mov	r5, r1
  switch (msg->cls)
   b97c4:	f001 8228 	beq.w	bac18 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b97c8:	d809      	bhi.n	b97de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b97ca:	2e02      	cmp	r6, #2
   b97cc:	f000 879a 	beq.w	ba704 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b97d0:	2e06      	cmp	r6, #6
   b97d2:	f001 81cc 	beq.w	bab6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b97d6:	2e01      	cmp	r6, #1
   b97d8:	d04f      	beq.n	b987a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b97da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b97de:	2e13      	cmp	r6, #19
   b97e0:	f001 83eb 	beq.w	bafba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b97e4:	2e28      	cmp	r6, #40	; 0x28
   b97e6:	f001 84ca 	beq.w	bb17e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b97ea:	2e10      	cmp	r6, #16
   b97ec:	d1f5      	bne.n	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b97ee:	680b      	ldr	r3, [r1, #0]
   b97f0:	4a8e      	ldr	r2, [pc, #568]	; (b9a2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b97f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b97f6:	4293      	cmp	r3, r2
   b97f8:	f041 826a 	bne.w	bacd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b97fc:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b97fe:	2e00      	cmp	r6, #0
   b9800:	d0eb      	beq.n	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9802:	68a8      	ldr	r0, [r5, #8]
   b9804:	2100      	movs	r1, #0
   b9806:	f7fe fa21 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b980a:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b980c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b980e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9810:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9812:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9814:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9816:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9818:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b981a:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b981c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b981e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9820:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9822:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9824:	68a8      	ldr	r0, [r5, #8]
   b9826:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9828:	2108      	movs	r1, #8
   b982a:	f7fe fa0f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b982e:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9830:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9832:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9834:	210c      	movs	r1, #12
   b9836:	f7fe fa16 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b983a:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b983c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b983e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9840:	210e      	movs	r1, #14
   b9842:	f7fe fa10 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9846:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9848:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b984a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b984e:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9850:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9852:	6a1a      	ldr	r2, [r3, #32]
   b9854:	b17a      	cbz	r2, b9876 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9856:	7819      	ldrb	r1, [r3, #0]
   b9858:	0708      	lsls	r0, r1, #28
   b985a:	d40c      	bmi.n	b9876 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b985c:	1d19      	adds	r1, r3, #4
   b985e:	3314      	adds	r3, #20
   b9860:	f851 0b04 	ldr.w	r0, [r1], #4
   b9864:	f842 0b04 	str.w	r0, [r2], #4
   b9868:	4299      	cmp	r1, r3
   b986a:	d1f9      	bne.n	b9860 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b986c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b986e:	7813      	ldrb	r3, [r2, #0]
   b9870:	f043 0308 	orr.w	r3, r3, #8
   b9874:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b9876:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9878:	e03d      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b987a:	680b      	ldr	r3, [r1, #0]
   b987c:	4a6c      	ldr	r2, [pc, #432]	; (b9a30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b987e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9882:	4293      	cmp	r3, r2
   b9884:	d141      	bne.n	b990a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b9886:	68c6      	ldr	r6, [r0, #12]
   b9888:	2e00      	cmp	r6, #0
   b988a:	d0a6      	beq.n	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b988c:	68a8      	ldr	r0, [r5, #8]
   b988e:	2100      	movs	r1, #0
   b9890:	f7fe f9dc 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9894:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9896:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9898:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b989a:	2104      	movs	r1, #4
   b989c:	f7fe f9d6 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b98a0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98a4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98a6:	2108      	movs	r1, #8
   b98a8:	f7fe f9d0 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98ac:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98ae:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b98b0:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98b2:	210c      	movs	r1, #12
   b98b4:	f7fe f9ca 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b98b8:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b98ba:	68a8      	ldr	r0, [r5, #8]
   b98bc:	68e6      	ldr	r6, [r4, #12]
   b98be:	2110      	movs	r1, #16
   b98c0:	f7fe f9c4 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98c4:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b98c6:	68e3      	ldr	r3, [r4, #12]
   b98c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b98cc:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b98ce:	68e3      	ldr	r3, [r4, #12]
   b98d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b98d2:	b17a      	cbz	r2, b98f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b98d4:	7819      	ldrb	r1, [r3, #0]
   b98d6:	0709      	lsls	r1, r1, #28
   b98d8:	d40c      	bmi.n	b98f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b98da:	1d19      	adds	r1, r3, #4
   b98dc:	3318      	adds	r3, #24
   b98de:	f851 0b04 	ldr.w	r0, [r1], #4
   b98e2:	f842 0b04 	str.w	r0, [r2], #4
   b98e6:	4299      	cmp	r1, r3
   b98e8:	d1f9      	bne.n	b98de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b98ea:	68e2      	ldr	r2, [r4, #12]
   b98ec:	7813      	ldrb	r3, [r2, #0]
   b98ee:	f043 0308 	orr.w	r3, r3, #8
   b98f2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b98f4:	68e3      	ldr	r3, [r4, #12]
   b98f6:	781b      	ldrb	r3, [r3, #0]
   b98f8:	075f      	lsls	r7, r3, #29
   b98fa:	f57f af6e 	bpl.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b98fe:	4629      	mov	r1, r5
   b9900:	4620      	mov	r0, r4
}
   b9902:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9906:	f7ff befd 	b.w	b9704 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b990a:	4a4a      	ldr	r2, [pc, #296]	; (b9a34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b990c:	4293      	cmp	r3, r2
   b990e:	d13d      	bne.n	b998c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9910:	6906      	ldr	r6, [r0, #16]
   b9912:	2e00      	cmp	r6, #0
   b9914:	f43f af61 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9918:	68a8      	ldr	r0, [r5, #8]
   b991a:	2100      	movs	r1, #0
   b991c:	f7fe f996 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9920:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9922:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9924:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9926:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9928:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b992a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b992c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b992e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9930:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9932:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9934:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9936:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9938:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b993a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b993c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b993e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9940:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b9942:	68a8      	ldr	r0, [r5, #8]
   b9944:	6926      	ldr	r6, [r4, #16]
   b9946:	2108      	movs	r1, #8
   b9948:	f7fe f980 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b994c:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b994e:	68a8      	ldr	r0, [r5, #8]
   b9950:	6926      	ldr	r6, [r4, #16]
   b9952:	210c      	movs	r1, #12
   b9954:	f7fe f97a 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9958:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b995a:	6923      	ldr	r3, [r4, #16]
   b995c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9960:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9962:	6923      	ldr	r3, [r4, #16]
   b9964:	6a1a      	ldr	r2, [r3, #32]
   b9966:	b17a      	cbz	r2, b9988 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9968:	7819      	ldrb	r1, [r3, #0]
   b996a:	070e      	lsls	r6, r1, #28
   b996c:	d40c      	bmi.n	b9988 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b996e:	1d19      	adds	r1, r3, #4
   b9970:	3314      	adds	r3, #20
   b9972:	f851 0b04 	ldr.w	r0, [r1], #4
   b9976:	f842 0b04 	str.w	r0, [r2], #4
   b997a:	4299      	cmp	r1, r3
   b997c:	d1f9      	bne.n	b9972 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b997e:	6922      	ldr	r2, [r4, #16]
   b9980:	7813      	ldrb	r3, [r2, #0]
   b9982:	f043 0308 	orr.w	r3, r3, #8
   b9986:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b9988:	6923      	ldr	r3, [r4, #16]
   b998a:	e7b4      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b998c:	4a2a      	ldr	r2, [pc, #168]	; (b9a38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b998e:	4293      	cmp	r3, r2
   b9990:	d154      	bne.n	b9a3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b9992:	6946      	ldr	r6, [r0, #20]
   b9994:	2e00      	cmp	r6, #0
   b9996:	f43f af20 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b999a:	68a8      	ldr	r0, [r5, #8]
   b999c:	2100      	movs	r1, #0
   b999e:	f7fe f955 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99a2:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b99a4:	68a8      	ldr	r0, [r5, #8]
   b99a6:	6966      	ldr	r6, [r4, #20]
   b99a8:	2104      	movs	r1, #4
   b99aa:	f7fe f95c 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99ae:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b99b0:	68a8      	ldr	r0, [r5, #8]
   b99b2:	6966      	ldr	r6, [r4, #20]
   b99b4:	2106      	movs	r1, #6
   b99b6:	f7fe f956 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99ba:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b99bc:	68a8      	ldr	r0, [r5, #8]
   b99be:	6966      	ldr	r6, [r4, #20]
   b99c0:	2108      	movs	r1, #8
   b99c2:	f7fe f950 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99c6:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b99c8:	68a8      	ldr	r0, [r5, #8]
   b99ca:	6966      	ldr	r6, [r4, #20]
   b99cc:	210a      	movs	r1, #10
   b99ce:	f7fe f94a 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99d2:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b99d4:	68a8      	ldr	r0, [r5, #8]
   b99d6:	6966      	ldr	r6, [r4, #20]
   b99d8:	210c      	movs	r1, #12
   b99da:	f7fe f944 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99de:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b99e0:	68a8      	ldr	r0, [r5, #8]
   b99e2:	6966      	ldr	r6, [r4, #20]
   b99e4:	210e      	movs	r1, #14
   b99e6:	f7fe f93e 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99ea:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b99ec:	68a8      	ldr	r0, [r5, #8]
   b99ee:	6966      	ldr	r6, [r4, #20]
   b99f0:	2110      	movs	r1, #16
   b99f2:	f7fe f938 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99f6:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b99f8:	6963      	ldr	r3, [r4, #20]
   b99fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b99fe:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a00:	6963      	ldr	r3, [r4, #20]
   b9a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9a04:	b17a      	cbz	r2, b9a26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9a06:	7819      	ldrb	r1, [r3, #0]
   b9a08:	0708      	lsls	r0, r1, #28
   b9a0a:	d40c      	bmi.n	b9a26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9a0c:	1d19      	adds	r1, r3, #4
   b9a0e:	3318      	adds	r3, #24
   b9a10:	f851 0b04 	ldr.w	r0, [r1], #4
   b9a14:	f842 0b04 	str.w	r0, [r2], #4
   b9a18:	4299      	cmp	r1, r3
   b9a1a:	d1f9      	bne.n	b9a10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9a1c:	6962      	ldr	r2, [r4, #20]
   b9a1e:	7813      	ldrb	r3, [r2, #0]
   b9a20:	f043 0308 	orr.w	r3, r3, #8
   b9a24:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9a26:	6963      	ldr	r3, [r4, #20]
   b9a28:	e765      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9a2a:	bf00      	nop
   b9a2c:	00101400 	.word	0x00101400
   b9a30:	00140100 	.word	0x00140100
   b9a34:	00100300 	.word	0x00100300
   b9a38:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9a3c:	4a8c      	ldr	r2, [pc, #560]	; (b9c70 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b9a3e:	4293      	cmp	r3, r2
   b9a40:	d149      	bne.n	b9ad6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9a42:	69c6      	ldr	r6, [r0, #28]
   b9a44:	2e00      	cmp	r6, #0
   b9a46:	f43f aec8 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b9a4a:	68a8      	ldr	r0, [r5, #8]
   b9a4c:	2100      	movs	r1, #0
   b9a4e:	f7fe f8fd 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a52:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9a54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9a56:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b9a58:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9a5a:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a5c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9a5e:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a60:	2108      	movs	r1, #8
   b9a62:	f7fe f8f3 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9a66:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a68:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9a6a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a6c:	210c      	movs	r1, #12
   b9a6e:	f7fe f8ed 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9a72:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a74:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9a76:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a78:	2110      	movs	r1, #16
   b9a7a:	f7fe f8e7 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9a7e:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b9a80:	68a8      	ldr	r0, [r5, #8]
   b9a82:	69e6      	ldr	r6, [r4, #28]
   b9a84:	2114      	movs	r1, #20
   b9a86:	f7fe f8e1 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a8a:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b9a8c:	68a8      	ldr	r0, [r5, #8]
   b9a8e:	69e6      	ldr	r6, [r4, #28]
   b9a90:	2118      	movs	r1, #24
   b9a92:	f7fe f8db 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a96:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b9a98:	68a8      	ldr	r0, [r5, #8]
   b9a9a:	69e6      	ldr	r6, [r4, #28]
   b9a9c:	211c      	movs	r1, #28
   b9a9e:	f7fe f8d5 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9aa2:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9aa4:	69e3      	ldr	r3, [r4, #28]
   b9aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9aaa:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9aac:	69e3      	ldr	r3, [r4, #28]
   b9aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b9ab0:	b17a      	cbz	r2, b9ad2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ab2:	7819      	ldrb	r1, [r3, #0]
   b9ab4:	0709      	lsls	r1, r1, #28
   b9ab6:	d40c      	bmi.n	b9ad2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9ab8:	1d19      	adds	r1, r3, #4
   b9aba:	3324      	adds	r3, #36	; 0x24
   b9abc:	f851 0b04 	ldr.w	r0, [r1], #4
   b9ac0:	f842 0b04 	str.w	r0, [r2], #4
   b9ac4:	4299      	cmp	r1, r3
   b9ac6:	d1f9      	bne.n	b9abc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ac8:	69e2      	ldr	r2, [r4, #28]
   b9aca:	7813      	ldrb	r3, [r2, #0]
   b9acc:	f043 0308 	orr.w	r3, r3, #8
   b9ad0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b9ad2:	69e3      	ldr	r3, [r4, #28]
   b9ad4:	e70f      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9ad6:	4a67      	ldr	r2, [pc, #412]	; (b9c74 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9ad8:	4293      	cmp	r3, r2
   b9ada:	f040 80cd 	bne.w	b9c78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b9ade:	6a06      	ldr	r6, [r0, #32]
   b9ae0:	2e00      	cmp	r6, #0
   b9ae2:	f43f ae7a 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9ae6:	68a8      	ldr	r0, [r5, #8]
   b9ae8:	2100      	movs	r1, #0
   b9aea:	f7fe f8af 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9aee:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b9af0:	68a8      	ldr	r0, [r5, #8]
   b9af2:	6a26      	ldr	r6, [r4, #32]
   b9af4:	2104      	movs	r1, #4
   b9af6:	f7fe f8b6 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9afa:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b9afc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9afe:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b00:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9b02:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9b04:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b06:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b08:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b0a:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b9b0c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b0e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b10:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b12:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9b14:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b16:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b18:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b1a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9b1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b1e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b20:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b22:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9b24:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b26:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b28:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b2a:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b9b2c:	210c      	movs	r1, #12
   b9b2e:	68a8      	ldr	r0, [r5, #8]
   b9b30:	6a26      	ldr	r6, [r4, #32]
   b9b32:	f7fe f88b 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b36:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b38:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b3a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b3c:	2110      	movs	r1, #16
   b9b3e:	f7fe f885 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b42:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9b44:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b46:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b48:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b4a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9b4c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9b4e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b50:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9b52:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9b54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9b56:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b58:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9b5a:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9b5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9b5e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b60:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9b62:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b64:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9b66:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b68:	2118      	movs	r1, #24
   b9b6a:	f7fe f86f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9b6e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b70:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9b72:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b74:	211c      	movs	r1, #28
   b9b76:	f7fe f869 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9b7a:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b7c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9b7e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b80:	2120      	movs	r1, #32
   b9b82:	f7fe f863 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9b86:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b88:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9b8a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b8c:	2124      	movs	r1, #36	; 0x24
   b9b8e:	f7fe f85d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9b92:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b9b94:	68a8      	ldr	r0, [r5, #8]
   b9b96:	6a26      	ldr	r6, [r4, #32]
   b9b98:	2128      	movs	r1, #40	; 0x28
   b9b9a:	f7fe f857 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b9e:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b9ba0:	6a26      	ldr	r6, [r4, #32]
   b9ba2:	68a8      	ldr	r0, [r5, #8]
   b9ba4:	212c      	movs	r1, #44	; 0x2c
   b9ba6:	f7fe f851 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9baa:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9bae:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bb0:	2130      	movs	r1, #48	; 0x30
   b9bb2:	f7fe f84b 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9bb6:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bb8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9bba:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bbc:	2134      	movs	r1, #52	; 0x34
   b9bbe:	f7fe f845 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9bc2:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bc4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9bc6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bc8:	2138      	movs	r1, #56	; 0x38
   b9bca:	f7fe f83f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9bce:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9bd2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd4:	213c      	movs	r1, #60	; 0x3c
   b9bd6:	f7fe f839 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9bda:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bdc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9bde:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9be0:	2140      	movs	r1, #64	; 0x40
   b9be2:	f7fe f833 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9be6:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b9be8:	68a8      	ldr	r0, [r5, #8]
   b9bea:	6a26      	ldr	r6, [r4, #32]
   b9bec:	2144      	movs	r1, #68	; 0x44
   b9bee:	f7fe f82d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bf2:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b9bf4:	68a8      	ldr	r0, [r5, #8]
   b9bf6:	6a26      	ldr	r6, [r4, #32]
   b9bf8:	2148      	movs	r1, #72	; 0x48
   b9bfa:	f7fe f827 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bfe:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b9c00:	68a8      	ldr	r0, [r5, #8]
   b9c02:	6a26      	ldr	r6, [r4, #32]
   b9c04:	214c      	movs	r1, #76	; 0x4c
   b9c06:	f7fe f82e 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c0a:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b9c0e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c10:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9c12:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c1a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c1c:	68a8      	ldr	r0, [r5, #8]
   b9c1e:	2154      	movs	r1, #84	; 0x54
   b9c20:	f7fe f814 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c24:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c26:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c28:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c2a:	2158      	movs	r1, #88	; 0x58
   b9c2c:	f7fe f81b 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c30:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b9c34:	68a8      	ldr	r0, [r5, #8]
   b9c36:	6a26      	ldr	r6, [r4, #32]
   b9c38:	215a      	movs	r1, #90	; 0x5a
   b9c3a:	f7fe f814 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c3e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9c42:	6a22      	ldr	r2, [r4, #32]
   b9c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c48:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b9c4a:	6a22      	ldr	r2, [r4, #32]
   b9c4c:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9c4e:	6a21      	ldr	r1, [r4, #32]
   b9c50:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b9c52:	b158      	cbz	r0, b9c6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9c54:	780b      	ldrb	r3, [r1, #0]
   b9c56:	071b      	lsls	r3, r3, #28
   b9c58:	d408      	bmi.n	b9c6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b9c5a:	225c      	movs	r2, #92	; 0x5c
   b9c5c:	3104      	adds	r1, #4
   b9c5e:	f009 fef7 	bl	c3a50 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9c62:	6a22      	ldr	r2, [r4, #32]
   b9c64:	7813      	ldrb	r3, [r2, #0]
   b9c66:	f043 0308 	orr.w	r3, r3, #8
   b9c6a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b9c6c:	6a23      	ldr	r3, [r4, #32]
   b9c6e:	e642      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9c70:	00200500 	.word	0x00200500
   b9c74:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b9c78:	4a8e      	ldr	r2, [pc, #568]	; (b9eb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b9c7a:	4293      	cmp	r3, r2
   b9c7c:	d137      	bne.n	b9cee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b9c7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9c80:	2b00      	cmp	r3, #0
   b9c82:	f43f adaa 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9c86:	688a      	ldr	r2, [r1, #8]
   b9c88:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b9c8a:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b9c8c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9c8e:	68a8      	ldr	r0, [r5, #8]
   b9c90:	2104      	movs	r1, #4
   b9c92:	f7fd ffdb 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c96:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b9c98:	68a8      	ldr	r0, [r5, #8]
   b9c9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9c9c:	2108      	movs	r1, #8
   b9c9e:	f7fd ffd5 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ca2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b9ca4:	68a8      	ldr	r0, [r5, #8]
   b9ca6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9ca8:	210c      	movs	r1, #12
   b9caa:	f7fd ffcf 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cae:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b9cb0:	68a8      	ldr	r0, [r5, #8]
   b9cb2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9cb4:	2110      	movs	r1, #16
   b9cb6:	f7fd ffc9 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cba:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9cc2:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9cc8:	b17a      	cbz	r2, b9cea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9cca:	7819      	ldrb	r1, [r3, #0]
   b9ccc:	070f      	lsls	r7, r1, #28
   b9cce:	d40c      	bmi.n	b9cea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b9cd0:	1d19      	adds	r1, r3, #4
   b9cd2:	3318      	adds	r3, #24
   b9cd4:	f851 0b04 	ldr.w	r0, [r1], #4
   b9cd8:	f842 0b04 	str.w	r0, [r2], #4
   b9cdc:	4299      	cmp	r1, r3
   b9cde:	d1f9      	bne.n	b9cd4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ce0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9ce2:	7813      	ldrb	r3, [r2, #0]
   b9ce4:	f043 0308 	orr.w	r3, r3, #8
   b9ce8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b9cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9cec:	e603      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b9cee:	4a72      	ldr	r2, [pc, #456]	; (b9eb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b9cf0:	4293      	cmp	r3, r2
   b9cf2:	d139      	bne.n	b9d68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b9cf4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b9cf6:	2e00      	cmp	r6, #0
   b9cf8:	f43f ad6f 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b9cfc:	68a8      	ldr	r0, [r5, #8]
   b9cfe:	2100      	movs	r1, #0
   b9d00:	f7fd ffa4 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d04:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d06:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d0a:	2104      	movs	r1, #4
   b9d0c:	f7fd ff9e 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d10:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d12:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d16:	2108      	movs	r1, #8
   b9d18:	f7fd ff98 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d1c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d1e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d22:	210c      	movs	r1, #12
   b9d24:	f7fd ff92 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d28:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b9d2a:	68a8      	ldr	r0, [r5, #8]
   b9d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b9d2e:	2110      	movs	r1, #16
   b9d30:	f7fd ff8c 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d34:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9d3c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9d3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9d42:	b17a      	cbz	r2, b9d64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9d44:	7819      	ldrb	r1, [r3, #0]
   b9d46:	070e      	lsls	r6, r1, #28
   b9d48:	d40c      	bmi.n	b9d64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b9d4a:	1d19      	adds	r1, r3, #4
   b9d4c:	3318      	adds	r3, #24
   b9d4e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9d52:	f842 0b04 	str.w	r0, [r2], #4
   b9d56:	4299      	cmp	r1, r3
   b9d58:	d1f9      	bne.n	b9d4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9d5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b9d5c:	7813      	ldrb	r3, [r2, #0]
   b9d5e:	f043 0308 	orr.w	r3, r3, #8
   b9d62:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9d64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d66:	e5c6      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b9d68:	4a54      	ldr	r2, [pc, #336]	; (b9ebc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b9d6a:	4293      	cmp	r3, r2
   b9d6c:	d151      	bne.n	b9e12 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b9d6e:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b9d70:	2e00      	cmp	r6, #0
   b9d72:	f43f ad32 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b9d76:	68a8      	ldr	r0, [r5, #8]
   b9d78:	2100      	movs	r1, #0
   b9d7a:	f7fd ff67 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d7e:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d80:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9d82:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d84:	2104      	movs	r1, #4
   b9d86:	f7fd ff61 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9d8a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d8c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9d8e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d90:	2108      	movs	r1, #8
   b9d92:	f7fd ff5b 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9d96:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d98:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9d9a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d9c:	210c      	movs	r1, #12
   b9d9e:	f7fd ff55 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9da2:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b9da4:	68a8      	ldr	r0, [r5, #8]
   b9da6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9da8:	2110      	movs	r1, #16
   b9daa:	f7fd ff4f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dae:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b9db0:	68a8      	ldr	r0, [r5, #8]
   b9db2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9db4:	2114      	movs	r1, #20
   b9db6:	f7fd ff49 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dba:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dbc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9dbe:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dc0:	2118      	movs	r1, #24
   b9dc2:	f7fd ff43 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9dc6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b9dc8:	68a8      	ldr	r0, [r5, #8]
   b9dca:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9dcc:	211c      	movs	r1, #28
   b9dce:	f7fd ff3d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dd2:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b9dd4:	68a8      	ldr	r0, [r5, #8]
   b9dd6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9dd8:	2120      	movs	r1, #32
   b9dda:	f7fd ff37 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dde:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9de6:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9de8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9dec:	b17a      	cbz	r2, b9e0e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9dee:	7819      	ldrb	r1, [r3, #0]
   b9df0:	0708      	lsls	r0, r1, #28
   b9df2:	d40c      	bmi.n	b9e0e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b9df4:	1d19      	adds	r1, r3, #4
   b9df6:	3328      	adds	r3, #40	; 0x28
   b9df8:	f851 0b04 	ldr.w	r0, [r1], #4
   b9dfc:	f842 0b04 	str.w	r0, [r2], #4
   b9e00:	4299      	cmp	r1, r3
   b9e02:	d1f9      	bne.n	b9df8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b9e04:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b9e06:	7813      	ldrb	r3, [r2, #0]
   b9e08:	f043 0308 	orr.w	r3, r3, #8
   b9e0c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b9e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e10:	e571      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b9e12:	4a2b      	ldr	r2, [pc, #172]	; (b9ec0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b9e14:	4293      	cmp	r3, r2
   b9e16:	d155      	bne.n	b9ec4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b9e18:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9e1a:	2b00      	cmp	r3, #0
   b9e1c:	f43f acdd 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9e20:	688a      	ldr	r2, [r1, #8]
   b9e22:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b9e24:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b9e26:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b9e28:	68a8      	ldr	r0, [r5, #8]
   b9e2a:	2104      	movs	r1, #4
   b9e2c:	f7fd ff0e 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e30:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e32:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e34:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e36:	2108      	movs	r1, #8
   b9e38:	f7fd ff08 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e3c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e3e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e40:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e42:	210c      	movs	r1, #12
   b9e44:	f7fd ff02 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e48:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e4a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9e4c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e4e:	2110      	movs	r1, #16
   b9e50:	f7fd fefc 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9e54:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9e56:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b9e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e5a:	7d12      	ldrb	r2, [r2, #20]
   b9e5c:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9e5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b9e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e62:	7d52      	ldrb	r2, [r2, #21]
   b9e64:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9e66:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b9e68:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e6a:	7d92      	ldrb	r2, [r2, #22]
   b9e6c:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9e6e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b9e72:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9e74:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b9e76:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b9e78:	68a8      	ldr	r0, [r5, #8]
   b9e7a:	2118      	movs	r1, #24
   b9e7c:	f7fd fee6 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e80:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9e88:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b9e8e:	b17a      	cbz	r2, b9eb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9e90:	7819      	ldrb	r1, [r3, #0]
   b9e92:	0709      	lsls	r1, r1, #28
   b9e94:	d40c      	bmi.n	b9eb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b9e96:	1d19      	adds	r1, r3, #4
   b9e98:	3320      	adds	r3, #32
   b9e9a:	f851 0b04 	ldr.w	r0, [r1], #4
   b9e9e:	f842 0b04 	str.w	r0, [r2], #4
   b9ea2:	4299      	cmp	r1, r3
   b9ea4:	d1f9      	bne.n	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ea6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b9ea8:	7813      	ldrb	r3, [r2, #0]
   b9eaa:	f043 0308 	orr.w	r3, r3, #8
   b9eae:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9eb2:	e520      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9eb4:	00140900 	.word	0x00140900
   b9eb8:	00141100 	.word	0x00141100
   b9ebc:	00241200 	.word	0x00241200
   b9ec0:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b9ec4:	4a30      	ldr	r2, [pc, #192]	; (b9f88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b9ec6:	4293      	cmp	r3, r2
   b9ec8:	d160      	bne.n	b9f8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b9eca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b9ecc:	2b00      	cmp	r3, #0
   b9ece:	f43f ac84 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9ed2:	688a      	ldr	r2, [r1, #8]
   b9ed4:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b9ed6:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b9ed8:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9eda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b9edc:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9ede:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b9ee0:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b9ee2:	68a8      	ldr	r0, [r5, #8]
   b9ee4:	2104      	movs	r1, #4
   b9ee6:	f7fd feb1 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eea:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9eec:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9eee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ef0:	2108      	movs	r1, #8
   b9ef2:	f7fd feab 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9ef6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ef8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9efa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9efc:	210c      	movs	r1, #12
   b9efe:	f7fd fea5 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9f02:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f04:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f06:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f08:	2110      	movs	r1, #16
   b9f0a:	f7fd fe9f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f0e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f10:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f14:	2114      	movs	r1, #20
   b9f16:	f7fd fe99 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f1a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9f1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b9f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f20:	7e12      	ldrb	r2, [r2, #24]
   b9f22:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9f24:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b9f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f28:	7e52      	ldrb	r2, [r2, #25]
   b9f2a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9f2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b9f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f30:	7e92      	ldrb	r2, [r2, #26]
   b9f32:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9f34:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b9f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f38:	7ed2      	ldrb	r2, [r2, #27]
   b9f3a:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b9f3c:	68a8      	ldr	r0, [r5, #8]
   b9f3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f40:	211c      	movs	r1, #28
   b9f42:	f7fd fe83 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f46:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b9f48:	68a8      	ldr	r0, [r5, #8]
   b9f4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f4c:	2120      	movs	r1, #32
   b9f4e:	f7fd fe7d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f52:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f5a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9f60:	b17a      	cbz	r2, b9f82 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f62:	7819      	ldrb	r1, [r3, #0]
   b9f64:	070f      	lsls	r7, r1, #28
   b9f66:	d40c      	bmi.n	b9f82 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b9f68:	1d19      	adds	r1, r3, #4
   b9f6a:	3328      	adds	r3, #40	; 0x28
   b9f6c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9f70:	f842 0b04 	str.w	r0, [r2], #4
   b9f74:	4299      	cmp	r1, r3
   b9f76:	d1f9      	bne.n	b9f6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b9f78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b9f7a:	7813      	ldrb	r3, [r2, #0]
   b9f7c:	f043 0308 	orr.w	r3, r3, #8
   b9f80:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b9f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f84:	e4b7      	b.n	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9f86:	bf00      	nop
   b9f88:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b9f8c:	4aa1      	ldr	r2, [pc, #644]	; (ba214 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b9f8e:	4293      	cmp	r3, r2
   b9f90:	f040 80f0 	bne.w	ba174 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b9f94:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b9f96:	2e00      	cmp	r6, #0
   b9f98:	f43f ac1f 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b9f9c:	68a8      	ldr	r0, [r5, #8]
   b9f9e:	2100      	movs	r1, #0
   b9fa0:	f7fd fe54 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fa4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9fa6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9fa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9faa:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9fac:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9fae:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fb2:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9fb4:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   b9fb6:	68a8      	ldr	r0, [r5, #8]
   b9fb8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9fba:	2106      	movs	r1, #6
   b9fbc:	f7fd fe53 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9fc0:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b9fc2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fc6:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9fc8:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9fca:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9fcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fce:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9fd0:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9fd2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9fd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fd6:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9fd8:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9fda:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fde:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9fe0:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   b9fe2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b9fe4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fe6:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b9fe8:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   b9fea:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9fec:	68a8      	ldr	r0, [r5, #8]
   b9fee:	2110      	movs	r1, #16
   b9ff0:	f7fd fe2c 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ff4:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ff6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b9ff8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ffa:	2114      	movs	r1, #20
   b9ffc:	f7fd fe26 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba000:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba002:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba006:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba008:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba00a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba00c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba00e:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba010:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba012:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba016:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba018:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba01a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba01c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba01e:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba020:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba022:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba024:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba026:	211c      	movs	r1, #28
   ba028:	f7fd fe10 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba02c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba02e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba030:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba032:	2120      	movs	r1, #32
   ba034:	f7fd fe0a 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba038:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba03a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba03c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba03e:	2124      	movs	r1, #36	; 0x24
   ba040:	f7fd fe04 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba044:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba046:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba048:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba04a:	2128      	movs	r1, #40	; 0x28
   ba04c:	f7fd fdfe 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba050:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba052:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba054:	68a8      	ldr	r0, [r5, #8]
   ba056:	212c      	movs	r1, #44	; 0x2c
   ba058:	f7fd fdf8 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba05c:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba05e:	68a8      	ldr	r0, [r5, #8]
   ba060:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba062:	2130      	movs	r1, #48	; 0x30
   ba064:	f7fd fdf2 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba068:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba06a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba06c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba06e:	2134      	movs	r1, #52	; 0x34
   ba070:	f7fd fdec 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba074:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba076:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba078:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba07a:	2138      	movs	r1, #56	; 0x38
   ba07c:	f7fd fde6 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba080:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba082:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba084:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba086:	213c      	movs	r1, #60	; 0x3c
   ba088:	f7fd fde0 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba08c:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba08e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba090:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba092:	2140      	movs	r1, #64	; 0x40
   ba094:	f7fd fdda 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba098:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba09a:	68a8      	ldr	r0, [r5, #8]
   ba09c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba09e:	2144      	movs	r1, #68	; 0x44
   ba0a0:	f7fd fdd4 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0a4:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0a6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba0a8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0aa:	2148      	movs	r1, #72	; 0x48
   ba0ac:	f7fd fdce 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba0b0:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0b2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba0b4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0b6:	214c      	movs	r1, #76	; 0x4c
   ba0b8:	f7fd fdc8 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba0bc:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0be:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba0c0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0c2:	2150      	movs	r1, #80	; 0x50
   ba0c4:	f7fd fdc2 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba0c8:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ca:	2154      	movs	r1, #84	; 0x54
   ba0cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba0ce:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0d0:	f7fd fdbc 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba0d4:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba0d6:	68a8      	ldr	r0, [r5, #8]
   ba0d8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0da:	2158      	movs	r1, #88	; 0x58
   ba0dc:	f7fd fdc3 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0e0:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba0e4:	68a8      	ldr	r0, [r5, #8]
   ba0e6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0e8:	215a      	movs	r1, #90	; 0x5a
   ba0ea:	f7fd fdbc 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0ee:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba0f2:	68a8      	ldr	r0, [r5, #8]
   ba0f4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0f6:	215c      	movs	r1, #92	; 0x5c
   ba0f8:	f7fd fdb5 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0fc:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba100:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba102:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba104:	215e      	movs	r1, #94	; 0x5e
   ba106:	f7fd fdae 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba10a:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba10e:	68a8      	ldr	r0, [r5, #8]
   ba110:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba112:	2160      	movs	r1, #96	; 0x60
   ba114:	f7fd fda7 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba118:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba11c:	68a8      	ldr	r0, [r5, #8]
   ba11e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba120:	2162      	movs	r1, #98	; 0x62
   ba122:	f7fd fda0 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba126:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba12a:	68a8      	ldr	r0, [r5, #8]
   ba12c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba12e:	2164      	movs	r1, #100	; 0x64
   ba130:	f7fd fd8c 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba134:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba136:	68a8      	ldr	r0, [r5, #8]
   ba138:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba13a:	2168      	movs	r1, #104	; 0x68
   ba13c:	f7fd fd86 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba140:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba142:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba148:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba14a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba14c:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba14e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba150:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba154:	b158      	cbz	r0, ba16e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba156:	780b      	ldrb	r3, [r1, #0]
   ba158:	071e      	lsls	r6, r3, #28
   ba15a:	d408      	bmi.n	ba16e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba15c:	2274      	movs	r2, #116	; 0x74
   ba15e:	3104      	adds	r1, #4
   ba160:	f009 fc76 	bl	c3a50 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba164:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba166:	7813      	ldrb	r3, [r2, #0]
   ba168:	f043 0308 	orr.w	r3, r3, #8
   ba16c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba16e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba170:	f7ff bbc1 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba174:	4a28      	ldr	r2, [pc, #160]	; (ba218 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba176:	4293      	cmp	r3, r2
   ba178:	d150      	bne.n	ba21c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba17a:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba17c:	2e00      	cmp	r6, #0
   ba17e:	f43f ab2c 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba182:	68a8      	ldr	r0, [r5, #8]
   ba184:	2100      	movs	r1, #0
   ba186:	f7fd fd61 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba18a:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba18c:	68a8      	ldr	r0, [r5, #8]
   ba18e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba190:	2104      	movs	r1, #4
   ba192:	f7fd fd5b 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba196:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba198:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba19a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba19c:	2108      	movs	r1, #8
   ba19e:	f7fd fd55 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba1a2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba1a4:	68a8      	ldr	r0, [r5, #8]
   ba1a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba1a8:	210c      	movs	r1, #12
   ba1aa:	f7fd fd5c 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba1ae:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba1b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba1b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1b4:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba1b6:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba1b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba1ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1bc:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba1be:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba1c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba1c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1c4:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba1c6:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba1c8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba1ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1cc:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba1ce:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba1d0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba1d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1d4:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba1d6:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba1d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1da:	68aa      	ldr	r2, [r5, #8]
   ba1dc:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba1de:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba1e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba1e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba1e6:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba1e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba1ea:	6a1a      	ldr	r2, [r3, #32]
   ba1ec:	b17a      	cbz	r2, ba20e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba1ee:	7819      	ldrb	r1, [r3, #0]
   ba1f0:	0708      	lsls	r0, r1, #28
   ba1f2:	d40c      	bmi.n	ba20e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba1f4:	1d19      	adds	r1, r3, #4
   ba1f6:	3318      	adds	r3, #24
   ba1f8:	f851 0b04 	ldr.w	r0, [r1], #4
   ba1fc:	f842 0b04 	str.w	r0, [r2], #4
   ba200:	4299      	cmp	r1, r3
   ba202:	d1f9      	bne.n	ba1f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba204:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba206:	7813      	ldrb	r3, [r2, #0]
   ba208:	f043 0308 	orr.w	r3, r3, #8
   ba20c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba20e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba210:	f7ff bb71 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba214:	00741700 	.word	0x00741700
   ba218:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba21c:	4a84      	ldr	r2, [pc, #528]	; (ba430 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba21e:	4293      	cmp	r3, r2
   ba220:	d13a      	bne.n	ba298 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba222:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba224:	2e00      	cmp	r6, #0
   ba226:	f43f aad8 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba22a:	68a8      	ldr	r0, [r5, #8]
   ba22c:	2100      	movs	r1, #0
   ba22e:	f7fd fd0d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba232:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba234:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba236:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba238:	2104      	movs	r1, #4
   ba23a:	f7fd fd07 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba23e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba240:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba242:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba244:	2108      	movs	r1, #8
   ba246:	f7fd fd01 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba24a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba24c:	68a8      	ldr	r0, [r5, #8]
   ba24e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba250:	210c      	movs	r1, #12
   ba252:	f7fd fcfb 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba256:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba258:	68a8      	ldr	r0, [r5, #8]
   ba25a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba25c:	2110      	movs	r1, #16
   ba25e:	f7fd fcf5 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba262:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba264:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba26a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba26c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba26e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba270:	b17a      	cbz	r2, ba292 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba272:	7819      	ldrb	r1, [r3, #0]
   ba274:	0709      	lsls	r1, r1, #28
   ba276:	d40c      	bmi.n	ba292 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba278:	1d19      	adds	r1, r3, #4
   ba27a:	3318      	adds	r3, #24
   ba27c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba280:	f842 0b04 	str.w	r0, [r2], #4
   ba284:	4299      	cmp	r1, r3
   ba286:	d1f9      	bne.n	ba27c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba288:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba28a:	7813      	ldrb	r3, [r2, #0]
   ba28c:	f043 0308 	orr.w	r3, r3, #8
   ba290:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba292:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba294:	f7ff bb2f 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba298:	4a66      	ldr	r2, [pc, #408]	; (ba434 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba29a:	4293      	cmp	r3, r2
   ba29c:	d138      	bne.n	ba310 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba29e:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba2a0:	2e00      	cmp	r6, #0
   ba2a2:	f43f aa9a 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba2a6:	68a8      	ldr	r0, [r5, #8]
   ba2a8:	2100      	movs	r1, #0
   ba2aa:	f7fd fccf 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2ae:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba2b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba2b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2b4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba2b6:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba2b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba2ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2bc:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba2be:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba2c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba2c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba2c4:	7a52      	ldrb	r2, [r2, #9]
   ba2c6:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba2c8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba2ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2cc:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba2ce:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba2d0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba2d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba2d4:	7ad2      	ldrb	r2, [r2, #11]
   ba2d6:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba2da:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2dc:	210c      	movs	r1, #12
   ba2de:	f7fd fcb5 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba2e2:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba2e4:	68a8      	ldr	r0, [r5, #8]
   ba2e6:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba2e8:	2110      	movs	r1, #16
   ba2ea:	f7fd fcbc 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba2ee:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba2f0:	68a8      	ldr	r0, [r5, #8]
   ba2f2:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba2f4:	2112      	movs	r1, #18
   ba2f6:	f7fd fcb6 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba2fa:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba2fc:	68ab      	ldr	r3, [r5, #8]
   ba2fe:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba300:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba302:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba304:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba30a:	61da      	str	r2, [r3, #28]
   ba30c:	f7ff ba65 	b.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba310:	4a49      	ldr	r2, [pc, #292]	; (ba438 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba312:	4293      	cmp	r3, r2
   ba314:	d162      	bne.n	ba3dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba316:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba318:	2b00      	cmp	r3, #0
   ba31a:	f43f aa5e 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba31e:	688a      	ldr	r2, [r1, #8]
   ba320:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba322:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba324:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba326:	68a8      	ldr	r0, [r5, #8]
   ba328:	2104      	movs	r1, #4
   ba32a:	f7fd fc8f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba32e:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba330:	68a8      	ldr	r0, [r5, #8]
   ba332:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba334:	2108      	movs	r1, #8
   ba336:	f7fd fc89 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba33a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba33c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba33e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba340:	210c      	movs	r1, #12
   ba342:	f7fd fc83 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba346:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba348:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba34a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba34c:	2110      	movs	r1, #16
   ba34e:	f7fd fc7d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba352:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba354:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba356:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba358:	2114      	movs	r1, #20
   ba35a:	f7fd fc77 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba35e:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba360:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba362:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba364:	7e12      	ldrb	r2, [r2, #24]
   ba366:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba368:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba36a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba36c:	7e52      	ldrb	r2, [r2, #25]
   ba36e:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba370:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba372:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba374:	7e92      	ldrb	r2, [r2, #26]
   ba376:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba378:	211c      	movs	r1, #28
   ba37a:	68a8      	ldr	r0, [r5, #8]
   ba37c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba37e:	f7fd fc65 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba382:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba384:	68a8      	ldr	r0, [r5, #8]
   ba386:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba388:	2120      	movs	r1, #32
   ba38a:	f7fd fc5f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba38e:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba390:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba394:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba39c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba39e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3a0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba3a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba3ae:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba3b4:	b17a      	cbz	r2, ba3d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3b6:	7819      	ldrb	r1, [r3, #0]
   ba3b8:	070f      	lsls	r7, r1, #28
   ba3ba:	d40c      	bmi.n	ba3d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba3bc:	1d19      	adds	r1, r3, #4
   ba3be:	332c      	adds	r3, #44	; 0x2c
   ba3c0:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3c4:	f842 0b04 	str.w	r0, [r2], #4
   ba3c8:	4299      	cmp	r1, r3
   ba3ca:	d1f9      	bne.n	ba3c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba3ce:	7813      	ldrb	r3, [r2, #0]
   ba3d0:	f043 0308 	orr.w	r3, r3, #8
   ba3d4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba3d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3d8:	f7ff ba8d 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba3dc:	784a      	ldrb	r2, [r1, #1]
   ba3de:	2a35      	cmp	r2, #53	; 0x35
   ba3e0:	d17f      	bne.n	ba4e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba3e2:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba3e4:	2e00      	cmp	r6, #0
   ba3e6:	f43f a9f8 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba3ea:	68a8      	ldr	r0, [r5, #8]
   ba3ec:	2100      	movs	r1, #0
   ba3ee:	f7fd fc2d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3f2:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba3f4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba3f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba3f8:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba3fa:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba3fc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba3fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba400:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba402:	725a      	strb	r2, [r3, #9]
   ba404:	f04f 0808 	mov.w	r8, #8
   ba408:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba40a:	f04f 0a0c 	mov.w	sl, #12
   ba40e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba410:	7a59      	ldrb	r1, [r3, #9]
   ba412:	b2ba      	uxth	r2, r7
   ba414:	4291      	cmp	r1, r2
   ba416:	d811      	bhi.n	ba43c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba418:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba41a:	2201      	movs	r2, #1
   ba41c:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba420:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba422:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba426:	2800      	cmp	r0, #0
   ba428:	d14d      	bne.n	ba4c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba42a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba42c:	f7ff ba63 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba430:	00142200 	.word	0x00142200
   ba434:	00182600 	.word	0x00182600
   ba438:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba43c:	886a      	ldrh	r2, [r5, #2]
   ba43e:	fb0a f607 	mul.w	r6, sl, r7
   ba442:	3a08      	subs	r2, #8
   ba444:	42b2      	cmp	r2, r6
   ba446:	dde7      	ble.n	ba418 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba448:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba44a:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba44c:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba450:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba452:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba454:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba456:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba458:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba45a:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba45c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba45e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba460:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba462:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba464:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba466:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba468:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba46a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba46c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba46e:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba470:	4433      	add	r3, r6
   ba472:	78d2      	ldrb	r2, [r2, #3]
   ba474:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba476:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba47a:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba47e:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba482:	68a8      	ldr	r0, [r5, #8]
   ba484:	b289      	uxth	r1, r1
   ba486:	f7fd fbee 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba48a:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba48c:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba490:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba494:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba498:	68a8      	ldr	r0, [r5, #8]
   ba49a:	b289      	uxth	r1, r1
   ba49c:	f7fd fbe3 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4a0:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4a2:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4a6:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4aa:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba4ae:	68a8      	ldr	r0, [r5, #8]
   ba4b0:	b289      	uxth	r1, r1
   ba4b2:	f7fd fbcb 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4b6:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba4b8:	3701      	adds	r7, #1
   ba4ba:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4bc:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba4be:	f108 080c 	add.w	r8, r8, #12
   ba4c2:	d1a4      	bne.n	ba40e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba4c4:	e7a8      	b.n	ba418 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4c6:	780b      	ldrb	r3, [r1, #0]
   ba4c8:	071e      	lsls	r6, r3, #28
   ba4ca:	d4ae      	bmi.n	ba42a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba4cc:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba4d0:	3104      	adds	r1, #4
   ba4d2:	f009 fabd 	bl	c3a50 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba4d6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba4d8:	7813      	ldrb	r3, [r2, #0]
   ba4da:	f043 0308 	orr.w	r3, r3, #8
   ba4de:	7013      	strb	r3, [r2, #0]
   ba4e0:	e7a3      	b.n	ba42a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba4e2:	2a3c      	cmp	r2, #60	; 0x3c
   ba4e4:	f040 80bf 	bne.w	ba666 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba4e8:	884a      	ldrh	r2, [r1, #2]
   ba4ea:	2a28      	cmp	r2, #40	; 0x28
   ba4ec:	d002      	beq.n	ba4f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba4ee:	2a40      	cmp	r2, #64	; 0x40
   ba4f0:	f040 80b9 	bne.w	ba666 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   ba4f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba4f6:	2b00      	cmp	r3, #0
   ba4f8:	f43f a96f 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba4fc:	68aa      	ldr	r2, [r5, #8]
   ba4fe:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   ba500:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   ba502:	68a8      	ldr	r0, [r5, #8]
   ba504:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba506:	2102      	movs	r1, #2
   ba508:	f7fd fbad 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba50c:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   ba50e:	68a8      	ldr	r0, [r5, #8]
   ba510:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba512:	2104      	movs	r1, #4
   ba514:	f7fd fb9a 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba518:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba51a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba51c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba51e:	2108      	movs	r1, #8
   ba520:	f7fd fb94 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba524:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba526:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba528:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba52a:	210c      	movs	r1, #12
   ba52c:	f7fd fb8e 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba530:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba532:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba534:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba536:	2110      	movs	r1, #16
   ba538:	f7fd fb88 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba53c:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   ba53e:	886b      	ldrh	r3, [r5, #2]
   ba540:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba542:	2b28      	cmp	r3, #40	; 0x28
   ba544:	d14b      	bne.n	ba5de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   ba546:	2600      	movs	r6, #0
   ba548:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   ba54a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba54c:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   ba54e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   ba550:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba552:	7d12      	ldrb	r2, [r2, #20]
   ba554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba558:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   ba55a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba55c:	7d52      	ldrb	r2, [r2, #21]
   ba55e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba562:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   ba564:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba566:	7d92      	ldrb	r2, [r2, #22]
   ba568:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   ba56c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba56e:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   ba572:	68a8      	ldr	r0, [r5, #8]
   ba574:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba576:	2118      	movs	r1, #24
   ba578:	f7fd fb68 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba57c:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   ba57e:	68a8      	ldr	r0, [r5, #8]
   ba580:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba582:	211c      	movs	r1, #28
   ba584:	f7fd fb62 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba588:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   ba58a:	68a8      	ldr	r0, [r5, #8]
   ba58c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba58e:	2120      	movs	r1, #32
   ba590:	f7fd fb5c 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba594:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   ba596:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba598:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   ba59a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba59c:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   ba59e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba5a0:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba5a2:	68a8      	ldr	r0, [r5, #8]
   ba5a4:	f7fd fb52 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5a8:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba5aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5b0:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   ba5b6:	b17a      	cbz	r2, ba5d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5b8:	7819      	ldrb	r1, [r3, #0]
   ba5ba:	0708      	lsls	r0, r1, #28
   ba5bc:	d40c      	bmi.n	ba5d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   ba5be:	1d19      	adds	r1, r3, #4
   ba5c0:	3344      	adds	r3, #68	; 0x44
   ba5c2:	f851 0b04 	ldr.w	r0, [r1], #4
   ba5c6:	f842 0b04 	str.w	r0, [r2], #4
   ba5ca:	4299      	cmp	r1, r3
   ba5cc:	d1f9      	bne.n	ba5c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba5ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
   ba5d0:	7813      	ldrb	r3, [r2, #0]
   ba5d2:	f043 0308 	orr.w	r3, r3, #8
   ba5d6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   ba5d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5da:	f7ff b98c 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5de:	68a8      	ldr	r0, [r5, #8]
   ba5e0:	2114      	movs	r1, #20
   ba5e2:	f7fd fb33 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   ba5e6:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5e8:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba5ea:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ec:	2118      	movs	r1, #24
   ba5ee:	f7fd fb2d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba5f2:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   ba5f4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   ba5f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5f8:	f892 2020 	ldrb.w	r2, [r2, #32]
   ba5fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba600:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   ba602:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba604:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   ba608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba60c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   ba60e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba610:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   ba614:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   ba618:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   ba61a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba61c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   ba620:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   ba624:	68a8      	ldr	r0, [r5, #8]
   ba626:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba628:	2124      	movs	r1, #36	; 0x24
   ba62a:	f7fd fb0f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba62e:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   ba630:	68a8      	ldr	r0, [r5, #8]
   ba632:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba634:	2128      	movs	r1, #40	; 0x28
   ba636:	f7fd fb09 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba63a:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   ba63c:	68a8      	ldr	r0, [r5, #8]
   ba63e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba640:	212c      	movs	r1, #44	; 0x2c
   ba642:	f7fd fb03 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba646:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   ba648:	68a8      	ldr	r0, [r5, #8]
   ba64a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba64c:	2130      	movs	r1, #48	; 0x30
   ba64e:	f7fd fafd 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba652:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   ba654:	2134      	movs	r1, #52	; 0x34
   ba656:	68a8      	ldr	r0, [r5, #8]
   ba658:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba65a:	f7fd faf7 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba65e:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba660:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba662:	213c      	movs	r1, #60	; 0x3c
   ba664:	e79d      	b.n	ba5a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   ba666:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   ba66a:	d12a      	bne.n	ba6c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   ba66c:	6d66      	ldr	r6, [r4, #84]	; 0x54
   ba66e:	2e00      	cmp	r6, #0
   ba670:	f43f a8b3 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   ba674:	68a8      	ldr	r0, [r5, #8]
   ba676:	2100      	movs	r1, #0
   ba678:	f7fd fae8 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba67c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba67e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba680:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba682:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba684:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba686:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba688:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba68a:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba68c:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba68e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba694:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba696:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba698:	6a1a      	ldr	r2, [r3, #32]
   ba69a:	b17a      	cbz	r2, ba6bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba69c:	7819      	ldrb	r1, [r3, #0]
   ba69e:	0709      	lsls	r1, r1, #28
   ba6a0:	d40c      	bmi.n	ba6bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   ba6a2:	1d19      	adds	r1, r3, #4
   ba6a4:	3314      	adds	r3, #20
   ba6a6:	f851 0b04 	ldr.w	r0, [r1], #4
   ba6aa:	f842 0b04 	str.w	r0, [r2], #4
   ba6ae:	4299      	cmp	r1, r3
   ba6b0:	d1f9      	bne.n	ba6a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba6b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   ba6b4:	7813      	ldrb	r3, [r2, #0]
   ba6b6:	f043 0308 	orr.w	r3, r3, #8
   ba6ba:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba6bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6be:	f7ff b91a 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   ba6c2:	4aa1      	ldr	r2, [pc, #644]	; (ba948 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   ba6c4:	4293      	cmp	r3, r2
   ba6c6:	f47f a888 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   ba6ca:	69a6      	ldr	r6, [r4, #24]
   ba6cc:	2e00      	cmp	r6, #0
   ba6ce:	f43f a884 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   ba6d2:	68a8      	ldr	r0, [r5, #8]
   ba6d4:	2100      	movs	r1, #0
   ba6d6:	f7fd fab9 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6da:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6dc:	69a3      	ldr	r3, [r4, #24]
   ba6de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba6e2:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba6e4:	69a3      	ldr	r3, [r4, #24]
   ba6e6:	691a      	ldr	r2, [r3, #16]
   ba6e8:	b14a      	cbz	r2, ba6fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba6ea:	7819      	ldrb	r1, [r3, #0]
   ba6ec:	070f      	lsls	r7, r1, #28
   ba6ee:	d406      	bmi.n	ba6fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   ba6f0:	685b      	ldr	r3, [r3, #4]
   ba6f2:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   ba6f4:	69a2      	ldr	r2, [r4, #24]
   ba6f6:	7813      	ldrb	r3, [r2, #0]
   ba6f8:	f043 0308 	orr.w	r3, r3, #8
   ba6fc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   ba6fe:	69a3      	ldr	r3, [r4, #24]
   ba700:	f7ff b8f9 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   ba704:	784b      	ldrb	r3, [r1, #1]
   ba706:	2b72      	cmp	r3, #114	; 0x72
   ba708:	f040 80a4 	bne.w	ba854 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   ba70c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba70e:	2b00      	cmp	r3, #0
   ba710:	d069      	beq.n	ba7e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   ba712:	689b      	ldr	r3, [r3, #8]
   ba714:	2b00      	cmp	r3, #0
   ba716:	d066      	beq.n	ba7e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   ba718:	688a      	ldr	r2, [r1, #8]
   ba71a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   ba71c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   ba71e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba720:	68a8      	ldr	r0, [r5, #8]
   ba722:	689f      	ldr	r7, [r3, #8]
   ba724:	4631      	mov	r1, r6
   ba726:	f7fd fa9e 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba72a:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   ba72c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba72e:	68a8      	ldr	r0, [r5, #8]
   ba730:	689e      	ldr	r6, [r3, #8]
   ba732:	2104      	movs	r1, #4
   ba734:	f7fd fa8a 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba738:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   ba73a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba73c:	68a8      	ldr	r0, [r5, #8]
   ba73e:	689e      	ldr	r6, [r3, #8]
   ba740:	2108      	movs	r1, #8
   ba742:	f7fd fa83 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba746:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   ba748:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba74a:	68a8      	ldr	r0, [r5, #8]
   ba74c:	689e      	ldr	r6, [r3, #8]
   ba74e:	210c      	movs	r1, #12
   ba750:	f7fd fa7c 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba754:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   ba756:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba758:	68a8      	ldr	r0, [r5, #8]
   ba75a:	689e      	ldr	r6, [r3, #8]
   ba75c:	2110      	movs	r1, #16
   ba75e:	f7fd fa82 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba762:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba764:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba766:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba768:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba76a:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba76c:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba76e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba770:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba772:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba774:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba776:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   ba778:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba77a:	689e      	ldr	r6, [r3, #8]
   ba77c:	7833      	ldrb	r3, [r6, #0]
   ba77e:	bb23      	cbnz	r3, ba7ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   ba780:	68a8      	ldr	r0, [r5, #8]
   ba782:	f44f 7103 	mov.w	r1, #524	; 0x20c
   ba786:	f7fd fa6e 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba78a:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba78c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba78e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba790:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba792:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba796:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   ba798:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba79a:	689b      	ldr	r3, [r3, #8]
   ba79c:	781a      	ldrb	r2, [r3, #0]
   ba79e:	2a00      	cmp	r2, #0
   ba7a0:	f040 865d 	bne.w	bb45e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   ba7a4:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   ba7a6:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   ba7aa:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7ac:	b299      	uxth	r1, r3
   ba7ae:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7b0:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7b2:	d914      	bls.n	ba7de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   ba7b4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   ba7b8:	d011      	beq.n	ba7de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   ba7ba:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7bc:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   ba7be:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7c0:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   ba7c2:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7c4:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7c6:	3301      	adds	r3, #1
   ba7c8:	e7f0      	b.n	ba7ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   ba7ca:	68a8      	ldr	r0, [r5, #8]
   ba7cc:	2114      	movs	r1, #20
   ba7ce:	f7fd fa4a 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7d2:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba7d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7d6:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba7d8:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7da:	7d92      	ldrb	r2, [r2, #22]
   ba7dc:	e7db      	b.n	ba796 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba7de:	7813      	ldrb	r3, [r2, #0]
   ba7e0:	f043 0308 	orr.w	r3, r3, #8
   ba7e4:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   ba7e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba7e8:	2b00      	cmp	r3, #0
   ba7ea:	f43e aff6 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba7ee:	689b      	ldr	r3, [r3, #8]
   ba7f0:	2b00      	cmp	r3, #0
   ba7f2:	f43e aff2 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   ba7f6:	22b5      	movs	r2, #181	; 0xb5
   ba7f8:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   ba7fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba7fc:	689b      	ldr	r3, [r3, #8]
   ba7fe:	2262      	movs	r2, #98	; 0x62
   ba800:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   ba802:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba804:	689b      	ldr	r3, [r3, #8]
   ba806:	2202      	movs	r2, #2
   ba808:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   ba80a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba80c:	689b      	ldr	r3, [r3, #8]
   ba80e:	2272      	movs	r2, #114	; 0x72
   ba810:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   ba812:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba814:	886a      	ldrh	r2, [r5, #2]
   ba816:	689b      	ldr	r3, [r3, #8]
   ba818:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   ba81a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba81c:	689a      	ldr	r2, [r3, #8]
   ba81e:	886b      	ldrh	r3, [r5, #2]
   ba820:	0a1b      	lsrs	r3, r3, #8
   ba822:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   ba824:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba826:	886a      	ldrh	r2, [r5, #2]
   ba828:	6898      	ldr	r0, [r3, #8]
   ba82a:	68a9      	ldr	r1, [r5, #8]
   ba82c:	3006      	adds	r0, #6
   ba82e:	f009 f90f 	bl	c3a50 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   ba832:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba834:	7b2a      	ldrb	r2, [r5, #12]
   ba836:	689b      	ldr	r3, [r3, #8]
   ba838:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   ba83c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba83e:	7b6a      	ldrb	r2, [r5, #13]
   ba840:	689b      	ldr	r3, [r3, #8]
   ba842:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba846:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba848:	7813      	ldrb	r3, [r2, #0]
   ba84a:	f043 0308 	orr.w	r3, r3, #8
   ba84e:	7013      	strb	r3, [r2, #0]
   ba850:	f7fe bfc3 	b.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   ba854:	2b73      	cmp	r3, #115	; 0x73
   ba856:	d14d      	bne.n	ba8f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   ba858:	6e01      	ldr	r1, [r0, #96]	; 0x60
   ba85a:	780b      	ldrb	r3, [r1, #0]
   ba85c:	071e      	lsls	r6, r3, #28
   ba85e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba862:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   ba866:	d543      	bpl.n	ba8f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   ba868:	0843      	lsrs	r3, r0, #1
   ba86a:	f47e afb6 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba86e:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   ba870:	f44f 7688 	mov.w	r6, #272	; 0x110
   ba874:	688b      	ldr	r3, [r1, #8]
   ba876:	437e      	muls	r6, r7
   ba878:	22b5      	movs	r2, #181	; 0xb5
   ba87a:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   ba87c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba87e:	689b      	ldr	r3, [r3, #8]
   ba880:	4433      	add	r3, r6
   ba882:	2262      	movs	r2, #98	; 0x62
   ba884:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   ba886:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba888:	689b      	ldr	r3, [r3, #8]
   ba88a:	4433      	add	r3, r6
   ba88c:	2202      	movs	r2, #2
   ba88e:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   ba890:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba892:	689b      	ldr	r3, [r3, #8]
   ba894:	4433      	add	r3, r6
   ba896:	2273      	movs	r2, #115	; 0x73
   ba898:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   ba89a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba89c:	886a      	ldrh	r2, [r5, #2]
   ba89e:	689b      	ldr	r3, [r3, #8]
   ba8a0:	4433      	add	r3, r6
   ba8a2:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   ba8a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8a6:	886a      	ldrh	r2, [r5, #2]
   ba8a8:	689b      	ldr	r3, [r3, #8]
   ba8aa:	4433      	add	r3, r6
   ba8ac:	0a12      	lsrs	r2, r2, #8
   ba8ae:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   ba8b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8b2:	886a      	ldrh	r2, [r5, #2]
   ba8b4:	6898      	ldr	r0, [r3, #8]
   ba8b6:	68a9      	ldr	r1, [r5, #8]
   ba8b8:	4430      	add	r0, r6
   ba8ba:	3006      	adds	r0, #6
   ba8bc:	f009 f8c8 	bl	c3a50 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   ba8c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8c2:	7b2a      	ldrb	r2, [r5, #12]
   ba8c4:	689b      	ldr	r3, [r3, #8]
   ba8c6:	4433      	add	r3, r6
   ba8c8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   ba8cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8ce:	7b6a      	ldrb	r2, [r5, #13]
   ba8d0:	689b      	ldr	r3, [r3, #8]
   ba8d2:	441e      	add	r6, r3
   ba8d4:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   ba8d8:	6e21      	ldr	r1, [r4, #96]	; 0x60
   ba8da:	780b      	ldrb	r3, [r1, #0]
   ba8dc:	2201      	movs	r2, #1
   ba8de:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba8e2:	40ba      	lsls	r2, r7
   ba8e4:	4302      	orrs	r2, r0
   ba8e6:	f362 03c4 	bfi	r3, r2, #3, #2
   ba8ea:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   ba8ec:	f7fe bf75 	b.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba8f0:	4617      	mov	r7, r2
   ba8f2:	e7bd      	b.n	ba870 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   ba8f4:	2b34      	cmp	r3, #52	; 0x34
   ba8f6:	d129      	bne.n	ba94c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   ba8f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba8fa:	2b00      	cmp	r3, #0
   ba8fc:	f43e af6d 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba900:	689b      	ldr	r3, [r3, #8]
   ba902:	2b00      	cmp	r3, #0
   ba904:	f43e af69 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba908:	688a      	ldr	r2, [r1, #8]
   ba90a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   ba90c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba90e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   ba910:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba912:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba914:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba916:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   ba918:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba91a:	68a8      	ldr	r0, [r5, #8]
   ba91c:	689e      	ldr	r6, [r3, #8]
   ba91e:	2104      	movs	r1, #4
   ba920:	f7fd f994 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba924:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   ba926:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba928:	68a8      	ldr	r0, [r5, #8]
   ba92a:	689e      	ldr	r6, [r3, #8]
   ba92c:	2108      	movs	r1, #8
   ba92e:	f7fd f99a 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba932:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   ba934:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba936:	68a8      	ldr	r0, [r5, #8]
   ba938:	689e      	ldr	r6, [r3, #8]
   ba93a:	210a      	movs	r1, #10
   ba93c:	f7fd f993 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba940:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba942:	6e62      	ldr	r2, [r4, #100]	; 0x64
   ba944:	e780      	b.n	ba848 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   ba946:	bf00      	nop
   ba948:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   ba94c:	2b13      	cmp	r3, #19
   ba94e:	d14a      	bne.n	ba9e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   ba950:	6e83      	ldr	r3, [r0, #104]	; 0x68
   ba952:	2b00      	cmp	r3, #0
   ba954:	f43e af41 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba958:	688a      	ldr	r2, [r1, #8]
   ba95a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   ba95c:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba95e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba960:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba962:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba964:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   ba966:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba968:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba96a:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba96c:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba96e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba970:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba972:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba974:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba976:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba978:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba97a:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba97c:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba97e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba980:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba982:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba984:	729a      	strb	r2, [r3, #10]
   ba986:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba988:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   ba98a:	7a3a      	ldrb	r2, [r7, #8]
   ba98c:	b2f3      	uxtb	r3, r6
   ba98e:	429a      	cmp	r2, r3
   ba990:	d809      	bhi.n	ba9a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   ba992:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba994:	2201      	movs	r2, #1
   ba996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba99a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   ba99c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   ba99e:	b9a8      	cbnz	r0, ba9cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   ba9a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba9a2:	f7fe bfa8 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9a6:	886b      	ldrh	r3, [r5, #2]
   ba9a8:	3b08      	subs	r3, #8
   ba9aa:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba9ae:	ea4f 0186 	mov.w	r1, r6, lsl #2
   ba9b2:	ddee      	ble.n	ba992 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba9b4:	3108      	adds	r1, #8
   ba9b6:	68a8      	ldr	r0, [r5, #8]
   ba9b8:	b289      	uxth	r1, r1
   ba9ba:	f7fd f947 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9be:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9c2:	3601      	adds	r6, #1
   ba9c4:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba9c6:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9c8:	d1de      	bne.n	ba988 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   ba9ca:	e7e2      	b.n	ba992 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9cc:	780b      	ldrb	r3, [r1, #0]
   ba9ce:	071b      	lsls	r3, r3, #28
   ba9d0:	d4e6      	bmi.n	ba9a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   ba9d2:	2248      	movs	r2, #72	; 0x48
   ba9d4:	3104      	adds	r1, #4
   ba9d6:	f009 f83b 	bl	c3a50 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba9da:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   ba9dc:	7813      	ldrb	r3, [r2, #0]
   ba9de:	f043 0308 	orr.w	r3, r3, #8
   ba9e2:	7013      	strb	r3, [r2, #0]
   ba9e4:	e7dc      	b.n	ba9a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   ba9e6:	2b15      	cmp	r3, #21
   ba9e8:	f47e aef7 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   ba9ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   ba9ee:	2b00      	cmp	r3, #0
   ba9f0:	f43e aef3 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba9f4:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba9f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba9f8:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba9fa:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   ba9fc:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba9fe:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   baa00:	3101      	adds	r1, #1
   baa02:	2908      	cmp	r1, #8
   baa04:	d1f7      	bne.n	ba9f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   baa06:	68a8      	ldr	r0, [r5, #8]
   baa08:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   baa0a:	f7fd f92c 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa0e:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   baa10:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   baa12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa14:	7a92      	ldrb	r2, [r2, #10]
   baa16:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baa18:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa1c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa1e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baa20:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa24:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa26:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baa28:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa2c:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa2e:	73da      	strb	r2, [r3, #15]
   baa30:	2610      	movs	r6, #16
   baa32:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa34:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baa36:	7b51      	ldrb	r1, [r2, #13]
   baa38:	b2da      	uxtb	r2, r3
   baa3a:	4291      	cmp	r1, r2
   baa3c:	d80b      	bhi.n	baa56 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   baa3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa40:	2201      	movs	r2, #1
   baa42:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa46:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   baa48:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   baa4c:	2800      	cmp	r0, #0
   baa4e:	d17f      	bne.n	bab50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   baa50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa52:	f7fe bf50 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa56:	886a      	ldrh	r2, [r5, #2]
   baa58:	3a10      	subs	r2, #16
   baa5a:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   baa5e:	ea4f 1843 	mov.w	r8, r3, lsl #5
   baa62:	ddec      	ble.n	baa3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   baa64:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa66:	46b4      	mov	ip, r6
   baa68:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa6c:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa6e:	4440      	add	r0, r8
   baa70:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baa72:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa76:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   baa78:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baa7a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa7c:	4437      	add	r7, r6
   baa7e:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baa80:	4440      	add	r0, r8
   baa82:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baa84:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baa86:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   baa88:	2a03      	cmp	r2, #3
   baa8a:	d80b      	bhi.n	baaa4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baa8c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa8e:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baa90:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   baa94:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baa98:	4440      	add	r0, r8
   baa9a:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baa9c:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baaa0:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   baaa4:	3201      	adds	r2, #1
   baaa6:	2a08      	cmp	r2, #8
   baaa8:	f10c 0c01 	add.w	ip, ip, #1
   baaac:	d1dd      	bne.n	baa6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   baaae:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baab0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baab2:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   baab4:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baab6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   baaba:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baabc:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   baabe:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baac0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baac2:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baac4:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baac8:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baaca:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   baacc:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baace:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baad0:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baad2:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baad6:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baad8:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baada:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baadc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baade:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baae0:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baae4:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baae6:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   baae8:	3118      	adds	r1, #24
   baaea:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   baaee:	68a8      	ldr	r0, [r5, #8]
   baaf0:	b289      	uxth	r1, r1
   baaf2:	f7fd f8b8 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baaf6:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baaf8:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   baafa:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   baafe:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab02:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab04:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab06:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bab0c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab10:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab12:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab14:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bab1a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab1e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab20:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab22:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bab28:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab2c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab2e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab30:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab38:	68aa      	ldr	r2, [r5, #8]
   bab3a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab3c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab3e:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bab44:	f106 0620 	add.w	r6, r6, #32
   bab48:	463b      	mov	r3, r7
   bab4a:	f47f af73 	bne.w	baa34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bab4e:	e776      	b.n	baa3e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab50:	780b      	ldrb	r3, [r1, #0]
   bab52:	071f      	lsls	r7, r3, #28
   bab54:	f53f af7c 	bmi.w	baa50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bab58:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bab5c:	3102      	adds	r1, #2
   bab5e:	f008 ff77 	bl	c3a50 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bab62:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bab64:	7813      	ldrb	r3, [r2, #0]
   bab66:	f043 0308 	orr.w	r3, r3, #8
   bab6a:	7013      	strb	r3, [r2, #0]
   bab6c:	e770      	b.n	baa50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bab6e:	680b      	ldr	r3, [r1, #0]
   bab70:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bab74:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bab78:	d12f      	bne.n	babda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bab7a:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bab7c:	2b00      	cmp	r3, #0
   bab7e:	f43e ae2c 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bab82:	688a      	ldr	r2, [r1, #8]
   bab84:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bab86:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bab88:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bab8a:	68a8      	ldr	r0, [r5, #8]
   bab8c:	2102      	movs	r1, #2
   bab8e:	f7fd f86a 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab92:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bab94:	68a8      	ldr	r0, [r5, #8]
   bab96:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bab98:	2104      	movs	r1, #4
   bab9a:	f7fd f857 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab9e:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   baba0:	68a8      	ldr	r0, [r5, #8]
   baba2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   baba4:	2108      	movs	r1, #8
   baba6:	f7fd f851 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babaa:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   babac:	68a8      	ldr	r0, [r5, #8]
   babae:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babb0:	210c      	movs	r1, #12
   babb2:	f7fd f858 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babb6:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   babb8:	68a8      	ldr	r0, [r5, #8]
   babba:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babbc:	210e      	movs	r1, #14
   babbe:	f7fd f852 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babc2:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   babc4:	68a8      	ldr	r0, [r5, #8]
   babc6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babc8:	2110      	movs	r1, #16
   babca:	f7fd f84c 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babce:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   babd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   babd2:	2201      	movs	r2, #1
   babd4:	751a      	strb	r2, [r3, #20]
   babd6:	f7fe be00 	b.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   babda:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   babde:	f47e adfc 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   babe2:	6f46      	ldr	r6, [r0, #116]	; 0x74
   babe4:	2e00      	cmp	r6, #0
   babe6:	f43e adf8 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   babea:	68a8      	ldr	r0, [r5, #8]
   babec:	2100      	movs	r1, #0
   babee:	f7fd f83a 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babf2:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   babf4:	68a8      	ldr	r0, [r5, #8]
   babf6:	6f66      	ldr	r6, [r4, #116]	; 0x74
   babf8:	2102      	movs	r1, #2
   babfa:	f7fd f834 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babfe:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bac00:	68a8      	ldr	r0, [r5, #8]
   bac02:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bac04:	2104      	movs	r1, #4
   bac06:	f7fd f82e 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac0a:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bac0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac12:	609a      	str	r2, [r3, #8]
   bac14:	f7fe bde1 	b.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bac18:	680b      	ldr	r3, [r1, #0]
   bac1a:	4ab0      	ldr	r2, [pc, #704]	; (baedc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bac1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bac20:	4293      	cmp	r3, r2
   bac22:	f47e adda 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bac26:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bac28:	2b00      	cmp	r3, #0
   bac2a:	f43e add6 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bac2e:	688a      	ldr	r2, [r1, #8]
   bac30:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bac32:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bac34:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac36:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bac38:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac3a:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bac3c:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bac3e:	68a8      	ldr	r0, [r5, #8]
   bac40:	2102      	movs	r1, #2
   bac42:	f7fd f810 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac46:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bac48:	68a8      	ldr	r0, [r5, #8]
   bac4a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac4c:	2104      	movs	r1, #4
   bac4e:	f7fd f80a 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac52:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bac54:	68a8      	ldr	r0, [r5, #8]
   bac56:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac58:	2106      	movs	r1, #6
   bac5a:	f7fd f804 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac5e:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bac60:	68a8      	ldr	r0, [r5, #8]
   bac62:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac64:	2108      	movs	r1, #8
   bac66:	f7fc fff1 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac6a:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bac6c:	68a8      	ldr	r0, [r5, #8]
   bac6e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac70:	210c      	movs	r1, #12
   bac72:	f7fc ffeb 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac76:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bac78:	68a8      	ldr	r0, [r5, #8]
   bac7a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac7c:	2110      	movs	r1, #16
   bac7e:	f7fc ffe5 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac82:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bac84:	68a8      	ldr	r0, [r5, #8]
   bac86:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac88:	2114      	movs	r1, #20
   bac8a:	f7fc ffdf 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac8e:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bac90:	68a8      	ldr	r0, [r5, #8]
   bac92:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac94:	2118      	movs	r1, #24
   bac96:	f7fc ffd9 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac9a:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac9c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bac9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baca2:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baca4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   baca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   baca8:	b17a      	cbz	r2, bacca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacaa:	7819      	ldrb	r1, [r3, #0]
   bacac:	070e      	lsls	r6, r1, #28
   bacae:	d40c      	bmi.n	bacca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bacb0:	1d19      	adds	r1, r3, #4
   bacb2:	3320      	adds	r3, #32
   bacb4:	f851 0b04 	ldr.w	r0, [r1], #4
   bacb8:	f842 0b04 	str.w	r0, [r2], #4
   bacbc:	4299      	cmp	r1, r3
   bacbe:	d1f9      	bne.n	bacb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bacc0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bacc2:	7813      	ldrb	r3, [r2, #0]
   bacc4:	f043 0308 	orr.w	r3, r3, #8
   bacc8:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bacca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   baccc:	f7fe be13 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bacd0:	4a83      	ldr	r2, [pc, #524]	; (baee0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bacd2:	4293      	cmp	r3, r2
   bacd4:	d158      	bne.n	bad88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bacd6:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bacda:	2f00      	cmp	r7, #0
   bacdc:	f43e ad7d 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bace0:	68a8      	ldr	r0, [r5, #8]
   bace2:	2100      	movs	r1, #0
   bace4:	f7fc ffb2 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bace8:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bacea:	68a8      	ldr	r0, [r5, #8]
   bacec:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bacf0:	2108      	movs	r1, #8
   bacf2:	f7fc ffab 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacf6:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bacf8:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bacfa:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bacfe:	210c      	movs	r1, #12
   bad00:	f7fc ffa4 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bad04:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad06:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad08:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad0c:	4631      	mov	r1, r6
   bad0e:	f7fc ff9d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad12:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad14:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad16:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad1a:	2114      	movs	r1, #20
   bad1c:	f7fc ff96 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad20:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad22:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad24:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad28:	2118      	movs	r1, #24
   bad2a:	f7fc ff8f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad2e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad30:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad32:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad36:	211c      	movs	r1, #28
   bad38:	f7fc ff88 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad3c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad3e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad40:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad44:	2120      	movs	r1, #32
   bad46:	f7fc ff81 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad4a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad4c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bad50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bad54:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bad56:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bad5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bad5c:	b182      	cbz	r2, bad80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad5e:	7819      	ldrb	r1, [r3, #0]
   bad60:	0709      	lsls	r1, r1, #28
   bad62:	d40d      	bmi.n	bad80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bad64:	1d19      	adds	r1, r3, #4
   bad66:	3328      	adds	r3, #40	; 0x28
   bad68:	f851 0b04 	ldr.w	r0, [r1], #4
   bad6c:	f842 0b04 	str.w	r0, [r2], #4
   bad70:	4299      	cmp	r1, r3
   bad72:	d1f9      	bne.n	bad68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bad74:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bad78:	7813      	ldrb	r3, [r2, #0]
   bad7a:	f043 0308 	orr.w	r3, r3, #8
   bad7e:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bad80:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bad84:	f7fe bdb7 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bad88:	784b      	ldrb	r3, [r1, #1]
   bad8a:	2b02      	cmp	r3, #2
   bad8c:	d158      	bne.n	bae40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bad8e:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bad92:	2e00      	cmp	r6, #0
   bad94:	f43e ad21 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bad98:	68a8      	ldr	r0, [r5, #8]
   bad9a:	2100      	movs	r1, #0
   bad9c:	f7fc ff56 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bada0:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bada2:	68a8      	ldr	r0, [r5, #8]
   bada4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bada8:	2104      	movs	r1, #4
   badaa:	f7fc ff5c 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badae:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   badb0:	68a8      	ldr	r0, [r5, #8]
   badb2:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   badb6:	2106      	movs	r1, #6
   badb8:	f7fc ff55 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badbc:	8170      	strh	r0, [r6, #10]
   badbe:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   badc0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   badc4:	886b      	ldrh	r3, [r5, #2]
   badc6:	7a7a      	ldrb	r2, [r7, #9]
   badc8:	b2b1      	uxth	r1, r6
   badca:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   badce:	d320      	bcc.n	bae12 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   badd0:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   badd4:	886a      	ldrh	r2, [r5, #2]
   badd6:	7a73      	ldrb	r3, [r6, #9]
   badd8:	08db      	lsrs	r3, r3, #3
   badda:	3302      	adds	r3, #2
   baddc:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bade0:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bade4:	d826      	bhi.n	bae34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bade6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   badea:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   badee:	b160      	cbz	r0, bae0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   badf0:	780b      	ldrb	r3, [r1, #0]
   badf2:	071a      	lsls	r2, r3, #28
   badf4:	d409      	bmi.n	bae0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   badf6:	2288      	movs	r2, #136	; 0x88
   badf8:	3104      	adds	r1, #4
   badfa:	f008 fe29 	bl	c3a50 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   badfe:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bae02:	7813      	ldrb	r3, [r2, #0]
   bae04:	f043 0308 	orr.w	r3, r3, #8
   bae08:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bae0a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bae0e:	f7fe bd72 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae12:	3b08      	subs	r3, #8
   bae14:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bae18:	ddda      	ble.n	badd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae1a:	0089      	lsls	r1, r1, #2
   bae1c:	3108      	adds	r1, #8
   bae1e:	68a8      	ldr	r0, [r5, #8]
   bae20:	b289      	uxth	r1, r1
   bae22:	f7fc ff13 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae26:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae2a:	3601      	adds	r6, #1
   bae2c:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae2e:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae30:	d1c6      	bne.n	badc0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bae32:	e7cd      	b.n	badd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bae34:	68a8      	ldr	r0, [r5, #8]
   bae36:	f7fc ff09 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae3a:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bae3e:	e7d2      	b.n	bade6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bae40:	2b03      	cmp	r3, #3
   bae42:	d14f      	bne.n	baee4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bae44:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bae48:	2900      	cmp	r1, #0
   bae4a:	f43e acc6 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bae4e:	886a      	ldrh	r2, [r5, #2]
   bae50:	1f13      	subs	r3, r2, #4
   bae52:	bf48      	it	mi
   bae54:	1cd3      	addmi	r3, r2, #3
   bae56:	10db      	asrs	r3, r3, #3
   bae58:	2700      	movs	r7, #0
   bae5a:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bae5e:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bae60:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bae62:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bae66:	3b04      	subs	r3, #4
   bae68:	42bb      	cmp	r3, r7
   bae6a:	dc08      	bgt.n	bae7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae6c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bae70:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bae74:	bb10      	cbnz	r0, baebc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bae76:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bae7a:	f7fe bd3c 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bae7e:	fa1f f887 	uxth.w	r8, r7
   bae82:	f108 0104 	add.w	r1, r8, #4
   bae86:	68a8      	ldr	r0, [r5, #8]
   bae88:	b289      	uxth	r1, r1
   bae8a:	f7fc fedf 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae8e:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bae92:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bae96:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bae9a:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bae9e:	68a8      	ldr	r0, [r5, #8]
   baea0:	b289      	uxth	r1, r1
   baea2:	f7fc fed3 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baea6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baeaa:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baeac:	3601      	adds	r6, #1
   baeae:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baeb0:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baeb4:	f107 0708 	add.w	r7, r7, #8
   baeb8:	d1d2      	bne.n	bae60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   baeba:	e7d7      	b.n	bae6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baebc:	780b      	ldrb	r3, [r1, #0]
   baebe:	071b      	lsls	r3, r3, #28
   baec0:	d4d9      	bmi.n	bae76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   baec2:	f44f 720e 	mov.w	r2, #568	; 0x238
   baec6:	3108      	adds	r1, #8
   baec8:	3004      	adds	r0, #4
   baeca:	f008 fdc1 	bl	c3a50 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   baece:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   baed2:	7813      	ldrb	r3, [r2, #0]
   baed4:	f043 0308 	orr.w	r3, r3, #8
   baed8:	7013      	strb	r3, [r2, #0]
   baeda:	e7cc      	b.n	bae76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   baedc:	001c0300 	.word	0x001c0300
   baee0:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   baee4:	2b10      	cmp	r3, #16
   baee6:	f47e ac78 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   baeea:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   baeee:	2e00      	cmp	r6, #0
   baef0:	f43e ac73 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   baef4:	68a8      	ldr	r0, [r5, #8]
   baef6:	2100      	movs	r1, #0
   baef8:	f7fc fea8 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baefc:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baefe:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf04:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf06:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baf08:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf0a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf0e:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf10:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   baf12:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf18:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf1a:	74da      	strb	r2, [r3, #19]
   baf1c:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf1e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   baf22:	7cc6      	ldrb	r6, [r0, #19]
   baf24:	b28a      	uxth	r2, r1
   baf26:	4296      	cmp	r6, r2
   baf28:	d80c      	bhi.n	baf44 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baf2a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baf32:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf34:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   baf3a:	bb62      	cbnz	r2, baf96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   baf3c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf40:	f7fe bcd9 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf44:	886a      	ldrh	r2, [r5, #2]
   baf46:	3a10      	subs	r2, #16
   baf48:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   baf4c:	dded      	ble.n	baf2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   baf4e:	68aa      	ldr	r2, [r5, #8]
   baf50:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   baf52:	1d0a      	adds	r2, r1, #4
   baf54:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf58:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   baf5a:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   baf5c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf5e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf62:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf64:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   baf68:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf6a:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   baf6c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   baf6e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf72:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   baf74:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   baf78:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   baf7a:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   baf7c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   baf7e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf82:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   baf84:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   baf88:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   baf8a:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf8c:	2907      	cmp	r1, #7
   baf8e:	f103 0304 	add.w	r3, r3, #4
   baf92:	d1c4      	bne.n	baf1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   baf94:	e7c9      	b.n	baf2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baf96:	7819      	ldrb	r1, [r3, #0]
   baf98:	070f      	lsls	r7, r1, #28
   baf9a:	d4cf      	bmi.n	baf3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   baf9c:	1d19      	adds	r1, r3, #4
   baf9e:	3330      	adds	r3, #48	; 0x30
   bafa0:	f851 0b04 	ldr.w	r0, [r1], #4
   bafa4:	f842 0b04 	str.w	r0, [r2], #4
   bafa8:	4299      	cmp	r1, r3
   bafaa:	d1f9      	bne.n	bafa0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bafac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bafb0:	7813      	ldrb	r3, [r2, #0]
   bafb2:	f043 0308 	orr.w	r3, r3, #8
   bafb6:	7013      	strb	r3, [r2, #0]
   bafb8:	e7c0      	b.n	baf3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bafba:	680b      	ldr	r3, [r1, #0]
   bafbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bafc0:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bafc4:	d16a      	bne.n	bb09c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bafc6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bafca:	2b00      	cmp	r3, #0
   bafcc:	f43e ac05 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bafd0:	7818      	ldrb	r0, [r3, #0]
   bafd2:	7859      	ldrb	r1, [r3, #1]
   bafd4:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bafd6:	bf36      	itet	cc
   bafd8:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bafdc:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bafde:	1a52      	subcc	r2, r2, r1
   bafe0:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bafe2:	2a0e      	cmp	r2, #14
   bafe4:	d84b      	bhi.n	bb07e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bafe6:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bafe8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bafec:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bafee:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   baff0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   baff4:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   baff6:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   baff8:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   baffa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   baffe:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb000:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb004:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb006:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb008:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb00a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb00e:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb010:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb014:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb016:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb018:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb01a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb01e:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb020:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb024:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb026:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb028:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb02a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb02e:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb030:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb034:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb036:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb038:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb03a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb03e:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb040:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb044:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb046:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb048:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb04a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb04e:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb050:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb054:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb056:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb058:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb05a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb05e:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb060:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb064:	7813      	ldrb	r3, [r2, #0]
   bb066:	3301      	adds	r3, #1
   bb068:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb06a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb06e:	781a      	ldrb	r2, [r3, #0]
   bb070:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb072:	f47e abb2 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb076:	2200      	movs	r2, #0
   bb078:	701a      	strb	r2, [r3, #0]
   bb07a:	f7fe bbae 	b.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb07e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb082:	b923      	cbnz	r3, bb08e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb084:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb088:	2b00      	cmp	r3, #0
   bb08a:	f43e aba6 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb08e:	4996      	ldr	r1, [pc, #600]	; (bb2e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb090:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb094:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb098:	f005 bc7b 	b.w	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb09c:	784b      	ldrb	r3, [r1, #1]
   bb09e:	2b80      	cmp	r3, #128	; 0x80
   bb0a0:	f47e ab9b 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb0a4:	884b      	ldrh	r3, [r1, #2]
   bb0a6:	2ba4      	cmp	r3, #164	; 0xa4
   bb0a8:	f63e ab97 	bhi.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb0ac:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb0b0:	2a00      	cmp	r2, #0
   bb0b2:	f43e ab92 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb0b6:	7810      	ldrb	r0, [r2, #0]
   bb0b8:	7851      	ldrb	r1, [r2, #1]
   bb0ba:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb0bc:	bf36      	itet	cc
   bb0be:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb0c0:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb0c2:	1a5b      	subcc	r3, r3, r1
   bb0c4:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb0c6:	2bf8      	cmp	r3, #248	; 0xf8
   bb0c8:	d84f      	bhi.n	bb16a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb0ca:	23ac      	movs	r3, #172	; 0xac
   bb0cc:	fb03 2200 	mla	r2, r3, r0, r2
   bb0d0:	21b5      	movs	r1, #181	; 0xb5
   bb0d2:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb0d4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb0d8:	7811      	ldrb	r1, [r2, #0]
   bb0da:	fb03 2201 	mla	r2, r3, r1, r2
   bb0de:	2162      	movs	r1, #98	; 0x62
   bb0e0:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb0e2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb0e6:	7811      	ldrb	r1, [r2, #0]
   bb0e8:	fb03 2201 	mla	r2, r3, r1, r2
   bb0ec:	2113      	movs	r1, #19
   bb0ee:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb0f0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb0f4:	7811      	ldrb	r1, [r2, #0]
   bb0f6:	fb03 2201 	mla	r2, r3, r1, r2
   bb0fa:	2180      	movs	r1, #128	; 0x80
   bb0fc:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb0fe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb102:	7811      	ldrb	r1, [r2, #0]
   bb104:	fb03 2201 	mla	r2, r3, r1, r2
   bb108:	8869      	ldrh	r1, [r5, #2]
   bb10a:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb10c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb110:	7811      	ldrb	r1, [r2, #0]
   bb112:	fb03 2201 	mla	r2, r3, r1, r2
   bb116:	8869      	ldrh	r1, [r5, #2]
   bb118:	0a09      	lsrs	r1, r1, #8
   bb11a:	71d1      	strb	r1, [r2, #7]
   bb11c:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb11e:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb120:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb124:	b28e      	uxth	r6, r1
   bb126:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb128:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb12a:	d907      	bls.n	bb13c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb12c:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb12e:	fb03 2200 	mla	r2, r3, r0, r2
   bb132:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb134:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb136:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb138:	3101      	adds	r1, #1
   bb13a:	e7f0      	b.n	bb11e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb13c:	fb03 2200 	mla	r2, r3, r0, r2
   bb140:	7b29      	ldrb	r1, [r5, #12]
   bb142:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb146:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb14a:	7b69      	ldrb	r1, [r5, #13]
   bb14c:	7810      	ldrb	r0, [r2, #0]
   bb14e:	fb03 2300 	mla	r3, r3, r0, r2
   bb152:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb156:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb15a:	7813      	ldrb	r3, [r2, #0]
   bb15c:	3301      	adds	r3, #1
   bb15e:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb160:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb164:	781a      	ldrb	r2, [r3, #0]
   bb166:	2afa      	cmp	r2, #250	; 0xfa
   bb168:	e783      	b.n	bb072 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb16a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb16e:	b923      	cbnz	r3, bb17a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb170:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb174:	2b00      	cmp	r3, #0
   bb176:	f43e ab30 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb17a:	495c      	ldr	r1, [pc, #368]	; (bb2ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb17c:	e788      	b.n	bb090 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb17e:	680b      	ldr	r3, [r1, #0]
   bb180:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb184:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb188:	f040 80b2 	bne.w	bb2f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb18c:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb190:	2f00      	cmp	r7, #0
   bb192:	f43e ab22 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb196:	68a8      	ldr	r0, [r5, #8]
   bb198:	2100      	movs	r1, #0
   bb19a:	f7fc fd57 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb19e:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb1a0:	68a8      	ldr	r0, [r5, #8]
   bb1a2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb1a6:	2104      	movs	r1, #4
   bb1a8:	f7fc fd5d 	bl	b7c66 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1ac:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb1ae:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb1b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1b4:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb1b6:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb1b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb1ba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1be:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb1c0:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb1c2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb1c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1c8:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb1ca:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb1cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb1ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1d2:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb1d4:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb1d6:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb1d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1dc:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb1de:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb1e0:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb1e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1e6:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb1e8:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1ea:	210c      	movs	r1, #12
   bb1ec:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb1ee:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1f2:	f7fc fd2b 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb1f6:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb1f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb1fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1fe:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb200:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb202:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb204:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb208:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb20a:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb20c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb20e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb212:	2114      	movs	r1, #20
   bb214:	f7fc fd1a 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb218:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb21a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb21c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb220:	2118      	movs	r1, #24
   bb222:	f7fc fd13 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb226:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb228:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb22a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb22e:	211c      	movs	r1, #28
   bb230:	f7fc fd0c 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb234:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb236:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb238:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb23c:	2120      	movs	r1, #32
   bb23e:	f7fc fd05 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb242:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb244:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb246:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb24a:	2124      	movs	r1, #36	; 0x24
   bb24c:	f7fc fcfe 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb250:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb252:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb254:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb258:	4631      	mov	r1, r6
   bb25a:	f7fc fcf7 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb25e:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb260:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb262:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb266:	212c      	movs	r1, #44	; 0x2c
   bb268:	f7fc fcf0 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb26c:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb26e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb270:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb274:	2130      	movs	r1, #48	; 0x30
   bb276:	f7fc fce9 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb27a:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb27c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb280:	68a8      	ldr	r0, [r5, #8]
   bb282:	2134      	movs	r1, #52	; 0x34
   bb284:	f7fc fce2 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb288:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb28a:	68a8      	ldr	r0, [r5, #8]
   bb28c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb290:	2138      	movs	r1, #56	; 0x38
   bb292:	f7fc fcdb 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb296:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb298:	68a8      	ldr	r0, [r5, #8]
   bb29a:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb29e:	213c      	movs	r1, #60	; 0x3c
   bb2a0:	f7fc fcd4 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2a4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb2a6:	68a8      	ldr	r0, [r5, #8]
   bb2a8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2ac:	2140      	movs	r1, #64	; 0x40
   bb2ae:	f7fc fccd 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2b2:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb2b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb2b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb2bc:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb2be:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb2c2:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb2c4:	b160      	cbz	r0, bb2e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb2c6:	780b      	ldrb	r3, [r1, #0]
   bb2c8:	071e      	lsls	r6, r3, #28
   bb2ca:	d409      	bmi.n	bb2e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb2cc:	2248      	movs	r2, #72	; 0x48
   bb2ce:	3104      	adds	r1, #4
   bb2d0:	f008 fbbe 	bl	c3a50 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb2d4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb2d8:	7813      	ldrb	r3, [r2, #0]
   bb2da:	f043 0308 	orr.w	r3, r3, #8
   bb2de:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb2e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb2e4:	f7fe bb07 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb2e8:	000c6599 	.word	0x000c6599
   bb2ec:	000c65d6 	.word	0x000c65d6
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb2f0:	4a5d      	ldr	r2, [pc, #372]	; (bb468 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb2f2:	4293      	cmp	r3, r2
   bb2f4:	d156      	bne.n	bb3a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb2f6:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb2fa:	2e00      	cmp	r6, #0
   bb2fc:	f43e aa6d 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb300:	68a8      	ldr	r0, [r5, #8]
   bb302:	2100      	movs	r1, #0
   bb304:	f7fc fca2 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb308:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb30a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb30c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb310:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb312:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb314:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb316:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb31a:	2108      	movs	r1, #8
   bb31c:	f7fc fc96 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb320:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb322:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb324:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb328:	210c      	movs	r1, #12
   bb32a:	f7fc fc8f 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb32e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb330:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb332:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb336:	2110      	movs	r1, #16
   bb338:	f7fc fc88 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb33c:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb33e:	68a8      	ldr	r0, [r5, #8]
   bb340:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb344:	2114      	movs	r1, #20
   bb346:	f7fc fc81 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb34a:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb34c:	68a8      	ldr	r0, [r5, #8]
   bb34e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb352:	2118      	movs	r1, #24
   bb354:	f7fc fc7a 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb358:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb35a:	68a8      	ldr	r0, [r5, #8]
   bb35c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb360:	211c      	movs	r1, #28
   bb362:	f7fc fc73 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb366:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb368:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb36c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb370:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb372:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb378:	b182      	cbz	r2, bb39c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb37a:	7819      	ldrb	r1, [r3, #0]
   bb37c:	0708      	lsls	r0, r1, #28
   bb37e:	d40d      	bmi.n	bb39c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb380:	1d19      	adds	r1, r3, #4
   bb382:	3324      	adds	r3, #36	; 0x24
   bb384:	f851 0b04 	ldr.w	r0, [r1], #4
   bb388:	f842 0b04 	str.w	r0, [r2], #4
   bb38c:	4299      	cmp	r1, r3
   bb38e:	d1f9      	bne.n	bb384 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb390:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb394:	7813      	ldrb	r3, [r2, #0]
   bb396:	f043 0308 	orr.w	r3, r3, #8
   bb39a:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb39c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb3a0:	f7fe baa9 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb3a4:	4a31      	ldr	r2, [pc, #196]	; (bb46c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb3a6:	4293      	cmp	r3, r2
   bb3a8:	f47e aa17 	bne.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb3ac:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb3b0:	2e00      	cmp	r6, #0
   bb3b2:	f43e aa12 	beq.w	b97da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb3b6:	68a8      	ldr	r0, [r5, #8]
   bb3b8:	2100      	movs	r1, #0
   bb3ba:	f7fc fc47 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3be:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb3c0:	68a8      	ldr	r0, [r5, #8]
   bb3c2:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb3c6:	2108      	movs	r1, #8
   bb3c8:	f7fc fc40 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3cc:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3ce:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb3d0:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3d4:	210c      	movs	r1, #12
   bb3d6:	f7fc fc39 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb3da:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3dc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb3de:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3e2:	2110      	movs	r1, #16
   bb3e4:	f7fc fc32 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb3e8:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3ea:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb3ec:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3f0:	2114      	movs	r1, #20
   bb3f2:	f7fc fc2b 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb3f6:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb3fa:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3fe:	2118      	movs	r1, #24
   bb400:	f7fc fc24 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb404:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb406:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb408:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb40c:	211c      	movs	r1, #28
   bb40e:	f7fc fc1d 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb412:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb414:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb416:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb41a:	2120      	movs	r1, #32
   bb41c:	f7fc fc16 	bl	b7c4c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb420:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb422:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb42a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb42c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb432:	b182      	cbz	r2, bb456 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb434:	7819      	ldrb	r1, [r3, #0]
   bb436:	0709      	lsls	r1, r1, #28
   bb438:	d40d      	bmi.n	bb456 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb43a:	1d19      	adds	r1, r3, #4
   bb43c:	3328      	adds	r3, #40	; 0x28
   bb43e:	f851 0b04 	ldr.w	r0, [r1], #4
   bb442:	f842 0b04 	str.w	r0, [r2], #4
   bb446:	4299      	cmp	r1, r3
   bb448:	d1f9      	bne.n	bb43e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb44a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb44e:	7813      	ldrb	r3, [r2, #0]
   bb450:	f043 0308 	orr.w	r3, r3, #8
   bb454:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb456:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb45a:	f7fe ba4c 	b.w	b98f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb45e:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb460:	2018      	movs	r0, #24
   bb462:	f7ff b9a2 	b.w	ba7aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb466:	bf00      	nop
   bb468:	00200100 	.word	0x00200100
   bb46c:	00240200 	.word	0x00240200

000bb470 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb474:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb476:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb47a:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb47e:	4604      	mov	r4, r0
   bb480:	460f      	mov	r7, r1
   bb482:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb484:	b993      	cbnz	r3, bb4ac <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb486:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb48a:	886b      	ldrh	r3, [r5, #2]
   bb48c:	88aa      	ldrh	r2, [r5, #4]
   bb48e:	3303      	adds	r3, #3
   bb490:	4293      	cmp	r3, r2
   bb492:	db03      	blt.n	bb49c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb494:	4639      	mov	r1, r7
   bb496:	4620      	mov	r0, r4
   bb498:	f7fd fdf0 	bl	b907c <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb49c:	88ae      	ldrh	r6, [r5, #4]
   bb49e:	bb7e      	cbnz	r6, bb500 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb4a0:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb4a2:	88ab      	ldrh	r3, [r5, #4]
   bb4a4:	3301      	adds	r3, #1
   bb4a6:	80ab      	strh	r3, [r5, #4]
}
   bb4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb4ac:	2b03      	cmp	r3, #3
   bb4ae:	d124      	bne.n	bb4fa <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb4b0:	7852      	ldrb	r2, [r2, #1]
   bb4b2:	7829      	ldrb	r1, [r5, #0]
   bb4b4:	f7fc fdda 	bl	b806c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb4b8:	4680      	mov	r8, r0
   bb4ba:	2800      	cmp	r0, #0
   bb4bc:	d1e5      	bne.n	bb48a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb4be:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb4c2:	b91b      	cbnz	r3, bb4cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb4c4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb4c8:	2b00      	cmp	r3, #0
   bb4ca:	d0de      	beq.n	bb48a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb4cc:	49b7      	ldr	r1, [pc, #732]	; (bb7ac <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb4ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4d2:	f005 fa44 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb4d6:	7829      	ldrb	r1, [r5, #0]
   bb4d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4dc:	220a      	movs	r2, #10
   bb4de:	f7fc fbd5 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb4e2:	49b3      	ldr	r1, [pc, #716]	; (bb7b0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb4e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4e8:	f005 fa39 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb4ec:	7869      	ldrb	r1, [r5, #1]
   bb4ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4f2:	220a      	movs	r2, #10
   bb4f4:	f7fc fbd1 	bl	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb4f8:	e7c7      	b.n	bb48a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bb4fa:	f04f 0802 	mov.w	r8, #2
   bb4fe:	e7c4      	b.n	bb48a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bb500:	2e01      	cmp	r6, #1
   bb502:	d101      	bne.n	bb508 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bb504:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb506:	e7cc      	b.n	bb4a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bb508:	2e02      	cmp	r6, #2
   bb50a:	d101      	bne.n	bb510 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bb50c:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb50e:	e7c8      	b.n	bb4a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bb510:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bb512:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bb514:	d103      	bne.n	bb51e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bb516:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bb51a:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb51c:	e7c1      	b.n	bb4a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bb51e:	1d0b      	adds	r3, r1, #4
   bb520:	429e      	cmp	r6, r3
   bb522:	d136      	bne.n	bb592 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bb524:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb526:	88aa      	ldrh	r2, [r5, #4]
   bb528:	f108 0306 	add.w	r3, r8, #6
   bb52c:	429a      	cmp	r2, r3
   bb52e:	d1b8      	bne.n	bb4a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bb530:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb534:	2b00      	cmp	r3, #0
   bb536:	d1b4      	bne.n	bb4a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bb538:	2200      	movs	r2, #0
   bb53a:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb53c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bb540:	b91a      	cbnz	r2, bb54a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bb542:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bb546:	2a00      	cmp	r2, #0
   bb548:	d0ab      	beq.n	bb4a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb54a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bb54e:	2b00      	cmp	r3, #0
   bb550:	f000 8170 	beq.w	bb834 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb554:	4997      	ldr	r1, [pc, #604]	; (bb7b4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb556:	f005 fa02 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bb55a:	4997      	ldr	r1, [pc, #604]	; (bb7b8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bb55c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb560:	f005 f9fd 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb564:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bb568:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb56c:	220a      	movs	r2, #10
   bb56e:	f005 fa12 	bl	c0996 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bb572:	4992      	ldr	r1, [pc, #584]	; (bb7bc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bb574:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb578:	f005 f9f1 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bb57c:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bb580:	220a      	movs	r2, #10
   bb582:	4641      	mov	r1, r8
   bb584:	4620      	mov	r0, r4
   bb586:	f005 fa06 	bl	c0996 <_ZN5Print11printNumberEmh>
        n += println();
   bb58a:	4620      	mov	r0, r4
   bb58c:	f005 f9eb 	bl	c0966 <_ZN5Print7printlnEv>
        return n;
   bb590:	e787      	b.n	bb4a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bb592:	3105      	adds	r1, #5
   bb594:	428e      	cmp	r6, r1
   bb596:	f040 812f 	bne.w	bb7f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb59a:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bb59c:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb59e:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bb5a0:	89a9      	ldrh	r1, [r5, #12]
   bb5a2:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bb5a6:	4291      	cmp	r1, r2
   bb5a8:	f040 80ae 	bne.w	bb708 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bb5ac:	2301      	movs	r3, #1
   bb5ae:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bb5b0:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb5b4:	7829      	ldrb	r1, [r5, #0]
   bb5b6:	4549      	cmp	r1, r9
   bb5b8:	d155      	bne.n	bb666 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bb5ba:	786b      	ldrb	r3, [r5, #1]
   bb5bc:	4553      	cmp	r3, sl
   bb5be:	d152      	bne.n	bb666 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bb5c0:	2301      	movs	r3, #1
   bb5c2:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bb5c4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb5c8:	b3b3      	cbz	r3, bb638 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bb5ca:	497d      	ldr	r1, [pc, #500]	; (bb7c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bb5cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5d0:	f005 f9c5 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb5d4:	220a      	movs	r2, #10
   bb5d6:	8869      	ldrh	r1, [r5, #2]
   bb5d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5dc:	f005 f9db 	bl	c0996 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bb5e0:	4978      	ldr	r1, [pc, #480]	; (bb7c4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bb5e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5e6:	f005 f9ba 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bb5ea:	2200      	movs	r2, #0
   bb5ec:	4629      	mov	r1, r5
   bb5ee:	4620      	mov	r0, r4
   bb5f0:	f7fd ff50 	bl	b9494 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb5f4:	7bab      	ldrb	r3, [r5, #14]
   bb5f6:	2b01      	cmp	r3, #1
   bb5f8:	d104      	bne.n	bb604 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bb5fa:	4973      	ldr	r1, [pc, #460]	; (bb7c8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bb5fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb600:	f005 f9c7 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb604:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bb608:	2b01      	cmp	r3, #1
   bb60a:	d104      	bne.n	bb616 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bb60c:	496f      	ldr	r1, [pc, #444]	; (bb7cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bb60e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb612:	f005 f9be 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb616:	7beb      	ldrb	r3, [r5, #15]
   bb618:	2b01      	cmp	r3, #1
   bb61a:	d104      	bne.n	bb626 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bb61c:	496c      	ldr	r1, [pc, #432]	; (bb7d0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bb61e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb622:	f005 f9b6 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb626:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bb62a:	2b01      	cmp	r3, #1
   bb62c:	d104      	bne.n	bb638 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bb62e:	4969      	ldr	r1, [pc, #420]	; (bb7d4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bb630:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb634:	f005 f9ad 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bb638:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb63c:	b91b      	cbnz	r3, bb646 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bb63e:	4629      	mov	r1, r5
   bb640:	4620      	mov	r0, r4
   bb642:	f7fe f8b9 	bl	b97b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb646:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb64a:	2b03      	cmp	r3, #3
   bb64c:	f47f af6b 	bne.w	bb526 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bb650:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb654:	b108      	cbz	r0, bb65a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bb656:	f7f8 fd22 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bb65a:	2300      	movs	r3, #0
   bb65c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bb660:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb664:	e75f      	b.n	bb526 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb666:	882b      	ldrh	r3, [r5, #0]
   bb668:	f240 1205 	movw	r2, #261	; 0x105
   bb66c:	4293      	cmp	r3, r2
   bb66e:	d123      	bne.n	bb6b8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bb670:	68ab      	ldr	r3, [r5, #8]
   bb672:	781a      	ldrb	r2, [r3, #0]
   bb674:	454a      	cmp	r2, r9
   bb676:	d102      	bne.n	bb67e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb678:	785b      	ldrb	r3, [r3, #1]
   bb67a:	4553      	cmp	r3, sl
   bb67c:	d0a0      	beq.n	bb5c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb67e:	786a      	ldrb	r2, [r5, #1]
   bb680:	4620      	mov	r0, r4
   bb682:	f7fc fbf1 	bl	b7e68 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb686:	2800      	cmp	r0, #0
   bb688:	d09c      	beq.n	bb5c4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bb68a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb68e:	2b00      	cmp	r3, #0
   bb690:	d0d2      	beq.n	bb638 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bb692:	4951      	ldr	r1, [pc, #324]	; (bb7d8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bb694:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb698:	f005 f961 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bb69c:	2210      	movs	r2, #16
   bb69e:	7829      	ldrb	r1, [r5, #0]
   bb6a0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6a4:	f7fc faf2 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb6a8:	4941      	ldr	r1, [pc, #260]	; (bb7b0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb6aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6ae:	f005 f956 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bb6b2:	7869      	ldrb	r1, [r5, #1]
   bb6b4:	2210      	movs	r2, #16
   bb6b6:	e022      	b.n	bb6fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb6b8:	2b05      	cmp	r3, #5
   bb6ba:	d1e0      	bne.n	bb67e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6bc:	68ab      	ldr	r3, [r5, #8]
   bb6be:	781a      	ldrb	r2, [r3, #0]
   bb6c0:	454a      	cmp	r2, r9
   bb6c2:	d1dc      	bne.n	bb67e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6c4:	785b      	ldrb	r3, [r3, #1]
   bb6c6:	4553      	cmp	r3, sl
   bb6c8:	d1d9      	bne.n	bb67e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bb6ca:	2303      	movs	r3, #3
   bb6cc:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bb6ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb6d2:	2b00      	cmp	r3, #0
   bb6d4:	d0b0      	beq.n	bb638 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bb6d6:	4941      	ldr	r1, [pc, #260]	; (bb7dc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bb6d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6dc:	f005 f93f 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bb6e0:	68ab      	ldr	r3, [r5, #8]
   bb6e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6e6:	7819      	ldrb	r1, [r3, #0]
   bb6e8:	2210      	movs	r2, #16
   bb6ea:	f7fc facf 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bb6ee:	493c      	ldr	r1, [pc, #240]	; (bb7e0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bb6f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6f4:	f005 f933 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bb6f8:	68ab      	ldr	r3, [r5, #8]
   bb6fa:	7859      	ldrb	r1, [r3, #1]
   bb6fc:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bb6fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb702:	f7fc faca 	bl	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb706:	e75d      	b.n	bb5c4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bb708:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb70a:	782b      	ldrb	r3, [r5, #0]
   bb70c:	454b      	cmp	r3, r9
   bb70e:	d143      	bne.n	bb798 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bb710:	786a      	ldrb	r2, [r5, #1]
   bb712:	4552      	cmp	r2, sl
   bb714:	d140      	bne.n	bb798 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bb716:	2300      	movs	r3, #0
   bb718:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb71a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb71e:	b91b      	cbnz	r3, bb728 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bb720:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb724:	2b00      	cmp	r3, #0
   bb726:	d08e      	beq.n	bb646 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bb728:	492e      	ldr	r1, [pc, #184]	; (bb7e4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bb72a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb72e:	f005 f916 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bb732:	492d      	ldr	r1, [pc, #180]	; (bb7e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bb734:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb738:	f005 f911 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bb73c:	7b29      	ldrb	r1, [r5, #12]
   bb73e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb742:	220a      	movs	r2, #10
   bb744:	f7fc faa2 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bb748:	4928      	ldr	r1, [pc, #160]	; (bb7ec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bb74a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb74e:	f005 f906 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bb752:	7b69      	ldrb	r1, [r5, #13]
   bb754:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb758:	220a      	movs	r2, #10
   bb75a:	f7fc fa97 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bb75e:	4924      	ldr	r1, [pc, #144]	; (bb7f0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bb760:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb764:	f005 f8fb 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bb768:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bb76c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb770:	220a      	movs	r2, #10
   bb772:	f7fc fa8b 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bb776:	491f      	ldr	r1, [pc, #124]	; (bb7f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bb778:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb77c:	f005 f8ef 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bb780:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb784:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bb788:	220a      	movs	r2, #10
   bb78a:	f7fc fa7f 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bb78e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb792:	f005 f8e8 	bl	c0966 <_ZN5Print7printlnEv>
   bb796:	e756      	b.n	bb646 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb798:	2b05      	cmp	r3, #5
   bb79a:	d1be      	bne.n	bb71a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb79c:	68ab      	ldr	r3, [r5, #8]
   bb79e:	781a      	ldrb	r2, [r3, #0]
   bb7a0:	454a      	cmp	r2, r9
   bb7a2:	d1ba      	bne.n	bb71a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7a4:	785b      	ldrb	r3, [r3, #1]
   bb7a6:	4553      	cmp	r3, sl
   bb7a8:	d1b7      	bne.n	bb71a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7aa:	e7b4      	b.n	bb716 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bb7ac:	000c6618 	.word	0x000c6618
   bb7b0:	000c6689 	.word	0x000c6689
   bb7b4:	000c6791 	.word	0x000c6791
   bb7b8:	000c67e8 	.word	0x000c67e8
   bb7bc:	000c67fe 	.word	0x000c67fe
   bb7c0:	000c66c5 	.word	0x000c66c5
   bb7c4:	000c66d6 	.word	0x000c66d6
   bb7c8:	000c66e2 	.word	0x000c66e2
   bb7cc:	000c66f6 	.word	0x000c66f6
   bb7d0:	000c670a 	.word	0x000c670a
   bb7d4:	000c6724 	.word	0x000c6724
   bb7d8:	000c6691 	.word	0x000c6691
   bb7dc:	000c6650 	.word	0x000c6650
   bb7e0:	000c667f 	.word	0x000c667f
   bb7e4:	000c673e 	.word	0x000c673e
   bb7e8:	000c674f 	.word	0x000c674f
   bb7ec:	000c675c 	.word	0x000c675c
   bb7f0:	000c6769 	.word	0x000c6769
   bb7f4:	000c677d 	.word	0x000c677d
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb7f8:	786a      	ldrb	r2, [r5, #1]
   bb7fa:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bb7fc:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb800:	4620      	mov	r0, r4
   bb802:	f7fc fb31 	bl	b7e68 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bb806:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bb80a:	2800      	cmp	r0, #0
   bb80c:	bf18      	it	ne
   bb80e:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bb812:	2b00      	cmp	r3, #0
   bb814:	f47f ae87 	bne.w	bb526 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bb818:	1ef3      	subs	r3, r6, #3
   bb81a:	454b      	cmp	r3, r9
   bb81c:	f77f ae83 	ble.w	bb526 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bb820:	3e04      	subs	r6, #4
   bb822:	eba6 0609 	sub.w	r6, r6, r9
   bb826:	4546      	cmp	r6, r8
   bb828:	da02      	bge.n	bb830 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bb82a:	68ab      	ldr	r3, [r5, #8]
   bb82c:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb82e:	e67a      	b.n	bb526 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bb830:	2301      	movs	r3, #1
   bb832:	e681      	b.n	bb538 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb834:	4900      	ldr	r1, [pc, #0]	; (bb838 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bb836:	e68e      	b.n	bb556 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bb838:	000c67b6 	.word	0x000c67b6

000bb83c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bb83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb83e:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bb842:	4604      	mov	r4, r0
   bb844:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb846:	b113      	cbz	r3, bb84e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bb848:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bb84c:	b953      	cbnz	r3, bb864 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bb84e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bb852:	b128      	cbz	r0, bb860 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bb854:	490e      	ldr	r1, [pc, #56]	; (bb890 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb856:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb85a:	f005 f89a 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bb85e:	2000      	movs	r0, #0
}
   bb860:	b003      	add	sp, #12
   bb862:	bd30      	pop	{r4, r5, pc}
   bb864:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bb866:	f7fd ff12 	bl	b968e <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bb86a:	4285      	cmp	r5, r0
   bb86c:	9901      	ldr	r1, [sp, #4]
   bb86e:	d908      	bls.n	bb882 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb870:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb874:	b91b      	cbnz	r3, bb87e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bb876:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bb87a:	2800      	cmp	r0, #0
   bb87c:	d0f0      	beq.n	bb860 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb87e:	4905      	ldr	r1, [pc, #20]	; (bb894 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bb880:	e7e9      	b.n	bb856 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bb882:	4620      	mov	r0, r4
   bb884:	462a      	mov	r2, r5
   bb886:	f7fd ff0b 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bb88a:	2001      	movs	r0, #1
   bb88c:	e7e8      	b.n	bb860 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bb88e:	bf00      	nop
   bb890:	000c6816 	.word	0x000c6816
   bb894:	000c6841 	.word	0x000c6841

000bb898 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bb898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb89c:	4604      	mov	r4, r0
   bb89e:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bb8a0:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bb8a4:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bb8a8:	f88d 100f 	strb.w	r1, [sp, #15]
   bb8ac:	4615      	mov	r5, r2
   bb8ae:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bb8b0:	b118      	cbz	r0, bb8ba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bb8b2:	6803      	ldr	r3, [r0, #0]
   bb8b4:	b2c9      	uxtb	r1, r1
   bb8b6:	689b      	ldr	r3, [r3, #8]
   bb8b8:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bb8ba:	7823      	ldrb	r3, [r4, #0]
   bb8bc:	2b01      	cmp	r3, #1
   bb8be:	d80e      	bhi.n	bb8de <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb8c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb8c4:	2bb5      	cmp	r3, #181	; 0xb5
   bb8c6:	d12e      	bne.n	bb926 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bb8c8:	2300      	movs	r3, #0
   bb8ca:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb8ce:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bb8d0:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb8d4:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb8d8:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb8da:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bb8de:	7826      	ldrb	r6, [r4, #0]
   bb8e0:	2e02      	cmp	r6, #2
   bb8e2:	f040 81d5 	bne.w	bbc90 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bb8e6:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb8ea:	bb5b      	cbnz	r3, bb944 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bb8ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb8f0:	2bb5      	cmp	r3, #181	; 0xb5
   bb8f2:	d001      	beq.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bb8f4:	2300      	movs	r3, #0
   bb8f6:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb8f8:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb8fc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb900:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb904:	2b01      	cmp	r3, #1
   bb906:	f040 81a3 	bne.w	bbc50 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb90a:	463b      	mov	r3, r7
   bb90c:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb910:	4620      	mov	r0, r4
   bb912:	f7ff fdad 	bl	bb470 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bb916:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb91a:	3301      	adds	r3, #1
   bb91c:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bb920:	b005      	add	sp, #20
   bb922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bb926:	2b24      	cmp	r3, #36	; 0x24
   bb928:	d105      	bne.n	bb936 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bb92a:	2300      	movs	r3, #0
   bb92c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bb930:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb932:	7023      	strb	r3, [r4, #0]
   bb934:	e7d3      	b.n	bb8de <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bb936:	2bd3      	cmp	r3, #211	; 0xd3
   bb938:	d1d1      	bne.n	bb8de <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bb93a:	2300      	movs	r3, #0
   bb93c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb940:	2303      	movs	r3, #3
   bb942:	e7f6      	b.n	bb932 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bb944:	2b01      	cmp	r3, #1
   bb946:	d103      	bne.n	bb950 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bb948:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb94c:	2b62      	cmp	r3, #98	; 0x62
   bb94e:	e7d0      	b.n	bb8f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bb950:	2b02      	cmp	r3, #2
   bb952:	d10e      	bne.n	bb972 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bb954:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb958:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bb95c:	2200      	movs	r2, #0
   bb95e:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bb962:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bb966:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bb96a:	88eb      	ldrh	r3, [r5, #6]
   bb96c:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bb970:	e7c2      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bb972:	2b03      	cmp	r3, #3
   bb974:	f040 80b7 	bne.w	bbae6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb978:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bb97c:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bb980:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb984:	2905      	cmp	r1, #5
   bb986:	d0b7      	beq.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bb988:	42b9      	cmp	r1, r7
   bb98a:	d10c      	bne.n	bb9a6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bb98c:	4546      	cmp	r6, r8
   bb98e:	d10a      	bne.n	bb9a6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb990:	2300      	movs	r3, #0
   bb992:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb996:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bb998:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bb99c:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bb99e:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bb9a2:	80ab      	strh	r3, [r5, #4]
   bb9a4:	e7a8      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bb9a6:	4632      	mov	r2, r6
   bb9a8:	4620      	mov	r0, r4
   bb9aa:	f7fc fa5d 	bl	b7e68 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb9ae:	2800      	cmp	r0, #0
   bb9b0:	f000 8095 	beq.w	bbade <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bb9b4:	4632      	mov	r2, r6
   bb9b6:	4620      	mov	r0, r4
   bb9b8:	f7fc fb58 	bl	b806c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bb9bc:	4606      	mov	r6, r0
   bb9be:	b9e8      	cbnz	r0, bb9fc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb9c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb9c4:	b913      	cbnz	r3, bb9cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bb9c6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb9ca:	b1bb      	cbz	r3, bb9fc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb9cc:	49a7      	ldr	r1, [pc, #668]	; (bbc6c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bb9ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9d2:	f004 ffc4 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bb9d6:	220a      	movs	r2, #10
   bb9d8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb9dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9e0:	f7fc f954 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb9e4:	49a2      	ldr	r1, [pc, #648]	; (bbc70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb9e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9ea:	f004 ffb8 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bb9ee:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb9f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9f6:	220a      	movs	r2, #10
   bb9f8:	f7fc f94f 	bl	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bb9fc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bba00:	b1a3      	cbz	r3, bba2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba02:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba06:	b913      	cbnz	r3, bba0e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bba08:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba0c:	b123      	cbz	r3, bba18 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bba0e:	4999      	ldr	r1, [pc, #612]	; (bbc74 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bba10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba14:	f004 ffbd 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bba18:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bba1c:	b108      	cbz	r0, bba22 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bba1e:	f7f8 fb3e 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bba22:	2300      	movs	r3, #0
   bba24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bba28:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bba2c:	4630      	mov	r0, r6
   bba2e:	f7f8 fb34 	bl	b409a <_Znaj>
   bba32:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba36:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bba3a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bba3e:	bb38      	cbnz	r0, bba90 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba40:	b913      	cbnz	r3, bba48 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bba42:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba46:	b1e3      	cbz	r3, bba82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bba48:	498b      	ldr	r1, [pc, #556]	; (bbc78 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bba4a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba4e:	f004 ff86 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bba52:	2210      	movs	r2, #16
   bba54:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bba58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba5c:	f7fc f916 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bba60:	4983      	ldr	r1, [pc, #524]	; (bbc70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bba62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba66:	f004 ff7a 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bba6a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bba6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba72:	2210      	movs	r2, #16
   bba74:	f7fc f911 	bl	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bba78:	4980      	ldr	r1, [pc, #512]	; (bbc7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bba7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba7e:	f004 ff88 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bba82:	2300      	movs	r3, #0
   bba84:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bba88:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bba8c:	702b      	strb	r3, [r5, #0]
   bba8e:	e783      	b.n	bb998 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bba90:	2203      	movs	r2, #3
   bba92:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bba96:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bba9a:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bba9e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bbaa2:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bbaa6:	2b00      	cmp	r3, #0
   bbaa8:	f43f af26 	beq.w	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bbaac:	4974      	ldr	r1, [pc, #464]	; (bbc80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bbaae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbab2:	f004 ff54 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbab6:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbaba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbabe:	2210      	movs	r2, #16
   bbac0:	f7fc f8e4 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbac4:	496a      	ldr	r1, [pc, #424]	; (bbc70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbac6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaca:	f004 ff48 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbace:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbad2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbad6:	2210      	movs	r2, #16
   bbad8:	f7fc f8df 	bl	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbadc:	e70c      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bbade:	2301      	movs	r3, #1
   bbae0:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bbae4:	e708      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bbae6:	2b04      	cmp	r3, #4
   bbae8:	d104      	bne.n	bbaf4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bbaea:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bbaee:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bbaf2:	e701      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bbaf4:	2b05      	cmp	r3, #5
   bbaf6:	d106      	bne.n	bbb06 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bbaf8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbafc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bbb04:	e7f3      	b.n	bbaee <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bbb06:	2b06      	cmp	r3, #6
   bbb08:	d12b      	bne.n	bbb62 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbb0a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb0e:	bb13      	cbnz	r3, bbb56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbb10:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb14:	b913      	cbnz	r3, bbb1c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bbb16:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbb1a:	b1bb      	cbz	r3, bbb4c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bbb1c:	4959      	ldr	r1, [pc, #356]	; (bbc84 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bbb1e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb22:	f004 ff1c 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bbb26:	2210      	movs	r2, #16
   bbb28:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbb2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb30:	f7fc f8ac 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbb34:	494e      	ldr	r1, [pc, #312]	; (bbc70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbb36:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb3a:	f004 ff10 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bbb3e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbb42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb46:	2210      	movs	r2, #16
   bbb48:	f7fc f8a7 	bl	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bbb4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbb50:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbb54:	e6d0      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bbb56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbb5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbb5e:	701a      	strb	r2, [r3, #0]
   bbb60:	e6ca      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbb62:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbb64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbb68:	f47f aec6 	bne.w	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbb6c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb70:	bb9b      	cbnz	r3, bbbda <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bbb72:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bbb76:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbb7a:	2b02      	cmp	r3, #2
   bbb7c:	f47f aebc 	bne.w	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bbb80:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbb84:	2905      	cmp	r1, #5
   bbb86:	f47f aeb7 	bne.w	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bbb8a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbb8e:	781a      	ldrb	r2, [r3, #0]
   bbb90:	42ba      	cmp	r2, r7
   bbb92:	f47f aeb1 	bne.w	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bbb96:	785a      	ldrb	r2, [r3, #1]
   bbb98:	4542      	cmp	r2, r8
   bbb9a:	f47f aead 	bne.w	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bbb9e:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bbba2:	2a02      	cmp	r2, #2
   bbba4:	d121      	bne.n	bbbea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bbba6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bbbaa:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bbbae:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bbbb2:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bbbb6:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bbbba:	2001      	movs	r0, #1
   bbbbc:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bbbc0:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bbbc4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bbbc8:	781b      	ldrb	r3, [r3, #0]
   bbbca:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bbbcc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bbbd0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bbbd4:	7852      	ldrb	r2, [r2, #1]
   bbbd6:	705a      	strb	r2, [r3, #1]
   bbbd8:	e68e      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bbbda:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bbbdc:	bf16      	itet	ne
   bbbde:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bbbe2:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bbbe6:	705a      	strbne	r2, [r3, #1]
   bbbe8:	e7c5      	b.n	bbb76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbbea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbee:	b923      	cbnz	r3, bbbfa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bbbf0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbbf4:	2b00      	cmp	r3, #0
   bbbf6:	f43f ae7f 	beq.w	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bbbfa:	4923      	ldr	r1, [pc, #140]	; (bbc88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bbbfc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc00:	f004 fead 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bbc04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc0c:	7819      	ldrb	r1, [r3, #0]
   bbc0e:	2210      	movs	r2, #16
   bbc10:	f7fc f83c 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bbc14:	4916      	ldr	r1, [pc, #88]	; (bbc70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbc16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc1a:	f004 fea0 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bbc1e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc22:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc26:	7859      	ldrb	r1, [r3, #1]
   bbc28:	2210      	movs	r2, #16
   bbc2a:	f7fc f82f 	bl	b7c8c <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bbc2e:	4917      	ldr	r1, [pc, #92]	; (bbc8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bbc30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc34:	f004 fe93 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bbc38:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bbc3c:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bbc40:	220a      	movs	r2, #10
   bbc42:	4630      	mov	r0, r6
   bbc44:	f004 fea7 	bl	c0996 <_ZN5Print11printNumberEmh>
        n += println();
   bbc48:	4630      	mov	r0, r6
   bbc4a:	f004 fe8c 	bl	c0966 <_ZN5Print7printlnEv>
        return n;
   bbc4e:	e653      	b.n	bb8f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbc50:	b913      	cbnz	r3, bbc58 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bbc52:	463b      	mov	r3, r7
   bbc54:	462a      	mov	r2, r5
   bbc56:	e65b      	b.n	bb910 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bbc58:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bbc5a:	bf08      	it	eq
   bbc5c:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bbc60:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbc62:	bf18      	it	ne
   bbc64:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bbc68:	e652      	b.n	bb910 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bbc6a:	bf00      	nop
   bbc6c:	000c6882 	.word	0x000c6882
   bbc70:	000c6689 	.word	0x000c6689
   bbc74:	000c68b7 	.word	0x000c68b7
   bbc78:	000c68f9 	.word	0x000c68f9
   bbc7c:	000c693e 	.word	0x000c693e
   bbc80:	000c6970 	.word	0x000c6970
   bbc84:	000c69a1 	.word	0x000c69a1
   bbc88:	000c69d1 	.word	0x000c69d1
   bbc8c:	000c6a01 	.word	0x000c6a01
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bbc90:	2e01      	cmp	r6, #1
   bbc92:	f040 8188 	bne.w	bbfa6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bbc96:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bbc9a:	2b00      	cmp	r3, #0
   bbc9c:	d146      	bne.n	bbd2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bbc9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbca2:	2a24      	cmp	r2, #36	; 0x24
   bbca4:	f000 8086 	beq.w	bbdb4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bbca8:	2300      	movs	r3, #0
   bbcaa:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bbcac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbcb0:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bbcb2:	bf04      	itt	eq
   bbcb4:	23fb      	moveq	r3, #251	; 0xfb
   bbcb6:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bbcba:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbcbe:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bbcc2:	3501      	adds	r5, #1
   bbcc4:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbcc6:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbcc8:	bf08      	it	eq
   bbcca:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bbccc:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbcd0:	bf08      	it	eq
   bbcd2:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bbcd4:	2d00      	cmp	r5, #0
   bbcd6:	f47f ae23 	bne.w	bb920 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bbcda:	4620      	mov	r0, r4
   bbcdc:	f7fc fc20 	bl	b8520 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbce0:	2800      	cmp	r0, #0
   bbce2:	f000 8120 	beq.w	bbf26 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbce6:	4620      	mov	r0, r4
   bbce8:	f7fc fd7c 	bl	b87e4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbcec:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbcee:	4620      	mov	r0, r4
   bbcf0:	f7fc fdfa 	bl	b88e8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbcf4:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbcf6:	4620      	mov	r0, r4
   bbcf8:	f7fd f88a 	bl	b8e10 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bbcfc:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbcfe:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd00:	1e41      	subs	r1, r0, #1
   bbd02:	428e      	cmp	r6, r1
   bbd04:	f280 80b4 	bge.w	bbe70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd08:	783a      	ldrb	r2, [r7, #0]
   bbd0a:	3a04      	subs	r2, #4
   bbd0c:	4296      	cmp	r6, r2
   bbd0e:	f280 80af 	bge.w	bbe70 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd12:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd14:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd18:	f000 80ad 	beq.w	bbe76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bbd1c:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bbd1e:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bbd22:	bf18      	it	ne
   bbd24:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bbd26:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd28:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd2a:	e7ea      	b.n	bbd02 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bbd2c:	2b01      	cmp	r3, #1
   bbd2e:	d103      	bne.n	bbd38 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bbd30:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbd34:	2a47      	cmp	r2, #71	; 0x47
   bbd36:	e7b5      	b.n	bbca4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bbd38:	b2da      	uxtb	r2, r3
   bbd3a:	2a05      	cmp	r2, #5
   bbd3c:	d93a      	bls.n	bbdb4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bbd3e:	4620      	mov	r0, r4
   bbd40:	f7fc fbee 	bl	b8520 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbd44:	b308      	cbz	r0, bbd8a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbd46:	4620      	mov	r0, r4
   bbd48:	f7fc fd4c 	bl	b87e4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbd4c:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbd4e:	4620      	mov	r0, r4
   bbd50:	f7fc fdca 	bl	b88e8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbd54:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd56:	4620      	mov	r0, r4
   bbd58:	f7fd f85a 	bl	b8e10 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bbd5c:	782b      	ldrb	r3, [r5, #0]
   bbd5e:	4283      	cmp	r3, r0
   bbd60:	d213      	bcs.n	bbd8a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bbd62:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbd66:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbd68:	782b      	ldrb	r3, [r5, #0]
   bbd6a:	3301      	adds	r3, #1
   bbd6c:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bbd6e:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbd70:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bbd72:	d10a      	bne.n	bbd8a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbd74:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd78:	b913      	cbnz	r3, bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bbd7a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbd7e:	b123      	cbz	r3, bbd8a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bbd80:	498f      	ldr	r1, [pc, #572]	; (bbfc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bbd82:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd86:	f004 fe04 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bbd8a:	4620      	mov	r0, r4
   bbd8c:	f7fc f9c8 	bl	b8120 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbd90:	b128      	cbz	r0, bbd9e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bbd92:	2201      	movs	r2, #1
   bbd94:	f10d 010f 	add.w	r1, sp, #15
   bbd98:	4620      	mov	r0, r4
   bbd9a:	f7ff fd4f 	bl	bb83c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbd9e:	4620      	mov	r0, r4
   bbda0:	f7fc faee 	bl	b8380 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbda4:	2800      	cmp	r0, #0
   bbda6:	d081      	beq.n	bbcac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bbda8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbdac:	4620      	mov	r0, r4
   bbdae:	f7fc fbaf 	bl	b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bbdb2:	e77b      	b.n	bbcac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bbdb4:	18e2      	adds	r2, r4, r3
   bbdb6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbdba:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bbdbe:	2b05      	cmp	r3, #5
   bbdc0:	f47f af74 	bne.w	bbcac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bbdc4:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bbdc8:	b923      	cbnz	r3, bbdd4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bbdca:	4620      	mov	r0, r4
   bbdcc:	f7fc fa70 	bl	b82b0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bbdd0:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bbdd4:	4620      	mov	r0, r4
   bbdd6:	f7fc fba3 	bl	b8520 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbdda:	b1b8      	cbz	r0, bbe0c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbddc:	4620      	mov	r0, r4
   bbdde:	f7fc fd01 	bl	b87e4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbde2:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbde4:	4620      	mov	r0, r4
   bbde6:	f7fc fd7f 	bl	b88e8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbdea:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbdec:	4620      	mov	r0, r4
   bbdee:	f7fd f80f 	bl	b8e10 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bbdf2:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbdf4:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bbdf6:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bbdf8:	2100      	movs	r1, #0
   bbdfa:	4628      	mov	r0, r5
   bbdfc:	f007 fe50 	bl	c3aa0 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bbe00:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bbe04:	602b      	str	r3, [r5, #0]
   bbe06:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bbe0a:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bbe0c:	4620      	mov	r0, r4
   bbe0e:	f7fc f987 	bl	b8120 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbe12:	b128      	cbz	r0, bbe20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bbe14:	2206      	movs	r2, #6
   bbe16:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bbe1a:	4620      	mov	r0, r4
   bbe1c:	f7ff fd0e 	bl	bb83c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbe20:	4620      	mov	r0, r4
   bbe22:	f7fc faad 	bl	b8380 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbe26:	b1e8      	cbz	r0, bbe64 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bbe28:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bbe2c:	4620      	mov	r0, r4
   bbe2e:	f7fc fb6f 	bl	b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bbe32:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bbe36:	4620      	mov	r0, r4
   bbe38:	f7fc fb6a 	bl	b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bbe3c:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bbe40:	4620      	mov	r0, r4
   bbe42:	f7fc fb65 	bl	b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bbe46:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bbe4a:	4620      	mov	r0, r4
   bbe4c:	f7fc fb60 	bl	b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bbe50:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bbe54:	4620      	mov	r0, r4
   bbe56:	f7fc fb5b 	bl	b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bbe5a:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bbe5e:	4620      	mov	r0, r4
   bbe60:	f7fc fb56 	bl	b8510 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bbe64:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bbe68:	2b05      	cmp	r3, #5
   bbe6a:	f67f af1f 	bls.w	bbcac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bbe6e:	e766      	b.n	bbd3e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bbe70:	2d2a      	cmp	r5, #42	; 0x2a
   bbe72:	f040 808b 	bne.w	bbf8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bbe76:	091a      	lsrs	r2, r3, #4
   bbe78:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bbe7c:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bbe7e:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bbe80:	f003 030f 	and.w	r3, r3, #15
   bbe84:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bbe88:	bf84      	itt	hi
   bbe8a:	3237      	addhi	r2, #55	; 0x37
   bbe8c:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bbe8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bbe92:	bf88      	it	hi
   bbe94:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bbe98:	f818 3006 	ldrb.w	r3, [r8, r6]
   bbe9c:	42ab      	cmp	r3, r5
   bbe9e:	eb08 0b06 	add.w	fp, r8, r6
   bbea2:	d143      	bne.n	bbf2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bbea4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bbea8:	4553      	cmp	r3, sl
   bbeaa:	d13f      	bne.n	bbf2c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bbeac:	4620      	mov	r0, r4
   bbeae:	f7fc fd9d 	bl	b89ec <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bbeb2:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbeb4:	4620      	mov	r0, r4
   bbeb6:	f7fc fe1d 	bl	b8af4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbeba:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbebc:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbebe:	2100      	movs	r1, #0
   bbec0:	f007 fdee 	bl	c3aa0 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bbec4:	783a      	ldrb	r2, [r7, #0]
   bbec6:	4641      	mov	r1, r8
   bbec8:	4630      	mov	r0, r6
   bbeca:	f007 fdc1 	bl	c3a50 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bbece:	783b      	ldrb	r3, [r7, #0]
   bbed0:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbed2:	4620      	mov	r0, r4
   bbed4:	f7fd f80e 	bl	b8ef4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bbed8:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bbeda:	f025 0503 	bic.w	r5, r5, #3
   bbede:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbee2:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bbee4:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bbee8:	4620      	mov	r0, r4
   bbeea:	f7fc fba5 	bl	b8638 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bbeee:	b1d0      	cbz	r0, bbf26 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bbef0:	f01a 0104 	ands.w	r1, sl, #4
   bbef4:	d117      	bne.n	bbf26 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bbef6:	4620      	mov	r0, r4
   bbef8:	9102      	str	r1, [sp, #8]
   bbefa:	f7fc fe7f 	bl	b8bfc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bbefe:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf00:	4620      	mov	r0, r4
   bbf02:	f7fc feff 	bl	b8d04 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf06:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf08:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf0a:	464a      	mov	r2, r9
   bbf0c:	f007 fdc8 	bl	c3aa0 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bbf10:	783a      	ldrb	r2, [r7, #0]
   bbf12:	4641      	mov	r1, r8
   bbf14:	4650      	mov	r0, sl
   bbf16:	f007 fd9b 	bl	c3a50 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf1a:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bbf1e:	783b      	ldrb	r3, [r7, #0]
   bbf20:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf24:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bbf26:	2300      	movs	r3, #0
   bbf28:	7023      	strb	r3, [r4, #0]
   bbf2a:	e4f9      	b.n	bb920 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf2c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf30:	b91b      	cbnz	r3, bbf3a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bbf32:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf36:	2b00      	cmp	r3, #0
   bbf38:	d0f5      	beq.n	bbf26 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bbf3a:	4922      	ldr	r1, [pc, #136]	; (bbfc4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bbf3c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf40:	f004 fd0d 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bbf44:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf48:	6803      	ldr	r3, [r0, #0]
   bbf4a:	4629      	mov	r1, r5
   bbf4c:	689b      	ldr	r3, [r3, #8]
   bbf4e:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bbf50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf54:	6803      	ldr	r3, [r0, #0]
   bbf56:	4651      	mov	r1, sl
   bbf58:	689b      	ldr	r3, [r3, #8]
   bbf5a:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bbf5c:	491a      	ldr	r1, [pc, #104]	; (bbfc8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bbf5e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf62:	f004 fcfc 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bbf66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf6a:	f89b 1000 	ldrb.w	r1, [fp]
   bbf6e:	6803      	ldr	r3, [r0, #0]
   bbf70:	689b      	ldr	r3, [r3, #8]
   bbf72:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bbf74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf78:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bbf7c:	6803      	ldr	r3, [r0, #0]
   bbf7e:	689b      	ldr	r3, [r3, #8]
   bbf80:	4798      	blx	r3
              _debugSerial->println();
   bbf82:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf86:	f004 fcee 	bl	c0966 <_ZN5Print7printlnEv>
   bbf8a:	e7cc      	b.n	bbf26 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf8c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf90:	b91b      	cbnz	r3, bbf9a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bbf92:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf96:	2b00      	cmp	r3, #0
   bbf98:	d0c5      	beq.n	bbf26 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bbf9a:	490c      	ldr	r1, [pc, #48]	; (bbfcc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bbf9c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfa0:	f004 fcf7 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbfa4:	e7bf      	b.n	bbf26 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bbfa6:	2e03      	cmp	r6, #3
   bbfa8:	f47f acba 	bne.w	bb920 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bbfac:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbfb0:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bbfb4:	4620      	mov	r0, r4
   bbfb6:	f7fd f821 	bl	b8ffc <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bbfba:	7020      	strb	r0, [r4, #0]
}
   bbfbc:	e4b0      	b.n	bb920 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bbfbe:	bf00      	nop
   bbfc0:	000c6a08 	.word	0x000c6a08
   bbfc4:	000c6a26 	.word	0x000c6a26
   bbfc8:	000c6a51 	.word	0x000c6a51
   bbfcc:	000c6a57 	.word	0x000c6a57

000bbfd0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bbfd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bbfd4:	4604      	mov	r4, r0
   bbfd6:	4699      	mov	r9, r3
   bbfd8:	460f      	mov	r7, r1
   bbfda:	4690      	mov	r8, r2
   bbfdc:	f001 f94c 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bbfe0:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bbfe4:	1ac0      	subs	r0, r0, r3
   bbfe6:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bbfea:	4298      	cmp	r0, r3
   bbfec:	f0c0 80a8 	bcc.w	bc140 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bbff0:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bbff4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbff8:	f003 f9e4 	bl	bf3c4 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bbffc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc000:	21fd      	movs	r1, #253	; 0xfd
   bc002:	f7fb fe53 	bl	b7cac <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc006:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc00a:	2100      	movs	r1, #0
   bc00c:	f003 f9e1 	bl	bf3d2 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc010:	4605      	mov	r5, r0
   bc012:	b1a8      	cbz	r0, bc040 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc014:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc018:	b933      	cbnz	r3, bc028 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc01a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc01e:	b91b      	cbnz	r3, bc028 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc020:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc022:	b002      	add	sp, #8
   bc024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc028:	4946      	ldr	r1, [pc, #280]	; (bc144 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc02a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc02e:	f004 fc96 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc032:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc036:	220a      	movs	r2, #10
   bc038:	4629      	mov	r1, r5
   bc03a:	f7fb fe2e 	bl	b7c9a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc03e:	e7ef      	b.n	bc020 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc040:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc044:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc048:	2202      	movs	r2, #2
   bc04a:	f003 f9b8 	bl	bf3be <_ZN7TwoWire11requestFromEhj>
   bc04e:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc050:	2d02      	cmp	r5, #2
   bc052:	d008      	beq.n	bc066 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc054:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc058:	b91b      	cbnz	r3, bc062 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc05a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc05e:	2b00      	cmp	r3, #0
   bc060:	d0de      	beq.n	bc020 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc062:	4939      	ldr	r1, [pc, #228]	; (bc148 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc064:	e7e1      	b.n	bc02a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc066:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc06a:	6803      	ldr	r3, [r0, #0]
   bc06c:	695b      	ldr	r3, [r3, #20]
   bc06e:	4798      	blx	r3
   bc070:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc072:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc076:	6803      	ldr	r3, [r0, #0]
   bc078:	695b      	ldr	r3, [r3, #20]
   bc07a:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc07c:	b2c6      	uxtb	r6, r0
   bc07e:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc082:	b22a      	sxth	r2, r5
   bc084:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc086:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc08a:	b955      	cbnz	r5, bc0a2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc08c:	b123      	cbz	r3, bc098 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc08e:	492f      	ldr	r1, [pc, #188]	; (bc14c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc090:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc094:	f004 fc7d 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc098:	f001 f8ee 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc09c:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc0a0:	e7be      	b.n	bc020 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc0a2:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc0a4:	bfb8      	it	lt
   bc0a6:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc0aa:	2d64      	cmp	r5, #100	; 0x64
   bc0ac:	d936      	bls.n	bc11c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc0ae:	b17b      	cbz	r3, bc0d0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc0b0:	4927      	ldr	r1, [pc, #156]	; (bc150 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc0b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0b6:	f004 fc52 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc0ba:	4629      	mov	r1, r5
   bc0bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0c0:	220a      	movs	r2, #10
   bc0c2:	f004 fc68 	bl	c0996 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc0c6:	4923      	ldr	r1, [pc, #140]	; (bc154 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc0c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0cc:	f004 fc61 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc0d0:	2d00      	cmp	r5, #0
   bc0d2:	d035      	beq.n	bc140 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc0d4:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc0d6:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc0da:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc0de:	42ae      	cmp	r6, r5
   bc0e0:	bf28      	it	cs
   bc0e2:	462e      	movcs	r6, r5
   bc0e4:	4632      	mov	r2, r6
   bc0e6:	f003 f96a 	bl	bf3be <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc0ea:	b2c0      	uxtb	r0, r0
   bc0ec:	4286      	cmp	r6, r0
   bc0ee:	d197      	bne.n	bc020 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc0f0:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc0f4:	fa1f f38a 	uxth.w	r3, sl
   bc0f8:	429e      	cmp	r6, r3
   bc0fa:	d91e      	bls.n	bc13a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc0fc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc100:	6803      	ldr	r3, [r0, #0]
   bc102:	695b      	ldr	r3, [r3, #20]
   bc104:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc106:	f8cd 9000 	str.w	r9, [sp]
   bc10a:	b2c1      	uxtb	r1, r0
   bc10c:	4643      	mov	r3, r8
   bc10e:	463a      	mov	r2, r7
   bc110:	4620      	mov	r0, r4
   bc112:	f7ff fbc1 	bl	bb898 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc116:	f10a 0a01 	add.w	sl, sl, #1
   bc11a:	e7eb      	b.n	bc0f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc11c:	2b00      	cmp	r3, #0
   bc11e:	d0d7      	beq.n	bc0d0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc120:	490d      	ldr	r1, [pc, #52]	; (bc158 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc122:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc126:	f004 fc1a 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
   bc12a:	4629      	mov	r1, r5
   bc12c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc130:	220a      	movs	r2, #10
   bc132:	f004 fc30 	bl	c0996 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc136:	4909      	ldr	r1, [pc, #36]	; (bc15c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc138:	e7c6      	b.n	bc0c8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc13a:	1bad      	subs	r5, r5, r6
   bc13c:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc13e:	e7c7      	b.n	bc0d0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc140:	2001      	movs	r0, #1
   bc142:	e76e      	b.n	bc022 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc144:	000c6a78 	.word	0x000c6a78
   bc148:	000c6aac 	.word	0x000c6aac
   bc14c:	000c6ae1 	.word	0x000c6ae1
   bc150:	000c6b09 	.word	0x000c6b09
   bc154:	000c6b29 	.word	0x000c6b29
   bc158:	000c6b39 	.word	0x000c6b39
   bc15c:	000c6b51 	.word	0x000c6b51

000bc160 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc162:	4604      	mov	r4, r0
   bc164:	460d      	mov	r5, r1
   bc166:	4616      	mov	r6, r2
   bc168:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc16a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc16e:	6803      	ldr	r3, [r0, #0]
   bc170:	691b      	ldr	r3, [r3, #16]
   bc172:	4798      	blx	r3
   bc174:	b160      	cbz	r0, bc190 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc176:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc17a:	6803      	ldr	r3, [r0, #0]
   bc17c:	695b      	ldr	r3, [r3, #20]
   bc17e:	4798      	blx	r3
   bc180:	9700      	str	r7, [sp, #0]
   bc182:	b2c1      	uxtb	r1, r0
   bc184:	4633      	mov	r3, r6
   bc186:	462a      	mov	r2, r5
   bc188:	4620      	mov	r0, r4
   bc18a:	f7ff fb85 	bl	bb898 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc18e:	e7ec      	b.n	bc16a <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc190:	2001      	movs	r0, #1
   bc192:	b003      	add	sp, #12
   bc194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc198 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc19c:	4604      	mov	r4, r0
   bc19e:	b087      	sub	sp, #28
   bc1a0:	460d      	mov	r5, r1
   bc1a2:	4616      	mov	r6, r2
   bc1a4:	461f      	mov	r7, r3
   bc1a6:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc1aa:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc1ae:	fa5f f388 	uxtb.w	r3, r8
   bc1b2:	429a      	cmp	r2, r3
   bc1b4:	d90b      	bls.n	bc1ce <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc1b6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc1ba:	4620      	mov	r0, r4
   bc1bc:	5cd1      	ldrb	r1, [r2, r3]
   bc1be:	9700      	str	r7, [sp, #0]
   bc1c0:	4633      	mov	r3, r6
   bc1c2:	462a      	mov	r2, r5
   bc1c4:	f7ff fb68 	bl	bb898 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc1c8:	f108 0801 	add.w	r8, r8, #1
   bc1cc:	e7ed      	b.n	bc1aa <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc1ce:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc1d2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc1d6:	4a25      	ldr	r2, [pc, #148]	; (bc26c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc1d8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc1dc:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc1e0:	a902      	add	r1, sp, #8
   bc1e2:	f04f 0901 	mov.w	r9, #1
   bc1e6:	9202      	str	r2, [sp, #8]
   bc1e8:	9304      	str	r3, [sp, #16]
   bc1ea:	f88d 800c 	strb.w	r8, [sp, #12]
   bc1ee:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc1f2:	f004 fcf3 	bl	c0bdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc1f6:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc1fa:	4641      	mov	r1, r8
   bc1fc:	f005 f979 	bl	c14f2 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc200:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc204:	21ff      	movs	r1, #255	; 0xff
   bc206:	f004 fd89 	bl	c0d1c <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc20a:	28ff      	cmp	r0, #255	; 0xff
   bc20c:	d116      	bne.n	bc23c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc20e:	7823      	ldrb	r3, [r4, #0]
   bc210:	b983      	cbnz	r3, bc234 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc212:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc216:	4649      	mov	r1, r9
   bc218:	f005 f96b 	bl	c14f2 <digitalWrite>
    _spiPort->endTransaction();
   bc21c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc220:	f004 fcc2 	bl	c0ba8 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc224:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc228:	f001 fb70 	bl	bd90c <delay>
} // end checkUbloxSpi()
   bc22c:	2001      	movs	r0, #1
   bc22e:	b007      	add	sp, #28
   bc230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc234:	28ff      	cmp	r0, #255	; 0xff
   bc236:	d101      	bne.n	bc23c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc238:	7823      	ldrb	r3, [r4, #0]
   bc23a:	b163      	cbz	r3, bc256 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc23c:	4601      	mov	r1, r0
   bc23e:	9700      	str	r7, [sp, #0]
   bc240:	4620      	mov	r0, r4
   bc242:	4633      	mov	r3, r6
   bc244:	462a      	mov	r2, r5
   bc246:	f7ff fb27 	bl	bb898 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc24a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc24e:	21ff      	movs	r1, #255	; 0xff
   bc250:	f004 fd64 	bl	c0d1c <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc254:	e7ee      	b.n	bc234 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc256:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc25a:	2101      	movs	r1, #1
   bc25c:	f005 f949 	bl	c14f2 <digitalWrite>
  _spiPort->endTransaction();
   bc260:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc264:	f004 fca0 	bl	c0ba8 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc268:	e7e0      	b.n	bc22c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc26a:	bf00      	nop
   bc26c:	000c61a0 	.word	0x000c61a0

000bc270 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc270:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc272:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc276:	b91c      	cbnz	r4, bc280 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc278:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc27c:	f7ff bea8 	b.w	bbfd0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc280:	2c01      	cmp	r4, #1
   bc282:	d103      	bne.n	bc28c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc284:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc288:	f7ff bf6a 	b.w	bc160 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc28c:	2c02      	cmp	r4, #2
   bc28e:	d103      	bne.n	bc298 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc290:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc294:	f7ff bf80 	b.w	bc198 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc298:	2000      	movs	r0, #0
   bc29a:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc29e:	4770      	bx	lr

000bc2a0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2a4:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc2a6:	2102      	movs	r1, #2
   bc2a8:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2aa:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2ae:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2b2:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc2b6:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2b8:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2bc:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2c0:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc2c4:	4604      	mov	r4, r0
   bc2c6:	4617      	mov	r7, r2
   bc2c8:	4698      	mov	r8, r3
   bc2ca:	f000 ffd5 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc2ce:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc2d2:	4606      	mov	r6, r0
   bc2d4:	4481      	add	r9, r0
   bc2d6:	f000 ffcf 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc2da:	4581      	cmp	r9, r0
   bc2dc:	f240 80a8 	bls.w	bc430 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc2e0:	4643      	mov	r3, r8
   bc2e2:	463a      	mov	r2, r7
   bc2e4:	4629      	mov	r1, r5
   bc2e6:	4620      	mov	r0, r4
   bc2e8:	f7ff ffc2 	bl	bc270 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc2ec:	2800      	cmp	r0, #0
   bc2ee:	f000 809b 	beq.w	bc428 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc2f2:	7beb      	ldrb	r3, [r5, #15]
   bc2f4:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc2f8:	2b01      	cmp	r3, #1
   bc2fa:	d125      	bne.n	bc348 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc2fc:	2901      	cmp	r1, #1
   bc2fe:	f040 80ec 	bne.w	bc4da <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc302:	7bab      	ldrb	r3, [r5, #14]
   bc304:	2b01      	cmp	r3, #1
   bc306:	782b      	ldrb	r3, [r5, #0]
   bc308:	d13b      	bne.n	bc382 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc30a:	42bb      	cmp	r3, r7
   bc30c:	d13e      	bne.n	bc38c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc30e:	786a      	ldrb	r2, [r5, #1]
   bc310:	4542      	cmp	r2, r8
   bc312:	d136      	bne.n	bc382 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc314:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc318:	b913      	cbnz	r3, bc320 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc31a:	200b      	movs	r0, #11
}
   bc31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc320:	4978      	ldr	r1, [pc, #480]	; (bc504 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc322:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc326:	f004 fb1a 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc32a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc32e:	f000 ffa3 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc332:	220a      	movs	r2, #10
   bc334:	1b81      	subs	r1, r0, r6
   bc336:	4628      	mov	r0, r5
   bc338:	f7fb fc9b 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc33c:	4972      	ldr	r1, [pc, #456]	; (bc508 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc33e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc342:	f004 fb26 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc346:	e7e8      	b.n	bc31a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc348:	2b02      	cmp	r3, #2
   bc34a:	d137      	bne.n	bc3bc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc34c:	2901      	cmp	r1, #1
   bc34e:	f040 80aa 	bne.w	bc4a6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc352:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc356:	b193      	cbz	r3, bc37e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc358:	496c      	ldr	r1, [pc, #432]	; (bc50c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc35a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc35e:	f004 fafe 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc362:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc366:	f000 ff87 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc36a:	220a      	movs	r2, #10
   bc36c:	1b81      	subs	r1, r0, r6
   bc36e:	4628      	mov	r0, r5
   bc370:	f7fb fc7f 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc374:	4964      	ldr	r1, [pc, #400]	; (bc508 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc376:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc37a:	f004 fb0a 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc37e:	200a      	movs	r0, #10
   bc380:	e7cc      	b.n	bc31c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc382:	42bb      	cmp	r3, r7
   bc384:	d102      	bne.n	bc38c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc386:	786b      	ldrb	r3, [r5, #1]
   bc388:	4543      	cmp	r3, r8
   bc38a:	d019      	beq.n	bc3c0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc38c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc390:	b193      	cbz	r3, bc3b8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc392:	495f      	ldr	r1, [pc, #380]	; (bc510 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc394:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc398:	f004 fae1 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc39c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3a0:	f000 ff6a 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc3a4:	220a      	movs	r2, #10
   bc3a6:	1b81      	subs	r1, r0, r6
   bc3a8:	4628      	mov	r0, r5
   bc3aa:	f7fb fc62 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc3ae:	4956      	ldr	r1, [pc, #344]	; (bc508 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc3b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3b4:	f004 faed 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc3b8:	200d      	movs	r0, #13
   bc3ba:	e7af      	b.n	bc31c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc3bc:	2901      	cmp	r1, #1
   bc3be:	d172      	bne.n	bc4a6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc3c0:	89eb      	ldrh	r3, [r5, #14]
   bc3c2:	bb8b      	cbnz	r3, bc428 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc3c4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3c8:	b193      	cbz	r3, bc3f0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc3ca:	4952      	ldr	r1, [pc, #328]	; (bc514 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc3cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3d0:	f004 fac5 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc3d4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3d8:	f000 ff4e 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc3dc:	220a      	movs	r2, #10
   bc3de:	1b81      	subs	r1, r0, r6
   bc3e0:	4628      	mov	r0, r5
   bc3e2:	f7fb fc46 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc3e6:	4948      	ldr	r1, [pc, #288]	; (bc508 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc3e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3ec:	f004 fad1 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc3f0:	2002      	movs	r0, #2
   bc3f2:	e793      	b.n	bc31c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc3f4:	430b      	orrs	r3, r1
   bc3f6:	d117      	bne.n	bc428 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc3f8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3fc:	b193      	cbz	r3, bc424 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc3fe:	4946      	ldr	r1, [pc, #280]	; (bc518 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc400:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc404:	f004 faab 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc408:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc40c:	f000 ff34 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc410:	220a      	movs	r2, #10
   bc412:	1b81      	subs	r1, r0, r6
   bc414:	4628      	mov	r0, r5
   bc416:	f7fb fc2c 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc41a:	493b      	ldr	r1, [pc, #236]	; (bc508 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc41c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc420:	f004 fab7 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc424:	2001      	movs	r0, #1
   bc426:	e779      	b.n	bc31c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc428:	2001      	movs	r0, #1
   bc42a:	f001 fa6f 	bl	bd90c <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc42e:	e752      	b.n	bc2d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc430:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc432:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc436:	2a01      	cmp	r2, #1
   bc438:	d11f      	bne.n	bc47a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc43a:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc43e:	2a02      	cmp	r2, #2
   bc440:	d11b      	bne.n	bc47a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc442:	7baa      	ldrb	r2, [r5, #14]
   bc444:	2a01      	cmp	r2, #1
   bc446:	d118      	bne.n	bc47a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc448:	782a      	ldrb	r2, [r5, #0]
   bc44a:	42ba      	cmp	r2, r7
   bc44c:	d115      	bne.n	bc47a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc44e:	786a      	ldrb	r2, [r5, #1]
   bc450:	4542      	cmp	r2, r8
   bc452:	d112      	bne.n	bc47a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc454:	2b00      	cmp	r3, #0
   bc456:	f43f af60 	beq.w	bc31a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc45a:	4930      	ldr	r1, [pc, #192]	; (bc51c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc45c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc460:	f004 fa7d 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc464:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc468:	f000 ff06 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc46c:	220a      	movs	r2, #10
   bc46e:	1b81      	subs	r1, r0, r6
   bc470:	4628      	mov	r0, r5
   bc472:	f7fb fbfe 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc476:	492a      	ldr	r1, [pc, #168]	; (bc520 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc478:	e761      	b.n	bc33e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc47a:	b193      	cbz	r3, bc4a2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc47c:	4929      	ldr	r1, [pc, #164]	; (bc524 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc47e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc482:	f004 fa6c 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc486:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc48a:	f000 fef5 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc48e:	220a      	movs	r2, #10
   bc490:	1b81      	subs	r1, r0, r6
   bc492:	4628      	mov	r0, r5
   bc494:	f7fb fbed 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc498:	4923      	ldr	r1, [pc, #140]	; (bc528 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc49a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc49e:	f004 fa78 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc4a2:	2003      	movs	r0, #3
   bc4a4:	e73a      	b.n	bc31c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc4a6:	2903      	cmp	r1, #3
   bc4a8:	d1a4      	bne.n	bc3f4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc4aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4ae:	b193      	cbz	r3, bc4d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc4b0:	491e      	ldr	r1, [pc, #120]	; (bc52c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc4b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4b6:	f004 fa52 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc4ba:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4be:	f000 fedb 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc4c2:	220a      	movs	r2, #10
   bc4c4:	1b81      	subs	r1, r0, r6
   bc4c6:	4628      	mov	r0, r5
   bc4c8:	f7fb fbd3 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc4cc:	490e      	ldr	r1, [pc, #56]	; (bc508 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc4ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4d2:	f004 fa5e 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc4d6:	2004      	movs	r0, #4
   bc4d8:	e720      	b.n	bc31c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc4da:	2903      	cmp	r1, #3
   bc4dc:	d0e5      	beq.n	bc4aa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc4de:	2900      	cmp	r1, #0
   bc4e0:	d1a2      	bne.n	bc428 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc4e2:	7bab      	ldrb	r3, [r5, #14]
   bc4e4:	2b01      	cmp	r3, #1
   bc4e6:	d19f      	bne.n	bc428 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc4e8:	782b      	ldrb	r3, [r5, #0]
   bc4ea:	42bb      	cmp	r3, r7
   bc4ec:	d19c      	bne.n	bc428 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc4ee:	786b      	ldrb	r3, [r5, #1]
   bc4f0:	4543      	cmp	r3, r8
   bc4f2:	d199      	bne.n	bc428 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc4f4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4f8:	2b00      	cmp	r3, #0
   bc4fa:	f43f af0e 	beq.w	bc31a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bc4fe:	490c      	ldr	r1, [pc, #48]	; (bc530 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bc500:	e70f      	b.n	bc322 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bc502:	bf00      	nop
   bc504:	000c6b58 	.word	0x000c6b58
   bc508:	000c6b95 	.word	0x000c6b95
   bc50c:	000c6b9b 	.word	0x000c6b9b
   bc510:	000c6bcc 	.word	0x000c6bcc
   bc514:	000c6bfe 	.word	0x000c6bfe
   bc518:	000c6c9e 	.word	0x000c6c9e
   bc51c:	000c6cdf 	.word	0x000c6cdf
   bc520:	000c6d12 	.word	0x000c6d12
   bc524:	000c6d1a 	.word	0x000c6d1a
   bc528:	000c6d3d 	.word	0x000c6d3d
   bc52c:	000c6c24 	.word	0x000c6c24
   bc530:	000c6c5f 	.word	0x000c6c5f

000bc534 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bc534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc538:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc53a:	2102      	movs	r1, #2
   bc53c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc53e:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc542:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc546:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc54a:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc54c:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc550:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc554:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc558:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bc55c:	4604      	mov	r4, r0
   bc55e:	4617      	mov	r7, r2
   bc560:	4698      	mov	r8, r3
   bc562:	f000 fe89 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc566:	f240 1a01 	movw	sl, #257	; 0x101
   bc56a:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc56c:	f240 2b01 	movw	fp, #513	; 0x201
   bc570:	f000 fe82 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bc574:	1b80      	subs	r0, r0, r6
   bc576:	4548      	cmp	r0, r9
   bc578:	d269      	bcs.n	bc64e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc57a:	4643      	mov	r3, r8
   bc57c:	463a      	mov	r2, r7
   bc57e:	4629      	mov	r1, r5
   bc580:	4620      	mov	r0, r4
   bc582:	f7ff fe75 	bl	bc270 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc586:	2800      	cmp	r0, #0
   bc588:	d05d      	beq.n	bc646 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc58a:	89ea      	ldrh	r2, [r5, #14]
   bc58c:	4552      	cmp	r2, sl
   bc58e:	d11e      	bne.n	bc5ce <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc590:	782b      	ldrb	r3, [r5, #0]
   bc592:	42bb      	cmp	r3, r7
   bc594:	d11b      	bne.n	bc5ce <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc596:	786b      	ldrb	r3, [r5, #1]
   bc598:	4543      	cmp	r3, r8
   bc59a:	d118      	bne.n	bc5ce <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bc59c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc5a0:	b193      	cbz	r3, bc5c8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bc5a2:	4937      	ldr	r1, [pc, #220]	; (bc680 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bc5a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5a8:	f004 f9d9 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc5ac:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc5b0:	f000 fe62 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc5b4:	220a      	movs	r2, #10
   bc5b6:	1b81      	subs	r1, r0, r6
   bc5b8:	4628      	mov	r0, r5
   bc5ba:	f7fb fb5a 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc5be:	4931      	ldr	r1, [pc, #196]	; (bc684 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc5c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5c4:	f004 f9e5 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bc5c8:	200b      	movs	r0, #11
}
   bc5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc5ce:	7beb      	ldrb	r3, [r5, #15]
   bc5d0:	2b01      	cmp	r3, #1
   bc5d2:	d11d      	bne.n	bc610 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bc5d4:	782b      	ldrb	r3, [r5, #0]
   bc5d6:	42bb      	cmp	r3, r7
   bc5d8:	d102      	bne.n	bc5e0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bc5da:	786b      	ldrb	r3, [r5, #1]
   bc5dc:	4543      	cmp	r3, r8
   bc5de:	d032      	beq.n	bc646 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc5e0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc5e4:	b193      	cbz	r3, bc60c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bc5e6:	4928      	ldr	r1, [pc, #160]	; (bc688 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bc5e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5ec:	f004 f9b7 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc5f0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc5f4:	f000 fe40 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc5f8:	220a      	movs	r2, #10
   bc5fa:	1b81      	subs	r1, r0, r6
   bc5fc:	4628      	mov	r0, r5
   bc5fe:	f7fb fb38 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc602:	4920      	ldr	r1, [pc, #128]	; (bc684 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc604:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc608:	f004 f9c3 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc60c:	200d      	movs	r0, #13
   bc60e:	e7dc      	b.n	bc5ca <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc610:	455a      	cmp	r2, fp
   bc612:	d018      	beq.n	bc646 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bc614:	b9bb      	cbnz	r3, bc646 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc616:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc61a:	b193      	cbz	r3, bc642 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bc61c:	491b      	ldr	r1, [pc, #108]	; (bc68c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bc61e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc622:	f004 f99c 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc626:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc62a:	f000 fe25 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc62e:	220a      	movs	r2, #10
   bc630:	1b81      	subs	r1, r0, r6
   bc632:	4628      	mov	r0, r5
   bc634:	f7fb fb1d 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc638:	4912      	ldr	r1, [pc, #72]	; (bc684 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc63a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc63e:	f004 f9a8 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bc642:	2002      	movs	r0, #2
   bc644:	e7c1      	b.n	bc5ca <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc646:	2001      	movs	r0, #1
   bc648:	f001 f960 	bl	bd90c <delay>
  while (millis() - startTime < maxTime)
   bc64c:	e790      	b.n	bc570 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bc64e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc652:	b193      	cbz	r3, bc67a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bc654:	490e      	ldr	r1, [pc, #56]	; (bc690 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bc656:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc65a:	f004 f980 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc65e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc662:	f000 fe09 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
   bc666:	220a      	movs	r2, #10
   bc668:	1b81      	subs	r1, r0, r6
   bc66a:	4628      	mov	r0, r5
   bc66c:	f7fb fb01 	bl	b7c72 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bc670:	4908      	ldr	r1, [pc, #32]	; (bc694 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bc672:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc676:	f004 f98c 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc67a:	2003      	movs	r0, #3
   bc67c:	e7a5      	b.n	bc5ca <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bc67e:	bf00      	nop
   bc680:	000c6d44 	.word	0x000c6d44
   bc684:	000c6b95 	.word	0x000c6b95
   bc688:	000c6d7e 	.word	0x000c6d7e
   bc68c:	000c6db2 	.word	0x000c6db2
   bc690:	000c6deb 	.word	0x000c6deb
   bc694:	000c6e10 	.word	0x000c6e10

000bc698 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bc698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc69c:	4604      	mov	r4, r0
   bc69e:	4698      	mov	r8, r3
   bc6a0:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bc6a2:	f7fc fcc9 	bl	b9038 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bc6a6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bc6aa:	460d      	mov	r5, r1
  if (_printDebug == true)
   bc6ac:	b14b      	cbz	r3, bc6c2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bc6ae:	492a      	ldr	r1, [pc, #168]	; (bc758 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bc6b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6b4:	f004 f953 	bl	c095e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bc6b8:	2201      	movs	r2, #1
   bc6ba:	4629      	mov	r1, r5
   bc6bc:	4620      	mov	r0, r4
   bc6be:	f7fc fee9 	bl	b9494 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bc6c2:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bc6c6:	b993      	cbnz	r3, bc6ee <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bc6c8:	463a      	mov	r2, r7
   bc6ca:	4629      	mov	r1, r5
   bc6cc:	4620      	mov	r0, r4
   bc6ce:	f7fc fce1 	bl	b9094 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bc6d2:	4606      	mov	r6, r0
   bc6d4:	b188      	cbz	r0, bc6fa <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc6d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc6da:	b123      	cbz	r3, bc6e6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bc6dc:	491f      	ldr	r1, [pc, #124]	; (bc75c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bc6de:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6e2:	f004 f956 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bc6e6:	4630      	mov	r0, r6
   bc6e8:	b002      	add	sp, #8
   bc6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc6ee:	2b01      	cmp	r3, #1
   bc6f0:	d11b      	bne.n	bc72a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bc6f2:	4629      	mov	r1, r5
   bc6f4:	4620      	mov	r0, r4
   bc6f6:	f7fc fd8f 	bl	b9218 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bc6fa:	b35f      	cbz	r7, bc754 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc6fc:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bc6fe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc702:	2a06      	cmp	r2, #6
   bc704:	d002      	beq.n	bc70c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bc706:	f1b8 0f00 	cmp.w	r8, #0
   bc70a:	d015      	beq.n	bc738 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bc70c:	b123      	cbz	r3, bc718 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bc70e:	4914      	ldr	r1, [pc, #80]	; (bc760 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bc710:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc714:	f004 f93d 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc718:	786b      	ldrb	r3, [r5, #1]
   bc71a:	782a      	ldrb	r2, [r5, #0]
   bc71c:	9700      	str	r7, [sp, #0]
   bc71e:	4629      	mov	r1, r5
   bc720:	4620      	mov	r0, r4
   bc722:	f7ff fdbd 	bl	bc2a0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc726:	4606      	mov	r6, r0
   bc728:	e7dd      	b.n	bc6e6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bc72a:	2b02      	cmp	r3, #2
   bc72c:	d1e5      	bne.n	bc6fa <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bc72e:	4629      	mov	r1, r5
   bc730:	4620      	mov	r0, r4
   bc732:	f7fc fdcb 	bl	b92cc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bc736:	e7e0      	b.n	bc6fa <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc738:	b123      	cbz	r3, bc744 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bc73a:	490a      	ldr	r1, [pc, #40]	; (bc764 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bc73c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc740:	f004 f927 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc744:	786b      	ldrb	r3, [r5, #1]
   bc746:	782a      	ldrb	r2, [r5, #0]
   bc748:	9700      	str	r7, [sp, #0]
   bc74a:	4629      	mov	r1, r5
   bc74c:	4620      	mov	r0, r4
   bc74e:	f7ff fef1 	bl	bc534 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bc752:	e7e8      	b.n	bc726 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bc754:	463e      	mov	r6, r7
   bc756:	e7c6      	b.n	bc6e6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bc758:	000c6e2b 	.word	0x000c6e2b
   bc75c:	000c6e36 	.word	0x000c6e36
   bc760:	000c6e4e 	.word	0x000c6e4e
   bc764:	000c6e74 	.word	0x000c6e74

000bc768 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bc768:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bc76a:	4b09      	ldr	r3, [pc, #36]	; (bc790 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bc76c:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc770:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc774:	2300      	movs	r3, #0
   bc776:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bc77a:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bc77c:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bc780:	f7ff ff8a 	bl	bc698 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bc784:	f1a0 030b 	sub.w	r3, r0, #11
   bc788:	4258      	negs	r0, r3
   bc78a:	4158      	adcs	r0, r3
   bc78c:	bd38      	pop	{r3, r4, r5, pc}
   bc78e:	bf00      	nop
   bc790:	00010006 	.word	0x00010006

000bc794 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bc794:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc796:	4615      	mov	r5, r2
   bc798:	461a      	mov	r2, r3
   bc79a:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc79c:	9301      	str	r3, [sp, #4]
   bc79e:	f7ff ffe3 	bl	bc768 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc7a2:	b190      	cbz	r0, bc7ca <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc7a4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc7a8:	4b09      	ldr	r3, [pc, #36]	; (bc7d0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bc7aa:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc7ae:	2300      	movs	r3, #0
   bc7b0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7b4:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc7b6:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7b8:	4620      	mov	r0, r4
   bc7ba:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc7be:	f7ff ff6b 	bl	bc698 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc7c2:	f1a0 030a 	sub.w	r3, r0, #10
   bc7c6:	4258      	negs	r0, r3
   bc7c8:	4158      	adcs	r0, r3
}
   bc7ca:	b003      	add	sp, #12
   bc7cc:	bd30      	pop	{r4, r5, pc}
   bc7ce:	bf00      	nop
   bc7d0:	00140006 	.word	0x00140006

000bc7d4 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bc7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc7d6:	4615      	mov	r5, r2
   bc7d8:	461a      	mov	r2, r3
   bc7da:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc7dc:	9301      	str	r3, [sp, #4]
   bc7de:	f7ff ffc3 	bl	bc768 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc7e2:	b190      	cbz	r0, bc80a <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc7e4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc7e8:	4b09      	ldr	r3, [pc, #36]	; (bc810 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bc7ea:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc7ee:	2300      	movs	r3, #0
   bc7f0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7f4:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc7f6:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7f8:	4620      	mov	r0, r4
   bc7fa:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc7fe:	f7ff ff4b 	bl	bc698 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc802:	f1a0 030a 	sub.w	r3, r0, #10
   bc806:	4258      	negs	r0, r3
   bc808:	4158      	adcs	r0, r3
}
   bc80a:	b003      	add	sp, #12
   bc80c:	bd30      	pop	{r4, r5, pc}
   bc80e:	bf00      	nop
   bc810:	00140006 	.word	0x00140006

000bc814 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bc814:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bc816:	460a      	mov	r2, r1
   bc818:	2100      	movs	r1, #0
   bc81a:	f7ff bfbb 	b.w	bc794 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bc820 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bc820:	b510      	push	{r4, lr}
   bc822:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bc824:	2074      	movs	r0, #116	; 0x74
   bc826:	f7f7 fc36 	bl	b4096 <_Znwj>
   bc82a:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bc82c:	b960      	cbnz	r0, bc848 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc82e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc832:	b913      	cbnz	r3, bc83a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bc834:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc838:	b128      	cbz	r0, bc846 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bc83a:	4908      	ldr	r1, [pc, #32]	; (bc85c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bc83c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc840:	f004 f8a7 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc844:	2000      	movs	r0, #0
}
   bc846:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc848:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bc84a:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bc84e:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc852:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bc854:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bc856:	2001      	movs	r0, #1
   bc858:	e7f5      	b.n	bc846 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bc85a:	bf00      	nop
   bc85c:	000c6e9d 	.word	0x000c6e9d

000bc860 <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bc860:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc862:	6a03      	ldr	r3, [r0, #32]
{
   bc864:	4604      	mov	r4, r0
   bc866:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bc868:	b91b      	cbnz	r3, bc872 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bc86a:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc86c:	f7ff ffd8 	bl	bc820 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc870:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc872:	6a20      	ldr	r0, [r4, #32]
   bc874:	b180      	cbz	r0, bc898 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc876:	7803      	ldrb	r3, [r0, #0]
   bc878:	f003 0303 	and.w	r3, r3, #3
   bc87c:	2b03      	cmp	r3, #3
   bc87e:	d10d      	bne.n	bc89c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bc880:	2307      	movs	r3, #7
   bc882:	2201      	movs	r2, #1
   bc884:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc888:	4620      	mov	r0, r4
   bc88a:	f7ff fcf1 	bl	bc270 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bc88e:	6a23      	ldr	r3, [r4, #32]
   bc890:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bc894:	f000 0001 	and.w	r0, r0, #1
}
   bc898:	b002      	add	sp, #8
   bc89a:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc89c:	2b01      	cmp	r3, #1
   bc89e:	f04f 0300 	mov.w	r3, #0
   bc8a2:	d011      	beq.n	bc8c8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bc8a4:	f240 7101 	movw	r1, #1793	; 0x701
   bc8a8:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bc8ac:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bc8b0:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc8b4:	4620      	mov	r0, r4
   bc8b6:	f7ff feef 	bl	bc698 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc8ba:	280b      	cmp	r0, #11
   bc8bc:	d006      	beq.n	bc8cc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc8be:	f1a0 030d 	sub.w	r3, r0, #13
   bc8c2:	4258      	negs	r0, r3
   bc8c4:	4158      	adcs	r0, r3
   bc8c6:	e7e7      	b.n	bc898 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bc8c8:	4618      	mov	r0, r3
   bc8ca:	e7e5      	b.n	bc898 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bc8cc:	2001      	movs	r0, #1
   bc8ce:	e7e3      	b.n	bc898 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bc8d0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bc8d0:	b510      	push	{r4, lr}
   bc8d2:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bc8d4:	2018      	movs	r0, #24
   bc8d6:	f7f7 fbde 	bl	b4096 <_Znwj>
   bc8da:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bc8dc:	b960      	cbnz	r0, bc8f8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc8de:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc8e2:	b913      	cbnz	r3, bc8ea <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bc8e4:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc8e8:	b128      	cbz	r0, bc8f6 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bc8ea:	4905      	ldr	r1, [pc, #20]	; (bc900 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bc8ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8f0:	f004 f84f 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc8f4:	2000      	movs	r0, #0
}
   bc8f6:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bc8f8:	2300      	movs	r3, #0
   bc8fa:	7503      	strb	r3, [r0, #20]
  return (true);
   bc8fc:	2001      	movs	r0, #1
   bc8fe:	e7fa      	b.n	bc8f6 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bc900:	000c6ec4 	.word	0x000c6ec4

000bc904 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bc904:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bc906:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bc908:	4605      	mov	r5, r0
   bc90a:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bc90c:	b18b      	cbz	r3, bc932 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bc90e:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc912:	4b13      	ldr	r3, [pc, #76]	; (bc960 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bc914:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc918:	2300      	movs	r3, #0
   bc91a:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc91e:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bc920:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc922:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bc926:	f7ff feb7 	bl	bc698 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc92a:	280b      	cmp	r0, #11
   bc92c:	d10b      	bne.n	bc946 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bc92e:	2401      	movs	r4, #1
   bc930:	e00d      	b.n	bc94e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bc932:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bc934:	f7ff ffcc 	bl	bc8d0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bc938:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bc93a:	9a01      	ldr	r2, [sp, #4]
   bc93c:	2c00      	cmp	r4, #0
   bc93e:	d1e6      	bne.n	bc90e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bc940:	4620      	mov	r0, r4
   bc942:	b002      	add	sp, #8
   bc944:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc946:	f1a0 030d 	sub.w	r3, r0, #13
   bc94a:	425c      	negs	r4, r3
   bc94c:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bc94e:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bc950:	b110      	cbz	r0, bc958 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bc952:	2118      	movs	r1, #24
   bc954:	f7f7 fba5 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bc958:	2300      	movs	r3, #0
   bc95a:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bc95c:	e7f0      	b.n	bc940 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bc95e:	bf00      	nop
   bc960:	00010006 	.word	0x00010006

000bc964 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bc964:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bc966:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bc96a:	4604      	mov	r4, r0
   bc96c:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bc96e:	b145      	cbz	r5, bc982 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bc970:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bc974:	b9b1      	cbnz	r1, bc9a4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc976:	4620      	mov	r0, r4
}
   bc978:	b003      	add	sp, #12
   bc97a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc97e:	f7ff bfc1 	b.w	bc904 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bc982:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bc984:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bc988:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bc98c:	f002 fd1a 	bl	bf3c4 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bc990:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc994:	f002 fd21 	bl	bf3da <_ZN7TwoWire15endTransmissionEv>
   bc998:	9a01      	ldr	r2, [sp, #4]
   bc99a:	2800      	cmp	r0, #0
   bc99c:	d0e8      	beq.n	bc970 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bc99e:	4628      	mov	r0, r5
   bc9a0:	b003      	add	sp, #12
   bc9a2:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc9a4:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc9a6:	bf18      	it	ne
   bc9a8:	2104      	movne	r1, #4
   bc9aa:	e7e4      	b.n	bc976 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bc9ac <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bc9ac:	b570      	push	{r4, r5, r6, lr}
   bc9ae:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bc9b0:	2300      	movs	r3, #0
   bc9b2:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bc9b6:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bc9ba:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bc9be:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bc9c2:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bc9c6:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bc9c8:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bc9cc:	b91b      	cbnz	r3, bc9d6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bc9ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   bc9d2:	f7fb f9ed 	bl	b7db0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bc9d6:	4620      	mov	r0, r4
   bc9d8:	f7fc fe04 	bl	b95e4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bc9dc:	4631      	mov	r1, r6
   bc9de:	4620      	mov	r0, r4
   bc9e0:	f7ff ffc0 	bl	bc964 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc9e4:	b110      	cbz	r0, bc9ec <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bc9e6:	2501      	movs	r5, #1
}
   bc9e8:	4628      	mov	r0, r5
   bc9ea:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc9ec:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9f0:	b913      	cbnz	r3, bc9f8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bc9f2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc9f6:	b123      	cbz	r3, bca02 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bc9f8:	4917      	ldr	r1, [pc, #92]	; (bca58 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bc9fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9fe:	f003 ffc8 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bca02:	4631      	mov	r1, r6
   bca04:	4620      	mov	r0, r4
   bca06:	f7ff ffad 	bl	bc964 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bca0a:	2800      	cmp	r0, #0
   bca0c:	d1eb      	bne.n	bc9e6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca0e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca12:	b913      	cbnz	r3, bca1a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bca14:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca18:	b123      	cbz	r3, bca24 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bca1a:	4910      	ldr	r1, [pc, #64]	; (bca5c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bca1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca20:	f003 ffb7 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bca24:	4631      	mov	r1, r6
   bca26:	4620      	mov	r0, r4
   bca28:	f7ff ff9c 	bl	bc964 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bca2c:	2800      	cmp	r0, #0
   bca2e:	d1da      	bne.n	bc9e6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bca30:	2d00      	cmp	r5, #0
   bca32:	d0d9      	beq.n	bc9e8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bca34:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bca38:	2d00      	cmp	r5, #0
   bca3a:	d0d5      	beq.n	bc9e8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca3c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca40:	b91b      	cbnz	r3, bca4a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bca42:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca46:	2b00      	cmp	r3, #0
   bca48:	d0cd      	beq.n	bc9e6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bca4a:	4905      	ldr	r1, [pc, #20]	; (bca60 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bca4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca50:	f003 ff9f 	bl	c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bca54:	e7c8      	b.n	bc9e8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bca56:	bf00      	nop
   bca58:	000c6eeb 	.word	0x000c6eeb
   bca5c:	000c6f0f 	.word	0x000c6f0f
   bca60:	000c6f32 	.word	0x000c6f32

000bca64 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bca64:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bca66:	6a03      	ldr	r3, [r0, #32]
{
   bca68:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bca6a:	b91b      	cbnz	r3, bca74 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bca6c:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bca6e:	f7ff fed7 	bl	bc820 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bca72:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bca74:	6a20      	ldr	r0, [r4, #32]
   bca76:	b1b0      	cbz	r0, bcaa6 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bca78:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bca7c:	07db      	lsls	r3, r3, #31
   bca7e:	d402      	bmi.n	bca86 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bca80:	4620      	mov	r0, r4
   bca82:	f7ff feed 	bl	bc860 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bca86:	6a23      	ldr	r3, [r4, #32]
   bca88:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bca8c:	f36f 0200 	bfc	r2, #0, #1
   bca90:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bca94:	6a23      	ldr	r3, [r4, #32]
   bca96:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bca9a:	f36f 0200 	bfc	r2, #0, #1
   bca9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bcaa2:	6a23      	ldr	r3, [r4, #32]
   bcaa4:	69d8      	ldr	r0, [r3, #28]
}
   bcaa6:	b002      	add	sp, #8
   bcaa8:	bd10      	pop	{r4, pc}

000bcaaa <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bcaaa:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bcaac:	6a03      	ldr	r3, [r0, #32]
{
   bcaae:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bcab0:	b91b      	cbnz	r3, bcaba <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bcab2:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bcab4:	f7ff feb4 	bl	bc820 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bcab8:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bcaba:	6a20      	ldr	r0, [r4, #32]
   bcabc:	b1b0      	cbz	r0, bcaec <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bcabe:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bcac2:	079b      	lsls	r3, r3, #30
   bcac4:	d402      	bmi.n	bcacc <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bcac6:	4620      	mov	r0, r4
   bcac8:	f7ff feca 	bl	bc860 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bcacc:	6a23      	ldr	r3, [r4, #32]
   bcace:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bcad2:	f36f 0241 	bfc	r2, #1, #1
   bcad6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bcada:	6a23      	ldr	r3, [r4, #32]
   bcadc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bcae0:	f36f 0200 	bfc	r2, #0, #1
   bcae4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bcae8:	6a23      	ldr	r3, [r4, #32]
   bcaea:	6a18      	ldr	r0, [r3, #32]
}
   bcaec:	b002      	add	sp, #8
   bcaee:	bd10      	pop	{r4, pc}

000bcaf0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bcaf0:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bcaf2:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bcaf4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bcaf8:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bcafa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bcafe:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bcb00:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bcb04:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bcb06:	2500      	movs	r5, #0
  _width = width;
   bcb08:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bcb0c:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bcb0e:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bcb12:	7303      	strb	r3, [r0, #12]
}
   bcb14:	bd30      	pop	{r4, r5, pc}

000bcb16 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bcb16:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bcb18:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bcb1a:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bcb1c:	b085      	sub	sp, #20
   bcb1e:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bcb20:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bcb22:	f88d 400c 	strb.w	r4, [sp, #12]
   bcb26:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bcb28:	460e      	mov	r6, r1
   bcb2a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bcb2c:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bcb30:	b140      	cbz	r0, bcb44 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bcb32:	7b5b      	ldrb	r3, [r3, #13]
   bcb34:	9301      	str	r3, [sp, #4]
   bcb36:	ab03      	add	r3, sp, #12
   bcb38:	9300      	str	r3, [sp, #0]
   bcb3a:	2301      	movs	r3, #1
   bcb3c:	f000 f90a 	bl	bcd54 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bcb40:	b005      	add	sp, #20
   bcb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bcb44:	6858      	ldr	r0, [r3, #4]
   bcb46:	2800      	cmp	r0, #0
   bcb48:	d0fa      	beq.n	bcb40 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcb4a:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bcb4e:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcb52:	f1be 0f03 	cmp.w	lr, #3
   bcb56:	d10c      	bne.n	bcb72 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bcb58:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bcb5c:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bcb60:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bcb62:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bcb66:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bcb6a:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bcb6c:	f000 fa2b 	bl	bcfc6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bcb70:	e7e6      	b.n	bcb40 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcb72:	f1be 0f00 	cmp.w	lr, #0
   bcb76:	d109      	bne.n	bcb8c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bcb78:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bcb7c:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bcb80:	f8cd c000 	str.w	ip, [sp]
   bcb84:	ab03      	add	r3, sp, #12
   bcb86:	463a      	mov	r2, r7
   bcb88:	4631      	mov	r1, r6
   bcb8a:	e7ef      	b.n	bcb6c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcb8c:	f1be 0f02 	cmp.w	lr, #2
   bcb90:	d102      	bne.n	bcb98 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bcb92:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bcb96:	e7f1      	b.n	bcb7c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcb98:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bcb9c:	bf01      	itttt	eq
   bcb9e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bcba2:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bcba6:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bcbaa:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bcbae:	e7e7      	b.n	bcb80 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bcbb0 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bcbb0:	b4f0      	push	{r4, r5, r6, r7}
   bcbb2:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bcbb4:	b902      	cbnz	r2, bcbb8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bcbb6:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bcbb8:	2a04      	cmp	r2, #4
   bcbba:	d814      	bhi.n	bcbe6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bcbbc:	f100 050f 	add.w	r5, r0, #15
   bcbc0:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bcbc2:	1884      	adds	r4, r0, r2
   bcbc4:	4629      	mov	r1, r5
   bcbc6:	4284      	cmp	r4, r0
   bcbc8:	d009      	beq.n	bcbde <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bcbca:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bcbcc:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bcbce:	b927      	cbnz	r7, bcbda <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bcbd0:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bcbd2:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bcbd4:	3501      	adds	r5, #1
   bcbd6:	3c01      	subs	r4, #1
   bcbd8:	e7f5      	b.n	bcbc6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bcbda:	73a6      	strb	r6, [r4, #14]
   bcbdc:	e7f9      	b.n	bcbd2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bcbde:	4620      	mov	r0, r4
}
   bcbe0:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bcbe2:	f7ff bf98 	b.w	bcb16 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bcbe6:	2000      	movs	r0, #0
   bcbe8:	bcf0      	pop	{r4, r5, r6, r7}
   bcbea:	4770      	bx	lr

000bcbec <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcbec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bcbee:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bcbf0:	7a85      	ldrb	r5, [r0, #10]
   bcbf2:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcbf6:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bcbf8:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bcbfa:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcbfc:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bcbfe:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bcc02:	b140      	cbz	r0, bcc16 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc04:	2100      	movs	r1, #0
   bcc06:	e9cd 2100 	strd	r2, r1, [sp]
   bcc0a:	a903      	add	r1, sp, #12
   bcc0c:	7b62      	ldrb	r2, [r4, #13]
   bcc0e:	f000 f90f 	bl	bce30 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bcc12:	b004      	add	sp, #16
   bcc14:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bcc16:	6860      	ldr	r0, [r4, #4]
   bcc18:	2800      	cmp	r0, #0
   bcc1a:	d0fa      	beq.n	bcc12 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcc1c:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc1e:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcc20:	2903      	cmp	r1, #3
   bcc22:	d10d      	bne.n	bcc40 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bcc24:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcc28:	21ff      	movs	r1, #255	; 0xff
   bcc2a:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bcc2e:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bcc32:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcc36:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc38:	a903      	add	r1, sp, #12
   bcc3a:	f000 f9f6 	bl	bd02a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bcc3e:	e7e8      	b.n	bcc12 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcc40:	b941      	cbnz	r1, bcc54 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bcc42:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bcc46:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcc4a:	21ff      	movs	r1, #255	; 0xff
   bcc4c:	e9cd 2100 	strd	r2, r1, [sp]
   bcc50:	4622      	mov	r2, r4
   bcc52:	e7f1      	b.n	bcc38 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcc54:	2902      	cmp	r1, #2
   bcc56:	d102      	bne.n	bcc5e <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bcc58:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bcc5c:	e7f3      	b.n	bcc46 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcc5e:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bcc60:	bf02      	ittt	eq
   bcc62:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bcc66:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bcc6a:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bcc6e:	e7ec      	b.n	bcc4a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bcc70 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bcc70:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bcc72:	f100 050f 	add.w	r5, r0, #15
   bcc76:	7b02      	ldrb	r2, [r0, #12]
   bcc78:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bcc7a:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bcc7c:	f7ff ffb6 	bl	bcbec <_ZN23Adafruit_BusIO_Register4readEPhh>
   bcc80:	b178      	cbz	r0, bcca2 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bcc82:	7b22      	ldrb	r2, [r4, #12]
   bcc84:	4629      	mov	r1, r5
   bcc86:	4422      	add	r2, r4
  uint32_t value = 0;
   bcc88:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bcc8a:	42a2      	cmp	r2, r4
   bcc8c:	d00b      	beq.n	bcca6 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bcc8e:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bcc90:	7ba0      	ldrb	r0, [r4, #14]
   bcc92:	b920      	cbnz	r0, bcc9e <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bcc94:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bcc96:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bcc98:	3a01      	subs	r2, #1
   bcc9a:	3101      	adds	r1, #1
   bcc9c:	e7f5      	b.n	bcc8a <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bcc9e:	7808      	ldrb	r0, [r1, #0]
   bcca0:	e7f9      	b.n	bcc96 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bcca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bcca6:	bd38      	pop	{r3, r4, r5, pc}

000bcca8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bcca8:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bccaa:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bccac:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bccae:	7143      	strb	r3, [r0, #5]
}
   bccb0:	bd10      	pop	{r4, pc}

000bccb2 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bccb2:	b510      	push	{r4, lr}
   bccb4:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bccb6:	6800      	ldr	r0, [r0, #0]
   bccb8:	f7ff ffda 	bl	bcc70 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bccbc:	7922      	ldrb	r2, [r4, #4]
   bccbe:	2301      	movs	r3, #1
   bccc0:	4093      	lsls	r3, r2
  val >>= _shift;
   bccc2:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bccc4:	3b01      	subs	r3, #1
  val >>= _shift;
   bccc6:	40d0      	lsrs	r0, r2
}
   bccc8:	4018      	ands	r0, r3
   bccca:	bd10      	pop	{r4, pc}

000bcccc <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bcccc:	b570      	push	{r4, r5, r6, lr}
   bccce:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bccd0:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bccd2:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bccd4:	f7ff ffcc 	bl	bcc70 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bccd8:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bccda:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bccdc:	2201      	movs	r2, #1
   bccde:	409a      	lsls	r2, r3
   bcce0:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bcce2:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bcce6:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bccea:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bccec:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bccee:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bccf2:	4329      	orrs	r1, r5
   bccf4:	7b02      	ldrb	r2, [r0, #12]
}
   bccf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bccfa:	f7ff bf59 	b.w	bcbb0 <_ZN23Adafruit_BusIO_Register5writeEmh>

000bccfe <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bccfe:	6042      	str	r2, [r0, #4]
  _begun = false;
   bcd00:	2200      	movs	r2, #0
   bcd02:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bcd04:	2220      	movs	r2, #32
  _addr = addr;
   bcd06:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bcd08:	60c2      	str	r2, [r0, #12]
#endif
}
   bcd0a:	4770      	bx	lr

000bcd0c <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bcd0c:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bcd0e:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bcd10:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bcd12:	b153      	cbz	r3, bcd2a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bcd14:	7821      	ldrb	r1, [r4, #0]
   bcd16:	6860      	ldr	r0, [r4, #4]
   bcd18:	f002 fb54 	bl	bf3c4 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bcd1c:	6860      	ldr	r0, [r4, #4]
   bcd1e:	f002 fb5c 	bl	bf3da <_ZN7TwoWire15endTransmissionEv>
   bcd22:	fab0 f080 	clz	r0, r0
   bcd26:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bcd28:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bcd2a:	2101      	movs	r1, #1
   bcd2c:	f000 f803 	bl	bcd36 <_ZN18Adafruit_I2CDevice5beginEb>
   bcd30:	2800      	cmp	r0, #0
   bcd32:	d1ef      	bne.n	bcd14 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bcd34:	e7f8      	b.n	bcd28 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bcd36 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcd36:	b538      	push	{r3, r4, r5, lr}
   bcd38:	4604      	mov	r4, r0
  _wire->begin();
   bcd3a:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcd3c:	460d      	mov	r5, r1
  _wire->begin();
   bcd3e:	f002 fb0f 	bl	bf360 <_ZN7TwoWire5beginEv>
  _begun = true;
   bcd42:	2001      	movs	r0, #1
   bcd44:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bcd46:	b125      	cbz	r5, bcd52 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bcd48:	4620      	mov	r0, r4
}
   bcd4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bcd4e:	f7ff bfdd 	b.w	bcd0c <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bcd52:	bd38      	pop	{r3, r4, r5, pc}

000bcd54 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bcd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcd58:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bcd5c:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bcd5e:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bcd60:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bcd62:	4432      	add	r2, r6
   bcd64:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bcd66:	4604      	mov	r4, r0
   bcd68:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bcd6a:	d902      	bls.n	bcd72 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bcd6c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bcd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bcd72:	7801      	ldrb	r1, [r0, #0]
   bcd74:	6840      	ldr	r0, [r0, #4]
   bcd76:	f002 fb25 	bl	bf3c4 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcd7a:	b97e      	cbnz	r6, bcd9c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bcd7c:	6860      	ldr	r0, [r4, #4]
   bcd7e:	6803      	ldr	r3, [r0, #0]
   bcd80:	462a      	mov	r2, r5
   bcd82:	68db      	ldr	r3, [r3, #12]
   bcd84:	4641      	mov	r1, r8
   bcd86:	4798      	blx	r3
   bcd88:	4285      	cmp	r5, r0
   bcd8a:	d1ef      	bne.n	bcd6c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bcd8c:	6860      	ldr	r0, [r4, #4]
   bcd8e:	4639      	mov	r1, r7
   bcd90:	f002 fb1f 	bl	bf3d2 <_ZN7TwoWire15endTransmissionEh>
   bcd94:	fab0 f080 	clz	r0, r0
   bcd98:	0940      	lsrs	r0, r0, #5
   bcd9a:	e7e8      	b.n	bcd6e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcd9c:	f1b9 0f00 	cmp.w	r9, #0
   bcda0:	d0ec      	beq.n	bcd7c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bcda2:	6860      	ldr	r0, [r4, #4]
   bcda4:	6803      	ldr	r3, [r0, #0]
   bcda6:	4632      	mov	r2, r6
   bcda8:	68db      	ldr	r3, [r3, #12]
   bcdaa:	4649      	mov	r1, r9
   bcdac:	4798      	blx	r3
   bcdae:	4286      	cmp	r6, r0
   bcdb0:	d1dc      	bne.n	bcd6c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bcdb2:	e7e3      	b.n	bcd7c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bcdb4 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bcdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcdb8:	4615      	mov	r5, r2
   bcdba:	4604      	mov	r4, r0
   bcdbc:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bcdbe:	b2d2      	uxtb	r2, r2
   bcdc0:	7801      	ldrb	r1, [r0, #0]
   bcdc2:	6840      	ldr	r0, [r0, #4]
   bcdc4:	f002 fae9 	bl	bf39a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bcdc8:	4285      	cmp	r5, r0
   bcdca:	d10d      	bne.n	bcde8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bcdcc:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bcdce:	fa1f f887 	uxth.w	r8, r7
   bcdd2:	45a8      	cmp	r8, r5
   bcdd4:	f107 0701 	add.w	r7, r7, #1
   bcdd8:	d209      	bcs.n	bcdee <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bcdda:	6860      	ldr	r0, [r4, #4]
   bcddc:	6803      	ldr	r3, [r0, #0]
   bcdde:	695b      	ldr	r3, [r3, #20]
   bcde0:	4798      	blx	r3
   bcde2:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bcde6:	e7f2      	b.n	bcdce <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bcde8:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bcdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcdee:	2001      	movs	r0, #1
   bcdf0:	e7fb      	b.n	bcdea <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bcdf2 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bcdf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcdf6:	4607      	mov	r7, r0
   bcdf8:	4688      	mov	r8, r1
   bcdfa:	4616      	mov	r6, r2
   bcdfc:	4699      	mov	r9, r3
  size_t pos = 0;
   bcdfe:	2500      	movs	r5, #0
  while (pos < len) {
   bce00:	42b5      	cmp	r5, r6
   bce02:	d212      	bcs.n	bce2a <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bce04:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bce06:	1b74      	subs	r4, r6, r5
   bce08:	4294      	cmp	r4, r2
   bce0a:	bf28      	it	cs
   bce0c:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bce0e:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bce10:	42ab      	cmp	r3, r5
   bce12:	bf94      	ite	ls
   bce14:	464b      	movls	r3, r9
   bce16:	2300      	movhi	r3, #0
   bce18:	4622      	mov	r2, r4
   bce1a:	eb08 0105 	add.w	r1, r8, r5
   bce1e:	4638      	mov	r0, r7
   bce20:	f7ff ffc8 	bl	bcdb4 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bce24:	b110      	cbz	r0, bce2c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bce26:	4425      	add	r5, r4
  while (pos < len) {
   bce28:	e7ea      	b.n	bce00 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bce2a:	2001      	movs	r0, #1
}
   bce2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bce30 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bce30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bce32:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bce34:	2300      	movs	r3, #0
   bce36:	e9cd 3300 	strd	r3, r3, [sp]
   bce3a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bce3e:	9e06      	ldr	r6, [sp, #24]
   bce40:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bce42:	f7ff ff87 	bl	bcd54 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bce46:	b140      	cbz	r0, bce5a <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bce48:	2301      	movs	r3, #1
   bce4a:	4632      	mov	r2, r6
   bce4c:	4629      	mov	r1, r5
   bce4e:	4620      	mov	r0, r4
}
   bce50:	b002      	add	sp, #8
   bce52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bce56:	f7ff bfcc 	b.w	bcdf2 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bce5a:	b002      	add	sp, #8
   bce5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bce60 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce64:	4604      	mov	r4, r0
  if (_spi) {
   bce66:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bce68:	b085      	sub	sp, #20
   bce6a:	460d      	mov	r5, r1
  if (_spi) {
   bce6c:	b140      	cbz	r0, bce80 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bce6e:	2300      	movs	r3, #0
   bce70:	9300      	str	r3, [sp, #0]
   bce72:	4613      	mov	r3, r2
   bce74:	460a      	mov	r2, r1
   bce76:	f003 ff57 	bl	c0d28 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bce7a:	b005      	add	sp, #20
   bce7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bce80:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bce82:	68a0      	ldr	r0, [r4, #8]
   bce84:	4f48      	ldr	r7, [pc, #288]	; (bcfa8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bce86:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bce8a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bce8c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bce8e:	bf0c      	ite	eq
   bce90:	f04f 0b01 	moveq.w	fp, #1
   bce94:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bce98:	ea1b 0f03 	tst.w	fp, r3
   bce9c:	eb01 0302 	add.w	r3, r1, r2
   bcea0:	bf0c      	ite	eq
   bcea2:	f04f 0901 	moveq.w	r9, #1
   bcea6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bceaa:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bceac:	9303      	str	r3, [sp, #12]
   bceae:	9b03      	ldr	r3, [sp, #12]
   bceb0:	42ab      	cmp	r3, r5
   bceb2:	d0e2      	beq.n	bce7a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bceb4:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bceb8:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bceba:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bcebe:	b117      	cbz	r7, bcec6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bcec0:	4638      	mov	r0, r7
   bcec2:	f000 f9c9 	bl	bd258 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bcec6:	7b63      	ldrb	r3, [r4, #13]
   bcec8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bcecc:	d141      	bne.n	bcf52 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcece:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bced2:	1c5a      	adds	r2, r3, #1
   bced4:	d00f      	beq.n	bcef6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bced6:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bceda:	bf14      	ite	ne
   bcedc:	2301      	movne	r3, #1
   bcede:	2300      	moveq	r3, #0
   bcee0:	454b      	cmp	r3, r9
   bcee2:	d008      	beq.n	bcef6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bcee4:	6963      	ldr	r3, [r4, #20]
   bcee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bcee8:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bceea:	2900      	cmp	r1, #0
   bceec:	d02c      	beq.n	bcf48 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bceee:	4302      	orrs	r2, r0
   bcef0:	601a      	str	r2, [r3, #0]
   bcef2:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bcef6:	69a1      	ldr	r1, [r4, #24]
   bcef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcefa:	680a      	ldr	r2, [r1, #0]
   bcefc:	4313      	orrs	r3, r2
   bcefe:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcf00:	b117      	cbz	r7, bcf08 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bcf02:	4638      	mov	r0, r7
   bcf04:	f000 f9a8 	bl	bd258 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bcf08:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcf0c:	3301      	adds	r3, #1
   bcf0e:	d006      	beq.n	bcf1e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bcf10:	69e3      	ldr	r3, [r4, #28]
   bcf12:	681a      	ldr	r2, [r3, #0]
   bcf14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcf16:	421a      	tst	r2, r3
            reply |= b;
   bcf18:	bf18      	it	ne
   bcf1a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bcf1e:	69a1      	ldr	r1, [r4, #24]
   bcf20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcf22:	680a      	ldr	r2, [r1, #0]
   bcf24:	ea22 0303 	bic.w	r3, r2, r3
   bcf28:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bcf2a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcf2e:	3301      	adds	r3, #1
        buffer[i] = reply;
   bcf30:	bf18      	it	ne
   bcf32:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bcf36:	7b23      	ldrb	r3, [r4, #12]
   bcf38:	2b00      	cmp	r3, #0
   bcf3a:	d132      	bne.n	bcfa2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bcf3c:	0076      	lsls	r6, r6, #1
   bcf3e:	b2f6      	uxtb	r6, r6
   bcf40:	2e00      	cmp	r6, #0
   bcf42:	d1bc      	bne.n	bcebe <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bcf44:	3501      	adds	r5, #1
   bcf46:	e7b2      	b.n	bceae <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bcf48:	ea22 0200 	bic.w	r2, r2, r0
   bcf4c:	601a      	str	r2, [r3, #0]
   bcf4e:	4689      	mov	r9, r1
   bcf50:	e7d1      	b.n	bcef6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bcf52:	69a1      	ldr	r1, [r4, #24]
   bcf54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcf56:	680a      	ldr	r2, [r1, #0]
   bcf58:	4313      	orrs	r3, r2
   bcf5a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcf5c:	b117      	cbz	r7, bcf64 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bcf5e:	4638      	mov	r0, r7
   bcf60:	f000 f97a 	bl	bd258 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bcf64:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bcf68:	3301      	adds	r3, #1
   bcf6a:	d008      	beq.n	bcf7e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bcf6c:	6963      	ldr	r3, [r4, #20]
   bcf6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bcf70:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bcf72:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bcf76:	bf14      	ite	ne
   bcf78:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bcf7a:	438a      	biceq	r2, r1
   bcf7c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bcf7e:	69a1      	ldr	r1, [r4, #24]
   bcf80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcf82:	680a      	ldr	r2, [r1, #0]
   bcf84:	ea22 0303 	bic.w	r3, r2, r3
   bcf88:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bcf8a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcf8e:	3301      	adds	r3, #1
   bcf90:	d0cb      	beq.n	bcf2a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bcf92:	69e3      	ldr	r3, [r4, #28]
   bcf94:	681a      	ldr	r2, [r3, #0]
   bcf96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcf98:	421a      	tst	r2, r3
            reply |= b;
   bcf9a:	bf18      	it	ne
   bcf9c:	ea46 0808 	orrne.w	r8, r6, r8
   bcfa0:	e7c3      	b.n	bcf2a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bcfa2:	0876      	lsrs	r6, r6, #1
   bcfa4:	e7cc      	b.n	bcf40 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bcfa6:	bf00      	nop
   bcfa8:	0007a120 	.word	0x0007a120

000bcfac <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bcfac:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bcfae:	2201      	movs	r2, #1
  uint8_t data = send;
   bcfb0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bcfb4:	f10d 0107 	add.w	r1, sp, #7
   bcfb8:	f7ff ff52 	bl	bce60 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bcfbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bcfc0:	b003      	add	sp, #12
   bcfc2:	f85d fb04 	ldr.w	pc, [sp], #4

000bcfc6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bcfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcfca:	4604      	mov	r4, r0
  if (_spi) {
   bcfcc:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bcfce:	460e      	mov	r6, r1
   bcfd0:	4617      	mov	r7, r2
   bcfd2:	461d      	mov	r5, r3
  if (_spi) {
   bcfd4:	b110      	cbz	r0, bcfdc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bcfd6:	6861      	ldr	r1, [r4, #4]
   bcfd8:	f003 fe00 	bl	c0bdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bcfdc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcfe0:	2100      	movs	r1, #0
   bcfe2:	b280      	uxth	r0, r0
   bcfe4:	f004 fa85 	bl	c14f2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bcfe8:	9b06      	ldr	r3, [sp, #24]
   bcfea:	eb05 0803 	add.w	r8, r5, r3
   bcfee:	4545      	cmp	r5, r8
   bcff0:	d108      	bne.n	bd004 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bcff2:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bcff4:	42b7      	cmp	r7, r6
   bcff6:	d00b      	beq.n	bd010 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bcff8:	f816 1b01 	ldrb.w	r1, [r6], #1
   bcffc:	4620      	mov	r0, r4
   bcffe:	f7ff ffd5 	bl	bcfac <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd002:	e7f7      	b.n	bcff4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd004:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd008:	4620      	mov	r0, r4
   bd00a:	f7ff ffcf 	bl	bcfac <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd00e:	e7ee      	b.n	bcfee <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd010:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd014:	2101      	movs	r1, #1
   bd016:	b280      	uxth	r0, r0
   bd018:	f004 fa6b 	bl	c14f2 <digitalWrite>

  if (_spi) {
   bd01c:	6820      	ldr	r0, [r4, #0]
   bd01e:	b108      	cbz	r0, bd024 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd020:	f003 fdc2 	bl	c0ba8 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd024:	2001      	movs	r0, #1
   bd026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd02a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd02e:	4604      	mov	r4, r0
  if (_spi) {
   bd030:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd032:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd036:	460e      	mov	r6, r1
   bd038:	4617      	mov	r7, r2
   bd03a:	461d      	mov	r5, r3
  if (_spi) {
   bd03c:	b110      	cbz	r0, bd044 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd03e:	6861      	ldr	r1, [r4, #4]
   bd040:	f003 fdcc 	bl	c0bdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd044:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd048:	2100      	movs	r1, #0
   bd04a:	b280      	uxth	r0, r0
   bd04c:	f004 fa51 	bl	c14f2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd050:	4437      	add	r7, r6
   bd052:	42be      	cmp	r6, r7
   bd054:	d10a      	bne.n	bd06c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd056:	9b06      	ldr	r3, [sp, #24]
   bd058:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd05a:	42ae      	cmp	r6, r5
   bd05c:	d00c      	beq.n	bd078 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd05e:	4641      	mov	r1, r8
   bd060:	4620      	mov	r0, r4
   bd062:	f7ff ffa3 	bl	bcfac <_ZN18Adafruit_SPIDevice8transferEh>
   bd066:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd06a:	e7f6      	b.n	bd05a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd06c:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd070:	4620      	mov	r0, r4
   bd072:	f7ff ff9b 	bl	bcfac <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd076:	e7ec      	b.n	bd052 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd078:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd07c:	2101      	movs	r1, #1
   bd07e:	b280      	uxth	r0, r0
   bd080:	f004 fa37 	bl	c14f2 <digitalWrite>

  if (_spi) {
   bd084:	6820      	ldr	r0, [r4, #0]
   bd086:	b108      	cbz	r0, bd08c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd088:	f003 fd8e 	bl	c0ba8 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd08c:	2001      	movs	r0, #1
   bd08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bd094 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bd094:	b508      	push	{r3, lr}
   bd096:	4b02      	ldr	r3, [pc, #8]	; (bd0a0 <hal_ble_stack_init+0xc>)
   bd098:	681b      	ldr	r3, [r3, #0]
   bd09a:	689b      	ldr	r3, [r3, #8]
   bd09c:	9301      	str	r3, [sp, #4]
   bd09e:	bd08      	pop	{r3, pc}
   bd0a0:	00030278 	.word	0x00030278

000bd0a4 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bd0a4:	b508      	push	{r3, lr}
   bd0a6:	4b02      	ldr	r3, [pc, #8]	; (bd0b0 <hal_ble_gap_set_tx_power+0xc>)
   bd0a8:	681b      	ldr	r3, [r3, #0]
   bd0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd0ac:	9301      	str	r3, [sp, #4]
   bd0ae:	bd08      	pop	{r3, pc}
   bd0b0:	00030278 	.word	0x00030278

000bd0b4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bd0b4:	b508      	push	{r3, lr}
   bd0b6:	4b02      	ldr	r3, [pc, #8]	; (bd0c0 <hal_ble_gap_set_advertising_data+0xc>)
   bd0b8:	681b      	ldr	r3, [r3, #0]
   bd0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd0bc:	9301      	str	r3, [sp, #4]
   bd0be:	bd08      	pop	{r3, pc}
   bd0c0:	00030278 	.word	0x00030278

000bd0c4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bd0c4:	b508      	push	{r3, lr}
   bd0c6:	4b02      	ldr	r3, [pc, #8]	; (bd0d0 <hal_ble_gap_set_scan_response_data+0xc>)
   bd0c8:	681b      	ldr	r3, [r3, #0]
   bd0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd0cc:	9301      	str	r3, [sp, #4]
   bd0ce:	bd08      	pop	{r3, pc}
   bd0d0:	00030278 	.word	0x00030278

000bd0d4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bd0d4:	b508      	push	{r3, lr}
   bd0d6:	4b02      	ldr	r3, [pc, #8]	; (bd0e0 <hal_ble_gap_start_advertising+0xc>)
   bd0d8:	681b      	ldr	r3, [r3, #0]
   bd0da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bd0dc:	9301      	str	r3, [sp, #4]
   bd0de:	bd08      	pop	{r3, pc}
   bd0e0:	00030278 	.word	0x00030278

000bd0e4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bd0e4:	b508      	push	{r3, lr}
   bd0e6:	4b03      	ldr	r3, [pc, #12]	; (bd0f4 <hal_ble_gap_disconnect+0x10>)
   bd0e8:	681b      	ldr	r3, [r3, #0]
   bd0ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd0ee:	9301      	str	r3, [sp, #4]
   bd0f0:	bd08      	pop	{r3, pc}
   bd0f2:	0000      	.short	0x0000
   bd0f4:	00030278 	.word	0x00030278

000bd0f8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bd0f8:	b508      	push	{r3, lr}
   bd0fa:	4b03      	ldr	r3, [pc, #12]	; (bd108 <hal_ble_gatt_server_add_service+0x10>)
   bd0fc:	681b      	ldr	r3, [r3, #0]
   bd0fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd102:	9301      	str	r3, [sp, #4]
   bd104:	bd08      	pop	{r3, pc}
   bd106:	0000      	.short	0x0000
   bd108:	00030278 	.word	0x00030278

000bd10c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd10c:	b508      	push	{r3, lr}
   bd10e:	4b03      	ldr	r3, [pc, #12]	; (bd11c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bd110:	681b      	ldr	r3, [r3, #0]
   bd112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bd116:	9301      	str	r3, [sp, #4]
   bd118:	bd08      	pop	{r3, pc}
   bd11a:	0000      	.short	0x0000
   bd11c:	00030278 	.word	0x00030278

000bd120 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd120:	b508      	push	{r3, lr}
   bd122:	4b03      	ldr	r3, [pc, #12]	; (bd130 <hal_ble_gatt_client_write_with_response+0x10>)
   bd124:	681b      	ldr	r3, [r3, #0]
   bd126:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bd12a:	9301      	str	r3, [sp, #4]
   bd12c:	bd08      	pop	{r3, pc}
   bd12e:	0000      	.short	0x0000
   bd130:	00030278 	.word	0x00030278

000bd134 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd134:	b508      	push	{r3, lr}
   bd136:	4b03      	ldr	r3, [pc, #12]	; (bd144 <hal_ble_gatt_client_write_without_response+0x10>)
   bd138:	681b      	ldr	r3, [r3, #0]
   bd13a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bd13e:	9301      	str	r3, [sp, #4]
   bd140:	bd08      	pop	{r3, pc}
   bd142:	0000      	.short	0x0000
   bd144:	00030278 	.word	0x00030278

000bd148 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bd148:	b508      	push	{r3, lr}
   bd14a:	4b03      	ldr	r3, [pc, #12]	; (bd158 <hal_ble_gatt_server_add_characteristic+0x10>)
   bd14c:	681b      	ldr	r3, [r3, #0]
   bd14e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bd152:	9301      	str	r3, [sp, #4]
   bd154:	bd08      	pop	{r3, pc}
   bd156:	0000      	.short	0x0000
   bd158:	00030278 	.word	0x00030278

000bd15c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bd15c:	b508      	push	{r3, lr}
   bd15e:	4b03      	ldr	r3, [pc, #12]	; (bd16c <hal_ble_set_callback_on_periph_link_events+0x10>)
   bd160:	681b      	ldr	r3, [r3, #0]
   bd162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bd166:	9301      	str	r3, [sp, #4]
   bd168:	bd08      	pop	{r3, pc}
   bd16a:	0000      	.short	0x0000
   bd16c:	00030278 	.word	0x00030278

000bd170 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd170:	b508      	push	{r3, lr}
   bd172:	4b03      	ldr	r3, [pc, #12]	; (bd180 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bd174:	681b      	ldr	r3, [r3, #0]
   bd176:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bd17a:	9301      	str	r3, [sp, #4]
   bd17c:	bd08      	pop	{r3, pc}
   bd17e:	0000      	.short	0x0000
   bd180:	00030278 	.word	0x00030278

000bd184 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd184:	b508      	push	{r3, lr}
   bd186:	4b03      	ldr	r3, [pc, #12]	; (bd194 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bd188:	681b      	ldr	r3, [r3, #0]
   bd18a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bd18e:	9301      	str	r3, [sp, #4]
   bd190:	bd08      	pop	{r3, pc}
   bd192:	0000      	.short	0x0000
   bd194:	00030278 	.word	0x00030278

000bd198 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bd198:	b508      	push	{r3, lr}
   bd19a:	4b02      	ldr	r3, [pc, #8]	; (bd1a4 <os_thread_yield+0xc>)
   bd19c:	681b      	ldr	r3, [r3, #0]
   bd19e:	68db      	ldr	r3, [r3, #12]
   bd1a0:	9301      	str	r3, [sp, #4]
   bd1a2:	bd08      	pop	{r3, pc}
   bd1a4:	00030248 	.word	0x00030248

000bd1a8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bd1a8:	b508      	push	{r3, lr}
   bd1aa:	4b02      	ldr	r3, [pc, #8]	; (bd1b4 <os_thread_scheduling+0xc>)
   bd1ac:	681b      	ldr	r3, [r3, #0]
   bd1ae:	69db      	ldr	r3, [r3, #28]
   bd1b0:	9301      	str	r3, [sp, #4]
   bd1b2:	bd08      	pop	{r3, pc}
   bd1b4:	00030248 	.word	0x00030248

000bd1b8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bd1b8:	b508      	push	{r3, lr}
   bd1ba:	4b02      	ldr	r3, [pc, #8]	; (bd1c4 <os_timer_create+0xc>)
   bd1bc:	681b      	ldr	r3, [r3, #0]
   bd1be:	6a1b      	ldr	r3, [r3, #32]
   bd1c0:	9301      	str	r3, [sp, #4]
   bd1c2:	bd08      	pop	{r3, pc}
   bd1c4:	00030248 	.word	0x00030248

000bd1c8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bd1c8:	b508      	push	{r3, lr}
   bd1ca:	4b02      	ldr	r3, [pc, #8]	; (bd1d4 <os_timer_destroy+0xc>)
   bd1cc:	681b      	ldr	r3, [r3, #0]
   bd1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd1d0:	9301      	str	r3, [sp, #4]
   bd1d2:	bd08      	pop	{r3, pc}
   bd1d4:	00030248 	.word	0x00030248

000bd1d8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bd1d8:	b508      	push	{r3, lr}
   bd1da:	4b02      	ldr	r3, [pc, #8]	; (bd1e4 <os_timer_get_id+0xc>)
   bd1dc:	681b      	ldr	r3, [r3, #0]
   bd1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd1e0:	9301      	str	r3, [sp, #4]
   bd1e2:	bd08      	pop	{r3, pc}
   bd1e4:	00030248 	.word	0x00030248

000bd1e8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bd1e8:	b508      	push	{r3, lr}
   bd1ea:	4b02      	ldr	r3, [pc, #8]	; (bd1f4 <os_timer_change+0xc>)
   bd1ec:	681b      	ldr	r3, [r3, #0]
   bd1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd1f0:	9301      	str	r3, [sp, #4]
   bd1f2:	bd08      	pop	{r3, pc}
   bd1f4:	00030248 	.word	0x00030248

000bd1f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bd1f8:	b508      	push	{r3, lr}
   bd1fa:	4b02      	ldr	r3, [pc, #8]	; (bd204 <os_mutex_recursive_create+0xc>)
   bd1fc:	681b      	ldr	r3, [r3, #0]
   bd1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd200:	9301      	str	r3, [sp, #4]
   bd202:	bd08      	pop	{r3, pc}
   bd204:	00030248 	.word	0x00030248

000bd208 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bd208:	b508      	push	{r3, lr}
   bd20a:	4b02      	ldr	r3, [pc, #8]	; (bd214 <os_mutex_recursive_destroy+0xc>)
   bd20c:	681b      	ldr	r3, [r3, #0]
   bd20e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd210:	9301      	str	r3, [sp, #4]
   bd212:	bd08      	pop	{r3, pc}
   bd214:	00030248 	.word	0x00030248

000bd218 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bd218:	b508      	push	{r3, lr}
   bd21a:	4b02      	ldr	r3, [pc, #8]	; (bd224 <os_mutex_recursive_lock+0xc>)
   bd21c:	681b      	ldr	r3, [r3, #0]
   bd21e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd220:	9301      	str	r3, [sp, #4]
   bd222:	bd08      	pop	{r3, pc}
   bd224:	00030248 	.word	0x00030248

000bd228 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bd228:	b508      	push	{r3, lr}
   bd22a:	4b02      	ldr	r3, [pc, #8]	; (bd234 <os_mutex_recursive_unlock+0xc>)
   bd22c:	681b      	ldr	r3, [r3, #0]
   bd22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd230:	9301      	str	r3, [sp, #4]
   bd232:	bd08      	pop	{r3, pc}
   bd234:	00030248 	.word	0x00030248

000bd238 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bd238:	b508      	push	{r3, lr}
   bd23a:	4b02      	ldr	r3, [pc, #8]	; (bd244 <os_timer_set_id+0xc>)
   bd23c:	681b      	ldr	r3, [r3, #0]
   bd23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd240:	9301      	str	r3, [sp, #4]
   bd242:	bd08      	pop	{r3, pc}
   bd244:	00030248 	.word	0x00030248

000bd248 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bd248:	b508      	push	{r3, lr}
   bd24a:	4b02      	ldr	r3, [pc, #8]	; (bd254 <HAL_RNG_GetRandomNumber+0xc>)
   bd24c:	681b      	ldr	r3, [r3, #0]
   bd24e:	685b      	ldr	r3, [r3, #4]
   bd250:	9301      	str	r3, [sp, #4]
   bd252:	bd08      	pop	{r3, pc}
   bd254:	00030218 	.word	0x00030218

000bd258 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bd258:	b508      	push	{r3, lr}
   bd25a:	4b02      	ldr	r3, [pc, #8]	; (bd264 <HAL_Delay_Microseconds+0xc>)
   bd25c:	681b      	ldr	r3, [r3, #0]
   bd25e:	68db      	ldr	r3, [r3, #12]
   bd260:	9301      	str	r3, [sp, #4]
   bd262:	bd08      	pop	{r3, pc}
   bd264:	00030218 	.word	0x00030218

000bd268 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bd268:	b508      	push	{r3, lr}
   bd26a:	4b02      	ldr	r3, [pc, #8]	; (bd274 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bd26c:	681b      	ldr	r3, [r3, #0]
   bd26e:	691b      	ldr	r3, [r3, #16]
   bd270:	9301      	str	r3, [sp, #4]
   bd272:	bd08      	pop	{r3, pc}
   bd274:	00030218 	.word	0x00030218

000bd278 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bd278:	b508      	push	{r3, lr}
   bd27a:	4b02      	ldr	r3, [pc, #8]	; (bd284 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bd27c:	681b      	ldr	r3, [r3, #0]
   bd27e:	695b      	ldr	r3, [r3, #20]
   bd280:	9301      	str	r3, [sp, #4]
   bd282:	bd08      	pop	{r3, pc}
   bd284:	00030218 	.word	0x00030218

000bd288 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bd288:	b508      	push	{r3, lr}
   bd28a:	4b02      	ldr	r3, [pc, #8]	; (bd294 <hal_rtc_time_is_valid+0xc>)
   bd28c:	681b      	ldr	r3, [r3, #0]
   bd28e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd290:	9301      	str	r3, [sp, #4]
   bd292:	bd08      	pop	{r3, pc}
   bd294:	00030218 	.word	0x00030218

000bd298 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bd298:	b508      	push	{r3, lr}
   bd29a:	4b02      	ldr	r3, [pc, #8]	; (bd2a4 <hal_rtc_get_time+0xc>)
   bd29c:	681b      	ldr	r3, [r3, #0]
   bd29e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd2a0:	9301      	str	r3, [sp, #4]
   bd2a2:	bd08      	pop	{r3, pc}
   bd2a4:	00030218 	.word	0x00030218

000bd2a8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd2a8:	b508      	push	{r3, lr}
   bd2aa:	4b02      	ldr	r3, [pc, #8]	; (bd2b4 <HAL_Validate_Pin_Function+0xc>)
   bd2ac:	681b      	ldr	r3, [r3, #0]
   bd2ae:	685b      	ldr	r3, [r3, #4]
   bd2b0:	9301      	str	r3, [sp, #4]
   bd2b2:	bd08      	pop	{r3, pc}
   bd2b4:	0003022c 	.word	0x0003022c

000bd2b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd2b8:	b508      	push	{r3, lr}
   bd2ba:	4b02      	ldr	r3, [pc, #8]	; (bd2c4 <HAL_Pin_Mode+0xc>)
   bd2bc:	681b      	ldr	r3, [r3, #0]
   bd2be:	689b      	ldr	r3, [r3, #8]
   bd2c0:	9301      	str	r3, [sp, #4]
   bd2c2:	bd08      	pop	{r3, pc}
   bd2c4:	0003022c 	.word	0x0003022c

000bd2c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd2c8:	b508      	push	{r3, lr}
   bd2ca:	4b02      	ldr	r3, [pc, #8]	; (bd2d4 <HAL_Get_Pin_Mode+0xc>)
   bd2cc:	681b      	ldr	r3, [r3, #0]
   bd2ce:	68db      	ldr	r3, [r3, #12]
   bd2d0:	9301      	str	r3, [sp, #4]
   bd2d2:	bd08      	pop	{r3, pc}
   bd2d4:	0003022c 	.word	0x0003022c

000bd2d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd2d8:	b508      	push	{r3, lr}
   bd2da:	4b02      	ldr	r3, [pc, #8]	; (bd2e4 <HAL_GPIO_Write+0xc>)
   bd2dc:	681b      	ldr	r3, [r3, #0]
   bd2de:	691b      	ldr	r3, [r3, #16]
   bd2e0:	9301      	str	r3, [sp, #4]
   bd2e2:	bd08      	pop	{r3, pc}
   bd2e4:	0003022c 	.word	0x0003022c

000bd2e8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd2e8:	b508      	push	{r3, lr}
   bd2ea:	4b02      	ldr	r3, [pc, #8]	; (bd2f4 <HAL_Interrupts_Enable_All+0xc>)
   bd2ec:	681b      	ldr	r3, [r3, #0]
   bd2ee:	6a1b      	ldr	r3, [r3, #32]
   bd2f0:	9301      	str	r3, [sp, #4]
   bd2f2:	bd08      	pop	{r3, pc}
   bd2f4:	0003022c 	.word	0x0003022c

000bd2f8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd2f8:	b508      	push	{r3, lr}
   bd2fa:	4b02      	ldr	r3, [pc, #8]	; (bd304 <HAL_Interrupts_Disable_All+0xc>)
   bd2fc:	681b      	ldr	r3, [r3, #0]
   bd2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd300:	9301      	str	r3, [sp, #4]
   bd302:	bd08      	pop	{r3, pc}
   bd304:	0003022c 	.word	0x0003022c

000bd308 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bd308:	b508      	push	{r3, lr}
   bd30a:	4b02      	ldr	r3, [pc, #8]	; (bd314 <hal_adc_read+0xc>)
   bd30c:	681b      	ldr	r3, [r3, #0]
   bd30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd310:	9301      	str	r3, [sp, #4]
   bd312:	bd08      	pop	{r3, pc}
   bd314:	0003022c 	.word	0x0003022c

000bd318 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd318:	b508      	push	{r3, lr}
   bd31a:	4b02      	ldr	r3, [pc, #8]	; (bd324 <hal_i2c_set_speed+0xc>)
   bd31c:	681b      	ldr	r3, [r3, #0]
   bd31e:	681b      	ldr	r3, [r3, #0]
   bd320:	9301      	str	r3, [sp, #4]
   bd322:	bd08      	pop	{r3, pc}
   bd324:	00030228 	.word	0x00030228

000bd328 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd328:	b508      	push	{r3, lr}
   bd32a:	4b02      	ldr	r3, [pc, #8]	; (bd334 <hal_i2c_begin+0xc>)
   bd32c:	681b      	ldr	r3, [r3, #0]
   bd32e:	68db      	ldr	r3, [r3, #12]
   bd330:	9301      	str	r3, [sp, #4]
   bd332:	bd08      	pop	{r3, pc}
   bd334:	00030228 	.word	0x00030228

000bd338 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd338:	b508      	push	{r3, lr}
   bd33a:	4b02      	ldr	r3, [pc, #8]	; (bd344 <hal_i2c_begin_transmission+0xc>)
   bd33c:	681b      	ldr	r3, [r3, #0]
   bd33e:	699b      	ldr	r3, [r3, #24]
   bd340:	9301      	str	r3, [sp, #4]
   bd342:	bd08      	pop	{r3, pc}
   bd344:	00030228 	.word	0x00030228

000bd348 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd348:	b508      	push	{r3, lr}
   bd34a:	4b02      	ldr	r3, [pc, #8]	; (bd354 <hal_i2c_end_transmission+0xc>)
   bd34c:	681b      	ldr	r3, [r3, #0]
   bd34e:	69db      	ldr	r3, [r3, #28]
   bd350:	9301      	str	r3, [sp, #4]
   bd352:	bd08      	pop	{r3, pc}
   bd354:	00030228 	.word	0x00030228

000bd358 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd358:	b508      	push	{r3, lr}
   bd35a:	4b02      	ldr	r3, [pc, #8]	; (bd364 <hal_i2c_write+0xc>)
   bd35c:	681b      	ldr	r3, [r3, #0]
   bd35e:	6a1b      	ldr	r3, [r3, #32]
   bd360:	9301      	str	r3, [sp, #4]
   bd362:	bd08      	pop	{r3, pc}
   bd364:	00030228 	.word	0x00030228

000bd368 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd368:	b508      	push	{r3, lr}
   bd36a:	4b02      	ldr	r3, [pc, #8]	; (bd374 <hal_i2c_available+0xc>)
   bd36c:	681b      	ldr	r3, [r3, #0]
   bd36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd370:	9301      	str	r3, [sp, #4]
   bd372:	bd08      	pop	{r3, pc}
   bd374:	00030228 	.word	0x00030228

000bd378 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd378:	b508      	push	{r3, lr}
   bd37a:	4b02      	ldr	r3, [pc, #8]	; (bd384 <hal_i2c_read+0xc>)
   bd37c:	681b      	ldr	r3, [r3, #0]
   bd37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd380:	9301      	str	r3, [sp, #4]
   bd382:	bd08      	pop	{r3, pc}
   bd384:	00030228 	.word	0x00030228

000bd388 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd388:	b508      	push	{r3, lr}
   bd38a:	4b02      	ldr	r3, [pc, #8]	; (bd394 <hal_i2c_peek+0xc>)
   bd38c:	681b      	ldr	r3, [r3, #0]
   bd38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd390:	9301      	str	r3, [sp, #4]
   bd392:	bd08      	pop	{r3, pc}
   bd394:	00030228 	.word	0x00030228

000bd398 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd398:	b508      	push	{r3, lr}
   bd39a:	4b02      	ldr	r3, [pc, #8]	; (bd3a4 <hal_i2c_flush+0xc>)
   bd39c:	681b      	ldr	r3, [r3, #0]
   bd39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd3a0:	9301      	str	r3, [sp, #4]
   bd3a2:	bd08      	pop	{r3, pc}
   bd3a4:	00030228 	.word	0x00030228

000bd3a8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd3a8:	b508      	push	{r3, lr}
   bd3aa:	4b02      	ldr	r3, [pc, #8]	; (bd3b4 <hal_i2c_is_enabled+0xc>)
   bd3ac:	681b      	ldr	r3, [r3, #0]
   bd3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd3b0:	9301      	str	r3, [sp, #4]
   bd3b2:	bd08      	pop	{r3, pc}
   bd3b4:	00030228 	.word	0x00030228

000bd3b8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd3b8:	b508      	push	{r3, lr}
   bd3ba:	4b02      	ldr	r3, [pc, #8]	; (bd3c4 <hal_i2c_init+0xc>)
   bd3bc:	681b      	ldr	r3, [r3, #0]
   bd3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd3c0:	9301      	str	r3, [sp, #4]
   bd3c2:	bd08      	pop	{r3, pc}
   bd3c4:	00030228 	.word	0x00030228

000bd3c8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd3c8:	b508      	push	{r3, lr}
   bd3ca:	4b02      	ldr	r3, [pc, #8]	; (bd3d4 <hal_i2c_request_ex+0xc>)
   bd3cc:	681b      	ldr	r3, [r3, #0]
   bd3ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd3d0:	9301      	str	r3, [sp, #4]
   bd3d2:	bd08      	pop	{r3, pc}
   bd3d4:	00030228 	.word	0x00030228

000bd3d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd3d8:	b508      	push	{r3, lr}
   bd3da:	4b02      	ldr	r3, [pc, #8]	; (bd3e4 <inet_inet_ntop+0xc>)
   bd3dc:	681b      	ldr	r3, [r3, #0]
   bd3de:	695b      	ldr	r3, [r3, #20]
   bd3e0:	9301      	str	r3, [sp, #4]
   bd3e2:	bd08      	pop	{r3, pc}
   bd3e4:	00030264 	.word	0x00030264

000bd3e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd3e8:	b508      	push	{r3, lr}
   bd3ea:	4b02      	ldr	r3, [pc, #8]	; (bd3f4 <netdb_freeaddrinfo+0xc>)
   bd3ec:	681b      	ldr	r3, [r3, #0]
   bd3ee:	689b      	ldr	r3, [r3, #8]
   bd3f0:	9301      	str	r3, [sp, #4]
   bd3f2:	bd08      	pop	{r3, pc}
   bd3f4:	00030268 	.word	0x00030268

000bd3f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd3f8:	b508      	push	{r3, lr}
   bd3fa:	4b02      	ldr	r3, [pc, #8]	; (bd404 <netdb_getaddrinfo+0xc>)
   bd3fc:	681b      	ldr	r3, [r3, #0]
   bd3fe:	68db      	ldr	r3, [r3, #12]
   bd400:	9301      	str	r3, [sp, #4]
   bd402:	bd08      	pop	{r3, pc}
   bd404:	00030268 	.word	0x00030268

000bd408 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd408:	b508      	push	{r3, lr}
   bd40a:	4b02      	ldr	r3, [pc, #8]	; (bd414 <HAL_Servo_Attach+0xc>)
   bd40c:	681b      	ldr	r3, [r3, #0]
   bd40e:	691b      	ldr	r3, [r3, #16]
   bd410:	9301      	str	r3, [sp, #4]
   bd412:	bd08      	pop	{r3, pc}
   bd414:	00030224 	.word	0x00030224

000bd418 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd418:	b508      	push	{r3, lr}
   bd41a:	4b02      	ldr	r3, [pc, #8]	; (bd424 <HAL_Servo_Detach+0xc>)
   bd41c:	681b      	ldr	r3, [r3, #0]
   bd41e:	695b      	ldr	r3, [r3, #20]
   bd420:	9301      	str	r3, [sp, #4]
   bd422:	bd08      	pop	{r3, pc}
   bd424:	00030224 	.word	0x00030224

000bd428 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bd428:	b508      	push	{r3, lr}
   bd42a:	4b02      	ldr	r3, [pc, #8]	; (bd434 <HAL_Servo_Write_Pulse_Width+0xc>)
   bd42c:	681b      	ldr	r3, [r3, #0]
   bd42e:	699b      	ldr	r3, [r3, #24]
   bd430:	9301      	str	r3, [sp, #4]
   bd432:	bd08      	pop	{r3, pc}
   bd434:	00030224 	.word	0x00030224

000bd438 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bd438:	b508      	push	{r3, lr}
   bd43a:	4b02      	ldr	r3, [pc, #8]	; (bd444 <hal_spi_begin+0xc>)
   bd43c:	681b      	ldr	r3, [r3, #0]
   bd43e:	681b      	ldr	r3, [r3, #0]
   bd440:	9301      	str	r3, [sp, #4]
   bd442:	bd08      	pop	{r3, pc}
   bd444:	00030230 	.word	0x00030230

000bd448 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bd448:	b508      	push	{r3, lr}
   bd44a:	4b02      	ldr	r3, [pc, #8]	; (bd454 <hal_spi_set_clock_divider+0xc>)
   bd44c:	681b      	ldr	r3, [r3, #0]
   bd44e:	691b      	ldr	r3, [r3, #16]
   bd450:	9301      	str	r3, [sp, #4]
   bd452:	bd08      	pop	{r3, pc}
   bd454:	00030230 	.word	0x00030230

000bd458 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bd458:	b508      	push	{r3, lr}
   bd45a:	4b02      	ldr	r3, [pc, #8]	; (bd464 <hal_spi_transfer+0xc>)
   bd45c:	681b      	ldr	r3, [r3, #0]
   bd45e:	695b      	ldr	r3, [r3, #20]
   bd460:	9301      	str	r3, [sp, #4]
   bd462:	bd08      	pop	{r3, pc}
   bd464:	00030230 	.word	0x00030230

000bd468 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bd468:	b508      	push	{r3, lr}
   bd46a:	4b02      	ldr	r3, [pc, #8]	; (bd474 <hal_spi_init+0xc>)
   bd46c:	681b      	ldr	r3, [r3, #0]
   bd46e:	69db      	ldr	r3, [r3, #28]
   bd470:	9301      	str	r3, [sp, #4]
   bd472:	bd08      	pop	{r3, pc}
   bd474:	00030230 	.word	0x00030230

000bd478 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bd478:	b508      	push	{r3, lr}
   bd47a:	4b02      	ldr	r3, [pc, #8]	; (bd484 <hal_spi_is_enabled+0xc>)
   bd47c:	681b      	ldr	r3, [r3, #0]
   bd47e:	6a1b      	ldr	r3, [r3, #32]
   bd480:	9301      	str	r3, [sp, #4]
   bd482:	bd08      	pop	{r3, pc}
   bd484:	00030230 	.word	0x00030230

000bd488 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bd488:	b508      	push	{r3, lr}
   bd48a:	4b02      	ldr	r3, [pc, #8]	; (bd494 <hal_spi_info+0xc>)
   bd48c:	681b      	ldr	r3, [r3, #0]
   bd48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd490:	9301      	str	r3, [sp, #4]
   bd492:	bd08      	pop	{r3, pc}
   bd494:	00030230 	.word	0x00030230

000bd498 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bd498:	b508      	push	{r3, lr}
   bd49a:	4b02      	ldr	r3, [pc, #8]	; (bd4a4 <hal_spi_transfer_dma+0xc>)
   bd49c:	681b      	ldr	r3, [r3, #0]
   bd49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd4a0:	9301      	str	r3, [sp, #4]
   bd4a2:	bd08      	pop	{r3, pc}
   bd4a4:	00030230 	.word	0x00030230

000bd4a8 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bd4a8:	b508      	push	{r3, lr}
   bd4aa:	4b02      	ldr	r3, [pc, #8]	; (bd4b4 <hal_spi_begin_ext+0xc>)
   bd4ac:	681b      	ldr	r3, [r3, #0]
   bd4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd4b0:	9301      	str	r3, [sp, #4]
   bd4b2:	bd08      	pop	{r3, pc}
   bd4b4:	00030230 	.word	0x00030230

000bd4b8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bd4b8:	b508      	push	{r3, lr}
   bd4ba:	4b02      	ldr	r3, [pc, #8]	; (bd4c4 <hal_spi_transfer_dma_status+0xc>)
   bd4bc:	681b      	ldr	r3, [r3, #0]
   bd4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd4c0:	9301      	str	r3, [sp, #4]
   bd4c2:	bd08      	pop	{r3, pc}
   bd4c4:	00030230 	.word	0x00030230

000bd4c8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bd4c8:	b508      	push	{r3, lr}
   bd4ca:	4b02      	ldr	r3, [pc, #8]	; (bd4d4 <hal_spi_set_settings+0xc>)
   bd4cc:	681b      	ldr	r3, [r3, #0]
   bd4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd4d0:	9301      	str	r3, [sp, #4]
   bd4d2:	bd08      	pop	{r3, pc}
   bd4d4:	00030230 	.word	0x00030230

000bd4d8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bd4d8:	b508      	push	{r3, lr}
   bd4da:	4b02      	ldr	r3, [pc, #8]	; (bd4e4 <hal_spi_acquire+0xc>)
   bd4dc:	681b      	ldr	r3, [r3, #0]
   bd4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd4e0:	9301      	str	r3, [sp, #4]
   bd4e2:	bd08      	pop	{r3, pc}
   bd4e4:	00030230 	.word	0x00030230

000bd4e8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bd4e8:	b508      	push	{r3, lr}
   bd4ea:	4b02      	ldr	r3, [pc, #8]	; (bd4f4 <hal_spi_release+0xc>)
   bd4ec:	681b      	ldr	r3, [r3, #0]
   bd4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd4f0:	9301      	str	r3, [sp, #4]
   bd4f2:	bd08      	pop	{r3, pc}
   bd4f4:	00030230 	.word	0x00030230

000bd4f8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd4f8:	b508      	push	{r3, lr}
   bd4fa:	4b02      	ldr	r3, [pc, #8]	; (bd504 <hal_usart_end+0xc>)
   bd4fc:	681b      	ldr	r3, [r3, #0]
   bd4fe:	689b      	ldr	r3, [r3, #8]
   bd500:	9301      	str	r3, [sp, #4]
   bd502:	bd08      	pop	{r3, pc}
   bd504:	0003023c 	.word	0x0003023c

000bd508 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd508:	b508      	push	{r3, lr}
   bd50a:	4b02      	ldr	r3, [pc, #8]	; (bd514 <hal_usart_write+0xc>)
   bd50c:	681b      	ldr	r3, [r3, #0]
   bd50e:	68db      	ldr	r3, [r3, #12]
   bd510:	9301      	str	r3, [sp, #4]
   bd512:	bd08      	pop	{r3, pc}
   bd514:	0003023c 	.word	0x0003023c

000bd518 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd518:	b508      	push	{r3, lr}
   bd51a:	4b02      	ldr	r3, [pc, #8]	; (bd524 <hal_usart_available+0xc>)
   bd51c:	681b      	ldr	r3, [r3, #0]
   bd51e:	691b      	ldr	r3, [r3, #16]
   bd520:	9301      	str	r3, [sp, #4]
   bd522:	bd08      	pop	{r3, pc}
   bd524:	0003023c 	.word	0x0003023c

000bd528 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd528:	b508      	push	{r3, lr}
   bd52a:	4b02      	ldr	r3, [pc, #8]	; (bd534 <hal_usart_read+0xc>)
   bd52c:	681b      	ldr	r3, [r3, #0]
   bd52e:	695b      	ldr	r3, [r3, #20]
   bd530:	9301      	str	r3, [sp, #4]
   bd532:	bd08      	pop	{r3, pc}
   bd534:	0003023c 	.word	0x0003023c

000bd538 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd538:	b508      	push	{r3, lr}
   bd53a:	4b02      	ldr	r3, [pc, #8]	; (bd544 <hal_usart_peek+0xc>)
   bd53c:	681b      	ldr	r3, [r3, #0]
   bd53e:	699b      	ldr	r3, [r3, #24]
   bd540:	9301      	str	r3, [sp, #4]
   bd542:	bd08      	pop	{r3, pc}
   bd544:	0003023c 	.word	0x0003023c

000bd548 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd548:	b508      	push	{r3, lr}
   bd54a:	4b02      	ldr	r3, [pc, #8]	; (bd554 <hal_usart_flush+0xc>)
   bd54c:	681b      	ldr	r3, [r3, #0]
   bd54e:	69db      	ldr	r3, [r3, #28]
   bd550:	9301      	str	r3, [sp, #4]
   bd552:	bd08      	pop	{r3, pc}
   bd554:	0003023c 	.word	0x0003023c

000bd558 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd558:	b508      	push	{r3, lr}
   bd55a:	4b02      	ldr	r3, [pc, #8]	; (bd564 <hal_usart_is_enabled+0xc>)
   bd55c:	681b      	ldr	r3, [r3, #0]
   bd55e:	6a1b      	ldr	r3, [r3, #32]
   bd560:	9301      	str	r3, [sp, #4]
   bd562:	bd08      	pop	{r3, pc}
   bd564:	0003023c 	.word	0x0003023c

000bd568 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd568:	b508      	push	{r3, lr}
   bd56a:	4b02      	ldr	r3, [pc, #8]	; (bd574 <hal_usart_available_data_for_write+0xc>)
   bd56c:	681b      	ldr	r3, [r3, #0]
   bd56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd570:	9301      	str	r3, [sp, #4]
   bd572:	bd08      	pop	{r3, pc}
   bd574:	0003023c 	.word	0x0003023c

000bd578 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd578:	b508      	push	{r3, lr}
   bd57a:	4b02      	ldr	r3, [pc, #8]	; (bd584 <hal_usart_begin_config+0xc>)
   bd57c:	681b      	ldr	r3, [r3, #0]
   bd57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd580:	9301      	str	r3, [sp, #4]
   bd582:	bd08      	pop	{r3, pc}
   bd584:	0003023c 	.word	0x0003023c

000bd588 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd588:	b508      	push	{r3, lr}
   bd58a:	4b02      	ldr	r3, [pc, #8]	; (bd594 <hal_usart_init_ex+0xc>)
   bd58c:	681b      	ldr	r3, [r3, #0]
   bd58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd590:	9301      	str	r3, [sp, #4]
   bd592:	bd08      	pop	{r3, pc}
   bd594:	0003023c 	.word	0x0003023c

000bd598 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd598:	b508      	push	{r3, lr}
   bd59a:	4b02      	ldr	r3, [pc, #8]	; (bd5a4 <HAL_USB_USART_Init+0xc>)
   bd59c:	681b      	ldr	r3, [r3, #0]
   bd59e:	681b      	ldr	r3, [r3, #0]
   bd5a0:	9301      	str	r3, [sp, #4]
   bd5a2:	bd08      	pop	{r3, pc}
   bd5a4:	0003024c 	.word	0x0003024c

000bd5a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd5a8:	b508      	push	{r3, lr}
   bd5aa:	4b02      	ldr	r3, [pc, #8]	; (bd5b4 <HAL_USB_USART_Begin+0xc>)
   bd5ac:	681b      	ldr	r3, [r3, #0]
   bd5ae:	685b      	ldr	r3, [r3, #4]
   bd5b0:	9301      	str	r3, [sp, #4]
   bd5b2:	bd08      	pop	{r3, pc}
   bd5b4:	0003024c 	.word	0x0003024c

000bd5b8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd5b8:	b508      	push	{r3, lr}
   bd5ba:	4b02      	ldr	r3, [pc, #8]	; (bd5c4 <HAL_USB_USART_End+0xc>)
   bd5bc:	681b      	ldr	r3, [r3, #0]
   bd5be:	689b      	ldr	r3, [r3, #8]
   bd5c0:	9301      	str	r3, [sp, #4]
   bd5c2:	bd08      	pop	{r3, pc}
   bd5c4:	0003024c 	.word	0x0003024c

000bd5c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd5c8:	b508      	push	{r3, lr}
   bd5ca:	4b02      	ldr	r3, [pc, #8]	; (bd5d4 <HAL_USB_USART_Available_Data+0xc>)
   bd5cc:	681b      	ldr	r3, [r3, #0]
   bd5ce:	691b      	ldr	r3, [r3, #16]
   bd5d0:	9301      	str	r3, [sp, #4]
   bd5d2:	bd08      	pop	{r3, pc}
   bd5d4:	0003024c 	.word	0x0003024c

000bd5d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd5d8:	b508      	push	{r3, lr}
   bd5da:	4b02      	ldr	r3, [pc, #8]	; (bd5e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd5dc:	681b      	ldr	r3, [r3, #0]
   bd5de:	695b      	ldr	r3, [r3, #20]
   bd5e0:	9301      	str	r3, [sp, #4]
   bd5e2:	bd08      	pop	{r3, pc}
   bd5e4:	0003024c 	.word	0x0003024c

000bd5e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd5e8:	b508      	push	{r3, lr}
   bd5ea:	4b02      	ldr	r3, [pc, #8]	; (bd5f4 <HAL_USB_USART_Receive_Data+0xc>)
   bd5ec:	681b      	ldr	r3, [r3, #0]
   bd5ee:	699b      	ldr	r3, [r3, #24]
   bd5f0:	9301      	str	r3, [sp, #4]
   bd5f2:	bd08      	pop	{r3, pc}
   bd5f4:	0003024c 	.word	0x0003024c

000bd5f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd5f8:	b508      	push	{r3, lr}
   bd5fa:	4b02      	ldr	r3, [pc, #8]	; (bd604 <HAL_USB_USART_Send_Data+0xc>)
   bd5fc:	681b      	ldr	r3, [r3, #0]
   bd5fe:	69db      	ldr	r3, [r3, #28]
   bd600:	9301      	str	r3, [sp, #4]
   bd602:	bd08      	pop	{r3, pc}
   bd604:	0003024c 	.word	0x0003024c

000bd608 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd608:	b508      	push	{r3, lr}
   bd60a:	4b02      	ldr	r3, [pc, #8]	; (bd614 <HAL_USB_USART_Flush_Data+0xc>)
   bd60c:	681b      	ldr	r3, [r3, #0]
   bd60e:	6a1b      	ldr	r3, [r3, #32]
   bd610:	9301      	str	r3, [sp, #4]
   bd612:	bd08      	pop	{r3, pc}
   bd614:	0003024c 	.word	0x0003024c

000bd618 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd618:	b508      	push	{r3, lr}
   bd61a:	4b02      	ldr	r3, [pc, #8]	; (bd624 <panic_+0xc>)
   bd61c:	681b      	ldr	r3, [r3, #0]
   bd61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd620:	9301      	str	r3, [sp, #4]
   bd622:	bd08      	pop	{r3, pc}
   bd624:	00030260 	.word	0x00030260

000bd628 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd628:	b508      	push	{r3, lr}
   bd62a:	4b02      	ldr	r3, [pc, #8]	; (bd634 <log_message+0xc>)
   bd62c:	681b      	ldr	r3, [r3, #0]
   bd62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd630:	9301      	str	r3, [sp, #4]
   bd632:	bd08      	pop	{r3, pc}
   bd634:	00030260 	.word	0x00030260

000bd638 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd638:	b508      	push	{r3, lr}
   bd63a:	4b02      	ldr	r3, [pc, #8]	; (bd644 <log_level_name+0xc>)
   bd63c:	681b      	ldr	r3, [r3, #0]
   bd63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd640:	9301      	str	r3, [sp, #4]
   bd642:	bd08      	pop	{r3, pc}
   bd644:	00030260 	.word	0x00030260

000bd648 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd648:	b508      	push	{r3, lr}
   bd64a:	4b02      	ldr	r3, [pc, #8]	; (bd654 <log_set_callbacks+0xc>)
   bd64c:	681b      	ldr	r3, [r3, #0]
   bd64e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd650:	9301      	str	r3, [sp, #4]
   bd652:	bd08      	pop	{r3, pc}
   bd654:	00030260 	.word	0x00030260

000bd658 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bd658:	b508      	push	{r3, lr}
   bd65a:	4b03      	ldr	r3, [pc, #12]	; (bd668 <led_set_status_active+0x10>)
   bd65c:	681b      	ldr	r3, [r3, #0]
   bd65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bd662:	9301      	str	r3, [sp, #4]
   bd664:	bd08      	pop	{r3, pc}
   bd666:	0000      	.short	0x0000
   bd668:	00030260 	.word	0x00030260

000bd66c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd66c:	b508      	push	{r3, lr}
   bd66e:	4b02      	ldr	r3, [pc, #8]	; (bd678 <system_mode+0xc>)
   bd670:	681b      	ldr	r3, [r3, #0]
   bd672:	681b      	ldr	r3, [r3, #0]
   bd674:	9301      	str	r3, [sp, #4]
   bd676:	bd08      	pop	{r3, pc}
   bd678:	00030220 	.word	0x00030220

000bd67c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd67c:	b508      	push	{r3, lr}
   bd67e:	4b02      	ldr	r3, [pc, #8]	; (bd688 <set_system_mode+0xc>)
   bd680:	681b      	ldr	r3, [r3, #0]
   bd682:	685b      	ldr	r3, [r3, #4]
   bd684:	9301      	str	r3, [sp, #4]
   bd686:	bd08      	pop	{r3, pc}
   bd688:	00030220 	.word	0x00030220

000bd68c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd68c:	b508      	push	{r3, lr}
   bd68e:	4b02      	ldr	r3, [pc, #8]	; (bd698 <system_delay_ms+0xc>)
   bd690:	681b      	ldr	r3, [r3, #0]
   bd692:	695b      	ldr	r3, [r3, #20]
   bd694:	9301      	str	r3, [sp, #4]
   bd696:	bd08      	pop	{r3, pc}
   bd698:	00030220 	.word	0x00030220

000bd69c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd69c:	b508      	push	{r3, lr}
   bd69e:	4b02      	ldr	r3, [pc, #8]	; (bd6a8 <application_thread_current+0xc>)
   bd6a0:	681b      	ldr	r3, [r3, #0]
   bd6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd6a4:	9301      	str	r3, [sp, #4]
   bd6a6:	bd08      	pop	{r3, pc}
   bd6a8:	00030220 	.word	0x00030220

000bd6ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd6ac:	b508      	push	{r3, lr}
   bd6ae:	4b02      	ldr	r3, [pc, #8]	; (bd6b8 <application_thread_invoke+0xc>)
   bd6b0:	681b      	ldr	r3, [r3, #0]
   bd6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd6b4:	9301      	str	r3, [sp, #4]
   bd6b6:	bd08      	pop	{r3, pc}
   bd6b8:	00030220 	.word	0x00030220

000bd6bc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd6bc:	b508      	push	{r3, lr}
   bd6be:	4b02      	ldr	r3, [pc, #8]	; (bd6c8 <system_thread_get_state+0xc>)
   bd6c0:	681b      	ldr	r3, [r3, #0]
   bd6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd6c4:	9301      	str	r3, [sp, #4]
   bd6c6:	bd08      	pop	{r3, pc}
   bd6c8:	00030220 	.word	0x00030220

000bd6cc <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bd6cc:	b508      	push	{r3, lr}
   bd6ce:	4b02      	ldr	r3, [pc, #8]	; (bd6d8 <led_pattern_period+0xc>)
   bd6d0:	681b      	ldr	r3, [r3, #0]
   bd6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd6d4:	9301      	str	r3, [sp, #4]
   bd6d6:	bd08      	pop	{r3, pc}
   bd6d8:	00030220 	.word	0x00030220

000bd6dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd6dc:	b508      	push	{r3, lr}
   bd6de:	4b03      	ldr	r3, [pc, #12]	; (bd6ec <system_ctrl_set_app_request_handler+0x10>)
   bd6e0:	681b      	ldr	r3, [r3, #0]
   bd6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd6e6:	9301      	str	r3, [sp, #4]
   bd6e8:	bd08      	pop	{r3, pc}
   bd6ea:	0000      	.short	0x0000
   bd6ec:	00030220 	.word	0x00030220

000bd6f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd6f0:	b508      	push	{r3, lr}
   bd6f2:	4b03      	ldr	r3, [pc, #12]	; (bd700 <system_ctrl_set_result+0x10>)
   bd6f4:	681b      	ldr	r3, [r3, #0]
   bd6f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd6fa:	9301      	str	r3, [sp, #4]
   bd6fc:	bd08      	pop	{r3, pc}
   bd6fe:	0000      	.short	0x0000
   bd700:	00030220 	.word	0x00030220

000bd704 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd704:	b508      	push	{r3, lr}
   bd706:	4b02      	ldr	r3, [pc, #8]	; (bd710 <spark_process+0xc>)
   bd708:	681b      	ldr	r3, [r3, #0]
   bd70a:	689b      	ldr	r3, [r3, #8]
   bd70c:	9301      	str	r3, [sp, #4]
   bd70e:	bd08      	pop	{r3, pc}
   bd710:	00030244 	.word	0x00030244

000bd714 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd714:	b508      	push	{r3, lr}
   bd716:	4b02      	ldr	r3, [pc, #8]	; (bd720 <spark_cloud_flag_connected+0xc>)
   bd718:	681b      	ldr	r3, [r3, #0]
   bd71a:	695b      	ldr	r3, [r3, #20]
   bd71c:	9301      	str	r3, [sp, #4]
   bd71e:	bd08      	pop	{r3, pc}
   bd720:	00030244 	.word	0x00030244

000bd724 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd724:	b508      	push	{r3, lr}
   bd726:	4b02      	ldr	r3, [pc, #8]	; (bd730 <spark_send_event+0xc>)
   bd728:	681b      	ldr	r3, [r3, #0]
   bd72a:	6a1b      	ldr	r3, [r3, #32]
   bd72c:	9301      	str	r3, [sp, #4]
   bd72e:	bd08      	pop	{r3, pc}
   bd730:	00030244 	.word	0x00030244

000bd734 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bd734:	b508      	push	{r3, lr}
   bd736:	4b02      	ldr	r3, [pc, #8]	; (bd740 <spark_subscribe+0xc>)
   bd738:	681b      	ldr	r3, [r3, #0]
   bd73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd73c:	9301      	str	r3, [sp, #4]
   bd73e:	bd08      	pop	{r3, pc}
   bd740:	00030244 	.word	0x00030244

000bd744 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd744:	b508      	push	{r3, lr}
   bd746:	4b02      	ldr	r3, [pc, #8]	; (bd750 <spark_sync_time_pending+0xc>)
   bd748:	681b      	ldr	r3, [r3, #0]
   bd74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd74c:	9301      	str	r3, [sp, #4]
   bd74e:	bd08      	pop	{r3, pc}
   bd750:	00030244 	.word	0x00030244

000bd754 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd754:	b508      	push	{r3, lr}
   bd756:	4b02      	ldr	r3, [pc, #8]	; (bd760 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd758:	681b      	ldr	r3, [r3, #0]
   bd75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd75c:	9301      	str	r3, [sp, #4]
   bd75e:	bd08      	pop	{r3, pc}
   bd760:	00030244 	.word	0x00030244

000bd764 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd764:	b508      	push	{r3, lr}
   bd766:	4b02      	ldr	r3, [pc, #8]	; (bd770 <network_connect+0xc>)
   bd768:	681b      	ldr	r3, [r3, #0]
   bd76a:	685b      	ldr	r3, [r3, #4]
   bd76c:	9301      	str	r3, [sp, #4]
   bd76e:	bd08      	pop	{r3, pc}
   bd770:	00030240 	.word	0x00030240

000bd774 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd774:	b508      	push	{r3, lr}
   bd776:	4b02      	ldr	r3, [pc, #8]	; (bd780 <network_connecting+0xc>)
   bd778:	681b      	ldr	r3, [r3, #0]
   bd77a:	689b      	ldr	r3, [r3, #8]
   bd77c:	9301      	str	r3, [sp, #4]
   bd77e:	bd08      	pop	{r3, pc}
   bd780:	00030240 	.word	0x00030240

000bd784 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd784:	b508      	push	{r3, lr}
   bd786:	4b02      	ldr	r3, [pc, #8]	; (bd790 <network_disconnect+0xc>)
   bd788:	681b      	ldr	r3, [r3, #0]
   bd78a:	68db      	ldr	r3, [r3, #12]
   bd78c:	9301      	str	r3, [sp, #4]
   bd78e:	bd08      	pop	{r3, pc}
   bd790:	00030240 	.word	0x00030240

000bd794 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd794:	b508      	push	{r3, lr}
   bd796:	4b02      	ldr	r3, [pc, #8]	; (bd7a0 <network_ready+0xc>)
   bd798:	681b      	ldr	r3, [r3, #0]
   bd79a:	691b      	ldr	r3, [r3, #16]
   bd79c:	9301      	str	r3, [sp, #4]
   bd79e:	bd08      	pop	{r3, pc}
   bd7a0:	00030240 	.word	0x00030240

000bd7a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd7a4:	b508      	push	{r3, lr}
   bd7a6:	4b02      	ldr	r3, [pc, #8]	; (bd7b0 <network_on+0xc>)
   bd7a8:	681b      	ldr	r3, [r3, #0]
   bd7aa:	695b      	ldr	r3, [r3, #20]
   bd7ac:	9301      	str	r3, [sp, #4]
   bd7ae:	bd08      	pop	{r3, pc}
   bd7b0:	00030240 	.word	0x00030240

000bd7b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd7b4:	b508      	push	{r3, lr}
   bd7b6:	4b02      	ldr	r3, [pc, #8]	; (bd7c0 <network_off+0xc>)
   bd7b8:	681b      	ldr	r3, [r3, #0]
   bd7ba:	699b      	ldr	r3, [r3, #24]
   bd7bc:	9301      	str	r3, [sp, #4]
   bd7be:	bd08      	pop	{r3, pc}
   bd7c0:	00030240 	.word	0x00030240

000bd7c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd7c4:	b508      	push	{r3, lr}
   bd7c6:	4b02      	ldr	r3, [pc, #8]	; (bd7d0 <network_listen+0xc>)
   bd7c8:	681b      	ldr	r3, [r3, #0]
   bd7ca:	69db      	ldr	r3, [r3, #28]
   bd7cc:	9301      	str	r3, [sp, #4]
   bd7ce:	bd08      	pop	{r3, pc}
   bd7d0:	00030240 	.word	0x00030240

000bd7d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd7d4:	b508      	push	{r3, lr}
   bd7d6:	4b02      	ldr	r3, [pc, #8]	; (bd7e0 <network_listening+0xc>)
   bd7d8:	681b      	ldr	r3, [r3, #0]
   bd7da:	6a1b      	ldr	r3, [r3, #32]
   bd7dc:	9301      	str	r3, [sp, #4]
   bd7de:	bd08      	pop	{r3, pc}
   bd7e0:	00030240 	.word	0x00030240

000bd7e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd7e4:	b508      	push	{r3, lr}
   bd7e6:	4b02      	ldr	r3, [pc, #8]	; (bd7f0 <network_set_listen_timeout+0xc>)
   bd7e8:	681b      	ldr	r3, [r3, #0]
   bd7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd7ec:	9301      	str	r3, [sp, #4]
   bd7ee:	bd08      	pop	{r3, pc}
   bd7f0:	00030240 	.word	0x00030240

000bd7f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd7f4:	b508      	push	{r3, lr}
   bd7f6:	4b02      	ldr	r3, [pc, #8]	; (bd800 <network_get_listen_timeout+0xc>)
   bd7f8:	681b      	ldr	r3, [r3, #0]
   bd7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd7fc:	9301      	str	r3, [sp, #4]
   bd7fe:	bd08      	pop	{r3, pc}
   bd800:	00030240 	.word	0x00030240

000bd804 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd804:	b508      	push	{r3, lr}
   bd806:	4b02      	ldr	r3, [pc, #8]	; (bd810 <network_is_on+0xc>)
   bd808:	681b      	ldr	r3, [r3, #0]
   bd80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd80c:	9301      	str	r3, [sp, #4]
   bd80e:	bd08      	pop	{r3, pc}
   bd810:	00030240 	.word	0x00030240

000bd814 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd814:	b508      	push	{r3, lr}
   bd816:	4b02      	ldr	r3, [pc, #8]	; (bd820 <network_is_off+0xc>)
   bd818:	681b      	ldr	r3, [r3, #0]
   bd81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd81c:	9301      	str	r3, [sp, #4]
   bd81e:	bd08      	pop	{r3, pc}
   bd820:	00030240 	.word	0x00030240

000bd824 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd824:	b508      	push	{r3, lr}
   bd826:	4b02      	ldr	r3, [pc, #8]	; (bd830 <malloc+0xc>)
   bd828:	681b      	ldr	r3, [r3, #0]
   bd82a:	681b      	ldr	r3, [r3, #0]
   bd82c:	9301      	str	r3, [sp, #4]
   bd82e:	bd08      	pop	{r3, pc}
   bd830:	0003021c 	.word	0x0003021c

000bd834 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd834:	b508      	push	{r3, lr}
   bd836:	4b02      	ldr	r3, [pc, #8]	; (bd840 <free+0xc>)
   bd838:	681b      	ldr	r3, [r3, #0]
   bd83a:	685b      	ldr	r3, [r3, #4]
   bd83c:	9301      	str	r3, [sp, #4]
   bd83e:	bd08      	pop	{r3, pc}
   bd840:	0003021c 	.word	0x0003021c

000bd844 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd844:	b508      	push	{r3, lr}
   bd846:	4b02      	ldr	r3, [pc, #8]	; (bd850 <realloc+0xc>)
   bd848:	681b      	ldr	r3, [r3, #0]
   bd84a:	689b      	ldr	r3, [r3, #8]
   bd84c:	9301      	str	r3, [sp, #4]
   bd84e:	bd08      	pop	{r3, pc}
   bd850:	0003021c 	.word	0x0003021c

000bd854 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bd854:	b508      	push	{r3, lr}
   bd856:	4b02      	ldr	r3, [pc, #8]	; (bd860 <sprintf+0xc>)
   bd858:	681b      	ldr	r3, [r3, #0]
   bd85a:	68db      	ldr	r3, [r3, #12]
   bd85c:	9301      	str	r3, [sp, #4]
   bd85e:	bd08      	pop	{r3, pc}
   bd860:	0003021c 	.word	0x0003021c

000bd864 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd864:	b508      	push	{r3, lr}
   bd866:	4b02      	ldr	r3, [pc, #8]	; (bd870 <sscanf+0xc>)
   bd868:	681b      	ldr	r3, [r3, #0]
   bd86a:	695b      	ldr	r3, [r3, #20]
   bd86c:	9301      	str	r3, [sp, #4]
   bd86e:	bd08      	pop	{r3, pc}
   bd870:	0003021c 	.word	0x0003021c

000bd874 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd874:	b508      	push	{r3, lr}
   bd876:	4b02      	ldr	r3, [pc, #8]	; (bd880 <snprintf+0xc>)
   bd878:	681b      	ldr	r3, [r3, #0]
   bd87a:	69db      	ldr	r3, [r3, #28]
   bd87c:	9301      	str	r3, [sp, #4]
   bd87e:	bd08      	pop	{r3, pc}
   bd880:	0003021c 	.word	0x0003021c

000bd884 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd884:	b508      	push	{r3, lr}
   bd886:	4b02      	ldr	r3, [pc, #8]	; (bd890 <vsnprintf+0xc>)
   bd888:	681b      	ldr	r3, [r3, #0]
   bd88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd88c:	9301      	str	r3, [sp, #4]
   bd88e:	bd08      	pop	{r3, pc}
   bd890:	0003021c 	.word	0x0003021c

000bd894 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd894:	b508      	push	{r3, lr}
   bd896:	4b02      	ldr	r3, [pc, #8]	; (bd8a0 <abort+0xc>)
   bd898:	681b      	ldr	r3, [r3, #0]
   bd89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd89c:	9301      	str	r3, [sp, #4]
   bd89e:	bd08      	pop	{r3, pc}
   bd8a0:	0003021c 	.word	0x0003021c

000bd8a4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd8a4:	b508      	push	{r3, lr}
   bd8a6:	4b02      	ldr	r3, [pc, #8]	; (bd8b0 <_malloc_r+0xc>)
   bd8a8:	681b      	ldr	r3, [r3, #0]
   bd8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd8ac:	9301      	str	r3, [sp, #4]
   bd8ae:	bd08      	pop	{r3, pc}
   bd8b0:	0003021c 	.word	0x0003021c

000bd8b4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd8b4:	b508      	push	{r3, lr}
   bd8b6:	4b02      	ldr	r3, [pc, #8]	; (bd8c0 <__errno+0xc>)
   bd8b8:	681b      	ldr	r3, [r3, #0]
   bd8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd8bc:	9301      	str	r3, [sp, #4]
   bd8be:	bd08      	pop	{r3, pc}
   bd8c0:	0003021c 	.word	0x0003021c

000bd8c4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd8c4:	b508      	push	{r3, lr}
   bd8c6:	4b02      	ldr	r3, [pc, #8]	; (bd8d0 <__assert_func+0xc>)
   bd8c8:	681b      	ldr	r3, [r3, #0]
   bd8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd8cc:	9301      	str	r3, [sp, #4]
   bd8ce:	bd08      	pop	{r3, pc}
   bd8d0:	0003021c 	.word	0x0003021c

000bd8d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd8d4:	b508      	push	{r3, lr}
   bd8d6:	4b02      	ldr	r3, [pc, #8]	; (bd8e0 <newlib_impure_ptr_callback+0xc>)
   bd8d8:	681b      	ldr	r3, [r3, #0]
   bd8da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd8dc:	9301      	str	r3, [sp, #4]
   bd8de:	bd08      	pop	{r3, pc}
   bd8e0:	0003021c 	.word	0x0003021c

000bd8e4 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd8e4:	b508      	push	{r3, lr}
   bd8e6:	4b02      	ldr	r3, [pc, #8]	; (bd8f0 <localtime_r+0xc>)
   bd8e8:	681b      	ldr	r3, [r3, #0]
   bd8ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd8ec:	9301      	str	r3, [sp, #4]
   bd8ee:	bd08      	pop	{r3, pc}
   bd8f0:	0003021c 	.word	0x0003021c

000bd8f4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bd8f4:	428a      	cmp	r2, r1
{
   bd8f6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bd8f8:	d007      	beq.n	bd90a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bd8fa:	1a44      	subs	r4, r0, r1
   bd8fc:	9802      	ldr	r0, [sp, #8]
   bd8fe:	1ac0      	subs	r0, r0, r3
   bd900:	4344      	muls	r4, r0
   bd902:	1a50      	subs	r0, r2, r1
   bd904:	fb94 f0f0 	sdiv	r0, r4, r0
   bd908:	4418      	add	r0, r3
}
   bd90a:	bd10      	pop	{r4, pc}

000bd90c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd90c:	2100      	movs	r1, #0
   bd90e:	f7ff bebd 	b.w	bd68c <system_delay_ms>

000bd912 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd912:	b510      	push	{r4, lr}
      if (_M_empty())
   bd914:	6883      	ldr	r3, [r0, #8]
   bd916:	4604      	mov	r4, r0
   bd918:	b90b      	cbnz	r3, bd91e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd91a:	f003 fe99 	bl	c1650 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd91e:	68c3      	ldr	r3, [r0, #12]
   bd920:	4798      	blx	r3
      if (_M_manager)
   bd922:	68a3      	ldr	r3, [r4, #8]
   bd924:	b11b      	cbz	r3, bd92e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd926:	2203      	movs	r2, #3
   bd928:	4621      	mov	r1, r4
   bd92a:	4620      	mov	r0, r4
   bd92c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd92e:	4620      	mov	r0, r4
   bd930:	2110      	movs	r1, #16
}
   bd932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd936:	f7f6 bbb4 	b.w	b40a2 <_ZdlPvj>

000bd93a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd93a:	4770      	bx	lr

000bd93c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bd93c:	4770      	bx	lr

000bd93e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bd93e:	4770      	bx	lr

000bd940 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd940:	4770      	bx	lr
	...

000bd944 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd944:	4b06      	ldr	r3, [pc, #24]	; (bd960 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd946:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd948:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bd94a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd94e:	d005      	beq.n	bd95c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd950:	4608      	mov	r0, r1
   bd952:	f003 fe81 	bl	c1658 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd956:	2800      	cmp	r0, #0
   bd958:	bf08      	it	eq
   bd95a:	2400      	moveq	r4, #0
      }
   bd95c:	4620      	mov	r0, r4
   bd95e:	bd10      	pop	{r4, pc}
   bd960:	000c71f4 	.word	0x000c71f4

000bd964 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd964:	4b06      	ldr	r3, [pc, #24]	; (bd980 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd966:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd968:	b510      	push	{r4, lr}
   bd96a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd96e:	d005      	beq.n	bd97c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd970:	4608      	mov	r0, r1
   bd972:	f003 fe71 	bl	c1658 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd976:	2800      	cmp	r0, #0
   bd978:	bf08      	it	eq
   bd97a:	2400      	moveq	r4, #0
      }
   bd97c:	4620      	mov	r0, r4
   bd97e:	bd10      	pop	{r4, pc}
   bd980:	000c71f4 	.word	0x000c71f4

000bd984 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd984:	4b06      	ldr	r3, [pc, #24]	; (bd9a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd986:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd988:	b510      	push	{r4, lr}
   bd98a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd98e:	d005      	beq.n	bd99c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd990:	4608      	mov	r0, r1
   bd992:	f003 fe61 	bl	c1658 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd996:	2800      	cmp	r0, #0
   bd998:	bf08      	it	eq
   bd99a:	2400      	moveq	r4, #0
      }
   bd99c:	4620      	mov	r0, r4
   bd99e:	bd10      	pop	{r4, pc}
   bd9a0:	000c71f4 	.word	0x000c71f4

000bd9a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd9a4:	b510      	push	{r4, lr}
   bd9a6:	2168      	movs	r1, #104	; 0x68
   bd9a8:	4604      	mov	r4, r0
   bd9aa:	f7f6 fb7a 	bl	b40a2 <_ZdlPvj>
   bd9ae:	4620      	mov	r0, r4
   bd9b0:	bd10      	pop	{r4, pc}

000bd9b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd9b2:	b510      	push	{r4, lr}
   bd9b4:	2128      	movs	r1, #40	; 0x28
   bd9b6:	4604      	mov	r4, r0
   bd9b8:	f7f6 fb73 	bl	b40a2 <_ZdlPvj>
   bd9bc:	4620      	mov	r0, r4
   bd9be:	bd10      	pop	{r4, pc}

000bd9c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd9c0:	b510      	push	{r4, lr}
   bd9c2:	2130      	movs	r1, #48	; 0x30
   bd9c4:	4604      	mov	r4, r0
   bd9c6:	f7f6 fb6c 	bl	b40a2 <_ZdlPvj>
   bd9ca:	4620      	mov	r0, r4
   bd9cc:	bd10      	pop	{r4, pc}

000bd9ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bd9ce:	2168      	movs	r1, #104	; 0x68
   bd9d0:	f7f6 bb67 	b.w	b40a2 <_ZdlPvj>

000bd9d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd9d4:	2128      	movs	r1, #40	; 0x28
   bd9d6:	f7f6 bb64 	b.w	b40a2 <_ZdlPvj>

000bd9da <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd9da:	2130      	movs	r1, #48	; 0x30
   bd9dc:	f7f6 bb61 	b.w	b40a2 <_ZdlPvj>

000bd9e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bd9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd9e2:	2500      	movs	r5, #0
   bd9e4:	1cec      	adds	r4, r5, #3
   bd9e6:	428c      	cmp	r4, r1
   bd9e8:	d80d      	bhi.n	bda06 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bd9ea:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bd9ec:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bd9ee:	5d87      	ldrb	r7, [r0, r6]
   bd9f0:	4297      	cmp	r7, r2
   bd9f2:	d105      	bne.n	bda00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bd9f4:	4426      	add	r6, r4
   bd9f6:	42b1      	cmp	r1, r6
   bd9f8:	d305      	bcc.n	bda06 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bd9fa:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bd9fc:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bd9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bda00:	3401      	adds	r4, #1
   bda02:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bda04:	e7ee      	b.n	bd9e4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bda06:	2000      	movs	r0, #0
   bda08:	e7f9      	b.n	bd9fe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bda0c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bda0c:	4a02      	ldr	r2, [pc, #8]	; (bda18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bda0e:	4903      	ldr	r1, [pc, #12]	; (bda1c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bda10:	200a      	movs	r0, #10
   bda12:	f7ff be01 	b.w	bd618 <panic_>
   bda16:	bf00      	nop
   bda18:	000bd259 	.word	0x000bd259
   bda1c:	000c7051 	.word	0x000c7051

000bda20 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bda20:	b430      	push	{r4, r5}
   bda22:	460d      	mov	r5, r1
   bda24:	4611      	mov	r1, r2
   bda26:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bda28:	6803      	ldr	r3, [r0, #0]
   bda2a:	6809      	ldr	r1, [r1, #0]
   bda2c:	6828      	ldr	r0, [r5, #0]
   bda2e:	e9d3 4300 	ldrd	r4, r3, [r3]
   bda32:	46a4      	mov	ip, r4
      }
   bda34:	bc30      	pop	{r4, r5}
   bda36:	4760      	bx	ip

000bda38 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bda38:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bda3a:	b538      	push	{r3, r4, r5, lr}
   bda3c:	4604      	mov	r4, r0
	switch (__op)
   bda3e:	d102      	bne.n	bda46 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bda40:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bda42:	6023      	str	r3, [r4, #0]
	}
   bda44:	e003      	b.n	bda4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bda46:	2a02      	cmp	r2, #2
   bda48:	d003      	beq.n	bda52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bda4a:	2a03      	cmp	r2, #3
   bda4c:	d00d      	beq.n	bda6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bda4e:	2000      	movs	r0, #0
   bda50:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bda52:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bda54:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bda56:	f7f6 fb1e 	bl	b4096 <_Znwj>
   bda5a:	4603      	mov	r3, r0
   bda5c:	2800      	cmp	r0, #0
   bda5e:	d0f0      	beq.n	bda42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bda60:	e895 0003 	ldmia.w	r5, {r0, r1}
   bda64:	e883 0003 	stmia.w	r3, {r0, r1}
   bda68:	e7eb      	b.n	bda42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bda6a:	6800      	ldr	r0, [r0, #0]
   bda6c:	2800      	cmp	r0, #0
   bda6e:	d0ee      	beq.n	bda4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bda70:	2108      	movs	r1, #8
   bda72:	f7f6 fb16 	bl	b40a2 <_ZdlPvj>
   bda76:	e7ea      	b.n	bda4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bda78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bda78:	b510      	push	{r4, lr}
   bda7a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bda7c:	3058      	adds	r0, #88	; 0x58
   bda7e:	f7f6 fcad 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bda82:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bda86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bda8a:	f003 b9a5 	b.w	c0dd8 <_ZN6StringD1Ev>

000bda8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bda8e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bda90:	6843      	ldr	r3, [r0, #4]
   bda92:	3b01      	subs	r3, #1
    {
   bda94:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bda96:	6043      	str	r3, [r0, #4]
   bda98:	b963      	cbnz	r3, bdab4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bda9a:	6803      	ldr	r3, [r0, #0]
   bda9c:	689b      	ldr	r3, [r3, #8]
   bda9e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bdaa0:	68a3      	ldr	r3, [r4, #8]
   bdaa2:	3b01      	subs	r3, #1
   bdaa4:	60a3      	str	r3, [r4, #8]
   bdaa6:	b92b      	cbnz	r3, bdab4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bdaa8:	6823      	ldr	r3, [r4, #0]
   bdaaa:	4620      	mov	r0, r4
   bdaac:	68db      	ldr	r3, [r3, #12]
    }
   bdaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bdab2:	4718      	bx	r3
    }
   bdab4:	bd10      	pop	{r4, pc}

000bdab6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bdab6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bdaba:	b2da      	uxtb	r2, r3
   bdabc:	2a09      	cmp	r2, #9
   bdabe:	d801      	bhi.n	bdac4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bdac0:	4618      	mov	r0, r3
   bdac2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bdac4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bdac8:	2b05      	cmp	r3, #5
   bdaca:	d801      	bhi.n	bdad0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bdacc:	3857      	subs	r0, #87	; 0x57
   bdace:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bdad0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bdad4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bdad6:	bf94      	ite	ls
   bdad8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bdada:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   bdade:	4770      	bx	lr

000bdae0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bdae0:	b510      	push	{r4, lr}
            locked_(false) {
   bdae2:	2300      	movs	r3, #0
   bdae4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bdae6:	4b04      	ldr	r3, [pc, #16]	; (bdaf8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bdae8:	4604      	mov	r4, r0
   bdaea:	6818      	ldr	r0, [r3, #0]
   bdaec:	f7ff fb94 	bl	bd218 <os_mutex_recursive_lock>
        locked_ = true;
   bdaf0:	2301      	movs	r3, #1
   bdaf2:	7023      	strb	r3, [r4, #0]
    }
   bdaf4:	4620      	mov	r0, r4
   bdaf6:	bd10      	pop	{r4, pc}
   bdaf8:	2003e628 	.word	0x2003e628

000bdafc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bdafc:	b510      	push	{r4, lr}
        if (locked_) {
   bdafe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bdb00:	4604      	mov	r4, r0
        if (locked_) {
   bdb02:	b11b      	cbz	r3, bdb0c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bdb04:	4b02      	ldr	r3, [pc, #8]	; (bdb10 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bdb06:	6818      	ldr	r0, [r3, #0]
   bdb08:	f7ff fb8e 	bl	bd228 <os_mutex_recursive_unlock>
    }
   bdb0c:	4620      	mov	r0, r4
   bdb0e:	bd10      	pop	{r4, pc}
   bdb10:	2003e628 	.word	0x2003e628

000bdb14 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bdb14:	b082      	sub	sp, #8
   bdb16:	4603      	mov	r3, r0
    address_ = addr;
   bdb18:	6808      	ldr	r0, [r1, #0]
   bdb1a:	6849      	ldr	r1, [r1, #4]
   bdb1c:	466a      	mov	r2, sp
   bdb1e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bdb20:	466a      	mov	r2, sp
   bdb22:	ca03      	ldmia	r2!, {r0, r1}
   bdb24:	6018      	str	r0, [r3, #0]
}
   bdb26:	4618      	mov	r0, r3
    address_ = addr.address_;
   bdb28:	6059      	str	r1, [r3, #4]
}
   bdb2a:	b002      	add	sp, #8
   bdb2c:	4770      	bx	lr

000bdb2e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bdb2e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bdb30:	7982      	ldrb	r2, [r0, #6]
   bdb32:	798b      	ldrb	r3, [r1, #6]
   bdb34:	429a      	cmp	r2, r3
   bdb36:	d106      	bne.n	bdb46 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bdb38:	2206      	movs	r2, #6
   bdb3a:	f005 ff79 	bl	c3a30 <memcmp>
   bdb3e:	fab0 f080 	clz	r0, r0
   bdb42:	0940      	lsrs	r0, r0, #5
}
   bdb44:	bd08      	pop	{r3, pc}
    return false;
   bdb46:	2000      	movs	r0, #0
   bdb48:	e7fc      	b.n	bdb44 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bdb4a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bdb4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bdb4e:	6003      	str	r3, [r0, #0]
   bdb50:	8083      	strh	r3, [r0, #4]
}
   bdb52:	2000      	movs	r0, #0
   bdb54:	4770      	bx	lr

000bdb56 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bdb56:	b508      	push	{r3, lr}
   bdb58:	4602      	mov	r2, r0
        : address_{} {
   bdb5a:	2100      	movs	r1, #0
   bdb5c:	6001      	str	r1, [r0, #0]
   bdb5e:	6041      	str	r1, [r0, #4]
    clear();
   bdb60:	f7ff fff3 	bl	bdb4a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bdb64:	7191      	strb	r1, [r2, #6]
}
   bdb66:	4610      	mov	r0, r2
   bdb68:	bd08      	pop	{r3, pc}
	...

000bdb6c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bdb6c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bdb6e:	2301      	movs	r3, #1
   bdb70:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdb72:	4b05      	ldr	r3, [pc, #20]	; (bdb88 <_ZN8particle7BleUuidC1Ev+0x1c>)
   bdb74:	4602      	mov	r2, r0
   bdb76:	f103 0110 	add.w	r1, r3, #16
   bdb7a:	f853 4b04 	ldr.w	r4, [r3], #4
   bdb7e:	f842 4b04 	str.w	r4, [r2], #4
   bdb82:	428b      	cmp	r3, r1
   bdb84:	d1f9      	bne.n	bdb7a <_ZN8particle7BleUuidC1Ev+0xe>
}
   bdb86:	bd10      	pop	{r4, pc}
   bdb88:	000c7202 	.word	0x000c7202

000bdb8c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bdb8c:	b510      	push	{r4, lr}
    if (uuid128) {
   bdb8e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bdb90:	4604      	mov	r4, r0
    if (uuid128) {
   bdb92:	b1b1      	cbz	r1, bdbc2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bdb94:	2a01      	cmp	r2, #1
   bdb96:	f101 0210 	add.w	r2, r1, #16
   bdb9a:	d10a      	bne.n	bdbb2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bdb9c:	4601      	mov	r1, r0
   bdb9e:	f853 0b04 	ldr.w	r0, [r3], #4
   bdba2:	f841 0b04 	str.w	r0, [r1], #4
   bdba6:	4293      	cmp	r3, r2
   bdba8:	d1f9      	bne.n	bdb9e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bdbaa:	2301      	movs	r3, #1
   bdbac:	6123      	str	r3, [r4, #16]
}
   bdbae:	4620      	mov	r0, r4
   bdbb0:	bd10      	pop	{r4, pc}
   bdbb2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bdbb4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bdbb8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bdbbc:	429a      	cmp	r2, r3
   bdbbe:	d1f9      	bne.n	bdbb4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bdbc0:	e7f3      	b.n	bdbaa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bdbc2:	2210      	movs	r2, #16
   bdbc4:	f005 ff6c 	bl	c3aa0 <memset>
   bdbc8:	e7f1      	b.n	bdbae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bdbca <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bdbca:	b538      	push	{r3, r4, r5, lr}
   bdbcc:	4604      	mov	r4, r0
   bdbce:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bdbd0:	461a      	mov	r2, r3
   bdbd2:	f7ff ffdb 	bl	bdb8c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bdbd6:	81a5      	strh	r5, [r4, #12]
}
   bdbd8:	4620      	mov	r0, r4
   bdbda:	bd38      	pop	{r3, r4, r5, pc}

000bdbdc <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bdbdc:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bdbde:	6902      	ldr	r2, [r0, #16]
   bdbe0:	b922      	cbnz	r2, bdbec <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bdbe2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdbe4:	3800      	subs	r0, #0
   bdbe6:	bf18      	it	ne
   bdbe8:	2001      	movne	r0, #1
}
   bdbea:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdbec:	4902      	ldr	r1, [pc, #8]	; (bdbf8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bdbee:	2210      	movs	r2, #16
   bdbf0:	f005 ff1e 	bl	c3a30 <memcmp>
   bdbf4:	e7f6      	b.n	bdbe4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   bdbf6:	bf00      	nop
   bdbf8:	000c7222 	.word	0x000c7222

000bdbfc <_ZNK8particle7BleUuid4typeEv>:
}
   bdbfc:	6900      	ldr	r0, [r0, #16]
   bdbfe:	4770      	bx	lr

000bdc00 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bdc00:	b538      	push	{r3, r4, r5, lr}
   bdc02:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bdc04:	2214      	movs	r2, #20
   bdc06:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bdc08:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bdc0a:	f005 ff49 	bl	c3aa0 <memset>
    if (type_ == BleUuidType::SHORT) {
   bdc0e:	6923      	ldr	r3, [r4, #16]
   bdc10:	b91b      	cbnz	r3, bdc1a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bdc12:	89a3      	ldrh	r3, [r4, #12]
   bdc14:	802b      	strh	r3, [r5, #0]
}
   bdc16:	4628      	mov	r0, r5
   bdc18:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bdc1a:	2301      	movs	r3, #1
   bdc1c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bdc1e:	4621      	mov	r1, r4
   bdc20:	462b      	mov	r3, r5
   bdc22:	f104 0210 	add.w	r2, r4, #16
   bdc26:	f851 0b04 	ldr.w	r0, [r1], #4
   bdc2a:	f843 0b04 	str.w	r0, [r3], #4
   bdc2e:	4291      	cmp	r1, r2
   bdc30:	d1f9      	bne.n	bdc26 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bdc32:	e7f0      	b.n	bdc16 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bdc34 <_ZNK8particle7BleUuid7shortedEv>:
}
   bdc34:	8980      	ldrh	r0, [r0, #12]
   bdc36:	4770      	bx	lr

000bdc38 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bdc38:	4770      	bx	lr

000bdc3a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bdc3a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdc3c:	6902      	ldr	r2, [r0, #16]
   bdc3e:	690b      	ldr	r3, [r1, #16]
   bdc40:	429a      	cmp	r2, r3
   bdc42:	d106      	bne.n	bdc52 <_ZNK8particle7BleUuideqERKS0_+0x18>
   bdc44:	2210      	movs	r2, #16
   bdc46:	f005 fef3 	bl	c3a30 <memcmp>
   bdc4a:	fab0 f080 	clz	r0, r0
   bdc4e:	0940      	lsrs	r0, r0, #5
}
   bdc50:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdc52:	2000      	movs	r0, #0
   bdc54:	e7fc      	b.n	bdc50 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bdc58 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bdc58:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bdc5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bdc5e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdc60:	4b34      	ldr	r3, [pc, #208]	; (bdd34 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bdc62:	460c      	mov	r4, r1
   bdc64:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdc66:	4602      	mov	r2, r0
   bdc68:	f103 0110 	add.w	r1, r3, #16
   bdc6c:	f853 0b04 	ldr.w	r0, [r3], #4
   bdc70:	f842 0b04 	str.w	r0, [r2], #4
   bdc74:	428b      	cmp	r3, r1
   bdc76:	d1f9      	bne.n	bdc6c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bdc78:	b344      	cbz	r4, bdccc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bdc7a:	2124      	movs	r1, #36	; 0x24
   bdc7c:	4620      	mov	r0, r4
   bdc7e:	f005 ffdc 	bl	c3c3a <strnlen>
   bdc82:	2804      	cmp	r0, #4
   bdc84:	f04f 0500 	mov.w	r5, #0
   bdc88:	d123      	bne.n	bdcd2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   bdc8a:	f8ad 5004 	strh.w	r5, [sp, #4]
   bdc8e:	af01      	add	r7, sp, #4
   bdc90:	1ca5      	adds	r5, r4, #2
   bdc92:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   bdc94:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   bdc98:	f7ff ff0d 	bl	bdab6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   bdc9c:	f1b0 0800 	subs.w	r8, r0, #0
   bdca0:	db12      	blt.n	bdcc8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   bdca2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   bdca6:	f7ff ff06 	bl	bdab6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   bdcaa:	2800      	cmp	r0, #0
   bdcac:	db0c      	blt.n	bdcc8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   bdcae:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdcb0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   bdcb4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdcb6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   bdcba:	d1eb      	bne.n	bdc94 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   bdcbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   bdcc0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   bdcc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bdcc6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bdcc8:	2300      	movs	r3, #0
   bdcca:	6133      	str	r3, [r6, #16]
}
   bdccc:	b002      	add	sp, #8
   bdcce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bdcd2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdcd6:	2124      	movs	r1, #36	; 0x24
   bdcd8:	4620      	mov	r0, r4
   bdcda:	f005 ffae 	bl	c3c3a <strnlen>
   bdcde:	42a8      	cmp	r0, r5
   bdce0:	d807      	bhi.n	bdcf2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bdce2:	4642      	mov	r2, r8
   bdce4:	2100      	movs	r1, #0
   bdce6:	4630      	mov	r0, r6
}
   bdce8:	b002      	add	sp, #8
   bdcea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bdcee:	f005 bed7 	b.w	c3aa0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdcf2:	f1b8 0f00 	cmp.w	r8, #0
   bdcf6:	d0e9      	beq.n	bdccc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bdcf8:	5d60      	ldrb	r0, [r4, r5]
   bdcfa:	f7ff fedc 	bl	bdab6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bdcfe:	0603      	lsls	r3, r0, #24
   bdd00:	d415      	bmi.n	bdd2e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bdd02:	0100      	lsls	r0, r0, #4
   bdd04:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdd08:	b2c7      	uxtb	r7, r0
   bdd0a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bdd0e:	2124      	movs	r1, #36	; 0x24
   bdd10:	4620      	mov	r0, r4
   bdd12:	f005 ff92 	bl	c3c3a <strnlen>
   bdd16:	3501      	adds	r5, #1
   bdd18:	42a8      	cmp	r0, r5
   bdd1a:	d908      	bls.n	bdd2e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bdd1c:	5d60      	ldrb	r0, [r4, r5]
   bdd1e:	f7ff feca 	bl	bdab6 <_ZN8particle11hexToNibbleEc>
   bdd22:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bdd24:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bdd26:	bfa4      	itt	ge
   bdd28:	4338      	orrge	r0, r7
   bdd2a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdd2e:	3501      	adds	r5, #1
   bdd30:	e7d1      	b.n	bdcd6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bdd32:	bf00      	nop
   bdd34:	000c7202 	.word	0x000c7202

000bdd38 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bdd38:	b513      	push	{r0, r1, r4, lr}
   bdd3a:	4604      	mov	r4, r0
   bdd3c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bdd3e:	f7ff ff15 	bl	bdb6c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bdd42:	4620      	mov	r0, r4
   bdd44:	9901      	ldr	r1, [sp, #4]
   bdd46:	f7ff ff87 	bl	bdc58 <_ZN8particle7BleUuid9constructEPKc>
}
   bdd4a:	4620      	mov	r0, r4
   bdd4c:	b002      	add	sp, #8
   bdd4e:	bd10      	pop	{r4, pc}

000bdd50 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bdd50:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bdd52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdd56:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bdd58:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bdd5a:	8043      	strh	r3, [r0, #2]
   bdd5c:	220e      	movs	r2, #14
   bdd5e:	4629      	mov	r1, r5
   bdd60:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bdd62:	7105      	strb	r5, [r0, #4]
   bdd64:	3006      	adds	r0, #6
   bdd66:	f005 fe9b 	bl	c3aa0 <memset>
   bdd6a:	f104 0014 	add.w	r0, r4, #20
   bdd6e:	f7ff fefd 	bl	bdb6c <_ZN8particle7BleUuidC1Ev>
   bdd72:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bdd76:	f7ff fef9 	bl	bdb6c <_ZN8particle7BleUuidC1Ev>
   bdd7a:	4904      	ldr	r1, [pc, #16]	; (bdd8c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bdd7c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bdd80:	f003 f875 	bl	c0e6e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bdd84:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bdd86:	4620      	mov	r0, r4
   bdd88:	bd38      	pop	{r3, r4, r5, pc}
   bdd8a:	bf00      	nop
   bdd8c:	000c7367 	.word	0x000c7367

000bdd90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bdd90:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bdd92:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bdd96:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bdd9a:	4293      	cmp	r3, r2
   bdd9c:	4618      	mov	r0, r3
   bdd9e:	d006      	beq.n	bddae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bdda0:	6804      	ldr	r4, [r0, #0]
   bdda2:	8824      	ldrh	r4, [r4, #0]
   bdda4:	428c      	cmp	r4, r1
   bdda6:	f103 0308 	add.w	r3, r3, #8
   bddaa:	d1f6      	bne.n	bdd9a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bddac:	bd10      	pop	{r4, pc}
        return nullptr;
   bddae:	2000      	movs	r0, #0
   bddb0:	e7fc      	b.n	bddac <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bddb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bddb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bddb6:	4606      	mov	r6, r0
   bddb8:	b085      	sub	sp, #20
   bddba:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bddbc:	460d      	mov	r5, r1
   bddbe:	2900      	cmp	r1, #0
   bddc0:	d050      	beq.n	bde64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bddc2:	2a00      	cmp	r2, #0
   bddc4:	d04e      	beq.n	bde64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bddc6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bddc8:	7823      	ldrb	r3, [r4, #0]
   bddca:	2af4      	cmp	r2, #244	; 0xf4
   bddcc:	bf28      	it	cs
   bddce:	22f4      	movcs	r2, #244	; 0xf4
   bddd0:	b343      	cbz	r3, bde24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bddd2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bddd4:	0798      	lsls	r0, r3, #30
   bddd6:	d509      	bpl.n	bddec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bddd8:	89a0      	ldrh	r0, [r4, #12]
   bddda:	9203      	str	r2, [sp, #12]
   bdddc:	2300      	movs	r3, #0
   bddde:	f7ff f995 	bl	bd10c <hal_ble_gatt_server_set_characteristic_value>
   bdde2:	2800      	cmp	r0, #0
   bdde4:	9a03      	ldr	r2, [sp, #12]
   bdde6:	da03      	bge.n	bddf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bdde8:	b005      	add	sp, #20
   bddea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bddec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bddf0:	6834      	ldr	r4, [r6, #0]
   bddf2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bddf4:	06d9      	lsls	r1, r3, #27
   bddf6:	d509      	bpl.n	bde0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bddf8:	2f01      	cmp	r7, #1
   bddfa:	d007      	beq.n	bde0c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bddfc:	89a0      	ldrh	r0, [r4, #12]
   bddfe:	2300      	movs	r3, #0
   bde00:	4629      	mov	r1, r5
}
   bde02:	b005      	add	sp, #20
   bde04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bde08:	f7ff b9b2 	b.w	bd170 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bde0c:	069b      	lsls	r3, r3, #26
   bde0e:	d5eb      	bpl.n	bdde8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bde10:	2f02      	cmp	r7, #2
   bde12:	d0e9      	beq.n	bdde8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bde14:	89a0      	ldrh	r0, [r4, #12]
   bde16:	2300      	movs	r3, #0
   bde18:	4629      	mov	r1, r5
}
   bde1a:	b005      	add	sp, #20
   bde1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bde20:	f7ff b9b0 	b.w	bd184 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bde24:	8860      	ldrh	r0, [r4, #2]
   bde26:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bde2a:	4288      	cmp	r0, r1
   bde2c:	d01c      	beq.n	bde68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bde2e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bde30:	074e      	lsls	r6, r1, #29
   bde32:	d501      	bpl.n	bde38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bde34:	2f01      	cmp	r7, #1
   bde36:	d104      	bne.n	bde42 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bde38:	070b      	lsls	r3, r1, #28
   bde3a:	d409      	bmi.n	bde50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bde3c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bde40:	e7d2      	b.n	bdde8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bde42:	89a1      	ldrh	r1, [r4, #12]
   bde44:	9300      	str	r3, [sp, #0]
   bde46:	4613      	mov	r3, r2
   bde48:	462a      	mov	r2, r5
   bde4a:	f7ff f973 	bl	bd134 <hal_ble_gatt_client_write_without_response>
   bde4e:	e7cb      	b.n	bdde8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bde50:	2f02      	cmp	r7, #2
   bde52:	d0f3      	beq.n	bde3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bde54:	2300      	movs	r3, #0
   bde56:	89a1      	ldrh	r1, [r4, #12]
   bde58:	9300      	str	r3, [sp, #0]
   bde5a:	4613      	mov	r3, r2
   bde5c:	462a      	mov	r2, r5
   bde5e:	f7ff f95f 	bl	bd120 <hal_ble_gatt_client_write_with_response>
   bde62:	e7c1      	b.n	bdde8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bde64:	4802      	ldr	r0, [pc, #8]	; (bde70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bde66:	e7bf      	b.n	bdde8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bde68:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bde6c:	e7bc      	b.n	bdde8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bde6e:	bf00      	nop
   bde70:	fffffef2 	.word	0xfffffef2

000bde74 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bde74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bde78:	2600      	movs	r6, #0
   bde7a:	6006      	str	r6, [r0, #0]
   bde7c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bde7e:	2028      	movs	r0, #40	; 0x28
   bde80:	460c      	mov	r4, r1
   bde82:	f7f6 f908 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bde86:	1e05      	subs	r5, r0, #0
   bde88:	f105 080c 	add.w	r8, r5, #12
   bde8c:	d00f      	beq.n	bdeae <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bde8e:	2301      	movs	r3, #1
   bde90:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bde94:	4b08      	ldr	r3, [pc, #32]	; (bdeb8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bde96:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bde98:	4640      	mov	r0, r8
   bde9a:	f7ff fe67 	bl	bdb6c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bde9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bdea0:	622e      	str	r6, [r5, #32]
   bdea2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bdea6:	4646      	mov	r6, r8
   bdea8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bdeaa:	6823      	ldr	r3, [r4, #0]
   bdeac:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bdeae:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdeb2:	4638      	mov	r0, r7
   bdeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdeb8:	000c71c4 	.word	0x000c71c4

000bdebc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bdebc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdebe:	2500      	movs	r5, #0
   bdec0:	6005      	str	r5, [r0, #0]
   bdec2:	4606      	mov	r6, r0
   bdec4:	2030      	movs	r0, #48	; 0x30
   bdec6:	f7f6 f8e6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdeca:	4604      	mov	r4, r0
   bdecc:	b188      	cbz	r0, bdef2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bdece:	2301      	movs	r3, #1
   bded0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bded4:	4b09      	ldr	r3, [pc, #36]	; (bdefc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bded6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bded8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdedc:	8183      	strh	r3, [r0, #12]
   bdede:	300e      	adds	r0, #14
   bdee0:	f7ff fe39 	bl	bdb56 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bdee4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bdee8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bdeec:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bdef0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bdef2:	6074      	str	r4, [r6, #4]
   bdef4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bdef6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdef8:	4630      	mov	r0, r6
   bdefa:	bd70      	pop	{r4, r5, r6, pc}
   bdefc:	000c71e0 	.word	0x000c71e0

000bdf00 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bdf00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdf02:	460d      	mov	r5, r1
   bdf04:	4604      	mov	r4, r0
    WiringBleLock lk;
   bdf06:	a801      	add	r0, sp, #4
   bdf08:	f7ff fdea 	bl	bdae0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bdf0c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bdf0e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bdf12:	6023      	str	r3, [r4, #0]
   bdf14:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bdf18:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bdf1a:	a801      	add	r0, sp, #4
   bdf1c:	f7ff fdee 	bl	bdafc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bdf20:	4620      	mov	r0, r4
   bdf22:	b003      	add	sp, #12
   bdf24:	bd30      	pop	{r4, r5, pc}

000bdf26 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bdf26:	b530      	push	{r4, r5, lr}
   bdf28:	4605      	mov	r5, r0
   bdf2a:	b087      	sub	sp, #28
   bdf2c:	460c      	mov	r4, r1
    WiringBleLock lk;
   bdf2e:	a801      	add	r0, sp, #4
   bdf30:	f7ff fdd6 	bl	bdae0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bdf34:	682a      	ldr	r2, [r5, #0]
   bdf36:	6823      	ldr	r3, [r4, #0]
   bdf38:	8812      	ldrh	r2, [r2, #0]
   bdf3a:	881b      	ldrh	r3, [r3, #0]
   bdf3c:	429a      	cmp	r2, r3
   bdf3e:	d10d      	bne.n	bdf5c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bdf40:	4629      	mov	r1, r5
   bdf42:	a802      	add	r0, sp, #8
   bdf44:	f7ff ffdc 	bl	bdf00 <_ZNK8particle13BlePeerDevice7addressEv>
   bdf48:	4621      	mov	r1, r4
   bdf4a:	a804      	add	r0, sp, #16
   bdf4c:	f7ff ffd8 	bl	bdf00 <_ZNK8particle13BlePeerDevice7addressEv>
   bdf50:	a904      	add	r1, sp, #16
   bdf52:	a802      	add	r0, sp, #8
   bdf54:	f7ff fdeb 	bl	bdb2e <_ZNK8particle10BleAddresseqERKS0_>
   bdf58:	4604      	mov	r4, r0
   bdf5a:	b900      	cbnz	r0, bdf5e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bdf5c:	2400      	movs	r4, #0
    WiringBleLock lk;
   bdf5e:	a801      	add	r0, sp, #4
   bdf60:	f7ff fdcc 	bl	bdafc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bdf64:	4620      	mov	r0, r4
   bdf66:	b007      	add	sp, #28
   bdf68:	bd30      	pop	{r4, r5, pc}
	...

000bdf6c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bdf6c:	b510      	push	{r4, lr}
   bdf6e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bdf70:	2064      	movs	r0, #100	; 0x64
   bdf72:	f7f6 f890 	bl	b4096 <_Znwj>
   bdf76:	b168      	cbz	r0, bdf94 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bdf78:	2300      	movs	r3, #0
   bdf7a:	e9c0 3300 	strd	r3, r3, [r0]
   bdf7e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bdf82:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bdf86:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bdf8a:	6203      	str	r3, [r0, #32]
   bdf8c:	62c3      	str	r3, [r0, #44]	; 0x2c
   bdf8e:	63c3      	str	r3, [r0, #60]	; 0x3c
   bdf90:	64c3      	str	r3, [r0, #76]	; 0x4c
   bdf92:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bdf94:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bdf96:	b920      	cbnz	r0, bdfa2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bdf98:	4a0a      	ldr	r2, [pc, #40]	; (bdfc4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bdf9a:	490b      	ldr	r1, [pc, #44]	; (bdfc8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bdf9c:	200a      	movs	r0, #10
   bdf9e:	f7ff fb3b 	bl	bd618 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bdfa2:	2000      	movs	r0, #0
   bdfa4:	f7ff f876 	bl	bd094 <hal_ble_stack_init>
   bdfa8:	b120      	cbz	r0, bdfb4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bdfaa:	4a06      	ldr	r2, [pc, #24]	; (bdfc4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bdfac:	4907      	ldr	r1, [pc, #28]	; (bdfcc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bdfae:	200a      	movs	r0, #10
   bdfb0:	f7ff fb32 	bl	bd618 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bdfb4:	6821      	ldr	r1, [r4, #0]
   bdfb6:	4806      	ldr	r0, [pc, #24]	; (bdfd0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bdfb8:	2200      	movs	r2, #0
   bdfba:	f7ff f8cf 	bl	bd15c <hal_ble_set_callback_on_periph_link_events>
}
   bdfbe:	4620      	mov	r0, r4
   bdfc0:	bd10      	pop	{r4, pc}
   bdfc2:	bf00      	nop
   bdfc4:	000bd259 	.word	0x000bd259
   bdfc8:	000c7051 	.word	0x000c7051
   bdfcc:	000c708f 	.word	0x000c708f
   bdfd0:	000be591 	.word	0x000be591

000bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bdfd4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bdfd6:	4c0a      	ldr	r4, [pc, #40]	; (be000 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bdfd8:	7823      	ldrb	r3, [r4, #0]
   bdfda:	f3bf 8f5b 	dmb	ish
   bdfde:	07db      	lsls	r3, r3, #31
   bdfe0:	d40c      	bmi.n	bdffc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bdfe2:	4620      	mov	r0, r4
   bdfe4:	f7f6 f86c 	bl	b40c0 <__cxa_guard_acquire>
   bdfe8:	b140      	cbz	r0, bdffc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bdfea:	4806      	ldr	r0, [pc, #24]	; (be004 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bdfec:	f7ff ffbe 	bl	bdf6c <_ZN8particle14BleLocalDeviceC1Ev>
   bdff0:	4620      	mov	r0, r4
   bdff2:	f7f6 f86a 	bl	b40ca <__cxa_guard_release>
   bdff6:	4804      	ldr	r0, [pc, #16]	; (be008 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bdff8:	f005 fd04 	bl	c3a04 <atexit>
    return instance;
}
   bdffc:	4801      	ldr	r0, [pc, #4]	; (be004 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bdffe:	bd10      	pop	{r4, pc}
   be000:	2003e620 	.word	0x2003e620
   be004:	2003e62c 	.word	0x2003e62c
   be008:	000be249 	.word	0x000be249

000be00c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be00c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   be00e:	6803      	ldr	r3, [r0, #0]
   be010:	3b09      	subs	r3, #9
   be012:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be014:	b08d      	sub	sp, #52	; 0x34
   be016:	4604      	mov	r4, r0
   be018:	460d      	mov	r5, r1
    switch (event->type) {
   be01a:	d811      	bhi.n	be040 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   be01c:	f7ff ffda 	bl	bdfd4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   be020:	88a1      	ldrh	r1, [r4, #4]
   be022:	6800      	ldr	r0, [r0, #0]
   be024:	f7ff feb4 	bl	bdd90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   be028:	4603      	mov	r3, r0
   be02a:	b958      	cbnz	r0, be044 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   be02c:	2220      	movs	r2, #32
   be02e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   be032:	4a0b      	ldr	r2, [pc, #44]	; (be060 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   be034:	9200      	str	r2, [sp, #0]
   be036:	490b      	ldr	r1, [pc, #44]	; (be064 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   be038:	aa04      	add	r2, sp, #16
   be03a:	2032      	movs	r0, #50	; 0x32
   be03c:	f7ff faf4 	bl	bd628 <log_message>
}
   be040:	b00d      	add	sp, #52	; 0x34
   be042:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   be044:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   be046:	2a00      	cmp	r2, #0
   be048:	d0fa      	beq.n	be040 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   be04a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be04e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   be052:	e9cd 1203 	strd	r1, r2, [sp, #12]
   be056:	6dac      	ldr	r4, [r5, #88]	; 0x58
   be058:	aa04      	add	r2, sp, #16
   be05a:	a903      	add	r1, sp, #12
   be05c:	47a0      	blx	r4
}
   be05e:	e7ef      	b.n	be040 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   be060:	000c70d1 	.word	0x000c70d1
   be064:	000c7068 	.word	0x000c7068

000be068 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   be068:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   be06a:	2000      	movs	r0, #0
   be06c:	f7ff f812 	bl	bd094 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   be070:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   be074:	bd08      	pop	{r3, pc}

000be076 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   be076:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   be078:	2100      	movs	r1, #0
   be07a:	f7ff b813 	b.w	bd0a4 <hal_ble_gap_set_tx_power>

000be07e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   be07e:	b919      	cbnz	r1, be088 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   be080:	460a      	mov	r2, r1
   be082:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   be084:	f7ff b816 	b.w	bd0b4 <hal_ble_gap_set_advertising_data>
   be088:	e9d1 0100 	ldrd	r0, r1, [r1]
   be08c:	2200      	movs	r2, #0
   be08e:	e7f9      	b.n	be084 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000be090 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   be090:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   be092:	69d8      	ldr	r0, [r3, #28]
}
   be094:	2800      	cmp	r0, #0
   be096:	bfd4      	ite	le
   be098:	2000      	movle	r0, #0
   be09a:	2001      	movgt	r0, #1
   be09c:	4770      	bx	lr

000be09e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be09e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be0a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be0a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be0a6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   be0aa:	42ae      	cmp	r6, r5
   be0ac:	d004      	beq.n	be0b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   be0ae:	4628      	mov	r0, r5
   be0b0:	f002 fe92 	bl	c0dd8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   be0b4:	3510      	adds	r5, #16
   be0b6:	e7f8      	b.n	be0aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be0b8:	6820      	ldr	r0, [r4, #0]
   be0ba:	f7ff fbbb 	bl	bd834 <free>
}
   be0be:	4620      	mov	r0, r4
   be0c0:	bd70      	pop	{r4, r5, r6, pc}

000be0c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be0c2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   be0c4:	1e14      	subs	r4, r2, #0
   be0c6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be0c8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   be0ca:	db02      	blt.n	be0d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   be0cc:	1862      	adds	r2, r4, r1
   be0ce:	429a      	cmp	r2, r3
   be0d0:	dd00      	ble.n	be0d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   be0d2:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   be0d4:	682a      	ldr	r2, [r5, #0]
   be0d6:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   be0d8:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   be0da:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   be0dc:	1a52      	subs	r2, r2, r1
   be0de:	f005 fcc5 	bl	c3a6c <memmove>
    size_ -= n;
   be0e2:	686a      	ldr	r2, [r5, #4]
   be0e4:	1b12      	subs	r2, r2, r4
   be0e6:	606a      	str	r2, [r5, #4]
}
   be0e8:	bd38      	pop	{r3, r4, r5, pc}

000be0ea <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be0ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   be0ec:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be0ee:	4604      	mov	r4, r0
   be0f0:	460d      	mov	r5, r1
   be0f2:	ab01      	add	r3, sp, #4
   be0f4:	e9d0 0100 	ldrd	r0, r1, [r0]
   be0f8:	f7ff fc72 	bl	bd9e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   be0fc:	4602      	mov	r2, r0
   be0fe:	b138      	cbz	r0, be110 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   be100:	9901      	ldr	r1, [sp, #4]
   be102:	4620      	mov	r0, r4
   be104:	f7ff ffdd 	bl	be0c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   be108:	4629      	mov	r1, r5
   be10a:	4620      	mov	r0, r4
   be10c:	f7ff ffed 	bl	be0ea <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   be110:	b003      	add	sp, #12
   be112:	bd30      	pop	{r4, r5, pc}

000be114 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   be114:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   be116:	460c      	mov	r4, r1
   be118:	b929      	cbnz	r1, be126 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   be11a:	460a      	mov	r2, r1
   be11c:	4608      	mov	r0, r1
}
   be11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be122:	f7fe bfcf 	b.w	bd0c4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   be126:	2101      	movs	r1, #1
   be128:	4620      	mov	r0, r4
   be12a:	f7ff ffde 	bl	be0ea <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be12e:	e9d4 0100 	ldrd	r0, r1, [r4]
   be132:	2200      	movs	r2, #0
   be134:	e7f3      	b.n	be11e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000be136 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   be136:	b538      	push	{r3, r4, r5, lr}
   be138:	4604      	mov	r4, r0
   be13a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   be13c:	f7ff ff9f 	bl	be07e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   be140:	2800      	cmp	r0, #0
   be142:	db0a      	blt.n	be15a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   be144:	4629      	mov	r1, r5
   be146:	4620      	mov	r0, r4
   be148:	f7ff ffe4 	bl	be114 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   be14c:	2800      	cmp	r0, #0
   be14e:	db04      	blt.n	be15a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   be150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   be154:	2000      	movs	r0, #0
   be156:	f7fe bfbd 	b.w	bd0d4 <hal_ble_gap_start_advertising>
}
   be15a:	bd38      	pop	{r3, r4, r5, pc}

000be15c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   be15c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   be15e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   be160:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   be162:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be164:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   be166:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be168:	f7f5 ff95 	bl	b4096 <_Znwj>
   be16c:	b118      	cbz	r0, be176 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   be16e:	682b      	ldr	r3, [r5, #0]
   be170:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   be172:	686b      	ldr	r3, [r5, #4]
   be174:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   be176:	4b03      	ldr	r3, [pc, #12]	; (be184 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   be178:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   be17a:	4b03      	ldr	r3, [pc, #12]	; (be188 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be17c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   be17e:	60a3      	str	r3, [r4, #8]
      }
   be180:	4620      	mov	r0, r4
   be182:	bd38      	pop	{r3, r4, r5, pc}
   be184:	000bda21 	.word	0x000bda21
   be188:	000bda39 	.word	0x000bda39

000be18c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   be18c:	680b      	ldr	r3, [r1, #0]
   be18e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   be190:	b113      	cbz	r3, be198 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   be192:	685a      	ldr	r2, [r3, #4]
   be194:	3201      	adds	r2, #1
   be196:	605a      	str	r2, [r3, #4]
      }
   be198:	4770      	bx	lr

000be19a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   be19a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   be19c:	f851 3b04 	ldr.w	r3, [r1], #4
   be1a0:	4604      	mov	r4, r0
   be1a2:	f840 3b04 	str.w	r3, [r0], #4
   be1a6:	f7ff fff1 	bl	be18c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   be1aa:	6823      	ldr	r3, [r4, #0]
   be1ac:	b90b      	cbnz	r3, be1b2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   be1ae:	f7ff fc2d 	bl	bda0c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   be1b2:	4620      	mov	r0, r4
   be1b4:	bd10      	pop	{r4, pc}

000be1b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be1b6:	b510      	push	{r4, lr}
   be1b8:	f851 3b04 	ldr.w	r3, [r1], #4
   be1bc:	4604      	mov	r4, r0
   be1be:	f840 3b04 	str.w	r3, [r0], #4
   be1c2:	f7ff ffe3 	bl	be18c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be1c6:	4620      	mov	r0, r4
   be1c8:	bd10      	pop	{r4, pc}

000be1ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be1ca:	b510      	push	{r4, lr}
   be1cc:	f851 3b04 	ldr.w	r3, [r1], #4
   be1d0:	4604      	mov	r4, r0
   be1d2:	f840 3b04 	str.w	r3, [r0], #4
   be1d6:	f7ff ffd9 	bl	be18c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be1da:	4620      	mov	r0, r4
   be1dc:	bd10      	pop	{r4, pc}

000be1de <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   be1de:	b510      	push	{r4, lr}
   be1e0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be1e2:	3004      	adds	r0, #4
   be1e4:	f7f7 f9ba 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be1e8:	4620      	mov	r0, r4
   be1ea:	bd10      	pop	{r4, pc}

000be1ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be1ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be1ee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be1f2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be1f4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be1f8:	42ae      	cmp	r6, r5
   be1fa:	d004      	beq.n	be206 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   be1fc:	1d28      	adds	r0, r5, #4
   be1fe:	f7f7 f9ad 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be202:	3508      	adds	r5, #8
   be204:	e7f8      	b.n	be1f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be206:	6820      	ldr	r0, [r4, #0]
   be208:	f7ff fb14 	bl	bd834 <free>
}
   be20c:	4620      	mov	r0, r4
   be20e:	bd70      	pop	{r4, r5, r6, pc}

000be210 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be210:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be212:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be216:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be218:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be21c:	42ae      	cmp	r6, r5
   be21e:	d004      	beq.n	be22a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   be220:	1d28      	adds	r0, r5, #4
   be222:	f7f7 f99b 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be226:	3508      	adds	r5, #8
   be228:	e7f8      	b.n	be21c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be22a:	6820      	ldr	r0, [r4, #0]
   be22c:	f7ff fb02 	bl	bd834 <free>
}
   be230:	4620      	mov	r0, r4
   be232:	bd70      	pop	{r4, r5, r6, pc}

000be234 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be234:	b510      	push	{r4, lr}
   be236:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   be238:	3024      	adds	r0, #36	; 0x24
   be23a:	f7ff ffe9 	bl	be210 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be23e:	f104 0018 	add.w	r0, r4, #24
   be242:	f7ff ffd3 	bl	be1ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   be246:	bd10      	pop	{r4, pc}

000be248 <__tcf_0>:
    static BleLocalDevice instance;
   be248:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   be24a:	4b17      	ldr	r3, [pc, #92]	; (be2a8 <__tcf_0+0x60>)
   be24c:	681c      	ldr	r4, [r3, #0]
   be24e:	b354      	cbz	r4, be2a6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   be250:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be254:	f7f6 f8c2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be258:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be25c:	f7f6 f8be 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be260:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be264:	f7f6 f8ba 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be268:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be26c:	f7f6 f8b6 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   be270:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   be274:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be278:	42ae      	cmp	r6, r5
   be27a:	d004      	beq.n	be286 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   be27c:	1d28      	adds	r0, r5, #4
   be27e:	f7f7 f96d 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be282:	3508      	adds	r5, #8
   be284:	e7f8      	b.n	be278 <__tcf_0+0x30>
    ::free(ptr);
   be286:	69a0      	ldr	r0, [r4, #24]
   be288:	f7ff fad4 	bl	bd834 <free>
    ~BleLocalDeviceImpl() = default;
   be28c:	f104 000c 	add.w	r0, r4, #12
   be290:	f7ff ffbe 	bl	be210 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be294:	4620      	mov	r0, r4
   be296:	f7ff ffa9 	bl	be1ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   be29a:	4620      	mov	r0, r4
   be29c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   be29e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be2a2:	f7f5 befe 	b.w	b40a2 <_ZdlPvj>
   be2a6:	bd70      	pop	{r4, r5, r6, pc}
   be2a8:	2003e62c 	.word	0x2003e62c

000be2ac <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   be2ac:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   be2ae:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be2b0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   be2b4:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   be2b8:	6803      	ldr	r3, [r0, #0]
   be2ba:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be2bc:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be2be:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   be2c0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   be2c2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   be2c4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   be2c6:	f7f7 f949 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   be2ca:	b002      	add	sp, #8
   be2cc:	bd10      	pop	{r4, pc}

000be2ce <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   be2ce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   be2d0:	b510      	push	{r4, lr}
      if (_M_empty())
   be2d2:	b90a      	cbnz	r2, be2d8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   be2d4:	f003 f9bc 	bl	c1650 <_ZSt25__throw_bad_function_callv>
    }
   be2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be2dc:	68c3      	ldr	r3, [r0, #12]
   be2de:	4718      	bx	r3

000be2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   be2e0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   be2e2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   be2e4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be2e6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be2e8:	dd03      	ble.n	be2f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   be2ea:	f7ff faab 	bl	bd844 <realloc>
            if (!d) {
   be2ee:	b918      	cbnz	r0, be2f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   be2f0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   be2f2:	f7ff fa9f 	bl	bd834 <free>
        T* d = nullptr;
   be2f6:	2000      	movs	r0, #0
        data_ = d;
   be2f8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be2fa:	60a5      	str	r5, [r4, #8]
        return true;
   be2fc:	2001      	movs	r0, #1
   be2fe:	e7f7      	b.n	be2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000be300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   be300:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   be302:	6883      	ldr	r3, [r0, #8]
   be304:	428b      	cmp	r3, r1
   be306:	da02      	bge.n	be30e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   be308:	f7ff ffea 	bl	be2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   be30c:	bd08      	pop	{r3, pc}
    return true;
   be30e:	2001      	movs	r0, #1
   be310:	e7fc      	b.n	be30c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000be312 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be316:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be318:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be31a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be31c:	4419      	add	r1, r3
   be31e:	6883      	ldr	r3, [r0, #8]
   be320:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be322:	4604      	mov	r4, r0
   be324:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be326:	dc12      	bgt.n	be34e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   be328:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be32a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be32c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   be32e:	1bd2      	subs	r2, r2, r7
   be330:	4631      	mov	r1, r6
   be332:	1970      	adds	r0, r6, r5
   be334:	f005 fb9a 	bl	c3a6c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   be338:	462a      	mov	r2, r5
   be33a:	4641      	mov	r1, r8
   be33c:	4630      	mov	r0, r6
   be33e:	f005 fb87 	bl	c3a50 <memcpy>
    size_ += n;
   be342:	6863      	ldr	r3, [r4, #4]
   be344:	442b      	add	r3, r5
   be346:	6063      	str	r3, [r4, #4]
    return true;
   be348:	2001      	movs	r0, #1
}
   be34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be34e:	f7ff ffc7 	bl	be2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be352:	2800      	cmp	r0, #0
   be354:	d1e8      	bne.n	be328 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   be356:	e7f8      	b.n	be34a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000be358 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be35a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be35c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   be360:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be362:	4604      	mov	r4, r0
   be364:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be366:	da0b      	bge.n	be380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   be368:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be36a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be36c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   be36e:	1b52      	subs	r2, r2, r5
   be370:	1c48      	adds	r0, r1, #1
   be372:	f005 fb7b 	bl	c3a6c <memmove>
    new(p) T(std::move(value));
   be376:	557e      	strb	r6, [r7, r5]
    ++size_;
   be378:	6863      	ldr	r3, [r4, #4]
   be37a:	3301      	adds	r3, #1
   be37c:	6063      	str	r3, [r4, #4]
}
   be37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be380:	3101      	adds	r1, #1
   be382:	f7ff ffad 	bl	be2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be386:	2800      	cmp	r0, #0
   be388:	d1ee      	bne.n	be368 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   be38a:	e7f8      	b.n	be37e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000be38c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be38c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   be38e:	6841      	ldr	r1, [r0, #4]
   be390:	f7ff bfe2 	b.w	be358 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000be394 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be398:	4604      	mov	r4, r0
   be39a:	461d      	mov	r5, r3
   be39c:	460f      	mov	r7, r1
   be39e:	ab01      	add	r3, sp, #4
   be3a0:	4690      	mov	r8, r2
   be3a2:	460a      	mov	r2, r1
   be3a4:	e9d0 0100 	ldrd	r0, r1, [r0]
   be3a8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   be3ac:	f7ff fb18 	bl	bd9e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   be3b0:	1cae      	adds	r6, r5, #2
   be3b2:	6863      	ldr	r3, [r4, #4]
   be3b4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   be3b6:	f1b9 0f00 	cmp.w	r9, #0
   be3ba:	d126      	bne.n	be40a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   be3bc:	b328      	cbz	r0, be40a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be3be:	4433      	add	r3, r6
   be3c0:	1a1b      	subs	r3, r3, r0
   be3c2:	2bff      	cmp	r3, #255	; 0xff
   be3c4:	d809      	bhi.n	be3da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   be3c6:	9901      	ldr	r1, [sp, #4]
   be3c8:	4620      	mov	r0, r4
   be3ca:	f7ff fe7a 	bl	be0c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be3ce:	6861      	ldr	r1, [r4, #4]
   be3d0:	4620      	mov	r0, r4
   be3d2:	4431      	add	r1, r6
   be3d4:	f7ff ff94 	bl	be300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be3d8:	b918      	cbnz	r0, be3e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   be3da:	6860      	ldr	r0, [r4, #4]
}
   be3dc:	b003      	add	sp, #12
   be3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   be3e2:	1c6a      	adds	r2, r5, #1
   be3e4:	9901      	ldr	r1, [sp, #4]
   be3e6:	b2d2      	uxtb	r2, r2
   be3e8:	4620      	mov	r0, r4
   be3ea:	f7ff ffb5 	bl	be358 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   be3ee:	9901      	ldr	r1, [sp, #4]
   be3f0:	463a      	mov	r2, r7
   be3f2:	3101      	adds	r1, #1
   be3f4:	4620      	mov	r0, r4
   be3f6:	f7ff ffaf 	bl	be358 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   be3fa:	9901      	ldr	r1, [sp, #4]
   be3fc:	462b      	mov	r3, r5
   be3fe:	4642      	mov	r2, r8
   be400:	3102      	adds	r1, #2
    return insert(size_, values, n);
   be402:	4620      	mov	r0, r4
   be404:	f7ff ff85 	bl	be312 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   be408:	e7e7      	b.n	be3da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be40a:	18f1      	adds	r1, r6, r3
   be40c:	29ff      	cmp	r1, #255	; 0xff
   be40e:	d8e4      	bhi.n	be3da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be410:	4620      	mov	r0, r4
   be412:	f7ff ff75 	bl	be300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be416:	2800      	cmp	r0, #0
   be418:	d0df      	beq.n	be3da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   be41a:	1c69      	adds	r1, r5, #1
   be41c:	b2c9      	uxtb	r1, r1
   be41e:	4620      	mov	r0, r4
   be420:	f7ff ffb4 	bl	be38c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   be424:	4639      	mov	r1, r7
   be426:	4620      	mov	r0, r4
   be428:	f7ff ffb0 	bl	be38c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   be42c:	6861      	ldr	r1, [r4, #4]
   be42e:	462b      	mov	r3, r5
   be430:	4642      	mov	r2, r8
   be432:	e7e6      	b.n	be402 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000be434 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be434:	b430      	push	{r4, r5}
   be436:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   be43a:	b11a      	cbz	r2, be444 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   be43c:	9502      	str	r5, [sp, #8]
}
   be43e:	bc30      	pop	{r4, r5}
   be440:	f7ff bfa8 	b.w	be394 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   be444:	6840      	ldr	r0, [r0, #4]
}
   be446:	bc30      	pop	{r4, r5}
   be448:	4770      	bx	lr

000be44a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   be44a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   be44c:	2300      	movs	r3, #0
   be44e:	e9c0 3300 	strd	r3, r3, [r0]
   be452:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be454:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be456:	9300      	str	r3, [sp, #0]
   be458:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be45a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be45e:	4619      	mov	r1, r3
   be460:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   be464:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be466:	f7ff ffe5 	bl	be434 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be46a:	4620      	mov	r0, r4
   be46c:	b004      	add	sp, #16
   be46e:	bd10      	pop	{r4, pc}

000be470 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   be470:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   be472:	9300      	str	r3, [sp, #0]
   be474:	4613      	mov	r3, r2
   be476:	460a      	mov	r2, r1
   be478:	21ff      	movs	r1, #255	; 0xff
   be47a:	f7ff ffdb 	bl	be434 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be47e:	b003      	add	sp, #12
   be480:	f85d fb04 	ldr.w	pc, [sp], #4

000be484 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be484:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be488:	4604      	mov	r4, r0
   be48a:	460d      	mov	r5, r1
   be48c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be48e:	d914      	bls.n	be4ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be490:	4290      	cmp	r0, r2
   be492:	d213      	bcs.n	be4bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be494:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be498:	1a75      	subs	r5, r6, r1
   be49a:	f1a1 0708 	sub.w	r7, r1, #8
   be49e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be4a0:	42b7      	cmp	r7, r6
   be4a2:	d018      	beq.n	be4d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be4a4:	b11c      	cbz	r4, be4ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be4a6:	4631      	mov	r1, r6
   be4a8:	4620      	mov	r0, r4
   be4aa:	f7ff fe8e 	bl	be1ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   be4ae:	1d30      	adds	r0, r6, #4
   be4b0:	f7f7 f854 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be4b4:	3e08      	subs	r6, #8
   be4b6:	3c08      	subs	r4, #8
   be4b8:	e7f2      	b.n	be4a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be4ba:	d00c      	beq.n	be4d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be4bc:	42b5      	cmp	r5, r6
   be4be:	d00a      	beq.n	be4d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be4c0:	b11c      	cbz	r4, be4ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be4c2:	4629      	mov	r1, r5
   be4c4:	4620      	mov	r0, r4
   be4c6:	f7ff fe80 	bl	be1ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be4ca:	1d28      	adds	r0, r5, #4
   be4cc:	f7f7 f846 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be4d0:	3508      	adds	r5, #8
   be4d2:	3408      	adds	r4, #8
   be4d4:	e7f2      	b.n	be4bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be4d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be4da:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be4dc:	6846      	ldr	r6, [r0, #4]
   be4de:	4668      	mov	r0, sp
   be4e0:	f7ff fe73 	bl	be1ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be4e4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   be4e8:	429f      	cmp	r7, r3
   be4ea:	db12      	blt.n	be512 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   be4ec:	3701      	adds	r7, #1
        if (n > 0) {
   be4ee:	2f00      	cmp	r7, #0
   be4f0:	dd29      	ble.n	be546 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   be4f2:	00f8      	lsls	r0, r7, #3
   be4f4:	f7ff f996 	bl	bd824 <malloc>
            if (!d) {
   be4f8:	4605      	mov	r5, r0
   be4fa:	b1f0      	cbz	r0, be53a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   be4fc:	e9d4 1200 	ldrd	r1, r2, [r4]
   be500:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be504:	f7ff ffbe 	bl	be484 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be508:	6820      	ldr	r0, [r4, #0]
   be50a:	f7ff f993 	bl	bd834 <free>
        data_ = d;
   be50e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   be510:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be512:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be514:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be516:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   be51a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be51e:	4631      	mov	r1, r6
   be520:	f106 0008 	add.w	r0, r6, #8
   be524:	f7ff ffae 	bl	be484 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be528:	b11e      	cbz	r6, be532 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   be52a:	4669      	mov	r1, sp
   be52c:	4630      	mov	r0, r6
   be52e:	f7ff fe4c 	bl	be1ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   be532:	6863      	ldr	r3, [r4, #4]
   be534:	3301      	adds	r3, #1
   be536:	6063      	str	r3, [r4, #4]
    return true;
   be538:	2501      	movs	r5, #1
   be53a:	a801      	add	r0, sp, #4
   be53c:	f7f7 f80e 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be540:	4628      	mov	r0, r5
   be542:	b003      	add	sp, #12
   be544:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   be546:	2500      	movs	r5, #0
   be548:	e7de      	b.n	be508 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000be54a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   be54c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be550:	4605      	mov	r5, r0
   be552:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   be554:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   be558:	42a6      	cmp	r6, r4
   be55a:	d005      	beq.n	be568 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   be55c:	4639      	mov	r1, r7
   be55e:	4620      	mov	r0, r4
   be560:	f7ff fce1 	bl	bdf26 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   be564:	b108      	cbz	r0, be56a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   be566:	b914      	cbnz	r4, be56e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   be568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   be56a:	3408      	adds	r4, #8
   be56c:	e7f4      	b.n	be558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   be56e:	1d20      	adds	r0, r4, #4
   be570:	f7f6 fff4 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   be574:	e9d5 3200 	ldrd	r3, r2, [r5]
   be578:	f104 0108 	add.w	r1, r4, #8
   be57c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be580:	4620      	mov	r0, r4
   be582:	f7ff ff7f 	bl	be484 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   be586:	686b      	ldr	r3, [r5, #4]
   be588:	3b01      	subs	r3, #1
   be58a:	606b      	str	r3, [r5, #4]
    return true;
   be58c:	e7ec      	b.n	be568 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000be590 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be594:	4605      	mov	r5, r0
   be596:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   be598:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be59a:	460c      	mov	r4, r1
        WiringBleLock lk;
   be59c:	f7ff faa0 	bl	bdae0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   be5a0:	682e      	ldr	r6, [r5, #0]
   be5a2:	1ef3      	subs	r3, r6, #3
   be5a4:	2b0d      	cmp	r3, #13
   be5a6:	d83c      	bhi.n	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be5a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   be5ac:	0053000e 	.word	0x0053000e
   be5b0:	00d1003b 	.word	0x00d1003b
   be5b4:	003b003b 	.word	0x003b003b
   be5b8:	003b003b 	.word	0x003b003b
   be5bc:	009b003b 	.word	0x009b003b
   be5c0:	009b009b 	.word	0x009b009b
   be5c4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   be5c8:	a804      	add	r0, sp, #16
   be5ca:	f7ff fc77 	bl	bdebc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   be5ce:	9b04      	ldr	r3, [sp, #16]
   be5d0:	89aa      	ldrh	r2, [r5, #12]
   be5d2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   be5d4:	6869      	ldr	r1, [r5, #4]
   be5d6:	9804      	ldr	r0, [sp, #16]
   be5d8:	3108      	adds	r1, #8
   be5da:	3002      	adds	r0, #2
   be5dc:	f7ff fa9a 	bl	bdb14 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   be5e0:	a904      	add	r1, sp, #16
   be5e2:	a806      	add	r0, sp, #24
   be5e4:	f7ff fdf1 	bl	be1ca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   be5e8:	a906      	add	r1, sp, #24
   be5ea:	f104 0018 	add.w	r0, r4, #24
   be5ee:	f7ff ff73 	bl	be4d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   be5f2:	4605      	mov	r5, r0
   be5f4:	a807      	add	r0, sp, #28
   be5f6:	f7f6 ffb1 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be5fa:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   be5fc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   be5fe:	b9b5      	cbnz	r5, be62e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   be600:	4b5d      	ldr	r3, [pc, #372]	; (be778 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   be602:	495e      	ldr	r1, [pc, #376]	; (be77c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be604:	9300      	str	r3, [sp, #0]
   be606:	2032      	movs	r0, #50	; 0x32
   be608:	462b      	mov	r3, r5
   be60a:	aa06      	add	r2, sp, #24
   be60c:	9507      	str	r5, [sp, #28]
   be60e:	f7ff f80b 	bl	bd628 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   be612:	9b04      	ldr	r3, [sp, #16]
   be614:	4629      	mov	r1, r5
   be616:	8818      	ldrh	r0, [r3, #0]
   be618:	f7fe fd64 	bl	bd0e4 <hal_ble_gap_disconnect>
   be61c:	a805      	add	r0, sp, #20
   be61e:	f7f6 ff9d 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   be622:	a803      	add	r0, sp, #12
   be624:	f7ff fa6a 	bl	bdafc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   be628:	b00e      	add	sp, #56	; 0x38
   be62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   be62e:	4a54      	ldr	r2, [pc, #336]	; (be780 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   be630:	9200      	str	r2, [sp, #0]
   be632:	2300      	movs	r3, #0
   be634:	4951      	ldr	r1, [pc, #324]	; (be77c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be636:	9307      	str	r3, [sp, #28]
   be638:	aa06      	add	r2, sp, #24
   be63a:	2001      	movs	r0, #1
   be63c:	f7fe fff4 	bl	bd628 <log_message>
                if (impl->connectedCallback_) {
   be640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   be642:	2b00      	cmp	r3, #0
   be644:	d0ea      	beq.n	be61c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   be646:	a904      	add	r1, sp, #16
   be648:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be64c:	f7ff fe3f 	bl	be2ce <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   be650:	e7e4      	b.n	be61c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be652:	89a9      	ldrh	r1, [r5, #12]
   be654:	4620      	mov	r0, r4
   be656:	f7ff fb9b 	bl	bdd90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be65a:	4606      	mov	r6, r0
   be65c:	2800      	cmp	r0, #0
   be65e:	d0e0      	beq.n	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   be660:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   be662:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   be666:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be66a:	8029      	strh	r1, [r5, #0]
   be66c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   be670:	429a      	cmp	r2, r3
   be672:	d003      	beq.n	be67c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   be674:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   be678:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   be67a:	e7f9      	b.n	be670 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   be67c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   be680:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be684:	45b8      	cmp	r8, r7
   be686:	d004      	beq.n	be692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   be688:	1d38      	adds	r0, r7, #4
   be68a:	f7f6 ff67 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be68e:	3708      	adds	r7, #8
   be690:	e7f8      	b.n	be684 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   be692:	2300      	movs	r3, #0
   be694:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   be696:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   be69a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be69e:	45b8      	cmp	r8, r7
   be6a0:	d004      	beq.n	be6ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   be6a2:	1d38      	adds	r0, r7, #4
   be6a4:	f7f6 ff5a 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be6a8:	3708      	adds	r7, #8
   be6aa:	e7f8      	b.n	be69e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   be6ac:	2300      	movs	r3, #0
   be6ae:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   be6b0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   be6b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be6b4:	b123      	cbz	r3, be6c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   be6b6:	4631      	mov	r1, r6
   be6b8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be6bc:	f7ff fe07 	bl	be2ce <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   be6c0:	2300      	movs	r3, #0
   be6c2:	2220      	movs	r2, #32
   be6c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   be6c8:	4a2e      	ldr	r2, [pc, #184]	; (be784 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   be6ca:	9200      	str	r2, [sp, #0]
   be6cc:	492b      	ldr	r1, [pc, #172]	; (be77c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be6ce:	aa06      	add	r2, sp, #24
   be6d0:	2001      	movs	r0, #1
   be6d2:	f7fe ffa9 	bl	bd628 <log_message>
                    impl->peers_.removeOne(*peer);
   be6d6:	4631      	mov	r1, r6
   be6d8:	f104 0018 	add.w	r0, r4, #24
   be6dc:	f7ff ff35 	bl	be54a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   be6e0:	e79f      	b.n	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be6e2:	89a9      	ldrh	r1, [r5, #12]
   be6e4:	4620      	mov	r0, r4
   be6e6:	f7ff fb53 	bl	bdd90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be6ea:	2800      	cmp	r0, #0
   be6ec:	d099      	beq.n	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   be6ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   be6f0:	2b00      	cmp	r3, #0
   be6f2:	d096      	beq.n	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   be6f4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be6f6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   be6f8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be6fc:	d001      	beq.n	be702 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   be6fe:	2e10      	cmp	r6, #16
   be700:	d117      	bne.n	be732 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   be702:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   be704:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   be706:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   be708:	2506      	movs	r5, #6
                        };
   be70a:	f88d 3015 	strb.w	r3, [sp, #21]
   be70e:	9104      	str	r1, [sp, #16]
   be710:	f88d 2014 	strb.w	r2, [sp, #20]
   be714:	9006      	str	r0, [sp, #24]
   be716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   be71a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   be71c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   be720:	9508      	str	r5, [sp, #32]
   be722:	e883 0003 	stmia.w	r3, {r0, r1}
   be726:	6d23      	ldr	r3, [r4, #80]	; 0x50
   be728:	a906      	add	r1, sp, #24
   be72a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be72e:	4798      	blx	r3
   be730:	e777      	b.n	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   be732:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   be734:	bf01      	itttt	eq
   be736:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   be738:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   be73a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   be73e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   be740:	bf0f      	iteee	eq
   be742:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   be746:	461a      	movne	r2, r3
   be748:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   be74a:	461d      	movne	r5, r3
   be74c:	e7dd      	b.n	be70a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be74e:	89a9      	ldrh	r1, [r5, #12]
   be750:	4620      	mov	r0, r4
   be752:	f7ff fb1d 	bl	bdd90 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   be756:	4601      	mov	r1, r0
   be758:	2800      	cmp	r0, #0
   be75a:	f43f af62 	beq.w	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be75e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   be760:	2b00      	cmp	r3, #0
   be762:	f43f af5e 	beq.w	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   be766:	686b      	ldr	r3, [r5, #4]
   be768:	9306      	str	r3, [sp, #24]
   be76a:	aa06      	add	r2, sp, #24
   be76c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   be76e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be772:	4798      	blx	r3
   be774:	e755      	b.n	be622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be776:	bf00      	nop
   be778:	000c70e9 	.word	0x000c70e9
   be77c:	000c7068 	.word	0x000c7068
   be780:	000c710f 	.word	0x000c710f
   be784:	000c712c 	.word	0x000c712c

000be788 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   be788:	b513      	push	{r0, r1, r4, lr}
   be78a:	460b      	mov	r3, r1
   be78c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be78e:	e9d0 0100 	ldrd	r0, r1, [r0]
   be792:	466c      	mov	r4, sp
   be794:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   be798:	e893 0003 	ldmia.w	r3, {r0, r1}
   be79c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   be7a0:	e894 0003 	ldmia.w	r4, {r0, r1}
   be7a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   be7a8:	b002      	add	sp, #8
   be7aa:	bd10      	pop	{r4, pc}

000be7ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   be7ac:	b538      	push	{r3, r4, r5, lr}
   be7ae:	4605      	mov	r5, r0
   be7b0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   be7b2:	f7ff ffe9 	bl	be788 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be7b6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   be7b8:	68a2      	ldr	r2, [r4, #8]
   be7ba:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be7bc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be7be:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   be7c0:	68e2      	ldr	r2, [r4, #12]
   be7c2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   be7c4:	60e3      	str	r3, [r4, #12]
      }
   be7c6:	bd38      	pop	{r3, r4, r5, pc}

000be7c8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   be7c8:	b570      	push	{r4, r5, r6, lr}
   be7ca:	4604      	mov	r4, r0
   be7cc:	b08c      	sub	sp, #48	; 0x30
   be7ce:	460e      	mov	r6, r1
   be7d0:	9201      	str	r2, [sp, #4]
   be7d2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   be7d4:	f7ff fabc 	bl	bdd50 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   be7d8:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   be7da:	9901      	ldr	r1, [sp, #4]
   be7dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be7e0:	f002 fb9b 	bl	c0f1a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   be7e4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   be7e8:	b1cd      	cbz	r5, be81e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   be7ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   be7ec:	9502      	str	r5, [sp, #8]
   be7ee:	a902      	add	r1, sp, #8
   be7f0:	a804      	add	r0, sp, #16
   be7f2:	9303      	str	r3, [sp, #12]
   be7f4:	f7ff fcb2 	bl	be15c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   be7f8:	2300      	movs	r3, #0
	__x.swap(*this);
   be7fa:	a908      	add	r1, sp, #32
   be7fc:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   be7fe:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   be800:	f7ff ffd4 	bl	be7ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   be804:	4631      	mov	r1, r6
   be806:	a808      	add	r0, sp, #32
   be808:	f7ff ffd0 	bl	be7ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   be80c:	a808      	add	r0, sp, #32
   be80e:	f7f5 fde5 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be812:	a804      	add	r0, sp, #16
   be814:	f7f5 fde2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   be818:	4620      	mov	r0, r4
   be81a:	b00c      	add	sp, #48	; 0x30
   be81c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   be81e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   be820:	e7ea      	b.n	be7f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000be824 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   be824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be828:	b087      	sub	sp, #28
   be82a:	461d      	mov	r5, r3
   be82c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   be830:	4680      	mov	r8, r0
   be832:	468b      	mov	fp, r1
   be834:	4692      	mov	sl, r2
   be836:	9912      	ldr	r1, [sp, #72]	; 0x48
   be838:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be83a:	2200      	movs	r2, #0
   be83c:	2068      	movs	r0, #104	; 0x68
   be83e:	9102      	str	r1, [sp, #8]
   be840:	9204      	str	r2, [sp, #16]
   be842:	f7f5 fc28 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be846:	1e06      	subs	r6, r0, #0
   be848:	f106 090c 	add.w	r9, r6, #12
   be84c:	d018      	beq.n	be880 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   be84e:	2201      	movs	r2, #1
	: _M_impl(__a)
   be850:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   be852:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   be856:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   be858:	4a15      	ldr	r2, [pc, #84]	; (be8b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   be85a:	f847 2b20 	str.w	r2, [r7], #32
   be85e:	9b03      	ldr	r3, [sp, #12]
   be860:	9100      	str	r1, [sp, #0]
   be862:	465a      	mov	r2, fp
   be864:	4651      	mov	r1, sl
   be866:	4648      	mov	r0, r9
   be868:	f7ff ffae 	bl	be7c8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   be86c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be86e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   be870:	682b      	ldr	r3, [r5, #0]
   be872:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   be874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be876:	f106 0534 	add.w	r5, r6, #52	; 0x34
   be87a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be87c:	6823      	ldr	r3, [r4, #0]
   be87e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   be880:	a904      	add	r1, sp, #16
   be882:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   be884:	e9cd 9604 	strd	r9, r6, [sp, #16]
   be888:	f7ff fd10 	bl	be2ac <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   be88c:	a805      	add	r0, sp, #20
   be88e:	f7f6 fe65 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   be892:	f8d8 3000 	ldr.w	r3, [r8]
   be896:	b93b      	cbnz	r3, be8a8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   be898:	4a06      	ldr	r2, [pc, #24]	; (be8b4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   be89a:	4907      	ldr	r1, [pc, #28]	; (be8b8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   be89c:	200a      	movs	r0, #10
}
   be89e:	b007      	add	sp, #28
   be8a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   be8a4:	f7fe beb8 	b.w	bd618 <panic_>
}
   be8a8:	b007      	add	sp, #28
   be8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be8ae:	bf00      	nop
   be8b0:	000c71a8 	.word	0x000c71a8
   be8b4:	000bd259 	.word	0x000bd259
   be8b8:	000c7051 	.word	0x000c7051

000be8bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be8bc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be8be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be8c0:	4604      	mov	r4, r0
   be8c2:	460d      	mov	r5, r1
   be8c4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be8c6:	d914      	bls.n	be8f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be8c8:	4290      	cmp	r0, r2
   be8ca:	d213      	bcs.n	be8f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be8cc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be8d0:	1a75      	subs	r5, r6, r1
   be8d2:	f1a1 0708 	sub.w	r7, r1, #8
   be8d6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be8d8:	42b7      	cmp	r7, r6
   be8da:	d018      	beq.n	be90e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be8dc:	b11c      	cbz	r4, be8e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be8de:	4631      	mov	r1, r6
   be8e0:	4620      	mov	r0, r4
   be8e2:	f7ff fc68 	bl	be1b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be8e6:	1d30      	adds	r0, r6, #4
   be8e8:	f7f6 fe38 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be8ec:	3e08      	subs	r6, #8
   be8ee:	3c08      	subs	r4, #8
   be8f0:	e7f2      	b.n	be8d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be8f2:	d00c      	beq.n	be90e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be8f4:	42b5      	cmp	r5, r6
   be8f6:	d00a      	beq.n	be90e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be8f8:	b11c      	cbz	r4, be902 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be8fa:	4629      	mov	r1, r5
   be8fc:	4620      	mov	r0, r4
   be8fe:	f7ff fc5a 	bl	be1b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be902:	1d28      	adds	r0, r5, #4
   be904:	f7f6 fe2a 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be908:	3508      	adds	r5, #8
   be90a:	3408      	adds	r4, #8
   be90c:	e7f2      	b.n	be8f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be910 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be910:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be912:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be914:	4605      	mov	r5, r0
        if (n > 0) {
   be916:	dd11      	ble.n	be93c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be918:	00f0      	lsls	r0, r6, #3
   be91a:	f7fe ff83 	bl	bd824 <malloc>
            if (!d) {
   be91e:	4604      	mov	r4, r0
   be920:	b158      	cbz	r0, be93a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be922:	e9d5 1200 	ldrd	r1, r2, [r5]
   be926:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be92a:	f7ff ffc7 	bl	be8bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be92e:	6828      	ldr	r0, [r5, #0]
   be930:	f7fe ff80 	bl	bd834 <free>
        data_ = d;
   be934:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be936:	60ae      	str	r6, [r5, #8]
        return true;
   be938:	2001      	movs	r0, #1
    }
   be93a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be93c:	2400      	movs	r4, #0
   be93e:	e7f6      	b.n	be92e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be940:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be942:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be944:	6845      	ldr	r5, [r0, #4]
   be946:	4668      	mov	r0, sp
   be948:	f7ff fc35 	bl	be1b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be94c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be950:	4299      	cmp	r1, r3
   be952:	da10      	bge.n	be976 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be954:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be956:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be958:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be95c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be960:	4629      	mov	r1, r5
   be962:	f105 0008 	add.w	r0, r5, #8
   be966:	f7ff ffa9 	bl	be8bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be96a:	b98d      	cbnz	r5, be990 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be96c:	6863      	ldr	r3, [r4, #4]
   be96e:	3301      	adds	r3, #1
   be970:	6063      	str	r3, [r4, #4]
    return true;
   be972:	2601      	movs	r6, #1
   be974:	e006      	b.n	be984 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be976:	3101      	adds	r1, #1
   be978:	4620      	mov	r0, r4
   be97a:	f7ff ffc9 	bl	be910 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be97e:	4606      	mov	r6, r0
   be980:	2800      	cmp	r0, #0
   be982:	d1e7      	bne.n	be954 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   be984:	a801      	add	r0, sp, #4
   be986:	f7f6 fde9 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be98a:	4630      	mov	r0, r6
   be98c:	b002      	add	sp, #8
   be98e:	bd70      	pop	{r4, r5, r6, pc}
   be990:	4669      	mov	r1, sp
   be992:	4628      	mov	r0, r5
   be994:	f7ff fc0f 	bl	be1b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be998:	e7e8      	b.n	be96c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be99a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be99a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be99e:	4604      	mov	r4, r0
   be9a0:	460d      	mov	r5, r1
   be9a2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be9a4:	d914      	bls.n	be9d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be9a6:	4290      	cmp	r0, r2
   be9a8:	d213      	bcs.n	be9d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be9aa:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be9ae:	1a75      	subs	r5, r6, r1
   be9b0:	f1a1 0708 	sub.w	r7, r1, #8
   be9b4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be9b6:	42b7      	cmp	r7, r6
   be9b8:	d018      	beq.n	be9ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be9ba:	b11c      	cbz	r4, be9c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   be9bc:	4631      	mov	r1, r6
   be9be:	4620      	mov	r0, r4
   be9c0:	f7ff fbeb 	bl	be19a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be9c4:	1d30      	adds	r0, r6, #4
   be9c6:	f7f6 fdc9 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be9ca:	3e08      	subs	r6, #8
   be9cc:	3c08      	subs	r4, #8
   be9ce:	e7f2      	b.n	be9b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be9d0:	d00c      	beq.n	be9ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be9d2:	42b5      	cmp	r5, r6
   be9d4:	d00a      	beq.n	be9ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be9d6:	b11c      	cbz	r4, be9e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be9d8:	4629      	mov	r1, r5
   be9da:	4620      	mov	r0, r4
   be9dc:	f7ff fbdd 	bl	be19a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be9e0:	1d28      	adds	r0, r5, #4
   be9e2:	f7f6 fdbb 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be9e6:	3508      	adds	r5, #8
   be9e8:	3408      	adds	r4, #8
   be9ea:	e7f2      	b.n	be9d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be9ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be9ee:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be9f0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be9f2:	4605      	mov	r5, r0
        if (n > 0) {
   be9f4:	dd11      	ble.n	bea1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be9f6:	00f0      	lsls	r0, r6, #3
   be9f8:	f7fe ff14 	bl	bd824 <malloc>
            if (!d) {
   be9fc:	4604      	mov	r4, r0
   be9fe:	b158      	cbz	r0, bea18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bea00:	e9d5 1200 	ldrd	r1, r2, [r5]
   bea04:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bea08:	f7ff ffc7 	bl	be99a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bea0c:	6828      	ldr	r0, [r5, #0]
   bea0e:	f7fe ff11 	bl	bd834 <free>
        data_ = d;
   bea12:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bea14:	60ae      	str	r6, [r5, #8]
        return true;
   bea16:	2001      	movs	r0, #1
    }
   bea18:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bea1a:	2400      	movs	r4, #0
   bea1c:	e7f6      	b.n	bea0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bea1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bea1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bea20:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bea22:	6845      	ldr	r5, [r0, #4]
   bea24:	4668      	mov	r0, sp
   bea26:	f7ff fbb8 	bl	be19a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bea2a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bea2e:	4299      	cmp	r1, r3
   bea30:	da10      	bge.n	bea54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bea32:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bea34:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bea36:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bea3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bea3e:	4629      	mov	r1, r5
   bea40:	f105 0008 	add.w	r0, r5, #8
   bea44:	f7ff ffa9 	bl	be99a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bea48:	b98d      	cbnz	r5, bea6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bea4a:	6863      	ldr	r3, [r4, #4]
   bea4c:	3301      	adds	r3, #1
   bea4e:	6063      	str	r3, [r4, #4]
    return true;
   bea50:	2601      	movs	r6, #1
   bea52:	e006      	b.n	bea62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bea54:	3101      	adds	r1, #1
   bea56:	4620      	mov	r0, r4
   bea58:	f7ff ffc9 	bl	be9ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bea5c:	4606      	mov	r6, r0
   bea5e:	2800      	cmp	r0, #0
   bea60:	d1e7      	bne.n	bea32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bea62:	a801      	add	r0, sp, #4
   bea64:	f7f6 fd7a 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bea68:	4630      	mov	r0, r6
   bea6a:	b002      	add	sp, #8
   bea6c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bea6e:	4669      	mov	r1, sp
   bea70:	4628      	mov	r0, r5
   bea72:	f7ff fb92 	bl	be19a <_ZN8particle17BleCharacteristicC1ERKS0_>
   bea76:	e7e8      	b.n	bea4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bea78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bea7c:	4617      	mov	r7, r2
   bea7e:	b0a1      	sub	sp, #132	; 0x84
   bea80:	4680      	mov	r8, r0
    WiringBleLock lk;
   bea82:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bea84:	460e      	mov	r6, r1
    WiringBleLock lk;
   bea86:	f7ff f82b 	bl	bdae0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bea8a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bea8c:	7923      	ldrb	r3, [r4, #4]
   bea8e:	b953      	cbnz	r3, beaa6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bea90:	4639      	mov	r1, r7
   bea92:	4640      	mov	r0, r8
   bea94:	f7ff fb81 	bl	be19a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bea98:	a80a      	add	r0, sp, #40	; 0x28
   bea9a:	f7ff f82f 	bl	bdafc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bea9e:	4640      	mov	r0, r8
   beaa0:	b021      	add	sp, #132	; 0x84
   beaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   beaa6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   beaa8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   beaac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   beab0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   beab2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   beab6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   beaba:	9b03      	ldr	r3, [sp, #12]
   beabc:	429d      	cmp	r5, r3
   beabe:	d021      	beq.n	beb04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   beac0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   beac4:	4658      	mov	r0, fp
   beac6:	f109 0114 	add.w	r1, r9, #20
   beaca:	f7ff f8b6 	bl	bdc3a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   beace:	b1b8      	cbz	r0, beb00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bead0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bead4:	4650      	mov	r0, sl
   bead6:	f7ff f8b0 	bl	bdc3a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   beada:	b188      	cbz	r0, beb00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   beadc:	6823      	ldr	r3, [r4, #0]
   beade:	f8d9 2000 	ldr.w	r2, [r9]
   beae2:	4053      	eors	r3, r2
   beae4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   beae8:	d10a      	bne.n	beb00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   beaea:	2220      	movs	r2, #32
   beaec:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   beaf0:	4a5e      	ldr	r2, [pc, #376]	; (bec6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   beaf2:	9200      	str	r2, [sp, #0]
   beaf4:	aa15      	add	r2, sp, #84	; 0x54
   beaf6:	495e      	ldr	r1, [pc, #376]	; (bec70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   beaf8:	2032      	movs	r0, #50	; 0x32
   beafa:	f7fe fd95 	bl	bd628 <log_message>
   beafe:	e7c7      	b.n	bea90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   beb00:	3508      	adds	r5, #8
   beb02:	e7da      	b.n	beaba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   beb04:	4650      	mov	r0, sl
   beb06:	f7ff f869 	bl	bdbdc <_ZNK8particle7BleUuid7isValidEv>
   beb0a:	b960      	cbnz	r0, beb26 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   beb0c:	4959      	ldr	r1, [pc, #356]	; (bec74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   beb0e:	2201      	movs	r2, #1
   beb10:	a815      	add	r0, sp, #84	; 0x54
   beb12:	ad15      	add	r5, sp, #84	; 0x54
   beb14:	f7ff f83a 	bl	bdb8c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   beb18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   beb1a:	46d4      	mov	ip, sl
   beb1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   beb20:	682b      	ldr	r3, [r5, #0]
   beb22:	f8cc 3000 	str.w	r3, [ip]
   beb26:	6833      	ldr	r3, [r6, #0]
   beb28:	e9d3 5300 	ldrd	r5, r3, [r3]
   beb2c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   beb30:	455d      	cmp	r5, fp
   beb32:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   beb34:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   beb36:	d06e      	beq.n	bec16 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   beb38:	f855 0b08 	ldr.w	r0, [r5], #8
   beb3c:	f7ff f87d 	bl	bdc3a <_ZNK8particle7BleUuideqERKS0_>
   beb40:	2800      	cmp	r0, #0
   beb42:	d0f5      	beq.n	beb30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   beb44:	f104 0a14 	add.w	sl, r4, #20
   beb48:	4650      	mov	r0, sl
   beb4a:	f7ff f847 	bl	bdbdc <_ZNK8particle7BleUuid7isValidEv>
   beb4e:	b988      	cbnz	r0, beb74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   beb50:	4b49      	ldr	r3, [pc, #292]	; (bec78 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beb52:	4948      	ldr	r1, [pc, #288]	; (bec74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   beb54:	881a      	ldrh	r2, [r3, #0]
   beb56:	3201      	adds	r2, #1
   beb58:	b292      	uxth	r2, r2
   beb5a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beb5c:	a815      	add	r0, sp, #84	; 0x54
   beb5e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   beb60:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beb62:	f7ff f832 	bl	bdbca <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   beb66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   beb68:	46d4      	mov	ip, sl
   beb6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   beb6e:	682b      	ldr	r3, [r5, #0]
   beb70:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   beb74:	4b41      	ldr	r3, [pc, #260]	; (bec7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   beb76:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   beb78:	2228      	movs	r2, #40	; 0x28
   beb7a:	2100      	movs	r1, #0
   beb7c:	a816      	add	r0, sp, #88	; 0x58
   beb7e:	f004 ff8f 	bl	c3aa0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   beb82:	4651      	mov	r1, sl
   beb84:	a804      	add	r0, sp, #16
   beb86:	f7ff f83b 	bl	bdc00 <_ZN8particle7BleUuid7halUUIDEv>
   beb8a:	ab04      	add	r3, sp, #16
   beb8c:	aa18      	add	r2, sp, #96	; 0x60
   beb8e:	f10d 0c20 	add.w	ip, sp, #32
   beb92:	6818      	ldr	r0, [r3, #0]
   beb94:	6859      	ldr	r1, [r3, #4]
   beb96:	4615      	mov	r5, r2
   beb98:	c503      	stmia	r5!, {r0, r1}
   beb9a:	3308      	adds	r3, #8
   beb9c:	4563      	cmp	r3, ip
   beb9e:	462a      	mov	r2, r5
   beba0:	d1f7      	bne.n	beb92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   beba2:	6818      	ldr	r0, [r3, #0]
   beba4:	6028      	str	r0, [r5, #0]
    return value_;
   beba6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   beba8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bebac:	f8d9 3000 	ldr.w	r3, [r9]
   bebb0:	8a9b      	ldrh	r3, [r3, #20]
   bebb2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bebb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bebb8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bebba:	4b31      	ldr	r3, [pc, #196]	; (bec80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bebbc:	2200      	movs	r2, #0
   bebbe:	1da1      	adds	r1, r4, #6
   bebc0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bebc2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bebc6:	f7fe fabf 	bl	bd148 <hal_ble_gatt_server_add_characteristic>
   bebca:	2800      	cmp	r0, #0
   bebcc:	f47f af60 	bne.w	bea90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bebd0:	2301      	movs	r3, #1
   bebd2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bebd4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bebd6:	4639      	mov	r1, r7
        return characteristics_;
   bebd8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bebda:	a80d      	add	r0, sp, #52	; 0x34
   bebdc:	f7ff fadd 	bl	be19a <_ZN8particle17BleCharacteristicC1ERKS0_>
   bebe0:	4620      	mov	r0, r4
   bebe2:	a90d      	add	r1, sp, #52	; 0x34
   bebe4:	f7ff ff1b 	bl	bea1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bebe8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bebea:	a80e      	add	r0, sp, #56	; 0x38
   bebec:	f7f6 fcb6 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bebf0:	2c00      	cmp	r4, #0
   bebf2:	f47f af4d 	bne.w	bea90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bebf6:	2320      	movs	r3, #32
   bebf8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bebfc:	4b21      	ldr	r3, [pc, #132]	; (bec84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bebfe:	9300      	str	r3, [sp, #0]
   bec00:	aa0d      	add	r2, sp, #52	; 0x34
   bec02:	4623      	mov	r3, r4
   bec04:	e777      	b.n	beaf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bec06:	4639      	mov	r1, r7
   bec08:	4640      	mov	r0, r8
   bec0a:	f7ff fac6 	bl	be19a <_ZN8particle17BleCharacteristicC1ERKS0_>
   bec0e:	a80c      	add	r0, sp, #48	; 0x30
   bec10:	f7f6 fca4 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec14:	e740      	b.n	bea98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bec16:	a80b      	add	r0, sp, #44	; 0x2c
   bec18:	f7ff f92c 	bl	bde74 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bec1c:	4651      	mov	r1, sl
   bec1e:	a815      	add	r0, sp, #84	; 0x54
   bec20:	f7fe ffee 	bl	bdc00 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bec24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bec26:	2300      	movs	r3, #0
   bec28:	3214      	adds	r2, #20
   bec2a:	a915      	add	r1, sp, #84	; 0x54
   bec2c:	2001      	movs	r0, #1
   bec2e:	f7fe fa63 	bl	bd0f8 <hal_ble_gatt_server_add_service>
   bec32:	2800      	cmp	r0, #0
   bec34:	d1e7      	bne.n	bec06 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bec36:	6835      	ldr	r5, [r6, #0]
   bec38:	a90b      	add	r1, sp, #44	; 0x2c
   bec3a:	a80d      	add	r0, sp, #52	; 0x34
   bec3c:	f7ff fabb 	bl	be1b6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bec40:	4628      	mov	r0, r5
   bec42:	a90d      	add	r1, sp, #52	; 0x34
   bec44:	f7ff fe7c 	bl	be940 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bec48:	4605      	mov	r5, r0
   bec4a:	a80e      	add	r0, sp, #56	; 0x38
   bec4c:	f7f6 fc86 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec50:	2d00      	cmp	r5, #0
   bec52:	d0d8      	beq.n	bec06 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bec54:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bec56:	6853      	ldr	r3, [r2, #4]
   bec58:	6812      	ldr	r2, [r2, #0]
   bec5a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bec5e:	3b01      	subs	r3, #1
   bec60:	a80c      	add	r0, sp, #48	; 0x30
   bec62:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bec66:	f7f6 fc79 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec6a:	e76b      	b.n	beb44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bec6c:	000c714b 	.word	0x000c714b
   bec70:	000c7068 	.word	0x000c7068
   bec74:	000c7212 	.word	0x000c7212
   bec78:	2003e624 	.word	0x2003e624
   bec7c:	002c0003 	.word	0x002c0003
   bec80:	000be00d 	.word	0x000be00d
   bec84:	000c7176 	.word	0x000c7176

000bec88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bec88:	4802      	ldr	r0, [pc, #8]	; (bec94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bec8a:	2300      	movs	r3, #0
   bec8c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bec8e:	f7fe bab3 	b.w	bd1f8 <os_mutex_recursive_create>
   bec92:	bf00      	nop
   bec94:	2003e628 	.word	0x2003e628

000bec98 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bec98:	2200      	movs	r2, #0
   bec9a:	6840      	ldr	r0, [r0, #4]
   bec9c:	4611      	mov	r1, r2
   bec9e:	f7fe bd79 	b.w	bd794 <network_ready>

000beca2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   beca2:	2200      	movs	r2, #0
   beca4:	6840      	ldr	r0, [r0, #4]
   beca6:	4611      	mov	r1, r2
   beca8:	f7fe bd94 	b.w	bd7d4 <network_listening>

000becac <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   becac:	2200      	movs	r2, #0
   becae:	6840      	ldr	r0, [r0, #4]
   becb0:	4611      	mov	r1, r2
   becb2:	f7fe bd9f 	b.w	bd7f4 <network_get_listen_timeout>

000becb6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   becb6:	6840      	ldr	r0, [r0, #4]
   becb8:	2200      	movs	r2, #0
   becba:	f7fe bd93 	b.w	bd7e4 <network_set_listen_timeout>

000becbe <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   becbe:	6840      	ldr	r0, [r0, #4]
   becc0:	2200      	movs	r2, #0
   becc2:	f081 0101 	eor.w	r1, r1, #1
   becc6:	f7fe bd7d 	b.w	bd7c4 <network_listen>

000becca <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   becca:	2300      	movs	r3, #0
   beccc:	6840      	ldr	r0, [r0, #4]
   becce:	461a      	mov	r2, r3
   becd0:	4619      	mov	r1, r3
   becd2:	f7fe bd6f 	b.w	bd7b4 <network_off>

000becd6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   becd6:	2300      	movs	r3, #0
   becd8:	6840      	ldr	r0, [r0, #4]
   becda:	461a      	mov	r2, r3
   becdc:	4619      	mov	r1, r3
   becde:	f7fe bd61 	b.w	bd7a4 <network_on>

000bece2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bece2:	2200      	movs	r2, #0
   bece4:	6840      	ldr	r0, [r0, #4]
   bece6:	4611      	mov	r1, r2
   bece8:	f7fe bd44 	b.w	bd774 <network_connecting>

000becec <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   becec:	6840      	ldr	r0, [r0, #4]
   becee:	2200      	movs	r2, #0
   becf0:	2102      	movs	r1, #2
   becf2:	f7fe bd47 	b.w	bd784 <network_disconnect>

000becf6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   becf6:	2300      	movs	r3, #0
   becf8:	6840      	ldr	r0, [r0, #4]
   becfa:	461a      	mov	r2, r3
   becfc:	f7fe bd32 	b.w	bd764 <network_connect>

000bed00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bed00:	4b08      	ldr	r3, [pc, #32]	; (bed24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bed02:	b510      	push	{r4, lr}
   bed04:	2428      	movs	r4, #40	; 0x28
   bed06:	4622      	mov	r2, r4
   bed08:	4618      	mov	r0, r3
   bed0a:	2100      	movs	r1, #0
   bed0c:	f004 fec8 	bl	c3aa0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bed10:	4b05      	ldr	r3, [pc, #20]	; (bed28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bed12:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bed14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bed18:	6042      	str	r2, [r0, #4]
   bed1a:	2204      	movs	r2, #4
   bed1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bed1e:	4a03      	ldr	r2, [pc, #12]	; (bed2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bed20:	601a      	str	r2, [r3, #0]
   bed22:	bd10      	pop	{r4, pc}
   bed24:	2003e638 	.word	0x2003e638
   bed28:	2003e630 	.word	0x2003e630
   bed2c:	000c723c 	.word	0x000c723c

000bed30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bed30:	4770      	bx	lr

000bed32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bed32:	2000      	movs	r0, #0
   bed34:	4770      	bx	lr

000bed36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bed36:	b510      	push	{r4, lr}
   bed38:	2110      	movs	r1, #16
   bed3a:	4604      	mov	r4, r0
   bed3c:	f7f5 f9b1 	bl	b40a2 <_ZdlPvj>
   bed40:	4620      	mov	r0, r4
   bed42:	bd10      	pop	{r4, pc}

000bed44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bed44:	b508      	push	{r3, lr}
      { delete this; }
   bed46:	f7ff fff6 	bl	bed36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bed4a:	bd08      	pop	{r3, pc}

000bed4c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bed4c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bed4e:	2200      	movs	r2, #0
   bed50:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bed54:	6002      	str	r2, [r0, #0]
   bed56:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bed58:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bed5a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bed5c:	680c      	ldr	r4, [r1, #0]
   bed5e:	8085      	strh	r5, [r0, #4]
   bed60:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bed62:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bed64:	bd30      	pop	{r4, r5, pc}

000bed66 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bed66:	b510      	push	{r4, lr}
   bed68:	4604      	mov	r4, r0
    free((void*)msg_);
   bed6a:	6800      	ldr	r0, [r0, #0]
   bed6c:	f7fe fd62 	bl	bd834 <free>
}
   bed70:	4620      	mov	r0, r4
   bed72:	bd10      	pop	{r4, pc}

000bed74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bed74:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bed76:	68c4      	ldr	r4, [r0, #12]
   bed78:	b1f4      	cbz	r4, bedb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bed7a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bed7c:	2b02      	cmp	r3, #2
   bed7e:	d103      	bne.n	bed88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bed80:	f104 000c 	add.w	r0, r4, #12
   bed84:	f7ff ffef 	bl	bed66 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bed88:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bed8a:	b135      	cbz	r5, bed9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bed8c:	4628      	mov	r0, r5
   bed8e:	f7f5 fb25 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bed92:	2110      	movs	r1, #16
   bed94:	4628      	mov	r0, r5
   bed96:	f7f5 f984 	bl	b40a2 <_ZdlPvj>
   bed9a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bed9c:	b135      	cbz	r5, bedac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bed9e:	4628      	mov	r0, r5
   beda0:	f7f5 fb1c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   beda4:	2110      	movs	r1, #16
   beda6:	4628      	mov	r0, r5
   beda8:	f7f5 f97b 	bl	b40a2 <_ZdlPvj>
   bedac:	4620      	mov	r0, r4
   bedae:	2114      	movs	r1, #20
   bedb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bedb4:	f7f5 b975 	b.w	b40a2 <_ZdlPvj>
   bedb8:	bd38      	pop	{r3, r4, r5, pc}

000bedba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bedba:	680b      	ldr	r3, [r1, #0]
   bedbc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bedbe:	684b      	ldr	r3, [r1, #4]
   bedc0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bedc2:	b113      	cbz	r3, bedca <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bedc4:	685a      	ldr	r2, [r3, #4]
   bedc6:	3201      	adds	r2, #1
   bedc8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bedca:	4770      	bx	lr

000bedcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bedcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bedce:	4604      	mov	r4, r0
   bedd0:	4668      	mov	r0, sp
   bedd2:	460d      	mov	r5, r1
   bedd4:	f7ff fff1 	bl	bedba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bedd8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bedda:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   beddc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bedde:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bede0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bede2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bede4:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bede6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bede8:	f7f6 fbb8 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bedec:	b135      	cbz	r5, bedfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bedee:	1d28      	adds	r0, r5, #4
   bedf0:	f7f6 fbb4 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bedf4:	2108      	movs	r1, #8
   bedf6:	4628      	mov	r0, r5
   bedf8:	f7f5 f953 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bedfc:	4620      	mov	r0, r4
   bedfe:	b003      	add	sp, #12
   bee00:	bd30      	pop	{r4, r5, pc}

000bee02 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bee02:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bee04:	b510      	push	{r4, lr}
      if (_M_empty())
   bee06:	b90a      	cbnz	r2, bee0c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bee08:	f002 fc22 	bl	c1650 <_ZSt25__throw_bad_function_callv>
    }
   bee0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bee10:	68c3      	ldr	r3, [r0, #12]
   bee12:	4718      	bx	r3

000bee14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bee14:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bee16:	6800      	ldr	r0, [r0, #0]
   bee18:	f100 0110 	add.w	r1, r0, #16
   bee1c:	f7ff fff1 	bl	bee02 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bee20:	bd08      	pop	{r3, pc}

000bee22 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bee22:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bee24:	b510      	push	{r4, lr}
      if (_M_empty())
   bee26:	b90a      	cbnz	r2, bee2c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bee28:	f002 fc12 	bl	c1650 <_ZSt25__throw_bad_function_callv>
    }
   bee2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bee30:	68c3      	ldr	r3, [r0, #12]
   bee32:	4718      	bx	r3

000bee34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bee34:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bee36:	6800      	ldr	r0, [r0, #0]
   bee38:	f100 0110 	add.w	r1, r0, #16
   bee3c:	f7ff fff1 	bl	bee22 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bee40:	bd08      	pop	{r3, pc}
	...

000bee44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bee44:	b538      	push	{r3, r4, r5, lr}
   bee46:	2300      	movs	r3, #0
   bee48:	4604      	mov	r4, r0
   bee4a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bee4c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bee4e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bee50:	f7f5 f921 	bl	b4096 <_Znwj>
   bee54:	b128      	cbz	r0, bee62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bee56:	2301      	movs	r3, #1
   bee58:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bee5c:	4b02      	ldr	r3, [pc, #8]	; (bee68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bee5e:	6003      	str	r3, [r0, #0]
   bee60:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bee62:	6020      	str	r0, [r4, #0]
	}
   bee64:	4620      	mov	r0, r4
   bee66:	bd38      	pop	{r3, r4, r5, pc}
   bee68:	000c7278 	.word	0x000c7278

000bee6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bee6c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bee6e:	2300      	movs	r3, #0
   bee70:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bee72:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bee74:	4604      	mov	r4, r0
   bee76:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bee78:	b12b      	cbz	r3, bee86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bee7a:	2202      	movs	r2, #2
   bee7c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bee7e:	68eb      	ldr	r3, [r5, #12]
   bee80:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bee82:	68ab      	ldr	r3, [r5, #8]
   bee84:	60a3      	str	r3, [r4, #8]
    }
   bee86:	4620      	mov	r0, r4
   bee88:	bd38      	pop	{r3, r4, r5, pc}
	...

000bee8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bee8e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bee90:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bee92:	4668      	mov	r0, sp
   bee94:	f7ff ff5a 	bl	bed4c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bee98:	f04f 0302 	mov.w	r3, #2
   bee9c:	e8d4 2f4f 	ldrexb	r2, [r4]
   beea0:	2a00      	cmp	r2, #0
   beea2:	d103      	bne.n	beeac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   beea4:	e8c4 3f41 	strexb	r1, r3, [r4]
   beea8:	2900      	cmp	r1, #0
   beeaa:	d1f7      	bne.n	bee9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   beeac:	d125      	bne.n	beefa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   beeae:	f104 050c 	add.w	r5, r4, #12
   beeb2:	4669      	mov	r1, sp
   beeb4:	4628      	mov	r0, r5
   beeb6:	f7ff ff49 	bl	bed4c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   beeba:	f3bf 8f5b 	dmb	ish
   beebe:	2301      	movs	r3, #1
   beec0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   beec2:	2000      	movs	r0, #0
   beec4:	f104 0308 	add.w	r3, r4, #8
   beec8:	f3bf 8f5b 	dmb	ish
   beecc:	e853 6f00 	ldrex	r6, [r3]
   beed0:	e843 0200 	strex	r2, r0, [r3]
   beed4:	2a00      	cmp	r2, #0
   beed6:	d1f9      	bne.n	beecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   beed8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   beedc:	b16e      	cbz	r6, beefa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   beede:	f7fe fbdd 	bl	bd69c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   beee2:	b178      	cbz	r0, bef04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   beee4:	4629      	mov	r1, r5
   beee6:	4630      	mov	r0, r6
   beee8:	f7ff ff8b 	bl	bee02 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   beeec:	4630      	mov	r0, r6
   beeee:	f7f5 fa75 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   beef2:	2110      	movs	r1, #16
   beef4:	4630      	mov	r0, r6
   beef6:	f7f5 f8d4 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   beefa:	4668      	mov	r0, sp
   beefc:	f7ff ff33 	bl	bed66 <_ZN8particle5ErrorD1Ev>
    }
   bef00:	b009      	add	sp, #36	; 0x24
   bef02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bef04:	4631      	mov	r1, r6
   bef06:	a802      	add	r0, sp, #8
   bef08:	f7ff ffb0 	bl	bee6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bef0c:	68e0      	ldr	r0, [r4, #12]
   bef0e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bef12:	b108      	cbz	r0, bef18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bef14:	f004 fe32 	bl	c3b7c <strdup>
        type_(type) {
   bef18:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bef1a:	2010      	movs	r0, #16
   bef1c:	f8ad 501c 	strh.w	r5, [sp, #28]
   bef20:	f7f5 f8b9 	bl	b4096 <_Znwj>
   bef24:	4605      	mov	r5, r0
   bef26:	b1e8      	cbz	r0, bef64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bef28:	2700      	movs	r7, #0
   bef2a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bef2c:	2018      	movs	r0, #24
   bef2e:	f7f5 f8b2 	bl	b4096 <_Znwj>
   bef32:	4604      	mov	r4, r0
   bef34:	b188      	cbz	r0, bef5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bef36:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bef38:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bef3a:	a802      	add	r0, sp, #8
   bef3c:	f7ff fc24 	bl	be788 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bef42:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bef44:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef46:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bef48:	9204      	str	r2, [sp, #16]
   bef4a:	a906      	add	r1, sp, #24
   bef4c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bef4e:	60e3      	str	r3, [r4, #12]
   bef50:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bef54:	9205      	str	r2, [sp, #20]
   bef56:	f7ff fef9 	bl	bed4c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bef5a:	4b08      	ldr	r3, [pc, #32]	; (bef7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bef5c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bef5e:	4b08      	ldr	r3, [pc, #32]	; (bef80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bef60:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bef62:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bef64:	a806      	add	r0, sp, #24
   bef66:	f7ff fefe 	bl	bed66 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bef6a:	a802      	add	r0, sp, #8
   bef6c:	f7f5 fa36 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bef70:	2200      	movs	r2, #0
   bef72:	4629      	mov	r1, r5
   bef74:	4803      	ldr	r0, [pc, #12]	; (bef84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bef76:	f7fe fb99 	bl	bd6ac <application_thread_invoke>
   bef7a:	e7b7      	b.n	beeec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bef7c:	000bee15 	.word	0x000bee15
   bef80:	000bf099 	.word	0x000bf099
   bef84:	000bd913 	.word	0x000bd913

000bef88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bef8c:	b08b      	sub	sp, #44	; 0x2c
   bef8e:	4605      	mov	r5, r0
   bef90:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bef94:	460f      	mov	r7, r1
   bef96:	4690      	mov	r8, r2
   bef98:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bef9a:	f7fe fbbb 	bl	bd714 <spark_cloud_flag_connected>
   bef9e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   befa0:	4683      	mov	fp, r0
   befa2:	bb38      	cbnz	r0, beff4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   befa4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   befa8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   befaa:	a905      	add	r1, sp, #20
   befac:	4630      	mov	r0, r6
   befae:	f8ad 3018 	strh.w	r3, [sp, #24]
   befb2:	f7ff fecb 	bl	bed4c <_ZN8particle5ErrorC1EOS0_>
   befb6:	2014      	movs	r0, #20
   befb8:	f7f5 f86d 	bl	b4096 <_Znwj>
   befbc:	4604      	mov	r4, r0
   befbe:	b148      	cbz	r0, befd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   befc0:	2302      	movs	r3, #2
   befc2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   befc4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   befc6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   befca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   befcc:	4631      	mov	r1, r6
   befce:	300c      	adds	r0, #12
   befd0:	f7ff febc 	bl	bed4c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   befd4:	4628      	mov	r0, r5
	: __shared_count(__p)
   befd6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   befd8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   befdc:	f7ff ff32 	bl	bee44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   befe0:	4630      	mov	r0, r6
   befe2:	f7ff fec0 	bl	bed66 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   befe6:	a805      	add	r0, sp, #20
   befe8:	f7ff febd 	bl	bed66 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   befec:	4628      	mov	r0, r5
   befee:	b00b      	add	sp, #44	; 0x2c
   beff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   beff4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   beff6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   beff8:	2014      	movs	r0, #20
   beffa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   beffe:	9307      	str	r3, [sp, #28]
   bf000:	f7f5 f849 	bl	b4096 <_Znwj>
   bf004:	4601      	mov	r1, r0
   bf006:	b118      	cbz	r0, bf010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf008:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf00c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf00e:	7044      	strb	r4, [r0, #1]
   bf010:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf012:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bf014:	f7ff ff16 	bl	bee44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bf018:	4b1e      	ldr	r3, [pc, #120]	; (bf094 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bf01a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bf01c:	2008      	movs	r0, #8
   bf01e:	f7f5 f83a 	bl	b4096 <_Znwj>
   bf022:	4604      	mov	r4, r0
   bf024:	b110      	cbz	r0, bf02c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bf026:	a903      	add	r1, sp, #12
   bf028:	f7ff fec7 	bl	bedba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf02c:	9600      	str	r6, [sp, #0]
   bf02e:	fa5f f38a 	uxtb.w	r3, sl
   bf032:	464a      	mov	r2, r9
   bf034:	4641      	mov	r1, r8
   bf036:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bf038:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf03a:	f7fe fb73 	bl	bd724 <spark_send_event>
   bf03e:	b9b8      	cbnz	r0, bf070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bf040:	9b03      	ldr	r3, [sp, #12]
   bf042:	785b      	ldrb	r3, [r3, #1]
   bf044:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bf048:	b993      	cbnz	r3, bf070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bf04a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bf04e:	a905      	add	r1, sp, #20
   bf050:	a803      	add	r0, sp, #12
   bf052:	9205      	str	r2, [sp, #20]
   bf054:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf058:	f7ff ff18 	bl	bee8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf05c:	a805      	add	r0, sp, #20
   bf05e:	f7ff fe82 	bl	bed66 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bf062:	a805      	add	r0, sp, #20
   bf064:	9909      	ldr	r1, [sp, #36]	; 0x24
   bf066:	f7ff feb1 	bl	bedcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bf06a:	a806      	add	r0, sp, #24
   bf06c:	f7f6 fa76 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf070:	a903      	add	r1, sp, #12
   bf072:	a805      	add	r0, sp, #20
   bf074:	f7ff fea1 	bl	bedba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf078:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf07a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf07c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bf07e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bf080:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf082:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bf084:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bf086:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bf088:	f7f6 fa68 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf08c:	a804      	add	r0, sp, #16
   bf08e:	f7f6 fa65 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bf092:	e7ab      	b.n	befec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bf094:	000bf115 	.word	0x000bf115

000bf098 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bf098:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf09a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf09c:	4605      	mov	r5, r0
	switch (__op)
   bf09e:	d103      	bne.n	bf0a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf0a0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf0a2:	6003      	str	r3, [r0, #0]
      }
   bf0a4:	2000      	movs	r0, #0
   bf0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bf0a8:	2a02      	cmp	r2, #2
   bf0aa:	d010      	beq.n	bf0ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bf0ac:	2a03      	cmp	r2, #3
   bf0ae:	d1f9      	bne.n	bf0a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf0b0:	6804      	ldr	r4, [r0, #0]
   bf0b2:	2c00      	cmp	r4, #0
   bf0b4:	d0f6      	beq.n	bf0a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bf0b6:	f104 0010 	add.w	r0, r4, #16
   bf0ba:	f7ff fe54 	bl	bed66 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf0be:	4620      	mov	r0, r4
   bf0c0:	f7f5 f98c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf0c4:	2118      	movs	r1, #24
   bf0c6:	4620      	mov	r0, r4
   bf0c8:	f7f4 ffeb 	bl	b40a2 <_ZdlPvj>
   bf0cc:	e7ea      	b.n	bf0a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf0ce:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bf0d0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf0d2:	f7f4 ffe0 	bl	b4096 <_Znwj>
   bf0d6:	4604      	mov	r4, r0
   bf0d8:	b150      	cbz	r0, bf0f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bf0da:	4631      	mov	r1, r6
   bf0dc:	f7ff fec6 	bl	bee6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf0e0:	6930      	ldr	r0, [r6, #16]
   bf0e2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf0e6:	b108      	cbz	r0, bf0ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bf0e8:	f004 fd48 	bl	c3b7c <strdup>
        type_(type) {
   bf0ec:	6120      	str	r0, [r4, #16]
   bf0ee:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bf0f0:	602c      	str	r4, [r5, #0]
	}
   bf0f2:	e7d7      	b.n	bf0a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bf0f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bf0f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf0f6:	2300      	movs	r3, #0
   bf0f8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf0fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf0fc:	4604      	mov	r4, r0
   bf0fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf100:	b12b      	cbz	r3, bf10e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf102:	2202      	movs	r2, #2
   bf104:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf106:	68eb      	ldr	r3, [r5, #12]
   bf108:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf10a:	68ab      	ldr	r3, [r5, #8]
   bf10c:	60a3      	str	r3, [r4, #8]
    }
   bf10e:	4620      	mov	r0, r4
   bf110:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf114 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bf114:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf116:	b089      	sub	sp, #36	; 0x24
   bf118:	4604      	mov	r4, r0
   bf11a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bf11c:	a801      	add	r0, sp, #4
   bf11e:	4611      	mov	r1, r2
   bf120:	f7ff fe54 	bl	bedcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bf124:	b1a4      	cbz	r4, bf150 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bf126:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf128:	b11d      	cbz	r5, bf132 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bf12a:	4628      	mov	r0, r5
   bf12c:	f004 fd26 	bl	c3b7c <strdup>
   bf130:	4605      	mov	r5, r0
   bf132:	a801      	add	r0, sp, #4
   bf134:	a903      	add	r1, sp, #12
        type_(type) {
   bf136:	9503      	str	r5, [sp, #12]
   bf138:	f8ad 4010 	strh.w	r4, [sp, #16]
   bf13c:	f7ff fea6 	bl	bee8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf140:	a803      	add	r0, sp, #12
   bf142:	f7ff fe10 	bl	bed66 <_ZN8particle5ErrorD1Ev>
   bf146:	a802      	add	r0, sp, #8
   bf148:	f7f6 fa08 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf14c:	b009      	add	sp, #36	; 0x24
   bf14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bf150:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf152:	2301      	movs	r3, #1
   bf154:	e8d5 2f4f 	ldrexb	r2, [r5]
   bf158:	2a00      	cmp	r2, #0
   bf15a:	d103      	bne.n	bf164 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bf15c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bf160:	2900      	cmp	r1, #0
   bf162:	d1f7      	bne.n	bf154 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bf164:	d1ef      	bne.n	bf146 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bf166:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bf168:	f3bf 8f5b 	dmb	ish
   bf16c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf16e:	1d2b      	adds	r3, r5, #4
   bf170:	f3bf 8f5b 	dmb	ish
   bf174:	e853 6f00 	ldrex	r6, [r3]
   bf178:	e843 4200 	strex	r2, r4, [r3]
   bf17c:	2a00      	cmp	r2, #0
   bf17e:	d1f9      	bne.n	bf174 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bf180:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf184:	2e00      	cmp	r6, #0
   bf186:	d0de      	beq.n	bf146 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bf188:	4620      	mov	r0, r4
   bf18a:	f7fe fa87 	bl	bd69c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf18e:	4607      	mov	r7, r0
   bf190:	b160      	cbz	r0, bf1ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf192:	f105 010c 	add.w	r1, r5, #12
   bf196:	4630      	mov	r0, r6
   bf198:	f7ff fe43 	bl	bee22 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bf19c:	4630      	mov	r0, r6
   bf19e:	f7f5 f91d 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf1a2:	2110      	movs	r1, #16
   bf1a4:	4630      	mov	r0, r6
   bf1a6:	f7f4 ff7c 	bl	b40a2 <_ZdlPvj>
   bf1aa:	e7cc      	b.n	bf146 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf1ac:	4631      	mov	r1, r6
   bf1ae:	a803      	add	r0, sp, #12
   bf1b0:	f7ff ffa0 	bl	bf0f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf1b4:	7b2b      	ldrb	r3, [r5, #12]
   bf1b6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf1ba:	2010      	movs	r0, #16
   bf1bc:	f7f4 ff6b 	bl	b4096 <_Znwj>
   bf1c0:	4605      	mov	r5, r0
   bf1c2:	b1d0      	cbz	r0, bf1fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bf1c4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf1c6:	2014      	movs	r0, #20
   bf1c8:	f7f4 ff65 	bl	b4096 <_Znwj>
   bf1cc:	4604      	mov	r4, r0
   bf1ce:	b178      	cbz	r0, bf1f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bf1d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf1d2:	4601      	mov	r1, r0
   bf1d4:	a803      	add	r0, sp, #12
   bf1d6:	f7ff fad7 	bl	be788 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf1da:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf1dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf1de:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf1e0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bf1e2:	9205      	str	r2, [sp, #20]
   bf1e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf1e6:	60e3      	str	r3, [r4, #12]
   bf1e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bf1ec:	9206      	str	r2, [sp, #24]
   bf1ee:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bf1f0:	4b06      	ldr	r3, [pc, #24]	; (bf20c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bf1f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf1f4:	4b06      	ldr	r3, [pc, #24]	; (bf210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf1f6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf1f8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bf1fa:	a803      	add	r0, sp, #12
   bf1fc:	f7f5 f8ee 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf200:	2200      	movs	r2, #0
   bf202:	4629      	mov	r1, r5
   bf204:	4803      	ldr	r0, [pc, #12]	; (bf214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bf206:	f7fe fa51 	bl	bd6ac <application_thread_invoke>
   bf20a:	e7c7      	b.n	bf19c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bf20c:	000bee35 	.word	0x000bee35
   bf210:	000bf219 	.word	0x000bf219
   bf214:	000bd913 	.word	0x000bd913

000bf218 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bf218:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf21a:	b570      	push	{r4, r5, r6, lr}
   bf21c:	4604      	mov	r4, r0
	switch (__op)
   bf21e:	d103      	bne.n	bf228 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf220:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf222:	6003      	str	r3, [r0, #0]
      }
   bf224:	2000      	movs	r0, #0
   bf226:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bf228:	2a02      	cmp	r2, #2
   bf22a:	d00c      	beq.n	bf246 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bf22c:	2a03      	cmp	r2, #3
   bf22e:	d1f9      	bne.n	bf224 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf230:	6804      	ldr	r4, [r0, #0]
   bf232:	2c00      	cmp	r4, #0
   bf234:	d0f6      	beq.n	bf224 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bf236:	4620      	mov	r0, r4
   bf238:	f7f5 f8d0 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf23c:	2114      	movs	r1, #20
   bf23e:	4620      	mov	r0, r4
   bf240:	f7f4 ff2f 	bl	b40a2 <_ZdlPvj>
   bf244:	e7ee      	b.n	bf224 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf246:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bf248:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf24a:	f7f4 ff24 	bl	b4096 <_Znwj>
   bf24e:	4605      	mov	r5, r0
   bf250:	b120      	cbz	r0, bf25c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bf252:	4631      	mov	r1, r6
   bf254:	f7ff ff4e 	bl	bf0f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bf258:	7c33      	ldrb	r3, [r6, #16]
   bf25a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bf25c:	6025      	str	r5, [r4, #0]
	}
   bf25e:	e7e1      	b.n	bf224 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bf260 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bf260:	2200      	movs	r2, #0
   bf262:	6840      	ldr	r0, [r0, #4]
   bf264:	4611      	mov	r1, r2
   bf266:	f7fe bab5 	b.w	bd7d4 <network_listening>

000bf26a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf26a:	2200      	movs	r2, #0
   bf26c:	6840      	ldr	r0, [r0, #4]
   bf26e:	4611      	mov	r1, r2
   bf270:	f7fe bac0 	b.w	bd7f4 <network_get_listen_timeout>

000bf274 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf274:	6840      	ldr	r0, [r0, #4]
   bf276:	2200      	movs	r2, #0
   bf278:	f7fe bab4 	b.w	bd7e4 <network_set_listen_timeout>

000bf27c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf27c:	6840      	ldr	r0, [r0, #4]
   bf27e:	2200      	movs	r2, #0
   bf280:	f081 0101 	eor.w	r1, r1, #1
   bf284:	f7fe ba9e 	b.w	bd7c4 <network_listen>

000bf288 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf288:	2300      	movs	r3, #0
   bf28a:	6840      	ldr	r0, [r0, #4]
   bf28c:	461a      	mov	r2, r3
   bf28e:	4619      	mov	r1, r3
   bf290:	f7fe ba90 	b.w	bd7b4 <network_off>

000bf294 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf294:	2300      	movs	r3, #0
   bf296:	6840      	ldr	r0, [r0, #4]
   bf298:	461a      	mov	r2, r3
   bf29a:	4619      	mov	r1, r3
   bf29c:	f7fe ba82 	b.w	bd7a4 <network_on>

000bf2a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bf2a0:	2200      	movs	r2, #0
   bf2a2:	6840      	ldr	r0, [r0, #4]
   bf2a4:	4611      	mov	r1, r2
   bf2a6:	f7fe ba75 	b.w	bd794 <network_ready>

000bf2aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf2aa:	2200      	movs	r2, #0
   bf2ac:	6840      	ldr	r0, [r0, #4]
   bf2ae:	4611      	mov	r1, r2
   bf2b0:	f7fe ba60 	b.w	bd774 <network_connecting>

000bf2b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf2b4:	6840      	ldr	r0, [r0, #4]
   bf2b6:	2200      	movs	r2, #0
   bf2b8:	2102      	movs	r1, #2
   bf2ba:	f7fe ba63 	b.w	bd784 <network_disconnect>

000bf2be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf2be:	2300      	movs	r3, #0
   bf2c0:	6840      	ldr	r0, [r0, #4]
   bf2c2:	461a      	mov	r2, r3
   bf2c4:	f7fe ba4e 	b.w	bd764 <network_connect>

000bf2c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf2c8:	4b02      	ldr	r3, [pc, #8]	; (bf2d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf2ca:	2203      	movs	r2, #3
   bf2cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf2ce:	4a02      	ldr	r2, [pc, #8]	; (bf2d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf2d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf2d2:	4770      	bx	lr
   bf2d4:	2003e660 	.word	0x2003e660
   bf2d8:	000c7294 	.word	0x000c7294

000bf2dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf2dc:	4770      	bx	lr

000bf2de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf2e0:	4606      	mov	r6, r0
   bf2e2:	4615      	mov	r5, r2
   bf2e4:	460c      	mov	r4, r1
   bf2e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf2e8:	42bc      	cmp	r4, r7
   bf2ea:	d006      	beq.n	bf2fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf2ec:	6833      	ldr	r3, [r6, #0]
   bf2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf2f2:	689b      	ldr	r3, [r3, #8]
   bf2f4:	4630      	mov	r0, r6
   bf2f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf2f8:	e7f6      	b.n	bf2e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf2fa:	4628      	mov	r0, r5
   bf2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf2fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf2fe:	7c00      	ldrb	r0, [r0, #16]
   bf300:	2200      	movs	r2, #0
   bf302:	f7fe b829 	b.w	bd358 <hal_i2c_write>

000bf306 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf306:	7c00      	ldrb	r0, [r0, #16]
   bf308:	2100      	movs	r1, #0
   bf30a:	f7fe b82d 	b.w	bd368 <hal_i2c_available>

000bf30e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf30e:	7c00      	ldrb	r0, [r0, #16]
   bf310:	2100      	movs	r1, #0
   bf312:	f7fe b831 	b.w	bd378 <hal_i2c_read>

000bf316 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf316:	7c00      	ldrb	r0, [r0, #16]
   bf318:	2100      	movs	r1, #0
   bf31a:	f7fe b835 	b.w	bd388 <hal_i2c_peek>

000bf31e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf31e:	7c00      	ldrb	r0, [r0, #16]
   bf320:	2100      	movs	r1, #0
   bf322:	f7fe b839 	b.w	bd398 <hal_i2c_flush>

000bf326 <_ZN7TwoWireD0Ev>:
   bf326:	b510      	push	{r4, lr}
   bf328:	2114      	movs	r1, #20
   bf32a:	4604      	mov	r4, r0
   bf32c:	f7f4 feb9 	bl	b40a2 <_ZdlPvj>
   bf330:	4620      	mov	r0, r4
   bf332:	bd10      	pop	{r4, pc}

000bf334 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf334:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf33a:	4604      	mov	r4, r0
   bf33c:	4608      	mov	r0, r1
   bf33e:	2100      	movs	r1, #0
   bf340:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf344:	4b03      	ldr	r3, [pc, #12]	; (bf354 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bf346:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bf348:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bf34a:	4611      	mov	r1, r2
   bf34c:	f7fe f834 	bl	bd3b8 <hal_i2c_init>
}
   bf350:	4620      	mov	r0, r4
   bf352:	bd10      	pop	{r4, pc}
   bf354:	000c72d0 	.word	0x000c72d0

000bf358 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf358:	7c00      	ldrb	r0, [r0, #16]
   bf35a:	2200      	movs	r2, #0
   bf35c:	f7fd bfdc 	b.w	bd318 <hal_i2c_set_speed>

000bf360 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf360:	2300      	movs	r3, #0
   bf362:	7c00      	ldrb	r0, [r0, #16]
   bf364:	461a      	mov	r2, r3
   bf366:	4619      	mov	r1, r3
   bf368:	f7fd bfde 	b.w	bd328 <hal_i2c_begin>

000bf36c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf36c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf36e:	2200      	movs	r2, #0
   bf370:	2314      	movs	r3, #20
   bf372:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bf376:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bf37a:	780b      	ldrb	r3, [r1, #0]
   bf37c:	f88d 3008 	strb.w	r3, [sp, #8]
   bf380:	684b      	ldr	r3, [r1, #4]
   bf382:	9303      	str	r3, [sp, #12]
   bf384:	68cb      	ldr	r3, [r1, #12]
   bf386:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf388:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bf38a:	7a0b      	ldrb	r3, [r1, #8]
   bf38c:	9305      	str	r3, [sp, #20]
   bf38e:	a901      	add	r1, sp, #4
   bf390:	f7fe f81a 	bl	bd3c8 <hal_i2c_request_ex>
}
   bf394:	b007      	add	sp, #28
   bf396:	f85d fb04 	ldr.w	pc, [sp], #4

000bf39a <_ZN7TwoWire11requestFromEhjh>:
{
   bf39a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf39c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf39e:	f88d 1000 	strb.w	r1, [sp]
   bf3a2:	f04f 0164 	mov.w	r1, #100	; 0x64
   bf3a6:	9103      	str	r1, [sp, #12]
   bf3a8:	bf18      	it	ne
   bf3aa:	2301      	movne	r3, #1
   bf3ac:	4669      	mov	r1, sp
    size_ = size;
   bf3ae:	9201      	str	r2, [sp, #4]
   bf3b0:	f88d 3008 	strb.w	r3, [sp, #8]
   bf3b4:	f7ff ffda 	bl	bf36c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf3b8:	b005      	add	sp, #20
   bf3ba:	f85d fb04 	ldr.w	pc, [sp], #4

000bf3be <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bf3be:	2301      	movs	r3, #1
   bf3c0:	f7ff bfeb 	b.w	bf39a <_ZN7TwoWire11requestFromEhjh>

000bf3c4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf3c4:	7c00      	ldrb	r0, [r0, #16]
   bf3c6:	2200      	movs	r2, #0
   bf3c8:	f7fd bfb6 	b.w	bd338 <hal_i2c_begin_transmission>

000bf3cc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bf3cc:	b2c9      	uxtb	r1, r1
   bf3ce:	f7ff bff9 	b.w	bf3c4 <_ZN7TwoWire17beginTransmissionEh>

000bf3d2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf3d2:	7c00      	ldrb	r0, [r0, #16]
   bf3d4:	2200      	movs	r2, #0
   bf3d6:	f7fd bfb7 	b.w	bd348 <hal_i2c_end_transmission>

000bf3da <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf3da:	2101      	movs	r1, #1
   bf3dc:	f7ff bff9 	b.w	bf3d2 <_ZN7TwoWire15endTransmissionEh>

000bf3e0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bf3e0:	f7fd bf8a 	b.w	bd2f8 <HAL_Interrupts_Disable_All>

000bf3e4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bf3e4:	f7fd bf80 	b.w	bd2e8 <HAL_Interrupts_Enable_All>

000bf3e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf3e8:	4770      	bx	lr

000bf3ea <_ZN9IPAddressD0Ev>:
   bf3ea:	b510      	push	{r4, lr}
   bf3ec:	2118      	movs	r1, #24
   bf3ee:	4604      	mov	r4, r0
   bf3f0:	f7f4 fe57 	bl	b40a2 <_ZdlPvj>
   bf3f4:	4620      	mov	r0, r4
   bf3f6:	bd10      	pop	{r4, pc}

000bf3f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf3fa:	7d03      	ldrb	r3, [r0, #20]
   bf3fc:	2b06      	cmp	r3, #6
{
   bf3fe:	b08d      	sub	sp, #52	; 0x34
   bf400:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf402:	f100 0704 	add.w	r7, r0, #4
   bf406:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf40a:	d012      	beq.n	bf432 <_ZNK9IPAddress7printToER5Print+0x3a>
   bf40c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf410:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf414:	220a      	movs	r2, #10
   bf416:	4630      	mov	r0, r6
   bf418:	f001 fabd 	bl	c0996 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bf41c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bf41e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bf420:	d019      	beq.n	bf456 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bf422:	2c00      	cmp	r4, #0
   bf424:	d0f4      	beq.n	bf410 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bf426:	212e      	movs	r1, #46	; 0x2e
   bf428:	4630      	mov	r0, r6
   bf42a:	f001 fa95 	bl	c0958 <_ZN5Print5printEc>
   bf42e:	4404      	add	r4, r0
   bf430:	e7ee      	b.n	bf410 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf432:	232f      	movs	r3, #47	; 0x2f
   bf434:	466a      	mov	r2, sp
   bf436:	4639      	mov	r1, r7
   bf438:	200a      	movs	r0, #10
		buf[0] = 0;
   bf43a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf43e:	f7fd ffcb 	bl	bd3d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bf442:	4668      	mov	r0, sp
   bf444:	f004 fbb7 	bl	c3bb6 <strlen>
   bf448:	6833      	ldr	r3, [r6, #0]
   bf44a:	4602      	mov	r2, r0
   bf44c:	68db      	ldr	r3, [r3, #12]
   bf44e:	4669      	mov	r1, sp
   bf450:	4630      	mov	r0, r6
   bf452:	4798      	blx	r3
   bf454:	4604      	mov	r4, r0
    }
    return n;
}
   bf456:	4620      	mov	r0, r4
   bf458:	b00d      	add	sp, #52	; 0x34
   bf45a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bf45c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bf45c:	b510      	push	{r4, lr}
   bf45e:	4b05      	ldr	r3, [pc, #20]	; (bf474 <_ZN9IPAddressC1Ev+0x18>)
   bf460:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bf462:	2211      	movs	r2, #17
   bf464:	f840 3b04 	str.w	r3, [r0], #4
   bf468:	2100      	movs	r1, #0
   bf46a:	f004 fb19 	bl	c3aa0 <memset>
}
   bf46e:	4620      	mov	r0, r4
   bf470:	bd10      	pop	{r4, pc}
   bf472:	bf00      	nop
   bf474:	000c72f8 	.word	0x000c72f8

000bf478 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bf478:	4603      	mov	r3, r0
   bf47a:	4a07      	ldr	r2, [pc, #28]	; (bf498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bf47c:	b510      	push	{r4, lr}
   bf47e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bf482:	f101 0210 	add.w	r2, r1, #16
   bf486:	f851 4b04 	ldr.w	r4, [r1], #4
   bf48a:	f843 4b04 	str.w	r4, [r3], #4
   bf48e:	4291      	cmp	r1, r2
   bf490:	d1f9      	bne.n	bf486 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bf492:	780a      	ldrb	r2, [r1, #0]
   bf494:	701a      	strb	r2, [r3, #0]
}
   bf496:	bd10      	pop	{r4, pc}
   bf498:	000c72f8 	.word	0x000c72f8

000bf49c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bf49c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bf49e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bf4a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bf4a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bf4aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bf4ae:	2304      	movs	r3, #4
   bf4b0:	6041      	str	r1, [r0, #4]
   bf4b2:	7503      	strb	r3, [r0, #20]
}
   bf4b4:	bd10      	pop	{r4, pc}
	...

000bf4b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bf4b8:	b507      	push	{r0, r1, r2, lr}
   bf4ba:	4b06      	ldr	r3, [pc, #24]	; (bf4d4 <_ZN9IPAddressC1EPKh+0x1c>)
   bf4bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bf4be:	78cb      	ldrb	r3, [r1, #3]
   bf4c0:	9300      	str	r3, [sp, #0]
   bf4c2:	788b      	ldrb	r3, [r1, #2]
   bf4c4:	784a      	ldrb	r2, [r1, #1]
   bf4c6:	7809      	ldrb	r1, [r1, #0]
   bf4c8:	f7ff ffe8 	bl	bf49c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bf4cc:	b003      	add	sp, #12
   bf4ce:	f85d fb04 	ldr.w	pc, [sp], #4
   bf4d2:	bf00      	nop
   bf4d4:	000c72f8 	.word	0x000c72f8

000bf4d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bf4d8:	f100 0310 	add.w	r3, r0, #16
   bf4dc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bf4de:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bf4e2:	2901      	cmp	r1, #1
   bf4e4:	4618      	mov	r0, r3
   bf4e6:	d108      	bne.n	bf4fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bf4e8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bf4ec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bf4f0:	3a01      	subs	r2, #1
   bf4f2:	f103 0310 	add.w	r3, r3, #16
   bf4f6:	d1f2      	bne.n	bf4de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bf4f8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bf4fa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bf4fc:	bf04      	itt	eq
   bf4fe:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bf502:	1852      	addeq	r2, r2, r1
   bf504:	e7f4      	b.n	bf4f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bf506 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bf506:	b40e      	push	{r1, r2, r3}
   bf508:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf50a:	b088      	sub	sp, #32
   bf50c:	af00      	add	r7, sp, #0
   bf50e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf512:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf514:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf518:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf51a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf51c:	462b      	mov	r3, r5
   bf51e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bf520:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf522:	f7fe f9af 	bl	bd884 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bf526:	280f      	cmp	r0, #15
   bf528:	687a      	ldr	r2, [r7, #4]
   bf52a:	d91a      	bls.n	bf562 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bf52c:	f100 0308 	add.w	r3, r0, #8
   bf530:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bf534:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bf536:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf53a:	1c41      	adds	r1, r0, #1
   bf53c:	462b      	mov	r3, r5
   bf53e:	4668      	mov	r0, sp
        va_start(args, fmt);
   bf540:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf542:	f7fe f99f 	bl	bd884 <vsnprintf>
        if (n > 0) {
   bf546:	1e02      	subs	r2, r0, #0
   bf548:	dd04      	ble.n	bf554 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bf54a:	6823      	ldr	r3, [r4, #0]
   bf54c:	4669      	mov	r1, sp
   bf54e:	689b      	ldr	r3, [r3, #8]
   bf550:	4620      	mov	r0, r4
   bf552:	4798      	blx	r3
   bf554:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bf556:	3720      	adds	r7, #32
   bf558:	46bd      	mov	sp, r7
   bf55a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bf55e:	b003      	add	sp, #12
   bf560:	4770      	bx	lr
    } else if (n > 0) {
   bf562:	2800      	cmp	r0, #0
   bf564:	d0f7      	beq.n	bf556 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bf566:	6823      	ldr	r3, [r4, #0]
   bf568:	4602      	mov	r2, r0
   bf56a:	689b      	ldr	r3, [r3, #8]
   bf56c:	f107 0110 	add.w	r1, r7, #16
   bf570:	4620      	mov	r0, r4
   bf572:	4798      	blx	r3
}
   bf574:	e7ef      	b.n	bf556 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bf576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf576:	b538      	push	{r3, r4, r5, lr}
   bf578:	680b      	ldr	r3, [r1, #0]
   bf57a:	6003      	str	r3, [r0, #0]
   bf57c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bf57e:	6843      	ldr	r3, [r0, #4]
   bf580:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf582:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bf584:	d008      	beq.n	bf598 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bf586:	b115      	cbz	r5, bf58e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bf588:	686b      	ldr	r3, [r5, #4]
   bf58a:	3301      	adds	r3, #1
   bf58c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bf58e:	6860      	ldr	r0, [r4, #4]
   bf590:	b108      	cbz	r0, bf596 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bf592:	f7fe fa7c 	bl	bda8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bf596:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf598:	bd38      	pop	{r3, r4, r5, pc}

000bf59a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bf59a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf59c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bf59e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf5a2:	689b      	ldr	r3, [r3, #8]
   bf5a4:	2201      	movs	r2, #1
   bf5a6:	f10d 0107 	add.w	r1, sp, #7
   bf5aa:	4798      	blx	r3
}
   bf5ac:	b003      	add	sp, #12
   bf5ae:	f85d fb04 	ldr.w	pc, [sp], #4

000bf5b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf5b2:	460b      	mov	r3, r1
   bf5b4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bf5b6:	2200      	movs	r2, #0
   bf5b8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bf5ba:	e9c0 2200 	strd	r2, r2, [r0]
   bf5be:	4604      	mov	r4, r0
        t_ = t;
   bf5c0:	6083      	str	r3, [r0, #8]
    if (t) {
   bf5c2:	b90b      	cbnz	r3, bf5c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bf5c4:	4620      	mov	r0, r4
   bf5c6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bf5c8:	f7ff ffd5 	bl	bf576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bf5cc:	e7fa      	b.n	bf5c4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bf5ce <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bf5ce:	6883      	ldr	r3, [r0, #8]
   bf5d0:	b1eb      	cbz	r3, bf60e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bf5d2:	781a      	ldrb	r2, [r3, #0]
   bf5d4:	2a03      	cmp	r2, #3
   bf5d6:	d81a      	bhi.n	bf60e <_ZNK5spark9JSONValue4typeEv+0x40>
   bf5d8:	e8df f002 	tbb	[pc, r2]
   bf5dc:	1b021704 	.word	0x1b021704
   bf5e0:	2005      	movs	r0, #5
   bf5e2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bf5e4:	6802      	ldr	r2, [r0, #0]
   bf5e6:	685b      	ldr	r3, [r3, #4]
   bf5e8:	6852      	ldr	r2, [r2, #4]
   bf5ea:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bf5ec:	282d      	cmp	r0, #45	; 0x2d
   bf5ee:	d012      	beq.n	bf616 <_ZNK5spark9JSONValue4typeEv+0x48>
   bf5f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf5f4:	2b09      	cmp	r3, #9
   bf5f6:	d90e      	bls.n	bf616 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bf5f8:	2874      	cmp	r0, #116	; 0x74
   bf5fa:	d00e      	beq.n	bf61a <_ZNK5spark9JSONValue4typeEv+0x4c>
   bf5fc:	2866      	cmp	r0, #102	; 0x66
   bf5fe:	d00c      	beq.n	bf61a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bf600:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bf604:	4258      	negs	r0, r3
   bf606:	4158      	adcs	r0, r3
   bf608:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bf60a:	2006      	movs	r0, #6
   bf60c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bf60e:	2000      	movs	r0, #0
   bf610:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bf612:	2004      	movs	r0, #4
   bf614:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bf616:	2003      	movs	r0, #3
   bf618:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bf61a:	2002      	movs	r0, #2
}
   bf61c:	4770      	bx	lr

000bf61e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bf61e:	b510      	push	{r4, lr}
   bf620:	4604      	mov	r4, r0
    switch (type()) {
   bf622:	f7ff ffd4 	bl	bf5ce <_ZNK5spark9JSONValue4typeEv>
   bf626:	2802      	cmp	r0, #2
   bf628:	d00e      	beq.n	bf648 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bf62a:	1ec3      	subs	r3, r0, #3
   bf62c:	b2db      	uxtb	r3, r3
   bf62e:	2b01      	cmp	r3, #1
   bf630:	d814      	bhi.n	bf65c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bf632:	6822      	ldr	r2, [r4, #0]
   bf634:	68a3      	ldr	r3, [r4, #8]
   bf636:	6850      	ldr	r0, [r2, #4]
   bf638:	685b      	ldr	r3, [r3, #4]
}
   bf63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bf63e:	220a      	movs	r2, #10
   bf640:	2100      	movs	r1, #0
   bf642:	4418      	add	r0, r3
   bf644:	f005 b9e0 	b.w	c4a08 <strtol>
        const char* const s = d_->json + t_->start;
   bf648:	6822      	ldr	r2, [r4, #0]
   bf64a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bf64c:	6852      	ldr	r2, [r2, #4]
   bf64e:	685b      	ldr	r3, [r3, #4]
   bf650:	5cd0      	ldrb	r0, [r2, r3]
   bf652:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bf656:	4258      	negs	r0, r3
   bf658:	4158      	adcs	r0, r3
}
   bf65a:	bd10      	pop	{r4, pc}
    switch (type()) {
   bf65c:	2000      	movs	r0, #0
   bf65e:	e7fc      	b.n	bf65a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bf660 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf660:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf662:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bf664:	e9c0 3300 	strd	r3, r3, [r0]
   bf668:	4604      	mov	r4, r0
        n_(0) {
   bf66a:	480e      	ldr	r0, [pc, #56]	; (bf6a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bf66c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bf670:	b1a9      	cbz	r1, bf69e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bf672:	780b      	ldrb	r3, [r1, #0]
   bf674:	2b03      	cmp	r3, #3
   bf676:	d006      	beq.n	bf686 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bf678:	b98b      	cbnz	r3, bf69e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bf67a:	6813      	ldr	r3, [r2, #0]
   bf67c:	6858      	ldr	r0, [r3, #4]
   bf67e:	684b      	ldr	r3, [r1, #4]
   bf680:	5cc3      	ldrb	r3, [r0, r3]
   bf682:	2b6e      	cmp	r3, #110	; 0x6e
   bf684:	d007      	beq.n	bf696 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bf686:	6813      	ldr	r3, [r2, #0]
   bf688:	684d      	ldr	r5, [r1, #4]
   bf68a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bf68c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bf68e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bf690:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bf692:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bf694:	60e3      	str	r3, [r4, #12]
   bf696:	4611      	mov	r1, r2
   bf698:	4620      	mov	r0, r4
   bf69a:	f7ff ff6c 	bl	bf576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf69e:	4620      	mov	r0, r4
   bf6a0:	bd38      	pop	{r3, r4, r5, pc}
   bf6a2:	bf00      	nop
   bf6a4:	000c7367 	.word	0x000c7367

000bf6a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf6a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf6aa:	2500      	movs	r5, #0
   bf6ac:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bf6ae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bf6b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bf6b6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf6ba:	4604      	mov	r4, r0
   bf6bc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bf6be:	b14b      	cbz	r3, bf6d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bf6c0:	781a      	ldrb	r2, [r3, #0]
   bf6c2:	2a01      	cmp	r2, #1
   bf6c4:	d106      	bne.n	bf6d4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bf6c6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bf6ca:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bf6cc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bf6ce:	6143      	str	r3, [r0, #20]
   bf6d0:	f7ff ff51 	bl	bf576 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf6d4:	4620      	mov	r0, r4
   bf6d6:	bd38      	pop	{r3, r4, r5, pc}

000bf6d8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bf6d8:	b510      	push	{r4, lr}
    if (!n_) {
   bf6da:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bf6dc:	4604      	mov	r4, r0
    if (!n_) {
   bf6de:	b163      	cbz	r3, bf6fa <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bf6e0:	6880      	ldr	r0, [r0, #8]
   bf6e2:	60e0      	str	r0, [r4, #12]
    --n_;
   bf6e4:	3b01      	subs	r3, #1
    ++t_;
   bf6e6:	3010      	adds	r0, #16
   bf6e8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bf6ea:	6120      	str	r0, [r4, #16]
    --n_;
   bf6ec:	6163      	str	r3, [r4, #20]
    if (n_) {
   bf6ee:	b113      	cbz	r3, bf6f6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bf6f0:	f7ff fef2 	bl	bf4d8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bf6f4:	60a0      	str	r0, [r4, #8]
    return true;
   bf6f6:	2001      	movs	r0, #1
   bf6f8:	e000      	b.n	bf6fc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bf6fa:	4618      	mov	r0, r3
}
   bf6fc:	bd10      	pop	{r4, pc}

000bf6fe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf6fe:	b510      	push	{r4, lr}
    write('}');
   bf700:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf702:	4604      	mov	r4, r0
    write('}');
   bf704:	f7ff ff49 	bl	bf59a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bf708:	2301      	movs	r3, #1
   bf70a:	7123      	strb	r3, [r4, #4]
}
   bf70c:	4620      	mov	r0, r4
   bf70e:	bd10      	pop	{r4, pc}

000bf710 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bf710:	b508      	push	{r3, lr}
    switch (state_) {
   bf712:	7903      	ldrb	r3, [r0, #4]
   bf714:	2b01      	cmp	r3, #1
   bf716:	d002      	beq.n	bf71e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bf718:	2b02      	cmp	r3, #2
   bf71a:	d004      	beq.n	bf726 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bf71c:	bd08      	pop	{r3, pc}
        write(',');
   bf71e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bf720:	f7ff ff3b 	bl	bf59a <_ZN5spark10JSONWriter5writeEc>
}
   bf724:	e7fa      	b.n	bf71c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bf726:	213a      	movs	r1, #58	; 0x3a
   bf728:	e7fa      	b.n	bf720 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bf72a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bf72a:	b510      	push	{r4, lr}
   bf72c:	4604      	mov	r4, r0
    writeSeparator();
   bf72e:	f7ff ffef 	bl	bf710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bf732:	4620      	mov	r0, r4
   bf734:	217b      	movs	r1, #123	; 0x7b
   bf736:	f7ff ff30 	bl	bf59a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bf73a:	2300      	movs	r3, #0
   bf73c:	7123      	strb	r3, [r4, #4]
}
   bf73e:	4620      	mov	r0, r4
   bf740:	bd10      	pop	{r4, pc}
	...

000bf744 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bf744:	b513      	push	{r0, r1, r4, lr}
   bf746:	4604      	mov	r4, r0
   bf748:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf74a:	f7ff ffe1 	bl	bf710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bf74e:	6823      	ldr	r3, [r4, #0]
   bf750:	9a01      	ldr	r2, [sp, #4]
   bf752:	68db      	ldr	r3, [r3, #12]
   bf754:	4903      	ldr	r1, [pc, #12]	; (bf764 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bf756:	4620      	mov	r0, r4
   bf758:	4798      	blx	r3
    state_ = NEXT;
   bf75a:	2301      	movs	r3, #1
}
   bf75c:	4620      	mov	r0, r4
    state_ = NEXT;
   bf75e:	7123      	strb	r3, [r4, #4]
}
   bf760:	b002      	add	sp, #8
   bf762:	bd10      	pop	{r4, pc}
   bf764:	000c5d96 	.word	0x000c5d96

000bf768 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bf768:	b513      	push	{r0, r1, r4, lr}
   bf76a:	4604      	mov	r4, r0
   bf76c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf76e:	f7ff ffcf 	bl	bf710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bf772:	6823      	ldr	r3, [r4, #0]
   bf774:	9a01      	ldr	r2, [sp, #4]
   bf776:	68db      	ldr	r3, [r3, #12]
   bf778:	4903      	ldr	r1, [pc, #12]	; (bf788 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bf77a:	4620      	mov	r0, r4
   bf77c:	4798      	blx	r3
    state_ = NEXT;
   bf77e:	2301      	movs	r3, #1
}
   bf780:	4620      	mov	r0, r4
    state_ = NEXT;
   bf782:	7123      	strb	r3, [r4, #4]
}
   bf784:	b002      	add	sp, #8
   bf786:	bd10      	pop	{r4, pc}
   bf788:	000c7304 	.word	0x000c7304

000bf78c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf790:	460d      	mov	r5, r1
    write('"');
   bf792:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf794:	4690      	mov	r8, r2
   bf796:	4604      	mov	r4, r0
    write('"');
   bf798:	f7ff feff 	bl	bf59a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bf79c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bf844 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bf7a0:	44a8      	add	r8, r5
    const char *s = str;
   bf7a2:	462f      	mov	r7, r5
    while (s != end) {
   bf7a4:	4547      	cmp	r7, r8
   bf7a6:	46ba      	mov	sl, r7
   bf7a8:	d03d      	beq.n	bf826 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bf7aa:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bf7ae:	2e22      	cmp	r6, #34	; 0x22
   bf7b0:	d006      	beq.n	bf7c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf7b2:	2e5c      	cmp	r6, #92	; 0x5c
   bf7b4:	d004      	beq.n	bf7c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf7b6:	4630      	mov	r0, r6
   bf7b8:	f004 f932 	bl	c3a20 <isprint>
   bf7bc:	2800      	cmp	r0, #0
   bf7be:	d1f1      	bne.n	bf7a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bf7c0:	6823      	ldr	r3, [r4, #0]
   bf7c2:	ebaa 0205 	sub.w	r2, sl, r5
   bf7c6:	689b      	ldr	r3, [r3, #8]
   bf7c8:	4629      	mov	r1, r5
   bf7ca:	4620      	mov	r0, r4
   bf7cc:	4798      	blx	r3
            write('\\');
   bf7ce:	215c      	movs	r1, #92	; 0x5c
   bf7d0:	4620      	mov	r0, r4
   bf7d2:	f7ff fee2 	bl	bf59a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bf7d6:	2e0d      	cmp	r6, #13
   bf7d8:	d80a      	bhi.n	bf7f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bf7da:	2e07      	cmp	r6, #7
   bf7dc:	d91c      	bls.n	bf818 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf7de:	f1a6 0308 	sub.w	r3, r6, #8
   bf7e2:	2b05      	cmp	r3, #5
   bf7e4:	d818      	bhi.n	bf818 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf7e6:	e8df f003 	tbb	[pc, r3]
   bf7ea:	0f0d      	.short	0x0f0d
   bf7ec:	15131711 	.word	0x15131711
   bf7f0:	2e22      	cmp	r6, #34	; 0x22
   bf7f2:	d001      	beq.n	bf7f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bf7f4:	2e5c      	cmp	r6, #92	; 0x5c
   bf7f6:	d10f      	bne.n	bf818 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bf7f8:	4631      	mov	r1, r6
                write('b');
   bf7fa:	4620      	mov	r0, r4
   bf7fc:	f7ff fecd 	bl	bf59a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bf800:	463d      	mov	r5, r7
    while (s != end) {
   bf802:	e7cf      	b.n	bf7a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bf804:	2162      	movs	r1, #98	; 0x62
   bf806:	e7f8      	b.n	bf7fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bf808:	2174      	movs	r1, #116	; 0x74
   bf80a:	e7f6      	b.n	bf7fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bf80c:	216e      	movs	r1, #110	; 0x6e
   bf80e:	e7f4      	b.n	bf7fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bf810:	2166      	movs	r1, #102	; 0x66
   bf812:	e7f2      	b.n	bf7fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bf814:	2172      	movs	r1, #114	; 0x72
   bf816:	e7f0      	b.n	bf7fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bf818:	6823      	ldr	r3, [r4, #0]
   bf81a:	4632      	mov	r2, r6
   bf81c:	68db      	ldr	r3, [r3, #12]
   bf81e:	4649      	mov	r1, r9
   bf820:	4620      	mov	r0, r4
   bf822:	4798      	blx	r3
                break;
   bf824:	e7ec      	b.n	bf800 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bf826:	42bd      	cmp	r5, r7
   bf828:	d005      	beq.n	bf836 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bf82a:	6823      	ldr	r3, [r4, #0]
   bf82c:	1b7a      	subs	r2, r7, r5
   bf82e:	689b      	ldr	r3, [r3, #8]
   bf830:	4629      	mov	r1, r5
   bf832:	4620      	mov	r0, r4
   bf834:	4798      	blx	r3
    }
    write('"');
   bf836:	2122      	movs	r1, #34	; 0x22
   bf838:	4620      	mov	r0, r4
   bf83a:	f7ff feae 	bl	bf59a <_ZN5spark10JSONWriter5writeEc>
}
   bf83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf842:	bf00      	nop
   bf844:	000c7307 	.word	0x000c7307

000bf848 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bf848:	b513      	push	{r0, r1, r4, lr}
   bf84a:	4604      	mov	r4, r0
   bf84c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf850:	f7ff ff5e 	bl	bf710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bf854:	4620      	mov	r0, r4
   bf856:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf85a:	f7ff ff97 	bl	bf78c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bf85e:	2302      	movs	r3, #2
}
   bf860:	4620      	mov	r0, r4
    state_ = VALUE;
   bf862:	7123      	strb	r3, [r4, #4]
}
   bf864:	b002      	add	sp, #8
   bf866:	bd10      	pop	{r4, pc}

000bf868 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bf868:	b513      	push	{r0, r1, r4, lr}
   bf86a:	4604      	mov	r4, r0
   bf86c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf870:	f7ff ff4e 	bl	bf710 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bf874:	4620      	mov	r0, r4
   bf876:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf87a:	f7ff ff87 	bl	bf78c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bf87e:	2301      	movs	r3, #1
}
   bf880:	4620      	mov	r0, r4
    state_ = NEXT;
   bf882:	7123      	strb	r3, [r4, #4]
}
   bf884:	b002      	add	sp, #8
   bf886:	bd10      	pop	{r4, pc}

000bf888 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bf888:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bf88a:	460b      	mov	r3, r1
    s->update(ticks);
   bf88c:	6892      	ldr	r2, [r2, #8]
   bf88e:	4601      	mov	r1, r0
   bf890:	4618      	mov	r0, r3
   bf892:	4710      	bx	r2

000bf894 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bf894:	b570      	push	{r4, r5, r6, lr}
   bf896:	4c0e      	ldr	r4, [pc, #56]	; (bf8d0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bf898:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bf89a:	2500      	movs	r5, #0
   bf89c:	241c      	movs	r4, #28
   bf89e:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf8a2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bf8a6:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bf8aa:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf8ac:	f004 0403 	and.w	r4, r4, #3
   bf8b0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bf8b4:	b2e4      	uxtb	r4, r4
   bf8b6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bf8b8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bf8ba:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bf8bc:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bf8be:	7c42      	ldrb	r2, [r0, #17]
   bf8c0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bf8c2:	bf0a      	itet	eq
   bf8c4:	4b03      	ldreq	r3, [pc, #12]	; (bf8d4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bf8c6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bf8c8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bf8cc:	bd70      	pop	{r4, r5, r6, pc}
   bf8ce:	bf00      	nop
   bf8d0:	000c61e0 	.word	0x000c61e0
   bf8d4:	000bf889 	.word	0x000bf889

000bf8d8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bf8d8:	6880      	ldr	r0, [r0, #8]
   bf8da:	6803      	ldr	r3, [r0, #0]
   bf8dc:	68db      	ldr	r3, [r3, #12]
   bf8de:	4718      	bx	r3

000bf8e0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bf8e0:	4770      	bx	lr

000bf8e2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bf8e2:	4608      	mov	r0, r1
   bf8e4:	b111      	cbz	r1, bf8ec <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bf8e6:	680b      	ldr	r3, [r1, #0]
   bf8e8:	685b      	ldr	r3, [r3, #4]
   bf8ea:	4718      	bx	r3
}
   bf8ec:	4770      	bx	lr

000bf8ee <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bf8ee:	4770      	bx	lr

000bf8f0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf8f0:	4770      	bx	lr

000bf8f2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bf8f2:	4770      	bx	lr

000bf8f4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bf8f4:	4770      	bx	lr

000bf8f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bf8f6:	b538      	push	{r3, r4, r5, lr}
   bf8f8:	4604      	mov	r4, r0
   bf8fa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bf8fc:	6800      	ldr	r0, [r0, #0]
   bf8fe:	212e      	movs	r1, #46	; 0x2e
   bf900:	f004 f920 	bl	c3b44 <strchrnul>
    size = s - category;
   bf904:	6823      	ldr	r3, [r4, #0]
   bf906:	1ac3      	subs	r3, r0, r3
   bf908:	602b      	str	r3, [r5, #0]
    if (size) {
   bf90a:	b123      	cbz	r3, bf916 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bf90c:	7803      	ldrb	r3, [r0, #0]
   bf90e:	b103      	cbz	r3, bf912 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bf910:	3001      	adds	r0, #1
   bf912:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf914:	6020      	str	r0, [r4, #0]
}
   bf916:	4618      	mov	r0, r3
   bf918:	bd38      	pop	{r3, r4, r5, pc}

000bf91a <_ZN5spark16JSONStreamWriterD0Ev>:
   bf91a:	b510      	push	{r4, lr}
   bf91c:	210c      	movs	r1, #12
   bf91e:	4604      	mov	r4, r0
   bf920:	f7f4 fbbf 	bl	b40a2 <_ZdlPvj>
   bf924:	4620      	mov	r0, r4
   bf926:	bd10      	pop	{r4, pc}

000bf928 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bf928:	b510      	push	{r4, lr}
   bf92a:	2104      	movs	r1, #4
   bf92c:	4604      	mov	r4, r0
   bf92e:	f7f4 fbb8 	bl	b40a2 <_ZdlPvj>
   bf932:	4620      	mov	r0, r4
   bf934:	bd10      	pop	{r4, pc}

000bf936 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf936:	b510      	push	{r4, lr}
   bf938:	2104      	movs	r1, #4
   bf93a:	4604      	mov	r4, r0
   bf93c:	f7f4 fbb1 	bl	b40a2 <_ZdlPvj>
   bf940:	4620      	mov	r0, r4
   bf942:	bd10      	pop	{r4, pc}

000bf944 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bf944:	f7fd bc68 	b.w	bd218 <os_mutex_recursive_lock>

000bf948 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bf948:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bf94a:	f004 f905 	bl	c3b58 <strcmp>
}
   bf94e:	fab0 f080 	clz	r0, r0
   bf952:	0940      	lsrs	r0, r0, #5
   bf954:	bd08      	pop	{r3, pc}

000bf956 <__tcf_1>:
   bf956:	4770      	bx	lr

000bf958 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bf958:	b510      	push	{r4, lr}
   bf95a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bf95c:	f001 fcb8 	bl	c12d0 <_Z16_fetch_usbserialv>
   bf960:	4284      	cmp	r4, r0
   bf962:	d010      	beq.n	bf986 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bf964:	f001 fe4c 	bl	c1600 <_Z22__fetch_global_Serial1v>
   bf968:	4284      	cmp	r4, r0
   bf96a:	d105      	bne.n	bf978 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bf96c:	f001 fe48 	bl	c1600 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bf970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bf974:	f001 bc47 	b.w	c1206 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bf978:	b12c      	cbz	r4, bf986 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bf97a:	6823      	ldr	r3, [r4, #0]
   bf97c:	4620      	mov	r0, r4
   bf97e:	685b      	ldr	r3, [r3, #4]
}
   bf980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf984:	4718      	bx	r3
   bf986:	bd10      	pop	{r4, pc}

000bf988 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf988:	680b      	ldr	r3, [r1, #0]
   bf98a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf98c:	684b      	ldr	r3, [r1, #4]
   bf98e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf990:	b113      	cbz	r3, bf998 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bf992:	685a      	ldr	r2, [r3, #4]
   bf994:	3201      	adds	r2, #1
   bf996:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf998:	4770      	bx	lr

000bf99a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bf99a:	b513      	push	{r0, r1, r4, lr}
   bf99c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bf99e:	4608      	mov	r0, r1
   bf9a0:	9101      	str	r1, [sp, #4]
   bf9a2:	f004 f908 	bl	c3bb6 <strlen>
   bf9a6:	9901      	ldr	r1, [sp, #4]
   bf9a8:	4602      	mov	r2, r0
   bf9aa:	4620      	mov	r0, r4
}
   bf9ac:	b002      	add	sp, #8
   bf9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bf9b2:	f7ff bf59 	b.w	bf868 <_ZN5spark10JSONWriter5valueEPKcj>

000bf9b6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bf9b6:	b513      	push	{r0, r1, r4, lr}
   bf9b8:	4604      	mov	r4, r0
    write(str, strlen(str));
   bf9ba:	4608      	mov	r0, r1
   bf9bc:	9101      	str	r1, [sp, #4]
   bf9be:	f004 f8fa 	bl	c3bb6 <strlen>
   bf9c2:	6823      	ldr	r3, [r4, #0]
   bf9c4:	9901      	ldr	r1, [sp, #4]
   bf9c6:	68db      	ldr	r3, [r3, #12]
   bf9c8:	4602      	mov	r2, r0
   bf9ca:	4620      	mov	r0, r4
}
   bf9cc:	b002      	add	sp, #8
   bf9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bf9d2:	4718      	bx	r3

000bf9d4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bf9d4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf9d6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bf9d8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf9dc:	68db      	ldr	r3, [r3, #12]
   bf9de:	2201      	movs	r2, #1
   bf9e0:	f10d 0107 	add.w	r1, sp, #7
   bf9e4:	4798      	blx	r3
}
   bf9e6:	b003      	add	sp, #12
   bf9e8:	f85d fb04 	ldr.w	pc, [sp], #4

000bf9ec <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf9ec:	b40e      	push	{r1, r2, r3}
   bf9ee:	b503      	push	{r0, r1, lr}
   bf9f0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bf9f2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf9f4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bf9f8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bf9fa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bf9fc:	f000 ffe9 	bl	c09d2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bfa00:	b002      	add	sp, #8
   bfa02:	f85d eb04 	ldr.w	lr, [sp], #4
   bfa06:	b003      	add	sp, #12
   bfa08:	4770      	bx	lr

000bfa0a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bfa0a:	680a      	ldr	r2, [r1, #0]
   bfa0c:	6002      	str	r2, [r0, #0]
   bfa0e:	684a      	ldr	r2, [r1, #4]
   bfa10:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bfa12:	2200      	movs	r2, #0
   bfa14:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bfa18:	b510      	push	{r4, lr}
   bfa1a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfa1c:	688c      	ldr	r4, [r1, #8]
   bfa1e:	6084      	str	r4, [r0, #8]
   bfa20:	68cc      	ldr	r4, [r1, #12]
   bfa22:	60c4      	str	r4, [r0, #12]
   bfa24:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfa26:	608a      	str	r2, [r1, #8]
   bfa28:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bfa2a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfa2c:	610a      	str	r2, [r1, #16]
   bfa2e:	bd10      	pop	{r4, pc}

000bfa30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfa30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bfa34:	e9d0 8400 	ldrd	r8, r4, [r0]
   bfa38:	f04f 0a14 	mov.w	sl, #20
   bfa3c:	9300      	str	r3, [sp, #0]
   bfa3e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bfa42:	4b18      	ldr	r3, [pc, #96]	; (bfaa4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfa44:	10a4      	asrs	r4, r4, #2
   bfa46:	4617      	mov	r7, r2
   bfa48:	435c      	muls	r4, r3
   bfa4a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bfa4c:	2c00      	cmp	r4, #0
   bfa4e:	dd21      	ble.n	bfa94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bfa50:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bfa52:	fb0a f006 	mul.w	r0, sl, r6
   bfa56:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bfa5a:	463a      	mov	r2, r7
   bfa5c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bfa60:	5828      	ldr	r0, [r5, r0]
   bfa62:	9101      	str	r1, [sp, #4]
   bfa64:	455f      	cmp	r7, fp
   bfa66:	bf28      	it	cs
   bfa68:	465a      	movcs	r2, fp
   bfa6a:	f004 f8bf 	bl	c3bec <strncmp>
                if (cmp == 0) {
   bfa6e:	2800      	cmp	r0, #0
   bfa70:	9901      	ldr	r1, [sp, #4]
   bfa72:	f04f 0301 	mov.w	r3, #1
   bfa76:	d10b      	bne.n	bfa90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bfa78:	455f      	cmp	r7, fp
   bfa7a:	d103      	bne.n	bfa84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bfa7c:	9a00      	ldr	r2, [sp, #0]
   bfa7e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfa80:	4634      	mov	r4, r6
   bfa82:	e7e3      	b.n	bfa4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bfa84:	d9fc      	bls.n	bfa80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bfa86:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bfa88:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bfa8c:	3e01      	subs	r6, #1
   bfa8e:	e7f7      	b.n	bfa80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bfa90:	dbf9      	blt.n	bfa86 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bfa92:	e7f5      	b.n	bfa80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bfa94:	eba5 0508 	sub.w	r5, r5, r8
}
   bfa98:	4802      	ldr	r0, [pc, #8]	; (bfaa4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfa9a:	10ad      	asrs	r5, r5, #2
   bfa9c:	4368      	muls	r0, r5
   bfa9e:	b003      	add	sp, #12
   bfaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfaa4:	cccccccd 	.word	0xcccccccd

000bfaa8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfaa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bfaaa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bfaac:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfaae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bfab0:	b303      	cbz	r3, bfaf4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bfab2:	b1f9      	cbz	r1, bfaf4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bfab4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bfab6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bfaba:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bfabc:	a903      	add	r1, sp, #12
   bfabe:	a801      	add	r0, sp, #4
   bfac0:	f7ff ff19 	bl	bf8f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bfac4:	4601      	mov	r1, r0
   bfac6:	b1a8      	cbz	r0, bfaf4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bfac8:	f10d 030b 	add.w	r3, sp, #11
   bfacc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bface:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bfad2:	4620      	mov	r0, r4
   bfad4:	f7ff ffac 	bl	bfa30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bfad8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bfadc:	b153      	cbz	r3, bfaf4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bfade:	6823      	ldr	r3, [r4, #0]
   bfae0:	2414      	movs	r4, #20
   bfae2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bfae6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bfae8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bfaec:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bfaee:	bfa8      	it	ge
   bfaf0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bfaf2:	e7e3      	b.n	bfabc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bfaf4:	4628      	mov	r0, r5
   bfaf6:	b004      	add	sp, #16
   bfaf8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bfafc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bfafc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bfafe:	4c09      	ldr	r4, [pc, #36]	; (bfb24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bfb00:	7823      	ldrb	r3, [r4, #0]
   bfb02:	f3bf 8f5b 	dmb	ish
   bfb06:	07db      	lsls	r3, r3, #31
   bfb08:	d409      	bmi.n	bfb1e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bfb0a:	4620      	mov	r0, r4
   bfb0c:	f7f4 fad8 	bl	b40c0 <__cxa_guard_acquire>
   bfb10:	b128      	cbz	r0, bfb1e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bfb12:	4620      	mov	r0, r4
   bfb14:	f7f4 fad9 	bl	b40ca <__cxa_guard_release>
   bfb18:	4803      	ldr	r0, [pc, #12]	; (bfb28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bfb1a:	f003 ff73 	bl	c3a04 <atexit>
}
   bfb1e:	4803      	ldr	r0, [pc, #12]	; (bfb2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bfb20:	bd10      	pop	{r4, pc}
   bfb22:	bf00      	nop
   bfb24:	2003e66c 	.word	0x2003e66c
   bfb28:	000bf8ef 	.word	0x000bf8ef
   bfb2c:	2003db90 	.word	0x2003db90

000bfb30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bfb30:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bfb32:	4c09      	ldr	r4, [pc, #36]	; (bfb58 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bfb34:	7823      	ldrb	r3, [r4, #0]
   bfb36:	f3bf 8f5b 	dmb	ish
   bfb3a:	07db      	lsls	r3, r3, #31
   bfb3c:	d409      	bmi.n	bfb52 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfb3e:	4620      	mov	r0, r4
   bfb40:	f7f4 fabe 	bl	b40c0 <__cxa_guard_acquire>
   bfb44:	b128      	cbz	r0, bfb52 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfb46:	4620      	mov	r0, r4
   bfb48:	f7f4 fabf 	bl	b40ca <__cxa_guard_release>
   bfb4c:	4803      	ldr	r0, [pc, #12]	; (bfb5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bfb4e:	f003 ff59 	bl	c3a04 <atexit>
    return &factory;
}
   bfb52:	4803      	ldr	r0, [pc, #12]	; (bfb60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bfb54:	bd10      	pop	{r4, pc}
   bfb56:	bf00      	nop
   bfb58:	2003e670 	.word	0x2003e670
   bfb5c:	000bf957 	.word	0x000bf957
   bfb60:	2003db94 	.word	0x2003db94

000bfb64 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bfb64:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bfb66:	2500      	movs	r5, #0
   bfb68:	4604      	mov	r4, r0
   bfb6a:	e9c0 5500 	strd	r5, r5, [r0]
   bfb6e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bfb72:	6085      	str	r5, [r0, #8]
   bfb74:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bfb76:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bfb7a:	f7fd fb3d 	bl	bd1f8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bfb7e:	f7ff ffbd 	bl	bfafc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bfb82:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfb84:	f7ff ffd4 	bl	bfb30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bfb88:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfb8a:	6220      	str	r0, [r4, #32]
}
   bfb8c:	4620      	mov	r0, r4
   bfb8e:	bd38      	pop	{r3, r4, r5, pc}

000bfb90 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bfb90:	b510      	push	{r4, lr}
    static LogManager mgr;
   bfb92:	4c0a      	ldr	r4, [pc, #40]	; (bfbbc <_ZN5spark10LogManager8instanceEv+0x2c>)
   bfb94:	7823      	ldrb	r3, [r4, #0]
   bfb96:	f3bf 8f5b 	dmb	ish
   bfb9a:	07db      	lsls	r3, r3, #31
   bfb9c:	d40c      	bmi.n	bfbb8 <_ZN5spark10LogManager8instanceEv+0x28>
   bfb9e:	4620      	mov	r0, r4
   bfba0:	f7f4 fa8e 	bl	b40c0 <__cxa_guard_acquire>
   bfba4:	b140      	cbz	r0, bfbb8 <_ZN5spark10LogManager8instanceEv+0x28>
   bfba6:	4806      	ldr	r0, [pc, #24]	; (bfbc0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bfba8:	f7ff ffdc 	bl	bfb64 <_ZN5spark10LogManagerC1Ev>
   bfbac:	4620      	mov	r0, r4
   bfbae:	f7f4 fa8c 	bl	b40ca <__cxa_guard_release>
   bfbb2:	4804      	ldr	r0, [pc, #16]	; (bfbc4 <_ZN5spark10LogManager8instanceEv+0x34>)
   bfbb4:	f003 ff26 	bl	c3a04 <atexit>
    return &mgr;
}
   bfbb8:	4801      	ldr	r0, [pc, #4]	; (bfbc0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bfbba:	bd10      	pop	{r4, pc}
   bfbbc:	2003e668 	.word	0x2003e668
   bfbc0:	2003e678 	.word	0x2003e678
   bfbc4:	000c00e5 	.word	0x000c00e5

000bfbc8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bfbc8:	4a02      	ldr	r2, [pc, #8]	; (bfbd4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bfbca:	4903      	ldr	r1, [pc, #12]	; (bfbd8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bfbcc:	4803      	ldr	r0, [pc, #12]	; (bfbdc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bfbce:	2300      	movs	r3, #0
   bfbd0:	f7fd bd3a 	b.w	bd648 <log_set_callbacks>
   bfbd4:	000bfec9 	.word	0x000bfec9
   bfbd8:	000bfe55 	.word	0x000bfe55
   bfbdc:	000bfdd5 	.word	0x000bfdd5

000bfbe0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bfbe0:	2300      	movs	r3, #0
   bfbe2:	461a      	mov	r2, r3
   bfbe4:	4619      	mov	r1, r3
   bfbe6:	4618      	mov	r0, r3
   bfbe8:	f7fd bd2e 	b.w	bd648 <log_set_callbacks>

000bfbec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bfbee:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfbf0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bfbf2:	4668      	mov	r0, sp
   bfbf4:	f7ff fec8 	bl	bf988 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bfbf8:	466a      	mov	r2, sp
   bfbfa:	4629      	mov	r1, r5
   bfbfc:	4620      	mov	r0, r4
   bfbfe:	f7ff fd53 	bl	bf6a8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bfc02:	a801      	add	r0, sp, #4
   bfc04:	f7f5 fcaa 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc08:	4620      	mov	r0, r4
   bfc0a:	b003      	add	sp, #12
   bfc0c:	bd30      	pop	{r4, r5, pc}

000bfc0e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfc0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bfc10:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfc12:	4604      	mov	r4, r0
   bfc14:	4668      	mov	r0, sp
   bfc16:	f7ff feb7 	bl	bf988 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bfc1a:	466a      	mov	r2, sp
   bfc1c:	4629      	mov	r1, r5
   bfc1e:	4620      	mov	r0, r4
   bfc20:	f7ff fd1e 	bl	bf660 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfc24:	a801      	add	r0, sp, #4
   bfc26:	f7f5 fc99 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc2a:	4620      	mov	r0, r4
   bfc2c:	b003      	add	sp, #12
   bfc2e:	bd30      	pop	{r4, r5, pc}

000bfc30 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bfc32:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfc34:	4604      	mov	r4, r0
   bfc36:	4668      	mov	r0, sp
   bfc38:	f7ff fea6 	bl	bf988 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bfc3c:	466a      	mov	r2, sp
   bfc3e:	4629      	mov	r1, r5
   bfc40:	4620      	mov	r0, r4
   bfc42:	f7ff fcb6 	bl	bf5b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfc46:	a801      	add	r0, sp, #4
   bfc48:	f7f5 fc88 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc4c:	4620      	mov	r0, r4
   bfc4e:	b003      	add	sp, #12
   bfc50:	bd30      	pop	{r4, r5, pc}
	...

000bfc54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bfc54:	b570      	push	{r4, r5, r6, lr}
   bfc56:	b08a      	sub	sp, #40	; 0x28
   bfc58:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bfc5a:	4601      	mov	r1, r0
   bfc5c:	a804      	add	r0, sp, #16
   bfc5e:	f7ff ffc5 	bl	bfbec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bfc62:	4e14      	ldr	r6, [pc, #80]	; (bfcb4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bfc64:	a804      	add	r0, sp, #16
   bfc66:	f7ff fd37 	bl	bf6d8 <_ZN5spark18JSONObjectIterator4nextEv>
   bfc6a:	b1e8      	cbz	r0, bfca8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bfc6c:	a904      	add	r1, sp, #16
   bfc6e:	4668      	mov	r0, sp
   bfc70:	f7ff ffcd 	bl	bfc0e <_ZNK5spark18JSONObjectIterator4nameEv>
   bfc74:	9802      	ldr	r0, [sp, #8]
   bfc76:	4631      	mov	r1, r6
   bfc78:	f7ff fe66 	bl	bf948 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bfc7c:	4604      	mov	r4, r0
   bfc7e:	b110      	cbz	r0, bfc86 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bfc80:	1e2c      	subs	r4, r5, #0
   bfc82:	bf18      	it	ne
   bfc84:	2401      	movne	r4, #1
   bfc86:	a801      	add	r0, sp, #4
   bfc88:	f7f5 fc68 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc8c:	2c00      	cmp	r4, #0
   bfc8e:	d0e9      	beq.n	bfc64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bfc90:	a904      	add	r1, sp, #16
   bfc92:	4668      	mov	r0, sp
   bfc94:	f7ff ffcc 	bl	bfc30 <_ZNK5spark18JSONObjectIterator5valueEv>
   bfc98:	4668      	mov	r0, sp
   bfc9a:	f7ff fcc0 	bl	bf61e <_ZNK5spark9JSONValue5toIntEv>
   bfc9e:	6028      	str	r0, [r5, #0]
   bfca0:	a801      	add	r0, sp, #4
   bfca2:	f7f5 fc5b 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfca6:	e7dd      	b.n	bfc64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bfca8:	a805      	add	r0, sp, #20
   bfcaa:	f7f5 fc57 	bl	b555c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfcae:	b00a      	add	sp, #40	; 0x28
   bfcb0:	bd70      	pop	{r4, r5, r6, pc}
   bfcb2:	bf00      	nop
   bfcb4:	000c730d 	.word	0x000c730d

000bfcb8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfcb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfcba:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bfcbc:	4620      	mov	r0, r4
   bfcbe:	4913      	ldr	r1, [pc, #76]	; (bfd0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfcc0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bfcc2:	f003 ff49 	bl	c3b58 <strcmp>
   bfcc6:	b950      	cbnz	r0, bfcde <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bfcc8:	f001 fb02 	bl	c12d0 <_Z16_fetch_usbserialv>
   bfccc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bfcd0:	f001 faee 	bl	c12b0 <_ZN9USBSerial5beginEl>
}
   bfcd4:	b003      	add	sp, #12
   bfcd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bfcda:	f001 baf9 	b.w	c12d0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bfcde:	490c      	ldr	r1, [pc, #48]	; (bfd10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bfce0:	4620      	mov	r0, r4
   bfce2:	f003 ff39 	bl	c3b58 <strcmp>
   bfce6:	b978      	cbnz	r0, bfd08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bfce8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bfcec:	a901      	add	r1, sp, #4
   bfcee:	4628      	mov	r0, r5
        int baud = 9600;
   bfcf0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bfcf2:	f7ff ffaf 	bl	bfc54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bfcf6:	f001 fc83 	bl	c1600 <_Z22__fetch_global_Serial1v>
   bfcfa:	9901      	ldr	r1, [sp, #4]
   bfcfc:	f001 fa80 	bl	c1200 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bfd00:	f001 fc7e 	bl	c1600 <_Z22__fetch_global_Serial1v>
}
   bfd04:	b003      	add	sp, #12
   bfd06:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bfd08:	2000      	movs	r0, #0
   bfd0a:	e7fb      	b.n	bfd04 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bfd0c:	000c7312 	.word	0x000c7312
   bfd10:	000c7319 	.word	0x000c7319

000bfd14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfd14:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bfd16:	e9d0 5300 	ldrd	r5, r3, [r0]
   bfd1a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfd1c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bfd1e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfd22:	42ae      	cmp	r6, r5
   bfd24:	d005      	beq.n	bfd32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bfd26:	f105 0008 	add.w	r0, r5, #8
   bfd2a:	f7ff fff3 	bl	bfd14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfd2e:	3514      	adds	r5, #20
   bfd30:	e7f7      	b.n	bfd22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bfd32:	6820      	ldr	r0, [r4, #0]
   bfd34:	f7fd fd7e 	bl	bd834 <free>
}
   bfd38:	4620      	mov	r0, r4
   bfd3a:	bd70      	pop	{r4, r5, r6, pc}

000bfd3c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bfd3c:	b510      	push	{r4, lr}
   bfd3e:	4604      	mov	r4, r0
   bfd40:	300c      	adds	r0, #12
   bfd42:	f7ff ffe7 	bl	bfd14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfd46:	4620      	mov	r0, r4
   bfd48:	f7fe f9a9 	bl	be09e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bfd4c:	4620      	mov	r0, r4
   bfd4e:	bd10      	pop	{r4, pc}

000bfd50 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bfd50:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bfd52:	4b04      	ldr	r3, [pc, #16]	; (bfd64 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bfd54:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bfd56:	f840 3b04 	str.w	r3, [r0], #4
   bfd5a:	f7ff ffef 	bl	bfd3c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bfd5e:	4620      	mov	r0, r4
   bfd60:	bd10      	pop	{r4, pc}
   bfd62:	bf00      	nop
   bfd64:	000c61c8 	.word	0x000c61c8

000bfd68 <_ZN5spark16StreamLogHandlerD0Ev>:
   bfd68:	b510      	push	{r4, lr}
   bfd6a:	4604      	mov	r4, r0
   bfd6c:	f7ff fff0 	bl	bfd50 <_ZN5spark16StreamLogHandlerD1Ev>
   bfd70:	4620      	mov	r0, r4
   bfd72:	2124      	movs	r1, #36	; 0x24
   bfd74:	f7f4 f995 	bl	b40a2 <_ZdlPvj>
   bfd78:	4620      	mov	r0, r4
   bfd7a:	bd10      	pop	{r4, pc}

000bfd7c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bfd7c:	b510      	push	{r4, lr}
   bfd7e:	4b03      	ldr	r3, [pc, #12]	; (bfd8c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bfd80:	6003      	str	r3, [r0, #0]
   bfd82:	4604      	mov	r4, r0
   bfd84:	f7ff ffe4 	bl	bfd50 <_ZN5spark16StreamLogHandlerD1Ev>
   bfd88:	4620      	mov	r0, r4
   bfd8a:	bd10      	pop	{r4, pc}
   bfd8c:	000c73b4 	.word	0x000c73b4

000bfd90 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bfd90:	b510      	push	{r4, lr}
   bfd92:	4604      	mov	r4, r0
   bfd94:	f7ff fff2 	bl	bfd7c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bfd98:	4620      	mov	r0, r4
   bfd9a:	2124      	movs	r1, #36	; 0x24
   bfd9c:	f7f4 f981 	bl	b40a2 <_ZdlPvj>
   bfda0:	4620      	mov	r0, r4
   bfda2:	bd10      	pop	{r4, pc}

000bfda4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bfda4:	2200      	movs	r2, #0
   bfda6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bfdaa:	b510      	push	{r4, lr}
        capacity_(0) {
   bfdac:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bfdae:	680c      	ldr	r4, [r1, #0]
   bfdb0:	6004      	str	r4, [r0, #0]
   bfdb2:	684c      	ldr	r4, [r1, #4]
   bfdb4:	6044      	str	r4, [r0, #4]
   bfdb6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdb8:	600a      	str	r2, [r1, #0]
   bfdba:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bfdbc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdbe:	608a      	str	r2, [r1, #8]
}
   bfdc0:	bd10      	pop	{r4, pc}

000bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   bfdc2:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bfdc4:	6803      	ldr	r3, [r0, #0]
   bfdc6:	4604      	mov	r4, r0
   bfdc8:	6818      	ldr	r0, [r3, #0]
   bfdca:	f7fd fa2d 	bl	bd228 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bfdce:	4620      	mov	r0, r4
   bfdd0:	bd10      	pop	{r4, pc}
	...

000bfdd4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bfdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfdd8:	b087      	sub	sp, #28
   bfdda:	4680      	mov	r8, r0
   bfddc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bfdde:	4b1c      	ldr	r3, [pc, #112]	; (bfe50 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bfde0:	685b      	ldr	r3, [r3, #4]
   bfde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfde6:	4689      	mov	r9, r1
   bfde8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bfdea:	b96b      	cbnz	r3, bfe08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bfdec:	f7ff fed0 	bl	bfb90 <_ZN5spark10LogManager8instanceEv>
   bfdf0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfdf2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bfdf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfdf8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bfdfa:	f7ff fda3 	bl	bf944 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bfdfe:	7b23      	ldrb	r3, [r4, #12]
   bfe00:	b12b      	cbz	r3, bfe0e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bfe02:	a805      	add	r0, sp, #20
   bfe04:	f7ff ffdd 	bl	bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bfe08:	b007      	add	sp, #28
   bfe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bfe0e:	2301      	movs	r3, #1
   bfe10:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bfe12:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bfe16:	fa5f f989 	uxtb.w	r9, r9
   bfe1a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfe1e:	45aa      	cmp	sl, r5
   bfe20:	d012      	beq.n	bfe48 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bfe22:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bfe26:	4631      	mov	r1, r6
   bfe28:	1d38      	adds	r0, r7, #4
   bfe2a:	f7ff fe3d 	bl	bfaa8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfe2e:	4581      	cmp	r9, r0
   bfe30:	d3f5      	bcc.n	bfe1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bfe32:	683b      	ldr	r3, [r7, #0]
   bfe34:	9a03      	ldr	r2, [sp, #12]
   bfe36:	9200      	str	r2, [sp, #0]
   bfe38:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bfe3c:	464a      	mov	r2, r9
   bfe3e:	4633      	mov	r3, r6
   bfe40:	4641      	mov	r1, r8
   bfe42:	4638      	mov	r0, r7
   bfe44:	47d8      	blx	fp
   bfe46:	e7ea      	b.n	bfe1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bfe48:	2300      	movs	r3, #0
   bfe4a:	7323      	strb	r3, [r4, #12]
   bfe4c:	e7d9      	b.n	bfe02 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bfe4e:	bf00      	nop
   bfe50:	e000ed00 	.word	0xe000ed00

000bfe54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bfe54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfe58:	469b      	mov	fp, r3
   bfe5a:	4b1a      	ldr	r3, [pc, #104]	; (bfec4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bfe5c:	685b      	ldr	r3, [r3, #4]
   bfe5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfe62:	4680      	mov	r8, r0
   bfe64:	4689      	mov	r9, r1
   bfe66:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bfe68:	b96b      	cbnz	r3, bfe86 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bfe6a:	f7ff fe91 	bl	bfb90 <_ZN5spark10LogManager8instanceEv>
   bfe6e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfe70:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bfe74:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfe76:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfe78:	f7ff fd64 	bl	bf944 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bfe7c:	7b23      	ldrb	r3, [r4, #12]
   bfe7e:	b12b      	cbz	r3, bfe8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bfe80:	a801      	add	r0, sp, #4
   bfe82:	f7ff ff9e 	bl	bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfe86:	b003      	add	sp, #12
   bfe88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bfe8c:	2301      	movs	r3, #1
   bfe8e:	7323      	strb	r3, [r4, #12]
   bfe90:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bfe94:	b2f6      	uxtb	r6, r6
   bfe96:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfe9a:	4555      	cmp	r5, sl
   bfe9c:	d00e      	beq.n	bfebc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bfe9e:	f855 7b04 	ldr.w	r7, [r5], #4
   bfea2:	4659      	mov	r1, fp
   bfea4:	1d38      	adds	r0, r7, #4
   bfea6:	f7ff fdff 	bl	bfaa8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfeaa:	4286      	cmp	r6, r0
   bfeac:	d3f5      	bcc.n	bfe9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bfeae:	683b      	ldr	r3, [r7, #0]
   bfeb0:	464a      	mov	r2, r9
   bfeb2:	68db      	ldr	r3, [r3, #12]
   bfeb4:	4641      	mov	r1, r8
   bfeb6:	4638      	mov	r0, r7
   bfeb8:	4798      	blx	r3
   bfeba:	e7ee      	b.n	bfe9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bfebc:	2300      	movs	r3, #0
   bfebe:	7323      	strb	r3, [r4, #12]
   bfec0:	e7de      	b.n	bfe80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bfec2:	bf00      	nop
   bfec4:	e000ed00 	.word	0xe000ed00

000bfec8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bfec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bfecc:	4b16      	ldr	r3, [pc, #88]	; (bff28 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bfece:	685b      	ldr	r3, [r3, #4]
   bfed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfed4:	4605      	mov	r5, r0
   bfed6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bfed8:	bb1b      	cbnz	r3, bff22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bfeda:	f7ff fe59 	bl	bfb90 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bfede:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bfee2:	4604      	mov	r4, r0
   bfee4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfee6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfee8:	f7ff fd2c 	bl	bf944 <_ZN14RecursiveMutex4lockEv.isra.0>
   bfeec:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bfef0:	2446      	movs	r4, #70	; 0x46
   bfef2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfef6:	45b0      	cmp	r8, r6
   bfef8:	d109      	bne.n	bff0e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bfefa:	a801      	add	r0, sp, #4
   bfefc:	f7ff ff61 	bl	bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bff00:	42a5      	cmp	r5, r4
   bff02:	bfb4      	ite	lt
   bff04:	2000      	movlt	r0, #0
   bff06:	2001      	movge	r0, #1
}
   bff08:	b002      	add	sp, #8
   bff0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bff0e:	f856 0b04 	ldr.w	r0, [r6], #4
   bff12:	4639      	mov	r1, r7
   bff14:	3004      	adds	r0, #4
   bff16:	f7ff fdc7 	bl	bfaa8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bff1a:	4284      	cmp	r4, r0
   bff1c:	bfa8      	it	ge
   bff1e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bff20:	e7e9      	b.n	bfef6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bff22:	2000      	movs	r0, #0
   bff24:	e7f0      	b.n	bff08 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bff26:	bf00      	nop
   bff28:	e000ed00 	.word	0xe000ed00

000bff2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bff2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff2e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bff32:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bff34:	4604      	mov	r4, r0
   bff36:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff38:	db0d      	blt.n	bff56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bff3a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bff3c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bff3e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bff40:	dd04      	ble.n	bff4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bff42:	00b9      	lsls	r1, r7, #2
   bff44:	f7fd fc7e 	bl	bd844 <realloc>
            if (!d) {
   bff48:	b918      	cbnz	r0, bff52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bff4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bff4c:	f7fd fc72 	bl	bd834 <free>
        T* d = nullptr;
   bff50:	2000      	movs	r0, #0
        data_ = d;
   bff52:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bff54:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bff56:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bff58:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bff5a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bff5e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bff60:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bff64:	1d08      	adds	r0, r1, #4
   bff66:	f003 fd81 	bl	c3a6c <memmove>
    new(p) T(std::move(value));
   bff6a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bff6e:	6863      	ldr	r3, [r4, #4]
   bff70:	3301      	adds	r3, #1
   bff72:	6063      	str	r3, [r4, #4]
    return true;
   bff74:	2001      	movs	r0, #1
   bff76:	e7e8      	b.n	bff4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bff78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bff78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bff7a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bff7e:	4604      	mov	r4, r0
   bff80:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bff82:	9301      	str	r3, [sp, #4]
   bff84:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bff86:	f7ff fcdd 	bl	bf944 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bff8a:	e9d4 3200 	ldrd	r3, r2, [r4]
   bff8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bff92:	4293      	cmp	r3, r2
   bff94:	4619      	mov	r1, r3
   bff96:	d00b      	beq.n	bffb0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bff98:	6809      	ldr	r1, [r1, #0]
   bff9a:	42a9      	cmp	r1, r5
   bff9c:	f103 0304 	add.w	r3, r3, #4
   bffa0:	d1f7      	bne.n	bff92 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bffa2:	a801      	add	r0, sp, #4
   bffa4:	f7ff ff0d 	bl	bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bffa8:	2500      	movs	r5, #0
}
   bffaa:	4628      	mov	r0, r5
   bffac:	b003      	add	sp, #12
   bffae:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bffb0:	4629      	mov	r1, r5
   bffb2:	4620      	mov	r0, r4
   bffb4:	f7ff ffba 	bl	bff2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bffb8:	4605      	mov	r5, r0
   bffba:	2800      	cmp	r0, #0
   bffbc:	d0f1      	beq.n	bffa2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bffbe:	6863      	ldr	r3, [r4, #4]
   bffc0:	2b01      	cmp	r3, #1
   bffc2:	d101      	bne.n	bffc8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bffc4:	f7ff fe00 	bl	bfbc8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bffc8:	a801      	add	r0, sp, #4
   bffca:	f7ff fefa 	bl	bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bffce:	e7ec      	b.n	bffaa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bffd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bffd0:	b570      	push	{r4, r5, r6, lr}
   bffd2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bffd4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bffd8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bffda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bffde:	4282      	cmp	r2, r0
   bffe0:	d00f      	beq.n	c0002 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bffe2:	4601      	mov	r1, r0
            if (*p == value) {
   bffe4:	681d      	ldr	r5, [r3, #0]
   bffe6:	f851 6b04 	ldr.w	r6, [r1], #4
   bffea:	42ae      	cmp	r6, r5
   bffec:	d107      	bne.n	bfffe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bffee:	1a52      	subs	r2, r2, r1
   bfff0:	f003 fd3c 	bl	c3a6c <memmove>
    --size_;
   bfff4:	6863      	ldr	r3, [r4, #4]
   bfff6:	3b01      	subs	r3, #1
   bfff8:	6063      	str	r3, [r4, #4]
    return true;
   bfffa:	2001      	movs	r0, #1
}
   bfffc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bfffe:	4608      	mov	r0, r1
   c0000:	e7ed      	b.n	bffde <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0002:	2000      	movs	r0, #0
   c0004:	e7fa      	b.n	bfffc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0006 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0006:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0008:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c000c:	4604      	mov	r4, r0
   c000e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0010:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0012:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0014:	f7ff fc96 	bl	bf944 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0018:	a901      	add	r1, sp, #4
   c001a:	4620      	mov	r0, r4
   c001c:	f7ff ffd8 	bl	bffd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0020:	b118      	cbz	r0, c002a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0022:	6863      	ldr	r3, [r4, #4]
   c0024:	b90b      	cbnz	r3, c002a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0026:	f7ff fddb 	bl	bfbe0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c002a:	a803      	add	r0, sp, #12
   c002c:	f7ff fec9 	bl	bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0030:	b004      	add	sp, #16
   c0032:	bd10      	pop	{r4, pc}

000c0034 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0034:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0036:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c003a:	2318      	movs	r3, #24
   c003c:	4604      	mov	r4, r0
   c003e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0042:	42ae      	cmp	r6, r5
   c0044:	d015      	beq.n	c0072 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0046:	f105 0110 	add.w	r1, r5, #16
   c004a:	4620      	mov	r0, r4
   c004c:	f7ff ffc0 	bl	bffd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0050:	6863      	ldr	r3, [r4, #4]
   c0052:	b90b      	cbnz	r3, c0058 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0054:	f7ff fdc4 	bl	bfbe0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0058:	69e0      	ldr	r0, [r4, #28]
   c005a:	6929      	ldr	r1, [r5, #16]
   c005c:	6803      	ldr	r3, [r0, #0]
   c005e:	68db      	ldr	r3, [r3, #12]
   c0060:	4798      	blx	r3
        if (h.stream) {
   c0062:	6969      	ldr	r1, [r5, #20]
   c0064:	b119      	cbz	r1, c006e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c0066:	6a20      	ldr	r0, [r4, #32]
   c0068:	6803      	ldr	r3, [r0, #0]
   c006a:	68db      	ldr	r3, [r3, #12]
   c006c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c006e:	3518      	adds	r5, #24
   c0070:	e7e7      	b.n	c0042 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c0072:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0076:	2618      	movs	r6, #24
   c0078:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c007c:	42ae      	cmp	r6, r5
   c007e:	d004      	beq.n	c008a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0080:	4628      	mov	r0, r5
   c0082:	f000 fea9 	bl	c0dd8 <_ZN6StringD1Ev>
   c0086:	3518      	adds	r5, #24
   c0088:	e7f8      	b.n	c007c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c008a:	2300      	movs	r3, #0
   c008c:	6163      	str	r3, [r4, #20]
}
   c008e:	bd70      	pop	{r4, r5, r6, pc}

000c0090 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0090:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0092:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c0094:	f7ff fda4 	bl	bfbe0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0098:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c009c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c009e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c00a0:	f7ff fc50 	bl	bf944 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c00a4:	4620      	mov	r0, r4
   c00a6:	f7ff ffc5 	bl	c0034 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c00aa:	a801      	add	r0, sp, #4
   c00ac:	f7ff fe89 	bl	bfdc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c00b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c00b2:	b108      	cbz	r0, c00b8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c00b4:	f7fd f8a8 	bl	bd208 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c00b8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c00bc:	2618      	movs	r6, #24
   c00be:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c00c2:	42ae      	cmp	r6, r5
   c00c4:	d004      	beq.n	c00d0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c00c6:	4628      	mov	r0, r5
   c00c8:	f000 fe86 	bl	c0dd8 <_ZN6StringD1Ev>
   c00cc:	3518      	adds	r5, #24
   c00ce:	e7f8      	b.n	c00c2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c00d0:	6920      	ldr	r0, [r4, #16]
   c00d2:	f7fd fbaf 	bl	bd834 <free>
   c00d6:	6820      	ldr	r0, [r4, #0]
   c00d8:	f7fd fbac 	bl	bd834 <free>
}
   c00dc:	4620      	mov	r0, r4
   c00de:	b002      	add	sp, #8
   c00e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000c00e4 <__tcf_2>:
    static LogManager mgr;
   c00e4:	4801      	ldr	r0, [pc, #4]	; (c00ec <__tcf_2+0x8>)
   c00e6:	f7ff bfd3 	b.w	c0090 <_ZN5spark10LogManagerD1Ev>
   c00ea:	bf00      	nop
   c00ec:	2003e678 	.word	0x2003e678

000c00f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c00f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c00f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c00f4:	4604      	mov	r4, r0
   c00f6:	460d      	mov	r5, r1
   c00f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c00fa:	d915      	bls.n	c0128 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c00fc:	4290      	cmp	r0, r2
   c00fe:	d214      	bcs.n	c012a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0100:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0104:	1a75      	subs	r5, r6, r1
   c0106:	f1a1 0714 	sub.w	r7, r1, #20
   c010a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c010c:	42b7      	cmp	r7, r6
   c010e:	d01a      	beq.n	c0146 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0110:	b11c      	cbz	r4, c011a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0112:	4631      	mov	r1, r6
   c0114:	4620      	mov	r0, r4
   c0116:	f7ff fc78 	bl	bfa0a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c011a:	f106 0008 	add.w	r0, r6, #8
   c011e:	f7ff fdf9 	bl	bfd14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0122:	3e14      	subs	r6, #20
   c0124:	3c14      	subs	r4, #20
   c0126:	e7f1      	b.n	c010c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0128:	d00d      	beq.n	c0146 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c012a:	42b5      	cmp	r5, r6
   c012c:	d00b      	beq.n	c0146 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c012e:	b11c      	cbz	r4, c0138 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0130:	4629      	mov	r1, r5
   c0132:	4620      	mov	r0, r4
   c0134:	f7ff fc69 	bl	bfa0a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0138:	f105 0008 	add.w	r0, r5, #8
   c013c:	f7ff fdea 	bl	bfd14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0140:	3514      	adds	r5, #20
   c0142:	3414      	adds	r4, #20
   c0144:	e7f1      	b.n	c012a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0148 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0148:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c014a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c014c:	4604      	mov	r4, r0
   c014e:	460d      	mov	r5, r1
   c0150:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0152:	d914      	bls.n	c017e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0154:	4290      	cmp	r0, r2
   c0156:	d213      	bcs.n	c0180 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0158:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c015c:	1a75      	subs	r5, r6, r1
   c015e:	f1a1 0710 	sub.w	r7, r1, #16
   c0162:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0164:	42b7      	cmp	r7, r6
   c0166:	d018      	beq.n	c019a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0168:	b11c      	cbz	r4, c0172 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c016a:	4631      	mov	r1, r6
   c016c:	4620      	mov	r0, r4
   c016e:	f000 feaf 	bl	c0ed0 <_ZN6StringC1EOS_>
                end->~T();
   c0172:	4630      	mov	r0, r6
   c0174:	f000 fe30 	bl	c0dd8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c0178:	3e10      	subs	r6, #16
   c017a:	3c10      	subs	r4, #16
   c017c:	e7f2      	b.n	c0164 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c017e:	d00c      	beq.n	c019a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0180:	42b5      	cmp	r5, r6
   c0182:	d00a      	beq.n	c019a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0184:	b11c      	cbz	r4, c018e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c0186:	4629      	mov	r1, r5
   c0188:	4620      	mov	r0, r4
   c018a:	f000 fea1 	bl	c0ed0 <_ZN6StringC1EOS_>
                p->~T();
   c018e:	4628      	mov	r0, r5
   c0190:	f000 fe22 	bl	c0dd8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0194:	3510      	adds	r5, #16
   c0196:	3410      	adds	r4, #16
   c0198:	e7f2      	b.n	c0180 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c019a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c019c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c019c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c019e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c01a0:	4605      	mov	r5, r0
        if (n > 0) {
   c01a2:	dd11      	ble.n	c01c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c01a4:	0130      	lsls	r0, r6, #4
   c01a6:	f7fd fb3d 	bl	bd824 <malloc>
            if (!d) {
   c01aa:	4604      	mov	r4, r0
   c01ac:	b158      	cbz	r0, c01c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c01ae:	e9d5 1200 	ldrd	r1, r2, [r5]
   c01b2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c01b6:	f7ff ffc7 	bl	c0148 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c01ba:	6828      	ldr	r0, [r5, #0]
   c01bc:	f7fd fb3a 	bl	bd834 <free>
        data_ = d;
   c01c0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c01c2:	60ae      	str	r6, [r5, #8]
        return true;
   c01c4:	2001      	movs	r0, #1
    }
   c01c6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c01c8:	2400      	movs	r4, #0
   c01ca:	e7f6      	b.n	c01ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c01cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c01cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c01d0:	4690      	mov	r8, r2
   c01d2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c01d4:	2300      	movs	r3, #0
   c01d6:	9103      	str	r1, [sp, #12]
    return size_;
   c01d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c01dc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c01de:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c01e0:	4299      	cmp	r1, r3
        capacity_(0) {
   c01e2:	e9c0 3300 	strd	r3, r3, [r0]
   c01e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c01ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c01ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c01f2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c01f4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c01f6:	dc23      	bgt.n	c0240 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c01f8:	e9d8 5700 	ldrd	r5, r7, [r8]
   c01fc:	2314      	movs	r3, #20
   c01fe:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0202:	42af      	cmp	r7, r5
   c0204:	d03b      	beq.n	c027e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0206:	4629      	mov	r1, r5
   c0208:	a80b      	add	r0, sp, #44	; 0x2c
   c020a:	f000 fe61 	bl	c0ed0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c020e:	a90b      	add	r1, sp, #44	; 0x2c
   c0210:	a80f      	add	r0, sp, #60	; 0x3c
   c0212:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0214:	f000 fe5c 	bl	c0ed0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0218:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c021c:	4299      	cmp	r1, r3
   c021e:	da1b      	bge.n	c0258 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0220:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0222:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0224:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0228:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c022c:	4631      	mov	r1, r6
   c022e:	f106 0010 	add.w	r0, r6, #16
   c0232:	f7ff ff89 	bl	c0148 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0236:	b9ee      	cbnz	r6, c0274 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0238:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c023a:	3301      	adds	r3, #1
   c023c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c023e:	e011      	b.n	c0264 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0240:	a808      	add	r0, sp, #32
   c0242:	f7ff ffab 	bl	c019c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0246:	2800      	cmp	r0, #0
   c0248:	d1d6      	bne.n	c01f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c024a:	a808      	add	r0, sp, #32
   c024c:	f7fd ff27 	bl	be09e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0250:	4620      	mov	r0, r4
   c0252:	b015      	add	sp, #84	; 0x54
   c0254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0258:	3101      	adds	r1, #1
   c025a:	a808      	add	r0, sp, #32
   c025c:	f7ff ff9e 	bl	c019c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0260:	2800      	cmp	r0, #0
   c0262:	d1dd      	bne.n	c0220 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0264:	a80f      	add	r0, sp, #60	; 0x3c
   c0266:	f000 fdb7 	bl	c0dd8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c026a:	a80b      	add	r0, sp, #44	; 0x2c
   c026c:	f000 fdb4 	bl	c0dd8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0270:	3514      	adds	r5, #20
   c0272:	e7c6      	b.n	c0202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0274:	a90f      	add	r1, sp, #60	; 0x3c
   c0276:	4630      	mov	r0, r6
   c0278:	f000 fe2a 	bl	c0ed0 <_ZN6StringC1EOS_>
   c027c:	e7dc      	b.n	c0238 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c027e:	2600      	movs	r6, #0
   c0280:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0284:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c0286:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c028a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c028e:	429e      	cmp	r6, r3
   c0290:	da7c      	bge.n	c038c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0292:	0133      	lsls	r3, r6, #4
   c0294:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c0296:	9306      	str	r3, [sp, #24]
        if (!category) {
   c0298:	b90b      	cbnz	r3, c029e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c029a:	3601      	adds	r6, #1
   c029c:	e7f5      	b.n	c028a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c029e:	2300      	movs	r3, #0
   c02a0:	9307      	str	r3, [sp, #28]
   c02a2:	fb09 f306 	mul.w	r3, r9, r6
   c02a6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c02a8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c02aa:	a907      	add	r1, sp, #28
   c02ac:	a806      	add	r0, sp, #24
   c02ae:	f7ff fb22 	bl	bf8f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c02b2:	4682      	mov	sl, r0
   c02b4:	2800      	cmp	r0, #0
   c02b6:	d0f0      	beq.n	c029a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c02b8:	f04f 0300 	mov.w	r3, #0
   c02bc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c02c0:	4601      	mov	r1, r0
   c02c2:	9a07      	ldr	r2, [sp, #28]
   c02c4:	f10d 0317 	add.w	r3, sp, #23
   c02c8:	4628      	mov	r0, r5
   c02ca:	f7ff fbb1 	bl	bfa30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c02ce:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c02d2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c02d4:	2f00      	cmp	r7, #0
   c02d6:	d14a      	bne.n	c036e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c02d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c02dc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c02e0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c02e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c02e8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c02ec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c02f0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c02f2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c02f6:	4293      	cmp	r3, r2
   c02f8:	db17      	blt.n	c032a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c02fa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c02fe:	f1ba 0f00 	cmp.w	sl, #0
   c0302:	dd30      	ble.n	c0366 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0304:	fb09 f00a 	mul.w	r0, r9, sl
   c0308:	f7fd fa8c 	bl	bd824 <malloc>
            if (!d) {
   c030c:	4683      	mov	fp, r0
   c030e:	b360      	cbz	r0, c036a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0310:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0314:	fb09 1202 	mla	r2, r9, r2, r1
   c0318:	f7ff feea 	bl	c00f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c031c:	6828      	ldr	r0, [r5, #0]
   c031e:	f7fd fa89 	bl	bd834 <free>
        data_ = d;
   c0322:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0326:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c032a:	682b      	ldr	r3, [r5, #0]
   c032c:	9a01      	ldr	r2, [sp, #4]
   c032e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0332:	686a      	ldr	r2, [r5, #4]
   c0334:	4651      	mov	r1, sl
   c0336:	fb09 3202 	mla	r2, r9, r2, r3
   c033a:	f10a 0014 	add.w	r0, sl, #20
   c033e:	f7ff fed7 	bl	c00f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0342:	f1ba 0f00 	cmp.w	sl, #0
   c0346:	d003      	beq.n	c0350 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0348:	a90f      	add	r1, sp, #60	; 0x3c
   c034a:	4650      	mov	r0, sl
   c034c:	f7ff fb5d 	bl	bfa0a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0350:	686b      	ldr	r3, [r5, #4]
   c0352:	3301      	adds	r3, #1
   c0354:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0356:	a811      	add	r0, sp, #68	; 0x44
   c0358:	f7ff fcdc 	bl	bfd14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c035c:	b13f      	cbz	r7, c036e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c035e:	a80b      	add	r0, sp, #44	; 0x2c
   c0360:	f7ff fcd8 	bl	bfd14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0364:	e771      	b.n	c024a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0366:	46bb      	mov	fp, r7
   c0368:	e7d8      	b.n	c031c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c036a:	2701      	movs	r7, #1
   c036c:	e7f3      	b.n	c0356 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c036e:	9b01      	ldr	r3, [sp, #4]
   c0370:	682d      	ldr	r5, [r5, #0]
   c0372:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c0376:	9b06      	ldr	r3, [sp, #24]
   c0378:	781b      	ldrb	r3, [r3, #0]
   c037a:	b92b      	cbnz	r3, c0388 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c037c:	f8d8 3000 	ldr.w	r3, [r8]
   c0380:	9a02      	ldr	r2, [sp, #8]
   c0382:	4413      	add	r3, r2
   c0384:	7c1b      	ldrb	r3, [r3, #16]
   c0386:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0388:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c038a:	e78e      	b.n	c02aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c038c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c038e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0390:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0392:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0394:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0396:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c0398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c039a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c039c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c039e:	60a2      	str	r2, [r4, #8]
   c03a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c03a2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03a4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c03a6:	60e2      	str	r2, [r4, #12]
   c03a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c03aa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c03ac:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c03ae:	6122      	str	r2, [r4, #16]
   c03b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c03b2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c03b4:	9b03      	ldr	r3, [sp, #12]
   c03b6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c03b8:	6162      	str	r2, [r4, #20]
   c03ba:	7623      	strb	r3, [r4, #24]
   c03bc:	e7cf      	b.n	c035e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c03c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c03c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c03c2:	4604      	mov	r4, r0
   c03c4:	b087      	sub	sp, #28
   c03c6:	460d      	mov	r5, r1
        filter_(level, filters) {
   c03c8:	4626      	mov	r6, r4
        stream_(&stream) {
   c03ca:	4619      	mov	r1, r3
   c03cc:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c03ce:	4617      	mov	r7, r2
        stream_(&stream) {
   c03d0:	f7f5 fcc4 	bl	b5d5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c03d4:	4b0b      	ldr	r3, [pc, #44]	; (c0404 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c03d6:	f846 3b04 	str.w	r3, [r6], #4
   c03da:	4669      	mov	r1, sp
   c03dc:	a803      	add	r0, sp, #12
   c03de:	f7f5 fcbd 	bl	b5d5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c03e2:	aa03      	add	r2, sp, #12
   c03e4:	4639      	mov	r1, r7
   c03e6:	4630      	mov	r0, r6
   c03e8:	f7ff fef0 	bl	c01cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c03ec:	a803      	add	r0, sp, #12
   c03ee:	f7f5 fa21 	bl	b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c03f2:	4668      	mov	r0, sp
   c03f4:	f7f5 fa1e 	bl	b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c03f8:	4b03      	ldr	r3, [pc, #12]	; (c0408 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c03fa:	6023      	str	r3, [r4, #0]
}
   c03fc:	4620      	mov	r0, r4
        stream_(&stream) {
   c03fe:	6225      	str	r5, [r4, #32]
}
   c0400:	b007      	add	sp, #28
   c0402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0404:	000c61c8 	.word	0x000c61c8
   c0408:	000c739c 	.word	0x000c739c

000c040c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c040c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c040e:	460f      	mov	r7, r1
   c0410:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0412:	491d      	ldr	r1, [pc, #116]	; (c0488 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0416:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0418:	4616      	mov	r6, r2
   c041a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c041c:	f003 fb9c 	bl	c3b58 <strcmp>
   c0420:	b9c0      	cbnz	r0, c0454 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0422:	b1a4      	cbz	r4, c044e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0424:	4629      	mov	r1, r5
   c0426:	a801      	add	r0, sp, #4
   c0428:	f7ff fcbc 	bl	bfda4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c042c:	4917      	ldr	r1, [pc, #92]	; (c048c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c042e:	2024      	movs	r0, #36	; 0x24
   c0430:	f001 f90a 	bl	c1648 <_ZnwjRKSt9nothrow_t>
   c0434:	4605      	mov	r5, r0
   c0436:	b130      	cbz	r0, c0446 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0438:	ab01      	add	r3, sp, #4
   c043a:	4632      	mov	r2, r6
   c043c:	4621      	mov	r1, r4
   c043e:	f7ff ffbf 	bl	c03c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0442:	4b13      	ldr	r3, [pc, #76]	; (c0490 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0444:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0446:	a801      	add	r0, sp, #4
   c0448:	f7f5 f9f4 	bl	b5834 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c044c:	462c      	mov	r4, r5
}
   c044e:	4620      	mov	r0, r4
   c0450:	b005      	add	sp, #20
   c0452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0454:	490f      	ldr	r1, [pc, #60]	; (c0494 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0456:	4638      	mov	r0, r7
   c0458:	f003 fb7e 	bl	c3b58 <strcmp>
   c045c:	b990      	cbnz	r0, c0484 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c045e:	2c00      	cmp	r4, #0
   c0460:	d0f5      	beq.n	c044e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0462:	4629      	mov	r1, r5
   c0464:	a801      	add	r0, sp, #4
   c0466:	f7ff fc9d 	bl	bfda4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c046a:	4908      	ldr	r1, [pc, #32]	; (c048c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c046c:	2024      	movs	r0, #36	; 0x24
   c046e:	f001 f8eb 	bl	c1648 <_ZnwjRKSt9nothrow_t>
   c0472:	4605      	mov	r5, r0
   c0474:	2800      	cmp	r0, #0
   c0476:	d0e6      	beq.n	c0446 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c0478:	ab01      	add	r3, sp, #4
   c047a:	4632      	mov	r2, r6
   c047c:	4621      	mov	r1, r4
   c047e:	f7ff ff9f 	bl	c03c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0482:	e7e0      	b.n	c0446 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0484:	2400      	movs	r4, #0
   c0486:	e7e2      	b.n	c044e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0488:	000c7321 	.word	0x000c7321
   c048c:	000c74b4 	.word	0x000c74b4
   c0490:	000c73b4 	.word	0x000c73b4
   c0494:	000c7325 	.word	0x000c7325

000c0498 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c0498:	4b01      	ldr	r3, [pc, #4]	; (c04a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c049a:	4a02      	ldr	r2, [pc, #8]	; (c04a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c049c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c049e:	4770      	bx	lr
   c04a0:	2003e674 	.word	0x2003e674
   c04a4:	000c7336 	.word	0x000c7336

000c04a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c04a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c04ac:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c04ae:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c04b2:	4604      	mov	r4, r0
   c04b4:	460e      	mov	r6, r1
   c04b6:	4617      	mov	r7, r2
   c04b8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c04ba:	f000 ff09 	bl	c12d0 <_Z16_fetch_usbserialv>
   c04be:	4581      	cmp	r9, r0
   c04c0:	d04c      	beq.n	c055c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c04c2:	792b      	ldrb	r3, [r5, #4]
   c04c4:	0719      	lsls	r1, r3, #28
   c04c6:	d504      	bpl.n	c04d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c04c8:	696a      	ldr	r2, [r5, #20]
   c04ca:	4954      	ldr	r1, [pc, #336]	; (c061c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c04cc:	4620      	mov	r0, r4
   c04ce:	f7ff fa8d 	bl	bf9ec <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c04d2:	f1b8 0f00 	cmp.w	r8, #0
   c04d6:	d00d      	beq.n	c04f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c04d8:	215b      	movs	r1, #91	; 0x5b
   c04da:	4620      	mov	r0, r4
   c04dc:	f7ff fa7a 	bl	bf9d4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c04e0:	4641      	mov	r1, r8
   c04e2:	4620      	mov	r0, r4
   c04e4:	f7ff fa67 	bl	bf9b6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c04e8:	6823      	ldr	r3, [r4, #0]
   c04ea:	494d      	ldr	r1, [pc, #308]	; (c0620 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c04ec:	68db      	ldr	r3, [r3, #12]
   c04ee:	2202      	movs	r2, #2
   c04f0:	4620      	mov	r0, r4
   c04f2:	4798      	blx	r3
    if (attr.has_file) {
   c04f4:	792b      	ldrb	r3, [r5, #4]
   c04f6:	07da      	lsls	r2, r3, #31
   c04f8:	d523      	bpl.n	c0542 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c04fa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c04fe:	212f      	movs	r1, #47	; 0x2f
   c0500:	4640      	mov	r0, r8
   c0502:	f003 fba6 	bl	c3c52 <strrchr>
    if (s1) {
   c0506:	b108      	cbz	r0, c050c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0508:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c050c:	4641      	mov	r1, r8
   c050e:	4620      	mov	r0, r4
   c0510:	f7ff fa51 	bl	bf9b6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0514:	792b      	ldrb	r3, [r5, #4]
   c0516:	079b      	lsls	r3, r3, #30
   c0518:	d508      	bpl.n	c052c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c051a:	213a      	movs	r1, #58	; 0x3a
   c051c:	4620      	mov	r0, r4
   c051e:	f7ff fa59 	bl	bf9d4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0522:	68ea      	ldr	r2, [r5, #12]
   c0524:	493f      	ldr	r1, [pc, #252]	; (c0624 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0526:	4620      	mov	r0, r4
   c0528:	f7ff fa60 	bl	bf9ec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c052c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c052e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0530:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0534:	68db      	ldr	r3, [r3, #12]
   c0536:	bf14      	ite	ne
   c0538:	493b      	ldrne	r1, [pc, #236]	; (c0628 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c053a:	493c      	ldreq	r1, [pc, #240]	; (c062c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c053c:	2202      	movs	r2, #2
            write(": ", 2);
   c053e:	4620      	mov	r0, r4
   c0540:	4798      	blx	r3
    if (attr.has_function) {
   c0542:	792b      	ldrb	r3, [r5, #4]
   c0544:	0758      	lsls	r0, r3, #29
   c0546:	d51d      	bpl.n	c0584 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0548:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c054a:	460b      	mov	r3, r1
   c054c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c054e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0552:	b160      	cbz	r0, c056e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0554:	2820      	cmp	r0, #32
   c0556:	d108      	bne.n	c056a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0558:	4619      	mov	r1, r3
   c055a:	e7f7      	b.n	c054c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c055c:	4834      	ldr	r0, [pc, #208]	; (c0630 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c055e:	f000 f966 	bl	c082e <_ZN5spark12NetworkClass9listeningEv>
   c0562:	2800      	cmp	r0, #0
   c0564:	d0ad      	beq.n	c04c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c056a:	2828      	cmp	r0, #40	; 0x28
   c056c:	d1ee      	bne.n	c054c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c056e:	6823      	ldr	r3, [r4, #0]
   c0570:	1a52      	subs	r2, r2, r1
   c0572:	68db      	ldr	r3, [r3, #12]
   c0574:	4620      	mov	r0, r4
   c0576:	4798      	blx	r3
        write("(): ", 4);
   c0578:	6823      	ldr	r3, [r4, #0]
   c057a:	492e      	ldr	r1, [pc, #184]	; (c0634 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c057c:	68db      	ldr	r3, [r3, #12]
   c057e:	2204      	movs	r2, #4
   c0580:	4620      	mov	r0, r4
   c0582:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c0584:	2100      	movs	r1, #0
   c0586:	4638      	mov	r0, r7
   c0588:	f7fd f856 	bl	bd638 <log_level_name>
   c058c:	4601      	mov	r1, r0
    write(s);
   c058e:	4620      	mov	r0, r4
   c0590:	f7ff fa11 	bl	bf9b6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c0594:	6823      	ldr	r3, [r4, #0]
   c0596:	4925      	ldr	r1, [pc, #148]	; (c062c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c0598:	68db      	ldr	r3, [r3, #12]
   c059a:	2202      	movs	r2, #2
   c059c:	4620      	mov	r0, r4
   c059e:	4798      	blx	r3
    if (msg) {
   c05a0:	b11e      	cbz	r6, c05aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c05a2:	4631      	mov	r1, r6
   c05a4:	4620      	mov	r0, r4
   c05a6:	f7ff fa06 	bl	bf9b6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c05aa:	792b      	ldrb	r3, [r5, #4]
   c05ac:	f013 0f30 	tst.w	r3, #48	; 0x30
   c05b0:	d02c      	beq.n	c060c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c05b2:	6823      	ldr	r3, [r4, #0]
   c05b4:	4920      	ldr	r1, [pc, #128]	; (c0638 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c05b6:	68db      	ldr	r3, [r3, #12]
   c05b8:	2202      	movs	r2, #2
   c05ba:	4620      	mov	r0, r4
   c05bc:	4798      	blx	r3
        if (attr.has_code) {
   c05be:	792b      	ldrb	r3, [r5, #4]
   c05c0:	06d9      	lsls	r1, r3, #27
   c05c2:	d50a      	bpl.n	c05da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c05c4:	6823      	ldr	r3, [r4, #0]
   c05c6:	491d      	ldr	r1, [pc, #116]	; (c063c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c05c8:	68db      	ldr	r3, [r3, #12]
   c05ca:	2207      	movs	r2, #7
   c05cc:	4620      	mov	r0, r4
   c05ce:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c05d0:	69aa      	ldr	r2, [r5, #24]
   c05d2:	491b      	ldr	r1, [pc, #108]	; (c0640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c05d4:	4620      	mov	r0, r4
   c05d6:	f7ff fa09 	bl	bf9ec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c05da:	792b      	ldrb	r3, [r5, #4]
   c05dc:	069a      	lsls	r2, r3, #26
   c05de:	d511      	bpl.n	c0604 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c05e0:	06db      	lsls	r3, r3, #27
   c05e2:	d505      	bpl.n	c05f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c05e4:	6823      	ldr	r3, [r4, #0]
   c05e6:	4910      	ldr	r1, [pc, #64]	; (c0628 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c05e8:	68db      	ldr	r3, [r3, #12]
   c05ea:	2202      	movs	r2, #2
   c05ec:	4620      	mov	r0, r4
   c05ee:	4798      	blx	r3
            write("details = ", 10);
   c05f0:	6823      	ldr	r3, [r4, #0]
   c05f2:	4914      	ldr	r1, [pc, #80]	; (c0644 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c05f4:	68db      	ldr	r3, [r3, #12]
   c05f6:	4620      	mov	r0, r4
   c05f8:	220a      	movs	r2, #10
   c05fa:	4798      	blx	r3
            write(attr.details);
   c05fc:	69e9      	ldr	r1, [r5, #28]
   c05fe:	4620      	mov	r0, r4
   c0600:	f7ff f9d9 	bl	bf9b6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0604:	215d      	movs	r1, #93	; 0x5d
   c0606:	4620      	mov	r0, r4
   c0608:	f7ff f9e4 	bl	bf9d4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c060c:	6823      	ldr	r3, [r4, #0]
   c060e:	490e      	ldr	r1, [pc, #56]	; (c0648 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0610:	68db      	ldr	r3, [r3, #12]
   c0612:	4620      	mov	r0, r4
   c0614:	2202      	movs	r2, #2
}
   c0616:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c061a:	4718      	bx	r3
   c061c:	000c733a 	.word	0x000c733a
   c0620:	000c7341 	.word	0x000c7341
   c0624:	000c5d96 	.word	0x000c5d96
   c0628:	000c7344 	.word	0x000c7344
   c062c:	000c7349 	.word	0x000c7349
   c0630:	2003e6a0 	.word	0x2003e6a0
   c0634:	000c7347 	.word	0x000c7347
   c0638:	000c734c 	.word	0x000c734c
   c063c:	000c734f 	.word	0x000c734f
   c0640:	000c7357 	.word	0x000c7357
   c0644:	000c735a 	.word	0x000c735a
   c0648:	000c7365 	.word	0x000c7365

000c064c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c064c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0650:	b085      	sub	sp, #20
    return stream_;
   c0652:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0656:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0658:	4605      	mov	r5, r0
   c065a:	460f      	mov	r7, r1
   c065c:	4690      	mov	r8, r2
   c065e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0660:	f000 fe36 	bl	c12d0 <_Z16_fetch_usbserialv>
   c0664:	4581      	cmp	r9, r0
   c0666:	d105      	bne.n	c0674 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0668:	4849      	ldr	r0, [pc, #292]	; (c0790 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c066a:	f000 f8e0 	bl	c082e <_ZN5spark12NetworkClass9listeningEv>
   c066e:	2800      	cmp	r0, #0
   c0670:	f040 808a 	bne.w	c0788 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0674:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0676:	4a47      	ldr	r2, [pc, #284]	; (c0794 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0678:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c067a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c067e:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0680:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0682:	f88d 9008 	strb.w	r9, [sp, #8]
   c0686:	f7ff f850 	bl	bf72a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c068a:	4649      	mov	r1, r9
   c068c:	4640      	mov	r0, r8
   c068e:	f7fc ffd3 	bl	bd638 <log_level_name>
    json.name("l", 1).value(s);
   c0692:	4941      	ldr	r1, [pc, #260]	; (c0798 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0694:	4680      	mov	r8, r0
   c0696:	2201      	movs	r2, #1
   c0698:	a801      	add	r0, sp, #4
   c069a:	f7ff f8d5 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c069e:	4641      	mov	r1, r8
   c06a0:	f7ff f97b 	bl	bf99a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c06a4:	b13f      	cbz	r7, c06b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c06a6:	493d      	ldr	r1, [pc, #244]	; (c079c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c06a8:	2201      	movs	r2, #1
   c06aa:	a801      	add	r0, sp, #4
   c06ac:	f7ff f8cc 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c06b0:	4639      	mov	r1, r7
   c06b2:	f7ff f972 	bl	bf99a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c06b6:	b13e      	cbz	r6, c06c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c06b8:	4939      	ldr	r1, [pc, #228]	; (c07a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c06ba:	2201      	movs	r2, #1
   c06bc:	a801      	add	r0, sp, #4
   c06be:	f7ff f8c3 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c06c2:	4631      	mov	r1, r6
   c06c4:	f7ff f969 	bl	bf99a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c06c8:	7923      	ldrb	r3, [r4, #4]
   c06ca:	07df      	lsls	r7, r3, #31
   c06cc:	d50e      	bpl.n	c06ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c06ce:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c06d0:	212f      	movs	r1, #47	; 0x2f
   c06d2:	4630      	mov	r0, r6
   c06d4:	f003 fabd 	bl	c3c52 <strrchr>
    if (s1) {
   c06d8:	b100      	cbz	r0, c06dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c06da:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c06dc:	4931      	ldr	r1, [pc, #196]	; (c07a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c06de:	2201      	movs	r2, #1
   c06e0:	a801      	add	r0, sp, #4
   c06e2:	f7ff f8b1 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c06e6:	4631      	mov	r1, r6
   c06e8:	f7ff f957 	bl	bf99a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c06ec:	7923      	ldrb	r3, [r4, #4]
   c06ee:	079e      	lsls	r6, r3, #30
   c06f0:	d507      	bpl.n	c0702 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c06f2:	492d      	ldr	r1, [pc, #180]	; (c07a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c06f4:	2202      	movs	r2, #2
   c06f6:	a801      	add	r0, sp, #4
   c06f8:	f7ff f8a6 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c06fc:	68e1      	ldr	r1, [r4, #12]
   c06fe:	f7ff f821 	bl	bf744 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0702:	7923      	ldrb	r3, [r4, #4]
   c0704:	0758      	lsls	r0, r3, #29
   c0706:	d514      	bpl.n	c0732 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0708:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c070a:	4633      	mov	r3, r6
   c070c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c070e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0712:	b12a      	cbz	r2, c0720 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0714:	2a20      	cmp	r2, #32
   c0716:	d101      	bne.n	c071c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0718:	461e      	mov	r6, r3
   c071a:	e7f7      	b.n	c070c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c071c:	2a28      	cmp	r2, #40	; 0x28
   c071e:	d1f5      	bne.n	c070c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0720:	4922      	ldr	r1, [pc, #136]	; (c07ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0722:	2202      	movs	r2, #2
   c0724:	a801      	add	r0, sp, #4
   c0726:	f7ff f88f 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c072a:	1bba      	subs	r2, r7, r6
   c072c:	4631      	mov	r1, r6
   c072e:	f7ff f89b 	bl	bf868 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0732:	7923      	ldrb	r3, [r4, #4]
   c0734:	0719      	lsls	r1, r3, #28
   c0736:	d507      	bpl.n	c0748 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0738:	491d      	ldr	r1, [pc, #116]	; (c07b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c073a:	2201      	movs	r2, #1
   c073c:	a801      	add	r0, sp, #4
   c073e:	f7ff f883 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c0742:	6961      	ldr	r1, [r4, #20]
   c0744:	f7ff f810 	bl	bf768 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0748:	7923      	ldrb	r3, [r4, #4]
   c074a:	06da      	lsls	r2, r3, #27
   c074c:	d508      	bpl.n	c0760 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c074e:	2204      	movs	r2, #4
   c0750:	4918      	ldr	r1, [pc, #96]	; (c07b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0752:	eb0d 0002 	add.w	r0, sp, r2
   c0756:	f7ff f877 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c075a:	69a1      	ldr	r1, [r4, #24]
   c075c:	f7fe fff2 	bl	bf744 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0760:	7923      	ldrb	r3, [r4, #4]
   c0762:	069b      	lsls	r3, r3, #26
   c0764:	d507      	bpl.n	c0776 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0766:	4914      	ldr	r1, [pc, #80]	; (c07b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0768:	2206      	movs	r2, #6
   c076a:	a801      	add	r0, sp, #4
   c076c:	f7ff f86c 	bl	bf848 <_ZN5spark10JSONWriter4nameEPKcj>
   c0770:	69e1      	ldr	r1, [r4, #28]
   c0772:	f7ff f912 	bl	bf99a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c0776:	a801      	add	r0, sp, #4
   c0778:	f7fe ffc1 	bl	bf6fe <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c077c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c077e:	490f      	ldr	r1, [pc, #60]	; (c07bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0780:	6803      	ldr	r3, [r0, #0]
   c0782:	2202      	movs	r2, #2
   c0784:	68db      	ldr	r3, [r3, #12]
   c0786:	4798      	blx	r3
}
   c0788:	b005      	add	sp, #20
   c078a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c078e:	bf00      	nop
   c0790:	2003e6a0 	.word	0x2003e6a0
   c0794:	000c7384 	.word	0x000c7384
   c0798:	000c7317 	.word	0x000c7317
   c079c:	000c7368 	.word	0x000c7368
   c07a0:	000c7cd6 	.word	0x000c7cd6
   c07a4:	000c5ee9 	.word	0x000c5ee9
   c07a8:	000c736a 	.word	0x000c736a
   c07ac:	000c736d 	.word	0x000c736d
   c07b0:	000c6061 	.word	0x000c6061
   c07b4:	000c7370 	.word	0x000c7370
   c07b8:	000c7375 	.word	0x000c7375
   c07bc:	000c7365 	.word	0x000c7365

000c07c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c07c0:	2300      	movs	r3, #0
   c07c2:	6840      	ldr	r0, [r0, #4]
   c07c4:	461a      	mov	r2, r3
   c07c6:	f7fc bfcd 	b.w	bd764 <network_connect>

000c07ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c07ca:	6840      	ldr	r0, [r0, #4]
   c07cc:	2200      	movs	r2, #0
   c07ce:	2102      	movs	r1, #2
   c07d0:	f7fc bfd8 	b.w	bd784 <network_disconnect>

000c07d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c07d4:	2200      	movs	r2, #0
   c07d6:	6840      	ldr	r0, [r0, #4]
   c07d8:	4611      	mov	r1, r2
   c07da:	f7fc bfcb 	b.w	bd774 <network_connecting>

000c07de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c07de:	2200      	movs	r2, #0
   c07e0:	6840      	ldr	r0, [r0, #4]
   c07e2:	4611      	mov	r1, r2
   c07e4:	f7fc bfd6 	b.w	bd794 <network_ready>

000c07e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c07e8:	2300      	movs	r3, #0
   c07ea:	6840      	ldr	r0, [r0, #4]
   c07ec:	461a      	mov	r2, r3
   c07ee:	4619      	mov	r1, r3
   c07f0:	f7fc bfd8 	b.w	bd7a4 <network_on>

000c07f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c07f4:	2300      	movs	r3, #0
   c07f6:	6840      	ldr	r0, [r0, #4]
   c07f8:	461a      	mov	r2, r3
   c07fa:	4619      	mov	r1, r3
   c07fc:	f7fc bfda 	b.w	bd7b4 <network_off>

000c0800 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c0800:	6840      	ldr	r0, [r0, #4]
   c0802:	2100      	movs	r1, #0
   c0804:	f7fc bffe 	b.w	bd804 <network_is_on>

000c0808 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c0808:	6840      	ldr	r0, [r0, #4]
   c080a:	2100      	movs	r1, #0
   c080c:	f7fd b802 	b.w	bd814 <network_is_off>

000c0810 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c0810:	6840      	ldr	r0, [r0, #4]
   c0812:	2200      	movs	r2, #0
   c0814:	f081 0101 	eor.w	r1, r1, #1
   c0818:	f7fc bfd4 	b.w	bd7c4 <network_listen>

000c081c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c081c:	6840      	ldr	r0, [r0, #4]
   c081e:	2200      	movs	r2, #0
   c0820:	f7fc bfe0 	b.w	bd7e4 <network_set_listen_timeout>

000c0824 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c0824:	2200      	movs	r2, #0
   c0826:	6840      	ldr	r0, [r0, #4]
   c0828:	4611      	mov	r1, r2
   c082a:	f7fc bfe3 	b.w	bd7f4 <network_get_listen_timeout>

000c082e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c082e:	2200      	movs	r2, #0
   c0830:	6840      	ldr	r0, [r0, #4]
   c0832:	4611      	mov	r1, r2
   c0834:	f7fc bfce 	b.w	bd7d4 <network_listening>

000c0838 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c083c:	b095      	sub	sp, #84	; 0x54
   c083e:	4614      	mov	r4, r2
   c0840:	460d      	mov	r5, r1
   c0842:	4607      	mov	r7, r0
    IPAddress addr;
   c0844:	f7fe fe0a 	bl	bf45c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0848:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c084a:	221c      	movs	r2, #28
   c084c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c084e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c0850:	f003 f926 	bl	c3aa0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0854:	2340      	movs	r3, #64	; 0x40
   c0856:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0858:	4620      	mov	r0, r4
   c085a:	466b      	mov	r3, sp
   c085c:	aa0c      	add	r2, sp, #48	; 0x30
   c085e:	2100      	movs	r1, #0
   c0860:	f7fc fdca 	bl	bd3f8 <netdb_getaddrinfo>
    if (!r) {
   c0864:	4604      	mov	r4, r0
   c0866:	2800      	cmp	r0, #0
   c0868:	d14b      	bne.n	c0902 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c086a:	4602      	mov	r2, r0
   c086c:	2101      	movs	r1, #1
   c086e:	6868      	ldr	r0, [r5, #4]
   c0870:	f7fc ff90 	bl	bd794 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0874:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0876:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0878:	4622      	mov	r2, r4
   c087a:	6868      	ldr	r0, [r5, #4]
   c087c:	f7fc ff8a 	bl	bd794 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0880:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0882:	4681      	mov	r9, r0
        bool ok = false;
   c0884:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0886:	2e00      	cmp	r6, #0
   c0888:	d03b      	beq.n	c0902 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c088a:	2900      	cmp	r1, #0
   c088c:	d139      	bne.n	c0902 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c088e:	6873      	ldr	r3, [r6, #4]
   c0890:	2b02      	cmp	r3, #2
   c0892:	d003      	beq.n	c089c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c0894:	2b0a      	cmp	r3, #10
   c0896:	d011      	beq.n	c08bc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0898:	69f6      	ldr	r6, [r6, #28]
   c089a:	e7f4      	b.n	c0886 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c089c:	f1b8 0f00 	cmp.w	r8, #0
   c08a0:	d0fa      	beq.n	c0898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c08a2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c08a4:	a806      	add	r0, sp, #24
   c08a6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c08a8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c08aa:	f7fe fe05 	bl	bf4b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c08ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c08b0:	1d3c      	adds	r4, r7, #4
   c08b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c08b4:	682b      	ldr	r3, [r5, #0]
   c08b6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c08b8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c08ba:	e7ed      	b.n	c0898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c08bc:	f1b9 0f00 	cmp.w	r9, #0
   c08c0:	d0ea      	beq.n	c0898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c08c2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c08c4:	2210      	movs	r2, #16
   c08c6:	a801      	add	r0, sp, #4
   c08c8:	f003 f8ea 	bl	c3aa0 <memset>
                    a.v = 6;
   c08cc:	2306      	movs	r3, #6
   c08ce:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c08d2:	ad01      	add	r5, sp, #4
   c08d4:	f104 0308 	add.w	r3, r4, #8
   c08d8:	3418      	adds	r4, #24
   c08da:	6818      	ldr	r0, [r3, #0]
   c08dc:	6859      	ldr	r1, [r3, #4]
   c08de:	462a      	mov	r2, r5
   c08e0:	c203      	stmia	r2!, {r0, r1}
   c08e2:	3308      	adds	r3, #8
   c08e4:	42a3      	cmp	r3, r4
   c08e6:	4615      	mov	r5, r2
   c08e8:	d1f7      	bne.n	c08da <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c08ea:	a901      	add	r1, sp, #4
   c08ec:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c08ee:	ad07      	add	r5, sp, #28
   c08f0:	f7fe fdc2 	bl	bf478 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c08f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c08f6:	1d3c      	adds	r4, r7, #4
   c08f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c08fa:	682b      	ldr	r3, [r5, #0]
   c08fc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c08fe:	4649      	mov	r1, r9
   c0900:	e7ca      	b.n	c0898 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c0902:	9800      	ldr	r0, [sp, #0]
   c0904:	f7fc fd70 	bl	bd3e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c0908:	4638      	mov	r0, r7
   c090a:	b015      	add	sp, #84	; 0x54
   c090c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c0910 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c0910:	4b02      	ldr	r3, [pc, #8]	; (c091c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c0912:	4a03      	ldr	r2, [pc, #12]	; (c0920 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c0914:	601a      	str	r2, [r3, #0]
   c0916:	2200      	movs	r2, #0
   c0918:	605a      	str	r2, [r3, #4]

} // spark
   c091a:	4770      	bx	lr
   c091c:	2003e6a0 	.word	0x2003e6a0
   c0920:	000c73fc 	.word	0x000c73fc

000c0924 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0926:	4606      	mov	r6, r0
   c0928:	460d      	mov	r5, r1
  size_t n = 0;
   c092a:	188f      	adds	r7, r1, r2
   c092c:	2400      	movs	r4, #0
  while (size--) {
   c092e:	42bd      	cmp	r5, r7
   c0930:	d00c      	beq.n	c094c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c0932:	6833      	ldr	r3, [r6, #0]
   c0934:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0938:	689b      	ldr	r3, [r3, #8]
   c093a:	4630      	mov	r0, r6
   c093c:	4798      	blx	r3
     if (chunk>=0)
   c093e:	1e03      	subs	r3, r0, #0
   c0940:	db01      	blt.n	c0946 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c0942:	441c      	add	r4, r3
  while (size--) {
   c0944:	e7f3      	b.n	c092e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0946:	2c00      	cmp	r4, #0
   c0948:	bf08      	it	eq
   c094a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c094c:	4620      	mov	r0, r4
   c094e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0950 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c0950:	b508      	push	{r3, lr}
  return write(str);
   c0952:	f7f6 facd 	bl	b6ef0 <_ZN5Print5writeEPKc>
}
   c0956:	bd08      	pop	{r3, pc}

000c0958 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0958:	6803      	ldr	r3, [r0, #0]
   c095a:	689b      	ldr	r3, [r3, #8]
   c095c:	4718      	bx	r3

000c095e <_ZN5Print5printEPK19__FlashStringHelper>:
   c095e:	b508      	push	{r3, lr}
   c0960:	f7f6 fac6 	bl	b6ef0 <_ZN5Print5writeEPKc>
   c0964:	bd08      	pop	{r3, pc}

000c0966 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c0966:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c0968:	210d      	movs	r1, #13
{
   c096a:	4605      	mov	r5, r0
  size_t n = print('\r');
   c096c:	f7ff fff4 	bl	c0958 <_ZN5Print5printEc>
  n += print('\n');
   c0970:	210a      	movs	r1, #10
  size_t n = print('\r');
   c0972:	4604      	mov	r4, r0
  n += print('\n');
   c0974:	4628      	mov	r0, r5
   c0976:	f7ff ffef 	bl	c0958 <_ZN5Print5printEc>
  return n;
}
   c097a:	4420      	add	r0, r4
   c097c:	bd38      	pop	{r3, r4, r5, pc}

000c097e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c097e:	b538      	push	{r3, r4, r5, lr}
   c0980:	4605      	mov	r5, r0
  return write(str);
   c0982:	f7f6 fab5 	bl	b6ef0 <_ZN5Print5writeEPKc>
   c0986:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c0988:	4628      	mov	r0, r5
   c098a:	f7ff ffec 	bl	c0966 <_ZN5Print7printlnEv>
  return n;
}
   c098e:	4420      	add	r0, r4
   c0990:	bd38      	pop	{r3, r4, r5, pc}

000c0992 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c0992:	f7ff bff4 	b.w	c097e <_ZN5Print7printlnEPKc>

000c0996 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c0996:	b530      	push	{r4, r5, lr}
   c0998:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c099a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c099c:	2a01      	cmp	r2, #1
  *str = '\0';
   c099e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c09a2:	bf98      	it	ls
   c09a4:	220a      	movls	r2, #10
   c09a6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c09a8:	460d      	mov	r5, r1
   c09aa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c09ae:	fb01 5312 	mls	r3, r1, r2, r5
   c09b2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c09b6:	2b09      	cmp	r3, #9
   c09b8:	bf94      	ite	ls
   c09ba:	3330      	addls	r3, #48	; 0x30
   c09bc:	3337      	addhi	r3, #55	; 0x37
   c09be:	b2db      	uxtb	r3, r3
  } while(n);
   c09c0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c09c2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c09c6:	d9ef      	bls.n	c09a8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c09c8:	4621      	mov	r1, r4
   c09ca:	f7f6 fa91 	bl	b6ef0 <_ZN5Print5writeEPKc>
}
   c09ce:	b00b      	add	sp, #44	; 0x2c
   c09d0:	bd30      	pop	{r4, r5, pc}

000c09d2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c09d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c09d6:	b086      	sub	sp, #24
   c09d8:	af00      	add	r7, sp, #0
   c09da:	4605      	mov	r5, r0
   c09dc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c09de:	1d38      	adds	r0, r7, #4
   c09e0:	2114      	movs	r1, #20
{
   c09e2:	4614      	mov	r4, r2
    va_copy(args2, args);
   c09e4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c09e6:	f7fc ff4d 	bl	bd884 <vsnprintf>

    if (n<bufsize)
   c09ea:	2813      	cmp	r0, #19
   c09ec:	d80e      	bhi.n	c0a0c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c09ee:	1d39      	adds	r1, r7, #4
   c09f0:	4628      	mov	r0, r5
   c09f2:	f7f6 fa7d 	bl	b6ef0 <_ZN5Print5writeEPKc>
   c09f6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c09f8:	b11e      	cbz	r6, c0a02 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c09fa:	4628      	mov	r0, r5
   c09fc:	f7ff ffb3 	bl	c0966 <_ZN5Print7printlnEv>
   c0a00:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c0a02:	4620      	mov	r0, r4
   c0a04:	3718      	adds	r7, #24
   c0a06:	46bd      	mov	sp, r7
   c0a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c0a0c:	f100 0308 	add.w	r3, r0, #8
   c0a10:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c0a14:	46e8      	mov	r8, sp
        char bigger[n+1];
   c0a16:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c0a1a:	4622      	mov	r2, r4
   c0a1c:	1c41      	adds	r1, r0, #1
   c0a1e:	683b      	ldr	r3, [r7, #0]
   c0a20:	4668      	mov	r0, sp
   c0a22:	f7fc ff2f 	bl	bd884 <vsnprintf>
  return write(str);
   c0a26:	4669      	mov	r1, sp
   c0a28:	4628      	mov	r0, r5
   c0a2a:	f7f6 fa61 	bl	b6ef0 <_ZN5Print5writeEPKc>
   c0a2e:	4604      	mov	r4, r0
   c0a30:	46c5      	mov	sp, r8
   c0a32:	e7e1      	b.n	c09f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c0a34 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0a34:	4b01      	ldr	r3, [pc, #4]	; (c0a3c <_GLOBAL__sub_I_RGB+0x8>)
   c0a36:	2200      	movs	r2, #0
   c0a38:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0a3a:	4770      	bx	lr
   c0a3c:	2003e6a8 	.word	0x2003e6a8

000c0a40 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c0a40:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c0a44:	1c53      	adds	r3, r2, #1
   c0a46:	d00b      	beq.n	c0a60 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c0a48:	8843      	ldrh	r3, [r0, #2]
   c0a4a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c0a4c:	428b      	cmp	r3, r1
   c0a4e:	d803      	bhi.n	c0a58 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c0a50:	4288      	cmp	r0, r1
   c0a52:	4603      	mov	r3, r0
   c0a54:	bf28      	it	cs
   c0a56:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c0a58:	4619      	mov	r1, r3
   c0a5a:	b290      	uxth	r0, r2
   c0a5c:	f7fc bce4 	b.w	bd428 <HAL_Servo_Write_Pulse_Width>
}
   c0a60:	4770      	bx	lr

000c0a62 <_ZN5Servo5writeEi>:
{
   c0a62:	b513      	push	{r0, r1, r4, lr}
   c0a64:	4604      	mov	r4, r0
   c0a66:	4608      	mov	r0, r1
   c0a68:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c0a6c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c0a70:	4288      	cmp	r0, r1
   c0a72:	db10      	blt.n	c0a96 <_ZN5Servo5writeEi+0x34>
   c0a74:	4290      	cmp	r0, r2
   c0a76:	bfa8      	it	ge
   c0a78:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0a7a:	88a3      	ldrh	r3, [r4, #4]
   c0a7c:	9300      	str	r3, [sp, #0]
   c0a7e:	8863      	ldrh	r3, [r4, #2]
   c0a80:	f7fc ff38 	bl	bd8f4 <_Z3mapiiiii>
   c0a84:	68e1      	ldr	r1, [r4, #12]
   c0a86:	4401      	add	r1, r0
   c0a88:	b289      	uxth	r1, r1
   c0a8a:	4620      	mov	r0, r4
}
   c0a8c:	b002      	add	sp, #8
   c0a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0a92:	f7ff bfd5 	b.w	c0a40 <_ZN5Servo17writeMicrosecondsEt>
   c0a96:	4608      	mov	r0, r1
   c0a98:	e7ef      	b.n	c0a7a <_ZN5Servo5writeEi+0x18>
	...

000c0a9c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c0a9c:	4a04      	ldr	r2, [pc, #16]	; (c0ab0 <_ZN5Servo11resetFieldsEv+0x14>)
   c0a9e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c0aa2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c0aa6:	23b4      	movs	r3, #180	; 0xb4
   c0aa8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c0aaa:	2300      	movs	r3, #0
   c0aac:	60c3      	str	r3, [r0, #12]
}
   c0aae:	4770      	bx	lr
   c0ab0:	0220ffff 	.word	0x0220ffff

000c0ab4 <_ZN5ServoC1Ev>:
Servo::Servo()
   c0ab4:	b508      	push	{r3, lr}
  this->resetFields();
   c0ab6:	f7ff fff1 	bl	c0a9c <_ZN5Servo11resetFieldsEv>
}
   c0aba:	bd08      	pop	{r3, pc}

000c0abc <_ZN5Servo6detachEv>:
{
   c0abc:	b510      	push	{r4, lr}
   c0abe:	4604      	mov	r4, r0
   c0ac0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c0ac4:	1c43      	adds	r3, r0, #1
   c0ac6:	d007      	beq.n	c0ad8 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c0ac8:	b280      	uxth	r0, r0
   c0aca:	f7fc fca5 	bl	bd418 <HAL_Servo_Detach>
  this->resetFields();
   c0ace:	4620      	mov	r0, r4
   c0ad0:	f7ff ffe4 	bl	c0a9c <_ZN5Servo11resetFieldsEv>
  return true;
   c0ad4:	2001      	movs	r0, #1
}
   c0ad6:	bd10      	pop	{r4, pc}
    return false;
   c0ad8:	2000      	movs	r0, #0
   c0ada:	e7fc      	b.n	c0ad6 <_ZN5Servo6detachEv+0x1a>

000c0adc <_ZN5Servo6attachEtttss>:
{
   c0adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0ae0:	460d      	mov	r5, r1
   c0ae2:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c0ae4:	2102      	movs	r1, #2
   c0ae6:	4628      	mov	r0, r5
{
   c0ae8:	4690      	mov	r8, r2
   c0aea:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c0aec:	f7fc fbdc 	bl	bd2a8 <HAL_Validate_Pin_Function>
   c0af0:	2802      	cmp	r0, #2
   c0af2:	d003      	beq.n	c0afc <_ZN5Servo6attachEtttss+0x20>
    return false;
   c0af4:	2600      	movs	r6, #0
}
   c0af6:	4630      	mov	r0, r6
   c0af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c0afc:	4628      	mov	r0, r5
   c0afe:	f000 fca9 	bl	c1454 <pinAvailable>
   c0b02:	4606      	mov	r6, r0
   c0b04:	2800      	cmp	r0, #0
   c0b06:	d0f5      	beq.n	c0af4 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c0b08:	f9b4 3000 	ldrsh.w	r3, [r4]
   c0b0c:	3301      	adds	r3, #1
   c0b0e:	d002      	beq.n	c0b16 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c0b10:	4620      	mov	r0, r4
   c0b12:	f7ff ffd3 	bl	c0abc <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c0b16:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c0b1a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c0b1c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c0b20:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c0b22:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c0b26:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c0b28:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c0b2a:	4628      	mov	r0, r5
   c0b2c:	f7fc fc6c 	bl	bd408 <HAL_Servo_Attach>
  return true;
   c0b30:	e7e1      	b.n	c0af6 <_ZN5Servo6attachEtttss+0x1a>

000c0b32 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c0b32:	2100      	movs	r1, #0
   c0b34:	f7fc bcd8 	b.w	bd4e8 <hal_spi_release>

000c0b38 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c0b38:	2100      	movs	r1, #0
   c0b3a:	f7fc bccd 	b.w	bd4d8 <hal_spi_acquire>

000c0b3e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c0b3e:	b510      	push	{r4, lr}
   c0b40:	4604      	mov	r4, r0
   c0b42:	4608      	mov	r0, r1
{
    _spi = spi;
   c0b44:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c0b46:	f7fc fc8f 	bl	bd468 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c0b4a:	2300      	movs	r3, #0
   c0b4c:	6063      	str	r3, [r4, #4]
}
   c0b4e:	4620      	mov	r0, r4
   c0b50:	bd10      	pop	{r4, pc}

000c0b52 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0b52:	b513      	push	{r0, r1, r4, lr}
   c0b54:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c0b56:	7800      	ldrb	r0, [r0, #0]
   c0b58:	f7ff ffee 	bl	c0b38 <_ZN8SPIClass4lockEv.isra.0>
   c0b5c:	b958      	cbnz	r0, c0b76 <_ZN8SPIClass5beginEv+0x24>
   c0b5e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c0b60:	9001      	str	r0, [sp, #4]
   c0b62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c0b66:	f7fc fc67 	bl	bd438 <hal_spi_begin>
        unlock();
   c0b6a:	9801      	ldr	r0, [sp, #4]
    }
}
   c0b6c:	b002      	add	sp, #8
   c0b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0b72:	f7ff bfde 	b.w	c0b32 <_ZN8SPIClass6unlockEv.isra.0>
   c0b76:	b002      	add	sp, #8
   c0b78:	bd10      	pop	{r4, pc}

000c0b7a <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c0b7a:	b513      	push	{r0, r1, r4, lr}
   c0b7c:	4604      	mov	r4, r0
    if (!lock())
   c0b7e:	7800      	ldrb	r0, [r0, #0]
{
   c0b80:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c0b84:	f7ff ffd8 	bl	c0b38 <_ZN8SPIClass4lockEv.isra.0>
   c0b88:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0b8c:	4603      	mov	r3, r0
   c0b8e:	b948      	cbnz	r0, c0ba4 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c0b90:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c0b92:	9000      	str	r0, [sp, #0]
   c0b94:	f7fc fc88 	bl	bd4a8 <hal_spi_begin_ext>
        unlock();
   c0b98:	9800      	ldr	r0, [sp, #0]
    }
}
   c0b9a:	b002      	add	sp, #8
   c0b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0ba0:	f7ff bfc7 	b.w	c0b32 <_ZN8SPIClass6unlockEv.isra.0>
   c0ba4:	b002      	add	sp, #8
   c0ba6:	bd10      	pop	{r4, pc}

000c0ba8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c0ba8:	7800      	ldrb	r0, [r0, #0]
   c0baa:	f7ff bfc2 	b.w	c0b32 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c0bb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c0bb0:	0840      	lsrs	r0, r0, #1
{
   c0bb2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c0bb4:	6018      	str	r0, [r3, #0]
   c0bb6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c0bb8:	6818      	ldr	r0, [r3, #0]
   c0bba:	4288      	cmp	r0, r1
   c0bbc:	b2e5      	uxtb	r5, r4
   c0bbe:	d906      	bls.n	c0bce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c0bc0:	3401      	adds	r4, #1
   c0bc2:	2c08      	cmp	r4, #8
   c0bc4:	d002      	beq.n	c0bcc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c0bc6:	0840      	lsrs	r0, r0, #1
   c0bc8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c0bca:	e7f5      	b.n	c0bb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c0bcc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c0bce:	4b02      	ldr	r3, [pc, #8]	; (c0bd8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c0bd0:	5d5b      	ldrb	r3, [r3, r5]
   c0bd2:	7013      	strb	r3, [r2, #0]
}
   c0bd4:	bd30      	pop	{r4, r5, pc}
   c0bd6:	bf00      	nop
   c0bd8:	000c7430 	.word	0x000c7430

000c0bdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c0bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0be0:	4606      	mov	r6, r0
   c0be2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c0be4:	7800      	ldrb	r0, [r0, #0]
{
   c0be6:	460c      	mov	r4, r1
    CHECK(lock());
   c0be8:	f7ff ffa6 	bl	c0b38 <_ZN8SPIClass4lockEv.isra.0>
   c0bec:	2800      	cmp	r0, #0
   c0bee:	db1b      	blt.n	c0c28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c0bf0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0bf2:	2214      	movs	r2, #20
   c0bf4:	2100      	movs	r1, #0
   c0bf6:	a809      	add	r0, sp, #36	; 0x24
   c0bf8:	f002 ff52 	bl	c3aa0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0bfc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0bfe:	2200      	movs	r2, #0
   c0c00:	a909      	add	r1, sp, #36	; 0x24
   c0c02:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c0c04:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c0c08:	f7fc fc3e 	bl	bd488 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c0c0c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c0c10:	b113      	cbz	r3, c0c18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c0c12:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c0c16:	b155      	cbz	r5, c0c2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c0c18:	2700      	movs	r7, #0
   c0c1a:	46b9      	mov	r9, r7
   c0c1c:	46b8      	mov	r8, r7
   c0c1e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c0c20:	7923      	ldrb	r3, [r4, #4]
   c0c22:	b15d      	cbz	r5, c0c3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c0c24:	b1c3      	cbz	r3, c0c58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c0c26:	2000      	movs	r0, #0
}
   c0c28:	b00f      	add	sp, #60	; 0x3c
   c0c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c0c2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c0c32:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c0c36:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c0c3a:	e7f1      	b.n	c0c20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c0c3c:	2b00      	cmp	r3, #0
   c0c3e:	d135      	bne.n	c0cac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c0c40:	68a3      	ldr	r3, [r4, #8]
   c0c42:	4543      	cmp	r3, r8
   c0c44:	d108      	bne.n	c0c58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c0c46:	f88d 9020 	strb.w	r9, [sp, #32]
   c0c4a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0c4e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0c52:	89a3      	ldrh	r3, [r4, #12]
   c0c54:	429a      	cmp	r2, r3
   c0c56:	d0e6      	beq.n	c0c26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c0c58:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0c5a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c0c5c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0c60:	980a      	ldr	r0, [sp, #40]	; 0x28
   c0c62:	ab04      	add	r3, sp, #16
   c0c64:	f10d 020f 	add.w	r2, sp, #15
   c0c68:	f7ff ffa2 	bl	c0bb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c0c6c:	7921      	ldrb	r1, [r4, #4]
   c0c6e:	b985      	cbnz	r5, c0c92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c0c70:	b989      	cbnz	r1, c0c96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0c72:	68a3      	ldr	r3, [r4, #8]
   c0c74:	4543      	cmp	r3, r8
   c0c76:	d30e      	bcc.n	c0c96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c0c78:	f88d 9020 	strb.w	r9, [sp, #32]
   c0c7c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0c80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0c84:	89a3      	ldrh	r3, [r4, #12]
   c0c86:	429a      	cmp	r2, r3
   c0c88:	d105      	bne.n	c0c96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c0c8a:	9b04      	ldr	r3, [sp, #16]
   c0c8c:	4543      	cmp	r3, r8
   c0c8e:	d102      	bne.n	c0c96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0c90:	e7c9      	b.n	c0c26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c0c92:	2900      	cmp	r1, #0
   c0c94:	d1f9      	bne.n	c0c8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c0c96:	2300      	movs	r3, #0
   c0c98:	9301      	str	r3, [sp, #4]
   c0c9a:	7b63      	ldrb	r3, [r4, #13]
   c0c9c:	9300      	str	r3, [sp, #0]
   c0c9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c0ca2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c0ca4:	7830      	ldrb	r0, [r6, #0]
   c0ca6:	f7fc fc0f 	bl	bd4c8 <hal_spi_set_settings>
   c0caa:	e7bc      	b.n	c0c26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c0cac:	e9cd 5500 	strd	r5, r5, [sp]
   c0cb0:	462b      	mov	r3, r5
   c0cb2:	462a      	mov	r2, r5
   c0cb4:	2101      	movs	r1, #1
   c0cb6:	e7f5      	b.n	c0ca4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c0cb8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c0cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0cbc:	b088      	sub	sp, #32
    unsigned clock = 0;
   c0cbe:	2300      	movs	r3, #0
{
   c0cc0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c0cc2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c0cc4:	9302      	str	r3, [sp, #8]
{
   c0cc6:	460e      	mov	r6, r1
   c0cc8:	4617      	mov	r7, r2
    if (!lock())
   c0cca:	f7ff ff35 	bl	c0b38 <_ZN8SPIClass4lockEv.isra.0>
   c0cce:	4605      	mov	r5, r0
   c0cd0:	bb00      	cbnz	r0, c0d14 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c0cd2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0cd6:	4601      	mov	r1, r0
   c0cd8:	2214      	movs	r2, #20
   c0cda:	a803      	add	r0, sp, #12
   c0cdc:	f002 fee0 	bl	c3aa0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0ce0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0ce2:	462a      	mov	r2, r5
   c0ce4:	a903      	add	r1, sp, #12
   c0ce6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c0ce8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c0cec:	f7fc fbcc 	bl	bd488 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0cf0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c0cf2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0cf6:	ab02      	add	r3, sp, #8
   c0cf8:	f10d 0207 	add.w	r2, sp, #7
   c0cfc:	fb07 f106 	mul.w	r1, r7, r6
   c0d00:	f7ff ff56 	bl	c0bb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c0d04:	7820      	ldrb	r0, [r4, #0]
   c0d06:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c0d0a:	f7fc fb9d 	bl	bd448 <hal_spi_set_clock_divider>
        unlock();
   c0d0e:	7820      	ldrb	r0, [r4, #0]
   c0d10:	f7ff ff0f 	bl	c0b32 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c0d14:	9802      	ldr	r0, [sp, #8]
   c0d16:	b008      	add	sp, #32
   c0d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0d1c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c0d1c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c0d1e:	7800      	ldrb	r0, [r0, #0]
   c0d20:	f7fc fb9a 	bl	bd458 <hal_spi_transfer>
}
   c0d24:	b2c0      	uxtb	r0, r0
   c0d26:	bd08      	pop	{r3, pc}

000c0d28 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c0d28:	b530      	push	{r4, r5, lr}
   c0d2a:	b087      	sub	sp, #28
   c0d2c:	4604      	mov	r4, r0
   c0d2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c0d30:	9500      	str	r5, [sp, #0]
   c0d32:	7800      	ldrb	r0, [r0, #0]
   c0d34:	f7fc fbb0 	bl	bd498 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c0d38:	b93d      	cbnz	r5, c0d4a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c0d3a:	7820      	ldrb	r0, [r4, #0]
   c0d3c:	a902      	add	r1, sp, #8
   c0d3e:	f7fc fbbb 	bl	bd4b8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c0d42:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c0d46:	07db      	lsls	r3, r3, #31
   c0d48:	d4f7      	bmi.n	c0d3a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c0d4a:	b007      	add	sp, #28
   c0d4c:	bd30      	pop	{r4, r5, pc}

000c0d4e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c0d4e:	b510      	push	{r4, lr}
   c0d50:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c0d52:	f7fc fa91 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c0d56:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c0d58:	6823      	ldr	r3, [r4, #0]
   c0d5a:	4620      	mov	r0, r4
   c0d5c:	695b      	ldr	r3, [r3, #20]
   c0d5e:	4798      	blx	r3
    if (c >= 0) return c;
   c0d60:	2800      	cmp	r0, #0
   c0d62:	da08      	bge.n	c0d76 <_ZN6Stream9timedReadEv+0x28>
   c0d64:	f7fc fa88 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c0d68:	68e3      	ldr	r3, [r4, #12]
   c0d6a:	1ac0      	subs	r0, r0, r3
   c0d6c:	68a3      	ldr	r3, [r4, #8]
   c0d6e:	4298      	cmp	r0, r3
   c0d70:	d3f2      	bcc.n	c0d58 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c0d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c0d76:	bd10      	pop	{r4, pc}

000c0d78 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c0d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0d7c:	4607      	mov	r7, r0
   c0d7e:	4688      	mov	r8, r1
   c0d80:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c0d82:	461d      	mov	r5, r3
   c0d84:	b173      	cbz	r3, c0da4 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c0d86:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c0d88:	4638      	mov	r0, r7
   c0d8a:	f7ff ffe0 	bl	c0d4e <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c0d8e:	1e03      	subs	r3, r0, #0
   c0d90:	db05      	blt.n	c0d9e <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c0d92:	4543      	cmp	r3, r8
   c0d94:	d003      	beq.n	c0d9e <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c0d96:	5533      	strb	r3, [r6, r4]
    index++;
   c0d98:	3401      	adds	r4, #1
  while (index < length) {
   c0d9a:	42a5      	cmp	r5, r4
   c0d9c:	d1f4      	bne.n	c0d88 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c0d9e:	4620      	mov	r0, r4
   c0da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c0da4:	461c      	mov	r4, r3
   c0da6:	e7fa      	b.n	c0d9e <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c0da8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c0da8:	b570      	push	{r4, r5, r6, lr}
   c0daa:	460d      	mov	r5, r1
  String ret;
   c0dac:	4909      	ldr	r1, [pc, #36]	; (c0dd4 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c0dae:	4604      	mov	r4, r0
   c0db0:	4616      	mov	r6, r2
  String ret;
   c0db2:	f000 f85c 	bl	c0e6e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c0db6:	4628      	mov	r0, r5
   c0db8:	f7ff ffc9 	bl	c0d4e <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c0dbc:	2800      	cmp	r0, #0
   c0dbe:	db06      	blt.n	c0dce <_ZN6Stream15readStringUntilEc+0x26>
   c0dc0:	4286      	cmp	r6, r0
   c0dc2:	d004      	beq.n	c0dce <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c0dc4:	b2c1      	uxtb	r1, r0
   c0dc6:	4620      	mov	r0, r4
   c0dc8:	f000 f8d0 	bl	c0f6c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c0dcc:	e7f3      	b.n	c0db6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c0dce:	4620      	mov	r0, r4
   c0dd0:	bd70      	pop	{r4, r5, r6, pc}
   c0dd2:	bf00      	nop
   c0dd4:	000c7367 	.word	0x000c7367

000c0dd8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c0dd8:	b510      	push	{r4, lr}
   c0dda:	4604      	mov	r4, r0
{
	free(buffer);
   c0ddc:	6800      	ldr	r0, [r0, #0]
   c0dde:	f7fc fd29 	bl	bd834 <free>
}
   c0de2:	4620      	mov	r0, r4
   c0de4:	bd10      	pop	{r4, pc}

000c0de6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c0de6:	b510      	push	{r4, lr}
   c0de8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c0dea:	6800      	ldr	r0, [r0, #0]
   c0dec:	b108      	cbz	r0, c0df2 <_ZN6String10invalidateEv+0xc>
   c0dee:	f7fc fd21 	bl	bd834 <free>
	buffer = NULL;
   c0df2:	2300      	movs	r3, #0
	capacity = len = 0;
   c0df4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c0df8:	6023      	str	r3, [r4, #0]
}
   c0dfa:	bd10      	pop	{r4, pc}

000c0dfc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c0dfc:	b538      	push	{r3, r4, r5, lr}
   c0dfe:	4604      	mov	r4, r0
   c0e00:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c0e02:	6800      	ldr	r0, [r0, #0]
   c0e04:	3101      	adds	r1, #1
   c0e06:	f7fc fd1d 	bl	bd844 <realloc>
	if (newbuffer) {
   c0e0a:	b110      	cbz	r0, c0e12 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c0e0c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c0e10:	2001      	movs	r0, #1
	}
	return 0;
}
   c0e12:	bd38      	pop	{r3, r4, r5, pc}

000c0e14 <_ZN6String7reserveEj>:
{
   c0e14:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c0e16:	6803      	ldr	r3, [r0, #0]
{
   c0e18:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c0e1a:	b123      	cbz	r3, c0e26 <_ZN6String7reserveEj+0x12>
   c0e1c:	6843      	ldr	r3, [r0, #4]
   c0e1e:	428b      	cmp	r3, r1
   c0e20:	d301      	bcc.n	c0e26 <_ZN6String7reserveEj+0x12>
   c0e22:	2001      	movs	r0, #1
}
   c0e24:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c0e26:	4620      	mov	r0, r4
   c0e28:	f7ff ffe8 	bl	c0dfc <_ZN6String12changeBufferEj>
   c0e2c:	2800      	cmp	r0, #0
   c0e2e:	d0f9      	beq.n	c0e24 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c0e30:	68a3      	ldr	r3, [r4, #8]
   c0e32:	2b00      	cmp	r3, #0
   c0e34:	d1f5      	bne.n	c0e22 <_ZN6String7reserveEj+0xe>
   c0e36:	6822      	ldr	r2, [r4, #0]
   c0e38:	7013      	strb	r3, [r2, #0]
   c0e3a:	e7f2      	b.n	c0e22 <_ZN6String7reserveEj+0xe>

000c0e3c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c0e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0e3e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c0e40:	4611      	mov	r1, r2
   c0e42:	9201      	str	r2, [sp, #4]
{
   c0e44:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c0e46:	f7ff ffe5 	bl	c0e14 <_ZN6String7reserveEj>
   c0e4a:	9a01      	ldr	r2, [sp, #4]
   c0e4c:	b928      	cbnz	r0, c0e5a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c0e4e:	4620      	mov	r0, r4
   c0e50:	f7ff ffc9 	bl	c0de6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c0e54:	4620      	mov	r0, r4
   c0e56:	b003      	add	sp, #12
   c0e58:	bd30      	pop	{r4, r5, pc}
	len = length;
   c0e5a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c0e5c:	4629      	mov	r1, r5
   c0e5e:	6820      	ldr	r0, [r4, #0]
   c0e60:	f002 fdf6 	bl	c3a50 <memcpy>
	buffer[len] = 0;
   c0e64:	6822      	ldr	r2, [r4, #0]
   c0e66:	68a3      	ldr	r3, [r4, #8]
   c0e68:	2100      	movs	r1, #0
   c0e6a:	54d1      	strb	r1, [r2, r3]
	return *this;
   c0e6c:	e7f2      	b.n	c0e54 <_ZN6String4copyEPKcj+0x18>

000c0e6e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c0e6e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c0e70:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c0e72:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c0e76:	4604      	mov	r4, r0
	len = 0;
   c0e78:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0e7a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c0e7c:	b141      	cbz	r1, c0e90 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c0e7e:	4608      	mov	r0, r1
   c0e80:	9101      	str	r1, [sp, #4]
   c0e82:	f002 fe98 	bl	c3bb6 <strlen>
   c0e86:	9901      	ldr	r1, [sp, #4]
   c0e88:	4602      	mov	r2, r0
   c0e8a:	4620      	mov	r0, r4
   c0e8c:	f7ff ffd6 	bl	c0e3c <_ZN6String4copyEPKcj>
}
   c0e90:	4620      	mov	r0, r4
   c0e92:	b002      	add	sp, #8
   c0e94:	bd10      	pop	{r4, pc}

000c0e96 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c0e96:	b538      	push	{r3, r4, r5, lr}
   c0e98:	4605      	mov	r5, r0
	if (buffer) {
   c0e9a:	6800      	ldr	r0, [r0, #0]
{
   c0e9c:	460c      	mov	r4, r1
	if (buffer) {
   c0e9e:	b168      	cbz	r0, c0ebc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c0ea0:	686a      	ldr	r2, [r5, #4]
   c0ea2:	688b      	ldr	r3, [r1, #8]
   c0ea4:	429a      	cmp	r2, r3
   c0ea6:	d307      	bcc.n	c0eb8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c0ea8:	6809      	ldr	r1, [r1, #0]
   c0eaa:	f002 fe5f 	bl	c3b6c <strcpy>
			len = rhs.len;
   c0eae:	68a3      	ldr	r3, [r4, #8]
   c0eb0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c0eb2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c0eb4:	60a3      	str	r3, [r4, #8]
}
   c0eb6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c0eb8:	f7fc fcbc 	bl	bd834 <free>
	buffer = rhs.buffer;
   c0ebc:	6823      	ldr	r3, [r4, #0]
   c0ebe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c0ec0:	6863      	ldr	r3, [r4, #4]
   c0ec2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c0ec4:	68a3      	ldr	r3, [r4, #8]
   c0ec6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c0ec8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c0eca:	e9c4 3300 	strd	r3, r3, [r4]
   c0ece:	e7f1      	b.n	c0eb4 <_ZN6String4moveERS_+0x1e>

000c0ed0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c0ed0:	b510      	push	{r4, lr}
	buffer = NULL;
   c0ed2:	2300      	movs	r3, #0
	capacity = 0;
   c0ed4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c0ed8:	4604      	mov	r4, r0
	len = 0;
   c0eda:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0edc:	7303      	strb	r3, [r0, #12]
	move(rval);
   c0ede:	f7ff ffda 	bl	c0e96 <_ZN6String4moveERS_>
}
   c0ee2:	4620      	mov	r0, r4
   c0ee4:	bd10      	pop	{r4, pc}

000c0ee6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c0ee6:	4288      	cmp	r0, r1
{
   c0ee8:	b510      	push	{r4, lr}
   c0eea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c0eec:	d005      	beq.n	c0efa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c0eee:	680b      	ldr	r3, [r1, #0]
   c0ef0:	b12b      	cbz	r3, c0efe <_ZN6StringaSERKS_+0x18>
   c0ef2:	688a      	ldr	r2, [r1, #8]
   c0ef4:	4619      	mov	r1, r3
   c0ef6:	f7ff ffa1 	bl	c0e3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0efa:	4620      	mov	r0, r4
   c0efc:	bd10      	pop	{r4, pc}
	else invalidate();
   c0efe:	f7ff ff72 	bl	c0de6 <_ZN6String10invalidateEv>
   c0f02:	e7fa      	b.n	c0efa <_ZN6StringaSERKS_+0x14>

000c0f04 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c0f04:	b510      	push	{r4, lr}
	buffer = NULL;
   c0f06:	2300      	movs	r3, #0
String::String(const String &value)
   c0f08:	4604      	mov	r4, r0
	capacity = 0;
   c0f0a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c0f0e:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0f10:	7303      	strb	r3, [r0, #12]
	*this = value;
   c0f12:	f7ff ffe8 	bl	c0ee6 <_ZN6StringaSERKS_>
}
   c0f16:	4620      	mov	r0, r4
   c0f18:	bd10      	pop	{r4, pc}

000c0f1a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c0f1a:	b513      	push	{r0, r1, r4, lr}
   c0f1c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c0f1e:	b159      	cbz	r1, c0f38 <_ZN6StringaSEPKc+0x1e>
   c0f20:	4608      	mov	r0, r1
   c0f22:	9101      	str	r1, [sp, #4]
   c0f24:	f002 fe47 	bl	c3bb6 <strlen>
   c0f28:	9901      	ldr	r1, [sp, #4]
   c0f2a:	4602      	mov	r2, r0
   c0f2c:	4620      	mov	r0, r4
   c0f2e:	f7ff ff85 	bl	c0e3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0f32:	4620      	mov	r0, r4
   c0f34:	b002      	add	sp, #8
   c0f36:	bd10      	pop	{r4, pc}
	else invalidate();
   c0f38:	f7ff ff55 	bl	c0de6 <_ZN6String10invalidateEv>
   c0f3c:	e7f9      	b.n	c0f32 <_ZN6StringaSEPKc+0x18>

000c0f3e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c0f3e:	b570      	push	{r4, r5, r6, lr}
   c0f40:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c0f42:	460e      	mov	r6, r1
   c0f44:	b909      	cbnz	r1, c0f4a <_ZN6String6concatEPKcj+0xc>
   c0f46:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c0f48:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c0f4a:	b16a      	cbz	r2, c0f68 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c0f4c:	6884      	ldr	r4, [r0, #8]
   c0f4e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c0f50:	4621      	mov	r1, r4
   c0f52:	f7ff ff5f 	bl	c0e14 <_ZN6String7reserveEj>
   c0f56:	2800      	cmp	r0, #0
   c0f58:	d0f5      	beq.n	c0f46 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c0f5a:	6828      	ldr	r0, [r5, #0]
   c0f5c:	68ab      	ldr	r3, [r5, #8]
   c0f5e:	4631      	mov	r1, r6
   c0f60:	4418      	add	r0, r3
   c0f62:	f002 fe03 	bl	c3b6c <strcpy>
	len = newlen;
   c0f66:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c0f68:	2001      	movs	r0, #1
   c0f6a:	e7ed      	b.n	c0f48 <_ZN6String6concatEPKcj+0xa>

000c0f6c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c0f6c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c0f6e:	2300      	movs	r3, #0
	buf[0] = c;
   c0f70:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c0f74:	2201      	movs	r2, #1
   c0f76:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c0f78:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c0f7c:	f7ff ffdf 	bl	c0f3e <_ZN6String6concatEPKcj>
}
   c0f80:	b003      	add	sp, #12
   c0f82:	f85d fb04 	ldr.w	pc, [sp], #4

000c0f86 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c0f86:	6883      	ldr	r3, [r0, #8]
   c0f88:	428b      	cmp	r3, r1
   c0f8a:	d903      	bls.n	c0f94 <_ZNK6StringixEj+0xe>
   c0f8c:	6800      	ldr	r0, [r0, #0]
   c0f8e:	b110      	cbz	r0, c0f96 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c0f90:	5c40      	ldrb	r0, [r0, r1]
   c0f92:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c0f94:	2000      	movs	r0, #0
}
   c0f96:	4770      	bx	lr

000c0f98 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c0f98:	f7ff bff5 	b.w	c0f86 <_ZNK6StringixEj>

000c0f9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c0f9c:	4b05      	ldr	r3, [pc, #20]	; (c0fb4 <_GLOBAL__sub_I_System+0x18>)
   c0f9e:	2202      	movs	r2, #2
   c0fa0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c0fa2:	4b05      	ldr	r3, [pc, #20]	; (c0fb8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c0fa4:	4a05      	ldr	r2, [pc, #20]	; (c0fbc <_GLOBAL__sub_I_System+0x20>)
   c0fa6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c0fa8:	2000      	movs	r0, #0
   c0faa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c0fae:	f7fc bb65 	b.w	bd67c <set_system_mode>
   c0fb2:	bf00      	nop
   c0fb4:	2003e6c4 	.word	0x2003e6c4
   c0fb8:	2003e6b8 	.word	0x2003e6b8
   c0fbc:	ffff0000 	.word	0xffff0000

000c0fc0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0fc4:	4a15      	ldr	r2, [pc, #84]	; (c101c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0fc6:	f8df 8060 	ldr.w	r8, [pc, #96]	; c1028 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0fca:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0fce:	1980      	adds	r0, r0, r6
   c0fd0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0fd4:	4b12      	ldr	r3, [pc, #72]	; (c1020 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0fd6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c0fda:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c0fde:	1986      	adds	r6, r0, r6
   c0fe0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0fe4:	42bb      	cmp	r3, r7
   c0fe6:	bf08      	it	eq
   c0fe8:	42b2      	cmpeq	r2, r6
{
   c0fea:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c0fec:	d013      	beq.n	c1016 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c0fee:	a903      	add	r1, sp, #12
   c0ff0:	4668      	mov	r0, sp
   c0ff2:	e9cd 6700 	strd	r6, r7, [sp]
   c0ff6:	f7fc fc75 	bl	bd8e4 <localtime_r>
	calendar_time.tm_year += 1900;
   c0ffa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ffc:	4d09      	ldr	r5, [pc, #36]	; (c1024 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0ffe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1002:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c1004:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c100e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1012:	6823      	ldr	r3, [r4, #0]
   c1014:	602b      	str	r3, [r5, #0]
    }
}
   c1016:	b00c      	add	sp, #48	; 0x30
   c1018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c101c:	2003e6f8 	.word	0x2003e6f8
   c1020:	2003e6f0 	.word	0x2003e6f0
   c1024:	2003e6cc 	.word	0x2003e6cc
   c1028:	2003e700 	.word	0x2003e700

000c102c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c102c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c102e:	2000      	movs	r0, #0
   c1030:	f7fc fb88 	bl	bd744 <spark_sync_time_pending>
   c1034:	b128      	cbz	r0, c1042 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1036:	f7fc fb6d 	bl	bd714 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c103a:	f080 0001 	eor.w	r0, r0, #1
   c103e:	b2c0      	uxtb	r0, r0
    }
   c1040:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1042:	2001      	movs	r0, #1
   c1044:	e7fc      	b.n	c1040 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1048 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c1048:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c104a:	f7ff ffb9 	bl	c0fc0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c104e:	4b02      	ldr	r3, [pc, #8]	; (c1058 <_ZN9TimeClass5monthEx+0x10>)
   c1050:	6918      	ldr	r0, [r3, #16]
}
   c1052:	3001      	adds	r0, #1
   c1054:	bd08      	pop	{r3, pc}
   c1056:	bf00      	nop
   c1058:	2003e6cc 	.word	0x2003e6cc

000c105c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c105c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c105e:	2000      	movs	r0, #0
   c1060:	f7fc f912 	bl	bd288 <hal_rtc_time_is_valid>
    if (rtcstate)
   c1064:	4604      	mov	r4, r0
   c1066:	b9a0      	cbnz	r0, c1092 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c1068:	f7fc fb00 	bl	bd66c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c106c:	2801      	cmp	r0, #1
   c106e:	d110      	bne.n	c1092 <_ZN9TimeClass7isValidEv+0x36>
   c1070:	4620      	mov	r0, r4
   c1072:	f7fc fb23 	bl	bd6bc <system_thread_get_state>
   c1076:	b960      	cbnz	r0, c1092 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c1078:	f7ff ffd8 	bl	c102c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c107c:	b910      	cbnz	r0, c1084 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c107e:	f7fc fb41 	bl	bd704 <spark_process>
        while (_while() && !_condition()) {
   c1082:	e7f9      	b.n	c1078 <_ZN9TimeClass7isValidEv+0x1c>
   c1084:	f7ff ffd2 	bl	c102c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c1088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c108c:	2000      	movs	r0, #0
   c108e:	f7fc b8fb 	b.w	bd288 <hal_rtc_time_is_valid>
}
   c1092:	4620      	mov	r0, r4
   c1094:	bd10      	pop	{r4, pc}

000c1096 <_ZN9TimeClass3nowEv>:
{
   c1096:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c1098:	f7ff ffe0 	bl	c105c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c109c:	2210      	movs	r2, #16
   c109e:	2100      	movs	r1, #0
   c10a0:	4668      	mov	r0, sp
   c10a2:	f002 fcfd 	bl	c3aa0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c10a6:	2100      	movs	r1, #0
   c10a8:	4668      	mov	r0, sp
   c10aa:	f7fc f8f5 	bl	bd298 <hal_rtc_get_time>
}
   c10ae:	9800      	ldr	r0, [sp, #0]
   c10b0:	b005      	add	sp, #20
   c10b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c10b8 <_ZN9TimeClass4hourEv>:
{
   c10b8:	b508      	push	{r3, lr}
	return hour(now());
   c10ba:	f7ff ffec 	bl	c1096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c10be:	17c1      	asrs	r1, r0, #31
   c10c0:	f7ff ff7e 	bl	c0fc0 <_ZL22Refresh_UnixTime_Cachex>
}
   c10c4:	4b01      	ldr	r3, [pc, #4]	; (c10cc <_ZN9TimeClass4hourEv+0x14>)
   c10c6:	6898      	ldr	r0, [r3, #8]
   c10c8:	bd08      	pop	{r3, pc}
   c10ca:	bf00      	nop
   c10cc:	2003e6cc 	.word	0x2003e6cc

000c10d0 <_ZN9TimeClass6minuteEv>:
{
   c10d0:	b508      	push	{r3, lr}
	return minute(now());
   c10d2:	f7ff ffe0 	bl	c1096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c10d6:	17c1      	asrs	r1, r0, #31
   c10d8:	f7ff ff72 	bl	c0fc0 <_ZL22Refresh_UnixTime_Cachex>
}
   c10dc:	4b01      	ldr	r3, [pc, #4]	; (c10e4 <_ZN9TimeClass6minuteEv+0x14>)
   c10de:	6858      	ldr	r0, [r3, #4]
   c10e0:	bd08      	pop	{r3, pc}
   c10e2:	bf00      	nop
   c10e4:	2003e6cc 	.word	0x2003e6cc

000c10e8 <_ZN9TimeClass6secondEv>:
{
   c10e8:	b508      	push	{r3, lr}
	return second(now());
   c10ea:	f7ff ffd4 	bl	c1096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c10ee:	17c1      	asrs	r1, r0, #31
   c10f0:	f7ff ff66 	bl	c0fc0 <_ZL22Refresh_UnixTime_Cachex>
}
   c10f4:	4b01      	ldr	r3, [pc, #4]	; (c10fc <_ZN9TimeClass6secondEv+0x14>)
   c10f6:	6818      	ldr	r0, [r3, #0]
   c10f8:	bd08      	pop	{r3, pc}
   c10fa:	bf00      	nop
   c10fc:	2003e6cc 	.word	0x2003e6cc

000c1100 <_ZN9TimeClass3dayEv>:
{
   c1100:	b508      	push	{r3, lr}
	return day(now());
   c1102:	f7ff ffc8 	bl	c1096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1106:	17c1      	asrs	r1, r0, #31
   c1108:	f7ff ff5a 	bl	c0fc0 <_ZL22Refresh_UnixTime_Cachex>
}
   c110c:	4b01      	ldr	r3, [pc, #4]	; (c1114 <_ZN9TimeClass3dayEv+0x14>)
   c110e:	68d8      	ldr	r0, [r3, #12]
   c1110:	bd08      	pop	{r3, pc}
   c1112:	bf00      	nop
   c1114:	2003e6cc 	.word	0x2003e6cc

000c1118 <_ZN9TimeClass5monthEv>:
{
   c1118:	b508      	push	{r3, lr}
	return month(now());
   c111a:	f7ff ffbc 	bl	c1096 <_ZN9TimeClass3nowEv>
}
   c111e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1122:	17c1      	asrs	r1, r0, #31
   c1124:	f7ff bf90 	b.w	c1048 <_ZN9TimeClass5monthEx>

000c1128 <_ZN9TimeClass4yearEv>:
{
   c1128:	b508      	push	{r3, lr}
	return year(now());
   c112a:	f7ff ffb4 	bl	c1096 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c112e:	17c1      	asrs	r1, r0, #31
   c1130:	f7ff ff46 	bl	c0fc0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1134:	4b01      	ldr	r3, [pc, #4]	; (c113c <_ZN9TimeClass4yearEv+0x14>)
   c1136:	6958      	ldr	r0, [r3, #20]
   c1138:	bd08      	pop	{r3, pc}
   c113a:	bf00      	nop
   c113c:	2003e6cc 	.word	0x2003e6cc

000c1140 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1140:	4b02      	ldr	r3, [pc, #8]	; (c114c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1142:	681a      	ldr	r2, [r3, #0]
   c1144:	4b02      	ldr	r3, [pc, #8]	; (c1150 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1146:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1148:	4770      	bx	lr
   c114a:	bf00      	nop
   c114c:	2003db98 	.word	0x2003db98
   c1150:	2003e6c8 	.word	0x2003e6c8

000c1154 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1154:	4770      	bx	lr

000c1156 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1156:	7441      	strb	r1, [r0, #17]
}
   c1158:	4770      	bx	lr

000c115a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c115a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c115c:	7c00      	ldrb	r0, [r0, #16]
   c115e:	f7fc fa03 	bl	bd568 <hal_usart_available_data_for_write>
}
   c1162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1166:	bd08      	pop	{r3, pc}

000c1168 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1168:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c116a:	7c00      	ldrb	r0, [r0, #16]
   c116c:	f7fc f9d4 	bl	bd518 <hal_usart_available>
}
   c1170:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1174:	bd08      	pop	{r3, pc}

000c1176 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1176:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1178:	7c00      	ldrb	r0, [r0, #16]
   c117a:	f7fc f9dd 	bl	bd538 <hal_usart_peek>
}
   c117e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1182:	bd08      	pop	{r3, pc}

000c1184 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1184:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1186:	7c00      	ldrb	r0, [r0, #16]
   c1188:	f7fc f9ce 	bl	bd528 <hal_usart_read>
}
   c118c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1190:	bd08      	pop	{r3, pc}

000c1192 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1192:	7c00      	ldrb	r0, [r0, #16]
   c1194:	f7fc b9d8 	b.w	bd548 <hal_usart_flush>

000c1198 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1198:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c119a:	7c45      	ldrb	r5, [r0, #17]
{
   c119c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c119e:	b12d      	cbz	r5, c11ac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c11a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c11a2:	b003      	add	sp, #12
   c11a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c11a8:	f7fc b9ae 	b.w	bd508 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c11ac:	7c00      	ldrb	r0, [r0, #16]
   c11ae:	9101      	str	r1, [sp, #4]
   c11b0:	f7fc f9da 	bl	bd568 <hal_usart_available_data_for_write>
   c11b4:	2800      	cmp	r0, #0
   c11b6:	9901      	ldr	r1, [sp, #4]
   c11b8:	dcf2      	bgt.n	c11a0 <_ZN11USARTSerial5writeEh+0x8>
}
   c11ba:	4628      	mov	r0, r5
   c11bc:	b003      	add	sp, #12
   c11be:	bd30      	pop	{r4, r5, pc}

000c11c0 <_ZN11USARTSerialD0Ev>:
   c11c0:	b510      	push	{r4, lr}
   c11c2:	2114      	movs	r1, #20
   c11c4:	4604      	mov	r4, r0
   c11c6:	f7f2 ff6c 	bl	b40a2 <_ZdlPvj>
   c11ca:	4620      	mov	r0, r4
   c11cc:	bd10      	pop	{r4, pc}
	...

000c11d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c11d0:	b510      	push	{r4, lr}
   c11d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c11d6:	4604      	mov	r4, r0
   c11d8:	4608      	mov	r0, r1
   c11da:	4611      	mov	r1, r2
   c11dc:	2200      	movs	r2, #0
   c11de:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c11e2:	4b04      	ldr	r3, [pc, #16]	; (c11f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c11e4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c11e6:	2301      	movs	r3, #1
  _serial = serial;
   c11e8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c11ea:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c11ec:	f7fc f9cc 	bl	bd588 <hal_usart_init_ex>
}
   c11f0:	4620      	mov	r0, r4
   c11f2:	bd10      	pop	{r4, pc}
   c11f4:	000c745c 	.word	0x000c745c

000c11f8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c11f8:	7c00      	ldrb	r0, [r0, #16]
   c11fa:	2300      	movs	r3, #0
   c11fc:	f7fc b9bc 	b.w	bd578 <hal_usart_begin_config>

000c1200 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c1200:	2200      	movs	r2, #0
   c1202:	f7ff bff9 	b.w	c11f8 <_ZN11USARTSerial5beginEmm>

000c1206 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1206:	7c00      	ldrb	r0, [r0, #16]
   c1208:	f7fc b976 	b.w	bd4f8 <hal_usart_end>

000c120c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c120c:	7441      	strb	r1, [r0, #17]
}
   c120e:	4770      	bx	lr

000c1210 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1210:	4770      	bx	lr

000c1212 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c1212:	4770      	bx	lr

000c1214 <_ZN9USBSerial4readEv>:
{
   c1214:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1216:	2100      	movs	r1, #0
   c1218:	7c00      	ldrb	r0, [r0, #16]
   c121a:	f7fc f9e5 	bl	bd5e8 <HAL_USB_USART_Receive_Data>
}
   c121e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1222:	bd08      	pop	{r3, pc}

000c1224 <_ZN9USBSerial4peekEv>:
{
   c1224:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1226:	2101      	movs	r1, #1
   c1228:	7c00      	ldrb	r0, [r0, #16]
   c122a:	f7fc f9dd 	bl	bd5e8 <HAL_USB_USART_Receive_Data>
}
   c122e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1232:	bd08      	pop	{r3, pc}

000c1234 <_ZN9USBSerial17availableForWriteEv>:
{
   c1234:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1236:	7c00      	ldrb	r0, [r0, #16]
   c1238:	f7fc f9ce 	bl	bd5d8 <HAL_USB_USART_Available_Data_For_Write>
}
   c123c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1240:	bd08      	pop	{r3, pc}

000c1242 <_ZN9USBSerial9availableEv>:
{
   c1242:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1244:	7c00      	ldrb	r0, [r0, #16]
   c1246:	f7fc f9bf 	bl	bd5c8 <HAL_USB_USART_Available_Data>
}
   c124a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c124e:	bd08      	pop	{r3, pc}

000c1250 <_ZN9USBSerial5writeEh>:
{
   c1250:	b513      	push	{r0, r1, r4, lr}
   c1252:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1254:	7c00      	ldrb	r0, [r0, #16]
{
   c1256:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1258:	f7fc f9be 	bl	bd5d8 <HAL_USB_USART_Available_Data_For_Write>
   c125c:	2800      	cmp	r0, #0
   c125e:	9901      	ldr	r1, [sp, #4]
   c1260:	dc01      	bgt.n	c1266 <_ZN9USBSerial5writeEh+0x16>
   c1262:	7c60      	ldrb	r0, [r4, #17]
   c1264:	b120      	cbz	r0, c1270 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1266:	7c20      	ldrb	r0, [r4, #16]
   c1268:	f7fc f9c6 	bl	bd5f8 <HAL_USB_USART_Send_Data>
   c126c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c1270:	b002      	add	sp, #8
   c1272:	bd10      	pop	{r4, pc}

000c1274 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1274:	7c00      	ldrb	r0, [r0, #16]
   c1276:	f7fc b9c7 	b.w	bd608 <HAL_USB_USART_Flush_Data>

000c127a <_ZN9USBSerialD0Ev>:
   c127a:	b510      	push	{r4, lr}
   c127c:	2114      	movs	r1, #20
   c127e:	4604      	mov	r4, r0
   c1280:	f7f2 ff0f 	bl	b40a2 <_ZdlPvj>
   c1284:	4620      	mov	r0, r4
   c1286:	bd10      	pop	{r4, pc}

000c1288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1288:	b510      	push	{r4, lr}
   c128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c128e:	4604      	mov	r4, r0
   c1290:	4608      	mov	r0, r1
   c1292:	2100      	movs	r1, #0
   c1294:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1298:	4b04      	ldr	r3, [pc, #16]	; (c12ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c129a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c129c:	2301      	movs	r3, #1
  _serial = serial;
   c129e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c12a0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c12a2:	4611      	mov	r1, r2
   c12a4:	f7fc f978 	bl	bd598 <HAL_USB_USART_Init>
}
   c12a8:	4620      	mov	r0, r4
   c12aa:	bd10      	pop	{r4, pc}
   c12ac:	000c748c 	.word	0x000c748c

000c12b0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c12b0:	7c00      	ldrb	r0, [r0, #16]
   c12b2:	2200      	movs	r2, #0
   c12b4:	f7fc b978 	b.w	bd5a8 <HAL_USB_USART_Begin>

000c12b8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c12b8:	7c00      	ldrb	r0, [r0, #16]
   c12ba:	f7fc b97d 	b.w	bd5b8 <HAL_USB_USART_End>

000c12be <_Z19acquireSerialBufferv>:
{
   c12be:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c12c0:	2214      	movs	r2, #20
{
   c12c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c12c4:	2100      	movs	r1, #0
   c12c6:	f002 fbeb 	bl	c3aa0 <memset>
}
   c12ca:	4620      	mov	r0, r4
   c12cc:	bd10      	pop	{r4, pc}
	...

000c12d0 <_Z16_fetch_usbserialv>:
{
   c12d0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c12d2:	4c0f      	ldr	r4, [pc, #60]	; (c1310 <_Z16_fetch_usbserialv+0x40>)
{
   c12d4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c12d6:	a803      	add	r0, sp, #12
   c12d8:	f7ff fff1 	bl	c12be <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c12dc:	7821      	ldrb	r1, [r4, #0]
   c12de:	f3bf 8f5b 	dmb	ish
   c12e2:	f011 0101 	ands.w	r1, r1, #1
   c12e6:	d10f      	bne.n	c1308 <_Z16_fetch_usbserialv+0x38>
   c12e8:	4620      	mov	r0, r4
   c12ea:	9101      	str	r1, [sp, #4]
   c12ec:	f7f2 fee8 	bl	b40c0 <__cxa_guard_acquire>
   c12f0:	9901      	ldr	r1, [sp, #4]
   c12f2:	b148      	cbz	r0, c1308 <_Z16_fetch_usbserialv+0x38>
   c12f4:	aa03      	add	r2, sp, #12
   c12f6:	4807      	ldr	r0, [pc, #28]	; (c1314 <_Z16_fetch_usbserialv+0x44>)
   c12f8:	f7ff ffc6 	bl	c1288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c12fc:	4620      	mov	r0, r4
   c12fe:	f7f2 fee4 	bl	b40ca <__cxa_guard_release>
   c1302:	4805      	ldr	r0, [pc, #20]	; (c1318 <_Z16_fetch_usbserialv+0x48>)
   c1304:	f002 fb7e 	bl	c3a04 <atexit>
	return _usbserial;
}
   c1308:	4802      	ldr	r0, [pc, #8]	; (c1314 <_Z16_fetch_usbserialv+0x44>)
   c130a:	b008      	add	sp, #32
   c130c:	bd10      	pop	{r4, pc}
   c130e:	bf00      	nop
   c1310:	2003e708 	.word	0x2003e708
   c1314:	2003e70c 	.word	0x2003e70c
   c1318:	000c1211 	.word	0x000c1211

000c131c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c131c:	4b01      	ldr	r3, [pc, #4]	; (c1324 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c131e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1320:	4770      	bx	lr
   c1322:	bf00      	nop
   c1324:	2003dba0 	.word	0x2003dba0

000c1328 <serialEventRun>:
{
   c1328:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c132a:	4b0b      	ldr	r3, [pc, #44]	; (c1358 <serialEventRun+0x30>)
   c132c:	b143      	cbz	r3, c1340 <serialEventRun+0x18>
   c132e:	f7ff ffcf 	bl	c12d0 <_Z16_fetch_usbserialv>
   c1332:	6803      	ldr	r3, [r0, #0]
   c1334:	691b      	ldr	r3, [r3, #16]
   c1336:	4798      	blx	r3
   c1338:	2800      	cmp	r0, #0
   c133a:	dd01      	ble.n	c1340 <serialEventRun+0x18>
        serialEvent();
   c133c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1340:	4b06      	ldr	r3, [pc, #24]	; (c135c <serialEventRun+0x34>)
   c1342:	b143      	cbz	r3, c1356 <serialEventRun+0x2e>
   c1344:	f000 f95c 	bl	c1600 <_Z22__fetch_global_Serial1v>
   c1348:	6803      	ldr	r3, [r0, #0]
   c134a:	691b      	ldr	r3, [r3, #16]
   c134c:	4798      	blx	r3
   c134e:	2800      	cmp	r0, #0
   c1350:	dd01      	ble.n	c1356 <serialEventRun+0x2e>
        serialEvent1();
   c1352:	f3af 8000 	nop.w
}
   c1356:	bd08      	pop	{r3, pc}
	...

000c1360 <_post_loop>:
{
   c1360:	b508      	push	{r3, lr}
	serialEventRun();
   c1362:	f7ff ffe1 	bl	c1328 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1366:	f7fb ff87 	bl	bd278 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c136a:	4b01      	ldr	r3, [pc, #4]	; (c1370 <_post_loop+0x10>)
   c136c:	6018      	str	r0, [r3, #0]
}
   c136e:	bd08      	pop	{r3, pc}
   c1370:	2003e728 	.word	0x2003e728

000c1374 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1374:	4805      	ldr	r0, [pc, #20]	; (c138c <_Z33system_initialize_user_backup_ramv+0x18>)
   c1376:	4a06      	ldr	r2, [pc, #24]	; (c1390 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1378:	4906      	ldr	r1, [pc, #24]	; (c1394 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c137a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c137c:	1a12      	subs	r2, r2, r0
   c137e:	f002 fb67 	bl	c3a50 <memcpy>
    __backup_sram_signature = signature;
   c1382:	4b05      	ldr	r3, [pc, #20]	; (c1398 <_Z33system_initialize_user_backup_ramv+0x24>)
   c1384:	4a05      	ldr	r2, [pc, #20]	; (c139c <_Z33system_initialize_user_backup_ramv+0x28>)
   c1386:	601a      	str	r2, [r3, #0]
}
   c1388:	bd08      	pop	{r3, pc}
   c138a:	bf00      	nop
   c138c:	2003f400 	.word	0x2003f400
   c1390:	2003f404 	.word	0x2003f404
   c1394:	000c7e24 	.word	0x000c7e24
   c1398:	2003f400 	.word	0x2003f400
   c139c:	9a271c1e 	.word	0x9a271c1e

000c13a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c13a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c13a2:	2300      	movs	r3, #0
   c13a4:	9300      	str	r3, [sp, #0]
   c13a6:	461a      	mov	r2, r3
   c13a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c13ac:	f7fc f9a0 	bl	bd6f0 <system_ctrl_set_result>
}
   c13b0:	b003      	add	sp, #12
   c13b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c13b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c13b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c13ba:	8843      	ldrh	r3, [r0, #2]
   c13bc:	2b0a      	cmp	r3, #10
   c13be:	d008      	beq.n	c13d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c13c0:	2b50      	cmp	r3, #80	; 0x50
   c13c2:	d10b      	bne.n	c13dc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c13c4:	4b09      	ldr	r3, [pc, #36]	; (c13ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c13c6:	681b      	ldr	r3, [r3, #0]
   c13c8:	b14b      	cbz	r3, c13de <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c13ca:	b003      	add	sp, #12
   c13cc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c13d0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c13d2:	f7ff ffe5 	bl	c13a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c13d6:	b003      	add	sp, #12
   c13d8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c13dc:	2300      	movs	r3, #0
   c13de:	9300      	str	r3, [sp, #0]
   c13e0:	461a      	mov	r2, r3
   c13e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c13e6:	f7fc f983 	bl	bd6f0 <system_ctrl_set_result>
}
   c13ea:	e7f4      	b.n	c13d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c13ec:	2003e724 	.word	0x2003e724

000c13f0 <module_user_init_hook>:
{
   c13f0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c13f2:	4812      	ldr	r0, [pc, #72]	; (c143c <module_user_init_hook+0x4c>)
   c13f4:	2100      	movs	r1, #0
   c13f6:	f7fc fa6d 	bl	bd8d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c13fa:	4b11      	ldr	r3, [pc, #68]	; (c1440 <module_user_init_hook+0x50>)
   c13fc:	681a      	ldr	r2, [r3, #0]
   c13fe:	4b11      	ldr	r3, [pc, #68]	; (c1444 <module_user_init_hook+0x54>)
   c1400:	429a      	cmp	r2, r3
   c1402:	4b11      	ldr	r3, [pc, #68]	; (c1448 <module_user_init_hook+0x58>)
   c1404:	bf0c      	ite	eq
   c1406:	2201      	moveq	r2, #1
   c1408:	2200      	movne	r2, #0
   c140a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c140c:	d001      	beq.n	c1412 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c140e:	f7ff ffb1 	bl	c1374 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1412:	f7fb ff19 	bl	bd248 <HAL_RNG_GetRandomNumber>
   c1416:	4604      	mov	r4, r0
    srand(seed);
   c1418:	f002 fb4a 	bl	c3ab0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c141c:	4b0b      	ldr	r3, [pc, #44]	; (c144c <module_user_init_hook+0x5c>)
   c141e:	b113      	cbz	r3, c1426 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1420:	4620      	mov	r0, r4
   c1422:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1426:	2100      	movs	r1, #0
   c1428:	4808      	ldr	r0, [pc, #32]	; (c144c <module_user_init_hook+0x5c>)
   c142a:	f7fc f993 	bl	bd754 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c142e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1432:	4807      	ldr	r0, [pc, #28]	; (c1450 <module_user_init_hook+0x60>)
   c1434:	2100      	movs	r1, #0
   c1436:	f7fc b951 	b.w	bd6dc <system_ctrl_set_app_request_handler>
   c143a:	bf00      	nop
   c143c:	000c131d 	.word	0x000c131d
   c1440:	2003f400 	.word	0x2003f400
   c1444:	9a271c1e 	.word	0x9a271c1e
   c1448:	2003e720 	.word	0x2003e720
   c144c:	00000000 	.word	0x00000000
   c1450:	000c13b9 	.word	0x000c13b9

000c1454 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1454:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1456:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1458:	d902      	bls.n	c1460 <pinAvailable+0xc>
    return false;
   c145a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c145c:	b002      	add	sp, #8
   c145e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1460:	f1a0 030b 	sub.w	r3, r0, #11
   c1464:	2b02      	cmp	r3, #2
   c1466:	d81a      	bhi.n	c149e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1468:	4c17      	ldr	r4, [pc, #92]	; (c14c8 <pinAvailable+0x74>)
   c146a:	7821      	ldrb	r1, [r4, #0]
   c146c:	f3bf 8f5b 	dmb	ish
   c1470:	f011 0101 	ands.w	r1, r1, #1
   c1474:	d10b      	bne.n	c148e <pinAvailable+0x3a>
   c1476:	4620      	mov	r0, r4
   c1478:	9101      	str	r1, [sp, #4]
   c147a:	f7f2 fe21 	bl	b40c0 <__cxa_guard_acquire>
   c147e:	9901      	ldr	r1, [sp, #4]
   c1480:	b128      	cbz	r0, c148e <pinAvailable+0x3a>
   c1482:	4812      	ldr	r0, [pc, #72]	; (c14cc <pinAvailable+0x78>)
   c1484:	f7ff fb5b 	bl	c0b3e <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1488:	4620      	mov	r0, r4
   c148a:	f7f2 fe1e 	bl	b40ca <__cxa_guard_release>
   c148e:	4b0f      	ldr	r3, [pc, #60]	; (c14cc <pinAvailable+0x78>)
   c1490:	7818      	ldrb	r0, [r3, #0]
   c1492:	f7fb fff1 	bl	bd478 <hal_spi_is_enabled>
   c1496:	2800      	cmp	r0, #0
   c1498:	d1df      	bne.n	c145a <pinAvailable+0x6>
  return true; // 'pin' is available
   c149a:	2001      	movs	r0, #1
   c149c:	e7de      	b.n	c145c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c149e:	2801      	cmp	r0, #1
   c14a0:	d809      	bhi.n	c14b6 <pinAvailable+0x62>
   c14a2:	f000 f86d 	bl	c1580 <_Z19__fetch_global_Wirev>
   c14a6:	2100      	movs	r1, #0
   c14a8:	7c00      	ldrb	r0, [r0, #16]
   c14aa:	f7fb ff7d 	bl	bd3a8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c14ae:	f080 0001 	eor.w	r0, r0, #1
   c14b2:	b2c0      	uxtb	r0, r0
   c14b4:	e7d2      	b.n	c145c <pinAvailable+0x8>
   c14b6:	3809      	subs	r0, #9
   c14b8:	2801      	cmp	r0, #1
   c14ba:	d8ee      	bhi.n	c149a <pinAvailable+0x46>
   c14bc:	f000 f8a0 	bl	c1600 <_Z22__fetch_global_Serial1v>
   c14c0:	7c00      	ldrb	r0, [r0, #16]
   c14c2:	f7fc f849 	bl	bd558 <hal_usart_is_enabled>
   c14c6:	e7f2      	b.n	c14ae <pinAvailable+0x5a>
   c14c8:	2003dd78 	.word	0x2003dd78
   c14cc:	2003dd7c 	.word	0x2003dd7c

000c14d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c14d0:	2825      	cmp	r0, #37	; 0x25
{
   c14d2:	b538      	push	{r3, r4, r5, lr}
   c14d4:	4604      	mov	r4, r0
   c14d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c14d8:	d80a      	bhi.n	c14f0 <pinMode+0x20>
   c14da:	29ff      	cmp	r1, #255	; 0xff
   c14dc:	d008      	beq.n	c14f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c14de:	f7ff ffb9 	bl	c1454 <pinAvailable>
   c14e2:	b128      	cbz	r0, c14f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c14e4:	4629      	mov	r1, r5
   c14e6:	4620      	mov	r0, r4
}
   c14e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c14ec:	f7fb bee4 	b.w	bd2b8 <HAL_Pin_Mode>
}
   c14f0:	bd38      	pop	{r3, r4, r5, pc}

000c14f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c14f2:	b538      	push	{r3, r4, r5, lr}
   c14f4:	4604      	mov	r4, r0
   c14f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c14f8:	f7fb fee6 	bl	bd2c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c14fc:	28ff      	cmp	r0, #255	; 0xff
   c14fe:	d010      	beq.n	c1522 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1500:	2806      	cmp	r0, #6
   c1502:	d804      	bhi.n	c150e <digitalWrite+0x1c>
   c1504:	234d      	movs	r3, #77	; 0x4d
   c1506:	fa23 f000 	lsr.w	r0, r3, r0
   c150a:	07c3      	lsls	r3, r0, #31
   c150c:	d409      	bmi.n	c1522 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c150e:	4620      	mov	r0, r4
   c1510:	f7ff ffa0 	bl	c1454 <pinAvailable>
   c1514:	b128      	cbz	r0, c1522 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1516:	4629      	mov	r1, r5
   c1518:	4620      	mov	r0, r4
}
   c151a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c151e:	f7fb bedb 	b.w	bd2d8 <HAL_GPIO_Write>
}
   c1522:	bd38      	pop	{r3, r4, r5, pc}

000c1524 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1524:	280d      	cmp	r0, #13
{
   c1526:	b510      	push	{r4, lr}
   c1528:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c152a:	bf9c      	itt	ls
   c152c:	340e      	addls	r4, #14
   c152e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1530:	4620      	mov	r0, r4
   c1532:	f7ff ff8f 	bl	c1454 <pinAvailable>
   c1536:	b150      	cbz	r0, c154e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c1538:	2103      	movs	r1, #3
   c153a:	4620      	mov	r0, r4
   c153c:	f7fb feb4 	bl	bd2a8 <HAL_Validate_Pin_Function>
   c1540:	2803      	cmp	r0, #3
   c1542:	d104      	bne.n	c154e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1544:	4620      	mov	r0, r4
}
   c1546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c154a:	f7fb bedd 	b.w	bd308 <hal_adc_read>
}
   c154e:	2000      	movs	r0, #0
   c1550:	bd10      	pop	{r4, pc}

000c1552 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1552:	4770      	bx	lr

000c1554 <_Z17acquireWireBufferv>:
{
   c1554:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1556:	2520      	movs	r5, #32
   c1558:	2314      	movs	r3, #20
{
   c155a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c155c:	6003      	str	r3, [r0, #0]
   c155e:	6085      	str	r5, [r0, #8]
   c1560:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1562:	4906      	ldr	r1, [pc, #24]	; (c157c <_Z17acquireWireBufferv+0x28>)
   c1564:	4628      	mov	r0, r5
   c1566:	f000 f871 	bl	c164c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c156a:	4904      	ldr	r1, [pc, #16]	; (c157c <_Z17acquireWireBufferv+0x28>)
	};
   c156c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c156e:	4628      	mov	r0, r5
   c1570:	f000 f86c 	bl	c164c <_ZnajRKSt9nothrow_t>
	};
   c1574:	60e0      	str	r0, [r4, #12]
}
   c1576:	4620      	mov	r0, r4
   c1578:	bd38      	pop	{r3, r4, r5, pc}
   c157a:	bf00      	nop
   c157c:	000c74b4 	.word	0x000c74b4

000c1580 <_Z19__fetch_global_Wirev>:
{
   c1580:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1582:	4d0e      	ldr	r5, [pc, #56]	; (c15bc <_Z19__fetch_global_Wirev+0x3c>)
   c1584:	7829      	ldrb	r1, [r5, #0]
   c1586:	f3bf 8f5b 	dmb	ish
   c158a:	f011 0401 	ands.w	r4, r1, #1
{
   c158e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1590:	d111      	bne.n	c15b6 <_Z19__fetch_global_Wirev+0x36>
   c1592:	4628      	mov	r0, r5
   c1594:	f7f2 fd94 	bl	b40c0 <__cxa_guard_acquire>
   c1598:	b168      	cbz	r0, c15b6 <_Z19__fetch_global_Wirev+0x36>
   c159a:	a801      	add	r0, sp, #4
   c159c:	f7ff ffda 	bl	c1554 <_Z17acquireWireBufferv>
   c15a0:	aa01      	add	r2, sp, #4
   c15a2:	4621      	mov	r1, r4
   c15a4:	4806      	ldr	r0, [pc, #24]	; (c15c0 <_Z19__fetch_global_Wirev+0x40>)
   c15a6:	f7fd fec5 	bl	bf334 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c15aa:	4628      	mov	r0, r5
   c15ac:	f7f2 fd8d 	bl	b40ca <__cxa_guard_release>
   c15b0:	4804      	ldr	r0, [pc, #16]	; (c15c4 <_Z19__fetch_global_Wirev+0x44>)
   c15b2:	f002 fa27 	bl	c3a04 <atexit>
	return wire;
}
   c15b6:	4802      	ldr	r0, [pc, #8]	; (c15c0 <_Z19__fetch_global_Wirev+0x40>)
   c15b8:	b007      	add	sp, #28
   c15ba:	bd30      	pop	{r4, r5, pc}
   c15bc:	2003e72c 	.word	0x2003e72c
   c15c0:	2003e730 	.word	0x2003e730
   c15c4:	000c1553 	.word	0x000c1553

000c15c8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c15c8:	4770      	bx	lr
	...

000c15cc <_Z20acquireSerial1Bufferv>:
{
   c15cc:	b538      	push	{r3, r4, r5, lr}
   c15ce:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c15d0:	2514      	movs	r5, #20
   c15d2:	462a      	mov	r2, r5
   c15d4:	2100      	movs	r1, #0
   c15d6:	f002 fa63 	bl	c3aa0 <memset>
   c15da:	8025      	strh	r5, [r4, #0]
   c15dc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c15de:	4907      	ldr	r1, [pc, #28]	; (c15fc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c15e0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c15e2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c15e4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c15e6:	f000 f831 	bl	c164c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c15ea:	4904      	ldr	r1, [pc, #16]	; (c15fc <_Z20acquireSerial1Bufferv+0x30>)
    };
   c15ec:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c15ee:	4628      	mov	r0, r5
   c15f0:	f000 f82c 	bl	c164c <_ZnajRKSt9nothrow_t>
    };
   c15f4:	60e0      	str	r0, [r4, #12]
}
   c15f6:	4620      	mov	r0, r4
   c15f8:	bd38      	pop	{r3, r4, r5, pc}
   c15fa:	bf00      	nop
   c15fc:	000c74b4 	.word	0x000c74b4

000c1600 <_Z22__fetch_global_Serial1v>:
{
   c1600:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1602:	4d0e      	ldr	r5, [pc, #56]	; (c163c <_Z22__fetch_global_Serial1v+0x3c>)
   c1604:	7829      	ldrb	r1, [r5, #0]
   c1606:	f3bf 8f5b 	dmb	ish
   c160a:	f011 0401 	ands.w	r4, r1, #1
{
   c160e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1610:	d111      	bne.n	c1636 <_Z22__fetch_global_Serial1v+0x36>
   c1612:	4628      	mov	r0, r5
   c1614:	f7f2 fd54 	bl	b40c0 <__cxa_guard_acquire>
   c1618:	b168      	cbz	r0, c1636 <_Z22__fetch_global_Serial1v+0x36>
   c161a:	a801      	add	r0, sp, #4
   c161c:	f7ff ffd6 	bl	c15cc <_Z20acquireSerial1Bufferv>
   c1620:	aa01      	add	r2, sp, #4
   c1622:	4621      	mov	r1, r4
   c1624:	4806      	ldr	r0, [pc, #24]	; (c1640 <_Z22__fetch_global_Serial1v+0x40>)
   c1626:	f7ff fdd3 	bl	c11d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c162a:	4628      	mov	r0, r5
   c162c:	f7f2 fd4d 	bl	b40ca <__cxa_guard_release>
   c1630:	4804      	ldr	r0, [pc, #16]	; (c1644 <_Z22__fetch_global_Serial1v+0x44>)
   c1632:	f002 f9e7 	bl	c3a04 <atexit>
    return serial1;
}
   c1636:	4802      	ldr	r0, [pc, #8]	; (c1640 <_Z22__fetch_global_Serial1v+0x40>)
   c1638:	b007      	add	sp, #28
   c163a:	bd30      	pop	{r4, r5, pc}
   c163c:	2003e744 	.word	0x2003e744
   c1640:	2003e748 	.word	0x2003e748
   c1644:	000c15c9 	.word	0x000c15c9

000c1648 <_ZnwjRKSt9nothrow_t>:
   c1648:	f7f2 bd25 	b.w	b4096 <_Znwj>

000c164c <_ZnajRKSt9nothrow_t>:
   c164c:	f7f2 bd25 	b.w	b409a <_Znaj>

000c1650 <_ZSt25__throw_bad_function_callv>:
   c1650:	b508      	push	{r3, lr}
   c1652:	f7fc f91f 	bl	bd894 <abort>
	...

000c1658 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1658:	4901      	ldr	r1, [pc, #4]	; (c1660 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c165a:	f000 b8f9 	b.w	c1850 <_ZNKSt9type_infoeqERKS_>
   c165e:	bf00      	nop
   c1660:	000c74d0 	.word	0x000c74d0

000c1664 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1666:	2400      	movs	r4, #0
   c1668:	2310      	movs	r3, #16
   c166a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c166e:	6803      	ldr	r3, [r0, #0]
   c1670:	4615      	mov	r5, r2
   c1672:	699e      	ldr	r6, [r3, #24]
   c1674:	6812      	ldr	r2, [r2, #0]
   c1676:	466b      	mov	r3, sp
   c1678:	e9cd 4400 	strd	r4, r4, [sp]
   c167c:	47b0      	blx	r6
   c167e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c1682:	f003 0306 	and.w	r3, r3, #6
   c1686:	2b06      	cmp	r3, #6
   c1688:	bf03      	ittte	eq
   c168a:	9b00      	ldreq	r3, [sp, #0]
   c168c:	602b      	streq	r3, [r5, #0]
   c168e:	2001      	moveq	r0, #1
   c1690:	4620      	movne	r0, r4
   c1692:	b004      	add	sp, #16
   c1694:	bd70      	pop	{r4, r5, r6, pc}

000c1696 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c1696:	9800      	ldr	r0, [sp, #0]
   c1698:	4290      	cmp	r0, r2
   c169a:	bf14      	ite	ne
   c169c:	2001      	movne	r0, #1
   c169e:	2006      	moveq	r0, #6
   c16a0:	4770      	bx	lr
	...

000c16a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c16a4:	b510      	push	{r4, lr}
   c16a6:	4b03      	ldr	r3, [pc, #12]	; (c16b4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c16a8:	6003      	str	r3, [r0, #0]
   c16aa:	4604      	mov	r4, r0
   c16ac:	f000 f8cd 	bl	c184a <_ZNSt9type_infoD1Ev>
   c16b0:	4620      	mov	r0, r4
   c16b2:	bd10      	pop	{r4, pc}
   c16b4:	000c7510 	.word	0x000c7510

000c16b8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c16b8:	b510      	push	{r4, lr}
   c16ba:	4604      	mov	r4, r0
   c16bc:	f7ff fff2 	bl	c16a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c16c0:	4620      	mov	r0, r4
   c16c2:	2108      	movs	r1, #8
   c16c4:	f7f2 fced 	bl	b40a2 <_ZdlPvj>
   c16c8:	4620      	mov	r0, r4
   c16ca:	bd10      	pop	{r4, pc}

000c16cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c16cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c16d0:	461f      	mov	r7, r3
   c16d2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c16d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c16da:	4598      	cmp	r8, r3
   c16dc:	4606      	mov	r6, r0
   c16de:	4615      	mov	r5, r2
   c16e0:	d107      	bne.n	c16f2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c16e2:	9907      	ldr	r1, [sp, #28]
   c16e4:	f000 f8b4 	bl	c1850 <_ZNKSt9type_infoeqERKS_>
   c16e8:	b118      	cbz	r0, c16f2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c16ea:	7165      	strb	r5, [r4, #5]
   c16ec:	2000      	movs	r0, #0
   c16ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c16f2:	4639      	mov	r1, r7
   c16f4:	4630      	mov	r0, r6
   c16f6:	f000 f8ab 	bl	c1850 <_ZNKSt9type_infoeqERKS_>
   c16fa:	2800      	cmp	r0, #0
   c16fc:	d0f6      	beq.n	c16ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c16fe:	2301      	movs	r3, #1
   c1700:	f8c4 8000 	str.w	r8, [r4]
   c1704:	7125      	strb	r5, [r4, #4]
   c1706:	71a3      	strb	r3, [r4, #6]
   c1708:	e7f0      	b.n	c16ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c170a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c170a:	b538      	push	{r3, r4, r5, lr}
   c170c:	4615      	mov	r5, r2
   c170e:	461c      	mov	r4, r3
   c1710:	f000 f89e 	bl	c1850 <_ZNKSt9type_infoeqERKS_>
   c1714:	b120      	cbz	r0, c1720 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c1716:	2308      	movs	r3, #8
   c1718:	60e3      	str	r3, [r4, #12]
   c171a:	2306      	movs	r3, #6
   c171c:	6025      	str	r5, [r4, #0]
   c171e:	7123      	strb	r3, [r4, #4]
   c1720:	bd38      	pop	{r3, r4, r5, pc}

000c1722 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c1722:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c1724:	4605      	mov	r5, r0
   c1726:	460c      	mov	r4, r1
   c1728:	9201      	str	r2, [sp, #4]
   c172a:	461e      	mov	r6, r3
   c172c:	f000 f890 	bl	c1850 <_ZNKSt9type_infoeqERKS_>
   c1730:	b950      	cbnz	r0, c1748 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1732:	2e03      	cmp	r6, #3
   c1734:	d808      	bhi.n	c1748 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1736:	6823      	ldr	r3, [r4, #0]
   c1738:	9a01      	ldr	r2, [sp, #4]
   c173a:	695b      	ldr	r3, [r3, #20]
   c173c:	4629      	mov	r1, r5
   c173e:	4620      	mov	r0, r4
   c1740:	b002      	add	sp, #8
   c1742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1746:	4718      	bx	r3
   c1748:	b002      	add	sp, #8
   c174a:	bd70      	pop	{r4, r5, r6, pc}

000c174c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c174c:	b510      	push	{r4, lr}
   c174e:	4b03      	ldr	r3, [pc, #12]	; (c175c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1750:	6003      	str	r3, [r0, #0]
   c1752:	4604      	mov	r4, r0
   c1754:	f7ff ffa6 	bl	c16a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1758:	4620      	mov	r0, r4
   c175a:	bd10      	pop	{r4, pc}
   c175c:	000c7570 	.word	0x000c7570

000c1760 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c1760:	b510      	push	{r4, lr}
   c1762:	4604      	mov	r4, r0
   c1764:	f7ff fff2 	bl	c174c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c1768:	4620      	mov	r0, r4
   c176a:	210c      	movs	r1, #12
   c176c:	f7f2 fc99 	bl	b40a2 <_ZdlPvj>
   c1770:	4620      	mov	r0, r4
   c1772:	bd10      	pop	{r4, pc}

000c1774 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c1774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c1776:	9f08      	ldr	r7, [sp, #32]
   c1778:	4297      	cmp	r7, r2
   c177a:	4605      	mov	r5, r0
   c177c:	460e      	mov	r6, r1
   c177e:	4614      	mov	r4, r2
   c1780:	d00a      	beq.n	c1798 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c1782:	68a8      	ldr	r0, [r5, #8]
   c1784:	6802      	ldr	r2, [r0, #0]
   c1786:	9708      	str	r7, [sp, #32]
   c1788:	6a15      	ldr	r5, [r2, #32]
   c178a:	4631      	mov	r1, r6
   c178c:	4622      	mov	r2, r4
   c178e:	46ac      	mov	ip, r5
   c1790:	b003      	add	sp, #12
   c1792:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1796:	4760      	bx	ip
   c1798:	4619      	mov	r1, r3
   c179a:	9301      	str	r3, [sp, #4]
   c179c:	f000 f858 	bl	c1850 <_ZNKSt9type_infoeqERKS_>
   c17a0:	9b01      	ldr	r3, [sp, #4]
   c17a2:	2800      	cmp	r0, #0
   c17a4:	d0ed      	beq.n	c1782 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c17a6:	2006      	movs	r0, #6
   c17a8:	b003      	add	sp, #12
   c17aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c17ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c17ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c17b0:	460d      	mov	r5, r1
   c17b2:	4619      	mov	r1, r3
   c17b4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c17b8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c17bc:	4681      	mov	r9, r0
   c17be:	4617      	mov	r7, r2
   c17c0:	4698      	mov	r8, r3
   c17c2:	f000 f845 	bl	c1850 <_ZNKSt9type_infoeqERKS_>
   c17c6:	b190      	cbz	r0, c17ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c17c8:	2d00      	cmp	r5, #0
   c17ca:	6034      	str	r4, [r6, #0]
   c17cc:	7137      	strb	r7, [r6, #4]
   c17ce:	db09      	blt.n	c17e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c17d0:	1961      	adds	r1, r4, r5
   c17d2:	458a      	cmp	sl, r1
   c17d4:	bf0c      	ite	eq
   c17d6:	2106      	moveq	r1, #6
   c17d8:	2101      	movne	r1, #1
   c17da:	71b1      	strb	r1, [r6, #6]
   c17dc:	2000      	movs	r0, #0
   c17de:	b001      	add	sp, #4
   c17e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c17e4:	3502      	adds	r5, #2
   c17e6:	d1f9      	bne.n	c17dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c17e8:	2301      	movs	r3, #1
   c17ea:	71b3      	strb	r3, [r6, #6]
   c17ec:	e7f6      	b.n	c17dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c17ee:	4554      	cmp	r4, sl
   c17f0:	d106      	bne.n	c1800 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c17f2:	4659      	mov	r1, fp
   c17f4:	4648      	mov	r0, r9
   c17f6:	f000 f82b 	bl	c1850 <_ZNKSt9type_infoeqERKS_>
   c17fa:	b108      	cbz	r0, c1800 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c17fc:	7177      	strb	r7, [r6, #5]
   c17fe:	e7ed      	b.n	c17dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1800:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c1804:	6803      	ldr	r3, [r0, #0]
   c1806:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c180a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c180e:	69dc      	ldr	r4, [r3, #28]
   c1810:	463a      	mov	r2, r7
   c1812:	4643      	mov	r3, r8
   c1814:	4629      	mov	r1, r5
   c1816:	46a4      	mov	ip, r4
   c1818:	b001      	add	sp, #4
   c181a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c181e:	4760      	bx	ip

000c1820 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c1820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1824:	4607      	mov	r7, r0
   c1826:	460c      	mov	r4, r1
   c1828:	4615      	mov	r5, r2
   c182a:	461e      	mov	r6, r3
   c182c:	f7ff ff6d 	bl	c170a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c1830:	b948      	cbnz	r0, c1846 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c1832:	68b8      	ldr	r0, [r7, #8]
   c1834:	6803      	ldr	r3, [r0, #0]
   c1836:	699f      	ldr	r7, [r3, #24]
   c1838:	462a      	mov	r2, r5
   c183a:	4633      	mov	r3, r6
   c183c:	4621      	mov	r1, r4
   c183e:	46bc      	mov	ip, r7
   c1840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1844:	4760      	bx	ip
   c1846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c184a <_ZNSt9type_infoD1Ev>:
   c184a:	4770      	bx	lr

000c184c <_ZNKSt9type_info14__is_pointer_pEv>:
   c184c:	2000      	movs	r0, #0
   c184e:	4770      	bx	lr

000c1850 <_ZNKSt9type_infoeqERKS_>:
   c1850:	4281      	cmp	r1, r0
   c1852:	b508      	push	{r3, lr}
   c1854:	d00e      	beq.n	c1874 <_ZNKSt9type_infoeqERKS_+0x24>
   c1856:	6840      	ldr	r0, [r0, #4]
   c1858:	7803      	ldrb	r3, [r0, #0]
   c185a:	2b2a      	cmp	r3, #42	; 0x2a
   c185c:	d00c      	beq.n	c1878 <_ZNKSt9type_infoeqERKS_+0x28>
   c185e:	6849      	ldr	r1, [r1, #4]
   c1860:	780b      	ldrb	r3, [r1, #0]
   c1862:	2b2a      	cmp	r3, #42	; 0x2a
   c1864:	bf08      	it	eq
   c1866:	3101      	addeq	r1, #1
   c1868:	f002 f976 	bl	c3b58 <strcmp>
   c186c:	fab0 f080 	clz	r0, r0
   c1870:	0940      	lsrs	r0, r0, #5
   c1872:	bd08      	pop	{r3, pc}
   c1874:	2001      	movs	r0, #1
   c1876:	e7fc      	b.n	c1872 <_ZNKSt9type_infoeqERKS_+0x22>
   c1878:	2000      	movs	r0, #0
   c187a:	e7fa      	b.n	c1872 <_ZNKSt9type_infoeqERKS_+0x22>

000c187c <cosf>:
   c187c:	ee10 3a10 	vmov	r3, s0
   c1880:	4a18      	ldr	r2, [pc, #96]	; (c18e4 <cosf+0x68>)
   c1882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c1886:	4293      	cmp	r3, r2
   c1888:	dd1b      	ble.n	c18c2 <cosf+0x46>
   c188a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c188e:	db02      	blt.n	c1896 <cosf+0x1a>
   c1890:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1894:	4770      	bx	lr
   c1896:	b500      	push	{lr}
   c1898:	b083      	sub	sp, #12
   c189a:	4668      	mov	r0, sp
   c189c:	f000 fb12 	bl	c1ec4 <__ieee754_rem_pio2f>
   c18a0:	f000 0003 	and.w	r0, r0, #3
   c18a4:	2801      	cmp	r0, #1
   c18a6:	eddd 0a01 	vldr	s1, [sp, #4]
   c18aa:	ed9d 0a00 	vldr	s0, [sp]
   c18ae:	d00c      	beq.n	c18ca <cosf+0x4e>
   c18b0:	2802      	cmp	r0, #2
   c18b2:	d012      	beq.n	c18da <cosf+0x5e>
   c18b4:	b170      	cbz	r0, c18d4 <cosf+0x58>
   c18b6:	2001      	movs	r0, #1
   c18b8:	f000 fff6 	bl	c28a8 <__kernel_sinf>
   c18bc:	b003      	add	sp, #12
   c18be:	f85d fb04 	ldr.w	pc, [sp], #4
   c18c2:	eddf 0a09 	vldr	s1, [pc, #36]	; c18e8 <cosf+0x6c>
   c18c6:	f000 bc33 	b.w	c2130 <__kernel_cosf>
   c18ca:	f000 ffed 	bl	c28a8 <__kernel_sinf>
   c18ce:	eeb1 0a40 	vneg.f32	s0, s0
   c18d2:	e7f3      	b.n	c18bc <cosf+0x40>
   c18d4:	f000 fc2c 	bl	c2130 <__kernel_cosf>
   c18d8:	e7f0      	b.n	c18bc <cosf+0x40>
   c18da:	f000 fc29 	bl	c2130 <__kernel_cosf>
   c18de:	eeb1 0a40 	vneg.f32	s0, s0
   c18e2:	e7eb      	b.n	c18bc <cosf+0x40>
   c18e4:	3f490fd8 	.word	0x3f490fd8
   c18e8:	00000000 	.word	0x00000000

000c18ec <sinf>:
   c18ec:	ee10 3a10 	vmov	r3, s0
   c18f0:	4a19      	ldr	r2, [pc, #100]	; (c1958 <sinf+0x6c>)
   c18f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c18f6:	4293      	cmp	r3, r2
   c18f8:	dd1c      	ble.n	c1934 <sinf+0x48>
   c18fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c18fe:	db02      	blt.n	c1906 <sinf+0x1a>
   c1900:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1904:	4770      	bx	lr
   c1906:	b500      	push	{lr}
   c1908:	b083      	sub	sp, #12
   c190a:	4668      	mov	r0, sp
   c190c:	f000 fada 	bl	c1ec4 <__ieee754_rem_pio2f>
   c1910:	f000 0003 	and.w	r0, r0, #3
   c1914:	2801      	cmp	r0, #1
   c1916:	eddd 0a01 	vldr	s1, [sp, #4]
   c191a:	ed9d 0a00 	vldr	s0, [sp]
   c191e:	d00e      	beq.n	c193e <sinf+0x52>
   c1920:	2802      	cmp	r0, #2
   c1922:	d013      	beq.n	c194c <sinf+0x60>
   c1924:	b170      	cbz	r0, c1944 <sinf+0x58>
   c1926:	f000 fc03 	bl	c2130 <__kernel_cosf>
   c192a:	eeb1 0a40 	vneg.f32	s0, s0
   c192e:	b003      	add	sp, #12
   c1930:	f85d fb04 	ldr.w	pc, [sp], #4
   c1934:	eddf 0a09 	vldr	s1, [pc, #36]	; c195c <sinf+0x70>
   c1938:	2000      	movs	r0, #0
   c193a:	f000 bfb5 	b.w	c28a8 <__kernel_sinf>
   c193e:	f000 fbf7 	bl	c2130 <__kernel_cosf>
   c1942:	e7f4      	b.n	c192e <sinf+0x42>
   c1944:	2001      	movs	r0, #1
   c1946:	f000 ffaf 	bl	c28a8 <__kernel_sinf>
   c194a:	e7f0      	b.n	c192e <sinf+0x42>
   c194c:	2001      	movs	r0, #1
   c194e:	f000 ffab 	bl	c28a8 <__kernel_sinf>
   c1952:	eeb1 0a40 	vneg.f32	s0, s0
   c1956:	e7ea      	b.n	c192e <sinf+0x42>
   c1958:	3f490fd8 	.word	0x3f490fd8
   c195c:	00000000 	.word	0x00000000

000c1960 <atan2>:
   c1960:	f000 b866 	b.w	c1a30 <__ieee754_atan2>

000c1964 <sqrt>:
   c1964:	b538      	push	{r3, r4, r5, lr}
   c1966:	ed2d 8b02 	vpush	{d8}
   c196a:	ec55 4b10 	vmov	r4, r5, d0
   c196e:	f000 f935 	bl	c1bdc <__ieee754_sqrt>
   c1972:	4b18      	ldr	r3, [pc, #96]	; (c19d4 <sqrt+0x70>)
   c1974:	eeb0 8a40 	vmov.f32	s16, s0
   c1978:	eef0 8a60 	vmov.f32	s17, s1
   c197c:	f993 3000 	ldrsb.w	r3, [r3]
   c1980:	3301      	adds	r3, #1
   c1982:	d00d      	beq.n	c19a0 <sqrt+0x3c>
   c1984:	4622      	mov	r2, r4
   c1986:	462b      	mov	r3, r5
   c1988:	4620      	mov	r0, r4
   c198a:	4629      	mov	r1, r5
   c198c:	f001 ff6e 	bl	c386c <__aeabi_dcmpun>
   c1990:	b930      	cbnz	r0, c19a0 <sqrt+0x3c>
   c1992:	2200      	movs	r2, #0
   c1994:	2300      	movs	r3, #0
   c1996:	4620      	mov	r0, r4
   c1998:	4629      	mov	r1, r5
   c199a:	f001 ff3f 	bl	c381c <__aeabi_dcmplt>
   c199e:	b930      	cbnz	r0, c19ae <sqrt+0x4a>
   c19a0:	eeb0 0a48 	vmov.f32	s0, s16
   c19a4:	eef0 0a68 	vmov.f32	s1, s17
   c19a8:	ecbd 8b02 	vpop	{d8}
   c19ac:	bd38      	pop	{r3, r4, r5, pc}
   c19ae:	f7fb ff81 	bl	bd8b4 <__errno>
   c19b2:	2200      	movs	r2, #0
   c19b4:	2300      	movs	r3, #0
   c19b6:	2121      	movs	r1, #33	; 0x21
   c19b8:	6001      	str	r1, [r0, #0]
   c19ba:	4610      	mov	r0, r2
   c19bc:	4619      	mov	r1, r3
   c19be:	f001 fde5 	bl	c358c <__aeabi_ddiv>
   c19c2:	ec41 0b18 	vmov	d8, r0, r1
   c19c6:	eeb0 0a48 	vmov.f32	s0, s16
   c19ca:	eef0 0a68 	vmov.f32	s1, s17
   c19ce:	ecbd 8b02 	vpop	{d8}
   c19d2:	bd38      	pop	{r3, r4, r5, pc}
   c19d4:	2003db9c 	.word	0x2003db9c

000c19d8 <atan2f>:
   c19d8:	f000 b9cc 	b.w	c1d74 <__ieee754_atan2f>

000c19dc <sqrtf>:
   c19dc:	b508      	push	{r3, lr}
   c19de:	ed2d 8b02 	vpush	{d8}
   c19e2:	eeb0 8a40 	vmov.f32	s16, s0
   c19e6:	f000 fb9f 	bl	c2128 <__ieee754_sqrtf>
   c19ea:	4b0e      	ldr	r3, [pc, #56]	; (c1a24 <sqrtf+0x48>)
   c19ec:	f993 3000 	ldrsb.w	r3, [r3]
   c19f0:	3301      	adds	r3, #1
   c19f2:	d00b      	beq.n	c1a0c <sqrtf+0x30>
   c19f4:	eeb4 8a48 	vcmp.f32	s16, s16
   c19f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c19fc:	d606      	bvs.n	c1a0c <sqrtf+0x30>
   c19fe:	eddf 8a0a 	vldr	s17, [pc, #40]	; c1a28 <sqrtf+0x4c>
   c1a02:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c1a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1a0a:	d402      	bmi.n	c1a12 <sqrtf+0x36>
   c1a0c:	ecbd 8b02 	vpop	{d8}
   c1a10:	bd08      	pop	{r3, pc}
   c1a12:	f7fb ff4f 	bl	bd8b4 <__errno>
   c1a16:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c1a1a:	ecbd 8b02 	vpop	{d8}
   c1a1e:	2321      	movs	r3, #33	; 0x21
   c1a20:	6003      	str	r3, [r0, #0]
   c1a22:	bd08      	pop	{r3, pc}
   c1a24:	2003db9c 	.word	0x2003db9c
	...

000c1a30 <__ieee754_atan2>:
   c1a30:	ec51 0b11 	vmov	r0, r1, d1
   c1a34:	4243      	negs	r3, r0
   c1a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1a3a:	4303      	orrs	r3, r0
   c1a3c:	4e64      	ldr	r6, [pc, #400]	; (c1bd0 <__ieee754_atan2+0x1a0>)
   c1a3e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c1a42:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c1a46:	42b3      	cmp	r3, r6
   c1a48:	ec55 4b10 	vmov	r4, r5, d0
   c1a4c:	d83e      	bhi.n	c1acc <__ieee754_atan2+0x9c>
   c1a4e:	4263      	negs	r3, r4
   c1a50:	4323      	orrs	r3, r4
   c1a52:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c1a56:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c1a5a:	42b3      	cmp	r3, r6
   c1a5c:	46a9      	mov	r9, r5
   c1a5e:	d835      	bhi.n	c1acc <__ieee754_atan2+0x9c>
   c1a60:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c1a64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c1a68:	4303      	orrs	r3, r0
   c1a6a:	d03e      	beq.n	c1aea <__ieee754_atan2+0xba>
   c1a6c:	178f      	asrs	r7, r1, #30
   c1a6e:	f007 0702 	and.w	r7, r7, #2
   c1a72:	ea5a 0304 	orrs.w	r3, sl, r4
   c1a76:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c1a7a:	d02f      	beq.n	c1adc <__ieee754_atan2+0xac>
   c1a7c:	ea5e 0300 	orrs.w	r3, lr, r0
   c1a80:	d037      	beq.n	c1af2 <__ieee754_atan2+0xc2>
   c1a82:	45b6      	cmp	lr, r6
   c1a84:	d044      	beq.n	c1b10 <__ieee754_atan2+0xe0>
   c1a86:	45b2      	cmp	sl, r6
   c1a88:	d033      	beq.n	c1af2 <__ieee754_atan2+0xc2>
   c1a8a:	ebaa 0e0e 	sub.w	lr, sl, lr
   c1a8e:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c1a92:	ea4f 532e 	mov.w	r3, lr, asr #20
   c1a96:	da38      	bge.n	c1b0a <__ieee754_atan2+0xda>
   c1a98:	2900      	cmp	r1, #0
   c1a9a:	da45      	bge.n	c1b28 <__ieee754_atan2+0xf8>
   c1a9c:	333c      	adds	r3, #60	; 0x3c
   c1a9e:	da43      	bge.n	c1b28 <__ieee754_atan2+0xf8>
   c1aa0:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c1b98 <__ieee754_atan2+0x168>
   c1aa4:	2f01      	cmp	r7, #1
   c1aa6:	d05d      	beq.n	c1b64 <__ieee754_atan2+0x134>
   c1aa8:	2f02      	cmp	r7, #2
   c1aaa:	d04a      	beq.n	c1b42 <__ieee754_atan2+0x112>
   c1aac:	b1a7      	cbz	r7, c1ad8 <__ieee754_atan2+0xa8>
   c1aae:	ec51 0b10 	vmov	r0, r1, d0
   c1ab2:	a33b      	add	r3, pc, #236	; (adr r3, c1ba0 <__ieee754_atan2+0x170>)
   c1ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1ab8:	f001 fa86 	bl	c2fc8 <__aeabi_dsub>
   c1abc:	a33a      	add	r3, pc, #232	; (adr r3, c1ba8 <__ieee754_atan2+0x178>)
   c1abe:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1ac2:	f001 fa81 	bl	c2fc8 <__aeabi_dsub>
   c1ac6:	ec41 0b10 	vmov	d0, r0, r1
   c1aca:	e005      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1acc:	4622      	mov	r2, r4
   c1ace:	462b      	mov	r3, r5
   c1ad0:	f001 fa7c 	bl	c2fcc <__adddf3>
   c1ad4:	ec41 0b10 	vmov	d0, r0, r1
   c1ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1adc:	2f02      	cmp	r7, #2
   c1ade:	d00e      	beq.n	c1afe <__ieee754_atan2+0xce>
   c1ae0:	2f03      	cmp	r7, #3
   c1ae2:	d1f9      	bne.n	c1ad8 <__ieee754_atan2+0xa8>
   c1ae4:	ed9f 0b32 	vldr	d0, [pc, #200]	; c1bb0 <__ieee754_atan2+0x180>
   c1ae8:	e7f6      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1aee:	f000 bf23 	b.w	c2938 <atan>
   c1af2:	f1b9 0f00 	cmp.w	r9, #0
   c1af6:	db05      	blt.n	c1b04 <__ieee754_atan2+0xd4>
   c1af8:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c1bb8 <__ieee754_atan2+0x188>
   c1afc:	e7ec      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1afe:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c1ba8 <__ieee754_atan2+0x178>
   c1b02:	e7e9      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b04:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c1bc0 <__ieee754_atan2+0x190>
   c1b08:	e7e6      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b0a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c1bb8 <__ieee754_atan2+0x188>
   c1b0e:	e7c9      	b.n	c1aa4 <__ieee754_atan2+0x74>
   c1b10:	45f2      	cmp	sl, lr
   c1b12:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c1b16:	d02e      	beq.n	c1b76 <__ieee754_atan2+0x146>
   c1b18:	2f02      	cmp	r7, #2
   c1b1a:	d834      	bhi.n	c1b86 <__ieee754_atan2+0x156>
   c1b1c:	4b2d      	ldr	r3, [pc, #180]	; (c1bd4 <__ieee754_atan2+0x1a4>)
   c1b1e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1b22:	ed97 0b00 	vldr	d0, [r7]
   c1b26:	e7d7      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b28:	4602      	mov	r2, r0
   c1b2a:	460b      	mov	r3, r1
   c1b2c:	4620      	mov	r0, r4
   c1b2e:	4629      	mov	r1, r5
   c1b30:	f001 fd2c 	bl	c358c <__aeabi_ddiv>
   c1b34:	ec41 0b10 	vmov	d0, r0, r1
   c1b38:	f001 f89e 	bl	c2c78 <fabs>
   c1b3c:	f000 fefc 	bl	c2938 <atan>
   c1b40:	e7b0      	b.n	c1aa4 <__ieee754_atan2+0x74>
   c1b42:	a317      	add	r3, pc, #92	; (adr r3, c1ba0 <__ieee754_atan2+0x170>)
   c1b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1b48:	ec51 0b10 	vmov	r0, r1, d0
   c1b4c:	f001 fa3c 	bl	c2fc8 <__aeabi_dsub>
   c1b50:	4602      	mov	r2, r0
   c1b52:	460b      	mov	r3, r1
   c1b54:	a114      	add	r1, pc, #80	; (adr r1, c1ba8 <__ieee754_atan2+0x178>)
   c1b56:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1b5a:	f001 fa35 	bl	c2fc8 <__aeabi_dsub>
   c1b5e:	ec41 0b10 	vmov	d0, r0, r1
   c1b62:	e7b9      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b64:	ee10 1a90 	vmov	r1, s1
   c1b68:	ec53 2b10 	vmov	r2, r3, d0
   c1b6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1b70:	ec43 2b10 	vmov	d0, r2, r3
   c1b74:	e7b0      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b76:	2f02      	cmp	r7, #2
   c1b78:	d808      	bhi.n	c1b8c <__ieee754_atan2+0x15c>
   c1b7a:	4b17      	ldr	r3, [pc, #92]	; (c1bd8 <__ieee754_atan2+0x1a8>)
   c1b7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1b80:	ed97 0b00 	vldr	d0, [r7]
   c1b84:	e7a8      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b86:	ed9f 0b04 	vldr	d0, [pc, #16]	; c1b98 <__ieee754_atan2+0x168>
   c1b8a:	e7a5      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b8c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c1bc8 <__ieee754_atan2+0x198>
   c1b90:	e7a2      	b.n	c1ad8 <__ieee754_atan2+0xa8>
   c1b92:	bf00      	nop
   c1b94:	f3af 8000 	nop.w
	...
   c1ba0:	33145c07 	.word	0x33145c07
   c1ba4:	3ca1a626 	.word	0x3ca1a626
   c1ba8:	54442d18 	.word	0x54442d18
   c1bac:	400921fb 	.word	0x400921fb
   c1bb0:	54442d18 	.word	0x54442d18
   c1bb4:	c00921fb 	.word	0xc00921fb
   c1bb8:	54442d18 	.word	0x54442d18
   c1bbc:	3ff921fb 	.word	0x3ff921fb
   c1bc0:	54442d18 	.word	0x54442d18
   c1bc4:	bff921fb 	.word	0xbff921fb
   c1bc8:	54442d18 	.word	0x54442d18
   c1bcc:	3fe921fb 	.word	0x3fe921fb
   c1bd0:	7ff00000 	.word	0x7ff00000
   c1bd4:	000c75c8 	.word	0x000c75c8
   c1bd8:	000c75b0 	.word	0x000c75b0

000c1bdc <__ieee754_sqrt>:
   c1bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1be0:	4a63      	ldr	r2, [pc, #396]	; (c1d70 <__ieee754_sqrt+0x194>)
   c1be2:	ec55 4b10 	vmov	r4, r5, d0
   c1be6:	43aa      	bics	r2, r5
   c1be8:	f000 809f 	beq.w	c1d2a <__ieee754_sqrt+0x14e>
   c1bec:	2d00      	cmp	r5, #0
   c1bee:	ee10 ca10 	vmov	ip, s0
   c1bf2:	462b      	mov	r3, r5
   c1bf4:	dd54      	ble.n	c1ca0 <__ieee754_sqrt+0xc4>
   c1bf6:	1529      	asrs	r1, r5, #20
   c1bf8:	d063      	beq.n	c1cc2 <__ieee754_sqrt+0xe6>
   c1bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c1bfe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c1c02:	07c9      	lsls	r1, r1, #31
   c1c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1c08:	d404      	bmi.n	c1c14 <__ieee754_sqrt+0x38>
   c1c0a:	005b      	lsls	r3, r3, #1
   c1c0c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1c10:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c14:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c1c18:	2600      	movs	r6, #0
   c1c1a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c1c1e:	107f      	asrs	r7, r7, #1
   c1c20:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c24:	f04f 0e16 	mov.w	lr, #22
   c1c28:	4634      	mov	r4, r6
   c1c2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c1c2e:	18a1      	adds	r1, r4, r2
   c1c30:	4299      	cmp	r1, r3
   c1c32:	dc02      	bgt.n	c1c3a <__ieee754_sqrt+0x5e>
   c1c34:	1a5b      	subs	r3, r3, r1
   c1c36:	188c      	adds	r4, r1, r2
   c1c38:	4416      	add	r6, r2
   c1c3a:	005b      	lsls	r3, r3, #1
   c1c3c:	f1be 0e01 	subs.w	lr, lr, #1
   c1c40:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1c44:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1c48:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c4c:	d1ef      	bne.n	c1c2e <__ieee754_sqrt+0x52>
   c1c4e:	4675      	mov	r5, lr
   c1c50:	2020      	movs	r0, #32
   c1c52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c1c56:	e00a      	b.n	c1c6e <__ieee754_sqrt+0x92>
   c1c58:	d044      	beq.n	c1ce4 <__ieee754_sqrt+0x108>
   c1c5a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c1c5e:	3801      	subs	r0, #1
   c1c60:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c1c64:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1c68:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1c6c:	d043      	beq.n	c1cf6 <__ieee754_sqrt+0x11a>
   c1c6e:	42a3      	cmp	r3, r4
   c1c70:	eb02 010e 	add.w	r1, r2, lr
   c1c74:	ddf0      	ble.n	c1c58 <__ieee754_sqrt+0x7c>
   c1c76:	2900      	cmp	r1, #0
   c1c78:	eb01 0e02 	add.w	lr, r1, r2
   c1c7c:	db0a      	blt.n	c1c94 <__ieee754_sqrt+0xb8>
   c1c7e:	46a0      	mov	r8, r4
   c1c80:	1b1b      	subs	r3, r3, r4
   c1c82:	4561      	cmp	r1, ip
   c1c84:	bf88      	it	hi
   c1c86:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c1c8a:	ebac 0c01 	sub.w	ip, ip, r1
   c1c8e:	4415      	add	r5, r2
   c1c90:	4644      	mov	r4, r8
   c1c92:	e7e2      	b.n	c1c5a <__ieee754_sqrt+0x7e>
   c1c94:	f1be 0f00 	cmp.w	lr, #0
   c1c98:	dbf1      	blt.n	c1c7e <__ieee754_sqrt+0xa2>
   c1c9a:	f104 0801 	add.w	r8, r4, #1
   c1c9e:	e7ef      	b.n	c1c80 <__ieee754_sqrt+0xa4>
   c1ca0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c1ca4:	4322      	orrs	r2, r4
   c1ca6:	d038      	beq.n	c1d1a <__ieee754_sqrt+0x13e>
   c1ca8:	2d00      	cmp	r5, #0
   c1caa:	d14e      	bne.n	c1d4a <__ieee754_sqrt+0x16e>
   c1cac:	4629      	mov	r1, r5
   c1cae:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c1cb2:	3915      	subs	r1, #21
   c1cb4:	4613      	mov	r3, r2
   c1cb6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c1cba:	2a00      	cmp	r2, #0
   c1cbc:	d0f7      	beq.n	c1cae <__ieee754_sqrt+0xd2>
   c1cbe:	02d6      	lsls	r6, r2, #11
   c1cc0:	d450      	bmi.n	c1d64 <__ieee754_sqrt+0x188>
   c1cc2:	2000      	movs	r0, #0
   c1cc4:	005b      	lsls	r3, r3, #1
   c1cc6:	02dd      	lsls	r5, r3, #11
   c1cc8:	4604      	mov	r4, r0
   c1cca:	f100 0001 	add.w	r0, r0, #1
   c1cce:	d5f9      	bpl.n	c1cc4 <__ieee754_sqrt+0xe8>
   c1cd0:	461a      	mov	r2, r3
   c1cd2:	4663      	mov	r3, ip
   c1cd4:	fa0c fc00 	lsl.w	ip, ip, r0
   c1cd8:	f1c0 0020 	rsb	r0, r0, #32
   c1cdc:	40c3      	lsrs	r3, r0
   c1cde:	1b09      	subs	r1, r1, r4
   c1ce0:	4313      	orrs	r3, r2
   c1ce2:	e78a      	b.n	c1bfa <__ieee754_sqrt+0x1e>
   c1ce4:	4561      	cmp	r1, ip
   c1ce6:	d8b8      	bhi.n	c1c5a <__ieee754_sqrt+0x7e>
   c1ce8:	2900      	cmp	r1, #0
   c1cea:	eb01 0e02 	add.w	lr, r1, r2
   c1cee:	dbd1      	blt.n	c1c94 <__ieee754_sqrt+0xb8>
   c1cf0:	4698      	mov	r8, r3
   c1cf2:	2300      	movs	r3, #0
   c1cf4:	e7c9      	b.n	c1c8a <__ieee754_sqrt+0xae>
   c1cf6:	ea53 030c 	orrs.w	r3, r3, ip
   c1cfa:	d110      	bne.n	c1d1e <__ieee754_sqrt+0x142>
   c1cfc:	0868      	lsrs	r0, r5, #1
   c1cfe:	1071      	asrs	r1, r6, #1
   c1d00:	07f3      	lsls	r3, r6, #31
   c1d02:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c1d06:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c1d0a:	bf48      	it	mi
   c1d0c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c1d10:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c1d14:	4602      	mov	r2, r0
   c1d16:	ec43 2b10 	vmov	d0, r2, r3
   c1d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1d1e:	1c6a      	adds	r2, r5, #1
   c1d20:	bf16      	itet	ne
   c1d22:	1c68      	addne	r0, r5, #1
   c1d24:	3601      	addeq	r6, #1
   c1d26:	0840      	lsrne	r0, r0, #1
   c1d28:	e7e9      	b.n	c1cfe <__ieee754_sqrt+0x122>
   c1d2a:	ee10 2a10 	vmov	r2, s0
   c1d2e:	ee10 0a10 	vmov	r0, s0
   c1d32:	462b      	mov	r3, r5
   c1d34:	4629      	mov	r1, r5
   c1d36:	f001 faff 	bl	c3338 <__aeabi_dmul>
   c1d3a:	4622      	mov	r2, r4
   c1d3c:	462b      	mov	r3, r5
   c1d3e:	f001 f945 	bl	c2fcc <__adddf3>
   c1d42:	ec41 0b10 	vmov	d0, r0, r1
   c1d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1d4a:	ee10 2a10 	vmov	r2, s0
   c1d4e:	4620      	mov	r0, r4
   c1d50:	4629      	mov	r1, r5
   c1d52:	f001 f939 	bl	c2fc8 <__aeabi_dsub>
   c1d56:	4602      	mov	r2, r0
   c1d58:	460b      	mov	r3, r1
   c1d5a:	f001 fc17 	bl	c358c <__aeabi_ddiv>
   c1d5e:	ec41 0b10 	vmov	d0, r0, r1
   c1d62:	e7da      	b.n	c1d1a <__ieee754_sqrt+0x13e>
   c1d64:	4663      	mov	r3, ip
   c1d66:	2020      	movs	r0, #32
   c1d68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c1d6c:	e7b6      	b.n	c1cdc <__ieee754_sqrt+0x100>
   c1d6e:	bf00      	nop
   c1d70:	7ff00000 	.word	0x7ff00000

000c1d74 <__ieee754_atan2f>:
   c1d74:	b510      	push	{r4, lr}
   c1d76:	b082      	sub	sp, #8
   c1d78:	edcd 0a01 	vstr	s1, [sp, #4]
   c1d7c:	9b01      	ldr	r3, [sp, #4]
   c1d7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c1d82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c1d86:	eef0 7a40 	vmov.f32	s15, s0
   c1d8a:	dc30      	bgt.n	c1dee <__ieee754_atan2f+0x7a>
   c1d8c:	ee10 0a10 	vmov	r0, s0
   c1d90:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c1d94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1d98:	dc29      	bgt.n	c1dee <__ieee754_atan2f+0x7a>
   c1d9a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c1d9e:	d042      	beq.n	c1e26 <__ieee754_atan2f+0xb2>
   c1da0:	179c      	asrs	r4, r3, #30
   c1da2:	f004 0402 	and.w	r4, r4, #2
   c1da6:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c1daa:	b331      	cbz	r1, c1dfa <__ieee754_atan2f+0x86>
   c1dac:	b37a      	cbz	r2, c1e0e <__ieee754_atan2f+0x9a>
   c1dae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c1db2:	d040      	beq.n	c1e36 <__ieee754_atan2f+0xc2>
   c1db4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1db8:	d029      	beq.n	c1e0e <__ieee754_atan2f+0x9a>
   c1dba:	1a8a      	subs	r2, r1, r2
   c1dbc:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c1dc0:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c1dc4:	da34      	bge.n	c1e30 <__ieee754_atan2f+0xbc>
   c1dc6:	2b00      	cmp	r3, #0
   c1dc8:	da42      	bge.n	c1e50 <__ieee754_atan2f+0xdc>
   c1dca:	313c      	adds	r1, #60	; 0x3c
   c1dcc:	da40      	bge.n	c1e50 <__ieee754_atan2f+0xdc>
   c1dce:	ed9f 0a34 	vldr	s0, [pc, #208]	; c1ea0 <__ieee754_atan2f+0x12c>
   c1dd2:	2c01      	cmp	r4, #1
   c1dd4:	d04e      	beq.n	c1e74 <__ieee754_atan2f+0x100>
   c1dd6:	2c02      	cmp	r4, #2
   c1dd8:	d043      	beq.n	c1e62 <__ieee754_atan2f+0xee>
   c1dda:	b164      	cbz	r4, c1df6 <__ieee754_atan2f+0x82>
   c1ddc:	ed9f 7a31 	vldr	s14, [pc, #196]	; c1ea4 <__ieee754_atan2f+0x130>
   c1de0:	eddf 7a31 	vldr	s15, [pc, #196]	; c1ea8 <__ieee754_atan2f+0x134>
   c1de4:	ee30 0a07 	vadd.f32	s0, s0, s14
   c1de8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c1dec:	e003      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1dee:	ed9d 7a01 	vldr	s14, [sp, #4]
   c1df2:	ee37 0a27 	vadd.f32	s0, s14, s15
   c1df6:	b002      	add	sp, #8
   c1df8:	bd10      	pop	{r4, pc}
   c1dfa:	2c02      	cmp	r4, #2
   c1dfc:	d010      	beq.n	c1e20 <__ieee754_atan2f+0xac>
   c1dfe:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c1eac <__ieee754_atan2f+0x138>
   c1e02:	2c03      	cmp	r4, #3
   c1e04:	bf18      	it	ne
   c1e06:	eeb0 0a67 	vmovne.f32	s0, s15
   c1e0a:	b002      	add	sp, #8
   c1e0c:	bd10      	pop	{r4, pc}
   c1e0e:	ed9f 0a28 	vldr	s0, [pc, #160]	; c1eb0 <__ieee754_atan2f+0x13c>
   c1e12:	eddf 7a28 	vldr	s15, [pc, #160]	; c1eb4 <__ieee754_atan2f+0x140>
   c1e16:	2800      	cmp	r0, #0
   c1e18:	bfb8      	it	lt
   c1e1a:	eeb0 0a67 	vmovlt.f32	s0, s15
   c1e1e:	e7ea      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e20:	ed9f 0a21 	vldr	s0, [pc, #132]	; c1ea8 <__ieee754_atan2f+0x134>
   c1e24:	e7e7      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e26:	b002      	add	sp, #8
   c1e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1e2c:	f000 bf2e 	b.w	c2c8c <atanf>
   c1e30:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c1eb0 <__ieee754_atan2f+0x13c>
   c1e34:	e7cd      	b.n	c1dd2 <__ieee754_atan2f+0x5e>
   c1e36:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1e3a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c1e3e:	d020      	beq.n	c1e82 <__ieee754_atan2f+0x10e>
   c1e40:	2c02      	cmp	r4, #2
   c1e42:	d826      	bhi.n	c1e92 <__ieee754_atan2f+0x11e>
   c1e44:	4b1c      	ldr	r3, [pc, #112]	; (c1eb8 <__ieee754_atan2f+0x144>)
   c1e46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c1e4a:	ed94 0a00 	vldr	s0, [r4]
   c1e4e:	e7d2      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e50:	ed9d 7a01 	vldr	s14, [sp, #4]
   c1e54:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c1e58:	f000 fff2 	bl	c2e40 <fabsf>
   c1e5c:	f000 ff16 	bl	c2c8c <atanf>
   c1e60:	e7b7      	b.n	c1dd2 <__ieee754_atan2f+0x5e>
   c1e62:	ed9f 7a10 	vldr	s14, [pc, #64]	; c1ea4 <__ieee754_atan2f+0x130>
   c1e66:	eddf 7a10 	vldr	s15, [pc, #64]	; c1ea8 <__ieee754_atan2f+0x134>
   c1e6a:	ee30 0a07 	vadd.f32	s0, s0, s14
   c1e6e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c1e72:	e7c0      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e74:	ee10 3a10 	vmov	r3, s0
   c1e78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c1e7c:	ee00 3a10 	vmov	s0, r3
   c1e80:	e7b9      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e82:	2c02      	cmp	r4, #2
   c1e84:	d808      	bhi.n	c1e98 <__ieee754_atan2f+0x124>
   c1e86:	4b0d      	ldr	r3, [pc, #52]	; (c1ebc <__ieee754_atan2f+0x148>)
   c1e88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c1e8c:	ed94 0a00 	vldr	s0, [r4]
   c1e90:	e7b1      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e92:	ed9f 0a03 	vldr	s0, [pc, #12]	; c1ea0 <__ieee754_atan2f+0x12c>
   c1e96:	e7ae      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e98:	ed9f 0a09 	vldr	s0, [pc, #36]	; c1ec0 <__ieee754_atan2f+0x14c>
   c1e9c:	e7ab      	b.n	c1df6 <__ieee754_atan2f+0x82>
   c1e9e:	bf00      	nop
   c1ea0:	00000000 	.word	0x00000000
   c1ea4:	33bbbd2e 	.word	0x33bbbd2e
   c1ea8:	40490fdb 	.word	0x40490fdb
   c1eac:	c0490fdb 	.word	0xc0490fdb
   c1eb0:	3fc90fdb 	.word	0x3fc90fdb
   c1eb4:	bfc90fdb 	.word	0xbfc90fdb
   c1eb8:	000c75ec 	.word	0x000c75ec
   c1ebc:	000c75e0 	.word	0x000c75e0
   c1ec0:	3f490fdb 	.word	0x3f490fdb

000c1ec4 <__ieee754_rem_pio2f>:
   c1ec4:	b570      	push	{r4, r5, r6, lr}
   c1ec6:	ee10 3a10 	vmov	r3, s0
   c1eca:	4a89      	ldr	r2, [pc, #548]	; (c20f0 <__ieee754_rem_pio2f+0x22c>)
   c1ecc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c1ed0:	4294      	cmp	r4, r2
   c1ed2:	b086      	sub	sp, #24
   c1ed4:	4605      	mov	r5, r0
   c1ed6:	dd70      	ble.n	c1fba <__ieee754_rem_pio2f+0xf6>
   c1ed8:	4a86      	ldr	r2, [pc, #536]	; (c20f4 <__ieee754_rem_pio2f+0x230>)
   c1eda:	4294      	cmp	r4, r2
   c1edc:	ee10 6a10 	vmov	r6, s0
   c1ee0:	dc22      	bgt.n	c1f28 <__ieee754_rem_pio2f+0x64>
   c1ee2:	2b00      	cmp	r3, #0
   c1ee4:	eddf 7a84 	vldr	s15, [pc, #528]	; c20f8 <__ieee754_rem_pio2f+0x234>
   c1ee8:	4a84      	ldr	r2, [pc, #528]	; (c20fc <__ieee754_rem_pio2f+0x238>)
   c1eea:	f024 040f 	bic.w	r4, r4, #15
   c1eee:	eeb0 7a40 	vmov.f32	s14, s0
   c1ef2:	f340 80e4 	ble.w	c20be <__ieee754_rem_pio2f+0x1fa>
   c1ef6:	4294      	cmp	r4, r2
   c1ef8:	ee70 7a67 	vsub.f32	s15, s0, s15
   c1efc:	bf09      	itett	eq
   c1efe:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2100 <__ieee754_rem_pio2f+0x23c>
   c1f02:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2104 <__ieee754_rem_pio2f+0x240>
   c1f06:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2108 <__ieee754_rem_pio2f+0x244>
   c1f0a:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c1f0e:	2001      	movs	r0, #1
   c1f10:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c1f14:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c1f18:	edc5 6a00 	vstr	s13, [r5]
   c1f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1f20:	edc5 7a01 	vstr	s15, [r5, #4]
   c1f24:	b006      	add	sp, #24
   c1f26:	bd70      	pop	{r4, r5, r6, pc}
   c1f28:	4a78      	ldr	r2, [pc, #480]	; (c210c <__ieee754_rem_pio2f+0x248>)
   c1f2a:	4294      	cmp	r4, r2
   c1f2c:	dd54      	ble.n	c1fd8 <__ieee754_rem_pio2f+0x114>
   c1f2e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c1f32:	da49      	bge.n	c1fc8 <__ieee754_rem_pio2f+0x104>
   c1f34:	15e2      	asrs	r2, r4, #23
   c1f36:	3a86      	subs	r2, #134	; 0x86
   c1f38:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c1f3c:	ee07 3a90 	vmov	s15, r3
   c1f40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c1f44:	eddf 6a72 	vldr	s13, [pc, #456]	; c2110 <__ieee754_rem_pio2f+0x24c>
   c1f48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c1f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1f50:	ed8d 7a03 	vstr	s14, [sp, #12]
   c1f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c1f58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c1f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c1f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1f64:	ed8d 7a04 	vstr	s14, [sp, #16]
   c1f68:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c1f6c:	eef5 7a40 	vcmp.f32	s15, #0.0
   c1f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1f74:	edcd 7a05 	vstr	s15, [sp, #20]
   c1f78:	f040 8090 	bne.w	c209c <__ieee754_rem_pio2f+0x1d8>
   c1f7c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c1f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1f84:	bf14      	ite	ne
   c1f86:	2302      	movne	r3, #2
   c1f88:	2301      	moveq	r3, #1
   c1f8a:	4962      	ldr	r1, [pc, #392]	; (c2114 <__ieee754_rem_pio2f+0x250>)
   c1f8c:	9101      	str	r1, [sp, #4]
   c1f8e:	2102      	movs	r1, #2
   c1f90:	9100      	str	r1, [sp, #0]
   c1f92:	a803      	add	r0, sp, #12
   c1f94:	4629      	mov	r1, r5
   c1f96:	f000 f94d 	bl	c2234 <__kernel_rem_pio2f>
   c1f9a:	2e00      	cmp	r6, #0
   c1f9c:	dac2      	bge.n	c1f24 <__ieee754_rem_pio2f+0x60>
   c1f9e:	ed95 7a00 	vldr	s14, [r5]
   c1fa2:	edd5 7a01 	vldr	s15, [r5, #4]
   c1fa6:	eeb1 7a47 	vneg.f32	s14, s14
   c1faa:	eef1 7a67 	vneg.f32	s15, s15
   c1fae:	ed85 7a00 	vstr	s14, [r5]
   c1fb2:	edc5 7a01 	vstr	s15, [r5, #4]
   c1fb6:	4240      	negs	r0, r0
   c1fb8:	e7b4      	b.n	c1f24 <__ieee754_rem_pio2f+0x60>
   c1fba:	2200      	movs	r2, #0
   c1fbc:	ed85 0a00 	vstr	s0, [r5]
   c1fc0:	6042      	str	r2, [r0, #4]
   c1fc2:	2000      	movs	r0, #0
   c1fc4:	b006      	add	sp, #24
   c1fc6:	bd70      	pop	{r4, r5, r6, pc}
   c1fc8:	ee70 7a40 	vsub.f32	s15, s0, s0
   c1fcc:	2000      	movs	r0, #0
   c1fce:	edc5 7a01 	vstr	s15, [r5, #4]
   c1fd2:	edc5 7a00 	vstr	s15, [r5]
   c1fd6:	e7a5      	b.n	c1f24 <__ieee754_rem_pio2f+0x60>
   c1fd8:	f000 ff32 	bl	c2e40 <fabsf>
   c1fdc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2118 <__ieee754_rem_pio2f+0x254>
   c1fe0:	ed9f 6a45 	vldr	s12, [pc, #276]	; c20f8 <__ieee754_rem_pio2f+0x234>
   c1fe4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c1fe8:	eee0 7a07 	vfma.f32	s15, s0, s14
   c1fec:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2104 <__ieee754_rem_pio2f+0x240>
   c1ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c1ff4:	ee17 0a90 	vmov	r0, s15
   c1ff8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c1ffc:	281f      	cmp	r0, #31
   c1ffe:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2002:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2006:	eeb1 6a66 	vneg.f32	s12, s13
   c200a:	dc1e      	bgt.n	c204a <__ieee754_rem_pio2f+0x186>
   c200c:	4a43      	ldr	r2, [pc, #268]	; (c211c <__ieee754_rem_pio2f+0x258>)
   c200e:	1e41      	subs	r1, r0, #1
   c2010:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2014:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2018:	4293      	cmp	r3, r2
   c201a:	d016      	beq.n	c204a <__ieee754_rem_pio2f+0x186>
   c201c:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2020:	ed85 7a00 	vstr	s14, [r5]
   c2024:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2028:	2e00      	cmp	r6, #0
   c202a:	ee30 0a67 	vsub.f32	s0, s0, s15
   c202e:	ed85 0a01 	vstr	s0, [r5, #4]
   c2032:	f6bf af77 	bge.w	c1f24 <__ieee754_rem_pio2f+0x60>
   c2036:	eeb1 7a47 	vneg.f32	s14, s14
   c203a:	eeb1 0a40 	vneg.f32	s0, s0
   c203e:	ed85 7a00 	vstr	s14, [r5]
   c2042:	ed85 0a01 	vstr	s0, [r5, #4]
   c2046:	4240      	negs	r0, r0
   c2048:	e76c      	b.n	c1f24 <__ieee754_rem_pio2f+0x60>
   c204a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c204e:	15e2      	asrs	r2, r4, #23
   c2050:	ee17 3a10 	vmov	r3, s14
   c2054:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2058:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c205c:	2c08      	cmp	r4, #8
   c205e:	dddf      	ble.n	c2020 <__ieee754_rem_pio2f+0x15c>
   c2060:	eddf 7a27 	vldr	s15, [pc, #156]	; c2100 <__ieee754_rem_pio2f+0x23c>
   c2064:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2108 <__ieee754_rem_pio2f+0x244>
   c2068:	eef0 5a40 	vmov.f32	s11, s0
   c206c:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2070:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2074:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2078:	eef0 7a40 	vmov.f32	s15, s0
   c207c:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2080:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2084:	ee17 3a10 	vmov	r3, s14
   c2088:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c208c:	1ad2      	subs	r2, r2, r3
   c208e:	2a19      	cmp	r2, #25
   c2090:	dc06      	bgt.n	c20a0 <__ieee754_rem_pio2f+0x1dc>
   c2092:	eeb0 0a65 	vmov.f32	s0, s11
   c2096:	ed85 7a00 	vstr	s14, [r5]
   c209a:	e7c3      	b.n	c2024 <__ieee754_rem_pio2f+0x160>
   c209c:	2303      	movs	r3, #3
   c209e:	e774      	b.n	c1f8a <__ieee754_rem_pio2f+0xc6>
   c20a0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2120 <__ieee754_rem_pio2f+0x25c>
   c20a4:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2124 <__ieee754_rem_pio2f+0x260>
   c20a8:	eeb0 0a65 	vmov.f32	s0, s11
   c20ac:	eea6 0a07 	vfma.f32	s0, s12, s14
   c20b0:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c20b4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c20b8:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c20bc:	e7ae      	b.n	c201c <__ieee754_rem_pio2f+0x158>
   c20be:	4294      	cmp	r4, r2
   c20c0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c20c4:	bf09      	itett	eq
   c20c6:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2100 <__ieee754_rem_pio2f+0x23c>
   c20ca:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2104 <__ieee754_rem_pio2f+0x240>
   c20ce:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2108 <__ieee754_rem_pio2f+0x244>
   c20d2:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c20d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c20da:	ee77 6a87 	vadd.f32	s13, s15, s14
   c20de:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c20e2:	edc5 6a00 	vstr	s13, [r5]
   c20e6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c20ea:	edc5 7a01 	vstr	s15, [r5, #4]
   c20ee:	e719      	b.n	c1f24 <__ieee754_rem_pio2f+0x60>
   c20f0:	3f490fd8 	.word	0x3f490fd8
   c20f4:	4016cbe3 	.word	0x4016cbe3
   c20f8:	3fc90f80 	.word	0x3fc90f80
   c20fc:	3fc90fd0 	.word	0x3fc90fd0
   c2100:	37354400 	.word	0x37354400
   c2104:	37354443 	.word	0x37354443
   c2108:	2e85a308 	.word	0x2e85a308
   c210c:	43490f80 	.word	0x43490f80
   c2110:	43800000 	.word	0x43800000
   c2114:	000c7678 	.word	0x000c7678
   c2118:	3f22f984 	.word	0x3f22f984
   c211c:	000c75f8 	.word	0x000c75f8
   c2120:	2e85a300 	.word	0x2e85a300
   c2124:	248d3132 	.word	0x248d3132

000c2128 <__ieee754_sqrtf>:
   c2128:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c212c:	4770      	bx	lr
   c212e:	bf00      	nop

000c2130 <__kernel_cosf>:
   c2130:	ee10 3a10 	vmov	r3, s0
   c2134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2138:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c213c:	da2c      	bge.n	c2198 <__kernel_cosf+0x68>
   c213e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2142:	ee17 3a90 	vmov	r3, s15
   c2146:	2b00      	cmp	r3, #0
   c2148:	d060      	beq.n	c220c <__kernel_cosf+0xdc>
   c214a:	ee20 7a00 	vmul.f32	s14, s0, s0
   c214e:	eddf 7a31 	vldr	s15, [pc, #196]	; c2214 <__kernel_cosf+0xe4>
   c2152:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2218 <__kernel_cosf+0xe8>
   c2156:	eddf 5a31 	vldr	s11, [pc, #196]	; c221c <__kernel_cosf+0xec>
   c215a:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2220 <__kernel_cosf+0xf0>
   c215e:	eddf 6a31 	vldr	s13, [pc, #196]	; c2224 <__kernel_cosf+0xf4>
   c2162:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2166:	eddf 7a30 	vldr	s15, [pc, #192]	; c2228 <__kernel_cosf+0xf8>
   c216a:	eee7 5a05 	vfma.f32	s11, s14, s10
   c216e:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2172:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2176:	eee7 6a27 	vfma.f32	s13, s14, s15
   c217a:	ee67 6a26 	vmul.f32	s13, s14, s13
   c217e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2182:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2186:	eee7 0a26 	vfma.f32	s1, s14, s13
   c218a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c218e:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2192:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2196:	4770      	bx	lr
   c2198:	ee20 7a00 	vmul.f32	s14, s0, s0
   c219c:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2214 <__kernel_cosf+0xe4>
   c21a0:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2218 <__kernel_cosf+0xe8>
   c21a4:	eddf 5a1d 	vldr	s11, [pc, #116]	; c221c <__kernel_cosf+0xec>
   c21a8:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2220 <__kernel_cosf+0xf0>
   c21ac:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2224 <__kernel_cosf+0xf4>
   c21b0:	4a1e      	ldr	r2, [pc, #120]	; (c222c <__kernel_cosf+0xfc>)
   c21b2:	eea7 5a27 	vfma.f32	s10, s14, s15
   c21b6:	4293      	cmp	r3, r2
   c21b8:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2228 <__kernel_cosf+0xf8>
   c21bc:	eee5 5a07 	vfma.f32	s11, s10, s14
   c21c0:	eea5 6a87 	vfma.f32	s12, s11, s14
   c21c4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c21c8:	eee7 6a87 	vfma.f32	s13, s15, s14
   c21cc:	ee66 6a87 	vmul.f32	s13, s13, s14
   c21d0:	ddd5      	ble.n	c217e <__kernel_cosf+0x4e>
   c21d2:	4a17      	ldr	r2, [pc, #92]	; (c2230 <__kernel_cosf+0x100>)
   c21d4:	4293      	cmp	r3, r2
   c21d6:	dc14      	bgt.n	c2202 <__kernel_cosf+0xd2>
   c21d8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c21dc:	ee07 3a90 	vmov	s15, r3
   c21e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c21e4:	ee36 6a67 	vsub.f32	s12, s12, s15
   c21e8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c21ec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c21f0:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c21f4:	eee7 0a26 	vfma.f32	s1, s14, s13
   c21f8:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c21fc:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2200:	4770      	bx	lr
   c2202:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2206:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c220a:	e7ed      	b.n	c21e8 <__kernel_cosf+0xb8>
   c220c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2210:	4770      	bx	lr
   c2212:	bf00      	nop
   c2214:	ad47d74e 	.word	0xad47d74e
   c2218:	310f74f6 	.word	0x310f74f6
   c221c:	b493f27c 	.word	0xb493f27c
   c2220:	37d00d01 	.word	0x37d00d01
   c2224:	3d2aaaab 	.word	0x3d2aaaab
   c2228:	bab60b61 	.word	0xbab60b61
   c222c:	3e999999 	.word	0x3e999999
   c2230:	3f480000 	.word	0x3f480000

000c2234 <__kernel_rem_pio2f>:
   c2234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2238:	ed2d 8b04 	vpush	{d8-d9}
   c223c:	b0db      	sub	sp, #364	; 0x16c
   c223e:	461c      	mov	r4, r3
   c2240:	9303      	str	r3, [sp, #12]
   c2242:	9106      	str	r1, [sp, #24]
   c2244:	4ba3      	ldr	r3, [pc, #652]	; (c24d4 <__kernel_rem_pio2f+0x2a0>)
   c2246:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2248:	9208      	str	r2, [sp, #32]
   c224a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c224e:	1d11      	adds	r1, r2, #4
   c2250:	4682      	mov	sl, r0
   c2252:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2256:	f2c0 82a2 	blt.w	c279e <__kernel_rem_pio2f+0x56a>
   c225a:	1ed3      	subs	r3, r2, #3
   c225c:	bf44      	itt	mi
   c225e:	4613      	movmi	r3, r2
   c2260:	3304      	addmi	r3, #4
   c2262:	10db      	asrs	r3, r3, #3
   c2264:	9302      	str	r3, [sp, #8]
   c2266:	3301      	adds	r3, #1
   c2268:	00db      	lsls	r3, r3, #3
   c226a:	9307      	str	r3, [sp, #28]
   c226c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2270:	1a9b      	subs	r3, r3, r2
   c2272:	9305      	str	r3, [sp, #20]
   c2274:	9b02      	ldr	r3, [sp, #8]
   c2276:	eb15 0108 	adds.w	r1, r5, r8
   c227a:	eba3 0308 	sub.w	r3, r3, r8
   c227e:	d416      	bmi.n	c22ae <__kernel_rem_pio2f+0x7a>
   c2280:	3101      	adds	r1, #1
   c2282:	ed9f 7a95 	vldr	s14, [pc, #596]	; c24d8 <__kernel_rem_pio2f+0x2a4>
   c2286:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2288:	4419      	add	r1, r3
   c228a:	aa1e      	add	r2, sp, #120	; 0x78
   c228c:	2b00      	cmp	r3, #0
   c228e:	bfa4      	itt	ge
   c2290:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2294:	ee07 4a90 	vmovge	s15, r4
   c2298:	f103 0301 	add.w	r3, r3, #1
   c229c:	bfac      	ite	ge
   c229e:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c22a2:	eef0 7a47 	vmovlt.f32	s15, s14
   c22a6:	428b      	cmp	r3, r1
   c22a8:	ece2 7a01 	vstmia	r2!, {s15}
   c22ac:	d1ee      	bne.n	c228c <__kernel_rem_pio2f+0x58>
   c22ae:	2d00      	cmp	r5, #0
   c22b0:	f2c0 82e5 	blt.w	c287e <__kernel_rem_pio2f+0x64a>
   c22b4:	9b03      	ldr	r3, [sp, #12]
   c22b6:	a91e      	add	r1, sp, #120	; 0x78
   c22b8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c22bc:	ae46      	add	r6, sp, #280	; 0x118
   c22be:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c22c2:	4640      	mov	r0, r8
   c22c4:	18ef      	adds	r7, r5, r3
   c22c6:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c22ca:	f1b8 0f00 	cmp.w	r8, #0
   c22ce:	eddf 7a82 	vldr	s15, [pc, #520]	; c24d8 <__kernel_rem_pio2f+0x2a4>
   c22d2:	db09      	blt.n	c22e8 <__kernel_rem_pio2f+0xb4>
   c22d4:	4622      	mov	r2, r4
   c22d6:	4653      	mov	r3, sl
   c22d8:	ecf3 6a01 	vldmia	r3!, {s13}
   c22dc:	ed32 7a01 	vldmdb	r2!, {s14}
   c22e0:	428b      	cmp	r3, r1
   c22e2:	eee6 7a87 	vfma.f32	s15, s13, s14
   c22e6:	d1f7      	bne.n	c22d8 <__kernel_rem_pio2f+0xa4>
   c22e8:	3001      	adds	r0, #1
   c22ea:	42b8      	cmp	r0, r7
   c22ec:	ece6 7a01 	vstmia	r6!, {s15}
   c22f0:	f104 0404 	add.w	r4, r4, #4
   c22f4:	d1e9      	bne.n	c22ca <__kernel_rem_pio2f+0x96>
   c22f6:	ab09      	add	r3, sp, #36	; 0x24
   c22f8:	af0a      	add	r7, sp, #40	; 0x28
   c22fa:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c22fe:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2302:	3b08      	subs	r3, #8
   c2304:	ed9f 9a76 	vldr	s18, [pc, #472]	; c24e0 <__kernel_rem_pio2f+0x2ac>
   c2308:	eddf 8a74 	vldr	s17, [pc, #464]	; c24dc <__kernel_rem_pio2f+0x2a8>
   c230c:	9805      	ldr	r0, [sp, #20]
   c230e:	9304      	str	r3, [sp, #16]
   c2310:	eb0a 040c 	add.w	r4, sl, ip
   c2314:	ae46      	add	r6, sp, #280	; 0x118
   c2316:	9500      	str	r5, [sp, #0]
   c2318:	ab5a      	add	r3, sp, #360	; 0x168
   c231a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c231e:	2d00      	cmp	r5, #0
   c2320:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2324:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2328:	dd16      	ble.n	c2358 <__kernel_rem_pio2f+0x124>
   c232a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c232e:	463a      	mov	r2, r7
   c2330:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2334:	eeb0 7a40 	vmov.f32	s14, s0
   c2338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c233c:	ed73 6a01 	vldmdb	r3!, {s13}
   c2340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2344:	42b3      	cmp	r3, r6
   c2346:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c234a:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c234e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2352:	eca2 7a01 	vstmia	r2!, {s14}
   c2356:	d1eb      	bne.n	c2330 <__kernel_rem_pio2f+0xfc>
   c2358:	9001      	str	r0, [sp, #4]
   c235a:	f000 fdbf 	bl	c2edc <scalbnf>
   c235e:	eeb0 8a40 	vmov.f32	s16, s0
   c2362:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2366:	ee28 0a00 	vmul.f32	s0, s16, s0
   c236a:	f000 fd71 	bl	c2e50 <floorf>
   c236e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2372:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2376:	9801      	ldr	r0, [sp, #4]
   c2378:	2800      	cmp	r0, #0
   c237a:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c237e:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2382:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2386:	dd79      	ble.n	c247c <__kernel_rem_pio2f+0x248>
   c2388:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c238c:	f1c0 0308 	rsb	r3, r0, #8
   c2390:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2394:	fa41 fc03 	asr.w	ip, r1, r3
   c2398:	fa0c f303 	lsl.w	r3, ip, r3
   c239c:	1acb      	subs	r3, r1, r3
   c239e:	f1c0 0207 	rsb	r2, r0, #7
   c23a2:	ee19 1a90 	vmov	r1, s19
   c23a6:	fa43 f202 	asr.w	r2, r3, r2
   c23aa:	4461      	add	r1, ip
   c23ac:	2a00      	cmp	r2, #0
   c23ae:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c23b2:	ee09 1a90 	vmov	s19, r1
   c23b6:	dc69      	bgt.n	c248c <__kernel_rem_pio2f+0x258>
   c23b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c23bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c23c0:	f040 80c1 	bne.w	c2546 <__kernel_rem_pio2f+0x312>
   c23c4:	9b00      	ldr	r3, [sp, #0]
   c23c6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c23ca:	455b      	cmp	r3, fp
   c23cc:	dc10      	bgt.n	c23f0 <__kernel_rem_pio2f+0x1bc>
   c23ce:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c23d2:	3b01      	subs	r3, #1
   c23d4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c23d8:	2100      	movs	r1, #0
   c23da:	4694      	mov	ip, r2
   c23dc:	f853 2904 	ldr.w	r2, [r3], #-4
   c23e0:	454b      	cmp	r3, r9
   c23e2:	ea41 0102 	orr.w	r1, r1, r2
   c23e6:	d1f9      	bne.n	c23dc <__kernel_rem_pio2f+0x1a8>
   c23e8:	4662      	mov	r2, ip
   c23ea:	2900      	cmp	r1, #0
   c23ec:	f040 80f3 	bne.w	c25d6 <__kernel_rem_pio2f+0x3a2>
   c23f0:	9b00      	ldr	r3, [sp, #0]
   c23f2:	3b01      	subs	r3, #1
   c23f4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c23f8:	2b00      	cmp	r3, #0
   c23fa:	f040 80e8 	bne.w	c25ce <__kernel_rem_pio2f+0x39a>
   c23fe:	9b04      	ldr	r3, [sp, #16]
   c2400:	f04f 0c01 	mov.w	ip, #1
   c2404:	f853 2904 	ldr.w	r2, [r3], #-4
   c2408:	f10c 0c01 	add.w	ip, ip, #1
   c240c:	2a00      	cmp	r2, #0
   c240e:	d0f9      	beq.n	c2404 <__kernel_rem_pio2f+0x1d0>
   c2410:	1c6b      	adds	r3, r5, #1
   c2412:	44ac      	add	ip, r5
   c2414:	469e      	mov	lr, r3
   c2416:	9a03      	ldr	r2, [sp, #12]
   c2418:	1951      	adds	r1, r2, r5
   c241a:	9a02      	ldr	r2, [sp, #8]
   c241c:	eb02 0b03 	add.w	fp, r2, r3
   c2420:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2424:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2426:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c242a:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c242e:	ab1e      	add	r3, sp, #120	; 0x78
   c2430:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2434:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2438:	eddb 7a01 	vldr	s15, [fp, #4]
   c243c:	ed9f 7a26 	vldr	s14, [pc, #152]	; c24d8 <__kernel_rem_pio2f+0x2a4>
   c2440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2444:	f1b8 0f00 	cmp.w	r8, #0
   c2448:	f10b 0b04 	add.w	fp, fp, #4
   c244c:	edc1 7a00 	vstr	s15, [r1]
   c2450:	460a      	mov	r2, r1
   c2452:	f101 0104 	add.w	r1, r1, #4
   c2456:	db09      	blt.n	c246c <__kernel_rem_pio2f+0x238>
   c2458:	4653      	mov	r3, sl
   c245a:	e001      	b.n	c2460 <__kernel_rem_pio2f+0x22c>
   c245c:	ed72 7a01 	vldmdb	r2!, {s15}
   c2460:	ecf3 6a01 	vldmia	r3!, {s13}
   c2464:	42a3      	cmp	r3, r4
   c2466:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c246a:	d1f7      	bne.n	c245c <__kernel_rem_pio2f+0x228>
   c246c:	f10e 0e01 	add.w	lr, lr, #1
   c2470:	45e6      	cmp	lr, ip
   c2472:	eca5 7a01 	vstmia	r5!, {s14}
   c2476:	dddf      	ble.n	c2438 <__kernel_rem_pio2f+0x204>
   c2478:	4665      	mov	r5, ip
   c247a:	e74d      	b.n	c2318 <__kernel_rem_pio2f+0xe4>
   c247c:	f040 809d 	bne.w	c25ba <__kernel_rem_pio2f+0x386>
   c2480:	1e6b      	subs	r3, r5, #1
   c2482:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2486:	1212      	asrs	r2, r2, #8
   c2488:	2a00      	cmp	r2, #0
   c248a:	dd95      	ble.n	c23b8 <__kernel_rem_pio2f+0x184>
   c248c:	ee19 3a90 	vmov	r3, s19
   c2490:	2d00      	cmp	r5, #0
   c2492:	f103 0301 	add.w	r3, r3, #1
   c2496:	ee09 3a90 	vmov	s19, r3
   c249a:	f340 8196 	ble.w	c27ca <__kernel_rem_pio2f+0x596>
   c249e:	6839      	ldr	r1, [r7, #0]
   c24a0:	2900      	cmp	r1, #0
   c24a2:	f040 8080 	bne.w	c25a6 <__kernel_rem_pio2f+0x372>
   c24a6:	2d01      	cmp	r5, #1
   c24a8:	d026      	beq.n	c24f8 <__kernel_rem_pio2f+0x2c4>
   c24aa:	463b      	mov	r3, r7
   c24ac:	f04f 0c01 	mov.w	ip, #1
   c24b0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c24b4:	2900      	cmp	r1, #0
   c24b6:	d07a      	beq.n	c25ae <__kernel_rem_pio2f+0x37a>
   c24b8:	f10c 0301 	add.w	r3, ip, #1
   c24bc:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c24c0:	429d      	cmp	r5, r3
   c24c2:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c24c6:	dd16      	ble.n	c24f6 <__kernel_rem_pio2f+0x2c2>
   c24c8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c24cc:	44bb      	add	fp, r7
   c24ce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c24d2:	e00a      	b.n	c24ea <__kernel_rem_pio2f+0x2b6>
   c24d4:	000c79bc 	.word	0x000c79bc
   c24d8:	00000000 	.word	0x00000000
   c24dc:	43800000 	.word	0x43800000
   c24e0:	3b800000 	.word	0x3b800000
   c24e4:	3fc90000 	.word	0x3fc90000
   c24e8:	6819      	ldr	r1, [r3, #0]
   c24ea:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c24ee:	f843 1b04 	str.w	r1, [r3], #4
   c24f2:	455b      	cmp	r3, fp
   c24f4:	d1f8      	bne.n	c24e8 <__kernel_rem_pio2f+0x2b4>
   c24f6:	2101      	movs	r1, #1
   c24f8:	2800      	cmp	r0, #0
   c24fa:	dd0c      	ble.n	c2516 <__kernel_rem_pio2f+0x2e2>
   c24fc:	2801      	cmp	r0, #1
   c24fe:	f000 8145 	beq.w	c278c <__kernel_rem_pio2f+0x558>
   c2502:	2802      	cmp	r0, #2
   c2504:	d107      	bne.n	c2516 <__kernel_rem_pio2f+0x2e2>
   c2506:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c250a:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c250e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2512:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2516:	2a02      	cmp	r2, #2
   c2518:	f47f af4e 	bne.w	c23b8 <__kernel_rem_pio2f+0x184>
   c251c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2520:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2524:	2900      	cmp	r1, #0
   c2526:	f43f af47 	beq.w	c23b8 <__kernel_rem_pio2f+0x184>
   c252a:	9209      	str	r2, [sp, #36]	; 0x24
   c252c:	9001      	str	r0, [sp, #4]
   c252e:	f000 fcd5 	bl	c2edc <scalbnf>
   c2532:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2536:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2538:	9801      	ldr	r0, [sp, #4]
   c253a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2542:	f43f af3f 	beq.w	c23c4 <__kernel_rem_pio2f+0x190>
   c2546:	9202      	str	r2, [sp, #8]
   c2548:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c254c:	eeb0 0a48 	vmov.f32	s0, s16
   c2550:	1a98      	subs	r0, r3, r2
   c2552:	9501      	str	r5, [sp, #4]
   c2554:	9d00      	ldr	r5, [sp, #0]
   c2556:	f000 fcc1 	bl	c2edc <scalbnf>
   c255a:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c24dc <__kernel_rem_pio2f+0x2a8>
   c255e:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c2562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2566:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c256a:	f2c0 8156 	blt.w	c281a <__kernel_rem_pio2f+0x5e6>
   c256e:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c24e0 <__kernel_rem_pio2f+0x2ac>
   c2572:	9905      	ldr	r1, [sp, #20]
   c2574:	ee60 7a27 	vmul.f32	s15, s0, s15
   c2578:	3108      	adds	r1, #8
   c257a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c257e:	9105      	str	r1, [sp, #20]
   c2580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2584:	f103 0b01 	add.w	fp, r3, #1
   c2588:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c258c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2590:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c2594:	ee10 1a10 	vmov	r1, s0
   c2598:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c259c:	ee17 3a90 	vmov	r3, s15
   c25a0:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c25a4:	e02e      	b.n	c2604 <__kernel_rem_pio2f+0x3d0>
   c25a6:	2301      	movs	r3, #1
   c25a8:	f04f 0c00 	mov.w	ip, #0
   c25ac:	e786      	b.n	c24bc <__kernel_rem_pio2f+0x288>
   c25ae:	f10c 0c01 	add.w	ip, ip, #1
   c25b2:	45ac      	cmp	ip, r5
   c25b4:	f47f af7c 	bne.w	c24b0 <__kernel_rem_pio2f+0x27c>
   c25b8:	e79e      	b.n	c24f8 <__kernel_rem_pio2f+0x2c4>
   c25ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c25be:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c25c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c25c6:	f280 80ef 	bge.w	c27a8 <__kernel_rem_pio2f+0x574>
   c25ca:	2200      	movs	r2, #0
   c25cc:	e6f4      	b.n	c23b8 <__kernel_rem_pio2f+0x184>
   c25ce:	1c6b      	adds	r3, r5, #1
   c25d0:	469e      	mov	lr, r3
   c25d2:	469c      	mov	ip, r3
   c25d4:	e71f      	b.n	c2416 <__kernel_rem_pio2f+0x1e2>
   c25d6:	9905      	ldr	r1, [sp, #20]
   c25d8:	f1a1 0008 	sub.w	r0, r1, #8
   c25dc:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c25e0:	9005      	str	r0, [sp, #20]
   c25e2:	462b      	mov	r3, r5
   c25e4:	9d00      	ldr	r5, [sp, #0]
   c25e6:	b969      	cbnz	r1, c2604 <__kernel_rem_pio2f+0x3d0>
   c25e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c25ec:	3b02      	subs	r3, #2
   c25ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c25f2:	4601      	mov	r1, r0
   c25f4:	f853 0904 	ldr.w	r0, [r3], #-4
   c25f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c25fc:	3908      	subs	r1, #8
   c25fe:	2800      	cmp	r0, #0
   c2600:	d0f8      	beq.n	c25f4 <__kernel_rem_pio2f+0x3c0>
   c2602:	9105      	str	r1, [sp, #20]
   c2604:	9805      	ldr	r0, [sp, #20]
   c2606:	9200      	str	r2, [sp, #0]
   c2608:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c260c:	f000 fc66 	bl	c2edc <scalbnf>
   c2610:	f1bb 0f00 	cmp.w	fp, #0
   c2614:	9a00      	ldr	r2, [sp, #0]
   c2616:	f2c0 8125 	blt.w	c2864 <__kernel_rem_pio2f+0x630>
   c261a:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c261e:	ab46      	add	r3, sp, #280	; 0x118
   c2620:	eb03 060e 	add.w	r6, r3, lr
   c2624:	f10e 0c04 	add.w	ip, lr, #4
   c2628:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c24e0 <__kernel_rem_pio2f+0x2ac>
   c262c:	eb07 030c 	add.w	r3, r7, ip
   c2630:	1d31      	adds	r1, r6, #4
   c2632:	ed73 7a01 	vldmdb	r3!, {s15}
   c2636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c263a:	42bb      	cmp	r3, r7
   c263c:	ee67 7a80 	vmul.f32	s15, s15, s0
   c2640:	ee20 0a07 	vmul.f32	s0, s0, s14
   c2644:	ed61 7a01 	vstmdb	r1!, {s15}
   c2648:	d1f3      	bne.n	c2632 <__kernel_rem_pio2f+0x3fe>
   c264a:	2d00      	cmp	r5, #0
   c264c:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c24e4 <__kernel_rem_pio2f+0x2b0>
   c2650:	f04f 0400 	mov.w	r4, #0
   c2654:	db20      	blt.n	c2698 <__kernel_rem_pio2f+0x464>
   c2656:	4892      	ldr	r0, [pc, #584]	; (c28a0 <__kernel_rem_pio2f+0x66c>)
   c2658:	eddf 7a92 	vldr	s15, [pc, #584]	; c28a4 <__kernel_rem_pio2f+0x670>
   c265c:	eeb0 7a46 	vmov.f32	s14, s12
   c2660:	4631      	mov	r1, r6
   c2662:	2300      	movs	r3, #0
   c2664:	e003      	b.n	c266e <__kernel_rem_pio2f+0x43a>
   c2666:	429c      	cmp	r4, r3
   c2668:	db08      	blt.n	c267c <__kernel_rem_pio2f+0x448>
   c266a:	ecb0 7a01 	vldmia	r0!, {s14}
   c266e:	ecf1 6a01 	vldmia	r1!, {s13}
   c2672:	3301      	adds	r3, #1
   c2674:	429d      	cmp	r5, r3
   c2676:	eee6 7a87 	vfma.f32	s15, s13, s14
   c267a:	daf4      	bge.n	c2666 <__kernel_rem_pio2f+0x432>
   c267c:	ab5a      	add	r3, sp, #360	; 0x168
   c267e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c2682:	45a3      	cmp	fp, r4
   c2684:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c2688:	f1a6 0604 	sub.w	r6, r6, #4
   c268c:	f104 0301 	add.w	r3, r4, #1
   c2690:	d005      	beq.n	c269e <__kernel_rem_pio2f+0x46a>
   c2692:	2d00      	cmp	r5, #0
   c2694:	461c      	mov	r4, r3
   c2696:	dade      	bge.n	c2656 <__kernel_rem_pio2f+0x422>
   c2698:	eddf 7a82 	vldr	s15, [pc, #520]	; c28a4 <__kernel_rem_pio2f+0x670>
   c269c:	e7ee      	b.n	c267c <__kernel_rem_pio2f+0x448>
   c269e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c26a0:	2902      	cmp	r1, #2
   c26a2:	dc1c      	bgt.n	c26de <__kernel_rem_pio2f+0x4aa>
   c26a4:	2900      	cmp	r1, #0
   c26a6:	f300 8092 	bgt.w	c27ce <__kernel_rem_pio2f+0x59a>
   c26aa:	d10f      	bne.n	c26cc <__kernel_rem_pio2f+0x498>
   c26ac:	ab32      	add	r3, sp, #200	; 0xc8
   c26ae:	eddf 7a7d 	vldr	s15, [pc, #500]	; c28a4 <__kernel_rem_pio2f+0x670>
   c26b2:	449c      	add	ip, r3
   c26b4:	ed3c 7a01 	vldmdb	ip!, {s14}
   c26b8:	4563      	cmp	r3, ip
   c26ba:	ee77 7a87 	vadd.f32	s15, s15, s14
   c26be:	d1f9      	bne.n	c26b4 <__kernel_rem_pio2f+0x480>
   c26c0:	b10a      	cbz	r2, c26c6 <__kernel_rem_pio2f+0x492>
   c26c2:	eef1 7a67 	vneg.f32	s15, s15
   c26c6:	9b06      	ldr	r3, [sp, #24]
   c26c8:	edc3 7a00 	vstr	s15, [r3]
   c26cc:	ee19 3a90 	vmov	r3, s19
   c26d0:	f003 0007 	and.w	r0, r3, #7
   c26d4:	b05b      	add	sp, #364	; 0x16c
   c26d6:	ecbd 8b04 	vpop	{d8-d9}
   c26da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c26de:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c26e0:	2b03      	cmp	r3, #3
   c26e2:	d1f3      	bne.n	c26cc <__kernel_rem_pio2f+0x498>
   c26e4:	f1bb 0f00 	cmp.w	fp, #0
   c26e8:	f000 80d1 	beq.w	c288e <__kernel_rem_pio2f+0x65a>
   c26ec:	ab5a      	add	r3, sp, #360	; 0x168
   c26ee:	4473      	add	r3, lr
   c26f0:	a932      	add	r1, sp, #200	; 0xc8
   c26f2:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c26f6:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c26fa:	ed73 7a01 	vldmdb	r3!, {s15}
   c26fe:	eef0 6a47 	vmov.f32	s13, s14
   c2702:	ee37 7a27 	vadd.f32	s14, s14, s15
   c2706:	4299      	cmp	r1, r3
   c2708:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c270c:	ed83 7a00 	vstr	s14, [r3]
   c2710:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2714:	edc3 7a01 	vstr	s15, [r3, #4]
   c2718:	d1ef      	bne.n	c26fa <__kernel_rem_pio2f+0x4c6>
   c271a:	f1bb 0f01 	cmp.w	fp, #1
   c271e:	f340 80b6 	ble.w	c288e <__kernel_rem_pio2f+0x65a>
   c2722:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2726:	ab5a      	add	r3, sp, #360	; 0x168
   c2728:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c272c:	449e      	add	lr, r3
   c272e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c2732:	f10b 0304 	add.w	r3, fp, #4
   c2736:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c273a:	440b      	add	r3, r1
   c273c:	a833      	add	r0, sp, #204	; 0xcc
   c273e:	ed73 7a01 	vldmdb	r3!, {s15}
   c2742:	eef0 6a47 	vmov.f32	s13, s14
   c2746:	ee37 7a27 	vadd.f32	s14, s14, s15
   c274a:	4298      	cmp	r0, r3
   c274c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2750:	ed83 7a00 	vstr	s14, [r3]
   c2754:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2758:	edc3 7a01 	vstr	s15, [r3, #4]
   c275c:	d1ef      	bne.n	c273e <__kernel_rem_pio2f+0x50a>
   c275e:	f10b 0b08 	add.w	fp, fp, #8
   c2762:	eddf 7a50 	vldr	s15, [pc, #320]	; c28a4 <__kernel_rem_pio2f+0x670>
   c2766:	eb01 030b 	add.w	r3, r1, fp
   c276a:	3108      	adds	r1, #8
   c276c:	ed33 7a01 	vldmdb	r3!, {s14}
   c2770:	4299      	cmp	r1, r3
   c2772:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2776:	d1f9      	bne.n	c276c <__kernel_rem_pio2f+0x538>
   c2778:	2a00      	cmp	r2, #0
   c277a:	d156      	bne.n	c282a <__kernel_rem_pio2f+0x5f6>
   c277c:	9906      	ldr	r1, [sp, #24]
   c277e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c2780:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c2782:	600a      	str	r2, [r1, #0]
   c2784:	604b      	str	r3, [r1, #4]
   c2786:	edc1 7a02 	vstr	s15, [r1, #8]
   c278a:	e79f      	b.n	c26cc <__kernel_rem_pio2f+0x498>
   c278c:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c2790:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c2798:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c279c:	e6bb      	b.n	c2516 <__kernel_rem_pio2f+0x2e2>
   c279e:	2308      	movs	r3, #8
   c27a0:	9307      	str	r3, [sp, #28]
   c27a2:	2300      	movs	r3, #0
   c27a4:	9302      	str	r3, [sp, #8]
   c27a6:	e561      	b.n	c226c <__kernel_rem_pio2f+0x38>
   c27a8:	ee19 3a90 	vmov	r3, s19
   c27ac:	2d00      	cmp	r5, #0
   c27ae:	f103 0301 	add.w	r3, r3, #1
   c27b2:	ee09 3a90 	vmov	s19, r3
   c27b6:	bfc8      	it	gt
   c27b8:	2202      	movgt	r2, #2
   c27ba:	f73f ae70 	bgt.w	c249e <__kernel_rem_pio2f+0x26a>
   c27be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c27c2:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c27c6:	2202      	movs	r2, #2
   c27c8:	e5f6      	b.n	c23b8 <__kernel_rem_pio2f+0x184>
   c27ca:	2100      	movs	r1, #0
   c27cc:	e694      	b.n	c24f8 <__kernel_rem_pio2f+0x2c4>
   c27ce:	a932      	add	r1, sp, #200	; 0xc8
   c27d0:	eddf 7a34 	vldr	s15, [pc, #208]	; c28a4 <__kernel_rem_pio2f+0x670>
   c27d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c27d8:	ed33 7a01 	vldmdb	r3!, {s14}
   c27dc:	4299      	cmp	r1, r3
   c27de:	ee77 7a87 	vadd.f32	s15, s15, s14
   c27e2:	d1f9      	bne.n	c27d8 <__kernel_rem_pio2f+0x5a4>
   c27e4:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c27e8:	bb8a      	cbnz	r2, c284e <__kernel_rem_pio2f+0x61a>
   c27ea:	9b06      	ldr	r3, [sp, #24]
   c27ec:	f1bb 0f00 	cmp.w	fp, #0
   c27f0:	edc3 7a00 	vstr	s15, [r3]
   c27f4:	ee77 7a67 	vsub.f32	s15, s14, s15
   c27f8:	dd0b      	ble.n	c2812 <__kernel_rem_pio2f+0x5de>
   c27fa:	a933      	add	r1, sp, #204	; 0xcc
   c27fc:	2301      	movs	r3, #1
   c27fe:	ecb1 7a01 	vldmia	r1!, {s14}
   c2802:	3301      	adds	r3, #1
   c2804:	459b      	cmp	fp, r3
   c2806:	ee77 7a87 	vadd.f32	s15, s15, s14
   c280a:	daf8      	bge.n	c27fe <__kernel_rem_pio2f+0x5ca>
   c280c:	b10a      	cbz	r2, c2812 <__kernel_rem_pio2f+0x5de>
   c280e:	eef1 7a67 	vneg.f32	s15, s15
   c2812:	9b06      	ldr	r3, [sp, #24]
   c2814:	edc3 7a01 	vstr	s15, [r3, #4]
   c2818:	e758      	b.n	c26cc <__kernel_rem_pio2f+0x498>
   c281a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c281e:	469b      	mov	fp, r3
   c2820:	ee10 1a10 	vmov	r1, s0
   c2824:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2828:	e6ec      	b.n	c2604 <__kernel_rem_pio2f+0x3d0>
   c282a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c282e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c2832:	9b06      	ldr	r3, [sp, #24]
   c2834:	eef1 6a66 	vneg.f32	s13, s13
   c2838:	eeb1 7a47 	vneg.f32	s14, s14
   c283c:	eef1 7a67 	vneg.f32	s15, s15
   c2840:	edc3 6a00 	vstr	s13, [r3]
   c2844:	ed83 7a01 	vstr	s14, [r3, #4]
   c2848:	edc3 7a02 	vstr	s15, [r3, #8]
   c284c:	e73e      	b.n	c26cc <__kernel_rem_pio2f+0x498>
   c284e:	9b06      	ldr	r3, [sp, #24]
   c2850:	eef1 6a67 	vneg.f32	s13, s15
   c2854:	f1bb 0f00 	cmp.w	fp, #0
   c2858:	ee77 7a67 	vsub.f32	s15, s14, s15
   c285c:	edc3 6a00 	vstr	s13, [r3]
   c2860:	dccb      	bgt.n	c27fa <__kernel_rem_pio2f+0x5c6>
   c2862:	e7d4      	b.n	c280e <__kernel_rem_pio2f+0x5da>
   c2864:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2866:	2b02      	cmp	r3, #2
   c2868:	dc0d      	bgt.n	c2886 <__kernel_rem_pio2f+0x652>
   c286a:	2b00      	cmp	r3, #0
   c286c:	dc14      	bgt.n	c2898 <__kernel_rem_pio2f+0x664>
   c286e:	f47f af2d 	bne.w	c26cc <__kernel_rem_pio2f+0x498>
   c2872:	eddf 7a0c 	vldr	s15, [pc, #48]	; c28a4 <__kernel_rem_pio2f+0x670>
   c2876:	2a00      	cmp	r2, #0
   c2878:	f43f af25 	beq.w	c26c6 <__kernel_rem_pio2f+0x492>
   c287c:	e721      	b.n	c26c2 <__kernel_rem_pio2f+0x48e>
   c287e:	9b03      	ldr	r3, [sp, #12]
   c2880:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2884:	e537      	b.n	c22f6 <__kernel_rem_pio2f+0xc2>
   c2886:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2888:	2b03      	cmp	r3, #3
   c288a:	f47f af1f 	bne.w	c26cc <__kernel_rem_pio2f+0x498>
   c288e:	eddf 7a05 	vldr	s15, [pc, #20]	; c28a4 <__kernel_rem_pio2f+0x670>
   c2892:	2a00      	cmp	r2, #0
   c2894:	d1c9      	bne.n	c282a <__kernel_rem_pio2f+0x5f6>
   c2896:	e771      	b.n	c277c <__kernel_rem_pio2f+0x548>
   c2898:	eddf 7a02 	vldr	s15, [pc, #8]	; c28a4 <__kernel_rem_pio2f+0x670>
   c289c:	e7a2      	b.n	c27e4 <__kernel_rem_pio2f+0x5b0>
   c289e:	bf00      	nop
   c28a0:	000c7994 	.word	0x000c7994
   c28a4:	00000000 	.word	0x00000000

000c28a8 <__kernel_sinf>:
   c28a8:	ee10 3a10 	vmov	r3, s0
   c28ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c28b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c28b4:	da04      	bge.n	c28c0 <__kernel_sinf+0x18>
   c28b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c28ba:	ee17 3a90 	vmov	r3, s15
   c28be:	b35b      	cbz	r3, c2918 <__kernel_sinf+0x70>
   c28c0:	ee60 7a00 	vmul.f32	s15, s0, s0
   c28c4:	ed9f 7a15 	vldr	s14, [pc, #84]	; c291c <__kernel_sinf+0x74>
   c28c8:	eddf 5a15 	vldr	s11, [pc, #84]	; c2920 <__kernel_sinf+0x78>
   c28cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; c2924 <__kernel_sinf+0x7c>
   c28d0:	eddf 6a15 	vldr	s13, [pc, #84]	; c2928 <__kernel_sinf+0x80>
   c28d4:	eee7 5a87 	vfma.f32	s11, s15, s14
   c28d8:	ed9f 7a14 	vldr	s14, [pc, #80]	; c292c <__kernel_sinf+0x84>
   c28dc:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c28e0:	ee20 5a27 	vmul.f32	s10, s0, s15
   c28e4:	eee6 6a27 	vfma.f32	s13, s12, s15
   c28e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c28ec:	b930      	cbnz	r0, c28fc <__kernel_sinf+0x54>
   c28ee:	eddf 6a10 	vldr	s13, [pc, #64]	; c2930 <__kernel_sinf+0x88>
   c28f2:	eee7 6a87 	vfma.f32	s13, s15, s14
   c28f6:	eea6 0a85 	vfma.f32	s0, s13, s10
   c28fa:	4770      	bx	lr
   c28fc:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c2900:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c2904:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c2908:	eddf 6a0a 	vldr	s13, [pc, #40]	; c2934 <__kernel_sinf+0x8c>
   c290c:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2910:	eee5 0a26 	vfma.f32	s1, s10, s13
   c2914:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2918:	4770      	bx	lr
   c291a:	bf00      	nop
   c291c:	2f2ec9d3 	.word	0x2f2ec9d3
   c2920:	b2d72f34 	.word	0xb2d72f34
   c2924:	3638ef1b 	.word	0x3638ef1b
   c2928:	b9500d01 	.word	0xb9500d01
   c292c:	3c088889 	.word	0x3c088889
   c2930:	be2aaaab 	.word	0xbe2aaaab
   c2934:	3e2aaaab 	.word	0x3e2aaaab

000c2938 <atan>:
   c2938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c293c:	ec55 4b10 	vmov	r4, r5, d0
   c2940:	4bc3      	ldr	r3, [pc, #780]	; (c2c50 <atan+0x318>)
   c2942:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c2946:	429e      	cmp	r6, r3
   c2948:	46aa      	mov	sl, r5
   c294a:	dd17      	ble.n	c297c <atan+0x44>
   c294c:	4bc1      	ldr	r3, [pc, #772]	; (c2c54 <atan+0x31c>)
   c294e:	429e      	cmp	r6, r3
   c2950:	dc0a      	bgt.n	c2968 <atan+0x30>
   c2952:	d007      	beq.n	c2964 <atan+0x2c>
   c2954:	f1ba 0f00 	cmp.w	sl, #0
   c2958:	f340 80cb 	ble.w	c2af2 <atan+0x1ba>
   c295c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c2be0 <atan+0x2a8>
   c2960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2964:	2c00      	cmp	r4, #0
   c2966:	d0f5      	beq.n	c2954 <atan+0x1c>
   c2968:	4622      	mov	r2, r4
   c296a:	462b      	mov	r3, r5
   c296c:	4620      	mov	r0, r4
   c296e:	4629      	mov	r1, r5
   c2970:	f000 fb2c 	bl	c2fcc <__adddf3>
   c2974:	ec41 0b10 	vmov	d0, r0, r1
   c2978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c297c:	4bb6      	ldr	r3, [pc, #728]	; (c2c58 <atan+0x320>)
   c297e:	429e      	cmp	r6, r3
   c2980:	f300 80bb 	bgt.w	c2afa <atan+0x1c2>
   c2984:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c2988:	429e      	cmp	r6, r3
   c298a:	f340 80a0 	ble.w	c2ace <atan+0x196>
   c298e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c2992:	4622      	mov	r2, r4
   c2994:	462b      	mov	r3, r5
   c2996:	4620      	mov	r0, r4
   c2998:	4629      	mov	r1, r5
   c299a:	f000 fccd 	bl	c3338 <__aeabi_dmul>
   c299e:	4602      	mov	r2, r0
   c29a0:	460b      	mov	r3, r1
   c29a2:	4680      	mov	r8, r0
   c29a4:	4689      	mov	r9, r1
   c29a6:	f000 fcc7 	bl	c3338 <__aeabi_dmul>
   c29aa:	a38f      	add	r3, pc, #572	; (adr r3, c2be8 <atan+0x2b0>)
   c29ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29b0:	4606      	mov	r6, r0
   c29b2:	460f      	mov	r7, r1
   c29b4:	f000 fcc0 	bl	c3338 <__aeabi_dmul>
   c29b8:	a38d      	add	r3, pc, #564	; (adr r3, c2bf0 <atan+0x2b8>)
   c29ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29be:	f000 fb05 	bl	c2fcc <__adddf3>
   c29c2:	4632      	mov	r2, r6
   c29c4:	463b      	mov	r3, r7
   c29c6:	f000 fcb7 	bl	c3338 <__aeabi_dmul>
   c29ca:	a38b      	add	r3, pc, #556	; (adr r3, c2bf8 <atan+0x2c0>)
   c29cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29d0:	f000 fafc 	bl	c2fcc <__adddf3>
   c29d4:	4632      	mov	r2, r6
   c29d6:	463b      	mov	r3, r7
   c29d8:	f000 fcae 	bl	c3338 <__aeabi_dmul>
   c29dc:	a388      	add	r3, pc, #544	; (adr r3, c2c00 <atan+0x2c8>)
   c29de:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29e2:	f000 faf3 	bl	c2fcc <__adddf3>
   c29e6:	4632      	mov	r2, r6
   c29e8:	463b      	mov	r3, r7
   c29ea:	f000 fca5 	bl	c3338 <__aeabi_dmul>
   c29ee:	a386      	add	r3, pc, #536	; (adr r3, c2c08 <atan+0x2d0>)
   c29f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29f4:	f000 faea 	bl	c2fcc <__adddf3>
   c29f8:	4632      	mov	r2, r6
   c29fa:	463b      	mov	r3, r7
   c29fc:	f000 fc9c 	bl	c3338 <__aeabi_dmul>
   c2a00:	a383      	add	r3, pc, #524	; (adr r3, c2c10 <atan+0x2d8>)
   c2a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a06:	f000 fae1 	bl	c2fcc <__adddf3>
   c2a0a:	4642      	mov	r2, r8
   c2a0c:	464b      	mov	r3, r9
   c2a0e:	f000 fc93 	bl	c3338 <__aeabi_dmul>
   c2a12:	a381      	add	r3, pc, #516	; (adr r3, c2c18 <atan+0x2e0>)
   c2a14:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a18:	4680      	mov	r8, r0
   c2a1a:	4689      	mov	r9, r1
   c2a1c:	4630      	mov	r0, r6
   c2a1e:	4639      	mov	r1, r7
   c2a20:	f000 fc8a 	bl	c3338 <__aeabi_dmul>
   c2a24:	a37e      	add	r3, pc, #504	; (adr r3, c2c20 <atan+0x2e8>)
   c2a26:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a2a:	f000 facd 	bl	c2fc8 <__aeabi_dsub>
   c2a2e:	4632      	mov	r2, r6
   c2a30:	463b      	mov	r3, r7
   c2a32:	f000 fc81 	bl	c3338 <__aeabi_dmul>
   c2a36:	a37c      	add	r3, pc, #496	; (adr r3, c2c28 <atan+0x2f0>)
   c2a38:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a3c:	f000 fac4 	bl	c2fc8 <__aeabi_dsub>
   c2a40:	4632      	mov	r2, r6
   c2a42:	463b      	mov	r3, r7
   c2a44:	f000 fc78 	bl	c3338 <__aeabi_dmul>
   c2a48:	a379      	add	r3, pc, #484	; (adr r3, c2c30 <atan+0x2f8>)
   c2a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a4e:	f000 fabb 	bl	c2fc8 <__aeabi_dsub>
   c2a52:	4632      	mov	r2, r6
   c2a54:	463b      	mov	r3, r7
   c2a56:	f000 fc6f 	bl	c3338 <__aeabi_dmul>
   c2a5a:	a377      	add	r3, pc, #476	; (adr r3, c2c38 <atan+0x300>)
   c2a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a60:	f000 fab2 	bl	c2fc8 <__aeabi_dsub>
   c2a64:	4632      	mov	r2, r6
   c2a66:	463b      	mov	r3, r7
   c2a68:	f000 fc66 	bl	c3338 <__aeabi_dmul>
   c2a6c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c2a70:	4602      	mov	r2, r0
   c2a72:	460b      	mov	r3, r1
   c2a74:	4640      	mov	r0, r8
   c2a76:	4649      	mov	r1, r9
   c2a78:	d062      	beq.n	c2b40 <atan+0x208>
   c2a7a:	f000 faa7 	bl	c2fcc <__adddf3>
   c2a7e:	4e77      	ldr	r6, [pc, #476]	; (c2c5c <atan+0x324>)
   c2a80:	4622      	mov	r2, r4
   c2a82:	462b      	mov	r3, r5
   c2a84:	f000 fc58 	bl	c3338 <__aeabi_dmul>
   c2a88:	4b75      	ldr	r3, [pc, #468]	; (c2c60 <atan+0x328>)
   c2a8a:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c2a8e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c2a92:	449b      	add	fp, r3
   c2a94:	e9db 2300 	ldrd	r2, r3, [fp]
   c2a98:	f000 fa96 	bl	c2fc8 <__aeabi_dsub>
   c2a9c:	4622      	mov	r2, r4
   c2a9e:	462b      	mov	r3, r5
   c2aa0:	f000 fa92 	bl	c2fc8 <__aeabi_dsub>
   c2aa4:	4602      	mov	r2, r0
   c2aa6:	460b      	mov	r3, r1
   c2aa8:	e9d6 0100 	ldrd	r0, r1, [r6]
   c2aac:	f000 fa8c 	bl	c2fc8 <__aeabi_dsub>
   c2ab0:	f1ba 0f00 	cmp.w	sl, #0
   c2ab4:	ec41 0b10 	vmov	d0, r0, r1
   c2ab8:	f6bf af5e 	bge.w	c2978 <atan+0x40>
   c2abc:	ee10 1a90 	vmov	r1, s1
   c2ac0:	4602      	mov	r2, r0
   c2ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2ac6:	ec43 2b10 	vmov	d0, r2, r3
   c2aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2ace:	a35c      	add	r3, pc, #368	; (adr r3, c2c40 <atan+0x308>)
   c2ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ad4:	ee10 0a10 	vmov	r0, s0
   c2ad8:	4629      	mov	r1, r5
   c2ada:	f000 fa77 	bl	c2fcc <__adddf3>
   c2ade:	4b61      	ldr	r3, [pc, #388]	; (c2c64 <atan+0x32c>)
   c2ae0:	2200      	movs	r2, #0
   c2ae2:	f000 feb9 	bl	c3858 <__aeabi_dcmpgt>
   c2ae6:	2800      	cmp	r0, #0
   c2ae8:	f43f af51 	beq.w	c298e <atan+0x56>
   c2aec:	ec45 4b10 	vmov	d0, r4, r5
   c2af0:	e742      	b.n	c2978 <atan+0x40>
   c2af2:	ed9f 0b55 	vldr	d0, [pc, #340]	; c2c48 <atan+0x310>
   c2af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2afa:	f000 f8bd 	bl	c2c78 <fabs>
   c2afe:	4b5a      	ldr	r3, [pc, #360]	; (c2c68 <atan+0x330>)
   c2b00:	429e      	cmp	r6, r3
   c2b02:	ec55 4b10 	vmov	r4, r5, d0
   c2b06:	dc2b      	bgt.n	c2b60 <atan+0x228>
   c2b08:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c2b0c:	429e      	cmp	r6, r3
   c2b0e:	dc56      	bgt.n	c2bbe <atan+0x286>
   c2b10:	ee10 2a10 	vmov	r2, s0
   c2b14:	462b      	mov	r3, r5
   c2b16:	ee10 0a10 	vmov	r0, s0
   c2b1a:	4629      	mov	r1, r5
   c2b1c:	f000 fa56 	bl	c2fcc <__adddf3>
   c2b20:	4b50      	ldr	r3, [pc, #320]	; (c2c64 <atan+0x32c>)
   c2b22:	2200      	movs	r2, #0
   c2b24:	f000 fa50 	bl	c2fc8 <__aeabi_dsub>
   c2b28:	4602      	mov	r2, r0
   c2b2a:	460b      	mov	r3, r1
   c2b2c:	4620      	mov	r0, r4
   c2b2e:	4629      	mov	r1, r5
   c2b30:	4614      	mov	r4, r2
   c2b32:	461d      	mov	r5, r3
   c2b34:	f04f 0b00 	mov.w	fp, #0
   c2b38:	2200      	movs	r2, #0
   c2b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c2b3e:	e027      	b.n	c2b90 <atan+0x258>
   c2b40:	f000 fa44 	bl	c2fcc <__adddf3>
   c2b44:	4622      	mov	r2, r4
   c2b46:	462b      	mov	r3, r5
   c2b48:	f000 fbf6 	bl	c3338 <__aeabi_dmul>
   c2b4c:	4602      	mov	r2, r0
   c2b4e:	460b      	mov	r3, r1
   c2b50:	4620      	mov	r0, r4
   c2b52:	4629      	mov	r1, r5
   c2b54:	f000 fa38 	bl	c2fc8 <__aeabi_dsub>
   c2b58:	ec41 0b10 	vmov	d0, r0, r1
   c2b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2b60:	4b42      	ldr	r3, [pc, #264]	; (c2c6c <atan+0x334>)
   c2b62:	429e      	cmp	r6, r3
   c2b64:	da1f      	bge.n	c2ba6 <atan+0x26e>
   c2b66:	4b42      	ldr	r3, [pc, #264]	; (c2c70 <atan+0x338>)
   c2b68:	2200      	movs	r2, #0
   c2b6a:	4629      	mov	r1, r5
   c2b6c:	ee10 0a10 	vmov	r0, s0
   c2b70:	f000 fa2a 	bl	c2fc8 <__aeabi_dsub>
   c2b74:	4602      	mov	r2, r0
   c2b76:	460b      	mov	r3, r1
   c2b78:	4620      	mov	r0, r4
   c2b7a:	4629      	mov	r1, r5
   c2b7c:	4614      	mov	r4, r2
   c2b7e:	461d      	mov	r5, r3
   c2b80:	2200      	movs	r2, #0
   c2b82:	4b3b      	ldr	r3, [pc, #236]	; (c2c70 <atan+0x338>)
   c2b84:	f04f 0b02 	mov.w	fp, #2
   c2b88:	f000 fbd6 	bl	c3338 <__aeabi_dmul>
   c2b8c:	4b35      	ldr	r3, [pc, #212]	; (c2c64 <atan+0x32c>)
   c2b8e:	2200      	movs	r2, #0
   c2b90:	f000 fa1c 	bl	c2fcc <__adddf3>
   c2b94:	4602      	mov	r2, r0
   c2b96:	460b      	mov	r3, r1
   c2b98:	4620      	mov	r0, r4
   c2b9a:	4629      	mov	r1, r5
   c2b9c:	f000 fcf6 	bl	c358c <__aeabi_ddiv>
   c2ba0:	4604      	mov	r4, r0
   c2ba2:	460d      	mov	r5, r1
   c2ba4:	e6f5      	b.n	c2992 <atan+0x5a>
   c2ba6:	462b      	mov	r3, r5
   c2ba8:	4932      	ldr	r1, [pc, #200]	; (c2c74 <atan+0x33c>)
   c2baa:	ee10 2a10 	vmov	r2, s0
   c2bae:	2000      	movs	r0, #0
   c2bb0:	f000 fcec 	bl	c358c <__aeabi_ddiv>
   c2bb4:	f04f 0b03 	mov.w	fp, #3
   c2bb8:	4604      	mov	r4, r0
   c2bba:	460d      	mov	r5, r1
   c2bbc:	e6e9      	b.n	c2992 <atan+0x5a>
   c2bbe:	4b29      	ldr	r3, [pc, #164]	; (c2c64 <atan+0x32c>)
   c2bc0:	2200      	movs	r2, #0
   c2bc2:	4629      	mov	r1, r5
   c2bc4:	ee10 0a10 	vmov	r0, s0
   c2bc8:	f000 f9fe 	bl	c2fc8 <__aeabi_dsub>
   c2bcc:	4602      	mov	r2, r0
   c2bce:	460b      	mov	r3, r1
   c2bd0:	4620      	mov	r0, r4
   c2bd2:	4629      	mov	r1, r5
   c2bd4:	f04f 0b01 	mov.w	fp, #1
   c2bd8:	4614      	mov	r4, r2
   c2bda:	461d      	mov	r5, r3
   c2bdc:	e7d6      	b.n	c2b8c <atan+0x254>
   c2bde:	bf00      	nop
   c2be0:	54442d18 	.word	0x54442d18
   c2be4:	3ff921fb 	.word	0x3ff921fb
   c2be8:	e322da11 	.word	0xe322da11
   c2bec:	3f90ad3a 	.word	0x3f90ad3a
   c2bf0:	24760deb 	.word	0x24760deb
   c2bf4:	3fa97b4b 	.word	0x3fa97b4b
   c2bf8:	a0d03d51 	.word	0xa0d03d51
   c2bfc:	3fb10d66 	.word	0x3fb10d66
   c2c00:	c54c206e 	.word	0xc54c206e
   c2c04:	3fb745cd 	.word	0x3fb745cd
   c2c08:	920083ff 	.word	0x920083ff
   c2c0c:	3fc24924 	.word	0x3fc24924
   c2c10:	5555550d 	.word	0x5555550d
   c2c14:	3fd55555 	.word	0x3fd55555
   c2c18:	2c6a6c2f 	.word	0x2c6a6c2f
   c2c1c:	bfa2b444 	.word	0xbfa2b444
   c2c20:	52defd9a 	.word	0x52defd9a
   c2c24:	3fadde2d 	.word	0x3fadde2d
   c2c28:	af749a6d 	.word	0xaf749a6d
   c2c2c:	3fb3b0f2 	.word	0x3fb3b0f2
   c2c30:	fe231671 	.word	0xfe231671
   c2c34:	3fbc71c6 	.word	0x3fbc71c6
   c2c38:	9998ebc4 	.word	0x9998ebc4
   c2c3c:	3fc99999 	.word	0x3fc99999
   c2c40:	8800759c 	.word	0x8800759c
   c2c44:	7e37e43c 	.word	0x7e37e43c
   c2c48:	54442d18 	.word	0x54442d18
   c2c4c:	bff921fb 	.word	0xbff921fb
   c2c50:	440fffff 	.word	0x440fffff
   c2c54:	7ff00000 	.word	0x7ff00000
   c2c58:	3fdbffff 	.word	0x3fdbffff
   c2c5c:	000c79c8 	.word	0x000c79c8
   c2c60:	000c79e8 	.word	0x000c79e8
   c2c64:	3ff00000 	.word	0x3ff00000
   c2c68:	3ff2ffff 	.word	0x3ff2ffff
   c2c6c:	40038000 	.word	0x40038000
   c2c70:	3ff80000 	.word	0x3ff80000
   c2c74:	bff00000 	.word	0xbff00000

000c2c78 <fabs>:
   c2c78:	ec51 0b10 	vmov	r0, r1, d0
   c2c7c:	ee10 2a10 	vmov	r2, s0
   c2c80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c2c84:	ec43 2b10 	vmov	d0, r2, r3
   c2c88:	4770      	bx	lr
   c2c8a:	bf00      	nop

000c2c8c <atanf>:
   c2c8c:	b538      	push	{r3, r4, r5, lr}
   c2c8e:	ee10 5a10 	vmov	r5, s0
   c2c92:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c2c96:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c2c9a:	eef0 7a40 	vmov.f32	s15, s0
   c2c9e:	db0b      	blt.n	c2cb8 <atanf+0x2c>
   c2ca0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2ca4:	dc5b      	bgt.n	c2d5e <atanf+0xd2>
   c2ca6:	eddf 7a53 	vldr	s15, [pc, #332]	; c2df4 <atanf+0x168>
   c2caa:	ed9f 0a53 	vldr	s0, [pc, #332]	; c2df8 <atanf+0x16c>
   c2cae:	2d00      	cmp	r5, #0
   c2cb0:	bfc8      	it	gt
   c2cb2:	eeb0 0a67 	vmovgt.f32	s0, s15
   c2cb6:	bd38      	pop	{r3, r4, r5, pc}
   c2cb8:	4b50      	ldr	r3, [pc, #320]	; (c2dfc <atanf+0x170>)
   c2cba:	429c      	cmp	r4, r3
   c2cbc:	dc5e      	bgt.n	c2d7c <atanf+0xf0>
   c2cbe:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c2cc2:	db4f      	blt.n	c2d64 <atanf+0xd8>
   c2cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2cc8:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c2ccc:	eddf 4a4c 	vldr	s9, [pc, #304]	; c2e00 <atanf+0x174>
   c2cd0:	eddf 5a4c 	vldr	s11, [pc, #304]	; c2e04 <atanf+0x178>
   c2cd4:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c2e08 <atanf+0x17c>
   c2cd8:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c2e0c <atanf+0x180>
   c2cdc:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c2ce0:	eeb0 6a66 	vmov.f32	s12, s13
   c2ce4:	eee7 5a24 	vfma.f32	s11, s14, s9
   c2ce8:	1c5a      	adds	r2, r3, #1
   c2cea:	eddf 4a49 	vldr	s9, [pc, #292]	; c2e10 <atanf+0x184>
   c2cee:	eddf 6a49 	vldr	s13, [pc, #292]	; c2e14 <atanf+0x188>
   c2cf2:	eea5 5a87 	vfma.f32	s10, s11, s14
   c2cf6:	eee7 6a24 	vfma.f32	s13, s14, s9
   c2cfa:	eddf 5a47 	vldr	s11, [pc, #284]	; c2e18 <atanf+0x18c>
   c2cfe:	eddf 4a47 	vldr	s9, [pc, #284]	; c2e1c <atanf+0x190>
   c2d02:	eee6 5a87 	vfma.f32	s11, s13, s14
   c2d06:	eea5 4a07 	vfma.f32	s8, s10, s14
   c2d0a:	ed9f 5a45 	vldr	s10, [pc, #276]	; c2e20 <atanf+0x194>
   c2d0e:	eddf 6a45 	vldr	s13, [pc, #276]	; c2e24 <atanf+0x198>
   c2d12:	eea5 5a87 	vfma.f32	s10, s11, s14
   c2d16:	eee4 4a07 	vfma.f32	s9, s8, s14
   c2d1a:	eddf 5a43 	vldr	s11, [pc, #268]	; c2e28 <atanf+0x19c>
   c2d1e:	eee4 6a87 	vfma.f32	s13, s9, s14
   c2d22:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2d26:	ee66 6a86 	vmul.f32	s13, s13, s12
   c2d2a:	ee25 7a87 	vmul.f32	s14, s11, s14
   c2d2e:	d03a      	beq.n	c2da6 <atanf+0x11a>
   c2d30:	4a3e      	ldr	r2, [pc, #248]	; (c2e2c <atanf+0x1a0>)
   c2d32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c2d36:	ee76 6a87 	vadd.f32	s13, s13, s14
   c2d3a:	ed92 0a00 	vldr	s0, [r2]
   c2d3e:	4a3c      	ldr	r2, [pc, #240]	; (c2e30 <atanf+0x1a4>)
   c2d40:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c2d44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c2d48:	2d00      	cmp	r5, #0
   c2d4a:	ed93 7a00 	vldr	s14, [r3]
   c2d4e:	ee70 7a67 	vsub.f32	s15, s0, s15
   c2d52:	ee37 0a67 	vsub.f32	s0, s14, s15
   c2d56:	daae      	bge.n	c2cb6 <atanf+0x2a>
   c2d58:	eeb1 0a40 	vneg.f32	s0, s0
   c2d5c:	bd38      	pop	{r3, r4, r5, pc}
   c2d5e:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2d62:	bd38      	pop	{r3, r4, r5, pc}
   c2d64:	ed9f 7a33 	vldr	s14, [pc, #204]	; c2e34 <atanf+0x1a8>
   c2d68:	ee30 7a07 	vadd.f32	s14, s0, s14
   c2d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c2d70:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c2d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2d78:	dda4      	ble.n	c2cc4 <atanf+0x38>
   c2d7a:	bd38      	pop	{r3, r4, r5, pc}
   c2d7c:	f000 f860 	bl	c2e40 <fabsf>
   c2d80:	4b2d      	ldr	r3, [pc, #180]	; (c2e38 <atanf+0x1ac>)
   c2d82:	429c      	cmp	r4, r3
   c2d84:	dc16      	bgt.n	c2db4 <atanf+0x128>
   c2d86:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c2d8a:	429c      	cmp	r4, r3
   c2d8c:	dc27      	bgt.n	c2dde <atanf+0x152>
   c2d8e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c2d92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c2d96:	eea0 7a27 	vfma.f32	s14, s0, s15
   c2d9a:	2300      	movs	r3, #0
   c2d9c:	ee30 0a27 	vadd.f32	s0, s0, s15
   c2da0:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2da4:	e790      	b.n	c2cc8 <atanf+0x3c>
   c2da6:	ee76 6a87 	vadd.f32	s13, s13, s14
   c2daa:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c2dae:	eeb0 0a67 	vmov.f32	s0, s15
   c2db2:	bd38      	pop	{r3, r4, r5, pc}
   c2db4:	4b21      	ldr	r3, [pc, #132]	; (c2e3c <atanf+0x1b0>)
   c2db6:	429c      	cmp	r4, r3
   c2db8:	dc0b      	bgt.n	c2dd2 <atanf+0x146>
   c2dba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c2dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c2dc2:	eea0 7a27 	vfma.f32	s14, s0, s15
   c2dc6:	2302      	movs	r3, #2
   c2dc8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2dcc:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c2dd0:	e77a      	b.n	c2cc8 <atanf+0x3c>
   c2dd2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c2dd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2dda:	2303      	movs	r3, #3
   c2ddc:	e774      	b.n	c2cc8 <atanf+0x3c>
   c2dde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c2de2:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2de6:	ee30 0a27 	vadd.f32	s0, s0, s15
   c2dea:	2301      	movs	r3, #1
   c2dec:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2df0:	e76a      	b.n	c2cc8 <atanf+0x3c>
   c2df2:	bf00      	nop
   c2df4:	3fc90fdb 	.word	0x3fc90fdb
   c2df8:	bfc90fdb 	.word	0xbfc90fdb
   c2dfc:	3edfffff 	.word	0x3edfffff
   c2e00:	3c8569d7 	.word	0x3c8569d7
   c2e04:	3d4bda59 	.word	0x3d4bda59
   c2e08:	3d886b35 	.word	0x3d886b35
   c2e0c:	3dba2e6e 	.word	0x3dba2e6e
   c2e10:	bd15a221 	.word	0xbd15a221
   c2e14:	bd6ef16b 	.word	0xbd6ef16b
   c2e18:	bd9d8795 	.word	0xbd9d8795
   c2e1c:	3e124925 	.word	0x3e124925
   c2e20:	bde38e38 	.word	0xbde38e38
   c2e24:	3eaaaaab 	.word	0x3eaaaaab
   c2e28:	be4ccccd 	.word	0xbe4ccccd
   c2e2c:	000c7a18 	.word	0x000c7a18
   c2e30:	000c7a08 	.word	0x000c7a08
   c2e34:	7149f2ca 	.word	0x7149f2ca
   c2e38:	3f97ffff 	.word	0x3f97ffff
   c2e3c:	401bffff 	.word	0x401bffff

000c2e40 <fabsf>:
   c2e40:	ee10 3a10 	vmov	r3, s0
   c2e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2e48:	ee00 3a10 	vmov	s0, r3
   c2e4c:	4770      	bx	lr
   c2e4e:	bf00      	nop

000c2e50 <floorf>:
   c2e50:	ee10 2a10 	vmov	r2, s0
   c2e54:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c2e58:	3b7f      	subs	r3, #127	; 0x7f
   c2e5a:	2b16      	cmp	r3, #22
   c2e5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c2e60:	dc28      	bgt.n	c2eb4 <floorf+0x64>
   c2e62:	2b00      	cmp	r3, #0
   c2e64:	db18      	blt.n	c2e98 <floorf+0x48>
   c2e66:	491a      	ldr	r1, [pc, #104]	; (c2ed0 <floorf+0x80>)
   c2e68:	4119      	asrs	r1, r3
   c2e6a:	420a      	tst	r2, r1
   c2e6c:	d021      	beq.n	c2eb2 <floorf+0x62>
   c2e6e:	eddf 7a19 	vldr	s15, [pc, #100]	; c2ed4 <floorf+0x84>
   c2e72:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c2e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2e7e:	dd18      	ble.n	c2eb2 <floorf+0x62>
   c2e80:	2a00      	cmp	r2, #0
   c2e82:	da04      	bge.n	c2e8e <floorf+0x3e>
   c2e84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c2e88:	fa40 f303 	asr.w	r3, r0, r3
   c2e8c:	441a      	add	r2, r3
   c2e8e:	ea22 0301 	bic.w	r3, r2, r1
   c2e92:	ee00 3a10 	vmov	s0, r3
   c2e96:	4770      	bx	lr
   c2e98:	eddf 7a0e 	vldr	s15, [pc, #56]	; c2ed4 <floorf+0x84>
   c2e9c:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c2ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2ea8:	dd03      	ble.n	c2eb2 <floorf+0x62>
   c2eaa:	2a00      	cmp	r2, #0
   c2eac:	db08      	blt.n	c2ec0 <floorf+0x70>
   c2eae:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c2ed8 <floorf+0x88>
   c2eb2:	4770      	bx	lr
   c2eb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2eb8:	d3fb      	bcc.n	c2eb2 <floorf+0x62>
   c2eba:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2ebe:	4770      	bx	lr
   c2ec0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c2ec4:	2900      	cmp	r1, #0
   c2ec6:	bf18      	it	ne
   c2ec8:	eeb0 0a67 	vmovne.f32	s0, s15
   c2ecc:	4770      	bx	lr
   c2ece:	bf00      	nop
   c2ed0:	007fffff 	.word	0x007fffff
   c2ed4:	7149f2ca 	.word	0x7149f2ca
   c2ed8:	00000000 	.word	0x00000000

000c2edc <scalbnf>:
   c2edc:	b082      	sub	sp, #8
   c2ede:	ed8d 0a01 	vstr	s0, [sp, #4]
   c2ee2:	9b01      	ldr	r3, [sp, #4]
   c2ee4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c2ee8:	d02a      	beq.n	c2f40 <scalbnf+0x64>
   c2eea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c2eee:	d223      	bcs.n	c2f38 <scalbnf+0x5c>
   c2ef0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c2ef4:	d128      	bne.n	c2f48 <scalbnf+0x6c>
   c2ef6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2efa:	eddf 7a2a 	vldr	s15, [pc, #168]	; c2fa4 <scalbnf+0xc8>
   c2efe:	4b2a      	ldr	r3, [pc, #168]	; (c2fa8 <scalbnf+0xcc>)
   c2f00:	ee67 7a27 	vmul.f32	s15, s14, s15
   c2f04:	4298      	cmp	r0, r3
   c2f06:	edcd 7a01 	vstr	s15, [sp, #4]
   c2f0a:	db37      	blt.n	c2f7c <scalbnf+0xa0>
   c2f0c:	9b01      	ldr	r3, [sp, #4]
   c2f0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c2f12:	3a19      	subs	r2, #25
   c2f14:	4402      	add	r2, r0
   c2f16:	2afe      	cmp	r2, #254	; 0xfe
   c2f18:	dd1a      	ble.n	c2f50 <scalbnf+0x74>
   c2f1a:	ed9f 0a24 	vldr	s0, [pc, #144]	; c2fac <scalbnf+0xd0>
   c2f1e:	ed9f 7a24 	vldr	s14, [pc, #144]	; c2fb0 <scalbnf+0xd4>
   c2f22:	9b01      	ldr	r3, [sp, #4]
   c2f24:	2b00      	cmp	r3, #0
   c2f26:	eef0 7a40 	vmov.f32	s15, s0
   c2f2a:	bfb8      	it	lt
   c2f2c:	eeb0 0a47 	vmovlt.f32	s0, s14
   c2f30:	ee20 0a27 	vmul.f32	s0, s0, s15
   c2f34:	b002      	add	sp, #8
   c2f36:	4770      	bx	lr
   c2f38:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2f3c:	b002      	add	sp, #8
   c2f3e:	4770      	bx	lr
   c2f40:	ed9d 0a01 	vldr	s0, [sp, #4]
   c2f44:	b002      	add	sp, #8
   c2f46:	4770      	bx	lr
   c2f48:	0dd2      	lsrs	r2, r2, #23
   c2f4a:	4402      	add	r2, r0
   c2f4c:	2afe      	cmp	r2, #254	; 0xfe
   c2f4e:	dce4      	bgt.n	c2f1a <scalbnf+0x3e>
   c2f50:	2a00      	cmp	r2, #0
   c2f52:	dc0b      	bgt.n	c2f6c <scalbnf+0x90>
   c2f54:	f112 0f16 	cmn.w	r2, #22
   c2f58:	da17      	bge.n	c2f8a <scalbnf+0xae>
   c2f5a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c2f5e:	4298      	cmp	r0, r3
   c2f60:	dcdb      	bgt.n	c2f1a <scalbnf+0x3e>
   c2f62:	ed9f 0a14 	vldr	s0, [pc, #80]	; c2fb4 <scalbnf+0xd8>
   c2f66:	ed9f 7a14 	vldr	s14, [pc, #80]	; c2fb8 <scalbnf+0xdc>
   c2f6a:	e7da      	b.n	c2f22 <scalbnf+0x46>
   c2f6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c2f70:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c2f74:	ee00 3a10 	vmov	s0, r3
   c2f78:	b002      	add	sp, #8
   c2f7a:	4770      	bx	lr
   c2f7c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c2fb4 <scalbnf+0xd8>
   c2f80:	eddd 7a01 	vldr	s15, [sp, #4]
   c2f84:	ee27 0a80 	vmul.f32	s0, s15, s0
   c2f88:	e7d8      	b.n	c2f3c <scalbnf+0x60>
   c2f8a:	3219      	adds	r2, #25
   c2f8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c2f90:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c2f94:	eddf 7a09 	vldr	s15, [pc, #36]	; c2fbc <scalbnf+0xe0>
   c2f98:	ee07 3a10 	vmov	s14, r3
   c2f9c:	ee27 0a27 	vmul.f32	s0, s14, s15
   c2fa0:	e7cc      	b.n	c2f3c <scalbnf+0x60>
   c2fa2:	bf00      	nop
   c2fa4:	4c000000 	.word	0x4c000000
   c2fa8:	ffff3cb0 	.word	0xffff3cb0
   c2fac:	7149f2ca 	.word	0x7149f2ca
   c2fb0:	f149f2ca 	.word	0xf149f2ca
   c2fb4:	0da24260 	.word	0x0da24260
   c2fb8:	8da24260 	.word	0x8da24260
   c2fbc:	33000000 	.word	0x33000000

000c2fc0 <__aeabi_drsub>:
   c2fc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c2fc4:	e002      	b.n	c2fcc <__adddf3>
   c2fc6:	bf00      	nop

000c2fc8 <__aeabi_dsub>:
   c2fc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c2fcc <__adddf3>:
   c2fcc:	b530      	push	{r4, r5, lr}
   c2fce:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c2fd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c2fd6:	ea94 0f05 	teq	r4, r5
   c2fda:	bf08      	it	eq
   c2fdc:	ea90 0f02 	teqeq	r0, r2
   c2fe0:	bf1f      	itttt	ne
   c2fe2:	ea54 0c00 	orrsne.w	ip, r4, r0
   c2fe6:	ea55 0c02 	orrsne.w	ip, r5, r2
   c2fea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c2fee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c2ff2:	f000 80e2 	beq.w	c31ba <__adddf3+0x1ee>
   c2ff6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c2ffa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c2ffe:	bfb8      	it	lt
   c3000:	426d      	neglt	r5, r5
   c3002:	dd0c      	ble.n	c301e <__adddf3+0x52>
   c3004:	442c      	add	r4, r5
   c3006:	ea80 0202 	eor.w	r2, r0, r2
   c300a:	ea81 0303 	eor.w	r3, r1, r3
   c300e:	ea82 0000 	eor.w	r0, r2, r0
   c3012:	ea83 0101 	eor.w	r1, r3, r1
   c3016:	ea80 0202 	eor.w	r2, r0, r2
   c301a:	ea81 0303 	eor.w	r3, r1, r3
   c301e:	2d36      	cmp	r5, #54	; 0x36
   c3020:	bf88      	it	hi
   c3022:	bd30      	pophi	{r4, r5, pc}
   c3024:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3028:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c302c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3030:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3034:	d002      	beq.n	c303c <__adddf3+0x70>
   c3036:	4240      	negs	r0, r0
   c3038:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c303c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3040:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3044:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3048:	d002      	beq.n	c3050 <__adddf3+0x84>
   c304a:	4252      	negs	r2, r2
   c304c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3050:	ea94 0f05 	teq	r4, r5
   c3054:	f000 80a7 	beq.w	c31a6 <__adddf3+0x1da>
   c3058:	f1a4 0401 	sub.w	r4, r4, #1
   c305c:	f1d5 0e20 	rsbs	lr, r5, #32
   c3060:	db0d      	blt.n	c307e <__adddf3+0xb2>
   c3062:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3066:	fa22 f205 	lsr.w	r2, r2, r5
   c306a:	1880      	adds	r0, r0, r2
   c306c:	f141 0100 	adc.w	r1, r1, #0
   c3070:	fa03 f20e 	lsl.w	r2, r3, lr
   c3074:	1880      	adds	r0, r0, r2
   c3076:	fa43 f305 	asr.w	r3, r3, r5
   c307a:	4159      	adcs	r1, r3
   c307c:	e00e      	b.n	c309c <__adddf3+0xd0>
   c307e:	f1a5 0520 	sub.w	r5, r5, #32
   c3082:	f10e 0e20 	add.w	lr, lr, #32
   c3086:	2a01      	cmp	r2, #1
   c3088:	fa03 fc0e 	lsl.w	ip, r3, lr
   c308c:	bf28      	it	cs
   c308e:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3092:	fa43 f305 	asr.w	r3, r3, r5
   c3096:	18c0      	adds	r0, r0, r3
   c3098:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c309c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c30a0:	d507      	bpl.n	c30b2 <__adddf3+0xe6>
   c30a2:	f04f 0e00 	mov.w	lr, #0
   c30a6:	f1dc 0c00 	rsbs	ip, ip, #0
   c30aa:	eb7e 0000 	sbcs.w	r0, lr, r0
   c30ae:	eb6e 0101 	sbc.w	r1, lr, r1
   c30b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c30b6:	d31b      	bcc.n	c30f0 <__adddf3+0x124>
   c30b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c30bc:	d30c      	bcc.n	c30d8 <__adddf3+0x10c>
   c30be:	0849      	lsrs	r1, r1, #1
   c30c0:	ea5f 0030 	movs.w	r0, r0, rrx
   c30c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c30c8:	f104 0401 	add.w	r4, r4, #1
   c30cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c30d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c30d4:	f080 809a 	bcs.w	c320c <__adddf3+0x240>
   c30d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c30dc:	bf08      	it	eq
   c30de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c30e2:	f150 0000 	adcs.w	r0, r0, #0
   c30e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c30ea:	ea41 0105 	orr.w	r1, r1, r5
   c30ee:	bd30      	pop	{r4, r5, pc}
   c30f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c30f4:	4140      	adcs	r0, r0
   c30f6:	eb41 0101 	adc.w	r1, r1, r1
   c30fa:	3c01      	subs	r4, #1
   c30fc:	bf28      	it	cs
   c30fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3102:	d2e9      	bcs.n	c30d8 <__adddf3+0x10c>
   c3104:	f091 0f00 	teq	r1, #0
   c3108:	bf04      	itt	eq
   c310a:	4601      	moveq	r1, r0
   c310c:	2000      	moveq	r0, #0
   c310e:	fab1 f381 	clz	r3, r1
   c3112:	bf08      	it	eq
   c3114:	3320      	addeq	r3, #32
   c3116:	f1a3 030b 	sub.w	r3, r3, #11
   c311a:	f1b3 0220 	subs.w	r2, r3, #32
   c311e:	da0c      	bge.n	c313a <__adddf3+0x16e>
   c3120:	320c      	adds	r2, #12
   c3122:	dd08      	ble.n	c3136 <__adddf3+0x16a>
   c3124:	f102 0c14 	add.w	ip, r2, #20
   c3128:	f1c2 020c 	rsb	r2, r2, #12
   c312c:	fa01 f00c 	lsl.w	r0, r1, ip
   c3130:	fa21 f102 	lsr.w	r1, r1, r2
   c3134:	e00c      	b.n	c3150 <__adddf3+0x184>
   c3136:	f102 0214 	add.w	r2, r2, #20
   c313a:	bfd8      	it	le
   c313c:	f1c2 0c20 	rsble	ip, r2, #32
   c3140:	fa01 f102 	lsl.w	r1, r1, r2
   c3144:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3148:	bfdc      	itt	le
   c314a:	ea41 010c 	orrle.w	r1, r1, ip
   c314e:	4090      	lslle	r0, r2
   c3150:	1ae4      	subs	r4, r4, r3
   c3152:	bfa2      	ittt	ge
   c3154:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3158:	4329      	orrge	r1, r5
   c315a:	bd30      	popge	{r4, r5, pc}
   c315c:	ea6f 0404 	mvn.w	r4, r4
   c3160:	3c1f      	subs	r4, #31
   c3162:	da1c      	bge.n	c319e <__adddf3+0x1d2>
   c3164:	340c      	adds	r4, #12
   c3166:	dc0e      	bgt.n	c3186 <__adddf3+0x1ba>
   c3168:	f104 0414 	add.w	r4, r4, #20
   c316c:	f1c4 0220 	rsb	r2, r4, #32
   c3170:	fa20 f004 	lsr.w	r0, r0, r4
   c3174:	fa01 f302 	lsl.w	r3, r1, r2
   c3178:	ea40 0003 	orr.w	r0, r0, r3
   c317c:	fa21 f304 	lsr.w	r3, r1, r4
   c3180:	ea45 0103 	orr.w	r1, r5, r3
   c3184:	bd30      	pop	{r4, r5, pc}
   c3186:	f1c4 040c 	rsb	r4, r4, #12
   c318a:	f1c4 0220 	rsb	r2, r4, #32
   c318e:	fa20 f002 	lsr.w	r0, r0, r2
   c3192:	fa01 f304 	lsl.w	r3, r1, r4
   c3196:	ea40 0003 	orr.w	r0, r0, r3
   c319a:	4629      	mov	r1, r5
   c319c:	bd30      	pop	{r4, r5, pc}
   c319e:	fa21 f004 	lsr.w	r0, r1, r4
   c31a2:	4629      	mov	r1, r5
   c31a4:	bd30      	pop	{r4, r5, pc}
   c31a6:	f094 0f00 	teq	r4, #0
   c31aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c31ae:	bf06      	itte	eq
   c31b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c31b4:	3401      	addeq	r4, #1
   c31b6:	3d01      	subne	r5, #1
   c31b8:	e74e      	b.n	c3058 <__adddf3+0x8c>
   c31ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c31be:	bf18      	it	ne
   c31c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c31c4:	d029      	beq.n	c321a <__adddf3+0x24e>
   c31c6:	ea94 0f05 	teq	r4, r5
   c31ca:	bf08      	it	eq
   c31cc:	ea90 0f02 	teqeq	r0, r2
   c31d0:	d005      	beq.n	c31de <__adddf3+0x212>
   c31d2:	ea54 0c00 	orrs.w	ip, r4, r0
   c31d6:	bf04      	itt	eq
   c31d8:	4619      	moveq	r1, r3
   c31da:	4610      	moveq	r0, r2
   c31dc:	bd30      	pop	{r4, r5, pc}
   c31de:	ea91 0f03 	teq	r1, r3
   c31e2:	bf1e      	ittt	ne
   c31e4:	2100      	movne	r1, #0
   c31e6:	2000      	movne	r0, #0
   c31e8:	bd30      	popne	{r4, r5, pc}
   c31ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c31ee:	d105      	bne.n	c31fc <__adddf3+0x230>
   c31f0:	0040      	lsls	r0, r0, #1
   c31f2:	4149      	adcs	r1, r1
   c31f4:	bf28      	it	cs
   c31f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c31fa:	bd30      	pop	{r4, r5, pc}
   c31fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3200:	bf3c      	itt	cc
   c3202:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3206:	bd30      	popcc	{r4, r5, pc}
   c3208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c320c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3210:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3214:	f04f 0000 	mov.w	r0, #0
   c3218:	bd30      	pop	{r4, r5, pc}
   c321a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c321e:	bf1a      	itte	ne
   c3220:	4619      	movne	r1, r3
   c3222:	4610      	movne	r0, r2
   c3224:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3228:	bf1c      	itt	ne
   c322a:	460b      	movne	r3, r1
   c322c:	4602      	movne	r2, r0
   c322e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3232:	bf06      	itte	eq
   c3234:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3238:	ea91 0f03 	teqeq	r1, r3
   c323c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3240:	bd30      	pop	{r4, r5, pc}
   c3242:	bf00      	nop

000c3244 <__aeabi_ui2d>:
   c3244:	f090 0f00 	teq	r0, #0
   c3248:	bf04      	itt	eq
   c324a:	2100      	moveq	r1, #0
   c324c:	4770      	bxeq	lr
   c324e:	b530      	push	{r4, r5, lr}
   c3250:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3254:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3258:	f04f 0500 	mov.w	r5, #0
   c325c:	f04f 0100 	mov.w	r1, #0
   c3260:	e750      	b.n	c3104 <__adddf3+0x138>
   c3262:	bf00      	nop

000c3264 <__aeabi_i2d>:
   c3264:	f090 0f00 	teq	r0, #0
   c3268:	bf04      	itt	eq
   c326a:	2100      	moveq	r1, #0
   c326c:	4770      	bxeq	lr
   c326e:	b530      	push	{r4, r5, lr}
   c3270:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3274:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3278:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c327c:	bf48      	it	mi
   c327e:	4240      	negmi	r0, r0
   c3280:	f04f 0100 	mov.w	r1, #0
   c3284:	e73e      	b.n	c3104 <__adddf3+0x138>
   c3286:	bf00      	nop

000c3288 <__aeabi_f2d>:
   c3288:	0042      	lsls	r2, r0, #1
   c328a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c328e:	ea4f 0131 	mov.w	r1, r1, rrx
   c3292:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3296:	bf1f      	itttt	ne
   c3298:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c329c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c32a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c32a4:	4770      	bxne	lr
   c32a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c32aa:	bf08      	it	eq
   c32ac:	4770      	bxeq	lr
   c32ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c32b2:	bf04      	itt	eq
   c32b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c32b8:	4770      	bxeq	lr
   c32ba:	b530      	push	{r4, r5, lr}
   c32bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   c32c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c32c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c32c8:	e71c      	b.n	c3104 <__adddf3+0x138>
   c32ca:	bf00      	nop

000c32cc <__aeabi_ul2d>:
   c32cc:	ea50 0201 	orrs.w	r2, r0, r1
   c32d0:	bf08      	it	eq
   c32d2:	4770      	bxeq	lr
   c32d4:	b530      	push	{r4, r5, lr}
   c32d6:	f04f 0500 	mov.w	r5, #0
   c32da:	e00a      	b.n	c32f2 <__aeabi_l2d+0x16>

000c32dc <__aeabi_l2d>:
   c32dc:	ea50 0201 	orrs.w	r2, r0, r1
   c32e0:	bf08      	it	eq
   c32e2:	4770      	bxeq	lr
   c32e4:	b530      	push	{r4, r5, lr}
   c32e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c32ea:	d502      	bpl.n	c32f2 <__aeabi_l2d+0x16>
   c32ec:	4240      	negs	r0, r0
   c32ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c32f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c32f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c32fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c32fe:	f43f aed8 	beq.w	c30b2 <__adddf3+0xe6>
   c3302:	f04f 0203 	mov.w	r2, #3
   c3306:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c330a:	bf18      	it	ne
   c330c:	3203      	addne	r2, #3
   c330e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3312:	bf18      	it	ne
   c3314:	3203      	addne	r2, #3
   c3316:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c331a:	f1c2 0320 	rsb	r3, r2, #32
   c331e:	fa00 fc03 	lsl.w	ip, r0, r3
   c3322:	fa20 f002 	lsr.w	r0, r0, r2
   c3326:	fa01 fe03 	lsl.w	lr, r1, r3
   c332a:	ea40 000e 	orr.w	r0, r0, lr
   c332e:	fa21 f102 	lsr.w	r1, r1, r2
   c3332:	4414      	add	r4, r2
   c3334:	e6bd      	b.n	c30b2 <__adddf3+0xe6>
   c3336:	bf00      	nop

000c3338 <__aeabi_dmul>:
   c3338:	b570      	push	{r4, r5, r6, lr}
   c333a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c333e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3342:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3346:	bf1d      	ittte	ne
   c3348:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c334c:	ea94 0f0c 	teqne	r4, ip
   c3350:	ea95 0f0c 	teqne	r5, ip
   c3354:	f000 f8de 	bleq	c3514 <__aeabi_dmul+0x1dc>
   c3358:	442c      	add	r4, r5
   c335a:	ea81 0603 	eor.w	r6, r1, r3
   c335e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3362:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3366:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c336a:	bf18      	it	ne
   c336c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3378:	d038      	beq.n	c33ec <__aeabi_dmul+0xb4>
   c337a:	fba0 ce02 	umull	ip, lr, r0, r2
   c337e:	f04f 0500 	mov.w	r5, #0
   c3382:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3386:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c338a:	fbe0 e503 	umlal	lr, r5, r0, r3
   c338e:	f04f 0600 	mov.w	r6, #0
   c3392:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3396:	f09c 0f00 	teq	ip, #0
   c339a:	bf18      	it	ne
   c339c:	f04e 0e01 	orrne.w	lr, lr, #1
   c33a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c33a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c33a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c33ac:	d204      	bcs.n	c33b8 <__aeabi_dmul+0x80>
   c33ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c33b2:	416d      	adcs	r5, r5
   c33b4:	eb46 0606 	adc.w	r6, r6, r6
   c33b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c33bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c33c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c33c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c33c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c33cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c33d0:	bf88      	it	hi
   c33d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c33d6:	d81e      	bhi.n	c3416 <__aeabi_dmul+0xde>
   c33d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c33dc:	bf08      	it	eq
   c33de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c33e2:	f150 0000 	adcs.w	r0, r0, #0
   c33e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c33ea:	bd70      	pop	{r4, r5, r6, pc}
   c33ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c33f0:	ea46 0101 	orr.w	r1, r6, r1
   c33f4:	ea40 0002 	orr.w	r0, r0, r2
   c33f8:	ea81 0103 	eor.w	r1, r1, r3
   c33fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3400:	bfc2      	ittt	gt
   c3402:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3406:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c340a:	bd70      	popgt	{r4, r5, r6, pc}
   c340c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3410:	f04f 0e00 	mov.w	lr, #0
   c3414:	3c01      	subs	r4, #1
   c3416:	f300 80ab 	bgt.w	c3570 <__aeabi_dmul+0x238>
   c341a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c341e:	bfde      	ittt	le
   c3420:	2000      	movle	r0, #0
   c3422:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3426:	bd70      	pople	{r4, r5, r6, pc}
   c3428:	f1c4 0400 	rsb	r4, r4, #0
   c342c:	3c20      	subs	r4, #32
   c342e:	da35      	bge.n	c349c <__aeabi_dmul+0x164>
   c3430:	340c      	adds	r4, #12
   c3432:	dc1b      	bgt.n	c346c <__aeabi_dmul+0x134>
   c3434:	f104 0414 	add.w	r4, r4, #20
   c3438:	f1c4 0520 	rsb	r5, r4, #32
   c343c:	fa00 f305 	lsl.w	r3, r0, r5
   c3440:	fa20 f004 	lsr.w	r0, r0, r4
   c3444:	fa01 f205 	lsl.w	r2, r1, r5
   c3448:	ea40 0002 	orr.w	r0, r0, r2
   c344c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3454:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3458:	fa21 f604 	lsr.w	r6, r1, r4
   c345c:	eb42 0106 	adc.w	r1, r2, r6
   c3460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3464:	bf08      	it	eq
   c3466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c346a:	bd70      	pop	{r4, r5, r6, pc}
   c346c:	f1c4 040c 	rsb	r4, r4, #12
   c3470:	f1c4 0520 	rsb	r5, r4, #32
   c3474:	fa00 f304 	lsl.w	r3, r0, r4
   c3478:	fa20 f005 	lsr.w	r0, r0, r5
   c347c:	fa01 f204 	lsl.w	r2, r1, r4
   c3480:	ea40 0002 	orr.w	r0, r0, r2
   c3484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3488:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c348c:	f141 0100 	adc.w	r1, r1, #0
   c3490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3494:	bf08      	it	eq
   c3496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c349a:	bd70      	pop	{r4, r5, r6, pc}
   c349c:	f1c4 0520 	rsb	r5, r4, #32
   c34a0:	fa00 f205 	lsl.w	r2, r0, r5
   c34a4:	ea4e 0e02 	orr.w	lr, lr, r2
   c34a8:	fa20 f304 	lsr.w	r3, r0, r4
   c34ac:	fa01 f205 	lsl.w	r2, r1, r5
   c34b0:	ea43 0302 	orr.w	r3, r3, r2
   c34b4:	fa21 f004 	lsr.w	r0, r1, r4
   c34b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c34bc:	fa21 f204 	lsr.w	r2, r1, r4
   c34c0:	ea20 0002 	bic.w	r0, r0, r2
   c34c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c34c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c34cc:	bf08      	it	eq
   c34ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c34d2:	bd70      	pop	{r4, r5, r6, pc}
   c34d4:	f094 0f00 	teq	r4, #0
   c34d8:	d10f      	bne.n	c34fa <__aeabi_dmul+0x1c2>
   c34da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c34de:	0040      	lsls	r0, r0, #1
   c34e0:	eb41 0101 	adc.w	r1, r1, r1
   c34e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c34e8:	bf08      	it	eq
   c34ea:	3c01      	subeq	r4, #1
   c34ec:	d0f7      	beq.n	c34de <__aeabi_dmul+0x1a6>
   c34ee:	ea41 0106 	orr.w	r1, r1, r6
   c34f2:	f095 0f00 	teq	r5, #0
   c34f6:	bf18      	it	ne
   c34f8:	4770      	bxne	lr
   c34fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c34fe:	0052      	lsls	r2, r2, #1
   c3500:	eb43 0303 	adc.w	r3, r3, r3
   c3504:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3508:	bf08      	it	eq
   c350a:	3d01      	subeq	r5, #1
   c350c:	d0f7      	beq.n	c34fe <__aeabi_dmul+0x1c6>
   c350e:	ea43 0306 	orr.w	r3, r3, r6
   c3512:	4770      	bx	lr
   c3514:	ea94 0f0c 	teq	r4, ip
   c3518:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c351c:	bf18      	it	ne
   c351e:	ea95 0f0c 	teqne	r5, ip
   c3522:	d00c      	beq.n	c353e <__aeabi_dmul+0x206>
   c3524:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3528:	bf18      	it	ne
   c352a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c352e:	d1d1      	bne.n	c34d4 <__aeabi_dmul+0x19c>
   c3530:	ea81 0103 	eor.w	r1, r1, r3
   c3534:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3538:	f04f 0000 	mov.w	r0, #0
   c353c:	bd70      	pop	{r4, r5, r6, pc}
   c353e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3542:	bf06      	itte	eq
   c3544:	4610      	moveq	r0, r2
   c3546:	4619      	moveq	r1, r3
   c3548:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c354c:	d019      	beq.n	c3582 <__aeabi_dmul+0x24a>
   c354e:	ea94 0f0c 	teq	r4, ip
   c3552:	d102      	bne.n	c355a <__aeabi_dmul+0x222>
   c3554:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c3558:	d113      	bne.n	c3582 <__aeabi_dmul+0x24a>
   c355a:	ea95 0f0c 	teq	r5, ip
   c355e:	d105      	bne.n	c356c <__aeabi_dmul+0x234>
   c3560:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c3564:	bf1c      	itt	ne
   c3566:	4610      	movne	r0, r2
   c3568:	4619      	movne	r1, r3
   c356a:	d10a      	bne.n	c3582 <__aeabi_dmul+0x24a>
   c356c:	ea81 0103 	eor.w	r1, r1, r3
   c3570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3574:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3578:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c357c:	f04f 0000 	mov.w	r0, #0
   c3580:	bd70      	pop	{r4, r5, r6, pc}
   c3582:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3586:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c358a:	bd70      	pop	{r4, r5, r6, pc}

000c358c <__aeabi_ddiv>:
   c358c:	b570      	push	{r4, r5, r6, lr}
   c358e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3592:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3596:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c359a:	bf1d      	ittte	ne
   c359c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c35a0:	ea94 0f0c 	teqne	r4, ip
   c35a4:	ea95 0f0c 	teqne	r5, ip
   c35a8:	f000 f8a7 	bleq	c36fa <__aeabi_ddiv+0x16e>
   c35ac:	eba4 0405 	sub.w	r4, r4, r5
   c35b0:	ea81 0e03 	eor.w	lr, r1, r3
   c35b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c35b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c35bc:	f000 8088 	beq.w	c36d0 <__aeabi_ddiv+0x144>
   c35c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c35c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c35c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c35cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c35d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c35d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c35d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c35dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c35e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c35e4:	429d      	cmp	r5, r3
   c35e6:	bf08      	it	eq
   c35e8:	4296      	cmpeq	r6, r2
   c35ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c35ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c35f2:	d202      	bcs.n	c35fa <__aeabi_ddiv+0x6e>
   c35f4:	085b      	lsrs	r3, r3, #1
   c35f6:	ea4f 0232 	mov.w	r2, r2, rrx
   c35fa:	1ab6      	subs	r6, r6, r2
   c35fc:	eb65 0503 	sbc.w	r5, r5, r3
   c3600:	085b      	lsrs	r3, r3, #1
   c3602:	ea4f 0232 	mov.w	r2, r2, rrx
   c3606:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c360a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c360e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3612:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3616:	bf22      	ittt	cs
   c3618:	1ab6      	subcs	r6, r6, r2
   c361a:	4675      	movcs	r5, lr
   c361c:	ea40 000c 	orrcs.w	r0, r0, ip
   c3620:	085b      	lsrs	r3, r3, #1
   c3622:	ea4f 0232 	mov.w	r2, r2, rrx
   c3626:	ebb6 0e02 	subs.w	lr, r6, r2
   c362a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c362e:	bf22      	ittt	cs
   c3630:	1ab6      	subcs	r6, r6, r2
   c3632:	4675      	movcs	r5, lr
   c3634:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c3638:	085b      	lsrs	r3, r3, #1
   c363a:	ea4f 0232 	mov.w	r2, r2, rrx
   c363e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3642:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3646:	bf22      	ittt	cs
   c3648:	1ab6      	subcs	r6, r6, r2
   c364a:	4675      	movcs	r5, lr
   c364c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c3650:	085b      	lsrs	r3, r3, #1
   c3652:	ea4f 0232 	mov.w	r2, r2, rrx
   c3656:	ebb6 0e02 	subs.w	lr, r6, r2
   c365a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c365e:	bf22      	ittt	cs
   c3660:	1ab6      	subcs	r6, r6, r2
   c3662:	4675      	movcs	r5, lr
   c3664:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c3668:	ea55 0e06 	orrs.w	lr, r5, r6
   c366c:	d018      	beq.n	c36a0 <__aeabi_ddiv+0x114>
   c366e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c3672:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c3676:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c367a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c367e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c3682:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c3686:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c368a:	d1c0      	bne.n	c360e <__aeabi_ddiv+0x82>
   c368c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3690:	d10b      	bne.n	c36aa <__aeabi_ddiv+0x11e>
   c3692:	ea41 0100 	orr.w	r1, r1, r0
   c3696:	f04f 0000 	mov.w	r0, #0
   c369a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c369e:	e7b6      	b.n	c360e <__aeabi_ddiv+0x82>
   c36a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c36a4:	bf04      	itt	eq
   c36a6:	4301      	orreq	r1, r0
   c36a8:	2000      	moveq	r0, #0
   c36aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c36ae:	bf88      	it	hi
   c36b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c36b4:	f63f aeaf 	bhi.w	c3416 <__aeabi_dmul+0xde>
   c36b8:	ebb5 0c03 	subs.w	ip, r5, r3
   c36bc:	bf04      	itt	eq
   c36be:	ebb6 0c02 	subseq.w	ip, r6, r2
   c36c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c36c6:	f150 0000 	adcs.w	r0, r0, #0
   c36ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c36ce:	bd70      	pop	{r4, r5, r6, pc}
   c36d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c36d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c36d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c36dc:	bfc2      	ittt	gt
   c36de:	ebd4 050c 	rsbsgt	r5, r4, ip
   c36e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c36e6:	bd70      	popgt	{r4, r5, r6, pc}
   c36e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c36ec:	f04f 0e00 	mov.w	lr, #0
   c36f0:	3c01      	subs	r4, #1
   c36f2:	e690      	b.n	c3416 <__aeabi_dmul+0xde>
   c36f4:	ea45 0e06 	orr.w	lr, r5, r6
   c36f8:	e68d      	b.n	c3416 <__aeabi_dmul+0xde>
   c36fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c36fe:	ea94 0f0c 	teq	r4, ip
   c3702:	bf08      	it	eq
   c3704:	ea95 0f0c 	teqeq	r5, ip
   c3708:	f43f af3b 	beq.w	c3582 <__aeabi_dmul+0x24a>
   c370c:	ea94 0f0c 	teq	r4, ip
   c3710:	d10a      	bne.n	c3728 <__aeabi_ddiv+0x19c>
   c3712:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3716:	f47f af34 	bne.w	c3582 <__aeabi_dmul+0x24a>
   c371a:	ea95 0f0c 	teq	r5, ip
   c371e:	f47f af25 	bne.w	c356c <__aeabi_dmul+0x234>
   c3722:	4610      	mov	r0, r2
   c3724:	4619      	mov	r1, r3
   c3726:	e72c      	b.n	c3582 <__aeabi_dmul+0x24a>
   c3728:	ea95 0f0c 	teq	r5, ip
   c372c:	d106      	bne.n	c373c <__aeabi_ddiv+0x1b0>
   c372e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3732:	f43f aefd 	beq.w	c3530 <__aeabi_dmul+0x1f8>
   c3736:	4610      	mov	r0, r2
   c3738:	4619      	mov	r1, r3
   c373a:	e722      	b.n	c3582 <__aeabi_dmul+0x24a>
   c373c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3740:	bf18      	it	ne
   c3742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3746:	f47f aec5 	bne.w	c34d4 <__aeabi_dmul+0x19c>
   c374a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c374e:	f47f af0d 	bne.w	c356c <__aeabi_dmul+0x234>
   c3752:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c3756:	f47f aeeb 	bne.w	c3530 <__aeabi_dmul+0x1f8>
   c375a:	e712      	b.n	c3582 <__aeabi_dmul+0x24a>

000c375c <__gedf2>:
   c375c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c3760:	e006      	b.n	c3770 <__cmpdf2+0x4>
   c3762:	bf00      	nop

000c3764 <__ledf2>:
   c3764:	f04f 0c01 	mov.w	ip, #1
   c3768:	e002      	b.n	c3770 <__cmpdf2+0x4>
   c376a:	bf00      	nop

000c376c <__cmpdf2>:
   c376c:	f04f 0c01 	mov.w	ip, #1
   c3770:	f84d cd04 	str.w	ip, [sp, #-4]!
   c3774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c377c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3780:	bf18      	it	ne
   c3782:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c3786:	d01b      	beq.n	c37c0 <__cmpdf2+0x54>
   c3788:	b001      	add	sp, #4
   c378a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c378e:	bf0c      	ite	eq
   c3790:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c3794:	ea91 0f03 	teqne	r1, r3
   c3798:	bf02      	ittt	eq
   c379a:	ea90 0f02 	teqeq	r0, r2
   c379e:	2000      	moveq	r0, #0
   c37a0:	4770      	bxeq	lr
   c37a2:	f110 0f00 	cmn.w	r0, #0
   c37a6:	ea91 0f03 	teq	r1, r3
   c37aa:	bf58      	it	pl
   c37ac:	4299      	cmppl	r1, r3
   c37ae:	bf08      	it	eq
   c37b0:	4290      	cmpeq	r0, r2
   c37b2:	bf2c      	ite	cs
   c37b4:	17d8      	asrcs	r0, r3, #31
   c37b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c37ba:	f040 0001 	orr.w	r0, r0, #1
   c37be:	4770      	bx	lr
   c37c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c37c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c37c8:	d102      	bne.n	c37d0 <__cmpdf2+0x64>
   c37ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c37ce:	d107      	bne.n	c37e0 <__cmpdf2+0x74>
   c37d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c37d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c37d8:	d1d6      	bne.n	c3788 <__cmpdf2+0x1c>
   c37da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c37de:	d0d3      	beq.n	c3788 <__cmpdf2+0x1c>
   c37e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   c37e4:	4770      	bx	lr
   c37e6:	bf00      	nop

000c37e8 <__aeabi_cdrcmple>:
   c37e8:	4684      	mov	ip, r0
   c37ea:	4610      	mov	r0, r2
   c37ec:	4662      	mov	r2, ip
   c37ee:	468c      	mov	ip, r1
   c37f0:	4619      	mov	r1, r3
   c37f2:	4663      	mov	r3, ip
   c37f4:	e000      	b.n	c37f8 <__aeabi_cdcmpeq>
   c37f6:	bf00      	nop

000c37f8 <__aeabi_cdcmpeq>:
   c37f8:	b501      	push	{r0, lr}
   c37fa:	f7ff ffb7 	bl	c376c <__cmpdf2>
   c37fe:	2800      	cmp	r0, #0
   c3800:	bf48      	it	mi
   c3802:	f110 0f00 	cmnmi.w	r0, #0
   c3806:	bd01      	pop	{r0, pc}

000c3808 <__aeabi_dcmpeq>:
   c3808:	f84d ed08 	str.w	lr, [sp, #-8]!
   c380c:	f7ff fff4 	bl	c37f8 <__aeabi_cdcmpeq>
   c3810:	bf0c      	ite	eq
   c3812:	2001      	moveq	r0, #1
   c3814:	2000      	movne	r0, #0
   c3816:	f85d fb08 	ldr.w	pc, [sp], #8
   c381a:	bf00      	nop

000c381c <__aeabi_dcmplt>:
   c381c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3820:	f7ff ffea 	bl	c37f8 <__aeabi_cdcmpeq>
   c3824:	bf34      	ite	cc
   c3826:	2001      	movcc	r0, #1
   c3828:	2000      	movcs	r0, #0
   c382a:	f85d fb08 	ldr.w	pc, [sp], #8
   c382e:	bf00      	nop

000c3830 <__aeabi_dcmple>:
   c3830:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3834:	f7ff ffe0 	bl	c37f8 <__aeabi_cdcmpeq>
   c3838:	bf94      	ite	ls
   c383a:	2001      	movls	r0, #1
   c383c:	2000      	movhi	r0, #0
   c383e:	f85d fb08 	ldr.w	pc, [sp], #8
   c3842:	bf00      	nop

000c3844 <__aeabi_dcmpge>:
   c3844:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3848:	f7ff ffce 	bl	c37e8 <__aeabi_cdrcmple>
   c384c:	bf94      	ite	ls
   c384e:	2001      	movls	r0, #1
   c3850:	2000      	movhi	r0, #0
   c3852:	f85d fb08 	ldr.w	pc, [sp], #8
   c3856:	bf00      	nop

000c3858 <__aeabi_dcmpgt>:
   c3858:	f84d ed08 	str.w	lr, [sp, #-8]!
   c385c:	f7ff ffc4 	bl	c37e8 <__aeabi_cdrcmple>
   c3860:	bf34      	ite	cc
   c3862:	2001      	movcc	r0, #1
   c3864:	2000      	movcs	r0, #0
   c3866:	f85d fb08 	ldr.w	pc, [sp], #8
   c386a:	bf00      	nop

000c386c <__aeabi_dcmpun>:
   c386c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3870:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3874:	d102      	bne.n	c387c <__aeabi_dcmpun+0x10>
   c3876:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c387a:	d10a      	bne.n	c3892 <__aeabi_dcmpun+0x26>
   c387c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3884:	d102      	bne.n	c388c <__aeabi_dcmpun+0x20>
   c3886:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c388a:	d102      	bne.n	c3892 <__aeabi_dcmpun+0x26>
   c388c:	f04f 0000 	mov.w	r0, #0
   c3890:	4770      	bx	lr
   c3892:	f04f 0001 	mov.w	r0, #1
   c3896:	4770      	bx	lr

000c3898 <__aeabi_d2iz>:
   c3898:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c389c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c38a0:	d215      	bcs.n	c38ce <__aeabi_d2iz+0x36>
   c38a2:	d511      	bpl.n	c38c8 <__aeabi_d2iz+0x30>
   c38a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c38a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c38ac:	d912      	bls.n	c38d4 <__aeabi_d2iz+0x3c>
   c38ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c38b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c38b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c38ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c38be:	fa23 f002 	lsr.w	r0, r3, r2
   c38c2:	bf18      	it	ne
   c38c4:	4240      	negne	r0, r0
   c38c6:	4770      	bx	lr
   c38c8:	f04f 0000 	mov.w	r0, #0
   c38cc:	4770      	bx	lr
   c38ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c38d2:	d105      	bne.n	c38e0 <__aeabi_d2iz+0x48>
   c38d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c38d8:	bf08      	it	eq
   c38da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c38de:	4770      	bx	lr
   c38e0:	f04f 0000 	mov.w	r0, #0
   c38e4:	4770      	bx	lr
   c38e6:	bf00      	nop

000c38e8 <__aeabi_d2uiz>:
   c38e8:	004a      	lsls	r2, r1, #1
   c38ea:	d211      	bcs.n	c3910 <__aeabi_d2uiz+0x28>
   c38ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c38f0:	d211      	bcs.n	c3916 <__aeabi_d2uiz+0x2e>
   c38f2:	d50d      	bpl.n	c3910 <__aeabi_d2uiz+0x28>
   c38f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c38f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c38fc:	d40e      	bmi.n	c391c <__aeabi_d2uiz+0x34>
   c38fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c3906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c390a:	fa23 f002 	lsr.w	r0, r3, r2
   c390e:	4770      	bx	lr
   c3910:	f04f 0000 	mov.w	r0, #0
   c3914:	4770      	bx	lr
   c3916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c391a:	d102      	bne.n	c3922 <__aeabi_d2uiz+0x3a>
   c391c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c3920:	4770      	bx	lr
   c3922:	f04f 0000 	mov.w	r0, #0
   c3926:	4770      	bx	lr

000c3928 <__aeabi_d2f>:
   c3928:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c392c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c3930:	bf24      	itt	cs
   c3932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c3936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c393a:	d90d      	bls.n	c3958 <__aeabi_d2f+0x30>
   c393c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c3940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c3944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c3948:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c394c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c3950:	bf08      	it	eq
   c3952:	f020 0001 	biceq.w	r0, r0, #1
   c3956:	4770      	bx	lr
   c3958:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c395c:	d121      	bne.n	c39a2 <__aeabi_d2f+0x7a>
   c395e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c3962:	bfbc      	itt	lt
   c3964:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c3968:	4770      	bxlt	lr
   c396a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c396e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c3972:	f1c2 0218 	rsb	r2, r2, #24
   c3976:	f1c2 0c20 	rsb	ip, r2, #32
   c397a:	fa10 f30c 	lsls.w	r3, r0, ip
   c397e:	fa20 f002 	lsr.w	r0, r0, r2
   c3982:	bf18      	it	ne
   c3984:	f040 0001 	orrne.w	r0, r0, #1
   c3988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c398c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c3990:	fa03 fc0c 	lsl.w	ip, r3, ip
   c3994:	ea40 000c 	orr.w	r0, r0, ip
   c3998:	fa23 f302 	lsr.w	r3, r3, r2
   c399c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c39a0:	e7cc      	b.n	c393c <__aeabi_d2f+0x14>
   c39a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c39a6:	d107      	bne.n	c39b8 <__aeabi_d2f+0x90>
   c39a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c39ac:	bf1e      	ittt	ne
   c39ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c39b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c39b6:	4770      	bxne	lr
   c39b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c39bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c39c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c39c4:	4770      	bx	lr
   c39c6:	bf00      	nop

000c39c8 <__aeabi_d2ulz>:
   c39c8:	b5d0      	push	{r4, r6, r7, lr}
   c39ca:	4b0c      	ldr	r3, [pc, #48]	; (c39fc <__aeabi_d2ulz+0x34>)
   c39cc:	2200      	movs	r2, #0
   c39ce:	4606      	mov	r6, r0
   c39d0:	460f      	mov	r7, r1
   c39d2:	f7ff fcb1 	bl	c3338 <__aeabi_dmul>
   c39d6:	f7ff ff87 	bl	c38e8 <__aeabi_d2uiz>
   c39da:	4604      	mov	r4, r0
   c39dc:	f7ff fc32 	bl	c3244 <__aeabi_ui2d>
   c39e0:	4b07      	ldr	r3, [pc, #28]	; (c3a00 <__aeabi_d2ulz+0x38>)
   c39e2:	2200      	movs	r2, #0
   c39e4:	f7ff fca8 	bl	c3338 <__aeabi_dmul>
   c39e8:	4602      	mov	r2, r0
   c39ea:	460b      	mov	r3, r1
   c39ec:	4630      	mov	r0, r6
   c39ee:	4639      	mov	r1, r7
   c39f0:	f7ff faea 	bl	c2fc8 <__aeabi_dsub>
   c39f4:	f7ff ff78 	bl	c38e8 <__aeabi_d2uiz>
   c39f8:	4621      	mov	r1, r4
   c39fa:	bdd0      	pop	{r4, r6, r7, pc}
   c39fc:	3df00000 	.word	0x3df00000
   c3a00:	41f00000 	.word	0x41f00000

000c3a04 <atexit>:
   c3a04:	2300      	movs	r3, #0
   c3a06:	4601      	mov	r1, r0
   c3a08:	461a      	mov	r2, r3
   c3a0a:	4618      	mov	r0, r3
   c3a0c:	f001 b806 	b.w	c4a1c <__register_exitproc>

000c3a10 <atof>:
   c3a10:	2100      	movs	r1, #0
   c3a12:	f000 bf6b 	b.w	c48ec <strtod>

000c3a16 <atoi>:
   c3a16:	220a      	movs	r2, #10
   c3a18:	2100      	movs	r1, #0
   c3a1a:	f000 bff5 	b.w	c4a08 <strtol>
	...

000c3a20 <isprint>:
   c3a20:	4b02      	ldr	r3, [pc, #8]	; (c3a2c <isprint+0xc>)
   c3a22:	4418      	add	r0, r3
   c3a24:	7840      	ldrb	r0, [r0, #1]
   c3a26:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c3a2a:	4770      	bx	lr
   c3a2c:	000c7af8 	.word	0x000c7af8

000c3a30 <memcmp>:
   c3a30:	b510      	push	{r4, lr}
   c3a32:	3901      	subs	r1, #1
   c3a34:	4402      	add	r2, r0
   c3a36:	4290      	cmp	r0, r2
   c3a38:	d101      	bne.n	c3a3e <memcmp+0xe>
   c3a3a:	2000      	movs	r0, #0
   c3a3c:	e005      	b.n	c3a4a <memcmp+0x1a>
   c3a3e:	7803      	ldrb	r3, [r0, #0]
   c3a40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3a44:	42a3      	cmp	r3, r4
   c3a46:	d001      	beq.n	c3a4c <memcmp+0x1c>
   c3a48:	1b18      	subs	r0, r3, r4
   c3a4a:	bd10      	pop	{r4, pc}
   c3a4c:	3001      	adds	r0, #1
   c3a4e:	e7f2      	b.n	c3a36 <memcmp+0x6>

000c3a50 <memcpy>:
   c3a50:	440a      	add	r2, r1
   c3a52:	4291      	cmp	r1, r2
   c3a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c3a58:	d100      	bne.n	c3a5c <memcpy+0xc>
   c3a5a:	4770      	bx	lr
   c3a5c:	b510      	push	{r4, lr}
   c3a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c3a62:	f803 4f01 	strb.w	r4, [r3, #1]!
   c3a66:	4291      	cmp	r1, r2
   c3a68:	d1f9      	bne.n	c3a5e <memcpy+0xe>
   c3a6a:	bd10      	pop	{r4, pc}

000c3a6c <memmove>:
   c3a6c:	4288      	cmp	r0, r1
   c3a6e:	b510      	push	{r4, lr}
   c3a70:	eb01 0402 	add.w	r4, r1, r2
   c3a74:	d902      	bls.n	c3a7c <memmove+0x10>
   c3a76:	4284      	cmp	r4, r0
   c3a78:	4623      	mov	r3, r4
   c3a7a:	d807      	bhi.n	c3a8c <memmove+0x20>
   c3a7c:	1e43      	subs	r3, r0, #1
   c3a7e:	42a1      	cmp	r1, r4
   c3a80:	d008      	beq.n	c3a94 <memmove+0x28>
   c3a82:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3a86:	f803 2f01 	strb.w	r2, [r3, #1]!
   c3a8a:	e7f8      	b.n	c3a7e <memmove+0x12>
   c3a8c:	4402      	add	r2, r0
   c3a8e:	4601      	mov	r1, r0
   c3a90:	428a      	cmp	r2, r1
   c3a92:	d100      	bne.n	c3a96 <memmove+0x2a>
   c3a94:	bd10      	pop	{r4, pc}
   c3a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c3a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c3a9e:	e7f7      	b.n	c3a90 <memmove+0x24>

000c3aa0 <memset>:
   c3aa0:	4402      	add	r2, r0
   c3aa2:	4603      	mov	r3, r0
   c3aa4:	4293      	cmp	r3, r2
   c3aa6:	d100      	bne.n	c3aaa <memset+0xa>
   c3aa8:	4770      	bx	lr
   c3aaa:	f803 1b01 	strb.w	r1, [r3], #1
   c3aae:	e7f9      	b.n	c3aa4 <memset+0x4>

000c3ab0 <srand>:
   c3ab0:	b538      	push	{r3, r4, r5, lr}
   c3ab2:	4b10      	ldr	r3, [pc, #64]	; (c3af4 <srand+0x44>)
   c3ab4:	681d      	ldr	r5, [r3, #0]
   c3ab6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3ab8:	4604      	mov	r4, r0
   c3aba:	b9b3      	cbnz	r3, c3aea <srand+0x3a>
   c3abc:	2018      	movs	r0, #24
   c3abe:	f7f9 feb1 	bl	bd824 <malloc>
   c3ac2:	4602      	mov	r2, r0
   c3ac4:	63a8      	str	r0, [r5, #56]	; 0x38
   c3ac6:	b920      	cbnz	r0, c3ad2 <srand+0x22>
   c3ac8:	4b0b      	ldr	r3, [pc, #44]	; (c3af8 <srand+0x48>)
   c3aca:	480c      	ldr	r0, [pc, #48]	; (c3afc <srand+0x4c>)
   c3acc:	2142      	movs	r1, #66	; 0x42
   c3ace:	f7f9 fef9 	bl	bd8c4 <__assert_func>
   c3ad2:	490b      	ldr	r1, [pc, #44]	; (c3b00 <srand+0x50>)
   c3ad4:	4b0b      	ldr	r3, [pc, #44]	; (c3b04 <srand+0x54>)
   c3ad6:	e9c0 1300 	strd	r1, r3, [r0]
   c3ada:	4b0b      	ldr	r3, [pc, #44]	; (c3b08 <srand+0x58>)
   c3adc:	6083      	str	r3, [r0, #8]
   c3ade:	230b      	movs	r3, #11
   c3ae0:	8183      	strh	r3, [r0, #12]
   c3ae2:	2100      	movs	r1, #0
   c3ae4:	2001      	movs	r0, #1
   c3ae6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c3aea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3aec:	2200      	movs	r2, #0
   c3aee:	611c      	str	r4, [r3, #16]
   c3af0:	615a      	str	r2, [r3, #20]
   c3af2:	bd38      	pop	{r3, r4, r5, pc}
   c3af4:	2003dba0 	.word	0x2003dba0
   c3af8:	000c7a28 	.word	0x000c7a28
   c3afc:	000c7a3f 	.word	0x000c7a3f
   c3b00:	abcd330e 	.word	0xabcd330e
   c3b04:	e66d1234 	.word	0xe66d1234
   c3b08:	0005deec 	.word	0x0005deec

000c3b0c <strcat>:
   c3b0c:	b510      	push	{r4, lr}
   c3b0e:	4602      	mov	r2, r0
   c3b10:	7814      	ldrb	r4, [r2, #0]
   c3b12:	4613      	mov	r3, r2
   c3b14:	3201      	adds	r2, #1
   c3b16:	2c00      	cmp	r4, #0
   c3b18:	d1fa      	bne.n	c3b10 <strcat+0x4>
   c3b1a:	3b01      	subs	r3, #1
   c3b1c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3b20:	f803 2f01 	strb.w	r2, [r3, #1]!
   c3b24:	2a00      	cmp	r2, #0
   c3b26:	d1f9      	bne.n	c3b1c <strcat+0x10>
   c3b28:	bd10      	pop	{r4, pc}

000c3b2a <strchr>:
   c3b2a:	b2c9      	uxtb	r1, r1
   c3b2c:	4603      	mov	r3, r0
   c3b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3b32:	b11a      	cbz	r2, c3b3c <strchr+0x12>
   c3b34:	428a      	cmp	r2, r1
   c3b36:	d1f9      	bne.n	c3b2c <strchr+0x2>
   c3b38:	4618      	mov	r0, r3
   c3b3a:	4770      	bx	lr
   c3b3c:	2900      	cmp	r1, #0
   c3b3e:	bf18      	it	ne
   c3b40:	2300      	movne	r3, #0
   c3b42:	e7f9      	b.n	c3b38 <strchr+0xe>

000c3b44 <strchrnul>:
   c3b44:	b510      	push	{r4, lr}
   c3b46:	4604      	mov	r4, r0
   c3b48:	f7ff ffef 	bl	c3b2a <strchr>
   c3b4c:	b918      	cbnz	r0, c3b56 <strchrnul+0x12>
   c3b4e:	4620      	mov	r0, r4
   c3b50:	f000 f831 	bl	c3bb6 <strlen>
   c3b54:	4420      	add	r0, r4
   c3b56:	bd10      	pop	{r4, pc}

000c3b58 <strcmp>:
   c3b58:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   c3b60:	2a01      	cmp	r2, #1
   c3b62:	bf28      	it	cs
   c3b64:	429a      	cmpcs	r2, r3
   c3b66:	d0f7      	beq.n	c3b58 <strcmp>
   c3b68:	1ad0      	subs	r0, r2, r3
   c3b6a:	4770      	bx	lr

000c3b6c <strcpy>:
   c3b6c:	4603      	mov	r3, r0
   c3b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3b72:	f803 2b01 	strb.w	r2, [r3], #1
   c3b76:	2a00      	cmp	r2, #0
   c3b78:	d1f9      	bne.n	c3b6e <strcpy+0x2>
   c3b7a:	4770      	bx	lr

000c3b7c <strdup>:
   c3b7c:	4b02      	ldr	r3, [pc, #8]	; (c3b88 <strdup+0xc>)
   c3b7e:	4601      	mov	r1, r0
   c3b80:	6818      	ldr	r0, [r3, #0]
   c3b82:	f000 b803 	b.w	c3b8c <_strdup_r>
   c3b86:	bf00      	nop
   c3b88:	2003dba0 	.word	0x2003dba0

000c3b8c <_strdup_r>:
   c3b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c3b8e:	4604      	mov	r4, r0
   c3b90:	4608      	mov	r0, r1
   c3b92:	460d      	mov	r5, r1
   c3b94:	f000 f80f 	bl	c3bb6 <strlen>
   c3b98:	1c42      	adds	r2, r0, #1
   c3b9a:	4611      	mov	r1, r2
   c3b9c:	4620      	mov	r0, r4
   c3b9e:	9201      	str	r2, [sp, #4]
   c3ba0:	f7f9 fe80 	bl	bd8a4 <_malloc_r>
   c3ba4:	4604      	mov	r4, r0
   c3ba6:	b118      	cbz	r0, c3bb0 <_strdup_r+0x24>
   c3ba8:	9a01      	ldr	r2, [sp, #4]
   c3baa:	4629      	mov	r1, r5
   c3bac:	f7ff ff50 	bl	c3a50 <memcpy>
   c3bb0:	4620      	mov	r0, r4
   c3bb2:	b003      	add	sp, #12
   c3bb4:	bd30      	pop	{r4, r5, pc}

000c3bb6 <strlen>:
   c3bb6:	4603      	mov	r3, r0
   c3bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
   c3bbc:	2a00      	cmp	r2, #0
   c3bbe:	d1fb      	bne.n	c3bb8 <strlen+0x2>
   c3bc0:	1a18      	subs	r0, r3, r0
   c3bc2:	3801      	subs	r0, #1
   c3bc4:	4770      	bx	lr
	...

000c3bc8 <strlwr>:
   c3bc8:	b510      	push	{r4, lr}
   c3bca:	4c07      	ldr	r4, [pc, #28]	; (c3be8 <strlwr+0x20>)
   c3bcc:	1e42      	subs	r2, r0, #1
   c3bce:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c3bd2:	b903      	cbnz	r3, c3bd6 <strlwr+0xe>
   c3bd4:	bd10      	pop	{r4, pc}
   c3bd6:	5ce1      	ldrb	r1, [r4, r3]
   c3bd8:	f001 0103 	and.w	r1, r1, #3
   c3bdc:	2901      	cmp	r1, #1
   c3bde:	bf08      	it	eq
   c3be0:	3320      	addeq	r3, #32
   c3be2:	7013      	strb	r3, [r2, #0]
   c3be4:	e7f3      	b.n	c3bce <strlwr+0x6>
   c3be6:	bf00      	nop
   c3be8:	000c7af9 	.word	0x000c7af9

000c3bec <strncmp>:
   c3bec:	b510      	push	{r4, lr}
   c3bee:	b17a      	cbz	r2, c3c10 <strncmp+0x24>
   c3bf0:	4603      	mov	r3, r0
   c3bf2:	3901      	subs	r1, #1
   c3bf4:	1884      	adds	r4, r0, r2
   c3bf6:	f813 0b01 	ldrb.w	r0, [r3], #1
   c3bfa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c3bfe:	4290      	cmp	r0, r2
   c3c00:	d101      	bne.n	c3c06 <strncmp+0x1a>
   c3c02:	42a3      	cmp	r3, r4
   c3c04:	d101      	bne.n	c3c0a <strncmp+0x1e>
   c3c06:	1a80      	subs	r0, r0, r2
   c3c08:	bd10      	pop	{r4, pc}
   c3c0a:	2800      	cmp	r0, #0
   c3c0c:	d1f3      	bne.n	c3bf6 <strncmp+0xa>
   c3c0e:	e7fa      	b.n	c3c06 <strncmp+0x1a>
   c3c10:	4610      	mov	r0, r2
   c3c12:	e7f9      	b.n	c3c08 <strncmp+0x1c>

000c3c14 <strncpy>:
   c3c14:	b510      	push	{r4, lr}
   c3c16:	3901      	subs	r1, #1
   c3c18:	4603      	mov	r3, r0
   c3c1a:	b132      	cbz	r2, c3c2a <strncpy+0x16>
   c3c1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3c20:	f803 4b01 	strb.w	r4, [r3], #1
   c3c24:	3a01      	subs	r2, #1
   c3c26:	2c00      	cmp	r4, #0
   c3c28:	d1f7      	bne.n	c3c1a <strncpy+0x6>
   c3c2a:	441a      	add	r2, r3
   c3c2c:	2100      	movs	r1, #0
   c3c2e:	4293      	cmp	r3, r2
   c3c30:	d100      	bne.n	c3c34 <strncpy+0x20>
   c3c32:	bd10      	pop	{r4, pc}
   c3c34:	f803 1b01 	strb.w	r1, [r3], #1
   c3c38:	e7f9      	b.n	c3c2e <strncpy+0x1a>

000c3c3a <strnlen>:
   c3c3a:	b510      	push	{r4, lr}
   c3c3c:	4602      	mov	r2, r0
   c3c3e:	4401      	add	r1, r0
   c3c40:	428a      	cmp	r2, r1
   c3c42:	4613      	mov	r3, r2
   c3c44:	d003      	beq.n	c3c4e <strnlen+0x14>
   c3c46:	781c      	ldrb	r4, [r3, #0]
   c3c48:	3201      	adds	r2, #1
   c3c4a:	2c00      	cmp	r4, #0
   c3c4c:	d1f8      	bne.n	c3c40 <strnlen+0x6>
   c3c4e:	1a18      	subs	r0, r3, r0
   c3c50:	bd10      	pop	{r4, pc}

000c3c52 <strrchr>:
   c3c52:	b538      	push	{r3, r4, r5, lr}
   c3c54:	4603      	mov	r3, r0
   c3c56:	460c      	mov	r4, r1
   c3c58:	b969      	cbnz	r1, c3c76 <strrchr+0x24>
   c3c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c3c5e:	f7ff bf64 	b.w	c3b2a <strchr>
   c3c62:	1c43      	adds	r3, r0, #1
   c3c64:	4605      	mov	r5, r0
   c3c66:	4621      	mov	r1, r4
   c3c68:	4618      	mov	r0, r3
   c3c6a:	f7ff ff5e 	bl	c3b2a <strchr>
   c3c6e:	2800      	cmp	r0, #0
   c3c70:	d1f7      	bne.n	c3c62 <strrchr+0x10>
   c3c72:	4628      	mov	r0, r5
   c3c74:	bd38      	pop	{r3, r4, r5, pc}
   c3c76:	2500      	movs	r5, #0
   c3c78:	e7f5      	b.n	c3c66 <strrchr+0x14>

000c3c7a <strstr>:
   c3c7a:	780a      	ldrb	r2, [r1, #0]
   c3c7c:	b570      	push	{r4, r5, r6, lr}
   c3c7e:	b96a      	cbnz	r2, c3c9c <strstr+0x22>
   c3c80:	bd70      	pop	{r4, r5, r6, pc}
   c3c82:	429a      	cmp	r2, r3
   c3c84:	d109      	bne.n	c3c9a <strstr+0x20>
   c3c86:	460c      	mov	r4, r1
   c3c88:	4605      	mov	r5, r0
   c3c8a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c3c8e:	2b00      	cmp	r3, #0
   c3c90:	d0f6      	beq.n	c3c80 <strstr+0x6>
   c3c92:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c3c96:	429e      	cmp	r6, r3
   c3c98:	d0f7      	beq.n	c3c8a <strstr+0x10>
   c3c9a:	3001      	adds	r0, #1
   c3c9c:	7803      	ldrb	r3, [r0, #0]
   c3c9e:	2b00      	cmp	r3, #0
   c3ca0:	d1ef      	bne.n	c3c82 <strstr+0x8>
   c3ca2:	4618      	mov	r0, r3
   c3ca4:	e7ec      	b.n	c3c80 <strstr+0x6>

000c3ca6 <sulp>:
   c3ca6:	b570      	push	{r4, r5, r6, lr}
   c3ca8:	4604      	mov	r4, r0
   c3caa:	460d      	mov	r5, r1
   c3cac:	ec45 4b10 	vmov	d0, r4, r5
   c3cb0:	4616      	mov	r6, r2
   c3cb2:	f001 fe0d 	bl	c58d0 <__ulp>
   c3cb6:	ec51 0b10 	vmov	r0, r1, d0
   c3cba:	b17e      	cbz	r6, c3cdc <sulp+0x36>
   c3cbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c3cc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3cc4:	2b00      	cmp	r3, #0
   c3cc6:	dd09      	ble.n	c3cdc <sulp+0x36>
   c3cc8:	051b      	lsls	r3, r3, #20
   c3cca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c3cce:	2400      	movs	r4, #0
   c3cd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c3cd4:	4622      	mov	r2, r4
   c3cd6:	462b      	mov	r3, r5
   c3cd8:	f7ff fb2e 	bl	c3338 <__aeabi_dmul>
   c3cdc:	bd70      	pop	{r4, r5, r6, pc}
	...

000c3ce0 <_strtod_l>:
   c3ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3ce4:	ed2d 8b02 	vpush	{d8}
   c3ce8:	b09d      	sub	sp, #116	; 0x74
   c3cea:	461f      	mov	r7, r3
   c3cec:	2300      	movs	r3, #0
   c3cee:	9318      	str	r3, [sp, #96]	; 0x60
   c3cf0:	4ba2      	ldr	r3, [pc, #648]	; (c3f7c <_strtod_l+0x29c>)
   c3cf2:	9213      	str	r2, [sp, #76]	; 0x4c
   c3cf4:	681b      	ldr	r3, [r3, #0]
   c3cf6:	9305      	str	r3, [sp, #20]
   c3cf8:	4604      	mov	r4, r0
   c3cfa:	4618      	mov	r0, r3
   c3cfc:	4688      	mov	r8, r1
   c3cfe:	f7ff ff5a 	bl	c3bb6 <strlen>
   c3d02:	f04f 0a00 	mov.w	sl, #0
   c3d06:	4605      	mov	r5, r0
   c3d08:	f04f 0b00 	mov.w	fp, #0
   c3d0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3d10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3d12:	781a      	ldrb	r2, [r3, #0]
   c3d14:	2a2b      	cmp	r2, #43	; 0x2b
   c3d16:	d04e      	beq.n	c3db6 <_strtod_l+0xd6>
   c3d18:	d83b      	bhi.n	c3d92 <_strtod_l+0xb2>
   c3d1a:	2a0d      	cmp	r2, #13
   c3d1c:	d834      	bhi.n	c3d88 <_strtod_l+0xa8>
   c3d1e:	2a08      	cmp	r2, #8
   c3d20:	d834      	bhi.n	c3d8c <_strtod_l+0xac>
   c3d22:	2a00      	cmp	r2, #0
   c3d24:	d03e      	beq.n	c3da4 <_strtod_l+0xc4>
   c3d26:	2300      	movs	r3, #0
   c3d28:	930a      	str	r3, [sp, #40]	; 0x28
   c3d2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c3d2c:	7833      	ldrb	r3, [r6, #0]
   c3d2e:	2b30      	cmp	r3, #48	; 0x30
   c3d30:	f040 80b0 	bne.w	c3e94 <_strtod_l+0x1b4>
   c3d34:	7873      	ldrb	r3, [r6, #1]
   c3d36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c3d3a:	2b58      	cmp	r3, #88	; 0x58
   c3d3c:	d168      	bne.n	c3e10 <_strtod_l+0x130>
   c3d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c3d40:	9301      	str	r3, [sp, #4]
   c3d42:	ab18      	add	r3, sp, #96	; 0x60
   c3d44:	9702      	str	r7, [sp, #8]
   c3d46:	9300      	str	r3, [sp, #0]
   c3d48:	4a8d      	ldr	r2, [pc, #564]	; (c3f80 <_strtod_l+0x2a0>)
   c3d4a:	ab19      	add	r3, sp, #100	; 0x64
   c3d4c:	a917      	add	r1, sp, #92	; 0x5c
   c3d4e:	4620      	mov	r0, r4
   c3d50:	f000 ff2e 	bl	c4bb0 <__gethex>
   c3d54:	f010 0707 	ands.w	r7, r0, #7
   c3d58:	4605      	mov	r5, r0
   c3d5a:	d005      	beq.n	c3d68 <_strtod_l+0x88>
   c3d5c:	2f06      	cmp	r7, #6
   c3d5e:	d12c      	bne.n	c3dba <_strtod_l+0xda>
   c3d60:	3601      	adds	r6, #1
   c3d62:	2300      	movs	r3, #0
   c3d64:	9617      	str	r6, [sp, #92]	; 0x5c
   c3d66:	930a      	str	r3, [sp, #40]	; 0x28
   c3d68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c3d6a:	2b00      	cmp	r3, #0
   c3d6c:	f040 8590 	bne.w	c4890 <_strtod_l+0xbb0>
   c3d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c3d72:	b1eb      	cbz	r3, c3db0 <_strtod_l+0xd0>
   c3d74:	4652      	mov	r2, sl
   c3d76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c3d7a:	ec43 2b10 	vmov	d0, r2, r3
   c3d7e:	b01d      	add	sp, #116	; 0x74
   c3d80:	ecbd 8b02 	vpop	{d8}
   c3d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3d88:	2a20      	cmp	r2, #32
   c3d8a:	d1cc      	bne.n	c3d26 <_strtod_l+0x46>
   c3d8c:	3301      	adds	r3, #1
   c3d8e:	9317      	str	r3, [sp, #92]	; 0x5c
   c3d90:	e7be      	b.n	c3d10 <_strtod_l+0x30>
   c3d92:	2a2d      	cmp	r2, #45	; 0x2d
   c3d94:	d1c7      	bne.n	c3d26 <_strtod_l+0x46>
   c3d96:	2201      	movs	r2, #1
   c3d98:	920a      	str	r2, [sp, #40]	; 0x28
   c3d9a:	1c5a      	adds	r2, r3, #1
   c3d9c:	9217      	str	r2, [sp, #92]	; 0x5c
   c3d9e:	785b      	ldrb	r3, [r3, #1]
   c3da0:	2b00      	cmp	r3, #0
   c3da2:	d1c2      	bne.n	c3d2a <_strtod_l+0x4a>
   c3da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c3da6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3daa:	2b00      	cmp	r3, #0
   c3dac:	f040 856e 	bne.w	c488c <_strtod_l+0xbac>
   c3db0:	4652      	mov	r2, sl
   c3db2:	465b      	mov	r3, fp
   c3db4:	e7e1      	b.n	c3d7a <_strtod_l+0x9a>
   c3db6:	2200      	movs	r2, #0
   c3db8:	e7ee      	b.n	c3d98 <_strtod_l+0xb8>
   c3dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c3dbc:	b13a      	cbz	r2, c3dce <_strtod_l+0xee>
   c3dbe:	2135      	movs	r1, #53	; 0x35
   c3dc0:	a81a      	add	r0, sp, #104	; 0x68
   c3dc2:	f001 fe90 	bl	c5ae6 <__copybits>
   c3dc6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3dc8:	4620      	mov	r0, r4
   c3dca:	f001 fa4f 	bl	c526c <_Bfree>
   c3dce:	3f01      	subs	r7, #1
   c3dd0:	2f04      	cmp	r7, #4
   c3dd2:	d806      	bhi.n	c3de2 <_strtod_l+0x102>
   c3dd4:	e8df f007 	tbb	[pc, r7]
   c3dd8:	1714030a 	.word	0x1714030a
   c3ddc:	0a          	.byte	0x0a
   c3ddd:	00          	.byte	0x00
   c3dde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c3de2:	0728      	lsls	r0, r5, #28
   c3de4:	d5c0      	bpl.n	c3d68 <_strtod_l+0x88>
   c3de6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c3dea:	e7bd      	b.n	c3d68 <_strtod_l+0x88>
   c3dec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c3df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c3df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c3df6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c3dfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c3dfe:	e7f0      	b.n	c3de2 <_strtod_l+0x102>
   c3e00:	f8df b180 	ldr.w	fp, [pc, #384]	; c3f84 <_strtod_l+0x2a4>
   c3e04:	e7ed      	b.n	c3de2 <_strtod_l+0x102>
   c3e06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c3e0a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3e0e:	e7e8      	b.n	c3de2 <_strtod_l+0x102>
   c3e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3e12:	1c5a      	adds	r2, r3, #1
   c3e14:	9217      	str	r2, [sp, #92]	; 0x5c
   c3e16:	785b      	ldrb	r3, [r3, #1]
   c3e18:	2b30      	cmp	r3, #48	; 0x30
   c3e1a:	d0f9      	beq.n	c3e10 <_strtod_l+0x130>
   c3e1c:	2b00      	cmp	r3, #0
   c3e1e:	d0a3      	beq.n	c3d68 <_strtod_l+0x88>
   c3e20:	2301      	movs	r3, #1
   c3e22:	f04f 0900 	mov.w	r9, #0
   c3e26:	9304      	str	r3, [sp, #16]
   c3e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3e2a:	9308      	str	r3, [sp, #32]
   c3e2c:	f8cd 901c 	str.w	r9, [sp, #28]
   c3e30:	464f      	mov	r7, r9
   c3e32:	220a      	movs	r2, #10
   c3e34:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c3e36:	7806      	ldrb	r6, [r0, #0]
   c3e38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c3e3c:	b2d9      	uxtb	r1, r3
   c3e3e:	2909      	cmp	r1, #9
   c3e40:	d92a      	bls.n	c3e98 <_strtod_l+0x1b8>
   c3e42:	9905      	ldr	r1, [sp, #20]
   c3e44:	462a      	mov	r2, r5
   c3e46:	f7ff fed1 	bl	c3bec <strncmp>
   c3e4a:	b398      	cbz	r0, c3eb4 <_strtod_l+0x1d4>
   c3e4c:	2000      	movs	r0, #0
   c3e4e:	4632      	mov	r2, r6
   c3e50:	463d      	mov	r5, r7
   c3e52:	9005      	str	r0, [sp, #20]
   c3e54:	4603      	mov	r3, r0
   c3e56:	2a65      	cmp	r2, #101	; 0x65
   c3e58:	d001      	beq.n	c3e5e <_strtod_l+0x17e>
   c3e5a:	2a45      	cmp	r2, #69	; 0x45
   c3e5c:	d118      	bne.n	c3e90 <_strtod_l+0x1b0>
   c3e5e:	b91d      	cbnz	r5, c3e68 <_strtod_l+0x188>
   c3e60:	9a04      	ldr	r2, [sp, #16]
   c3e62:	4302      	orrs	r2, r0
   c3e64:	d09e      	beq.n	c3da4 <_strtod_l+0xc4>
   c3e66:	2500      	movs	r5, #0
   c3e68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c3e6c:	f108 0201 	add.w	r2, r8, #1
   c3e70:	9217      	str	r2, [sp, #92]	; 0x5c
   c3e72:	f898 2001 	ldrb.w	r2, [r8, #1]
   c3e76:	2a2b      	cmp	r2, #43	; 0x2b
   c3e78:	d075      	beq.n	c3f66 <_strtod_l+0x286>
   c3e7a:	2a2d      	cmp	r2, #45	; 0x2d
   c3e7c:	d07b      	beq.n	c3f76 <_strtod_l+0x296>
   c3e7e:	f04f 0c00 	mov.w	ip, #0
   c3e82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c3e86:	2909      	cmp	r1, #9
   c3e88:	f240 8082 	bls.w	c3f90 <_strtod_l+0x2b0>
   c3e8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3e90:	2600      	movs	r6, #0
   c3e92:	e09d      	b.n	c3fd0 <_strtod_l+0x2f0>
   c3e94:	2300      	movs	r3, #0
   c3e96:	e7c4      	b.n	c3e22 <_strtod_l+0x142>
   c3e98:	2f08      	cmp	r7, #8
   c3e9a:	bfd8      	it	le
   c3e9c:	9907      	ldrle	r1, [sp, #28]
   c3e9e:	f100 0001 	add.w	r0, r0, #1
   c3ea2:	bfda      	itte	le
   c3ea4:	fb02 3301 	mlale	r3, r2, r1, r3
   c3ea8:	9307      	strle	r3, [sp, #28]
   c3eaa:	fb02 3909 	mlagt	r9, r2, r9, r3
   c3eae:	3701      	adds	r7, #1
   c3eb0:	9017      	str	r0, [sp, #92]	; 0x5c
   c3eb2:	e7bf      	b.n	c3e34 <_strtod_l+0x154>
   c3eb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3eb6:	195a      	adds	r2, r3, r5
   c3eb8:	9217      	str	r2, [sp, #92]	; 0x5c
   c3eba:	5d5a      	ldrb	r2, [r3, r5]
   c3ebc:	2f00      	cmp	r7, #0
   c3ebe:	d037      	beq.n	c3f30 <_strtod_l+0x250>
   c3ec0:	9005      	str	r0, [sp, #20]
   c3ec2:	463d      	mov	r5, r7
   c3ec4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c3ec8:	2b09      	cmp	r3, #9
   c3eca:	d912      	bls.n	c3ef2 <_strtod_l+0x212>
   c3ecc:	2301      	movs	r3, #1
   c3ece:	e7c2      	b.n	c3e56 <_strtod_l+0x176>
   c3ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3ed2:	1c5a      	adds	r2, r3, #1
   c3ed4:	9217      	str	r2, [sp, #92]	; 0x5c
   c3ed6:	785a      	ldrb	r2, [r3, #1]
   c3ed8:	3001      	adds	r0, #1
   c3eda:	2a30      	cmp	r2, #48	; 0x30
   c3edc:	d0f8      	beq.n	c3ed0 <_strtod_l+0x1f0>
   c3ede:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c3ee2:	2b08      	cmp	r3, #8
   c3ee4:	f200 84d9 	bhi.w	c489a <_strtod_l+0xbba>
   c3ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3eea:	9005      	str	r0, [sp, #20]
   c3eec:	2000      	movs	r0, #0
   c3eee:	9308      	str	r3, [sp, #32]
   c3ef0:	4605      	mov	r5, r0
   c3ef2:	3a30      	subs	r2, #48	; 0x30
   c3ef4:	f100 0301 	add.w	r3, r0, #1
   c3ef8:	d014      	beq.n	c3f24 <_strtod_l+0x244>
   c3efa:	9905      	ldr	r1, [sp, #20]
   c3efc:	4419      	add	r1, r3
   c3efe:	9105      	str	r1, [sp, #20]
   c3f00:	462b      	mov	r3, r5
   c3f02:	eb00 0e05 	add.w	lr, r0, r5
   c3f06:	210a      	movs	r1, #10
   c3f08:	4573      	cmp	r3, lr
   c3f0a:	d113      	bne.n	c3f34 <_strtod_l+0x254>
   c3f0c:	182b      	adds	r3, r5, r0
   c3f0e:	2b08      	cmp	r3, #8
   c3f10:	f105 0501 	add.w	r5, r5, #1
   c3f14:	4405      	add	r5, r0
   c3f16:	dc1c      	bgt.n	c3f52 <_strtod_l+0x272>
   c3f18:	9907      	ldr	r1, [sp, #28]
   c3f1a:	230a      	movs	r3, #10
   c3f1c:	fb03 2301 	mla	r3, r3, r1, r2
   c3f20:	9307      	str	r3, [sp, #28]
   c3f22:	2300      	movs	r3, #0
   c3f24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3f26:	1c51      	adds	r1, r2, #1
   c3f28:	9117      	str	r1, [sp, #92]	; 0x5c
   c3f2a:	7852      	ldrb	r2, [r2, #1]
   c3f2c:	4618      	mov	r0, r3
   c3f2e:	e7c9      	b.n	c3ec4 <_strtod_l+0x1e4>
   c3f30:	4638      	mov	r0, r7
   c3f32:	e7d2      	b.n	c3eda <_strtod_l+0x1fa>
   c3f34:	2b08      	cmp	r3, #8
   c3f36:	dc04      	bgt.n	c3f42 <_strtod_l+0x262>
   c3f38:	9e07      	ldr	r6, [sp, #28]
   c3f3a:	434e      	muls	r6, r1
   c3f3c:	9607      	str	r6, [sp, #28]
   c3f3e:	3301      	adds	r3, #1
   c3f40:	e7e2      	b.n	c3f08 <_strtod_l+0x228>
   c3f42:	f103 0c01 	add.w	ip, r3, #1
   c3f46:	f1bc 0f10 	cmp.w	ip, #16
   c3f4a:	bfd8      	it	le
   c3f4c:	fb01 f909 	mulle.w	r9, r1, r9
   c3f50:	e7f5      	b.n	c3f3e <_strtod_l+0x25e>
   c3f52:	2d10      	cmp	r5, #16
   c3f54:	bfdc      	itt	le
   c3f56:	230a      	movle	r3, #10
   c3f58:	fb03 2909 	mlale	r9, r3, r9, r2
   c3f5c:	e7e1      	b.n	c3f22 <_strtod_l+0x242>
   c3f5e:	2300      	movs	r3, #0
   c3f60:	9305      	str	r3, [sp, #20]
   c3f62:	2301      	movs	r3, #1
   c3f64:	e77c      	b.n	c3e60 <_strtod_l+0x180>
   c3f66:	f04f 0c00 	mov.w	ip, #0
   c3f6a:	f108 0202 	add.w	r2, r8, #2
   c3f6e:	9217      	str	r2, [sp, #92]	; 0x5c
   c3f70:	f898 2002 	ldrb.w	r2, [r8, #2]
   c3f74:	e785      	b.n	c3e82 <_strtod_l+0x1a2>
   c3f76:	f04f 0c01 	mov.w	ip, #1
   c3f7a:	e7f6      	b.n	c3f6a <_strtod_l+0x28a>
   c3f7c:	000c7c6c 	.word	0x000c7c6c
   c3f80:	000c7aa4 	.word	0x000c7aa4
   c3f84:	7ff00000 	.word	0x7ff00000
   c3f88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3f8a:	1c51      	adds	r1, r2, #1
   c3f8c:	9117      	str	r1, [sp, #92]	; 0x5c
   c3f8e:	7852      	ldrb	r2, [r2, #1]
   c3f90:	2a30      	cmp	r2, #48	; 0x30
   c3f92:	d0f9      	beq.n	c3f88 <_strtod_l+0x2a8>
   c3f94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c3f98:	2908      	cmp	r1, #8
   c3f9a:	f63f af79 	bhi.w	c3e90 <_strtod_l+0x1b0>
   c3f9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c3fa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3fa4:	9206      	str	r2, [sp, #24]
   c3fa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3fa8:	1c51      	adds	r1, r2, #1
   c3faa:	9117      	str	r1, [sp, #92]	; 0x5c
   c3fac:	7852      	ldrb	r2, [r2, #1]
   c3fae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c3fb2:	2e09      	cmp	r6, #9
   c3fb4:	d937      	bls.n	c4026 <_strtod_l+0x346>
   c3fb6:	9e06      	ldr	r6, [sp, #24]
   c3fb8:	1b89      	subs	r1, r1, r6
   c3fba:	2908      	cmp	r1, #8
   c3fbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c3fc0:	dc02      	bgt.n	c3fc8 <_strtod_l+0x2e8>
   c3fc2:	4576      	cmp	r6, lr
   c3fc4:	bfa8      	it	ge
   c3fc6:	4676      	movge	r6, lr
   c3fc8:	f1bc 0f00 	cmp.w	ip, #0
   c3fcc:	d000      	beq.n	c3fd0 <_strtod_l+0x2f0>
   c3fce:	4276      	negs	r6, r6
   c3fd0:	2d00      	cmp	r5, #0
   c3fd2:	d14d      	bne.n	c4070 <_strtod_l+0x390>
   c3fd4:	9904      	ldr	r1, [sp, #16]
   c3fd6:	4301      	orrs	r1, r0
   c3fd8:	f47f aec6 	bne.w	c3d68 <_strtod_l+0x88>
   c3fdc:	2b00      	cmp	r3, #0
   c3fde:	f47f aee1 	bne.w	c3da4 <_strtod_l+0xc4>
   c3fe2:	2a69      	cmp	r2, #105	; 0x69
   c3fe4:	d027      	beq.n	c4036 <_strtod_l+0x356>
   c3fe6:	dc24      	bgt.n	c4032 <_strtod_l+0x352>
   c3fe8:	2a49      	cmp	r2, #73	; 0x49
   c3fea:	d024      	beq.n	c4036 <_strtod_l+0x356>
   c3fec:	2a4e      	cmp	r2, #78	; 0x4e
   c3fee:	f47f aed9 	bne.w	c3da4 <_strtod_l+0xc4>
   c3ff2:	499f      	ldr	r1, [pc, #636]	; (c4270 <_strtod_l+0x590>)
   c3ff4:	a817      	add	r0, sp, #92	; 0x5c
   c3ff6:	f001 f833 	bl	c5060 <__match>
   c3ffa:	2800      	cmp	r0, #0
   c3ffc:	f43f aed2 	beq.w	c3da4 <_strtod_l+0xc4>
   c4000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4002:	781b      	ldrb	r3, [r3, #0]
   c4004:	2b28      	cmp	r3, #40	; 0x28
   c4006:	d12d      	bne.n	c4064 <_strtod_l+0x384>
   c4008:	499a      	ldr	r1, [pc, #616]	; (c4274 <_strtod_l+0x594>)
   c400a:	aa1a      	add	r2, sp, #104	; 0x68
   c400c:	a817      	add	r0, sp, #92	; 0x5c
   c400e:	f001 f83b 	bl	c5088 <__hexnan>
   c4012:	2805      	cmp	r0, #5
   c4014:	d126      	bne.n	c4064 <_strtod_l+0x384>
   c4016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4018:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c401c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4020:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4024:	e6a0      	b.n	c3d68 <_strtod_l+0x88>
   c4026:	210a      	movs	r1, #10
   c4028:	fb01 2e0e 	mla	lr, r1, lr, r2
   c402c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4030:	e7b9      	b.n	c3fa6 <_strtod_l+0x2c6>
   c4032:	2a6e      	cmp	r2, #110	; 0x6e
   c4034:	e7db      	b.n	c3fee <_strtod_l+0x30e>
   c4036:	4990      	ldr	r1, [pc, #576]	; (c4278 <_strtod_l+0x598>)
   c4038:	a817      	add	r0, sp, #92	; 0x5c
   c403a:	f001 f811 	bl	c5060 <__match>
   c403e:	2800      	cmp	r0, #0
   c4040:	f43f aeb0 	beq.w	c3da4 <_strtod_l+0xc4>
   c4044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4046:	498d      	ldr	r1, [pc, #564]	; (c427c <_strtod_l+0x59c>)
   c4048:	3b01      	subs	r3, #1
   c404a:	a817      	add	r0, sp, #92	; 0x5c
   c404c:	9317      	str	r3, [sp, #92]	; 0x5c
   c404e:	f001 f807 	bl	c5060 <__match>
   c4052:	b910      	cbnz	r0, c405a <_strtod_l+0x37a>
   c4054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4056:	3301      	adds	r3, #1
   c4058:	9317      	str	r3, [sp, #92]	; 0x5c
   c405a:	f8df b230 	ldr.w	fp, [pc, #560]	; c428c <_strtod_l+0x5ac>
   c405e:	f04f 0a00 	mov.w	sl, #0
   c4062:	e681      	b.n	c3d68 <_strtod_l+0x88>
   c4064:	4886      	ldr	r0, [pc, #536]	; (c4280 <_strtod_l+0x5a0>)
   c4066:	f001 fd93 	bl	c5b90 <nan>
   c406a:	ec5b ab10 	vmov	sl, fp, d0
   c406e:	e67b      	b.n	c3d68 <_strtod_l+0x88>
   c4070:	9b05      	ldr	r3, [sp, #20]
   c4072:	9807      	ldr	r0, [sp, #28]
   c4074:	1af3      	subs	r3, r6, r3
   c4076:	2f00      	cmp	r7, #0
   c4078:	bf08      	it	eq
   c407a:	462f      	moveq	r7, r5
   c407c:	2d10      	cmp	r5, #16
   c407e:	9306      	str	r3, [sp, #24]
   c4080:	46a8      	mov	r8, r5
   c4082:	bfa8      	it	ge
   c4084:	f04f 0810 	movge.w	r8, #16
   c4088:	f7ff f8dc 	bl	c3244 <__aeabi_ui2d>
   c408c:	2d09      	cmp	r5, #9
   c408e:	4682      	mov	sl, r0
   c4090:	468b      	mov	fp, r1
   c4092:	dd13      	ble.n	c40bc <_strtod_l+0x3dc>
   c4094:	4b7b      	ldr	r3, [pc, #492]	; (c4284 <_strtod_l+0x5a4>)
   c4096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c409a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c409e:	f7ff f94b 	bl	c3338 <__aeabi_dmul>
   c40a2:	4682      	mov	sl, r0
   c40a4:	4648      	mov	r0, r9
   c40a6:	468b      	mov	fp, r1
   c40a8:	f7ff f8cc 	bl	c3244 <__aeabi_ui2d>
   c40ac:	4602      	mov	r2, r0
   c40ae:	460b      	mov	r3, r1
   c40b0:	4650      	mov	r0, sl
   c40b2:	4659      	mov	r1, fp
   c40b4:	f7fe ff8a 	bl	c2fcc <__adddf3>
   c40b8:	4682      	mov	sl, r0
   c40ba:	468b      	mov	fp, r1
   c40bc:	2d0f      	cmp	r5, #15
   c40be:	dc38      	bgt.n	c4132 <_strtod_l+0x452>
   c40c0:	9b06      	ldr	r3, [sp, #24]
   c40c2:	2b00      	cmp	r3, #0
   c40c4:	f43f ae50 	beq.w	c3d68 <_strtod_l+0x88>
   c40c8:	dd24      	ble.n	c4114 <_strtod_l+0x434>
   c40ca:	2b16      	cmp	r3, #22
   c40cc:	dc0b      	bgt.n	c40e6 <_strtod_l+0x406>
   c40ce:	496d      	ldr	r1, [pc, #436]	; (c4284 <_strtod_l+0x5a4>)
   c40d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c40d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   c40d8:	4652      	mov	r2, sl
   c40da:	465b      	mov	r3, fp
   c40dc:	f7ff f92c 	bl	c3338 <__aeabi_dmul>
   c40e0:	4682      	mov	sl, r0
   c40e2:	468b      	mov	fp, r1
   c40e4:	e640      	b.n	c3d68 <_strtod_l+0x88>
   c40e6:	9a06      	ldr	r2, [sp, #24]
   c40e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c40ec:	4293      	cmp	r3, r2
   c40ee:	db20      	blt.n	c4132 <_strtod_l+0x452>
   c40f0:	4c64      	ldr	r4, [pc, #400]	; (c4284 <_strtod_l+0x5a4>)
   c40f2:	f1c5 050f 	rsb	r5, r5, #15
   c40f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c40fa:	4652      	mov	r2, sl
   c40fc:	465b      	mov	r3, fp
   c40fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4102:	f7ff f919 	bl	c3338 <__aeabi_dmul>
   c4106:	9b06      	ldr	r3, [sp, #24]
   c4108:	1b5d      	subs	r5, r3, r5
   c410a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c410e:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4112:	e7e3      	b.n	c40dc <_strtod_l+0x3fc>
   c4114:	9b06      	ldr	r3, [sp, #24]
   c4116:	3316      	adds	r3, #22
   c4118:	db0b      	blt.n	c4132 <_strtod_l+0x452>
   c411a:	9b05      	ldr	r3, [sp, #20]
   c411c:	1b9e      	subs	r6, r3, r6
   c411e:	4b59      	ldr	r3, [pc, #356]	; (c4284 <_strtod_l+0x5a4>)
   c4120:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4124:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4128:	4650      	mov	r0, sl
   c412a:	4659      	mov	r1, fp
   c412c:	f7ff fa2e 	bl	c358c <__aeabi_ddiv>
   c4130:	e7d6      	b.n	c40e0 <_strtod_l+0x400>
   c4132:	9b06      	ldr	r3, [sp, #24]
   c4134:	eba5 0808 	sub.w	r8, r5, r8
   c4138:	4498      	add	r8, r3
   c413a:	f1b8 0f00 	cmp.w	r8, #0
   c413e:	dd74      	ble.n	c422a <_strtod_l+0x54a>
   c4140:	f018 030f 	ands.w	r3, r8, #15
   c4144:	d00a      	beq.n	c415c <_strtod_l+0x47c>
   c4146:	494f      	ldr	r1, [pc, #316]	; (c4284 <_strtod_l+0x5a4>)
   c4148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c414c:	4652      	mov	r2, sl
   c414e:	465b      	mov	r3, fp
   c4150:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4154:	f7ff f8f0 	bl	c3338 <__aeabi_dmul>
   c4158:	4682      	mov	sl, r0
   c415a:	468b      	mov	fp, r1
   c415c:	f038 080f 	bics.w	r8, r8, #15
   c4160:	d04f      	beq.n	c4202 <_strtod_l+0x522>
   c4162:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4166:	dd22      	ble.n	c41ae <_strtod_l+0x4ce>
   c4168:	2500      	movs	r5, #0
   c416a:	462e      	mov	r6, r5
   c416c:	9507      	str	r5, [sp, #28]
   c416e:	9505      	str	r5, [sp, #20]
   c4170:	2322      	movs	r3, #34	; 0x22
   c4172:	f8df b118 	ldr.w	fp, [pc, #280]	; c428c <_strtod_l+0x5ac>
   c4176:	6023      	str	r3, [r4, #0]
   c4178:	f04f 0a00 	mov.w	sl, #0
   c417c:	9b07      	ldr	r3, [sp, #28]
   c417e:	2b00      	cmp	r3, #0
   c4180:	f43f adf2 	beq.w	c3d68 <_strtod_l+0x88>
   c4184:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4186:	4620      	mov	r0, r4
   c4188:	f001 f870 	bl	c526c <_Bfree>
   c418c:	9905      	ldr	r1, [sp, #20]
   c418e:	4620      	mov	r0, r4
   c4190:	f001 f86c 	bl	c526c <_Bfree>
   c4194:	4631      	mov	r1, r6
   c4196:	4620      	mov	r0, r4
   c4198:	f001 f868 	bl	c526c <_Bfree>
   c419c:	9907      	ldr	r1, [sp, #28]
   c419e:	4620      	mov	r0, r4
   c41a0:	f001 f864 	bl	c526c <_Bfree>
   c41a4:	4629      	mov	r1, r5
   c41a6:	4620      	mov	r0, r4
   c41a8:	f001 f860 	bl	c526c <_Bfree>
   c41ac:	e5dc      	b.n	c3d68 <_strtod_l+0x88>
   c41ae:	4b36      	ldr	r3, [pc, #216]	; (c4288 <_strtod_l+0x5a8>)
   c41b0:	9304      	str	r3, [sp, #16]
   c41b2:	2300      	movs	r3, #0
   c41b4:	ea4f 1828 	mov.w	r8, r8, asr #4
   c41b8:	4650      	mov	r0, sl
   c41ba:	4659      	mov	r1, fp
   c41bc:	4699      	mov	r9, r3
   c41be:	f1b8 0f01 	cmp.w	r8, #1
   c41c2:	dc21      	bgt.n	c4208 <_strtod_l+0x528>
   c41c4:	b10b      	cbz	r3, c41ca <_strtod_l+0x4ea>
   c41c6:	4682      	mov	sl, r0
   c41c8:	468b      	mov	fp, r1
   c41ca:	4b2f      	ldr	r3, [pc, #188]	; (c4288 <_strtod_l+0x5a8>)
   c41cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c41d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c41d4:	4652      	mov	r2, sl
   c41d6:	465b      	mov	r3, fp
   c41d8:	e9d9 0100 	ldrd	r0, r1, [r9]
   c41dc:	f7ff f8ac 	bl	c3338 <__aeabi_dmul>
   c41e0:	4b2a      	ldr	r3, [pc, #168]	; (c428c <_strtod_l+0x5ac>)
   c41e2:	460a      	mov	r2, r1
   c41e4:	400b      	ands	r3, r1
   c41e6:	492a      	ldr	r1, [pc, #168]	; (c4290 <_strtod_l+0x5b0>)
   c41e8:	428b      	cmp	r3, r1
   c41ea:	4682      	mov	sl, r0
   c41ec:	d8bc      	bhi.n	c4168 <_strtod_l+0x488>
   c41ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c41f2:	428b      	cmp	r3, r1
   c41f4:	bf86      	itte	hi
   c41f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4294 <_strtod_l+0x5b4>
   c41fa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c41fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4202:	2300      	movs	r3, #0
   c4204:	9304      	str	r3, [sp, #16]
   c4206:	e084      	b.n	c4312 <_strtod_l+0x632>
   c4208:	f018 0f01 	tst.w	r8, #1
   c420c:	d005      	beq.n	c421a <_strtod_l+0x53a>
   c420e:	9b04      	ldr	r3, [sp, #16]
   c4210:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4214:	f7ff f890 	bl	c3338 <__aeabi_dmul>
   c4218:	2301      	movs	r3, #1
   c421a:	9a04      	ldr	r2, [sp, #16]
   c421c:	3208      	adds	r2, #8
   c421e:	f109 0901 	add.w	r9, r9, #1
   c4222:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4226:	9204      	str	r2, [sp, #16]
   c4228:	e7c9      	b.n	c41be <_strtod_l+0x4de>
   c422a:	d0ea      	beq.n	c4202 <_strtod_l+0x522>
   c422c:	f1c8 0800 	rsb	r8, r8, #0
   c4230:	f018 020f 	ands.w	r2, r8, #15
   c4234:	d00a      	beq.n	c424c <_strtod_l+0x56c>
   c4236:	4b13      	ldr	r3, [pc, #76]	; (c4284 <_strtod_l+0x5a4>)
   c4238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c423c:	4650      	mov	r0, sl
   c423e:	4659      	mov	r1, fp
   c4240:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4244:	f7ff f9a2 	bl	c358c <__aeabi_ddiv>
   c4248:	4682      	mov	sl, r0
   c424a:	468b      	mov	fp, r1
   c424c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4250:	d0d7      	beq.n	c4202 <_strtod_l+0x522>
   c4252:	f1b8 0f1f 	cmp.w	r8, #31
   c4256:	dd1f      	ble.n	c4298 <_strtod_l+0x5b8>
   c4258:	2500      	movs	r5, #0
   c425a:	462e      	mov	r6, r5
   c425c:	9507      	str	r5, [sp, #28]
   c425e:	9505      	str	r5, [sp, #20]
   c4260:	2322      	movs	r3, #34	; 0x22
   c4262:	f04f 0a00 	mov.w	sl, #0
   c4266:	f04f 0b00 	mov.w	fp, #0
   c426a:	6023      	str	r3, [r4, #0]
   c426c:	e786      	b.n	c417c <_strtod_l+0x49c>
   c426e:	bf00      	nop
   c4270:	000c7aa1 	.word	0x000c7aa1
   c4274:	000c7ab8 	.word	0x000c7ab8
   c4278:	000c7a98 	.word	0x000c7a98
   c427c:	000c7a9b 	.word	0x000c7a9b
   c4280:	000c7367 	.word	0x000c7367
   c4284:	000c7d00 	.word	0x000c7d00
   c4288:	000c7cd8 	.word	0x000c7cd8
   c428c:	7ff00000 	.word	0x7ff00000
   c4290:	7ca00000 	.word	0x7ca00000
   c4294:	7fefffff 	.word	0x7fefffff
   c4298:	f018 0310 	ands.w	r3, r8, #16
   c429c:	bf18      	it	ne
   c429e:	236a      	movne	r3, #106	; 0x6a
   c42a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c4650 <_strtod_l+0x970>
   c42a4:	9304      	str	r3, [sp, #16]
   c42a6:	4650      	mov	r0, sl
   c42a8:	4659      	mov	r1, fp
   c42aa:	2300      	movs	r3, #0
   c42ac:	f018 0f01 	tst.w	r8, #1
   c42b0:	d004      	beq.n	c42bc <_strtod_l+0x5dc>
   c42b2:	e9d9 2300 	ldrd	r2, r3, [r9]
   c42b6:	f7ff f83f 	bl	c3338 <__aeabi_dmul>
   c42ba:	2301      	movs	r3, #1
   c42bc:	ea5f 0868 	movs.w	r8, r8, asr #1
   c42c0:	f109 0908 	add.w	r9, r9, #8
   c42c4:	d1f2      	bne.n	c42ac <_strtod_l+0x5cc>
   c42c6:	b10b      	cbz	r3, c42cc <_strtod_l+0x5ec>
   c42c8:	4682      	mov	sl, r0
   c42ca:	468b      	mov	fp, r1
   c42cc:	9b04      	ldr	r3, [sp, #16]
   c42ce:	b1c3      	cbz	r3, c4302 <_strtod_l+0x622>
   c42d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c42d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c42d8:	2b00      	cmp	r3, #0
   c42da:	4659      	mov	r1, fp
   c42dc:	dd11      	ble.n	c4302 <_strtod_l+0x622>
   c42de:	2b1f      	cmp	r3, #31
   c42e0:	f340 8124 	ble.w	c452c <_strtod_l+0x84c>
   c42e4:	2b34      	cmp	r3, #52	; 0x34
   c42e6:	bfde      	ittt	le
   c42e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c42ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c42f0:	fa03 f202 	lslle.w	r2, r3, r2
   c42f4:	f04f 0a00 	mov.w	sl, #0
   c42f8:	bfcc      	ite	gt
   c42fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c42fe:	ea02 0b01 	andle.w	fp, r2, r1
   c4302:	2200      	movs	r2, #0
   c4304:	2300      	movs	r3, #0
   c4306:	4650      	mov	r0, sl
   c4308:	4659      	mov	r1, fp
   c430a:	f7ff fa7d 	bl	c3808 <__aeabi_dcmpeq>
   c430e:	2800      	cmp	r0, #0
   c4310:	d1a2      	bne.n	c4258 <_strtod_l+0x578>
   c4312:	9b07      	ldr	r3, [sp, #28]
   c4314:	9300      	str	r3, [sp, #0]
   c4316:	9908      	ldr	r1, [sp, #32]
   c4318:	462b      	mov	r3, r5
   c431a:	463a      	mov	r2, r7
   c431c:	4620      	mov	r0, r4
   c431e:	f001 f80d 	bl	c533c <__s2b>
   c4322:	9007      	str	r0, [sp, #28]
   c4324:	2800      	cmp	r0, #0
   c4326:	f43f af1f 	beq.w	c4168 <_strtod_l+0x488>
   c432a:	9b05      	ldr	r3, [sp, #20]
   c432c:	1b9e      	subs	r6, r3, r6
   c432e:	9b06      	ldr	r3, [sp, #24]
   c4330:	2b00      	cmp	r3, #0
   c4332:	bfb4      	ite	lt
   c4334:	4633      	movlt	r3, r6
   c4336:	2300      	movge	r3, #0
   c4338:	930c      	str	r3, [sp, #48]	; 0x30
   c433a:	9b06      	ldr	r3, [sp, #24]
   c433c:	2500      	movs	r5, #0
   c433e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4342:	9312      	str	r3, [sp, #72]	; 0x48
   c4344:	462e      	mov	r6, r5
   c4346:	9b07      	ldr	r3, [sp, #28]
   c4348:	4620      	mov	r0, r4
   c434a:	6859      	ldr	r1, [r3, #4]
   c434c:	f000 ff4e 	bl	c51ec <_Balloc>
   c4350:	9005      	str	r0, [sp, #20]
   c4352:	2800      	cmp	r0, #0
   c4354:	f43f af0c 	beq.w	c4170 <_strtod_l+0x490>
   c4358:	9b07      	ldr	r3, [sp, #28]
   c435a:	691a      	ldr	r2, [r3, #16]
   c435c:	3202      	adds	r2, #2
   c435e:	f103 010c 	add.w	r1, r3, #12
   c4362:	0092      	lsls	r2, r2, #2
   c4364:	300c      	adds	r0, #12
   c4366:	f7ff fb73 	bl	c3a50 <memcpy>
   c436a:	ec4b ab10 	vmov	d0, sl, fp
   c436e:	aa1a      	add	r2, sp, #104	; 0x68
   c4370:	a919      	add	r1, sp, #100	; 0x64
   c4372:	4620      	mov	r0, r4
   c4374:	f001 fb28 	bl	c59c8 <__d2b>
   c4378:	ec4b ab18 	vmov	d8, sl, fp
   c437c:	9018      	str	r0, [sp, #96]	; 0x60
   c437e:	2800      	cmp	r0, #0
   c4380:	f43f aef6 	beq.w	c4170 <_strtod_l+0x490>
   c4384:	2101      	movs	r1, #1
   c4386:	4620      	mov	r0, r4
   c4388:	f001 f872 	bl	c5470 <__i2b>
   c438c:	4606      	mov	r6, r0
   c438e:	2800      	cmp	r0, #0
   c4390:	f43f aeee 	beq.w	c4170 <_strtod_l+0x490>
   c4394:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4396:	9904      	ldr	r1, [sp, #16]
   c4398:	2b00      	cmp	r3, #0
   c439a:	bfab      	itete	ge
   c439c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c439e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c43a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c43a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c43a6:	bfac      	ite	ge
   c43a8:	eb03 0902 	addge.w	r9, r3, r2
   c43ac:	1ad7      	sublt	r7, r2, r3
   c43ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c43b0:	eba3 0801 	sub.w	r8, r3, r1
   c43b4:	4490      	add	r8, r2
   c43b6:	4ba1      	ldr	r3, [pc, #644]	; (c463c <_strtod_l+0x95c>)
   c43b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c43bc:	4598      	cmp	r8, r3
   c43be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c43c2:	f280 80c7 	bge.w	c4554 <_strtod_l+0x874>
   c43c6:	eba3 0308 	sub.w	r3, r3, r8
   c43ca:	2b1f      	cmp	r3, #31
   c43cc:	eba2 0203 	sub.w	r2, r2, r3
   c43d0:	f04f 0101 	mov.w	r1, #1
   c43d4:	f300 80b1 	bgt.w	c453a <_strtod_l+0x85a>
   c43d8:	fa01 f303 	lsl.w	r3, r1, r3
   c43dc:	930d      	str	r3, [sp, #52]	; 0x34
   c43de:	2300      	movs	r3, #0
   c43e0:	9308      	str	r3, [sp, #32]
   c43e2:	eb09 0802 	add.w	r8, r9, r2
   c43e6:	9b04      	ldr	r3, [sp, #16]
   c43e8:	45c1      	cmp	r9, r8
   c43ea:	4417      	add	r7, r2
   c43ec:	441f      	add	r7, r3
   c43ee:	464b      	mov	r3, r9
   c43f0:	bfa8      	it	ge
   c43f2:	4643      	movge	r3, r8
   c43f4:	42bb      	cmp	r3, r7
   c43f6:	bfa8      	it	ge
   c43f8:	463b      	movge	r3, r7
   c43fa:	2b00      	cmp	r3, #0
   c43fc:	bfc2      	ittt	gt
   c43fe:	eba8 0803 	subgt.w	r8, r8, r3
   c4402:	1aff      	subgt	r7, r7, r3
   c4404:	eba9 0903 	subgt.w	r9, r9, r3
   c4408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c440a:	2b00      	cmp	r3, #0
   c440c:	dd17      	ble.n	c443e <_strtod_l+0x75e>
   c440e:	4631      	mov	r1, r6
   c4410:	461a      	mov	r2, r3
   c4412:	4620      	mov	r0, r4
   c4414:	f001 f8ec 	bl	c55f0 <__pow5mult>
   c4418:	4606      	mov	r6, r0
   c441a:	2800      	cmp	r0, #0
   c441c:	f43f aea8 	beq.w	c4170 <_strtod_l+0x490>
   c4420:	4601      	mov	r1, r0
   c4422:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4424:	4620      	mov	r0, r4
   c4426:	f001 f839 	bl	c549c <__multiply>
   c442a:	900b      	str	r0, [sp, #44]	; 0x2c
   c442c:	2800      	cmp	r0, #0
   c442e:	f43f ae9f 	beq.w	c4170 <_strtod_l+0x490>
   c4432:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4434:	4620      	mov	r0, r4
   c4436:	f000 ff19 	bl	c526c <_Bfree>
   c443a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c443c:	9318      	str	r3, [sp, #96]	; 0x60
   c443e:	f1b8 0f00 	cmp.w	r8, #0
   c4442:	f300 808c 	bgt.w	c455e <_strtod_l+0x87e>
   c4446:	9b06      	ldr	r3, [sp, #24]
   c4448:	2b00      	cmp	r3, #0
   c444a:	dd08      	ble.n	c445e <_strtod_l+0x77e>
   c444c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c444e:	9905      	ldr	r1, [sp, #20]
   c4450:	4620      	mov	r0, r4
   c4452:	f001 f8cd 	bl	c55f0 <__pow5mult>
   c4456:	9005      	str	r0, [sp, #20]
   c4458:	2800      	cmp	r0, #0
   c445a:	f43f ae89 	beq.w	c4170 <_strtod_l+0x490>
   c445e:	2f00      	cmp	r7, #0
   c4460:	dd08      	ble.n	c4474 <_strtod_l+0x794>
   c4462:	9905      	ldr	r1, [sp, #20]
   c4464:	463a      	mov	r2, r7
   c4466:	4620      	mov	r0, r4
   c4468:	f001 f91c 	bl	c56a4 <__lshift>
   c446c:	9005      	str	r0, [sp, #20]
   c446e:	2800      	cmp	r0, #0
   c4470:	f43f ae7e 	beq.w	c4170 <_strtod_l+0x490>
   c4474:	f1b9 0f00 	cmp.w	r9, #0
   c4478:	dd08      	ble.n	c448c <_strtod_l+0x7ac>
   c447a:	4631      	mov	r1, r6
   c447c:	464a      	mov	r2, r9
   c447e:	4620      	mov	r0, r4
   c4480:	f001 f910 	bl	c56a4 <__lshift>
   c4484:	4606      	mov	r6, r0
   c4486:	2800      	cmp	r0, #0
   c4488:	f43f ae72 	beq.w	c4170 <_strtod_l+0x490>
   c448c:	9a05      	ldr	r2, [sp, #20]
   c448e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4490:	4620      	mov	r0, r4
   c4492:	f001 f993 	bl	c57bc <__mdiff>
   c4496:	4605      	mov	r5, r0
   c4498:	2800      	cmp	r0, #0
   c449a:	f43f ae69 	beq.w	c4170 <_strtod_l+0x490>
   c449e:	68c3      	ldr	r3, [r0, #12]
   c44a0:	930b      	str	r3, [sp, #44]	; 0x2c
   c44a2:	2300      	movs	r3, #0
   c44a4:	60c3      	str	r3, [r0, #12]
   c44a6:	4631      	mov	r1, r6
   c44a8:	f001 f96c 	bl	c5784 <__mcmp>
   c44ac:	2800      	cmp	r0, #0
   c44ae:	da60      	bge.n	c4572 <_strtod_l+0x892>
   c44b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c44b2:	ea53 030a 	orrs.w	r3, r3, sl
   c44b6:	f040 8082 	bne.w	c45be <_strtod_l+0x8de>
   c44ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c44be:	2b00      	cmp	r3, #0
   c44c0:	d17d      	bne.n	c45be <_strtod_l+0x8de>
   c44c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c44c6:	0d1b      	lsrs	r3, r3, #20
   c44c8:	051b      	lsls	r3, r3, #20
   c44ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c44ce:	d976      	bls.n	c45be <_strtod_l+0x8de>
   c44d0:	696b      	ldr	r3, [r5, #20]
   c44d2:	b913      	cbnz	r3, c44da <_strtod_l+0x7fa>
   c44d4:	692b      	ldr	r3, [r5, #16]
   c44d6:	2b01      	cmp	r3, #1
   c44d8:	dd71      	ble.n	c45be <_strtod_l+0x8de>
   c44da:	4629      	mov	r1, r5
   c44dc:	2201      	movs	r2, #1
   c44de:	4620      	mov	r0, r4
   c44e0:	f001 f8e0 	bl	c56a4 <__lshift>
   c44e4:	4631      	mov	r1, r6
   c44e6:	4605      	mov	r5, r0
   c44e8:	f001 f94c 	bl	c5784 <__mcmp>
   c44ec:	2800      	cmp	r0, #0
   c44ee:	dd66      	ble.n	c45be <_strtod_l+0x8de>
   c44f0:	9904      	ldr	r1, [sp, #16]
   c44f2:	4a53      	ldr	r2, [pc, #332]	; (c4640 <_strtod_l+0x960>)
   c44f4:	465b      	mov	r3, fp
   c44f6:	2900      	cmp	r1, #0
   c44f8:	f000 8081 	beq.w	c45fe <_strtod_l+0x91e>
   c44fc:	ea02 010b 	and.w	r1, r2, fp
   c4500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4504:	dc7b      	bgt.n	c45fe <_strtod_l+0x91e>
   c4506:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c450a:	f77f aea9 	ble.w	c4260 <_strtod_l+0x580>
   c450e:	4b4d      	ldr	r3, [pc, #308]	; (c4644 <_strtod_l+0x964>)
   c4510:	4650      	mov	r0, sl
   c4512:	4659      	mov	r1, fp
   c4514:	2200      	movs	r2, #0
   c4516:	f7fe ff0f 	bl	c3338 <__aeabi_dmul>
   c451a:	460b      	mov	r3, r1
   c451c:	4303      	orrs	r3, r0
   c451e:	bf08      	it	eq
   c4520:	2322      	moveq	r3, #34	; 0x22
   c4522:	4682      	mov	sl, r0
   c4524:	468b      	mov	fp, r1
   c4526:	bf08      	it	eq
   c4528:	6023      	streq	r3, [r4, #0]
   c452a:	e62b      	b.n	c4184 <_strtod_l+0x4a4>
   c452c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4530:	fa02 f303 	lsl.w	r3, r2, r3
   c4534:	ea03 0a0a 	and.w	sl, r3, sl
   c4538:	e6e3      	b.n	c4302 <_strtod_l+0x622>
   c453a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c453e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c4542:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c4546:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c454a:	fa01 f308 	lsl.w	r3, r1, r8
   c454e:	9308      	str	r3, [sp, #32]
   c4550:	910d      	str	r1, [sp, #52]	; 0x34
   c4552:	e746      	b.n	c43e2 <_strtod_l+0x702>
   c4554:	2300      	movs	r3, #0
   c4556:	9308      	str	r3, [sp, #32]
   c4558:	2301      	movs	r3, #1
   c455a:	930d      	str	r3, [sp, #52]	; 0x34
   c455c:	e741      	b.n	c43e2 <_strtod_l+0x702>
   c455e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4560:	4642      	mov	r2, r8
   c4562:	4620      	mov	r0, r4
   c4564:	f001 f89e 	bl	c56a4 <__lshift>
   c4568:	9018      	str	r0, [sp, #96]	; 0x60
   c456a:	2800      	cmp	r0, #0
   c456c:	f47f af6b 	bne.w	c4446 <_strtod_l+0x766>
   c4570:	e5fe      	b.n	c4170 <_strtod_l+0x490>
   c4572:	465f      	mov	r7, fp
   c4574:	d16e      	bne.n	c4654 <_strtod_l+0x974>
   c4576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c4578:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c457c:	b342      	cbz	r2, c45d0 <_strtod_l+0x8f0>
   c457e:	4a32      	ldr	r2, [pc, #200]	; (c4648 <_strtod_l+0x968>)
   c4580:	4293      	cmp	r3, r2
   c4582:	d128      	bne.n	c45d6 <_strtod_l+0x8f6>
   c4584:	9b04      	ldr	r3, [sp, #16]
   c4586:	4651      	mov	r1, sl
   c4588:	b1eb      	cbz	r3, c45c6 <_strtod_l+0x8e6>
   c458a:	4b2d      	ldr	r3, [pc, #180]	; (c4640 <_strtod_l+0x960>)
   c458c:	403b      	ands	r3, r7
   c458e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4596:	d819      	bhi.n	c45cc <_strtod_l+0x8ec>
   c4598:	0d1b      	lsrs	r3, r3, #20
   c459a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c459e:	fa02 f303 	lsl.w	r3, r2, r3
   c45a2:	4299      	cmp	r1, r3
   c45a4:	d117      	bne.n	c45d6 <_strtod_l+0x8f6>
   c45a6:	4b29      	ldr	r3, [pc, #164]	; (c464c <_strtod_l+0x96c>)
   c45a8:	429f      	cmp	r7, r3
   c45aa:	d102      	bne.n	c45b2 <_strtod_l+0x8d2>
   c45ac:	3101      	adds	r1, #1
   c45ae:	f43f addf 	beq.w	c4170 <_strtod_l+0x490>
   c45b2:	4b23      	ldr	r3, [pc, #140]	; (c4640 <_strtod_l+0x960>)
   c45b4:	403b      	ands	r3, r7
   c45b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c45ba:	f04f 0a00 	mov.w	sl, #0
   c45be:	9b04      	ldr	r3, [sp, #16]
   c45c0:	2b00      	cmp	r3, #0
   c45c2:	d1a4      	bne.n	c450e <_strtod_l+0x82e>
   c45c4:	e5de      	b.n	c4184 <_strtod_l+0x4a4>
   c45c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c45ca:	e7ea      	b.n	c45a2 <_strtod_l+0x8c2>
   c45cc:	4613      	mov	r3, r2
   c45ce:	e7e8      	b.n	c45a2 <_strtod_l+0x8c2>
   c45d0:	ea53 030a 	orrs.w	r3, r3, sl
   c45d4:	d08c      	beq.n	c44f0 <_strtod_l+0x810>
   c45d6:	9b08      	ldr	r3, [sp, #32]
   c45d8:	b1db      	cbz	r3, c4612 <_strtod_l+0x932>
   c45da:	423b      	tst	r3, r7
   c45dc:	d0ef      	beq.n	c45be <_strtod_l+0x8de>
   c45de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c45e0:	9a04      	ldr	r2, [sp, #16]
   c45e2:	4650      	mov	r0, sl
   c45e4:	4659      	mov	r1, fp
   c45e6:	b1c3      	cbz	r3, c461a <_strtod_l+0x93a>
   c45e8:	f7ff fb5d 	bl	c3ca6 <sulp>
   c45ec:	4602      	mov	r2, r0
   c45ee:	460b      	mov	r3, r1
   c45f0:	ec51 0b18 	vmov	r0, r1, d8
   c45f4:	f7fe fcea 	bl	c2fcc <__adddf3>
   c45f8:	4682      	mov	sl, r0
   c45fa:	468b      	mov	fp, r1
   c45fc:	e7df      	b.n	c45be <_strtod_l+0x8de>
   c45fe:	4013      	ands	r3, r2
   c4600:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c4604:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c4608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c460c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c4610:	e7d5      	b.n	c45be <_strtod_l+0x8de>
   c4612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4614:	ea13 0f0a 	tst.w	r3, sl
   c4618:	e7e0      	b.n	c45dc <_strtod_l+0x8fc>
   c461a:	f7ff fb44 	bl	c3ca6 <sulp>
   c461e:	4602      	mov	r2, r0
   c4620:	460b      	mov	r3, r1
   c4622:	ec51 0b18 	vmov	r0, r1, d8
   c4626:	f7fe fccf 	bl	c2fc8 <__aeabi_dsub>
   c462a:	2200      	movs	r2, #0
   c462c:	2300      	movs	r3, #0
   c462e:	4682      	mov	sl, r0
   c4630:	468b      	mov	fp, r1
   c4632:	f7ff f8e9 	bl	c3808 <__aeabi_dcmpeq>
   c4636:	2800      	cmp	r0, #0
   c4638:	d0c1      	beq.n	c45be <_strtod_l+0x8de>
   c463a:	e611      	b.n	c4260 <_strtod_l+0x580>
   c463c:	fffffc02 	.word	0xfffffc02
   c4640:	7ff00000 	.word	0x7ff00000
   c4644:	39500000 	.word	0x39500000
   c4648:	000fffff 	.word	0x000fffff
   c464c:	7fefffff 	.word	0x7fefffff
   c4650:	000c7ad0 	.word	0x000c7ad0
   c4654:	4631      	mov	r1, r6
   c4656:	4628      	mov	r0, r5
   c4658:	f001 fa12 	bl	c5a80 <__ratio>
   c465c:	ec59 8b10 	vmov	r8, r9, d0
   c4660:	ee10 0a10 	vmov	r0, s0
   c4664:	2200      	movs	r2, #0
   c4666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c466a:	4649      	mov	r1, r9
   c466c:	f7ff f8e0 	bl	c3830 <__aeabi_dcmple>
   c4670:	2800      	cmp	r0, #0
   c4672:	d07a      	beq.n	c476a <_strtod_l+0xa8a>
   c4674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4676:	2b00      	cmp	r3, #0
   c4678:	d04a      	beq.n	c4710 <_strtod_l+0xa30>
   c467a:	4b95      	ldr	r3, [pc, #596]	; (c48d0 <_strtod_l+0xbf0>)
   c467c:	2200      	movs	r2, #0
   c467e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4682:	f8df 924c 	ldr.w	r9, [pc, #588]	; c48d0 <_strtod_l+0xbf0>
   c4686:	f04f 0800 	mov.w	r8, #0
   c468a:	4b92      	ldr	r3, [pc, #584]	; (c48d4 <_strtod_l+0xbf4>)
   c468c:	403b      	ands	r3, r7
   c468e:	930d      	str	r3, [sp, #52]	; 0x34
   c4690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4692:	4b91      	ldr	r3, [pc, #580]	; (c48d8 <_strtod_l+0xbf8>)
   c4694:	429a      	cmp	r2, r3
   c4696:	f040 80b0 	bne.w	c47fa <_strtod_l+0xb1a>
   c469a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c469e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c46a2:	ec4b ab10 	vmov	d0, sl, fp
   c46a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c46aa:	f001 f911 	bl	c58d0 <__ulp>
   c46ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c46b2:	ec53 2b10 	vmov	r2, r3, d0
   c46b6:	f7fe fe3f 	bl	c3338 <__aeabi_dmul>
   c46ba:	4652      	mov	r2, sl
   c46bc:	465b      	mov	r3, fp
   c46be:	f7fe fc85 	bl	c2fcc <__adddf3>
   c46c2:	460b      	mov	r3, r1
   c46c4:	4983      	ldr	r1, [pc, #524]	; (c48d4 <_strtod_l+0xbf4>)
   c46c6:	4a85      	ldr	r2, [pc, #532]	; (c48dc <_strtod_l+0xbfc>)
   c46c8:	4019      	ands	r1, r3
   c46ca:	4291      	cmp	r1, r2
   c46cc:	4682      	mov	sl, r0
   c46ce:	d960      	bls.n	c4792 <_strtod_l+0xab2>
   c46d0:	ee18 3a90 	vmov	r3, s17
   c46d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c46d8:	4293      	cmp	r3, r2
   c46da:	d104      	bne.n	c46e6 <_strtod_l+0xa06>
   c46dc:	ee18 3a10 	vmov	r3, s16
   c46e0:	3301      	adds	r3, #1
   c46e2:	f43f ad45 	beq.w	c4170 <_strtod_l+0x490>
   c46e6:	f8df b200 	ldr.w	fp, [pc, #512]	; c48e8 <_strtod_l+0xc08>
   c46ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c46ee:	9918      	ldr	r1, [sp, #96]	; 0x60
   c46f0:	4620      	mov	r0, r4
   c46f2:	f000 fdbb 	bl	c526c <_Bfree>
   c46f6:	9905      	ldr	r1, [sp, #20]
   c46f8:	4620      	mov	r0, r4
   c46fa:	f000 fdb7 	bl	c526c <_Bfree>
   c46fe:	4631      	mov	r1, r6
   c4700:	4620      	mov	r0, r4
   c4702:	f000 fdb3 	bl	c526c <_Bfree>
   c4706:	4629      	mov	r1, r5
   c4708:	4620      	mov	r0, r4
   c470a:	f000 fdaf 	bl	c526c <_Bfree>
   c470e:	e61a      	b.n	c4346 <_strtod_l+0x666>
   c4710:	f1ba 0f00 	cmp.w	sl, #0
   c4714:	d11b      	bne.n	c474e <_strtod_l+0xa6e>
   c4716:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c471a:	b9f3      	cbnz	r3, c475a <_strtod_l+0xa7a>
   c471c:	4b6c      	ldr	r3, [pc, #432]	; (c48d0 <_strtod_l+0xbf0>)
   c471e:	2200      	movs	r2, #0
   c4720:	4640      	mov	r0, r8
   c4722:	4649      	mov	r1, r9
   c4724:	f7ff f87a 	bl	c381c <__aeabi_dcmplt>
   c4728:	b9d0      	cbnz	r0, c4760 <_strtod_l+0xa80>
   c472a:	4640      	mov	r0, r8
   c472c:	4649      	mov	r1, r9
   c472e:	4b6c      	ldr	r3, [pc, #432]	; (c48e0 <_strtod_l+0xc00>)
   c4730:	2200      	movs	r2, #0
   c4732:	f7fe fe01 	bl	c3338 <__aeabi_dmul>
   c4736:	4680      	mov	r8, r0
   c4738:	4689      	mov	r9, r1
   c473a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c473e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c4742:	9315      	str	r3, [sp, #84]	; 0x54
   c4744:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c4748:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c474c:	e79d      	b.n	c468a <_strtod_l+0x9aa>
   c474e:	f1ba 0f01 	cmp.w	sl, #1
   c4752:	d102      	bne.n	c475a <_strtod_l+0xa7a>
   c4754:	2f00      	cmp	r7, #0
   c4756:	f43f ad83 	beq.w	c4260 <_strtod_l+0x580>
   c475a:	4b62      	ldr	r3, [pc, #392]	; (c48e4 <_strtod_l+0xc04>)
   c475c:	2200      	movs	r2, #0
   c475e:	e78e      	b.n	c467e <_strtod_l+0x99e>
   c4760:	f8df 917c 	ldr.w	r9, [pc, #380]	; c48e0 <_strtod_l+0xc00>
   c4764:	f04f 0800 	mov.w	r8, #0
   c4768:	e7e7      	b.n	c473a <_strtod_l+0xa5a>
   c476a:	4b5d      	ldr	r3, [pc, #372]	; (c48e0 <_strtod_l+0xc00>)
   c476c:	4640      	mov	r0, r8
   c476e:	4649      	mov	r1, r9
   c4770:	2200      	movs	r2, #0
   c4772:	f7fe fde1 	bl	c3338 <__aeabi_dmul>
   c4776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4778:	4680      	mov	r8, r0
   c477a:	4689      	mov	r9, r1
   c477c:	b933      	cbnz	r3, c478c <_strtod_l+0xaac>
   c477e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4782:	900e      	str	r0, [sp, #56]	; 0x38
   c4784:	930f      	str	r3, [sp, #60]	; 0x3c
   c4786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c478a:	e7dd      	b.n	c4748 <_strtod_l+0xa68>
   c478c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c4790:	e7f9      	b.n	c4786 <_strtod_l+0xaa6>
   c4792:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c4796:	9b04      	ldr	r3, [sp, #16]
   c4798:	2b00      	cmp	r3, #0
   c479a:	d1a8      	bne.n	c46ee <_strtod_l+0xa0e>
   c479c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c47a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c47a2:	0d1b      	lsrs	r3, r3, #20
   c47a4:	051b      	lsls	r3, r3, #20
   c47a6:	429a      	cmp	r2, r3
   c47a8:	d1a1      	bne.n	c46ee <_strtod_l+0xa0e>
   c47aa:	4640      	mov	r0, r8
   c47ac:	4649      	mov	r1, r9
   c47ae:	f001 fa05 	bl	c5bbc <__aeabi_d2lz>
   c47b2:	f7fe fd93 	bl	c32dc <__aeabi_l2d>
   c47b6:	4602      	mov	r2, r0
   c47b8:	460b      	mov	r3, r1
   c47ba:	4640      	mov	r0, r8
   c47bc:	4649      	mov	r1, r9
   c47be:	f7fe fc03 	bl	c2fc8 <__aeabi_dsub>
   c47c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c47c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c47c8:	ea43 030a 	orr.w	r3, r3, sl
   c47cc:	4313      	orrs	r3, r2
   c47ce:	4680      	mov	r8, r0
   c47d0:	4689      	mov	r9, r1
   c47d2:	d055      	beq.n	c4880 <_strtod_l+0xba0>
   c47d4:	a336      	add	r3, pc, #216	; (adr r3, c48b0 <_strtod_l+0xbd0>)
   c47d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c47da:	f7ff f81f 	bl	c381c <__aeabi_dcmplt>
   c47de:	2800      	cmp	r0, #0
   c47e0:	f47f acd0 	bne.w	c4184 <_strtod_l+0x4a4>
   c47e4:	a334      	add	r3, pc, #208	; (adr r3, c48b8 <_strtod_l+0xbd8>)
   c47e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c47ea:	4640      	mov	r0, r8
   c47ec:	4649      	mov	r1, r9
   c47ee:	f7ff f833 	bl	c3858 <__aeabi_dcmpgt>
   c47f2:	2800      	cmp	r0, #0
   c47f4:	f43f af7b 	beq.w	c46ee <_strtod_l+0xa0e>
   c47f8:	e4c4      	b.n	c4184 <_strtod_l+0x4a4>
   c47fa:	9b04      	ldr	r3, [sp, #16]
   c47fc:	b333      	cbz	r3, c484c <_strtod_l+0xb6c>
   c47fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c4800:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4804:	d822      	bhi.n	c484c <_strtod_l+0xb6c>
   c4806:	a32e      	add	r3, pc, #184	; (adr r3, c48c0 <_strtod_l+0xbe0>)
   c4808:	e9d3 2300 	ldrd	r2, r3, [r3]
   c480c:	4640      	mov	r0, r8
   c480e:	4649      	mov	r1, r9
   c4810:	f7ff f80e 	bl	c3830 <__aeabi_dcmple>
   c4814:	b1a0      	cbz	r0, c4840 <_strtod_l+0xb60>
   c4816:	4649      	mov	r1, r9
   c4818:	4640      	mov	r0, r8
   c481a:	f7ff f865 	bl	c38e8 <__aeabi_d2uiz>
   c481e:	2801      	cmp	r0, #1
   c4820:	bf38      	it	cc
   c4822:	2001      	movcc	r0, #1
   c4824:	f7fe fd0e 	bl	c3244 <__aeabi_ui2d>
   c4828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c482a:	4680      	mov	r8, r0
   c482c:	4689      	mov	r9, r1
   c482e:	bb23      	cbnz	r3, c487a <_strtod_l+0xb9a>
   c4830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4834:	9010      	str	r0, [sp, #64]	; 0x40
   c4836:	9311      	str	r3, [sp, #68]	; 0x44
   c4838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c483c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4840:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c4842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4844:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c4848:	1a9b      	subs	r3, r3, r2
   c484a:	9309      	str	r3, [sp, #36]	; 0x24
   c484c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4850:	eeb0 0a48 	vmov.f32	s0, s16
   c4854:	eef0 0a68 	vmov.f32	s1, s17
   c4858:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c485c:	f001 f838 	bl	c58d0 <__ulp>
   c4860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4864:	ec53 2b10 	vmov	r2, r3, d0
   c4868:	f7fe fd66 	bl	c3338 <__aeabi_dmul>
   c486c:	ec53 2b18 	vmov	r2, r3, d8
   c4870:	f7fe fbac 	bl	c2fcc <__adddf3>
   c4874:	4682      	mov	sl, r0
   c4876:	468b      	mov	fp, r1
   c4878:	e78d      	b.n	c4796 <_strtod_l+0xab6>
   c487a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c487e:	e7db      	b.n	c4838 <_strtod_l+0xb58>
   c4880:	a311      	add	r3, pc, #68	; (adr r3, c48c8 <_strtod_l+0xbe8>)
   c4882:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4886:	f7fe ffc9 	bl	c381c <__aeabi_dcmplt>
   c488a:	e7b2      	b.n	c47f2 <_strtod_l+0xb12>
   c488c:	2300      	movs	r3, #0
   c488e:	930a      	str	r3, [sp, #40]	; 0x28
   c4890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c4892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4894:	6013      	str	r3, [r2, #0]
   c4896:	f7ff ba6b 	b.w	c3d70 <_strtod_l+0x90>
   c489a:	2a65      	cmp	r2, #101	; 0x65
   c489c:	f43f ab5f 	beq.w	c3f5e <_strtod_l+0x27e>
   c48a0:	2a45      	cmp	r2, #69	; 0x45
   c48a2:	f43f ab5c 	beq.w	c3f5e <_strtod_l+0x27e>
   c48a6:	2301      	movs	r3, #1
   c48a8:	f7ff bb94 	b.w	c3fd4 <_strtod_l+0x2f4>
   c48ac:	f3af 8000 	nop.w
   c48b0:	94a03595 	.word	0x94a03595
   c48b4:	3fdfffff 	.word	0x3fdfffff
   c48b8:	35afe535 	.word	0x35afe535
   c48bc:	3fe00000 	.word	0x3fe00000
   c48c0:	ffc00000 	.word	0xffc00000
   c48c4:	41dfffff 	.word	0x41dfffff
   c48c8:	94a03595 	.word	0x94a03595
   c48cc:	3fcfffff 	.word	0x3fcfffff
   c48d0:	3ff00000 	.word	0x3ff00000
   c48d4:	7ff00000 	.word	0x7ff00000
   c48d8:	7fe00000 	.word	0x7fe00000
   c48dc:	7c9fffff 	.word	0x7c9fffff
   c48e0:	3fe00000 	.word	0x3fe00000
   c48e4:	bff00000 	.word	0xbff00000
   c48e8:	7fefffff 	.word	0x7fefffff

000c48ec <strtod>:
   c48ec:	460a      	mov	r2, r1
   c48ee:	4601      	mov	r1, r0
   c48f0:	4802      	ldr	r0, [pc, #8]	; (c48fc <strtod+0x10>)
   c48f2:	4b03      	ldr	r3, [pc, #12]	; (c4900 <strtod+0x14>)
   c48f4:	6800      	ldr	r0, [r0, #0]
   c48f6:	f7ff b9f3 	b.w	c3ce0 <_strtod_l>
   c48fa:	bf00      	nop
   c48fc:	2003dba0 	.word	0x2003dba0
   c4900:	2003dc0c 	.word	0x2003dc0c

000c4904 <_strtol_l.constprop.0>:
   c4904:	2b01      	cmp	r3, #1
   c4906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c490a:	d001      	beq.n	c4910 <_strtol_l.constprop.0+0xc>
   c490c:	2b24      	cmp	r3, #36	; 0x24
   c490e:	d906      	bls.n	c491e <_strtol_l.constprop.0+0x1a>
   c4910:	f7f8 ffd0 	bl	bd8b4 <__errno>
   c4914:	2316      	movs	r3, #22
   c4916:	6003      	str	r3, [r0, #0]
   c4918:	2000      	movs	r0, #0
   c491a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c491e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c4a04 <_strtol_l.constprop.0+0x100>
   c4922:	460d      	mov	r5, r1
   c4924:	462e      	mov	r6, r5
   c4926:	f815 4b01 	ldrb.w	r4, [r5], #1
   c492a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c492e:	f017 0708 	ands.w	r7, r7, #8
   c4932:	d1f7      	bne.n	c4924 <_strtol_l.constprop.0+0x20>
   c4934:	2c2d      	cmp	r4, #45	; 0x2d
   c4936:	d132      	bne.n	c499e <_strtol_l.constprop.0+0x9a>
   c4938:	782c      	ldrb	r4, [r5, #0]
   c493a:	2701      	movs	r7, #1
   c493c:	1cb5      	adds	r5, r6, #2
   c493e:	2b00      	cmp	r3, #0
   c4940:	d05b      	beq.n	c49fa <_strtol_l.constprop.0+0xf6>
   c4942:	2b10      	cmp	r3, #16
   c4944:	d109      	bne.n	c495a <_strtol_l.constprop.0+0x56>
   c4946:	2c30      	cmp	r4, #48	; 0x30
   c4948:	d107      	bne.n	c495a <_strtol_l.constprop.0+0x56>
   c494a:	782c      	ldrb	r4, [r5, #0]
   c494c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c4950:	2c58      	cmp	r4, #88	; 0x58
   c4952:	d14d      	bne.n	c49f0 <_strtol_l.constprop.0+0xec>
   c4954:	786c      	ldrb	r4, [r5, #1]
   c4956:	2310      	movs	r3, #16
   c4958:	3502      	adds	r5, #2
   c495a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c495e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4962:	f04f 0c00 	mov.w	ip, #0
   c4966:	fbb8 f9f3 	udiv	r9, r8, r3
   c496a:	4666      	mov	r6, ip
   c496c:	fb03 8a19 	mls	sl, r3, r9, r8
   c4970:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c4974:	f1be 0f09 	cmp.w	lr, #9
   c4978:	d816      	bhi.n	c49a8 <_strtol_l.constprop.0+0xa4>
   c497a:	4674      	mov	r4, lr
   c497c:	42a3      	cmp	r3, r4
   c497e:	dd24      	ble.n	c49ca <_strtol_l.constprop.0+0xc6>
   c4980:	f1bc 0f00 	cmp.w	ip, #0
   c4984:	db1e      	blt.n	c49c4 <_strtol_l.constprop.0+0xc0>
   c4986:	45b1      	cmp	r9, r6
   c4988:	d31c      	bcc.n	c49c4 <_strtol_l.constprop.0+0xc0>
   c498a:	d101      	bne.n	c4990 <_strtol_l.constprop.0+0x8c>
   c498c:	45a2      	cmp	sl, r4
   c498e:	db19      	blt.n	c49c4 <_strtol_l.constprop.0+0xc0>
   c4990:	fb06 4603 	mla	r6, r6, r3, r4
   c4994:	f04f 0c01 	mov.w	ip, #1
   c4998:	f815 4b01 	ldrb.w	r4, [r5], #1
   c499c:	e7e8      	b.n	c4970 <_strtol_l.constprop.0+0x6c>
   c499e:	2c2b      	cmp	r4, #43	; 0x2b
   c49a0:	bf04      	itt	eq
   c49a2:	782c      	ldrbeq	r4, [r5, #0]
   c49a4:	1cb5      	addeq	r5, r6, #2
   c49a6:	e7ca      	b.n	c493e <_strtol_l.constprop.0+0x3a>
   c49a8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c49ac:	f1be 0f19 	cmp.w	lr, #25
   c49b0:	d801      	bhi.n	c49b6 <_strtol_l.constprop.0+0xb2>
   c49b2:	3c37      	subs	r4, #55	; 0x37
   c49b4:	e7e2      	b.n	c497c <_strtol_l.constprop.0+0x78>
   c49b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c49ba:	f1be 0f19 	cmp.w	lr, #25
   c49be:	d804      	bhi.n	c49ca <_strtol_l.constprop.0+0xc6>
   c49c0:	3c57      	subs	r4, #87	; 0x57
   c49c2:	e7db      	b.n	c497c <_strtol_l.constprop.0+0x78>
   c49c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c49c8:	e7e6      	b.n	c4998 <_strtol_l.constprop.0+0x94>
   c49ca:	f1bc 0f00 	cmp.w	ip, #0
   c49ce:	da05      	bge.n	c49dc <_strtol_l.constprop.0+0xd8>
   c49d0:	2322      	movs	r3, #34	; 0x22
   c49d2:	6003      	str	r3, [r0, #0]
   c49d4:	4646      	mov	r6, r8
   c49d6:	b942      	cbnz	r2, c49ea <_strtol_l.constprop.0+0xe6>
   c49d8:	4630      	mov	r0, r6
   c49da:	e79e      	b.n	c491a <_strtol_l.constprop.0+0x16>
   c49dc:	b107      	cbz	r7, c49e0 <_strtol_l.constprop.0+0xdc>
   c49de:	4276      	negs	r6, r6
   c49e0:	2a00      	cmp	r2, #0
   c49e2:	d0f9      	beq.n	c49d8 <_strtol_l.constprop.0+0xd4>
   c49e4:	f1bc 0f00 	cmp.w	ip, #0
   c49e8:	d000      	beq.n	c49ec <_strtol_l.constprop.0+0xe8>
   c49ea:	1e69      	subs	r1, r5, #1
   c49ec:	6011      	str	r1, [r2, #0]
   c49ee:	e7f3      	b.n	c49d8 <_strtol_l.constprop.0+0xd4>
   c49f0:	2430      	movs	r4, #48	; 0x30
   c49f2:	2b00      	cmp	r3, #0
   c49f4:	d1b1      	bne.n	c495a <_strtol_l.constprop.0+0x56>
   c49f6:	2308      	movs	r3, #8
   c49f8:	e7af      	b.n	c495a <_strtol_l.constprop.0+0x56>
   c49fa:	2c30      	cmp	r4, #48	; 0x30
   c49fc:	d0a5      	beq.n	c494a <_strtol_l.constprop.0+0x46>
   c49fe:	230a      	movs	r3, #10
   c4a00:	e7ab      	b.n	c495a <_strtol_l.constprop.0+0x56>
   c4a02:	bf00      	nop
   c4a04:	000c7af9 	.word	0x000c7af9

000c4a08 <strtol>:
   c4a08:	4613      	mov	r3, r2
   c4a0a:	460a      	mov	r2, r1
   c4a0c:	4601      	mov	r1, r0
   c4a0e:	4802      	ldr	r0, [pc, #8]	; (c4a18 <strtol+0x10>)
   c4a10:	6800      	ldr	r0, [r0, #0]
   c4a12:	f7ff bf77 	b.w	c4904 <_strtol_l.constprop.0>
   c4a16:	bf00      	nop
   c4a18:	2003dba0 	.word	0x2003dba0

000c4a1c <__register_exitproc>:
   c4a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c4a20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c4adc <__register_exitproc+0xc0>
   c4a24:	4606      	mov	r6, r0
   c4a26:	f8d8 0000 	ldr.w	r0, [r8]
   c4a2a:	461f      	mov	r7, r3
   c4a2c:	460d      	mov	r5, r1
   c4a2e:	4691      	mov	r9, r2
   c4a30:	f000 fbc6 	bl	c51c0 <__retarget_lock_acquire_recursive>
   c4a34:	4b25      	ldr	r3, [pc, #148]	; (c4acc <__register_exitproc+0xb0>)
   c4a36:	681c      	ldr	r4, [r3, #0]
   c4a38:	b934      	cbnz	r4, c4a48 <__register_exitproc+0x2c>
   c4a3a:	4c25      	ldr	r4, [pc, #148]	; (c4ad0 <__register_exitproc+0xb4>)
   c4a3c:	601c      	str	r4, [r3, #0]
   c4a3e:	4b25      	ldr	r3, [pc, #148]	; (c4ad4 <__register_exitproc+0xb8>)
   c4a40:	b113      	cbz	r3, c4a48 <__register_exitproc+0x2c>
   c4a42:	681b      	ldr	r3, [r3, #0]
   c4a44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c4a48:	6863      	ldr	r3, [r4, #4]
   c4a4a:	2b1f      	cmp	r3, #31
   c4a4c:	dd07      	ble.n	c4a5e <__register_exitproc+0x42>
   c4a4e:	f8d8 0000 	ldr.w	r0, [r8]
   c4a52:	f000 fbb7 	bl	c51c4 <__retarget_lock_release_recursive>
   c4a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c4a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c4a5e:	b34e      	cbz	r6, c4ab4 <__register_exitproc+0x98>
   c4a60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c4a64:	b988      	cbnz	r0, c4a8a <__register_exitproc+0x6e>
   c4a66:	4b1c      	ldr	r3, [pc, #112]	; (c4ad8 <__register_exitproc+0xbc>)
   c4a68:	b923      	cbnz	r3, c4a74 <__register_exitproc+0x58>
   c4a6a:	f8d8 0000 	ldr.w	r0, [r8]
   c4a6e:	f000 fba8 	bl	c51c2 <__retarget_lock_release>
   c4a72:	e7f0      	b.n	c4a56 <__register_exitproc+0x3a>
   c4a74:	f44f 7084 	mov.w	r0, #264	; 0x108
   c4a78:	f7f8 fed4 	bl	bd824 <malloc>
   c4a7c:	2800      	cmp	r0, #0
   c4a7e:	d0f4      	beq.n	c4a6a <__register_exitproc+0x4e>
   c4a80:	2300      	movs	r3, #0
   c4a82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c4a86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c4a8a:	6863      	ldr	r3, [r4, #4]
   c4a8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c4a90:	2201      	movs	r2, #1
   c4a92:	409a      	lsls	r2, r3
   c4a94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c4a98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c4a9c:	4313      	orrs	r3, r2
   c4a9e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c4aa2:	2e02      	cmp	r6, #2
   c4aa4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c4aa8:	bf02      	ittt	eq
   c4aaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c4aae:	4313      	orreq	r3, r2
   c4ab0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c4ab4:	6863      	ldr	r3, [r4, #4]
   c4ab6:	f8d8 0000 	ldr.w	r0, [r8]
   c4aba:	1c5a      	adds	r2, r3, #1
   c4abc:	3302      	adds	r3, #2
   c4abe:	6062      	str	r2, [r4, #4]
   c4ac0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c4ac4:	f000 fb7e 	bl	c51c4 <__retarget_lock_release_recursive>
   c4ac8:	2000      	movs	r0, #0
   c4aca:	e7c6      	b.n	c4a5a <__register_exitproc+0x3e>
   c4acc:	2003e7e8 	.word	0x2003e7e8
   c4ad0:	2003e75c 	.word	0x2003e75c
   c4ad4:	00000000 	.word	0x00000000
   c4ad8:	000bd825 	.word	0x000bd825
   c4adc:	2003dc04 	.word	0x2003dc04

000c4ae0 <rshift>:
   c4ae0:	6903      	ldr	r3, [r0, #16]
   c4ae2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c4ae6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c4aea:	ea4f 1261 	mov.w	r2, r1, asr #5
   c4aee:	f100 0414 	add.w	r4, r0, #20
   c4af2:	dd45      	ble.n	c4b80 <rshift+0xa0>
   c4af4:	f011 011f 	ands.w	r1, r1, #31
   c4af8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c4afc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c4b00:	d10c      	bne.n	c4b1c <rshift+0x3c>
   c4b02:	f100 0710 	add.w	r7, r0, #16
   c4b06:	4629      	mov	r1, r5
   c4b08:	42b1      	cmp	r1, r6
   c4b0a:	d334      	bcc.n	c4b76 <rshift+0x96>
   c4b0c:	1a9b      	subs	r3, r3, r2
   c4b0e:	009b      	lsls	r3, r3, #2
   c4b10:	1eea      	subs	r2, r5, #3
   c4b12:	4296      	cmp	r6, r2
   c4b14:	bf38      	it	cc
   c4b16:	2300      	movcc	r3, #0
   c4b18:	4423      	add	r3, r4
   c4b1a:	e015      	b.n	c4b48 <rshift+0x68>
   c4b1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c4b20:	f1c1 0820 	rsb	r8, r1, #32
   c4b24:	40cf      	lsrs	r7, r1
   c4b26:	f105 0e04 	add.w	lr, r5, #4
   c4b2a:	46a1      	mov	r9, r4
   c4b2c:	4576      	cmp	r6, lr
   c4b2e:	46f4      	mov	ip, lr
   c4b30:	d815      	bhi.n	c4b5e <rshift+0x7e>
   c4b32:	1a9a      	subs	r2, r3, r2
   c4b34:	0092      	lsls	r2, r2, #2
   c4b36:	3a04      	subs	r2, #4
   c4b38:	3501      	adds	r5, #1
   c4b3a:	42ae      	cmp	r6, r5
   c4b3c:	bf38      	it	cc
   c4b3e:	2200      	movcc	r2, #0
   c4b40:	18a3      	adds	r3, r4, r2
   c4b42:	50a7      	str	r7, [r4, r2]
   c4b44:	b107      	cbz	r7, c4b48 <rshift+0x68>
   c4b46:	3304      	adds	r3, #4
   c4b48:	1b1a      	subs	r2, r3, r4
   c4b4a:	42a3      	cmp	r3, r4
   c4b4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c4b50:	bf08      	it	eq
   c4b52:	2300      	moveq	r3, #0
   c4b54:	6102      	str	r2, [r0, #16]
   c4b56:	bf08      	it	eq
   c4b58:	6143      	streq	r3, [r0, #20]
   c4b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c4b5e:	f8dc c000 	ldr.w	ip, [ip]
   c4b62:	fa0c fc08 	lsl.w	ip, ip, r8
   c4b66:	ea4c 0707 	orr.w	r7, ip, r7
   c4b6a:	f849 7b04 	str.w	r7, [r9], #4
   c4b6e:	f85e 7b04 	ldr.w	r7, [lr], #4
   c4b72:	40cf      	lsrs	r7, r1
   c4b74:	e7da      	b.n	c4b2c <rshift+0x4c>
   c4b76:	f851 cb04 	ldr.w	ip, [r1], #4
   c4b7a:	f847 cf04 	str.w	ip, [r7, #4]!
   c4b7e:	e7c3      	b.n	c4b08 <rshift+0x28>
   c4b80:	4623      	mov	r3, r4
   c4b82:	e7e1      	b.n	c4b48 <rshift+0x68>

000c4b84 <__hexdig_fun>:
   c4b84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c4b88:	2b09      	cmp	r3, #9
   c4b8a:	d802      	bhi.n	c4b92 <__hexdig_fun+0xe>
   c4b8c:	3820      	subs	r0, #32
   c4b8e:	b2c0      	uxtb	r0, r0
   c4b90:	4770      	bx	lr
   c4b92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c4b96:	2b05      	cmp	r3, #5
   c4b98:	d801      	bhi.n	c4b9e <__hexdig_fun+0x1a>
   c4b9a:	3847      	subs	r0, #71	; 0x47
   c4b9c:	e7f7      	b.n	c4b8e <__hexdig_fun+0xa>
   c4b9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c4ba2:	2b05      	cmp	r3, #5
   c4ba4:	d801      	bhi.n	c4baa <__hexdig_fun+0x26>
   c4ba6:	3827      	subs	r0, #39	; 0x27
   c4ba8:	e7f1      	b.n	c4b8e <__hexdig_fun+0xa>
   c4baa:	2000      	movs	r0, #0
   c4bac:	4770      	bx	lr
	...

000c4bb0 <__gethex>:
   c4bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4bb4:	ed2d 8b02 	vpush	{d8}
   c4bb8:	b089      	sub	sp, #36	; 0x24
   c4bba:	ee08 0a10 	vmov	s16, r0
   c4bbe:	9304      	str	r3, [sp, #16]
   c4bc0:	4bb4      	ldr	r3, [pc, #720]	; (c4e94 <__gethex+0x2e4>)
   c4bc2:	681b      	ldr	r3, [r3, #0]
   c4bc4:	9301      	str	r3, [sp, #4]
   c4bc6:	4618      	mov	r0, r3
   c4bc8:	468b      	mov	fp, r1
   c4bca:	4690      	mov	r8, r2
   c4bcc:	f7fe fff3 	bl	c3bb6 <strlen>
   c4bd0:	9b01      	ldr	r3, [sp, #4]
   c4bd2:	f8db 2000 	ldr.w	r2, [fp]
   c4bd6:	4403      	add	r3, r0
   c4bd8:	4682      	mov	sl, r0
   c4bda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c4bde:	9305      	str	r3, [sp, #20]
   c4be0:	1c93      	adds	r3, r2, #2
   c4be2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c4be6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c4bea:	32fe      	adds	r2, #254	; 0xfe
   c4bec:	18d1      	adds	r1, r2, r3
   c4bee:	461f      	mov	r7, r3
   c4bf0:	f813 0b01 	ldrb.w	r0, [r3], #1
   c4bf4:	9100      	str	r1, [sp, #0]
   c4bf6:	2830      	cmp	r0, #48	; 0x30
   c4bf8:	d0f8      	beq.n	c4bec <__gethex+0x3c>
   c4bfa:	f7ff ffc3 	bl	c4b84 <__hexdig_fun>
   c4bfe:	4604      	mov	r4, r0
   c4c00:	2800      	cmp	r0, #0
   c4c02:	d13a      	bne.n	c4c7a <__gethex+0xca>
   c4c04:	9901      	ldr	r1, [sp, #4]
   c4c06:	4652      	mov	r2, sl
   c4c08:	4638      	mov	r0, r7
   c4c0a:	f7fe ffef 	bl	c3bec <strncmp>
   c4c0e:	4605      	mov	r5, r0
   c4c10:	2800      	cmp	r0, #0
   c4c12:	d168      	bne.n	c4ce6 <__gethex+0x136>
   c4c14:	f817 000a 	ldrb.w	r0, [r7, sl]
   c4c18:	eb07 060a 	add.w	r6, r7, sl
   c4c1c:	f7ff ffb2 	bl	c4b84 <__hexdig_fun>
   c4c20:	2800      	cmp	r0, #0
   c4c22:	d062      	beq.n	c4cea <__gethex+0x13a>
   c4c24:	4633      	mov	r3, r6
   c4c26:	7818      	ldrb	r0, [r3, #0]
   c4c28:	2830      	cmp	r0, #48	; 0x30
   c4c2a:	461f      	mov	r7, r3
   c4c2c:	f103 0301 	add.w	r3, r3, #1
   c4c30:	d0f9      	beq.n	c4c26 <__gethex+0x76>
   c4c32:	f7ff ffa7 	bl	c4b84 <__hexdig_fun>
   c4c36:	2301      	movs	r3, #1
   c4c38:	fab0 f480 	clz	r4, r0
   c4c3c:	0964      	lsrs	r4, r4, #5
   c4c3e:	4635      	mov	r5, r6
   c4c40:	9300      	str	r3, [sp, #0]
   c4c42:	463a      	mov	r2, r7
   c4c44:	4616      	mov	r6, r2
   c4c46:	3201      	adds	r2, #1
   c4c48:	7830      	ldrb	r0, [r6, #0]
   c4c4a:	f7ff ff9b 	bl	c4b84 <__hexdig_fun>
   c4c4e:	2800      	cmp	r0, #0
   c4c50:	d1f8      	bne.n	c4c44 <__gethex+0x94>
   c4c52:	9901      	ldr	r1, [sp, #4]
   c4c54:	4652      	mov	r2, sl
   c4c56:	4630      	mov	r0, r6
   c4c58:	f7fe ffc8 	bl	c3bec <strncmp>
   c4c5c:	b980      	cbnz	r0, c4c80 <__gethex+0xd0>
   c4c5e:	b94d      	cbnz	r5, c4c74 <__gethex+0xc4>
   c4c60:	eb06 050a 	add.w	r5, r6, sl
   c4c64:	462a      	mov	r2, r5
   c4c66:	4616      	mov	r6, r2
   c4c68:	3201      	adds	r2, #1
   c4c6a:	7830      	ldrb	r0, [r6, #0]
   c4c6c:	f7ff ff8a 	bl	c4b84 <__hexdig_fun>
   c4c70:	2800      	cmp	r0, #0
   c4c72:	d1f8      	bne.n	c4c66 <__gethex+0xb6>
   c4c74:	1bad      	subs	r5, r5, r6
   c4c76:	00ad      	lsls	r5, r5, #2
   c4c78:	e004      	b.n	c4c84 <__gethex+0xd4>
   c4c7a:	2400      	movs	r4, #0
   c4c7c:	4625      	mov	r5, r4
   c4c7e:	e7e0      	b.n	c4c42 <__gethex+0x92>
   c4c80:	2d00      	cmp	r5, #0
   c4c82:	d1f7      	bne.n	c4c74 <__gethex+0xc4>
   c4c84:	7833      	ldrb	r3, [r6, #0]
   c4c86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4c8a:	2b50      	cmp	r3, #80	; 0x50
   c4c8c:	d13b      	bne.n	c4d06 <__gethex+0x156>
   c4c8e:	7873      	ldrb	r3, [r6, #1]
   c4c90:	2b2b      	cmp	r3, #43	; 0x2b
   c4c92:	d02c      	beq.n	c4cee <__gethex+0x13e>
   c4c94:	2b2d      	cmp	r3, #45	; 0x2d
   c4c96:	d02e      	beq.n	c4cf6 <__gethex+0x146>
   c4c98:	1c71      	adds	r1, r6, #1
   c4c9a:	f04f 0900 	mov.w	r9, #0
   c4c9e:	7808      	ldrb	r0, [r1, #0]
   c4ca0:	f7ff ff70 	bl	c4b84 <__hexdig_fun>
   c4ca4:	1e43      	subs	r3, r0, #1
   c4ca6:	b2db      	uxtb	r3, r3
   c4ca8:	2b18      	cmp	r3, #24
   c4caa:	d82c      	bhi.n	c4d06 <__gethex+0x156>
   c4cac:	f1a0 0210 	sub.w	r2, r0, #16
   c4cb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c4cb4:	f7ff ff66 	bl	c4b84 <__hexdig_fun>
   c4cb8:	1e43      	subs	r3, r0, #1
   c4cba:	b2db      	uxtb	r3, r3
   c4cbc:	2b18      	cmp	r3, #24
   c4cbe:	d91d      	bls.n	c4cfc <__gethex+0x14c>
   c4cc0:	f1b9 0f00 	cmp.w	r9, #0
   c4cc4:	d000      	beq.n	c4cc8 <__gethex+0x118>
   c4cc6:	4252      	negs	r2, r2
   c4cc8:	4415      	add	r5, r2
   c4cca:	f8cb 1000 	str.w	r1, [fp]
   c4cce:	b1e4      	cbz	r4, c4d0a <__gethex+0x15a>
   c4cd0:	9b00      	ldr	r3, [sp, #0]
   c4cd2:	2b00      	cmp	r3, #0
   c4cd4:	bf14      	ite	ne
   c4cd6:	2700      	movne	r7, #0
   c4cd8:	2706      	moveq	r7, #6
   c4cda:	4638      	mov	r0, r7
   c4cdc:	b009      	add	sp, #36	; 0x24
   c4cde:	ecbd 8b02 	vpop	{d8}
   c4ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4ce6:	463e      	mov	r6, r7
   c4ce8:	4625      	mov	r5, r4
   c4cea:	2401      	movs	r4, #1
   c4cec:	e7ca      	b.n	c4c84 <__gethex+0xd4>
   c4cee:	f04f 0900 	mov.w	r9, #0
   c4cf2:	1cb1      	adds	r1, r6, #2
   c4cf4:	e7d3      	b.n	c4c9e <__gethex+0xee>
   c4cf6:	f04f 0901 	mov.w	r9, #1
   c4cfa:	e7fa      	b.n	c4cf2 <__gethex+0x142>
   c4cfc:	230a      	movs	r3, #10
   c4cfe:	fb03 0202 	mla	r2, r3, r2, r0
   c4d02:	3a10      	subs	r2, #16
   c4d04:	e7d4      	b.n	c4cb0 <__gethex+0x100>
   c4d06:	4631      	mov	r1, r6
   c4d08:	e7df      	b.n	c4cca <__gethex+0x11a>
   c4d0a:	1bf3      	subs	r3, r6, r7
   c4d0c:	3b01      	subs	r3, #1
   c4d0e:	4621      	mov	r1, r4
   c4d10:	2b07      	cmp	r3, #7
   c4d12:	dc0b      	bgt.n	c4d2c <__gethex+0x17c>
   c4d14:	ee18 0a10 	vmov	r0, s16
   c4d18:	f000 fa68 	bl	c51ec <_Balloc>
   c4d1c:	4604      	mov	r4, r0
   c4d1e:	b940      	cbnz	r0, c4d32 <__gethex+0x182>
   c4d20:	4b5d      	ldr	r3, [pc, #372]	; (c4e98 <__gethex+0x2e8>)
   c4d22:	4602      	mov	r2, r0
   c4d24:	21de      	movs	r1, #222	; 0xde
   c4d26:	485d      	ldr	r0, [pc, #372]	; (c4e9c <__gethex+0x2ec>)
   c4d28:	f7f8 fdcc 	bl	bd8c4 <__assert_func>
   c4d2c:	3101      	adds	r1, #1
   c4d2e:	105b      	asrs	r3, r3, #1
   c4d30:	e7ee      	b.n	c4d10 <__gethex+0x160>
   c4d32:	f100 0914 	add.w	r9, r0, #20
   c4d36:	f04f 0b00 	mov.w	fp, #0
   c4d3a:	f1ca 0301 	rsb	r3, sl, #1
   c4d3e:	f8cd 9008 	str.w	r9, [sp, #8]
   c4d42:	f8cd b000 	str.w	fp, [sp]
   c4d46:	9306      	str	r3, [sp, #24]
   c4d48:	42b7      	cmp	r7, r6
   c4d4a:	d340      	bcc.n	c4dce <__gethex+0x21e>
   c4d4c:	9802      	ldr	r0, [sp, #8]
   c4d4e:	9b00      	ldr	r3, [sp, #0]
   c4d50:	f840 3b04 	str.w	r3, [r0], #4
   c4d54:	eba0 0009 	sub.w	r0, r0, r9
   c4d58:	1080      	asrs	r0, r0, #2
   c4d5a:	0146      	lsls	r6, r0, #5
   c4d5c:	6120      	str	r0, [r4, #16]
   c4d5e:	4618      	mov	r0, r3
   c4d60:	f000 fb36 	bl	c53d0 <__hi0bits>
   c4d64:	1a30      	subs	r0, r6, r0
   c4d66:	f8d8 6000 	ldr.w	r6, [r8]
   c4d6a:	42b0      	cmp	r0, r6
   c4d6c:	dd63      	ble.n	c4e36 <__gethex+0x286>
   c4d6e:	1b87      	subs	r7, r0, r6
   c4d70:	4639      	mov	r1, r7
   c4d72:	4620      	mov	r0, r4
   c4d74:	f000 feda 	bl	c5b2c <__any_on>
   c4d78:	4682      	mov	sl, r0
   c4d7a:	b1a8      	cbz	r0, c4da8 <__gethex+0x1f8>
   c4d7c:	1e7b      	subs	r3, r7, #1
   c4d7e:	1159      	asrs	r1, r3, #5
   c4d80:	f003 021f 	and.w	r2, r3, #31
   c4d84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c4d88:	f04f 0a01 	mov.w	sl, #1
   c4d8c:	fa0a f202 	lsl.w	r2, sl, r2
   c4d90:	420a      	tst	r2, r1
   c4d92:	d009      	beq.n	c4da8 <__gethex+0x1f8>
   c4d94:	4553      	cmp	r3, sl
   c4d96:	dd05      	ble.n	c4da4 <__gethex+0x1f4>
   c4d98:	1eb9      	subs	r1, r7, #2
   c4d9a:	4620      	mov	r0, r4
   c4d9c:	f000 fec6 	bl	c5b2c <__any_on>
   c4da0:	2800      	cmp	r0, #0
   c4da2:	d145      	bne.n	c4e30 <__gethex+0x280>
   c4da4:	f04f 0a02 	mov.w	sl, #2
   c4da8:	4639      	mov	r1, r7
   c4daa:	4620      	mov	r0, r4
   c4dac:	f7ff fe98 	bl	c4ae0 <rshift>
   c4db0:	443d      	add	r5, r7
   c4db2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c4db6:	42ab      	cmp	r3, r5
   c4db8:	da4c      	bge.n	c4e54 <__gethex+0x2a4>
   c4dba:	ee18 0a10 	vmov	r0, s16
   c4dbe:	4621      	mov	r1, r4
   c4dc0:	f000 fa54 	bl	c526c <_Bfree>
   c4dc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c4dc6:	2300      	movs	r3, #0
   c4dc8:	6013      	str	r3, [r2, #0]
   c4dca:	27a3      	movs	r7, #163	; 0xa3
   c4dcc:	e785      	b.n	c4cda <__gethex+0x12a>
   c4dce:	1e73      	subs	r3, r6, #1
   c4dd0:	9a05      	ldr	r2, [sp, #20]
   c4dd2:	9303      	str	r3, [sp, #12]
   c4dd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c4dd8:	4293      	cmp	r3, r2
   c4dda:	d019      	beq.n	c4e10 <__gethex+0x260>
   c4ddc:	f1bb 0f20 	cmp.w	fp, #32
   c4de0:	d107      	bne.n	c4df2 <__gethex+0x242>
   c4de2:	9b02      	ldr	r3, [sp, #8]
   c4de4:	9a00      	ldr	r2, [sp, #0]
   c4de6:	f843 2b04 	str.w	r2, [r3], #4
   c4dea:	9302      	str	r3, [sp, #8]
   c4dec:	2300      	movs	r3, #0
   c4dee:	9300      	str	r3, [sp, #0]
   c4df0:	469b      	mov	fp, r3
   c4df2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c4df6:	f7ff fec5 	bl	c4b84 <__hexdig_fun>
   c4dfa:	9b00      	ldr	r3, [sp, #0]
   c4dfc:	f000 000f 	and.w	r0, r0, #15
   c4e00:	fa00 f00b 	lsl.w	r0, r0, fp
   c4e04:	4303      	orrs	r3, r0
   c4e06:	9300      	str	r3, [sp, #0]
   c4e08:	f10b 0b04 	add.w	fp, fp, #4
   c4e0c:	9b03      	ldr	r3, [sp, #12]
   c4e0e:	e00d      	b.n	c4e2c <__gethex+0x27c>
   c4e10:	9b03      	ldr	r3, [sp, #12]
   c4e12:	9a06      	ldr	r2, [sp, #24]
   c4e14:	4413      	add	r3, r2
   c4e16:	42bb      	cmp	r3, r7
   c4e18:	d3e0      	bcc.n	c4ddc <__gethex+0x22c>
   c4e1a:	4618      	mov	r0, r3
   c4e1c:	9901      	ldr	r1, [sp, #4]
   c4e1e:	9307      	str	r3, [sp, #28]
   c4e20:	4652      	mov	r2, sl
   c4e22:	f7fe fee3 	bl	c3bec <strncmp>
   c4e26:	9b07      	ldr	r3, [sp, #28]
   c4e28:	2800      	cmp	r0, #0
   c4e2a:	d1d7      	bne.n	c4ddc <__gethex+0x22c>
   c4e2c:	461e      	mov	r6, r3
   c4e2e:	e78b      	b.n	c4d48 <__gethex+0x198>
   c4e30:	f04f 0a03 	mov.w	sl, #3
   c4e34:	e7b8      	b.n	c4da8 <__gethex+0x1f8>
   c4e36:	da0a      	bge.n	c4e4e <__gethex+0x29e>
   c4e38:	1a37      	subs	r7, r6, r0
   c4e3a:	4621      	mov	r1, r4
   c4e3c:	ee18 0a10 	vmov	r0, s16
   c4e40:	463a      	mov	r2, r7
   c4e42:	f000 fc2f 	bl	c56a4 <__lshift>
   c4e46:	1bed      	subs	r5, r5, r7
   c4e48:	4604      	mov	r4, r0
   c4e4a:	f100 0914 	add.w	r9, r0, #20
   c4e4e:	f04f 0a00 	mov.w	sl, #0
   c4e52:	e7ae      	b.n	c4db2 <__gethex+0x202>
   c4e54:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c4e58:	42a8      	cmp	r0, r5
   c4e5a:	dd72      	ble.n	c4f42 <__gethex+0x392>
   c4e5c:	1b45      	subs	r5, r0, r5
   c4e5e:	42ae      	cmp	r6, r5
   c4e60:	dc36      	bgt.n	c4ed0 <__gethex+0x320>
   c4e62:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c4e66:	2b02      	cmp	r3, #2
   c4e68:	d02a      	beq.n	c4ec0 <__gethex+0x310>
   c4e6a:	2b03      	cmp	r3, #3
   c4e6c:	d02c      	beq.n	c4ec8 <__gethex+0x318>
   c4e6e:	2b01      	cmp	r3, #1
   c4e70:	d11c      	bne.n	c4eac <__gethex+0x2fc>
   c4e72:	42ae      	cmp	r6, r5
   c4e74:	d11a      	bne.n	c4eac <__gethex+0x2fc>
   c4e76:	2e01      	cmp	r6, #1
   c4e78:	d112      	bne.n	c4ea0 <__gethex+0x2f0>
   c4e7a:	9a04      	ldr	r2, [sp, #16]
   c4e7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c4e80:	6013      	str	r3, [r2, #0]
   c4e82:	2301      	movs	r3, #1
   c4e84:	6123      	str	r3, [r4, #16]
   c4e86:	f8c9 3000 	str.w	r3, [r9]
   c4e8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c4e8c:	2762      	movs	r7, #98	; 0x62
   c4e8e:	601c      	str	r4, [r3, #0]
   c4e90:	e723      	b.n	c4cda <__gethex+0x12a>
   c4e92:	bf00      	nop
   c4e94:	000c7c6c 	.word	0x000c7c6c
   c4e98:	000c7bf9 	.word	0x000c7bf9
   c4e9c:	000c7c0a 	.word	0x000c7c0a
   c4ea0:	1e71      	subs	r1, r6, #1
   c4ea2:	4620      	mov	r0, r4
   c4ea4:	f000 fe42 	bl	c5b2c <__any_on>
   c4ea8:	2800      	cmp	r0, #0
   c4eaa:	d1e6      	bne.n	c4e7a <__gethex+0x2ca>
   c4eac:	ee18 0a10 	vmov	r0, s16
   c4eb0:	4621      	mov	r1, r4
   c4eb2:	f000 f9db 	bl	c526c <_Bfree>
   c4eb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c4eb8:	2300      	movs	r3, #0
   c4eba:	6013      	str	r3, [r2, #0]
   c4ebc:	2750      	movs	r7, #80	; 0x50
   c4ebe:	e70c      	b.n	c4cda <__gethex+0x12a>
   c4ec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4ec2:	2b00      	cmp	r3, #0
   c4ec4:	d1f2      	bne.n	c4eac <__gethex+0x2fc>
   c4ec6:	e7d8      	b.n	c4e7a <__gethex+0x2ca>
   c4ec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4eca:	2b00      	cmp	r3, #0
   c4ecc:	d1d5      	bne.n	c4e7a <__gethex+0x2ca>
   c4ece:	e7ed      	b.n	c4eac <__gethex+0x2fc>
   c4ed0:	1e6f      	subs	r7, r5, #1
   c4ed2:	f1ba 0f00 	cmp.w	sl, #0
   c4ed6:	d131      	bne.n	c4f3c <__gethex+0x38c>
   c4ed8:	b127      	cbz	r7, c4ee4 <__gethex+0x334>
   c4eda:	4639      	mov	r1, r7
   c4edc:	4620      	mov	r0, r4
   c4ede:	f000 fe25 	bl	c5b2c <__any_on>
   c4ee2:	4682      	mov	sl, r0
   c4ee4:	117b      	asrs	r3, r7, #5
   c4ee6:	2101      	movs	r1, #1
   c4ee8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c4eec:	f007 071f 	and.w	r7, r7, #31
   c4ef0:	fa01 f707 	lsl.w	r7, r1, r7
   c4ef4:	421f      	tst	r7, r3
   c4ef6:	4629      	mov	r1, r5
   c4ef8:	4620      	mov	r0, r4
   c4efa:	bf18      	it	ne
   c4efc:	f04a 0a02 	orrne.w	sl, sl, #2
   c4f00:	1b76      	subs	r6, r6, r5
   c4f02:	f7ff fded 	bl	c4ae0 <rshift>
   c4f06:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c4f0a:	2702      	movs	r7, #2
   c4f0c:	f1ba 0f00 	cmp.w	sl, #0
   c4f10:	d048      	beq.n	c4fa4 <__gethex+0x3f4>
   c4f12:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c4f16:	2b02      	cmp	r3, #2
   c4f18:	d015      	beq.n	c4f46 <__gethex+0x396>
   c4f1a:	2b03      	cmp	r3, #3
   c4f1c:	d017      	beq.n	c4f4e <__gethex+0x39e>
   c4f1e:	2b01      	cmp	r3, #1
   c4f20:	d109      	bne.n	c4f36 <__gethex+0x386>
   c4f22:	f01a 0f02 	tst.w	sl, #2
   c4f26:	d006      	beq.n	c4f36 <__gethex+0x386>
   c4f28:	f8d9 0000 	ldr.w	r0, [r9]
   c4f2c:	ea4a 0a00 	orr.w	sl, sl, r0
   c4f30:	f01a 0f01 	tst.w	sl, #1
   c4f34:	d10e      	bne.n	c4f54 <__gethex+0x3a4>
   c4f36:	f047 0710 	orr.w	r7, r7, #16
   c4f3a:	e033      	b.n	c4fa4 <__gethex+0x3f4>
   c4f3c:	f04f 0a01 	mov.w	sl, #1
   c4f40:	e7d0      	b.n	c4ee4 <__gethex+0x334>
   c4f42:	2701      	movs	r7, #1
   c4f44:	e7e2      	b.n	c4f0c <__gethex+0x35c>
   c4f46:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4f48:	f1c3 0301 	rsb	r3, r3, #1
   c4f4c:	9315      	str	r3, [sp, #84]	; 0x54
   c4f4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4f50:	2b00      	cmp	r3, #0
   c4f52:	d0f0      	beq.n	c4f36 <__gethex+0x386>
   c4f54:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c4f58:	f104 0314 	add.w	r3, r4, #20
   c4f5c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c4f60:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c4f64:	f04f 0c00 	mov.w	ip, #0
   c4f68:	4618      	mov	r0, r3
   c4f6a:	f853 2b04 	ldr.w	r2, [r3], #4
   c4f6e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c4f72:	d01c      	beq.n	c4fae <__gethex+0x3fe>
   c4f74:	3201      	adds	r2, #1
   c4f76:	6002      	str	r2, [r0, #0]
   c4f78:	2f02      	cmp	r7, #2
   c4f7a:	f104 0314 	add.w	r3, r4, #20
   c4f7e:	d13f      	bne.n	c5000 <__gethex+0x450>
   c4f80:	f8d8 2000 	ldr.w	r2, [r8]
   c4f84:	3a01      	subs	r2, #1
   c4f86:	42b2      	cmp	r2, r6
   c4f88:	d10a      	bne.n	c4fa0 <__gethex+0x3f0>
   c4f8a:	1171      	asrs	r1, r6, #5
   c4f8c:	2201      	movs	r2, #1
   c4f8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c4f92:	f006 061f 	and.w	r6, r6, #31
   c4f96:	fa02 f606 	lsl.w	r6, r2, r6
   c4f9a:	421e      	tst	r6, r3
   c4f9c:	bf18      	it	ne
   c4f9e:	4617      	movne	r7, r2
   c4fa0:	f047 0720 	orr.w	r7, r7, #32
   c4fa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c4fa6:	601c      	str	r4, [r3, #0]
   c4fa8:	9b04      	ldr	r3, [sp, #16]
   c4faa:	601d      	str	r5, [r3, #0]
   c4fac:	e695      	b.n	c4cda <__gethex+0x12a>
   c4fae:	4299      	cmp	r1, r3
   c4fb0:	f843 cc04 	str.w	ip, [r3, #-4]
   c4fb4:	d8d8      	bhi.n	c4f68 <__gethex+0x3b8>
   c4fb6:	68a3      	ldr	r3, [r4, #8]
   c4fb8:	459b      	cmp	fp, r3
   c4fba:	db19      	blt.n	c4ff0 <__gethex+0x440>
   c4fbc:	6861      	ldr	r1, [r4, #4]
   c4fbe:	ee18 0a10 	vmov	r0, s16
   c4fc2:	3101      	adds	r1, #1
   c4fc4:	f000 f912 	bl	c51ec <_Balloc>
   c4fc8:	4681      	mov	r9, r0
   c4fca:	b918      	cbnz	r0, c4fd4 <__gethex+0x424>
   c4fcc:	4b1a      	ldr	r3, [pc, #104]	; (c5038 <__gethex+0x488>)
   c4fce:	4602      	mov	r2, r0
   c4fd0:	2184      	movs	r1, #132	; 0x84
   c4fd2:	e6a8      	b.n	c4d26 <__gethex+0x176>
   c4fd4:	6922      	ldr	r2, [r4, #16]
   c4fd6:	3202      	adds	r2, #2
   c4fd8:	f104 010c 	add.w	r1, r4, #12
   c4fdc:	0092      	lsls	r2, r2, #2
   c4fde:	300c      	adds	r0, #12
   c4fe0:	f7fe fd36 	bl	c3a50 <memcpy>
   c4fe4:	4621      	mov	r1, r4
   c4fe6:	ee18 0a10 	vmov	r0, s16
   c4fea:	f000 f93f 	bl	c526c <_Bfree>
   c4fee:	464c      	mov	r4, r9
   c4ff0:	6923      	ldr	r3, [r4, #16]
   c4ff2:	1c5a      	adds	r2, r3, #1
   c4ff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c4ff8:	6122      	str	r2, [r4, #16]
   c4ffa:	2201      	movs	r2, #1
   c4ffc:	615a      	str	r2, [r3, #20]
   c4ffe:	e7bb      	b.n	c4f78 <__gethex+0x3c8>
   c5000:	6922      	ldr	r2, [r4, #16]
   c5002:	455a      	cmp	r2, fp
   c5004:	dd0b      	ble.n	c501e <__gethex+0x46e>
   c5006:	2101      	movs	r1, #1
   c5008:	4620      	mov	r0, r4
   c500a:	f7ff fd69 	bl	c4ae0 <rshift>
   c500e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5012:	3501      	adds	r5, #1
   c5014:	42ab      	cmp	r3, r5
   c5016:	f6ff aed0 	blt.w	c4dba <__gethex+0x20a>
   c501a:	2701      	movs	r7, #1
   c501c:	e7c0      	b.n	c4fa0 <__gethex+0x3f0>
   c501e:	f016 061f 	ands.w	r6, r6, #31
   c5022:	d0fa      	beq.n	c501a <__gethex+0x46a>
   c5024:	4453      	add	r3, sl
   c5026:	f1c6 0620 	rsb	r6, r6, #32
   c502a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c502e:	f000 f9cf 	bl	c53d0 <__hi0bits>
   c5032:	42b0      	cmp	r0, r6
   c5034:	dbe7      	blt.n	c5006 <__gethex+0x456>
   c5036:	e7f0      	b.n	c501a <__gethex+0x46a>
   c5038:	000c7bf9 	.word	0x000c7bf9

000c503c <L_shift>:
   c503c:	f1c2 0208 	rsb	r2, r2, #8
   c5040:	0092      	lsls	r2, r2, #2
   c5042:	b570      	push	{r4, r5, r6, lr}
   c5044:	f1c2 0620 	rsb	r6, r2, #32
   c5048:	6843      	ldr	r3, [r0, #4]
   c504a:	6804      	ldr	r4, [r0, #0]
   c504c:	fa03 f506 	lsl.w	r5, r3, r6
   c5050:	432c      	orrs	r4, r5
   c5052:	40d3      	lsrs	r3, r2
   c5054:	6004      	str	r4, [r0, #0]
   c5056:	f840 3f04 	str.w	r3, [r0, #4]!
   c505a:	4288      	cmp	r0, r1
   c505c:	d3f4      	bcc.n	c5048 <L_shift+0xc>
   c505e:	bd70      	pop	{r4, r5, r6, pc}

000c5060 <__match>:
   c5060:	b530      	push	{r4, r5, lr}
   c5062:	6803      	ldr	r3, [r0, #0]
   c5064:	3301      	adds	r3, #1
   c5066:	f811 4b01 	ldrb.w	r4, [r1], #1
   c506a:	b914      	cbnz	r4, c5072 <__match+0x12>
   c506c:	6003      	str	r3, [r0, #0]
   c506e:	2001      	movs	r0, #1
   c5070:	bd30      	pop	{r4, r5, pc}
   c5072:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5076:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c507a:	2d19      	cmp	r5, #25
   c507c:	bf98      	it	ls
   c507e:	3220      	addls	r2, #32
   c5080:	42a2      	cmp	r2, r4
   c5082:	d0f0      	beq.n	c5066 <__match+0x6>
   c5084:	2000      	movs	r0, #0
   c5086:	e7f3      	b.n	c5070 <__match+0x10>

000c5088 <__hexnan>:
   c5088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c508c:	680b      	ldr	r3, [r1, #0]
   c508e:	115e      	asrs	r6, r3, #5
   c5090:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5094:	f013 031f 	ands.w	r3, r3, #31
   c5098:	b087      	sub	sp, #28
   c509a:	bf18      	it	ne
   c509c:	3604      	addne	r6, #4
   c509e:	2500      	movs	r5, #0
   c50a0:	1f37      	subs	r7, r6, #4
   c50a2:	4690      	mov	r8, r2
   c50a4:	6802      	ldr	r2, [r0, #0]
   c50a6:	9301      	str	r3, [sp, #4]
   c50a8:	4682      	mov	sl, r0
   c50aa:	f846 5c04 	str.w	r5, [r6, #-4]
   c50ae:	46b9      	mov	r9, r7
   c50b0:	463c      	mov	r4, r7
   c50b2:	9502      	str	r5, [sp, #8]
   c50b4:	46ab      	mov	fp, r5
   c50b6:	7851      	ldrb	r1, [r2, #1]
   c50b8:	1c53      	adds	r3, r2, #1
   c50ba:	9303      	str	r3, [sp, #12]
   c50bc:	b341      	cbz	r1, c5110 <__hexnan+0x88>
   c50be:	4608      	mov	r0, r1
   c50c0:	9205      	str	r2, [sp, #20]
   c50c2:	9104      	str	r1, [sp, #16]
   c50c4:	f7ff fd5e 	bl	c4b84 <__hexdig_fun>
   c50c8:	2800      	cmp	r0, #0
   c50ca:	d14f      	bne.n	c516c <__hexnan+0xe4>
   c50cc:	9904      	ldr	r1, [sp, #16]
   c50ce:	9a05      	ldr	r2, [sp, #20]
   c50d0:	2920      	cmp	r1, #32
   c50d2:	d818      	bhi.n	c5106 <__hexnan+0x7e>
   c50d4:	9b02      	ldr	r3, [sp, #8]
   c50d6:	459b      	cmp	fp, r3
   c50d8:	dd13      	ble.n	c5102 <__hexnan+0x7a>
   c50da:	454c      	cmp	r4, r9
   c50dc:	d206      	bcs.n	c50ec <__hexnan+0x64>
   c50de:	2d07      	cmp	r5, #7
   c50e0:	dc04      	bgt.n	c50ec <__hexnan+0x64>
   c50e2:	462a      	mov	r2, r5
   c50e4:	4649      	mov	r1, r9
   c50e6:	4620      	mov	r0, r4
   c50e8:	f7ff ffa8 	bl	c503c <L_shift>
   c50ec:	4544      	cmp	r4, r8
   c50ee:	d950      	bls.n	c5192 <__hexnan+0x10a>
   c50f0:	2300      	movs	r3, #0
   c50f2:	f1a4 0904 	sub.w	r9, r4, #4
   c50f6:	f844 3c04 	str.w	r3, [r4, #-4]
   c50fa:	f8cd b008 	str.w	fp, [sp, #8]
   c50fe:	464c      	mov	r4, r9
   c5100:	461d      	mov	r5, r3
   c5102:	9a03      	ldr	r2, [sp, #12]
   c5104:	e7d7      	b.n	c50b6 <__hexnan+0x2e>
   c5106:	2929      	cmp	r1, #41	; 0x29
   c5108:	d156      	bne.n	c51b8 <__hexnan+0x130>
   c510a:	3202      	adds	r2, #2
   c510c:	f8ca 2000 	str.w	r2, [sl]
   c5110:	f1bb 0f00 	cmp.w	fp, #0
   c5114:	d050      	beq.n	c51b8 <__hexnan+0x130>
   c5116:	454c      	cmp	r4, r9
   c5118:	d206      	bcs.n	c5128 <__hexnan+0xa0>
   c511a:	2d07      	cmp	r5, #7
   c511c:	dc04      	bgt.n	c5128 <__hexnan+0xa0>
   c511e:	462a      	mov	r2, r5
   c5120:	4649      	mov	r1, r9
   c5122:	4620      	mov	r0, r4
   c5124:	f7ff ff8a 	bl	c503c <L_shift>
   c5128:	4544      	cmp	r4, r8
   c512a:	d934      	bls.n	c5196 <__hexnan+0x10e>
   c512c:	f1a8 0204 	sub.w	r2, r8, #4
   c5130:	4623      	mov	r3, r4
   c5132:	f853 1b04 	ldr.w	r1, [r3], #4
   c5136:	f842 1f04 	str.w	r1, [r2, #4]!
   c513a:	429f      	cmp	r7, r3
   c513c:	d2f9      	bcs.n	c5132 <__hexnan+0xaa>
   c513e:	1b3b      	subs	r3, r7, r4
   c5140:	f023 0303 	bic.w	r3, r3, #3
   c5144:	3304      	adds	r3, #4
   c5146:	3401      	adds	r4, #1
   c5148:	3e03      	subs	r6, #3
   c514a:	42b4      	cmp	r4, r6
   c514c:	bf88      	it	hi
   c514e:	2304      	movhi	r3, #4
   c5150:	4443      	add	r3, r8
   c5152:	2200      	movs	r2, #0
   c5154:	f843 2b04 	str.w	r2, [r3], #4
   c5158:	429f      	cmp	r7, r3
   c515a:	d2fb      	bcs.n	c5154 <__hexnan+0xcc>
   c515c:	683b      	ldr	r3, [r7, #0]
   c515e:	b91b      	cbnz	r3, c5168 <__hexnan+0xe0>
   c5160:	4547      	cmp	r7, r8
   c5162:	d127      	bne.n	c51b4 <__hexnan+0x12c>
   c5164:	2301      	movs	r3, #1
   c5166:	603b      	str	r3, [r7, #0]
   c5168:	2005      	movs	r0, #5
   c516a:	e026      	b.n	c51ba <__hexnan+0x132>
   c516c:	3501      	adds	r5, #1
   c516e:	2d08      	cmp	r5, #8
   c5170:	f10b 0b01 	add.w	fp, fp, #1
   c5174:	dd06      	ble.n	c5184 <__hexnan+0xfc>
   c5176:	4544      	cmp	r4, r8
   c5178:	d9c3      	bls.n	c5102 <__hexnan+0x7a>
   c517a:	2300      	movs	r3, #0
   c517c:	f844 3c04 	str.w	r3, [r4, #-4]
   c5180:	2501      	movs	r5, #1
   c5182:	3c04      	subs	r4, #4
   c5184:	6822      	ldr	r2, [r4, #0]
   c5186:	f000 000f 	and.w	r0, r0, #15
   c518a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c518e:	6022      	str	r2, [r4, #0]
   c5190:	e7b7      	b.n	c5102 <__hexnan+0x7a>
   c5192:	2508      	movs	r5, #8
   c5194:	e7b5      	b.n	c5102 <__hexnan+0x7a>
   c5196:	9b01      	ldr	r3, [sp, #4]
   c5198:	2b00      	cmp	r3, #0
   c519a:	d0df      	beq.n	c515c <__hexnan+0xd4>
   c519c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c51a0:	f1c3 0320 	rsb	r3, r3, #32
   c51a4:	fa22 f303 	lsr.w	r3, r2, r3
   c51a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c51ac:	401a      	ands	r2, r3
   c51ae:	f846 2c04 	str.w	r2, [r6, #-4]
   c51b2:	e7d3      	b.n	c515c <__hexnan+0xd4>
   c51b4:	3f04      	subs	r7, #4
   c51b6:	e7d1      	b.n	c515c <__hexnan+0xd4>
   c51b8:	2004      	movs	r0, #4
   c51ba:	b007      	add	sp, #28
   c51bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c51c0 <__retarget_lock_acquire_recursive>:
   c51c0:	4770      	bx	lr

000c51c2 <__retarget_lock_release>:
   c51c2:	4770      	bx	lr

000c51c4 <__retarget_lock_release_recursive>:
   c51c4:	4770      	bx	lr

000c51c6 <__ascii_mbtowc>:
   c51c6:	b082      	sub	sp, #8
   c51c8:	b901      	cbnz	r1, c51cc <__ascii_mbtowc+0x6>
   c51ca:	a901      	add	r1, sp, #4
   c51cc:	b142      	cbz	r2, c51e0 <__ascii_mbtowc+0x1a>
   c51ce:	b14b      	cbz	r3, c51e4 <__ascii_mbtowc+0x1e>
   c51d0:	7813      	ldrb	r3, [r2, #0]
   c51d2:	600b      	str	r3, [r1, #0]
   c51d4:	7812      	ldrb	r2, [r2, #0]
   c51d6:	1e10      	subs	r0, r2, #0
   c51d8:	bf18      	it	ne
   c51da:	2001      	movne	r0, #1
   c51dc:	b002      	add	sp, #8
   c51de:	4770      	bx	lr
   c51e0:	4610      	mov	r0, r2
   c51e2:	e7fb      	b.n	c51dc <__ascii_mbtowc+0x16>
   c51e4:	f06f 0001 	mvn.w	r0, #1
   c51e8:	e7f8      	b.n	c51dc <__ascii_mbtowc+0x16>
	...

000c51ec <_Balloc>:
   c51ec:	b570      	push	{r4, r5, r6, lr}
   c51ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c51f0:	4604      	mov	r4, r0
   c51f2:	460d      	mov	r5, r1
   c51f4:	b976      	cbnz	r6, c5214 <_Balloc+0x28>
   c51f6:	2010      	movs	r0, #16
   c51f8:	f7f8 fb14 	bl	bd824 <malloc>
   c51fc:	4602      	mov	r2, r0
   c51fe:	6260      	str	r0, [r4, #36]	; 0x24
   c5200:	b920      	cbnz	r0, c520c <_Balloc+0x20>
   c5202:	4b18      	ldr	r3, [pc, #96]	; (c5264 <_Balloc+0x78>)
   c5204:	4818      	ldr	r0, [pc, #96]	; (c5268 <_Balloc+0x7c>)
   c5206:	2166      	movs	r1, #102	; 0x66
   c5208:	f7f8 fb5c 	bl	bd8c4 <__assert_func>
   c520c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5210:	6006      	str	r6, [r0, #0]
   c5212:	60c6      	str	r6, [r0, #12]
   c5214:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5216:	68f3      	ldr	r3, [r6, #12]
   c5218:	b183      	cbz	r3, c523c <_Balloc+0x50>
   c521a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c521c:	68db      	ldr	r3, [r3, #12]
   c521e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5222:	b9b8      	cbnz	r0, c5254 <_Balloc+0x68>
   c5224:	2101      	movs	r1, #1
   c5226:	fa01 f605 	lsl.w	r6, r1, r5
   c522a:	1d72      	adds	r2, r6, #5
   c522c:	0092      	lsls	r2, r2, #2
   c522e:	4620      	mov	r0, r4
   c5230:	f000 fc9d 	bl	c5b6e <_calloc_r>
   c5234:	b160      	cbz	r0, c5250 <_Balloc+0x64>
   c5236:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c523a:	e00e      	b.n	c525a <_Balloc+0x6e>
   c523c:	2221      	movs	r2, #33	; 0x21
   c523e:	2104      	movs	r1, #4
   c5240:	4620      	mov	r0, r4
   c5242:	f000 fc94 	bl	c5b6e <_calloc_r>
   c5246:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5248:	60f0      	str	r0, [r6, #12]
   c524a:	68db      	ldr	r3, [r3, #12]
   c524c:	2b00      	cmp	r3, #0
   c524e:	d1e4      	bne.n	c521a <_Balloc+0x2e>
   c5250:	2000      	movs	r0, #0
   c5252:	bd70      	pop	{r4, r5, r6, pc}
   c5254:	6802      	ldr	r2, [r0, #0]
   c5256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c525a:	2300      	movs	r3, #0
   c525c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5260:	e7f7      	b.n	c5252 <_Balloc+0x66>
   c5262:	bf00      	nop
   c5264:	000c7a28 	.word	0x000c7a28
   c5268:	000c7c7e 	.word	0x000c7c7e

000c526c <_Bfree>:
   c526c:	b570      	push	{r4, r5, r6, lr}
   c526e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5270:	4605      	mov	r5, r0
   c5272:	460c      	mov	r4, r1
   c5274:	b976      	cbnz	r6, c5294 <_Bfree+0x28>
   c5276:	2010      	movs	r0, #16
   c5278:	f7f8 fad4 	bl	bd824 <malloc>
   c527c:	4602      	mov	r2, r0
   c527e:	6268      	str	r0, [r5, #36]	; 0x24
   c5280:	b920      	cbnz	r0, c528c <_Bfree+0x20>
   c5282:	4b09      	ldr	r3, [pc, #36]	; (c52a8 <_Bfree+0x3c>)
   c5284:	4809      	ldr	r0, [pc, #36]	; (c52ac <_Bfree+0x40>)
   c5286:	218a      	movs	r1, #138	; 0x8a
   c5288:	f7f8 fb1c 	bl	bd8c4 <__assert_func>
   c528c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5290:	6006      	str	r6, [r0, #0]
   c5292:	60c6      	str	r6, [r0, #12]
   c5294:	b13c      	cbz	r4, c52a6 <_Bfree+0x3a>
   c5296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5298:	6862      	ldr	r2, [r4, #4]
   c529a:	68db      	ldr	r3, [r3, #12]
   c529c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c52a0:	6021      	str	r1, [r4, #0]
   c52a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c52a6:	bd70      	pop	{r4, r5, r6, pc}
   c52a8:	000c7a28 	.word	0x000c7a28
   c52ac:	000c7c7e 	.word	0x000c7c7e

000c52b0 <__multadd>:
   c52b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c52b4:	690d      	ldr	r5, [r1, #16]
   c52b6:	4607      	mov	r7, r0
   c52b8:	460c      	mov	r4, r1
   c52ba:	461e      	mov	r6, r3
   c52bc:	f101 0c14 	add.w	ip, r1, #20
   c52c0:	2000      	movs	r0, #0
   c52c2:	f8dc 3000 	ldr.w	r3, [ip]
   c52c6:	b299      	uxth	r1, r3
   c52c8:	fb02 6101 	mla	r1, r2, r1, r6
   c52cc:	0c1e      	lsrs	r6, r3, #16
   c52ce:	0c0b      	lsrs	r3, r1, #16
   c52d0:	fb02 3306 	mla	r3, r2, r6, r3
   c52d4:	b289      	uxth	r1, r1
   c52d6:	3001      	adds	r0, #1
   c52d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c52dc:	4285      	cmp	r5, r0
   c52de:	f84c 1b04 	str.w	r1, [ip], #4
   c52e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c52e6:	dcec      	bgt.n	c52c2 <__multadd+0x12>
   c52e8:	b30e      	cbz	r6, c532e <__multadd+0x7e>
   c52ea:	68a3      	ldr	r3, [r4, #8]
   c52ec:	42ab      	cmp	r3, r5
   c52ee:	dc19      	bgt.n	c5324 <__multadd+0x74>
   c52f0:	6861      	ldr	r1, [r4, #4]
   c52f2:	4638      	mov	r0, r7
   c52f4:	3101      	adds	r1, #1
   c52f6:	f7ff ff79 	bl	c51ec <_Balloc>
   c52fa:	4680      	mov	r8, r0
   c52fc:	b928      	cbnz	r0, c530a <__multadd+0x5a>
   c52fe:	4602      	mov	r2, r0
   c5300:	4b0c      	ldr	r3, [pc, #48]	; (c5334 <__multadd+0x84>)
   c5302:	480d      	ldr	r0, [pc, #52]	; (c5338 <__multadd+0x88>)
   c5304:	21b5      	movs	r1, #181	; 0xb5
   c5306:	f7f8 fadd 	bl	bd8c4 <__assert_func>
   c530a:	6922      	ldr	r2, [r4, #16]
   c530c:	3202      	adds	r2, #2
   c530e:	f104 010c 	add.w	r1, r4, #12
   c5312:	0092      	lsls	r2, r2, #2
   c5314:	300c      	adds	r0, #12
   c5316:	f7fe fb9b 	bl	c3a50 <memcpy>
   c531a:	4621      	mov	r1, r4
   c531c:	4638      	mov	r0, r7
   c531e:	f7ff ffa5 	bl	c526c <_Bfree>
   c5322:	4644      	mov	r4, r8
   c5324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5328:	3501      	adds	r5, #1
   c532a:	615e      	str	r6, [r3, #20]
   c532c:	6125      	str	r5, [r4, #16]
   c532e:	4620      	mov	r0, r4
   c5330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5334:	000c7bf9 	.word	0x000c7bf9
   c5338:	000c7c7e 	.word	0x000c7c7e

000c533c <__s2b>:
   c533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5340:	460c      	mov	r4, r1
   c5342:	4615      	mov	r5, r2
   c5344:	461f      	mov	r7, r3
   c5346:	2209      	movs	r2, #9
   c5348:	3308      	adds	r3, #8
   c534a:	4606      	mov	r6, r0
   c534c:	fb93 f3f2 	sdiv	r3, r3, r2
   c5350:	2100      	movs	r1, #0
   c5352:	2201      	movs	r2, #1
   c5354:	429a      	cmp	r2, r3
   c5356:	db09      	blt.n	c536c <__s2b+0x30>
   c5358:	4630      	mov	r0, r6
   c535a:	f7ff ff47 	bl	c51ec <_Balloc>
   c535e:	b940      	cbnz	r0, c5372 <__s2b+0x36>
   c5360:	4602      	mov	r2, r0
   c5362:	4b19      	ldr	r3, [pc, #100]	; (c53c8 <__s2b+0x8c>)
   c5364:	4819      	ldr	r0, [pc, #100]	; (c53cc <__s2b+0x90>)
   c5366:	21ce      	movs	r1, #206	; 0xce
   c5368:	f7f8 faac 	bl	bd8c4 <__assert_func>
   c536c:	0052      	lsls	r2, r2, #1
   c536e:	3101      	adds	r1, #1
   c5370:	e7f0      	b.n	c5354 <__s2b+0x18>
   c5372:	9b08      	ldr	r3, [sp, #32]
   c5374:	6143      	str	r3, [r0, #20]
   c5376:	2d09      	cmp	r5, #9
   c5378:	f04f 0301 	mov.w	r3, #1
   c537c:	6103      	str	r3, [r0, #16]
   c537e:	dd16      	ble.n	c53ae <__s2b+0x72>
   c5380:	f104 0909 	add.w	r9, r4, #9
   c5384:	46c8      	mov	r8, r9
   c5386:	442c      	add	r4, r5
   c5388:	f818 3b01 	ldrb.w	r3, [r8], #1
   c538c:	4601      	mov	r1, r0
   c538e:	3b30      	subs	r3, #48	; 0x30
   c5390:	220a      	movs	r2, #10
   c5392:	4630      	mov	r0, r6
   c5394:	f7ff ff8c 	bl	c52b0 <__multadd>
   c5398:	45a0      	cmp	r8, r4
   c539a:	d1f5      	bne.n	c5388 <__s2b+0x4c>
   c539c:	f1a5 0408 	sub.w	r4, r5, #8
   c53a0:	444c      	add	r4, r9
   c53a2:	1b2d      	subs	r5, r5, r4
   c53a4:	1963      	adds	r3, r4, r5
   c53a6:	42bb      	cmp	r3, r7
   c53a8:	db04      	blt.n	c53b4 <__s2b+0x78>
   c53aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c53ae:	340a      	adds	r4, #10
   c53b0:	2509      	movs	r5, #9
   c53b2:	e7f6      	b.n	c53a2 <__s2b+0x66>
   c53b4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c53b8:	4601      	mov	r1, r0
   c53ba:	3b30      	subs	r3, #48	; 0x30
   c53bc:	220a      	movs	r2, #10
   c53be:	4630      	mov	r0, r6
   c53c0:	f7ff ff76 	bl	c52b0 <__multadd>
   c53c4:	e7ee      	b.n	c53a4 <__s2b+0x68>
   c53c6:	bf00      	nop
   c53c8:	000c7bf9 	.word	0x000c7bf9
   c53cc:	000c7c7e 	.word	0x000c7c7e

000c53d0 <__hi0bits>:
   c53d0:	0c03      	lsrs	r3, r0, #16
   c53d2:	041b      	lsls	r3, r3, #16
   c53d4:	b9d3      	cbnz	r3, c540c <__hi0bits+0x3c>
   c53d6:	0400      	lsls	r0, r0, #16
   c53d8:	2310      	movs	r3, #16
   c53da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c53de:	bf04      	itt	eq
   c53e0:	0200      	lsleq	r0, r0, #8
   c53e2:	3308      	addeq	r3, #8
   c53e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c53e8:	bf04      	itt	eq
   c53ea:	0100      	lsleq	r0, r0, #4
   c53ec:	3304      	addeq	r3, #4
   c53ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c53f2:	bf04      	itt	eq
   c53f4:	0080      	lsleq	r0, r0, #2
   c53f6:	3302      	addeq	r3, #2
   c53f8:	2800      	cmp	r0, #0
   c53fa:	db05      	blt.n	c5408 <__hi0bits+0x38>
   c53fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5400:	f103 0301 	add.w	r3, r3, #1
   c5404:	bf08      	it	eq
   c5406:	2320      	moveq	r3, #32
   c5408:	4618      	mov	r0, r3
   c540a:	4770      	bx	lr
   c540c:	2300      	movs	r3, #0
   c540e:	e7e4      	b.n	c53da <__hi0bits+0xa>

000c5410 <__lo0bits>:
   c5410:	6803      	ldr	r3, [r0, #0]
   c5412:	f013 0207 	ands.w	r2, r3, #7
   c5416:	4601      	mov	r1, r0
   c5418:	d00b      	beq.n	c5432 <__lo0bits+0x22>
   c541a:	07da      	lsls	r2, r3, #31
   c541c:	d423      	bmi.n	c5466 <__lo0bits+0x56>
   c541e:	0798      	lsls	r0, r3, #30
   c5420:	bf49      	itett	mi
   c5422:	085b      	lsrmi	r3, r3, #1
   c5424:	089b      	lsrpl	r3, r3, #2
   c5426:	2001      	movmi	r0, #1
   c5428:	600b      	strmi	r3, [r1, #0]
   c542a:	bf5c      	itt	pl
   c542c:	600b      	strpl	r3, [r1, #0]
   c542e:	2002      	movpl	r0, #2
   c5430:	4770      	bx	lr
   c5432:	b298      	uxth	r0, r3
   c5434:	b9a8      	cbnz	r0, c5462 <__lo0bits+0x52>
   c5436:	0c1b      	lsrs	r3, r3, #16
   c5438:	2010      	movs	r0, #16
   c543a:	b2da      	uxtb	r2, r3
   c543c:	b90a      	cbnz	r2, c5442 <__lo0bits+0x32>
   c543e:	3008      	adds	r0, #8
   c5440:	0a1b      	lsrs	r3, r3, #8
   c5442:	071a      	lsls	r2, r3, #28
   c5444:	bf04      	itt	eq
   c5446:	091b      	lsreq	r3, r3, #4
   c5448:	3004      	addeq	r0, #4
   c544a:	079a      	lsls	r2, r3, #30
   c544c:	bf04      	itt	eq
   c544e:	089b      	lsreq	r3, r3, #2
   c5450:	3002      	addeq	r0, #2
   c5452:	07da      	lsls	r2, r3, #31
   c5454:	d403      	bmi.n	c545e <__lo0bits+0x4e>
   c5456:	085b      	lsrs	r3, r3, #1
   c5458:	f100 0001 	add.w	r0, r0, #1
   c545c:	d005      	beq.n	c546a <__lo0bits+0x5a>
   c545e:	600b      	str	r3, [r1, #0]
   c5460:	4770      	bx	lr
   c5462:	4610      	mov	r0, r2
   c5464:	e7e9      	b.n	c543a <__lo0bits+0x2a>
   c5466:	2000      	movs	r0, #0
   c5468:	4770      	bx	lr
   c546a:	2020      	movs	r0, #32
   c546c:	4770      	bx	lr
	...

000c5470 <__i2b>:
   c5470:	b510      	push	{r4, lr}
   c5472:	460c      	mov	r4, r1
   c5474:	2101      	movs	r1, #1
   c5476:	f7ff feb9 	bl	c51ec <_Balloc>
   c547a:	4602      	mov	r2, r0
   c547c:	b928      	cbnz	r0, c548a <__i2b+0x1a>
   c547e:	4b05      	ldr	r3, [pc, #20]	; (c5494 <__i2b+0x24>)
   c5480:	4805      	ldr	r0, [pc, #20]	; (c5498 <__i2b+0x28>)
   c5482:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5486:	f7f8 fa1d 	bl	bd8c4 <__assert_func>
   c548a:	2301      	movs	r3, #1
   c548c:	6144      	str	r4, [r0, #20]
   c548e:	6103      	str	r3, [r0, #16]
   c5490:	bd10      	pop	{r4, pc}
   c5492:	bf00      	nop
   c5494:	000c7bf9 	.word	0x000c7bf9
   c5498:	000c7c7e 	.word	0x000c7c7e

000c549c <__multiply>:
   c549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c54a0:	4691      	mov	r9, r2
   c54a2:	690a      	ldr	r2, [r1, #16]
   c54a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c54a8:	429a      	cmp	r2, r3
   c54aa:	bfb8      	it	lt
   c54ac:	460b      	movlt	r3, r1
   c54ae:	460c      	mov	r4, r1
   c54b0:	bfbc      	itt	lt
   c54b2:	464c      	movlt	r4, r9
   c54b4:	4699      	movlt	r9, r3
   c54b6:	6927      	ldr	r7, [r4, #16]
   c54b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c54bc:	68a3      	ldr	r3, [r4, #8]
   c54be:	6861      	ldr	r1, [r4, #4]
   c54c0:	eb07 060a 	add.w	r6, r7, sl
   c54c4:	42b3      	cmp	r3, r6
   c54c6:	b085      	sub	sp, #20
   c54c8:	bfb8      	it	lt
   c54ca:	3101      	addlt	r1, #1
   c54cc:	f7ff fe8e 	bl	c51ec <_Balloc>
   c54d0:	b930      	cbnz	r0, c54e0 <__multiply+0x44>
   c54d2:	4602      	mov	r2, r0
   c54d4:	4b44      	ldr	r3, [pc, #272]	; (c55e8 <__multiply+0x14c>)
   c54d6:	4845      	ldr	r0, [pc, #276]	; (c55ec <__multiply+0x150>)
   c54d8:	f240 115d 	movw	r1, #349	; 0x15d
   c54dc:	f7f8 f9f2 	bl	bd8c4 <__assert_func>
   c54e0:	f100 0514 	add.w	r5, r0, #20
   c54e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c54e8:	462b      	mov	r3, r5
   c54ea:	2200      	movs	r2, #0
   c54ec:	4543      	cmp	r3, r8
   c54ee:	d321      	bcc.n	c5534 <__multiply+0x98>
   c54f0:	f104 0314 	add.w	r3, r4, #20
   c54f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c54f8:	f109 0314 	add.w	r3, r9, #20
   c54fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5500:	9202      	str	r2, [sp, #8]
   c5502:	1b3a      	subs	r2, r7, r4
   c5504:	3a15      	subs	r2, #21
   c5506:	f022 0203 	bic.w	r2, r2, #3
   c550a:	3204      	adds	r2, #4
   c550c:	f104 0115 	add.w	r1, r4, #21
   c5510:	428f      	cmp	r7, r1
   c5512:	bf38      	it	cc
   c5514:	2204      	movcc	r2, #4
   c5516:	9201      	str	r2, [sp, #4]
   c5518:	9a02      	ldr	r2, [sp, #8]
   c551a:	9303      	str	r3, [sp, #12]
   c551c:	429a      	cmp	r2, r3
   c551e:	d80c      	bhi.n	c553a <__multiply+0x9e>
   c5520:	2e00      	cmp	r6, #0
   c5522:	dd03      	ble.n	c552c <__multiply+0x90>
   c5524:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5528:	2b00      	cmp	r3, #0
   c552a:	d05a      	beq.n	c55e2 <__multiply+0x146>
   c552c:	6106      	str	r6, [r0, #16]
   c552e:	b005      	add	sp, #20
   c5530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5534:	f843 2b04 	str.w	r2, [r3], #4
   c5538:	e7d8      	b.n	c54ec <__multiply+0x50>
   c553a:	f8b3 a000 	ldrh.w	sl, [r3]
   c553e:	f1ba 0f00 	cmp.w	sl, #0
   c5542:	d024      	beq.n	c558e <__multiply+0xf2>
   c5544:	f104 0e14 	add.w	lr, r4, #20
   c5548:	46a9      	mov	r9, r5
   c554a:	f04f 0c00 	mov.w	ip, #0
   c554e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c5552:	f8d9 1000 	ldr.w	r1, [r9]
   c5556:	fa1f fb82 	uxth.w	fp, r2
   c555a:	b289      	uxth	r1, r1
   c555c:	fb0a 110b 	mla	r1, sl, fp, r1
   c5560:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c5564:	f8d9 2000 	ldr.w	r2, [r9]
   c5568:	4461      	add	r1, ip
   c556a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c556e:	fb0a c20b 	mla	r2, sl, fp, ip
   c5572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c5576:	b289      	uxth	r1, r1
   c5578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c557c:	4577      	cmp	r7, lr
   c557e:	f849 1b04 	str.w	r1, [r9], #4
   c5582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5586:	d8e2      	bhi.n	c554e <__multiply+0xb2>
   c5588:	9a01      	ldr	r2, [sp, #4]
   c558a:	f845 c002 	str.w	ip, [r5, r2]
   c558e:	9a03      	ldr	r2, [sp, #12]
   c5590:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c5594:	3304      	adds	r3, #4
   c5596:	f1b9 0f00 	cmp.w	r9, #0
   c559a:	d020      	beq.n	c55de <__multiply+0x142>
   c559c:	6829      	ldr	r1, [r5, #0]
   c559e:	f104 0c14 	add.w	ip, r4, #20
   c55a2:	46ae      	mov	lr, r5
   c55a4:	f04f 0a00 	mov.w	sl, #0
   c55a8:	f8bc b000 	ldrh.w	fp, [ip]
   c55ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c55b0:	fb09 220b 	mla	r2, r9, fp, r2
   c55b4:	4492      	add	sl, r2
   c55b6:	b289      	uxth	r1, r1
   c55b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c55bc:	f84e 1b04 	str.w	r1, [lr], #4
   c55c0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c55c4:	f8be 1000 	ldrh.w	r1, [lr]
   c55c8:	0c12      	lsrs	r2, r2, #16
   c55ca:	fb09 1102 	mla	r1, r9, r2, r1
   c55ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c55d2:	4567      	cmp	r7, ip
   c55d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c55d8:	d8e6      	bhi.n	c55a8 <__multiply+0x10c>
   c55da:	9a01      	ldr	r2, [sp, #4]
   c55dc:	50a9      	str	r1, [r5, r2]
   c55de:	3504      	adds	r5, #4
   c55e0:	e79a      	b.n	c5518 <__multiply+0x7c>
   c55e2:	3e01      	subs	r6, #1
   c55e4:	e79c      	b.n	c5520 <__multiply+0x84>
   c55e6:	bf00      	nop
   c55e8:	000c7bf9 	.word	0x000c7bf9
   c55ec:	000c7c7e 	.word	0x000c7c7e

000c55f0 <__pow5mult>:
   c55f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c55f4:	4615      	mov	r5, r2
   c55f6:	f012 0203 	ands.w	r2, r2, #3
   c55fa:	4606      	mov	r6, r0
   c55fc:	460f      	mov	r7, r1
   c55fe:	d007      	beq.n	c5610 <__pow5mult+0x20>
   c5600:	4c25      	ldr	r4, [pc, #148]	; (c5698 <__pow5mult+0xa8>)
   c5602:	3a01      	subs	r2, #1
   c5604:	2300      	movs	r3, #0
   c5606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c560a:	f7ff fe51 	bl	c52b0 <__multadd>
   c560e:	4607      	mov	r7, r0
   c5610:	10ad      	asrs	r5, r5, #2
   c5612:	d03d      	beq.n	c5690 <__pow5mult+0xa0>
   c5614:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c5616:	b97c      	cbnz	r4, c5638 <__pow5mult+0x48>
   c5618:	2010      	movs	r0, #16
   c561a:	f7f8 f903 	bl	bd824 <malloc>
   c561e:	4602      	mov	r2, r0
   c5620:	6270      	str	r0, [r6, #36]	; 0x24
   c5622:	b928      	cbnz	r0, c5630 <__pow5mult+0x40>
   c5624:	4b1d      	ldr	r3, [pc, #116]	; (c569c <__pow5mult+0xac>)
   c5626:	481e      	ldr	r0, [pc, #120]	; (c56a0 <__pow5mult+0xb0>)
   c5628:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c562c:	f7f8 f94a 	bl	bd8c4 <__assert_func>
   c5630:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c5634:	6004      	str	r4, [r0, #0]
   c5636:	60c4      	str	r4, [r0, #12]
   c5638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c563c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c5640:	b94c      	cbnz	r4, c5656 <__pow5mult+0x66>
   c5642:	f240 2171 	movw	r1, #625	; 0x271
   c5646:	4630      	mov	r0, r6
   c5648:	f7ff ff12 	bl	c5470 <__i2b>
   c564c:	2300      	movs	r3, #0
   c564e:	f8c8 0008 	str.w	r0, [r8, #8]
   c5652:	4604      	mov	r4, r0
   c5654:	6003      	str	r3, [r0, #0]
   c5656:	f04f 0900 	mov.w	r9, #0
   c565a:	07eb      	lsls	r3, r5, #31
   c565c:	d50a      	bpl.n	c5674 <__pow5mult+0x84>
   c565e:	4639      	mov	r1, r7
   c5660:	4622      	mov	r2, r4
   c5662:	4630      	mov	r0, r6
   c5664:	f7ff ff1a 	bl	c549c <__multiply>
   c5668:	4639      	mov	r1, r7
   c566a:	4680      	mov	r8, r0
   c566c:	4630      	mov	r0, r6
   c566e:	f7ff fdfd 	bl	c526c <_Bfree>
   c5672:	4647      	mov	r7, r8
   c5674:	106d      	asrs	r5, r5, #1
   c5676:	d00b      	beq.n	c5690 <__pow5mult+0xa0>
   c5678:	6820      	ldr	r0, [r4, #0]
   c567a:	b938      	cbnz	r0, c568c <__pow5mult+0x9c>
   c567c:	4622      	mov	r2, r4
   c567e:	4621      	mov	r1, r4
   c5680:	4630      	mov	r0, r6
   c5682:	f7ff ff0b 	bl	c549c <__multiply>
   c5686:	6020      	str	r0, [r4, #0]
   c5688:	f8c0 9000 	str.w	r9, [r0]
   c568c:	4604      	mov	r4, r0
   c568e:	e7e4      	b.n	c565a <__pow5mult+0x6a>
   c5690:	4638      	mov	r0, r7
   c5692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5696:	bf00      	nop
   c5698:	000c7dc8 	.word	0x000c7dc8
   c569c:	000c7a28 	.word	0x000c7a28
   c56a0:	000c7c7e 	.word	0x000c7c7e

000c56a4 <__lshift>:
   c56a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c56a8:	460c      	mov	r4, r1
   c56aa:	6849      	ldr	r1, [r1, #4]
   c56ac:	6923      	ldr	r3, [r4, #16]
   c56ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c56b2:	68a3      	ldr	r3, [r4, #8]
   c56b4:	4607      	mov	r7, r0
   c56b6:	4691      	mov	r9, r2
   c56b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c56bc:	f108 0601 	add.w	r6, r8, #1
   c56c0:	42b3      	cmp	r3, r6
   c56c2:	db0b      	blt.n	c56dc <__lshift+0x38>
   c56c4:	4638      	mov	r0, r7
   c56c6:	f7ff fd91 	bl	c51ec <_Balloc>
   c56ca:	4605      	mov	r5, r0
   c56cc:	b948      	cbnz	r0, c56e2 <__lshift+0x3e>
   c56ce:	4602      	mov	r2, r0
   c56d0:	4b2a      	ldr	r3, [pc, #168]	; (c577c <__lshift+0xd8>)
   c56d2:	482b      	ldr	r0, [pc, #172]	; (c5780 <__lshift+0xdc>)
   c56d4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c56d8:	f7f8 f8f4 	bl	bd8c4 <__assert_func>
   c56dc:	3101      	adds	r1, #1
   c56de:	005b      	lsls	r3, r3, #1
   c56e0:	e7ee      	b.n	c56c0 <__lshift+0x1c>
   c56e2:	2300      	movs	r3, #0
   c56e4:	f100 0114 	add.w	r1, r0, #20
   c56e8:	f100 0210 	add.w	r2, r0, #16
   c56ec:	4618      	mov	r0, r3
   c56ee:	4553      	cmp	r3, sl
   c56f0:	db37      	blt.n	c5762 <__lshift+0xbe>
   c56f2:	6920      	ldr	r0, [r4, #16]
   c56f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c56f8:	f104 0314 	add.w	r3, r4, #20
   c56fc:	f019 091f 	ands.w	r9, r9, #31
   c5700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c5704:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c5708:	d02f      	beq.n	c576a <__lshift+0xc6>
   c570a:	f1c9 0e20 	rsb	lr, r9, #32
   c570e:	468a      	mov	sl, r1
   c5710:	f04f 0c00 	mov.w	ip, #0
   c5714:	681a      	ldr	r2, [r3, #0]
   c5716:	fa02 f209 	lsl.w	r2, r2, r9
   c571a:	ea42 020c 	orr.w	r2, r2, ip
   c571e:	f84a 2b04 	str.w	r2, [sl], #4
   c5722:	f853 2b04 	ldr.w	r2, [r3], #4
   c5726:	4298      	cmp	r0, r3
   c5728:	fa22 fc0e 	lsr.w	ip, r2, lr
   c572c:	d8f2      	bhi.n	c5714 <__lshift+0x70>
   c572e:	1b03      	subs	r3, r0, r4
   c5730:	3b15      	subs	r3, #21
   c5732:	f023 0303 	bic.w	r3, r3, #3
   c5736:	3304      	adds	r3, #4
   c5738:	f104 0215 	add.w	r2, r4, #21
   c573c:	4290      	cmp	r0, r2
   c573e:	bf38      	it	cc
   c5740:	2304      	movcc	r3, #4
   c5742:	f841 c003 	str.w	ip, [r1, r3]
   c5746:	f1bc 0f00 	cmp.w	ip, #0
   c574a:	d001      	beq.n	c5750 <__lshift+0xac>
   c574c:	f108 0602 	add.w	r6, r8, #2
   c5750:	3e01      	subs	r6, #1
   c5752:	4638      	mov	r0, r7
   c5754:	612e      	str	r6, [r5, #16]
   c5756:	4621      	mov	r1, r4
   c5758:	f7ff fd88 	bl	c526c <_Bfree>
   c575c:	4628      	mov	r0, r5
   c575e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5762:	f842 0f04 	str.w	r0, [r2, #4]!
   c5766:	3301      	adds	r3, #1
   c5768:	e7c1      	b.n	c56ee <__lshift+0x4a>
   c576a:	3904      	subs	r1, #4
   c576c:	f853 2b04 	ldr.w	r2, [r3], #4
   c5770:	f841 2f04 	str.w	r2, [r1, #4]!
   c5774:	4298      	cmp	r0, r3
   c5776:	d8f9      	bhi.n	c576c <__lshift+0xc8>
   c5778:	e7ea      	b.n	c5750 <__lshift+0xac>
   c577a:	bf00      	nop
   c577c:	000c7bf9 	.word	0x000c7bf9
   c5780:	000c7c7e 	.word	0x000c7c7e

000c5784 <__mcmp>:
   c5784:	b530      	push	{r4, r5, lr}
   c5786:	6902      	ldr	r2, [r0, #16]
   c5788:	690c      	ldr	r4, [r1, #16]
   c578a:	1b12      	subs	r2, r2, r4
   c578c:	d10e      	bne.n	c57ac <__mcmp+0x28>
   c578e:	f100 0314 	add.w	r3, r0, #20
   c5792:	3114      	adds	r1, #20
   c5794:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c5798:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c579c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c57a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c57a4:	42a5      	cmp	r5, r4
   c57a6:	d003      	beq.n	c57b0 <__mcmp+0x2c>
   c57a8:	d305      	bcc.n	c57b6 <__mcmp+0x32>
   c57aa:	2201      	movs	r2, #1
   c57ac:	4610      	mov	r0, r2
   c57ae:	bd30      	pop	{r4, r5, pc}
   c57b0:	4283      	cmp	r3, r0
   c57b2:	d3f3      	bcc.n	c579c <__mcmp+0x18>
   c57b4:	e7fa      	b.n	c57ac <__mcmp+0x28>
   c57b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c57ba:	e7f7      	b.n	c57ac <__mcmp+0x28>

000c57bc <__mdiff>:
   c57bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c57c0:	460c      	mov	r4, r1
   c57c2:	4606      	mov	r6, r0
   c57c4:	4611      	mov	r1, r2
   c57c6:	4620      	mov	r0, r4
   c57c8:	4690      	mov	r8, r2
   c57ca:	f7ff ffdb 	bl	c5784 <__mcmp>
   c57ce:	1e05      	subs	r5, r0, #0
   c57d0:	d110      	bne.n	c57f4 <__mdiff+0x38>
   c57d2:	4629      	mov	r1, r5
   c57d4:	4630      	mov	r0, r6
   c57d6:	f7ff fd09 	bl	c51ec <_Balloc>
   c57da:	b930      	cbnz	r0, c57ea <__mdiff+0x2e>
   c57dc:	4b3a      	ldr	r3, [pc, #232]	; (c58c8 <__mdiff+0x10c>)
   c57de:	4602      	mov	r2, r0
   c57e0:	f240 2132 	movw	r1, #562	; 0x232
   c57e4:	4839      	ldr	r0, [pc, #228]	; (c58cc <__mdiff+0x110>)
   c57e6:	f7f8 f86d 	bl	bd8c4 <__assert_func>
   c57ea:	2301      	movs	r3, #1
   c57ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c57f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c57f4:	bfa4      	itt	ge
   c57f6:	4643      	movge	r3, r8
   c57f8:	46a0      	movge	r8, r4
   c57fa:	4630      	mov	r0, r6
   c57fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c5800:	bfa6      	itte	ge
   c5802:	461c      	movge	r4, r3
   c5804:	2500      	movge	r5, #0
   c5806:	2501      	movlt	r5, #1
   c5808:	f7ff fcf0 	bl	c51ec <_Balloc>
   c580c:	b920      	cbnz	r0, c5818 <__mdiff+0x5c>
   c580e:	4b2e      	ldr	r3, [pc, #184]	; (c58c8 <__mdiff+0x10c>)
   c5810:	4602      	mov	r2, r0
   c5812:	f44f 7110 	mov.w	r1, #576	; 0x240
   c5816:	e7e5      	b.n	c57e4 <__mdiff+0x28>
   c5818:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c581c:	6926      	ldr	r6, [r4, #16]
   c581e:	60c5      	str	r5, [r0, #12]
   c5820:	f104 0914 	add.w	r9, r4, #20
   c5824:	f108 0514 	add.w	r5, r8, #20
   c5828:	f100 0e14 	add.w	lr, r0, #20
   c582c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c5830:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c5834:	f108 0210 	add.w	r2, r8, #16
   c5838:	46f2      	mov	sl, lr
   c583a:	2100      	movs	r1, #0
   c583c:	f859 3b04 	ldr.w	r3, [r9], #4
   c5840:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c5844:	fa1f f883 	uxth.w	r8, r3
   c5848:	fa11 f18b 	uxtah	r1, r1, fp
   c584c:	0c1b      	lsrs	r3, r3, #16
   c584e:	eba1 0808 	sub.w	r8, r1, r8
   c5852:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c5856:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c585a:	fa1f f888 	uxth.w	r8, r8
   c585e:	1419      	asrs	r1, r3, #16
   c5860:	454e      	cmp	r6, r9
   c5862:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c5866:	f84a 3b04 	str.w	r3, [sl], #4
   c586a:	d8e7      	bhi.n	c583c <__mdiff+0x80>
   c586c:	1b33      	subs	r3, r6, r4
   c586e:	3b15      	subs	r3, #21
   c5870:	f023 0303 	bic.w	r3, r3, #3
   c5874:	3304      	adds	r3, #4
   c5876:	3415      	adds	r4, #21
   c5878:	42a6      	cmp	r6, r4
   c587a:	bf38      	it	cc
   c587c:	2304      	movcc	r3, #4
   c587e:	441d      	add	r5, r3
   c5880:	4473      	add	r3, lr
   c5882:	469e      	mov	lr, r3
   c5884:	462e      	mov	r6, r5
   c5886:	4566      	cmp	r6, ip
   c5888:	d30e      	bcc.n	c58a8 <__mdiff+0xec>
   c588a:	f10c 0203 	add.w	r2, ip, #3
   c588e:	1b52      	subs	r2, r2, r5
   c5890:	f022 0203 	bic.w	r2, r2, #3
   c5894:	3d03      	subs	r5, #3
   c5896:	45ac      	cmp	ip, r5
   c5898:	bf38      	it	cc
   c589a:	2200      	movcc	r2, #0
   c589c:	441a      	add	r2, r3
   c589e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c58a2:	b17b      	cbz	r3, c58c4 <__mdiff+0x108>
   c58a4:	6107      	str	r7, [r0, #16]
   c58a6:	e7a3      	b.n	c57f0 <__mdiff+0x34>
   c58a8:	f856 8b04 	ldr.w	r8, [r6], #4
   c58ac:	fa11 f288 	uxtah	r2, r1, r8
   c58b0:	1414      	asrs	r4, r2, #16
   c58b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c58b6:	b292      	uxth	r2, r2
   c58b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c58bc:	f84e 2b04 	str.w	r2, [lr], #4
   c58c0:	1421      	asrs	r1, r4, #16
   c58c2:	e7e0      	b.n	c5886 <__mdiff+0xca>
   c58c4:	3f01      	subs	r7, #1
   c58c6:	e7ea      	b.n	c589e <__mdiff+0xe2>
   c58c8:	000c7bf9 	.word	0x000c7bf9
   c58cc:	000c7c7e 	.word	0x000c7c7e

000c58d0 <__ulp>:
   c58d0:	b082      	sub	sp, #8
   c58d2:	ed8d 0b00 	vstr	d0, [sp]
   c58d6:	9b01      	ldr	r3, [sp, #4]
   c58d8:	4912      	ldr	r1, [pc, #72]	; (c5924 <__ulp+0x54>)
   c58da:	4019      	ands	r1, r3
   c58dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c58e0:	2900      	cmp	r1, #0
   c58e2:	dd05      	ble.n	c58f0 <__ulp+0x20>
   c58e4:	2200      	movs	r2, #0
   c58e6:	460b      	mov	r3, r1
   c58e8:	ec43 2b10 	vmov	d0, r2, r3
   c58ec:	b002      	add	sp, #8
   c58ee:	4770      	bx	lr
   c58f0:	4249      	negs	r1, r1
   c58f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c58f6:	ea4f 5021 	mov.w	r0, r1, asr #20
   c58fa:	f04f 0200 	mov.w	r2, #0
   c58fe:	f04f 0300 	mov.w	r3, #0
   c5902:	da04      	bge.n	c590e <__ulp+0x3e>
   c5904:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c5908:	fa41 f300 	asr.w	r3, r1, r0
   c590c:	e7ec      	b.n	c58e8 <__ulp+0x18>
   c590e:	f1a0 0114 	sub.w	r1, r0, #20
   c5912:	291e      	cmp	r1, #30
   c5914:	bfda      	itte	le
   c5916:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c591a:	fa20 f101 	lsrle.w	r1, r0, r1
   c591e:	2101      	movgt	r1, #1
   c5920:	460a      	mov	r2, r1
   c5922:	e7e1      	b.n	c58e8 <__ulp+0x18>
   c5924:	7ff00000 	.word	0x7ff00000

000c5928 <__b2d>:
   c5928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c592a:	6905      	ldr	r5, [r0, #16]
   c592c:	f100 0714 	add.w	r7, r0, #20
   c5930:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c5934:	1f2e      	subs	r6, r5, #4
   c5936:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c593a:	4620      	mov	r0, r4
   c593c:	f7ff fd48 	bl	c53d0 <__hi0bits>
   c5940:	f1c0 0320 	rsb	r3, r0, #32
   c5944:	280a      	cmp	r0, #10
   c5946:	f8df c07c 	ldr.w	ip, [pc, #124]	; c59c4 <__b2d+0x9c>
   c594a:	600b      	str	r3, [r1, #0]
   c594c:	dc14      	bgt.n	c5978 <__b2d+0x50>
   c594e:	f1c0 0e0b 	rsb	lr, r0, #11
   c5952:	fa24 f10e 	lsr.w	r1, r4, lr
   c5956:	42b7      	cmp	r7, r6
   c5958:	ea41 030c 	orr.w	r3, r1, ip
   c595c:	bf34      	ite	cc
   c595e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5962:	2100      	movcs	r1, #0
   c5964:	3015      	adds	r0, #21
   c5966:	fa04 f000 	lsl.w	r0, r4, r0
   c596a:	fa21 f10e 	lsr.w	r1, r1, lr
   c596e:	ea40 0201 	orr.w	r2, r0, r1
   c5972:	ec43 2b10 	vmov	d0, r2, r3
   c5976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c5978:	42b7      	cmp	r7, r6
   c597a:	bf3a      	itte	cc
   c597c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5980:	f1a5 0608 	subcc.w	r6, r5, #8
   c5984:	2100      	movcs	r1, #0
   c5986:	380b      	subs	r0, #11
   c5988:	d017      	beq.n	c59ba <__b2d+0x92>
   c598a:	f1c0 0c20 	rsb	ip, r0, #32
   c598e:	fa04 f500 	lsl.w	r5, r4, r0
   c5992:	42be      	cmp	r6, r7
   c5994:	fa21 f40c 	lsr.w	r4, r1, ip
   c5998:	ea45 0504 	orr.w	r5, r5, r4
   c599c:	bf8c      	ite	hi
   c599e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c59a2:	2400      	movls	r4, #0
   c59a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c59a8:	fa01 f000 	lsl.w	r0, r1, r0
   c59ac:	fa24 f40c 	lsr.w	r4, r4, ip
   c59b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c59b4:	ea40 0204 	orr.w	r2, r0, r4
   c59b8:	e7db      	b.n	c5972 <__b2d+0x4a>
   c59ba:	ea44 030c 	orr.w	r3, r4, ip
   c59be:	460a      	mov	r2, r1
   c59c0:	e7d7      	b.n	c5972 <__b2d+0x4a>
   c59c2:	bf00      	nop
   c59c4:	3ff00000 	.word	0x3ff00000

000c59c8 <__d2b>:
   c59c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c59cc:	4689      	mov	r9, r1
   c59ce:	2101      	movs	r1, #1
   c59d0:	ec57 6b10 	vmov	r6, r7, d0
   c59d4:	4690      	mov	r8, r2
   c59d6:	f7ff fc09 	bl	c51ec <_Balloc>
   c59da:	4604      	mov	r4, r0
   c59dc:	b930      	cbnz	r0, c59ec <__d2b+0x24>
   c59de:	4602      	mov	r2, r0
   c59e0:	4b25      	ldr	r3, [pc, #148]	; (c5a78 <__d2b+0xb0>)
   c59e2:	4826      	ldr	r0, [pc, #152]	; (c5a7c <__d2b+0xb4>)
   c59e4:	f240 310a 	movw	r1, #778	; 0x30a
   c59e8:	f7f7 ff6c 	bl	bd8c4 <__assert_func>
   c59ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c59f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c59f4:	bb35      	cbnz	r5, c5a44 <__d2b+0x7c>
   c59f6:	2e00      	cmp	r6, #0
   c59f8:	9301      	str	r3, [sp, #4]
   c59fa:	d028      	beq.n	c5a4e <__d2b+0x86>
   c59fc:	4668      	mov	r0, sp
   c59fe:	9600      	str	r6, [sp, #0]
   c5a00:	f7ff fd06 	bl	c5410 <__lo0bits>
   c5a04:	9900      	ldr	r1, [sp, #0]
   c5a06:	b300      	cbz	r0, c5a4a <__d2b+0x82>
   c5a08:	9a01      	ldr	r2, [sp, #4]
   c5a0a:	f1c0 0320 	rsb	r3, r0, #32
   c5a0e:	fa02 f303 	lsl.w	r3, r2, r3
   c5a12:	430b      	orrs	r3, r1
   c5a14:	40c2      	lsrs	r2, r0
   c5a16:	6163      	str	r3, [r4, #20]
   c5a18:	9201      	str	r2, [sp, #4]
   c5a1a:	9b01      	ldr	r3, [sp, #4]
   c5a1c:	61a3      	str	r3, [r4, #24]
   c5a1e:	2b00      	cmp	r3, #0
   c5a20:	bf14      	ite	ne
   c5a22:	2202      	movne	r2, #2
   c5a24:	2201      	moveq	r2, #1
   c5a26:	6122      	str	r2, [r4, #16]
   c5a28:	b1d5      	cbz	r5, c5a60 <__d2b+0x98>
   c5a2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c5a2e:	4405      	add	r5, r0
   c5a30:	f8c9 5000 	str.w	r5, [r9]
   c5a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c5a38:	f8c8 0000 	str.w	r0, [r8]
   c5a3c:	4620      	mov	r0, r4
   c5a3e:	b003      	add	sp, #12
   c5a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c5a48:	e7d5      	b.n	c59f6 <__d2b+0x2e>
   c5a4a:	6161      	str	r1, [r4, #20]
   c5a4c:	e7e5      	b.n	c5a1a <__d2b+0x52>
   c5a4e:	a801      	add	r0, sp, #4
   c5a50:	f7ff fcde 	bl	c5410 <__lo0bits>
   c5a54:	9b01      	ldr	r3, [sp, #4]
   c5a56:	6163      	str	r3, [r4, #20]
   c5a58:	2201      	movs	r2, #1
   c5a5a:	6122      	str	r2, [r4, #16]
   c5a5c:	3020      	adds	r0, #32
   c5a5e:	e7e3      	b.n	c5a28 <__d2b+0x60>
   c5a60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c5a64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c5a68:	f8c9 0000 	str.w	r0, [r9]
   c5a6c:	6918      	ldr	r0, [r3, #16]
   c5a6e:	f7ff fcaf 	bl	c53d0 <__hi0bits>
   c5a72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c5a76:	e7df      	b.n	c5a38 <__d2b+0x70>
   c5a78:	000c7bf9 	.word	0x000c7bf9
   c5a7c:	000c7c7e 	.word	0x000c7c7e

000c5a80 <__ratio>:
   c5a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5a84:	4688      	mov	r8, r1
   c5a86:	4669      	mov	r1, sp
   c5a88:	4681      	mov	r9, r0
   c5a8a:	f7ff ff4d 	bl	c5928 <__b2d>
   c5a8e:	a901      	add	r1, sp, #4
   c5a90:	4640      	mov	r0, r8
   c5a92:	ec55 4b10 	vmov	r4, r5, d0
   c5a96:	f7ff ff47 	bl	c5928 <__b2d>
   c5a9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5a9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c5aa2:	eba3 0c02 	sub.w	ip, r3, r2
   c5aa6:	e9dd 3200 	ldrd	r3, r2, [sp]
   c5aaa:	1a9b      	subs	r3, r3, r2
   c5aac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c5ab0:	ec51 0b10 	vmov	r0, r1, d0
   c5ab4:	2b00      	cmp	r3, #0
   c5ab6:	bfd6      	itet	le
   c5ab8:	460a      	movle	r2, r1
   c5aba:	462a      	movgt	r2, r5
   c5abc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c5ac0:	468b      	mov	fp, r1
   c5ac2:	462f      	mov	r7, r5
   c5ac4:	bfd4      	ite	le
   c5ac6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c5aca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c5ace:	4620      	mov	r0, r4
   c5ad0:	ee10 2a10 	vmov	r2, s0
   c5ad4:	465b      	mov	r3, fp
   c5ad6:	4639      	mov	r1, r7
   c5ad8:	f7fd fd58 	bl	c358c <__aeabi_ddiv>
   c5adc:	ec41 0b10 	vmov	d0, r0, r1
   c5ae0:	b003      	add	sp, #12
   c5ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5ae6 <__copybits>:
   c5ae6:	3901      	subs	r1, #1
   c5ae8:	b570      	push	{r4, r5, r6, lr}
   c5aea:	1149      	asrs	r1, r1, #5
   c5aec:	6914      	ldr	r4, [r2, #16]
   c5aee:	3101      	adds	r1, #1
   c5af0:	f102 0314 	add.w	r3, r2, #20
   c5af4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c5af8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c5afc:	1f05      	subs	r5, r0, #4
   c5afe:	42a3      	cmp	r3, r4
   c5b00:	d30c      	bcc.n	c5b1c <__copybits+0x36>
   c5b02:	1aa3      	subs	r3, r4, r2
   c5b04:	3b11      	subs	r3, #17
   c5b06:	f023 0303 	bic.w	r3, r3, #3
   c5b0a:	3211      	adds	r2, #17
   c5b0c:	42a2      	cmp	r2, r4
   c5b0e:	bf88      	it	hi
   c5b10:	2300      	movhi	r3, #0
   c5b12:	4418      	add	r0, r3
   c5b14:	2300      	movs	r3, #0
   c5b16:	4288      	cmp	r0, r1
   c5b18:	d305      	bcc.n	c5b26 <__copybits+0x40>
   c5b1a:	bd70      	pop	{r4, r5, r6, pc}
   c5b1c:	f853 6b04 	ldr.w	r6, [r3], #4
   c5b20:	f845 6f04 	str.w	r6, [r5, #4]!
   c5b24:	e7eb      	b.n	c5afe <__copybits+0x18>
   c5b26:	f840 3b04 	str.w	r3, [r0], #4
   c5b2a:	e7f4      	b.n	c5b16 <__copybits+0x30>

000c5b2c <__any_on>:
   c5b2c:	f100 0214 	add.w	r2, r0, #20
   c5b30:	6900      	ldr	r0, [r0, #16]
   c5b32:	114b      	asrs	r3, r1, #5
   c5b34:	4298      	cmp	r0, r3
   c5b36:	b510      	push	{r4, lr}
   c5b38:	db11      	blt.n	c5b5e <__any_on+0x32>
   c5b3a:	dd0a      	ble.n	c5b52 <__any_on+0x26>
   c5b3c:	f011 011f 	ands.w	r1, r1, #31
   c5b40:	d007      	beq.n	c5b52 <__any_on+0x26>
   c5b42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c5b46:	fa24 f001 	lsr.w	r0, r4, r1
   c5b4a:	fa00 f101 	lsl.w	r1, r0, r1
   c5b4e:	428c      	cmp	r4, r1
   c5b50:	d10b      	bne.n	c5b6a <__any_on+0x3e>
   c5b52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c5b56:	4293      	cmp	r3, r2
   c5b58:	d803      	bhi.n	c5b62 <__any_on+0x36>
   c5b5a:	2000      	movs	r0, #0
   c5b5c:	bd10      	pop	{r4, pc}
   c5b5e:	4603      	mov	r3, r0
   c5b60:	e7f7      	b.n	c5b52 <__any_on+0x26>
   c5b62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c5b66:	2900      	cmp	r1, #0
   c5b68:	d0f5      	beq.n	c5b56 <__any_on+0x2a>
   c5b6a:	2001      	movs	r0, #1
   c5b6c:	e7f6      	b.n	c5b5c <__any_on+0x30>

000c5b6e <_calloc_r>:
   c5b6e:	b513      	push	{r0, r1, r4, lr}
   c5b70:	434a      	muls	r2, r1
   c5b72:	4611      	mov	r1, r2
   c5b74:	9201      	str	r2, [sp, #4]
   c5b76:	f7f7 fe95 	bl	bd8a4 <_malloc_r>
   c5b7a:	4604      	mov	r4, r0
   c5b7c:	b118      	cbz	r0, c5b86 <_calloc_r+0x18>
   c5b7e:	9a01      	ldr	r2, [sp, #4]
   c5b80:	2100      	movs	r1, #0
   c5b82:	f7fd ff8d 	bl	c3aa0 <memset>
   c5b86:	4620      	mov	r0, r4
   c5b88:	b002      	add	sp, #8
   c5b8a:	bd10      	pop	{r4, pc}
   c5b8c:	0000      	movs	r0, r0
	...

000c5b90 <nan>:
   c5b90:	ed9f 0b01 	vldr	d0, [pc, #4]	; c5b98 <nan+0x8>
   c5b94:	4770      	bx	lr
   c5b96:	bf00      	nop
   c5b98:	00000000 	.word	0x00000000
   c5b9c:	7ff80000 	.word	0x7ff80000

000c5ba0 <__ascii_wctomb>:
   c5ba0:	b149      	cbz	r1, c5bb6 <__ascii_wctomb+0x16>
   c5ba2:	2aff      	cmp	r2, #255	; 0xff
   c5ba4:	bf85      	ittet	hi
   c5ba6:	238a      	movhi	r3, #138	; 0x8a
   c5ba8:	6003      	strhi	r3, [r0, #0]
   c5baa:	700a      	strbls	r2, [r1, #0]
   c5bac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c5bb0:	bf98      	it	ls
   c5bb2:	2001      	movls	r0, #1
   c5bb4:	4770      	bx	lr
   c5bb6:	4608      	mov	r0, r1
   c5bb8:	4770      	bx	lr
	...

000c5bbc <__aeabi_d2lz>:
   c5bbc:	b538      	push	{r3, r4, r5, lr}
   c5bbe:	2200      	movs	r2, #0
   c5bc0:	2300      	movs	r3, #0
   c5bc2:	4604      	mov	r4, r0
   c5bc4:	460d      	mov	r5, r1
   c5bc6:	f7fd fe29 	bl	c381c <__aeabi_dcmplt>
   c5bca:	b928      	cbnz	r0, c5bd8 <__aeabi_d2lz+0x1c>
   c5bcc:	4620      	mov	r0, r4
   c5bce:	4629      	mov	r1, r5
   c5bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c5bd4:	f7fd bef8 	b.w	c39c8 <__aeabi_d2ulz>
   c5bd8:	4620      	mov	r0, r4
   c5bda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c5bde:	f7fd fef3 	bl	c39c8 <__aeabi_d2ulz>
   c5be2:	4240      	negs	r0, r0
   c5be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c5be8:	bd38      	pop	{r3, r4, r5, pc}
   c5bea:	bf00      	nop

000c5bec <dynalib_user>:
   c5bec:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c5bfc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c5c0c:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c5c1c:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c5c2c:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c5c3c:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c5c4c:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c5c5c:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c5c6c:	4544 7525 003e 6157 6e72 6e69 2c67 6d20     DE%u>.Warning, m
   c5c7c:	746f 726f 6320 6d6f 616d 646e 6820 7361     otor command has
   c5c8c:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c5c9c:	6465 6920 206e 766f 7265 2520 6d64 2c73     ed in over %dms,
   c5cac:	6320 7475 6974 676e 6d20 746f 726f 0073      cutting motors.
   c5cbc:	7453 7461 7375 203a 6425 5b00 4157 4e52     Status: %d.[WARN
   c5ccc:	205d 4258 6565 4d20 7365 6173 6567 2073     ] XBee Messages 
   c5cdc:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c5cec:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c5cfc:	7373 6d75 6e69 2067 4258 6565 6920 2073     ssuming XBee is 
   c5d0c:	6e75 7661 6961 616c 6c62 0065 575b 5241     unavailable.[WAR
   c5d1c:	5d4e 4220 454c 4d20 7365 6173 6567 2073     N] BLE Messages 
   c5d2c:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c5d3c:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c5d4c:	7373 6d75 6e69 2067 4c42 2045 7369 7520     ssuming BLE is u
   c5d5c:	616e 6176 6c69 6261 656c 4300 6568 6b63     navailable.Check
   c5d6c:	7573 3a6d 2520 3230 2c78 2520 3330 0064     sum: %02x, %03d.
   c5d7c:	7453 6972 676e 4c20 6e65 203a 6425 202c     String Len: %d, 
   c5d8c:	6843 6365 736b 6d75 203a 6425 5b00 4157     Checksum: %d.[WA
   c5d9c:	4e52 205d 654d 7373 6761 2065 6843 6365     RN] Message Chec
   c5dac:	736b 6d75 4420 656f 2073 6f4e 2074 614d     ksum Does Not Ma
   c5dbc:	6374 2168 203a 7325 5700 7261 696e 676e     tch!: %s.Warning
   c5dcc:	202c 6863 6365 736b 6d75 6420 656f 2073     , checksum does 
   c5ddc:	6f6e 2074 616d 6374 0068 6361 006b 7463     not match.ack.ct
   c5dec:	006c 7325 2520 2073 6425 2520 2064 6425     l.%s %s %d %d %d
   c5dfc:	6d00 7274 5200 6365 6965 6576 2064 6f4d     .mtr.Received Mo
   c5e0c:	6f74 2072 6f43 6d6d 6e61 3a64 4c20 7053     tor Command: LSp
   c5e1c:	6565 3d64 6425 522c 7053 6565 3d64 6425     eed=%d,RSpeed=%d
   c5e2c:	7200 7165 7000 7374 5b00 5550 5354 205d     .req.pts.[PUTS] 
   c5e3c:	6552 6563 7669 6465 5320 7274 6e69 2067     Received String 
   c5e4c:	6f43 6d6d 6e61 3a64 2520 0073 7073 0063     Command: %s.spc.
   c5e5c:	7768 0061 7561 0074 6d64 0070 495b 464e     hwa.aut.dmp.[INF
   c5e6c:	5d4f 5220 6365 6965 6576 2064 544c 2045     O] Received LTE 
   c5e7c:	654d 7373 6761 3a65 2520 0073 654e 2077     Message: %s.New 
   c5e8c:	5442 4320 6d6f 616d 646e 003a 495b 464e     BT Command:.[INF
   c5e9c:	5d4f 5220 6365 6965 6576 2064 4c42 2045     O] Received BLE 
   c5eac:	654d 7373 6761 3a65 2520 0073 4343 7548     Message: %s.CCHu
   c5ebc:	0062 7245 6f72 2c72 4320 756f 646c 6e20     b.Error, Could n
   c5ecc:	746f 6920 696e 6974 6c61 7a69 2065 5047     ot initialize GP
   c5edc:	0053 6944 7473 6e61 6563 203a 6625 2500     S.Distance: %f.%
   c5eec:	3230 2564 3230 2564 3430 2564 3230 2564     02d%02d%04d%02d%
   c5efc:	3230 2564 3230 0064 7325 252c 2c66 6625     02d%02d.%s,%f,%f
   c5f0c:	252c 2c66 6625 252c 2c66 6625 252c 0066     ,%f,%f,%f,%f,%f.
   c5f1c:	654e 2077 4258 6565 4320 6d6f 616d 646e     New XBee Command
   c5f2c:	003a 495b 464e 5d4f 5220 6365 6965 6576     :.[INFO] Receive
   c5f3c:	2064 4258 6565 4d20 7365 6173 6567 203a     d XBee Message: 
   c5f4c:	7325 4500 746e 7265 6e69 2067 6144 6174     %s.Entering Data
   c5f5c:	4f20 6666 6f6c 6461 7265 4d20 646f 0065      Offloader Mode.
   c5f6c:	002f 7245 6f72 2c72 6320 756f 646c 6e20     /.Error, could n
   c5f7c:	746f 6f20 6570 206e 6f72 746f 5320 2044     ot open root SD 
   c5f8c:	6163 6472 6420 7269 6365 6f74 7972 5700     card directory.W
   c5f9c:	6961 6974 676e 6620 726f 4320 4843 6275     aiting for CCHub
   c5fac:	6320 6e6f 656e 7463 6f69 2e6e 2e2e 5300      connection....S
   c5fbc:	6174 7472 6e69 2067 7274 6e61 6673 7265     tarting transfer
   c5fcc:	2e2e 002e 6843 6365 696b 676e 6920 2066     ....Checking if 
   c5fdc:	6966 656c 2520 2073 7369 6120 2e20 7363     file %s is a .cs
   c5fec:	2076 726f 2e20 7874 2e74 2e2e 2e00 7363     v or .txt.....cs
   c5ffc:	0076 6966 656c 6f64 656e 6600 6c69 6e65     v.filedone.filen
   c600c:	6d61 0065 6553 646e 6e69 2067 6f63 6d6d     ame.Sending comm
   c601c:	6e61 2064 7325 4600 6c69 2065 7325 6920     and %s.File %s i
   c602c:	2073 2061 632e 7673 6f20 2072 742e 7478     s a .csv or .txt
   c603c:	7020 6972 746e 6e69 2067 6164 6174 6600      printing data.f
   c604c:	6c69 6365 6d6f 0070 7325 3025 7832 4200     ilecomp.%s%02x.B
   c605c:	746f 6431 7461 4200 6425 4343 6e73 2573     ot1dat.B%dCCsns%
   c606c:	2e30 6636 2520 2e30 6636 2520 2064 6425     0.6f %0.6f %d %d
   c607c:	2520 2064 6425 2520 2064 4200 6425 4241      %d %d %d .B%dAB
   c608c:	7573 2570 2064 6425 2520 362e 2066 2e25     sup%d %d %.6f %.
   c609c:	6636 0020 3142 4343 7470 6273 6769 6f62     6f .B1CCptsbigbo
   c60ac:	0074 6146 6c69 6465 7420 206f 6966 646e     t.Failed to find
   c60bc:	4c20 5349 4d33 4c44 6320 6968 0070 494c      LIS3MDL chip.LI
   c60cc:	3353 444d 204c 6f46 6e75 2164 5700 7461     S3MDL Found!.Wat
   c60dc:	7265 6f42 0074 4c5f 474f 742e 7478 4500     erBot._LOG.txt.E
   c60ec:	7272 726f 203a 6f63 6c75 2064 6f6e 2074     rror: could not 
   c60fc:	6f63 6e6e 6365 2074 6f74 5320 2044 6163     connect to SD ca
   c610c:	6472 0021 6954 656d 4c2c 7461 7469 6475     rd!.Time,Latitud
   c611c:	2c65 6f4c 676e 7469 6475 2c65 6554 706d     e,Longitude,Temp
   c612c:	7265 7461 7275 2c65 4870 442c 7369 6f73     erature,pH,Disso
   c613c:	766c 6465 4f20 2c32 6f43 646e 6375 6974     lved O2,Conducti
   c614c:	6976 7974 3020 312e 2c4b 6f43 646e 6375     vity 0.1K,Conduc
   c615c:	6974 6976 7974 3120 004b 495b 464e 5d4f     tivity 1K.[INFO]
   c616c:	5720 7461 7265 6f42 2074 6425 203a 7453      WaterBot %d: St
   c617c:	7261 6574 2064 6f4c 6767 6e69 2167 7400     arted Logging!.t
   c618c:	0078 7872 6f00 6666 0000 0000               x.rx.off....

000c6198 <_ZTVN8particle11SPISettingsE>:
	...
   c61a0:	4305 000b 40d1 000b 4175 000b               .C...@..uA..

000c61ac <_ZTV5Timer>:
	...
   c61b4:	43f1 000b 4445 000b 41db 000b               .C..ED...A..

000c61c0 <_ZTVN5spark10LogHandlerE>:
	...
   c61d0:	40a9 000b 40d3 000b                         .@...@..

000c61d8 <_ZTVN8particle9LEDStatusE>:
	...
   c61e0:	4241 000b 425d 000b 40dd 000b               AB..]B...@..

000c61ec <_ZTVN5spark16SerialLogHandlerE>:
	...
   c61f4:	4271 000b 42a5 000b 04a9 000c 40d5 000b     qB...B.......@..

000c6204 <_ZTV4File>:
	...
   c620c:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c621c:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c622c:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c623c:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c624c:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   c625c:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c626c:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c627c:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   c628c:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c629c:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   c62ac:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c62bc:	6232 0030                                   2b0.

000c62c0 <CSWTCH.289>:
   c62c0:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c62d0:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c62e0:	444d 004c                                   MDL.

000c62e4 <CSWTCH.26>:
   c62e4:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c62f4 <_ZTV16Adafruit_LIS3MDL>:
	...
   c62fc:	782f 000b 7879 000b 782d 000b 7929 000b     /x..yx..-x..)y..
   c630c:	7831 000b 6573 5074 6361 656b 4374 6766     1x..setPacketCfg
   c631c:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c632c:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c633c:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c634c:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c635c:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c636c:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c637c:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c638c:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c639c:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c63ac:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c63bc:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c63cc:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c63dc:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c63ec:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c63fc:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c640c:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c641c:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c642c:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c643c:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c644c:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c645c:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c646c:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c647c:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c648c:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c649c:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c64ac:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c64bc:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c64cc:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c64dc:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c64ec:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c64fc:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c650c:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c651c:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c652c:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c653c:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c654c:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c655c:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c656c:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c657c:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c658c:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c659c:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c65ac:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c65bc:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c65cc:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c65dc:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c65ec:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c65fc:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c660c:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c661c:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c662c:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c663c:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c664c:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c665c:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c666c:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c667c:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c668c:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c669c:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c66ac:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c66bc:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c66cc:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c66dc:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c66ec:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c66fc:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c670c:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c671c:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c672c:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c673c:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c674c:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c675c:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c676c:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c677c:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c678c:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c679c:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c67ac:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c67bc:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c67cc:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c67dc:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c67ec:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c67fc:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c680c:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c681c:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c682c:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c683c:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c684c:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c685c:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c686c:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c687c:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c688c:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c689c:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c68ac:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c68bc:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c68cc:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c68dc:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c68ec:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c68fc:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c690c:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c691c:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c692c:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c693c:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c694c:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c695c:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c696c:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c697c:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c698c:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c699c:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c69ac:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c69bc:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c69cc:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c69dc:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c69ec:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c69fc:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c6a0c:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c6a1c:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c6a2c:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c6a3c:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c6a4c:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c6a5c:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c6a6c:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c6a7c:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c6a8c:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c6a9c:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c6aac:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c6abc:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c6acc:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c6adc:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c6aec:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c6afc:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c6b0c:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c6b1c:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c6b2c:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c6b3c:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c6b4c:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c6b5c:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c6b6c:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c6b7c:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c6b8c:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c6b9c:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c6bac:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c6bbc:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c6bcc:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c6bdc:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c6bec:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c6bfc:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c6c0c:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c6c1c:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c6c2c:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c6c3c:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c6c4c:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c6c5c:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c6c6c:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c6c7c:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c6c8c:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c6c9c:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c6cac:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c6cbc:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c6ccc:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c6cdc:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c6cec:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c6cfc:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c6d0c:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c6d1c:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c6d2c:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c6d3c:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c6d4c:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c6d5c:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c6d6c:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c6d7c:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c6d8c:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c6d9c:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c6dac:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c6dbc:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c6dcc:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c6ddc:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c6dec:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c6dfc:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c6e0c:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c6e1c:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c6e2c:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c6e3c:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c6e4c:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c6e5c:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c6e6c:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c6e7c:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c6e8c:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c6e9c:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c6eac:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c6ebc:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c6ecc:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c6edc:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c6eec:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c6efc:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c6f0c:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c6f1c:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c6f2c:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c6f3c:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c6f4c:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c6f5c:	7365 2e73 2e2e 0000                         ess.....

000c6f64 <CSWTCH.334>:
   c6f64:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c6f74:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c6f84:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c6fa4:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c6fcc:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7020:	0000 0010 0004                              ......

000c7026 <CSWTCH.335>:
   c7026:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7042:	002c 0000 0000 0000 0010 0024               ,.........$.

000c704e <CSWTCH.336>:
   c704e:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c705e:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c706e:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c707e:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c708e:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c709e:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c70ae:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c70be:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c70ce:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c70de:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c70ee:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c70fe:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c710e:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c711e:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c712e:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c713e:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c714e:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c715e:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c716e:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c717e:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c718e:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c71a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c71a8:	d941 000b d9a5 000b da79 000b d9cf 000b     A.......y.......
   c71b8:	d945 000b                                   E...

000c71bc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c71c4:	d93d 000b d9b3 000b d93f 000b d9d5 000b     =.......?.......
   c71d4:	d965 000b                                   e...

000c71d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c71e0:	d93b 000b d9c1 000b e235 000b d9db 000b     ;.......5.......
   c71f0:	d985 000b                                   ....

000c71f4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7200:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7212 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7212:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7222 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7222:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c7234 <_ZTVN5spark13CellularClassE>:
	...
   c723c:	ecf7 000b eced 000b ece3 000b ec99 000b     ................
   c724c:	ecd7 000b eccb 000b 0801 000c 0809 000c     ................
   c725c:	ecbf 000b ecb7 000b ecad 000b eca3 000b     ................
   c726c:	0839 000c                                   9...

000c7270 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7278:	ed31 000b ed37 000b ed75 000b ed45 000b     1...7...u...E...
   c7288:	ed33 000b                                   3...

000c728c <_ZTVN5spark13EthernetClassE>:
	...
   c7294:	f2bf 000b f2b5 000b f2ab 000b f2a1 000b     ................
   c72a4:	f295 000b f289 000b 0801 000c 0809 000c     ................
   c72b4:	f27d 000b f275 000b f26b 000b f261 000b     }...u...k...a...
   c72c4:	0839 000c                                   9...

000c72c8 <_ZTV7TwoWire>:
	...
   c72d0:	f2dd 000b f327 000b f2ff 000b f2df 000b     ....'...........
   c72e0:	f307 000b f30f 000b f317 000b f31f 000b     ................

000c72f0 <_ZTV9IPAddress>:
	...
   c72f8:	f3f9 000b f3e9 000b f3eb 000b 7525 7500     ............%u.u
   c7308:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c7318:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c7328:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c7338:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c7348:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c7358:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c7368:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c7378:	6961 006c                                   ail.

000c737c <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7384:	f8f5 000b f91b 000b f8d9 000b f507 000b     ................

000c7394 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c739c:	fd51 000b fd69 000b 04a9 000c 40d5 000b     Q...i........@..

000c73ac <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c73b4:	fd7d 000b fd91 000b 064d 000c f8e1 000b     }.......M.......

000c73c4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c73cc:	f8f3 000b f929 000b 040d 000c f8e3 000b     ....)...........

000c73dc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c73e4:	f8f1 000b f937 000b fcb9 000b f959 000b     ....7.......Y...

000c73f4 <_ZTVN5spark12NetworkClassE>:
	...
   c73fc:	07c1 000c 07cb 000c 07d5 000c 07df 000c     ................
   c740c:	07e9 000c 07f5 000c 0801 000c 0809 000c     ................
   c741c:	0811 000c 081d 000c 0825 000c 082f 000c     ........%.../...
   c742c:	0839 000c                                   9...

000c7430 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7430:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c7440:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c7450:	6d69 0065                                   ime.

000c7454 <_ZTV11USARTSerial>:
	...
   c745c:	1155 000c 11c1 000c 1199 000c 0925 000c     U...........%...
   c746c:	1169 000c 1185 000c 1177 000c 1193 000c     i.......w.......
   c747c:	1157 000c 115b 000c                         W...[...

000c7484 <_ZTV9USBSerial>:
	...
   c748c:	1213 000c 127b 000c 1251 000c 0925 000c     ....{...Q...%...
   c749c:	1243 000c 1215 000c 1225 000c 1275 000c     C.......%...u...
   c74ac:	1235 000c 120d 000c                         5.......

000c74b4 <_ZSt7nothrow>:
	...

000c74b5 <_ZTSSt19_Sp_make_shared_tag>:
   c74b5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c74c5:	6572 5f64 6174 0067 0000                     red_tag....

000c74d0 <_ZTISt19_Sp_make_shared_tag>:
   c74d0:	7510 000c 74b5 000c                         .u...t..

000c74d8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c74d8:	7570 000c 74e4 000c 7594 000c               pu...t...u..

000c74e4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c74e4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c74f4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c7504:	0045 0000                                   E...

000c7508 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c7508:	0000 0000 74d8 000c 16a5 000c 16b9 000c     .....t..........
   c7518:	184d 000c 184d 000c 1723 000c 1665 000c     M...M...#...e...
   c7528:	170b 000c 16cd 000c 1697 000c               ............

000c7534 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c7534:	7570 000c 7540 000c 74d8 000c               pu..@u...t..

000c7540 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c7540:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c7550:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c7560:	666e 456f 0000 0000                         nfoE....

000c7568 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c7568:	0000 0000 7534 000c 174d 000c 1761 000c     ....4u..M...a...
   c7578:	184d 000c 184d 000c 1723 000c 1665 000c     M...M...#...e...
   c7588:	1821 000c 17ad 000c 1775 000c               !.......u...

000c7594 <_ZTISt9type_info>:
   c7594:	7510 000c 759c 000c                         .u...u..

000c759c <_ZTSSt9type_info>:
   c759c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   c75ac:	0000 0000                                   ....

000c75b0 <CSWTCH.8>:
   c75b0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c75c0:	21d2 7f33 d97c c002                         .!3.|...

000c75c8 <CSWTCH.9>:
   c75c8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c75d8:	2d18 5444 21fb c009                         .-DT.!..

000c75e0 <CSWTCH.8>:
   c75e0:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c75ec <CSWTCH.9>:
   c75ec:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c75f8 <npio2_hw>:
   c75f8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c7608:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c7618:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c7628:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c7638:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c7648:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c7658:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c7668:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c7678 <two_over_pi>:
   c7678:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c7688:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c7698:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c76a8:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c76b8:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c76c8:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c76d8:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c76e8:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c76f8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c7708:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c7718:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c7728:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c7738:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c7748:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c7758:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c7768:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c7778:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c7788:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c7798:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c77a8:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c77b8:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c77c8:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c77d8:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c77e8:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c77f8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c7808:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c7818:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c7828:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c7838:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c7848:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c7858:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c7868:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c7878:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c7888:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c7898:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c78a8:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c78b8:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c78c8:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c78d8:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c78e8:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c78f8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c7908:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c7918:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c7928:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c7938:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c7948:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c7958:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c7968:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c7978:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c7988:	008c 0000 006b 0000                         ....k...

000c7990 <PIo2>:
   c7990:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c79a0:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c79b0:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c79bc <init_jk>:
   c79bc:	0004 0000 0007 0000 0009 0000               ............

000c79c8 <atanhi>:
   c79c8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c79d8:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c79e8 <atanlo>:
   c79e8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c79f8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c7a08 <atanhi>:
   c7a08:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c7a18 <atanlo>:
   c7a18:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c7a28:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c7a38:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c7a48:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c7a58:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c7a68:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c7a78:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c7a88:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c7a98:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c7aa4 <fpi.1>:
   c7aa4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c7ab4:	0000 0000                                   ....

000c7ab8 <fpinan.0>:
   c7ab8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c7ad0 <tinytens>:
   c7ad0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c7ae0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c7af0:	6f43 64ac 0628 1168                         Co.d(.h.

000c7af8 <_ctype_>:
   c7af8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c7b08:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c7b18:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c7b28:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c7b38:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c7b48:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c7b58:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c7b68:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c7b78:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c7bf8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c7c08:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c7c18:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c7c28:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c7c38:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c7c48:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c7c58:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c7c68:	632e 0000                                   .c..

000c7c6c <_C_numeric_locale>:
   c7c6c:	64e7 000c 7367 000c dc08 2003 4f50 4953     .d..gs..... POSI
   c7c7c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c7c8c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c7c9c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c7cac:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c7cbc:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c7ccc:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c7cd8 <__mprec_bigtens>:
   c7cd8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c7ce8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c7cf8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c7d00 <__mprec_tens>:
   c7d00:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c7d10:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c7d20:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c7d30:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c7d40:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c7d50:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c7d60:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c7d70:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c7d80:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c7d90:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c7da0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c7db0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c7dc0:	9db4 79d9 7843 44ea                         ...yCx.D

000c7dc8 <p05.0>:
   c7dc8:	0005 0000 0019 0000 007d 0000               ........}...

000c7dd4 <link_const_variable_data_end>:
   c7dd4:	000b5dc1 	.word	0x000b5dc1
   c7dd8:	000bec89 	.word	0x000bec89
   c7ddc:	000bed01 	.word	0x000bed01
   c7de0:	000bf2c9 	.word	0x000bf2c9
   c7de4:	000c0499 	.word	0x000c0499
   c7de8:	000c0911 	.word	0x000c0911
   c7dec:	000c0a35 	.word	0x000c0a35
   c7df0:	000c0f9d 	.word	0x000c0f9d
   c7df4:	000c1141 	.word	0x000c1141

000c7df8 <link_constructors_end>:
	...
