
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014ad0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c8af0  000c8af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c8b14  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003db20  000c8b18  0002db20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ad0  2003dd20  2003dd20  0003dd20  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8d18  000c8d18  00038d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8d40  000c8d40  00038d40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022e286  00000000  00000000  00038d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f5b  00000000  00000000  00266fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000712d6  00000000  00000000  00287f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f88  00000000  00000000  002f91fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011578  00000000  00000000  002fe183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ffbe  00000000  00000000  0030f6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00087e3f  00000000  00000000  0035f6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c1ef  00000000  00000000  003e74f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fdb8  00000000  00000000  005436e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f010 fb05 	bl	c4640 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 fb27 	bl	c4690 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db20 	.word	0x2003db20
   b404c:	000c8b18 	.word	0x000c8b18
   b4050:	2003dd20 	.word	0x2003dd20
   b4054:	2003dd20 	.word	0x2003dd20
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d ffab 	bl	c1fbc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c8ac4 	.word	0x000c8ac4
   b4080:	000c8ae8 	.word	0x000c8ae8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bec0 	b.w	b4e08 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fb4f 	bl	b672c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d bf4b 	b.w	c1f2c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f00a b983 	b.w	be3a0 <malloc>

000b409a <_Znaj>:
   b409a:	f00a b981 	b.w	be3a0 <malloc>

000b409e <_ZdaPv>:
   b409e:	f00a b987 	b.w	be3b0 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f00a b985 	b.w	be3b0 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f00a f860 	bl	be174 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bdda5 	.word	0x000bdda5
   b40bc:	000c67f0 	.word	0x000c67f0

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_Z13StatusHandlerv>:

//ISR Function to calculate bitmasked status number and signal to the main loop that the status is ready
void StatusHandler(){
    statusFlags = 0;                    //Reset status flags to 0, then add up the individual flags
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b40f8:	4b15      	ldr	r3, [pc, #84]	; (b4150 <_Z13StatusHandlerv+0x58>)
   b40fa:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b40fc:	4b15      	ldr	r3, [pc, #84]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b40fe:	781b      	ldrb	r3, [r3, #0]
   b4100:	009b      	lsls	r3, r3, #2
   b4102:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
   b4106:	4b14      	ldr	r3, [pc, #80]	; (b4158 <_Z13StatusHandlerv+0x60>)
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b4108:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b410a:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;    //Bit 3 indicates bot is currently offloading
   b410c:	4a13      	ldr	r2, [pc, #76]	; (b415c <_Z13StatusHandlerv+0x64>)
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;      //Bit 4 indicates the current drive mode
   b4114:	4a12      	ldr	r2, [pc, #72]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4116:	7812      	ldrb	r2, [r2, #0]
   b4118:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;     //Bit 6 indicates that the battery is low
   b411c:	4a11      	ldr	r2, [pc, #68]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b411e:	7812      	ldrb	r2, [r2, #0]
   b4120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;     //Bit 7 indicates that the Atlas sensors are being logged to the SD card
   b4124:	4a10      	ldr	r2, [pc, #64]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4126:	7812      	ldrb	r2, [r2, #0]
   b4128:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;       //Bit 8 indicates neo-m8u GPS is available and receiving non-null data
   b412c:	4a0f      	ldr	r2, [pc, #60]	; (b416c <_Z13StatusHandlerv+0x74>)
   b412e:	7812      	ldrb	r2, [r2, #0]
   b4130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;   //Bit 9 indicates the LIS3MDL compass is connected and providing dat
   b4134:	4a0e      	ldr	r2, [pc, #56]	; (b4170 <_Z13StatusHandlerv+0x78>)
   b4136:	7812      	ldrb	r2, [r2, #0]
   b4138:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    statusFlags |= SDAvail << 10;       //Bit 10 indicates the SD card is functional and can record data
   b413c:	4a0d      	ldr	r2, [pc, #52]	; (b4174 <_Z13StatusHandlerv+0x7c>)
   b413e:	7812      	ldrb	r2, [r2, #0]
   b4140:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   b4144:	4a0c      	ldr	r2, [pc, #48]	; (b4178 <_Z13StatusHandlerv+0x80>)
   b4146:	8013      	strh	r3, [r2, #0]
    statusReady = true;                 //Set flag true, so the main loop will transmit out status to CChub
   b4148:	4b0c      	ldr	r3, [pc, #48]	; (b417c <_Z13StatusHandlerv+0x84>)
   b414a:	2201      	movs	r2, #1
   b414c:	701a      	strb	r2, [r3, #0]
    //Serial.println("Sending a status update!");
}
   b414e:	4770      	bx	lr
   b4150:	2003dd74 	.word	0x2003dd74
   b4154:	2003dd2c 	.word	0x2003dd2c
   b4158:	2003dd61 	.word	0x2003dd61
   b415c:	2003e0ac 	.word	0x2003e0ac
   b4160:	2003dda9 	.word	0x2003dda9
   b4164:	2003ded8 	.word	0x2003ded8
   b4168:	2003ded1 	.word	0x2003ded1
   b416c:	2003dd60 	.word	0x2003dd60
   b4170:	2003dd3c 	.word	0x2003dd3c
   b4174:	2003dd64 	.word	0x2003dd64
   b4178:	2003e5a4 	.word	0x2003e5a4
   b417c:	2003e5c4 	.word	0x2003e5c4

000b4180 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4180:	4770      	bx	lr

000b4182 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4182:	b510      	push	{r4, lr}
  }
   b4184:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4186:	4604      	mov	r4, r0
  }
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4FileD0Ev>:
   b4190:	b510      	push	{r4, lr}
   b4192:	2134      	movs	r1, #52	; 0x34
   b4194:	4604      	mov	r4, r0
   b4196:	f7ff ff84 	bl	b40a2 <_ZdlPvj>
   b419a:	4620      	mov	r0, r4
   b419c:	bd10      	pop	{r4, pc}

000b419e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b419e:	6943      	ldr	r3, [r0, #20]
   b41a0:	b113      	cbz	r3, b41a8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41a2:	6983      	ldr	r3, [r0, #24]
   b41a4:	300c      	adds	r0, #12
   b41a6:	4718      	bx	r3
            callback();
        }
    }
   b41a8:	4770      	bx	lr

000b41aa <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41aa:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41ac:	2100      	movs	r1, #0
   b41ae:	4604      	mov	r4, r0
   b41b0:	4608      	mov	r0, r1
   b41b2:	f009 fd9f 	bl	bdcf4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41b6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41b8:	4620      	mov	r0, r4
   b41ba:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41bc:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41be:	f009 fdb1 	bl	bdd24 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41c2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b41c4:	b10c      	cbz	r4, b41ca <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41c6:	2301      	movs	r3, #1
   b41c8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41ca:	2100      	movs	r1, #0
   b41cc:	2001      	movs	r0, #1
   b41ce:	f009 fd91 	bl	bdcf4 <os_thread_scheduling>
            }
        }
        if (t) {
   b41d2:	b12c      	cbz	r4, b41e0 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41d4:	6823      	ldr	r3, [r4, #0]
   b41d6:	4620      	mov	r0, r4
   b41d8:	689b      	ldr	r3, [r3, #8]
   b41da:	4798      	blx	r3
            t->running = false;
   b41dc:	2300      	movs	r3, #0
   b41de:	7123      	strb	r3, [r4, #4]
        }
    }
   b41e0:	b002      	add	sp, #8
   b41e2:	bd10      	pop	{r4, pc}

000b41e4 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b41e4:	3010      	adds	r0, #16
   b41e6:	f002 bf47 	b.w	b7078 <_ZN7FatFile4syncEv>

000b41ea <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b41ea:	3010      	adds	r0, #16
   b41ec:	f002 be28 	b.w	b6e40 <_ZN7FatFile4peekEv>

000b41f0 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b41f0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b41f2:	2201      	movs	r2, #1
   b41f4:	f10d 0107 	add.w	r1, sp, #7
   b41f8:	3010      	adds	r0, #16
   b41fa:	f002 fd73 	bl	b6ce4 <_ZN7FatFile4readEPvj>
   b41fe:	2801      	cmp	r0, #1
   b4200:	bf0c      	ite	eq
   b4202:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4206:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b420a:	b003      	add	sp, #12
   b420c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4210 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4210:	3010      	adds	r0, #16
   b4212:	f002 bfbb 	b.w	b718c <_ZN7FatFile5writeEPKvj>

000b4216 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4216:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4218:	2201      	movs	r2, #1
   b421a:	f88d 1007 	strb.w	r1, [sp, #7]
   b421e:	3010      	adds	r0, #16
   b4220:	f10d 0107 	add.w	r1, sp, #7
   b4224:	f002 ffb2 	bl	b718c <_ZN7FatFile5writeEPKvj>
  }
   b4228:	b003      	add	sp, #12
   b422a:	f85d fb04 	ldr.w	pc, [sp], #4

000b422e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b422e:	2a01      	cmp	r2, #1
   b4230:	d102      	bne.n	b4238 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4232:	6001      	str	r1, [r0, #0]
      }
   b4234:	2000      	movs	r0, #0
   b4236:	4770      	bx	lr
	  switch (__op)
   b4238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b423a:	bf04      	itt	eq
   b423c:	680b      	ldreq	r3, [r1, #0]
   b423e:	6003      	streq	r3, [r0, #0]
	      break;
   b4240:	e7f8      	b.n	b4234 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4242 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4242:	6803      	ldr	r3, [r0, #0]
   b4244:	4718      	bx	r3

000b4246 <_ZN5Timer5_stopEjb.isra.0>:
    bool _stop(unsigned block, bool fromISR=false)
   b4246:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4248:	6880      	ldr	r0, [r0, #8]
   b424a:	b128      	cbz	r0, b4258 <_ZN5Timer5_stopEjb.isra.0+0x12>
   b424c:	2300      	movs	r3, #0
   b424e:	e9cd 1300 	strd	r1, r3, [sp]
   b4252:	2102      	movs	r1, #2
   b4254:	f009 fd6e 	bl	bdd34 <os_timer_change>
    }
   b4258:	b003      	add	sp, #12
   b425a:	f85d fb04 	ldr.w	pc, [sp], #4

000b425e <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	b2c9      	uxtb	r1, r1
   b4262:	689b      	ldr	r3, [r3, #8]
   b4264:	4718      	bx	r3
	...

000b4268 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4268:	b510      	push	{r4, lr}
   b426a:	4b05      	ldr	r3, [pc, #20]	; (b4280 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b426c:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b426e:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4270:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4272:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4276:	f009 ff9d 	bl	be1b4 <led_set_status_active>
}
   b427a:	4620      	mov	r0, r4
   b427c:	bd10      	pop	{r4, pc}
   b427e:	bf00      	nop
   b4280:	000c6ea8 	.word	0x000c6ea8

000b4284 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4284:	b510      	push	{r4, lr}
   b4286:	4604      	mov	r4, r0
}
   b4288:	f7ff ffee 	bl	b4268 <_ZN8particle9LEDStatusD1Ev>
   b428c:	4620      	mov	r0, r4
   b428e:	2120      	movs	r1, #32
   b4290:	f7ff ff07 	bl	b40a2 <_ZdlPvj>
   b4294:	4620      	mov	r0, r4
   b4296:	bd10      	pop	{r4, pc}

000b4298 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4298:	4b0a      	ldr	r3, [pc, #40]	; (b42c4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b429a:	b510      	push	{r4, lr}
   b429c:	4604      	mov	r4, r0
   b429e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42a0:	f00c fa8e 	bl	c07c0 <_ZN5spark10LogManager8instanceEv>
   b42a4:	4621      	mov	r1, r4
   b42a6:	f00c fcc6 	bl	c0c36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b42aa:	f00d fdf7 	bl	c1e9c <_Z16_fetch_usbserialv>
   b42ae:	f00d fde9 	bl	c1e84 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b42b2:	4620      	mov	r0, r4
   b42b4:	4b04      	ldr	r3, [pc, #16]	; (b42c8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b42b6:	f840 3b04 	str.w	r3, [r0], #4
   b42ba:	f00c fb57 	bl	c096c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42be:	4620      	mov	r0, r4
   b42c0:	bd10      	pop	{r4, pc}
   b42c2:	bf00      	nop
   b42c4:	000c6ebc 	.word	0x000c6ebc
   b42c8:	000c6e90 	.word	0x000c6e90

000b42cc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42cc:	b510      	push	{r4, lr}
   b42ce:	4604      	mov	r4, r0
    }
   b42d0:	f7ff ffe2 	bl	b4298 <_ZN5spark16SerialLogHandlerD1Ev>
   b42d4:	4620      	mov	r0, r4
   b42d6:	2124      	movs	r1, #36	; 0x24
   b42d8:	f7ff fee3 	bl	b40a2 <_ZdlPvj>
   b42dc:	4620      	mov	r0, r4
   b42de:	bd10      	pop	{r4, pc}

000b42e0 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b42e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42e2:	4606      	mov	r6, r0
   b42e4:	4614      	mov	r4, r2
   b42e6:	460d      	mov	r5, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b42e8:	2200      	movs	r2, #0
   b42ea:	4621      	mov	r1, r4
   b42ec:	f7ff ffab 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42f0:	68b0      	ldr	r0, [r6, #8]
   b42f2:	b130      	cbz	r0, b4302 <_ZN5Timer6_startEjb.isra.0+0x22>
   b42f4:	2300      	movs	r3, #0
   b42f6:	e9cd 5300 	strd	r5, r3, [sp]
   b42fa:	4622      	mov	r2, r4
   b42fc:	4619      	mov	r1, r3
   b42fe:	f009 fd19 	bl	bdd34 <os_timer_change>
    }
   b4302:	b002      	add	sp, #8
   b4304:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4308 <_Z13buttonHandlerv>:
    #endif
    shutdownTimer.stopFromISR();
}

//ISR triggered when button is pressed or released
void buttonHandler(){
   b4308:	b538      	push	{r3, r4, r5, lr}
    if(digitalRead(PWR_BUT)){               //If the interrupt was triggered by the button being pressed
   b430a:	2012      	movs	r0, #18
   b430c:	f00d fef0 	bl	c20f0 <digitalRead>
   b4310:	4d08      	ldr	r5, [pc, #32]	; (b4334 <_Z13buttonHandlerv+0x2c>)
   b4312:	4604      	mov	r4, r0
    bool startFromISR() { return _start(0, true); }
   b4314:	2201      	movs	r2, #1
   b4316:	b130      	cbz	r0, b4326 <_Z13buttonHandlerv+0x1e>
   b4318:	4807      	ldr	r0, [pc, #28]	; (b4338 <_Z13buttonHandlerv+0x30>)
   b431a:	2100      	movs	r1, #0
   b431c:	f7ff ffe0 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
        shutdownTimer.startFromISR();       //Start the shutdown timer, which will check if the button has been held for long enough
        shutdownActive = true;              //Set flag to true to make LED flash and indicate shutdown initiate
   b4320:	2301      	movs	r3, #1
   b4322:	702b      	strb	r3, [r5, #0]
    }
    else{                                   //If the interrupt was triggered by the button being released
        shutdownTimer.stopFromISR();        //Stop the ISR which will shut off the bot
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
    }
}
   b4324:	bd38      	pop	{r3, r4, r5, pc}
    bool stopFromISR() { return _stop(0, true); }
   b4326:	4601      	mov	r1, r0
   b4328:	4803      	ldr	r0, [pc, #12]	; (b4338 <_Z13buttonHandlerv+0x30>)
   b432a:	f7ff ff8c 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
   b432e:	702c      	strb	r4, [r5, #0]
}
   b4330:	e7f8      	b.n	b4324 <_Z13buttonHandlerv+0x1c>
   b4332:	bf00      	nop
   b4334:	2003e55e 	.word	0x2003e55e
   b4338:	2003e560 	.word	0x2003e560

000b433c <_Z11buttonTimerv>:
void buttonTimer(){
   b433c:	b508      	push	{r3, lr}
    if(digitalRead(PWR_BUT)) digitalWrite(PWR_EN, LOW); //Turn off system
   b433e:	2012      	movs	r0, #18
   b4340:	f00d fed6 	bl	c20f0 <digitalRead>
   b4344:	b118      	cbz	r0, b434e <_Z11buttonTimerv+0x12>
   b4346:	2100      	movs	r1, #0
   b4348:	201c      	movs	r0, #28
   b434a:	f00d feb8 	bl	c20be <digitalWrite>
}
   b434e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4352:	4802      	ldr	r0, [pc, #8]	; (b435c <_Z11buttonTimerv+0x20>)
   b4354:	2201      	movs	r2, #1
   b4356:	2100      	movs	r1, #0
   b4358:	f7ff bf75 	b.w	b4246 <_ZN5Timer5_stopEjb.isra.0>
   b435c:	2003e560 	.word	0x2003e560

000b4360 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	b40e      	push	{r1, r2, r3}
   b4362:	b503      	push	{r0, r1, lr}
   b4364:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4366:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4368:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b436c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b436e:	f00d f948 	bl	c1602 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4372:	b002      	add	sp, #8
   b4374:	f85d eb04 	ldr.w	lr, [sp], #4
   b4378:	b003      	add	sp, #12
   b437a:	4770      	bx	lr

000b437c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b437c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b437e:	4604      	mov	r4, r0
   b4380:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4382:	7922      	ldrb	r2, [r4, #4]
   b4384:	68a3      	ldr	r3, [r4, #8]
   b4386:	b132      	cbz	r2, b4396 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4388:	b9a3      	cbnz	r3, b43b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b438a:	490b      	ldr	r1, [pc, #44]	; (b43b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b438c:	b002      	add	sp, #8
   b438e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4392:	f00d b8f5 	b.w	c1580 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4396:	4a09      	ldr	r2, [pc, #36]	; (b43bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4398:	7b26      	ldrb	r6, [r4, #12]
   b439a:	4d09      	ldr	r5, [pc, #36]	; (b43c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b439c:	4909      	ldr	r1, [pc, #36]	; (b43c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b439e:	7b64      	ldrb	r4, [r4, #13]
   b43a0:	2e01      	cmp	r6, #1
   b43a2:	bf18      	it	ne
   b43a4:	4629      	movne	r1, r5
   b43a6:	e9cd 1400 	strd	r1, r4, [sp]
   b43aa:	4907      	ldr	r1, [pc, #28]	; (b43c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b43ac:	f7ff ffd8 	bl	b4360 <_ZN5Print6printfEPKcz>
  }
   b43b0:	b002      	add	sp, #8
   b43b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b43b4:	4a05      	ldr	r2, [pc, #20]	; (b43cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b43b6:	e7ef      	b.n	b4398 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b43b8:	000c6816 	.word	0x000c6816
   b43bc:	000c8057 	.word	0x000c8057
   b43c0:	000c6812 	.word	0x000c6812
   b43c4:	000c680e 	.word	0x000c680e
   b43c8:	000c682c 	.word	0x000c682c
   b43cc:	000c6805 	.word	0x000c6805

000b43d0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d0:	b40e      	push	{r1, r2, r3}
   b43d2:	b503      	push	{r0, r1, lr}
   b43d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43de:	f00d f910 	bl	c1602 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43e2:	b002      	add	sp, #8
   b43e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e8:	b003      	add	sp, #12
   b43ea:	4770      	bx	lr

000b43ec <_Z13motionHandlerv>:
void motionHandler(){
   b43ec:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b43ee:	4d2b      	ldr	r5, [pc, #172]	; (b449c <_Z13motionHandlerv+0xb0>)
   b43f0:	782b      	ldrb	r3, [r5, #0]
   b43f2:	bb3b      	cbnz	r3, b4444 <_Z13motionHandlerv+0x58>
   b43f4:	4e2a      	ldr	r6, [pc, #168]	; (b44a0 <_Z13motionHandlerv+0xb4>)
   b43f6:	7833      	ldrb	r3, [r6, #0]
   b43f8:	2b5a      	cmp	r3, #90	; 0x5a
   b43fa:	d023      	beq.n	b4444 <_Z13motionHandlerv+0x58>
   b43fc:	4c29      	ldr	r4, [pc, #164]	; (b44a4 <_Z13motionHandlerv+0xb8>)
   b43fe:	7823      	ldrb	r3, [r4, #0]
   b4400:	2b5a      	cmp	r3, #90	; 0x5a
   b4402:	d01f      	beq.n	b4444 <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4404:	f009 fcde 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b4408:	4b27      	ldr	r3, [pc, #156]	; (b44a8 <_Z13motionHandlerv+0xbc>)
   b440a:	681b      	ldr	r3, [r3, #0]
   b440c:	1ac0      	subs	r0, r0, r3
   b440e:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b4412:	d917      	bls.n	b4444 <_Z13motionHandlerv+0x58>
        leftMotorSpeed = 90;
   b4414:	4b25      	ldr	r3, [pc, #148]	; (b44ac <_Z13motionHandlerv+0xc0>)
        ESCL.write(setLSpeed);
   b4416:	4826      	ldr	r0, [pc, #152]	; (b44b0 <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b4418:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b441a:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b441c:	4b25      	ldr	r3, [pc, #148]	; (b44b4 <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b441e:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b4420:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4422:	4b25      	ldr	r3, [pc, #148]	; (b44b8 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4424:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4426:	2201      	movs	r2, #1
   b4428:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b442a:	f00d f932 	bl	c1692 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b442e:	7821      	ldrb	r1, [r4, #0]
   b4430:	4822      	ldr	r0, [pc, #136]	; (b44bc <_Z13motionHandlerv+0xd0>)
   b4432:	f00d f92e 	bl	c1692 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b4436:	f00d fd31 	bl	c1e9c <_Z16_fetch_usbserialv>
   b443a:	4921      	ldr	r1, [pc, #132]	; (b44c0 <_Z13motionHandlerv+0xd4>)
   b443c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4440:	f7ff ffc6 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b4444:	4e1f      	ldr	r6, [pc, #124]	; (b44c4 <_Z13motionHandlerv+0xd8>)
   b4446:	7834      	ldrb	r4, [r6, #0]
   b4448:	bb3c      	cbnz	r4, b449a <_Z13motionHandlerv+0xae>
   b444a:	782b      	ldrb	r3, [r5, #0]
   b444c:	b32b      	cbz	r3, b449a <_Z13motionHandlerv+0xae>
   b444e:	f009 fcb9 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b4452:	4b1d      	ldr	r3, [pc, #116]	; (b44c8 <_Z13motionHandlerv+0xdc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	1ac0      	subs	r0, r0, r3
   b4458:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b445c:	d91d      	bls.n	b449a <_Z13motionHandlerv+0xae>
        pointArrived = false;
   b445e:	4b1b      	ldr	r3, [pc, #108]	; (b44cc <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b4460:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b4462:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b4464:	4b0e      	ldr	r3, [pc, #56]	; (b44a0 <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b4466:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b4468:	215a      	movs	r1, #90	; 0x5a
   b446a:	7019      	strb	r1, [r3, #0]
        leftMotorSpeed = 90;
   b446c:	4b0f      	ldr	r3, [pc, #60]	; (b44ac <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b446e:	4c0d      	ldr	r4, [pc, #52]	; (b44a4 <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b4470:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b4472:	4b10      	ldr	r3, [pc, #64]	; (b44b4 <_Z13motionHandlerv+0xc8>)
        ESCL.write(setLSpeed);
   b4474:	480e      	ldr	r0, [pc, #56]	; (b44b0 <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b4476:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4478:	4b0f      	ldr	r3, [pc, #60]	; (b44b8 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b447a:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b447c:	2201      	movs	r2, #1
   b447e:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4480:	f00d f907 	bl	c1692 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4484:	7821      	ldrb	r1, [r4, #0]
   b4486:	480d      	ldr	r0, [pc, #52]	; (b44bc <_Z13motionHandlerv+0xd0>)
   b4488:	f00d f903 	bl	c1692 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b448c:	f00d fd06 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4490:	490f      	ldr	r1, [pc, #60]	; (b44d0 <_Z13motionHandlerv+0xe4>)
   b4492:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4496:	f7ff ff9b 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
}
   b449a:	bd70      	pop	{r4, r5, r6, pc}
   b449c:	2003dda9 	.word	0x2003dda9
   b44a0:	2003e55c 	.word	0x2003e55c
   b44a4:	2003e55d 	.word	0x2003e55d
   b44a8:	2003ddec 	.word	0x2003ddec
   b44ac:	2003de18 	.word	0x2003de18
   b44b0:	2003dd40 	.word	0x2003dd40
   b44b4:	2003e0b5 	.word	0x2003e0b5
   b44b8:	2003e5ec 	.word	0x2003e5ec
   b44bc:	2003dd50 	.word	0x2003dd50
   b44c0:	000c6849 	.word	0x000c6849
   b44c4:	2003e5d8 	.word	0x2003e5d8
   b44c8:	2003ddf4 	.word	0x2003ddf4
   b44cc:	2003e0ad 	.word	0x2003e0ad
   b44d0:	000c6893 	.word	0x000c6893

000b44d4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b44d4:	b510      	push	{r4, lr}
      if (_M_manager)
   b44d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b44d8:	4604      	mov	r4, r0
      if (_M_manager)
   b44da:	b113      	cbz	r3, b44e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b44dc:	2203      	movs	r2, #3
   b44de:	4601      	mov	r1, r0
   b44e0:	4798      	blx	r3
    }
   b44e2:	4620      	mov	r0, r4
   b44e4:	bd10      	pop	{r4, pc}
	...

000b44e8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b44e8:	b538      	push	{r3, r4, r5, lr}
   b44ea:	4b10      	ldr	r3, [pc, #64]	; (b452c <_ZN5TimerD1Ev+0x44>)
   b44ec:	6003      	str	r3, [r0, #0]
        if (handle) {
   b44ee:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b44f0:	4604      	mov	r4, r0
        if (handle) {
   b44f2:	b1a3      	cbz	r3, b451e <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b44f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b44f8:	2200      	movs	r2, #0
   b44fa:	f7ff fea4 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
            os_timer_set_id(handle, nullptr);
   b44fe:	68a0      	ldr	r0, [r4, #8]
   b4500:	2100      	movs	r1, #0
   b4502:	f009 fc3f 	bl	bdd84 <os_timer_set_id>
            while (running) {
   b4506:	7923      	ldrb	r3, [r4, #4]
   b4508:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b450c:	b113      	cbz	r3, b4514 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   b450e:	f009 fbe9 	bl	bdce4 <os_thread_yield>
            while (running) {
   b4512:	e7f8      	b.n	b4506 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   b4514:	68a0      	ldr	r0, [r4, #8]
   b4516:	4629      	mov	r1, r5
   b4518:	f009 fbfc 	bl	bdd14 <os_timer_destroy>
            handle = nullptr;
   b451c:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b451e:	f104 000c 	add.w	r0, r4, #12
   b4522:	f7ff ffd7 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    }
   b4526:	4620      	mov	r0, r4
   b4528:	bd38      	pop	{r3, r4, r5, pc}
   b452a:	bf00      	nop
   b452c:	000c6e7c 	.word	0x000c6e7c

000b4530 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4530:	b510      	push	{r4, lr}
   b4532:	4604      	mov	r4, r0
    }
   b4534:	f7ff ffd8 	bl	b44e8 <_ZN5TimerD1Ev>
   b4538:	4620      	mov	r0, r4
   b453a:	211c      	movs	r1, #28
   b453c:	f7ff fdb1 	bl	b40a2 <_ZdlPvj>
   b4540:	4620      	mov	r0, r4
   b4542:	bd10      	pop	{r4, pc}

000b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4544:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4546:	468c      	mov	ip, r1
   b4548:	2500      	movs	r5, #0
   b454a:	4914      	ldr	r1, [pc, #80]	; (b459c <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b454c:	7105      	strb	r5, [r0, #4]
   b454e:	4604      	mov	r4, r0
   b4550:	6085      	str	r5, [r0, #8]
   b4552:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4554:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4558:	b085      	sub	sp, #20
   b455a:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b455c:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4560:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4564:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4568:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b456c:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4570:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4574:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4576:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4578:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b457a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b457c:	6095      	str	r5, [r2, #8]
   b457e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4580:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4582:	e9cd 3500 	strd	r3, r5, [sp]
   b4586:	4a06      	ldr	r2, [pc, #24]	; (b45a0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4588:	4623      	mov	r3, r4
   b458a:	4661      	mov	r1, ip
   b458c:	f104 0008 	add.w	r0, r4, #8
   b4590:	f009 fbb8 	bl	bdd04 <os_timer_create>
    }
   b4594:	4620      	mov	r0, r4
   b4596:	b005      	add	sp, #20
   b4598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b459a:	bf00      	nop
   b459c:	000c6e7c 	.word	0x000c6e7c
   b45a0:	000b41ab 	.word	0x000b41ab

000b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b45a4:	b510      	push	{r4, lr}
   b45a6:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b45a8:	2200      	movs	r2, #0
   b45aa:	7c40      	ldrb	r0, [r0, #17]
   b45ac:	f009 fe3c 	bl	be228 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b45b0:	7c63      	ldrb	r3, [r4, #17]
   b45b2:	2b0f      	cmp	r3, #15
        d_.period = period;
   b45b4:	bf18      	it	ne
   b45b6:	8320      	strhne	r0, [r4, #24]
}
   b45b8:	bd10      	pop	{r4, pc}
	...

000b45bc <_Z10LEDHandlerv>:

//ISR timer to update the color and pattern of the LED based on the status of the system
void LEDHandler(){
   b45bc:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    //Special LED Modes
    if(shutdownActive){     //The user is holding down the power off button
   b45be:	4b2e      	ldr	r3, [pc, #184]	; (b4678 <_Z10LEDHandlerv+0xbc>)
   b45c0:	781a      	ldrb	r2, [r3, #0]
   b45c2:	4b2e      	ldr	r3, [pc, #184]	; (b467c <_Z10LEDHandlerv+0xc0>)
   b45c4:	b162      	cbz	r2, b45e0 <_Z10LEDHandlerv+0x24>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45c6:	7c5a      	ldrb	r2, [r3, #17]
   b45c8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45ca:	bf1c      	itt	ne
   b45cc:	2202      	movne	r2, #2
   b45ce:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45d0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b45d4:	615a      	str	r2, [r3, #20]
        return;                
    }
    if(signalLED){          //The user has enabled the "Signal" menu item
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b45d6:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b45d8:	4828      	ldr	r0, [pc, #160]	; (b467c <_Z10LEDHandlerv+0xc0>)
   b45da:	f7ff ffe3 	bl	b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b45de:	bd10      	pop	{r4, pc}
    if(stopActive){         //The user has pressed the stop button on the CChub
   b45e0:	4a27      	ldr	r2, [pc, #156]	; (b4680 <_Z10LEDHandlerv+0xc4>)
   b45e2:	7812      	ldrb	r2, [r2, #0]
   b45e4:	b132      	cbz	r2, b45f4 <_Z10LEDHandlerv+0x38>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45e6:	7c5a      	ldrb	r2, [r3, #17]
   b45e8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45ea:	bf1c      	itt	ne
   b45ec:	2202      	movne	r2, #2
   b45ee:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45f0:	4a24      	ldr	r2, [pc, #144]	; (b4684 <_Z10LEDHandlerv+0xc8>)
   b45f2:	e7ef      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(offloadMode){        //The CChub is offloading data over BLE
   b45f4:	4a24      	ldr	r2, [pc, #144]	; (b4688 <_Z10LEDHandlerv+0xcc>)
   b45f6:	7812      	ldrb	r2, [r2, #0]
   b45f8:	b132      	cbz	r2, b4608 <_Z10LEDHandlerv+0x4c>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45fa:	7c5a      	ldrb	r2, [r3, #17]
   b45fc:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45fe:	bf1c      	itt	ne
   b4600:	2202      	movne	r2, #2
   b4602:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4604:	22ff      	movs	r2, #255	; 0xff
   b4606:	e7e5      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(signalLED){          //The user has enabled the "Signal" menu item
   b4608:	4a20      	ldr	r2, [pc, #128]	; (b468c <_Z10LEDHandlerv+0xd0>)
   b460a:	7812      	ldrb	r2, [r2, #0]
   b460c:	b132      	cbz	r2, b461c <_Z10LEDHandlerv+0x60>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b460e:	7c5a      	ldrb	r2, [r3, #17]
   b4610:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4612:	bf1c      	itt	ne
   b4614:	2202      	movne	r2, #2
   b4616:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4618:	4a1d      	ldr	r2, [pc, #116]	; (b4690 <_Z10LEDHandlerv+0xd4>)
   b461a:	e7db      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(lowBattery){     //Flash the status color quickly if the battery is low
   b461c:	4a1d      	ldr	r2, [pc, #116]	; (b4694 <_Z10LEDHandlerv+0xd8>)
   b461e:	7812      	ldrb	r2, [r2, #0]
   b4620:	bb1a      	cbnz	r2, b466a <_Z10LEDHandlerv+0xae>
    else if(driveMode == 2){    //If we're in autonomous mode, do a fade pattern
   b4622:	4a1d      	ldr	r2, [pc, #116]	; (b4698 <_Z10LEDHandlerv+0xdc>)
   b4624:	7812      	ldrb	r2, [r2, #0]
   b4626:	2a02      	cmp	r2, #2
   b4628:	d022      	beq.n	b4670 <_Z10LEDHandlerv+0xb4>
        SetSpeed = LED_SPEED_NORMAL;
   b462a:	2a01      	cmp	r2, #1
   b462c:	bf0b      	itete	eq
   b462e:	210a      	moveq	r1, #10
   b4630:	2114      	movne	r1, #20
   b4632:	2002      	moveq	r0, #2
   b4634:	2001      	movne	r0, #1
    statusMode |= XBeeAvail << 1;
   b4636:	4a19      	ldr	r2, [pc, #100]	; (b469c <_Z10LEDHandlerv+0xe0>)
   b4638:	7814      	ldrb	r4, [r2, #0]
    statusMode |= BLEAvail << 2;
   b463a:	4a19      	ldr	r2, [pc, #100]	; (b46a0 <_Z10LEDHandlerv+0xe4>)
   b463c:	7812      	ldrb	r2, [r2, #0]
   b463e:	0092      	lsls	r2, r2, #2
   b4640:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    statusMode = LTEAvail;          //Create bit mask with each of the available mode shifted into different bits
   b4644:	4c17      	ldr	r4, [pc, #92]	; (b46a4 <_Z10LEDHandlerv+0xe8>)
    statusMode |= BLEAvail << 2;
   b4646:	7824      	ldrb	r4, [r4, #0]
   b4648:	4322      	orrs	r2, r4
   b464a:	3a01      	subs	r2, #1
   b464c:	b2d2      	uxtb	r2, r2
   b464e:	2a06      	cmp	r2, #6
   b4650:	bf9c      	itt	ls
   b4652:	4c15      	ldrls	r4, [pc, #84]	; (b46a8 <_Z10LEDHandlerv+0xec>)
   b4654:	f854 2022 	ldrls.w	r2, [r4, r2, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4658:	7c5c      	ldrb	r4, [r3, #17]
    switch (statusMode){
   b465a:	bf88      	it	hi
   b465c:	f44f 027f 	movhi.w	r2, #16711680	; 0xff0000
   b4660:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b4662:	bf18      	it	ne
   b4664:	7458      	strbne	r0, [r3, #17]
    d_.color = color;
   b4666:	615a      	str	r2, [r3, #20]
   b4668:	e7b6      	b.n	b45d8 <_Z10LEDHandlerv+0x1c>
        SetSpeed = LED_SPEED_NORMAL;
   b466a:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b466c:	2002      	movs	r0, #2
   b466e:	e7e2      	b.n	b4636 <_Z10LEDHandlerv+0x7a>
        SetSpeed = LED_SPEED_NORMAL;
   b4670:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_FADE;
   b4672:	2003      	movs	r0, #3
   b4674:	e7df      	b.n	b4636 <_Z10LEDHandlerv+0x7a>
   b4676:	bf00      	nop
   b4678:	2003e55e 	.word	0x2003e55e
   b467c:	2003e584 	.word	0x2003e584
   b4680:	2003e5c5 	.word	0x2003e5c5
   b4684:	00ffff00 	.word	0x00ffff00
   b4688:	2003e0ac 	.word	0x2003e0ac
   b468c:	2003e57c 	.word	0x2003e57c
   b4690:	00ff6000 	.word	0x00ff6000
   b4694:	2003ded8 	.word	0x2003ded8
   b4698:	2003dda9 	.word	0x2003dda9
   b469c:	2003dd74 	.word	0x2003dd74
   b46a0:	2003dd2c 	.word	0x2003dd2c
   b46a4:	2003dd61 	.word	0x2003dd61
   b46a8:	000c6fb0 	.word	0x000c6fb0

000b46ac <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b46ac:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b46ae:	460a      	mov	r2, r1
   b46b0:	4901      	ldr	r1, [pc, #4]	; (b46b8 <_ZN7FatFile4openEPKci+0xc>)
   b46b2:	6809      	ldr	r1, [r1, #0]
   b46b4:	f002 bd1d 	b.w	b70f2 <_ZN7FatFile4openEPS_PKci>
   b46b8:	2003e610 	.word	0x2003e610

000b46bc <_Z11wdogHandlerv>:
void wdogHandler(){
   b46bc:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46be:	f009 fde7 	bl	be290 <spark_cloud_flag_connected>
   b46c2:	4c33      	ldr	r4, [pc, #204]	; (b4790 <_Z11wdogHandlerv+0xd4>)
    if(Particle.connected()) LTEAvail = true;   //If particle cloud is connected, assume that LTE is available
   b46c4:	b358      	cbz	r0, b471e <_Z11wdogHandlerv+0x62>
   b46c6:	2301      	movs	r3, #1
        LTEAvail = false;
   b46c8:	7023      	strb	r3, [r4, #0]
   b46ca:	f009 fb7b 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){   //If the time since the last XBee message is too long, print warning and set status flag to false
   b46ce:	4b31      	ldr	r3, [pc, #196]	; (b4794 <_Z11wdogHandlerv+0xd8>)
   b46d0:	4c31      	ldr	r4, [pc, #196]	; (b4798 <_Z11wdogHandlerv+0xdc>)
   b46d2:	681b      	ldr	r3, [r3, #0]
   b46d4:	f241 3288 	movw	r2, #5000	; 0x1388
   b46d8:	1ac0      	subs	r0, r0, r3
   b46da:	4290      	cmp	r0, r2
   b46dc:	d832      	bhi.n	b4744 <_Z11wdogHandlerv+0x88>
   b46de:	2b00      	cmp	r3, #0
   b46e0:	d030      	beq.n	b4744 <_Z11wdogHandlerv+0x88>
    else XBeeAvail = true;
   b46e2:	2301      	movs	r3, #1
        XBeeAvail = false;
   b46e4:	7023      	strb	r3, [r4, #0]
   b46e6:	f009 fb6d 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){      //If the time since the last BLE message is too long, print warning and set status flag to false
   b46ea:	4b2c      	ldr	r3, [pc, #176]	; (b479c <_Z11wdogHandlerv+0xe0>)
   b46ec:	4c2c      	ldr	r4, [pc, #176]	; (b47a0 <_Z11wdogHandlerv+0xe4>)
   b46ee:	681b      	ldr	r3, [r3, #0]
   b46f0:	f241 3288 	movw	r2, #5000	; 0x1388
   b46f4:	1ac0      	subs	r0, r0, r3
   b46f6:	4290      	cmp	r0, r2
   b46f8:	d836      	bhi.n	b4768 <_Z11wdogHandlerv+0xac>
   b46fa:	2b00      	cmp	r3, #0
   b46fc:	d034      	beq.n	b4768 <_Z11wdogHandlerv+0xac>
    else BLEAvail = true;
   b46fe:	2301      	movs	r3, #1
        BLEAvail = false;
   b4700:	7023      	strb	r3, [r4, #0]
    if(stopActive && millis() - stopActive > STOP_RST_TIME) stopActive = false;                          //Set stop to false in case the CChub somehow crashed (though we have already entered a "float" mode where drivemode = 0)
   b4702:	4c28      	ldr	r4, [pc, #160]	; (b47a4 <_Z11wdogHandlerv+0xe8>)
   b4704:	7823      	ldrb	r3, [r4, #0]
   b4706:	b14b      	cbz	r3, b471c <_Z11wdogHandlerv+0x60>
   b4708:	f009 fb5c 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b470c:	7823      	ldrb	r3, [r4, #0]
   b470e:	1ac0      	subs	r0, r0, r3
   b4710:	f242 7310 	movw	r3, #10000	; 0x2710
   b4714:	4298      	cmp	r0, r3
   b4716:	bf84      	itt	hi
   b4718:	2300      	movhi	r3, #0
   b471a:	7023      	strbhi	r3, [r4, #0]
}
   b471c:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b471e:	7823      	ldrb	r3, [r4, #0]
   b4720:	2b00      	cmp	r3, #0
   b4722:	d0d2      	beq.n	b46ca <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4724:	4820      	ldr	r0, [pc, #128]	; (b47a8 <_Z11wdogHandlerv+0xec>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4726:	7c03      	ldrb	r3, [r0, #16]
   b4728:	b92b      	cbnz	r3, b4736 <_Z11wdogHandlerv+0x7a>
   b472a:	4920      	ldr	r1, [pc, #128]	; (b47ac <_Z11wdogHandlerv+0xf0>)
   b472c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4730:	3010      	adds	r0, #16
   b4732:	f7ff ffbb 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] LTE Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4736:	491e      	ldr	r1, [pc, #120]	; (b47b0 <_Z11wdogHandlerv+0xf4>)
   b4738:	481b      	ldr	r0, [pc, #108]	; (b47a8 <_Z11wdogHandlerv+0xec>)
   b473a:	2205      	movs	r2, #5
   b473c:	f7ff fe48 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4740:	2300      	movs	r3, #0
   b4742:	e7c1      	b.n	b46c8 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4744:	7823      	ldrb	r3, [r4, #0]
   b4746:	b16b      	cbz	r3, b4764 <_Z11wdogHandlerv+0xa8>
   b4748:	4817      	ldr	r0, [pc, #92]	; (b47a8 <_Z11wdogHandlerv+0xec>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b474a:	7c03      	ldrb	r3, [r0, #16]
   b474c:	b92b      	cbnz	r3, b475a <_Z11wdogHandlerv+0x9e>
   b474e:	4917      	ldr	r1, [pc, #92]	; (b47ac <_Z11wdogHandlerv+0xf0>)
   b4750:	f244 2202 	movw	r2, #16898	; 0x4202
   b4754:	3010      	adds	r0, #16
   b4756:	f7ff ffa9 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b475a:	4916      	ldr	r1, [pc, #88]	; (b47b4 <_Z11wdogHandlerv+0xf8>)
   b475c:	4812      	ldr	r0, [pc, #72]	; (b47a8 <_Z11wdogHandlerv+0xec>)
   b475e:	2205      	movs	r2, #5
   b4760:	f7ff fe36 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4764:	2300      	movs	r3, #0
   b4766:	e7bd      	b.n	b46e4 <_Z11wdogHandlerv+0x28>
        if(BLEAvail && BLERxTime){
   b4768:	7822      	ldrb	r2, [r4, #0]
   b476a:	b172      	cbz	r2, b478a <_Z11wdogHandlerv+0xce>
   b476c:	b16b      	cbz	r3, b478a <_Z11wdogHandlerv+0xce>
   b476e:	480e      	ldr	r0, [pc, #56]	; (b47a8 <_Z11wdogHandlerv+0xec>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4770:	7c03      	ldrb	r3, [r0, #16]
   b4772:	b92b      	cbnz	r3, b4780 <_Z11wdogHandlerv+0xc4>
   b4774:	490d      	ldr	r1, [pc, #52]	; (b47ac <_Z11wdogHandlerv+0xf0>)
   b4776:	f244 2202 	movw	r2, #16898	; 0x4202
   b477a:	3010      	adds	r0, #16
   b477c:	f7ff ff96 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b4780:	490d      	ldr	r1, [pc, #52]	; (b47b8 <_Z11wdogHandlerv+0xfc>)
   b4782:	4809      	ldr	r0, [pc, #36]	; (b47a8 <_Z11wdogHandlerv+0xec>)
   b4784:	2205      	movs	r2, #5
   b4786:	f7ff fe23 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b478a:	2300      	movs	r3, #0
   b478c:	e7b8      	b.n	b4700 <_Z11wdogHandlerv+0x44>
   b478e:	bf00      	nop
   b4790:	2003dd61 	.word	0x2003dd61
   b4794:	2003dd78 	.word	0x2003dd78
   b4798:	2003dd74 	.word	0x2003dd74
   b479c:	2003dd38 	.word	0x2003dd38
   b47a0:	2003dd2c 	.word	0x2003dd2c
   b47a4:	2003e5c5 	.word	0x2003e5c5
   b47a8:	2003de78 	.word	0x2003de78
   b47ac:	2003ddca 	.word	0x2003ddca
   b47b0:	000c68ed 	.word	0x000c68ed
   b47b4:	000c693d 	.word	0x000c693d
   b47b8:	000c698e 	.word	0x000c698e

000b47bc <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47bc:	b530      	push	{r4, r5, lr}
   b47be:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b47c0:	4b1b      	ldr	r3, [pc, #108]	; (b4830 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b47c2:	9300      	str	r3, [sp, #0]
   b47c4:	7913      	ldrb	r3, [r2, #4]
   b47c6:	f88d 3004 	strb.w	r3, [sp, #4]
   b47ca:	6893      	ldr	r3, [r2, #8]
   b47cc:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47ce:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47d2:	8993      	ldrh	r3, [r2, #12]
   b47d4:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47d8:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47da:	460a      	mov	r2, r1
   b47dc:	466b      	mov	r3, sp
   b47de:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b47e2:	4628      	mov	r0, r5
   b47e4:	f003 fbb6 	bl	b7f54 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b47e8:	b910      	cbnz	r0, b47f0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b47ea:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b47ec:	b005      	add	sp, #20
   b47ee:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b47f0:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b47f2:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b47f6:	4628      	mov	r0, r5
   b47f8:	f002 fc74 	bl	b70e4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b47fc:	2101      	movs	r1, #1
   b47fe:	4620      	mov	r0, r4
   b4800:	f003 fa53 	bl	b7caa <_ZN9FatVolume4initEh>
   b4804:	4601      	mov	r1, r0
   b4806:	b168      	cbz	r0, b4824 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4808:	4621      	mov	r1, r4
   b480a:	4628      	mov	r0, r5
   b480c:	f002 fa64 	bl	b6cd8 <_ZN7FatFile8openRootEP9FatVolume>
   b4810:	2800      	cmp	r0, #0
   b4812:	d0ea      	beq.n	b47ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4814:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4818:	f013 0f70 	tst.w	r3, #112	; 0x70
   b481c:	d0e5      	beq.n	b47ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b481e:	4b05      	ldr	r3, [pc, #20]	; (b4834 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4820:	601d      	str	r5, [r3, #0]
    return true;
   b4822:	e7e3      	b.n	b47ec <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4824:	4620      	mov	r0, r4
   b4826:	f003 fa40 	bl	b7caa <_ZN9FatVolume4initEh>
   b482a:	2800      	cmp	r0, #0
   b482c:	d1ec      	bne.n	b4808 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b482e:	e7dc      	b.n	b47ea <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4830:	000c6e68 	.word	0x000c6e68
   b4834:	2003e610 	.word	0x2003e610

000b4838 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b483c:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b483e:	7883      	ldrb	r3, [r0, #2]
   b4840:	2b42      	cmp	r3, #66	; 0x42
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4842:	af04      	add	r7, sp, #16
   b4844:	4604      	mov	r4, r0
   b4846:	468a      	mov	sl, r1
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b4848:	d14e      	bne.n	b48e8 <_Z14processCommandPKchb+0xb0>
   b484a:	78c3      	ldrb	r3, [r0, #3]
   b484c:	2b31      	cmp	r3, #49	; 0x31
   b484e:	f040 80ef 	bne.w	b4a30 <_Z14processCommandPKchb+0x1f8>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b4852:	4620      	mov	r0, r4
   b4854:	f00f ffa7 	bl	c47a6 <strlen>
   b4858:	3801      	subs	r0, #1
   b485a:	f020 0007 	bic.w	r0, r0, #7
        }
   b485e:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b4860:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b4864:	4620      	mov	r0, r4
   b4866:	f00f ff9e 	bl	c47a6 <strlen>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b486a:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b486c:	4428      	add	r0, r5
   b486e:	2600      	movs	r6, #0
   b4870:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4874:	4620      	mov	r0, r4
        cmdStr[3] = '\0';                   //Set null at end of command string
   b4876:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4878:	813e      	strh	r6, [r7, #8]
   b487a:	72be      	strb	r6, [r7, #10]
   b487c:	f00f ff93 	bl	c47a6 <strlen>
   b4880:	4420      	add	r0, r4
   b4882:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4886:	723b      	strb	r3, [r7, #8]
   b4888:	4620      	mov	r0, r4
   b488a:	f00f ff8c 	bl	c47a6 <strlen>
   b488e:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b4890:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4892:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4896:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b4898:	2210      	movs	r2, #16
   b489a:	f107 0008 	add.w	r0, r7, #8
   b489e:	f010 feab 	bl	c55f8 <strtol>
   b48a2:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b48a4:	fa5f f888 	uxtb.w	r8, r8
   b48a8:	f00d faf8 	bl	c1e9c <_Z16_fetch_usbserialv>
   b48ac:	49b0      	ldr	r1, [pc, #704]	; (b4b70 <_Z14processCommandPKchb+0x338>)
   b48ae:	4643      	mov	r3, r8
   b48b0:	4642      	mov	r2, r8
   b48b2:	f7ff fd8d 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48b6:	2604      	movs	r6, #4
   b48b8:	4620      	mov	r0, r4
   b48ba:	f00f ff74 	bl	c47a6 <strlen>
   b48be:	3802      	subs	r0, #2
   b48c0:	4286      	cmp	r6, r0
   b48c2:	d217      	bcs.n	b48f4 <_Z14processCommandPKchb+0xbc>
            if(i < 7) cmdStr[i-4] = command[i];
   b48c4:	2e06      	cmp	r6, #6
   b48c6:	bf9b      	ittet	ls
   b48c8:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b48cc:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b48ce:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b48d0:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b48d2:	bf8c      	ite	hi
   b48d4:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b48d6:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48da:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b48de:	bf88      	it	hi
   b48e0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48e4:	b2f6      	uxtb	r6, r6
   b48e6:	e7e7      	b.n	b48b8 <_Z14processCommandPKchb+0x80>
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b48e8:	2b41      	cmp	r3, #65	; 0x41
   b48ea:	f040 80a1 	bne.w	b4a30 <_Z14processCommandPKchb+0x1f8>
   b48ee:	78c3      	ldrb	r3, [r0, #3]
   b48f0:	2b42      	cmp	r3, #66	; 0x42
   b48f2:	e7ac      	b.n	b484e <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){      //Check if the received checksum matches the length of the string received
   b48f4:	4540      	cmp	r0, r8
   b48f6:	d02a      	beq.n	b494e <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum); //Print to console
   b48f8:	f00d fad0 	bl	c1e9c <_Z16_fetch_usbserialv>
   b48fc:	4605      	mov	r5, r0
   b48fe:	4620      	mov	r0, r4
   b4900:	f00f ff51 	bl	c47a6 <strlen>
   b4904:	4643      	mov	r3, r8
   b4906:	1e82      	subs	r2, r0, #2
   b4908:	499a      	ldr	r1, [pc, #616]	; (b4b74 <_Z14processCommandPKchb+0x33c>)
   b490a:	4628      	mov	r0, r5
    return m_attr;
   b490c:	4d9a      	ldr	r5, [pc, #616]	; (b4b78 <_Z14processCommandPKchb+0x340>)
   b490e:	f7ff fd5f 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
            Serial.println("Warning, checksum does not match");
   b4912:	f00d fac3 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4916:	4999      	ldr	r1, [pc, #612]	; (b4b7c <_Z14processCommandPKchb+0x344>)
   b4918:	f00c fe49 	bl	c15ae <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){  //Print to SD Card
   b491c:	7c2b      	ldrb	r3, [r5, #16]
   b491e:	b983      	cbnz	r3, b4942 <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4920:	4997      	ldr	r1, [pc, #604]	; (b4b80 <_Z14processCommandPKchb+0x348>)
   b4922:	f244 2202 	movw	r2, #16898	; 0x4202
   b4926:	f105 0010 	add.w	r0, r5, #16
   b492a:	f7ff febf 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b492e:	4995      	ldr	r1, [pc, #596]	; (b4b84 <_Z14processCommandPKchb+0x34c>)
   b4930:	4622      	mov	r2, r4
   b4932:	4628      	mov	r0, r5
   b4934:	f7ff fd4c 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4938:	f105 0010 	add.w	r0, r5, #16
                logFile.close();
   b493c:	f002 fbd2 	bl	b70e4 <_ZN7FatFile5closeEv>
   b4940:	e075      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4942:	4990      	ldr	r1, [pc, #576]	; (b4b84 <_Z14processCommandPKchb+0x34c>)
   b4944:	4622      	mov	r2, r4
   b4946:	4628      	mov	r0, r5
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4948:	f7ff fd42 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b494c:	e06f      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
        if(!strcmp(cmdStr,"ctl")){      //Control command from CC that contains data about the drive mode, target latitude and longitude, and offloading
   b494e:	498e      	ldr	r1, [pc, #568]	; (b4b88 <_Z14processCommandPKchb+0x350>)
   b4950:	f107 000c 	add.w	r0, r7, #12
   b4954:	f00f fef8 	bl	c4748 <strcmp>
   b4958:	2800      	cmp	r0, #0
   b495a:	d139      	bne.n	b49d0 <_Z14processCommandPKchb+0x198>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b495c:	4b8b      	ldr	r3, [pc, #556]	; (b4b8c <_Z14processCommandPKchb+0x354>)
   b495e:	9302      	str	r3, [sp, #8]
   b4960:	4b8b      	ldr	r3, [pc, #556]	; (b4b90 <_Z14processCommandPKchb+0x358>)
   b4962:	9301      	str	r3, [sp, #4]
   b4964:	4b8b      	ldr	r3, [pc, #556]	; (b4b94 <_Z14processCommandPKchb+0x35c>)
   b4966:	498c      	ldr	r1, [pc, #560]	; (b4b98 <_Z14processCommandPKchb+0x360>)
   b4968:	9300      	str	r3, [sp, #0]
   b496a:	f107 0210 	add.w	r2, r7, #16
   b496e:	f107 031c 	add.w	r3, r7, #28
   b4972:	4628      	mov	r0, r5
   b4974:	f009 fd34 	bl	be3e0 <sscanf>
            targetLat = atof(tLat);     //Convert latitude string to float
   b4978:	f107 0010 	add.w	r0, r7, #16
   b497c:	f00f fe40 	bl	c4600 <atof>
   b4980:	ec51 0b10 	vmov	r0, r1, d0
   b4984:	f00f fdc8 	bl	c4518 <__aeabi_d2f>
   b4988:	f8df 8288 	ldr.w	r8, [pc, #648]	; b4c14 <_Z14processCommandPKchb+0x3dc>
            targetLon = atof(tLon);     //Convert longitude string to float
   b498c:	4e83      	ldr	r6, [pc, #524]	; (b4b9c <_Z14processCommandPKchb+0x364>)
            targetLat = atof(tLat);     //Convert latitude string to float
   b498e:	f8c8 0000 	str.w	r0, [r8]
            targetLon = atof(tLon);     //Convert longitude string to float
   b4992:	f107 001c 	add.w	r0, r7, #28
   b4996:	f00f fe33 	bl	c4600 <atof>
   b499a:	ec51 0b10 	vmov	r0, r1, d0
   b499e:	f00f fdbb 	bl	c4518 <__aeabi_d2f>
   b49a2:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b49a4:	f00d fa7a 	bl	c1e9c <_Z16_fetch_usbserialv>
   b49a8:	4604      	mov	r4, r0
   b49aa:	f8d8 0000 	ldr.w	r0, [r8]
   b49ae:	f00f fa63 	bl	c3e78 <__aeabi_f2d>
   b49b2:	4602      	mov	r2, r0
   b49b4:	460b      	mov	r3, r1
   b49b6:	6830      	ldr	r0, [r6, #0]
   b49b8:	e9c7 2300 	strd	r2, r3, [r7]
   b49bc:	f00f fa5c 	bl	c3e78 <__aeabi_f2d>
   b49c0:	e9cd 0100 	strd	r0, r1, [sp]
   b49c4:	e9d7 2300 	ldrd	r2, r3, [r7]
   b49c8:	4975      	ldr	r1, [pc, #468]	; (b4ba0 <_Z14processCommandPKchb+0x368>)
   b49ca:	4620      	mov	r0, r4
   b49cc:	f7ff fd00 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b49d0:	4974      	ldr	r1, [pc, #464]	; (b4ba4 <_Z14processCommandPKchb+0x36c>)
   b49d2:	f107 000c 	add.w	r0, r7, #12
   b49d6:	f00f feb7 	bl	c4748 <strcmp>
   b49da:	4604      	mov	r4, r0
   b49dc:	bb60      	cbnz	r0, b4a38 <_Z14processCommandPKchb+0x200>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};  //Get the first three characters of the data for the left target speed
   b49de:	782b      	ldrb	r3, [r5, #0]
   b49e0:	743b      	strb	r3, [r7, #16]
   b49e2:	786b      	ldrb	r3, [r5, #1]
   b49e4:	747b      	strb	r3, [r7, #17]
   b49e6:	78ab      	ldrb	r3, [r5, #2]
   b49e8:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49ea:	78eb      	ldrb	r3, [r5, #3]
   b49ec:	773b      	strb	r3, [r7, #28]
   b49ee:	792b      	ldrb	r3, [r5, #4]
   b49f0:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49f2:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49f6:	796b      	ldrb	r3, [r5, #5]
   b49f8:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49fa:	f00f fe04 	bl	c4606 <atoi>
   b49fe:	4d6a      	ldr	r5, [pc, #424]	; (b4ba8 <_Z14processCommandPKchb+0x370>)
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b4a00:	4e6a      	ldr	r6, [pc, #424]	; (b4bac <_Z14processCommandPKchb+0x374>)
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b4a02:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b4a04:	f107 001c 	add.w	r0, r7, #28
   b4a08:	f00f fdfd 	bl	c4606 <atoi>
   b4a0c:	7030      	strb	r0, [r6, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4a0e:	f00d fa45 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4a12:	7833      	ldrb	r3, [r6, #0]
   b4a14:	782a      	ldrb	r2, [r5, #0]
   b4a16:	4966      	ldr	r1, [pc, #408]	; (b4bb0 <_Z14processCommandPKchb+0x378>)
   b4a18:	f7ff fcda 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
            updateMotorControl = true;      //Set flag to indicate to updateMotors that a new speed has been received
   b4a1c:	4b65      	ldr	r3, [pc, #404]	; (b4bb4 <_Z14processCommandPKchb+0x37c>)
   b4a1e:	2201      	movs	r2, #1
   b4a20:	701a      	strb	r2, [r3, #0]
   b4a22:	f009 f9cf 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();         //Update timer for the watchdog that a motor speed was received from CC hub
   b4a26:	4b64      	ldr	r3, [pc, #400]	; (b4bb8 <_Z14processCommandPKchb+0x380>)
   b4a28:	6018      	str	r0, [r3, #0]
            driveMode = 0;                  //In case we missed the switch from an autonomous to manual mode, switch to manual mode
   b4a2a:	4b5a      	ldr	r3, [pc, #360]	; (b4b94 <_Z14processCommandPKchb+0x35c>)
   b4a2c:	701c      	strb	r4, [r3, #0]
   b4a2e:	46cd      	mov	sp, r9
}
   b4a30:	3728      	adds	r7, #40	; 0x28
   b4a32:	46bd      	mov	sp, r7
   b4a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(!strcmp(cmdStr,"req")){     //Data Request from CChub to get the bundle of sensor data and transmit it out
   b4a38:	4960      	ldr	r1, [pc, #384]	; (b4bbc <_Z14processCommandPKchb+0x384>)
   b4a3a:	f107 000c 	add.w	r0, r7, #12
   b4a3e:	f00f fe83 	bl	c4748 <strcmp>
   b4a42:	b918      	cbnz	r0, b4a4c <_Z14processCommandPKchb+0x214>
            requestActive = mode;           //Set flag, as it's not possible to use 2/3 communication modes in an interrupt handler (which is where processCommand is called from)
   b4a44:	4b5e      	ldr	r3, [pc, #376]	; (b4bc0 <_Z14processCommandPKchb+0x388>)
   b4a46:	f883 a000 	strb.w	sl, [r3]
   b4a4a:	e7f0      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"pts")){     //Command used for debugging, which allows the CChub (or any bluetooth device) to print a string to the console and to the SD card
   b4a4c:	495d      	ldr	r1, [pc, #372]	; (b4bc4 <_Z14processCommandPKchb+0x38c>)
   b4a4e:	f107 000c 	add.w	r0, r7, #12
   b4a52:	f00f fe79 	bl	c4748 <strcmp>
   b4a56:	b9d0      	cbnz	r0, b4a8e <_Z14processCommandPKchb+0x256>
   b4a58:	4c47      	ldr	r4, [pc, #284]	; (b4b78 <_Z14processCommandPKchb+0x340>)
            Serial.println(dataStr);        //Print to console
   b4a5a:	f00d fa1f 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4a5e:	4629      	mov	r1, r5
   b4a60:	f00c fda5 	bl	c15ae <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){          //Print to SD card
   b4a64:	7c23      	ldrb	r3, [r4, #16]
   b4a66:	b973      	cbnz	r3, b4a86 <_Z14processCommandPKchb+0x24e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a68:	4945      	ldr	r1, [pc, #276]	; (b4b80 <_Z14processCommandPKchb+0x348>)
   b4a6a:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a6e:	f104 0010 	add.w	r0, r4, #16
   b4a72:	f7ff fe1b 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a76:	4954      	ldr	r1, [pc, #336]	; (b4bc8 <_Z14processCommandPKchb+0x390>)
   b4a78:	462a      	mov	r2, r5
   b4a7a:	4620      	mov	r0, r4
   b4a7c:	f7ff fca8 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a80:	f104 0010 	add.w	r0, r4, #16
   b4a84:	e75a      	b.n	b493c <_Z14processCommandPKchb+0x104>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a86:	4950      	ldr	r1, [pc, #320]	; (b4bc8 <_Z14processCommandPKchb+0x390>)
   b4a88:	462a      	mov	r2, r5
   b4a8a:	4620      	mov	r0, r4
   b4a8c:	e75c      	b.n	b4948 <_Z14processCommandPKchb+0x110>
        else if(!strcmp(cmdStr,"spc")){         //Incoming communication status from CChub, this data is used in addition to control strings to determine which communication methods are available between this bot and CChub
   b4a8e:	494f      	ldr	r1, [pc, #316]	; (b4bcc <_Z14processCommandPKchb+0x394>)
   b4a90:	f107 000c 	add.w	r0, r7, #12
   b4a94:	f00f fe58 	bl	c4748 <strcmp>
   b4a98:	b920      	cbnz	r0, b4aa4 <_Z14processCommandPKchb+0x26c>
   b4a9a:	f009 f993 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();          //Update timer with the current time, and the watchdog will automatically set the flags based on this timer and the current time
   b4a9e:	4b4c      	ldr	r3, [pc, #304]	; (b4bd0 <_Z14processCommandPKchb+0x398>)
   b4aa0:	6018      	str	r0, [r3, #0]
   b4aa2:	e7c4      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"hwa")){         //Hello-world acknowledge command from the CCHub, which will bring this bot out of pairing mode on startup
   b4aa4:	494b      	ldr	r1, [pc, #300]	; (b4bd4 <_Z14processCommandPKchb+0x39c>)
   b4aa6:	f107 000c 	add.w	r0, r7, #12
   b4aaa:	f00f fe4d 	bl	c4748 <strcmp>
   b4aae:	b910      	cbnz	r0, b4ab6 <_Z14processCommandPKchb+0x27e>
            waitForConnection = false;          //Setup loop waits for this to be set true before moving into main loop
   b4ab0:	4b49      	ldr	r3, [pc, #292]	; (b4bd8 <_Z14processCommandPKchb+0x3a0>)
   b4ab2:	7018      	strb	r0, [r3, #0]
   b4ab4:	e7bb      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"dmp")){         //Enter SD Card "Dump Mode" for Bluetooth offloading
   b4ab6:	4949      	ldr	r1, [pc, #292]	; (b4bdc <_Z14processCommandPKchb+0x3a4>)
   b4ab8:	f107 000c 	add.w	r0, r7, #12
   b4abc:	f00f fe44 	bl	c4748 <strcmp>
   b4ac0:	b978      	cbnz	r0, b4ae2 <_Z14processCommandPKchb+0x2aa>
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4ac2:	4b47      	ldr	r3, [pc, #284]	; (b4be0 <_Z14processCommandPKchb+0x3a8>)
            status.setSpeed(LED_SPEED_FAST);
   b4ac4:	4847      	ldr	r0, [pc, #284]	; (b4be4 <_Z14processCommandPKchb+0x3ac>)
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4ac6:	2201      	movs	r2, #1
   b4ac8:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4aca:	4b46      	ldr	r3, [pc, #280]	; (b4be4 <_Z14processCommandPKchb+0x3ac>)
   b4acc:	7c5a      	ldrb	r2, [r3, #17]
   b4ace:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4ad0:	bf1c      	itt	ne
   b4ad2:	2202      	movne	r2, #2
   b4ad4:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4ad6:	211e      	movs	r1, #30
    d_.color = color;
   b4ad8:	22ff      	movs	r2, #255	; 0xff
   b4ada:	615a      	str	r2, [r3, #20]
   b4adc:	f7ff fd62 	bl	b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4ae0:	e7a5      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"egp")){         //Emulated GPS point for testing purposes. Set the target latitude and longitude which allows testing of the distance and bearing functions for the GPS and compass
   b4ae2:	4941      	ldr	r1, [pc, #260]	; (b4be8 <_Z14processCommandPKchb+0x3b0>)
   b4ae4:	f107 000c 	add.w	r0, r7, #12
   b4ae8:	f00f fe2e 	bl	c4748 <strcmp>
   b4aec:	b9e0      	cbnz	r0, b4b28 <_Z14processCommandPKchb+0x2f0>
            sscanf(dataStr,"%s %s",tLat,tLon);      //Scan in the target latitude and longitude from the data string
   b4aee:	f107 0210 	add.w	r2, r7, #16
   b4af2:	f107 031c 	add.w	r3, r7, #28
   b4af6:	493d      	ldr	r1, [pc, #244]	; (b4bec <_Z14processCommandPKchb+0x3b4>)
   b4af8:	4628      	mov	r0, r5
   b4afa:	f009 fc71 	bl	be3e0 <sscanf>
            latitude = atof(tLat);              //Convert strings with latitude and longitude to a float variable
   b4afe:	f107 0010 	add.w	r0, r7, #16
   b4b02:	f00f fd7d 	bl	c4600 <atof>
   b4b06:	ec51 0b10 	vmov	r0, r1, d0
   b4b0a:	f00f fd05 	bl	c4518 <__aeabi_d2f>
   b4b0e:	4b38      	ldr	r3, [pc, #224]	; (b4bf0 <_Z14processCommandPKchb+0x3b8>)
   b4b10:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b4b12:	f107 001c 	add.w	r0, r7, #28
   b4b16:	f00f fd73 	bl	c4600 <atof>
   b4b1a:	ec51 0b10 	vmov	r0, r1, d0
   b4b1e:	f00f fcfb 	bl	c4518 <__aeabi_d2f>
   b4b22:	4b34      	ldr	r3, [pc, #208]	; (b4bf4 <_Z14processCommandPKchb+0x3bc>)
   b4b24:	6018      	str	r0, [r3, #0]
   b4b26:	e782      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"stp")){         //Stop Command (Emergency stop for motors)
   b4b28:	4933      	ldr	r1, [pc, #204]	; (b4bf8 <_Z14processCommandPKchb+0x3c0>)
   b4b2a:	f107 000c 	add.w	r0, r7, #12
   b4b2e:	f00f fe0b 	bl	c4748 <strcmp>
   b4b32:	2800      	cmp	r0, #0
   b4b34:	f47f af7b 	bne.w	b4a2e <_Z14processCommandPKchb+0x1f6>
            driveMode = 0;                      //Set drive mode back to manual mode
   b4b38:	4b16      	ldr	r3, [pc, #88]	; (b4b94 <_Z14processCommandPKchb+0x35c>)
   b4b3a:	7018      	strb	r0, [r3, #0]
            setLSpeed = 90;                     //Stop motors
   b4b3c:	4b1a      	ldr	r3, [pc, #104]	; (b4ba8 <_Z14processCommandPKchb+0x370>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b3e:	482f      	ldr	r0, [pc, #188]	; (b4bfc <_Z14processCommandPKchb+0x3c4>)
            setLSpeed = 90;                     //Stop motors
   b4b40:	245a      	movs	r4, #90	; 0x5a
   b4b42:	701c      	strb	r4, [r3, #0]
            setRSpeed = 90;                 
   b4b44:	4b19      	ldr	r3, [pc, #100]	; (b4bac <_Z14processCommandPKchb+0x374>)
   b4b46:	701c      	strb	r4, [r3, #0]
            leftMotorSpeed = 90;                //Immediately stop motors (no ramp)
   b4b48:	4b2d      	ldr	r3, [pc, #180]	; (b4c00 <_Z14processCommandPKchb+0x3c8>)
   b4b4a:	701c      	strb	r4, [r3, #0]
            rightMotorSpeed = 90;
   b4b4c:	4b2d      	ldr	r3, [pc, #180]	; (b4c04 <_Z14processCommandPKchb+0x3cc>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b4e:	4621      	mov	r1, r4
            rightMotorSpeed = 90;
   b4b50:	701c      	strb	r4, [r3, #0]
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b52:	f00c fd9e 	bl	c1692 <_ZN5Servo5writeEi>
            ESCR.write(90);
   b4b56:	482c      	ldr	r0, [pc, #176]	; (b4c08 <_Z14processCommandPKchb+0x3d0>)
   b4b58:	4621      	mov	r1, r4
   b4b5a:	f00c fd9a 	bl	c1692 <_ZN5Servo5writeEi>
   b4b5e:	f009 f931 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
            stopTime = millis();
   b4b62:	4b2a      	ldr	r3, [pc, #168]	; (b4c0c <_Z14processCommandPKchb+0x3d4>)
   b4b64:	6018      	str	r0, [r3, #0]
            stopActive = true;                  //Set flag to indicate that stop was hit
   b4b66:	4b2a      	ldr	r3, [pc, #168]	; (b4c10 <_Z14processCommandPKchb+0x3d8>)
   b4b68:	2201      	movs	r2, #1
   b4b6a:	701a      	strb	r2, [r3, #0]
   b4b6c:	e75f      	b.n	b4a2e <_Z14processCommandPKchb+0x1f6>
   b4b6e:	bf00      	nop
   b4b70:	000c69dd 	.word	0x000c69dd
   b4b74:	000c69f2 	.word	0x000c69f2
   b4b78:	2003de78 	.word	0x2003de78
   b4b7c:	000c6a0f 	.word	0x000c6a0f
   b4b80:	2003ddca 	.word	0x2003ddca
   b4b84:	000c6a30 	.word	0x000c6a30
   b4b88:	000c6a5c 	.word	0x000c6a5c
   b4b8c:	2003e57c 	.word	0x2003e57c
   b4b90:	2003ded1 	.word	0x2003ded1
   b4b94:	2003dda9 	.word	0x2003dda9
   b4b98:	000c6a60 	.word	0x000c6a60
   b4b9c:	2003e5d4 	.word	0x2003e5d4
   b4ba0:	000c6a6f 	.word	0x000c6a6f
   b4ba4:	000c6a8f 	.word	0x000c6a8f
   b4ba8:	2003e55c 	.word	0x2003e55c
   b4bac:	2003e55d 	.word	0x2003e55d
   b4bb0:	000c6a93 	.word	0x000c6a93
   b4bb4:	2003e5ec 	.word	0x2003e5ec
   b4bb8:	2003ddec 	.word	0x2003ddec
   b4bbc:	000c6abf 	.word	0x000c6abf
   b4bc0:	2003e0b4 	.word	0x2003e0b4
   b4bc4:	000c6ac3 	.word	0x000c6ac3
   b4bc8:	000c6ac7 	.word	0x000c6ac7
   b4bcc:	000c6aea 	.word	0x000c6aea
   b4bd0:	2003ddf0 	.word	0x2003ddf0
   b4bd4:	000c6aee 	.word	0x000c6aee
   b4bd8:	2003e5ed 	.word	0x2003e5ed
   b4bdc:	000c6af2 	.word	0x000c6af2
   b4be0:	2003e0ac 	.word	0x2003e0ac
   b4be4:	2003e584 	.word	0x2003e584
   b4be8:	000c6af6 	.word	0x000c6af6
   b4bec:	000c6afa 	.word	0x000c6afa
   b4bf0:	2003ddf8 	.word	0x2003ddf8
   b4bf4:	2003ded4 	.word	0x2003ded4
   b4bf8:	000c6b00 	.word	0x000c6b00
   b4bfc:	2003dd40 	.word	0x2003dd40
   b4c00:	2003de18 	.word	0x2003de18
   b4c04:	2003e0b5 	.word	0x2003e0b5
   b4c08:	2003dd50 	.word	0x2003dd50
   b4c0c:	2003e5c8 	.word	0x2003e5c8
   b4c10:	2003e5c5 	.word	0x2003e5c5
   b4c14:	2003e5d0 	.word	0x2003e5d0

000b4c18 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4c18:	b510      	push	{r4, lr}
   b4c1a:	460c      	mov	r4, r1
    processCommand(data, 4,false);      //Pass received string directly to the processCommand directory
   b4c1c:	2200      	movs	r2, #0
   b4c1e:	2104      	movs	r1, #4
   b4c20:	4620      	mov	r0, r4
   b4c22:	f7ff fe09 	bl	b4838 <_Z14processCommandPKchb>
    if(logMessages){                    //Log message to the SD card for later debugging
   b4c26:	4b0b      	ldr	r3, [pc, #44]	; (b4c54 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4c28:	781b      	ldrb	r3, [r3, #0]
   b4c2a:	b193      	cbz	r3, b4c52 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4c2c:	480a      	ldr	r0, [pc, #40]	; (b4c58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c2e:	7c03      	ldrb	r3, [r0, #16]
   b4c30:	b92b      	cbnz	r3, b4c3e <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4c32:	490a      	ldr	r1, [pc, #40]	; (b4c5c <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4c34:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c38:	3010      	adds	r0, #16
   b4c3a:	f7ff fd37 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4c3e:	4622      	mov	r2, r4
   b4c40:	4907      	ldr	r1, [pc, #28]	; (b4c60 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4c42:	4805      	ldr	r0, [pc, #20]	; (b4c58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4c44:	f7ff fbc4 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
}
   b4c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4c4c:	4805      	ldr	r0, [pc, #20]	; (b4c64 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4c4e:	f002 ba49 	b.w	b70e4 <_ZN7FatFile5closeEv>
}
   b4c52:	bd10      	pop	{r4, pc}
   b4c54:	2003ded0 	.word	0x2003ded0
   b4c58:	2003de78 	.word	0x2003de78
   b4c5c:	2003ddca 	.word	0x2003ddca
   b4c60:	000c6b04 	.word	0x000c6b04
   b4c64:	2003de88 	.word	0x2003de88

000b4c68 <_Z15LTEInputCommand6String>:
    }
    else logFile.println(message);
}

//Particle function for processing a debug string, for testing things like an emulated GPS point
int LTEInputCommand(String cmd){
   b4c68:	b500      	push	{lr}
   b4c6a:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4c6c:	2300      	movs	r3, #0
   b4c6e:	2264      	movs	r2, #100	; 0x64
   b4c70:	a901      	add	r1, sp, #4
   b4c72:	f00c ff61 	bl	c1b38 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b4c76:	2104      	movs	r1, #4
   b4c78:	2200      	movs	r2, #0
   b4c7a:	eb0d 0001 	add.w	r0, sp, r1
   b4c7e:	f7ff fddb 	bl	b4838 <_Z14processCommandPKchb>
    if(logMessages){
   b4c82:	4b0c      	ldr	r3, [pc, #48]	; (b4cb4 <_Z15LTEInputCommand6String+0x4c>)
   b4c84:	781b      	ldrb	r3, [r3, #0]
   b4c86:	b183      	cbz	r3, b4caa <_Z15LTEInputCommand6String+0x42>
   b4c88:	480b      	ldr	r0, [pc, #44]	; (b4cb8 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c8a:	7c03      	ldrb	r3, [r0, #16]
   b4c8c:	b92b      	cbnz	r3, b4c9a <_Z15LTEInputCommand6String+0x32>
   b4c8e:	490b      	ldr	r1, [pc, #44]	; (b4cbc <_Z15LTEInputCommand6String+0x54>)
   b4c90:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c94:	3010      	adds	r0, #16
   b4c96:	f7ff fd09 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b4c9a:	4909      	ldr	r1, [pc, #36]	; (b4cc0 <_Z15LTEInputCommand6String+0x58>)
   b4c9c:	4806      	ldr	r0, [pc, #24]	; (b4cb8 <_Z15LTEInputCommand6String+0x50>)
   b4c9e:	aa01      	add	r2, sp, #4
   b4ca0:	f7ff fb96 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4ca4:	4807      	ldr	r0, [pc, #28]	; (b4cc4 <_Z15LTEInputCommand6String+0x5c>)
   b4ca6:	f002 fa1d 	bl	b70e4 <_ZN7FatFile5closeEv>
    }
    return 1;
   b4caa:	2001      	movs	r0, #1
   b4cac:	b01b      	add	sp, #108	; 0x6c
   b4cae:	f85d fb04 	ldr.w	pc, [sp], #4
   b4cb2:	bf00      	nop
   b4cb4:	2003ded0 	.word	0x2003ded0
   b4cb8:	2003de78 	.word	0x2003de78
   b4cbc:	2003ddca 	.word	0x2003ddca
   b4cc0:	000c6b04 	.word	0x000c6b04
   b4cc4:	2003de88 	.word	0x2003de88

000b4cc8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4cc8:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];                                              //Create character array for the received command
   b4cca:	f101 0308 	add.w	r3, r1, #8
   b4cce:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4cd2:	af00      	add	r7, sp, #0
    char btBuf[len+1];                                              //Create character array for the received command
   b4cd4:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4cd8:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];       //Convert byte array into character array
   b4cda:	460a      	mov	r2, r1
   b4cdc:	4601      	mov	r1, r0
   b4cde:	4668      	mov	r0, sp
   b4ce0:	f00f fcae 	bl	c4640 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4ce4:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];                                              //Create character array for the received command
   b4ce8:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4cea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4cee:	b113      	cbz	r3, b4cf6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4cf0:	2300      	movs	r3, #0
   b4cf2:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4cf6:	f00d f8d1 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4cfa:	4916      	ldr	r1, [pc, #88]	; (b4d54 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4cfc:	f00c fc57 	bl	c15ae <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);                                          //Print out command for debugging purposes
   b4d00:	f00d f8cc 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4d04:	4629      	mov	r1, r5
   b4d06:	f00c fc52 	bl	c15ae <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);                                   //Process the command received over BLE using the dictionary
   b4d0a:	2201      	movs	r2, #1
   b4d0c:	4611      	mov	r1, r2
   b4d0e:	4628      	mov	r0, r5
   b4d10:	f7ff fd92 	bl	b4838 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();    //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b4d14:	782b      	ldrb	r3, [r5, #0]
   b4d16:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4d1a:	2b41      	cmp	r3, #65	; 0x41
   b4d1c:	d103      	bne.n	b4d26 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4d1e:	f009 f851 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b4d22:	4b0d      	ldr	r3, [pc, #52]	; (b4d58 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4d24:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4d26:	4b0d      	ldr	r3, [pc, #52]	; (b4d5c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4d28:	781b      	ldrb	r3, [r3, #0]
   b4d2a:	b183      	cbz	r3, b4d4e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4d2c:	480c      	ldr	r0, [pc, #48]	; (b4d60 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4d2e:	7c03      	ldrb	r3, [r0, #16]
   b4d30:	b92b      	cbnz	r3, b4d3e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4d32:	490c      	ldr	r1, [pc, #48]	; (b4d64 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4d34:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d38:	3010      	adds	r0, #16
   b4d3a:	f7ff fcb7 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4d3e:	490a      	ldr	r1, [pc, #40]	; (b4d68 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4d40:	4807      	ldr	r0, [pc, #28]	; (b4d60 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4d42:	462a      	mov	r2, r5
   b4d44:	f7ff fb44 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4d48:	4808      	ldr	r0, [pc, #32]	; (b4d6c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4d4a:	f002 f9cb 	bl	b70e4 <_ZN7FatFile5closeEv>
}
   b4d4e:	46bd      	mov	sp, r7
   b4d50:	bdb0      	pop	{r4, r5, r7, pc}
   b4d52:	bf00      	nop
   b4d54:	000c6b24 	.word	0x000c6b24
   b4d58:	2003dd38 	.word	0x2003dd38
   b4d5c:	2003ded0 	.word	0x2003ded0
   b4d60:	2003de78 	.word	0x2003de78
   b4d64:	2003ddca 	.word	0x2003ddca
   b4d68:	000c6b34 	.word	0x000c6b34
   b4d6c:	2003de88 	.word	0x2003de88

000b4d70 <_Z9setupXBeev>:
void setupXBee(){
   b4d70:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4d72:	f00d fa3f 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   b4d76:	4908      	ldr	r1, [pc, #32]	; (b4d98 <_Z9setupXBeev+0x28>)
   b4d78:	f7ff faf2 	bl	b4360 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4d7c:	2014      	movs	r0, #20
   b4d7e:	f009 fb83 	bl	be488 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4d82:	f00d fa37 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   b4d86:	4905      	ldr	r1, [pc, #20]	; (b4d9c <_Z9setupXBeev+0x2c>)
   b4d88:	f7ff faea 	bl	b4360 <_ZN5Print6printfEPKcz>
}
   b4d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4d90:	2014      	movs	r0, #20
   b4d92:	f009 bb79 	b.w	be488 <delay>
   b4d96:	bf00      	nop
   b4d98:	000c8056 	.word	0x000c8056
   b4d9c:	000c6814 	.word	0x000c6814

000b4da0 <_Z8setupGPSv>:
void setupGPS(){
   b4da0:	b513      	push	{r0, r1, r4, lr}
    GPSAvail = true;
   b4da2:	4c15      	ldr	r4, [pc, #84]	; (b4df8 <_Z8setupGPSv+0x58>)
   b4da4:	2301      	movs	r3, #1
   b4da6:	7023      	strb	r3, [r4, #0]
    if(myGPS.begin() == false){
   b4da8:	f00d f9e4 	bl	c2174 <_Z19__fetch_global_Wirev>
   b4dac:	2300      	movs	r3, #0
   b4dae:	4601      	mov	r1, r0
   b4db0:	9300      	str	r3, [sp, #0]
   b4db2:	4812      	ldr	r0, [pc, #72]	; (b4dfc <_Z8setupGPSv+0x5c>)
   b4db4:	f240 434c 	movw	r3, #1100	; 0x44c
   b4db8:	2242      	movs	r2, #66	; 0x42
   b4dba:	f008 fb9d 	bl	bd4f8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4dbe:	b928      	cbnz	r0, b4dcc <_Z8setupGPSv+0x2c>
        GPSAvail = false;
   b4dc0:	7020      	strb	r0, [r4, #0]
        Serial.println("Error, Could not initialize GPS");
   b4dc2:	f00d f86b 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4dc6:	490e      	ldr	r1, [pc, #56]	; (b4e00 <_Z8setupGPSv+0x60>)
   b4dc8:	f00c fbf1 	bl	c15ae <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4dcc:	f240 424c 	movw	r2, #1100	; 0x44c
   b4dd0:	2101      	movs	r1, #1
   b4dd2:	480a      	ldr	r0, [pc, #40]	; (b4dfc <_Z8setupGPSv+0x5c>)
   b4dd4:	f008 fac4 	bl	bd360 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4dd8:	f240 434c 	movw	r3, #1100	; 0x44c
   b4ddc:	2201      	movs	r2, #1
   b4dde:	2100      	movs	r1, #0
   b4de0:	4806      	ldr	r0, [pc, #24]	; (b4dfc <_Z8setupGPSv+0x5c>)
   b4de2:	f008 fa9d 	bl	bd320 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4de6:	f00d f9c5 	bl	c2174 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4dea:	4906      	ldr	r1, [pc, #24]	; (b4e04 <_Z8setupGPSv+0x64>)
}
   b4dec:	b002      	add	sp, #8
   b4dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4df2:	f00b b89d 	b.w	bff30 <_ZN7TwoWire8setSpeedEm>
   b4df6:	bf00      	nop
   b4df8:	2003dd60 	.word	0x2003dd60
   b4dfc:	2003df2c 	.word	0x2003df2c
   b4e00:	000c6b54 	.word	0x000c6b54
   b4e04:	00061a80 	.word	0x00061a80

000b4e08 <setup>:
void setup(){
   b4e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4e0c:	4bc6      	ldr	r3, [pc, #792]	; (b5128 <setup+0x320>)
    led_set_status_active(&d_, active, nullptr);
   b4e0e:	48c7      	ldr	r0, [pc, #796]	; (b512c <setup+0x324>)
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4e10:	7c1a      	ldrb	r2, [r3, #16]
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e12:	4fc7      	ldr	r7, [pc, #796]	; (b5130 <setup+0x328>)
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e14:	4ec7      	ldr	r6, [pc, #796]	; (b5134 <setup+0x32c>)
   b4e16:	f002 0203 	and.w	r2, r2, #3
   b4e1a:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   b4e1e:	741a      	strb	r2, [r3, #16]
    d_.color = color;
   b4e20:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b4e24:	615a      	str	r2, [r3, #20]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4e26:	7c5a      	ldrb	r2, [r3, #17]
   b4e28:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4e2a:	bf18      	it	ne
   b4e2c:	2201      	movne	r2, #1
void setup(){
   b4e2e:	b095      	sub	sp, #84	; 0x54
   b4e30:	bf18      	it	ne
   b4e32:	745a      	strbne	r2, [r3, #17]
    led_set_status_active(&d_, active, nullptr);
   b4e34:	2101      	movs	r1, #1
   b4e36:	2200      	movs	r2, #0
   b4e38:	f009 f9bc 	bl	be1b4 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);                          //Configure the pin for the Atlas sensors as an output and pull low to enable power to the Atlas sensors
   b4e3c:	2101      	movs	r1, #1
   b4e3e:	2002      	movs	r0, #2
   b4e40:	f00d f92c 	bl	c209c <pinMode>
    digitalWrite(SENSE_EN,LOW);                     
   b4e44:	2100      	movs	r1, #0
   b4e46:	2002      	movs	r0, #2
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4e48:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);                     
   b4e4a:	f00d f938 	bl	c20be <digitalWrite>
    pinMode(PWR_BUT, INPUT);                            //Configure power button input as an input, no pull as the resistor divider will handle pin floating
   b4e4e:	2100      	movs	r1, #0
   b4e50:	2012      	movs	r0, #18
   b4e52:	f00d f923 	bl	c209c <pinMode>
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4e5a:	4622      	mov	r2, r4
   b4e5c:	49b6      	ldr	r1, [pc, #728]	; (b5138 <setup+0x330>)
   b4e5e:	9400      	str	r4, [sp, #0]
   b4e60:	2012      	movs	r0, #18
   b4e62:	f00b f8ab 	bl	bffbc <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(LEAK_DET,INPUT);                            //Configure the leak detect output of the PCB to be an input with no pull. External pull on PCB
   b4e66:	4621      	mov	r1, r4
   b4e68:	201d      	movs	r0, #29
   b4e6a:	f00d f917 	bl	c209c <pinMode>
    pinMode(BAT_LEAK_DET,INPUT);                        //Configure the battery leak detect output of the PCB to be an input with no pull. External pull on PCB
   b4e6e:	4621      	mov	r1, r4
   b4e70:	200f      	movs	r0, #15
   b4e72:	f00d f913 	bl	c209c <pinMode>
        pinMode(PWR_EN, OUTPUT);
   b4e76:	2101      	movs	r1, #1
   b4e78:	201c      	movs	r0, #28
   b4e7a:	f00d f90f 	bl	c209c <pinMode>
        digitalWrite(PWR_EN,HIGH);                      //Set the power enable pin output high to latch the mosfet on the PCB so the system maintains power
   b4e7e:	2101      	movs	r1, #1
   b4e80:	201c      	movs	r0, #28
   b4e82:	f00d f91c 	bl	c20be <digitalWrite>
        pinMode(LEAK_DET, INPUT);
   b4e86:	4621      	mov	r1, r4
   b4e88:	201d      	movs	r0, #29
   b4e8a:	f00d f907 	bl	c209c <pinMode>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4e8e:	f009 f9f7 	bl	be280 <spark_cloud_flag_connect>
   b4e92:	f008 ff97 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e96:	4aa9      	ldr	r2, [pc, #676]	; (b513c <setup+0x334>)
   b4e98:	235a      	movs	r3, #90	; 0x5a
   b4e9a:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e9c:	4aa8      	ldr	r2, [pc, #672]	; (b5140 <setup+0x338>)
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e9e:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4ea0:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4ea4:	7033      	strb	r3, [r6, #0]
   b4ea6:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4ea8:	2106      	movs	r1, #6
   b4eaa:	e9cd 4800 	strd	r4, r8, [sp]
   b4eae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4eb6:	4605      	mov	r5, r0
   b4eb8:	48a2      	ldr	r0, [pc, #648]	; (b5144 <setup+0x33c>)
   b4eba:	f00c fc27 	bl	c170c <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4ebe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4ec6:	e9cd 4800 	strd	r4, r8, [sp]
   b4eca:	2107      	movs	r1, #7
   b4ecc:	489e      	ldr	r0, [pc, #632]	; (b5148 <setup+0x340>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4ece:	f8df 8328 	ldr.w	r8, [pc, #808]	; b51f8 <setup+0x3f0>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4ed2:	f00c fc1b 	bl	c170c <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4ed6:	7839      	ldrb	r1, [r7, #0]
   b4ed8:	489a      	ldr	r0, [pc, #616]	; (b5144 <setup+0x33c>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4eda:	4f9c      	ldr	r7, [pc, #624]	; (b514c <setup+0x344>)
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4edc:	f00c fbd9 	bl	c1692 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4ee0:	7831      	ldrb	r1, [r6, #0]
   b4ee2:	4899      	ldr	r0, [pc, #612]	; (b5148 <setup+0x340>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4ee4:	4e9a      	ldr	r6, [pc, #616]	; (b5150 <setup+0x348>)
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4ee6:	f00c fbd4 	bl	c1692 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b4eea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4eee:	f009 facb 	bl	be488 <delay>
    BLE.on();                                   //Turn on Bluetooth
   b4ef2:	f009 fe2d 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ef6:	f009 fe75 	bl	bebe4 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);                          //Max transmitting power
   b4efa:	f009 fe29 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4efe:	2108      	movs	r1, #8
   b4f00:	f009 fe77 	bl	bebf2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   b4f04:	f00c ffca 	bl	c1e9c <_Z16_fetch_usbserialv>
   b4f08:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4f0c:	f00c ffb6 	bl	c1e7c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b4f10:	f00d f970 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   b4f14:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f18:	f00c ff58 	bl	c1dcc <_ZN11USARTSerial5beginEm>
    setupXBee();                                //Setup XBee module
   b4f1c:	f7ff ff28 	bl	b4d70 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b4f20:	f7ff ff3e 	bl	b4da0 <_Z8setupGPSv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4f24:	2301      	movs	r3, #1
   b4f26:	498b      	ldr	r1, [pc, #556]	; (b5154 <setup+0x34c>)
   b4f28:	488b      	ldr	r0, [pc, #556]	; (b5158 <setup+0x350>)
   b4f2a:	4622      	mov	r2, r4
   b4f2c:	e9cd 4400 	strd	r4, r4, [sp]
   b4f30:	f009 f9be 	bl	be2b0 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4f34:	4989      	ldr	r1, [pc, #548]	; (b515c <setup+0x354>)
   b4f36:	4a8a      	ldr	r2, [pc, #552]	; (b5160 <setup+0x358>)
   b4f38:	488a      	ldr	r0, [pc, #552]	; (b5164 <setup+0x35c>)
   b4f3a:	f00a fd1a 	bl	bf972 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4f3e:	4b8a      	ldr	r3, [pc, #552]	; (b5168 <setup+0x360>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4f40:	f04f 0901 	mov.w	r9, #1
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4f44:	701c      	strb	r4, [r3, #0]
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4f46:	f886 9000 	strb.w	r9, [r6]
   b4f4a:	f008 ff3b 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
    stopTime = positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f4e:	4b87      	ldr	r3, [pc, #540]	; (b516c <setup+0x364>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4f50:	f888 9000 	strb.w	r9, [r8]
    stopTime = positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f54:	6018      	str	r0, [r3, #0]
   b4f56:	4b86      	ldr	r3, [pc, #536]	; (b5170 <setup+0x368>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4f58:	f887 9000 	strb.w	r9, [r7]
    stopTime = positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f5c:	6018      	str	r0, [r3, #0]
   b4f5e:	4b85      	ldr	r3, [pc, #532]	; (b5174 <setup+0x36c>)
   b4f60:	6018      	str	r0, [r3, #0]
   b4f62:	4b85      	ldr	r3, [pc, #532]	; (b5178 <setup+0x370>)
   b4f64:	6018      	str	r0, [r3, #0]
   b4f66:	4b85      	ldr	r3, [pc, #532]	; (b517c <setup+0x374>)
   b4f68:	6018      	str	r0, [r3, #0]
   b4f6a:	4b85      	ldr	r3, [pc, #532]	; (b5180 <setup+0x378>)
   b4f6c:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;                             //Initialize timer for checking that XBee is available
   b4f6e:	4b85      	ldr	r3, [pc, #532]	; (b5184 <setup+0x37c>)
   b4f70:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;                              //Initialize timer for checking that BLE is available
   b4f72:	4b85      	ldr	r3, [pc, #532]	; (b5188 <setup+0x380>)
   b4f74:	601c      	str	r4, [r3, #0]
    dataWait = false;                           //Set false initially to first request data to sensors before attempting to read data
   b4f76:	4b85      	ldr	r3, [pc, #532]	; (b518c <setup+0x384>)
   b4f78:	701c      	strb	r4, [r3, #0]
    offloadMode = false;                        //Set offload to false, otherwise could try to offload with no CC connected
   b4f7a:	4b85      	ldr	r3, [pc, #532]	; (b5190 <setup+0x388>)
   b4f7c:	701c      	strb	r4, [r3, #0]
    requestActive = false;                      //Set request to false, otherwise we are trying to send sensor data with no CC connected
   b4f7e:	4b85      	ldr	r3, [pc, #532]	; (b5194 <setup+0x38c>)
   b4f80:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;            //Initialize counter for LTE backup messages. This counter limits the number of LTE messages being sent so we don't burn through the data limit
   b4f82:	4b85      	ldr	r3, [pc, #532]	; (b5198 <setup+0x390>)
   b4f84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b4f88:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;                     //Initially assume GPS and compass are not available until we receive the first point from each
   b4f8a:	4b84      	ldr	r3, [pc, #528]	; (b519c <setup+0x394>)
   b4f8c:	701c      	strb	r4, [r3, #0]
    shutdownActive = false;                     //Initially set the shutdown state to false until the button is pressed and held for 3 seconds, then shut off
   b4f8e:	4b84      	ldr	r3, [pc, #528]	; (b51a0 <setup+0x398>)
   b4f90:	701c      	strb	r4, [r3, #0]
    stopActive = false;                         //Initially disable stop, otherwise user might not know that the stop button must be pressed
   b4f92:	4b84      	ldr	r3, [pc, #528]	; (b51a4 <setup+0x39c>)
   b4f94:	701c      	strb	r4, [r3, #0]
    warnedBattLeak = false;                     //Initially set false so at least one leak message will be sent in the case of a leak
   b4f96:	4b84      	ldr	r3, [pc, #528]	; (b51a8 <setup+0x3a0>)
   b4f98:	701c      	strb	r4, [r3, #0]
    warnedLeak = false;                         //Initially set false so at least one leak message will be sent in the case of a leak
   b4f9a:	4b84      	ldr	r3, [pc, #528]	; (b51ac <setup+0x3a4>)
   b4f9c:	701c      	strb	r4, [r3, #0]
    battPercent = 50;                           //Initially set battery reading to 50% until we read the actual voltage so the LED states are not affected 
   b4f9e:	4b84      	ldr	r3, [pc, #528]	; (b51b0 <setup+0x3a8>)
   b4fa0:	2232      	movs	r2, #50	; 0x32
   b4fa2:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add characteristic for the stream of transmitting out data over BLE
   b4fa4:	f009 fdd4 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fa8:	4a82      	ldr	r2, [pc, #520]	; (b51b4 <setup+0x3ac>)
   b4faa:	4601      	mov	r1, r0
   b4fac:	a80f      	add	r0, sp, #60	; 0x3c
   b4fae:	f00a fb29 	bl	bf604 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fb2:	a80f      	add	r0, sp, #60	; 0x3c
   b4fb4:	f009 fed9 	bl	bed6a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);    //Add characteristic for the stream of receiving data from BLE
   b4fb8:	f009 fdca 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fbc:	4a7e      	ldr	r2, [pc, #504]	; (b51b8 <setup+0x3b0>)
   b4fbe:	4601      	mov	r1, r0
   b4fc0:	a80f      	add	r0, sp, #60	; 0x3c
   b4fc2:	f00a fb1f 	bl	bf604 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fc6:	a80f      	add	r0, sp, #60	; 0x3c
   b4fc8:	f009 fecf 	bl	bed6a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);   //Add characteristic for offloading stream for BLE
   b4fcc:	f009 fdc0 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fd0:	4a7a      	ldr	r2, [pc, #488]	; (b51bc <setup+0x3b4>)
   b4fd2:	4601      	mov	r1, r0
   b4fd4:	a80f      	add	r0, sp, #60	; 0x3c
   b4fd6:	f00a fb15 	bl	bf604 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fda:	a80f      	add	r0, sp, #60	; 0x3c
   b4fdc:	f009 fec5 	bl	bed6a <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);    //Add BLE Characteristics for BLE serial debug stream
   b4fe0:	f009 fdb6 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fe4:	4a76      	ldr	r2, [pc, #472]	; (b51c0 <setup+0x3b8>)
   b4fe6:	4601      	mov	r1, r0
   b4fe8:	a80f      	add	r0, sp, #60	; 0x3c
   b4fea:	f00a fb0b 	bl	bf604 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fee:	a80f      	add	r0, sp, #60	; 0x3c
   b4ff0:	f009 febb 	bl	bed6a <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;                  //Put this bot's bot number in the advertising data so other bots can see it's ID without connecting to it
   b4ff4:	4b73      	ldr	r3, [pc, #460]	; (b51c4 <setup+0x3bc>)
   b4ff6:	f883 9000 	strb.w	r9, [r3]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b4ffa:	4b73      	ldr	r3, [pc, #460]	; (b51c8 <setup+0x3c0>)
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4ffc:	a80f      	add	r0, sp, #60	; 0x3c
   b4ffe:	6819      	ldr	r1, [r3, #0]
   b5000:	f009 fc58 	bl	be8b4 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5004:	a80f      	add	r0, sp, #60	; 0x3c
   b5006:	f009 fbb7 	bl	be778 <_ZNK8particle7BleUuid4typeEv>
   b500a:	4681      	mov	r9, r0
            uint16_t uuid16 = tempUUID.shorted();
   b500c:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b500e:	f1b9 0f00 	cmp.w	r9, #0
   b5012:	f040 8134 	bne.w	b527e <setup+0x476>
            uint16_t uuid16 = tempUUID.shorted();
   b5016:	f009 fbcb 	bl	be7b0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b501a:	f8cd 9000 	str.w	r9, [sp]
            uint16_t uuid16 = tempUUID.shorted();
   b501e:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5022:	2302      	movs	r3, #2
   b5024:	aa0b      	add	r2, sp, #44	; 0x2c
   b5026:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5028:	4868      	ldr	r0, [pc, #416]	; (b51cc <setup+0x3c4>)
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b502a:	4c69      	ldr	r4, [pc, #420]	; (b51d0 <setup+0x3c8>)
   b502c:	f009 ffc8 	bl	befc0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b5030:	2300      	movs	r3, #0
   b5032:	4964      	ldr	r1, [pc, #400]	; (b51c4 <setup+0x3bc>)
   b5034:	4865      	ldr	r0, [pc, #404]	; (b51cc <setup+0x3c4>)
   b5036:	2208      	movs	r2, #8
   b5038:	f009 ffe0 	bl	beffc <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b503c:	f009 fd88 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5040:	2200      	movs	r2, #0
   b5042:	4962      	ldr	r1, [pc, #392]	; (b51cc <setup+0x3c4>)
   b5044:	f009 fe35 	bl	becb2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5048:	f00d f894 	bl	c2174 <_Z19__fetch_global_Wirev>
   b504c:	f00a ff74 	bl	bff38 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b5050:	f00d f890 	bl	c2174 <_Z19__fetch_global_Wirev>
   b5054:	495f      	ldr	r1, [pc, #380]	; (b51d4 <setup+0x3cc>)
   b5056:	f00a ff6b 	bl	bff30 <_ZN7TwoWire8setSpeedEm>
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b505a:	2301      	movs	r3, #1
   b505c:	7023      	strb	r3, [r4, #0]
    if (! lis3mdl.begin_I2C()) {                // hardware I2C mode, can pass in address & alt Wire
   b505e:	f00d f889 	bl	c2174 <_Z19__fetch_global_Wirev>
   b5062:	211c      	movs	r1, #28
   b5064:	4602      	mov	r2, r0
   b5066:	485c      	ldr	r0, [pc, #368]	; (b51d8 <setup+0x3d0>)
   b5068:	f003 fb37 	bl	b86da <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b506c:	2800      	cmp	r0, #0
   b506e:	f040 810d 	bne.w	b528c <setup+0x484>
        CompassAvail = false;                   //Couldn't connect over I2C, so assume the compass is unavailable. Flag disables Autonomous/Sentry mode
   b5072:	7020      	strb	r0, [r4, #0]
        Serial.println("Failed to find LIS3MDL chip");
   b5074:	f00c ff12 	bl	c1e9c <_Z16_fetch_usbserialv>
   b5078:	4958      	ldr	r1, [pc, #352]	; (b51dc <setup+0x3d4>)
    else Serial.println("LIS3MDL Found!");
   b507a:	f00c fa98 	bl	c15ae <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b507e:	4856      	ldr	r0, [pc, #344]	; (b51d8 <setup+0x3d0>)
   b5080:	2102      	movs	r1, #2
   b5082:	f003 fa23 	bl	b84cc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b5086:	4854      	ldr	r0, [pc, #336]	; (b51d8 <setup+0x3d0>)
   b5088:	2100      	movs	r1, #0
   b508a:	f003 fa83 	bl	b8594 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b508e:	4852      	ldr	r0, [pc, #328]	; (b51d8 <setup+0x3d0>)
   b5090:	2101      	movs	r1, #1
   b5092:	f003 fa4d 	bl	b8530 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b5096:	4850      	ldr	r0, [pc, #320]	; (b51d8 <setup+0x3d0>)
   b5098:	2101      	movs	r1, #1
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b509a:	2400      	movs	r4, #0
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b509c:	f003 fa95 	bl	b85ca <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b50a0:	f04f 0901 	mov.w	r9, #1
    lis3mdl.setIntThreshold(500);
   b50a4:	484c      	ldr	r0, [pc, #304]	; (b51d8 <setup+0x3d0>)
   b50a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b50aa:	f003 fb35 	bl	b8718 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b50ae:	4622      	mov	r2, r4
   b50b0:	4621      	mov	r1, r4
   b50b2:	464b      	mov	r3, r9
   b50b4:	e9cd 4901 	strd	r4, r9, [sp, #4]
   b50b8:	4847      	ldr	r0, [pc, #284]	; (b51d8 <setup+0x3d0>)
   b50ba:	f8cd 9000 	str.w	r9, [sp]
   b50be:	f003 fb43 	bl	b8748 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"B%d%02d%02d%04d%02d%02d%02d", BOTNUM, Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b50c2:	f00c fe0f 	bl	c1ce4 <_ZN9TimeClass5monthEv>
   b50c6:	4682      	mov	sl, r0
   b50c8:	f00c fe00 	bl	c1ccc <_ZN9TimeClass3dayEv>
   b50cc:	4683      	mov	fp, r0
   b50ce:	f00c fe11 	bl	c1cf4 <_ZN9TimeClass4yearEv>
   b50d2:	9009      	str	r0, [sp, #36]	; 0x24
   b50d4:	f00c fdd6 	bl	c1c84 <_ZN9TimeClass4hourEv>
   b50d8:	9008      	str	r0, [sp, #32]
   b50da:	f00c fddf 	bl	c1c9c <_ZN9TimeClass6minuteEv>
   b50de:	9007      	str	r0, [sp, #28]
   b50e0:	f00c fde8 	bl	c1cb4 <_ZN9TimeClass6secondEv>
   b50e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b50e6:	9907      	ldr	r1, [sp, #28]
   b50e8:	9a08      	ldr	r2, [sp, #32]
   b50ea:	9005      	str	r0, [sp, #20]
   b50ec:	e9cd b301 	strd	fp, r3, [sp, #4]
   b50f0:	9104      	str	r1, [sp, #16]
   b50f2:	464b      	mov	r3, r9
   b50f4:	9203      	str	r2, [sp, #12]
   b50f6:	2110      	movs	r1, #16
   b50f8:	4a39      	ldr	r2, [pc, #228]	; (b51e0 <setup+0x3d8>)
   b50fa:	f8cd a000 	str.w	sl, [sp]
   b50fe:	a80b      	add	r0, sp, #44	; 0x2c
   b5100:	f009 f976 	bl	be3f0 <snprintf>
    strcpy(filename,DEF_FILENAME);              //Copy in all of the necessary elements of the file name
   b5104:	4937      	ldr	r1, [pc, #220]	; (b51e4 <setup+0x3dc>)
   b5106:	4838      	ldr	r0, [pc, #224]	; (b51e8 <setup+0x3e0>)
   b5108:	f00f fb28 	bl	c475c <strcpy>
    strcat(filename,timestamp);
   b510c:	a90b      	add	r1, sp, #44	; 0x2c
   b510e:	4836      	ldr	r0, [pc, #216]	; (b51e8 <setup+0x3e0>)
   b5110:	f00f faf4 	bl	c46fc <strcat>
    strcpy(filenameMessages,filename);
   b5114:	4934      	ldr	r1, [pc, #208]	; (b51e8 <setup+0x3e0>)
   b5116:	4835      	ldr	r0, [pc, #212]	; (b51ec <setup+0x3e4>)
   b5118:	f00f fb20 	bl	c475c <strcpy>
    strcat(filename,".csv");
   b511c:	4934      	ldr	r1, [pc, #208]	; (b51f0 <setup+0x3e8>)
   b511e:	4832      	ldr	r0, [pc, #200]	; (b51e8 <setup+0x3e0>)
   b5120:	f00f faec 	bl	c46fc <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5124:	4933      	ldr	r1, [pc, #204]	; (b51f4 <setup+0x3ec>)
   b5126:	e069      	b.n	b51fc <setup+0x3f4>
   b5128:	2003e584 	.word	0x2003e584
   b512c:	2003e588 	.word	0x2003e588
   b5130:	2003e55c 	.word	0x2003e55c
   b5134:	2003e55d 	.word	0x2003e55d
   b5138:	000b4309 	.word	0x000b4309
   b513c:	2003de18 	.word	0x2003de18
   b5140:	2003e0b5 	.word	0x2003e0b5
   b5144:	2003dd40 	.word	0x2003dd40
   b5148:	2003dd50 	.word	0x2003dd50
   b514c:	2003ded0 	.word	0x2003ded0
   b5150:	2003dd64 	.word	0x2003dd64
   b5154:	000b4c19 	.word	0x000b4c19
   b5158:	000c6b74 	.word	0x000c6b74
   b515c:	000b4c69 	.word	0x000b4c69
   b5160:	000c6b7a 	.word	0x000c6b7a
   b5164:	000bf947 	.word	0x000bf947
   b5168:	2003dd61 	.word	0x2003dd61
   b516c:	2003e558 	.word	0x2003e558
   b5170:	2003dda4 	.word	0x2003dda4
   b5174:	2003ddf0 	.word	0x2003ddf0
   b5178:	2003ddf4 	.word	0x2003ddf4
   b517c:	2003e0b0 	.word	0x2003e0b0
   b5180:	2003e5c8 	.word	0x2003e5c8
   b5184:	2003dd78 	.word	0x2003dd78
   b5188:	2003dd38 	.word	0x2003dd38
   b518c:	2003dda8 	.word	0x2003dda8
   b5190:	2003e0ac 	.word	0x2003e0ac
   b5194:	2003e0b4 	.word	0x2003e0b4
   b5198:	2003dd62 	.word	0x2003dd62
   b519c:	2003e5d8 	.word	0x2003e5d8
   b51a0:	2003e55e 	.word	0x2003e55e
   b51a4:	2003e5c5 	.word	0x2003e5c5
   b51a8:	2003e5ee 	.word	0x2003e5ee
   b51ac:	2003e5ef 	.word	0x2003e5ef
   b51b0:	2003dd90 	.word	0x2003dd90
   b51b4:	2003e5e4 	.word	0x2003e5e4
   b51b8:	2003e0b8 	.word	0x2003e0b8
   b51bc:	2003e0a4 	.word	0x2003e0a4
   b51c0:	2003dd98 	.word	0x2003dd98
   b51c4:	2003dd2d 	.word	0x2003dd2d
   b51c8:	2003db20 	.word	0x2003db20
   b51cc:	2003dd80 	.word	0x2003dd80
   b51d0:	2003dd3c 	.word	0x2003dd3c
   b51d4:	00061a80 	.word	0x00061a80
   b51d8:	2003de1c 	.word	0x2003de1c
   b51dc:	000c6b88 	.word	0x000c6b88
   b51e0:	000c6bb3 	.word	0x000c6bb3
   b51e4:	000c6bcf 	.word	0x000c6bcf
   b51e8:	2003ddaa 	.word	0x2003ddaa
   b51ec:	2003ddca 	.word	0x2003ddca
   b51f0:	000c6bd8 	.word	0x000c6bd8
   b51f4:	000c6bdd 	.word	0x000c6bdd
   b51f8:	2003ded1 	.word	0x2003ded1
   b51fc:	4839      	ldr	r0, [pc, #228]	; (b52e4 <setup+0x4dc>)
   b51fe:	f00f fa7d 	bl	c46fc <strcat>
    Serial.println(filename);                   //Print the filenames to the console for debugging
   b5202:	f00c fe4b 	bl	c1e9c <_Z16_fetch_usbserialv>
   b5206:	4938      	ldr	r1, [pc, #224]	; (b52e8 <setup+0x4e0>)
   b5208:	f00c f9d1 	bl	c15ae <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b520c:	f00c fe46 	bl	c1e9c <_Z16_fetch_usbserialv>
   b5210:	4934      	ldr	r1, [pc, #208]	; (b52e4 <setup+0x4dc>)
   b5212:	f00c f9cc 	bl	c15ae <_ZN5Print7printlnEPKc>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b5216:	4622      	mov	r2, r4
   b5218:	4834      	ldr	r0, [pc, #208]	; (b52ec <setup+0x4e4>)
   b521a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b521e:	f7ff f85f 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
   b5222:	4622      	mov	r2, r4
   b5224:	4832      	ldr	r0, [pc, #200]	; (b52f0 <setup+0x4e8>)
   b5226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b522a:	f7ff f859 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
   b522e:	4622      	mov	r2, r4
   b5230:	4830      	ldr	r0, [pc, #192]	; (b52f4 <setup+0x4ec>)
   b5232:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5236:	f7ff f853 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
      dataMode_{dataMode}
   b523a:	4b2f      	ldr	r3, [pc, #188]	; (b52f8 <setup+0x4f0>)
   b523c:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {     //Try to connect to the SD card
   b523e:	482f      	ldr	r0, [pc, #188]	; (b52fc <setup+0x4f4>)
   b5240:	4b2f      	ldr	r3, [pc, #188]	; (b5300 <setup+0x4f8>)
   b5242:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   b5246:	aa0f      	add	r2, sp, #60	; 0x3c
   b5248:	2108      	movs	r1, #8
   b524a:	9311      	str	r3, [sp, #68]	; 0x44
   b524c:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
   b5250:	f7ff fab4 	bl	b47bc <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5254:	4604      	mov	r4, r0
   b5256:	b9e8      	cbnz	r0, b5294 <setup+0x48c>
        Serial.println("Error: could not connect to SD card!");     //If not, warn the user in the console
   b5258:	f00c fe20 	bl	c1e9c <_Z16_fetch_usbserialv>
   b525c:	4929      	ldr	r1, [pc, #164]	; (b5304 <setup+0x4fc>)
   b525e:	f00c f9a6 	bl	c15ae <_ZN5Print7printlnEPKc>
        logSensors = false;                         //Set flags that the SD card is not available which will warn the user on the CChub
   b5262:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   b5266:	703c      	strb	r4, [r7, #0]
        SDAvail = false;
   b5268:	7034      	strb	r4, [r6, #0]
   b526a:	f008 fdab 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);   //Check that the we've been in this setup function for at least two seconds so the ESC's will arm and allow movement
   b526e:	1b40      	subs	r0, r0, r5
   b5270:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5274:	d233      	bcs.n	b52de <setup+0x4d6>
   b5276:	2005      	movs	r0, #5
   b5278:	f009 f906 	bl	be488 <delay>
   b527c:	e7f5      	b.n	b526a <setup+0x462>
   b527e:	f009 fa99 	bl	be7b4 <_ZNK8particle7BleUuid8rawBytesEv>
   b5282:	9400      	str	r4, [sp, #0]
   b5284:	4602      	mov	r2, r0
   b5286:	2310      	movs	r3, #16
   b5288:	2107      	movs	r1, #7
   b528a:	e6cd      	b.n	b5028 <setup+0x220>
    else Serial.println("LIS3MDL Found!");
   b528c:	f00c fe06 	bl	c1e9c <_Z16_fetch_usbserialv>
   b5290:	491d      	ldr	r1, [pc, #116]	; (b5308 <setup+0x500>)
   b5292:	e6f2      	b.n	b507a <setup+0x272>
    if(logSensors){                                 //Logsensors enables logging of sensor data, if enabled, then create the file on the SD card
   b5294:	f898 3000 	ldrb.w	r3, [r8]
   b5298:	b163      	cbz	r3, b52b4 <setup+0x4ac>
        myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b529a:	4913      	ldr	r1, [pc, #76]	; (b52e8 <setup+0x4e0>)
   b529c:	481b      	ldr	r0, [pc, #108]	; (b530c <setup+0x504>)
   b529e:	f244 2202 	movw	r2, #16898	; 0x4202
   b52a2:	f7ff fa03 	bl	b46ac <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b52a6:	491a      	ldr	r1, [pc, #104]	; (b5310 <setup+0x508>)
   b52a8:	481a      	ldr	r0, [pc, #104]	; (b5314 <setup+0x50c>)
   b52aa:	f00c f980 	bl	c15ae <_ZN5Print7printlnEPKc>
        myFile.close();
   b52ae:	4817      	ldr	r0, [pc, #92]	; (b530c <setup+0x504>)
   b52b0:	f001 ff18 	bl	b70e4 <_ZN7FatFile5closeEv>
    if(logMessages){                                //Logsensors enables logging of messages, if enabled, then create the file on the SD card
   b52b4:	783b      	ldrb	r3, [r7, #0]
   b52b6:	2b00      	cmp	r3, #0
   b52b8:	d0d7      	beq.n	b526a <setup+0x462>
   b52ba:	4817      	ldr	r0, [pc, #92]	; (b5318 <setup+0x510>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b52bc:	7c03      	ldrb	r3, [r0, #16]
   b52be:	b92b      	cbnz	r3, b52cc <setup+0x4c4>
   b52c0:	4908      	ldr	r1, [pc, #32]	; (b52e4 <setup+0x4dc>)
   b52c2:	f244 2202 	movw	r2, #16898	; 0x4202
   b52c6:	3010      	adds	r0, #16
   b52c8:	f7ff f9f0 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b52cc:	4913      	ldr	r1, [pc, #76]	; (b531c <setup+0x514>)
   b52ce:	4812      	ldr	r0, [pc, #72]	; (b5318 <setup+0x510>)
   b52d0:	2201      	movs	r2, #1
   b52d2:	f7ff f87d 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b52d6:	4812      	ldr	r0, [pc, #72]	; (b5320 <setup+0x518>)
   b52d8:	f001 ff04 	bl	b70e4 <_ZN7FatFile5closeEv>
   b52dc:	e7c5      	b.n	b526a <setup+0x462>
}
   b52de:	b015      	add	sp, #84	; 0x54
   b52e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b52e4:	2003ddca 	.word	0x2003ddca
   b52e8:	2003ddaa 	.word	0x2003ddaa
   b52ec:	2003e5f0 	.word	0x2003e5f0
   b52f0:	2003ddfc 	.word	0x2003ddfc
   b52f4:	2003e5a8 	.word	0x2003e5a8
   b52f8:	000c6e68 	.word	0x000c6e68
   b52fc:	2003e0c0 	.word	0x2003e0c0
   b5300:	007a1200 	.word	0x007a1200
   b5304:	000c6be6 	.word	0x000c6be6
   b5308:	000c6ba4 	.word	0x000c6ba4
   b530c:	2003df08 	.word	0x2003df08
   b5310:	000c6c0b 	.word	0x000c6c0b
   b5314:	2003def8 	.word	0x2003def8
   b5318:	2003de78 	.word	0x2003de78
   b531c:	000c6c61 	.word	0x000c6c61
   b5320:	2003de88 	.word	0x2003de88
   b5324:	00000000 	.word	0x00000000

000b5328 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b5328:	b538      	push	{r3, r4, r5, lr}
   b532a:	eef0 7a60 	vmov.f32	s15, s1
   b532e:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b5332:	eef0 0a40 	vmov.f32	s1, s0
   b5336:	eeb0 0a67 	vmov.f32	s0, s15
   b533a:	f00d f947 	bl	c25cc <atan2f>
   b533e:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;  //Convert x and y compass acceleration to a heading
   b5342:	f00e fd99 	bl	c3e78 <__aeabi_f2d>
   b5346:	4b8e      	ldr	r3, [pc, #568]	; (b5580 <_Z18readCompassHeadingff+0x258>)
   b5348:	2200      	movs	r2, #0
   b534a:	f00e fded 	bl	c3f28 <__aeabi_dmul>
   b534e:	a384      	add	r3, pc, #528	; (adr r3, b5560 <_Z18readCompassHeadingff+0x238>)
   b5350:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5354:	f00e ff12 	bl	c417c <__aeabi_ddiv>
   b5358:	f00f f8de 	bl	c4518 <__aeabi_d2f>
   b535c:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b5360:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b5364:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b5368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b536c:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b5370:	db13      	blt.n	b539a <_Z18readCompassHeadingff+0x72>
   b5372:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b5376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b537a:	d50e      	bpl.n	b539a <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b537c:	f00e fd7c 	bl	c3e78 <__aeabi_f2d>
   b5380:	4b80      	ldr	r3, [pc, #512]	; (b5584 <_Z18readCompassHeadingff+0x25c>)
   b5382:	2200      	movs	r2, #0
   b5384:	f00e fc18 	bl	c3bb8 <__aeabi_dsub>
   b5388:	4b7f      	ldr	r3, [pc, #508]	; (b5588 <_Z18readCompassHeadingff+0x260>)
   b538a:	2200      	movs	r2, #0
   b538c:	f00e fdcc 	bl	c3f28 <__aeabi_dmul>
   b5390:	4b7e      	ldr	r3, [pc, #504]	; (b558c <_Z18readCompassHeadingff+0x264>)
   b5392:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b5394:	f00e fef2 	bl	c417c <__aeabi_ddiv>
   b5398:	e021      	b.n	b53de <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b539a:	ee18 0a10 	vmov	r0, s16
   b539e:	f00e fd6b 	bl	c3e78 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b53a2:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b53a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53aa:	eddf 7a79 	vldr	s15, [pc, #484]	; b5590 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b53ae:	4604      	mov	r4, r0
   b53b0:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b53b2:	db1b      	blt.n	b53ec <_Z18readCompassHeadingff+0xc4>
   b53b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b53b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53bc:	d516      	bpl.n	b53ec <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b53be:	4b75      	ldr	r3, [pc, #468]	; (b5594 <_Z18readCompassHeadingff+0x26c>)
   b53c0:	2200      	movs	r2, #0
   b53c2:	f00e fbf9 	bl	c3bb8 <__aeabi_dsub>
   b53c6:	4b70      	ldr	r3, [pc, #448]	; (b5588 <_Z18readCompassHeadingff+0x260>)
   b53c8:	2200      	movs	r2, #0
   b53ca:	f00e fdad 	bl	c3f28 <__aeabi_dmul>
   b53ce:	4b72      	ldr	r3, [pc, #456]	; (b5598 <_Z18readCompassHeadingff+0x270>)
   b53d0:	2200      	movs	r2, #0
   b53d2:	f00e fed3 	bl	c417c <__aeabi_ddiv>
   b53d6:	4b6c      	ldr	r3, [pc, #432]	; (b5588 <_Z18readCompassHeadingff+0x260>)
   b53d8:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b53da:	f00e fbef 	bl	c3bbc <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b53de:	f00f f89b 	bl	c4518 <__aeabi_d2f>
}
   b53e2:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b53e6:	ee00 0a10 	vmov	s0, r0
}
   b53ea:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b53ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b53f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53f4:	eddf 7a69 	vldr	s15, [pc, #420]	; b559c <_Z18readCompassHeadingff+0x274>
   b53f8:	db15      	blt.n	b5426 <_Z18readCompassHeadingff+0xfe>
   b53fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b53fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5402:	d510      	bpl.n	b5426 <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b5404:	4b66      	ldr	r3, [pc, #408]	; (b55a0 <_Z18readCompassHeadingff+0x278>)
   b5406:	2200      	movs	r2, #0
   b5408:	4620      	mov	r0, r4
   b540a:	4629      	mov	r1, r5
   b540c:	f00e fbd4 	bl	c3bb8 <__aeabi_dsub>
   b5410:	4b5d      	ldr	r3, [pc, #372]	; (b5588 <_Z18readCompassHeadingff+0x260>)
   b5412:	2200      	movs	r2, #0
   b5414:	f00e fd88 	bl	c3f28 <__aeabi_dmul>
   b5418:	4b62      	ldr	r3, [pc, #392]	; (b55a4 <_Z18readCompassHeadingff+0x27c>)
   b541a:	2200      	movs	r2, #0
   b541c:	f00e feae 	bl	c417c <__aeabi_ddiv>
   b5420:	4b61      	ldr	r3, [pc, #388]	; (b55a8 <_Z18readCompassHeadingff+0x280>)
   b5422:	2200      	movs	r2, #0
   b5424:	e7d9      	b.n	b53da <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b5426:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b542e:	db18      	blt.n	b5462 <_Z18readCompassHeadingff+0x13a>
   b5430:	eddf 7a5e 	vldr	s15, [pc, #376]	; b55ac <_Z18readCompassHeadingff+0x284>
   b5434:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b543c:	d511      	bpl.n	b5462 <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b543e:	4b5c      	ldr	r3, [pc, #368]	; (b55b0 <_Z18readCompassHeadingff+0x288>)
   b5440:	2200      	movs	r2, #0
   b5442:	4620      	mov	r0, r4
   b5444:	4629      	mov	r1, r5
   b5446:	f00e fbb7 	bl	c3bb8 <__aeabi_dsub>
   b544a:	4b4f      	ldr	r3, [pc, #316]	; (b5588 <_Z18readCompassHeadingff+0x260>)
   b544c:	2200      	movs	r2, #0
   b544e:	f00e fd6b 	bl	c3f28 <__aeabi_dmul>
   b5452:	4b58      	ldr	r3, [pc, #352]	; (b55b4 <_Z18readCompassHeadingff+0x28c>)
   b5454:	2200      	movs	r2, #0
   b5456:	f00e fe91 	bl	c417c <__aeabi_ddiv>
   b545a:	a343      	add	r3, pc, #268	; (adr r3, b5568 <_Z18readCompassHeadingff+0x240>)
   b545c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5460:	e7bb      	b.n	b53da <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b5462:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b5466:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b546e:	db11      	blt.n	b5494 <_Z18readCompassHeadingff+0x16c>
   b5470:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b5474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5478:	d50c      	bpl.n	b5494 <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b547a:	4b42      	ldr	r3, [pc, #264]	; (b5584 <_Z18readCompassHeadingff+0x25c>)
   b547c:	2200      	movs	r2, #0
   b547e:	4620      	mov	r0, r4
   b5480:	4629      	mov	r1, r5
   b5482:	f00e fb99 	bl	c3bb8 <__aeabi_dsub>
   b5486:	4b4c      	ldr	r3, [pc, #304]	; (b55b8 <_Z18readCompassHeadingff+0x290>)
   b5488:	2200      	movs	r2, #0
   b548a:	f00e fd4d 	bl	c3f28 <__aeabi_dmul>
   b548e:	4b4b      	ldr	r3, [pc, #300]	; (b55bc <_Z18readCompassHeadingff+0x294>)
   b5490:	2200      	movs	r2, #0
   b5492:	e77f      	b.n	b5394 <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b5494:	eddf 7a4a 	vldr	s15, [pc, #296]	; b55c0 <_Z18readCompassHeadingff+0x298>
   b5498:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54a0:	db17      	blt.n	b54d2 <_Z18readCompassHeadingff+0x1aa>
   b54a2:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b54a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54aa:	d512      	bpl.n	b54d2 <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b54ac:	4b45      	ldr	r3, [pc, #276]	; (b55c4 <_Z18readCompassHeadingff+0x29c>)
   b54ae:	2200      	movs	r2, #0
   b54b0:	4620      	mov	r0, r4
   b54b2:	4629      	mov	r1, r5
   b54b4:	f00e fb82 	bl	c3bbc <__adddf3>
   b54b8:	4b3f      	ldr	r3, [pc, #252]	; (b55b8 <_Z18readCompassHeadingff+0x290>)
   b54ba:	2200      	movs	r2, #0
   b54bc:	f00e fd34 	bl	c3f28 <__aeabi_dmul>
   b54c0:	4b41      	ldr	r3, [pc, #260]	; (b55c8 <_Z18readCompassHeadingff+0x2a0>)
   b54c2:	2200      	movs	r2, #0
   b54c4:	f00e fe5a 	bl	c417c <__aeabi_ddiv>
   b54c8:	4b2f      	ldr	r3, [pc, #188]	; (b5588 <_Z18readCompassHeadingff+0x260>)
   b54ca:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b54cc:	f00e fb74 	bl	c3bb8 <__aeabi_dsub>
   b54d0:	e785      	b.n	b53de <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b54d2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b55cc <_Z18readCompassHeadingff+0x2a4>
   b54d6:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b54da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54de:	db15      	blt.n	b550c <_Z18readCompassHeadingff+0x1e4>
   b54e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b54e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54e8:	d510      	bpl.n	b550c <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b54ea:	4b39      	ldr	r3, [pc, #228]	; (b55d0 <_Z18readCompassHeadingff+0x2a8>)
   b54ec:	2200      	movs	r2, #0
   b54ee:	4620      	mov	r0, r4
   b54f0:	4629      	mov	r1, r5
   b54f2:	f00e fb63 	bl	c3bbc <__adddf3>
   b54f6:	4b30      	ldr	r3, [pc, #192]	; (b55b8 <_Z18readCompassHeadingff+0x290>)
   b54f8:	2200      	movs	r2, #0
   b54fa:	f00e fd15 	bl	c3f28 <__aeabi_dmul>
   b54fe:	4b35      	ldr	r3, [pc, #212]	; (b55d4 <_Z18readCompassHeadingff+0x2ac>)
   b5500:	2200      	movs	r2, #0
   b5502:	f00e fe3b 	bl	c417c <__aeabi_ddiv>
   b5506:	4b28      	ldr	r3, [pc, #160]	; (b55a8 <_Z18readCompassHeadingff+0x280>)
   b5508:	2200      	movs	r2, #0
   b550a:	e7df      	b.n	b54cc <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b550c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b5510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b5514:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b5518:	dd10      	ble.n	b553c <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b551a:	4b2f      	ldr	r3, [pc, #188]	; (b55d8 <_Z18readCompassHeadingff+0x2b0>)
   b551c:	4620      	mov	r0, r4
   b551e:	4629      	mov	r1, r5
   b5520:	f00e fb4a 	bl	c3bb8 <__aeabi_dsub>
   b5524:	4b18      	ldr	r3, [pc, #96]	; (b5588 <_Z18readCompassHeadingff+0x260>)
   b5526:	2200      	movs	r2, #0
   b5528:	f00e fcfe 	bl	c3f28 <__aeabi_dmul>
   b552c:	a310      	add	r3, pc, #64	; (adr r3, b5570 <_Z18readCompassHeadingff+0x248>)
   b552e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5532:	f00e fe23 	bl	c417c <__aeabi_ddiv>
   b5536:	4b12      	ldr	r3, [pc, #72]	; (b5580 <_Z18readCompassHeadingff+0x258>)
   b5538:	2200      	movs	r2, #0
   b553a:	e7c7      	b.n	b54cc <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b553c:	4b27      	ldr	r3, [pc, #156]	; (b55dc <_Z18readCompassHeadingff+0x2b4>)
   b553e:	4620      	mov	r0, r4
   b5540:	4629      	mov	r1, r5
   b5542:	f00e fb3b 	bl	c3bbc <__adddf3>
   b5546:	a30c      	add	r3, pc, #48	; (adr r3, b5578 <_Z18readCompassHeadingff+0x250>)
   b5548:	e9d3 2300 	ldrd	r2, r3, [r3]
   b554c:	f00e fcec 	bl	c3f28 <__aeabi_dmul>
   b5550:	4b23      	ldr	r3, [pc, #140]	; (b55e0 <_Z18readCompassHeadingff+0x2b8>)
   b5552:	2200      	movs	r2, #0
   b5554:	f00e fe12 	bl	c417c <__aeabi_ddiv>
   b5558:	a303      	add	r3, pc, #12	; (adr r3, b5568 <_Z18readCompassHeadingff+0x240>)
   b555a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b555e:	e7b5      	b.n	b54cc <_Z18readCompassHeadingff+0x1a4>
   b5560:	54442d18 	.word	0x54442d18
   b5564:	400921fb 	.word	0x400921fb
   b5568:	00000000 	.word	0x00000000
   b556c:	4060e000 	.word	0x4060e000
   b5570:	00000000 	.word	0x00000000
   b5574:	4063a000 	.word	0x4063a000
   b5578:	bb000000 	.word	0xbb000000
   b557c:	403d3c54 	.word	0x403d3c54
   b5580:	40668000 	.word	0x40668000
   b5584:	40180000 	.word	0x40180000
   b5588:	40468000 	.word	0x40468000
   b558c:	40390000 	.word	0x40390000
   b5590:	42680000 	.word	0x42680000
   b5594:	403f0000 	.word	0x403f0000
   b5598:	403b0000 	.word	0x403b0000
   b559c:	42ac0000 	.word	0x42ac0000
   b55a0:	404d0000 	.word	0x404d0000
   b55a4:	403c0000 	.word	0x403c0000
   b55a8:	40568000 	.word	0x40568000
   b55ac:	42fa0000 	.word	0x42fa0000
   b55b0:	40558000 	.word	0x40558000
   b55b4:	40438000 	.word	0x40438000
   b55b8:	c0468000 	.word	0xc0468000
   b55bc:	c0380000 	.word	0xc0380000
   b55c0:	c2200000 	.word	0xc2200000
   b55c4:	40320000 	.word	0x40320000
   b55c8:	c0360000 	.word	0xc0360000
   b55cc:	c29c0000 	.word	0xc29c0000
   b55d0:	40440000 	.word	0x40440000
   b55d4:	c0430000 	.word	0xc0430000
   b55d8:	405f4000 	.word	0x405f4000
   b55dc:	40538000 	.word	0x40538000
   b55e0:	40598000 	.word	0x40598000
   b55e4:	00000000 	.word	0x00000000

000b55e8 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b55e8:	b510      	push	{r4, lr}
   b55ea:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);   //Multiply by Pi/180
   b55ee:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b55f2:	b082      	sub	sp, #8
  return deg * (3.14159/180);   //Multiply by Pi/180
   b55f4:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b55f8:	eef0 aa41 	vmov.f32	s21, s2
   b55fc:	eeb0 aa61 	vmov.f32	s20, s3
   b5600:	eef0 8a60 	vmov.f32	s17, s1
   b5604:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5608:	f00e fc36 	bl	c3e78 <__aeabi_f2d>
   b560c:	a342      	add	r3, pc, #264	; (adr r3, b5718 <_Z12calcDistanceffff+0x130>)
   b560e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5612:	f00e fc89 	bl	c3f28 <__aeabi_dmul>
   b5616:	f00e ff7f 	bl	c4518 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b561a:	ee07 0a90 	vmov	s15, r0
   b561e:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b5622:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b5626:	f00c ff5b 	bl	c24e0 <sinf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b562a:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b562e:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5632:	f00e fc21 	bl	c3e78 <__aeabi_f2d>
   b5636:	a338      	add	r3, pc, #224	; (adr r3, b5718 <_Z12calcDistanceffff+0x130>)
   b5638:	e9d3 2300 	ldrd	r2, r3, [r3]
   b563c:	f00e fc74 	bl	c3f28 <__aeabi_dmul>
   b5640:	f00e ff6a 	bl	c4518 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5644:	ee00 0a10 	vmov	s0, r0
   b5648:	f00c ff12 	bl	c2470 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b564c:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5650:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5654:	f00e fc10 	bl	c3e78 <__aeabi_f2d>
   b5658:	a32f      	add	r3, pc, #188	; (adr r3, b5718 <_Z12calcDistanceffff+0x130>)
   b565a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b565e:	f00e fc63 	bl	c3f28 <__aeabi_dmul>
   b5662:	f00e ff59 	bl	c4518 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5666:	ee00 0a10 	vmov	s0, r0
   b566a:	f00c ff01 	bl	c2470 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b566e:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5672:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5676:	ee17 0a90 	vmov	r0, s15
   b567a:	f00e fbfd 	bl	c3e78 <__aeabi_f2d>
   b567e:	a326      	add	r3, pc, #152	; (adr r3, b5718 <_Z12calcDistanceffff+0x130>)
   b5680:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5684:	f00e fc50 	bl	c3f28 <__aeabi_dmul>
   b5688:	f00e ff46 	bl	c4518 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b568c:	ee07 0a90 	vmov	s15, r0
   b5690:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b5694:	f00c ff24 	bl	c24e0 <sinf>
   b5698:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b569c:	ee68 8a80 	vmul.f32	s17, s17, s0
   b56a0:	ee28 8a80 	vmul.f32	s16, s17, s0
   b56a4:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b56a8:	eeb0 0a48 	vmov.f32	s0, s16
   b56ac:	f00c ff90 	bl	c25d0 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b56b0:	ee18 0a10 	vmov	r0, s16
   b56b4:	ee10 4a10 	vmov	r4, s0
   b56b8:	f00e fbde 	bl	c3e78 <__aeabi_f2d>
   b56bc:	4602      	mov	r2, r0
   b56be:	460b      	mov	r3, r1
   b56c0:	2000      	movs	r0, #0
   b56c2:	4913      	ldr	r1, [pc, #76]	; (b5710 <_Z12calcDistanceffff+0x128>)
   b56c4:	f00e fa78 	bl	c3bb8 <__aeabi_dsub>
   b56c8:	ec41 0b10 	vmov	d0, r0, r1
   b56cc:	f00c ff44 	bl	c2558 <sqrt>
      return atan2(__type(__y), __type(__x));
   b56d0:	4620      	mov	r0, r4
   b56d2:	ed8d 0b00 	vstr	d0, [sp]
   b56d6:	f00e fbcf 	bl	c3e78 <__aeabi_f2d>
   b56da:	ed9d 1b00 	vldr	d1, [sp]
   b56de:	ec41 0b10 	vmov	d0, r0, r1
   b56e2:	f00c ff37 	bl	c2554 <atan2>
   b56e6:	ec53 2b10 	vmov	r2, r3, d0
   b56ea:	ee10 0a10 	vmov	r0, s0
   b56ee:	4619      	mov	r1, r3
   b56f0:	f00e fa64 	bl	c3bbc <__adddf3>
   b56f4:	f00e ff10 	bl	c4518 <__aeabi_d2f>
}
   b56f8:	ed9f 0a06 	vldr	s0, [pc, #24]	; b5714 <_Z12calcDistanceffff+0x12c>
   b56fc:	ee07 0a90 	vmov	s15, r0
   b5700:	ee27 0a80 	vmul.f32	s0, s15, s0
   b5704:	b002      	add	sp, #8
   b5706:	ecbd 8b08 	vpop	{d8-d11}
   b570a:	bd10      	pop	{r4, pc}
   b570c:	f3af 8000 	nop.w
   b5710:	3ff00000 	.word	0x3ff00000
   b5714:	4ac26d70 	.word	0x4ac26d70
   b5718:	a50de270 	.word	0xa50de270
   b571c:	3f91df45 	.word	0x3f91df45

000b5720 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   b5720:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){ 
   b5722:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   b5726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   b572a:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   b572e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   b5732:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){ 
   b5736:	dd37      	ble.n	b57a8 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   b5738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b573c:	dd04      	ble.n	b5748 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   b573e:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   b5742:	ecbd 8b02 	vpop	{d8}
   b5746:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   b5748:	eddf 7a2b 	vldr	s15, [pc, #172]	; b57f8 <_Z9calcDeltaff+0xd8>
   b574c:	ee77 7ae0 	vsub.f32	s15, s15, s1
   b5750:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   b5754:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b575c:	dcef      	bgt.n	b573e <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   b575e:	ee10 0a10 	vmov	r0, s0
   b5762:	f00e fb89 	bl	c3e78 <__aeabi_f2d>
   b5766:	4b25      	ldr	r3, [pc, #148]	; (b57fc <_Z9calcDeltaff+0xdc>)
   b5768:	2200      	movs	r2, #0
   b576a:	f00e fa27 	bl	c3bbc <__adddf3>
   b576e:	4602      	mov	r2, r0
   b5770:	460b      	mov	r3, r1
   b5772:	2000      	movs	r0, #0
   b5774:	2100      	movs	r1, #0
   b5776:	f00e fa1f 	bl	c3bb8 <__aeabi_dsub>
   b577a:	4604      	mov	r4, r0
   b577c:	ee18 0a10 	vmov	r0, s16
   b5780:	460d      	mov	r5, r1
   b5782:	f00e fb79 	bl	c3e78 <__aeabi_f2d>
   b5786:	4602      	mov	r2, r0
   b5788:	460b      	mov	r3, r1
   b578a:	2000      	movs	r0, #0
   b578c:	491b      	ldr	r1, [pc, #108]	; (b57fc <_Z9calcDeltaff+0xdc>)
   b578e:	f00e fa13 	bl	c3bb8 <__aeabi_dsub>
   b5792:	4602      	mov	r2, r0
   b5794:	460b      	mov	r3, r1
   b5796:	4620      	mov	r0, r4
   b5798:	4629      	mov	r1, r5
   b579a:	f00e fa0d 	bl	c3bb8 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b579e:	f00e febb 	bl	c4518 <__aeabi_d2f>
   b57a2:	ee00 0a10 	vmov	s0, r0
   b57a6:	e7cc      	b.n	b5742 <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   b57a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b57ac:	ddc7      	ble.n	b573e <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   b57ae:	eddf 7a12 	vldr	s15, [pc, #72]	; b57f8 <_Z9calcDeltaff+0xd8>
   b57b2:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   b57b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b57ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b57be:	d4be      	bmi.n	b573e <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b57c0:	ee10 0a10 	vmov	r0, s0
   b57c4:	f00e fb58 	bl	c3e78 <__aeabi_f2d>
   b57c8:	4602      	mov	r2, r0
   b57ca:	460b      	mov	r3, r1
   b57cc:	2000      	movs	r0, #0
   b57ce:	490b      	ldr	r1, [pc, #44]	; (b57fc <_Z9calcDeltaff+0xdc>)
   b57d0:	f00e f9f2 	bl	c3bb8 <__aeabi_dsub>
   b57d4:	4604      	mov	r4, r0
   b57d6:	ee18 0a10 	vmov	r0, s16
   b57da:	460d      	mov	r5, r1
   b57dc:	f00e fb4c 	bl	c3e78 <__aeabi_f2d>
   b57e0:	4b06      	ldr	r3, [pc, #24]	; (b57fc <_Z9calcDeltaff+0xdc>)
   b57e2:	2200      	movs	r2, #0
   b57e4:	f00e f9ea 	bl	c3bbc <__adddf3>
   b57e8:	4602      	mov	r2, r0
   b57ea:	460b      	mov	r3, r1
   b57ec:	4620      	mov	r0, r4
   b57ee:	4629      	mov	r1, r5
   b57f0:	f00e f9e4 	bl	c3bbc <__adddf3>
   b57f4:	e7d3      	b.n	b579e <_Z9calcDeltaff+0x7e>
   b57f6:	bf00      	nop
   b57f8:	43340000 	.word	0x43340000
   b57fc:	40668000 	.word	0x40668000

000b5800 <_Z15getPositionDatav>:
void getPositionData(){
   b5800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5804:	ed2d 8b02 	vpush	{d8}
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   b5808:	4c59      	ldr	r4, [pc, #356]	; (b5970 <_Z15getPositionDatav+0x170>)
void getPositionData(){
   b580a:	b08b      	sub	sp, #44	; 0x2c
   b580c:	f008 fada 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   b5810:	6823      	ldr	r3, [r4, #0]
   b5812:	1ac0      	subs	r0, r0, r3
   b5814:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b5818:	f240 809c 	bls.w	b5954 <_Z15getPositionDatav+0x154>
   b581c:	f008 fad2 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b5820:	4b54      	ldr	r3, [pc, #336]	; (b5974 <_Z15getPositionDatav+0x174>)
        positionTimer = millis();                       //Reset timer
   b5822:	6020      	str	r0, [r4, #0]
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b5824:	2501      	movs	r5, #1
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   b5826:	4854      	ldr	r0, [pc, #336]	; (b5978 <_Z15getPositionDatav+0x178>)
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b5828:	701d      	strb	r5, [r3, #0]
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   b582a:	f240 414c 	movw	r1, #1100	; 0x44c
   b582e:	f007 fe3f 	bl	bd4b0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b5832:	4c52      	ldr	r4, [pc, #328]	; (b597c <_Z15getPositionDatav+0x17c>)
   b5834:	2800      	cmp	r0, #0
   b5836:	f000 8092 	beq.w	b595e <_Z15getPositionDatav+0x15e>
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b583a:	f240 414c 	movw	r1, #1100	; 0x44c
   b583e:	484e      	ldr	r0, [pc, #312]	; (b5978 <_Z15getPositionDatav+0x178>)
   b5840:	ed9f 8a4f 	vldr	s16, [pc, #316]	; b5980 <_Z15getPositionDatav+0x180>
   b5844:	f007 fed7 	bl	bd5f6 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b5848:	ee07 0a90 	vmov	s15, r0
   b584c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5850:	4b4c      	ldr	r3, [pc, #304]	; (b5984 <_Z15getPositionDatav+0x184>)
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5852:	4849      	ldr	r0, [pc, #292]	; (b5978 <_Z15getPositionDatav+0x178>)
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b5854:	ee87 7a88 	vdiv.f32	s14, s15, s16
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5858:	f240 414c 	movw	r1, #1100	; 0x44c
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b585c:	ed83 7a00 	vstr	s14, [r3]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5860:	f007 fea6 	bl	bd5b0 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b5864:	ee07 0a90 	vmov	s15, r0
   b5868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b586c:	4b46      	ldr	r3, [pc, #280]	; (b5988 <_Z15getPositionDatav+0x188>)
            GPSAvail = true;
   b586e:	7025      	strb	r5, [r4, #0]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b5870:	ee87 7a88 	vdiv.f32	s14, s15, s16
   b5874:	ed83 7a00 	vstr	s14, [r3]
        lis3mdl.read();                                 // get X Y and Z data at once
   b5878:	4844      	ldr	r0, [pc, #272]	; (b598c <_Z15getPositionDatav+0x18c>)
   b587a:	f002 fdb5 	bl	b83e8 <_ZN16Adafruit_LIS3MDL4readEv>
        bool CompassAvail = lis3mdl.getEvent(&event);   //Get event data over I2C from compass
   b587e:	4843      	ldr	r0, [pc, #268]	; (b598c <_Z15getPositionDatav+0x18c>)
   b5880:	a901      	add	r1, sp, #4
   b5882:	f002 fdf7 	bl	b8474 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(CompassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b5886:	4604      	mov	r4, r0
   b5888:	b140      	cbz	r0, b589c <_Z15getPositionDatav+0x9c>
   b588a:	eddd 0a07 	vldr	s1, [sp, #28]
   b588e:	ed9d 0a06 	vldr	s0, [sp, #24]
   b5892:	f7ff fd49 	bl	b5328 <_Z18readCompassHeadingff>
   b5896:	4b3e      	ldr	r3, [pc, #248]	; (b5990 <_Z15getPositionDatav+0x190>)
   b5898:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){         //Check that the target latitude and longitude are valid
   b589c:	4e3d      	ldr	r6, [pc, #244]	; (b5994 <_Z15getPositionDatav+0x194>)
   b589e:	ed9f 6a3e 	vldr	s12, [pc, #248]	; b5998 <_Z15getPositionDatav+0x198>
   b58a2:	ed96 7a00 	vldr	s14, [r6]
   b58a6:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b58aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b58ae:	db51      	blt.n	b5954 <_Z15getPositionDatav+0x154>
   b58b0:	eddf 6a3a 	vldr	s13, [pc, #232]	; b599c <_Z15getPositionDatav+0x19c>
   b58b4:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b58b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b58bc:	d84a      	bhi.n	b5954 <_Z15getPositionDatav+0x154>
   b58be:	f8df 80f8 	ldr.w	r8, [pc, #248]	; b59b8 <_Z15getPositionDatav+0x1b8>
   b58c2:	edd8 7a00 	vldr	s15, [r8]
   b58c6:	eef4 7ac6 	vcmpe.f32	s15, s12
   b58ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b58ce:	db41      	blt.n	b5954 <_Z15getPositionDatav+0x154>
   b58d0:	eef4 7ae6 	vcmpe.f32	s15, s13
   b58d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b58d8:	d83c      	bhi.n	b5954 <_Z15getPositionDatav+0x154>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   b58da:	4f2a      	ldr	r7, [pc, #168]	; (b5984 <_Z15getPositionDatav+0x184>)
   b58dc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; b5988 <_Z15getPositionDatav+0x188>
   b58e0:	edd7 0a00 	vldr	s1, [r7]
   b58e4:	ed99 0a00 	vldr	s0, [r9]
   b58e8:	4d2d      	ldr	r5, [pc, #180]	; (b59a0 <_Z15getPositionDatav+0x1a0>)
  { return __builtin_atan2f(__y, __x); }
   b58ea:	ee77 0a60 	vsub.f32	s1, s14, s1
   b58ee:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b58f2:	f00c fe6b 	bl	c25cc <atan2f>
   b58f6:	eddf 7a2b 	vldr	s15, [pc, #172]	; b59a4 <_Z15getPositionDatav+0x1a4>
   b58fa:	ee60 7a27 	vmul.f32	s15, s0, s15
   b58fe:	ee17 0a90 	vmov	r0, s15
   b5902:	f00e fab9 	bl	c3e78 <__aeabi_f2d>
   b5906:	a318      	add	r3, pc, #96	; (adr r3, b5968 <_Z15getPositionDatav+0x168>)
   b5908:	e9d3 2300 	ldrd	r2, r3, [r3]
   b590c:	f00e fc36 	bl	c417c <__aeabi_ddiv>
   b5910:	f00e fe02 	bl	c4518 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b5914:	edd9 1a00 	vldr	s3, [r9]
   b5918:	ed98 1a00 	vldr	s2, [r8]
   b591c:	edd7 0a00 	vldr	s1, [r7]
   b5920:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   b5924:	6028      	str	r0, [r5, #0]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b5926:	f7ff fe5f 	bl	b55e8 <_Z12calcDistanceffff>
   b592a:	4b1f      	ldr	r3, [pc, #124]	; (b59a8 <_Z15getPositionDatav+0x1a8>)
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   b592c:	edd5 0a00 	vldr	s1, [r5]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b5930:	ed83 0a00 	vstr	s0, [r3]
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   b5934:	4b16      	ldr	r3, [pc, #88]	; (b5990 <_Z15getPositionDatav+0x190>)
   b5936:	ed93 0a00 	vldr	s0, [r3]
   b593a:	f7ff fef1 	bl	b5720 <_Z9calcDeltaff>
   b593e:	4b1b      	ldr	r3, [pc, #108]	; (b59ac <_Z15getPositionDatav+0x1ac>)
   b5940:	ed83 0a00 	vstr	s0, [r3]
   b5944:	f008 fa3e 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();                                                           //Update telemetry time
   b5948:	4b19      	ldr	r3, [pc, #100]	; (b59b0 <_Z15getPositionDatav+0x1b0>)
   b594a:	6018      	str	r0, [r3, #0]
            if(CompassAvail) telemetryAvail = true;                                             //If compass and GPS are available, set flag to true
   b594c:	b114      	cbz	r4, b5954 <_Z15getPositionDatav+0x154>
   b594e:	4b19      	ldr	r3, [pc, #100]	; (b59b4 <_Z15getPositionDatav+0x1b4>)
   b5950:	2201      	movs	r2, #1
   b5952:	701a      	strb	r2, [r3, #0]
}
   b5954:	b00b      	add	sp, #44	; 0x2c
   b5956:	ecbd 8b02 	vpop	{d8}
   b595a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else GPSAvail = false;                          //Set flag to indicate GPS unavailable if not connected
   b595e:	7020      	strb	r0, [r4, #0]
   b5960:	e78a      	b.n	b5878 <_Z15getPositionDatav+0x78>
   b5962:	bf00      	nop
   b5964:	f3af 8000 	nop.w
   b5968:	54442d18 	.word	0x54442d18
   b596c:	400921fb 	.word	0x400921fb
   b5970:	2003e0b0 	.word	0x2003e0b0
   b5974:	2003e5ec 	.word	0x2003e5ec
   b5978:	2003df2c 	.word	0x2003df2c
   b597c:	2003dd60 	.word	0x2003dd60
   b5980:	49742400 	.word	0x49742400
   b5984:	2003ddf8 	.word	0x2003ddf8
   b5988:	2003ded4 	.word	0x2003ded4
   b598c:	2003de1c 	.word	0x2003de1c
   b5990:	2003dda0 	.word	0x2003dda0
   b5994:	2003e5d0 	.word	0x2003e5d0
   b5998:	c2b40000 	.word	0xc2b40000
   b599c:	42b40000 	.word	0x42b40000
   b59a0:	2003e5e0 	.word	0x2003e5e0
   b59a4:	43340000 	.word	0x43340000
   b59a8:	2003e5dc 	.word	0x2003e5dc
   b59ac:	2003e5cc 	.word	0x2003e5cc
   b59b0:	2003ddf4 	.word	0x2003ddf4
   b59b4:	2003e5d8 	.word	0x2003e5d8
   b59b8:	2003e5d4 	.word	0x2003e5d4

000b59bc <_Z12updateMotorsv>:
void updateMotors(){
   b59bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b59c0:	f8df a254 	ldr.w	sl, [pc, #596]	; b5c18 <_Z12updateMotorsv+0x25c>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b59c4:	4b85      	ldr	r3, [pc, #532]	; (b5bdc <_Z12updateMotorsv+0x220>)
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b59c6:	f89a 2000 	ldrb.w	r2, [sl]
void updateMotors(){
   b59ca:	ed2d 8b04 	vpush	{d8-d9}
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b59ce:	781b      	ldrb	r3, [r3, #0]
void updateMotors(){
   b59d0:	b083      	sub	sp, #12
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b59d2:	2a00      	cmp	r2, #0
   b59d4:	f000 80f0 	beq.w	b5bb8 <_Z12updateMotorsv+0x1fc>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b59d8:	3b01      	subs	r3, #1
   b59da:	2b01      	cmp	r3, #1
   b59dc:	4c80      	ldr	r4, [pc, #512]	; (b5be0 <_Z12updateMotorsv+0x224>)
   b59de:	4f81      	ldr	r7, [pc, #516]	; (b5be4 <_Z12updateMotorsv+0x228>)
   b59e0:	4d81      	ldr	r5, [pc, #516]	; (b5be8 <_Z12updateMotorsv+0x22c>)
   b59e2:	4e82      	ldr	r6, [pc, #520]	; (b5bec <_Z12updateMotorsv+0x230>)
   b59e4:	f200 8099 	bhi.w	b5b1a <_Z12updateMotorsv+0x15e>
            if(travelDistance < MTR_CUTOFF_RAD){            //If the bot is close enough to the center when in autonomous and sentry, then disable motors and float there
   b59e8:	4b81      	ldr	r3, [pc, #516]	; (b5bf0 <_Z12updateMotorsv+0x234>)
   b59ea:	edd3 7a00 	vldr	s15, [r3]
   b59ee:	4b81      	ldr	r3, [pc, #516]	; (b5bf4 <_Z12updateMotorsv+0x238>)
   b59f0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b59f4:	eef4 7ac7 	vcmpe.f32	s15, s14
   b59f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b59fc:	d53d      	bpl.n	b5a7a <_Z12updateMotorsv+0xbe>
                pointArrived = true;                        //Indicate that the bot has arrived at the target point, which acts as a disable until it drifts out of the larger radius
   b59fe:	2201      	movs	r2, #1
   b5a00:	701a      	strb	r2, [r3, #0]
                leftMotorSpeed = setLSpeed = 90;            //Set left and right motor speeds to off
   b5a02:	235a      	movs	r3, #90	; 0x5a
   b5a04:	7023      	strb	r3, [r4, #0]
   b5a06:	703b      	strb	r3, [r7, #0]
                rightMotorSpeed = setRSpeed = 90;
   b5a08:	702b      	strb	r3, [r5, #0]
   b5a0a:	7033      	strb	r3, [r6, #0]
        if(setLSpeed < 90 && setLSpeed >= MTR_ST_REV) setLSpeed = MTR_ST_REV;
   b5a0c:	7823      	ldrb	r3, [r4, #0]
   b5a0e:	3b4b      	subs	r3, #75	; 0x4b
   b5a10:	2b0e      	cmp	r3, #14
   b5a12:	bf9c      	itt	ls
   b5a14:	234b      	movls	r3, #75	; 0x4b
   b5a16:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >= MTR_ST_REV) setRSpeed = MTR_ST_REV;
   b5a18:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5a1a:	7822      	ldrb	r2, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >= MTR_ST_REV) setRSpeed = MTR_ST_REV;
   b5a1c:	3b4b      	subs	r3, #75	; 0x4b
   b5a1e:	2b0e      	cmp	r3, #14
   b5a20:	bf9c      	itt	ls
   b5a22:	234b      	movls	r3, #75	; 0x4b
   b5a24:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5a26:	783b      	ldrb	r3, [r7, #0]
   b5a28:	4293      	cmp	r3, r2
   b5a2a:	f080 80b3 	bcs.w	b5b94 <_Z12updateMotorsv+0x1d8>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;   //If we're off by more than one step size, then increment by one step
   b5a2e:	1ad1      	subs	r1, r2, r3
   b5a30:	2903      	cmp	r1, #3
   b5a32:	f340 80b6 	ble.w	b5ba2 <_Z12updateMotorsv+0x1e6>
   b5a36:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b5a38:	703b      	strb	r3, [r7, #0]
        if(rightMotorSpeed < setRSpeed){                                                    //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5a3a:	7833      	ldrb	r3, [r6, #0]
   b5a3c:	782a      	ldrb	r2, [r5, #0]
   b5a3e:	4293      	cmp	r3, r2
   b5a40:	f080 80b1 	bcs.w	b5ba6 <_Z12updateMotorsv+0x1ea>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD; //If we're off by more than one step size, then increment by one step
   b5a44:	1ad1      	subs	r1, r2, r3
   b5a46:	2903      	cmp	r1, #3
   b5a48:	f340 80b4 	ble.w	b5bb4 <_Z12updateMotorsv+0x1f8>
   b5a4c:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b5a4e:	7033      	strb	r3, [r6, #0]
        if(!stopActive){                    //If there has not been a stop command, then update the ESC
   b5a50:	4b69      	ldr	r3, [pc, #420]	; (b5bf8 <_Z12updateMotorsv+0x23c>)
   b5a52:	781b      	ldrb	r3, [r3, #0]
   b5a54:	b94b      	cbnz	r3, b5a6a <_Z12updateMotorsv+0xae>
            ESCL.write(leftMotorSpeed);
   b5a56:	7839      	ldrb	r1, [r7, #0]
   b5a58:	4868      	ldr	r0, [pc, #416]	; (b5bfc <_Z12updateMotorsv+0x240>)
   b5a5a:	f00b fe1a 	bl	c1692 <_ZN5Servo5writeEi>
            ESCR.write(180-rightMotorSpeed);
   b5a5e:	7831      	ldrb	r1, [r6, #0]
   b5a60:	4867      	ldr	r0, [pc, #412]	; (b5c00 <_Z12updateMotorsv+0x244>)
   b5a62:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b5a66:	f00b fe14 	bl	c1692 <_ZN5Servo5writeEi>
        updateMotorControl = false;        //Set the flag to false
   b5a6a:	2300      	movs	r3, #0
   b5a6c:	f88a 3000 	strb.w	r3, [sl]
}
   b5a70:	b003      	add	sp, #12
   b5a72:	ecbd 8b04 	vpop	{d8-d9}
   b5a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){      //Check if the bot is inside of the larger radius of approaching the target point, start slowing motors here
   b5a7a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b5a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5a86:	d55e      	bpl.n	b5b46 <_Z12updateMotorsv+0x18a>
                if(pointArrived){                           //If we had already arrived at the target point, then use this larger radius as a deadzone so we don't have rapid on/off on the small radius border
   b5a88:	781b      	ldrb	r3, [r3, #0]
   b5a8a:	9301      	str	r3, [sp, #4]
   b5a8c:	b11b      	cbz	r3, b5a96 <_Z12updateMotorsv+0xda>
                    setLSpeed = 90;                         //Keep motors off here
   b5a8e:	235a      	movs	r3, #90	; 0x5a
   b5a90:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <= MTR_ST_FWD) setRSpeed = MTR_ST_FWD;
   b5a92:	702b      	strb	r3, [r5, #0]
   b5a94:	e7ba      	b.n	b5a0c <_Z12updateMotorsv+0x50>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);    //Take the base 90 (stopped speed), add the delta for how much the heading is off, and slow with distance
   b5a96:	4b5b      	ldr	r3, [pc, #364]	; (b5c04 <_Z12updateMotorsv+0x248>)
   b5a98:	eddf 8a5b 	vldr	s17, [pc, #364]	; b5c08 <_Z12updateMotorsv+0x24c>
   b5a9c:	ed93 8a00 	vldr	s16, [r3]
   b5aa0:	4b5a      	ldr	r3, [pc, #360]	; (b5c0c <_Z12updateMotorsv+0x250>)
   b5aa2:	eee8 8a28 	vfma.f32	s17, s16, s17
   b5aa6:	ed93 7a00 	vldr	s14, [r3]
   b5aaa:	ee17 0a90 	vmov	r0, s15
   b5aae:	ee28 8a07 	vmul.f32	s16, s16, s14
   b5ab2:	f00e f9e1 	bl	c3e78 <__aeabi_f2d>
   b5ab6:	4b56      	ldr	r3, [pc, #344]	; (b5c10 <_Z12updateMotorsv+0x254>)
   b5ab8:	2200      	movs	r2, #0
   b5aba:	f00e fa35 	bl	c3f28 <__aeabi_dmul>
   b5abe:	ee78 7a88 	vadd.f32	s15, s17, s16
   b5ac2:	4680      	mov	r8, r0
   b5ac4:	4689      	mov	r9, r1
   b5ac6:	ee17 0a90 	vmov	r0, s15
   b5aca:	f00e f9d5 	bl	c3e78 <__aeabi_f2d>
   b5ace:	4642      	mov	r2, r8
   b5ad0:	464b      	mov	r3, r9
   b5ad2:	f00e fa29 	bl	c3f28 <__aeabi_dmul>
   b5ad6:	f00e fcd7 	bl	c4488 <__aeabi_d2iz>
   b5ada:	4683      	mov	fp, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b5adc:	ee18 0a90 	vmov	r0, s17
   b5ae0:	f00e f9ca 	bl	c3e78 <__aeabi_f2d>
   b5ae4:	ec41 0b19 	vmov	d9, r0, r1
   b5ae8:	ee18 0a10 	vmov	r0, s16
   b5aec:	f00e f9c4 	bl	c3e78 <__aeabi_f2d>
   b5af0:	4642      	mov	r2, r8
   b5af2:	464b      	mov	r3, r9
   b5af4:	f00e fa18 	bl	c3f28 <__aeabi_dmul>
   b5af8:	4602      	mov	r2, r0
   b5afa:	460b      	mov	r3, r1
   b5afc:	ec51 0b19 	vmov	r0, r1, d9
   b5b00:	f00e f85a 	bl	c3bb8 <__aeabi_dsub>
   b5b04:	f00e fcc0 	bl	c4488 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;             //Cap the speed between 0 and 180
   b5b08:	f1bb 0f00 	cmp.w	fp, #0
   b5b0c:	da12      	bge.n	b5b34 <_Z12updateMotorsv+0x178>
   b5b0e:	9b01      	ldr	r3, [sp, #4]
                    else if(Lset > 180) setLSpeed = 180;
   b5b10:	7023      	strb	r3, [r4, #0]
                    if(Rset < 0) setRSpeed = 0;
   b5b12:	2800      	cmp	r0, #0
   b5b14:	da13      	bge.n	b5b3e <_Z12updateMotorsv+0x182>
   b5b16:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b5b18:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <= MTR_ST_FWD) setLSpeed = MTR_ST_FWD; //Push motor speed out of deadzone to make sure the motors actually respond to non-90 inputs
   b5b1a:	7823      	ldrb	r3, [r4, #0]
   b5b1c:	3b5b      	subs	r3, #91	; 0x5b
   b5b1e:	2b13      	cmp	r3, #19
   b5b20:	bf9c      	itt	ls
   b5b22:	236e      	movls	r3, #110	; 0x6e
   b5b24:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <= MTR_ST_FWD) setRSpeed = MTR_ST_FWD;
   b5b26:	782b      	ldrb	r3, [r5, #0]
   b5b28:	3b5b      	subs	r3, #91	; 0x5b
   b5b2a:	2b13      	cmp	r3, #19
   b5b2c:	f63f af6e 	bhi.w	b5a0c <_Z12updateMotorsv+0x50>
   b5b30:	236e      	movs	r3, #110	; 0x6e
   b5b32:	e7ae      	b.n	b5a92 <_Z12updateMotorsv+0xd6>
                    else if(Lset > 180) setLSpeed = 180;
   b5b34:	f1bb 0fb4 	cmp.w	fp, #180	; 0xb4
   b5b38:	ddeb      	ble.n	b5b12 <_Z12updateMotorsv+0x156>
   b5b3a:	23b4      	movs	r3, #180	; 0xb4
   b5b3c:	e7e8      	b.n	b5b10 <_Z12updateMotorsv+0x154>
                    else if(Rset > 180) setRSpeed = 180;
   b5b3e:	28b4      	cmp	r0, #180	; 0xb4
   b5b40:	ddeb      	ble.n	b5b1a <_Z12updateMotorsv+0x15e>
   b5b42:	23b4      	movs	r3, #180	; 0xb4
   b5b44:	e7e8      	b.n	b5b18 <_Z12updateMotorsv+0x15c>
                pointArrived = false;                       //Set flag back to false so we have to travel to the inner circle, also happens usually when a new point is specified
   b5b46:	2100      	movs	r1, #0
   b5b48:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5b4a:	4b2e      	ldr	r3, [pc, #184]	; (b5c04 <_Z12updateMotorsv+0x248>)
   b5b4c:	eddf 7a2e 	vldr	s15, [pc, #184]	; b5c08 <_Z12updateMotorsv+0x24c>
   b5b50:	edd3 6a00 	vldr	s13, [r3]
   b5b54:	4b2d      	ldr	r3, [pc, #180]	; (b5c0c <_Z12updateMotorsv+0x250>)
   b5b56:	eee6 7aa7 	vfma.f32	s15, s13, s15
   b5b5a:	ed93 6a00 	vldr	s12, [r3]
   b5b5e:	eeb0 7a67 	vmov.f32	s14, s15
   b5b62:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5b66:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5b6a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5b72:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b5b76:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5b78:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b5b7c:	da05      	bge.n	b5b8a <_Z12updateMotorsv+0x1ce>
   b5b7e:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b5b80:	2b00      	cmp	r3, #0
   b5b82:	dbc8      	blt.n	b5b16 <_Z12updateMotorsv+0x15a>
                else if(Rset > 180) setRSpeed = 180;
   b5b84:	2bb4      	cmp	r3, #180	; 0xb4
   b5b86:	dcdc      	bgt.n	b5b42 <_Z12updateMotorsv+0x186>
   b5b88:	e7c6      	b.n	b5b18 <_Z12updateMotorsv+0x15c>
                else if(Lset > 180) setLSpeed = 180;
   b5b8a:	2ab4      	cmp	r2, #180	; 0xb4
   b5b8c:	bfc8      	it	gt
   b5b8e:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b5b90:	7022      	strb	r2, [r4, #0]
   b5b92:	e7f5      	b.n	b5b80 <_Z12updateMotorsv+0x1c4>
        else if(leftMotorSpeed > setLSpeed){                                                //If the acutal motor (leftMotorSpeed) speed is greater than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5b94:	f67f af51 	bls.w	b5a3a <_Z12updateMotorsv+0x7e>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b5b98:	1a99      	subs	r1, r3, r2
   b5b9a:	2903      	cmp	r1, #3
   b5b9c:	dd01      	ble.n	b5ba2 <_Z12updateMotorsv+0x1e6>
   b5b9e:	3b03      	subs	r3, #3
   b5ba0:	e74a      	b.n	b5a38 <_Z12updateMotorsv+0x7c>
            else leftMotorSpeed = setLSpeed;                                                //Otherwise, we're less than one step, so finish step function
   b5ba2:	703a      	strb	r2, [r7, #0]
   b5ba4:	e749      	b.n	b5a3a <_Z12updateMotorsv+0x7e>
        else if(rightMotorSpeed > setRSpeed){                                               //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5ba6:	f67f af53 	bls.w	b5a50 <_Z12updateMotorsv+0x94>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b5baa:	1a99      	subs	r1, r3, r2
   b5bac:	2903      	cmp	r1, #3
   b5bae:	dd01      	ble.n	b5bb4 <_Z12updateMotorsv+0x1f8>
   b5bb0:	3b03      	subs	r3, #3
   b5bb2:	e74c      	b.n	b5a4e <_Z12updateMotorsv+0x92>
            else rightMotorSpeed = setRSpeed;                                               //Otherwise, we're less than one step, so finish step function
   b5bb4:	7032      	strb	r2, [r6, #0]
   b5bb6:	e74b      	b.n	b5a50 <_Z12updateMotorsv+0x94>
    else if(driveMode == 0 && millis() - positionTimer > MANUAL_RAMP_PD){   //If in manual movement mode, there isn't a trigger for updating the motor speed, so trigger with time periodically
   b5bb8:	2b00      	cmp	r3, #0
   b5bba:	f47f af59 	bne.w	b5a70 <_Z12updateMotorsv+0xb4>
   b5bbe:	4c15      	ldr	r4, [pc, #84]	; (b5c14 <_Z12updateMotorsv+0x258>)
   b5bc0:	f008 f900 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b5bc4:	6823      	ldr	r3, [r4, #0]
   b5bc6:	1ac0      	subs	r0, r0, r3
   b5bc8:	2864      	cmp	r0, #100	; 0x64
   b5bca:	f67f af51 	bls.w	b5a70 <_Z12updateMotorsv+0xb4>
        updateMotorControl = true;
   b5bce:	2301      	movs	r3, #1
   b5bd0:	f88a 3000 	strb.w	r3, [sl]
   b5bd4:	f008 f8f6 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
        positionTimer = millis();
   b5bd8:	6020      	str	r0, [r4, #0]
}
   b5bda:	e749      	b.n	b5a70 <_Z12updateMotorsv+0xb4>
   b5bdc:	2003dda9 	.word	0x2003dda9
   b5be0:	2003e55c 	.word	0x2003e55c
   b5be4:	2003de18 	.word	0x2003de18
   b5be8:	2003e55d 	.word	0x2003e55d
   b5bec:	2003e0b5 	.word	0x2003e0b5
   b5bf0:	2003e5dc 	.word	0x2003e5dc
   b5bf4:	2003e0ad 	.word	0x2003e0ad
   b5bf8:	2003e5c5 	.word	0x2003e5c5
   b5bfc:	2003dd40 	.word	0x2003dd40
   b5c00:	2003dd50 	.word	0x2003dd50
   b5c04:	2003db24 	.word	0x2003db24
   b5c08:	42b40000 	.word	0x42b40000
   b5c0c:	2003e5cc 	.word	0x2003e5cc
   b5c10:	3fd00000 	.word	0x3fd00000
   b5c14:	2003e0b0 	.word	0x2003e0b0
   b5c18:	2003e5ec 	.word	0x2003e5ec

000b5c1c <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5c20:	b084      	sub	sp, #16
   b5c22:	af02      	add	r7, sp, #8
   b5c24:	4604      	mov	r4, r0
   b5c26:	460e      	mov	r6, r1
   b5c28:	4691      	mov	r9, r2
   b5c2a:	4698      	mov	r8, r3
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b5c2c:	f00e fdbb 	bl	c47a6 <strlen>
   b5c30:	3009      	adds	r0, #9
   b5c32:	f020 0307 	bic.w	r3, r0, #7
   b5c36:	ebad 0d03 	sub.w	sp, sp, r3
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5c3a:	4620      	mov	r0, r4
   b5c3c:	f00e fdb3 	bl	c47a6 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5c40:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5c44:	492e      	ldr	r1, [pc, #184]	; (b5d00 <_Z8sendDataPKchbbb+0xe4>)
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b5c46:	ad02      	add	r5, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5c48:	4603      	mov	r3, r0
   b5c4a:	4622      	mov	r2, r4
   b5c4c:	4628      	mov	r0, r5
   b5c4e:	f008 fbbf 	bl	be3d0 <sprintf>
    if(sendLTE || sendMode == 4){                               //If sending over LTE, just use the particle event
   b5c52:	f1ba 0f00 	cmp.w	sl, #0
   b5c56:	d101      	bne.n	b5c5c <_Z8sendDataPKchbbb+0x40>
   b5c58:	2e04      	cmp	r6, #4
   b5c5a:	d11b      	bne.n	b5c94 <_Z8sendDataPKchbbb+0x78>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5c5c:	4b29      	ldr	r3, [pc, #164]	; (b5d04 <_Z8sendDataPKchbbb+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5c5e:	492a      	ldr	r1, [pc, #168]	; (b5d08 <_Z8sendDataPKchbbb+0xec>)
   b5c60:	781b      	ldrb	r3, [r3, #0]
   b5c62:	f88d 3000 	strb.w	r3, [sp]
   b5c66:	462a      	mov	r2, r5
   b5c68:	233c      	movs	r3, #60	; 0x3c
   b5c6a:	4638      	mov	r0, r7
   b5c6c:	f009 ff78 	bl	bfb60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5c70:	687c      	ldr	r4, [r7, #4]
   b5c72:	b17c      	cbz	r4, b5c94 <_Z8sendDataPKchbbb+0x78>
      if (--_M_use_count == 0)
   b5c74:	6863      	ldr	r3, [r4, #4]
   b5c76:	3b01      	subs	r3, #1
   b5c78:	6063      	str	r3, [r4, #4]
   b5c7a:	b95b      	cbnz	r3, b5c94 <_Z8sendDataPKchbbb+0x78>
          _M_dispose();
   b5c7c:	6823      	ldr	r3, [r4, #0]
   b5c7e:	4620      	mov	r0, r4
   b5c80:	689b      	ldr	r3, [r3, #8]
   b5c82:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5c84:	68a3      	ldr	r3, [r4, #8]
   b5c86:	3b01      	subs	r3, #1
   b5c88:	60a3      	str	r3, [r4, #8]
   b5c8a:	b91b      	cbnz	r3, b5c94 <_Z8sendDataPKchbbb+0x78>
            _M_destroy();
   b5c8c:	6823      	ldr	r3, [r4, #0]
   b5c8e:	4620      	mov	r0, r4
   b5c90:	68db      	ldr	r3, [r3, #12]
   b5c92:	4798      	blx	r3
    if((sendBLE || sendMode == 1) && BLE.connected()){          //Check that BLE is connected before trying to transmit here
   b5c94:	f1b9 0f00 	cmp.w	r9, #0
   b5c98:	d101      	bne.n	b5c9e <_Z8sendDataPKchbbb+0x82>
   b5c9a:	2e01      	cmp	r6, #1
   b5c9c:	d121      	bne.n	b5ce2 <_Z8sendDataPKchbbb+0xc6>
   b5c9e:	f008 ff57 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ca2:	f008 ffb3 	bl	bec0c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5ca6:	b1e0      	cbz	r0, b5ce2 <_Z8sendDataPKchbbb+0xc6>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5ca8:	4628      	mov	r0, r5
   b5caa:	f00e fd7c 	bl	c47a6 <strlen>
   b5cae:	3007      	adds	r0, #7
   b5cb0:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5cb4:	466c      	mov	r4, sp
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5cb6:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b5cba:	4628      	mov	r0, r5
   b5cbc:	f00e fd73 	bl	c47a6 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5cc0:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b5cc4:	4602      	mov	r2, r0
   b5cc6:	4629      	mov	r1, r5
   b5cc8:	4648      	mov	r0, r9
   b5cca:	f00e fcb9 	bl	c4640 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5cce:	4628      	mov	r0, r5
   b5cd0:	f00e fd69 	bl	c47a6 <strlen>
   b5cd4:	2300      	movs	r3, #0
   b5cd6:	4602      	mov	r2, r0
   b5cd8:	4649      	mov	r1, r9
   b5cda:	480c      	ldr	r0, [pc, #48]	; (b5d0c <_Z8sendDataPKchbbb+0xf0>)
   b5cdc:	f008 fe28 	bl	be930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5ce0:	46a5      	mov	sp, r4
    if(sendXBee || sendMode == 2){                              //Send out over the harware serial to go through XBee
   b5ce2:	f1b8 0f00 	cmp.w	r8, #0
   b5ce6:	d101      	bne.n	b5cec <_Z8sendDataPKchbbb+0xd0>
   b5ce8:	2e02      	cmp	r6, #2
   b5cea:	d104      	bne.n	b5cf6 <_Z8sendDataPKchbbb+0xda>
        Serial1.println(outStr);
   b5cec:	f00c fa82 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   b5cf0:	4629      	mov	r1, r5
   b5cf2:	f00b fc5c 	bl	c15ae <_ZN5Print7printlnEPKc>
}
   b5cf6:	3708      	adds	r7, #8
   b5cf8:	46bd      	mov	sp, r7
   b5cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5cfe:	bf00      	nop
   b5d00:	000c6c86 	.word	0x000c6c86
   b5d04:	2003dd7c 	.word	0x2003dd7c
   b5d08:	000c6c8d 	.word	0x000c6c8d
   b5d0c:	2003e5e4 	.word	0x2003e5e4

000b5d10 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b5d10:	b5f0      	push	{r4, r5, r6, r7, lr}
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b5d12:	2015      	movs	r0, #21
uint8_t readPowerSys(){
   b5d14:	b087      	sub	sp, #28
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b5d16:	f00c f9fe 	bl	c2116 <analogRead>
   b5d1a:	ee07 0a90 	vmov	s15, r0
   b5d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b5d22:	4e53      	ldr	r6, [pc, #332]	; (b5e70 <_Z12readPowerSysv+0x160>)
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b5d24:	ee17 0a90 	vmov	r0, s15
   b5d28:	f00e f8a6 	bl	c3e78 <__aeabi_f2d>
   b5d2c:	a348      	add	r3, pc, #288	; (adr r3, b5e50 <_Z12readPowerSysv+0x140>)
   b5d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d32:	f00e f8f9 	bl	c3f28 <__aeabi_dmul>
   b5d36:	f00e fbef 	bl	c4518 <__aeabi_d2f>
   b5d3a:	4b4e      	ldr	r3, [pc, #312]	; (b5e74 <_Z12readPowerSysv+0x164>)
   b5d3c:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));  //Get raw percentage from voltage divider
   b5d3e:	f00e f89b 	bl	c3e78 <__aeabi_f2d>
   b5d42:	a345      	add	r3, pc, #276	; (adr r3, b5e58 <_Z12readPowerSysv+0x148>)
   b5d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d48:	f00d ff36 	bl	c3bb8 <__aeabi_dsub>
   b5d4c:	4b4a      	ldr	r3, [pc, #296]	; (b5e78 <_Z12readPowerSysv+0x168>)
   b5d4e:	2200      	movs	r2, #0
   b5d50:	f00e f8ea 	bl	c3f28 <__aeabi_dmul>
   b5d54:	a342      	add	r3, pc, #264	; (adr r3, b5e60 <_Z12readPowerSysv+0x150>)
   b5d56:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5d5a:	f00e fa0f 	bl	c417c <__aeabi_ddiv>
   b5d5e:	f00e fb93 	bl	c4488 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;                                              //Max/min percentage so there is a slight deadzone at either end
   b5d62:	2864      	cmp	r0, #100	; 0x64
   b5d64:	4603      	mov	r3, r0
   b5d66:	bfa8      	it	ge
   b5d68:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b5d6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b5d6e:	2814      	cmp	r0, #20
   b5d70:	7033      	strb	r3, [r6, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;                      //Check if battery percentage is low, if low then set flag so the LED flashes and the CChub pops up an alert
   b5d72:	4b42      	ldr	r3, [pc, #264]	; (b5e7c <_Z12readPowerSysv+0x16c>)
   b5d74:	bfcc      	ite	gt
   b5d76:	2000      	movgt	r0, #0
   b5d78:	2001      	movle	r0, #1
   b5d7a:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095; //Read the amplified input from the shunt from the batter and solar array and calculate the multiplier based on the resistor value and datasheet
   b5d7c:	2010      	movs	r0, #16
   b5d7e:	f00c f9ca 	bl	c2116 <analogRead>
   b5d82:	ee07 0a90 	vmov	s15, r0
   b5d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5d8a:	ee17 0a90 	vmov	r0, s15
   b5d8e:	f00e f873 	bl	c3e78 <__aeabi_f2d>
   b5d92:	4b3b      	ldr	r3, [pc, #236]	; (b5e80 <_Z12readPowerSysv+0x170>)
   b5d94:	2200      	movs	r2, #0
   b5d96:	f00e f8c7 	bl	c3f28 <__aeabi_dmul>
   b5d9a:	a333      	add	r3, pc, #204	; (adr r3, b5e68 <_Z12readPowerSysv+0x158>)
   b5d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5da0:	f00e f9ec 	bl	c417c <__aeabi_ddiv>
   b5da4:	f00e fbb8 	bl	c4518 <__aeabi_d2f>
   b5da8:	4b36      	ldr	r3, [pc, #216]	; (b5e84 <_Z12readPowerSysv+0x174>)
   b5daa:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b5dac:	2011      	movs	r0, #17
   b5dae:	f00c f9b2 	bl	c2116 <analogRead>
   b5db2:	ee07 0a90 	vmov	s15, r0
   b5db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5dba:	ee17 0a90 	vmov	r0, s15
   b5dbe:	f00e f85b 	bl	c3e78 <__aeabi_f2d>
   b5dc2:	4b31      	ldr	r3, [pc, #196]	; (b5e88 <_Z12readPowerSysv+0x178>)
   b5dc4:	2200      	movs	r2, #0
   b5dc6:	f00e f8af 	bl	c3f28 <__aeabi_dmul>
   b5dca:	a327      	add	r3, pc, #156	; (adr r3, b5e68 <_Z12readPowerSysv+0x158>)
   b5dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5dd0:	f00e f9d4 	bl	c417c <__aeabi_ddiv>
   b5dd4:	f00e fba0 	bl	c4518 <__aeabi_d2f>
   b5dd8:	4b2c      	ldr	r3, [pc, #176]	; (b5e8c <_Z12readPowerSysv+0x17c>)
   b5dda:	6018      	str	r0, [r3, #0]
    if(!digitalRead(LEAK_DET) && !warnedLeak){                              //LEAK_DET pin is pulled low when a leak is detected
   b5ddc:	201d      	movs	r0, #29
   b5dde:	f00c f987 	bl	c20f0 <digitalRead>
   b5de2:	b9b8      	cbnz	r0, b5e14 <_Z12readPowerSysv+0x104>
   b5de4:	4f2a      	ldr	r7, [pc, #168]	; (b5e90 <_Z12readPowerSysv+0x180>)
   b5de6:	783d      	ldrb	r5, [r7, #0]
   b5de8:	b9a5      	cbnz	r5, b5e14 <_Z12readPowerSysv+0x104>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5dea:	2401      	movs	r4, #1
        if(!LEAK_DET_BYPASS) sprintf(warnChar,"B%dCCldt",BOTNUM);           //Create error string based on if it's a cutoff trigger or a just a warning
   b5dec:	4929      	ldr	r1, [pc, #164]	; (b5e94 <_Z12readPowerSysv+0x184>)
   b5dee:	2201      	movs	r2, #1
   b5df0:	a803      	add	r0, sp, #12
   b5df2:	f008 faed 	bl	be3d0 <sprintf>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5df6:	4623      	mov	r3, r4
   b5df8:	4622      	mov	r2, r4
   b5dfa:	4629      	mov	r1, r5
   b5dfc:	a803      	add	r0, sp, #12
   b5dfe:	9400      	str	r4, [sp, #0]
   b5e00:	f7ff ff0c 	bl	b5c1c <_Z8sendDataPKchbbb>
        delay(50);                                                          //wait 50ms for data to go out
   b5e04:	2032      	movs	r0, #50	; 0x32
   b5e06:	f008 fb3f 	bl	be488 <delay>
        if(!LEAK_DET_BYPASS) digitalWrite(PWR_EN,LOW);                      //kill system
   b5e0a:	4629      	mov	r1, r5
   b5e0c:	201c      	movs	r0, #28
   b5e0e:	f00c f956 	bl	c20be <digitalWrite>
        warnedLeak = true;                                                  //Set flag to not spam console in case cutoff doesn't work
   b5e12:	703c      	strb	r4, [r7, #0]
    if(!digitalRead(BAT_LEAK_DET) && !warnedBattLeak){                      //BAT_LEAK_DET pin is pulled low when a leak is detected
   b5e14:	200f      	movs	r0, #15
   b5e16:	f00c f96b 	bl	c20f0 <digitalRead>
   b5e1a:	b998      	cbnz	r0, b5e44 <_Z12readPowerSysv+0x134>
   b5e1c:	4d1e      	ldr	r5, [pc, #120]	; (b5e98 <_Z12readPowerSysv+0x188>)
   b5e1e:	782f      	ldrb	r7, [r5, #0]
   b5e20:	b987      	cbnz	r7, b5e44 <_Z12readPowerSysv+0x134>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5e22:	2401      	movs	r4, #1
        else sprintf(warnChar,"B%dCCwlb",BOTNUM);                           //Message to warn leak in battery
   b5e24:	491d      	ldr	r1, [pc, #116]	; (b5e9c <_Z12readPowerSysv+0x18c>)
   b5e26:	2201      	movs	r2, #1
   b5e28:	a803      	add	r0, sp, #12
   b5e2a:	f008 fad1 	bl	be3d0 <sprintf>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5e2e:	4623      	mov	r3, r4
   b5e30:	4622      	mov	r2, r4
   b5e32:	4639      	mov	r1, r7
   b5e34:	a803      	add	r0, sp, #12
   b5e36:	9400      	str	r4, [sp, #0]
   b5e38:	f7ff fef0 	bl	b5c1c <_Z8sendDataPKchbbb>
        delay(50);                                                          //wait 50ms for data to go out
   b5e3c:	2032      	movs	r0, #50	; 0x32
   b5e3e:	f008 fb23 	bl	be488 <delay>
        warnedBattLeak = true;
   b5e42:	702c      	strb	r4, [r5, #0]
}
   b5e44:	7830      	ldrb	r0, [r6, #0]
   b5e46:	b007      	add	sp, #28
   b5e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5e4a:	bf00      	nop
   b5e4c:	f3af 8000 	nop.w
   b5e50:	6e04c059 	.word	0x6e04c059
   b5e54:	3f73cddd 	.word	0x3f73cddd
   b5e58:	66666666 	.word	0x66666666
   b5e5c:	40246666 	.word	0x40246666
   b5e60:	cccccccc 	.word	0xcccccccc
   b5e64:	4018cccc 	.word	0x4018cccc
   b5e68:	00000000 	.word	0x00000000
   b5e6c:	40affe00 	.word	0x40affe00
   b5e70:	2003dd90 	.word	0x2003dd90
   b5e74:	2003dd94 	.word	0x2003dd94
   b5e78:	40590000 	.word	0x40590000
   b5e7c:	2003ded8 	.word	0x2003ded8
   b5e80:	40408000 	.word	0x40408000
   b5e84:	2003dd8c 	.word	0x2003dd8c
   b5e88:	40308000 	.word	0x40308000
   b5e8c:	2003e580 	.word	0x2003e580
   b5e90:	2003e5ef 	.word	0x2003e5ef
   b5e94:	000c6c95 	.word	0x000c6c95
   b5e98:	2003e5ee 	.word	0x2003e5ee
   b5e9c:	000c6c9e 	.word	0x000c6c9e

000b5ea0 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5ea0:	b530      	push	{r4, r5, lr}
    if(requestActive){              //If the CC has requested data using the req command
   b5ea2:	4d2a      	ldr	r5, [pc, #168]	; (b5f4c <_Z16sendResponseDatav+0xac>)
   b5ea4:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5ea6:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){              //If the CC has requested data using the req command
   b5ea8:	2b00      	cmp	r3, #0
   b5eaa:	d04d      	beq.n	b5f48 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);   //Empty the string if it had something
   b5eac:	2241      	movs	r2, #65	; 0x41
   b5eae:	2100      	movs	r1, #0
   b5eb0:	a80b      	add	r0, sp, #44	; 0x2c
   b5eb2:	f00e fbed 	bl	c4690 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5eb6:	4b26      	ldr	r3, [pc, #152]	; (b5f50 <_Z16sendResponseDatav+0xb0>)
   b5eb8:	ed9f 7a26 	vldr	s14, [pc, #152]	; b5f54 <_Z16sendResponseDatav+0xb4>
   b5ebc:	edd3 7a00 	vldr	s15, [r3]
   b5ec0:	4b25      	ldr	r3, [pc, #148]	; (b5f58 <_Z16sendResponseDatav+0xb8>)
   b5ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b5ec6:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ecc:	edcd 7a08 	vstr	s15, [sp, #32]
   b5ed0:	edd3 7a00 	vldr	s15, [r3]
   b5ed4:	4b21      	ldr	r3, [pc, #132]	; (b5f5c <_Z16sendResponseDatav+0xbc>)
   b5ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ede:	edcd 7a07 	vstr	s15, [sp, #28]
   b5ee2:	edd3 7a00 	vldr	s15, [r3]
   b5ee6:	4b1e      	ldr	r3, [pc, #120]	; (b5f60 <_Z16sendResponseDatav+0xc0>)
   b5ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5ef0:	edcd 7a06 	vstr	s15, [sp, #24]
   b5ef4:	edd3 7a00 	vldr	s15, [r3]
   b5ef8:	4b1a      	ldr	r3, [pc, #104]	; (b5f64 <_Z16sendResponseDatav+0xc4>)
   b5efa:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5f02:	edcd 7a05 	vstr	s15, [sp, #20]
   b5f06:	edd3 7a00 	vldr	s15, [r3]
   b5f0a:	4b17      	ldr	r3, [pc, #92]	; (b5f68 <_Z16sendResponseDatav+0xc8>)
   b5f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5f14:	edcd 7a04 	vstr	s15, [sp, #16]
   b5f18:	6818      	ldr	r0, [r3, #0]
   b5f1a:	f00d ffad 	bl	c3e78 <__aeabi_f2d>
   b5f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5f22:	4b12      	ldr	r3, [pc, #72]	; (b5f6c <_Z16sendResponseDatav+0xcc>)
   b5f24:	6818      	ldr	r0, [r3, #0]
   b5f26:	f00d ffa7 	bl	c3e78 <__aeabi_f2d>
   b5f2a:	2201      	movs	r2, #1
   b5f2c:	e9cd 0100 	strd	r0, r1, [sp]
   b5f30:	490f      	ldr	r1, [pc, #60]	; (b5f70 <_Z16sendResponseDatav+0xd0>)
   b5f32:	a80b      	add	r0, sp, #44	; 0x2c
   b5f34:	f008 fa4c 	bl	be3d0 <sprintf>
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b5f38:	7829      	ldrb	r1, [r5, #0]
   b5f3a:	9400      	str	r4, [sp, #0]
   b5f3c:	4623      	mov	r3, r4
   b5f3e:	4622      	mov	r2, r4
   b5f40:	a80b      	add	r0, sp, #44	; 0x2c
   b5f42:	f7ff fe6b 	bl	b5c1c <_Z8sendDataPKchbbb>
        requestActive = 0;          //Set flag back to 0
   b5f46:	702c      	strb	r4, [r5, #0]
}
   b5f48:	b01d      	add	sp, #116	; 0x74
   b5f4a:	bd30      	pop	{r4, r5, pc}
   b5f4c:	2003e0b4 	.word	0x2003e0b4
   b5f50:	2003e554 	.word	0x2003e554
   b5f54:	447a0000 	.word	0x447a0000
   b5f58:	2003e54c 	.word	0x2003e54c
   b5f5c:	2003e544 	.word	0x2003e544
   b5f60:	2003e550 	.word	0x2003e550
   b5f64:	2003e548 	.word	0x2003e548
   b5f68:	2003ded4 	.word	0x2003ded4
   b5f6c:	2003ddf8 	.word	0x2003ddf8
   b5f70:	000c6ca7 	.word	0x000c6ca7

000b5f74 <_Z12statusUpdatev>:
void statusUpdate(){
   b5f74:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b5f76:	4d2f      	ldr	r5, [pc, #188]	; (b6034 <_Z12statusUpdatev+0xc0>)
   b5f78:	782b      	ldrb	r3, [r5, #0]
void statusUpdate(){
   b5f7a:	b098      	sub	sp, #96	; 0x60
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b5f7c:	2b00      	cmp	r3, #0
   b5f7e:	d04f      	beq.n	b6020 <_Z12statusUpdatev+0xac>
        Serial.println("Sending a status update!");     //Log to console (for debug purposes)
   b5f80:	f00b ff8c 	bl	c1e9c <_Z16_fetch_usbserialv>
   b5f84:	492c      	ldr	r1, [pc, #176]	; (b6038 <_Z12statusUpdatev+0xc4>)
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){     //If BLE and XBee are not available, send status over LTE, but only 1 in LTE_STAT_PD updates (to not suck up data)
   b5f86:	4e2d      	ldr	r6, [pc, #180]	; (b603c <_Z12statusUpdatev+0xc8>)
   b5f88:	4c2d      	ldr	r4, [pc, #180]	; (b6040 <_Z12statusUpdatev+0xcc>)
        Serial.println("Sending a status update!");     //Log to console (for debug purposes)
   b5f8a:	f00b fb10 	bl	c15ae <_ZN5Print7printlnEPKc>
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f %d %d ",BOTNUM,battPercent,statusFlags,latitude,longitude,(int)(battVoltage * battCurrent),(int)(battVoltage * solarCurrent));  //Print status flags, battery, latitude and logitude
   b5f8e:	4b2d      	ldr	r3, [pc, #180]	; (b6044 <_Z12statusUpdatev+0xd0>)
   b5f90:	4a2d      	ldr	r2, [pc, #180]	; (b6048 <_Z12statusUpdatev+0xd4>)
   b5f92:	edd3 7a00 	vldr	s15, [r3]
   b5f96:	ed92 7a00 	vldr	s14, [r2]
   b5f9a:	4b2c      	ldr	r3, [pc, #176]	; (b604c <_Z12statusUpdatev+0xd8>)
   b5f9c:	4a2c      	ldr	r2, [pc, #176]	; (b6050 <_Z12statusUpdatev+0xdc>)
   b5f9e:	781b      	ldrb	r3, [r3, #0]
   b5fa0:	9309      	str	r3, [sp, #36]	; 0x24
   b5fa2:	ee27 7a87 	vmul.f32	s14, s15, s14
   b5fa6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5faa:	ed8d 7a07 	vstr	s14, [sp, #28]
   b5fae:	ed92 7a00 	vldr	s14, [r2]
   b5fb2:	4a28      	ldr	r2, [pc, #160]	; (b6054 <_Z12statusUpdatev+0xe0>)
   b5fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5fbc:	edcd 7a06 	vstr	s15, [sp, #24]
   b5fc0:	6810      	ldr	r0, [r2, #0]
   b5fc2:	f00d ff59 	bl	c3e78 <__aeabi_f2d>
   b5fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5fca:	4a23      	ldr	r2, [pc, #140]	; (b6058 <_Z12statusUpdatev+0xe4>)
   b5fcc:	6810      	ldr	r0, [r2, #0]
   b5fce:	f00d ff53 	bl	c3e78 <__aeabi_f2d>
   b5fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5fd6:	4a21      	ldr	r2, [pc, #132]	; (b605c <_Z12statusUpdatev+0xe8>)
   b5fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5fda:	8812      	ldrh	r2, [r2, #0]
   b5fdc:	9200      	str	r2, [sp, #0]
   b5fde:	4920      	ldr	r1, [pc, #128]	; (b6060 <_Z12statusUpdatev+0xec>)
   b5fe0:	2201      	movs	r2, #1
   b5fe2:	a80a      	add	r0, sp, #40	; 0x28
   b5fe4:	f008 f9f4 	bl	be3d0 <sprintf>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){     //If BLE and XBee are not available, send status over LTE, but only 1 in LTE_STAT_PD updates (to not suck up data)
   b5fe8:	7833      	ldrb	r3, [r6, #0]
   b5fea:	b9db      	cbnz	r3, b6024 <_Z12statusUpdatev+0xb0>
   b5fec:	4b1d      	ldr	r3, [pc, #116]	; (b6064 <_Z12statusUpdatev+0xf0>)
   b5fee:	781b      	ldrb	r3, [r3, #0]
   b5ff0:	b9c3      	cbnz	r3, b6024 <_Z12statusUpdatev+0xb0>
   b5ff2:	8823      	ldrh	r3, [r4, #0]
   b5ff4:	b1cb      	cbz	r3, b602a <_Z12statusUpdatev+0xb6>
   b5ff6:	f013 0303 	ands.w	r3, r3, #3
   b5ffa:	d116      	bne.n	b602a <_Z12statusUpdatev+0xb6>
            sendData(updateStr,0,false,false,true);     //Only send out over LTE
   b5ffc:	2201      	movs	r2, #1
   b5ffe:	9200      	str	r2, [sp, #0]
   b6000:	4619      	mov	r1, r3
   b6002:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b6004:	a80a      	add	r0, sp, #40	; 0x28
   b6006:	f7ff fe09 	bl	b5c1c <_Z8sendDataPKchbbb>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount) LTEStatusCount--;            //Decrement a large coounter for the LTE status. This stops sending the status over LTE after a while to not burn up monthly quota. Should be recovering bots if on cell only
   b600a:	7833      	ldrb	r3, [r6, #0]
   b600c:	b933      	cbnz	r3, b601c <_Z12statusUpdatev+0xa8>
   b600e:	4b15      	ldr	r3, [pc, #84]	; (b6064 <_Z12statusUpdatev+0xf0>)
   b6010:	781b      	ldrb	r3, [r3, #0]
   b6012:	b91b      	cbnz	r3, b601c <_Z12statusUpdatev+0xa8>
   b6014:	8823      	ldrh	r3, [r4, #0]
   b6016:	b10b      	cbz	r3, b601c <_Z12statusUpdatev+0xa8>
   b6018:	3b01      	subs	r3, #1
   b601a:	8023      	strh	r3, [r4, #0]
        statusReady = false;                            //Clear ready flag
   b601c:	2300      	movs	r3, #0
   b601e:	702b      	strb	r3, [r5, #0]
}
   b6020:	b018      	add	sp, #96	; 0x60
   b6022:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;  //Otherwise, we're sending updates over BLE or XBee, reset counter for cellular
   b6024:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b6028:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b602a:	2100      	movs	r1, #0
   b602c:	2301      	movs	r3, #1
   b602e:	9100      	str	r1, [sp, #0]
   b6030:	461a      	mov	r2, r3
   b6032:	e7e7      	b.n	b6004 <_Z12statusUpdatev+0x90>
   b6034:	2003e5c4 	.word	0x2003e5c4
   b6038:	000c6ccb 	.word	0x000c6ccb
   b603c:	2003dd2c 	.word	0x2003dd2c
   b6040:	2003dd62 	.word	0x2003dd62
   b6044:	2003dd94 	.word	0x2003dd94
   b6048:	2003e580 	.word	0x2003e580
   b604c:	2003dd90 	.word	0x2003dd90
   b6050:	2003dd8c 	.word	0x2003dd8c
   b6054:	2003ded4 	.word	0x2003ded4
   b6058:	2003ddf8 	.word	0x2003ddf8
   b605c:	2003e5a4 	.word	0x2003e5a4
   b6060:	000c6ce4 	.word	0x000c6ce4
   b6064:	2003dd74 	.word	0x2003dd74

000b6068 <_Z13sensorHandlerv>:
void sensorHandler(){
   b6068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b606c:	4d60      	ldr	r5, [pc, #384]	; (b61f0 <_Z13sensorHandlerv+0x188>)
void sensorHandler(){
   b606e:	b097      	sub	sp, #92	; 0x5c
   b6070:	f007 fea8 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b6074:	682b      	ldr	r3, [r5, #0]
   b6076:	4283      	cmp	r3, r0
   b6078:	f080 8139 	bcs.w	b62ee <_Z13sensorHandlerv+0x286>
   b607c:	4e5d      	ldr	r6, [pc, #372]	; (b61f4 <_Z13sensorHandlerv+0x18c>)
   b607e:	7833      	ldrb	r3, [r6, #0]
   b6080:	2b00      	cmp	r3, #0
   b6082:	f000 8134 	beq.w	b62ee <_Z13sensorHandlerv+0x286>
        if(Wire.requestFrom(PHADDR, 20, 1)){    //Request 20 bytes from the PH sensor
   b6086:	f00c f875 	bl	c2174 <_Z19__fetch_global_Wirev>
   b608a:	2301      	movs	r3, #1
   b608c:	2214      	movs	r2, #20
   b608e:	2163      	movs	r1, #99	; 0x63
   b6090:	f009 ff6f 	bl	bff72 <_ZN7TwoWire11requestFromEhjh>
   b6094:	b1e8      	cbz	r0, b60d2 <_Z13sensorHandlerv+0x6a>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b6096:	f00c f86d 	bl	c2174 <_Z19__fetch_global_Wirev>
   b609a:	6803      	ldr	r3, [r0, #0]
   b609c:	695b      	ldr	r3, [r3, #20]
   b609e:	4798      	blx	r3
            int c = 0;                          //Index variable for the temporary string
   b60a0:	ac11      	add	r4, sp, #68	; 0x44
   b60a2:	4627      	mov	r7, r4
            while(Wire.available()){            // slave may send less than requested
   b60a4:	f00c f866 	bl	c2174 <_Z19__fetch_global_Wirev>
   b60a8:	6803      	ldr	r3, [r0, #0]
   b60aa:	691b      	ldr	r3, [r3, #16]
   b60ac:	4798      	blx	r3
   b60ae:	b138      	cbz	r0, b60c0 <_Z13sensorHandlerv+0x58>
                tempSense[c++] = Wire.read();   //Read each of the bytes returned by the sensor into a string
   b60b0:	f00c f860 	bl	c2174 <_Z19__fetch_global_Wirev>
   b60b4:	6803      	ldr	r3, [r0, #0]
   b60b6:	695b      	ldr	r3, [r3, #20]
   b60b8:	4798      	blx	r3
   b60ba:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){            // slave may send less than requested
   b60be:	e7f1      	b.n	b60a4 <_Z13sensorHandlerv+0x3c>
            sensePH = atof(tempSense);          //Convert the string to a float and store it in the global pH variable
   b60c0:	4638      	mov	r0, r7
   b60c2:	f00e fa9d 	bl	c4600 <atof>
   b60c6:	ec51 0b10 	vmov	r0, r1, d0
   b60ca:	f00e fa25 	bl	c4518 <__aeabi_d2f>
   b60ce:	4b4a      	ldr	r3, [pc, #296]	; (b61f8 <_Z13sensorHandlerv+0x190>)
   b60d0:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(MCOND, 20, 1)){
   b60d2:	f00c f84f 	bl	c2174 <_Z19__fetch_global_Wirev>
   b60d6:	2301      	movs	r3, #1
   b60d8:	2214      	movs	r2, #20
   b60da:	2164      	movs	r1, #100	; 0x64
   b60dc:	f009 ff49 	bl	bff72 <_ZN7TwoWire11requestFromEhjh>
   b60e0:	b1e8      	cbz	r0, b611e <_Z13sensorHandlerv+0xb6>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b60e2:	f00c f847 	bl	c2174 <_Z19__fetch_global_Wirev>
   b60e6:	6803      	ldr	r3, [r0, #0]
   b60e8:	695b      	ldr	r3, [r3, #20]
   b60ea:	4798      	blx	r3
            int c = 0;
   b60ec:	ac11      	add	r4, sp, #68	; 0x44
   b60ee:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b60f0:	f00c f840 	bl	c2174 <_Z19__fetch_global_Wirev>
   b60f4:	6803      	ldr	r3, [r0, #0]
   b60f6:	691b      	ldr	r3, [r3, #16]
   b60f8:	4798      	blx	r3
   b60fa:	b138      	cbz	r0, b610c <_Z13sensorHandlerv+0xa4>
                mcondSense[c++] = Wire.read();
   b60fc:	f00c f83a 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6100:	6803      	ldr	r3, [r0, #0]
   b6102:	695b      	ldr	r3, [r3, #20]
   b6104:	4798      	blx	r3
   b6106:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b610a:	e7f1      	b.n	b60f0 <_Z13sensorHandlerv+0x88>
            senseMCond = atof(mcondSense);
   b610c:	4638      	mov	r0, r7
   b610e:	f00e fa77 	bl	c4600 <atof>
   b6112:	ec51 0b10 	vmov	r0, r1, d0
   b6116:	f00e f9ff 	bl	c4518 <__aeabi_d2f>
   b611a:	4b38      	ldr	r3, [pc, #224]	; (b61fc <_Z13sensorHandlerv+0x194>)
   b611c:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(COND, 20, 1)){
   b611e:	f00c f829 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6122:	2301      	movs	r3, #1
   b6124:	2214      	movs	r2, #20
   b6126:	2165      	movs	r1, #101	; 0x65
   b6128:	f009 ff23 	bl	bff72 <_ZN7TwoWire11requestFromEhjh>
   b612c:	b1e8      	cbz	r0, b616a <_Z13sensorHandlerv+0x102>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b612e:	f00c f821 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6132:	6803      	ldr	r3, [r0, #0]
   b6134:	695b      	ldr	r3, [r3, #20]
   b6136:	4798      	blx	r3
            int c = 0;
   b6138:	ac11      	add	r4, sp, #68	; 0x44
   b613a:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b613c:	f00c f81a 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6140:	6803      	ldr	r3, [r0, #0]
   b6142:	691b      	ldr	r3, [r3, #16]
   b6144:	4798      	blx	r3
   b6146:	b138      	cbz	r0, b6158 <_Z13sensorHandlerv+0xf0>
                condSense[c++] = Wire.read();
   b6148:	f00c f814 	bl	c2174 <_Z19__fetch_global_Wirev>
   b614c:	6803      	ldr	r3, [r0, #0]
   b614e:	695b      	ldr	r3, [r3, #20]
   b6150:	4798      	blx	r3
   b6152:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b6156:	e7f1      	b.n	b613c <_Z13sensorHandlerv+0xd4>
            senseCond = atof(condSense);
   b6158:	4638      	mov	r0, r7
   b615a:	f00e fa51 	bl	c4600 <atof>
   b615e:	ec51 0b10 	vmov	r0, r1, d0
   b6162:	f00e f9d9 	bl	c4518 <__aeabi_d2f>
   b6166:	4b26      	ldr	r3, [pc, #152]	; (b6200 <_Z13sensorHandlerv+0x198>)
   b6168:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(TEMPADDR, 20, 1)){
   b616a:	f00c f803 	bl	c2174 <_Z19__fetch_global_Wirev>
   b616e:	2301      	movs	r3, #1
   b6170:	2214      	movs	r2, #20
   b6172:	2166      	movs	r1, #102	; 0x66
   b6174:	f009 fefd 	bl	bff72 <_ZN7TwoWire11requestFromEhjh>
   b6178:	b1e8      	cbz	r0, b61b6 <_Z13sensorHandlerv+0x14e>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b617a:	f00b fffb 	bl	c2174 <_Z19__fetch_global_Wirev>
   b617e:	6803      	ldr	r3, [r0, #0]
   b6180:	695b      	ldr	r3, [r3, #20]
   b6182:	4798      	blx	r3
            int c = 0;
   b6184:	ac11      	add	r4, sp, #68	; 0x44
   b6186:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b6188:	f00b fff4 	bl	c2174 <_Z19__fetch_global_Wirev>
   b618c:	6803      	ldr	r3, [r0, #0]
   b618e:	691b      	ldr	r3, [r3, #16]
   b6190:	4798      	blx	r3
   b6192:	b138      	cbz	r0, b61a4 <_Z13sensorHandlerv+0x13c>
                addrSense[c++] = Wire.read();
   b6194:	f00b ffee 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6198:	6803      	ldr	r3, [r0, #0]
   b619a:	695b      	ldr	r3, [r3, #20]
   b619c:	4798      	blx	r3
   b619e:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b61a2:	e7f1      	b.n	b6188 <_Z13sensorHandlerv+0x120>
            senseTemp = atof(addrSense);
   b61a4:	4638      	mov	r0, r7
   b61a6:	f00e fa2b 	bl	c4600 <atof>
   b61aa:	ec51 0b10 	vmov	r0, r1, d0
   b61ae:	f00e f9b3 	bl	c4518 <__aeabi_d2f>
   b61b2:	4b14      	ldr	r3, [pc, #80]	; (b6204 <_Z13sensorHandlerv+0x19c>)
   b61b4:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(DOADDR, 20, 1)){
   b61b6:	f00b ffdd 	bl	c2174 <_Z19__fetch_global_Wirev>
   b61ba:	2301      	movs	r3, #1
   b61bc:	2214      	movs	r2, #20
   b61be:	2161      	movs	r1, #97	; 0x61
   b61c0:	f009 fed7 	bl	bff72 <_ZN7TwoWire11requestFromEhjh>
   b61c4:	b348      	cbz	r0, b621a <_Z13sensorHandlerv+0x1b2>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b61c6:	f00b ffd5 	bl	c2174 <_Z19__fetch_global_Wirev>
   b61ca:	6803      	ldr	r3, [r0, #0]
   b61cc:	695b      	ldr	r3, [r3, #20]
   b61ce:	4798      	blx	r3
            int c = 0;
   b61d0:	ac11      	add	r4, sp, #68	; 0x44
   b61d2:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b61d4:	f00b ffce 	bl	c2174 <_Z19__fetch_global_Wirev>
   b61d8:	6803      	ldr	r3, [r0, #0]
   b61da:	691b      	ldr	r3, [r3, #16]
   b61dc:	4798      	blx	r3
   b61de:	b198      	cbz	r0, b6208 <_Z13sensorHandlerv+0x1a0>
                addrSense[c++] = Wire.read();
   b61e0:	f00b ffc8 	bl	c2174 <_Z19__fetch_global_Wirev>
   b61e4:	6803      	ldr	r3, [r0, #0]
   b61e6:	695b      	ldr	r3, [r3, #20]
   b61e8:	4798      	blx	r3
   b61ea:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b61ee:	e7f1      	b.n	b61d4 <_Z13sensorHandlerv+0x16c>
   b61f0:	2003dda4 	.word	0x2003dda4
   b61f4:	2003dda8 	.word	0x2003dda8
   b61f8:	2003e550 	.word	0x2003e550
   b61fc:	2003e54c 	.word	0x2003e54c
   b6200:	2003e544 	.word	0x2003e544
   b6204:	2003e554 	.word	0x2003e554
            senseDO = atof(addrSense);
   b6208:	4638      	mov	r0, r7
   b620a:	f00e f9f9 	bl	c4600 <atof>
   b620e:	ec51 0b10 	vmov	r0, r1, d0
   b6212:	f00e f981 	bl	c4518 <__aeabi_d2f>
   b6216:	4b7a      	ldr	r3, [pc, #488]	; (b6400 <_Z13sensorHandlerv+0x398>)
   b6218:	6018      	str	r0, [r3, #0]
        dataWait = false;                       //Set flag false until next data request has been made
   b621a:	2300      	movs	r3, #0
   b621c:	7033      	strb	r3, [r6, #0]
        if(logSensors){                         //Log sensors to SD card if enabled
   b621e:	4b79      	ldr	r3, [pc, #484]	; (b6404 <_Z13sensorHandlerv+0x39c>)
   b6220:	781b      	ldrb	r3, [r3, #0]
   b6222:	2b00      	cmp	r3, #0
   b6224:	d063      	beq.n	b62ee <_Z13sensorHandlerv+0x286>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b6226:	f00b fd5d 	bl	c1ce4 <_ZN9TimeClass5monthEv>
   b622a:	900f      	str	r0, [sp, #60]	; 0x3c
   b622c:	f00b fd4e 	bl	c1ccc <_ZN9TimeClass3dayEv>
   b6230:	4604      	mov	r4, r0
   b6232:	f00b fd5f 	bl	c1cf4 <_ZN9TimeClass4yearEv>
   b6236:	4606      	mov	r6, r0
   b6238:	f00b fd24 	bl	c1c84 <_ZN9TimeClass4hourEv>
   b623c:	4607      	mov	r7, r0
   b623e:	f00b fd2d 	bl	c1c9c <_ZN9TimeClass6minuteEv>
   b6242:	4680      	mov	r8, r0
   b6244:	f00b fd36 	bl	c1cb4 <_ZN9TimeClass6secondEv>
   b6248:	9400      	str	r4, [sp, #0]
   b624a:	4c6f      	ldr	r4, [pc, #444]	; (b6408 <_Z13sensorHandlerv+0x3a0>)
   b624c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b624e:	4a6f      	ldr	r2, [pc, #444]	; (b640c <_Z13sensorHandlerv+0x3a4>)
   b6250:	f8df 91d8 	ldr.w	r9, [pc, #472]	; b642c <_Z13sensorHandlerv+0x3c4>
   b6254:	f8df b1d8 	ldr.w	fp, [pc, #472]	; b6430 <_Z13sensorHandlerv+0x3c8>
   b6258:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b6400 <_Z13sensorHandlerv+0x398>
   b625c:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b6260:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b6264:	2110      	movs	r1, #16
   b6266:	a811      	add	r0, sp, #68	; 0x44
   b6268:	f008 f8c2 	bl	be3f0 <snprintf>
            if(!myFile.isOpen()){               //Print out each of the global sensor values
   b626c:	7c22      	ldrb	r2, [r4, #16]
   b626e:	4b68      	ldr	r3, [pc, #416]	; (b6410 <_Z13sensorHandlerv+0x3a8>)
   b6270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; b6434 <_Z13sensorHandlerv+0x3cc>
   b6274:	4f67      	ldr	r7, [pc, #412]	; (b6414 <_Z13sensorHandlerv+0x3ac>)
   b6276:	4e68      	ldr	r6, [pc, #416]	; (b6418 <_Z13sensorHandlerv+0x3b0>)
   b6278:	2a00      	cmp	r2, #0
   b627a:	f040 8094 	bne.w	b63a6 <_Z13sensorHandlerv+0x33e>
                myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b627e:	f244 2202 	movw	r2, #16898	; 0x4202
   b6282:	4966      	ldr	r1, [pc, #408]	; (b641c <_Z13sensorHandlerv+0x3b4>)
   b6284:	f104 0010 	add.w	r0, r4, #16
   b6288:	f7fe fa10 	bl	b46ac <_ZN7FatFile4openEPKci>
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b628c:	4b60      	ldr	r3, [pc, #384]	; (b6410 <_Z13sensorHandlerv+0x3a8>)
   b628e:	6818      	ldr	r0, [r3, #0]
   b6290:	f00d fdf2 	bl	c3e78 <__aeabi_f2d>
   b6294:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b6298:	f8db 0000 	ldr.w	r0, [fp]
   b629c:	f00d fdec 	bl	c3e78 <__aeabi_f2d>
   b62a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b62a4:	f8da 0000 	ldr.w	r0, [sl]
   b62a8:	f00d fde6 	bl	c3e78 <__aeabi_f2d>
   b62ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b62b0:	f8d9 0000 	ldr.w	r0, [r9]
   b62b4:	f00d fde0 	bl	c3e78 <__aeabi_f2d>
   b62b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b62bc:	f8d8 0000 	ldr.w	r0, [r8]
   b62c0:	f00d fdda 	bl	c3e78 <__aeabi_f2d>
   b62c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b62c8:	6838      	ldr	r0, [r7, #0]
   b62ca:	f00d fdd5 	bl	c3e78 <__aeabi_f2d>
   b62ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b62d2:	6830      	ldr	r0, [r6, #0]
   b62d4:	f00d fdd0 	bl	c3e78 <__aeabi_f2d>
   b62d8:	aa11      	add	r2, sp, #68	; 0x44
   b62da:	e9cd 0100 	strd	r0, r1, [sp]
   b62de:	4950      	ldr	r1, [pc, #320]	; (b6420 <_Z13sensorHandlerv+0x3b8>)
   b62e0:	4620      	mov	r0, r4
   b62e2:	f7fe f875 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                myFile.close();
   b62e6:	f104 0010 	add.w	r0, r4, #16
   b62ea:	f000 fefb 	bl	b70e4 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){                  //Check time to see if we should request more data
   b62ee:	4c4d      	ldr	r4, [pc, #308]	; (b6424 <_Z13sensorHandlerv+0x3bc>)
   b62f0:	f007 fd68 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b62f4:	6823      	ldr	r3, [r4, #0]
   b62f6:	4283      	cmp	r3, r0
   b62f8:	d252      	bcs.n	b63a0 <_Z13sensorHandlerv+0x338>
   b62fa:	f007 fd63 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;   //Calculate next time to request data from the sensors
   b62fe:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b6302:	6020      	str	r0, [r4, #0]
   b6304:	f007 fd5e 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;   //Calculate the time to read the data that has just been requested
   b6308:	f200 3039 	addw	r0, r0, #825	; 0x339
   b630c:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);         //call the circuit by its ID number.
   b630e:	f00b ff31 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6312:	2163      	movs	r1, #99	; 0x63
   b6314:	f009 fe46 	bl	bffa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6318:	f00b ff2c 	bl	c2174 <_Z19__fetch_global_Wirev>
   b631c:	2172      	movs	r1, #114	; 0x72
   b631e:	f7fd ff9e 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b6322:	f00b ff27 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6326:	f009 fe44 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);          //call the circuit by its ID number.
   b632a:	f00b ff23 	bl	c2174 <_Z19__fetch_global_Wirev>
   b632e:	2164      	movs	r1, #100	; 0x64
   b6330:	f009 fe38 	bl	bffa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6334:	f00b ff1e 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6338:	2172      	movs	r1, #114	; 0x72
   b633a:	f7fd ff90 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b633e:	f00b ff19 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6342:	f009 fe36 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);           //call the circuit by its ID number.
   b6346:	f00b ff15 	bl	c2174 <_Z19__fetch_global_Wirev>
   b634a:	2165      	movs	r1, #101	; 0x65
   b634c:	f009 fe2a 	bl	bffa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6350:	f00b ff10 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6354:	2172      	movs	r1, #114	; 0x72
   b6356:	f7fd ff82 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b635a:	f00b ff0b 	bl	c2174 <_Z19__fetch_global_Wirev>
   b635e:	f009 fe28 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);       //call the circuit by its ID number.
   b6362:	f00b ff07 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6366:	2166      	movs	r1, #102	; 0x66
   b6368:	f009 fe1c 	bl	bffa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b636c:	f00b ff02 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6370:	2172      	movs	r1, #114	; 0x72
   b6372:	f7fd ff74 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b6376:	f00b fefd 	bl	c2174 <_Z19__fetch_global_Wirev>
   b637a:	f009 fe1a 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(DOADDR);         //call the circuit by its ID number.
   b637e:	f00b fef9 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6382:	2161      	movs	r1, #97	; 0x61
   b6384:	f009 fe0e 	bl	bffa4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6388:	f00b fef4 	bl	c2174 <_Z19__fetch_global_Wirev>
   b638c:	2172      	movs	r1, #114	; 0x72
   b638e:	f7fd ff66 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();      
   b6392:	f00b feef 	bl	c2174 <_Z19__fetch_global_Wirev>
   b6396:	f009 fe0c 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b639a:	4b23      	ldr	r3, [pc, #140]	; (b6428 <_Z13sensorHandlerv+0x3c0>)
   b639c:	2201      	movs	r2, #1
   b639e:	701a      	strb	r2, [r3, #0]
}
   b63a0:	b017      	add	sp, #92	; 0x5c
   b63a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b63a6:	6818      	ldr	r0, [r3, #0]
   b63a8:	f00d fd66 	bl	c3e78 <__aeabi_f2d>
   b63ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b63b0:	f8db 0000 	ldr.w	r0, [fp]
   b63b4:	f00d fd60 	bl	c3e78 <__aeabi_f2d>
   b63b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b63bc:	f8da 0000 	ldr.w	r0, [sl]
   b63c0:	f00d fd5a 	bl	c3e78 <__aeabi_f2d>
   b63c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b63c8:	f8d9 0000 	ldr.w	r0, [r9]
   b63cc:	f00d fd54 	bl	c3e78 <__aeabi_f2d>
   b63d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b63d4:	f8d8 0000 	ldr.w	r0, [r8]
   b63d8:	f00d fd4e 	bl	c3e78 <__aeabi_f2d>
   b63dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b63e0:	6838      	ldr	r0, [r7, #0]
   b63e2:	f00d fd49 	bl	c3e78 <__aeabi_f2d>
   b63e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b63ea:	6830      	ldr	r0, [r6, #0]
   b63ec:	f00d fd44 	bl	c3e78 <__aeabi_f2d>
   b63f0:	aa11      	add	r2, sp, #68	; 0x44
   b63f2:	e9cd 0100 	strd	r0, r1, [sp]
   b63f6:	490a      	ldr	r1, [pc, #40]	; (b6420 <_Z13sensorHandlerv+0x3b8>)
   b63f8:	4620      	mov	r0, r4
   b63fa:	f7fd ffe9 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b63fe:	e776      	b.n	b62ee <_Z13sensorHandlerv+0x286>
   b6400:	2003e548 	.word	0x2003e548
   b6404:	2003ded1 	.word	0x2003ded1
   b6408:	2003def8 	.word	0x2003def8
   b640c:	000c6bb6 	.word	0x000c6bb6
   b6410:	2003e544 	.word	0x2003e544
   b6414:	2003ded4 	.word	0x2003ded4
   b6418:	2003ddf8 	.word	0x2003ddf8
   b641c:	2003ddaa 	.word	0x2003ddaa
   b6420:	000c6d05 	.word	0x000c6d05
   b6424:	2003e558 	.word	0x2003e558
   b6428:	2003dda8 	.word	0x2003dda8
   b642c:	2003e550 	.word	0x2003e550
   b6430:	2003e54c 	.word	0x2003e54c
   b6434:	2003e554 	.word	0x2003e554

000b6438 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b6438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b643c:	4e3c      	ldr	r6, [pc, #240]	; (b6530 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b643e:	f8df 8104 	ldr.w	r8, [pc, #260]	; b6544 <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b6442:	f8df 9104 	ldr.w	r9, [pc, #260]	; b6548 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b6446:	b089      	sub	sp, #36	; 0x24
   b6448:	af00      	add	r7, sp, #0
    while(Serial1.available()){                         //Read data from the XBee buffer
   b644a:	f00b fed3 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   b644e:	6803      	ldr	r3, [r0, #0]
   b6450:	691b      	ldr	r3, [r3, #16]
   b6452:	4798      	blx	r3
   b6454:	2800      	cmp	r0, #0
   b6456:	d066      	beq.n	b6526 <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b6458:	f00b fecc 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   b645c:	220a      	movs	r2, #10
   b645e:	4601      	mov	r1, r0
   b6460:	4638      	mov	r0, r7
   b6462:	f00b fa6f 	bl	c1944 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b6466:	68bb      	ldr	r3, [r7, #8]
   b6468:	3307      	adds	r3, #7
   b646a:	f023 0307 	bic.w	r3, r3, #7
    }
   b646e:	466d      	mov	r5, sp
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b6470:	ebad 0d03 	sub.w	sp, sp, r3
   b6474:	46ea      	mov	sl, sp
   b6476:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b6478:	68b9      	ldr	r1, [r7, #8]
   b647a:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);    //Loop over characters and copy them into char array
   b647e:	458b      	cmp	fp, r1
   b6480:	f103 0401 	add.w	r4, r3, #1
   b6484:	d207      	bcs.n	b6496 <_Z11XBeeHandlerv+0x5e>
   b6486:	4659      	mov	r1, fp
   b6488:	4638      	mov	r0, r7
   b648a:	f00b fb53 	bl	c1b34 <_ZNK6String6charAtEj>
   b648e:	4623      	mov	r3, r4
   b6490:	f80a 000b 	strb.w	r0, [sl, fp]
   b6494:	e7f0      	b.n	b6478 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;      //If there was a carriage return, then get rid of it and set to terminate character
   b6496:	2901      	cmp	r1, #1
   b6498:	d90a      	bls.n	b64b0 <_Z11XBeeHandlerv+0x78>
   b649a:	3901      	subs	r1, #1
   b649c:	4638      	mov	r0, r7
   b649e:	f00b fb49 	bl	c1b34 <_ZNK6String6charAtEj>
   b64a2:	280d      	cmp	r0, #13
   b64a4:	bf01      	itttt	eq
   b64a6:	68bb      	ldreq	r3, [r7, #8]
   b64a8:	4453      	addeq	r3, sl
   b64aa:	2200      	moveq	r2, #0
   b64ac:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        Serial.println("New XBee Command:");
   b64b0:	f00b fcf4 	bl	c1e9c <_Z16_fetch_usbserialv>
   b64b4:	4631      	mov	r1, r6
   b64b6:	f00b f87a 	bl	c15ae <_ZN5Print7printlnEPKc>
        Serial.println(data);                           //Print out command for debugging
   b64ba:	f00b fcef 	bl	c1e9c <_Z16_fetch_usbserialv>
   b64be:	6839      	ldr	r1, [r7, #0]
   b64c0:	f00b f875 	bl	c15ae <_ZN5Print7printlnEPKc>
        processCommand(buffer,2,true);                  //Process the command received over Xbee using the dictionary
   b64c4:	2201      	movs	r2, #1
   b64c6:	2102      	movs	r1, #2
   b64c8:	4650      	mov	r0, sl
   b64ca:	f7fe f9b5 	bl	b4838 <_Z14processCommandPKchb>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b64ce:	f89a 3000 	ldrb.w	r3, [sl]
   b64d2:	3b42      	subs	r3, #66	; 0x42
   b64d4:	2b01      	cmp	r3, #1
   b64d6:	d803      	bhi.n	b64e0 <_Z11XBeeHandlerv+0xa8>
   b64d8:	f007 fc74 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b64dc:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b64e0:	f899 3000 	ldrb.w	r3, [r9]
   b64e4:	b1d3      	cbz	r3, b651c <_Z11XBeeHandlerv+0xe4>
   b64e6:	4813      	ldr	r0, [pc, #76]	; (b6534 <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b64e8:	7c03      	ldrb	r3, [r0, #16]
   b64ea:	b92b      	cbnz	r3, b64f8 <_Z11XBeeHandlerv+0xc0>
   b64ec:	4912      	ldr	r1, [pc, #72]	; (b6538 <_Z11XBeeHandlerv+0x100>)
   b64ee:	f244 2202 	movw	r2, #16898	; 0x4202
   b64f2:	3010      	adds	r0, #16
   b64f4:	f7fe f8da 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b64f8:	4639      	mov	r1, r7
   b64fa:	f107 0010 	add.w	r0, r7, #16
   b64fe:	f00b facf 	bl	c1aa0 <_ZN6StringC1ERKS_>
   b6502:	490e      	ldr	r1, [pc, #56]	; (b653c <_Z11XBeeHandlerv+0x104>)
   b6504:	480b      	ldr	r0, [pc, #44]	; (b6534 <_Z11XBeeHandlerv+0xfc>)
   b6506:	f107 0210 	add.w	r2, r7, #16
   b650a:	f7fd ff61 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b650e:	f107 0010 	add.w	r0, r7, #16
   b6512:	f00b fa2f 	bl	c1974 <_ZN6StringD1Ev>
            logFile.close();
   b6516:	480a      	ldr	r0, [pc, #40]	; (b6540 <_Z11XBeeHandlerv+0x108>)
   b6518:	f000 fde4 	bl	b70e4 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b651c:	4638      	mov	r0, r7
   b651e:	f00b fa29 	bl	c1974 <_ZN6StringD1Ev>
   b6522:	46ad      	mov	sp, r5
    while(Serial1.available()){                         //Read data from the XBee buffer
   b6524:	e791      	b.n	b644a <_Z11XBeeHandlerv+0x12>
}
   b6526:	3724      	adds	r7, #36	; 0x24
   b6528:	46bd      	mov	sp, r7
   b652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b652e:	bf00      	nop
   b6530:	000c6d1d 	.word	0x000c6d1d
   b6534:	2003de78 	.word	0x2003de78
   b6538:	2003ddca 	.word	0x2003ddca
   b653c:	000c6d2f 	.word	0x000c6d2f
   b6540:	2003de88 	.word	0x2003de88
   b6544:	2003dd78 	.word	0x2003dd78
   b6548:	2003ded0 	.word	0x2003ded0

000b654c <_Z13dataOffloaderv>:
void dataOffloader(){
   b654c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6550:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b6552:	f00b fca3 	bl	c1e9c <_Z16_fetch_usbserialv>
   b6556:	4963      	ldr	r1, [pc, #396]	; (b66e4 <_Z13dataOffloaderv+0x198>)
   b6558:	f00b f829 	bl	c15ae <_ZN5Print7printlnEPKc>
    myFile.close();
   b655c:	4862      	ldr	r0, [pc, #392]	; (b66e8 <_Z13dataOffloaderv+0x19c>)
   b655e:	f000 fdc1 	bl	b70e4 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   b6562:	4962      	ldr	r1, [pc, #392]	; (b66ec <_Z13dataOffloaderv+0x1a0>)
   b6564:	4862      	ldr	r0, [pc, #392]	; (b66f0 <_Z13dataOffloaderv+0x1a4>)
   b6566:	2200      	movs	r2, #0
   b6568:	f7fe f8a0 	bl	b46ac <_ZN7FatFile4openEPKci>
   b656c:	b948      	cbnz	r0, b6582 <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   b656e:	4b61      	ldr	r3, [pc, #388]	; (b66f4 <_Z13dataOffloaderv+0x1a8>)
   b6570:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b6572:	f00b fc93 	bl	c1e9c <_Z16_fetch_usbserialv>
   b6576:	4960      	ldr	r1, [pc, #384]	; (b66f8 <_Z13dataOffloaderv+0x1ac>)
}
   b6578:	b02d      	add	sp, #180	; 0xb4
   b657a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b657e:	f00b b816 	b.w	c15ae <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b6582:	f00b fc8b 	bl	c1e9c <_Z16_fetch_usbserialv>
   b6586:	495d      	ldr	r1, [pc, #372]	; (b66fc <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   b6588:	4d5d      	ldr	r5, [pc, #372]	; (b6700 <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   b658a:	f00b f810 	bl	c15ae <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b658e:	f008 fadf 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6592:	f008 fb3b 	bl	bec0c <_ZNK8particle14BleLocalDevice9connectedEv>
   b6596:	4604      	mov	r4, r0
   b6598:	b948      	cbnz	r0, b65ae <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   b659a:	f008 fad9 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b659e:	4622      	mov	r2, r4
   b65a0:	4629      	mov	r1, r5
   b65a2:	f008 fb86 	bl	becb2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b65a6:	200a      	movs	r0, #10
   b65a8:	f007 ff6e 	bl	be488 <delay>
    while(!BLE.connected()){
   b65ac:	e7ef      	b.n	b658e <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   b65ae:	f00b fc75 	bl	c1e9c <_Z16_fetch_usbserialv>
   b65b2:	4954      	ldr	r1, [pc, #336]	; (b6704 <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b65b4:	4f4e      	ldr	r7, [pc, #312]	; (b66f0 <_Z13dataOffloaderv+0x1a4>)
   b65b6:	4d4c      	ldr	r5, [pc, #304]	; (b66e8 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b65b8:	f8df 816c 	ldr.w	r8, [pc, #364]	; b6728 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   b65bc:	f00a fff7 	bl	c15ae <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b65c0:	2200      	movs	r2, #0
   b65c2:	4639      	mov	r1, r7
   b65c4:	4628      	mov	r0, r5
   b65c6:	f000 fd1a 	bl	b6ffe <_ZN7FatFile8openNextEPS_i>
   b65ca:	b1f8      	cbz	r0, b660c <_Z13dataOffloaderv+0xc0>
   b65cc:	f008 fac0 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b65d0:	f008 fb1c 	bl	bec0c <_ZNK8particle14BleLocalDevice9connectedEv>
   b65d4:	b1d0      	cbz	r0, b660c <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b65d6:	2220      	movs	r2, #32
   b65d8:	a901      	add	r1, sp, #4
   b65da:	4628      	mov	r0, r5
   b65dc:	f000 fed6 	bl	b738c <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b65e0:	f00b fc5c 	bl	c1e9c <_Z16_fetch_usbserialv>
   b65e4:	4641      	mov	r1, r8
   b65e6:	aa01      	add	r2, sp, #4
   b65e8:	f7fd fef2 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b65ec:	a801      	add	r0, sp, #4
   b65ee:	f00e f8da 	bl	c47a6 <strlen>
   b65f2:	ab01      	add	r3, sp, #4
   b65f4:	3804      	subs	r0, #4
   b65f6:	4418      	add	r0, r3
   b65f8:	f00e f8de 	bl	c47b8 <strlwr>
   b65fc:	4942      	ldr	r1, [pc, #264]	; (b6708 <_Z13dataOffloaderv+0x1bc>)
   b65fe:	f00e f934 	bl	c486a <strstr>
   b6602:	b9d8      	cbnz	r0, b663c <_Z13dataOffloaderv+0xf0>
            myFile.close();
   b6604:	4628      	mov	r0, r5
   b6606:	f000 fd6d 	bl	b70e4 <_ZN7FatFile5closeEv>
   b660a:	e7d9      	b.n	b65c0 <_Z13dataOffloaderv+0x74>
    logDir.close();
   b660c:	4838      	ldr	r0, [pc, #224]	; (b66f0 <_Z13dataOffloaderv+0x1a4>)
   b660e:	f000 fd69 	bl	b70e4 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b6612:	2228      	movs	r2, #40	; 0x28
   b6614:	2100      	movs	r1, #0
   b6616:	a809      	add	r0, sp, #36	; 0x24
   b6618:	f00e f83a 	bl	c4690 <memset>
    strcpy(fileCode,"filedone");
   b661c:	493b      	ldr	r1, [pc, #236]	; (b670c <_Z13dataOffloaderv+0x1c0>)
   b661e:	a809      	add	r0, sp, #36	; 0x24
   b6620:	f00e f89c 	bl	c475c <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b6624:	2300      	movs	r3, #0
   b6626:	2228      	movs	r2, #40	; 0x28
   b6628:	a909      	add	r1, sp, #36	; 0x24
   b662a:	4839      	ldr	r0, [pc, #228]	; (b6710 <_Z13dataOffloaderv+0x1c4>)
   b662c:	f008 f980 	bl	be930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b6630:	4b30      	ldr	r3, [pc, #192]	; (b66f4 <_Z13dataOffloaderv+0x1a8>)
   b6632:	2200      	movs	r2, #0
   b6634:	701a      	strb	r2, [r3, #0]
}
   b6636:	b02d      	add	sp, #180	; 0xb4
   b6638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b663c:	2228      	movs	r2, #40	; 0x28
   b663e:	2100      	movs	r1, #0
   b6640:	a809      	add	r0, sp, #36	; 0x24
   b6642:	f00e f825 	bl	c4690 <memset>
            strcpy(fileCode,"filename");
   b6646:	4933      	ldr	r1, [pc, #204]	; (b6714 <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   b6648:	4e33      	ldr	r6, [pc, #204]	; (b6718 <_Z13dataOffloaderv+0x1cc>)
   b664a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b6710 <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   b664e:	a809      	add	r0, sp, #36	; 0x24
   b6650:	f00e f884 	bl	c475c <strcpy>
            strcat(fileCode,namebuf);
   b6654:	a901      	add	r1, sp, #4
   b6656:	a809      	add	r0, sp, #36	; 0x24
   b6658:	f00e f850 	bl	c46fc <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b665c:	f00b fc1e 	bl	c1e9c <_Z16_fetch_usbserialv>
   b6660:	492e      	ldr	r1, [pc, #184]	; (b671c <_Z13dataOffloaderv+0x1d0>)
   b6662:	aa09      	add	r2, sp, #36	; 0x24
   b6664:	f7fd feb4 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b6668:	2300      	movs	r3, #0
   b666a:	2228      	movs	r2, #40	; 0x28
   b666c:	a909      	add	r1, sp, #36	; 0x24
   b666e:	4828      	ldr	r0, [pc, #160]	; (b6710 <_Z13dataOffloaderv+0x1c4>)
   b6670:	f008 f95e 	bl	be930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b6674:	f00b fc12 	bl	c1e9c <_Z16_fetch_usbserialv>
   b6678:	4929      	ldr	r1, [pc, #164]	; (b6720 <_Z13dataOffloaderv+0x1d4>)
   b667a:	aa01      	add	r2, sp, #4
   b667c:	f7fd fea8 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b6680:	2096      	movs	r0, #150	; 0x96
   b6682:	f007 ff01 	bl	be488 <delay>
            noInterrupts();
   b6686:	f009 fcc3 	bl	c0010 <_Z12noInterruptsv>
            while(myFile.available()){
   b668a:	4630      	mov	r0, r6
   b668c:	f7fd fd27 	bl	b40de <_ZN4File9availableEv>
   b6690:	4604      	mov	r4, r0
   b6692:	b188      	cbz	r0, b66b8 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b6694:	2264      	movs	r2, #100	; 0x64
   b6696:	2100      	movs	r1, #0
   b6698:	a813      	add	r0, sp, #76	; 0x4c
   b669a:	f00d fff9 	bl	c4690 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b669e:	aa13      	add	r2, sp, #76	; 0x4c
   b66a0:	2364      	movs	r3, #100	; 0x64
   b66a2:	210d      	movs	r1, #13
   b66a4:	4630      	mov	r0, r6
   b66a6:	f00b f935 	bl	c1914 <_ZN6Stream14readBytesUntilEcPcj>
   b66aa:	2300      	movs	r3, #0
   b66ac:	2264      	movs	r2, #100	; 0x64
   b66ae:	a913      	add	r1, sp, #76	; 0x4c
   b66b0:	4648      	mov	r0, r9
   b66b2:	f008 f93d 	bl	be930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b66b6:	e7e8      	b.n	b668a <_Z13dataOffloaderv+0x13e>
            interrupts();
   b66b8:	f009 fcac 	bl	c0014 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b66bc:	2228      	movs	r2, #40	; 0x28
   b66be:	4621      	mov	r1, r4
   b66c0:	a809      	add	r0, sp, #36	; 0x24
   b66c2:	f00d ffe5 	bl	c4690 <memset>
            strcpy(fileCode,"filecomp");
   b66c6:	4917      	ldr	r1, [pc, #92]	; (b6724 <_Z13dataOffloaderv+0x1d8>)
   b66c8:	a809      	add	r0, sp, #36	; 0x24
   b66ca:	f00e f847 	bl	c475c <strcpy>
   b66ce:	4623      	mov	r3, r4
   b66d0:	2228      	movs	r2, #40	; 0x28
   b66d2:	a909      	add	r1, sp, #36	; 0x24
   b66d4:	480e      	ldr	r0, [pc, #56]	; (b6710 <_Z13dataOffloaderv+0x1c4>)
   b66d6:	f008 f92b 	bl	be930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b66da:	2096      	movs	r0, #150	; 0x96
   b66dc:	f007 fed4 	bl	be488 <delay>
   b66e0:	e790      	b.n	b6604 <_Z13dataOffloaderv+0xb8>
   b66e2:	bf00      	nop
   b66e4:	000c6d50 	.word	0x000c6d50
   b66e8:	2003df08 	.word	0x2003df08
   b66ec:	000c6d6d 	.word	0x000c6d6d
   b66f0:	2003de54 	.word	0x2003de54
   b66f4:	2003e0ac 	.word	0x2003e0ac
   b66f8:	000c6d6f 	.word	0x000c6d6f
   b66fc:	000c6d9c 	.word	0x000c6d9c
   b6700:	2003dd80 	.word	0x2003dd80
   b6704:	000c6dbc 	.word	0x000c6dbc
   b6708:	000c6bd8 	.word	0x000c6bd8
   b670c:	000c6dfa 	.word	0x000c6dfa
   b6710:	2003e0a4 	.word	0x2003e0a4
   b6714:	000c6e03 	.word	0x000c6e03
   b6718:	2003def8 	.word	0x2003def8
   b671c:	000c6e0c 	.word	0x000c6e0c
   b6720:	000c6e1f 	.word	0x000c6e1f
   b6724:	000c6e47 	.word	0x000c6e47
   b6728:	000c6dd1 	.word	0x000c6dd1

000b672c <loop>:
void loop(){
   b672c:	b508      	push	{r3, lr}
    getPositionData();      //Grab position data from GPS and Compass
   b672e:	f7ff f867 	bl	b5800 <_Z15getPositionDatav>
    readPowerSys();         //Read power from battery and solar panel
   b6732:	f7ff faed 	bl	b5d10 <_Z12readPowerSysv>
    sensorHandler();        //Read and request data from Atlas sensor
   b6736:	f7ff fc97 	bl	b6068 <_Z13sensorHandlerv>
    XBeeHandler();          //Check if a string has come in from XBee
   b673a:	f7ff fe7d 	bl	b6438 <_Z11XBeeHandlerv>
    statusUpdate();         //Check if a status update has to be sent out
   b673e:	f7ff fc19 	bl	b5f74 <_Z12statusUpdatev>
    updateMotors();         //Update the motor speeds dependent on the mode
   b6742:	f7ff f93b 	bl	b59bc <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();    //Check if a signal to offload has been received
   b6746:	4b06      	ldr	r3, [pc, #24]	; (b6760 <loop+0x34>)
   b6748:	781b      	ldrb	r3, [r3, #0]
   b674a:	b10b      	cbz	r3, b6750 <loop+0x24>
   b674c:	f7ff fefe 	bl	b654c <_Z13dataOffloaderv>
    sendResponseData();     //Send sensor data if requested from the CC
   b6750:	f7ff fba6 	bl	b5ea0 <_Z16sendResponseDatav>
}
   b6754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(10);              //Slow down the program a little bit, 10ms per loop
   b6758:	200a      	movs	r0, #10
   b675a:	f007 be95 	b.w	be488 <delay>
   b675e:	bf00      	nop
   b6760:	2003e0ac 	.word	0x2003e0ac

000b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6764:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6766:	e9d0 5300 	ldrd	r5, r3, [r0]
   b676a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b676c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b676e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6772:	42ae      	cmp	r6, r5
   b6774:	d004      	beq.n	b6780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6776:	4628      	mov	r0, r5
   b6778:	f00b f8fc 	bl	c1974 <_ZN6StringD1Ev>
   b677c:	3514      	adds	r5, #20
   b677e:	e7f8      	b.n	b6772 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6780:	6820      	ldr	r0, [r4, #0]
   b6782:	f007 fe15 	bl	be3b0 <free>
    AllocatorT::free(data_);
}
   b6786:	4620      	mov	r0, r4
   b6788:	bd70      	pop	{r4, r5, r6, pc}

000b678a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b678a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b678c:	4616      	mov	r6, r2
   b678e:	b08f      	sub	sp, #60	; 0x3c
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b6790:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6792:	e9c0 2200 	strd	r2, r2, [r0]
   b6796:	4604      	mov	r4, r0
   b6798:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b679a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b679c:	4619      	mov	r1, r3
   b679e:	a804      	add	r0, sp, #16
   b67a0:	f008 f888 	bl	be8b4 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b67a4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b67a6:	4638      	mov	r0, r7
   b67a8:	f008 f884 	bl	be8b4 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b67ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b67ae:	9302      	str	r3, [sp, #8]
   b67b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b67b2:	4620      	mov	r0, r4
   b67b4:	e9cd 7300 	strd	r7, r3, [sp]
   b67b8:	4632      	mov	r2, r6
   b67ba:	ab04      	add	r3, sp, #16
   b67bc:	4629      	mov	r1, r5
   b67be:	f008 fdf7 	bl	bf3b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b67c2:	4620      	mov	r0, r4
   b67c4:	b00f      	add	sp, #60	; 0x3c
   b67c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b67c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b67c8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b67ca:	4c0b      	ldr	r4, [pc, #44]	; (b67f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b67cc:	7821      	ldrb	r1, [r4, #0]
   b67ce:	f3bf 8f5b 	dmb	ish
   b67d2:	f011 0101 	ands.w	r1, r1, #1
   b67d6:	d10b      	bne.n	b67f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b67d8:	4620      	mov	r0, r4
   b67da:	9101      	str	r1, [sp, #4]
   b67dc:	f7fd fc70 	bl	b40c0 <__cxa_guard_acquire>
   b67e0:	9901      	ldr	r1, [sp, #4]
   b67e2:	b128      	cbz	r0, b67f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b67e4:	4805      	ldr	r0, [pc, #20]	; (b67fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b67e6:	f00a ffc2 	bl	c176e <_ZN8SPIClassC1E19hal_spi_interface_t>
   b67ea:	4620      	mov	r0, r4
   b67ec:	f7fd fc6d 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b67f0:	4802      	ldr	r0, [pc, #8]	; (b67fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b67f2:	b002      	add	sp, #8
   b67f4:	bd10      	pop	{r4, pc}
   b67f6:	bf00      	nop
   b67f8:	2003dd20 	.word	0x2003dd20
   b67fc:	2003dd24 	.word	0x2003dd24

000b6800 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6800:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6804:	4604      	mov	r4, r0
   b6806:	460d      	mov	r5, r1
   b6808:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b680a:	d916      	bls.n	b683a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b680c:	4290      	cmp	r0, r2
   b680e:	d215      	bcs.n	b683c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6810:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6814:	1a75      	subs	r5, r6, r1
   b6816:	f1a1 0714 	sub.w	r7, r1, #20
   b681a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b681c:	42b7      	cmp	r7, r6
   b681e:	d01c      	beq.n	b685a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6820:	b12c      	cbz	r4, b682e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6822:	4631      	mov	r1, r6
   b6824:	4620      	mov	r0, r4
   b6826:	f00b f921 	bl	c1a6c <_ZN6StringC1EOS_>
   b682a:	7c33      	ldrb	r3, [r6, #16]
   b682c:	7423      	strb	r3, [r4, #16]
   b682e:	4630      	mov	r0, r6
   b6830:	f00b f8a0 	bl	c1974 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6834:	3e14      	subs	r6, #20
   b6836:	3c14      	subs	r4, #20
   b6838:	e7f0      	b.n	b681c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b683a:	d00e      	beq.n	b685a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b683c:	42b5      	cmp	r5, r6
   b683e:	d00c      	beq.n	b685a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6840:	b12c      	cbz	r4, b684e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6842:	4629      	mov	r1, r5
   b6844:	4620      	mov	r0, r4
   b6846:	f00b f911 	bl	c1a6c <_ZN6StringC1EOS_>
   b684a:	7c2b      	ldrb	r3, [r5, #16]
   b684c:	7423      	strb	r3, [r4, #16]
   b684e:	4628      	mov	r0, r5
   b6850:	f00b f890 	bl	c1974 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6854:	3514      	adds	r5, #20
   b6856:	3414      	adds	r4, #20
   b6858:	e7f0      	b.n	b683c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b685c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b685c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6860:	2300      	movs	r3, #0
   b6862:	e9c0 3300 	strd	r3, r3, [r0]
   b6866:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6868:	684f      	ldr	r7, [r1, #4]
   b686a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b686c:	4604      	mov	r4, r0
   b686e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6870:	dd23      	ble.n	b68ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6872:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b6876:	fb08 f007 	mul.w	r0, r8, r7
   b687a:	f007 fd91 	bl	be3a0 <malloc>
            if (!d) {
   b687e:	4605      	mov	r5, r0
   b6880:	b1d8      	cbz	r0, b68ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b6882:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6886:	fb08 1202 	mla	r2, r8, r2, r1
   b688a:	f7ff ffb9 	bl	b6800 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b688e:	6820      	ldr	r0, [r4, #0]
   b6890:	f007 fd8e 	bl	be3b0 <free>
        data_ = d;
   b6894:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6896:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6898:	e9d6 7300 	ldrd	r7, r3, [r6]
   b689c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b68a0:	45b8      	cmp	r8, r7
   b68a2:	d008      	beq.n	b68b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b68a4:	4639      	mov	r1, r7
   b68a6:	4628      	mov	r0, r5
   b68a8:	f00b f8fa 	bl	c1aa0 <_ZN6StringC1ERKS_>
   b68ac:	7c3b      	ldrb	r3, [r7, #16]
   b68ae:	742b      	strb	r3, [r5, #16]
   b68b0:	3714      	adds	r7, #20
   b68b2:	3514      	adds	r5, #20
   b68b4:	e7f4      	b.n	b68a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b68b6:	6873      	ldr	r3, [r6, #4]
   b68b8:	6063      	str	r3, [r4, #4]
}
   b68ba:	4620      	mov	r0, r4
   b68bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b68c0 <_GLOBAL__sub_I_SystemMode>:
   b68c0:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b68c2:	4b85      	ldr	r3, [pc, #532]	; (b6ad8 <_GLOBAL__sub_I_SystemMode+0x218>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b68c4:	4a85      	ldr	r2, [pc, #532]	; (b6adc <_GLOBAL__sub_I_SystemMode+0x21c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b68c6:	4d86      	ldr	r5, [pc, #536]	; (b6ae0 <_GLOBAL__sub_I_SystemMode+0x220>)
	    _M_invoker = &_My_handler::_M_invoke;
   b68c8:	4f86      	ldr	r7, [pc, #536]	; (b6ae4 <_GLOBAL__sub_I_SystemMode+0x224>)
   b68ca:	2601      	movs	r6, #1
   b68cc:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b68ce:	4b86      	ldr	r3, [pc, #536]	; (b6ae8 <_GLOBAL__sub_I_SystemMode+0x228>)
   b68d0:	2400      	movs	r4, #0
   b68d2:	b093      	sub	sp, #76	; 0x4c
    SleepResult() {}
   b68d4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b68d6:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b68da:	2002      	movs	r0, #2
   b68dc:	f007 fc7c 	bl	be1d8 <set_system_mode>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b68e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b68e4:	682b      	ldr	r3, [r5, #0]
   b68e6:	9300      	str	r3, [sp, #0]
   b68e8:	4b80      	ldr	r3, [pc, #512]	; (b6aec <_GLOBAL__sub_I_SystemMode+0x22c>)
   b68ea:	4981      	ldr	r1, [pc, #516]	; (b6af0 <_GLOBAL__sub_I_SystemMode+0x230>)
   b68ec:	681b      	ldr	r3, [r3, #0]
   b68ee:	4881      	ldr	r0, [pc, #516]	; (b6af4 <_GLOBAL__sub_I_SystemMode+0x234>)
   b68f0:	f04f 0210 	mov.w	r2, #16
   b68f4:	f7ff ff49 	bl	b678a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b68f8:	4b7f      	ldr	r3, [pc, #508]	; (b6af8 <_GLOBAL__sub_I_SystemMode+0x238>)
   b68fa:	9402      	str	r4, [sp, #8]
   b68fc:	9301      	str	r3, [sp, #4]
   b68fe:	682b      	ldr	r3, [r5, #0]
   b6900:	9300      	str	r3, [sp, #0]
   b6902:	4b7e      	ldr	r3, [pc, #504]	; (b6afc <_GLOBAL__sub_I_SystemMode+0x23c>)
   b6904:	497e      	ldr	r1, [pc, #504]	; (b6b00 <_GLOBAL__sub_I_SystemMode+0x240>)
   b6906:	681b      	ldr	r3, [r3, #0]
   b6908:	487e      	ldr	r0, [pc, #504]	; (b6b04 <_GLOBAL__sub_I_SystemMode+0x244>)
   b690a:	f04f 0204 	mov.w	r2, #4
   b690e:	f7ff ff3c 	bl	b678a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b6912:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6916:	682b      	ldr	r3, [r5, #0]
   b6918:	9300      	str	r3, [sp, #0]
   b691a:	4b7b      	ldr	r3, [pc, #492]	; (b6b08 <_GLOBAL__sub_I_SystemMode+0x248>)
   b691c:	497b      	ldr	r1, [pc, #492]	; (b6b0c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b691e:	681b      	ldr	r3, [r3, #0]
   b6920:	487b      	ldr	r0, [pc, #492]	; (b6b10 <_GLOBAL__sub_I_SystemMode+0x250>)
   b6922:	f04f 0210 	mov.w	r2, #16
   b6926:	f7ff ff30 	bl	b678a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b692a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b692e:	682b      	ldr	r3, [r5, #0]
   b6930:	9300      	str	r3, [sp, #0]
   b6932:	4b78      	ldr	r3, [pc, #480]	; (b6b14 <_GLOBAL__sub_I_SystemMode+0x254>)
   b6934:	4978      	ldr	r1, [pc, #480]	; (b6b18 <_GLOBAL__sub_I_SystemMode+0x258>)
   b6936:	681b      	ldr	r3, [r3, #0]
   b6938:	4878      	ldr	r0, [pc, #480]	; (b6b1c <_GLOBAL__sub_I_SystemMode+0x25c>)
	    _M_manager = &_My_handler::_M_manager;
   b693a:	4d79      	ldr	r5, [pc, #484]	; (b6b20 <_GLOBAL__sub_I_SystemMode+0x260>)
   b693c:	f04f 0210 	mov.w	r2, #16
   b6940:	f7ff ff23 	bl	b678a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                         //Advertising data
   b6944:	4877      	ldr	r0, [pc, #476]	; (b6b24 <_GLOBAL__sub_I_SystemMode+0x264>)
   b6946:	f008 fb46 	bl	befd6 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b694a:	4b77      	ldr	r3, [pc, #476]	; (b6b28 <_GLOBAL__sub_I_SystemMode+0x268>)
   b694c:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);           //Create timer for watchdog, which checks if certain methods of communication are available
   b694e:	aa0e      	add	r2, sp, #56	; 0x38
   b6950:	4623      	mov	r3, r4
   b6952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6956:	4875      	ldr	r0, [pc, #468]	; (b6b2c <_GLOBAL__sub_I_SystemMode+0x26c>)
	    _M_manager = &_My_handler::_M_manager;
   b6958:	9510      	str	r5, [sp, #64]	; 0x40
	    _M_invoker = &_My_handler::_M_invoke;
   b695a:	9711      	str	r7, [sp, #68]	; 0x44
   b695c:	f7fd fdf2 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6960:	a80e      	add	r0, sp, #56	; 0x38
   b6962:	f7fd fdb7 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6966:	4b72      	ldr	r3, [pc, #456]	; (b6b30 <_GLOBAL__sub_I_SystemMode+0x270>)
   b6968:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(300,LEDHandler);                     //Create timer for LED, which updates the color of the LED based on what communication/hardware modes are available
   b696a:	aa0e      	add	r2, sp, #56	; 0x38
   b696c:	4623      	mov	r3, r4
   b696e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6972:	4870      	ldr	r0, [pc, #448]	; (b6b34 <_GLOBAL__sub_I_SystemMode+0x274>)
	    _M_manager = &_My_handler::_M_manager;
   b6974:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6978:	f7fd fde4 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b697c:	a80e      	add	r0, sp, #56	; 0x38
   b697e:	f7fd fda9 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6982:	4b6d      	ldr	r3, [pc, #436]	; (b6b38 <_GLOBAL__sub_I_SystemMode+0x278>)
   b6984:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);             //Create timer for motor watchdog, which cuts off motors if messages from CC have not been received recently enough
   b6986:	aa0e      	add	r2, sp, #56	; 0x38
   b6988:	4623      	mov	r3, r4
   b698a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b698e:	486b      	ldr	r0, [pc, #428]	; (b6b3c <_GLOBAL__sub_I_SystemMode+0x27c>)
	    _M_manager = &_My_handler::_M_manager;
   b6990:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6994:	f7fd fdd6 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6998:	a80e      	add	r0, sp, #56	; 0x38
   b699a:	f7fd fd9b 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b699e:	4b68      	ldr	r3, [pc, #416]	; (b6b40 <_GLOBAL__sub_I_SystemMode+0x280>)
   b69a0:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);            //Create timer for status, which calculates the status values that will be transmitted to CC and sets a flag for transmitting out the status
   b69a2:	aa0e      	add	r2, sp, #56	; 0x38
   b69a4:	4623      	mov	r3, r4
   b69a6:	f242 7110 	movw	r1, #10000	; 0x2710
   b69aa:	4866      	ldr	r0, [pc, #408]	; (b6b44 <_GLOBAL__sub_I_SystemMode+0x284>)
	    _M_manager = &_My_handler::_M_manager;
   b69ac:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b69b0:	f7fd fdc8 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b69b4:	a80e      	add	r0, sp, #56	; 0x38
   b69b6:	f7fd fd8d 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b69ba:	4b63      	ldr	r3, [pc, #396]	; (b6b48 <_GLOBAL__sub_I_SystemMode+0x288>)
   b69bc:	930e      	str	r3, [sp, #56]	; 0x38
Timer shutdownTimer(SHUTDOWN_HOLD, buttonTimer);    //Create timer for shutdown, which runs when the button is pressed to calculate if the button has been held for SHUTDOWN_HOLD seconds 
   b69be:	aa0e      	add	r2, sp, #56	; 0x38
   b69c0:	4623      	mov	r3, r4
   b69c2:	f640 31b8 	movw	r1, #3000	; 0xbb8
   b69c6:	4861      	ldr	r0, [pc, #388]	; (b6b4c <_GLOBAL__sub_I_SystemMode+0x28c>)
	    _M_manager = &_My_handler::_M_manager;
   b69c8:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b69cc:	f7fd fdba 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b69d0:	a80e      	add	r0, sp, #56	; 0x38
   b69d2:	f7fd fd7f 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
SFE_UBLOX_GNSS myGPS;                           //GPS Buffer and Objects
   b69d6:	485e      	ldr	r0, [pc, #376]	; (b6b50 <_GLOBAL__sub_I_SystemMode+0x290>)
  explicit SdFat(SPIClass* spiPort) {
   b69d8:	4d5e      	ldr	r5, [pc, #376]	; (b6b54 <_GLOBAL__sub_I_SystemMode+0x294>)
   b69da:	f001 ff11 	bl	b8800 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;                       //Compass object
   b69de:	485e      	ldr	r0, [pc, #376]	; (b6b58 <_GLOBAL__sub_I_SystemMode+0x298>)
   b69e0:	f001 fcf8 	bl	b83d4 <_ZN16Adafruit_LIS3MDLC1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b69e4:	4622      	mov	r2, r4
   b69e6:	2114      	movs	r1, #20
   b69e8:	4630      	mov	r0, r6
   b69ea:	f007 fc1d 	bl	be228 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b69ee:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b69f0:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b69f2:	9200      	str	r2, [sp, #0]
   b69f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b69f8:	4632      	mov	r2, r6
   b69fa:	4858      	ldr	r0, [pc, #352]	; (b6b5c <_GLOBAL__sub_I_SystemMode+0x29c>)
   b69fc:	9601      	str	r6, [sp, #4]
   b69fe:	f009 fd61 	bl	c04c4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b6a02:	f7ff fee1 	bl	b67c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6a06:	2364      	movs	r3, #100	; 0x64
   b6a08:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
  {
   b6a0c:	4b54      	ldr	r3, [pc, #336]	; (b6b60 <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b6a0e:	606c      	str	r4, [r5, #4]
   b6a10:	f8c5 443c 	str.w	r4, [r5, #1084]	; 0x43c
   b6a14:	f8c5 4468 	str.w	r4, [r5, #1128]	; 0x468
   b6a18:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   b6a1c:	f885 6474 	strb.w	r6, [r5, #1140]	; 0x474
   b6a20:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   b6a24:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b6a28:	b908      	cbnz	r0, b6a2e <_GLOBAL__sub_I_SystemMode+0x16e>
   b6a2a:	f7ff fecd 	bl	b67c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b6a2e:	4a4d      	ldr	r2, [pc, #308]	; (b6b64 <_GLOBAL__sub_I_SystemMode+0x2a4>)
  File() {}
   b6a30:	494d      	ldr	r1, [pc, #308]	; (b6b68 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   b6a32:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6a36:	2300      	movs	r3, #0
   b6a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6a3c:	e9c2 3001 	strd	r3, r0, [r2, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6a40:	6113      	str	r3, [r2, #16]
   b6a42:	6011      	str	r1, [r2, #0]
   b6a44:	4a49      	ldr	r2, [pc, #292]	; (b6b6c <_GLOBAL__sub_I_SystemMode+0x2ac>)
        capacity_(0) {
   b6a46:	9307      	str	r3, [sp, #28]
   b6a48:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b6a4c:	6113      	str	r3, [r2, #16]
   b6a4e:	6011      	str	r1, [r2, #0]
   b6a50:	4a47      	ldr	r2, [pc, #284]	; (b6b70 <_GLOBAL__sub_I_SystemMode+0x2b0>)
        filter_(level, filters) {
   b6a52:	4c48      	ldr	r4, [pc, #288]	; (b6b74 <_GLOBAL__sub_I_SystemMode+0x2b4>)
   b6a54:	6113      	str	r3, [r2, #16]
   b6a56:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b6a5a:	6011      	str	r1, [r2, #0]
   b6a5c:	e9cd 3305 	strd	r3, r3, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b6a60:	f00b fa1c 	bl	c1e9c <_Z16_fetch_usbserialv>
   b6a64:	a905      	add	r1, sp, #20
   b6a66:	4605      	mov	r5, r0
   b6a68:	a808      	add	r0, sp, #32
   b6a6a:	f7ff fef7 	bl	b685c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b6a6e:	a908      	add	r1, sp, #32
   b6a70:	a80b      	add	r0, sp, #44	; 0x2c
   b6a72:	f7ff fef3 	bl	b685c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6a76:	4b40      	ldr	r3, [pc, #256]	; (b6b78 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   b6a78:	6023      	str	r3, [r4, #0]
   b6a7a:	a90b      	add	r1, sp, #44	; 0x2c
   b6a7c:	a80e      	add	r0, sp, #56	; 0x38
   b6a7e:	f7ff feed 	bl	b685c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6a82:	aa0e      	add	r2, sp, #56	; 0x38
   b6a84:	211e      	movs	r1, #30
   b6a86:	1d20      	adds	r0, r4, #4
   b6a88:	f00a f9b8 	bl	c0dfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a8c:	a80e      	add	r0, sp, #56	; 0x38
   b6a8e:	f7ff fe69 	bl	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6a92:	a80b      	add	r0, sp, #44	; 0x2c
   b6a94:	f7ff fe66 	bl	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a98:	4b38      	ldr	r3, [pc, #224]	; (b6b7c <_GLOBAL__sub_I_SystemMode+0x2bc>)
   b6a9a:	6023      	str	r3, [r4, #0]
   b6a9c:	6225      	str	r5, [r4, #32]
   b6a9e:	a808      	add	r0, sp, #32
   b6aa0:	f7ff fe60 	bl	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6aa4:	4b36      	ldr	r3, [pc, #216]	; (b6b80 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b6aa6:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6aa8:	f00b f9f8 	bl	c1e9c <_Z16_fetch_usbserialv>
   b6aac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6ab0:	f00b f9e4 	bl	c1e7c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b6ab4:	f009 fe84 	bl	c07c0 <_ZN5spark10LogManager8instanceEv>
   b6ab8:	4621      	mov	r1, r4
   b6aba:	f00a f875 	bl	c0ba8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);    //Log Configuration
   b6abe:	a805      	add	r0, sp, #20
   b6ac0:	f7ff fe50 	bl	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL;                                     //Object for servo esc of left motor 
   b6ac4:	482f      	ldr	r0, [pc, #188]	; (b6b84 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   b6ac6:	f00a fe0d 	bl	c16e4 <_ZN5ServoC1Ev>
Servo ESCR;                                     //Object for servo esc of right motor
   b6aca:	482f      	ldr	r0, [pc, #188]	; (b6b88 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   b6acc:	b013      	add	sp, #76	; 0x4c
   b6ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
Servo ESCR;                                     //Object for servo esc of right motor
   b6ad2:	f00a be07 	b.w	c16e4 <_ZN5ServoC1Ev>
   b6ad6:	bf00      	nop
   b6ad8:	2003dd7c 	.word	0x2003dd7c
   b6adc:	ffff0000 	.word	0xffff0000
   b6ae0:	2003db20 	.word	0x2003db20
   b6ae4:	000b4243 	.word	0x000b4243
   b6ae8:	2003dd68 	.word	0x2003dd68
   b6aec:	2003db34 	.word	0x2003db34
   b6af0:	000c6e50 	.word	0x000c6e50
   b6af4:	2003e5e4 	.word	0x2003e5e4
   b6af8:	000b4cc9 	.word	0x000b4cc9
   b6afc:	2003db30 	.word	0x2003db30
   b6b00:	000c6e53 	.word	0x000c6e53
   b6b04:	2003e0b8 	.word	0x2003e0b8
   b6b08:	2003db2c 	.word	0x2003db2c
   b6b0c:	000c6e56 	.word	0x000c6e56
   b6b10:	2003e0a4 	.word	0x2003e0a4
   b6b14:	2003db28 	.word	0x2003db28
   b6b18:	000c6e5a 	.word	0x000c6e5a
   b6b1c:	2003dd98 	.word	0x2003dd98
   b6b20:	000b422f 	.word	0x000b422f
   b6b24:	2003dd80 	.word	0x2003dd80
   b6b28:	000b46bd 	.word	0x000b46bd
   b6b2c:	2003e5f0 	.word	0x2003e5f0
   b6b30:	000b45bd 	.word	0x000b45bd
   b6b34:	2003ddfc 	.word	0x2003ddfc
   b6b38:	000b43ed 	.word	0x000b43ed
   b6b3c:	2003dedc 	.word	0x2003dedc
   b6b40:	000b40f9 	.word	0x000b40f9
   b6b44:	2003e5a8 	.word	0x2003e5a8
   b6b48:	000b433d 	.word	0x000b433d
   b6b4c:	2003e560 	.word	0x2003e560
   b6b50:	2003df2c 	.word	0x2003df2c
   b6b54:	2003e0c0 	.word	0x2003e0c0
   b6b58:	2003de1c 	.word	0x2003de1c
   b6b5c:	2003e584 	.word	0x2003e584
   b6b60:	000c6e68 	.word	0x000c6e68
   b6b64:	2003def8 	.word	0x2003def8
   b6b68:	000c6ed4 	.word	0x000c6ed4
   b6b6c:	2003de78 	.word	0x2003de78
   b6b70:	2003de44 	.word	0x2003de44
   b6b74:	2003deac 	.word	0x2003deac
   b6b78:	000c6e90 	.word	0x000c6e90
   b6b7c:	000c808c 	.word	0x000c808c
   b6b80:	000c6ebc 	.word	0x000c6ebc
   b6b84:	2003dd40 	.word	0x2003dd40
   b6b88:	2003dd50 	.word	0x2003dd50

000b6b8c <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6b8c:	b538      	push	{r3, r4, r5, lr}
   b6b8e:	4604      	mov	r4, r0
   b6b90:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6b92:	2224      	movs	r2, #36	; 0x24
   b6b94:	2100      	movs	r1, #0
   b6b96:	f00d fd7b 	bl	c4690 <memset>

  m_vol = vol;
   b6b9a:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b6b9c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6b9e:	2b10      	cmp	r3, #16
   b6ba0:	d003      	beq.n	b6baa <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6ba2:	2b20      	cmp	r3, #32
   b6ba4:	d006      	beq.n	b6bb4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6ba6:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6ba8:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6baa:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6bac:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6bae:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6bb0:	70a0      	strb	r0, [r4, #2]
  return true;
   b6bb2:	e7f9      	b.n	b6ba8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6bb4:	2340      	movs	r3, #64	; 0x40
   b6bb6:	e7f9      	b.n	b6bac <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6bb8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6bb8:	b510      	push	{r4, lr}
   b6bba:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6bbc:	3024      	adds	r0, #36	; 0x24
   b6bbe:	f000 ff66 	bl	b7a8e <_ZN8FatCache4syncEv>
   b6bc2:	b128      	cbz	r0, b6bd0 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6bc4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6bcc:	f000 bf5f 	b.w	b7a8e <_ZN8FatCache4syncEv>
  }
   b6bd0:	bd10      	pop	{r4, pc}

000b6bd2 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6bd2:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6bd4:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6bd6:	f043 0304 	orr.w	r3, r3, #4
   b6bda:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6bdc:	f100 0210 	add.w	r2, r0, #16
   b6be0:	6880      	ldr	r0, [r0, #8]
   b6be2:	f001 b80a 	b.w	b7bfa <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6be8 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6bec:	7801      	ldrb	r1, [r0, #0]
   b6bee:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b6bf2:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6bf4:	d003      	beq.n	b6bfe <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6bf6:	2600      	movs	r6, #0
}
   b6bf8:	4630      	mov	r0, r6
   b6bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6bfe:	6942      	ldr	r2, [r0, #20]
   b6c00:	4b17      	ldr	r3, [pc, #92]	; (b6c60 <_ZN7FatFile13addDirClusterEv+0x78>)
   b6c02:	429a      	cmp	r2, r3
   b6c04:	d2f7      	bcs.n	b6bf6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6c06:	f7ff ffe4 	bl	b6bd2 <_ZN7FatFile10addClusterEv>
   b6c0a:	4606      	mov	r6, r0
   b6c0c:	2800      	cmp	r0, #0
   b6c0e:	d0f2      	beq.n	b6bf6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6c10:	6921      	ldr	r1, [r4, #16]
   b6c12:	68a0      	ldr	r0, [r4, #8]
   b6c14:	f000 ff86 	bl	b7b24 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6c18:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b6c1a:	68a0      	ldr	r0, [r4, #8]
   b6c1c:	2205      	movs	r2, #5
   b6c1e:	4639      	mov	r1, r7
   b6c20:	3024      	adds	r0, #36	; 0x24
   b6c22:	f000 ff5c 	bl	b7ade <_ZN8FatCache4readEmh>
  if (!pc) {
   b6c26:	4680      	mov	r8, r0
   b6c28:	2800      	cmp	r0, #0
   b6c2a:	d0e4      	beq.n	b6bf6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6c2c:	4629      	mov	r1, r5
   b6c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6c32:	f00d fd2d 	bl	c4690 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6c36:	2501      	movs	r5, #1
   b6c38:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6c3a:	791a      	ldrb	r2, [r3, #4]
   b6c3c:	42aa      	cmp	r2, r5
   b6c3e:	d909      	bls.n	b6c54 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6c40:	6818      	ldr	r0, [r3, #0]
   b6c42:	4642      	mov	r2, r8
   b6c44:	19e9      	adds	r1, r5, r7
   b6c46:	f001 fab6 	bl	b81b6 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6c4a:	2800      	cmp	r0, #0
   b6c4c:	d0d3      	beq.n	b6bf6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6c4e:	3501      	adds	r5, #1
   b6c50:	b2ed      	uxtb	r5, r5
   b6c52:	e7f1      	b.n	b6c38 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6c54:	6963      	ldr	r3, [r4, #20]
   b6c56:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6c5a:	6163      	str	r3, [r4, #20]
  return true;
   b6c5c:	e7cc      	b.n	b6bf8 <_ZN7FatFile13addDirClusterEv+0x10>
   b6c5e:	bf00      	nop
   b6c60:	001ffe00 	.word	0x001ffe00

000b6c64 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6c64:	b510      	push	{r4, lr}
   b6c66:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6c68:	6880      	ldr	r0, [r0, #8]
   b6c6a:	460a      	mov	r2, r1
   b6c6c:	3024      	adds	r0, #36	; 0x24
   b6c6e:	69a1      	ldr	r1, [r4, #24]
   b6c70:	f000 ff35 	bl	b7ade <_ZN8FatCache4readEmh>
  if (!pc) {
   b6c74:	b120      	cbz	r0, b6c80 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6c76:	88a3      	ldrh	r3, [r4, #4]
   b6c78:	f003 030f 	and.w	r3, r3, #15
   b6c7c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6c80:	bd10      	pop	{r4, pc}

000b6c82 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b6c82:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b6c84:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6c86:	4604      	mov	r4, r0
   b6c88:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b6c8a:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6c8c:	4618      	mov	r0, r3
      name[j++] = '.';
   b6c8e:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6c90:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b6c94:	2a20      	cmp	r2, #32
   b6c96:	d018      	beq.n	b6cca <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b6c98:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b6c9a:	bf02      	ittt	eq
   b6c9c:	540f      	strbeq	r7, [r1, r0]
   b6c9e:	1c42      	addeq	r2, r0, #1
   b6ca0:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b6ca2:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6ca4:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b6ca8:	bf08      	it	eq
   b6caa:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6cac:	f1bc 0f19 	cmp.w	ip, #25
   b6cb0:	d806      	bhi.n	b6cc0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6cb2:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b6cb6:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b6cba:	bf1c      	itt	ne
   b6cbc:	3220      	addne	r2, #32
   b6cbe:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6cc0:	f100 0c01 	add.w	ip, r0, #1
   b6cc4:	540a      	strb	r2, [r1, r0]
   b6cc6:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b6cca:	3301      	adds	r3, #1
   b6ccc:	b2db      	uxtb	r3, r3
   b6cce:	2b0b      	cmp	r3, #11
   b6cd0:	d1de      	bne.n	b6c90 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b6cd2:	2300      	movs	r3, #0
   b6cd4:	540b      	strb	r3, [r1, r0]
}
   b6cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6cd8 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6cd8:	7803      	ldrb	r3, [r0, #0]
   b6cda:	b90b      	cbnz	r3, b6ce0 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6cdc:	f7ff bf56 	b.w	b6b8c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6ce0:	2000      	movs	r0, #0
   b6ce2:	4770      	bx	lr

000b6ce4 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6ce8:	7803      	ldrb	r3, [r0, #0]
   b6cea:	4604      	mov	r4, r0
   b6cec:	4688      	mov	r8, r1
   b6cee:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6cf0:	2b00      	cmp	r3, #0
   b6cf2:	d05d      	beq.n	b6db0 <_ZN7FatFile4readEPvj+0xcc>
   b6cf4:	7882      	ldrb	r2, [r0, #2]
   b6cf6:	07d1      	lsls	r1, r2, #31
   b6cf8:	d55a      	bpl.n	b6db0 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6cfa:	071a      	lsls	r2, r3, #28
   b6cfc:	d52d      	bpl.n	b6d5a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6cfe:	69c3      	ldr	r3, [r0, #28]
   b6d00:	6942      	ldr	r2, [r0, #20]
   b6d02:	1a9b      	subs	r3, r3, r2
   b6d04:	429d      	cmp	r5, r3
   b6d06:	bf28      	it	cs
   b6d08:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6d0a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6d0c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6d10:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6d14:	2e00      	cmp	r6, #0
   b6d16:	f000 808f 	beq.w	b6e38 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6d1a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6d1c:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d1e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6d20:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b6d22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d26:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6d2a:	d51f      	bpl.n	b6d6c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6d2c:	6a00      	ldr	r0, [r0, #32]
   b6d2e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6d30:	68a0      	ldr	r0, [r4, #8]
   b6d32:	f1ba 0f00 	cmp.w	sl, #0
   b6d36:	d142      	bne.n	b6dbe <_ZN7FatFile4readEPvj+0xda>
   b6d38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6d3c:	d33f      	bcc.n	b6dbe <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6d3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6d40:	4299      	cmp	r1, r3
   b6d42:	d03c      	beq.n	b6dbe <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6d44:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6d48:	d252      	bcs.n	b6df0 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6d4a:	6800      	ldr	r0, [r0, #0]
   b6d4c:	4642      	mov	r2, r8
   b6d4e:	f001 f9a9 	bl	b80a4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6d52:	b368      	cbz	r0, b6db0 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6d54:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6d58:	e044      	b.n	b6de4 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6d5a:	069b      	lsls	r3, r3, #26
   b6d5c:	d5d5      	bpl.n	b6d0a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6d5e:	6883      	ldr	r3, [r0, #8]
   b6d60:	891a      	ldrh	r2, [r3, #8]
   b6d62:	6943      	ldr	r3, [r0, #20]
   b6d64:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6d68:	b29b      	uxth	r3, r3
   b6d6a:	e7cb      	b.n	b6d04 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6d6c:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6d70:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6d74:	f1ba 0f00 	cmp.w	sl, #0
   b6d78:	d108      	bne.n	b6d8c <_ZN7FatFile4readEPvj+0xa8>
   b6d7a:	f1b9 0f00 	cmp.w	r9, #0
   b6d7e:	d105      	bne.n	b6d8c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6d80:	b95b      	cbnz	r3, b6d9a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6d82:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6d84:	bf4c      	ite	mi
   b6d86:	6a03      	ldrmi	r3, [r0, #32]
   b6d88:	6a23      	ldrpl	r3, [r4, #32]
   b6d8a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6d8c:	6921      	ldr	r1, [r4, #16]
   b6d8e:	68a0      	ldr	r0, [r4, #8]
   b6d90:	f000 fec8 	bl	b7b24 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6d94:	eb09 0100 	add.w	r1, r9, r0
   b6d98:	e7ca      	b.n	b6d30 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6d9a:	6921      	ldr	r1, [r4, #16]
   b6d9c:	465a      	mov	r2, fp
   b6d9e:	f000 fec7 	bl	b7b30 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6da2:	2800      	cmp	r0, #0
   b6da4:	db04      	blt.n	b6db0 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6da6:	d1f1      	bne.n	b6d8c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6da8:	7823      	ldrb	r3, [r4, #0]
   b6daa:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6dae:	d143      	bne.n	b6e38 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6db0:	7863      	ldrb	r3, [r4, #1]
   b6db2:	f043 0302 	orr.w	r3, r3, #2
   b6db6:	7063      	strb	r3, [r4, #1]
  return -1;
   b6db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6dbc:	e03d      	b.n	b6e3a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6dbe:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6dc2:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6dc4:	f04f 0200 	mov.w	r2, #0
   b6dc8:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6dcc:	bf28      	it	cs
   b6dce:	4637      	movcs	r7, r6
   b6dd0:	f000 fe85 	bl	b7ade <_ZN8FatCache4readEmh>
      if (!pc) {
   b6dd4:	2800      	cmp	r0, #0
   b6dd6:	d0eb      	beq.n	b6db0 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6dd8:	eb00 010a 	add.w	r1, r0, sl
   b6ddc:	463a      	mov	r2, r7
   b6dde:	4640      	mov	r0, r8
   b6de0:	f00d fc2e 	bl	c4640 <memcpy>
    m_curPosition += n;
   b6de4:	6963      	ldr	r3, [r4, #20]
   b6de6:	443b      	add	r3, r7
    dst += n;
   b6de8:	44b8      	add	r8, r7
    m_curPosition += n;
   b6dea:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6dec:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6dee:	e791      	b.n	b6d14 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6df0:	7822      	ldrb	r2, [r4, #0]
   b6df2:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6df4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6df8:	d406      	bmi.n	b6e08 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6dfa:	7902      	ldrb	r2, [r0, #4]
   b6dfc:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6e00:	b2d2      	uxtb	r2, r2
   b6e02:	4592      	cmp	sl, r2
   b6e04:	bf28      	it	cs
   b6e06:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e08:	4299      	cmp	r1, r3
      n = 512*nb;
   b6e0a:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e0e:	d208      	bcs.n	b6e22 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6e10:	68a0      	ldr	r0, [r4, #8]
   b6e12:	4653      	mov	r3, sl
   b6e14:	6800      	ldr	r0, [r0, #0]
   b6e16:	4642      	mov	r2, r8
   b6e18:	f001 f98c 	bl	b8134 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6e1c:	2800      	cmp	r0, #0
   b6e1e:	d1e1      	bne.n	b6de4 <_ZN7FatFile4readEPvj+0x100>
   b6e20:	e7c6      	b.n	b6db0 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6e22:	4453      	add	r3, sl
   b6e24:	428b      	cmp	r3, r1
   b6e26:	d9f3      	bls.n	b6e10 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6e28:	3024      	adds	r0, #36	; 0x24
   b6e2a:	9101      	str	r1, [sp, #4]
   b6e2c:	f000 fe2f 	bl	b7a8e <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6e30:	9901      	ldr	r1, [sp, #4]
   b6e32:	2800      	cmp	r0, #0
   b6e34:	d1ec      	bne.n	b6e10 <_ZN7FatFile4readEPvj+0x12c>
   b6e36:	e7bb      	b.n	b6db0 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6e38:	1ba8      	subs	r0, r5, r6
}
   b6e3a:	b003      	add	sp, #12
   b6e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6e40 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6e42:	2201      	movs	r2, #1
   b6e44:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6e48:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6e4c:	4604      	mov	r4, r0
   b6e4e:	f7ff ff49 	bl	b6ce4 <_ZN7FatFile4readEPvj>
   b6e52:	2801      	cmp	r0, #1
   b6e54:	bf0a      	itet	eq
   b6e56:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6e5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6e5e:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6e62:	b002      	add	sp, #8
   b6e64:	bd70      	pop	{r4, r5, r6, pc}

000b6e66 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6e66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6e68:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6e6a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6e6e:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6e70:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6e74:	d000      	beq.n	b6e78 <_ZN7FatFile12readDirCacheEb+0x12>
   b6e76:	b999      	cbnz	r1, b6ea0 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6e78:	2201      	movs	r2, #1
   b6e7a:	f10d 0107 	add.w	r1, sp, #7
   b6e7e:	4620      	mov	r0, r4
   b6e80:	f7ff ff30 	bl	b6ce4 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6e84:	b240      	sxtb	r0, r0
   b6e86:	2801      	cmp	r0, #1
   b6e88:	d002      	beq.n	b6e90 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6e8a:	2000      	movs	r0, #0
}
   b6e8c:	b003      	add	sp, #12
   b6e8e:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6e90:	6963      	ldr	r3, [r4, #20]
   b6e92:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6e94:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6e96:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6e98:	3030      	adds	r0, #48	; 0x30
   b6e9a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6e9e:	e7f5      	b.n	b6e8c <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6ea0:	3320      	adds	r3, #32
   b6ea2:	e7f7      	b.n	b6e94 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6ea4 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6ea8:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6eaa:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6eac:	4604      	mov	r4, r0
   b6eae:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6eb0:	b162      	cbz	r2, b6ecc <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6eb2:	6940      	ldr	r0, [r0, #20]
   b6eb4:	4288      	cmp	r0, r1
   b6eb6:	d002      	beq.n	b6ebe <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6eb8:	b919      	cbnz	r1, b6ec2 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6eba:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6ebc:	6165      	str	r5, [r4, #20]
    return true;
   b6ebe:	2001      	movs	r0, #1
   b6ec0:	e006      	b.n	b6ed0 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6ec2:	0716      	lsls	r6, r2, #28
   b6ec4:	d506      	bpl.n	b6ed4 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6ec6:	69e3      	ldr	r3, [r4, #28]
   b6ec8:	428b      	cmp	r3, r1
   b6eca:	d20b      	bcs.n	b6ee4 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6ecc:	6127      	str	r7, [r4, #16]
  return false;
   b6ece:	2000      	movs	r0, #0
}
   b6ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6ed4:	0691      	lsls	r1, r2, #26
   b6ed6:	d505      	bpl.n	b6ee4 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6ed8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6eda:	891b      	ldrh	r3, [r3, #8]
   b6edc:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6ee0:	d9ec      	bls.n	b6ebc <_ZN7FatFile7seekSetEm+0x18>
   b6ee2:	e7f3      	b.n	b6ecc <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6ee4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6ee8:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6eec:	1e43      	subs	r3, r0, #1
   b6eee:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6ef2:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6ef4:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6ef6:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6ef8:	42b3      	cmp	r3, r6
   b6efa:	d800      	bhi.n	b6efe <_ZN7FatFile7seekSetEm+0x5a>
   b6efc:	b998      	cbnz	r0, b6f26 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6efe:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6f00:	bf4c      	ite	mi
   b6f02:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6f06:	6a23      	ldrpl	r3, [r4, #32]
   b6f08:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6f0a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6f0e:	2e00      	cmp	r6, #0
   b6f10:	d0d4      	beq.n	b6ebc <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6f12:	6921      	ldr	r1, [r4, #16]
   b6f14:	68a0      	ldr	r0, [r4, #8]
   b6f16:	4642      	mov	r2, r8
   b6f18:	f000 fe0a 	bl	b7b30 <_ZN9FatVolume6fatGetEmPm>
   b6f1c:	2800      	cmp	r0, #0
   b6f1e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6f22:	dcf4      	bgt.n	b6f0e <_ZN7FatFile7seekSetEm+0x6a>
   b6f24:	e7d2      	b.n	b6ecc <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6f26:	1af6      	subs	r6, r6, r3
   b6f28:	e7ef      	b.n	b6f0a <_ZN7FatFile7seekSetEm+0x66>

000b6f2a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f2c:	460f      	mov	r7, r1
   b6f2e:	4604      	mov	r4, r0
   b6f30:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6f32:	2100      	movs	r1, #0
   b6f34:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6f36:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6f38:	f00d fbaa 	bl	c4690 <memset>
  m_vol = dirFile->m_vol;
   b6f3c:	68b8      	ldr	r0, [r7, #8]
   b6f3e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6f40:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6f42:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6f46:	6a3b      	ldr	r3, [r7, #32]
   b6f48:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6f4a:	016a      	lsls	r2, r5, #5
   b6f4c:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6f50:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6f54:	071f      	lsls	r7, r3, #28
   b6f56:	d444      	bmi.n	b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6f58:	f003 0317 	and.w	r3, r3, #23
   b6f5c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6f5e:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6f62:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6f66:	bf04      	itt	eq
   b6f68:	f043 0308 	orreq.w	r3, r3, #8
   b6f6c:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6f6e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6f72:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6f74:	f006 0303 	and.w	r3, r6, #3
   b6f78:	2b01      	cmp	r3, #1
   b6f7a:	d02c      	beq.n	b6fd6 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6f7c:	2b02      	cmp	r3, #2
   b6f7e:	d028      	beq.n	b6fd2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6f80:	bb7b      	cbnz	r3, b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6f82:	0571      	lsls	r1, r6, #21
   b6f84:	d42d      	bmi.n	b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6f86:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6f88:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6f8a:	78a1      	ldrb	r1, [r4, #2]
   b6f8c:	078b      	lsls	r3, r1, #30
   b6f8e:	d504      	bpl.n	b6f9a <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6f90:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6f92:	06df      	lsls	r7, r3, #27
   b6f94:	d425      	bmi.n	b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6f96:	07dd      	lsls	r5, r3, #31
   b6f98:	d423      	bmi.n	b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6f9a:	11b3      	asrs	r3, r6, #6
   b6f9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6fa0:	f006 0508 	and.w	r5, r6, #8
   b6fa4:	432b      	orrs	r3, r5
   b6fa6:	430b      	orrs	r3, r1
   b6fa8:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6faa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6fac:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6fae:	1883      	adds	r3, r0, r2
   b6fb0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6fb4:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6fb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6fbc:	0572      	lsls	r2, r6, #21
   b6fbe:	d513      	bpl.n	b6fe8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6fc0:	b959      	cbnz	r1, b6fda <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6fc2:	78a3      	ldrb	r3, [r4, #2]
   b6fc4:	f043 0304 	orr.w	r3, r3, #4
   b6fc8:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6fca:	0473      	lsls	r3, r6, #17
   b6fcc:	d410      	bmi.n	b6ff0 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6fce:	2001      	movs	r0, #1
}
   b6fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6fd2:	2303      	movs	r3, #3
   b6fd4:	e7d8      	b.n	b6f88 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6fd6:	2302      	movs	r3, #2
   b6fd8:	e7d6      	b.n	b6f88 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6fda:	f000 fe49 	bl	b7c70 <_ZN9FatVolume9freeChainEm>
   b6fde:	2800      	cmp	r0, #0
   b6fe0:	d1ef      	bne.n	b6fc2 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6fe2:	2000      	movs	r0, #0
   b6fe4:	7020      	strb	r0, [r4, #0]
  return false;
   b6fe6:	e7f3      	b.n	b6fd0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6fe8:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6fec:	61e3      	str	r3, [r4, #28]
   b6fee:	e7ec      	b.n	b6fca <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6ff0:	69e1      	ldr	r1, [r4, #28]
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	f7ff ff56 	bl	b6ea4 <_ZN7FatFile7seekSetEm>
   b6ff8:	2800      	cmp	r0, #0
   b6ffa:	d1e8      	bne.n	b6fce <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6ffc:	e7f1      	b.n	b6fe2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6ffe <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b6ffe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b7002:	7803      	ldrb	r3, [r0, #0]
   b7004:	4607      	mov	r7, r0
   b7006:	460d      	mov	r5, r1
   b7008:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b700a:	bb53      	cbnz	r3, b7062 <_ZN7FatFile8openNextEPS_i+0x64>
   b700c:	780b      	ldrb	r3, [r1, #0]
   b700e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7012:	d026      	beq.n	b7062 <_ZN7FatFile8openNextEPS_i+0x64>
   b7014:	694c      	ldr	r4, [r1, #20]
   b7016:	f014 041f 	ands.w	r4, r4, #31
   b701a:	d122      	bne.n	b7062 <_ZN7FatFile8openNextEPS_i+0x64>
   b701c:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b701e:	2100      	movs	r1, #0
   b7020:	4628      	mov	r0, r5
    return m_curPosition;
   b7022:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b7026:	f7ff ff1e 	bl	b6e66 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b702a:	b1d0      	cbz	r0, b7062 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b702c:	7806      	ldrb	r6, [r0, #0]
   b702e:	b1c6      	cbz	r6, b7062 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b7030:	2e2e      	cmp	r6, #46	; 0x2e
   b7032:	d010      	beq.n	b7056 <_ZN7FatFile8openNextEPS_i+0x58>
   b7034:	2ee5      	cmp	r6, #229	; 0xe5
   b7036:	d00e      	beq.n	b7056 <_ZN7FatFile8openNextEPS_i+0x58>
   b7038:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b703a:	071a      	lsls	r2, r3, #28
   b703c:	d413      	bmi.n	b7066 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b703e:	b964      	cbnz	r4, b705a <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b7040:	9400      	str	r4, [sp, #0]
   b7042:	4653      	mov	r3, sl
   b7044:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b7048:	4629      	mov	r1, r5
   b704a:	4638      	mov	r0, r7
   b704c:	f7ff ff6d 	bl	b6f2a <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b7050:	b002      	add	sp, #8
   b7052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b7056:	2400      	movs	r4, #0
   b7058:	e7e1      	b.n	b701e <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b705a:	f000 f971 	bl	b7340 <_ZN7FatFile11lfnChecksumEPh>
   b705e:	4540      	cmp	r0, r8
   b7060:	d0ee      	beq.n	b7040 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b7062:	2000      	movs	r0, #0
   b7064:	e7f4      	b.n	b7050 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7066:	2b0f      	cmp	r3, #15
   b7068:	d1f5      	bne.n	b7056 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b706a:	0673      	lsls	r3, r6, #25
   b706c:	d5d7      	bpl.n	b701e <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b706e:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b7072:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b7076:	e7d2      	b.n	b701e <_ZN7FatFile8openNextEPS_i+0x20>

000b7078 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b7078:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b707a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b707c:	4604      	mov	r4, r0
  if (!isOpen()) {
   b707e:	b90b      	cbnz	r3, b7084 <_ZN7FatFile4syncEv+0xc>
    return true;
   b7080:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b7082:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7084:	7883      	ldrb	r3, [r0, #2]
   b7086:	075a      	lsls	r2, r3, #29
   b7088:	d523      	bpl.n	b70d2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b708a:	2101      	movs	r1, #1
   b708c:	f7ff fdea 	bl	b6c64 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b7090:	4605      	mov	r5, r0
   b7092:	b928      	cbnz	r0, b70a0 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7094:	7863      	ldrb	r3, [r4, #1]
   b7096:	f043 0301 	orr.w	r3, r3, #1
   b709a:	7063      	strb	r3, [r4, #1]
  return false;
   b709c:	2000      	movs	r0, #0
   b709e:	e7f0      	b.n	b7082 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b70a0:	7803      	ldrb	r3, [r0, #0]
   b70a2:	2be5      	cmp	r3, #229	; 0xe5
   b70a4:	d0f6      	beq.n	b7094 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b70a6:	7823      	ldrb	r3, [r4, #0]
   b70a8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b70aa:	bf44      	itt	mi
   b70ac:	69e3      	ldrmi	r3, [r4, #28]
   b70ae:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b70b0:	6a23      	ldr	r3, [r4, #32]
   b70b2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b70b4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b70b6:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b70b8:	4b09      	ldr	r3, [pc, #36]	; (b70e0 <_ZN7FatFile4syncEv+0x68>)
   b70ba:	681b      	ldr	r3, [r3, #0]
   b70bc:	b12b      	cbz	r3, b70ca <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b70be:	f100 0116 	add.w	r1, r0, #22
   b70c2:	3018      	adds	r0, #24
   b70c4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b70c6:	8b2b      	ldrh	r3, [r5, #24]
   b70c8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b70ca:	78a3      	ldrb	r3, [r4, #2]
   b70cc:	f023 0304 	bic.w	r3, r3, #4
   b70d0:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b70d2:	68a0      	ldr	r0, [r4, #8]
   b70d4:	f7ff fd70 	bl	b6bb8 <_ZN9FatVolume9cacheSyncEv>
   b70d8:	2800      	cmp	r0, #0
   b70da:	d0db      	beq.n	b7094 <_ZN7FatFile4syncEv+0x1c>
   b70dc:	e7d0      	b.n	b7080 <_ZN7FatFile4syncEv+0x8>
   b70de:	bf00      	nop
   b70e0:	2003e60c 	.word	0x2003e60c

000b70e4 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b70e4:	b510      	push	{r4, lr}
   b70e6:	4604      	mov	r4, r0
  bool rtn = sync();
   b70e8:	f7ff ffc6 	bl	b7078 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b70ec:	2300      	movs	r3, #0
   b70ee:	7023      	strb	r3, [r4, #0]
}
   b70f0:	bd10      	pop	{r4, pc}

000b70f2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b70f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b70f4:	b093      	sub	sp, #76	; 0x4c
   b70f6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b70f8:	2300      	movs	r3, #0
   b70fa:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b70fc:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b70fe:	9201      	str	r2, [sp, #4]
   b7100:	4606      	mov	r6, r0
   b7102:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b7104:	b113      	cbz	r3, b710c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b7106:	2000      	movs	r0, #0
}
   b7108:	b013      	add	sp, #76	; 0x4c
   b710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b710c:	780b      	ldrb	r3, [r1, #0]
   b710e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7112:	d0f8      	beq.n	b7106 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b7114:	7813      	ldrb	r3, [r2, #0]
   b7116:	2b2f      	cmp	r3, #47	; 0x2f
   b7118:	d112      	bne.n	b7140 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b711a:	9a01      	ldr	r2, [sp, #4]
   b711c:	7813      	ldrb	r3, [r2, #0]
   b711e:	2b2f      	cmp	r3, #47	; 0x2f
   b7120:	d102      	bne.n	b7128 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b7122:	3201      	adds	r2, #1
   b7124:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b7126:	e7f8      	b.n	b711a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b7128:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b712a:	b91b      	cbnz	r3, b7134 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b712c:	4630      	mov	r0, r6
   b712e:	f7ff fdd3 	bl	b6cd8 <_ZN7FatFile8openRootEP9FatVolume>
   b7132:	e7e9      	b.n	b7108 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b7134:	a809      	add	r0, sp, #36	; 0x24
   b7136:	f7ff fd29 	bl	b6b8c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b713a:	2800      	cmp	r0, #0
   b713c:	d0e3      	beq.n	b7106 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b713e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b7140:	9801      	ldr	r0, [sp, #4]
   b7142:	aa01      	add	r2, sp, #4
   b7144:	a903      	add	r1, sp, #12
   b7146:	f000 f98f 	bl	b7468 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b714a:	2800      	cmp	r0, #0
   b714c:	d0db      	beq.n	b7106 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b714e:	9b01      	ldr	r3, [sp, #4]
   b7150:	781b      	ldrb	r3, [r3, #0]
   b7152:	b19b      	cbz	r3, b717c <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7154:	2300      	movs	r3, #0
   b7156:	aa03      	add	r2, sp, #12
   b7158:	4621      	mov	r1, r4
   b715a:	4630      	mov	r0, r6
   b715c:	f000 fab6 	bl	b76cc <_ZN7FatFile4openEPS_P7fname_ti>
   b7160:	2800      	cmp	r0, #0
   b7162:	d0d0      	beq.n	b7106 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7164:	4635      	mov	r5, r6
   b7166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7168:	ac09      	add	r4, sp, #36	; 0x24
   b716a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b716c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b716e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7170:	682b      	ldr	r3, [r5, #0]
   b7172:	6023      	str	r3, [r4, #0]
    close();
   b7174:	4630      	mov	r0, r6
   b7176:	f7ff ffb5 	bl	b70e4 <_ZN7FatFile5closeEv>
  while (1) {
   b717a:	e7e0      	b.n	b713e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b717c:	463b      	mov	r3, r7
   b717e:	aa03      	add	r2, sp, #12
   b7180:	4621      	mov	r1, r4
   b7182:	4630      	mov	r0, r6
   b7184:	f000 faa2 	bl	b76cc <_ZN7FatFile4openEPS_P7fname_ti>
   b7188:	e7be      	b.n	b7108 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b718c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7190:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b7192:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7194:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b7196:	4604      	mov	r4, r0
   b7198:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b719a:	d55b      	bpl.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
   b719c:	7883      	ldrb	r3, [r0, #2]
   b719e:	079a      	lsls	r2, r3, #30
   b71a0:	d558      	bpl.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b71a2:	071b      	lsls	r3, r3, #28
   b71a4:	d451      	bmi.n	b724a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b71a6:	6963      	ldr	r3, [r4, #20]
   b71a8:	43db      	mvns	r3, r3
   b71aa:	42bb      	cmp	r3, r7
   b71ac:	d352      	bcc.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
   b71ae:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b71b0:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b71b4:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b71b6:	f1b8 0f00 	cmp.w	r8, #0
   b71ba:	f000 8091 	beq.w	b72e0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b71be:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b71c0:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b71c2:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b71c6:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b71ca:	d10e      	bne.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
   b71cc:	b96d      	cbnz	r5, b71ea <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b71ce:	6921      	ldr	r1, [r4, #16]
   b71d0:	2900      	cmp	r1, #0
   b71d2:	d046      	beq.n	b7262 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b71d4:	4652      	mov	r2, sl
   b71d6:	f000 fcab 	bl	b7b30 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b71da:	2800      	cmp	r0, #0
   b71dc:	db3a      	blt.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b71de:	d104      	bne.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b71e0:	4620      	mov	r0, r4
   b71e2:	f7ff fcf6 	bl	b6bd2 <_ZN7FatFile10addClusterEv>
   b71e6:	2800      	cmp	r0, #0
   b71e8:	d034      	beq.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b71ea:	6921      	ldr	r1, [r4, #16]
   b71ec:	68a0      	ldr	r0, [r4, #8]
   b71ee:	f000 fc99 	bl	b7b24 <_ZNK9FatVolume17clusterFirstBlockEm>
   b71f2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b71f4:	68a0      	ldr	r0, [r4, #8]
   b71f6:	b915      	cbnz	r5, b71fe <_ZN7FatFile5writeEPKvj+0x72>
   b71f8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b71fc:	d23f      	bcs.n	b727e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b71fe:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7202:	4546      	cmp	r6, r8
   b7204:	bf28      	it	cs
   b7206:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b7208:	2d00      	cmp	r5, #0
   b720a:	d136      	bne.n	b727a <_ZN7FatFile5writeEPKvj+0xee>
   b720c:	6962      	ldr	r2, [r4, #20]
   b720e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7210:	429a      	cmp	r2, r3
   b7212:	bf34      	ite	cc
   b7214:	2201      	movcc	r2, #1
   b7216:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b7218:	3024      	adds	r0, #36	; 0x24
   b721a:	f000 fc60 	bl	b7ade <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b721e:	b1c8      	cbz	r0, b7254 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7220:	4428      	add	r0, r5
   b7222:	4632      	mov	r2, r6
   b7224:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7226:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7228:	f00d fa0a 	bl	c4640 <memcpy>
      if (512 == (n + blockOffset)) {
   b722c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b7230:	d104      	bne.n	b723c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b7232:	68a0      	ldr	r0, [r4, #8]
   b7234:	3024      	adds	r0, #36	; 0x24
   b7236:	f000 fc2a 	bl	b7a8e <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b723a:	b158      	cbz	r0, b7254 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b723c:	6963      	ldr	r3, [r4, #20]
   b723e:	4433      	add	r3, r6
   b7240:	6163      	str	r3, [r4, #20]
    src += n;
   b7242:	44b1      	add	r9, r6
    nToWrite -= n;
   b7244:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7248:	e7b4      	b.n	b71b4 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b724a:	69c1      	ldr	r1, [r0, #28]
   b724c:	f7ff fe2a 	bl	b6ea4 <_ZN7FatFile7seekSetEm>
   b7250:	2800      	cmp	r0, #0
   b7252:	d1a8      	bne.n	b71a6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7254:	7863      	ldrb	r3, [r4, #1]
   b7256:	f043 0301 	orr.w	r3, r3, #1
   b725a:	7063      	strb	r3, [r4, #1]
  return -1;
   b725c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7260:	e050      	b.n	b7304 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b7262:	6a23      	ldr	r3, [r4, #32]
   b7264:	b93b      	cbnz	r3, b7276 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7266:	4620      	mov	r0, r4
   b7268:	f7ff fcb3 	bl	b6bd2 <_ZN7FatFile10addClusterEv>
   b726c:	2800      	cmp	r0, #0
   b726e:	d0f1      	beq.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b7270:	6923      	ldr	r3, [r4, #16]
   b7272:	6223      	str	r3, [r4, #32]
   b7274:	e7b9      	b.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b7276:	6123      	str	r3, [r4, #16]
   b7278:	e7b7      	b.n	b71ea <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b727a:	2201      	movs	r2, #1
   b727c:	e7cc      	b.n	b7218 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b727e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b7282:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7284:	d31b      	bcc.n	b72be <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7286:	f890 c004 	ldrb.w	ip, [r0, #4]
   b728a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b728e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b7290:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7294:	4573      	cmp	r3, lr
   b7296:	bf28      	it	cs
   b7298:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b729a:	4291      	cmp	r1, r2
      n = 512*nb;
   b729c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b72a0:	d307      	bcc.n	b72b2 <_ZN7FatFile5writeEPKvj+0x126>
   b72a2:	441a      	add	r2, r3
   b72a4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b72a6:	bf82      	ittt	hi
   b72a8:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b72ac:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b72b0:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b72b2:	68a5      	ldr	r5, [r4, #8]
   b72b4:	464a      	mov	r2, r9
   b72b6:	6828      	ldr	r0, [r5, #0]
   b72b8:	f000 fff3 	bl	b82a2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b72bc:	e7bd      	b.n	b723a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b72be:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b72c0:	bf02      	ittt	eq
   b72c2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b72c6:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b72ca:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b72cc:	68a3      	ldr	r3, [r4, #8]
   b72ce:	464a      	mov	r2, r9
   b72d0:	6818      	ldr	r0, [r3, #0]
   b72d2:	f000 ff70 	bl	b81b6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b72d6:	2800      	cmp	r0, #0
   b72d8:	d0bc      	beq.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b72da:	f44f 7600 	mov.w	r6, #512	; 0x200
   b72de:	e7ad      	b.n	b723c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b72e0:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b72e2:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b72e4:	42b2      	cmp	r2, r6
   b72e6:	d204      	bcs.n	b72f2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b72e8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b72ea:	f043 0304 	orr.w	r3, r3, #4
   b72ee:	70a3      	strb	r3, [r4, #2]
   b72f0:	e003      	b.n	b72fa <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b72f2:	4a08      	ldr	r2, [pc, #32]	; (b7314 <_ZN7FatFile5writeEPKvj+0x188>)
   b72f4:	6812      	ldr	r2, [r2, #0]
   b72f6:	2a00      	cmp	r2, #0
   b72f8:	d1f7      	bne.n	b72ea <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b72fa:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b72fe:	2b00      	cmp	r3, #0
   b7300:	db02      	blt.n	b7308 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7302:	4638      	mov	r0, r7
}
   b7304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b7308:	4620      	mov	r0, r4
   b730a:	f7ff feb5 	bl	b7078 <_ZN7FatFile4syncEv>
   b730e:	2800      	cmp	r0, #0
   b7310:	d1f7      	bne.n	b7302 <_ZN7FatFile5writeEPKvj+0x176>
   b7312:	e79f      	b.n	b7254 <_ZN7FatFile5writeEPKvj+0xc8>
   b7314:	2003e60c 	.word	0x2003e60c

000b7318 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b7318:	2904      	cmp	r1, #4
   b731a:	d804      	bhi.n	b7326 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b731c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b7320:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b7324:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b7326:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7328:	bf9b      	ittet	ls
   b732a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b732e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7332:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b7334:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b7336:	bf84      	itt	hi
   b7338:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b733c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b733e:	4770      	bx	lr

000b7340 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b7340:	1e41      	subs	r1, r0, #1
   b7342:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b7346:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7348:	0842      	lsrs	r2, r0, #1
   b734a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b734e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7352:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b7356:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b7358:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b735a:	d1f5      	bne.n	b7348 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b735c:	4770      	bx	lr

000b735e <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b735e:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b7360:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b7362:	4604      	mov	r4, r0
   b7364:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b7366:	b923      	cbnz	r3, b7372 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b7368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b736c:	6889      	ldr	r1, [r1, #8]
   b736e:	f7ff bcb3 	b.w	b6cd8 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b7372:	2224      	movs	r2, #36	; 0x24
   b7374:	2100      	movs	r1, #0
   b7376:	f00d f98b 	bl	c4690 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b737a:	2310      	movs	r3, #16
  m_flags = F_READ;
   b737c:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b737e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b7380:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b7382:	68ab      	ldr	r3, [r5, #8]
   b7384:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b7386:	68eb      	ldr	r3, [r5, #12]
   b7388:	6223      	str	r3, [r4, #32]
}
   b738a:	bd38      	pop	{r3, r4, r5, pc}

000b738c <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7390:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b7392:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b7394:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b7398:	4606      	mov	r6, r0
   b739a:	460f      	mov	r7, r1
   b739c:	4690      	mov	r8, r2
   b739e:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b73a2:	2b00      	cmp	r3, #0
   b73a4:	d05d      	beq.n	b7462 <_ZN7FatFile7getNameEPcj+0xd6>
   b73a6:	2a0c      	cmp	r2, #12
   b73a8:	d95b      	bls.n	b7462 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b73aa:	78c3      	ldrb	r3, [r0, #3]
   b73ac:	b933      	cbnz	r3, b73bc <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b73ae:	f000 fb57 	bl	b7a60 <_ZN7FatFile6getSFNEPc>
   b73b2:	4604      	mov	r4, r0
}
   b73b4:	4620      	mov	r0, r4
   b73b6:	b00d      	add	sp, #52	; 0x34
   b73b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b73bc:	4601      	mov	r1, r0
   b73be:	a803      	add	r0, sp, #12
   b73c0:	f7ff ffcd 	bl	b735e <_ZN7FatFile11openClusterEPS_>
   b73c4:	2800      	cmp	r0, #0
   b73c6:	d04c      	beq.n	b7462 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b73c8:	eb07 0308 	add.w	r3, r7, r8
   b73cc:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b73d0:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b73d4:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b73d6:	78f3      	ldrb	r3, [r6, #3]
   b73d8:	fa5f f58b 	uxtb.w	r5, fp
   b73dc:	42ab      	cmp	r3, r5
   b73de:	d340      	bcc.n	b7462 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b73e0:	88b1      	ldrh	r1, [r6, #4]
   b73e2:	eba1 010b 	sub.w	r1, r1, fp
   b73e6:	0149      	lsls	r1, r1, #5
   b73e8:	a803      	add	r0, sp, #12
   b73ea:	f7ff fd5b 	bl	b6ea4 <_ZN7FatFile7seekSetEm>
   b73ee:	4604      	mov	r4, r0
   b73f0:	2800      	cmp	r0, #0
   b73f2:	d036      	beq.n	b7462 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b73f4:	2100      	movs	r1, #0
   b73f6:	a803      	add	r0, sp, #12
   b73f8:	f7ff fd35 	bl	b6e66 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b73fc:	4603      	mov	r3, r0
   b73fe:	b380      	cbz	r0, b7462 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b7400:	7ac2      	ldrb	r2, [r0, #11]
   b7402:	2a0f      	cmp	r2, #15
   b7404:	d12d      	bne.n	b7462 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b7406:	7802      	ldrb	r2, [r0, #0]
   b7408:	f002 021f 	and.w	r2, r2, #31
   b740c:	42aa      	cmp	r2, r5
   b740e:	d128      	bne.n	b7462 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7410:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b7414:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b7418:	197a      	adds	r2, r7, r5
   b741a:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b741c:	4618      	mov	r0, r3
   b741e:	9101      	str	r1, [sp, #4]
   b7420:	f7ff ff7a 	bl	b7318 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b7424:	b168      	cbz	r0, b7442 <_ZN7FatFile7getNameEPcj+0xb6>
   b7426:	45a8      	cmp	r8, r5
   b7428:	d912      	bls.n	b7450 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b742a:	9901      	ldr	r1, [sp, #4]
   b742c:	3101      	adds	r1, #1
   b742e:	287f      	cmp	r0, #127	; 0x7f
   b7430:	b2c9      	uxtb	r1, r1
   b7432:	bf28      	it	cs
   b7434:	203f      	movcs	r0, #63	; 0x3f
   b7436:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b7438:	f802 0b01 	strb.w	r0, [r2], #1
   b743c:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b7440:	d1ec      	bne.n	b741c <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b7442:	45a8      	cmp	r8, r5
   b7444:	d904      	bls.n	b7450 <_ZN7FatFile7getNameEPcj+0xc4>
   b7446:	781a      	ldrb	r2, [r3, #0]
   b7448:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b744a:	bf48      	it	mi
   b744c:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b7450:	9a00      	ldr	r2, [sp, #0]
   b7452:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b7456:	781b      	ldrb	r3, [r3, #0]
   b7458:	065b      	lsls	r3, r3, #25
   b745a:	f10b 0b01 	add.w	fp, fp, #1
   b745e:	d5ba      	bpl.n	b73d6 <_ZN7FatFile7getNameEPcj+0x4a>
   b7460:	e7a8      	b.n	b73b4 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b7462:	2400      	movs	r4, #0
   b7464:	703c      	strb	r4, [r7, #0]
  return false;
   b7466:	e7a5      	b.n	b73b4 <_ZN7FatFile7getNameEPcj+0x28>

000b7468 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b7468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b746c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b746e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b7472:	2b20      	cmp	r3, #32
   b7474:	d0fa      	beq.n	b746c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7476:	4d6a      	ldr	r5, [pc, #424]	; (b7620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b7478:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b747a:	2400      	movs	r4, #0
    c = path[len];
   b747c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b747e:	b1c3      	cbz	r3, b74b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b7480:	2b2f      	cmp	r3, #47	; 0x2f
   b7482:	d016      	beq.n	b74b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b7484:	2b5c      	cmp	r3, #92	; 0x5c
   b7486:	d102      	bne.n	b748e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b7488:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b748e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b7492:	b2c0      	uxtb	r0, r0
   b7494:	281d      	cmp	r0, #29
   b7496:	d803      	bhi.n	b74a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b7498:	fa25 f000 	lsr.w	r0, r5, r0
   b749c:	07c0      	lsls	r0, r0, #31
   b749e:	d4f3      	bmi.n	b7488 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b74a0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b74a4:	283c      	cmp	r0, #60	; 0x3c
   b74a6:	d0ef      	beq.n	b7488 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b74a8:	3b20      	subs	r3, #32
   b74aa:	2b5e      	cmp	r3, #94	; 0x5e
   b74ac:	d8ec      	bhi.n	b7488 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b74ae:	3401      	adds	r4, #1
    c = path[len];
   b74b0:	e7e4      	b.n	b747c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b74b2:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b74b4:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b74b6:	4607      	mov	r7, r0
   b74b8:	f810 5b01 	ldrb.w	r5, [r0], #1
   b74bc:	2d20      	cmp	r5, #32
   b74be:	d0fa      	beq.n	b74b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b74c0:	2d2f      	cmp	r5, #47	; 0x2f
   b74c2:	d0f8      	beq.n	b74b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b74c4:	6017      	str	r7, [r2, #0]
  while (len) {
   b74c6:	b14c      	cbz	r4, b74dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b74c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b74cc:	2a2e      	cmp	r2, #46	; 0x2e
   b74ce:	d001      	beq.n	b74d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b74d0:	2a20      	cmp	r2, #32
   b74d2:	d101      	bne.n	b74d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b74d4:	3c01      	subs	r4, #1
  while (len) {
   b74d6:	e7f6      	b.n	b74c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b74d8:	2cff      	cmp	r4, #255	; 0xff
   b74da:	dcd5      	bgt.n	b7488 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b74dc:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b74e0:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b74e4:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b74e6:	f8c1 300d 	str.w	r3, [r1, #13]
   b74ea:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b74ec:	f04f 0800 	mov.w	r8, #0
   b74f0:	f816 3008 	ldrb.w	r3, [r6, r8]
   b74f4:	2b2e      	cmp	r3, #46	; 0x2e
   b74f6:	d001      	beq.n	b74fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b74f8:	2b20      	cmp	r3, #32
   b74fa:	d102      	bne.n	b7502 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b74fc:	f108 0801 	add.w	r8, r8, #1
   b7500:	e7f6      	b.n	b74f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b7502:	fab8 f088 	clz	r0, r8
   b7506:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b7508:	1e65      	subs	r5, r4, #1
   b750a:	1c6b      	adds	r3, r5, #1
   b750c:	d002      	beq.n	b7514 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b750e:	5d73      	ldrb	r3, [r6, r5]
   b7510:	2b2e      	cmp	r3, #46	; 0x2e
   b7512:	d114      	bne.n	b753e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b7514:	f04f 0900 	mov.w	r9, #0
   b7518:	2707      	movs	r7, #7
   b751a:	464a      	mov	r2, r9
   b751c:	46ca      	mov	sl, r9
   b751e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b7522:	45a0      	cmp	r8, r4
   b7524:	da68      	bge.n	b75f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b7526:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b752a:	2b20      	cmp	r3, #32
   b752c:	d003      	beq.n	b7536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b752e:	2b2e      	cmp	r3, #46	; 0x2e
   b7530:	d107      	bne.n	b7542 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b7532:	45a8      	cmp	r8, r5
   b7534:	d012      	beq.n	b755c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b7536:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b7538:	f108 0801 	add.w	r8, r8, #1
   b753c:	e7f1      	b.n	b7522 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b753e:	3d01      	subs	r5, #1
   b7540:	e7e3      	b.n	b750a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b7542:	2b22      	cmp	r3, #34	; 0x22
   b7544:	d008      	beq.n	b7558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b7546:	2b7c      	cmp	r3, #124	; 0x7c
   b7548:	d006      	beq.n	b7558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b754a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b754e:	f1bc 0f05 	cmp.w	ip, #5
   b7552:	d80a      	bhi.n	b756a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b7554:	2b2d      	cmp	r3, #45	; 0x2d
   b7556:	d012      	beq.n	b757e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b7558:	45a8      	cmp	r8, r5
   b755a:	d15b      	bne.n	b7614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b755c:	2f0a      	cmp	r7, #10
   b755e:	d04a      	beq.n	b75f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b7560:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b7562:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b7564:	f04f 0e10 	mov.w	lr, #16
   b7568:	e7e6      	b.n	b7538 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b756a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b756e:	f1bc 0f05 	cmp.w	ip, #5
   b7572:	d9f1      	bls.n	b7558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b7574:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b7578:	f1bc 0f02 	cmp.w	ip, #2
   b757c:	d9ec      	bls.n	b7558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b757e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b7582:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b7586:	d8e7      	bhi.n	b7558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b7588:	45a8      	cmp	r8, r5
   b758a:	d0e7      	beq.n	b755c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b758c:	42ba      	cmp	r2, r7
   b758e:	d830      	bhi.n	b75f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b7590:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b7594:	f1bc 0f19 	cmp.w	ip, #25
   b7598:	d81a      	bhi.n	b75d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b759a:	3b20      	subs	r3, #32
        lc |= bit;
   b759c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b75a0:	b2db      	uxtb	r3, r3
        lc |= bit;
   b75a2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b75a6:	f102 0c01 	add.w	ip, r2, #1
   b75aa:	fa5f fc8c 	uxtb.w	ip, ip
   b75ae:	440a      	add	r2, r1
      if (i < 7) {
   b75b0:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b75b4:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b75b6:	d801      	bhi.n	b75bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b75b8:	f881 c00c 	strb.w	ip, [r1, #12]
   b75bc:	4662      	mov	r2, ip
   b75be:	e7bb      	b.n	b7538 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b75c0:	45a8      	cmp	r8, r5
   b75c2:	dc18      	bgt.n	b75f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b75c4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b75c6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b75c8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b75ca:	f04f 0e10 	mov.w	lr, #16
   b75ce:	e7b2      	b.n	b7536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b75d0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b75d4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b75d8:	bf98      	it	ls
   b75da:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b75de:	e7e2      	b.n	b75a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b75e0:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b75e2:	2001      	movs	r0, #1
   b75e4:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b75e6:	4419      	add	r1, r3
   b75e8:	237e      	movs	r3, #126	; 0x7e
   b75ea:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b75ec:	2331      	movs	r3, #49	; 0x31
   b75ee:	738b      	strb	r3, [r1, #14]
   b75f0:	e74b      	b.n	b748a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b75f2:	2f0a      	cmp	r7, #10
   b75f4:	d1e4      	bne.n	b75c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b75f6:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b75f8:	7b4b      	ldrb	r3, [r1, #13]
   b75fa:	2b20      	cmp	r3, #32
   b75fc:	f43f af44 	beq.w	b7488 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b7600:	2800      	cmp	r0, #0
   b7602:	d0ed      	beq.n	b75e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b7604:	ea1a 0f09 	tst.w	sl, r9
   b7608:	bf18      	it	ne
   b760a:	f04f 0902 	movne.w	r9, #2
   b760e:	f881 9000 	strb.w	r9, [r1]
   b7612:	e73a      	b.n	b748a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b7614:	42ba      	cmp	r2, r7
   b7616:	d8ec      	bhi.n	b75f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b7618:	2000      	movs	r0, #0
      c = '_';
   b761a:	235f      	movs	r3, #95	; 0x5f
   b761c:	e7c3      	b.n	b75a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b761e:	bf00      	nop
   b7620:	31000101 	.word	0x31000101

000b7624 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b7624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b7628:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b762c:	4606      	mov	r6, r0
   b762e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b7630:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b7632:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b7634:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b7638:	6861      	ldr	r1, [r4, #4]
   b763a:	68a2      	ldr	r2, [r4, #8]
   b763c:	186b      	adds	r3, r5, r1
   b763e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7640:	4411      	add	r1, r2
   b7642:	4291      	cmp	r1, r2
   b7644:	d006      	beq.n	b7654 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b7646:	f812 0b01 	ldrb.w	r0, [r2], #1
   b764a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b764e:	4043      	eors	r3, r0
   b7650:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b7652:	e7f6      	b.n	b7642 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b7654:	f1b9 0f03 	cmp.w	r9, #3
   b7658:	bf28      	it	cs
   b765a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b765e:	f109 0204 	add.w	r2, r9, #4
   b7662:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b7664:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7668:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b766a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b766c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b766e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7670:	bf94      	ite	ls
   b7672:	3130      	addls	r1, #48	; 0x30
   b7674:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b7676:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b7678:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b767a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b767e:	d1f1      	bne.n	b7664 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b7680:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b7684:	2100      	movs	r1, #0
   b7686:	735f      	strb	r7, [r3, #13]
   b7688:	4630      	mov	r0, r6
   b768a:	f7ff fc0b 	bl	b6ea4 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b768e:	2101      	movs	r1, #1
   b7690:	4630      	mov	r0, r6
   b7692:	f7ff fbe8 	bl	b6e66 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b7696:	4601      	mov	r1, r0
   b7698:	b928      	cbnz	r0, b76a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b769a:	7870      	ldrb	r0, [r6, #1]
   b769c:	fab0 f080 	clz	r0, r0
   b76a0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b76a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b76a6:	7803      	ldrb	r3, [r0, #0]
   b76a8:	b16b      	cbz	r3, b76c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b76aa:	7ac3      	ldrb	r3, [r0, #11]
   b76ac:	071b      	lsls	r3, r3, #28
   b76ae:	d4ee      	bmi.n	b768e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b76b0:	220b      	movs	r2, #11
   b76b2:	4640      	mov	r0, r8
   b76b4:	f00c ffb4 	bl	c4620 <memcmp>
   b76b8:	2800      	cmp	r0, #0
   b76ba:	d1e8      	bne.n	b768e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b76bc:	3501      	adds	r5, #1
   b76be:	b2ad      	uxth	r5, r5
   b76c0:	2d64      	cmp	r5, #100	; 0x64
   b76c2:	d1b9      	bne.n	b7638 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b76c4:	e7ed      	b.n	b76a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b76c6:	2001      	movs	r0, #1
   b76c8:	e7eb      	b.n	b76a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b76cc <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b76cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b76d0:	ed2d 8b02 	vpush	{d8}
   b76d4:	b08b      	sub	sp, #44	; 0x2c
   b76d6:	460d      	mov	r5, r1
   b76d8:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b76da:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b76dc:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b76de:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b76e2:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b76e4:	d105      	bne.n	b76f2 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b76e6:	2000      	movs	r0, #0
}
   b76e8:	b00b      	add	sp, #44	; 0x2c
   b76ea:	ecbd 8b02 	vpop	{d8}
   b76ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b76f2:	9b07      	ldr	r3, [sp, #28]
   b76f4:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b76f6:	2b00      	cmp	r3, #0
   b76f8:	d1f5      	bne.n	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b76fa:	6853      	ldr	r3, [r2, #4]
   b76fc:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b76fe:	7813      	ldrb	r3, [r2, #0]
   b7700:	079c      	lsls	r4, r3, #30
   b7702:	bf1f      	itttt	ne
   b7704:	9b05      	ldrne	r3, [sp, #20]
   b7706:	330c      	addne	r3, #12
   b7708:	220d      	movne	r2, #13
   b770a:	fbb3 f3f2 	udivne	r3, r3, r2
   b770e:	bf1a      	itte	ne
   b7710:	3301      	addne	r3, #1
   b7712:	b2db      	uxtbne	r3, r3
   b7714:	2301      	moveq	r3, #1
    seekSet(0);
   b7716:	2100      	movs	r1, #0
   b7718:	4628      	mov	r0, r5
   b771a:	9303      	str	r3, [sp, #12]
   b771c:	f7ff fbc2 	bl	b6ea4 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b7720:	f107 030d 	add.w	r3, r7, #13
  }
   b7724:	f04f 0b00 	mov.w	fp, #0
   b7728:	ee08 3a10 	vmov	s16, r3
   b772c:	46da      	mov	sl, fp
   b772e:	465c      	mov	r4, fp
   b7730:	465e      	mov	r6, fp
   b7732:	f8cd b010 	str.w	fp, [sp, #16]
   b7736:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7738:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b773a:	2101      	movs	r1, #1
   b773c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b773e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b7742:	f7ff fb90 	bl	b6e66 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7746:	4603      	mov	r3, r0
   b7748:	2800      	cmp	r0, #0
   b774a:	d171      	bne.n	b7830 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b774c:	786b      	ldrb	r3, [r5, #1]
   b774e:	2b00      	cmp	r3, #0
   b7750:	d1c9      	bne.n	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b7752:	9b06      	ldr	r3, [sp, #24]
   b7754:	059a      	lsls	r2, r3, #22
   b7756:	d5c6      	bpl.n	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7758:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b775c:	3b01      	subs	r3, #1
   b775e:	2b01      	cmp	r3, #1
   b7760:	d8c1      	bhi.n	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b7762:	9b04      	ldr	r3, [sp, #16]
   b7764:	2c00      	cmp	r4, #0
   b7766:	bf08      	it	eq
   b7768:	4643      	moveq	r3, r8
   b776a:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b776c:	9b03      	ldr	r3, [sp, #12]
   b776e:	429c      	cmp	r4, r3
   b7770:	f0c0 80f1 	bcc.w	b7956 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b7774:	f1b9 0f00 	cmp.w	r9, #0
   b7778:	f040 810a 	bne.w	b7990 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b777c:	9b04      	ldr	r3, [sp, #16]
   b777e:	4628      	mov	r0, r5
   b7780:	0159      	lsls	r1, r3, #5
   b7782:	f7ff fb8f 	bl	b6ea4 <_ZN7FatFile7seekSetEm>
   b7786:	2800      	cmp	r0, #0
   b7788:	d0ad      	beq.n	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b778a:	9b03      	ldr	r3, [sp, #12]
   b778c:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b7790:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7794:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b7796:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b779a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b779e:	2e00      	cmp	r6, #0
   b77a0:	f000 810d 	beq.w	b79be <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b77a4:	2100      	movs	r1, #0
   b77a6:	4628      	mov	r0, r5
   b77a8:	f7ff fb5d 	bl	b6e66 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b77ac:	4604      	mov	r4, r0
   b77ae:	2800      	cmp	r0, #0
   b77b0:	d099      	beq.n	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b77b2:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b77b4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b77b8:	454e      	cmp	r6, r9
   b77ba:	f043 0301 	orr.w	r3, r3, #1
   b77be:	bf0c      	ite	eq
   b77c0:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b77c4:	46b3      	movne	fp, r6
   b77c6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b77ca:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b77ce:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b77d2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b77d6:	f107 000d 	add.w	r0, r7, #13
   b77da:	f7ff fdb1 	bl	b7340 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b77de:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b77e2:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b77e4:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b77e8:	f00b 031f 	and.w	r3, fp, #31
   b77ec:	220d      	movs	r2, #13
   b77ee:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b77f0:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b77f4:	4353      	muls	r3, r2
   b77f6:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b77f8:	9905      	ldr	r1, [sp, #20]
   b77fa:	4299      	cmp	r1, r3
   b77fc:	f240 80d0 	bls.w	b79a0 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b7800:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7804:	2a04      	cmp	r2, #4
   b7806:	fa5f fe82 	uxtb.w	lr, r2
   b780a:	f102 0001 	add.w	r0, r2, #1
   b780e:	f200 80cd 	bhi.w	b79ac <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b7812:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7816:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b781a:	280d      	cmp	r0, #13
   b781c:	f103 0301 	add.w	r3, r3, #1
   b7820:	4602      	mov	r2, r0
   b7822:	d1e9      	bne.n	b77f8 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7824:	3e01      	subs	r6, #1
   b7826:	b2f6      	uxtb	r6, r6
   b7828:	e7b9      	b.n	b779e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b782a:	f04f 0901 	mov.w	r9, #1
   b782e:	e783      	b.n	b7738 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b7830:	7802      	ldrb	r2, [r0, #0]
   b7832:	2ae5      	cmp	r2, #229	; 0xe5
   b7834:	d000      	beq.n	b7838 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7836:	b97a      	cbnz	r2, b7858 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7838:	9904      	ldr	r1, [sp, #16]
   b783a:	2c00      	cmp	r4, #0
   b783c:	bf08      	it	eq
   b783e:	4641      	moveq	r1, r8
   b7840:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b7842:	9903      	ldr	r1, [sp, #12]
   b7844:	428c      	cmp	r4, r1
        freeFound++;
   b7846:	bf3c      	itt	cc
   b7848:	3401      	addcc	r4, #1
   b784a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b784c:	2a00      	cmp	r2, #0
   b784e:	d080      	beq.n	b7752 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7850:	2ae5      	cmp	r2, #229	; 0xe5
   b7852:	d105      	bne.n	b7860 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7854:	2600      	movs	r6, #0
   b7856:	e76f      	b.n	b7738 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7858:	9903      	ldr	r1, [sp, #12]
   b785a:	428c      	cmp	r4, r1
   b785c:	bf38      	it	cc
   b785e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b7860:	2a2e      	cmp	r2, #46	; 0x2e
   b7862:	d0f7      	beq.n	b7854 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b7864:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b7866:	290f      	cmp	r1, #15
   b7868:	d14a      	bne.n	b7900 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b786a:	bb16      	cbnz	r6, b78b2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b786c:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b7870:	f43f af62 	beq.w	b7738 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b7874:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b7878:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b787c:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b787e:	220d      	movs	r2, #13
   b7880:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b7884:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7888:	9a05      	ldr	r2, [sp, #20]
   b788a:	4542      	cmp	r2, r8
   b788c:	d9e2      	bls.n	b7854 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b788e:	eba2 0208 	sub.w	r2, r2, r8
   b7892:	9208      	str	r2, [sp, #32]
   b7894:	2200      	movs	r2, #0
   b7896:	eb02 0108 	add.w	r1, r2, r8
   b789a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b789c:	4618      	mov	r0, r3
   b789e:	b2d1      	uxtb	r1, r2
   b78a0:	f7ff fd3a 	bl	b7318 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b78a4:	9908      	ldr	r1, [sp, #32]
   b78a6:	428a      	cmp	r2, r1
   b78a8:	d10d      	bne.n	b78c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b78aa:	2800      	cmp	r0, #0
   b78ac:	bf18      	it	ne
   b78ae:	2600      	movne	r6, #0
   b78b0:	e742      	b.n	b7738 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b78b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b78b6:	fa5f fa8a 	uxtb.w	sl, sl
   b78ba:	4552      	cmp	r2, sl
   b78bc:	d1ca      	bne.n	b7854 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b78be:	7b5a      	ldrb	r2, [r3, #13]
   b78c0:	455a      	cmp	r2, fp
   b78c2:	d0dc      	beq.n	b787e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b78c4:	e7c6      	b.n	b7854 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b78c6:	28ff      	cmp	r0, #255	; 0xff
   b78c8:	d8c4      	bhi.n	b7854 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b78ca:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b78ce:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b78d2:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b78d4:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b78d6:	bf9c      	itt	ls
   b78d8:	f10e 0020 	addls.w	r0, lr, #32
   b78dc:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b78e0:	4608      	mov	r0, r1
   b78e2:	9909      	ldr	r1, [sp, #36]	; 0x24
   b78e4:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b78e6:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b78ea:	f1bc 0f19 	cmp.w	ip, #25
   b78ee:	bf9c      	itt	ls
   b78f0:	3120      	addls	r1, #32
   b78f2:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b78f4:	4571      	cmp	r1, lr
   b78f6:	d1ad      	bne.n	b7854 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b78f8:	3201      	adds	r2, #1
   b78fa:	2a0d      	cmp	r2, #13
   b78fc:	d1cb      	bne.n	b7896 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b78fe:	e71b      	b.n	b7738 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7900:	0708      	lsls	r0, r1, #28
   b7902:	d4a7      	bmi.n	b7854 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7904:	b15e      	cbz	r6, b791e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7906:	f1ba 0f01 	cmp.w	sl, #1
   b790a:	f47f aeec 	bne.w	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b790e:	4618      	mov	r0, r3
   b7910:	f7ff fd16 	bl	b7340 <_ZN7FatFile11lfnChecksumEPh>
   b7914:	4558      	cmp	r0, fp
   b7916:	f47f aee6 	bne.w	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b791a:	46b1      	mov	r9, r6
   b791c:	e00e      	b.n	b793c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b791e:	ee18 1a10 	vmov	r1, s16
   b7922:	220b      	movs	r2, #11
   b7924:	4618      	mov	r0, r3
   b7926:	f00c fe7b 	bl	c4620 <memcmp>
   b792a:	2800      	cmp	r0, #0
   b792c:	f47f af04 	bne.w	b7738 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b7930:	f897 9000 	ldrb.w	r9, [r7]
   b7934:	f019 0901 	ands.w	r9, r9, #1
   b7938:	f47f af77 	bne.w	b782a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b793c:	9b06      	ldr	r3, [sp, #24]
   b793e:	0519      	lsls	r1, r3, #20
   b7940:	f53f aed1 	bmi.w	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7944:	9b06      	ldr	r3, [sp, #24]
   b7946:	9807      	ldr	r0, [sp, #28]
   b7948:	f8cd 9000 	str.w	r9, [sp]
   b794c:	4642      	mov	r2, r8
   b794e:	4629      	mov	r1, r5
   b7950:	f7ff faeb 	bl	b6f2a <_ZN7FatFile15openCachedEntryEPS_tih>
   b7954:	e6c8      	b.n	b76e8 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7956:	2100      	movs	r1, #0
   b7958:	4628      	mov	r0, r5
   b795a:	f7ff fa84 	bl	b6e66 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b795e:	b9a0      	cbnz	r0, b798a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b7960:	786b      	ldrb	r3, [r5, #1]
   b7962:	2b00      	cmp	r3, #0
   b7964:	f47f aebf 	bne.w	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b7968:	4628      	mov	r0, r5
   b796a:	f7ff f93d 	bl	b6be8 <_ZN7FatFile13addDirClusterEv>
   b796e:	2800      	cmp	r0, #0
   b7970:	f43f aeb9 	beq.w	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b7974:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b7976:	791b      	ldrb	r3, [r3, #4]
   b7978:	2b01      	cmp	r3, #1
   b797a:	f63f aefb 	bhi.w	b7774 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b797e:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7980:	3410      	adds	r4, #16
   b7982:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7984:	42a3      	cmp	r3, r4
   b7986:	d8ef      	bhi.n	b7968 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7988:	e6f4      	b.n	b7774 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b798a:	3401      	adds	r4, #1
   b798c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b798e:	e6ed      	b.n	b776c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7990:	4639      	mov	r1, r7
   b7992:	4628      	mov	r0, r5
   b7994:	f7ff fe46 	bl	b7624 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7998:	2800      	cmp	r0, #0
   b799a:	f47f aeef 	bne.w	b777c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b799e:	e6a2      	b.n	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b79a0:	bf14      	ite	ne
   b79a2:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b79a6:	2100      	moveq	r1, #0
   b79a8:	b289      	uxth	r1, r1
   b79aa:	e72b      	b.n	b7804 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b79ac:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b79b0:	bf94      	ite	ls
   b79b2:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b79b6:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b79ba:	8091      	strh	r1, [r2, #4]
   b79bc:	e72d      	b.n	b781a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b79be:	4631      	mov	r1, r6
   b79c0:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b79c2:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b79c6:	f7ff fa4e 	bl	b6e66 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b79ca:	4604      	mov	r4, r0
   b79cc:	2800      	cmp	r0, #0
   b79ce:	f43f ae8a 	beq.w	b76e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b79d2:	2220      	movs	r2, #32
   b79d4:	4631      	mov	r1, r6
   b79d6:	f00c fe5b 	bl	c4690 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b79da:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b79de:	6023      	str	r3, [r4, #0]
   b79e0:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b79e4:	6063      	str	r3, [r4, #4]
   b79e6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b79ea:	8123      	strh	r3, [r4, #8]
   b79ec:	7dfb      	ldrb	r3, [r7, #23]
   b79ee:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b79f0:	783b      	ldrb	r3, [r7, #0]
   b79f2:	f003 0318 	and.w	r3, r3, #24
   b79f6:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b79f8:	4b0f      	ldr	r3, [pc, #60]	; (b7a38 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b79fa:	681b      	ldr	r3, [r3, #0]
   b79fc:	b19b      	cbz	r3, b7a26 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b79fe:	f104 010e 	add.w	r1, r4, #14
   b7a02:	f104 0010 	add.w	r0, r4, #16
   b7a06:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7a08:	8a23      	ldrh	r3, [r4, #16]
   b7a0a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b7a0c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b7a0e:	89e3      	ldrh	r3, [r4, #14]
   b7a10:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7a12:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7a14:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7a18:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7a1c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b7a20:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7a24:	e78e      	b.n	b7944 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7a26:	2321      	movs	r3, #33	; 0x21
   b7a28:	7423      	strb	r3, [r4, #16]
   b7a2a:	2328      	movs	r3, #40	; 0x28
   b7a2c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b7a2e:	2308      	movs	r3, #8
   b7a30:	73a6      	strb	r6, [r4, #14]
   b7a32:	73e3      	strb	r3, [r4, #15]
   b7a34:	e7e8      	b.n	b7a08 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7a36:	bf00      	nop
   b7a38:	2003e60c 	.word	0x2003e60c

000b7a3c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7a3c:	b513      	push	{r0, r1, r4, lr}
   b7a3e:	4604      	mov	r4, r0
    }
   b7a40:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7a42:	b159      	cbz	r1, b7a5c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7a44:	9101      	str	r1, [sp, #4]
   b7a46:	f00c feae 	bl	c47a6 <strlen>
   b7a4a:	6823      	ldr	r3, [r4, #0]
   b7a4c:	9901      	ldr	r1, [sp, #4]
   b7a4e:	68db      	ldr	r3, [r3, #12]
   b7a50:	4602      	mov	r2, r0
   b7a52:	4620      	mov	r0, r4
    }
   b7a54:	b002      	add	sp, #8
   b7a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7a5a:	4718      	bx	r3
    }
   b7a5c:	b002      	add	sp, #8
   b7a5e:	bd10      	pop	{r4, pc}

000b7a60 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b7a60:	b510      	push	{r4, lr}
   b7a62:	460c      	mov	r4, r1
    return m_attr;
   b7a64:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b7a66:	b909      	cbnz	r1, b7a6c <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b7a68:	2000      	movs	r0, #0
}
   b7a6a:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b7a6c:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b7a70:	d005      	beq.n	b7a7e <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b7a72:	232f      	movs	r3, #47	; 0x2f
   b7a74:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b7a76:	2300      	movs	r3, #0
   b7a78:	7063      	strb	r3, [r4, #1]
  return true;
   b7a7a:	2001      	movs	r0, #1
   b7a7c:	e7f5      	b.n	b7a6a <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b7a7e:	f7ff f8f1 	bl	b6c64 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b7a82:	2800      	cmp	r0, #0
   b7a84:	d0f0      	beq.n	b7a68 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b7a86:	4621      	mov	r1, r4
   b7a88:	f7ff f8fb 	bl	b6c82 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b7a8c:	e7f5      	b.n	b7a7a <_ZN7FatFile6getSFNEPc+0x1a>

000b7a8e <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7a8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7a90:	7803      	ldrb	r3, [r0, #0]
   b7a92:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7a94:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7a96:	d520      	bpl.n	b7ada <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b7a98:	6843      	ldr	r3, [r0, #4]
   b7a9a:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7a9c:	f100 020c 	add.w	r2, r0, #12
   b7aa0:	6818      	ldr	r0, [r3, #0]
   b7aa2:	9201      	str	r2, [sp, #4]
   b7aa4:	f000 fb87 	bl	b81b6 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7aa8:	9a01      	ldr	r2, [sp, #4]
   b7aaa:	4605      	mov	r5, r0
   b7aac:	b918      	cbnz	r0, b7ab6 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7aae:	2500      	movs	r5, #0
}
   b7ab0:	4628      	mov	r0, r5
   b7ab2:	b003      	add	sp, #12
   b7ab4:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7ab6:	7823      	ldrb	r3, [r4, #0]
   b7ab8:	079b      	lsls	r3, r3, #30
   b7aba:	d404      	bmi.n	b7ac6 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7abc:	7823      	ldrb	r3, [r4, #0]
   b7abe:	f023 0301 	bic.w	r3, r3, #1
   b7ac2:	7023      	strb	r3, [r4, #0]
   b7ac4:	e7f4      	b.n	b7ab0 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7ac6:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7aca:	6919      	ldr	r1, [r3, #16]
   b7acc:	4401      	add	r1, r0
   b7ace:	6818      	ldr	r0, [r3, #0]
   b7ad0:	f000 fb71 	bl	b81b6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7ad4:	2800      	cmp	r0, #0
   b7ad6:	d1f1      	bne.n	b7abc <_ZN8FatCache4syncEv+0x2e>
   b7ad8:	e7e9      	b.n	b7aae <_ZN8FatCache4syncEv+0x20>
  return true;
   b7ada:	2501      	movs	r5, #1
   b7adc:	e7e8      	b.n	b7ab0 <_ZN8FatCache4syncEv+0x22>

000b7ade <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7ade:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b7ae0:	6883      	ldr	r3, [r0, #8]
   b7ae2:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7ae4:	4604      	mov	r4, r0
   b7ae6:	460e      	mov	r6, r1
   b7ae8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7aea:	d009      	beq.n	b7b00 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7aec:	f7ff ffcf 	bl	b7a8e <_ZN8FatCache4syncEv>
   b7af0:	b908      	cbnz	r0, b7af6 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b7af2:	2000      	movs	r0, #0
}
   b7af4:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7af6:	076b      	lsls	r3, r5, #29
   b7af8:	d50a      	bpl.n	b7b10 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7afa:	2300      	movs	r3, #0
   b7afc:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7afe:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b7b00:	7822      	ldrb	r2, [r4, #0]
   b7b02:	f005 0503 	and.w	r5, r5, #3
   b7b06:	4620      	mov	r0, r4
   b7b08:	4315      	orrs	r5, r2
   b7b0a:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7b0e:	e7f1      	b.n	b7af4 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7b10:	6863      	ldr	r3, [r4, #4]
   b7b12:	f104 020c 	add.w	r2, r4, #12
   b7b16:	6818      	ldr	r0, [r3, #0]
   b7b18:	4631      	mov	r1, r6
   b7b1a:	f000 fac3 	bl	b80a4 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7b1e:	2800      	cmp	r0, #0
   b7b20:	d1eb      	bne.n	b7afa <_ZN8FatCache4readEmh+0x1c>
   b7b22:	e7e6      	b.n	b7af2 <_ZN8FatCache4readEmh+0x14>

000b7b24 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7b24:	7983      	ldrb	r3, [r0, #6]
   b7b26:	6940      	ldr	r0, [r0, #20]
   b7b28:	3902      	subs	r1, #2
   b7b2a:	4099      	lsls	r1, r3
}
   b7b2c:	4408      	add	r0, r1
   b7b2e:	4770      	bx	lr

000b7b30 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b30:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7b32:	b570      	push	{r4, r5, r6, lr}
   b7b34:	4605      	mov	r5, r0
   b7b36:	460c      	mov	r4, r1
   b7b38:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b3a:	d802      	bhi.n	b7b42 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7b40:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b42:	69c3      	ldr	r3, [r0, #28]
   b7b44:	428b      	cmp	r3, r1
   b7b46:	d3f9      	bcc.n	b7b3c <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7b48:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7b4a:	2b20      	cmp	r3, #32
   b7b4c:	d116      	bne.n	b7b7c <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7b4e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7b50:	2202      	movs	r2, #2
   b7b52:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7b56:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b5a:	f7ff ffc0 	bl	b7ade <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b5e:	2800      	cmp	r0, #0
   b7b60:	d0ec      	beq.n	b7b3c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7b62:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7b66:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7b6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7b6e:	69ea      	ldr	r2, [r5, #28]
   b7b70:	429a      	cmp	r2, r3
  *value = next;
   b7b72:	bf26      	itte	cs
   b7b74:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7b76:	2001      	movcs	r0, #1
    return 0;
   b7b78:	2000      	movcc	r0, #0
   b7b7a:	e7e1      	b.n	b7b40 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7b7c:	2b10      	cmp	r3, #16
   b7b7e:	d1dd      	bne.n	b7b3c <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7b80:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7b84:	6981      	ldr	r1, [r0, #24]
   b7b86:	2202      	movs	r2, #2
   b7b88:	4419      	add	r1, r3
   b7b8a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7b8e:	f7ff ffa6 	bl	b7ade <_ZN8FatCache4readEmh>
    if (!pc) {
   b7b92:	2800      	cmp	r0, #0
   b7b94:	d0d2      	beq.n	b7b3c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7b96:	b2e4      	uxtb	r4, r4
   b7b98:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7b9c:	e7e7      	b.n	b7b6e <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7b9e <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7b9e:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7ba0:	b538      	push	{r3, r4, r5, lr}
   b7ba2:	460c      	mov	r4, r1
   b7ba4:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7ba6:	d801      	bhi.n	b7bac <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7ba8:	2000      	movs	r0, #0
}
   b7baa:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7bac:	69c3      	ldr	r3, [r0, #28]
   b7bae:	428b      	cmp	r3, r1
   b7bb0:	d3fa      	bcc.n	b7ba8 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7bb2:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7bb4:	2b20      	cmp	r3, #32
   b7bb6:	d10f      	bne.n	b7bd8 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7bb8:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7bba:	2203      	movs	r2, #3
   b7bbc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7bc0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7bc4:	f7ff ff8b 	bl	b7ade <_ZN8FatCache4readEmh>
    if (!pc) {
   b7bc8:	2800      	cmp	r0, #0
   b7bca:	d0ed      	beq.n	b7ba8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7bcc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7bd0:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7bd4:	2001      	movs	r0, #1
   b7bd6:	e7e8      	b.n	b7baa <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7bd8:	2b10      	cmp	r3, #16
   b7bda:	d1e5      	bne.n	b7ba8 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7bdc:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7be0:	6981      	ldr	r1, [r0, #24]
   b7be2:	2203      	movs	r2, #3
   b7be4:	4419      	add	r1, r3
   b7be6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7bea:	f7ff ff78 	bl	b7ade <_ZN8FatCache4readEmh>
    if (!pc) {
   b7bee:	2800      	cmp	r0, #0
   b7bf0:	d0da      	beq.n	b7ba8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7bf2:	b2e4      	uxtb	r4, r4
   b7bf4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7bf8:	e7ec      	b.n	b7bd4 <_ZN9FatVolume6fatPutEmm+0x36>

000b7bfa <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7bfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7bfe:	68c4      	ldr	r4, [r0, #12]
   b7c00:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7c02:	4605      	mov	r5, r0
   b7c04:	460e      	mov	r6, r1
   b7c06:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7c08:	d301      	bcc.n	b7c0e <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7c0a:	2701      	movs	r7, #1
   b7c0c:	e001      	b.n	b7c12 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7c0e:	460c      	mov	r4, r1
    setStart = false;
   b7c10:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7c12:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7c14:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7c16:	42a3      	cmp	r3, r4
   b7c18:	d202      	bcs.n	b7c20 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7c1a:	b9c7      	cbnz	r7, b7c4e <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7c1c:	68ec      	ldr	r4, [r5, #12]
   b7c1e:	e7f4      	b.n	b7c0a <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7c20:	42a6      	cmp	r6, r4
   b7c22:	d014      	beq.n	b7c4e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7c24:	aa01      	add	r2, sp, #4
   b7c26:	4621      	mov	r1, r4
   b7c28:	4628      	mov	r0, r5
   b7c2a:	f7ff ff81 	bl	b7b30 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7c2e:	2800      	cmp	r0, #0
   b7c30:	db0d      	blt.n	b7c4e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7c32:	d0ee      	beq.n	b7c12 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7c34:	9b01      	ldr	r3, [sp, #4]
   b7c36:	2b00      	cmp	r3, #0
   b7c38:	d1eb      	bne.n	b7c12 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7c3a:	b107      	cbz	r7, b7c3e <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7c3c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7c3e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7c42:	4621      	mov	r1, r4
   b7c44:	4628      	mov	r0, r5
   b7c46:	f7ff ffaa 	bl	b7b9e <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7c4a:	4607      	mov	r7, r0
   b7c4c:	b920      	cbnz	r0, b7c58 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7c4e:	2700      	movs	r7, #0
}
   b7c50:	4638      	mov	r0, r7
   b7c52:	b002      	add	sp, #8
   b7c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7c58:	b916      	cbnz	r6, b7c60 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7c5a:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7c5e:	e7f7      	b.n	b7c50 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7c60:	4622      	mov	r2, r4
   b7c62:	4631      	mov	r1, r6
   b7c64:	4628      	mov	r0, r5
   b7c66:	f7ff ff9a 	bl	b7b9e <_ZN9FatVolume6fatPutEmm>
   b7c6a:	2800      	cmp	r0, #0
   b7c6c:	d1f5      	bne.n	b7c5a <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7c6e:	e7ee      	b.n	b7c4e <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7c70 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7c70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c72:	4605      	mov	r5, r0
   b7c74:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7c76:	aa01      	add	r2, sp, #4
   b7c78:	4621      	mov	r1, r4
   b7c7a:	4628      	mov	r0, r5
   b7c7c:	f7ff ff58 	bl	b7b30 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7c80:	1e06      	subs	r6, r0, #0
   b7c82:	db10      	blt.n	b7ca6 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7c84:	2200      	movs	r2, #0
   b7c86:	4621      	mov	r1, r4
   b7c88:	4628      	mov	r0, r5
   b7c8a:	f7ff ff88 	bl	b7b9e <_ZN9FatVolume6fatPutEmm>
   b7c8e:	b150      	cbz	r0, b7ca6 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7c90:	68eb      	ldr	r3, [r5, #12]
   b7c92:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7c94:	bf24      	itt	cs
   b7c96:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b7c9a:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7c9c:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7c9e:	2e00      	cmp	r6, #0
   b7ca0:	d1e9      	bne.n	b7c76 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7ca2:	b002      	add	sp, #8
   b7ca4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7ca6:	2000      	movs	r0, #0
   b7ca8:	e7fb      	b.n	b7ca2 <_ZN9FatVolume9freeChainEm+0x32>

000b7caa <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7caa:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7cac:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7cae:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7cb0:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7cb6:	4604      	mov	r4, r0
  m_fatType = 0;
   b7cb8:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7cba:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7cbe:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7cc0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7cc4:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7cc6:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7cca:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7cce:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7cd2:	460d      	mov	r5, r1
   b7cd4:	b1b9      	cbz	r1, b7d06 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7cd6:	2904      	cmp	r1, #4
   b7cd8:	d901      	bls.n	b7cde <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7cda:	2000      	movs	r0, #0
}
   b7cdc:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7cde:	4611      	mov	r1, r2
   b7ce0:	4630      	mov	r0, r6
   b7ce2:	f7ff fefc 	bl	b7ade <_ZN8FatCache4readEmh>
    if (!pc) {
   b7ce6:	2800      	cmp	r0, #0
   b7ce8:	d0f7      	beq.n	b7cda <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7cea:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7cee:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7cf2:	065b      	lsls	r3, r3, #25
   b7cf4:	d1f1      	bne.n	b7cda <_ZN9FatVolume4initEh+0x30>
   b7cf6:	f105 011b 	add.w	r1, r5, #27
   b7cfa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7cfe:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7d02:	2d00      	cmp	r5, #0
   b7d04:	d0e9      	beq.n	b7cda <_ZN9FatVolume4initEh+0x30>
   b7d06:	2200      	movs	r2, #0
   b7d08:	4629      	mov	r1, r5
   b7d0a:	4630      	mov	r0, r6
   b7d0c:	f7ff fee7 	bl	b7ade <_ZN8FatCache4readEmh>
  if (!pc) {
   b7d10:	2800      	cmp	r0, #0
   b7d12:	d0e2      	beq.n	b7cda <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7d14:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7d1c:	d1dd      	bne.n	b7cda <_ZN9FatVolume4initEh+0x30>
   b7d1e:	7c03      	ldrb	r3, [r0, #16]
   b7d20:	2b02      	cmp	r3, #2
   b7d22:	d1da      	bne.n	b7cda <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7d24:	89c3      	ldrh	r3, [r0, #14]
   b7d26:	2b00      	cmp	r3, #0
   b7d28:	d0d7      	beq.n	b7cda <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7d2a:	7b41      	ldrb	r1, [r0, #13]
   b7d2c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7d2e:	1e4b      	subs	r3, r1, #1
   b7d30:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7d32:	2300      	movs	r3, #0
   b7d34:	71a3      	strb	r3, [r4, #6]
   b7d36:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7d38:	2301      	movs	r3, #1
   b7d3a:	4299      	cmp	r1, r3
   b7d3c:	d007      	beq.n	b7d4e <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7d3e:	3e01      	subs	r6, #1
   b7d40:	d0cb      	beq.n	b7cda <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7d42:	79a2      	ldrb	r2, [r4, #6]
   b7d44:	005b      	lsls	r3, r3, #1
   b7d46:	3201      	adds	r2, #1
   b7d48:	b2db      	uxtb	r3, r3
   b7d4a:	71a2      	strb	r2, [r4, #6]
   b7d4c:	e7f5      	b.n	b7d3a <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7d4e:	8ac1      	ldrh	r1, [r0, #22]
   b7d50:	b901      	cbnz	r1, b7d54 <_ZN9FatVolume4initEh+0xaa>
   b7d52:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7d54:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7d56:	89c3      	ldrh	r3, [r0, #14]
   b7d58:	442b      	add	r3, r5
   b7d5a:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7d5c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7d60:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7d62:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7d66:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7d68:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7d6c:	0149      	lsls	r1, r1, #5
   b7d6e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7d72:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7d76:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7d78:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7d7c:	b902      	cbnz	r2, b7d80 <_ZN9FatVolume4initEh+0xd6>
   b7d7e:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7d80:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7d82:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7d84:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7d86:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7d88:	1c4b      	adds	r3, r1, #1
   b7d8a:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7d8c:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7d90:	4299      	cmp	r1, r3
   b7d92:	d802      	bhi.n	b7d9a <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7d94:	230c      	movs	r3, #12
   b7d96:	71e3      	strb	r3, [r4, #7]
   b7d98:	e79f      	b.n	b7cda <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7d9a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7d9e:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7da0:	bf85      	ittet	hi
   b7da2:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7da4:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7da6:	2310      	movls	r3, #16
    m_fatType = 32;
   b7da8:	2320      	movhi	r3, #32
   b7daa:	71e3      	strb	r3, [r4, #7]
  return true;
   b7dac:	2001      	movs	r0, #1
   b7dae:	e795      	b.n	b7cdc <_ZN9FatVolume4initEh+0x32>

000b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7db0:	f000 baca 	b.w	b8348 <_ZN14SdSpiAltDriver4sendEh>

000b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7db4:	f000 baad 	b.w	b8312 <_ZN14SdSpiAltDriver7receiveEv>

000b7db8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7db8:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7dba:	4e0e      	ldr	r6, [pc, #56]	; (b7df4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7dbc:	460d      	mov	r5, r1
   b7dbe:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7dc0:	f005 fff8 	bl	bddb4 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7dc4:	6833      	ldr	r3, [r6, #0]
   b7dc6:	1ac0      	subs	r0, r0, r3
   b7dc8:	4b0b      	ldr	r3, [pc, #44]	; (b7df8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7dca:	4298      	cmp	r0, r3
   b7dcc:	d908      	bls.n	b7de0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7dce:	f005 fff9 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7dd2:	4b0a      	ldr	r3, [pc, #40]	; (b7dfc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7dd4:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7dd6:	f006 fa4b 	bl	be270 <spark_process>
   b7dda:	f005 ffeb 	bl	bddb4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7dde:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7de0:	f005 fff0 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7de4:	b280      	uxth	r0, r0
   b7de6:	1b40      	subs	r0, r0, r5
}
   b7de8:	42a0      	cmp	r0, r4
   b7dea:	bfd4      	ite	le
   b7dec:	2000      	movle	r0, #0
   b7dee:	2001      	movgt	r0, #1
   b7df0:	bd70      	pop	{r4, r5, r6, pc}
   b7df2:	bf00      	nop
   b7df4:	2003e614 	.word	0x2003e614
   b7df8:	000186a0 	.word	0x000186a0
   b7dfc:	2003e728 	.word	0x2003e728

000b7e00 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7e00:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7e02:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7e04:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7e06:	b94d      	cbnz	r5, b7e1c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7e08:	6840      	ldr	r0, [r0, #4]
   b7e0a:	f000 fa6b 	bl	b82e4 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7e0e:	6863      	ldr	r3, [r4, #4]
   b7e10:	4629      	mov	r1, r5
   b7e12:	7d18      	ldrb	r0, [r3, #20]
   b7e14:	f00a f953 	bl	c20be <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7e18:	2301      	movs	r3, #1
   b7e1a:	7223      	strb	r3, [r4, #8]
  }
}
   b7e1c:	bd38      	pop	{r3, r4, r5, pc}

000b7e1e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7e1e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7e20:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7e22:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7e24:	b16b      	cbz	r3, b7e42 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7e26:	6843      	ldr	r3, [r0, #4]
   b7e28:	2101      	movs	r1, #1
   b7e2a:	7d18      	ldrb	r0, [r3, #20]
   b7e2c:	f00a f947 	bl	c20be <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7e30:	6860      	ldr	r0, [r4, #4]
   b7e32:	21ff      	movs	r1, #255	; 0xff
   b7e34:	f7ff ffbc 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7e38:	6860      	ldr	r0, [r4, #4]
   b7e3a:	f000 fa67 	bl	b830c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7e3e:	2300      	movs	r3, #0
   b7e40:	7223      	strb	r3, [r4, #8]
  }
}
   b7e42:	bd10      	pop	{r4, pc}

000b7e44 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e46:	4604      	mov	r4, r0
   b7e48:	460d      	mov	r5, r1
   b7e4a:	4616      	mov	r6, r2
   b7e4c:	f005 ffba 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7e50:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7e52:	6860      	ldr	r0, [r4, #4]
   b7e54:	f7ff ffae 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e58:	28ff      	cmp	r0, #255	; 0xff
   b7e5a:	7260      	strb	r0, [r4, #9]
   b7e5c:	d10e      	bne.n	b7e7c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7e62:	4639      	mov	r1, r7
   b7e64:	4620      	mov	r0, r4
   b7e66:	f7ff ffa7 	bl	b7db8 <_ZN9SdSpiCard10isTimedOutEtt>
   b7e6a:	2800      	cmp	r0, #0
   b7e6c:	d0f1      	beq.n	b7e52 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7e6e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7e70:	4620      	mov	r0, r4
   b7e72:	7023      	strb	r3, [r4, #0]
   b7e74:	f7ff ffd3 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7e78:	2000      	movs	r0, #0
}
   b7e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7e7c:	28fe      	cmp	r0, #254	; 0xfe
   b7e7e:	d001      	beq.n	b7e84 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7e80:	2350      	movs	r3, #80	; 0x50
   b7e82:	e7f5      	b.n	b7e70 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7e84:	6860      	ldr	r0, [r4, #4]
   b7e86:	4632      	mov	r2, r6
   b7e88:	4629      	mov	r1, r5
   b7e8a:	f000 fa47 	bl	b831c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7e8e:	7260      	strb	r0, [r4, #9]
   b7e90:	b108      	cbz	r0, b7e96 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7e92:	2360      	movs	r3, #96	; 0x60
   b7e94:	e7ec      	b.n	b7e70 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7e96:	6860      	ldr	r0, [r4, #4]
   b7e98:	f7ff ff8c 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7e9c:	6860      	ldr	r0, [r4, #4]
   b7e9e:	f7ff ff89 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7ea2:	2001      	movs	r0, #1
   b7ea4:	e7e9      	b.n	b7e7a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7ea6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7ea6:	b570      	push	{r4, r5, r6, lr}
   b7ea8:	4604      	mov	r4, r0
   b7eaa:	460e      	mov	r6, r1
   b7eac:	f005 ff8a 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   b7eb0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7eb2:	4632      	mov	r2, r6
   b7eb4:	4629      	mov	r1, r5
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	f7ff ff7e 	bl	b7db8 <_ZN9SdSpiCard10isTimedOutEtt>
   b7ebc:	b930      	cbnz	r0, b7ecc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7ebe:	6860      	ldr	r0, [r4, #4]
   b7ec0:	f7ff ff78 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ec4:	28ff      	cmp	r0, #255	; 0xff
   b7ec6:	d1f4      	bne.n	b7eb2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7ec8:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7eca:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7ecc:	2000      	movs	r0, #0
   b7ece:	e7fc      	b.n	b7eca <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7ed0 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7ed2:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7ed4:	9201      	str	r2, [sp, #4]
   b7ed6:	4604      	mov	r4, r0
   b7ed8:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7eda:	b90b      	cbnz	r3, b7ee0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7edc:	f7ff ff90 	bl	b7e00 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7ee0:	b125      	cbz	r5, b7eec <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7ee2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	f7ff ffdd 	bl	b7ea6 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7eec:	6860      	ldr	r0, [r4, #4]
   b7eee:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7ef2:	f7ff ff5d 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7ef6:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7ef8:	af01      	add	r7, sp, #4
   b7efa:	5db9      	ldrb	r1, [r7, r6]
   b7efc:	6860      	ldr	r0, [r4, #4]
   b7efe:	f7ff ff57 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7f02:	3e01      	subs	r6, #1
   b7f04:	d2f9      	bcs.n	b7efa <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7f06:	2d00      	cmp	r5, #0
   b7f08:	6860      	ldr	r0, [r4, #4]
   b7f0a:	bf0c      	ite	eq
   b7f0c:	2195      	moveq	r1, #149	; 0x95
   b7f0e:	2187      	movne	r1, #135	; 0x87
   b7f10:	f7ff ff4e 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7f14:	6860      	ldr	r0, [r4, #4]
   b7f16:	f7ff ff4d 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7f1a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7f1c:	6860      	ldr	r0, [r4, #4]
   b7f1e:	f7ff ff49 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7f22:	0603      	lsls	r3, r0, #24
   b7f24:	7260      	strb	r0, [r4, #9]
   b7f26:	d503      	bpl.n	b7f30 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7f28:	3d01      	subs	r5, #1
   b7f2a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7f2e:	d1f5      	bne.n	b7f1c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7f30:	b003      	add	sp, #12
   b7f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7f34 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7f34:	b570      	push	{r4, r5, r6, lr}
   b7f36:	4604      	mov	r4, r0
   b7f38:	460d      	mov	r5, r1
   b7f3a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7f3c:	2137      	movs	r1, #55	; 0x37
   b7f3e:	2200      	movs	r2, #0
   b7f40:	f7ff ffc6 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7f44:	4632      	mov	r2, r6
   b7f46:	4629      	mov	r1, r5
   b7f48:	4620      	mov	r0, r4
  }
   b7f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7f4e:	f7ff bfbf 	b.w	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7f54 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7f58:	2500      	movs	r5, #0
   b7f5a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7f5c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7f5e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7f60:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7f62:	4604      	mov	r4, r0
   b7f64:	4690      	mov	r8, r2
   b7f66:	461e      	mov	r6, r3
   b7f68:	f005 ff2c 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7f6c:	4641      	mov	r1, r8
   b7f6e:	4607      	mov	r7, r0
   b7f70:	6860      	ldr	r0, [r4, #4]
   b7f72:	f000 f9bb 	bl	b82ec <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7f76:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7f78:	4a49      	ldr	r2, [pc, #292]	; (b80a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7f7a:	721d      	strb	r5, [r3, #8]
   b7f7c:	2501      	movs	r5, #1
   b7f7e:	60da      	str	r2, [r3, #12]
   b7f80:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7f82:	4620      	mov	r0, r4
   b7f84:	f7ff ff3c 	bl	b7e00 <_ZN9SdSpiCard8spiStartEv>
   b7f88:	6863      	ldr	r3, [r4, #4]
   b7f8a:	4629      	mov	r1, r5
   b7f8c:	7d18      	ldrb	r0, [r3, #20]
   b7f8e:	f00a f896 	bl	c20be <digitalWrite>
   b7f92:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7f94:	6860      	ldr	r0, [r4, #4]
   b7f96:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7f98:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7f9a:	f7ff ff09 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7f9e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7fa2:	d1f7      	bne.n	b7f94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7fa4:	6863      	ldr	r3, [r4, #4]
   b7fa6:	4629      	mov	r1, r5
   b7fa8:	7d18      	ldrb	r0, [r3, #20]
   b7faa:	f00a f888 	bl	c20be <digitalWrite>
  }
   b7fae:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7fb0:	2200      	movs	r2, #0
   b7fb2:	4611      	mov	r1, r2
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	f7ff ff8b 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b7fba:	2801      	cmp	r0, #1
   b7fbc:	4680      	mov	r8, r0
   b7fbe:	d018      	beq.n	b7ff2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7fc0:	3d01      	subs	r5, #1
   b7fc2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7fc6:	d107      	bne.n	b7fd8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7fc8:	2320      	movs	r3, #32
  spiStop();
   b7fca:	4620      	mov	r0, r4
   b7fcc:	7023      	strb	r3, [r4, #0]
   b7fce:	f7ff ff26 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7fd2:	2000      	movs	r0, #0
}
   b7fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7fd8:	6860      	ldr	r0, [r4, #4]
   b7fda:	21fd      	movs	r1, #253	; 0xfd
   b7fdc:	f7ff fee8 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7fe0:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7fe4:	6860      	ldr	r0, [r4, #4]
   b7fe6:	f7ff fee5 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7fea:	f1b8 0801 	subs.w	r8, r8, #1
   b7fee:	d1f9      	bne.n	b7fe4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7ff0:	e7de      	b.n	b7fb0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7ff2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7ff6:	2108      	movs	r1, #8
   b7ff8:	4620      	mov	r0, r4
   b7ffa:	f7ff ff69 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b7ffe:	2805      	cmp	r0, #5
   b8000:	d114      	bne.n	b802c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b8002:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b8006:	2500      	movs	r5, #0
   b8008:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b800a:	462a      	mov	r2, r5
   b800c:	2129      	movs	r1, #41	; 0x29
   b800e:	4620      	mov	r0, r4
   b8010:	f7ff ff90 	bl	b7f34 <_ZN9SdSpiCard8cardAcmdEhm>
   b8014:	4602      	mov	r2, r0
   b8016:	b1d8      	cbz	r0, b8050 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b8018:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b801c:	4639      	mov	r1, r7
   b801e:	4620      	mov	r0, r4
   b8020:	f7ff feca 	bl	b7db8 <_ZN9SdSpiCard10isTimedOutEtt>
   b8024:	2800      	cmp	r0, #0
   b8026:	d0f0      	beq.n	b800a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b8028:	2343      	movs	r3, #67	; 0x43
   b802a:	e7ce      	b.n	b7fca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b802c:	2504      	movs	r5, #4
      m_status = spiReceive();
   b802e:	6860      	ldr	r0, [r4, #4]
   b8030:	f7ff fec0 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b8034:	3d01      	subs	r5, #1
   b8036:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b803a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b803c:	d1f7      	bne.n	b802e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b803e:	28aa      	cmp	r0, #170	; 0xaa
   b8040:	d104      	bne.n	b804c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b8042:	2302      	movs	r3, #2
   b8044:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b8046:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b804a:	e7dd      	b.n	b8008 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b804c:	2325      	movs	r3, #37	; 0x25
   b804e:	e7bc      	b.n	b7fca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b8050:	7aa3      	ldrb	r3, [r4, #10]
   b8052:	2b02      	cmp	r3, #2
   b8054:	d118      	bne.n	b8088 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b8056:	213a      	movs	r1, #58	; 0x3a
   b8058:	4620      	mov	r0, r4
   b805a:	f7ff ff39 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b805e:	b108      	cbz	r0, b8064 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b8060:	2337      	movs	r3, #55	; 0x37
   b8062:	e7b2      	b.n	b7fca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b8064:	6860      	ldr	r0, [r4, #4]
   b8066:	f7ff fea5 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b806a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b806e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b8070:	bf04      	itt	eq
   b8072:	2303      	moveq	r3, #3
   b8074:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b8076:	6860      	ldr	r0, [r4, #4]
   b8078:	f7ff fe9c 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b807c:	6860      	ldr	r0, [r4, #4]
   b807e:	f7ff fe99 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8082:	6860      	ldr	r0, [r4, #4]
   b8084:	f7ff fe96 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b8088:	4620      	mov	r0, r4
   b808a:	f7ff fec8 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b808e:	6863      	ldr	r3, [r4, #4]
   b8090:	7930      	ldrb	r0, [r6, #4]
   b8092:	68b1      	ldr	r1, [r6, #8]
   b8094:	89b2      	ldrh	r2, [r6, #12]
   b8096:	821a      	strh	r2, [r3, #16]
   b8098:	7218      	strb	r0, [r3, #8]
   b809a:	60d9      	str	r1, [r3, #12]
  return true;
   b809c:	2001      	movs	r0, #1
   b809e:	e799      	b.n	b7fd4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b80a0:	0003d090 	.word	0x0003d090

000b80a4 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b80a4:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b80a6:	7a83      	ldrb	r3, [r0, #10]
   b80a8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b80aa:	bf18      	it	ne
   b80ac:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b80ae:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b80b0:	460a      	mov	r2, r1
   b80b2:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b80b4:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b80b6:	f7ff ff0b 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b80ba:	b130      	cbz	r0, b80ca <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b80bc:	2330      	movs	r3, #48	; 0x30
   b80be:	7023      	strb	r3, [r4, #0]
  spiStop();
   b80c0:	4620      	mov	r0, r4
   b80c2:	f7ff feac 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b80c6:	2500      	movs	r5, #0
   b80c8:	e00b      	b.n	b80e2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b80ca:	4629      	mov	r1, r5
   b80cc:	f44f 7200 	mov.w	r2, #512	; 0x200
   b80d0:	4620      	mov	r0, r4
   b80d2:	f7ff feb7 	bl	b7e44 <_ZN9SdSpiCard8readDataEPhj>
   b80d6:	4605      	mov	r5, r0
   b80d8:	2800      	cmp	r0, #0
   b80da:	d0f1      	beq.n	b80c0 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b80dc:	4620      	mov	r0, r4
   b80de:	f7ff fe9e 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
}
   b80e2:	4628      	mov	r0, r5
   b80e4:	bd38      	pop	{r3, r4, r5, pc}

000b80e6 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b80e6:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b80e8:	7a83      	ldrb	r3, [r0, #10]
   b80ea:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b80ec:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b80ee:	bf18      	it	ne
   b80f0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b80f2:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b80f4:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b80f6:	f7ff feeb 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b80fa:	b130      	cbz	r0, b810a <_ZN9SdSpiCard9readStartEm+0x24>
   b80fc:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b80fe:	4620      	mov	r0, r4
   b8100:	7023      	strb	r3, [r4, #0]
   b8102:	f7ff fe8c 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8106:	2000      	movs	r0, #0
}
   b8108:	bd10      	pop	{r4, pc}
  return true;
   b810a:	2001      	movs	r0, #1
   b810c:	e7fc      	b.n	b8108 <_ZN9SdSpiCard9readStartEm+0x22>

000b810e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b810e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b8110:	2200      	movs	r2, #0
   b8112:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b8114:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b8116:	f7ff fedb 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b811a:	b130      	cbz	r0, b812a <_ZN9SdSpiCard8readStopEv+0x1c>
   b811c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b811e:	4620      	mov	r0, r4
   b8120:	7023      	strb	r3, [r4, #0]
   b8122:	f7ff fe7c 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8126:	2000      	movs	r0, #0
}
   b8128:	bd10      	pop	{r4, pc}
  spiStop();
   b812a:	4620      	mov	r0, r4
   b812c:	f7ff fe77 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return true;
   b8130:	2001      	movs	r0, #1
   b8132:	e7f9      	b.n	b8128 <_ZN9SdSpiCard8readStopEv+0x1a>

000b8134 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b8134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8136:	4604      	mov	r4, r0
   b8138:	4616      	mov	r6, r2
   b813a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b813c:	f7ff ffd3 	bl	b80e6 <_ZN9SdSpiCard9readStartEm>
   b8140:	b168      	cbz	r0, b815e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b8142:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b8144:	b2ab      	uxth	r3, r5
   b8146:	429f      	cmp	r7, r3
   b8148:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b814c:	d909      	bls.n	b8162 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b814e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8152:	4620      	mov	r0, r4
   b8154:	f7ff fe76 	bl	b7e44 <_ZN9SdSpiCard8readDataEPhj>
   b8158:	3501      	adds	r5, #1
   b815a:	2800      	cmp	r0, #0
   b815c:	d1f2      	bne.n	b8144 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b815e:	2000      	movs	r0, #0
   b8160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b8162:	4620      	mov	r0, r4
}
   b8164:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b8168:	f7ff bfd1 	b.w	b810e <_ZN9SdSpiCard8readStopEv>

000b816c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b816c:	b538      	push	{r3, r4, r5, lr}
   b816e:	4604      	mov	r4, r0
   b8170:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b8172:	6840      	ldr	r0, [r0, #4]
   b8174:	f7ff fe1c 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b8178:	f44f 7200 	mov.w	r2, #512	; 0x200
   b817c:	6860      	ldr	r0, [r4, #4]
   b817e:	4629      	mov	r1, r5
   b8180:	f000 f8e6 	bl	b8350 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b8184:	6860      	ldr	r0, [r4, #4]
   b8186:	21ff      	movs	r1, #255	; 0xff
   b8188:	f7ff fe12 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b818c:	6860      	ldr	r0, [r4, #4]
   b818e:	21ff      	movs	r1, #255	; 0xff
   b8190:	f7ff fe0e 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b8194:	6860      	ldr	r0, [r4, #4]
   b8196:	f7ff fe0d 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b819a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b819c:	f000 001f 	and.w	r0, r0, #31
   b81a0:	2805      	cmp	r0, #5
   b81a2:	d006      	beq.n	b81b2 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b81a4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b81a6:	4620      	mov	r0, r4
   b81a8:	7023      	strb	r3, [r4, #0]
   b81aa:	f7ff fe38 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b81ae:	2000      	movs	r0, #0
}
   b81b0:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b81b2:	2001      	movs	r0, #1
   b81b4:	e7fc      	b.n	b81b0 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b81b6 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b81b6:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b81b8:	7a83      	ldrb	r3, [r0, #10]
   b81ba:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b81bc:	bf18      	it	ne
   b81be:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b81c0:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b81c2:	460a      	mov	r2, r1
   b81c4:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b81c6:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b81c8:	f7ff fe82 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b81cc:	4606      	mov	r6, r0
   b81ce:	b130      	cbz	r0, b81de <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b81d0:	2332      	movs	r3, #50	; 0x32
   b81d2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b81d4:	4620      	mov	r0, r4
   b81d6:	f7ff fe22 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b81da:	2500      	movs	r5, #0
   b81dc:	e01f      	b.n	b821e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b81de:	462a      	mov	r2, r5
   b81e0:	21fe      	movs	r1, #254	; 0xfe
   b81e2:	4620      	mov	r0, r4
   b81e4:	f7ff ffc2 	bl	b816c <_ZN9SdSpiCard9writeDataEhPKh>
   b81e8:	2800      	cmp	r0, #0
   b81ea:	d0f3      	beq.n	b81d4 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b81ec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b81f0:	4620      	mov	r0, r4
   b81f2:	f7ff fe58 	bl	b7ea6 <_ZN9SdSpiCard11waitNotBusyEt>
   b81f6:	4605      	mov	r5, r0
   b81f8:	b908      	cbnz	r0, b81fe <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b81fa:	235a      	movs	r3, #90	; 0x5a
   b81fc:	e7e9      	b.n	b81d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b81fe:	4632      	mov	r2, r6
   b8200:	210d      	movs	r1, #13
   b8202:	4620      	mov	r0, r4
   b8204:	f7ff fe64 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b8208:	b108      	cbz	r0, b820e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b820a:	2329      	movs	r3, #41	; 0x29
   b820c:	e7e1      	b.n	b81d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b820e:	6860      	ldr	r0, [r4, #4]
   b8210:	f7ff fdd0 	bl	b7db4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8214:	2800      	cmp	r0, #0
   b8216:	d1f8      	bne.n	b820a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b8218:	4620      	mov	r0, r4
   b821a:	f7ff fe00 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
}
   b821e:	4628      	mov	r0, r5
   b8220:	bd70      	pop	{r4, r5, r6, pc}

000b8222 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b8222:	b513      	push	{r0, r1, r4, lr}
   b8224:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8226:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b822a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b822c:	f7ff fe3b 	bl	b7ea6 <_ZN9SdSpiCard11waitNotBusyEt>
   b8230:	9a01      	ldr	r2, [sp, #4]
   b8232:	b930      	cbnz	r0, b8242 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b8234:	235b      	movs	r3, #91	; 0x5b
   b8236:	7023      	strb	r3, [r4, #0]
  spiStop();
   b8238:	4620      	mov	r0, r4
   b823a:	f7ff fdf0 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b823e:	2000      	movs	r0, #0
   b8240:	e005      	b.n	b824e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b8242:	21fc      	movs	r1, #252	; 0xfc
   b8244:	4620      	mov	r0, r4
   b8246:	f7ff ff91 	bl	b816c <_ZN9SdSpiCard9writeDataEhPKh>
   b824a:	2800      	cmp	r0, #0
   b824c:	d0f4      	beq.n	b8238 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b824e:	b002      	add	sp, #8
   b8250:	bd10      	pop	{r4, pc}

000b8252 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8252:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b8254:	7a83      	ldrb	r3, [r0, #10]
   b8256:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8258:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b825a:	bf18      	it	ne
   b825c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b825e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8260:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b8262:	f7ff fe35 	bl	b7ed0 <_ZN9SdSpiCard11cardCommandEhm>
   b8266:	b130      	cbz	r0, b8276 <_ZN9SdSpiCard10writeStartEm+0x24>
   b8268:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b826a:	4620      	mov	r0, r4
   b826c:	7023      	strb	r3, [r4, #0]
   b826e:	f7ff fdd6 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8272:	2000      	movs	r0, #0
}
   b8274:	bd10      	pop	{r4, pc}
  return true;
   b8276:	2001      	movs	r0, #1
   b8278:	e7fc      	b.n	b8274 <_ZN9SdSpiCard10writeStartEm+0x22>

000b827a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b827a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b827c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8280:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8282:	f7ff fe10 	bl	b7ea6 <_ZN9SdSpiCard11waitNotBusyEt>
   b8286:	4605      	mov	r5, r0
   b8288:	b930      	cbnz	r0, b8298 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b828a:	2356      	movs	r3, #86	; 0x56
   b828c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b828e:	4620      	mov	r0, r4
   b8290:	f7ff fdc5 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b8294:	4628      	mov	r0, r5
   b8296:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b8298:	6860      	ldr	r0, [r4, #4]
   b829a:	21fd      	movs	r1, #253	; 0xfd
   b829c:	f7ff fd88 	bl	b7db0 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b82a0:	e7f5      	b.n	b828e <_ZN9SdSpiCard9writeStopEv+0x14>

000b82a2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b82a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82a4:	4604      	mov	r4, r0
   b82a6:	4616      	mov	r6, r2
   b82a8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b82aa:	f7ff ffd2 	bl	b8252 <_ZN9SdSpiCard10writeStartEm>
   b82ae:	b170      	cbz	r0, b82ce <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b82b0:	2500      	movs	r5, #0
   b82b2:	42bd      	cmp	r5, r7
   b82b4:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b82b8:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b82ba:	d004      	beq.n	b82c6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b82bc:	f7ff ffb1 	bl	b8222 <_ZN9SdSpiCard9writeDataEPKh>
   b82c0:	b128      	cbz	r0, b82ce <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b82c2:	3501      	adds	r5, #1
   b82c4:	e7f5      	b.n	b82b2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b82c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b82ca:	f7ff bfd6 	b.w	b827a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b82ce:	4620      	mov	r0, r4
   b82d0:	f7ff fda5 	bl	b7e1e <_ZN9SdSpiCard7spiStopEv>
}
   b82d4:	2000      	movs	r0, #0
   b82d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b82d8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b82d8:	4b01      	ldr	r3, [pc, #4]	; (b82e0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b82da:	2201      	movs	r2, #1
   b82dc:	701a      	strb	r2, [r3, #0]
}
   b82de:	4770      	bx	lr
   b82e0:	2003e618 	.word	0x2003e618

000b82e4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b82e4:	1d01      	adds	r1, r0, #4
   b82e6:	6800      	ldr	r0, [r0, #0]
   b82e8:	f009 ba78 	b.w	c17dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b82ec <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b82ec:	b510      	push	{r4, lr}
   b82ee:	4604      	mov	r4, r0
  m_csPin = csPin;
   b82f0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b82f2:	6800      	ldr	r0, [r0, #0]
   b82f4:	f009 fa45 	bl	c1782 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b82f8:	7d20      	ldrb	r0, [r4, #20]
   b82fa:	2101      	movs	r1, #1
   b82fc:	f009 fece 	bl	c209c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b8300:	7d20      	ldrb	r0, [r4, #20]
   b8302:	2101      	movs	r1, #1
}
   b8304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b8308:	f009 bed9 	b.w	c20be <digitalWrite>

000b830c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b830c:	6800      	ldr	r0, [r0, #0]
   b830e:	f009 ba4c 	b.w	c17aa <_ZN8SPIClass14endTransactionEv>

000b8312 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b8312:	6800      	ldr	r0, [r0, #0]
   b8314:	21ff      	movs	r1, #255	; 0xff
   b8316:	f009 bacf 	b.w	c18b8 <_ZN8SPIClass8transferEh>
	...

000b831c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b831c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b831e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8320:	4a07      	ldr	r2, [pc, #28]	; (b8340 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b8322:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8324:	2500      	movs	r5, #0
   b8326:	4c07      	ldr	r4, [pc, #28]	; (b8344 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8328:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b832a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b832c:	460a      	mov	r2, r1
   b832e:	4629      	mov	r1, r5
   b8330:	f009 fac8 	bl	c18c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b8334:	7823      	ldrb	r3, [r4, #0]
   b8336:	2b00      	cmp	r3, #0
   b8338:	d0fc      	beq.n	b8334 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b833a:	2000      	movs	r0, #0
   b833c:	b003      	add	sp, #12
   b833e:	bd30      	pop	{r4, r5, pc}
   b8340:	000b82d9 	.word	0x000b82d9
   b8344:	2003e618 	.word	0x2003e618

000b8348 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b8348:	6800      	ldr	r0, [r0, #0]
   b834a:	f009 bab5 	b.w	c18b8 <_ZN8SPIClass8transferEh>
	...

000b8350 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b8350:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8352:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8354:	4a06      	ldr	r2, [pc, #24]	; (b8370 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b8356:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8358:	2500      	movs	r5, #0
   b835a:	4c06      	ldr	r4, [pc, #24]	; (b8374 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b835c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b835e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8360:	462a      	mov	r2, r5
   b8362:	f009 faaf 	bl	c18c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b8366:	7823      	ldrb	r3, [r4, #0]
   b8368:	2b00      	cmp	r3, #0
   b836a:	d0fc      	beq.n	b8366 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b836c:	b003      	add	sp, #12
   b836e:	bd30      	pop	{r4, r5, pc}
   b8370:	000b82d9 	.word	0x000b82d9
   b8374:	2003e618 	.word	0x2003e618

000b8378 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b8378:	4770      	bx	lr

000b837a <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b837a:	4770      	bx	lr

000b837c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b837c:	b538      	push	{r3, r4, r5, lr}
   b837e:	460c      	mov	r4, r1
   b8380:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b8382:	2220      	movs	r2, #32
   b8384:	2100      	movs	r1, #0
   b8386:	f104 0008 	add.w	r0, r4, #8
   b838a:	f00c f981 	bl	c4690 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b838e:	4909      	ldr	r1, [pc, #36]	; (b83b4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b8390:	220b      	movs	r2, #11
   b8392:	4620      	mov	r0, r4
   b8394:	f00c fa36 	bl	c4804 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b8398:	2301      	movs	r3, #1
   b839a:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b839c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b839e:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b83a0:	2302      	movs	r3, #2
   b83a2:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b83a4:	4b04      	ldr	r3, [pc, #16]	; (b83b8 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b83a6:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b83a8:	4b04      	ldr	r3, [pc, #16]	; (b83bc <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b83aa:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b83ac:	4b04      	ldr	r3, [pc, #16]	; (b83c0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b83ae:	6223      	str	r3, [r4, #32]
}
   b83b0:	bd38      	pop	{r3, r4, r5, pc}
   b83b2:	bf00      	nop
   b83b4:	000c6fcc 	.word	0x000c6fcc
   b83b8:	c4c80000 	.word	0xc4c80000
   b83bc:	44c80000 	.word	0x44c80000
   b83c0:	3c75c28f 	.word	0x3c75c28f

000b83c4 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b83c4:	b510      	push	{r4, lr}
   b83c6:	2128      	movs	r1, #40	; 0x28
   b83c8:	4604      	mov	r4, r0
   b83ca:	f7fb fe6a 	bl	b40a2 <_ZdlPvj>
   b83ce:	4620      	mov	r0, r4
   b83d0:	bd10      	pop	{r4, pc}
	...

000b83d4 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b83d4:	4a03      	ldr	r2, [pc, #12]	; (b83e4 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b83d6:	6002      	str	r2, [r0, #0]
   b83d8:	2200      	movs	r2, #0
   b83da:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b83de:	7602      	strb	r2, [r0, #24]
   b83e0:	4770      	bx	lr
   b83e2:	bf00      	nop
   b83e4:	000c6fec 	.word	0x000c6fec

000b83e8 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b83e8:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b83ea:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b83ec:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b83ee:	2200      	movs	r2, #0
   b83f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b83f4:	2506      	movs	r5, #6
   b83f6:	2228      	movs	r2, #40	; 0x28
   b83f8:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b83fc:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b83fe:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8402:	a806      	add	r0, sp, #24
   b8404:	f005 f91a 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b8408:	462a      	mov	r2, r5
   b840a:	a904      	add	r1, sp, #16
   b840c:	a806      	add	r0, sp, #24
   b840e:	f005 f993 	bl	bd738 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b8412:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b8414:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b8418:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b841c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b8420:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b8422:	2d03      	cmp	r5, #3
   b8424:	bf98      	it	ls
   b8426:	4812      	ldrls	r0, [pc, #72]	; (b8470 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b8428:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b842a:	ee07 1a10 	vmov	s14, r1
   b842e:	bf9c      	itt	ls
   b8430:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b8434:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b8438:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b843a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b843e:	bf88      	it	hi
   b8440:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b8444:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b8448:	ee07 2a10 	vmov	s14, r2
   b844c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b8450:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b8454:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b8458:	ee07 3a10 	vmov	s14, r3
   b845c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b8460:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b8464:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b8468:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b846c:	b00d      	add	sp, #52	; 0x34
   b846e:	bd30      	pop	{r4, r5, pc}
   b8470:	000c6fd4 	.word	0x000c6fd4

000b8474 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b8474:	b538      	push	{r3, r4, r5, lr}
   b8476:	460c      	mov	r4, r1
   b8478:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b847a:	2220      	movs	r2, #32
   b847c:	2100      	movs	r1, #0
   b847e:	1d20      	adds	r0, r4, #4
   b8480:	f00c f906 	bl	c4690 <memset>
  event->version = sizeof(sensors_event_t);
   b8484:	2324      	movs	r3, #36	; 0x24
   b8486:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b8488:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b848a:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b848c:	2302      	movs	r3, #2
   b848e:	60a3      	str	r3, [r4, #8]
   b8490:	f005 fc98 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b8494:	6120      	str	r0, [r4, #16]
  read();
   b8496:	4628      	mov	r0, r5
   b8498:	f7ff ffa6 	bl	b83e8 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b849c:	edd5 7a03 	vldr	s15, [r5, #12]
   b84a0:	ed9f 7a09 	vldr	s14, [pc, #36]	; b84c8 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b84a4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b84a8:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b84aa:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b84ae:	edd5 7a04 	vldr	s15, [r5, #16]
   b84b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   b84b6:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b84ba:	edd5 7a05 	vldr	s15, [r5, #20]
   b84be:	ee67 7a87 	vmul.f32	s15, s15, s14
   b84c2:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b84c6:	bd38      	pop	{r3, r4, r5, pc}
   b84c8:	42c80000 	.word	0x42c80000

000b84cc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b84cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b84ce:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b84d0:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b84d2:	2700      	movs	r7, #0
   b84d4:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b84d8:	2320      	movs	r3, #32
   b84da:	9300      	str	r3, [sp, #0]
   b84dc:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b84de:	460e      	mov	r6, r1
   b84e0:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b84e2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b84e6:	462b      	mov	r3, r5
   b84e8:	a808      	add	r0, sp, #32
   b84ea:	f005 f8a7 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b84ee:	2305      	movs	r3, #5
   b84f0:	2202      	movs	r2, #2
   b84f2:	a908      	add	r1, sp, #32
   b84f4:	a804      	add	r0, sp, #16
   b84f6:	f005 f97d 	bl	bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b84fa:	4631      	mov	r1, r6
   b84fc:	a804      	add	r0, sp, #16
   b84fe:	f005 f98b 	bl	bd818 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b8502:	2323      	movs	r3, #35	; 0x23
   b8504:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b8508:	9300      	str	r3, [sp, #0]
   b850a:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b850e:	462b      	mov	r3, r5
   b8510:	9501      	str	r5, [sp, #4]
   b8512:	a80e      	add	r0, sp, #56	; 0x38
   b8514:	f005 f892 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b8518:	2302      	movs	r3, #2
   b851a:	461a      	mov	r2, r3
   b851c:	a90e      	add	r1, sp, #56	; 0x38
   b851e:	a806      	add	r0, sp, #24
   b8520:	f005 f968 	bl	bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b8524:	4631      	mov	r1, r6
   b8526:	a806      	add	r0, sp, #24
   b8528:	f005 f976 	bl	bd818 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b852c:	b015      	add	sp, #84	; 0x54
   b852e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8530 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8530:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b8532:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8534:	b08c      	sub	sp, #48	; 0x30
   b8536:	4606      	mov	r6, r0
   b8538:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b853a:	d103      	bne.n	b8544 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b853c:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b853e:	f7ff ffc5 	bl	b84cc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b8542:	e009      	b.n	b8558 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b8544:	2903      	cmp	r1, #3
   b8546:	d003      	beq.n	b8550 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b8548:	2905      	cmp	r1, #5
   b854a:	d103      	bne.n	b8554 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b854c:	2101      	movs	r1, #1
   b854e:	e7f6      	b.n	b853e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b8550:	2102      	movs	r1, #2
   b8552:	e7f4      	b.n	b853e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b8554:	2907      	cmp	r1, #7
   b8556:	d01b      	beq.n	b8590 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b8558:	200a      	movs	r0, #10
   b855a:	f005 ff95 	bl	be488 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b855e:	2501      	movs	r5, #1
   b8560:	2300      	movs	r3, #0
   b8562:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8566:	2320      	movs	r3, #32
   b8568:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b856c:	9300      	str	r3, [sp, #0]
   b856e:	9501      	str	r5, [sp, #4]
   b8570:	462b      	mov	r3, r5
   b8572:	a806      	add	r0, sp, #24
   b8574:	f005 f862 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b8578:	462b      	mov	r3, r5
   b857a:	2204      	movs	r2, #4
   b857c:	a906      	add	r1, sp, #24
   b857e:	a804      	add	r0, sp, #16
   b8580:	f005 f938 	bl	bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b8584:	4621      	mov	r1, r4
   b8586:	a804      	add	r0, sp, #16
   b8588:	f005 f946 	bl	bd818 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b858c:	b00c      	add	sp, #48	; 0x30
   b858e:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b8590:	2100      	movs	r1, #0
   b8592:	e7d4      	b.n	b853e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b8594 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b8594:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b8596:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b8598:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b859a:	2500      	movs	r5, #0
   b859c:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b85a0:	2222      	movs	r2, #34	; 0x22
   b85a2:	9301      	str	r3, [sp, #4]
   b85a4:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b85a6:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b85a8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b85ac:	a806      	add	r0, sp, #24
   b85ae:	f005 f845 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b85b2:	462b      	mov	r3, r5
   b85b4:	2202      	movs	r2, #2
   b85b6:	a906      	add	r1, sp, #24
   b85b8:	a804      	add	r0, sp, #16
   b85ba:	f005 f91b 	bl	bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b85be:	4621      	mov	r1, r4
   b85c0:	a804      	add	r0, sp, #16
   b85c2:	f005 f929 	bl	bd818 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b85c6:	b00d      	add	sp, #52	; 0x34
   b85c8:	bd30      	pop	{r4, r5, pc}

000b85ca <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b85ca:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b85cc:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b85ce:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b85d0:	2200      	movs	r2, #0
   b85d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b85d6:	2221      	movs	r2, #33	; 0x21
   b85d8:	9301      	str	r3, [sp, #4]
   b85da:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b85dc:	460d      	mov	r5, r1
   b85de:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b85e0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b85e4:	a806      	add	r0, sp, #24
   b85e6:	f005 f829 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b85ea:	2305      	movs	r3, #5
   b85ec:	2202      	movs	r2, #2
   b85ee:	a906      	add	r1, sp, #24
   b85f0:	a804      	add	r0, sp, #16
   b85f2:	f005 f8ff 	bl	bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b85f6:	4629      	mov	r1, r5
   b85f8:	a804      	add	r0, sp, #16
   b85fa:	f005 f90d 	bl	bd818 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b85fe:	7625      	strb	r5, [r4, #24]
}
   b8600:	b00d      	add	sp, #52	; 0x34
   b8602:	bd30      	pop	{r4, r5, pc}

000b8604 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b8604:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8606:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b8608:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b860a:	2200      	movs	r2, #0
   b860c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8610:	2221      	movs	r2, #33	; 0x21
   b8612:	9301      	str	r3, [sp, #4]
   b8614:	9200      	str	r2, [sp, #0]
   b8616:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b861a:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b861c:	a806      	add	r0, sp, #24
   b861e:	f005 f80d 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b8622:	2305      	movs	r3, #5
   b8624:	2202      	movs	r2, #2
   b8626:	a906      	add	r1, sp, #24
   b8628:	a804      	add	r0, sp, #16
   b862a:	f005 f8e3 	bl	bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b862e:	a804      	add	r0, sp, #16
   b8630:	f005 f8e5 	bl	bd7fe <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b8634:	b2c0      	uxtb	r0, r0
   b8636:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b8638:	b00c      	add	sp, #48	; 0x30
   b863a:	bd10      	pop	{r4, pc}

000b863c <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b863c:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b863e:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b8640:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8642:	2501      	movs	r5, #1
   b8644:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8648:	2321      	movs	r3, #33	; 0x21
   b864a:	9300      	str	r3, [sp, #0]
   b864c:	9501      	str	r5, [sp, #4]
   b864e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b8652:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8654:	462b      	mov	r3, r5
   b8656:	a806      	add	r0, sp, #24
   b8658:	f004 fff0 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b865c:	2302      	movs	r3, #2
   b865e:	462a      	mov	r2, r5
   b8660:	a906      	add	r1, sp, #24
   b8662:	a804      	add	r0, sp, #16
   b8664:	f005 f8c6 	bl	bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b8668:	4629      	mov	r1, r5
   b866a:	a804      	add	r0, sp, #16
   b866c:	f005 f8d4 	bl	bd818 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b8670:	200a      	movs	r0, #10
   b8672:	f005 ff09 	bl	be488 <delay>
  getRange();
   b8676:	4620      	mov	r0, r4
   b8678:	f7ff ffc4 	bl	b8604 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b867c:	b00d      	add	sp, #52	; 0x34
   b867e:	bd30      	pop	{r4, r5, pc}

000b8680 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b8680:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b8682:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b8684:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b8686:	2500      	movs	r5, #0
   b8688:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b868c:	230f      	movs	r3, #15
   b868e:	9300      	str	r3, [sp, #0]
   b8690:	9601      	str	r6, [sp, #4]
   b8692:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8696:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b8698:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b869a:	a804      	add	r0, sp, #16
   b869c:	f004 ffce 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b86a0:	a804      	add	r0, sp, #16
   b86a2:	f005 f88b 	bl	bd7bc <_ZN23Adafruit_BusIO_Register4readEv>
   b86a6:	283d      	cmp	r0, #61	; 0x3d
   b86a8:	d115      	bne.n	b86d6 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b86aa:	4620      	mov	r0, r4
   b86ac:	f7ff ffc6 	bl	b863c <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b86b0:	2103      	movs	r1, #3
   b86b2:	4620      	mov	r0, r4
   b86b4:	f7ff ff0a 	bl	b84cc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b86b8:	4631      	mov	r1, r6
   b86ba:	4620      	mov	r0, r4
   b86bc:	f7ff ff38 	bl	b8530 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b86c0:	4629      	mov	r1, r5
   b86c2:	4620      	mov	r0, r4
   b86c4:	f7ff ff81 	bl	b85ca <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b86c8:	4620      	mov	r0, r4
   b86ca:	4629      	mov	r1, r5
   b86cc:	f7ff ff62 	bl	b8594 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b86d0:	4630      	mov	r0, r6
}
   b86d2:	b00a      	add	sp, #40	; 0x28
   b86d4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b86d6:	4628      	mov	r0, r5
   b86d8:	e7fb      	b.n	b86d2 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b86da <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b86da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b86dc:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b86de:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b86e0:	b95b      	cbnz	r3, b86fa <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b86e2:	2010      	movs	r0, #16
   b86e4:	e9cd 1200 	strd	r1, r2, [sp]
   b86e8:	f7fb fcd5 	bl	b4096 <_Znwj>
   b86ec:	4605      	mov	r5, r0
   b86ee:	b118      	cbz	r0, b86f8 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b86f0:	e9dd 1200 	ldrd	r1, r2, [sp]
   b86f4:	f005 f8a9 	bl	bd84a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b86f8:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b86fa:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b86fc:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b86fe:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b8700:	2101      	movs	r1, #1
   b8702:	f005 f8be 	bl	bd882 <_ZN18Adafruit_I2CDevice5beginEb>
   b8706:	b128      	cbz	r0, b8714 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b8708:	4620      	mov	r0, r4
}
   b870a:	b003      	add	sp, #12
   b870c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b8710:	f7ff bfb6 	b.w	b8680 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b8714:	b003      	add	sp, #12
   b8716:	bd30      	pop	{r4, r5, pc}

000b8718 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b8718:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b871a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b871c:	b08b      	sub	sp, #44	; 0x2c
   b871e:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b8720:	2500      	movs	r5, #0
   b8722:	2232      	movs	r2, #50	; 0x32
   b8724:	2102      	movs	r1, #2
   b8726:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b872a:	e9cd 2100 	strd	r2, r1, [sp]
   b872e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8732:	a804      	add	r0, sp, #16
   b8734:	f004 ff82 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b8738:	462a      	mov	r2, r5
   b873a:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b873e:	a804      	add	r0, sp, #16
   b8740:	f004 ffdc 	bl	bd6fc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8744:	b00b      	add	sp, #44	; 0x2c
   b8746:	bd30      	pop	{r4, r5, pc}

000b8748 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b8748:	b530      	push	{r4, r5, lr}
   b874a:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b874c:	2500      	movs	r5, #0
  value |= latch << 1;
   b874e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b8752:	0064      	lsls	r4, r4, #1
   b8754:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b8758:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b875c:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b8760:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b8764:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b8768:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b876c:	2301      	movs	r3, #1
  value |= latch << 1;
   b876e:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8772:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b8776:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b8778:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b877a:	2230      	movs	r2, #48	; 0x30
   b877c:	9301      	str	r3, [sp, #4]
   b877e:	9200      	str	r2, [sp, #0]
   b8780:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8784:	a804      	add	r0, sp, #16
   b8786:	f004 ff59 	bl	bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b878a:	462a      	mov	r2, r5
   b878c:	4621      	mov	r1, r4
   b878e:	a804      	add	r0, sp, #16
   b8790:	f004 ffb4 	bl	bd6fc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8794:	b00b      	add	sp, #44	; 0x2c
   b8796:	bd30      	pop	{r4, r5, pc}

000b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b8798:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b879a:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b879c:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b879e:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b87a0:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b87a2:	041b      	lsls	r3, r3, #16
   b87a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b87a8:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b87aa:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b87ac:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b87b0:	bd10      	pop	{r4, pc}

000b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b87b2:	1843      	adds	r3, r0, r1
   b87b4:	5c40      	ldrb	r0, [r0, r1]
   b87b6:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b87b8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b87bc:	4770      	bx	lr

000b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b87be:	b410      	push	{r4}
{
    if (base == 0) {
   b87c0:	b92a      	cbnz	r2, b87ce <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b87c2:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b87c4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b87c8:	6892      	ldr	r2, [r2, #8]
   b87ca:	b2c9      	uxtb	r1, r1
   b87cc:	4710      	bx	r2
}
   b87ce:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b87d2:	b2d2      	uxtb	r2, r2
   b87d4:	f008 bef7 	b.w	c15c6 <_ZN5Print11printNumberEmh>

000b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b87d8:	b912      	cbnz	r2, b87e0 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b87da:	6803      	ldr	r3, [r0, #0]
   b87dc:	689b      	ldr	r3, [r3, #8]
   b87de:	4718      	bx	r3
        return printNumber(val, base) + t;
   b87e0:	b2d2      	uxtb	r2, r2
   b87e2:	f008 bef0 	b.w	c15c6 <_ZN5Print11printNumberEmh>

000b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b87e6:	b510      	push	{r4, lr}
   b87e8:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b87ea:	f7ff fff5 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b87ee:	4620      	mov	r0, r4
    }
   b87f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b87f4:	f008 becf 	b.w	c1596 <_ZN5Print7printlnEv>

000b87f8 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b87f8:	6803      	ldr	r3, [r0, #0]
   b87fa:	b2c9      	uxtb	r1, r1
   b87fc:	689b      	ldr	r3, [r3, #8]
   b87fe:	4718      	bx	r3

000b8800 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b8800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b8804:	8002      	strh	r2, [r0, #0]
   b8806:	2142      	movs	r1, #66	; 0x42
   b8808:	2200      	movs	r2, #0
   b880a:	b510      	push	{r4, lr}
   b880c:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8810:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b8814:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b8818:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b881c:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b8820:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b8824:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b8828:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b882c:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b8830:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b8834:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b8838:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b883c:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b8840:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8844:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b8848:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b884c:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b8850:	2180      	movs	r1, #128	; 0x80
   b8852:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b8856:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b885a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b885e:	4925      	ldr	r1, [pc, #148]	; (b88f4 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b8860:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b8864:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b8868:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b886c:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b8870:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b8874:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b8878:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b887c:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b8880:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b8884:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b8888:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b888c:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b8890:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b8894:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b8898:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b889c:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b88a0:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b88a4:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b88a8:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b88ac:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b88b0:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b88b4:	4910      	ldr	r1, [pc, #64]	; (b88f8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b88b6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b88ba:	f640 1164 	movw	r1, #2404	; 0x964
   b88be:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b88c2:	2158      	movs	r1, #88	; 0x58
   b88c4:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b88c8:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b88ca:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b88ce:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b88d2:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b88d6:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b88da:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b88de:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b88e2:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b88e6:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b88ea:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b88ee:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b88f2:	bd10      	pop	{r4, pc}
   b88f4:	02020000 	.word	0x02020000
   b88f8:	64640200 	.word	0x64640200

000b88fc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b88fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b88fe:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b8900:	460d      	mov	r5, r1
   b8902:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b8906:	b9a9      	cbnz	r1, b8934 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b8908:	b1a8      	cbz	r0, b8936 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b890a:	f7fb fbc8 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b890e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b8912:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8916:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b891a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b891e:	b913      	cbnz	r3, b8926 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b8920:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8924:	b123      	cbz	r3, b8930 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b8926:	4920      	ldr	r1, [pc, #128]	; (b89a8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b8928:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b892c:	f008 fe49 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b8930:	2001      	movs	r0, #1
   b8932:	e011      	b.n	b8958 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b8934:	b9b8      	cbnz	r0, b8966 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b8936:	4628      	mov	r0, r5
   b8938:	f7fb fbaf 	bl	b409a <_Znaj>
   b893c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8940:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b8944:	bb60      	cbnz	r0, b89a0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8946:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b894a:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b894e:	b923      	cbnz	r3, b895a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b8950:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8954:	b90b      	cbnz	r3, b895a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b8956:	2000      	movs	r0, #0
}
   b8958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b895a:	4914      	ldr	r1, [pc, #80]	; (b89ac <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b895c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8960:	f008 fe2f 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b8964:	e7f7      	b.n	b8956 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b8966:	4608      	mov	r0, r1
   b8968:	f7fb fb97 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b896c:	4606      	mov	r6, r0
   b896e:	b940      	cbnz	r0, b8982 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8970:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8974:	b91b      	cbnz	r3, b897e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b8976:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b897a:	2b00      	cmp	r3, #0
   b897c:	d0eb      	beq.n	b8956 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b897e:	490c      	ldr	r1, [pc, #48]	; (b89b0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b8980:	e7ec      	b.n	b895c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b8982:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b8986:	42aa      	cmp	r2, r5
   b8988:	bf28      	it	cs
   b898a:	462a      	movcs	r2, r5
   b898c:	4639      	mov	r1, r7
   b898e:	f00b fe57 	bl	c4640 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b8992:	4638      	mov	r0, r7
   b8994:	f7fb fb83 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b8998:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b899c:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b89a0:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b89a4:	e7c4      	b.n	b8930 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b89a6:	bf00      	nop
   b89a8:	000c7000 	.word	0x000c7000
   b89ac:	000c702b 	.word	0x000c702b
   b89b0:	000c7056 	.word	0x000c7056

000b89b4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b89b4:	290d      	cmp	r1, #13
   b89b6:	f000 80cd 	beq.w	b8b54 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b89ba:	d809      	bhi.n	b89d0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b89bc:	2902      	cmp	r1, #2
   b89be:	f000 80a7 	beq.w	b8b10 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b89c2:	2906      	cmp	r1, #6
   b89c4:	f000 80be 	beq.w	b8b44 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b89c8:	2901      	cmp	r1, #1
   b89ca:	d016      	beq.n	b89fa <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b89cc:	2000      	movs	r0, #0
}
   b89ce:	4770      	bx	lr
  switch (Class)
   b89d0:	2913      	cmp	r1, #19
   b89d2:	f000 80d4 	beq.w	b8b7e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b89d6:	2928      	cmp	r1, #40	; 0x28
   b89d8:	f000 80dc 	beq.w	b8b94 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b89dc:	2910      	cmp	r1, #16
   b89de:	d1f5      	bne.n	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b89e0:	2a10      	cmp	r2, #16
   b89e2:	f000 80c9 	beq.w	b8b78 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b89e6:	f200 80ba 	bhi.w	b8b5e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b89ea:	2a02      	cmp	r2, #2
   b89ec:	f000 80c1 	beq.w	b8b72 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b89f0:	2a03      	cmp	r2, #3
   b89f2:	d1eb      	bne.n	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b89f4:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b89f8:	e066      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b89fa:	2a26      	cmp	r2, #38	; 0x26
   b89fc:	d854      	bhi.n	b8aa8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b89fe:	2a00      	cmp	r2, #0
   b8a00:	d0e4      	beq.n	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8a02:	3a01      	subs	r2, #1
   b8a04:	2a25      	cmp	r2, #37	; 0x25
   b8a06:	d8e1      	bhi.n	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8a08:	a301      	add	r3, pc, #4	; (adr r3, b8a10 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b8a0a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b8a0e:	bf00      	nop
   b8a10:	000b8ac7 	.word	0x000b8ac7
   b8a14:	000b89cd 	.word	0x000b89cd
   b8a18:	000b8ad1 	.word	0x000b8ad1
   b8a1c:	000b8ad5 	.word	0x000b8ad5
   b8a20:	000b8ad9 	.word	0x000b8ad9
   b8a24:	000b89cd 	.word	0x000b89cd
   b8a28:	000b8add 	.word	0x000b8add
   b8a2c:	000b89cd 	.word	0x000b89cd
   b8a30:	000b8ae1 	.word	0x000b8ae1
   b8a34:	000b89cd 	.word	0x000b89cd
   b8a38:	000b89cd 	.word	0x000b89cd
   b8a3c:	000b89cd 	.word	0x000b89cd
   b8a40:	000b89cd 	.word	0x000b89cd
   b8a44:	000b89cd 	.word	0x000b89cd
   b8a48:	000b89cd 	.word	0x000b89cd
   b8a4c:	000b89cd 	.word	0x000b89cd
   b8a50:	000b8ae5 	.word	0x000b8ae5
   b8a54:	000b8ae9 	.word	0x000b8ae9
   b8a58:	000b8aed 	.word	0x000b8aed
   b8a5c:	000b8af1 	.word	0x000b8af1
   b8a60:	000b89cd 	.word	0x000b89cd
   b8a64:	000b89cd 	.word	0x000b89cd
   b8a68:	000b8af5 	.word	0x000b8af5
   b8a6c:	000b89cd 	.word	0x000b89cd
   b8a70:	000b89cd 	.word	0x000b89cd
   b8a74:	000b89cd 	.word	0x000b89cd
   b8a78:	000b89cd 	.word	0x000b89cd
   b8a7c:	000b89cd 	.word	0x000b89cd
   b8a80:	000b89cd 	.word	0x000b89cd
   b8a84:	000b89cd 	.word	0x000b89cd
   b8a88:	000b89cd 	.word	0x000b89cd
   b8a8c:	000b89cd 	.word	0x000b89cd
   b8a90:	000b8af9 	.word	0x000b8af9
   b8a94:	000b8afd 	.word	0x000b8afd
   b8a98:	000b89cd 	.word	0x000b89cd
   b8a9c:	000b89cd 	.word	0x000b89cd
   b8aa0:	000b89cd 	.word	0x000b89cd
   b8aa4:	000b8b01 	.word	0x000b8b01
   b8aa8:	2a3c      	cmp	r2, #60	; 0x3c
   b8aaa:	d02d      	beq.n	b8b08 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b8aac:	d805      	bhi.n	b8aba <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b8aae:	2a35      	cmp	r2, #53	; 0x35
   b8ab0:	d028      	beq.n	b8b04 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b8ab2:	2a3b      	cmp	r2, #59	; 0x3b
   b8ab4:	d18a      	bne.n	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b8ab6:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b8ab8:	e006      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8aba:	2a60      	cmp	r2, #96	; 0x60
   b8abc:	d026      	beq.n	b8b0c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b8abe:	2a61      	cmp	r2, #97	; 0x61
   b8ac0:	d184      	bne.n	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b8ac2:	6980      	ldr	r0, [r0, #24]
   b8ac4:	e000      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b8ac6:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b8ac8:	3800      	subs	r0, #0
   b8aca:	bf18      	it	ne
   b8acc:	2001      	movne	r0, #1
   b8ace:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b8ad0:	6900      	ldr	r0, [r0, #16]
   b8ad2:	e7f9      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b8ad4:	6940      	ldr	r0, [r0, #20]
   b8ad6:	e7f7      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b8ad8:	69c0      	ldr	r0, [r0, #28]
   b8ada:	e7f5      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b8adc:	6a00      	ldr	r0, [r0, #32]
   b8ade:	e7f3      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b8ae0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8ae2:	e7f1      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b8ae4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8ae6:	e7ef      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b8ae8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b8aea:	e7ed      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b8aec:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b8aee:	e7eb      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b8af0:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b8af2:	e7e9      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b8af4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8af6:	e7e7      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b8af8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8afa:	e7e5      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b8afc:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b8afe:	e7e3      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b8b00:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b8b02:	e7e1      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b8b04:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b8b06:	e7df      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b8b08:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b8b0a:	e7dd      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b8b0c:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b8b0e:	e7db      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8b10:	2a34      	cmp	r2, #52	; 0x34
   b8b12:	d015      	beq.n	b8b40 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b8b14:	d806      	bhi.n	b8b24 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b8b16:	2a13      	cmp	r2, #19
   b8b18:	d00b      	beq.n	b8b32 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b8b1a:	2a15      	cmp	r2, #21
   b8b1c:	f47f af56 	bne.w	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b8b20:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b8b22:	e7d1      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8b24:	2a72      	cmp	r2, #114	; 0x72
   b8b26:	d006      	beq.n	b8b36 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b8b28:	2a73      	cmp	r2, #115	; 0x73
   b8b2a:	f47f af4f 	bne.w	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b8b2e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8b30:	e7ca      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8b32:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8b34:	e7c8      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b8b36:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b8b38:	2b00      	cmp	r3, #0
   b8b3a:	d13b      	bne.n	b8bb4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b8b3c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8b3e:	e7c3      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8b40:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8b42:	e7c1      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8b44:	b122      	cbz	r2, b8b50 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b8b46:	2a08      	cmp	r2, #8
   b8b48:	f47f af40 	bne.w	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8b4c:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8b4e:	e7bb      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8b50:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8b52:	e7b9      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8b54:	2a03      	cmp	r2, #3
   b8b56:	f47f af39 	bne.w	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b8b5a:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8b5c:	e7b4      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8b5e:	2a14      	cmp	r2, #20
   b8b60:	d005      	beq.n	b8b6e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8b62:	2a15      	cmp	r2, #21
   b8b64:	f47f af32 	bne.w	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b8b68:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b8b6c:	e7ac      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b8b6e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8b70:	e7aa      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8b72:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b8b76:	e7a7      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b8b78:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b8b7c:	e7a4      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8b7e:	2a60      	cmp	r2, #96	; 0x60
   b8b80:	d005      	beq.n	b8b8e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8b82:	2a80      	cmp	r2, #128	; 0x80
   b8b84:	f47f af22 	bne.w	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b8b88:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8b8c:	e79c      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8b8e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8b92:	e799      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8b94:	2a01      	cmp	r2, #1
   b8b96:	d007      	beq.n	b8ba8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b8b98:	2a02      	cmp	r2, #2
   b8b9a:	d008      	beq.n	b8bae <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b8b9c:	2a00      	cmp	r2, #0
   b8b9e:	f47f af15 	bne.w	b89cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8ba2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b8ba6:	e78f      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b8ba8:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b8bac:	e78c      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b8bae:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8bb2:	e789      	b.n	b8ac8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8bb4:	2001      	movs	r0, #1
   b8bb6:	4770      	bx	lr

000b8bb8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b8bb8:	290d      	cmp	r1, #13
   b8bba:	d035      	beq.n	b8c28 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b8bbc:	d807      	bhi.n	b8bce <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b8bbe:	2902      	cmp	r1, #2
   b8bc0:	d019      	beq.n	b8bf6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8bc2:	2906      	cmp	r1, #6
   b8bc4:	d02a      	beq.n	b8c1c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b8bc6:	2901      	cmp	r1, #1
   b8bc8:	d00d      	beq.n	b8be6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b8bca:	2000      	movs	r0, #0
}
   b8bcc:	4770      	bx	lr
  switch (Class)
   b8bce:	2913      	cmp	r1, #19
   b8bd0:	d02f      	beq.n	b8c32 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b8bd2:	2928      	cmp	r1, #40	; 0x28
   b8bd4:	d034      	beq.n	b8c40 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b8bd6:	2910      	cmp	r1, #16
   b8bd8:	d1f7      	bne.n	b8bca <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b8bda:	3a02      	subs	r2, #2
   b8bdc:	b2d2      	uxtb	r2, r2
   b8bde:	2a13      	cmp	r2, #19
   b8be0:	d8f3      	bhi.n	b8bca <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8be2:	4b1f      	ldr	r3, [pc, #124]	; (b8c60 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b8be4:	e004      	b.n	b8bf0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b8be6:	3a01      	subs	r2, #1
   b8be8:	b2d2      	uxtb	r2, r2
   b8bea:	2a60      	cmp	r2, #96	; 0x60
   b8bec:	d8ed      	bhi.n	b8bca <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8bee:	4b1d      	ldr	r3, [pc, #116]	; (b8c64 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b8bf0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b8bf4:	4770      	bx	lr
    switch (ID)
   b8bf6:	2a34      	cmp	r2, #52	; 0x34
   b8bf8:	d027      	beq.n	b8c4a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b8bfa:	d807      	bhi.n	b8c0c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b8bfc:	2a13      	cmp	r2, #19
   b8bfe:	d026      	beq.n	b8c4e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b8c00:	2a15      	cmp	r2, #21
   b8c02:	bf14      	ite	ne
   b8c04:	2000      	movne	r0, #0
   b8c06:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b8c0a:	4770      	bx	lr
   b8c0c:	2a72      	cmp	r2, #114	; 0x72
   b8c0e:	d020      	beq.n	b8c52 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b8c10:	2a73      	cmp	r2, #115	; 0x73
   b8c12:	bf14      	ite	ne
   b8c14:	2000      	movne	r0, #0
   b8c16:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b8c1a:	4770      	bx	lr
    switch (ID)
   b8c1c:	b1e2      	cbz	r2, b8c58 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b8c1e:	2a08      	cmp	r2, #8
   b8c20:	bf14      	ite	ne
   b8c22:	2000      	movne	r0, #0
   b8c24:	2006      	moveq	r0, #6
   b8c26:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b8c28:	2a03      	cmp	r2, #3
   b8c2a:	bf14      	ite	ne
   b8c2c:	2000      	movne	r0, #0
   b8c2e:	201c      	moveq	r0, #28
   b8c30:	4770      	bx	lr
    switch (ID)
   b8c32:	2a60      	cmp	r2, #96	; 0x60
   b8c34:	d012      	beq.n	b8c5c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b8c36:	2a80      	cmp	r2, #128	; 0x80
   b8c38:	bf14      	ite	ne
   b8c3a:	2000      	movne	r0, #0
   b8c3c:	20a4      	moveq	r0, #164	; 0xa4
   b8c3e:	4770      	bx	lr
    switch (ID)
   b8c40:	2a02      	cmp	r2, #2
   b8c42:	d8c2      	bhi.n	b8bca <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8c44:	4b08      	ldr	r3, [pc, #32]	; (b8c68 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b8c46:	5c98      	ldrb	r0, [r3, r2]
   b8c48:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b8c4a:	200c      	movs	r0, #12
   b8c4c:	4770      	bx	lr
   b8c4e:	2048      	movs	r0, #72	; 0x48
   b8c50:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8c52:	f44f 7004 	mov.w	r0, #528	; 0x210
   b8c56:	4770      	bx	lr
   b8c58:	2014      	movs	r0, #20
   b8c5a:	4770      	bx	lr
   b8c5c:	2008      	movs	r0, #8
   b8c5e:	4770      	bx	lr
   b8c60:	000c7d16 	.word	0x000c7d16
   b8c64:	000c7c54 	.word	0x000c7c54
   b8c68:	000c7d3e 	.word	0x000c7d3e

000b8c6c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b8c6c:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b8c6e:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8c72:	07ca      	lsls	r2, r1, #31
   b8c74:	d415      	bmi.n	b8ca2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b8c76:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8c7a:	4b59      	ldr	r3, [pc, #356]	; (b8de0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b8c7c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8c80:	429a      	cmp	r2, r3
   b8c82:	d101      	bne.n	b8c88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8c84:	078b      	lsls	r3, r1, #30
   b8c86:	d40c      	bmi.n	b8ca2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8c88:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8c8c:	2b47      	cmp	r3, #71	; 0x47
   b8c8e:	d174      	bne.n	b8d7a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8c90:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8c94:	f245 1441 	movw	r4, #20801	; 0x5141
   b8c98:	42a3      	cmp	r3, r4
   b8c9a:	d104      	bne.n	b8ca6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b8c9c:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8ca0:	d06b      	beq.n	b8d7a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8ca2:	2001      	movs	r0, #1
   b8ca4:	e070      	b.n	b8d88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b8ca6:	f245 1442 	movw	r4, #20802	; 0x5142
   b8caa:	42a3      	cmp	r3, r4
   b8cac:	d102      	bne.n	b8cb4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b8cae:	f011 0f08 	tst.w	r1, #8
   b8cb2:	e7f5      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8cb4:	f245 3442 	movw	r4, #21314	; 0x5342
   b8cb8:	42a3      	cmp	r3, r4
   b8cba:	d102      	bne.n	b8cc2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b8cbc:	f011 0f10 	tst.w	r1, #16
   b8cc0:	e7ee      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8cc2:	f244 1447 	movw	r4, #16711	; 0x4147
   b8cc6:	42a3      	cmp	r3, r4
   b8cc8:	d102      	bne.n	b8cd0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b8cca:	f011 0f20 	tst.w	r1, #32
   b8cce:	e7e7      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b8cd0:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8cd4:	42a3      	cmp	r3, r4
   b8cd6:	d102      	bne.n	b8cde <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b8cd8:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8cdc:	e7e0      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b8cde:	f245 144c 	movw	r4, #20812	; 0x514c
   b8ce2:	42a3      	cmp	r3, r4
   b8ce4:	d102      	bne.n	b8cec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b8ce6:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8cea:	e7d9      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b8cec:	f245 114e 	movw	r1, #20814	; 0x514e
   b8cf0:	428b      	cmp	r3, r1
   b8cf2:	d104      	bne.n	b8cfe <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b8cf4:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8cf8:	f013 0f01 	tst.w	r3, #1
   b8cfc:	e7d0      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b8cfe:	f245 314e 	movw	r1, #21326	; 0x534e
   b8d02:	428b      	cmp	r3, r1
   b8d04:	d104      	bne.n	b8d10 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b8d06:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8d0a:	f013 0f02 	tst.w	r3, #2
   b8d0e:	e7c7      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b8d10:	f245 1150 	movw	r1, #20816	; 0x5150
   b8d14:	428b      	cmp	r3, r1
   b8d16:	d104      	bne.n	b8d22 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b8d18:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8d1c:	f013 0f04 	tst.w	r3, #4
   b8d20:	e7be      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8d22:	f245 1151 	movw	r1, #20817	; 0x5151
   b8d26:	428b      	cmp	r3, r1
   b8d28:	d104      	bne.n	b8d34 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b8d2a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8d2e:	f013 0f08 	tst.w	r3, #8
   b8d32:	e7b5      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8d34:	f245 3152 	movw	r1, #21330	; 0x5352
   b8d38:	428b      	cmp	r3, r1
   b8d3a:	d104      	bne.n	b8d46 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8d3c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8d40:	f013 0f10 	tst.w	r3, #16
   b8d44:	e7ac      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b8d46:	f244 1153 	movw	r1, #16723	; 0x4153
   b8d4a:	428b      	cmp	r3, r1
   b8d4c:	d104      	bne.n	b8d58 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8d4e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8d52:	f013 0f20 	tst.w	r3, #32
   b8d56:	e7a3      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8d58:	f245 4153 	movw	r1, #21587	; 0x5453
   b8d5c:	428b      	cmp	r3, r1
   b8d5e:	d104      	bne.n	b8d6a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8d60:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8d64:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8d68:	e79a      	b.n	b8ca0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b8d6a:	f245 6153 	movw	r1, #22099	; 0x5653
   b8d6e:	428b      	cmp	r3, r1
   b8d70:	d103      	bne.n	b8d7a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8d72:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b8d76:	2b00      	cmp	r3, #0
   b8d78:	db93      	blt.n	b8ca2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b8d7a:	4b1a      	ldr	r3, [pc, #104]	; (b8de4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8d7c:	429a      	cmp	r2, r3
   b8d7e:	d104      	bne.n	b8d8a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8d80:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d84:	f000 0001 	and.w	r0, r0, #1
}
   b8d88:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b8d8a:	4b17      	ldr	r3, [pc, #92]	; (b8de8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8d8c:	429a      	cmp	r2, r3
   b8d8e:	d104      	bne.n	b8d9a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8d90:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8d94:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8d98:	e7f6      	b.n	b8d88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b8d9a:	4b14      	ldr	r3, [pc, #80]	; (b8dec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8d9c:	429a      	cmp	r2, r3
   b8d9e:	d104      	bne.n	b8daa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8da0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8da4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8da8:	e7ee      	b.n	b8d88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b8daa:	4b11      	ldr	r3, [pc, #68]	; (b8df0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8dac:	429a      	cmp	r2, r3
   b8dae:	d104      	bne.n	b8dba <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8db0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8db4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8db8:	e7e6      	b.n	b8d88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b8dba:	4b0e      	ldr	r3, [pc, #56]	; (b8df4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b8dbc:	429a      	cmp	r2, r3
   b8dbe:	d104      	bne.n	b8dca <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8dc0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8dc4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8dc8:	e7de      	b.n	b8d88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b8dca:	4b0b      	ldr	r3, [pc, #44]	; (b8df8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b8dcc:	429a      	cmp	r2, r3
   b8dce:	d104      	bne.n	b8dda <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b8dd0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8dd4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8dd8:	e7d6      	b.n	b8d88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b8dda:	2000      	movs	r0, #0
   b8ddc:	e7d4      	b.n	b8d88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b8dde:	bf00      	nop
   b8de0:	4d544400 	.word	0x4d544400
   b8de4:	4d4c5200 	.word	0x4d4c5200
   b8de8:	434d5200 	.word	0x434d5200
   b8dec:	54585400 	.word	0x54585400
   b8df0:	574c5600 	.word	0x574c5600
   b8df4:	47545600 	.word	0x47545600
   b8df8:	41445a00 	.word	0x41445a00

000b8dfc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8dfc:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8e00:	2b2a      	cmp	r3, #42	; 0x2a
   b8e02:	d157      	bne.n	b8eb4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8e04:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b8e08:	2b47      	cmp	r3, #71	; 0x47
   b8e0a:	d153      	bne.n	b8eb4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8e0c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8e10:	4a29      	ldr	r2, [pc, #164]	; (b8eb8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b8e16:	4293      	cmp	r3, r2
   b8e18:	d011      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b8e1a:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8e1e:	2a47      	cmp	r2, #71	; 0x47
   b8e20:	d11a      	bne.n	b8e58 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8e22:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b8e26:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b8e2a:	3941      	subs	r1, #65	; 0x41
   b8e2c:	b289      	uxth	r1, r1
   b8e2e:	2910      	cmp	r1, #16
   b8e30:	d907      	bls.n	b8e42 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8e32:	f022 0110 	bic.w	r1, r2, #16
   b8e36:	f245 3042 	movw	r0, #21314	; 0x5342
   b8e3a:	4281      	cmp	r1, r0
   b8e3c:	d129      	bne.n	b8e92 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8e3e:	2001      	movs	r0, #1
}
   b8e40:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8e42:	481e      	ldr	r0, [pc, #120]	; (b8ebc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8e44:	fa20 f101 	lsr.w	r1, r0, r1
   b8e48:	07c9      	lsls	r1, r1, #31
   b8e4a:	d4f8      	bmi.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8e4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8e50:	f245 4153 	movw	r1, #21587	; 0x5453
   b8e54:	428a      	cmp	r2, r1
   b8e56:	d0f2      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8e58:	4a19      	ldr	r2, [pc, #100]	; (b8ec0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b8e5a:	4293      	cmp	r3, r2
   b8e5c:	d0ef      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8e5e:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8e62:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8e66:	4293      	cmp	r3, r2
   b8e68:	d0e9      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b8e6a:	4a16      	ldr	r2, [pc, #88]	; (b8ec4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8e6c:	4293      	cmp	r3, r2
   b8e6e:	d0e6      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8e70:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8e74:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8e78:	4293      	cmp	r3, r2
   b8e7a:	d0e0      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8e7c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8e80:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8e84:	4293      	cmp	r3, r2
   b8e86:	d0da      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8e88:	480f      	ldr	r0, [pc, #60]	; (b8ec8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b8e8a:	1a1b      	subs	r3, r3, r0
   b8e8c:	4258      	negs	r0, r3
   b8e8e:	4158      	adcs	r0, r3
   b8e90:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8e92:	f244 1147 	movw	r1, #16711	; 0x4147
   b8e96:	428a      	cmp	r2, r1
   b8e98:	d0d1      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b8e9a:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8e9e:	428a      	cmp	r2, r1
   b8ea0:	d0cd      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8ea2:	f245 314e 	movw	r1, #21326	; 0x534e
   b8ea6:	428a      	cmp	r2, r1
   b8ea8:	d0c9      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b8eaa:	f244 1153 	movw	r1, #16723	; 0x4153
   b8eae:	428a      	cmp	r2, r1
   b8eb0:	d0c5      	beq.n	b8e3e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8eb2:	e7cb      	b.n	b8e4c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8eb4:	2000      	movs	r0, #0
   b8eb6:	4770      	bx	lr
   b8eb8:	4d544400 	.word	0x4d544400
   b8ebc:	0001a803 	.word	0x0001a803
   b8ec0:	4d4c5200 	.word	0x4d4c5200
   b8ec4:	54585400 	.word	0x54585400
   b8ec8:	41445a00 	.word	0x41445a00

000b8ecc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8ecc:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b8ece:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8ed2:	07ca      	lsls	r2, r1, #31
   b8ed4:	d415      	bmi.n	b8f02 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8ed6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8eda:	4b59      	ldr	r3, [pc, #356]	; (b9040 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8edc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8ee0:	429a      	cmp	r2, r3
   b8ee2:	d101      	bne.n	b8ee8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8ee4:	078b      	lsls	r3, r1, #30
   b8ee6:	d40c      	bmi.n	b8f02 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8ee8:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8eec:	2b47      	cmp	r3, #71	; 0x47
   b8eee:	d174      	bne.n	b8fda <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b8ef0:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8ef4:	f245 1441 	movw	r4, #20801	; 0x5141
   b8ef8:	42a3      	cmp	r3, r4
   b8efa:	d104      	bne.n	b8f06 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8efc:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8f00:	d06b      	beq.n	b8fda <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8f02:	2001      	movs	r0, #1
   b8f04:	e070      	b.n	b8fe8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8f06:	f245 1442 	movw	r4, #20802	; 0x5142
   b8f0a:	42a3      	cmp	r3, r4
   b8f0c:	d102      	bne.n	b8f14 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8f0e:	f011 0f08 	tst.w	r1, #8
   b8f12:	e7f5      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8f14:	f245 3442 	movw	r4, #21314	; 0x5342
   b8f18:	42a3      	cmp	r3, r4
   b8f1a:	d102      	bne.n	b8f22 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8f1c:	f011 0f10 	tst.w	r1, #16
   b8f20:	e7ee      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8f22:	f244 1447 	movw	r4, #16711	; 0x4147
   b8f26:	42a3      	cmp	r3, r4
   b8f28:	d102      	bne.n	b8f30 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b8f2a:	f011 0f20 	tst.w	r1, #32
   b8f2e:	e7e7      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8f30:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8f34:	42a3      	cmp	r3, r4
   b8f36:	d102      	bne.n	b8f3e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8f38:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8f3c:	e7e0      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8f3e:	f245 144c 	movw	r4, #20812	; 0x514c
   b8f42:	42a3      	cmp	r3, r4
   b8f44:	d102      	bne.n	b8f4c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8f46:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8f4a:	e7d9      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8f4c:	f245 114e 	movw	r1, #20814	; 0x514e
   b8f50:	428b      	cmp	r3, r1
   b8f52:	d104      	bne.n	b8f5e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8f54:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f58:	f013 0f01 	tst.w	r3, #1
   b8f5c:	e7d0      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8f5e:	f245 314e 	movw	r1, #21326	; 0x534e
   b8f62:	428b      	cmp	r3, r1
   b8f64:	d104      	bne.n	b8f70 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8f66:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f6a:	f013 0f02 	tst.w	r3, #2
   b8f6e:	e7c7      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8f70:	f245 1150 	movw	r1, #20816	; 0x5150
   b8f74:	428b      	cmp	r3, r1
   b8f76:	d104      	bne.n	b8f82 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8f78:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f7c:	f013 0f04 	tst.w	r3, #4
   b8f80:	e7be      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8f82:	f245 1151 	movw	r1, #20817	; 0x5151
   b8f86:	428b      	cmp	r3, r1
   b8f88:	d104      	bne.n	b8f94 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b8f8a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8f8e:	f013 0f08 	tst.w	r3, #8
   b8f92:	e7b5      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8f94:	f245 3152 	movw	r1, #21330	; 0x5352
   b8f98:	428b      	cmp	r3, r1
   b8f9a:	d104      	bne.n	b8fa6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8f9c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8fa0:	f013 0f10 	tst.w	r3, #16
   b8fa4:	e7ac      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8fa6:	f244 1153 	movw	r1, #16723	; 0x4153
   b8faa:	428b      	cmp	r3, r1
   b8fac:	d104      	bne.n	b8fb8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8fae:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8fb2:	f013 0f20 	tst.w	r3, #32
   b8fb6:	e7a3      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8fb8:	f245 4153 	movw	r1, #21587	; 0x5453
   b8fbc:	428b      	cmp	r3, r1
   b8fbe:	d104      	bne.n	b8fca <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8fc0:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8fc4:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8fc8:	e79a      	b.n	b8f00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b8fca:	f245 6153 	movw	r1, #22099	; 0x5653
   b8fce:	428b      	cmp	r3, r1
   b8fd0:	d103      	bne.n	b8fda <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8fd2:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8fd6:	2b00      	cmp	r3, #0
   b8fd8:	db93      	blt.n	b8f02 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b8fda:	4b1a      	ldr	r3, [pc, #104]	; (b9044 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8fdc:	429a      	cmp	r2, r3
   b8fde:	d104      	bne.n	b8fea <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b8fe0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8fe4:	f000 0001 	and.w	r0, r0, #1
}
   b8fe8:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b8fea:	4b17      	ldr	r3, [pc, #92]	; (b9048 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b8fec:	429a      	cmp	r2, r3
   b8fee:	d104      	bne.n	b8ffa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b8ff0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8ff4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8ff8:	e7f6      	b.n	b8fe8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b8ffa:	4b14      	ldr	r3, [pc, #80]	; (b904c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8ffc:	429a      	cmp	r2, r3
   b8ffe:	d104      	bne.n	b900a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b9000:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b9004:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b9008:	e7ee      	b.n	b8fe8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b900a:	4b11      	ldr	r3, [pc, #68]	; (b9050 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b900c:	429a      	cmp	r2, r3
   b900e:	d104      	bne.n	b901a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b9010:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b9014:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b9018:	e7e6      	b.n	b8fe8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b901a:	4b0e      	ldr	r3, [pc, #56]	; (b9054 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b901c:	429a      	cmp	r2, r3
   b901e:	d104      	bne.n	b902a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b9020:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b9024:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b9028:	e7de      	b.n	b8fe8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b902a:	4b0b      	ldr	r3, [pc, #44]	; (b9058 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b902c:	429a      	cmp	r2, r3
   b902e:	d104      	bne.n	b903a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b9030:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b9034:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b9038:	e7d6      	b.n	b8fe8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b903a:	2000      	movs	r0, #0
   b903c:	e7d4      	b.n	b8fe8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b903e:	bf00      	nop
   b9040:	4d544400 	.word	0x4d544400
   b9044:	4d4c5200 	.word	0x4d4c5200
   b9048:	434d5200 	.word	0x434d5200
   b904c:	54585400 	.word	0x54585400
   b9050:	574c5600 	.word	0x574c5600
   b9054:	47545600 	.word	0x47545600
   b9058:	41445a00 	.word	0x41445a00

000b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b905c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b9060:	b110      	cbz	r0, b9068 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b9062:	6803      	ldr	r3, [r0, #0]
   b9064:	689b      	ldr	r3, [r3, #8]
   b9066:	4718      	bx	r3
}
   b9068:	4770      	bx	lr
	...

000b906c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b906c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b906e:	4b3d      	ldr	r3, [pc, #244]	; (b9164 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b9070:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9072:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9076:	6818      	ldr	r0, [r3, #0]
   b9078:	9000      	str	r0, [sp, #0]
   b907a:	889b      	ldrh	r3, [r3, #4]
   b907c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9080:	2205      	movs	r2, #5
   b9082:	4629      	mov	r1, r5
   b9084:	4668      	mov	r0, sp
   b9086:	f00b facb 	bl	c4620 <memcmp>
   b908a:	b928      	cbnz	r0, b9098 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b908c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b9090:	b113      	cbz	r3, b9098 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b9092:	2001      	movs	r0, #1
}
   b9094:	b003      	add	sp, #12
   b9096:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9098:	4933      	ldr	r1, [pc, #204]	; (b9168 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b909a:	4668      	mov	r0, sp
   b909c:	f00b fb5e 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90a0:	2205      	movs	r2, #5
   b90a2:	4629      	mov	r1, r5
   b90a4:	4668      	mov	r0, sp
   b90a6:	f00b fabb 	bl	c4620 <memcmp>
   b90aa:	b918      	cbnz	r0, b90b4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b90ac:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b90b0:	2b00      	cmp	r3, #0
   b90b2:	d1ee      	bne.n	b9092 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b90b4:	492d      	ldr	r1, [pc, #180]	; (b916c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b90b6:	4668      	mov	r0, sp
   b90b8:	f00b fb50 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90bc:	2205      	movs	r2, #5
   b90be:	4629      	mov	r1, r5
   b90c0:	4668      	mov	r0, sp
   b90c2:	f00b faad 	bl	c4620 <memcmp>
   b90c6:	b918      	cbnz	r0, b90d0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b90c8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b90cc:	2b00      	cmp	r3, #0
   b90ce:	d1e0      	bne.n	b9092 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b90d0:	4927      	ldr	r1, [pc, #156]	; (b9170 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b90d2:	4668      	mov	r0, sp
   b90d4:	f00b fb42 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90d8:	2205      	movs	r2, #5
   b90da:	4629      	mov	r1, r5
   b90dc:	4668      	mov	r0, sp
   b90de:	f00b fa9f 	bl	c4620 <memcmp>
   b90e2:	b918      	cbnz	r0, b90ec <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b90e4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b90e8:	2b00      	cmp	r3, #0
   b90ea:	d1d2      	bne.n	b9092 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b90ec:	4921      	ldr	r1, [pc, #132]	; (b9174 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b90ee:	4668      	mov	r0, sp
   b90f0:	f00b fb34 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90f4:	2205      	movs	r2, #5
   b90f6:	4629      	mov	r1, r5
   b90f8:	4668      	mov	r0, sp
   b90fa:	f00b fa91 	bl	c4620 <memcmp>
   b90fe:	b918      	cbnz	r0, b9108 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b9100:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9104:	2b00      	cmp	r3, #0
   b9106:	d1c4      	bne.n	b9092 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b9108:	491b      	ldr	r1, [pc, #108]	; (b9178 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b910a:	4668      	mov	r0, sp
   b910c:	f00b fb26 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9110:	2205      	movs	r2, #5
   b9112:	4629      	mov	r1, r5
   b9114:	4668      	mov	r0, sp
   b9116:	f00b fa83 	bl	c4620 <memcmp>
   b911a:	b918      	cbnz	r0, b9124 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b911c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9120:	2b00      	cmp	r3, #0
   b9122:	d1b6      	bne.n	b9092 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b9124:	4915      	ldr	r1, [pc, #84]	; (b917c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b9126:	4668      	mov	r0, sp
   b9128:	f00b fb18 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b912c:	2205      	movs	r2, #5
   b912e:	4629      	mov	r1, r5
   b9130:	4668      	mov	r0, sp
   b9132:	f00b fa75 	bl	c4620 <memcmp>
   b9136:	b918      	cbnz	r0, b9140 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b9138:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b913c:	2b00      	cmp	r3, #0
   b913e:	d1a8      	bne.n	b9092 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9140:	490f      	ldr	r1, [pc, #60]	; (b9180 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b9142:	4668      	mov	r0, sp
   b9144:	f00b fb0a 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9148:	2205      	movs	r2, #5
   b914a:	4629      	mov	r1, r5
   b914c:	4668      	mov	r0, sp
   b914e:	f00b fa67 	bl	c4620 <memcmp>
   b9152:	b928      	cbnz	r0, b9160 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b9154:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9158:	3800      	subs	r0, #0
   b915a:	bf18      	it	ne
   b915c:	2001      	movne	r0, #1
   b915e:	e799      	b.n	b9094 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b9160:	2000      	movs	r0, #0
   b9162:	e797      	b.n	b9094 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b9164:	000c70ac 	.word	0x000c70ac
   b9168:	000c7082 	.word	0x000c7082
   b916c:	000c7088 	.word	0x000c7088
   b9170:	000c708e 	.word	0x000c708e
   b9174:	000c7094 	.word	0x000c7094
   b9178:	000c709a 	.word	0x000c709a
   b917c:	000c70a0 	.word	0x000c70a0
   b9180:	000c70a6 	.word	0x000c70a6

000b9184 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b9184:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9186:	4b62      	ldr	r3, [pc, #392]	; (b9310 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b9188:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b918a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b918e:	6818      	ldr	r0, [r3, #0]
   b9190:	9000      	str	r0, [sp, #0]
   b9192:	889b      	ldrh	r3, [r3, #4]
   b9194:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9198:	2205      	movs	r2, #5
   b919a:	4629      	mov	r1, r5
   b919c:	4668      	mov	r0, sp
   b919e:	f00b fa3f 	bl	c4620 <memcmp>
   b91a2:	b978      	cbnz	r0, b91c4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b91a4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b91a8:	b163      	cbz	r3, b91c4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b91aa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b91ae:	b14a      	cbz	r2, b91c4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b91b0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b91b4:	2a00      	cmp	r2, #0
   b91b6:	f040 80a3 	bne.w	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b91ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b91be:	2b00      	cmp	r3, #0
   b91c0:	f040 809e 	bne.w	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b91c4:	4953      	ldr	r1, [pc, #332]	; (b9314 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b91c6:	4668      	mov	r0, sp
   b91c8:	f00b fac8 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91cc:	2205      	movs	r2, #5
   b91ce:	4629      	mov	r1, r5
   b91d0:	4668      	mov	r0, sp
   b91d2:	f00b fa25 	bl	c4620 <memcmp>
   b91d6:	b978      	cbnz	r0, b91f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b91d8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b91dc:	b163      	cbz	r3, b91f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b91de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b91e2:	b14a      	cbz	r2, b91f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b91e4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b91e8:	2a00      	cmp	r2, #0
   b91ea:	f040 8089 	bne.w	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b91ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b91f2:	2b00      	cmp	r3, #0
   b91f4:	f040 8084 	bne.w	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b91f8:	4947      	ldr	r1, [pc, #284]	; (b9318 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b91fa:	4668      	mov	r0, sp
   b91fc:	f00b faae 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9200:	2205      	movs	r2, #5
   b9202:	4629      	mov	r1, r5
   b9204:	4668      	mov	r0, sp
   b9206:	f00b fa0b 	bl	c4620 <memcmp>
   b920a:	b968      	cbnz	r0, b9228 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b920c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9210:	b153      	cbz	r3, b9228 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b9212:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b9216:	b13a      	cbz	r2, b9228 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b9218:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b921c:	2a00      	cmp	r2, #0
   b921e:	d16f      	bne.n	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9220:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9224:	2b00      	cmp	r3, #0
   b9226:	d16b      	bne.n	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b9228:	493c      	ldr	r1, [pc, #240]	; (b931c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b922a:	4668      	mov	r0, sp
   b922c:	f00b fa96 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9230:	2205      	movs	r2, #5
   b9232:	4629      	mov	r1, r5
   b9234:	4668      	mov	r0, sp
   b9236:	f00b f9f3 	bl	c4620 <memcmp>
   b923a:	b968      	cbnz	r0, b9258 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b923c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9240:	b153      	cbz	r3, b9258 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b9242:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b9246:	b13a      	cbz	r2, b9258 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b9248:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b924c:	2a00      	cmp	r2, #0
   b924e:	d157      	bne.n	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9250:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9254:	2b00      	cmp	r3, #0
   b9256:	d153      	bne.n	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b9258:	4931      	ldr	r1, [pc, #196]	; (b9320 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b925a:	4668      	mov	r0, sp
   b925c:	f00b fa7e 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9260:	2205      	movs	r2, #5
   b9262:	4629      	mov	r1, r5
   b9264:	4668      	mov	r0, sp
   b9266:	f00b f9db 	bl	c4620 <memcmp>
   b926a:	b968      	cbnz	r0, b9288 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b926c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9270:	b153      	cbz	r3, b9288 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b9272:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b9276:	b13a      	cbz	r2, b9288 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b9278:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b927c:	2a00      	cmp	r2, #0
   b927e:	d13f      	bne.n	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9280:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9284:	2b00      	cmp	r3, #0
   b9286:	d13b      	bne.n	b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b9288:	4926      	ldr	r1, [pc, #152]	; (b9324 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b928a:	4668      	mov	r0, sp
   b928c:	f00b fa66 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9290:	2205      	movs	r2, #5
   b9292:	4629      	mov	r1, r5
   b9294:	4668      	mov	r0, sp
   b9296:	f00b f9c3 	bl	c4620 <memcmp>
   b929a:	b958      	cbnz	r0, b92b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b929c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b92a0:	b143      	cbz	r3, b92b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b92a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b92a6:	b12a      	cbz	r2, b92b4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b92a8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b92ac:	bb42      	cbnz	r2, b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b92ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b92b2:	bb2b      	cbnz	r3, b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b92b4:	491c      	ldr	r1, [pc, #112]	; (b9328 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b92b6:	4668      	mov	r0, sp
   b92b8:	f00b fa50 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92bc:	2205      	movs	r2, #5
   b92be:	4629      	mov	r1, r5
   b92c0:	4668      	mov	r0, sp
   b92c2:	f00b f9ad 	bl	c4620 <memcmp>
   b92c6:	b940      	cbnz	r0, b92da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b92c8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b92cc:	b12b      	cbz	r3, b92da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b92ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b92d0:	b11a      	cbz	r2, b92da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b92d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b92d4:	b9a2      	cbnz	r2, b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b92d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b92d8:	b993      	cbnz	r3, b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b92da:	4914      	ldr	r1, [pc, #80]	; (b932c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b92dc:	4668      	mov	r0, sp
   b92de:	f00b fa3d 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92e2:	2205      	movs	r2, #5
   b92e4:	4629      	mov	r1, r5
   b92e6:	4668      	mov	r0, sp
   b92e8:	f00b f99a 	bl	c4620 <memcmp>
   b92ec:	b958      	cbnz	r0, b9306 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b92ee:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b92f2:	b153      	cbz	r3, b930a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b92f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b92f6:	b120      	cbz	r0, b9302 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b92f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b92fa:	b90a      	cbnz	r2, b9300 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b92fc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b92fe:	b100      	cbz	r0, b9302 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b9300:	2001      	movs	r0, #1
}
   b9302:	b003      	add	sp, #12
   b9304:	bd30      	pop	{r4, r5, pc}
  return false;
   b9306:	2000      	movs	r0, #0
   b9308:	e7fb      	b.n	b9302 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b930a:	4618      	mov	r0, r3
   b930c:	e7f9      	b.n	b9302 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b930e:	bf00      	nop
   b9310:	000c70ac 	.word	0x000c70ac
   b9314:	000c7082 	.word	0x000c7082
   b9318:	000c7088 	.word	0x000c7088
   b931c:	000c708e 	.word	0x000c708e
   b9320:	000c7094 	.word	0x000c7094
   b9324:	000c709a 	.word	0x000c709a
   b9328:	000c70a0 	.word	0x000c70a0
   b932c:	000c70a6 	.word	0x000c70a6

000b9330 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b9330:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9332:	4b38      	ldr	r3, [pc, #224]	; (b9414 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b9334:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9336:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b933a:	6818      	ldr	r0, [r3, #0]
   b933c:	9000      	str	r0, [sp, #0]
   b933e:	889b      	ldrh	r3, [r3, #4]
   b9340:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9344:	2205      	movs	r2, #5
   b9346:	4629      	mov	r1, r5
   b9348:	4668      	mov	r0, sp
   b934a:	f00b f969 	bl	c4620 <memcmp>
   b934e:	b920      	cbnz	r0, b935a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b9350:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b9354:	3001      	adds	r0, #1
}
   b9356:	b003      	add	sp, #12
   b9358:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b935a:	492f      	ldr	r1, [pc, #188]	; (b9418 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b935c:	4668      	mov	r0, sp
   b935e:	f00b f9fd 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9362:	2205      	movs	r2, #5
   b9364:	4629      	mov	r1, r5
   b9366:	4668      	mov	r0, sp
   b9368:	f00b f95a 	bl	c4620 <memcmp>
   b936c:	b910      	cbnz	r0, b9374 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b936e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9372:	e7ef      	b.n	b9354 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9374:	4929      	ldr	r1, [pc, #164]	; (b941c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b9376:	4668      	mov	r0, sp
   b9378:	f00b f9f0 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b937c:	2205      	movs	r2, #5
   b937e:	4629      	mov	r1, r5
   b9380:	4668      	mov	r0, sp
   b9382:	f00b f94d 	bl	c4620 <memcmp>
   b9386:	b910      	cbnz	r0, b938e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b9388:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b938c:	e7e2      	b.n	b9354 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b938e:	4924      	ldr	r1, [pc, #144]	; (b9420 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b9390:	4668      	mov	r0, sp
   b9392:	f00b f9e3 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9396:	2205      	movs	r2, #5
   b9398:	4629      	mov	r1, r5
   b939a:	4668      	mov	r0, sp
   b939c:	f00b f940 	bl	c4620 <memcmp>
   b93a0:	b910      	cbnz	r0, b93a8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b93a2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b93a6:	e7d5      	b.n	b9354 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b93a8:	491e      	ldr	r1, [pc, #120]	; (b9424 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b93aa:	4668      	mov	r0, sp
   b93ac:	f00b f9d6 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93b0:	2205      	movs	r2, #5
   b93b2:	4629      	mov	r1, r5
   b93b4:	4668      	mov	r0, sp
   b93b6:	f00b f933 	bl	c4620 <memcmp>
   b93ba:	b910      	cbnz	r0, b93c2 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b93bc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b93c0:	e7c8      	b.n	b9354 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b93c2:	4919      	ldr	r1, [pc, #100]	; (b9428 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b93c4:	4668      	mov	r0, sp
   b93c6:	f00b f9c9 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93ca:	2205      	movs	r2, #5
   b93cc:	4629      	mov	r1, r5
   b93ce:	4668      	mov	r0, sp
   b93d0:	f00b f926 	bl	c4620 <memcmp>
   b93d4:	b910      	cbnz	r0, b93dc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b93d6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b93da:	e7bb      	b.n	b9354 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b93dc:	4913      	ldr	r1, [pc, #76]	; (b942c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b93de:	4668      	mov	r0, sp
   b93e0:	f00b f9bc 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93e4:	2205      	movs	r2, #5
   b93e6:	4629      	mov	r1, r5
   b93e8:	4668      	mov	r0, sp
   b93ea:	f00b f919 	bl	c4620 <memcmp>
   b93ee:	b910      	cbnz	r0, b93f6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b93f0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b93f4:	e7ae      	b.n	b9354 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b93f6:	490e      	ldr	r1, [pc, #56]	; (b9430 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b93f8:	4668      	mov	r0, sp
   b93fa:	f00b f9af 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93fe:	2205      	movs	r2, #5
   b9400:	4629      	mov	r1, r5
   b9402:	4668      	mov	r0, sp
   b9404:	f00b f90c 	bl	c4620 <memcmp>
   b9408:	b910      	cbnz	r0, b9410 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b940a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b940e:	e7a1      	b.n	b9354 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b9410:	2000      	movs	r0, #0
   b9412:	e7a0      	b.n	b9356 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b9414:	000c70ac 	.word	0x000c70ac
   b9418:	000c7082 	.word	0x000c7082
   b941c:	000c7088 	.word	0x000c7088
   b9420:	000c708e 	.word	0x000c708e
   b9424:	000c7094 	.word	0x000c7094
   b9428:	000c709a 	.word	0x000c709a
   b942c:	000c70a0 	.word	0x000c70a0
   b9430:	000c70a6 	.word	0x000c70a6

000b9434 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b9434:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9436:	4b38      	ldr	r3, [pc, #224]	; (b9518 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b9438:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b943a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b943e:	6818      	ldr	r0, [r3, #0]
   b9440:	9000      	str	r0, [sp, #0]
   b9442:	889b      	ldrh	r3, [r3, #4]
   b9444:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9448:	2205      	movs	r2, #5
   b944a:	4629      	mov	r1, r5
   b944c:	4668      	mov	r0, sp
   b944e:	f00b f8e7 	bl	c4620 <memcmp>
   b9452:	b920      	cbnz	r0, b945e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b9454:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b9458:	3002      	adds	r0, #2
}
   b945a:	b003      	add	sp, #12
   b945c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b945e:	492f      	ldr	r1, [pc, #188]	; (b951c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b9460:	4668      	mov	r0, sp
   b9462:	f00b f97b 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9466:	2205      	movs	r2, #5
   b9468:	4629      	mov	r1, r5
   b946a:	4668      	mov	r0, sp
   b946c:	f00b f8d8 	bl	c4620 <memcmp>
   b9470:	b910      	cbnz	r0, b9478 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b9472:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9476:	e7ef      	b.n	b9458 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9478:	4929      	ldr	r1, [pc, #164]	; (b9520 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b947a:	4668      	mov	r0, sp
   b947c:	f00b f96e 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9480:	2205      	movs	r2, #5
   b9482:	4629      	mov	r1, r5
   b9484:	4668      	mov	r0, sp
   b9486:	f00b f8cb 	bl	c4620 <memcmp>
   b948a:	b910      	cbnz	r0, b9492 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b948c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9490:	e7e2      	b.n	b9458 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9492:	4924      	ldr	r1, [pc, #144]	; (b9524 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b9494:	4668      	mov	r0, sp
   b9496:	f00b f961 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b949a:	2205      	movs	r2, #5
   b949c:	4629      	mov	r1, r5
   b949e:	4668      	mov	r0, sp
   b94a0:	f00b f8be 	bl	c4620 <memcmp>
   b94a4:	b910      	cbnz	r0, b94ac <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b94a6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b94aa:	e7d5      	b.n	b9458 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b94ac:	491e      	ldr	r1, [pc, #120]	; (b9528 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b94ae:	4668      	mov	r0, sp
   b94b0:	f00b f954 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94b4:	2205      	movs	r2, #5
   b94b6:	4629      	mov	r1, r5
   b94b8:	4668      	mov	r0, sp
   b94ba:	f00b f8b1 	bl	c4620 <memcmp>
   b94be:	b910      	cbnz	r0, b94c6 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b94c0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b94c4:	e7c8      	b.n	b9458 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b94c6:	4919      	ldr	r1, [pc, #100]	; (b952c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b94c8:	4668      	mov	r0, sp
   b94ca:	f00b f947 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94ce:	2205      	movs	r2, #5
   b94d0:	4629      	mov	r1, r5
   b94d2:	4668      	mov	r0, sp
   b94d4:	f00b f8a4 	bl	c4620 <memcmp>
   b94d8:	b910      	cbnz	r0, b94e0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b94da:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b94de:	e7bb      	b.n	b9458 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b94e0:	4913      	ldr	r1, [pc, #76]	; (b9530 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b94e2:	4668      	mov	r0, sp
   b94e4:	f00b f93a 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94e8:	2205      	movs	r2, #5
   b94ea:	4629      	mov	r1, r5
   b94ec:	4668      	mov	r0, sp
   b94ee:	f00b f897 	bl	c4620 <memcmp>
   b94f2:	b910      	cbnz	r0, b94fa <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b94f4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b94f8:	e7ae      	b.n	b9458 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b94fa:	490e      	ldr	r1, [pc, #56]	; (b9534 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b94fc:	4668      	mov	r0, sp
   b94fe:	f00b f92d 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9502:	2205      	movs	r2, #5
   b9504:	4629      	mov	r1, r5
   b9506:	4668      	mov	r0, sp
   b9508:	f00b f88a 	bl	c4620 <memcmp>
   b950c:	b910      	cbnz	r0, b9514 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b950e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9512:	e7a1      	b.n	b9458 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b9514:	2000      	movs	r0, #0
   b9516:	e7a0      	b.n	b945a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b9518:	000c70ac 	.word	0x000c70ac
   b951c:	000c7082 	.word	0x000c7082
   b9520:	000c7088 	.word	0x000c7088
   b9524:	000c708e 	.word	0x000c708e
   b9528:	000c7094 	.word	0x000c7094
   b952c:	000c709a 	.word	0x000c709a
   b9530:	000c70a0 	.word	0x000c70a0
   b9534:	000c70a6 	.word	0x000c70a6

000b9538 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b9538:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b953a:	4b39      	ldr	r3, [pc, #228]	; (b9620 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b953c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b953e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9542:	6818      	ldr	r0, [r3, #0]
   b9544:	9000      	str	r0, [sp, #0]
   b9546:	889b      	ldrh	r3, [r3, #4]
   b9548:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b954c:	2205      	movs	r2, #5
   b954e:	4629      	mov	r1, r5
   b9550:	4668      	mov	r0, sp
   b9552:	f00b f865 	bl	c4620 <memcmp>
   b9556:	b920      	cbnz	r0, b9562 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b9558:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b955c:	3066      	adds	r0, #102	; 0x66
}
   b955e:	b003      	add	sp, #12
   b9560:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9562:	4930      	ldr	r1, [pc, #192]	; (b9624 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b9564:	4668      	mov	r0, sp
   b9566:	f00b f8f9 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b956a:	2205      	movs	r2, #5
   b956c:	4629      	mov	r1, r5
   b956e:	4668      	mov	r0, sp
   b9570:	f00b f856 	bl	c4620 <memcmp>
   b9574:	b910      	cbnz	r0, b957c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b9576:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b957a:	e7ef      	b.n	b955c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b957c:	492a      	ldr	r1, [pc, #168]	; (b9628 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b957e:	4668      	mov	r0, sp
   b9580:	f00b f8ec 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9584:	2205      	movs	r2, #5
   b9586:	4629      	mov	r1, r5
   b9588:	4668      	mov	r0, sp
   b958a:	f00b f849 	bl	c4620 <memcmp>
   b958e:	b910      	cbnz	r0, b9596 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b9590:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9594:	e7e2      	b.n	b955c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9596:	4925      	ldr	r1, [pc, #148]	; (b962c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b9598:	4668      	mov	r0, sp
   b959a:	f00b f8df 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b959e:	2205      	movs	r2, #5
   b95a0:	4629      	mov	r1, r5
   b95a2:	4668      	mov	r0, sp
   b95a4:	f00b f83c 	bl	c4620 <memcmp>
   b95a8:	b910      	cbnz	r0, b95b0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b95aa:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b95ae:	e7d5      	b.n	b955c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b95b0:	491f      	ldr	r1, [pc, #124]	; (b9630 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b95b2:	4668      	mov	r0, sp
   b95b4:	f00b f8d2 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95b8:	2205      	movs	r2, #5
   b95ba:	4629      	mov	r1, r5
   b95bc:	4668      	mov	r0, sp
   b95be:	f00b f82f 	bl	c4620 <memcmp>
   b95c2:	b910      	cbnz	r0, b95ca <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b95c4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b95c8:	e7c8      	b.n	b955c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b95ca:	491a      	ldr	r1, [pc, #104]	; (b9634 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b95cc:	4668      	mov	r0, sp
   b95ce:	f00b f8c5 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95d2:	2205      	movs	r2, #5
   b95d4:	4629      	mov	r1, r5
   b95d6:	4668      	mov	r0, sp
   b95d8:	f00b f822 	bl	c4620 <memcmp>
   b95dc:	b910      	cbnz	r0, b95e4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b95de:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b95e2:	e7bb      	b.n	b955c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b95e4:	4914      	ldr	r1, [pc, #80]	; (b9638 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b95e6:	4668      	mov	r0, sp
   b95e8:	f00b f8b8 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95ec:	2205      	movs	r2, #5
   b95ee:	4629      	mov	r1, r5
   b95f0:	4668      	mov	r0, sp
   b95f2:	f00b f815 	bl	c4620 <memcmp>
   b95f6:	b918      	cbnz	r0, b9600 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b95f8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b95fc:	3034      	adds	r0, #52	; 0x34
   b95fe:	e7ae      	b.n	b955e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9600:	490e      	ldr	r1, [pc, #56]	; (b963c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b9602:	4668      	mov	r0, sp
   b9604:	f00b f8aa 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9608:	2205      	movs	r2, #5
   b960a:	4629      	mov	r1, r5
   b960c:	4668      	mov	r0, sp
   b960e:	f00b f807 	bl	c4620 <memcmp>
   b9612:	b910      	cbnz	r0, b961a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b9614:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9618:	e7f0      	b.n	b95fc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b961a:	2000      	movs	r0, #0
   b961c:	e79f      	b.n	b955e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b961e:	bf00      	nop
   b9620:	000c70ac 	.word	0x000c70ac
   b9624:	000c7082 	.word	0x000c7082
   b9628:	000c7088 	.word	0x000c7088
   b962c:	000c708e 	.word	0x000c708e
   b9630:	000c7094 	.word	0x000c7094
   b9634:	000c709a 	.word	0x000c709a
   b9638:	000c70a0 	.word	0x000c70a0
   b963c:	000c70a6 	.word	0x000c70a6

000b9640 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b9640:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9642:	4b39      	ldr	r3, [pc, #228]	; (b9728 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b9644:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9646:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b964a:	6818      	ldr	r0, [r3, #0]
   b964c:	9000      	str	r0, [sp, #0]
   b964e:	889b      	ldrh	r3, [r3, #4]
   b9650:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9654:	2205      	movs	r2, #5
   b9656:	4629      	mov	r1, r5
   b9658:	4668      	mov	r0, sp
   b965a:	f00a ffe1 	bl	c4620 <memcmp>
   b965e:	b920      	cbnz	r0, b966a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b9660:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b9664:	3067      	adds	r0, #103	; 0x67
}
   b9666:	b003      	add	sp, #12
   b9668:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b966a:	4930      	ldr	r1, [pc, #192]	; (b972c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b966c:	4668      	mov	r0, sp
   b966e:	f00b f875 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9672:	2205      	movs	r2, #5
   b9674:	4629      	mov	r1, r5
   b9676:	4668      	mov	r0, sp
   b9678:	f00a ffd2 	bl	c4620 <memcmp>
   b967c:	b910      	cbnz	r0, b9684 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b967e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9682:	e7ef      	b.n	b9664 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9684:	492a      	ldr	r1, [pc, #168]	; (b9730 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b9686:	4668      	mov	r0, sp
   b9688:	f00b f868 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b968c:	2205      	movs	r2, #5
   b968e:	4629      	mov	r1, r5
   b9690:	4668      	mov	r0, sp
   b9692:	f00a ffc5 	bl	c4620 <memcmp>
   b9696:	b910      	cbnz	r0, b969e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b9698:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b969c:	e7e2      	b.n	b9664 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b969e:	4925      	ldr	r1, [pc, #148]	; (b9734 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b96a0:	4668      	mov	r0, sp
   b96a2:	f00b f85b 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96a6:	2205      	movs	r2, #5
   b96a8:	4629      	mov	r1, r5
   b96aa:	4668      	mov	r0, sp
   b96ac:	f00a ffb8 	bl	c4620 <memcmp>
   b96b0:	b910      	cbnz	r0, b96b8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b96b2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b96b6:	e7d5      	b.n	b9664 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b96b8:	491f      	ldr	r1, [pc, #124]	; (b9738 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b96ba:	4668      	mov	r0, sp
   b96bc:	f00b f84e 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96c0:	2205      	movs	r2, #5
   b96c2:	4629      	mov	r1, r5
   b96c4:	4668      	mov	r0, sp
   b96c6:	f00a ffab 	bl	c4620 <memcmp>
   b96ca:	b910      	cbnz	r0, b96d2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b96cc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b96d0:	e7c8      	b.n	b9664 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b96d2:	491a      	ldr	r1, [pc, #104]	; (b973c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b96d4:	4668      	mov	r0, sp
   b96d6:	f00b f841 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96da:	2205      	movs	r2, #5
   b96dc:	4629      	mov	r1, r5
   b96de:	4668      	mov	r0, sp
   b96e0:	f00a ff9e 	bl	c4620 <memcmp>
   b96e4:	b910      	cbnz	r0, b96ec <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b96e6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b96ea:	e7bb      	b.n	b9664 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b96ec:	4914      	ldr	r1, [pc, #80]	; (b9740 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b96ee:	4668      	mov	r0, sp
   b96f0:	f00b f834 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96f4:	2205      	movs	r2, #5
   b96f6:	4629      	mov	r1, r5
   b96f8:	4668      	mov	r0, sp
   b96fa:	f00a ff91 	bl	c4620 <memcmp>
   b96fe:	b918      	cbnz	r0, b9708 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b9700:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9704:	3035      	adds	r0, #53	; 0x35
   b9706:	e7ae      	b.n	b9666 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9708:	490e      	ldr	r1, [pc, #56]	; (b9744 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b970a:	4668      	mov	r0, sp
   b970c:	f00b f826 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9710:	2205      	movs	r2, #5
   b9712:	4629      	mov	r1, r5
   b9714:	4668      	mov	r0, sp
   b9716:	f00a ff83 	bl	c4620 <memcmp>
   b971a:	b910      	cbnz	r0, b9722 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b971c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9720:	e7f0      	b.n	b9704 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b9722:	2000      	movs	r0, #0
   b9724:	e79f      	b.n	b9666 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b9726:	bf00      	nop
   b9728:	000c70ac 	.word	0x000c70ac
   b972c:	000c7082 	.word	0x000c7082
   b9730:	000c7088 	.word	0x000c7088
   b9734:	000c708e 	.word	0x000c708e
   b9738:	000c7094 	.word	0x000c7094
   b973c:	000c709a 	.word	0x000c709a
   b9740:	000c70a0 	.word	0x000c70a0
   b9744:	000c70a6 	.word	0x000c70a6

000b9748 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b9748:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b974a:	4b39      	ldr	r3, [pc, #228]	; (b9830 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b974c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b974e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9752:	6818      	ldr	r0, [r3, #0]
   b9754:	9000      	str	r0, [sp, #0]
   b9756:	889b      	ldrh	r3, [r3, #4]
   b9758:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b975c:	2205      	movs	r2, #5
   b975e:	4629      	mov	r1, r5
   b9760:	4668      	mov	r0, sp
   b9762:	f00a ff5d 	bl	c4620 <memcmp>
   b9766:	b928      	cbnz	r0, b9774 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b9768:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b976c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b9770:	b003      	add	sp, #12
   b9772:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9774:	492f      	ldr	r1, [pc, #188]	; (b9834 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b9776:	4668      	mov	r0, sp
   b9778:	f00a fff0 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b977c:	2205      	movs	r2, #5
   b977e:	4629      	mov	r1, r5
   b9780:	4668      	mov	r0, sp
   b9782:	f00a ff4d 	bl	c4620 <memcmp>
   b9786:	b910      	cbnz	r0, b978e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b9788:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b978c:	e7ee      	b.n	b976c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b978e:	492a      	ldr	r1, [pc, #168]	; (b9838 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b9790:	4668      	mov	r0, sp
   b9792:	f00a ffe3 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9796:	2205      	movs	r2, #5
   b9798:	4629      	mov	r1, r5
   b979a:	4668      	mov	r0, sp
   b979c:	f00a ff40 	bl	c4620 <memcmp>
   b97a0:	b910      	cbnz	r0, b97a8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b97a2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b97a6:	e7e1      	b.n	b976c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b97a8:	4924      	ldr	r1, [pc, #144]	; (b983c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b97aa:	4668      	mov	r0, sp
   b97ac:	f00a ffd6 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97b0:	2205      	movs	r2, #5
   b97b2:	4629      	mov	r1, r5
   b97b4:	4668      	mov	r0, sp
   b97b6:	f00a ff33 	bl	c4620 <memcmp>
   b97ba:	b910      	cbnz	r0, b97c2 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b97bc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b97c0:	e7d4      	b.n	b976c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b97c2:	491f      	ldr	r1, [pc, #124]	; (b9840 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b97c4:	4668      	mov	r0, sp
   b97c6:	f00a ffc9 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97ca:	2205      	movs	r2, #5
   b97cc:	4629      	mov	r1, r5
   b97ce:	4668      	mov	r0, sp
   b97d0:	f00a ff26 	bl	c4620 <memcmp>
   b97d4:	b910      	cbnz	r0, b97dc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b97d6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b97da:	e7c7      	b.n	b976c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b97dc:	4919      	ldr	r1, [pc, #100]	; (b9844 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b97de:	4668      	mov	r0, sp
   b97e0:	f00a ffbc 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97e4:	2205      	movs	r2, #5
   b97e6:	4629      	mov	r1, r5
   b97e8:	4668      	mov	r0, sp
   b97ea:	f00a ff19 	bl	c4620 <memcmp>
   b97ee:	b910      	cbnz	r0, b97f6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b97f0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b97f4:	e7ba      	b.n	b976c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b97f6:	4914      	ldr	r1, [pc, #80]	; (b9848 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b97f8:	4668      	mov	r0, sp
   b97fa:	f00a ffaf 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97fe:	2205      	movs	r2, #5
   b9800:	4629      	mov	r1, r5
   b9802:	4668      	mov	r0, sp
   b9804:	f00a ff0c 	bl	c4620 <memcmp>
   b9808:	b918      	cbnz	r0, b9812 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b980a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b980e:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9810:	e7ae      	b.n	b9770 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9812:	490e      	ldr	r1, [pc, #56]	; (b984c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b9814:	4668      	mov	r0, sp
   b9816:	f00a ffa1 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b981a:	2205      	movs	r2, #5
   b981c:	4629      	mov	r1, r5
   b981e:	4668      	mov	r0, sp
   b9820:	f00a fefe 	bl	c4620 <memcmp>
   b9824:	b910      	cbnz	r0, b982c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b9826:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b982a:	e7f0      	b.n	b980e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b982c:	2000      	movs	r0, #0
   b982e:	e79f      	b.n	b9770 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b9830:	000c70ac 	.word	0x000c70ac
   b9834:	000c7082 	.word	0x000c7082
   b9838:	000c7088 	.word	0x000c7088
   b983c:	000c708e 	.word	0x000c708e
   b9840:	000c7094 	.word	0x000c7094
   b9844:	000c709a 	.word	0x000c709a
   b9848:	000c70a0 	.word	0x000c70a0
   b984c:	000c70a6 	.word	0x000c70a6

000b9850 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b9850:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9852:	4b3a      	ldr	r3, [pc, #232]	; (b993c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b9854:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9856:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b985a:	6818      	ldr	r0, [r3, #0]
   b985c:	9000      	str	r0, [sp, #0]
   b985e:	889b      	ldrh	r3, [r3, #4]
   b9860:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9864:	2205      	movs	r2, #5
   b9866:	4629      	mov	r1, r5
   b9868:	4668      	mov	r0, sp
   b986a:	f00a fed9 	bl	c4620 <memcmp>
   b986e:	b930      	cbnz	r0, b987e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b9870:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b9874:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9878:	3001      	adds	r0, #1
}
   b987a:	b003      	add	sp, #12
   b987c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b987e:	4930      	ldr	r1, [pc, #192]	; (b9940 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b9880:	4668      	mov	r0, sp
   b9882:	f00a ff6b 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9886:	2205      	movs	r2, #5
   b9888:	4629      	mov	r1, r5
   b988a:	4668      	mov	r0, sp
   b988c:	f00a fec8 	bl	c4620 <memcmp>
   b9890:	b910      	cbnz	r0, b9898 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b9892:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9896:	e7ed      	b.n	b9874 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9898:	492a      	ldr	r1, [pc, #168]	; (b9944 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b989a:	4668      	mov	r0, sp
   b989c:	f00a ff5e 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98a0:	2205      	movs	r2, #5
   b98a2:	4629      	mov	r1, r5
   b98a4:	4668      	mov	r0, sp
   b98a6:	f00a febb 	bl	c4620 <memcmp>
   b98aa:	b910      	cbnz	r0, b98b2 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b98ac:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b98b0:	e7e0      	b.n	b9874 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b98b2:	4925      	ldr	r1, [pc, #148]	; (b9948 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b98b4:	4668      	mov	r0, sp
   b98b6:	f00a ff51 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98ba:	2205      	movs	r2, #5
   b98bc:	4629      	mov	r1, r5
   b98be:	4668      	mov	r0, sp
   b98c0:	f00a feae 	bl	c4620 <memcmp>
   b98c4:	b910      	cbnz	r0, b98cc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b98c6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b98ca:	e7d3      	b.n	b9874 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b98cc:	491f      	ldr	r1, [pc, #124]	; (b994c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b98ce:	4668      	mov	r0, sp
   b98d0:	f00a ff44 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98d4:	2205      	movs	r2, #5
   b98d6:	4629      	mov	r1, r5
   b98d8:	4668      	mov	r0, sp
   b98da:	f00a fea1 	bl	c4620 <memcmp>
   b98de:	b910      	cbnz	r0, b98e6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b98e0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b98e4:	e7c6      	b.n	b9874 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b98e6:	491a      	ldr	r1, [pc, #104]	; (b9950 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b98e8:	4668      	mov	r0, sp
   b98ea:	f00a ff37 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98ee:	2205      	movs	r2, #5
   b98f0:	4629      	mov	r1, r5
   b98f2:	4668      	mov	r0, sp
   b98f4:	f00a fe94 	bl	c4620 <memcmp>
   b98f8:	b910      	cbnz	r0, b9900 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b98fa:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b98fe:	e7b9      	b.n	b9874 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9900:	4914      	ldr	r1, [pc, #80]	; (b9954 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b9902:	4668      	mov	r0, sp
   b9904:	f00a ff2a 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9908:	2205      	movs	r2, #5
   b990a:	4629      	mov	r1, r5
   b990c:	4668      	mov	r0, sp
   b990e:	f00a fe87 	bl	c4620 <memcmp>
   b9912:	b918      	cbnz	r0, b991c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b9914:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9918:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b991a:	e7ad      	b.n	b9878 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b991c:	490e      	ldr	r1, [pc, #56]	; (b9958 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b991e:	4668      	mov	r0, sp
   b9920:	f00a ff1c 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9924:	2205      	movs	r2, #5
   b9926:	4629      	mov	r1, r5
   b9928:	4668      	mov	r0, sp
   b992a:	f00a fe79 	bl	c4620 <memcmp>
   b992e:	b910      	cbnz	r0, b9936 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9930:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9934:	e7f0      	b.n	b9918 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b9936:	2000      	movs	r0, #0
   b9938:	e79f      	b.n	b987a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b993a:	bf00      	nop
   b993c:	000c70ac 	.word	0x000c70ac
   b9940:	000c7082 	.word	0x000c7082
   b9944:	000c7088 	.word	0x000c7088
   b9948:	000c708e 	.word	0x000c708e
   b994c:	000c7094 	.word	0x000c7094
   b9950:	000c709a 	.word	0x000c709a
   b9954:	000c70a0 	.word	0x000c70a0
   b9958:	000c70a6 	.word	0x000c70a6

000b995c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b995c:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b995e:	4b30      	ldr	r3, [pc, #192]	; (b9a20 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b9960:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9962:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9966:	6818      	ldr	r0, [r3, #0]
   b9968:	9000      	str	r0, [sp, #0]
   b996a:	889b      	ldrh	r3, [r3, #4]
   b996c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9970:	2205      	movs	r2, #5
   b9972:	4621      	mov	r1, r4
   b9974:	4668      	mov	r0, sp
   b9976:	f00a fe53 	bl	c4620 <memcmp>
   b997a:	b910      	cbnz	r0, b9982 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b997c:	2064      	movs	r0, #100	; 0x64
}
   b997e:	b002      	add	sp, #8
   b9980:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b9982:	4928      	ldr	r1, [pc, #160]	; (b9a24 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b9984:	4668      	mov	r0, sp
   b9986:	f00a fee9 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b998a:	2205      	movs	r2, #5
   b998c:	4621      	mov	r1, r4
   b998e:	4668      	mov	r0, sp
   b9990:	f00a fe46 	bl	c4620 <memcmp>
   b9994:	2800      	cmp	r0, #0
   b9996:	d0f1      	beq.n	b997c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b9998:	4923      	ldr	r1, [pc, #140]	; (b9a28 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b999a:	4668      	mov	r0, sp
   b999c:	f00a fede 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99a0:	2205      	movs	r2, #5
   b99a2:	4621      	mov	r1, r4
   b99a4:	4668      	mov	r0, sp
   b99a6:	f00a fe3b 	bl	c4620 <memcmp>
   b99aa:	2800      	cmp	r0, #0
   b99ac:	d0e6      	beq.n	b997c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b99ae:	491f      	ldr	r1, [pc, #124]	; (b9a2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b99b0:	4668      	mov	r0, sp
   b99b2:	f00a fed3 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99b6:	2205      	movs	r2, #5
   b99b8:	4621      	mov	r1, r4
   b99ba:	4668      	mov	r0, sp
   b99bc:	f00a fe30 	bl	c4620 <memcmp>
   b99c0:	2800      	cmp	r0, #0
   b99c2:	d0db      	beq.n	b997c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b99c4:	491a      	ldr	r1, [pc, #104]	; (b9a30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b99c6:	4668      	mov	r0, sp
   b99c8:	f00a fec8 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99cc:	2205      	movs	r2, #5
   b99ce:	4621      	mov	r1, r4
   b99d0:	4668      	mov	r0, sp
   b99d2:	f00a fe25 	bl	c4620 <memcmp>
   b99d6:	2800      	cmp	r0, #0
   b99d8:	d0d0      	beq.n	b997c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b99da:	4916      	ldr	r1, [pc, #88]	; (b9a34 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b99dc:	4668      	mov	r0, sp
   b99de:	f00a febd 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99e2:	2205      	movs	r2, #5
   b99e4:	4621      	mov	r1, r4
   b99e6:	4668      	mov	r0, sp
   b99e8:	f00a fe1a 	bl	c4620 <memcmp>
   b99ec:	2800      	cmp	r0, #0
   b99ee:	d0c5      	beq.n	b997c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b99f0:	4911      	ldr	r1, [pc, #68]	; (b9a38 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b99f2:	4668      	mov	r0, sp
   b99f4:	f00a feb2 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99f8:	2205      	movs	r2, #5
   b99fa:	4621      	mov	r1, r4
   b99fc:	4668      	mov	r0, sp
   b99fe:	f00a fe0f 	bl	c4620 <memcmp>
   b9a02:	b148      	cbz	r0, b9a18 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b9a04:	490d      	ldr	r1, [pc, #52]	; (b9a3c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b9a06:	4668      	mov	r0, sp
   b9a08:	f00a fea8 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a0c:	2205      	movs	r2, #5
   b9a0e:	4621      	mov	r1, r4
   b9a10:	4668      	mov	r0, sp
   b9a12:	f00a fe05 	bl	c4620 <memcmp>
   b9a16:	b908      	cbnz	r0, b9a1c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b9a18:	2032      	movs	r0, #50	; 0x32
   b9a1a:	e7b0      	b.n	b997e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b9a1c:	2000      	movs	r0, #0
   b9a1e:	e7ae      	b.n	b997e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b9a20:	000c70ac 	.word	0x000c70ac
   b9a24:	000c7082 	.word	0x000c7082
   b9a28:	000c7088 	.word	0x000c7088
   b9a2c:	000c708e 	.word	0x000c708e
   b9a30:	000c7094 	.word	0x000c7094
   b9a34:	000c709a 	.word	0x000c709a
   b9a38:	000c70a0 	.word	0x000c70a0
   b9a3c:	000c70a6 	.word	0x000c70a6

000b9a40 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b9a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9a42:	4b38      	ldr	r3, [pc, #224]	; (b9b24 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b9a44:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a46:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9a4a:	6818      	ldr	r0, [r3, #0]
   b9a4c:	9000      	str	r0, [sp, #0]
   b9a4e:	889b      	ldrh	r3, [r3, #4]
   b9a50:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a54:	2205      	movs	r2, #5
   b9a56:	4629      	mov	r1, r5
   b9a58:	4668      	mov	r0, sp
   b9a5a:	f00a fde1 	bl	c4620 <memcmp>
   b9a5e:	b918      	cbnz	r0, b9a68 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b9a60:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b9a64:	b003      	add	sp, #12
   b9a66:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9a68:	492f      	ldr	r1, [pc, #188]	; (b9b28 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b9a6a:	4668      	mov	r0, sp
   b9a6c:	f00a fe76 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a70:	2205      	movs	r2, #5
   b9a72:	4629      	mov	r1, r5
   b9a74:	4668      	mov	r0, sp
   b9a76:	f00a fdd3 	bl	c4620 <memcmp>
   b9a7a:	b910      	cbnz	r0, b9a82 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b9a7c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9a80:	e7f0      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9a82:	492a      	ldr	r1, [pc, #168]	; (b9b2c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b9a84:	4668      	mov	r0, sp
   b9a86:	f00a fe69 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a8a:	2205      	movs	r2, #5
   b9a8c:	4629      	mov	r1, r5
   b9a8e:	4668      	mov	r0, sp
   b9a90:	f00a fdc6 	bl	c4620 <memcmp>
   b9a94:	b910      	cbnz	r0, b9a9c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b9a96:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9a9a:	e7e3      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9a9c:	4924      	ldr	r1, [pc, #144]	; (b9b30 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b9a9e:	4668      	mov	r0, sp
   b9aa0:	f00a fe5c 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9aa4:	2205      	movs	r2, #5
   b9aa6:	4629      	mov	r1, r5
   b9aa8:	4668      	mov	r0, sp
   b9aaa:	f00a fdb9 	bl	c4620 <memcmp>
   b9aae:	b910      	cbnz	r0, b9ab6 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b9ab0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b9ab4:	e7d6      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9ab6:	491f      	ldr	r1, [pc, #124]	; (b9b34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b9ab8:	4668      	mov	r0, sp
   b9aba:	f00a fe4f 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9abe:	2205      	movs	r2, #5
   b9ac0:	4629      	mov	r1, r5
   b9ac2:	4668      	mov	r0, sp
   b9ac4:	f00a fdac 	bl	c4620 <memcmp>
   b9ac8:	b910      	cbnz	r0, b9ad0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b9aca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b9ace:	e7c9      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9ad0:	4919      	ldr	r1, [pc, #100]	; (b9b38 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b9ad2:	4668      	mov	r0, sp
   b9ad4:	f00a fe42 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9ad8:	2205      	movs	r2, #5
   b9ada:	4629      	mov	r1, r5
   b9adc:	4668      	mov	r0, sp
   b9ade:	f00a fd9f 	bl	c4620 <memcmp>
   b9ae2:	b910      	cbnz	r0, b9aea <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b9ae4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9ae8:	e7bc      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9aea:	4914      	ldr	r1, [pc, #80]	; (b9b3c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b9aec:	4668      	mov	r0, sp
   b9aee:	f00a fe35 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9af2:	2205      	movs	r2, #5
   b9af4:	4629      	mov	r1, r5
   b9af6:	4668      	mov	r0, sp
   b9af8:	f00a fd92 	bl	c4620 <memcmp>
   b9afc:	b910      	cbnz	r0, b9b04 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b9afe:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b9b02:	e7af      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9b04:	490e      	ldr	r1, [pc, #56]	; (b9b40 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b9b06:	4668      	mov	r0, sp
   b9b08:	f00a fe28 	bl	c475c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9b0c:	2205      	movs	r2, #5
   b9b0e:	4629      	mov	r1, r5
   b9b10:	4668      	mov	r0, sp
   b9b12:	f00a fd85 	bl	c4620 <memcmp>
   b9b16:	b910      	cbnz	r0, b9b1e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b9b18:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9b1c:	e7a2      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b9b1e:	2000      	movs	r0, #0
   b9b20:	e7a0      	b.n	b9a64 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b9b22:	bf00      	nop
   b9b24:	000c70ac 	.word	0x000c70ac
   b9b28:	000c7082 	.word	0x000c7082
   b9b2c:	000c7088 	.word	0x000c7088
   b9b30:	000c708e 	.word	0x000c708e
   b9b34:	000c7094 	.word	0x000c7094
   b9b38:	000c709a 	.word	0x000c709a
   b9b3c:	000c70a0 	.word	0x000c70a0
   b9b40:	000c70a6 	.word	0x000c70a6

000b9b44 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9b44:	4770      	bx	lr
	...

000b9b48 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b9b48:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b9b4a:	8813      	ldrh	r3, [r2, #0]
   b9b4c:	4d0c      	ldr	r5, [pc, #48]	; (b9b80 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b9b4e:	2b01      	cmp	r3, #1
{
   b9b50:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9b52:	d10e      	bne.n	b9b72 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9b54:	020a      	lsls	r2, r1, #8
   b9b56:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b9b5a:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9b5c:	3301      	adds	r3, #1
   b9b5e:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9b60:	f7ff fff0 	bl	b9b44 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9b64:	8820      	ldrh	r0, [r4, #0]
   b9b66:	882b      	ldrh	r3, [r5, #0]
}
   b9b68:	4298      	cmp	r0, r3
   b9b6a:	bf14      	ite	ne
   b9b6c:	2003      	movne	r0, #3
   b9b6e:	2000      	moveq	r0, #0
   b9b70:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9b72:	2b02      	cmp	r3, #2
   b9b74:	d1f2      	bne.n	b9b5c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b9b76:	882a      	ldrh	r2, [r5, #0]
   b9b78:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b9b7a:	3206      	adds	r2, #6
   b9b7c:	e7ed      	b.n	b9b5a <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b9b7e:	bf00      	nop
   b9b80:	2003e61a 	.word	0x2003e61a

000b9b84 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9b84:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b9b86:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b9b88:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b9b8a:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9b8c:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9b8e:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9b92:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b9b96:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b9b9a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b9b9e:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9ba2:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9ba4:	4413      	add	r3, r2
   b9ba6:	734b      	strb	r3, [r1, #13]
   b9ba8:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b9baa:	b293      	uxth	r3, r2
   b9bac:	429c      	cmp	r4, r3
   b9bae:	d90a      	bls.n	b9bc6 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9bb0:	688b      	ldr	r3, [r1, #8]
   b9bb2:	7b08      	ldrb	r0, [r1, #12]
   b9bb4:	5c9b      	ldrb	r3, [r3, r2]
   b9bb6:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b9bb8:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b9bba:	b2db      	uxtb	r3, r3
   b9bbc:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b9bbe:	4403      	add	r3, r0
   b9bc0:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9bc2:	3201      	adds	r2, #1
   b9bc4:	e7f1      	b.n	b9baa <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b9bc6:	bd30      	pop	{r4, r5, pc}

000b9bc8 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b9bc8:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b9bcc:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b9bce:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b9bd2:	b2c9      	uxtb	r1, r1
   b9bd4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b9bd8:	4419      	add	r1, r3
   b9bda:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b9bde:	4770      	bx	lr

000b9be0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b9be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b9be4:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b9be8:	f10b 0b08 	add.w	fp, fp, #8
   b9bec:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b9bf0:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9bf4:	f1ab 0302 	sub.w	r3, fp, #2
{
   b9bf8:	4604      	mov	r4, r0
   b9bfa:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b9bfc:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b9bfe:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9c00:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b9c02:	f1ba 0f00 	cmp.w	sl, #0
   b9c06:	f000 80a6 	beq.w	b9d56 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b9c0a:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9c0c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b9c10:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c14:	4556      	cmp	r6, sl
   b9c16:	bf28      	it	cs
   b9c18:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b9c1a:	ebaa 0a06 	sub.w	sl, sl, r6
   b9c1e:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b9c22:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b9c26:	bf02      	ittt	eq
   b9c28:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b9c2c:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b9c2e:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9c32:	f006 f9b3 	bl	bff9c <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b9c36:	f1b9 0f00 	cmp.w	r9, #0
   b9c3a:	d15c      	bne.n	b9cf6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9c3c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c40:	6803      	ldr	r3, [r0, #0]
   b9c42:	21b5      	movs	r1, #181	; 0xb5
   b9c44:	689b      	ldr	r3, [r3, #8]
   b9c46:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b9c48:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c4c:	6803      	ldr	r3, [r0, #0]
   b9c4e:	2162      	movs	r1, #98	; 0x62
   b9c50:	689b      	ldr	r3, [r3, #8]
   b9c52:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9c54:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c58:	7829      	ldrb	r1, [r5, #0]
   b9c5a:	6803      	ldr	r3, [r0, #0]
   b9c5c:	689b      	ldr	r3, [r3, #8]
   b9c5e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9c60:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c64:	7869      	ldrb	r1, [r5, #1]
   b9c66:	6803      	ldr	r3, [r0, #0]
   b9c68:	689b      	ldr	r3, [r3, #8]
   b9c6a:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b9c6c:	78a9      	ldrb	r1, [r5, #2]
   b9c6e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c72:	f7fe fdc1 	bl	b87f8 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b9c76:	8869      	ldrh	r1, [r5, #2]
   b9c78:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c7c:	0a09      	lsrs	r1, r1, #8
   b9c7e:	f7fe fdbb 	bl	b87f8 <_ZN7TwoWire5writeEi.isra.0>
   b9c82:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9c84:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9c86:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c8a:	fa1f f983 	uxth.w	r9, r3
   b9c8e:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9c92:	454a      	cmp	r2, r9
   b9c94:	b2bf      	uxth	r7, r7
   b9c96:	d90d      	bls.n	b9cb4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b9c98:	42be      	cmp	r6, r7
   b9c9a:	d90b      	bls.n	b9cb4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9c9c:	68aa      	ldr	r2, [r5, #8]
   b9c9e:	6801      	ldr	r1, [r0, #0]
   b9ca0:	9301      	str	r3, [sp, #4]
   b9ca2:	4442      	add	r2, r8
   b9ca4:	688f      	ldr	r7, [r1, #8]
   b9ca6:	5cd1      	ldrb	r1, [r2, r3]
   b9ca8:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9caa:	9b01      	ldr	r3, [sp, #4]
   b9cac:	3301      	adds	r3, #1
   b9cae:	e7e9      	b.n	b9c84 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9cb0:	46b9      	mov	r9, r7
   b9cb2:	e7a6      	b.n	b9c02 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9cb4:	3e02      	subs	r6, #2
      startSpot += x;
   b9cb6:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b9cb8:	42b7      	cmp	r7, r6
      startSpot += x;
   b9cba:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b9cbe:	d10c      	bne.n	b9cda <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9cc0:	6803      	ldr	r3, [r0, #0]
   b9cc2:	7b29      	ldrb	r1, [r5, #12]
   b9cc4:	689b      	ldr	r3, [r3, #8]
   b9cc6:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9cc8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9ccc:	7b69      	ldrb	r1, [r5, #13]
   b9cce:	6803      	ldr	r3, [r0, #0]
   b9cd0:	689b      	ldr	r3, [r3, #8]
   b9cd2:	4798      	blx	r3
        bytesSent += 2;
   b9cd4:	f109 0708 	add.w	r7, r9, #8
   b9cd8:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b9cda:	455f      	cmp	r7, fp
   b9cdc:	d2e8      	bcs.n	b9cb0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b9cde:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b9ce2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9ce6:	f006 f960 	bl	bffaa <_ZN7TwoWire15endTransmissionEh>
   b9cea:	2800      	cmp	r0, #0
   b9cec:	d0e0      	beq.n	b9cb0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b9cee:	200c      	movs	r0, #12
}
   b9cf0:	b003      	add	sp, #12
   b9cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9cf6:	2200      	movs	r2, #0
   b9cf8:	b291      	uxth	r1, r2
   b9cfa:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9cfe:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9d00:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9d04:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9d06:	d910      	bls.n	b9d2a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b9d08:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9d0c:	eb08 0c02 	add.w	ip, r8, r2
   b9d10:	1c53      	adds	r3, r2, #1
   b9d12:	45f4      	cmp	ip, lr
   b9d14:	9301      	str	r3, [sp, #4]
   b9d16:	da08      	bge.n	b9d2a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9d18:	68a9      	ldr	r1, [r5, #8]
   b9d1a:	6802      	ldr	r2, [r0, #0]
   b9d1c:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9d20:	6892      	ldr	r2, [r2, #8]
   b9d22:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9d24:	9b01      	ldr	r3, [sp, #4]
   b9d26:	461a      	mov	r2, r3
   b9d28:	e7e6      	b.n	b9cf8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9d2a:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9d2c:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9d2e:	429f      	cmp	r7, r3
      startSpot += x;
   b9d30:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9d34:	d1d1      	bne.n	b9cda <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b9d36:	3e02      	subs	r6, #2
   b9d38:	42b2      	cmp	r2, r6
   b9d3a:	d1ce      	bne.n	b9cda <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9d3c:	6803      	ldr	r3, [r0, #0]
   b9d3e:	7b29      	ldrb	r1, [r5, #12]
   b9d40:	689b      	ldr	r3, [r3, #8]
   b9d42:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9d44:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9d48:	7b69      	ldrb	r1, [r5, #13]
   b9d4a:	6803      	ldr	r3, [r0, #0]
   b9d4c:	689b      	ldr	r3, [r3, #8]
   b9d4e:	4798      	blx	r3
        bytesSent += 2;
   b9d50:	fa1f f78b 	uxth.w	r7, fp
   b9d54:	e7c1      	b.n	b9cda <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b9d56:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9d5a:	f006 f92a 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
   b9d5e:	2800      	cmp	r0, #0
   b9d60:	d0c6      	beq.n	b9cf0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9d62:	e7c4      	b.n	b9cee <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9d64 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9d64:	b570      	push	{r4, r5, r6, lr}
   b9d66:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9d68:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9d6c:	6803      	ldr	r3, [r0, #0]
{
   b9d6e:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9d70:	689b      	ldr	r3, [r3, #8]
   b9d72:	21b5      	movs	r1, #181	; 0xb5
   b9d74:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b9d76:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d7a:	6803      	ldr	r3, [r0, #0]
   b9d7c:	2162      	movs	r1, #98	; 0x62
   b9d7e:	689b      	ldr	r3, [r3, #8]
   b9d80:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9d82:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d86:	7821      	ldrb	r1, [r4, #0]
   b9d88:	6803      	ldr	r3, [r0, #0]
   b9d8a:	689b      	ldr	r3, [r3, #8]
   b9d8c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9d8e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d92:	7861      	ldrb	r1, [r4, #1]
   b9d94:	6803      	ldr	r3, [r0, #0]
   b9d96:	689b      	ldr	r3, [r3, #8]
   b9d98:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b9d9a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9d9e:	78a1      	ldrb	r1, [r4, #2]
   b9da0:	6803      	ldr	r3, [r0, #0]
   b9da2:	689b      	ldr	r3, [r3, #8]
   b9da4:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b9da6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9daa:	8861      	ldrh	r1, [r4, #2]
   b9dac:	6803      	ldr	r3, [r0, #0]
   b9dae:	0a09      	lsrs	r1, r1, #8
   b9db0:	689b      	ldr	r3, [r3, #8]
   b9db2:	4798      	blx	r3
   b9db4:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b9db6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9dba:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b9dbc:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9dbe:	b2b2      	uxth	r2, r6
   b9dc0:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9dc2:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9dc4:	d904      	bls.n	b9dd0 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b9dc6:	68a1      	ldr	r1, [r4, #8]
   b9dc8:	5c89      	ldrb	r1, [r1, r2]
   b9dca:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9dcc:	3601      	adds	r6, #1
   b9dce:	e7f2      	b.n	b9db6 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b9dd0:	7b21      	ldrb	r1, [r4, #12]
   b9dd2:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9dd4:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9dd8:	7b61      	ldrb	r1, [r4, #13]
   b9dda:	6803      	ldr	r3, [r0, #0]
}
   b9ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b9de0:	689b      	ldr	r3, [r3, #8]
   b9de2:	4718      	bx	r3

000b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b9de4:	b510      	push	{r4, lr}
   b9de6:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b9de8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9dec:	f007 fd64 	bl	c18b8 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b9df0:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9df4:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b9df8:	429a      	cmp	r2, r3
   b9dfa:	d90b      	bls.n	b9e14 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9dfc:	28ff      	cmp	r0, #255	; 0xff
   b9dfe:	d101      	bne.n	b9e04 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9e00:	7822      	ldrb	r2, [r4, #0]
   b9e02:	b13a      	cbz	r2, b9e14 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9e04:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b9e08:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b9e0a:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9e0e:	3301      	adds	r3, #1
   b9e10:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9e14:	bd10      	pop	{r4, pc}
	...

000b9e18 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b9e18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9e1c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9e20:	4604      	mov	r4, r0
   b9e22:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9e24:	b97b      	cbnz	r3, b9e46 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9e26:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9e2a:	b923      	cbnz	r3, b9e36 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9e2c:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9e30:	2b00      	cmp	r3, #0
   b9e32:	f000 80ca 	beq.w	b9fca <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9e36:	4966      	ldr	r1, [pc, #408]	; (b9fd0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9e38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9e3c:	b004      	add	sp, #16
   b9e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9e42:	f007 bba4 	b.w	c158e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9e46:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b9e4a:	4a62      	ldr	r2, [pc, #392]	; (b9fd4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9e4c:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9e4e:	2600      	movs	r6, #0
   b9e50:	2301      	movs	r3, #1
   b9e52:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9e56:	4669      	mov	r1, sp
   b9e58:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9e5c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9e60:	9200      	str	r2, [sp, #0]
   b9e62:	f88d 6004 	strb.w	r6, [sp, #4]
   b9e66:	f007 fcb9 	bl	c17dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b9e6a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9e6e:	4631      	mov	r1, r6
   b9e70:	f008 f925 	bl	c20be <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9e74:	21b5      	movs	r1, #181	; 0xb5
   b9e76:	4620      	mov	r0, r4
   b9e78:	f7ff ffb4 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9e7c:	2162      	movs	r1, #98	; 0x62
   b9e7e:	4620      	mov	r0, r4
   b9e80:	f7ff ffb0 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9e84:	7829      	ldrb	r1, [r5, #0]
   b9e86:	4620      	mov	r0, r4
   b9e88:	f7ff ffac 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9e8c:	7869      	ldrb	r1, [r5, #1]
   b9e8e:	4620      	mov	r0, r4
   b9e90:	f7ff ffa8 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9e94:	78a9      	ldrb	r1, [r5, #2]
   b9e96:	4620      	mov	r0, r4
   b9e98:	f7ff ffa4 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9e9c:	8869      	ldrh	r1, [r5, #2]
   b9e9e:	4620      	mov	r0, r4
   b9ea0:	0a09      	lsrs	r1, r1, #8
   b9ea2:	f7ff ff9f 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9ea6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9eaa:	2b00      	cmp	r3, #0
   b9eac:	d042      	beq.n	b9f34 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9eae:	494a      	ldr	r1, [pc, #296]	; (b9fd8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9eb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9eb4:	f007 fb6b 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9eb8:	2210      	movs	r2, #16
   b9eba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ebe:	21b5      	movs	r1, #181	; 0xb5
   b9ec0:	f7fe fc8a 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9ec4:	4945      	ldr	r1, [pc, #276]	; (b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9ec6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9eca:	f007 fb60 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b9ece:	2210      	movs	r2, #16
   b9ed0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ed4:	2162      	movs	r1, #98	; 0x62
   b9ed6:	f7fe fc7f 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9eda:	4940      	ldr	r1, [pc, #256]	; (b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9edc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ee0:	f007 fb55 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9ee4:	2210      	movs	r2, #16
   b9ee6:	7829      	ldrb	r1, [r5, #0]
   b9ee8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9eec:	f7fe fc74 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9ef0:	493a      	ldr	r1, [pc, #232]	; (b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9ef2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ef6:	f007 fb4a 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b9efa:	2210      	movs	r2, #16
   b9efc:	7869      	ldrb	r1, [r5, #1]
   b9efe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f02:	f7fe fc69 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9f06:	4935      	ldr	r1, [pc, #212]	; (b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9f08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f0c:	f007 fb3f 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9f10:	2210      	movs	r2, #16
   b9f12:	78a9      	ldrb	r1, [r5, #2]
   b9f14:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f18:	f007 fb55 	bl	c15c6 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9f1c:	492f      	ldr	r1, [pc, #188]	; (b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9f1e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f22:	f007 fb34 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9f26:	8869      	ldrh	r1, [r5, #2]
   b9f28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f2c:	2210      	movs	r2, #16
   b9f2e:	0a09      	lsrs	r1, r1, #8
   b9f30:	f007 fb49 	bl	c15c6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9f34:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9f38:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9f3a:	886a      	ldrh	r2, [r5, #2]
   b9f3c:	b2b3      	uxth	r3, r6
   b9f3e:	429a      	cmp	r2, r3
   b9f40:	d916      	bls.n	b9f70 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9f42:	461f      	mov	r7, r3
   b9f44:	68ab      	ldr	r3, [r5, #8]
   b9f46:	4620      	mov	r0, r4
   b9f48:	5dd9      	ldrb	r1, [r3, r7]
   b9f4a:	f7ff ff4b 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9f4e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9f52:	b15b      	cbz	r3, b9f6c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9f54:	4641      	mov	r1, r8
   b9f56:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f5a:	f007 fb18 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9f5e:	68ab      	ldr	r3, [r5, #8]
   b9f60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f64:	5dd9      	ldrb	r1, [r3, r7]
   b9f66:	2210      	movs	r2, #16
   b9f68:	f7fe fc36 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9f6c:	3601      	adds	r6, #1
   b9f6e:	e7e4      	b.n	b9f3a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9f70:	7b29      	ldrb	r1, [r5, #12]
   b9f72:	4620      	mov	r0, r4
   b9f74:	f7ff ff36 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9f78:	7b69      	ldrb	r1, [r5, #13]
   b9f7a:	4620      	mov	r0, r4
   b9f7c:	f7ff ff32 	bl	b9de4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9f80:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9f84:	2101      	movs	r1, #1
   b9f86:	f008 f89a 	bl	c20be <digitalWrite>
  _spiPort->endTransaction();
   b9f8a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9f8e:	f007 fc0c 	bl	c17aa <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9f92:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9f96:	b1c3      	cbz	r3, b9fca <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9f98:	4910      	ldr	r1, [pc, #64]	; (b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9f9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f9e:	f007 faf6 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9fa2:	7b29      	ldrb	r1, [r5, #12]
   b9fa4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fa8:	2210      	movs	r2, #16
   b9faa:	f7fe fc15 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9fae:	490b      	ldr	r1, [pc, #44]	; (b9fdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9fb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fb4:	f007 faeb 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9fb8:	7b69      	ldrb	r1, [r5, #13]
   b9fba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fbe:	2210      	movs	r2, #16
}
   b9fc0:	b004      	add	sp, #16
   b9fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9fc6:	f7fe bc0e 	b.w	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b9fca:	b004      	add	sp, #16
   b9fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9fd0:	000c70b2 	.word	0x000c70b2
   b9fd4:	000c6e68 	.word	0x000c6e68
   b9fd8:	000c70e7 	.word	0x000c70e7
   b9fdc:	000c8035 	.word	0x000c8035

000b9fe0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b9fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b9fe2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b9fe6:	4604      	mov	r4, r0
   b9fe8:	460d      	mov	r5, r1
   b9fea:	4616      	mov	r6, r2
  if (_printDebug == true)
   b9fec:	2b00      	cmp	r3, #0
   b9fee:	f000 8082 	beq.w	ba0f6 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b9ff2:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9ff6:	4940      	ldr	r1, [pc, #256]	; (ba0f8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9ff8:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9ffc:	f007 fac7 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   ba000:	782b      	ldrb	r3, [r5, #0]
   ba002:	2b01      	cmp	r3, #1
   ba004:	d13c      	bne.n	ba080 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   ba006:	493d      	ldr	r1, [pc, #244]	; (ba0fc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   ba008:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   ba00c:	f007 fabf 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   ba010:	493b      	ldr	r1, [pc, #236]	; (ba100 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   ba012:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba016:	f007 faba 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   ba01a:	882b      	ldrh	r3, [r5, #0]
   ba01c:	f240 7201 	movw	r2, #1793	; 0x701
   ba020:	4293      	cmp	r3, r2
   ba022:	d145      	bne.n	ba0b0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   ba024:	4937      	ldr	r1, [pc, #220]	; (ba104 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   ba026:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   ba02a:	f007 fab0 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   ba02e:	4936      	ldr	r1, [pc, #216]	; (ba108 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   ba030:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba034:	f007 faab 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
   ba038:	8869      	ldrh	r1, [r5, #2]
   ba03a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba03e:	2210      	movs	r2, #16
   ba040:	f007 fac1 	bl	c15c6 <_ZN5Print11printNumberEmh>
    if (printPayload)
   ba044:	2f01      	cmp	r7, #1
   ba046:	d101      	bne.n	ba04c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   ba048:	2e00      	cmp	r6, #0
   ba04a:	d049      	beq.n	ba0e0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   ba04c:	492f      	ldr	r1, [pc, #188]	; (ba10c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   ba04e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   ba052:	4f2f      	ldr	r7, [pc, #188]	; (ba110 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   ba054:	f007 fa9b 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
   ba058:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   ba05a:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   ba05c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   ba060:	b2b3      	uxth	r3, r6
   ba062:	429a      	cmp	r2, r3
   ba064:	d941      	bls.n	ba0ea <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   ba066:	4639      	mov	r1, r7
   ba068:	f007 fa91 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   ba06c:	b2b3      	uxth	r3, r6
   ba06e:	68a9      	ldr	r1, [r5, #8]
   ba070:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba074:	5cc9      	ldrb	r1, [r1, r3]
   ba076:	2210      	movs	r2, #16
   ba078:	f7fe fbae 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   ba07c:	3601      	adds	r6, #1
   ba07e:	e7ec      	b.n	ba05a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   ba080:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   ba082:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   ba086:	d101      	bne.n	ba08c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   ba088:	4922      	ldr	r1, [pc, #136]	; (ba114 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   ba08a:	e7bf      	b.n	ba00c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   ba08c:	2b06      	cmp	r3, #6
   ba08e:	d101      	bne.n	ba094 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   ba090:	4921      	ldr	r1, [pc, #132]	; (ba118 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   ba092:	e7bb      	b.n	ba00c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   ba094:	2b0a      	cmp	r3, #10
   ba096:	d101      	bne.n	ba09c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   ba098:	4920      	ldr	r1, [pc, #128]	; (ba11c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   ba09a:	e7b7      	b.n	ba00c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   ba09c:	4920      	ldr	r1, [pc, #128]	; (ba120 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   ba09e:	f007 fa76 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   ba0a2:	7829      	ldrb	r1, [r5, #0]
   ba0a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba0a8:	2210      	movs	r2, #16
   ba0aa:	f7fe fb95 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   ba0ae:	e7af      	b.n	ba010 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   ba0b0:	f640 0206 	movw	r2, #2054	; 0x806
   ba0b4:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   ba0b6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   ba0ba:	d101      	bne.n	ba0c0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   ba0bc:	4919      	ldr	r1, [pc, #100]	; (ba124 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   ba0be:	e7b4      	b.n	ba02a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   ba0c0:	f640 1206 	movw	r2, #2310	; 0x906
   ba0c4:	4293      	cmp	r3, r2
   ba0c6:	d101      	bne.n	ba0cc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   ba0c8:	4917      	ldr	r1, [pc, #92]	; (ba128 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   ba0ca:	e7ae      	b.n	ba02a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   ba0cc:	4914      	ldr	r1, [pc, #80]	; (ba120 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   ba0ce:	f007 fa5e 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   ba0d2:	7869      	ldrb	r1, [r5, #1]
   ba0d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba0d8:	2210      	movs	r2, #16
   ba0da:	f7fe fb7d 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   ba0de:	e7a6      	b.n	ba02e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   ba0e0:	4912      	ldr	r1, [pc, #72]	; (ba12c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   ba0e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba0e6:	f007 fa52 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   ba0ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   ba0ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   ba0f2:	f007 ba50 	b.w	c1596 <_ZN5Print7printlnEv>
}
   ba0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba0f8:	000c70f8 	.word	0x000c70f8
   ba0fc:	000c70fd 	.word	0x000c70fd
   ba100:	000c710d 	.word	0x000c710d
   ba104:	000c7112 	.word	0x000c7112
   ba108:	000c7120 	.word	0x000c7120
   ba10c:	000c7129 	.word	0x000c7129
   ba110:	000c8035 	.word	0x000c8035
   ba114:	000c7101 	.word	0x000c7101
   ba118:	000c7105 	.word	0x000c7105
   ba11c:	000c7109 	.word	0x000c7109
   ba120:	000c737e 	.word	0x000c737e
   ba124:	000c7116 	.word	0x000c7116
   ba128:	000c711b 	.word	0x000c711b
   ba12c:	000c7133 	.word	0x000c7133

000ba130 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   ba130:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   ba132:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   ba136:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   ba138:	b955      	cbnz	r5, ba150 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   ba13a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   ba13e:	b90b      	cbnz	r3, ba144 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   ba140:	2000      	movs	r0, #0
}
   ba142:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   ba144:	491a      	ldr	r1, [pc, #104]	; (ba1b0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   ba146:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba14a:	f007 fa3a 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   ba14e:	e7f7      	b.n	ba140 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   ba150:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   ba154:	b12b      	cbz	r3, ba162 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   ba156:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   ba15a:	2b00      	cmp	r3, #0
   ba15c:	d0f0      	beq.n	ba140 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   ba15e:	4915      	ldr	r1, [pc, #84]	; (ba1b4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   ba160:	e7f1      	b.n	ba146 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   ba162:	4628      	mov	r0, r5
   ba164:	f7f9 ff99 	bl	b409a <_Znaj>
   ba168:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba16c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   ba170:	b930      	cbnz	r0, ba180 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba172:	b91b      	cbnz	r3, ba17c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   ba174:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   ba178:	2b00      	cmp	r3, #0
   ba17a:	d0e1      	beq.n	ba140 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   ba17c:	490e      	ldr	r1, [pc, #56]	; (ba1b8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   ba17e:	e7e2      	b.n	ba146 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   ba180:	b17b      	cbz	r3, ba1a2 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   ba182:	490e      	ldr	r1, [pc, #56]	; (ba1bc <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   ba184:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba188:	f007 fa01 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   ba18c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   ba190:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   ba194:	220a      	movs	r2, #10
   ba196:	4628      	mov	r0, r5
   ba198:	f007 fa15 	bl	c15c6 <_ZN5Print11printNumberEmh>
        n += println();
   ba19c:	4628      	mov	r0, r5
   ba19e:	f007 f9fa 	bl	c1596 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   ba1a2:	2300      	movs	r3, #0
   ba1a4:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   ba1a8:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   ba1ac:	2001      	movs	r0, #1
   ba1ae:	e7c8      	b.n	ba142 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   ba1b0:	000c7145 	.word	0x000c7145
   ba1b4:	000c7196 	.word	0x000c7196
   ba1b8:	000c71d9 	.word	0x000c71d9
   ba1bc:	000c71fd 	.word	0x000c71fd

000ba1c0 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   ba1c0:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   ba1c4:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   ba1c8:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   ba1ca:	bf3b      	ittet	cc
   ba1cc:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   ba1d0:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   ba1d2:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   ba1d4:	1a80      	subcc	r0, r0, r2
   ba1d6:	b280      	uxth	r0, r0
}
   ba1d8:	4770      	bx	lr

000ba1da <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   ba1da:	b508      	push	{r3, lr}
   ba1dc:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   ba1de:	f7ff ffef 	bl	ba1c0 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   ba1e2:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   ba1e6:	1a18      	subs	r0, r3, r0
}
   ba1e8:	b280      	uxth	r0, r0
   ba1ea:	bd08      	pop	{r3, pc}

000ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   ba1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   ba1f0:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   ba1f4:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   ba1f8:	1aed      	subs	r5, r5, r3
   ba1fa:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   ba1fc:	4295      	cmp	r5, r2
   ba1fe:	bf28      	it	cs
   ba200:	4615      	movcs	r5, r2
{
   ba202:	4616      	mov	r6, r2
   ba204:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba206:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   ba20a:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba20c:	462a      	mov	r2, r5
   ba20e:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   ba210:	b2bf      	uxth	r7, r7
{
   ba212:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba214:	f00a fa14 	bl	c4640 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   ba218:	b19f      	cbz	r7, ba242 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   ba21a:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   ba21e:	463a      	mov	r2, r7
   ba220:	eb08 0105 	add.w	r1, r8, r5
   ba224:	f00a fa0c 	bl	c4640 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   ba228:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   ba22c:	4620      	mov	r0, r4
   ba22e:	f7ff ffc7 	bl	ba1c0 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   ba232:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   ba236:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   ba238:	bf38      	it	cc
   ba23a:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   ba23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   ba242:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   ba246:	4416      	add	r6, r2
   ba248:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   ba24c:	e7ee      	b.n	ba22c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000ba250 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   ba250:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   ba252:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   ba256:	4604      	mov	r4, r0
   ba258:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   ba25a:	b113      	cbz	r3, ba262 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   ba25c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   ba260:	b953      	cbnz	r3, ba278 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   ba262:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   ba266:	b128      	cbz	r0, ba274 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   ba268:	4924      	ldr	r1, [pc, #144]	; (ba2fc <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   ba26a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba26e:	f007 f9a8 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   ba272:	2000      	movs	r0, #0
}
   ba274:	b003      	add	sp, #12
   ba276:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   ba278:	f7ff ffaf 	bl	ba1da <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   ba27c:	886b      	ldrh	r3, [r5, #2]
   ba27e:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   ba280:	b29b      	uxth	r3, r3
   ba282:	4283      	cmp	r3, r0
   ba284:	d908      	bls.n	ba298 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba286:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba28a:	b91b      	cbnz	r3, ba294 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   ba28c:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   ba290:	2800      	cmp	r0, #0
   ba292:	d0ef      	beq.n	ba274 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   ba294:	491a      	ldr	r1, [pc, #104]	; (ba300 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   ba296:	e7e8      	b.n	ba26a <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   ba298:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   ba29c:	2202      	movs	r2, #2
   ba29e:	4669      	mov	r1, sp
   ba2a0:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   ba2a2:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   ba2a6:	f7ff ffa1 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   ba2aa:	2201      	movs	r2, #1
   ba2ac:	4629      	mov	r1, r5
   ba2ae:	4620      	mov	r0, r4
   ba2b0:	f7ff ff9c 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   ba2b4:	2201      	movs	r2, #1
   ba2b6:	18a9      	adds	r1, r5, r2
   ba2b8:	4620      	mov	r0, r4
   ba2ba:	f7ff ff97 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   ba2be:	886b      	ldrh	r3, [r5, #2]
   ba2c0:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   ba2c4:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   ba2c6:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   ba2c8:	a901      	add	r1, sp, #4
   ba2ca:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   ba2cc:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   ba2d0:	f7ff ff8c 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   ba2d4:	886a      	ldrh	r2, [r5, #2]
   ba2d6:	68a9      	ldr	r1, [r5, #8]
   ba2d8:	4620      	mov	r0, r4
   ba2da:	f7ff ff87 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   ba2de:	2201      	movs	r2, #1
   ba2e0:	f105 010c 	add.w	r1, r5, #12
   ba2e4:	4620      	mov	r0, r4
   ba2e6:	f7ff ff81 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   ba2ea:	4620      	mov	r0, r4
   ba2ec:	2201      	movs	r2, #1
   ba2ee:	f105 010d 	add.w	r1, r5, #13
   ba2f2:	f7ff ff7b 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   ba2f6:	2001      	movs	r0, #1
   ba2f8:	e7bc      	b.n	ba274 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   ba2fa:	bf00      	nop
   ba2fc:	000c7223 	.word	0x000c7223
   ba300:	000c724b 	.word	0x000c724b

000ba304 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   ba304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   ba308:	780e      	ldrb	r6, [r1, #0]
   ba30a:	2e0d      	cmp	r6, #13
{
   ba30c:	4604      	mov	r4, r0
   ba30e:	460d      	mov	r5, r1
  switch (msg->cls)
   ba310:	f001 8228 	beq.w	bb764 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   ba314:	d809      	bhi.n	ba32a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   ba316:	2e02      	cmp	r6, #2
   ba318:	f000 879a 	beq.w	bb250 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   ba31c:	2e06      	cmp	r6, #6
   ba31e:	f001 81cc 	beq.w	bb6ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   ba322:	2e01      	cmp	r6, #1
   ba324:	d04f      	beq.n	ba3c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   ba326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   ba32a:	2e13      	cmp	r6, #19
   ba32c:	f001 83eb 	beq.w	bbb06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   ba330:	2e28      	cmp	r6, #40	; 0x28
   ba332:	f001 84ca 	beq.w	bbcca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   ba336:	2e10      	cmp	r6, #16
   ba338:	d1f5      	bne.n	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   ba33a:	680b      	ldr	r3, [r1, #0]
   ba33c:	4a8e      	ldr	r2, [pc, #568]	; (ba578 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   ba33e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba342:	4293      	cmp	r3, r2
   ba344:	f041 826a 	bne.w	bb81c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   ba348:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   ba34a:	2e00      	cmp	r6, #0
   ba34c:	d0eb      	beq.n	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   ba34e:	68a8      	ldr	r0, [r5, #8]
   ba350:	2100      	movs	r1, #0
   ba352:	f7fe fa21 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba356:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   ba358:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba35a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba35c:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba35e:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba360:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba362:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba364:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba366:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba368:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba36a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba36c:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba36e:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   ba370:	68a8      	ldr	r0, [r5, #8]
   ba372:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   ba374:	2108      	movs	r1, #8
   ba376:	f7fe fa0f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba37a:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba37c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba37e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba380:	210c      	movs	r1, #12
   ba382:	f7fe fa16 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba386:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba388:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba38a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba38c:	210e      	movs	r1, #14
   ba38e:	f7fe fa10 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba392:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba394:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba39a:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba39c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba39e:	6a1a      	ldr	r2, [r3, #32]
   ba3a0:	b17a      	cbz	r2, ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3a2:	7819      	ldrb	r1, [r3, #0]
   ba3a4:	0708      	lsls	r0, r1, #28
   ba3a6:	d40c      	bmi.n	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   ba3a8:	1d19      	adds	r1, r3, #4
   ba3aa:	3314      	adds	r3, #20
   ba3ac:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3b0:	f842 0b04 	str.w	r0, [r2], #4
   ba3b4:	4299      	cmp	r1, r3
   ba3b6:	d1f9      	bne.n	ba3ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3b8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   ba3ba:	7813      	ldrb	r3, [r2, #0]
   ba3bc:	f043 0308 	orr.w	r3, r3, #8
   ba3c0:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   ba3c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba3c4:	e03d      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   ba3c6:	680b      	ldr	r3, [r1, #0]
   ba3c8:	4a6c      	ldr	r2, [pc, #432]	; (ba57c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   ba3ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba3ce:	4293      	cmp	r3, r2
   ba3d0:	d141      	bne.n	ba456 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   ba3d2:	68c6      	ldr	r6, [r0, #12]
   ba3d4:	2e00      	cmp	r6, #0
   ba3d6:	d0a6      	beq.n	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   ba3d8:	68a8      	ldr	r0, [r5, #8]
   ba3da:	2100      	movs	r1, #0
   ba3dc:	f7fe f9dc 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3e0:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba3e4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3e6:	2104      	movs	r1, #4
   ba3e8:	f7fe f9d6 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba3ec:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3ee:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba3f0:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3f2:	2108      	movs	r1, #8
   ba3f4:	f7fe f9d0 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba3f8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3fa:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba3fc:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba3fe:	210c      	movs	r1, #12
   ba400:	f7fe f9ca 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba404:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   ba406:	68a8      	ldr	r0, [r5, #8]
   ba408:	68e6      	ldr	r6, [r4, #12]
   ba40a:	2110      	movs	r1, #16
   ba40c:	f7fe f9c4 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba410:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba412:	68e3      	ldr	r3, [r4, #12]
   ba414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba418:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba41a:	68e3      	ldr	r3, [r4, #12]
   ba41c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba41e:	b17a      	cbz	r2, ba440 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba420:	7819      	ldrb	r1, [r3, #0]
   ba422:	0709      	lsls	r1, r1, #28
   ba424:	d40c      	bmi.n	ba440 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   ba426:	1d19      	adds	r1, r3, #4
   ba428:	3318      	adds	r3, #24
   ba42a:	f851 0b04 	ldr.w	r0, [r1], #4
   ba42e:	f842 0b04 	str.w	r0, [r2], #4
   ba432:	4299      	cmp	r1, r3
   ba434:	d1f9      	bne.n	ba42a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba436:	68e2      	ldr	r2, [r4, #12]
   ba438:	7813      	ldrb	r3, [r2, #0]
   ba43a:	f043 0308 	orr.w	r3, r3, #8
   ba43e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba440:	68e3      	ldr	r3, [r4, #12]
   ba442:	781b      	ldrb	r3, [r3, #0]
   ba444:	075f      	lsls	r7, r3, #29
   ba446:	f57f af6e 	bpl.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   ba44a:	4629      	mov	r1, r5
   ba44c:	4620      	mov	r0, r4
}
   ba44e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   ba452:	f7ff befd 	b.w	ba250 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   ba456:	4a4a      	ldr	r2, [pc, #296]	; (ba580 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   ba458:	4293      	cmp	r3, r2
   ba45a:	d13d      	bne.n	ba4d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   ba45c:	6906      	ldr	r6, [r0, #16]
   ba45e:	2e00      	cmp	r6, #0
   ba460:	f43f af61 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   ba464:	68a8      	ldr	r0, [r5, #8]
   ba466:	2100      	movs	r1, #0
   ba468:	f7fe f996 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba46c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba46e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba470:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba472:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba474:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba476:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba478:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba47a:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba47c:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba47e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba480:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba482:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba484:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba486:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba488:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba48a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba48c:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   ba48e:	68a8      	ldr	r0, [r5, #8]
   ba490:	6926      	ldr	r6, [r4, #16]
   ba492:	2108      	movs	r1, #8
   ba494:	f7fe f980 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba498:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   ba49a:	68a8      	ldr	r0, [r5, #8]
   ba49c:	6926      	ldr	r6, [r4, #16]
   ba49e:	210c      	movs	r1, #12
   ba4a0:	f7fe f97a 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4a4:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba4a6:	6923      	ldr	r3, [r4, #16]
   ba4a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba4ac:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba4ae:	6923      	ldr	r3, [r4, #16]
   ba4b0:	6a1a      	ldr	r2, [r3, #32]
   ba4b2:	b17a      	cbz	r2, ba4d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4b4:	7819      	ldrb	r1, [r3, #0]
   ba4b6:	070e      	lsls	r6, r1, #28
   ba4b8:	d40c      	bmi.n	ba4d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   ba4ba:	1d19      	adds	r1, r3, #4
   ba4bc:	3314      	adds	r3, #20
   ba4be:	f851 0b04 	ldr.w	r0, [r1], #4
   ba4c2:	f842 0b04 	str.w	r0, [r2], #4
   ba4c6:	4299      	cmp	r1, r3
   ba4c8:	d1f9      	bne.n	ba4be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba4ca:	6922      	ldr	r2, [r4, #16]
   ba4cc:	7813      	ldrb	r3, [r2, #0]
   ba4ce:	f043 0308 	orr.w	r3, r3, #8
   ba4d2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba4d4:	6923      	ldr	r3, [r4, #16]
   ba4d6:	e7b4      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   ba4d8:	4a2a      	ldr	r2, [pc, #168]	; (ba584 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   ba4da:	4293      	cmp	r3, r2
   ba4dc:	d154      	bne.n	ba588 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   ba4de:	6946      	ldr	r6, [r0, #20]
   ba4e0:	2e00      	cmp	r6, #0
   ba4e2:	f43f af20 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   ba4e6:	68a8      	ldr	r0, [r5, #8]
   ba4e8:	2100      	movs	r1, #0
   ba4ea:	f7fe f955 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4ee:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   ba4f0:	68a8      	ldr	r0, [r5, #8]
   ba4f2:	6966      	ldr	r6, [r4, #20]
   ba4f4:	2104      	movs	r1, #4
   ba4f6:	f7fe f95c 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4fa:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   ba4fc:	68a8      	ldr	r0, [r5, #8]
   ba4fe:	6966      	ldr	r6, [r4, #20]
   ba500:	2106      	movs	r1, #6
   ba502:	f7fe f956 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba506:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   ba508:	68a8      	ldr	r0, [r5, #8]
   ba50a:	6966      	ldr	r6, [r4, #20]
   ba50c:	2108      	movs	r1, #8
   ba50e:	f7fe f950 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba512:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   ba514:	68a8      	ldr	r0, [r5, #8]
   ba516:	6966      	ldr	r6, [r4, #20]
   ba518:	210a      	movs	r1, #10
   ba51a:	f7fe f94a 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba51e:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   ba520:	68a8      	ldr	r0, [r5, #8]
   ba522:	6966      	ldr	r6, [r4, #20]
   ba524:	210c      	movs	r1, #12
   ba526:	f7fe f944 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba52a:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   ba52c:	68a8      	ldr	r0, [r5, #8]
   ba52e:	6966      	ldr	r6, [r4, #20]
   ba530:	210e      	movs	r1, #14
   ba532:	f7fe f93e 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba536:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   ba538:	68a8      	ldr	r0, [r5, #8]
   ba53a:	6966      	ldr	r6, [r4, #20]
   ba53c:	2110      	movs	r1, #16
   ba53e:	f7fe f938 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba542:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba544:	6963      	ldr	r3, [r4, #20]
   ba546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba54a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba54c:	6963      	ldr	r3, [r4, #20]
   ba54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba550:	b17a      	cbz	r2, ba572 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba552:	7819      	ldrb	r1, [r3, #0]
   ba554:	0708      	lsls	r0, r1, #28
   ba556:	d40c      	bmi.n	ba572 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   ba558:	1d19      	adds	r1, r3, #4
   ba55a:	3318      	adds	r3, #24
   ba55c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba560:	f842 0b04 	str.w	r0, [r2], #4
   ba564:	4299      	cmp	r1, r3
   ba566:	d1f9      	bne.n	ba55c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   ba568:	6962      	ldr	r2, [r4, #20]
   ba56a:	7813      	ldrb	r3, [r2, #0]
   ba56c:	f043 0308 	orr.w	r3, r3, #8
   ba570:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   ba572:	6963      	ldr	r3, [r4, #20]
   ba574:	e765      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba576:	bf00      	nop
   ba578:	00101400 	.word	0x00101400
   ba57c:	00140100 	.word	0x00140100
   ba580:	00100300 	.word	0x00100300
   ba584:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   ba588:	4a8c      	ldr	r2, [pc, #560]	; (ba7bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   ba58a:	4293      	cmp	r3, r2
   ba58c:	d149      	bne.n	ba622 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   ba58e:	69c6      	ldr	r6, [r0, #28]
   ba590:	2e00      	cmp	r6, #0
   ba592:	f43f aec8 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   ba596:	68a8      	ldr	r0, [r5, #8]
   ba598:	2100      	movs	r1, #0
   ba59a:	f7fe f8fd 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba59e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba5a0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba5a2:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   ba5a4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba5a6:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5a8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba5aa:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ac:	2108      	movs	r1, #8
   ba5ae:	f7fe f8f3 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba5b2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba5b6:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b8:	210c      	movs	r1, #12
   ba5ba:	f7fe f8ed 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba5be:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5c0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba5c2:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5c4:	2110      	movs	r1, #16
   ba5c6:	f7fe f8e7 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba5ca:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   ba5cc:	68a8      	ldr	r0, [r5, #8]
   ba5ce:	69e6      	ldr	r6, [r4, #28]
   ba5d0:	2114      	movs	r1, #20
   ba5d2:	f7fe f8e1 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5d6:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   ba5d8:	68a8      	ldr	r0, [r5, #8]
   ba5da:	69e6      	ldr	r6, [r4, #28]
   ba5dc:	2118      	movs	r1, #24
   ba5de:	f7fe f8db 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5e2:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   ba5e4:	68a8      	ldr	r0, [r5, #8]
   ba5e6:	69e6      	ldr	r6, [r4, #28]
   ba5e8:	211c      	movs	r1, #28
   ba5ea:	f7fe f8d5 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5ee:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba5f0:	69e3      	ldr	r3, [r4, #28]
   ba5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5f6:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5f8:	69e3      	ldr	r3, [r4, #28]
   ba5fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   ba5fc:	b17a      	cbz	r2, ba61e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5fe:	7819      	ldrb	r1, [r3, #0]
   ba600:	0709      	lsls	r1, r1, #28
   ba602:	d40c      	bmi.n	ba61e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   ba604:	1d19      	adds	r1, r3, #4
   ba606:	3324      	adds	r3, #36	; 0x24
   ba608:	f851 0b04 	ldr.w	r0, [r1], #4
   ba60c:	f842 0b04 	str.w	r0, [r2], #4
   ba610:	4299      	cmp	r1, r3
   ba612:	d1f9      	bne.n	ba608 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba614:	69e2      	ldr	r2, [r4, #28]
   ba616:	7813      	ldrb	r3, [r2, #0]
   ba618:	f043 0308 	orr.w	r3, r3, #8
   ba61c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   ba61e:	69e3      	ldr	r3, [r4, #28]
   ba620:	e70f      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   ba622:	4a67      	ldr	r2, [pc, #412]	; (ba7c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   ba624:	4293      	cmp	r3, r2
   ba626:	f040 80cd 	bne.w	ba7c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   ba62a:	6a06      	ldr	r6, [r0, #32]
   ba62c:	2e00      	cmp	r6, #0
   ba62e:	f43f ae7a 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   ba632:	68a8      	ldr	r0, [r5, #8]
   ba634:	2100      	movs	r1, #0
   ba636:	f7fe f8af 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba63a:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   ba63c:	68a8      	ldr	r0, [r5, #8]
   ba63e:	6a26      	ldr	r6, [r4, #32]
   ba640:	2104      	movs	r1, #4
   ba642:	f7fe f8b6 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba646:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   ba648:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba64a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba64c:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba64e:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba650:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba652:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba654:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba656:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba658:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba65a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba65c:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba65e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba660:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba662:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba664:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba666:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba668:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba66a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba66c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba66e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba670:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba672:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba674:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba676:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   ba678:	210c      	movs	r1, #12
   ba67a:	68a8      	ldr	r0, [r5, #8]
   ba67c:	6a26      	ldr	r6, [r4, #32]
   ba67e:	f7fe f88b 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba682:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba684:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba686:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba688:	2110      	movs	r1, #16
   ba68a:	f7fe f885 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba68e:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba690:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba692:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba694:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba696:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba698:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba69a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba69c:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba69e:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba6a0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba6a2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba6a4:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba6a6:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba6a8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba6aa:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba6ac:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba6ae:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba6b2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6b4:	2118      	movs	r1, #24
   ba6b6:	f7fe f86f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba6ba:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6bc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba6be:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6c0:	211c      	movs	r1, #28
   ba6c2:	f7fe f869 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba6c6:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6c8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba6ca:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6cc:	2120      	movs	r1, #32
   ba6ce:	f7fe f863 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba6d2:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6d4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba6d6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6d8:	2124      	movs	r1, #36	; 0x24
   ba6da:	f7fe f85d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba6de:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba6e0:	68a8      	ldr	r0, [r5, #8]
   ba6e2:	6a26      	ldr	r6, [r4, #32]
   ba6e4:	2128      	movs	r1, #40	; 0x28
   ba6e6:	f7fe f857 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6ea:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba6ec:	6a26      	ldr	r6, [r4, #32]
   ba6ee:	68a8      	ldr	r0, [r5, #8]
   ba6f0:	212c      	movs	r1, #44	; 0x2c
   ba6f2:	f7fe f851 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6f6:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba6fa:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6fc:	2130      	movs	r1, #48	; 0x30
   ba6fe:	f7fe f84b 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba702:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba704:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba706:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba708:	2134      	movs	r1, #52	; 0x34
   ba70a:	f7fe f845 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba70e:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba710:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba712:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba714:	2138      	movs	r1, #56	; 0x38
   ba716:	f7fe f83f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba71a:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba71c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba71e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba720:	213c      	movs	r1, #60	; 0x3c
   ba722:	f7fe f839 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba726:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba728:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba72a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba72c:	2140      	movs	r1, #64	; 0x40
   ba72e:	f7fe f833 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba732:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba734:	68a8      	ldr	r0, [r5, #8]
   ba736:	6a26      	ldr	r6, [r4, #32]
   ba738:	2144      	movs	r1, #68	; 0x44
   ba73a:	f7fe f82d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba73e:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba740:	68a8      	ldr	r0, [r5, #8]
   ba742:	6a26      	ldr	r6, [r4, #32]
   ba744:	2148      	movs	r1, #72	; 0x48
   ba746:	f7fe f827 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba74a:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba74c:	68a8      	ldr	r0, [r5, #8]
   ba74e:	6a26      	ldr	r6, [r4, #32]
   ba750:	214c      	movs	r1, #76	; 0x4c
   ba752:	f7fe f82e 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba756:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba75a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba75c:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba75e:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba762:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba766:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba768:	68a8      	ldr	r0, [r5, #8]
   ba76a:	2154      	movs	r1, #84	; 0x54
   ba76c:	f7fe f814 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba770:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba772:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba774:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba776:	2158      	movs	r1, #88	; 0x58
   ba778:	f7fe f81b 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba77c:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba780:	68a8      	ldr	r0, [r5, #8]
   ba782:	6a26      	ldr	r6, [r4, #32]
   ba784:	215a      	movs	r1, #90	; 0x5a
   ba786:	f7fe f814 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba78a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba78e:	6a22      	ldr	r2, [r4, #32]
   ba790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba794:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba796:	6a22      	ldr	r2, [r4, #32]
   ba798:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba79a:	6a21      	ldr	r1, [r4, #32]
   ba79c:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba79e:	b158      	cbz	r0, ba7b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba7a0:	780b      	ldrb	r3, [r1, #0]
   ba7a2:	071b      	lsls	r3, r3, #28
   ba7a4:	d408      	bmi.n	ba7b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba7a6:	225c      	movs	r2, #92	; 0x5c
   ba7a8:	3104      	adds	r1, #4
   ba7aa:	f009 ff49 	bl	c4640 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba7ae:	6a22      	ldr	r2, [r4, #32]
   ba7b0:	7813      	ldrb	r3, [r2, #0]
   ba7b2:	f043 0308 	orr.w	r3, r3, #8
   ba7b6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba7b8:	6a23      	ldr	r3, [r4, #32]
   ba7ba:	e642      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba7bc:	00200500 	.word	0x00200500
   ba7c0:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba7c4:	4a8e      	ldr	r2, [pc, #568]	; (baa00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba7c6:	4293      	cmp	r3, r2
   ba7c8:	d137      	bne.n	ba83a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba7ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba7cc:	2b00      	cmp	r3, #0
   ba7ce:	f43f adaa 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba7d2:	688a      	ldr	r2, [r1, #8]
   ba7d4:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba7d6:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba7d8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba7da:	68a8      	ldr	r0, [r5, #8]
   ba7dc:	2104      	movs	r1, #4
   ba7de:	f7fd ffdb 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7e2:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba7e4:	68a8      	ldr	r0, [r5, #8]
   ba7e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba7e8:	2108      	movs	r1, #8
   ba7ea:	f7fd ffd5 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7ee:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba7f0:	68a8      	ldr	r0, [r5, #8]
   ba7f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba7f4:	210c      	movs	r1, #12
   ba7f6:	f7fd ffcf 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7fa:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba7fc:	68a8      	ldr	r0, [r5, #8]
   ba7fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba800:	2110      	movs	r1, #16
   ba802:	f7fd ffc9 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba806:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba808:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba80e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba810:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba814:	b17a      	cbz	r2, ba836 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba816:	7819      	ldrb	r1, [r3, #0]
   ba818:	070f      	lsls	r7, r1, #28
   ba81a:	d40c      	bmi.n	ba836 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba81c:	1d19      	adds	r1, r3, #4
   ba81e:	3318      	adds	r3, #24
   ba820:	f851 0b04 	ldr.w	r0, [r1], #4
   ba824:	f842 0b04 	str.w	r0, [r2], #4
   ba828:	4299      	cmp	r1, r3
   ba82a:	d1f9      	bne.n	ba820 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba82c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba82e:	7813      	ldrb	r3, [r2, #0]
   ba830:	f043 0308 	orr.w	r3, r3, #8
   ba834:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba836:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba838:	e603      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba83a:	4a72      	ldr	r2, [pc, #456]	; (baa04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba83c:	4293      	cmp	r3, r2
   ba83e:	d139      	bne.n	ba8b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba840:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba842:	2e00      	cmp	r6, #0
   ba844:	f43f ad6f 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba848:	68a8      	ldr	r0, [r5, #8]
   ba84a:	2100      	movs	r1, #0
   ba84c:	f7fd ffa4 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba850:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba852:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba856:	2104      	movs	r1, #4
   ba858:	f7fd ff9e 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba85c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba85e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba862:	2108      	movs	r1, #8
   ba864:	f7fd ff98 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba868:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba86a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba86c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba86e:	210c      	movs	r1, #12
   ba870:	f7fd ff92 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba874:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba876:	68a8      	ldr	r0, [r5, #8]
   ba878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba87a:	2110      	movs	r1, #16
   ba87c:	f7fd ff8c 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba880:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba888:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba88a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba88e:	b17a      	cbz	r2, ba8b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba890:	7819      	ldrb	r1, [r3, #0]
   ba892:	070e      	lsls	r6, r1, #28
   ba894:	d40c      	bmi.n	ba8b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba896:	1d19      	adds	r1, r3, #4
   ba898:	3318      	adds	r3, #24
   ba89a:	f851 0b04 	ldr.w	r0, [r1], #4
   ba89e:	f842 0b04 	str.w	r0, [r2], #4
   ba8a2:	4299      	cmp	r1, r3
   ba8a4:	d1f9      	bne.n	ba89a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba8a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba8a8:	7813      	ldrb	r3, [r2, #0]
   ba8aa:	f043 0308 	orr.w	r3, r3, #8
   ba8ae:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba8b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba8b2:	e5c6      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba8b4:	4a54      	ldr	r2, [pc, #336]	; (baa08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba8b6:	4293      	cmp	r3, r2
   ba8b8:	d151      	bne.n	ba95e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba8ba:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba8bc:	2e00      	cmp	r6, #0
   ba8be:	f43f ad32 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba8c2:	68a8      	ldr	r0, [r5, #8]
   ba8c4:	2100      	movs	r1, #0
   ba8c6:	f7fd ff67 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8ca:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba8ce:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8d0:	2104      	movs	r1, #4
   ba8d2:	f7fd ff61 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba8d6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba8da:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8dc:	2108      	movs	r1, #8
   ba8de:	f7fd ff5b 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba8e2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8e4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba8e6:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba8e8:	210c      	movs	r1, #12
   ba8ea:	f7fd ff55 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba8ee:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba8f0:	68a8      	ldr	r0, [r5, #8]
   ba8f2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba8f4:	2110      	movs	r1, #16
   ba8f6:	f7fd ff4f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8fa:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba8fc:	68a8      	ldr	r0, [r5, #8]
   ba8fe:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba900:	2114      	movs	r1, #20
   ba902:	f7fd ff49 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba906:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba908:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba90a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba90c:	2118      	movs	r1, #24
   ba90e:	f7fd ff43 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba912:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba914:	68a8      	ldr	r0, [r5, #8]
   ba916:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba918:	211c      	movs	r1, #28
   ba91a:	f7fd ff3d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba91e:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba920:	68a8      	ldr	r0, [r5, #8]
   ba922:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba924:	2120      	movs	r1, #32
   ba926:	f7fd ff37 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba92a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba92c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba92e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba932:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba934:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba938:	b17a      	cbz	r2, ba95a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba93a:	7819      	ldrb	r1, [r3, #0]
   ba93c:	0708      	lsls	r0, r1, #28
   ba93e:	d40c      	bmi.n	ba95a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba940:	1d19      	adds	r1, r3, #4
   ba942:	3328      	adds	r3, #40	; 0x28
   ba944:	f851 0b04 	ldr.w	r0, [r1], #4
   ba948:	f842 0b04 	str.w	r0, [r2], #4
   ba94c:	4299      	cmp	r1, r3
   ba94e:	d1f9      	bne.n	ba944 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba950:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba952:	7813      	ldrb	r3, [r2, #0]
   ba954:	f043 0308 	orr.w	r3, r3, #8
   ba958:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba95a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba95c:	e571      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba95e:	4a2b      	ldr	r2, [pc, #172]	; (baa0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba960:	4293      	cmp	r3, r2
   ba962:	d155      	bne.n	baa10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba964:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba966:	2b00      	cmp	r3, #0
   ba968:	f43f acdd 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba96c:	688a      	ldr	r2, [r1, #8]
   ba96e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba970:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba972:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba974:	68a8      	ldr	r0, [r5, #8]
   ba976:	2104      	movs	r1, #4
   ba978:	f7fd ff0e 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba97c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba97e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba980:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba982:	2108      	movs	r1, #8
   ba984:	f7fd ff08 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba988:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba98a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba98c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba98e:	210c      	movs	r1, #12
   ba990:	f7fd ff02 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba994:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba996:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba998:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba99a:	2110      	movs	r1, #16
   ba99c:	f7fd fefc 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba9a0:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba9a2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba9a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba9a6:	7d12      	ldrb	r2, [r2, #20]
   ba9a8:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba9aa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba9ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba9ae:	7d52      	ldrb	r2, [r2, #21]
   ba9b0:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba9b2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba9b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba9b6:	7d92      	ldrb	r2, [r2, #22]
   ba9b8:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba9ba:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba9bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba9be:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba9c0:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba9c2:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba9c4:	68a8      	ldr	r0, [r5, #8]
   ba9c6:	2118      	movs	r1, #24
   ba9c8:	f7fd fee6 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9cc:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba9ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba9d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba9d4:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba9d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba9da:	b17a      	cbz	r2, ba9fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9dc:	7819      	ldrb	r1, [r3, #0]
   ba9de:	0709      	lsls	r1, r1, #28
   ba9e0:	d40c      	bmi.n	ba9fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba9e2:	1d19      	adds	r1, r3, #4
   ba9e4:	3320      	adds	r3, #32
   ba9e6:	f851 0b04 	ldr.w	r0, [r1], #4
   ba9ea:	f842 0b04 	str.w	r0, [r2], #4
   ba9ee:	4299      	cmp	r1, r3
   ba9f0:	d1f9      	bne.n	ba9e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba9f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba9f4:	7813      	ldrb	r3, [r2, #0]
   ba9f6:	f043 0308 	orr.w	r3, r3, #8
   ba9fa:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba9fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba9fe:	e520      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baa00:	00140900 	.word	0x00140900
   baa04:	00141100 	.word	0x00141100
   baa08:	00241200 	.word	0x00241200
   baa0c:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   baa10:	4a30      	ldr	r2, [pc, #192]	; (baad4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   baa12:	4293      	cmp	r3, r2
   baa14:	d160      	bne.n	baad8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   baa16:	6b83      	ldr	r3, [r0, #56]	; 0x38
   baa18:	2b00      	cmp	r3, #0
   baa1a:	f43f ac84 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   baa1e:	688a      	ldr	r2, [r1, #8]
   baa20:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   baa22:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   baa24:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   baa26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   baa28:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   baa2a:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   baa2c:	6b86      	ldr	r6, [r0, #56]	; 0x38
   baa2e:	68a8      	ldr	r0, [r5, #8]
   baa30:	2104      	movs	r1, #4
   baa32:	f7fd feb1 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa36:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa38:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   baa3a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa3c:	2108      	movs	r1, #8
   baa3e:	f7fd feab 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   baa42:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa44:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   baa46:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa48:	210c      	movs	r1, #12
   baa4a:	f7fd fea5 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   baa4e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa50:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   baa52:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa54:	2110      	movs	r1, #16
   baa56:	f7fd fe9f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   baa5a:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa5c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   baa5e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa60:	2114      	movs	r1, #20
   baa62:	f7fd fe99 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   baa66:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   baa68:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   baa6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa6c:	7e12      	ldrb	r2, [r2, #24]
   baa6e:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   baa70:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   baa72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa74:	7e52      	ldrb	r2, [r2, #25]
   baa76:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   baa78:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   baa7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa7c:	7e92      	ldrb	r2, [r2, #26]
   baa7e:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   baa80:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   baa82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baa84:	7ed2      	ldrb	r2, [r2, #27]
   baa86:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   baa88:	68a8      	ldr	r0, [r5, #8]
   baa8a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   baa8c:	211c      	movs	r1, #28
   baa8e:	f7fd fe83 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa92:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   baa94:	68a8      	ldr	r0, [r5, #8]
   baa96:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   baa98:	2120      	movs	r1, #32
   baa9a:	f7fd fe7d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa9e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baaa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baaa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baaa6:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baaa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baaaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   baaac:	b17a      	cbz	r2, baace <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baaae:	7819      	ldrb	r1, [r3, #0]
   baab0:	070f      	lsls	r7, r1, #28
   baab2:	d40c      	bmi.n	baace <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   baab4:	1d19      	adds	r1, r3, #4
   baab6:	3328      	adds	r3, #40	; 0x28
   baab8:	f851 0b04 	ldr.w	r0, [r1], #4
   baabc:	f842 0b04 	str.w	r0, [r2], #4
   baac0:	4299      	cmp	r1, r3
   baac2:	d1f9      	bne.n	baab8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   baac4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   baac6:	7813      	ldrb	r3, [r2, #0]
   baac8:	f043 0308 	orr.w	r3, r3, #8
   baacc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   baace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   baad0:	e4b7      	b.n	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baad2:	bf00      	nop
   baad4:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   baad8:	4aa1      	ldr	r2, [pc, #644]	; (bad60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   baada:	4293      	cmp	r3, r2
   baadc:	f040 80f0 	bne.w	bacc0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   baae0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   baae2:	2e00      	cmp	r6, #0
   baae4:	f43f ac1f 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   baae8:	68a8      	ldr	r0, [r5, #8]
   baaea:	2100      	movs	r1, #0
   baaec:	f7fd fe54 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaf0:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baaf2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   baaf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baaf6:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   baaf8:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baafa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   baafc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baafe:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   bab00:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   bab02:	68a8      	ldr	r0, [r5, #8]
   bab04:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab06:	2106      	movs	r1, #6
   bab08:	f7fd fe53 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab0c:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bab0e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   bab10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab12:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   bab14:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bab16:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   bab18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab1a:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   bab1c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bab1e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   bab20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab22:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   bab24:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bab26:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   bab28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab2a:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   bab2c:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   bab2e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   bab30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab32:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   bab34:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   bab36:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab38:	68a8      	ldr	r0, [r5, #8]
   bab3a:	2110      	movs	r1, #16
   bab3c:	f7fd fe2c 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab40:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab42:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   bab44:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab46:	2114      	movs	r1, #20
   bab48:	f7fd fe26 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   bab4c:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   bab4e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   bab50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab52:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   bab54:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   bab56:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   bab58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab5a:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   bab5c:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   bab5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   bab60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab62:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   bab64:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   bab66:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   bab68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   bab6a:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   bab6c:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   bab70:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab72:	211c      	movs	r1, #28
   bab74:	f7fd fe10 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   bab78:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab7a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   bab7c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab7e:	2120      	movs	r1, #32
   bab80:	f7fd fe0a 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   bab84:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab86:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   bab88:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab8a:	2124      	movs	r1, #36	; 0x24
   bab8c:	f7fd fe04 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   bab90:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab92:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   bab94:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab96:	2128      	movs	r1, #40	; 0x28
   bab98:	f7fd fdfe 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   bab9c:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   bab9e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baba0:	68a8      	ldr	r0, [r5, #8]
   baba2:	212c      	movs	r1, #44	; 0x2c
   baba4:	f7fd fdf8 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baba8:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   babaa:	68a8      	ldr	r0, [r5, #8]
   babac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   babae:	2130      	movs	r1, #48	; 0x30
   babb0:	f7fd fdf2 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babb4:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babb6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   babb8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babba:	2134      	movs	r1, #52	; 0x34
   babbc:	f7fd fdec 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   babc0:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babc2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   babc4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babc6:	2138      	movs	r1, #56	; 0x38
   babc8:	f7fd fde6 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   babcc:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babce:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   babd0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babd2:	213c      	movs	r1, #60	; 0x3c
   babd4:	f7fd fde0 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   babd8:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babda:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   babdc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babde:	2140      	movs	r1, #64	; 0x40
   babe0:	f7fd fdda 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   babe4:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   babe6:	68a8      	ldr	r0, [r5, #8]
   babe8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   babea:	2144      	movs	r1, #68	; 0x44
   babec:	f7fd fdd4 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babf0:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babf2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   babf4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babf6:	2148      	movs	r1, #72	; 0x48
   babf8:	f7fd fdce 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   babfc:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babfe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   bac00:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac02:	214c      	movs	r1, #76	; 0x4c
   bac04:	f7fd fdc8 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   bac08:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac0a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   bac0c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac0e:	2150      	movs	r1, #80	; 0x50
   bac10:	f7fd fdc2 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   bac14:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac16:	2154      	movs	r1, #84	; 0x54
   bac18:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   bac1a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac1c:	f7fd fdbc 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   bac20:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   bac22:	68a8      	ldr	r0, [r5, #8]
   bac24:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac26:	2158      	movs	r1, #88	; 0x58
   bac28:	f7fd fdc3 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac2c:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   bac30:	68a8      	ldr	r0, [r5, #8]
   bac32:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac34:	215a      	movs	r1, #90	; 0x5a
   bac36:	f7fd fdbc 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac3a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   bac3e:	68a8      	ldr	r0, [r5, #8]
   bac40:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac42:	215c      	movs	r1, #92	; 0x5c
   bac44:	f7fd fdb5 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac48:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bac4c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   bac4e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bac50:	215e      	movs	r1, #94	; 0x5e
   bac52:	f7fd fdae 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   bac56:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   bac5a:	68a8      	ldr	r0, [r5, #8]
   bac5c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac5e:	2160      	movs	r1, #96	; 0x60
   bac60:	f7fd fda7 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac64:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   bac68:	68a8      	ldr	r0, [r5, #8]
   bac6a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac6c:	2162      	movs	r1, #98	; 0x62
   bac6e:	f7fd fda0 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac72:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   bac76:	68a8      	ldr	r0, [r5, #8]
   bac78:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac7a:	2164      	movs	r1, #100	; 0x64
   bac7c:	f7fd fd8c 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac80:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   bac82:	68a8      	ldr	r0, [r5, #8]
   bac84:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bac86:	2168      	movs	r1, #104	; 0x68
   bac88:	f7fd fd86 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac8c:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   bac8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bac90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bac94:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   bac96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bac98:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac9a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   bac9c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   baca0:	b158      	cbz	r0, bacba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baca2:	780b      	ldrb	r3, [r1, #0]
   baca4:	071e      	lsls	r6, r3, #28
   baca6:	d408      	bmi.n	bacba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   baca8:	2274      	movs	r2, #116	; 0x74
   bacaa:	3104      	adds	r1, #4
   bacac:	f009 fcc8 	bl	c4640 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   bacb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bacb2:	7813      	ldrb	r3, [r2, #0]
   bacb4:	f043 0308 	orr.w	r3, r3, #8
   bacb8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   bacba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bacbc:	f7ff bbc1 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   bacc0:	4a28      	ldr	r2, [pc, #160]	; (bad64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   bacc2:	4293      	cmp	r3, r2
   bacc4:	d150      	bne.n	bad68 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   bacc6:	6a86      	ldr	r6, [r0, #40]	; 0x28
   bacc8:	2e00      	cmp	r6, #0
   bacca:	f43f ab2c 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   bacce:	68a8      	ldr	r0, [r5, #8]
   bacd0:	2100      	movs	r1, #0
   bacd2:	f7fd fd61 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacd6:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   bacd8:	68a8      	ldr	r0, [r5, #8]
   bacda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   bacdc:	2104      	movs	r1, #4
   bacde:	f7fd fd5b 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bace2:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bace4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   bace6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bace8:	2108      	movs	r1, #8
   bacea:	f7fd fd55 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   bacee:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   bacf0:	68a8      	ldr	r0, [r5, #8]
   bacf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   bacf4:	210c      	movs	r1, #12
   bacf6:	f7fd fd5c 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bacfa:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   bacfc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   bacfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bad00:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   bad02:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   bad04:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   bad06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bad08:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   bad0a:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   bad0c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   bad0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bad10:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   bad12:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bad14:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   bad16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bad18:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   bad1a:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   bad1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   bad1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bad20:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   bad22:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   bad24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bad26:	68aa      	ldr	r2, [r5, #8]
   bad28:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   bad2a:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bad2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bad32:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bad34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bad36:	6a1a      	ldr	r2, [r3, #32]
   bad38:	b17a      	cbz	r2, bad5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad3a:	7819      	ldrb	r1, [r3, #0]
   bad3c:	0708      	lsls	r0, r1, #28
   bad3e:	d40c      	bmi.n	bad5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   bad40:	1d19      	adds	r1, r3, #4
   bad42:	3318      	adds	r3, #24
   bad44:	f851 0b04 	ldr.w	r0, [r1], #4
   bad48:	f842 0b04 	str.w	r0, [r2], #4
   bad4c:	4299      	cmp	r1, r3
   bad4e:	d1f9      	bne.n	bad44 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   bad50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   bad52:	7813      	ldrb	r3, [r2, #0]
   bad54:	f043 0308 	orr.w	r3, r3, #8
   bad58:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   bad5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bad5c:	f7ff bb71 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bad60:	00741700 	.word	0x00741700
   bad64:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   bad68:	4a84      	ldr	r2, [pc, #528]	; (baf7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   bad6a:	4293      	cmp	r3, r2
   bad6c:	d13a      	bne.n	bade4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   bad6e:	6c06      	ldr	r6, [r0, #64]	; 0x40
   bad70:	2e00      	cmp	r6, #0
   bad72:	f43f aad8 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   bad76:	68a8      	ldr	r0, [r5, #8]
   bad78:	2100      	movs	r1, #0
   bad7a:	f7fd fd0d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad7e:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad80:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   bad82:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad84:	2104      	movs	r1, #4
   bad86:	f7fd fd07 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   bad8a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad8c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   bad8e:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad90:	2108      	movs	r1, #8
   bad92:	f7fd fd01 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   bad96:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   bad98:	68a8      	ldr	r0, [r5, #8]
   bad9a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   bad9c:	210c      	movs	r1, #12
   bad9e:	f7fd fcfb 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bada2:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   bada4:	68a8      	ldr	r0, [r5, #8]
   bada6:	6c26      	ldr	r6, [r4, #64]	; 0x40
   bada8:	2110      	movs	r1, #16
   badaa:	f7fd fcf5 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badae:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   badb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   badb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   badb6:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   badb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   badba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   badbc:	b17a      	cbz	r2, badde <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   badbe:	7819      	ldrb	r1, [r3, #0]
   badc0:	0709      	lsls	r1, r1, #28
   badc2:	d40c      	bmi.n	badde <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   badc4:	1d19      	adds	r1, r3, #4
   badc6:	3318      	adds	r3, #24
   badc8:	f851 0b04 	ldr.w	r0, [r1], #4
   badcc:	f842 0b04 	str.w	r0, [r2], #4
   badd0:	4299      	cmp	r1, r3
   badd2:	d1f9      	bne.n	badc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   badd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   badd6:	7813      	ldrb	r3, [r2, #0]
   badd8:	f043 0308 	orr.w	r3, r3, #8
   baddc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   badde:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bade0:	f7ff bb2f 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   bade4:	4a66      	ldr	r2, [pc, #408]	; (baf80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   bade6:	4293      	cmp	r3, r2
   bade8:	d138      	bne.n	bae5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   badea:	6c46      	ldr	r6, [r0, #68]	; 0x44
   badec:	2e00      	cmp	r6, #0
   badee:	f43f aa9a 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   badf2:	68a8      	ldr	r0, [r5, #8]
   badf4:	2100      	movs	r1, #0
   badf6:	f7fd fccf 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badfa:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   badfc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   badfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bae00:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   bae02:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bae04:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bae06:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bae08:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bae0a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bae0c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   bae0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bae10:	7a52      	ldrb	r2, [r2, #9]
   bae12:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bae14:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bae16:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bae18:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bae1a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bae1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   bae1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bae20:	7ad2      	ldrb	r2, [r2, #11]
   bae22:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae24:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   bae26:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae28:	210c      	movs	r1, #12
   bae2a:	f7fd fcb5 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   bae2e:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   bae30:	68a8      	ldr	r0, [r5, #8]
   bae32:	6c66      	ldr	r6, [r4, #68]	; 0x44
   bae34:	2110      	movs	r1, #16
   bae36:	f7fd fcbc 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae3a:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   bae3c:	68a8      	ldr	r0, [r5, #8]
   bae3e:	6c66      	ldr	r6, [r4, #68]	; 0x44
   bae40:	2112      	movs	r1, #18
   bae42:	f7fd fcb6 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae46:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   bae48:	68ab      	ldr	r3, [r5, #8]
   bae4a:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   bae4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bae4e:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bae50:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bae52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bae56:	61da      	str	r2, [r3, #28]
   bae58:	f7ff ba65 	b.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   bae5c:	4a49      	ldr	r2, [pc, #292]	; (baf84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   bae5e:	4293      	cmp	r3, r2
   bae60:	d162      	bne.n	baf28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   bae62:	6c83      	ldr	r3, [r0, #72]	; 0x48
   bae64:	2b00      	cmp	r3, #0
   bae66:	f43f aa5e 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bae6a:	688a      	ldr	r2, [r1, #8]
   bae6c:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   bae6e:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   bae70:	6c86      	ldr	r6, [r0, #72]	; 0x48
   bae72:	68a8      	ldr	r0, [r5, #8]
   bae74:	2104      	movs	r1, #4
   bae76:	f7fd fc8f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae7a:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   bae7c:	68a8      	ldr	r0, [r5, #8]
   bae7e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   bae80:	2108      	movs	r1, #8
   bae82:	f7fd fc89 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae86:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae88:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   bae8a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae8c:	210c      	movs	r1, #12
   bae8e:	f7fd fc83 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   bae92:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae94:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   bae96:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bae98:	2110      	movs	r1, #16
   bae9a:	f7fd fc7d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   bae9e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baea0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   baea2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baea4:	2114      	movs	r1, #20
   baea6:	f7fd fc77 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   baeaa:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   baeac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   baeae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baeb0:	7e12      	ldrb	r2, [r2, #24]
   baeb2:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   baeb4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   baeb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baeb8:	7e52      	ldrb	r2, [r2, #25]
   baeba:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   baebc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   baebe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baec0:	7e92      	ldrb	r2, [r2, #26]
   baec2:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   baec4:	211c      	movs	r1, #28
   baec6:	68a8      	ldr	r0, [r5, #8]
   baec8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   baeca:	f7fd fc65 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baece:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   baed0:	68a8      	ldr	r0, [r5, #8]
   baed2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   baed4:	2120      	movs	r1, #32
   baed6:	f7fd fc5f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baeda:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   baedc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   baede:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baee0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   baee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baee8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   baeea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baeec:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   baef0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baef4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baefa:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baefc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baefe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   baf00:	b17a      	cbz	r2, baf22 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baf02:	7819      	ldrb	r1, [r3, #0]
   baf04:	070f      	lsls	r7, r1, #28
   baf06:	d40c      	bmi.n	baf22 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   baf08:	1d19      	adds	r1, r3, #4
   baf0a:	332c      	adds	r3, #44	; 0x2c
   baf0c:	f851 0b04 	ldr.w	r0, [r1], #4
   baf10:	f842 0b04 	str.w	r0, [r2], #4
   baf14:	4299      	cmp	r1, r3
   baf16:	d1f9      	bne.n	baf0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   baf18:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   baf1a:	7813      	ldrb	r3, [r2, #0]
   baf1c:	f043 0308 	orr.w	r3, r3, #8
   baf20:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   baf22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   baf24:	f7ff ba8d 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   baf28:	784a      	ldrb	r2, [r1, #1]
   baf2a:	2a35      	cmp	r2, #53	; 0x35
   baf2c:	d17f      	bne.n	bb02e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   baf2e:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   baf30:	2e00      	cmp	r6, #0
   baf32:	f43f a9f8 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   baf36:	68a8      	ldr	r0, [r5, #8]
   baf38:	2100      	movs	r1, #0
   baf3a:	f7fd fc2d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf3e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baf40:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   baf42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baf44:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   baf46:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baf48:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   baf4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baf4c:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   baf4e:	725a      	strb	r2, [r3, #9]
   baf50:	f04f 0808 	mov.w	r8, #8
   baf54:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baf56:	f04f 0a0c 	mov.w	sl, #12
   baf5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baf5c:	7a59      	ldrb	r1, [r3, #9]
   baf5e:	b2ba      	uxth	r2, r7
   baf60:	4291      	cmp	r1, r2
   baf62:	d811      	bhi.n	baf88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   baf64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baf66:	2201      	movs	r2, #1
   baf68:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf6c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   baf6e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   baf72:	2800      	cmp	r0, #0
   baf74:	d14d      	bne.n	bb012 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   baf76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   baf78:	f7ff ba63 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baf7c:	00142200 	.word	0x00142200
   baf80:	00182600 	.word	0x00182600
   baf84:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baf88:	886a      	ldrh	r2, [r5, #2]
   baf8a:	fb0a f607 	mul.w	r6, sl, r7
   baf8e:	3a08      	subs	r2, #8
   baf90:	42b2      	cmp	r2, r6
   baf92:	dde7      	ble.n	baf64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   baf94:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   baf96:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   baf98:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   baf9c:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baf9e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bafa0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bafa2:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bafa4:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bafa6:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bafa8:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bafaa:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bafac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bafae:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bafb0:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bafb2:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   bafb4:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bafb6:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bafb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bafba:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   bafbc:	4433      	add	r3, r6
   bafbe:	78d2      	ldrb	r2, [r2, #3]
   bafc0:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bafc2:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bafc6:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bafca:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bafce:	68a8      	ldr	r0, [r5, #8]
   bafd0:	b289      	uxth	r1, r1
   bafd2:	f7fd fbee 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bafd6:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bafd8:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   bafdc:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bafe0:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bafe4:	68a8      	ldr	r0, [r5, #8]
   bafe6:	b289      	uxth	r1, r1
   bafe8:	f7fd fbe3 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   bafec:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bafee:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   baff2:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   baff6:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   baffa:	68a8      	ldr	r0, [r5, #8]
   baffc:	b289      	uxth	r1, r1
   baffe:	f7fd fbcb 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb002:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bb004:	3701      	adds	r7, #1
   bb006:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   bb008:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bb00a:	f108 080c 	add.w	r8, r8, #12
   bb00e:	d1a4      	bne.n	baf5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   bb010:	e7a8      	b.n	baf64 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb012:	780b      	ldrb	r3, [r1, #0]
   bb014:	071e      	lsls	r6, r3, #28
   bb016:	d4ae      	bmi.n	baf76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   bb018:	f640 32fc 	movw	r2, #3068	; 0xbfc
   bb01c:	3104      	adds	r1, #4
   bb01e:	f009 fb0f 	bl	c4640 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb022:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   bb024:	7813      	ldrb	r3, [r2, #0]
   bb026:	f043 0308 	orr.w	r3, r3, #8
   bb02a:	7013      	strb	r3, [r2, #0]
   bb02c:	e7a3      	b.n	baf76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   bb02e:	2a3c      	cmp	r2, #60	; 0x3c
   bb030:	f040 80bf 	bne.w	bb1b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   bb034:	884a      	ldrh	r2, [r1, #2]
   bb036:	2a28      	cmp	r2, #40	; 0x28
   bb038:	d002      	beq.n	bb040 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   bb03a:	2a40      	cmp	r2, #64	; 0x40
   bb03c:	f040 80b9 	bne.w	bb1b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   bb040:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb042:	2b00      	cmp	r3, #0
   bb044:	f43f a96f 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb048:	68aa      	ldr	r2, [r5, #8]
   bb04a:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   bb04c:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   bb04e:	68a8      	ldr	r0, [r5, #8]
   bb050:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb052:	2102      	movs	r1, #2
   bb054:	f7fd fbad 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb058:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   bb05a:	68a8      	ldr	r0, [r5, #8]
   bb05c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb05e:	2104      	movs	r1, #4
   bb060:	f7fd fb9a 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb064:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb066:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   bb068:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb06a:	2108      	movs	r1, #8
   bb06c:	f7fd fb94 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   bb070:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb072:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   bb074:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb076:	210c      	movs	r1, #12
   bb078:	f7fd fb8e 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   bb07c:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb07e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   bb080:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb082:	2110      	movs	r1, #16
   bb084:	f7fd fb88 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   bb088:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   bb08a:	886b      	ldrh	r3, [r5, #2]
   bb08c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb08e:	2b28      	cmp	r3, #40	; 0x28
   bb090:	d14b      	bne.n	bb12a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   bb092:	2600      	movs	r6, #0
   bb094:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   bb096:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb098:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   bb09a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   bb09c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb09e:	7d12      	ldrb	r2, [r2, #20]
   bb0a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bb0a4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   bb0a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0a8:	7d52      	ldrb	r2, [r2, #21]
   bb0aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bb0ae:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   bb0b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0b2:	7d92      	ldrb	r2, [r2, #22]
   bb0b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   bb0b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0ba:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   bb0be:	68a8      	ldr	r0, [r5, #8]
   bb0c0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb0c2:	2118      	movs	r1, #24
   bb0c4:	f7fd fb68 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0c8:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   bb0ca:	68a8      	ldr	r0, [r5, #8]
   bb0cc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb0ce:	211c      	movs	r1, #28
   bb0d0:	f7fd fb62 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0d4:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   bb0d6:	68a8      	ldr	r0, [r5, #8]
   bb0d8:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bb0da:	2120      	movs	r1, #32
   bb0dc:	f7fd fb5c 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0e0:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   bb0e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0e4:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   bb0e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0e8:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   bb0ea:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb0ec:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bb0ee:	68a8      	ldr	r0, [r5, #8]
   bb0f0:	f7fd fb52 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0f4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb0f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb0f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb0fc:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb0fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   bb102:	b17a      	cbz	r2, bb124 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb104:	7819      	ldrb	r1, [r3, #0]
   bb106:	0708      	lsls	r0, r1, #28
   bb108:	d40c      	bmi.n	bb124 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   bb10a:	1d19      	adds	r1, r3, #4
   bb10c:	3344      	adds	r3, #68	; 0x44
   bb10e:	f851 0b04 	ldr.w	r0, [r1], #4
   bb112:	f842 0b04 	str.w	r0, [r2], #4
   bb116:	4299      	cmp	r1, r3
   bb118:	d1f9      	bne.n	bb10e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   bb11a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   bb11c:	7813      	ldrb	r3, [r2, #0]
   bb11e:	f043 0308 	orr.w	r3, r3, #8
   bb122:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   bb124:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb126:	f7ff b98c 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb12a:	68a8      	ldr	r0, [r5, #8]
   bb12c:	2114      	movs	r1, #20
   bb12e:	f7fd fb33 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   bb132:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb134:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bb136:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb138:	2118      	movs	r1, #24
   bb13a:	f7fd fb2d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bb13e:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   bb140:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   bb142:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb144:	f892 2020 	ldrb.w	r2, [r2, #32]
   bb148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bb14c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   bb14e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb150:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   bb154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bb158:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   bb15a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb15c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   bb160:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   bb164:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   bb166:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb168:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   bb16c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   bb170:	68a8      	ldr	r0, [r5, #8]
   bb172:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb174:	2124      	movs	r1, #36	; 0x24
   bb176:	f7fd fb0f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb17a:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   bb17c:	68a8      	ldr	r0, [r5, #8]
   bb17e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb180:	2128      	movs	r1, #40	; 0x28
   bb182:	f7fd fb09 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb186:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   bb188:	68a8      	ldr	r0, [r5, #8]
   bb18a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb18c:	212c      	movs	r1, #44	; 0x2c
   bb18e:	f7fd fb03 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb192:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   bb194:	68a8      	ldr	r0, [r5, #8]
   bb196:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb198:	2130      	movs	r1, #48	; 0x30
   bb19a:	f7fd fafd 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb19e:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   bb1a0:	2134      	movs	r1, #52	; 0x34
   bb1a2:	68a8      	ldr	r0, [r5, #8]
   bb1a4:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb1a6:	f7fd faf7 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1aa:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bb1ac:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb1ae:	213c      	movs	r1, #60	; 0x3c
   bb1b0:	e79d      	b.n	bb0ee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   bb1b2:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   bb1b6:	d12a      	bne.n	bb20e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   bb1b8:	6d66      	ldr	r6, [r4, #84]	; 0x54
   bb1ba:	2e00      	cmp	r6, #0
   bb1bc:	f43f a8b3 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   bb1c0:	68a8      	ldr	r0, [r5, #8]
   bb1c2:	2100      	movs	r1, #0
   bb1c4:	f7fd fae8 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1c8:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb1ca:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bb1cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bb1ce:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bb1d0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb1d2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bb1d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bb1d6:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bb1d8:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb1da:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb1dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb1e0:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb1e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb1e4:	6a1a      	ldr	r2, [r3, #32]
   bb1e6:	b17a      	cbz	r2, bb208 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb1e8:	7819      	ldrb	r1, [r3, #0]
   bb1ea:	0709      	lsls	r1, r1, #28
   bb1ec:	d40c      	bmi.n	bb208 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   bb1ee:	1d19      	adds	r1, r3, #4
   bb1f0:	3314      	adds	r3, #20
   bb1f2:	f851 0b04 	ldr.w	r0, [r1], #4
   bb1f6:	f842 0b04 	str.w	r0, [r2], #4
   bb1fa:	4299      	cmp	r1, r3
   bb1fc:	d1f9      	bne.n	bb1f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb1fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
   bb200:	7813      	ldrb	r3, [r2, #0]
   bb202:	f043 0308 	orr.w	r3, r3, #8
   bb206:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb208:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb20a:	f7ff b91a 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   bb20e:	4aa1      	ldr	r2, [pc, #644]	; (bb494 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   bb210:	4293      	cmp	r3, r2
   bb212:	f47f a888 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   bb216:	69a6      	ldr	r6, [r4, #24]
   bb218:	2e00      	cmp	r6, #0
   bb21a:	f43f a884 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   bb21e:	68a8      	ldr	r0, [r5, #8]
   bb220:	2100      	movs	r1, #0
   bb222:	f7fd fab9 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb226:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb228:	69a3      	ldr	r3, [r4, #24]
   bb22a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb22e:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb230:	69a3      	ldr	r3, [r4, #24]
   bb232:	691a      	ldr	r2, [r3, #16]
   bb234:	b14a      	cbz	r2, bb24a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb236:	7819      	ldrb	r1, [r3, #0]
   bb238:	070f      	lsls	r7, r1, #28
   bb23a:	d406      	bmi.n	bb24a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   bb23c:	685b      	ldr	r3, [r3, #4]
   bb23e:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   bb240:	69a2      	ldr	r2, [r4, #24]
   bb242:	7813      	ldrb	r3, [r2, #0]
   bb244:	f043 0308 	orr.w	r3, r3, #8
   bb248:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   bb24a:	69a3      	ldr	r3, [r4, #24]
   bb24c:	f7ff b8f9 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   bb250:	784b      	ldrb	r3, [r1, #1]
   bb252:	2b72      	cmp	r3, #114	; 0x72
   bb254:	f040 80a4 	bne.w	bb3a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   bb258:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bb25a:	2b00      	cmp	r3, #0
   bb25c:	d069      	beq.n	bb332 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   bb25e:	689b      	ldr	r3, [r3, #8]
   bb260:	2b00      	cmp	r3, #0
   bb262:	d066      	beq.n	bb332 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   bb264:	688a      	ldr	r2, [r1, #8]
   bb266:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   bb268:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   bb26a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bb26c:	68a8      	ldr	r0, [r5, #8]
   bb26e:	689f      	ldr	r7, [r3, #8]
   bb270:	4631      	mov	r1, r6
   bb272:	f7fd fa9e 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb276:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   bb278:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb27a:	68a8      	ldr	r0, [r5, #8]
   bb27c:	689e      	ldr	r6, [r3, #8]
   bb27e:	2104      	movs	r1, #4
   bb280:	f7fd fa8a 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb284:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   bb286:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb288:	68a8      	ldr	r0, [r5, #8]
   bb28a:	689e      	ldr	r6, [r3, #8]
   bb28c:	2108      	movs	r1, #8
   bb28e:	f7fd fa83 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb292:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   bb294:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb296:	68a8      	ldr	r0, [r5, #8]
   bb298:	689e      	ldr	r6, [r3, #8]
   bb29a:	210c      	movs	r1, #12
   bb29c:	f7fd fa7c 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2a0:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   bb2a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb2a4:	68a8      	ldr	r0, [r5, #8]
   bb2a6:	689e      	ldr	r6, [r3, #8]
   bb2a8:	2110      	movs	r1, #16
   bb2aa:	f7fd fa82 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2ae:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb2b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb2b2:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb2b4:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb2b6:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb2b8:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb2ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb2bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb2be:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb2c0:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb2c2:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bb2c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb2c6:	689e      	ldr	r6, [r3, #8]
   bb2c8:	7833      	ldrb	r3, [r6, #0]
   bb2ca:	bb23      	cbnz	r3, bb316 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   bb2cc:	68a8      	ldr	r0, [r5, #8]
   bb2ce:	f44f 7103 	mov.w	r1, #524	; 0x20c
   bb2d2:	f7fd fa6e 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb2d6:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb2d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb2da:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb2dc:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb2de:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb2e2:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb2e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb2e6:	689b      	ldr	r3, [r3, #8]
   bb2e8:	781a      	ldrb	r2, [r3, #0]
   bb2ea:	2a00      	cmp	r2, #0
   bb2ec:	f040 865d 	bne.w	bbfaa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   bb2f0:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb2f2:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   bb2f6:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb2f8:	b299      	uxth	r1, r3
   bb2fa:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb2fc:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb2fe:	d914      	bls.n	bb32a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   bb300:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   bb304:	d011      	beq.n	bb32a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   bb306:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb308:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   bb30a:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb30c:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   bb30e:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb310:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb312:	3301      	adds	r3, #1
   bb314:	e7f0      	b.n	bb2f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   bb316:	68a8      	ldr	r0, [r5, #8]
   bb318:	2114      	movs	r1, #20
   bb31a:	f7fd fa4a 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb31e:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb320:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb322:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb324:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb326:	7d92      	ldrb	r2, [r2, #22]
   bb328:	e7db      	b.n	bb2e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb32a:	7813      	ldrb	r3, [r2, #0]
   bb32c:	f043 0308 	orr.w	r3, r3, #8
   bb330:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   bb332:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb334:	2b00      	cmp	r3, #0
   bb336:	f43e aff6 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb33a:	689b      	ldr	r3, [r3, #8]
   bb33c:	2b00      	cmp	r3, #0
   bb33e:	f43e aff2 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   bb342:	22b5      	movs	r2, #181	; 0xb5
   bb344:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   bb346:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb348:	689b      	ldr	r3, [r3, #8]
   bb34a:	2262      	movs	r2, #98	; 0x62
   bb34c:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   bb34e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb350:	689b      	ldr	r3, [r3, #8]
   bb352:	2202      	movs	r2, #2
   bb354:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   bb356:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb358:	689b      	ldr	r3, [r3, #8]
   bb35a:	2272      	movs	r2, #114	; 0x72
   bb35c:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   bb35e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb360:	886a      	ldrh	r2, [r5, #2]
   bb362:	689b      	ldr	r3, [r3, #8]
   bb364:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   bb366:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb368:	689a      	ldr	r2, [r3, #8]
   bb36a:	886b      	ldrh	r3, [r5, #2]
   bb36c:	0a1b      	lsrs	r3, r3, #8
   bb36e:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   bb370:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb372:	886a      	ldrh	r2, [r5, #2]
   bb374:	6898      	ldr	r0, [r3, #8]
   bb376:	68a9      	ldr	r1, [r5, #8]
   bb378:	3006      	adds	r0, #6
   bb37a:	f009 f961 	bl	c4640 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   bb37e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb380:	7b2a      	ldrb	r2, [r5, #12]
   bb382:	689b      	ldr	r3, [r3, #8]
   bb384:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   bb388:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb38a:	7b6a      	ldrb	r2, [r5, #13]
   bb38c:	689b      	ldr	r3, [r3, #8]
   bb38e:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb392:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb394:	7813      	ldrb	r3, [r2, #0]
   bb396:	f043 0308 	orr.w	r3, r3, #8
   bb39a:	7013      	strb	r3, [r2, #0]
   bb39c:	f7fe bfc3 	b.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   bb3a0:	2b73      	cmp	r3, #115	; 0x73
   bb3a2:	d14d      	bne.n	bb440 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   bb3a4:	6e01      	ldr	r1, [r0, #96]	; 0x60
   bb3a6:	780b      	ldrb	r3, [r1, #0]
   bb3a8:	071e      	lsls	r6, r3, #28
   bb3aa:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb3ae:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   bb3b2:	d543      	bpl.n	bb43c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   bb3b4:	0843      	lsrs	r3, r0, #1
   bb3b6:	f47e afb6 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb3ba:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   bb3bc:	f44f 7688 	mov.w	r6, #272	; 0x110
   bb3c0:	688b      	ldr	r3, [r1, #8]
   bb3c2:	437e      	muls	r6, r7
   bb3c4:	22b5      	movs	r2, #181	; 0xb5
   bb3c6:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   bb3c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb3ca:	689b      	ldr	r3, [r3, #8]
   bb3cc:	4433      	add	r3, r6
   bb3ce:	2262      	movs	r2, #98	; 0x62
   bb3d0:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   bb3d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb3d4:	689b      	ldr	r3, [r3, #8]
   bb3d6:	4433      	add	r3, r6
   bb3d8:	2202      	movs	r2, #2
   bb3da:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   bb3dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb3de:	689b      	ldr	r3, [r3, #8]
   bb3e0:	4433      	add	r3, r6
   bb3e2:	2273      	movs	r2, #115	; 0x73
   bb3e4:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   bb3e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb3e8:	886a      	ldrh	r2, [r5, #2]
   bb3ea:	689b      	ldr	r3, [r3, #8]
   bb3ec:	4433      	add	r3, r6
   bb3ee:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   bb3f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb3f2:	886a      	ldrh	r2, [r5, #2]
   bb3f4:	689b      	ldr	r3, [r3, #8]
   bb3f6:	4433      	add	r3, r6
   bb3f8:	0a12      	lsrs	r2, r2, #8
   bb3fa:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   bb3fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb3fe:	886a      	ldrh	r2, [r5, #2]
   bb400:	6898      	ldr	r0, [r3, #8]
   bb402:	68a9      	ldr	r1, [r5, #8]
   bb404:	4430      	add	r0, r6
   bb406:	3006      	adds	r0, #6
   bb408:	f009 f91a 	bl	c4640 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   bb40c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb40e:	7b2a      	ldrb	r2, [r5, #12]
   bb410:	689b      	ldr	r3, [r3, #8]
   bb412:	4433      	add	r3, r6
   bb414:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   bb418:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb41a:	7b6a      	ldrb	r2, [r5, #13]
   bb41c:	689b      	ldr	r3, [r3, #8]
   bb41e:	441e      	add	r6, r3
   bb420:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   bb424:	6e21      	ldr	r1, [r4, #96]	; 0x60
   bb426:	780b      	ldrb	r3, [r1, #0]
   bb428:	2201      	movs	r2, #1
   bb42a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb42e:	40ba      	lsls	r2, r7
   bb430:	4302      	orrs	r2, r0
   bb432:	f362 03c4 	bfi	r3, r2, #3, #2
   bb436:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   bb438:	f7fe bf75 	b.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb43c:	4617      	mov	r7, r2
   bb43e:	e7bd      	b.n	bb3bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bb440:	2b34      	cmp	r3, #52	; 0x34
   bb442:	d129      	bne.n	bb498 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bb444:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb446:	2b00      	cmp	r3, #0
   bb448:	f43e af6d 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb44c:	689b      	ldr	r3, [r3, #8]
   bb44e:	2b00      	cmp	r3, #0
   bb450:	f43e af69 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb454:	688a      	ldr	r2, [r1, #8]
   bb456:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bb458:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb45a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bb45c:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb45e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb460:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb462:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bb464:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb466:	68a8      	ldr	r0, [r5, #8]
   bb468:	689e      	ldr	r6, [r3, #8]
   bb46a:	2104      	movs	r1, #4
   bb46c:	f7fd f994 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb470:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   bb472:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb474:	68a8      	ldr	r0, [r5, #8]
   bb476:	689e      	ldr	r6, [r3, #8]
   bb478:	2108      	movs	r1, #8
   bb47a:	f7fd f99a 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb47e:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   bb480:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb482:	68a8      	ldr	r0, [r5, #8]
   bb484:	689e      	ldr	r6, [r3, #8]
   bb486:	210a      	movs	r1, #10
   bb488:	f7fd f993 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb48c:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb48e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   bb490:	e780      	b.n	bb394 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   bb492:	bf00      	nop
   bb494:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   bb498:	2b13      	cmp	r3, #19
   bb49a:	d14a      	bne.n	bb532 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   bb49c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   bb49e:	2b00      	cmp	r3, #0
   bb4a0:	f43e af41 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb4a4:	688a      	ldr	r2, [r1, #8]
   bb4a6:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bb4a8:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb4aa:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb4ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb4ae:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb4b0:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   bb4b2:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb4b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb4b6:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb4b8:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb4ba:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb4bc:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb4be:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb4c0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb4c2:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb4c4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb4c6:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb4c8:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bb4ca:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb4cc:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb4ce:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb4d0:	729a      	strb	r2, [r3, #10]
   bb4d2:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb4d4:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bb4d6:	7a3a      	ldrb	r2, [r7, #8]
   bb4d8:	b2f3      	uxtb	r3, r6
   bb4da:	429a      	cmp	r2, r3
   bb4dc:	d809      	bhi.n	bb4f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bb4de:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb4e0:	2201      	movs	r2, #1
   bb4e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb4e6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   bb4e8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb4ea:	b9a8      	cbnz	r0, bb518 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   bb4ec:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb4ee:	f7fe bfa8 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb4f2:	886b      	ldrh	r3, [r5, #2]
   bb4f4:	3b08      	subs	r3, #8
   bb4f6:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb4fa:	ea4f 0186 	mov.w	r1, r6, lsl #2
   bb4fe:	ddee      	ble.n	bb4de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb500:	3108      	adds	r1, #8
   bb502:	68a8      	ldr	r0, [r5, #8]
   bb504:	b289      	uxth	r1, r1
   bb506:	f7fd f947 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb50a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb50e:	3601      	adds	r6, #1
   bb510:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb512:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb514:	d1de      	bne.n	bb4d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   bb516:	e7e2      	b.n	bb4de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb518:	780b      	ldrb	r3, [r1, #0]
   bb51a:	071b      	lsls	r3, r3, #28
   bb51c:	d4e6      	bmi.n	bb4ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   bb51e:	2248      	movs	r2, #72	; 0x48
   bb520:	3104      	adds	r1, #4
   bb522:	f009 f88d 	bl	c4640 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb526:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   bb528:	7813      	ldrb	r3, [r2, #0]
   bb52a:	f043 0308 	orr.w	r3, r3, #8
   bb52e:	7013      	strb	r3, [r2, #0]
   bb530:	e7dc      	b.n	bb4ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   bb532:	2b15      	cmp	r3, #21
   bb534:	f47e aef7 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   bb538:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   bb53a:	2b00      	cmp	r3, #0
   bb53c:	f43e aef3 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb540:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb542:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb544:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb546:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   bb548:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb54a:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   bb54c:	3101      	adds	r1, #1
   bb54e:	2908      	cmp	r1, #8
   bb550:	d1f7      	bne.n	bb542 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   bb552:	68a8      	ldr	r0, [r5, #8]
   bb554:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   bb556:	f7fd f92c 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb55a:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bb55c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   bb55e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb560:	7a92      	ldrb	r2, [r2, #10]
   bb562:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb564:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb566:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb568:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb56a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb56c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb56e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb570:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb572:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb574:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb576:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb578:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb57a:	73da      	strb	r2, [r3, #15]
   bb57c:	2610      	movs	r6, #16
   bb57e:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb580:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb582:	7b51      	ldrb	r1, [r2, #13]
   bb584:	b2da      	uxtb	r2, r3
   bb586:	4291      	cmp	r1, r2
   bb588:	d80b      	bhi.n	bb5a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   bb58a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb58c:	2201      	movs	r2, #1
   bb58e:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb592:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   bb594:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   bb598:	2800      	cmp	r0, #0
   bb59a:	d17f      	bne.n	bb69c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   bb59c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb59e:	f7fe bf50 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb5a2:	886a      	ldrh	r2, [r5, #2]
   bb5a4:	3a10      	subs	r2, #16
   bb5a6:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   bb5aa:	ea4f 1843 	mov.w	r8, r3, lsl #5
   bb5ae:	ddec      	ble.n	bb58a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   bb5b0:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb5b2:	46b4      	mov	ip, r6
   bb5b4:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb5b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5b8:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb5ba:	4440      	add	r0, r8
   bb5bc:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb5be:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb5c2:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   bb5c4:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb5c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5c8:	4437      	add	r7, r6
   bb5ca:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb5cc:	4440      	add	r0, r8
   bb5ce:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb5d0:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb5d2:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   bb5d4:	2a03      	cmp	r2, #3
   bb5d6:	d80b      	bhi.n	bb5f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb5d8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb5da:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb5dc:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   bb5e0:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb5e4:	4440      	add	r0, r8
   bb5e6:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb5e8:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb5ec:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   bb5f0:	3201      	adds	r2, #1
   bb5f2:	2a08      	cmp	r2, #8
   bb5f4:	f10c 0c01 	add.w	ip, ip, #1
   bb5f8:	d1dd      	bne.n	bb5b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   bb5fa:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb5fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb5fe:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bb600:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb602:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb606:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb608:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bb60a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb60c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb60e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb610:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb614:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb616:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb618:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb61a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb61c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb61e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb622:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb624:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb626:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb628:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb62a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb62c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb630:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb632:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb634:	3118      	adds	r1, #24
   bb636:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bb63a:	68a8      	ldr	r0, [r5, #8]
   bb63c:	b289      	uxth	r1, r1
   bb63e:	f7fd f8b8 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb642:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb644:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb646:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bb64a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb64c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb64e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb650:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb652:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb654:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bb658:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb65a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb65c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb65e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb660:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb662:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bb666:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb668:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb66a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb66c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb66e:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb670:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bb674:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb676:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb678:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb67a:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb67c:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb67e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb682:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb684:	68aa      	ldr	r2, [r5, #8]
   bb686:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb688:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb68a:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb68c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb690:	f106 0620 	add.w	r6, r6, #32
   bb694:	463b      	mov	r3, r7
   bb696:	f47f af73 	bne.w	bb580 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bb69a:	e776      	b.n	bb58a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb69c:	780b      	ldrb	r3, [r1, #0]
   bb69e:	071f      	lsls	r7, r3, #28
   bb6a0:	f53f af7c 	bmi.w	bb59c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bb6a4:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bb6a8:	3102      	adds	r1, #2
   bb6aa:	f008 ffc9 	bl	c4640 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb6ae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb6b0:	7813      	ldrb	r3, [r2, #0]
   bb6b2:	f043 0308 	orr.w	r3, r3, #8
   bb6b6:	7013      	strb	r3, [r2, #0]
   bb6b8:	e770      	b.n	bb59c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bb6ba:	680b      	ldr	r3, [r1, #0]
   bb6bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb6c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb6c4:	d12f      	bne.n	bb726 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb6c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb6c8:	2b00      	cmp	r3, #0
   bb6ca:	f43e ae2c 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb6ce:	688a      	ldr	r2, [r1, #8]
   bb6d0:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb6d2:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb6d4:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb6d6:	68a8      	ldr	r0, [r5, #8]
   bb6d8:	2102      	movs	r1, #2
   bb6da:	f7fd f86a 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb6de:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb6e0:	68a8      	ldr	r0, [r5, #8]
   bb6e2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb6e4:	2104      	movs	r1, #4
   bb6e6:	f7fd f857 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6ea:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb6ec:	68a8      	ldr	r0, [r5, #8]
   bb6ee:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb6f0:	2108      	movs	r1, #8
   bb6f2:	f7fd f851 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6f6:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb6f8:	68a8      	ldr	r0, [r5, #8]
   bb6fa:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb6fc:	210c      	movs	r1, #12
   bb6fe:	f7fd f858 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb702:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb704:	68a8      	ldr	r0, [r5, #8]
   bb706:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb708:	210e      	movs	r1, #14
   bb70a:	f7fd f852 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb70e:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb710:	68a8      	ldr	r0, [r5, #8]
   bb712:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb714:	2110      	movs	r1, #16
   bb716:	f7fd f84c 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb71a:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb71c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb71e:	2201      	movs	r2, #1
   bb720:	751a      	strb	r2, [r3, #20]
   bb722:	f7fe be00 	b.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb726:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb72a:	f47e adfc 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb72e:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb730:	2e00      	cmp	r6, #0
   bb732:	f43e adf8 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb736:	68a8      	ldr	r0, [r5, #8]
   bb738:	2100      	movs	r1, #0
   bb73a:	f7fd f83a 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb73e:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb740:	68a8      	ldr	r0, [r5, #8]
   bb742:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb744:	2102      	movs	r1, #2
   bb746:	f7fd f834 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb74a:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb74c:	68a8      	ldr	r0, [r5, #8]
   bb74e:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb750:	2104      	movs	r1, #4
   bb752:	f7fd f82e 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb756:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb758:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb75e:	609a      	str	r2, [r3, #8]
   bb760:	f7fe bde1 	b.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb764:	680b      	ldr	r3, [r1, #0]
   bb766:	4ab0      	ldr	r2, [pc, #704]	; (bba28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb768:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb76c:	4293      	cmp	r3, r2
   bb76e:	f47e adda 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb772:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb774:	2b00      	cmp	r3, #0
   bb776:	f43e add6 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb77a:	688a      	ldr	r2, [r1, #8]
   bb77c:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb77e:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb780:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb782:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb784:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb786:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb788:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb78a:	68a8      	ldr	r0, [r5, #8]
   bb78c:	2102      	movs	r1, #2
   bb78e:	f7fd f810 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb792:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb794:	68a8      	ldr	r0, [r5, #8]
   bb796:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb798:	2104      	movs	r1, #4
   bb79a:	f7fd f80a 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb79e:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb7a0:	68a8      	ldr	r0, [r5, #8]
   bb7a2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb7a4:	2106      	movs	r1, #6
   bb7a6:	f7fd f804 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb7aa:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb7ac:	68a8      	ldr	r0, [r5, #8]
   bb7ae:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb7b0:	2108      	movs	r1, #8
   bb7b2:	f7fc fff1 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7b6:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb7b8:	68a8      	ldr	r0, [r5, #8]
   bb7ba:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb7bc:	210c      	movs	r1, #12
   bb7be:	f7fc ffeb 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7c2:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb7c4:	68a8      	ldr	r0, [r5, #8]
   bb7c6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb7c8:	2110      	movs	r1, #16
   bb7ca:	f7fc ffe5 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7ce:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb7d0:	68a8      	ldr	r0, [r5, #8]
   bb7d2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb7d4:	2114      	movs	r1, #20
   bb7d6:	f7fc ffdf 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7da:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb7dc:	68a8      	ldr	r0, [r5, #8]
   bb7de:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb7e0:	2118      	movs	r1, #24
   bb7e2:	f7fc ffd9 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7e6:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb7e8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb7ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb7ee:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb7f0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb7f4:	b17a      	cbz	r2, bb816 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb7f6:	7819      	ldrb	r1, [r3, #0]
   bb7f8:	070e      	lsls	r6, r1, #28
   bb7fa:	d40c      	bmi.n	bb816 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb7fc:	1d19      	adds	r1, r3, #4
   bb7fe:	3320      	adds	r3, #32
   bb800:	f851 0b04 	ldr.w	r0, [r1], #4
   bb804:	f842 0b04 	str.w	r0, [r2], #4
   bb808:	4299      	cmp	r1, r3
   bb80a:	d1f9      	bne.n	bb800 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb80c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb80e:	7813      	ldrb	r3, [r2, #0]
   bb810:	f043 0308 	orr.w	r3, r3, #8
   bb814:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb816:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb818:	f7fe be13 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb81c:	4a83      	ldr	r2, [pc, #524]	; (bba2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb81e:	4293      	cmp	r3, r2
   bb820:	d158      	bne.n	bb8d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb822:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb826:	2f00      	cmp	r7, #0
   bb828:	f43e ad7d 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb82c:	68a8      	ldr	r0, [r5, #8]
   bb82e:	2100      	movs	r1, #0
   bb830:	f7fc ffb2 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb834:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb836:	68a8      	ldr	r0, [r5, #8]
   bb838:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb83c:	2108      	movs	r1, #8
   bb83e:	f7fc ffab 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb842:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb844:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb846:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb84a:	210c      	movs	r1, #12
   bb84c:	f7fc ffa4 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb850:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb852:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb854:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb858:	4631      	mov	r1, r6
   bb85a:	f7fc ff9d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb85e:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb860:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb862:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb866:	2114      	movs	r1, #20
   bb868:	f7fc ff96 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb86c:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb86e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb870:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb874:	2118      	movs	r1, #24
   bb876:	f7fc ff8f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb87a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb87c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb87e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb882:	211c      	movs	r1, #28
   bb884:	f7fc ff88 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb888:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb88a:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb88c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb890:	2120      	movs	r1, #32
   bb892:	f7fc ff81 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb896:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb898:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb89c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb8a0:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb8a2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb8a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb8a8:	b182      	cbz	r2, bb8cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb8aa:	7819      	ldrb	r1, [r3, #0]
   bb8ac:	0709      	lsls	r1, r1, #28
   bb8ae:	d40d      	bmi.n	bb8cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb8b0:	1d19      	adds	r1, r3, #4
   bb8b2:	3328      	adds	r3, #40	; 0x28
   bb8b4:	f851 0b04 	ldr.w	r0, [r1], #4
   bb8b8:	f842 0b04 	str.w	r0, [r2], #4
   bb8bc:	4299      	cmp	r1, r3
   bb8be:	d1f9      	bne.n	bb8b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb8c0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb8c4:	7813      	ldrb	r3, [r2, #0]
   bb8c6:	f043 0308 	orr.w	r3, r3, #8
   bb8ca:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb8cc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb8d0:	f7fe bdb7 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb8d4:	784b      	ldrb	r3, [r1, #1]
   bb8d6:	2b02      	cmp	r3, #2
   bb8d8:	d158      	bne.n	bb98c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb8da:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb8de:	2e00      	cmp	r6, #0
   bb8e0:	f43e ad21 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb8e4:	68a8      	ldr	r0, [r5, #8]
   bb8e6:	2100      	movs	r1, #0
   bb8e8:	f7fc ff56 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb8ec:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb8ee:	68a8      	ldr	r0, [r5, #8]
   bb8f0:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb8f4:	2104      	movs	r1, #4
   bb8f6:	f7fc ff5c 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb8fa:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb8fc:	68a8      	ldr	r0, [r5, #8]
   bb8fe:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb902:	2106      	movs	r1, #6
   bb904:	f7fc ff55 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb908:	8170      	strh	r0, [r6, #10]
   bb90a:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb90c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb910:	886b      	ldrh	r3, [r5, #2]
   bb912:	7a7a      	ldrb	r2, [r7, #9]
   bb914:	b2b1      	uxth	r1, r6
   bb916:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb91a:	d320      	bcc.n	bb95e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb91c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb920:	886a      	ldrh	r2, [r5, #2]
   bb922:	7a73      	ldrb	r3, [r6, #9]
   bb924:	08db      	lsrs	r3, r3, #3
   bb926:	3302      	adds	r3, #2
   bb928:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb92c:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb930:	d826      	bhi.n	bb980 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb932:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb936:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb93a:	b160      	cbz	r0, bb956 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb93c:	780b      	ldrb	r3, [r1, #0]
   bb93e:	071a      	lsls	r2, r3, #28
   bb940:	d409      	bmi.n	bb956 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb942:	2288      	movs	r2, #136	; 0x88
   bb944:	3104      	adds	r1, #4
   bb946:	f008 fe7b 	bl	c4640 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb94a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb94e:	7813      	ldrb	r3, [r2, #0]
   bb950:	f043 0308 	orr.w	r3, r3, #8
   bb954:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb956:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb95a:	f7fe bd72 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb95e:	3b08      	subs	r3, #8
   bb960:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb964:	ddda      	ble.n	bb91c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb966:	0089      	lsls	r1, r1, #2
   bb968:	3108      	adds	r1, #8
   bb96a:	68a8      	ldr	r0, [r5, #8]
   bb96c:	b289      	uxth	r1, r1
   bb96e:	f7fc ff13 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb972:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb976:	3601      	adds	r6, #1
   bb978:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb97a:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb97c:	d1c6      	bne.n	bb90c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb97e:	e7cd      	b.n	bb91c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb980:	68a8      	ldr	r0, [r5, #8]
   bb982:	f7fc ff09 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb986:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb98a:	e7d2      	b.n	bb932 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb98c:	2b03      	cmp	r3, #3
   bb98e:	d14f      	bne.n	bba30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb990:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb994:	2900      	cmp	r1, #0
   bb996:	f43e acc6 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb99a:	886a      	ldrh	r2, [r5, #2]
   bb99c:	1f13      	subs	r3, r2, #4
   bb99e:	bf48      	it	mi
   bb9a0:	1cd3      	addmi	r3, r2, #3
   bb9a2:	10db      	asrs	r3, r3, #3
   bb9a4:	2700      	movs	r7, #0
   bb9a6:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb9aa:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb9ac:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb9ae:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb9b2:	3b04      	subs	r3, #4
   bb9b4:	42bb      	cmp	r3, r7
   bb9b6:	dc08      	bgt.n	bb9ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb9b8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb9bc:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb9c0:	bb10      	cbnz	r0, bba08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb9c2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb9c6:	f7fe bd3c 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb9ca:	fa1f f887 	uxth.w	r8, r7
   bb9ce:	f108 0104 	add.w	r1, r8, #4
   bb9d2:	68a8      	ldr	r0, [r5, #8]
   bb9d4:	b289      	uxth	r1, r1
   bb9d6:	f7fc fedf 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb9da:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb9de:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb9e2:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb9e6:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb9ea:	68a8      	ldr	r0, [r5, #8]
   bb9ec:	b289      	uxth	r1, r1
   bb9ee:	f7fc fed3 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb9f2:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb9f6:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb9f8:	3601      	adds	r6, #1
   bb9fa:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb9fc:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bba00:	f107 0708 	add.w	r7, r7, #8
   bba04:	d1d2      	bne.n	bb9ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bba06:	e7d7      	b.n	bb9b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bba08:	780b      	ldrb	r3, [r1, #0]
   bba0a:	071b      	lsls	r3, r3, #28
   bba0c:	d4d9      	bmi.n	bb9c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bba0e:	f44f 720e 	mov.w	r2, #568	; 0x238
   bba12:	3108      	adds	r1, #8
   bba14:	3004      	adds	r0, #4
   bba16:	f008 fe13 	bl	c4640 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bba1a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bba1e:	7813      	ldrb	r3, [r2, #0]
   bba20:	f043 0308 	orr.w	r3, r3, #8
   bba24:	7013      	strb	r3, [r2, #0]
   bba26:	e7cc      	b.n	bb9c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bba28:	001c0300 	.word	0x001c0300
   bba2c:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bba30:	2b10      	cmp	r3, #16
   bba32:	f47e ac78 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bba36:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bba3a:	2e00      	cmp	r6, #0
   bba3c:	f43e ac73 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bba40:	68a8      	ldr	r0, [r5, #8]
   bba42:	2100      	movs	r1, #0
   bba44:	f7fc fea8 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bba48:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bba4a:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bba4c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bba50:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bba52:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bba54:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bba56:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bba5a:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bba5c:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bba5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bba60:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bba64:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bba66:	74da      	strb	r2, [r3, #19]
   bba68:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bba6a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bba6e:	7cc6      	ldrb	r6, [r0, #19]
   bba70:	b28a      	uxth	r2, r1
   bba72:	4296      	cmp	r6, r2
   bba74:	d80c      	bhi.n	bba90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bba76:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bba7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bba7e:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bba80:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bba84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bba86:	bb62      	cbnz	r2, bbae2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bba88:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bba8c:	f7fe bcd9 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bba90:	886a      	ldrh	r2, [r5, #2]
   bba92:	3a10      	subs	r2, #16
   bba94:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bba98:	dded      	ble.n	bba76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bba9a:	68aa      	ldr	r2, [r5, #8]
   bba9c:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bba9e:	1d0a      	adds	r2, r1, #4
   bbaa0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bbaa4:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bbaa6:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bbaa8:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bbaaa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bbaae:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bbab0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bbab4:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bbab6:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bbab8:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bbaba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bbabe:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bbac0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bbac4:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bbac6:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bbac8:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bbaca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bbace:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bbad0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bbad4:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bbad6:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bbad8:	2907      	cmp	r1, #7
   bbada:	f103 0304 	add.w	r3, r3, #4
   bbade:	d1c4      	bne.n	bba6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bbae0:	e7c9      	b.n	bba76 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbae2:	7819      	ldrb	r1, [r3, #0]
   bbae4:	070f      	lsls	r7, r1, #28
   bbae6:	d4cf      	bmi.n	bba88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bbae8:	1d19      	adds	r1, r3, #4
   bbaea:	3330      	adds	r3, #48	; 0x30
   bbaec:	f851 0b04 	ldr.w	r0, [r1], #4
   bbaf0:	f842 0b04 	str.w	r0, [r2], #4
   bbaf4:	4299      	cmp	r1, r3
   bbaf6:	d1f9      	bne.n	bbaec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bbaf8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bbafc:	7813      	ldrb	r3, [r2, #0]
   bbafe:	f043 0308 	orr.w	r3, r3, #8
   bbb02:	7013      	strb	r3, [r2, #0]
   bbb04:	e7c0      	b.n	bba88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bbb06:	680b      	ldr	r3, [r1, #0]
   bbb08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bbb0c:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bbb10:	d16a      	bne.n	bbbe8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bbb12:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bbb16:	2b00      	cmp	r3, #0
   bbb18:	f43e ac05 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bbb1c:	7818      	ldrb	r0, [r3, #0]
   bbb1e:	7859      	ldrb	r1, [r3, #1]
   bbb20:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bbb22:	bf36      	itet	cc
   bbb24:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bbb28:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bbb2a:	1a52      	subcc	r2, r2, r1
   bbb2c:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bbb2e:	2a0e      	cmp	r2, #14
   bbb30:	d84b      	bhi.n	bbbca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bbb32:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bbb34:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bbb38:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bbb3a:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bbb3c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb40:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bbb42:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb44:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bbb46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb4a:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bbb4c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb50:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bbb52:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb54:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bbb56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb5a:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bbb5c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb60:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bbb62:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb64:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bbb66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb6a:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bbb6c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb70:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bbb72:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb74:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bbb76:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb7a:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bbb7c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb80:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bbb82:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb84:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bbb86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb8a:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bbb8c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbb90:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bbb92:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbb94:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bbb96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbb9a:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bbb9c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bbba0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bbba2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bbba4:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bbba6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bbbaa:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bbbac:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bbbb0:	7813      	ldrb	r3, [r2, #0]
   bbbb2:	3301      	adds	r3, #1
   bbbb4:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bbbb6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bbbba:	781a      	ldrb	r2, [r3, #0]
   bbbbc:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bbbbe:	f47e abb2 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bbbc2:	2200      	movs	r2, #0
   bbbc4:	701a      	strb	r2, [r3, #0]
   bbbc6:	f7fe bbae 	b.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbbca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbce:	b923      	cbnz	r3, bbbda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bbbd0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbbd4:	2b00      	cmp	r3, #0
   bbbd6:	f43e aba6 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bbbda:	4996      	ldr	r1, [pc, #600]	; (bbe34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbbdc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bbbe0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbbe4:	f005 bced 	b.w	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bbbe8:	784b      	ldrb	r3, [r1, #1]
   bbbea:	2b80      	cmp	r3, #128	; 0x80
   bbbec:	f47e ab9b 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bbbf0:	884b      	ldrh	r3, [r1, #2]
   bbbf2:	2ba4      	cmp	r3, #164	; 0xa4
   bbbf4:	f63e ab97 	bhi.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bbbf8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bbbfc:	2a00      	cmp	r2, #0
   bbbfe:	f43e ab92 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bbc02:	7810      	ldrb	r0, [r2, #0]
   bbc04:	7851      	ldrb	r1, [r2, #1]
   bbc06:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bbc08:	bf36      	itet	cc
   bbc0a:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bbc0c:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bbc0e:	1a5b      	subcc	r3, r3, r1
   bbc10:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bbc12:	2bf8      	cmp	r3, #248	; 0xf8
   bbc14:	d84f      	bhi.n	bbcb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bbc16:	23ac      	movs	r3, #172	; 0xac
   bbc18:	fb03 2200 	mla	r2, r3, r0, r2
   bbc1c:	21b5      	movs	r1, #181	; 0xb5
   bbc1e:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bbc20:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc24:	7811      	ldrb	r1, [r2, #0]
   bbc26:	fb03 2201 	mla	r2, r3, r1, r2
   bbc2a:	2162      	movs	r1, #98	; 0x62
   bbc2c:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bbc2e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc32:	7811      	ldrb	r1, [r2, #0]
   bbc34:	fb03 2201 	mla	r2, r3, r1, r2
   bbc38:	2113      	movs	r1, #19
   bbc3a:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bbc3c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc40:	7811      	ldrb	r1, [r2, #0]
   bbc42:	fb03 2201 	mla	r2, r3, r1, r2
   bbc46:	2180      	movs	r1, #128	; 0x80
   bbc48:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bbc4a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc4e:	7811      	ldrb	r1, [r2, #0]
   bbc50:	fb03 2201 	mla	r2, r3, r1, r2
   bbc54:	8869      	ldrh	r1, [r5, #2]
   bbc56:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bbc58:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc5c:	7811      	ldrb	r1, [r2, #0]
   bbc5e:	fb03 2201 	mla	r2, r3, r1, r2
   bbc62:	8869      	ldrh	r1, [r5, #2]
   bbc64:	0a09      	lsrs	r1, r1, #8
   bbc66:	71d1      	strb	r1, [r2, #7]
   bbc68:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bbc6a:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbc6c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bbc70:	b28e      	uxth	r6, r1
   bbc72:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbc74:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bbc76:	d907      	bls.n	bbc88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bbc78:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbc7a:	fb03 2200 	mla	r2, r3, r0, r2
   bbc7e:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bbc80:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbc82:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bbc84:	3101      	adds	r1, #1
   bbc86:	e7f0      	b.n	bbc6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bbc88:	fb03 2200 	mla	r2, r3, r0, r2
   bbc8c:	7b29      	ldrb	r1, [r5, #12]
   bbc8e:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bbc92:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbc96:	7b69      	ldrb	r1, [r5, #13]
   bbc98:	7810      	ldrb	r0, [r2, #0]
   bbc9a:	fb03 2300 	mla	r3, r3, r0, r2
   bbc9e:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bbca2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbca6:	7813      	ldrb	r3, [r2, #0]
   bbca8:	3301      	adds	r3, #1
   bbcaa:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bbcac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bbcb0:	781a      	ldrb	r2, [r3, #0]
   bbcb2:	2afa      	cmp	r2, #250	; 0xfa
   bbcb4:	e783      	b.n	bbbbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbcb6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbcba:	b923      	cbnz	r3, bbcc6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bbcbc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbcc0:	2b00      	cmp	r3, #0
   bbcc2:	f43e ab30 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbcc6:	495c      	ldr	r1, [pc, #368]	; (bbe38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bbcc8:	e788      	b.n	bbbdc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bbcca:	680b      	ldr	r3, [r1, #0]
   bbccc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bbcd0:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bbcd4:	f040 80b2 	bne.w	bbe3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bbcd8:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bbcdc:	2f00      	cmp	r7, #0
   bbcde:	f43e ab22 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bbce2:	68a8      	ldr	r0, [r5, #8]
   bbce4:	2100      	movs	r1, #0
   bbce6:	f7fc fd57 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbcea:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bbcec:	68a8      	ldr	r0, [r5, #8]
   bbcee:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bbcf2:	2104      	movs	r1, #4
   bbcf4:	f7fc fd5d 	bl	b87b2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bbcf8:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bbcfa:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bbcfc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd00:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bbd02:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bbd04:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bbd06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd0a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bbd0c:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bbd0e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bbd10:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd14:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bbd16:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bbd18:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bbd1a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd1e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bbd20:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bbd22:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bbd24:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd28:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bbd2a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bbd2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bbd2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd32:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bbd34:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd36:	210c      	movs	r1, #12
   bbd38:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bbd3a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd3e:	f7fc fd2b 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bbd42:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bbd44:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bbd46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd4a:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bbd4c:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bbd4e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbd50:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbd54:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbd56:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd58:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbd5a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd5e:	2114      	movs	r1, #20
   bbd60:	f7fc fd1a 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbd64:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd66:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbd68:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd6c:	2118      	movs	r1, #24
   bbd6e:	f7fc fd13 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbd72:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd74:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbd76:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd7a:	211c      	movs	r1, #28
   bbd7c:	f7fc fd0c 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbd80:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd82:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbd84:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd88:	2120      	movs	r1, #32
   bbd8a:	f7fc fd05 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbd8e:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd90:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbd92:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd96:	2124      	movs	r1, #36	; 0x24
   bbd98:	f7fc fcfe 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbd9c:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd9e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbda0:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbda4:	4631      	mov	r1, r6
   bbda6:	f7fc fcf7 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbdaa:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbdac:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbdae:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbdb2:	212c      	movs	r1, #44	; 0x2c
   bbdb4:	f7fc fcf0 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbdb8:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbdba:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbdbc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbdc0:	2130      	movs	r1, #48	; 0x30
   bbdc2:	f7fc fce9 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbdc6:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bbdc8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbdcc:	68a8      	ldr	r0, [r5, #8]
   bbdce:	2134      	movs	r1, #52	; 0x34
   bbdd0:	f7fc fce2 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbdd4:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bbdd6:	68a8      	ldr	r0, [r5, #8]
   bbdd8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbddc:	2138      	movs	r1, #56	; 0x38
   bbdde:	f7fc fcdb 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbde2:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bbde4:	68a8      	ldr	r0, [r5, #8]
   bbde6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbdea:	213c      	movs	r1, #60	; 0x3c
   bbdec:	f7fc fcd4 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbdf0:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bbdf2:	68a8      	ldr	r0, [r5, #8]
   bbdf4:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbdf8:	2140      	movs	r1, #64	; 0x40
   bbdfa:	f7fc fccd 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbdfe:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbe00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbe04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbe08:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbe0a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bbe0e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bbe10:	b160      	cbz	r0, bbe2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbe12:	780b      	ldrb	r3, [r1, #0]
   bbe14:	071e      	lsls	r6, r3, #28
   bbe16:	d409      	bmi.n	bbe2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bbe18:	2248      	movs	r2, #72	; 0x48
   bbe1a:	3104      	adds	r1, #4
   bbe1c:	f008 fc10 	bl	c4640 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbe20:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bbe24:	7813      	ldrb	r3, [r2, #0]
   bbe26:	f043 0308 	orr.w	r3, r3, #8
   bbe2a:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bbe2c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbe30:	f7fe bb07 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bbe34:	000c7289 	.word	0x000c7289
   bbe38:	000c72c6 	.word	0x000c72c6
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bbe3c:	4a5d      	ldr	r2, [pc, #372]	; (bbfb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bbe3e:	4293      	cmp	r3, r2
   bbe40:	d156      	bne.n	bbef0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bbe42:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bbe46:	2e00      	cmp	r6, #0
   bbe48:	f43e aa6d 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bbe4c:	68a8      	ldr	r0, [r5, #8]
   bbe4e:	2100      	movs	r1, #0
   bbe50:	f7fc fca2 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe54:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bbe56:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbe58:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bbe5c:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbe5e:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe60:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbe62:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe66:	2108      	movs	r1, #8
   bbe68:	f7fc fc96 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbe6c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbe70:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe74:	210c      	movs	r1, #12
   bbe76:	f7fc fc8f 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbe7a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe7c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbe7e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe82:	2110      	movs	r1, #16
   bbe84:	f7fc fc88 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbe88:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bbe8a:	68a8      	ldr	r0, [r5, #8]
   bbe8c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbe90:	2114      	movs	r1, #20
   bbe92:	f7fc fc81 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe96:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bbe98:	68a8      	ldr	r0, [r5, #8]
   bbe9a:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbe9e:	2118      	movs	r1, #24
   bbea0:	f7fc fc7a 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbea4:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bbea6:	68a8      	ldr	r0, [r5, #8]
   bbea8:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbeac:	211c      	movs	r1, #28
   bbeae:	f7fc fc73 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbeb2:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbeb4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbeb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbebc:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbebe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bbec4:	b182      	cbz	r2, bbee8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbec6:	7819      	ldrb	r1, [r3, #0]
   bbec8:	0708      	lsls	r0, r1, #28
   bbeca:	d40d      	bmi.n	bbee8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bbecc:	1d19      	adds	r1, r3, #4
   bbece:	3324      	adds	r3, #36	; 0x24
   bbed0:	f851 0b04 	ldr.w	r0, [r1], #4
   bbed4:	f842 0b04 	str.w	r0, [r2], #4
   bbed8:	4299      	cmp	r1, r3
   bbeda:	d1f9      	bne.n	bbed0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbedc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bbee0:	7813      	ldrb	r3, [r2, #0]
   bbee2:	f043 0308 	orr.w	r3, r3, #8
   bbee6:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bbee8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbeec:	f7fe baa9 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bbef0:	4a31      	ldr	r2, [pc, #196]	; (bbfb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bbef2:	4293      	cmp	r3, r2
   bbef4:	f47e aa17 	bne.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bbef8:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bbefc:	2e00      	cmp	r6, #0
   bbefe:	f43e aa12 	beq.w	ba326 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bbf02:	68a8      	ldr	r0, [r5, #8]
   bbf04:	2100      	movs	r1, #0
   bbf06:	f7fc fc47 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbf0a:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bbf0c:	68a8      	ldr	r0, [r5, #8]
   bbf0e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bbf12:	2108      	movs	r1, #8
   bbf14:	f7fc fc40 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbf18:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf1a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbf1c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf20:	210c      	movs	r1, #12
   bbf22:	f7fc fc39 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbf26:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf28:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbf2a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf2e:	2110      	movs	r1, #16
   bbf30:	f7fc fc32 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbf34:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf36:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbf38:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf3c:	2114      	movs	r1, #20
   bbf3e:	f7fc fc2b 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbf42:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf44:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbf46:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf4a:	2118      	movs	r1, #24
   bbf4c:	f7fc fc24 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbf50:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf52:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbf54:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf58:	211c      	movs	r1, #28
   bbf5a:	f7fc fc1d 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbf5e:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf60:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbf62:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbf66:	2120      	movs	r1, #32
   bbf68:	f7fc fc16 	bl	b8798 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbf6c:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbf6e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbf72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf76:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbf78:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbf7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bbf7e:	b182      	cbz	r2, bbfa2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbf80:	7819      	ldrb	r1, [r3, #0]
   bbf82:	0709      	lsls	r1, r1, #28
   bbf84:	d40d      	bmi.n	bbfa2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bbf86:	1d19      	adds	r1, r3, #4
   bbf88:	3328      	adds	r3, #40	; 0x28
   bbf8a:	f851 0b04 	ldr.w	r0, [r1], #4
   bbf8e:	f842 0b04 	str.w	r0, [r2], #4
   bbf92:	4299      	cmp	r1, r3
   bbf94:	d1f9      	bne.n	bbf8a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bbf96:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bbf9a:	7813      	ldrb	r3, [r2, #0]
   bbf9c:	f043 0308 	orr.w	r3, r3, #8
   bbfa0:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bbfa2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbfa6:	f7fe ba4c 	b.w	ba442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bbfaa:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bbfac:	2018      	movs	r0, #24
   bbfae:	f7ff b9a2 	b.w	bb2f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bbfb2:	bf00      	nop
   bbfb4:	00200100 	.word	0x00200100
   bbfb8:	00240200 	.word	0x00240200

000bbfbc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bbfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbfc0:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbfc2:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bbfc6:	f89d a020 	ldrb.w	sl, [sp, #32]
   bbfca:	4604      	mov	r4, r0
   bbfcc:	460f      	mov	r7, r1
   bbfce:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbfd0:	b993      	cbnz	r3, bbff8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bbfd2:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bbfd6:	886b      	ldrh	r3, [r5, #2]
   bbfd8:	88aa      	ldrh	r2, [r5, #4]
   bbfda:	3303      	adds	r3, #3
   bbfdc:	4293      	cmp	r3, r2
   bbfde:	db03      	blt.n	bbfe8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bbfe0:	4639      	mov	r1, r7
   bbfe2:	4620      	mov	r0, r4
   bbfe4:	f7fd fdf0 	bl	b9bc8 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bbfe8:	88ae      	ldrh	r6, [r5, #4]
   bbfea:	bb7e      	cbnz	r6, bc04c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bbfec:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bbfee:	88ab      	ldrh	r3, [r5, #4]
   bbff0:	3301      	adds	r3, #1
   bbff2:	80ab      	strh	r3, [r5, #4]
}
   bbff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbff8:	2b03      	cmp	r3, #3
   bbffa:	d124      	bne.n	bc046 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bbffc:	7852      	ldrb	r2, [r2, #1]
   bbffe:	7829      	ldrb	r1, [r5, #0]
   bc000:	f7fc fdda 	bl	b8bb8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bc004:	4680      	mov	r8, r0
   bc006:	2800      	cmp	r0, #0
   bc008:	d1e5      	bne.n	bbfd6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc00a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc00e:	b91b      	cbnz	r3, bc018 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bc010:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc014:	2b00      	cmp	r3, #0
   bc016:	d0de      	beq.n	bbfd6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bc018:	49b7      	ldr	r1, [pc, #732]	; (bc2f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bc01a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc01e:	f005 fab6 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bc022:	7829      	ldrb	r1, [r5, #0]
   bc024:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc028:	220a      	movs	r2, #10
   bc02a:	f7fc fbd5 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bc02e:	49b3      	ldr	r1, [pc, #716]	; (bc2fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bc030:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc034:	f005 faab 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bc038:	7869      	ldrb	r1, [r5, #1]
   bc03a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc03e:	220a      	movs	r2, #10
   bc040:	f7fc fbd1 	bl	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc044:	e7c7      	b.n	bbfd6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bc046:	f04f 0802 	mov.w	r8, #2
   bc04a:	e7c4      	b.n	bbfd6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bc04c:	2e01      	cmp	r6, #1
   bc04e:	d101      	bne.n	bc054 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bc050:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc052:	e7cc      	b.n	bbfee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bc054:	2e02      	cmp	r6, #2
   bc056:	d101      	bne.n	bc05c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bc058:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc05a:	e7c8      	b.n	bbfee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bc05c:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bc05e:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bc060:	d103      	bne.n	bc06a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bc062:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bc066:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc068:	e7c1      	b.n	bbfee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bc06a:	1d0b      	adds	r3, r1, #4
   bc06c:	429e      	cmp	r6, r3
   bc06e:	d136      	bne.n	bc0de <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bc070:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc072:	88aa      	ldrh	r2, [r5, #4]
   bc074:	f108 0306 	add.w	r3, r8, #6
   bc078:	429a      	cmp	r2, r3
   bc07a:	d1b8      	bne.n	bbfee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bc07c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bc080:	2b00      	cmp	r3, #0
   bc082:	d1b4      	bne.n	bbfee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bc084:	2200      	movs	r2, #0
   bc086:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc088:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bc08c:	b91a      	cbnz	r2, bc096 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bc08e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bc092:	2a00      	cmp	r2, #0
   bc094:	d0ab      	beq.n	bbfee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bc096:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bc09a:	2b00      	cmp	r3, #0
   bc09c:	f000 8170 	beq.w	bc380 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bc0a0:	4997      	ldr	r1, [pc, #604]	; (bc300 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bc0a2:	f005 fa74 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bc0a6:	4997      	ldr	r1, [pc, #604]	; (bc304 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bc0a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0ac:	f005 fa6f 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc0b0:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bc0b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0b8:	220a      	movs	r2, #10
   bc0ba:	f005 fa84 	bl	c15c6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bc0be:	4992      	ldr	r1, [pc, #584]	; (bc308 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bc0c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0c4:	f005 fa63 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bc0c8:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bc0cc:	220a      	movs	r2, #10
   bc0ce:	4641      	mov	r1, r8
   bc0d0:	4620      	mov	r0, r4
   bc0d2:	f005 fa78 	bl	c15c6 <_ZN5Print11printNumberEmh>
        n += println();
   bc0d6:	4620      	mov	r0, r4
   bc0d8:	f005 fa5d 	bl	c1596 <_ZN5Print7printlnEv>
        return n;
   bc0dc:	e787      	b.n	bbfee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bc0de:	3105      	adds	r1, #5
   bc0e0:	428e      	cmp	r6, r1
   bc0e2:	f040 812f 	bne.w	bc344 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bc0e6:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bc0e8:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bc0ea:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bc0ec:	89a9      	ldrh	r1, [r5, #12]
   bc0ee:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bc0f2:	4291      	cmp	r1, r2
   bc0f4:	f040 80ae 	bne.w	bc254 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bc0f8:	2301      	movs	r3, #1
   bc0fa:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bc0fc:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bc100:	7829      	ldrb	r1, [r5, #0]
   bc102:	4549      	cmp	r1, r9
   bc104:	d155      	bne.n	bc1b2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bc106:	786b      	ldrb	r3, [r5, #1]
   bc108:	4553      	cmp	r3, sl
   bc10a:	d152      	bne.n	bc1b2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bc10c:	2301      	movs	r3, #1
   bc10e:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bc110:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc114:	b3b3      	cbz	r3, bc184 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bc116:	497d      	ldr	r1, [pc, #500]	; (bc30c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bc118:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc11c:	f005 fa37 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc120:	220a      	movs	r2, #10
   bc122:	8869      	ldrh	r1, [r5, #2]
   bc124:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc128:	f005 fa4d 	bl	c15c6 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bc12c:	4978      	ldr	r1, [pc, #480]	; (bc310 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bc12e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc132:	f005 fa2c 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bc136:	2200      	movs	r2, #0
   bc138:	4629      	mov	r1, r5
   bc13a:	4620      	mov	r0, r4
   bc13c:	f7fd ff50 	bl	b9fe0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc140:	7bab      	ldrb	r3, [r5, #14]
   bc142:	2b01      	cmp	r3, #1
   bc144:	d104      	bne.n	bc150 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bc146:	4973      	ldr	r1, [pc, #460]	; (bc314 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bc148:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc14c:	f005 fa39 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc150:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bc154:	2b01      	cmp	r3, #1
   bc156:	d104      	bne.n	bc162 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bc158:	496f      	ldr	r1, [pc, #444]	; (bc318 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bc15a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc15e:	f005 fa30 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc162:	7beb      	ldrb	r3, [r5, #15]
   bc164:	2b01      	cmp	r3, #1
   bc166:	d104      	bne.n	bc172 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bc168:	496c      	ldr	r1, [pc, #432]	; (bc31c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bc16a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc16e:	f005 fa28 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc172:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bc176:	2b01      	cmp	r3, #1
   bc178:	d104      	bne.n	bc184 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bc17a:	4969      	ldr	r1, [pc, #420]	; (bc320 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bc17c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc180:	f005 fa1f 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bc184:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bc188:	b91b      	cbnz	r3, bc192 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bc18a:	4629      	mov	r1, r5
   bc18c:	4620      	mov	r0, r4
   bc18e:	f7fe f8b9 	bl	ba304 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bc192:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc196:	2b03      	cmp	r3, #3
   bc198:	f47f af6b 	bne.w	bc072 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bc19c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc1a0:	b108      	cbz	r0, bc1a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bc1a2:	f7f7 ff7c 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bc1a6:	2300      	movs	r3, #0
   bc1a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bc1ac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc1b0:	e75f      	b.n	bc072 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc1b2:	882b      	ldrh	r3, [r5, #0]
   bc1b4:	f240 1205 	movw	r2, #261	; 0x105
   bc1b8:	4293      	cmp	r3, r2
   bc1ba:	d123      	bne.n	bc204 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bc1bc:	68ab      	ldr	r3, [r5, #8]
   bc1be:	781a      	ldrb	r2, [r3, #0]
   bc1c0:	454a      	cmp	r2, r9
   bc1c2:	d102      	bne.n	bc1ca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc1c4:	785b      	ldrb	r3, [r3, #1]
   bc1c6:	4553      	cmp	r3, sl
   bc1c8:	d0a0      	beq.n	bc10c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc1ca:	786a      	ldrb	r2, [r5, #1]
   bc1cc:	4620      	mov	r0, r4
   bc1ce:	f7fc fbf1 	bl	b89b4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc1d2:	2800      	cmp	r0, #0
   bc1d4:	d09c      	beq.n	bc110 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bc1d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc1da:	2b00      	cmp	r3, #0
   bc1dc:	d0d2      	beq.n	bc184 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bc1de:	4951      	ldr	r1, [pc, #324]	; (bc324 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bc1e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1e4:	f005 f9d3 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bc1e8:	2210      	movs	r2, #16
   bc1ea:	7829      	ldrb	r1, [r5, #0]
   bc1ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1f0:	f7fc faf2 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc1f4:	4941      	ldr	r1, [pc, #260]	; (bc2fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bc1f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1fa:	f005 f9c8 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bc1fe:	7869      	ldrb	r1, [r5, #1]
   bc200:	2210      	movs	r2, #16
   bc202:	e022      	b.n	bc24a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc204:	2b05      	cmp	r3, #5
   bc206:	d1e0      	bne.n	bc1ca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc208:	68ab      	ldr	r3, [r5, #8]
   bc20a:	781a      	ldrb	r2, [r3, #0]
   bc20c:	454a      	cmp	r2, r9
   bc20e:	d1dc      	bne.n	bc1ca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc210:	785b      	ldrb	r3, [r3, #1]
   bc212:	4553      	cmp	r3, sl
   bc214:	d1d9      	bne.n	bc1ca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bc216:	2303      	movs	r3, #3
   bc218:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bc21a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc21e:	2b00      	cmp	r3, #0
   bc220:	d0b0      	beq.n	bc184 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bc222:	4941      	ldr	r1, [pc, #260]	; (bc328 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bc224:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc228:	f005 f9b1 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bc22c:	68ab      	ldr	r3, [r5, #8]
   bc22e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc232:	7819      	ldrb	r1, [r3, #0]
   bc234:	2210      	movs	r2, #16
   bc236:	f7fc facf 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bc23a:	493c      	ldr	r1, [pc, #240]	; (bc32c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bc23c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc240:	f005 f9a5 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bc244:	68ab      	ldr	r3, [r5, #8]
   bc246:	7859      	ldrb	r1, [r3, #1]
   bc248:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bc24a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc24e:	f7fc faca 	bl	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc252:	e75d      	b.n	bc110 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bc254:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bc256:	782b      	ldrb	r3, [r5, #0]
   bc258:	454b      	cmp	r3, r9
   bc25a:	d143      	bne.n	bc2e4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bc25c:	786a      	ldrb	r2, [r5, #1]
   bc25e:	4552      	cmp	r2, sl
   bc260:	d140      	bne.n	bc2e4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bc262:	2300      	movs	r3, #0
   bc264:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc266:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc26a:	b91b      	cbnz	r3, bc274 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bc26c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc270:	2b00      	cmp	r3, #0
   bc272:	d08e      	beq.n	bc192 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bc274:	492e      	ldr	r1, [pc, #184]	; (bc330 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bc276:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc27a:	f005 f988 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bc27e:	492d      	ldr	r1, [pc, #180]	; (bc334 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bc280:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc284:	f005 f983 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bc288:	7b29      	ldrb	r1, [r5, #12]
   bc28a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc28e:	220a      	movs	r2, #10
   bc290:	f7fc faa2 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bc294:	4928      	ldr	r1, [pc, #160]	; (bc338 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bc296:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc29a:	f005 f978 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bc29e:	7b69      	ldrb	r1, [r5, #13]
   bc2a0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2a4:	220a      	movs	r2, #10
   bc2a6:	f7fc fa97 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bc2aa:	4924      	ldr	r1, [pc, #144]	; (bc33c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bc2ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2b0:	f005 f96d 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bc2b4:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bc2b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2bc:	220a      	movs	r2, #10
   bc2be:	f7fc fa8b 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bc2c2:	491f      	ldr	r1, [pc, #124]	; (bc340 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bc2c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2c8:	f005 f961 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bc2cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2d0:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bc2d4:	220a      	movs	r2, #10
   bc2d6:	f7fc fa7f 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bc2da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc2de:	f005 f95a 	bl	c1596 <_ZN5Print7printlnEv>
   bc2e2:	e756      	b.n	bc192 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc2e4:	2b05      	cmp	r3, #5
   bc2e6:	d1be      	bne.n	bc266 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc2e8:	68ab      	ldr	r3, [r5, #8]
   bc2ea:	781a      	ldrb	r2, [r3, #0]
   bc2ec:	454a      	cmp	r2, r9
   bc2ee:	d1ba      	bne.n	bc266 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc2f0:	785b      	ldrb	r3, [r3, #1]
   bc2f2:	4553      	cmp	r3, sl
   bc2f4:	d1b7      	bne.n	bc266 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc2f6:	e7b4      	b.n	bc262 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bc2f8:	000c7308 	.word	0x000c7308
   bc2fc:	000c7379 	.word	0x000c7379
   bc300:	000c7481 	.word	0x000c7481
   bc304:	000c74d8 	.word	0x000c74d8
   bc308:	000c74ee 	.word	0x000c74ee
   bc30c:	000c73b5 	.word	0x000c73b5
   bc310:	000c73c6 	.word	0x000c73c6
   bc314:	000c73d2 	.word	0x000c73d2
   bc318:	000c73e6 	.word	0x000c73e6
   bc31c:	000c73fa 	.word	0x000c73fa
   bc320:	000c7414 	.word	0x000c7414
   bc324:	000c7381 	.word	0x000c7381
   bc328:	000c7340 	.word	0x000c7340
   bc32c:	000c736f 	.word	0x000c736f
   bc330:	000c742e 	.word	0x000c742e
   bc334:	000c743f 	.word	0x000c743f
   bc338:	000c744c 	.word	0x000c744c
   bc33c:	000c7459 	.word	0x000c7459
   bc340:	000c746d 	.word	0x000c746d
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc344:	786a      	ldrb	r2, [r5, #1]
   bc346:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bc348:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc34c:	4620      	mov	r0, r4
   bc34e:	f7fc fb31 	bl	b89b4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bc352:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bc356:	2800      	cmp	r0, #0
   bc358:	bf18      	it	ne
   bc35a:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bc35e:	2b00      	cmp	r3, #0
   bc360:	f47f ae87 	bne.w	bc072 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bc364:	1ef3      	subs	r3, r6, #3
   bc366:	454b      	cmp	r3, r9
   bc368:	f77f ae83 	ble.w	bc072 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bc36c:	3e04      	subs	r6, #4
   bc36e:	eba6 0609 	sub.w	r6, r6, r9
   bc372:	4546      	cmp	r6, r8
   bc374:	da02      	bge.n	bc37c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bc376:	68ab      	ldr	r3, [r5, #8]
   bc378:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc37a:	e67a      	b.n	bc072 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bc37c:	2301      	movs	r3, #1
   bc37e:	e681      	b.n	bc084 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bc380:	4900      	ldr	r1, [pc, #0]	; (bc384 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bc382:	e68e      	b.n	bc0a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bc384:	000c74a6 	.word	0x000c74a6

000bc388 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bc388:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc38a:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bc38e:	4604      	mov	r4, r0
   bc390:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc392:	b113      	cbz	r3, bc39a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bc394:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bc398:	b953      	cbnz	r3, bc3b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bc39a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bc39e:	b128      	cbz	r0, bc3ac <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bc3a0:	490e      	ldr	r1, [pc, #56]	; (bc3dc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc3a2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3a6:	f005 f90c 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bc3aa:	2000      	movs	r0, #0
}
   bc3ac:	b003      	add	sp, #12
   bc3ae:	bd30      	pop	{r4, r5, pc}
   bc3b0:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bc3b2:	f7fd ff12 	bl	ba1da <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bc3b6:	4285      	cmp	r5, r0
   bc3b8:	9901      	ldr	r1, [sp, #4]
   bc3ba:	d908      	bls.n	bc3ce <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc3bc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3c0:	b91b      	cbnz	r3, bc3ca <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bc3c2:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc3c6:	2800      	cmp	r0, #0
   bc3c8:	d0f0      	beq.n	bc3ac <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc3ca:	4905      	ldr	r1, [pc, #20]	; (bc3e0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bc3cc:	e7e9      	b.n	bc3a2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bc3ce:	4620      	mov	r0, r4
   bc3d0:	462a      	mov	r2, r5
   bc3d2:	f7fd ff0b 	bl	ba1ec <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bc3d6:	2001      	movs	r0, #1
   bc3d8:	e7e8      	b.n	bc3ac <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bc3da:	bf00      	nop
   bc3dc:	000c7506 	.word	0x000c7506
   bc3e0:	000c7531 	.word	0x000c7531

000bc3e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bc3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc3e8:	4604      	mov	r4, r0
   bc3ea:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bc3ec:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bc3f0:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bc3f4:	f88d 100f 	strb.w	r1, [sp, #15]
   bc3f8:	4615      	mov	r5, r2
   bc3fa:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bc3fc:	b118      	cbz	r0, bc406 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bc3fe:	6803      	ldr	r3, [r0, #0]
   bc400:	b2c9      	uxtb	r1, r1
   bc402:	689b      	ldr	r3, [r3, #8]
   bc404:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bc406:	7823      	ldrb	r3, [r4, #0]
   bc408:	2b01      	cmp	r3, #1
   bc40a:	d80e      	bhi.n	bc42a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc40c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc410:	2bb5      	cmp	r3, #181	; 0xb5
   bc412:	d12e      	bne.n	bc472 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bc414:	2300      	movs	r3, #0
   bc416:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc41a:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bc41c:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc420:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc424:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc426:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bc42a:	7826      	ldrb	r6, [r4, #0]
   bc42c:	2e02      	cmp	r6, #2
   bc42e:	f040 81d5 	bne.w	bc7dc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bc432:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc436:	bb5b      	cbnz	r3, bc490 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bc438:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc43c:	2bb5      	cmp	r3, #181	; 0xb5
   bc43e:	d001      	beq.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bc440:	2300      	movs	r3, #0
   bc442:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc444:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc448:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc44c:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc450:	2b01      	cmp	r3, #1
   bc452:	f040 81a3 	bne.w	bc79c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc456:	463b      	mov	r3, r7
   bc458:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc45c:	4620      	mov	r0, r4
   bc45e:	f7ff fdad 	bl	bbfbc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bc462:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc466:	3301      	adds	r3, #1
   bc468:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bc46c:	b005      	add	sp, #20
   bc46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bc472:	2b24      	cmp	r3, #36	; 0x24
   bc474:	d105      	bne.n	bc482 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bc476:	2300      	movs	r3, #0
   bc478:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bc47c:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc47e:	7023      	strb	r3, [r4, #0]
   bc480:	e7d3      	b.n	bc42a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bc482:	2bd3      	cmp	r3, #211	; 0xd3
   bc484:	d1d1      	bne.n	bc42a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bc486:	2300      	movs	r3, #0
   bc488:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc48c:	2303      	movs	r3, #3
   bc48e:	e7f6      	b.n	bc47e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bc490:	2b01      	cmp	r3, #1
   bc492:	d103      	bne.n	bc49c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bc494:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc498:	2b62      	cmp	r3, #98	; 0x62
   bc49a:	e7d0      	b.n	bc43e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bc49c:	2b02      	cmp	r3, #2
   bc49e:	d10e      	bne.n	bc4be <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bc4a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc4a4:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bc4a8:	2200      	movs	r2, #0
   bc4aa:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bc4ae:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bc4b2:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bc4b6:	88eb      	ldrh	r3, [r5, #6]
   bc4b8:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bc4bc:	e7c2      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bc4be:	2b03      	cmp	r3, #3
   bc4c0:	f040 80b7 	bne.w	bc632 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc4c4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bc4c8:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bc4cc:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc4d0:	2905      	cmp	r1, #5
   bc4d2:	d0b7      	beq.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bc4d4:	42b9      	cmp	r1, r7
   bc4d6:	d10c      	bne.n	bc4f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bc4d8:	4546      	cmp	r6, r8
   bc4da:	d10a      	bne.n	bc4f2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc4dc:	2300      	movs	r3, #0
   bc4de:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc4e2:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bc4e4:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bc4e8:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bc4ea:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bc4ee:	80ab      	strh	r3, [r5, #4]
   bc4f0:	e7a8      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bc4f2:	4632      	mov	r2, r6
   bc4f4:	4620      	mov	r0, r4
   bc4f6:	f7fc fa5d 	bl	b89b4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc4fa:	2800      	cmp	r0, #0
   bc4fc:	f000 8095 	beq.w	bc62a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bc500:	4632      	mov	r2, r6
   bc502:	4620      	mov	r0, r4
   bc504:	f7fc fb58 	bl	b8bb8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bc508:	4606      	mov	r6, r0
   bc50a:	b9e8      	cbnz	r0, bc548 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc50c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc510:	b913      	cbnz	r3, bc518 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bc512:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc516:	b1bb      	cbz	r3, bc548 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bc518:	49a7      	ldr	r1, [pc, #668]	; (bc7b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bc51a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc51e:	f005 f836 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bc522:	220a      	movs	r2, #10
   bc524:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc528:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc52c:	f7fc f954 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc530:	49a2      	ldr	r1, [pc, #648]	; (bc7bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc532:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc536:	f005 f82a 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bc53a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc53e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc542:	220a      	movs	r2, #10
   bc544:	f7fc f94f 	bl	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bc548:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bc54c:	b1a3      	cbz	r3, bc578 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc54e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc552:	b913      	cbnz	r3, bc55a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bc554:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc558:	b123      	cbz	r3, bc564 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bc55a:	4999      	ldr	r1, [pc, #612]	; (bc7c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bc55c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc560:	f005 f82f 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bc564:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc568:	b108      	cbz	r0, bc56e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bc56a:	f7f7 fd98 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bc56e:	2300      	movs	r3, #0
   bc570:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bc574:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bc578:	4630      	mov	r0, r6
   bc57a:	f7f7 fd8e 	bl	b409a <_Znaj>
   bc57e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc582:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bc586:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bc58a:	bb38      	cbnz	r0, bc5dc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc58c:	b913      	cbnz	r3, bc594 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bc58e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc592:	b1e3      	cbz	r3, bc5ce <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bc594:	498b      	ldr	r1, [pc, #556]	; (bc7c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bc596:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc59a:	f004 fff8 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc59e:	2210      	movs	r2, #16
   bc5a0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc5a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5a8:	f7fc f916 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc5ac:	4983      	ldr	r1, [pc, #524]	; (bc7bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc5ae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5b2:	f004 ffec 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc5b6:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc5ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5be:	2210      	movs	r2, #16
   bc5c0:	f7fc f911 	bl	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bc5c4:	4980      	ldr	r1, [pc, #512]	; (bc7c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bc5c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5ca:	f004 fffa 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc5ce:	2300      	movs	r3, #0
   bc5d0:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc5d4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bc5d8:	702b      	strb	r3, [r5, #0]
   bc5da:	e783      	b.n	bc4e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bc5dc:	2203      	movs	r2, #3
   bc5de:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bc5e2:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bc5e6:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bc5ea:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bc5ee:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bc5f2:	2b00      	cmp	r3, #0
   bc5f4:	f43f af26 	beq.w	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bc5f8:	4974      	ldr	r1, [pc, #464]	; (bc7cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bc5fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5fe:	f004 ffc6 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc602:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc606:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc60a:	2210      	movs	r2, #16
   bc60c:	f7fc f8e4 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc610:	496a      	ldr	r1, [pc, #424]	; (bc7bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc612:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc616:	f004 ffba 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc61a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc61e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc622:	2210      	movs	r2, #16
   bc624:	f7fc f8df 	bl	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc628:	e70c      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bc62a:	2301      	movs	r3, #1
   bc62c:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bc630:	e708      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bc632:	2b04      	cmp	r3, #4
   bc634:	d104      	bne.n	bc640 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bc636:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bc63a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bc63e:	e701      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bc640:	2b05      	cmp	r3, #5
   bc642:	d106      	bne.n	bc652 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bc644:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc648:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc64c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bc650:	e7f3      	b.n	bc63a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bc652:	2b06      	cmp	r3, #6
   bc654:	d12b      	bne.n	bc6ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc656:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc65a:	bb13      	cbnz	r3, bc6a2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc65c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc660:	b913      	cbnz	r3, bc668 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bc662:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc666:	b1bb      	cbz	r3, bc698 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bc668:	4959      	ldr	r1, [pc, #356]	; (bc7d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bc66a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc66e:	f004 ff8e 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bc672:	2210      	movs	r2, #16
   bc674:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc678:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc67c:	f7fc f8ac 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc680:	494e      	ldr	r1, [pc, #312]	; (bc7bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc682:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc686:	f004 ff82 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bc68a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc68e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc692:	2210      	movs	r2, #16
   bc694:	f7fc f8a7 	bl	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bc698:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc69c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bc6a0:	e6d0      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bc6a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc6a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc6aa:	701a      	strb	r2, [r3, #0]
   bc6ac:	e6ca      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc6ae:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc6b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc6b4:	f47f aec6 	bne.w	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc6b8:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc6bc:	bb9b      	cbnz	r3, bc726 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bc6be:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bc6c2:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc6c6:	2b02      	cmp	r3, #2
   bc6c8:	f47f aebc 	bne.w	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc6cc:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc6d0:	2905      	cmp	r1, #5
   bc6d2:	f47f aeb7 	bne.w	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc6d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc6da:	781a      	ldrb	r2, [r3, #0]
   bc6dc:	42ba      	cmp	r2, r7
   bc6de:	f47f aeb1 	bne.w	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc6e2:	785a      	ldrb	r2, [r3, #1]
   bc6e4:	4542      	cmp	r2, r8
   bc6e6:	f47f aead 	bne.w	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc6ea:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc6ee:	2a02      	cmp	r2, #2
   bc6f0:	d121      	bne.n	bc736 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc6f2:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc6f6:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc6fa:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc6fe:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc702:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc706:	2001      	movs	r0, #1
   bc708:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc70c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc710:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc714:	781b      	ldrb	r3, [r3, #0]
   bc716:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc718:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc71c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc720:	7852      	ldrb	r2, [r2, #1]
   bc722:	705a      	strb	r2, [r3, #1]
   bc724:	e68e      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc726:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc728:	bf16      	itet	ne
   bc72a:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc72e:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc732:	705a      	strbne	r2, [r3, #1]
   bc734:	e7c5      	b.n	bc6c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc736:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc73a:	b923      	cbnz	r3, bc746 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc73c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc740:	2b00      	cmp	r3, #0
   bc742:	f43f ae7f 	beq.w	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc746:	4923      	ldr	r1, [pc, #140]	; (bc7d4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc748:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc74c:	f004 ff1f 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc750:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc754:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc758:	7819      	ldrb	r1, [r3, #0]
   bc75a:	2210      	movs	r2, #16
   bc75c:	f7fc f83c 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc760:	4916      	ldr	r1, [pc, #88]	; (bc7bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc762:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc766:	f004 ff12 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc76a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc76e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc772:	7859      	ldrb	r1, [r3, #1]
   bc774:	2210      	movs	r2, #16
   bc776:	f7fc f82f 	bl	b87d8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc77a:	4917      	ldr	r1, [pc, #92]	; (bc7d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc77c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc780:	f004 ff05 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc784:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc788:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc78c:	220a      	movs	r2, #10
   bc78e:	4630      	mov	r0, r6
   bc790:	f004 ff19 	bl	c15c6 <_ZN5Print11printNumberEmh>
        n += println();
   bc794:	4630      	mov	r0, r6
   bc796:	f004 fefe 	bl	c1596 <_ZN5Print7printlnEv>
        return n;
   bc79a:	e653      	b.n	bc444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc79c:	b913      	cbnz	r3, bc7a4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc79e:	463b      	mov	r3, r7
   bc7a0:	462a      	mov	r2, r5
   bc7a2:	e65b      	b.n	bc45c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc7a4:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc7a6:	bf08      	it	eq
   bc7a8:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc7ac:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc7ae:	bf18      	it	ne
   bc7b0:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc7b4:	e652      	b.n	bc45c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc7b6:	bf00      	nop
   bc7b8:	000c7572 	.word	0x000c7572
   bc7bc:	000c7379 	.word	0x000c7379
   bc7c0:	000c75a7 	.word	0x000c75a7
   bc7c4:	000c75e9 	.word	0x000c75e9
   bc7c8:	000c762e 	.word	0x000c762e
   bc7cc:	000c7660 	.word	0x000c7660
   bc7d0:	000c7691 	.word	0x000c7691
   bc7d4:	000c76c1 	.word	0x000c76c1
   bc7d8:	000c76f1 	.word	0x000c76f1
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc7dc:	2e01      	cmp	r6, #1
   bc7de:	f040 8188 	bne.w	bcaf2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc7e2:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc7e6:	2b00      	cmp	r3, #0
   bc7e8:	d146      	bne.n	bc878 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc7ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc7ee:	2a24      	cmp	r2, #36	; 0x24
   bc7f0:	f000 8086 	beq.w	bc900 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc7f4:	2300      	movs	r3, #0
   bc7f6:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc7f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc7fc:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc7fe:	bf04      	itt	eq
   bc800:	23fb      	moveq	r3, #251	; 0xfb
   bc802:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc806:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc80a:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc80e:	3501      	adds	r5, #1
   bc810:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc812:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc814:	bf08      	it	eq
   bc816:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc818:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc81c:	bf08      	it	eq
   bc81e:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc820:	2d00      	cmp	r5, #0
   bc822:	f47f ae23 	bne.w	bc46c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc826:	4620      	mov	r0, r4
   bc828:	f7fc fc20 	bl	b906c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc82c:	2800      	cmp	r0, #0
   bc82e:	f000 8120 	beq.w	bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc832:	4620      	mov	r0, r4
   bc834:	f7fc fd7c 	bl	b9330 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc838:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc83a:	4620      	mov	r0, r4
   bc83c:	f7fc fdfa 	bl	b9434 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc840:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc842:	4620      	mov	r0, r4
   bc844:	f7fd f88a 	bl	b995c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc848:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc84a:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc84c:	1e41      	subs	r1, r0, #1
   bc84e:	428e      	cmp	r6, r1
   bc850:	f280 80b4 	bge.w	bc9bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc854:	783a      	ldrb	r2, [r7, #0]
   bc856:	3a04      	subs	r2, #4
   bc858:	4296      	cmp	r6, r2
   bc85a:	f280 80af 	bge.w	bc9bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc85e:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc860:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc864:	f000 80ad 	beq.w	bc9c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc868:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc86a:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc86e:	bf18      	it	ne
   bc870:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc872:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc874:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc876:	e7ea      	b.n	bc84e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc878:	2b01      	cmp	r3, #1
   bc87a:	d103      	bne.n	bc884 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc87c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc880:	2a47      	cmp	r2, #71	; 0x47
   bc882:	e7b5      	b.n	bc7f0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc884:	b2da      	uxtb	r2, r3
   bc886:	2a05      	cmp	r2, #5
   bc888:	d93a      	bls.n	bc900 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc88a:	4620      	mov	r0, r4
   bc88c:	f7fc fbee 	bl	b906c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc890:	b308      	cbz	r0, bc8d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc892:	4620      	mov	r0, r4
   bc894:	f7fc fd4c 	bl	b9330 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc898:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc89a:	4620      	mov	r0, r4
   bc89c:	f7fc fdca 	bl	b9434 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc8a0:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc8a2:	4620      	mov	r0, r4
   bc8a4:	f7fd f85a 	bl	b995c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc8a8:	782b      	ldrb	r3, [r5, #0]
   bc8aa:	4283      	cmp	r3, r0
   bc8ac:	d213      	bcs.n	bc8d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc8ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc8b2:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc8b4:	782b      	ldrb	r3, [r5, #0]
   bc8b6:	3301      	adds	r3, #1
   bc8b8:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc8ba:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc8bc:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc8be:	d10a      	bne.n	bc8d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc8c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc8c4:	b913      	cbnz	r3, bc8cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc8c6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc8ca:	b123      	cbz	r3, bc8d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc8cc:	498f      	ldr	r1, [pc, #572]	; (bcb0c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc8ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8d2:	f004 fe76 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc8d6:	4620      	mov	r0, r4
   bc8d8:	f7fc f9c8 	bl	b8c6c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc8dc:	b128      	cbz	r0, bc8ea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc8de:	2201      	movs	r2, #1
   bc8e0:	f10d 010f 	add.w	r1, sp, #15
   bc8e4:	4620      	mov	r0, r4
   bc8e6:	f7ff fd4f 	bl	bc388 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc8ea:	4620      	mov	r0, r4
   bc8ec:	f7fc faee 	bl	b8ecc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc8f0:	2800      	cmp	r0, #0
   bc8f2:	d081      	beq.n	bc7f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc8f4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc8f8:	4620      	mov	r0, r4
   bc8fa:	f7fc fbaf 	bl	b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc8fe:	e77b      	b.n	bc7f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc900:	18e2      	adds	r2, r4, r3
   bc902:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc906:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc90a:	2b05      	cmp	r3, #5
   bc90c:	f47f af74 	bne.w	bc7f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc910:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc914:	b923      	cbnz	r3, bc920 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc916:	4620      	mov	r0, r4
   bc918:	f7fc fa70 	bl	b8dfc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc91c:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc920:	4620      	mov	r0, r4
   bc922:	f7fc fba3 	bl	b906c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc926:	b1b8      	cbz	r0, bc958 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc928:	4620      	mov	r0, r4
   bc92a:	f7fc fd01 	bl	b9330 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc92e:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc930:	4620      	mov	r0, r4
   bc932:	f7fc fd7f 	bl	b9434 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc936:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc938:	4620      	mov	r0, r4
   bc93a:	f7fd f80f 	bl	b995c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc93e:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc940:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc942:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc944:	2100      	movs	r1, #0
   bc946:	4628      	mov	r0, r5
   bc948:	f007 fea2 	bl	c4690 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc94c:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc950:	602b      	str	r3, [r5, #0]
   bc952:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc956:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc958:	4620      	mov	r0, r4
   bc95a:	f7fc f987 	bl	b8c6c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc95e:	b128      	cbz	r0, bc96c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc960:	2206      	movs	r2, #6
   bc962:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc966:	4620      	mov	r0, r4
   bc968:	f7ff fd0e 	bl	bc388 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc96c:	4620      	mov	r0, r4
   bc96e:	f7fc faad 	bl	b8ecc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc972:	b1e8      	cbz	r0, bc9b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc974:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc978:	4620      	mov	r0, r4
   bc97a:	f7fc fb6f 	bl	b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc97e:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc982:	4620      	mov	r0, r4
   bc984:	f7fc fb6a 	bl	b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc988:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc98c:	4620      	mov	r0, r4
   bc98e:	f7fc fb65 	bl	b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc992:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc996:	4620      	mov	r0, r4
   bc998:	f7fc fb60 	bl	b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc99c:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc9a0:	4620      	mov	r0, r4
   bc9a2:	f7fc fb5b 	bl	b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc9a6:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc9aa:	4620      	mov	r0, r4
   bc9ac:	f7fc fb56 	bl	b905c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc9b0:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc9b4:	2b05      	cmp	r3, #5
   bc9b6:	f67f af1f 	bls.w	bc7f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc9ba:	e766      	b.n	bc88a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc9bc:	2d2a      	cmp	r5, #42	; 0x2a
   bc9be:	f040 808b 	bne.w	bcad8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc9c2:	091a      	lsrs	r2, r3, #4
   bc9c4:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc9c8:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc9ca:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc9cc:	f003 030f 	and.w	r3, r3, #15
   bc9d0:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc9d4:	bf84      	itt	hi
   bc9d6:	3237      	addhi	r2, #55	; 0x37
   bc9d8:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc9da:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc9de:	bf88      	it	hi
   bc9e0:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc9e4:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc9e8:	42ab      	cmp	r3, r5
   bc9ea:	eb08 0b06 	add.w	fp, r8, r6
   bc9ee:	d143      	bne.n	bca78 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc9f0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc9f4:	4553      	cmp	r3, sl
   bc9f6:	d13f      	bne.n	bca78 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc9f8:	4620      	mov	r0, r4
   bc9fa:	f7fc fd9d 	bl	b9538 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc9fe:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bca00:	4620      	mov	r0, r4
   bca02:	f7fc fe1d 	bl	b9640 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bca06:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bca08:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bca0a:	2100      	movs	r1, #0
   bca0c:	f007 fe40 	bl	c4690 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bca10:	783a      	ldrb	r2, [r7, #0]
   bca12:	4641      	mov	r1, r8
   bca14:	4630      	mov	r0, r6
   bca16:	f007 fe13 	bl	c4640 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bca1a:	783b      	ldrb	r3, [r7, #0]
   bca1c:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bca1e:	4620      	mov	r0, r4
   bca20:	f7fd f80e 	bl	b9a40 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bca24:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bca26:	f025 0503 	bic.w	r5, r5, #3
   bca2a:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bca2e:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bca30:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bca34:	4620      	mov	r0, r4
   bca36:	f7fc fba5 	bl	b9184 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bca3a:	b1d0      	cbz	r0, bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bca3c:	f01a 0104 	ands.w	r1, sl, #4
   bca40:	d117      	bne.n	bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bca42:	4620      	mov	r0, r4
   bca44:	9102      	str	r1, [sp, #8]
   bca46:	f7fc fe7f 	bl	b9748 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bca4a:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bca4c:	4620      	mov	r0, r4
   bca4e:	f7fc feff 	bl	b9850 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bca52:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bca54:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bca56:	464a      	mov	r2, r9
   bca58:	f007 fe1a 	bl	c4690 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bca5c:	783a      	ldrb	r2, [r7, #0]
   bca5e:	4641      	mov	r1, r8
   bca60:	4650      	mov	r0, sl
   bca62:	f007 fded 	bl	c4640 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bca66:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bca6a:	783b      	ldrb	r3, [r7, #0]
   bca6c:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bca70:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bca72:	2300      	movs	r3, #0
   bca74:	7023      	strb	r3, [r4, #0]
   bca76:	e4f9      	b.n	bc46c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca78:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca7c:	b91b      	cbnz	r3, bca86 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bca7e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca82:	2b00      	cmp	r3, #0
   bca84:	d0f5      	beq.n	bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bca86:	4922      	ldr	r1, [pc, #136]	; (bcb10 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bca88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca8c:	f004 fd7f 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bca90:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca94:	6803      	ldr	r3, [r0, #0]
   bca96:	4629      	mov	r1, r5
   bca98:	689b      	ldr	r3, [r3, #8]
   bca9a:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bca9c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaa0:	6803      	ldr	r3, [r0, #0]
   bcaa2:	4651      	mov	r1, sl
   bcaa4:	689b      	ldr	r3, [r3, #8]
   bcaa6:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bcaa8:	491a      	ldr	r1, [pc, #104]	; (bcb14 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bcaaa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaae:	f004 fd6e 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bcab2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcab6:	f89b 1000 	ldrb.w	r1, [fp]
   bcaba:	6803      	ldr	r3, [r0, #0]
   bcabc:	689b      	ldr	r3, [r3, #8]
   bcabe:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bcac0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcac4:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bcac8:	6803      	ldr	r3, [r0, #0]
   bcaca:	689b      	ldr	r3, [r3, #8]
   bcacc:	4798      	blx	r3
              _debugSerial->println();
   bcace:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcad2:	f004 fd60 	bl	c1596 <_ZN5Print7printlnEv>
   bcad6:	e7cc      	b.n	bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcad8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcadc:	b91b      	cbnz	r3, bcae6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bcade:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcae2:	2b00      	cmp	r3, #0
   bcae4:	d0c5      	beq.n	bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bcae6:	490c      	ldr	r1, [pc, #48]	; (bcb18 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bcae8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaec:	f004 fd69 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcaf0:	e7bf      	b.n	bca72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bcaf2:	2e03      	cmp	r6, #3
   bcaf4:	f47f acba 	bne.w	bc46c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bcaf8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bcafc:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bcb00:	4620      	mov	r0, r4
   bcb02:	f7fd f821 	bl	b9b48 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bcb06:	7020      	strb	r0, [r4, #0]
}
   bcb08:	e4b0      	b.n	bc46c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bcb0a:	bf00      	nop
   bcb0c:	000c76f8 	.word	0x000c76f8
   bcb10:	000c7716 	.word	0x000c7716
   bcb14:	000c7741 	.word	0x000c7741
   bcb18:	000c7747 	.word	0x000c7747

000bcb1c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bcb1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bcb20:	4604      	mov	r4, r0
   bcb22:	4699      	mov	r9, r3
   bcb24:	460f      	mov	r7, r1
   bcb26:	4690      	mov	r8, r2
   bcb28:	f001 f94c 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bcb2c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bcb30:	1ac0      	subs	r0, r0, r3
   bcb32:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bcb36:	4298      	cmp	r0, r3
   bcb38:	f0c0 80a8 	bcc.w	bcc8c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bcb3c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bcb40:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb44:	f003 fa2a 	bl	bff9c <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bcb48:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb4c:	21fd      	movs	r1, #253	; 0xfd
   bcb4e:	f7fb fe53 	bl	b87f8 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bcb52:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb56:	2100      	movs	r1, #0
   bcb58:	f003 fa27 	bl	bffaa <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bcb5c:	4605      	mov	r5, r0
   bcb5e:	b1a8      	cbz	r0, bcb8c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcb60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb64:	b933      	cbnz	r3, bcb74 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bcb66:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcb6a:	b91b      	cbnz	r3, bcb74 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bcb6c:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bcb6e:	b002      	add	sp, #8
   bcb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bcb74:	4946      	ldr	r1, [pc, #280]	; (bcc90 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bcb76:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb7a:	f004 fd08 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bcb7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb82:	220a      	movs	r2, #10
   bcb84:	4629      	mov	r1, r5
   bcb86:	f7fb fe2e 	bl	b87e6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bcb8a:	e7ef      	b.n	bcb6c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bcb8c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bcb90:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb94:	2202      	movs	r2, #2
   bcb96:	f003 f9fe 	bl	bff96 <_ZN7TwoWire11requestFromEhj>
   bcb9a:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bcb9c:	2d02      	cmp	r5, #2
   bcb9e:	d008      	beq.n	bcbb2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcba0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcba4:	b91b      	cbnz	r3, bcbae <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bcba6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcbaa:	2b00      	cmp	r3, #0
   bcbac:	d0de      	beq.n	bcb6c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bcbae:	4939      	ldr	r1, [pc, #228]	; (bcc94 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bcbb0:	e7e1      	b.n	bcb76 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bcbb2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcbb6:	6803      	ldr	r3, [r0, #0]
   bcbb8:	695b      	ldr	r3, [r3, #20]
   bcbba:	4798      	blx	r3
   bcbbc:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bcbbe:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcbc2:	6803      	ldr	r3, [r0, #0]
   bcbc4:	695b      	ldr	r3, [r3, #20]
   bcbc6:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bcbc8:	b2c6      	uxtb	r6, r0
   bcbca:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bcbce:	b22a      	sxth	r2, r5
   bcbd0:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bcbd2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcbd6:	b955      	cbnz	r5, bcbee <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bcbd8:	b123      	cbz	r3, bcbe4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bcbda:	492f      	ldr	r1, [pc, #188]	; (bcc98 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bcbdc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbe0:	f004 fcef 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcbe4:	f001 f8ee 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bcbe8:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bcbec:	e7be      	b.n	bcb6c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bcbee:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bcbf0:	bfb8      	it	lt
   bcbf2:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bcbf6:	2d64      	cmp	r5, #100	; 0x64
   bcbf8:	d936      	bls.n	bcc68 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bcbfa:	b17b      	cbz	r3, bcc1c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bcbfc:	4927      	ldr	r1, [pc, #156]	; (bcc9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bcbfe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc02:	f004 fcc4 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bcc06:	4629      	mov	r1, r5
   bcc08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc0c:	220a      	movs	r2, #10
   bcc0e:	f004 fcda 	bl	c15c6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bcc12:	4923      	ldr	r1, [pc, #140]	; (bcca0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bcc14:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc18:	f004 fcd3 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bcc1c:	2d00      	cmp	r5, #0
   bcc1e:	d035      	beq.n	bcc8c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bcc20:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bcc22:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bcc26:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcc2a:	42ae      	cmp	r6, r5
   bcc2c:	bf28      	it	cs
   bcc2e:	462e      	movcs	r6, r5
   bcc30:	4632      	mov	r2, r6
   bcc32:	f003 f9b0 	bl	bff96 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bcc36:	b2c0      	uxtb	r0, r0
   bcc38:	4286      	cmp	r6, r0
   bcc3a:	d197      	bne.n	bcb6c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bcc3c:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bcc40:	fa1f f38a 	uxth.w	r3, sl
   bcc44:	429e      	cmp	r6, r3
   bcc46:	d91e      	bls.n	bcc86 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bcc48:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcc4c:	6803      	ldr	r3, [r0, #0]
   bcc4e:	695b      	ldr	r3, [r3, #20]
   bcc50:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bcc52:	f8cd 9000 	str.w	r9, [sp]
   bcc56:	b2c1      	uxtb	r1, r0
   bcc58:	4643      	mov	r3, r8
   bcc5a:	463a      	mov	r2, r7
   bcc5c:	4620      	mov	r0, r4
   bcc5e:	f7ff fbc1 	bl	bc3e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bcc62:	f10a 0a01 	add.w	sl, sl, #1
   bcc66:	e7eb      	b.n	bcc40 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bcc68:	2b00      	cmp	r3, #0
   bcc6a:	d0d7      	beq.n	bcc1c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bcc6c:	490d      	ldr	r1, [pc, #52]	; (bcca4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bcc6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc72:	f004 fc8c 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
   bcc76:	4629      	mov	r1, r5
   bcc78:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcc7c:	220a      	movs	r2, #10
   bcc7e:	f004 fca2 	bl	c15c6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bcc82:	4909      	ldr	r1, [pc, #36]	; (bcca8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bcc84:	e7c6      	b.n	bcc14 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bcc86:	1bad      	subs	r5, r5, r6
   bcc88:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bcc8a:	e7c7      	b.n	bcc1c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bcc8c:	2001      	movs	r0, #1
   bcc8e:	e76e      	b.n	bcb6e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bcc90:	000c7768 	.word	0x000c7768
   bcc94:	000c779c 	.word	0x000c779c
   bcc98:	000c77d1 	.word	0x000c77d1
   bcc9c:	000c77f9 	.word	0x000c77f9
   bcca0:	000c7819 	.word	0x000c7819
   bcca4:	000c7829 	.word	0x000c7829
   bcca8:	000c7841 	.word	0x000c7841

000bccac <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bccac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bccae:	4604      	mov	r4, r0
   bccb0:	460d      	mov	r5, r1
   bccb2:	4616      	mov	r6, r2
   bccb4:	461f      	mov	r7, r3
  while (_serialPort->available())
   bccb6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bccba:	6803      	ldr	r3, [r0, #0]
   bccbc:	691b      	ldr	r3, [r3, #16]
   bccbe:	4798      	blx	r3
   bccc0:	b160      	cbz	r0, bccdc <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bccc2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bccc6:	6803      	ldr	r3, [r0, #0]
   bccc8:	695b      	ldr	r3, [r3, #20]
   bccca:	4798      	blx	r3
   bcccc:	9700      	str	r7, [sp, #0]
   bccce:	b2c1      	uxtb	r1, r0
   bccd0:	4633      	mov	r3, r6
   bccd2:	462a      	mov	r2, r5
   bccd4:	4620      	mov	r0, r4
   bccd6:	f7ff fb85 	bl	bc3e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bccda:	e7ec      	b.n	bccb6 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bccdc:	2001      	movs	r0, #1
   bccde:	b003      	add	sp, #12
   bcce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bcce4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bcce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcce8:	4604      	mov	r4, r0
   bccea:	b087      	sub	sp, #28
   bccec:	460d      	mov	r5, r1
   bccee:	4616      	mov	r6, r2
   bccf0:	461f      	mov	r7, r3
   bccf2:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bccf6:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bccfa:	fa5f f388 	uxtb.w	r3, r8
   bccfe:	429a      	cmp	r2, r3
   bcd00:	d90b      	bls.n	bcd1a <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bcd02:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bcd06:	4620      	mov	r0, r4
   bcd08:	5cd1      	ldrb	r1, [r2, r3]
   bcd0a:	9700      	str	r7, [sp, #0]
   bcd0c:	4633      	mov	r3, r6
   bcd0e:	462a      	mov	r2, r5
   bcd10:	f7ff fb68 	bl	bc3e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bcd14:	f108 0801 	add.w	r8, r8, #1
   bcd18:	e7ed      	b.n	bccf6 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bcd1a:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bcd1e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bcd22:	4a25      	ldr	r2, [pc, #148]	; (bcdb8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bcd24:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bcd28:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bcd2c:	a902      	add	r1, sp, #8
   bcd2e:	f04f 0901 	mov.w	r9, #1
   bcd32:	9202      	str	r2, [sp, #8]
   bcd34:	9304      	str	r3, [sp, #16]
   bcd36:	f88d 800c 	strb.w	r8, [sp, #12]
   bcd3a:	f8ad 9014 	strh.w	r9, [sp, #20]
   bcd3e:	f004 fd4d 	bl	c17dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bcd42:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcd46:	4641      	mov	r1, r8
   bcd48:	f005 f9b9 	bl	c20be <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bcd4c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcd50:	21ff      	movs	r1, #255	; 0xff
   bcd52:	f004 fdb1 	bl	c18b8 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcd56:	28ff      	cmp	r0, #255	; 0xff
   bcd58:	d116      	bne.n	bcd88 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bcd5a:	7823      	ldrb	r3, [r4, #0]
   bcd5c:	b983      	cbnz	r3, bcd80 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bcd5e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcd62:	4649      	mov	r1, r9
   bcd64:	f005 f9ab 	bl	c20be <digitalWrite>
    _spiPort->endTransaction();
   bcd68:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcd6c:	f004 fd1d 	bl	c17aa <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bcd70:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bcd74:	f001 fb88 	bl	be488 <delay>
} // end checkUbloxSpi()
   bcd78:	2001      	movs	r0, #1
   bcd7a:	b007      	add	sp, #28
   bcd7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcd80:	28ff      	cmp	r0, #255	; 0xff
   bcd82:	d101      	bne.n	bcd88 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bcd84:	7823      	ldrb	r3, [r4, #0]
   bcd86:	b163      	cbz	r3, bcda2 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bcd88:	4601      	mov	r1, r0
   bcd8a:	9700      	str	r7, [sp, #0]
   bcd8c:	4620      	mov	r0, r4
   bcd8e:	4633      	mov	r3, r6
   bcd90:	462a      	mov	r2, r5
   bcd92:	f7ff fb27 	bl	bc3e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bcd96:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcd9a:	21ff      	movs	r1, #255	; 0xff
   bcd9c:	f004 fd8c 	bl	c18b8 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcda0:	e7ee      	b.n	bcd80 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bcda2:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcda6:	2101      	movs	r1, #1
   bcda8:	f005 f989 	bl	c20be <digitalWrite>
  _spiPort->endTransaction();
   bcdac:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcdb0:	f004 fcfb 	bl	c17aa <_ZN8SPIClass14endTransactionEv>
  return (true);
   bcdb4:	e7e0      	b.n	bcd78 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bcdb6:	bf00      	nop
   bcdb8:	000c6e68 	.word	0x000c6e68

000bcdbc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bcdbc:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bcdbe:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bcdc2:	b91c      	cbnz	r4, bcdcc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bcdc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bcdc8:	f7ff bea8 	b.w	bcb1c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bcdcc:	2c01      	cmp	r4, #1
   bcdce:	d103      	bne.n	bcdd8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bcdd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bcdd4:	f7ff bf6a 	b.w	bccac <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bcdd8:	2c02      	cmp	r4, #2
   bcdda:	d103      	bne.n	bcde4 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bcddc:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bcde0:	f7ff bf80 	b.w	bcce4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bcde4:	2000      	movs	r0, #0
   bcde6:	f85d 4b04 	ldr.w	r4, [sp], #4
   bcdea:	4770      	bx	lr

000bcdec <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bcdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcdf0:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcdf2:	2102      	movs	r1, #2
   bcdf4:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcdf6:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcdfa:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcdfe:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bce02:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bce04:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bce08:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bce0c:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bce10:	4604      	mov	r4, r0
   bce12:	4617      	mov	r7, r2
   bce14:	4698      	mov	r8, r3
   bce16:	f000 ffd5 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bce1a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bce1e:	4606      	mov	r6, r0
   bce20:	4481      	add	r9, r0
   bce22:	f000 ffcf 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bce26:	4581      	cmp	r9, r0
   bce28:	f240 80a8 	bls.w	bcf7c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bce2c:	4643      	mov	r3, r8
   bce2e:	463a      	mov	r2, r7
   bce30:	4629      	mov	r1, r5
   bce32:	4620      	mov	r0, r4
   bce34:	f7ff ffc2 	bl	bcdbc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bce38:	2800      	cmp	r0, #0
   bce3a:	f000 809b 	beq.w	bcf74 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bce3e:	7beb      	ldrb	r3, [r5, #15]
   bce40:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bce44:	2b01      	cmp	r3, #1
   bce46:	d125      	bne.n	bce94 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bce48:	2901      	cmp	r1, #1
   bce4a:	f040 80ec 	bne.w	bd026 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bce4e:	7bab      	ldrb	r3, [r5, #14]
   bce50:	2b01      	cmp	r3, #1
   bce52:	782b      	ldrb	r3, [r5, #0]
   bce54:	d13b      	bne.n	bcece <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bce56:	42bb      	cmp	r3, r7
   bce58:	d13e      	bne.n	bced8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bce5a:	786a      	ldrb	r2, [r5, #1]
   bce5c:	4542      	cmp	r2, r8
   bce5e:	d136      	bne.n	bcece <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bce60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce64:	b913      	cbnz	r3, bce6c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bce66:	200b      	movs	r0, #11
}
   bce68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bce6c:	4978      	ldr	r1, [pc, #480]	; (bd050 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bce6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce72:	f004 fb8c 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bce76:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bce7a:	f000 ffa3 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bce7e:	220a      	movs	r2, #10
   bce80:	1b81      	subs	r1, r0, r6
   bce82:	4628      	mov	r0, r5
   bce84:	f7fb fc9b 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce88:	4972      	ldr	r1, [pc, #456]	; (bd054 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bce8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce8e:	f004 fb98 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bce92:	e7e8      	b.n	bce66 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bce94:	2b02      	cmp	r3, #2
   bce96:	d137      	bne.n	bcf08 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bce98:	2901      	cmp	r1, #1
   bce9a:	f040 80aa 	bne.w	bcff2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bce9e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcea2:	b193      	cbz	r3, bceca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bcea4:	496c      	ldr	r1, [pc, #432]	; (bd058 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bcea6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bceaa:	f004 fb70 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bceae:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bceb2:	f000 ff87 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bceb6:	220a      	movs	r2, #10
   bceb8:	1b81      	subs	r1, r0, r6
   bceba:	4628      	mov	r0, r5
   bcebc:	f7fb fc7f 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcec0:	4964      	ldr	r1, [pc, #400]	; (bd054 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcec2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcec6:	f004 fb7c 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bceca:	200a      	movs	r0, #10
   bcecc:	e7cc      	b.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bcece:	42bb      	cmp	r3, r7
   bced0:	d102      	bne.n	bced8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bced2:	786b      	ldrb	r3, [r5, #1]
   bced4:	4543      	cmp	r3, r8
   bced6:	d019      	beq.n	bcf0c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bced8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcedc:	b193      	cbz	r3, bcf04 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bcede:	495f      	ldr	r1, [pc, #380]	; (bd05c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bcee0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcee4:	f004 fb53 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcee8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bceec:	f000 ff6a 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bcef0:	220a      	movs	r2, #10
   bcef2:	1b81      	subs	r1, r0, r6
   bcef4:	4628      	mov	r0, r5
   bcef6:	f7fb fc62 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcefa:	4956      	ldr	r1, [pc, #344]	; (bd054 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcefc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf00:	f004 fb5f 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcf04:	200d      	movs	r0, #13
   bcf06:	e7af      	b.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcf08:	2901      	cmp	r1, #1
   bcf0a:	d172      	bne.n	bcff2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bcf0c:	89eb      	ldrh	r3, [r5, #14]
   bcf0e:	bb8b      	cbnz	r3, bcf74 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcf10:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf14:	b193      	cbz	r3, bcf3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bcf16:	4952      	ldr	r1, [pc, #328]	; (bd060 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bcf18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf1c:	f004 fb37 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcf20:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcf24:	f000 ff4e 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bcf28:	220a      	movs	r2, #10
   bcf2a:	1b81      	subs	r1, r0, r6
   bcf2c:	4628      	mov	r0, r5
   bcf2e:	f7fb fc46 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcf32:	4948      	ldr	r1, [pc, #288]	; (bd054 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcf34:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf38:	f004 fb43 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bcf3c:	2002      	movs	r0, #2
   bcf3e:	e793      	b.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcf40:	430b      	orrs	r3, r1
   bcf42:	d117      	bne.n	bcf74 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcf44:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf48:	b193      	cbz	r3, bcf70 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bcf4a:	4946      	ldr	r1, [pc, #280]	; (bd064 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bcf4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf50:	f004 fb1d 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcf54:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcf58:	f000 ff34 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bcf5c:	220a      	movs	r2, #10
   bcf5e:	1b81      	subs	r1, r0, r6
   bcf60:	4628      	mov	r0, r5
   bcf62:	f7fb fc2c 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcf66:	493b      	ldr	r1, [pc, #236]	; (bd054 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcf68:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf6c:	f004 fb29 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bcf70:	2001      	movs	r0, #1
   bcf72:	e779      	b.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcf74:	2001      	movs	r0, #1
   bcf76:	f001 fa87 	bl	be488 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bcf7a:	e752      	b.n	bce22 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcf7c:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bcf7e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcf82:	2a01      	cmp	r2, #1
   bcf84:	d11f      	bne.n	bcfc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf86:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bcf8a:	2a02      	cmp	r2, #2
   bcf8c:	d11b      	bne.n	bcfc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf8e:	7baa      	ldrb	r2, [r5, #14]
   bcf90:	2a01      	cmp	r2, #1
   bcf92:	d118      	bne.n	bcfc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf94:	782a      	ldrb	r2, [r5, #0]
   bcf96:	42ba      	cmp	r2, r7
   bcf98:	d115      	bne.n	bcfc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bcf9a:	786a      	ldrb	r2, [r5, #1]
   bcf9c:	4542      	cmp	r2, r8
   bcf9e:	d112      	bne.n	bcfc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bcfa0:	2b00      	cmp	r3, #0
   bcfa2:	f43f af60 	beq.w	bce66 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bcfa6:	4930      	ldr	r1, [pc, #192]	; (bd068 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bcfa8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcfac:	f004 faef 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bcfb0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcfb4:	f000 ff06 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bcfb8:	220a      	movs	r2, #10
   bcfba:	1b81      	subs	r1, r0, r6
   bcfbc:	4628      	mov	r0, r5
   bcfbe:	f7fb fbfe 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bcfc2:	492a      	ldr	r1, [pc, #168]	; (bd06c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bcfc4:	e761      	b.n	bce8a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bcfc6:	b193      	cbz	r3, bcfee <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bcfc8:	4929      	ldr	r1, [pc, #164]	; (bd070 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bcfca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcfce:	f004 fade 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcfd2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcfd6:	f000 fef5 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bcfda:	220a      	movs	r2, #10
   bcfdc:	1b81      	subs	r1, r0, r6
   bcfde:	4628      	mov	r0, r5
   bcfe0:	f7fb fbed 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bcfe4:	4923      	ldr	r1, [pc, #140]	; (bd074 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bcfe6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcfea:	f004 faea 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcfee:	2003      	movs	r0, #3
   bcff0:	e73a      	b.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcff2:	2903      	cmp	r1, #3
   bcff4:	d1a4      	bne.n	bcf40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bcff6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcffa:	b193      	cbz	r3, bd022 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bcffc:	491e      	ldr	r1, [pc, #120]	; (bd078 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bcffe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd002:	f004 fac4 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd006:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd00a:	f000 fedb 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bd00e:	220a      	movs	r2, #10
   bd010:	1b81      	subs	r1, r0, r6
   bd012:	4628      	mov	r0, r5
   bd014:	f7fb fbd3 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd018:	490e      	ldr	r1, [pc, #56]	; (bd054 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bd01a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd01e:	f004 fad0 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bd022:	2004      	movs	r0, #4
   bd024:	e720      	b.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bd026:	2903      	cmp	r1, #3
   bd028:	d0e5      	beq.n	bcff6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bd02a:	2900      	cmp	r1, #0
   bd02c:	d1a2      	bne.n	bcf74 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bd02e:	7bab      	ldrb	r3, [r5, #14]
   bd030:	2b01      	cmp	r3, #1
   bd032:	d19f      	bne.n	bcf74 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bd034:	782b      	ldrb	r3, [r5, #0]
   bd036:	42bb      	cmp	r3, r7
   bd038:	d19c      	bne.n	bcf74 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bd03a:	786b      	ldrb	r3, [r5, #1]
   bd03c:	4543      	cmp	r3, r8
   bd03e:	d199      	bne.n	bcf74 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bd040:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd044:	2b00      	cmp	r3, #0
   bd046:	f43f af0e 	beq.w	bce66 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bd04a:	490c      	ldr	r1, [pc, #48]	; (bd07c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bd04c:	e70f      	b.n	bce6e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bd04e:	bf00      	nop
   bd050:	000c7848 	.word	0x000c7848
   bd054:	000c7885 	.word	0x000c7885
   bd058:	000c788b 	.word	0x000c788b
   bd05c:	000c78bc 	.word	0x000c78bc
   bd060:	000c78ee 	.word	0x000c78ee
   bd064:	000c798e 	.word	0x000c798e
   bd068:	000c79cf 	.word	0x000c79cf
   bd06c:	000c7a02 	.word	0x000c7a02
   bd070:	000c7a0a 	.word	0x000c7a0a
   bd074:	000c7a2d 	.word	0x000c7a2d
   bd078:	000c7914 	.word	0x000c7914
   bd07c:	000c794f 	.word	0x000c794f

000bd080 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bd080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd084:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bd086:	2102      	movs	r1, #2
   bd088:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd08a:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd08e:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd092:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bd096:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd098:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd09c:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bd0a0:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bd0a4:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bd0a8:	4604      	mov	r4, r0
   bd0aa:	4617      	mov	r7, r2
   bd0ac:	4698      	mov	r8, r3
   bd0ae:	f000 fe89 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bd0b2:	f240 1a01 	movw	sl, #257	; 0x101
   bd0b6:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bd0b8:	f240 2b01 	movw	fp, #513	; 0x201
   bd0bc:	f000 fe82 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bd0c0:	1b80      	subs	r0, r0, r6
   bd0c2:	4548      	cmp	r0, r9
   bd0c4:	d269      	bcs.n	bd19a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bd0c6:	4643      	mov	r3, r8
   bd0c8:	463a      	mov	r2, r7
   bd0ca:	4629      	mov	r1, r5
   bd0cc:	4620      	mov	r0, r4
   bd0ce:	f7ff fe75 	bl	bcdbc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bd0d2:	2800      	cmp	r0, #0
   bd0d4:	d05d      	beq.n	bd192 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bd0d6:	89ea      	ldrh	r2, [r5, #14]
   bd0d8:	4552      	cmp	r2, sl
   bd0da:	d11e      	bne.n	bd11a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bd0dc:	782b      	ldrb	r3, [r5, #0]
   bd0de:	42bb      	cmp	r3, r7
   bd0e0:	d11b      	bne.n	bd11a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bd0e2:	786b      	ldrb	r3, [r5, #1]
   bd0e4:	4543      	cmp	r3, r8
   bd0e6:	d118      	bne.n	bd11a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bd0e8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd0ec:	b193      	cbz	r3, bd114 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bd0ee:	4937      	ldr	r1, [pc, #220]	; (bd1cc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bd0f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0f4:	f004 fa4b 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd0f8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd0fc:	f000 fe62 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bd100:	220a      	movs	r2, #10
   bd102:	1b81      	subs	r1, r0, r6
   bd104:	4628      	mov	r0, r5
   bd106:	f7fb fb5a 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd10a:	4931      	ldr	r1, [pc, #196]	; (bd1d0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd10c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd110:	f004 fa57 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bd114:	200b      	movs	r0, #11
}
   bd116:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bd11a:	7beb      	ldrb	r3, [r5, #15]
   bd11c:	2b01      	cmp	r3, #1
   bd11e:	d11d      	bne.n	bd15c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bd120:	782b      	ldrb	r3, [r5, #0]
   bd122:	42bb      	cmp	r3, r7
   bd124:	d102      	bne.n	bd12c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bd126:	786b      	ldrb	r3, [r5, #1]
   bd128:	4543      	cmp	r3, r8
   bd12a:	d032      	beq.n	bd192 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bd12c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd130:	b193      	cbz	r3, bd158 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bd132:	4928      	ldr	r1, [pc, #160]	; (bd1d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bd134:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd138:	f004 fa29 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd13c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd140:	f000 fe40 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bd144:	220a      	movs	r2, #10
   bd146:	1b81      	subs	r1, r0, r6
   bd148:	4628      	mov	r0, r5
   bd14a:	f7fb fb38 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd14e:	4920      	ldr	r1, [pc, #128]	; (bd1d0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd150:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd154:	f004 fa35 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bd158:	200d      	movs	r0, #13
   bd15a:	e7dc      	b.n	bd116 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bd15c:	455a      	cmp	r2, fp
   bd15e:	d018      	beq.n	bd192 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bd160:	b9bb      	cbnz	r3, bd192 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bd162:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd166:	b193      	cbz	r3, bd18e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bd168:	491b      	ldr	r1, [pc, #108]	; (bd1d8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bd16a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd16e:	f004 fa0e 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd172:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd176:	f000 fe25 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bd17a:	220a      	movs	r2, #10
   bd17c:	1b81      	subs	r1, r0, r6
   bd17e:	4628      	mov	r0, r5
   bd180:	f7fb fb1d 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd184:	4912      	ldr	r1, [pc, #72]	; (bd1d0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd186:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd18a:	f004 fa1a 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bd18e:	2002      	movs	r0, #2
   bd190:	e7c1      	b.n	bd116 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bd192:	2001      	movs	r0, #1
   bd194:	f001 f978 	bl	be488 <delay>
  while (millis() - startTime < maxTime)
   bd198:	e790      	b.n	bd0bc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bd19a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd19e:	b193      	cbz	r3, bd1c6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bd1a0:	490e      	ldr	r1, [pc, #56]	; (bd1dc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bd1a2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd1a6:	f004 f9f2 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bd1aa:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd1ae:	f000 fe09 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
   bd1b2:	220a      	movs	r2, #10
   bd1b4:	1b81      	subs	r1, r0, r6
   bd1b6:	4628      	mov	r0, r5
   bd1b8:	f7fb fb01 	bl	b87be <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bd1bc:	4908      	ldr	r1, [pc, #32]	; (bd1e0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bd1be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd1c2:	f004 f9fe 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bd1c6:	2003      	movs	r0, #3
   bd1c8:	e7a5      	b.n	bd116 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bd1ca:	bf00      	nop
   bd1cc:	000c7a34 	.word	0x000c7a34
   bd1d0:	000c7885 	.word	0x000c7885
   bd1d4:	000c7a6e 	.word	0x000c7a6e
   bd1d8:	000c7aa2 	.word	0x000c7aa2
   bd1dc:	000c7adb 	.word	0x000c7adb
   bd1e0:	000c7b00 	.word	0x000c7b00

000bd1e4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bd1e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bd1e8:	4604      	mov	r4, r0
   bd1ea:	4698      	mov	r8, r3
   bd1ec:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bd1ee:	f7fc fcc9 	bl	b9b84 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bd1f2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bd1f6:	460d      	mov	r5, r1
  if (_printDebug == true)
   bd1f8:	b14b      	cbz	r3, bd20e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bd1fa:	492a      	ldr	r1, [pc, #168]	; (bd2a4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bd1fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd200:	f004 f9c5 	bl	c158e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bd204:	2201      	movs	r2, #1
   bd206:	4629      	mov	r1, r5
   bd208:	4620      	mov	r0, r4
   bd20a:	f7fc fee9 	bl	b9fe0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bd20e:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bd212:	b993      	cbnz	r3, bd23a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bd214:	463a      	mov	r2, r7
   bd216:	4629      	mov	r1, r5
   bd218:	4620      	mov	r0, r4
   bd21a:	f7fc fce1 	bl	b9be0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bd21e:	4606      	mov	r6, r0
   bd220:	b188      	cbz	r0, bd246 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bd222:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd226:	b123      	cbz	r3, bd232 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bd228:	491f      	ldr	r1, [pc, #124]	; (bd2a8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bd22a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd22e:	f004 f9c8 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bd232:	4630      	mov	r0, r6
   bd234:	b002      	add	sp, #8
   bd236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd23a:	2b01      	cmp	r3, #1
   bd23c:	d11b      	bne.n	bd276 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bd23e:	4629      	mov	r1, r5
   bd240:	4620      	mov	r0, r4
   bd242:	f7fc fd8f 	bl	b9d64 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bd246:	b35f      	cbz	r7, bd2a0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bd248:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bd24a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bd24e:	2a06      	cmp	r2, #6
   bd250:	d002      	beq.n	bd258 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bd252:	f1b8 0f00 	cmp.w	r8, #0
   bd256:	d015      	beq.n	bd284 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bd258:	b123      	cbz	r3, bd264 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bd25a:	4914      	ldr	r1, [pc, #80]	; (bd2ac <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bd25c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd260:	f004 f9af 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd264:	786b      	ldrb	r3, [r5, #1]
   bd266:	782a      	ldrb	r2, [r5, #0]
   bd268:	9700      	str	r7, [sp, #0]
   bd26a:	4629      	mov	r1, r5
   bd26c:	4620      	mov	r0, r4
   bd26e:	f7ff fdbd 	bl	bcdec <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd272:	4606      	mov	r6, r0
   bd274:	e7dd      	b.n	bd232 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bd276:	2b02      	cmp	r3, #2
   bd278:	d1e5      	bne.n	bd246 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bd27a:	4629      	mov	r1, r5
   bd27c:	4620      	mov	r0, r4
   bd27e:	f7fc fdcb 	bl	b9e18 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bd282:	e7e0      	b.n	bd246 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bd284:	b123      	cbz	r3, bd290 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bd286:	490a      	ldr	r1, [pc, #40]	; (bd2b0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bd288:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd28c:	f004 f999 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd290:	786b      	ldrb	r3, [r5, #1]
   bd292:	782a      	ldrb	r2, [r5, #0]
   bd294:	9700      	str	r7, [sp, #0]
   bd296:	4629      	mov	r1, r5
   bd298:	4620      	mov	r0, r4
   bd29a:	f7ff fef1 	bl	bd080 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bd29e:	e7e8      	b.n	bd272 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bd2a0:	463e      	mov	r6, r7
   bd2a2:	e7c6      	b.n	bd232 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bd2a4:	000c7b1b 	.word	0x000c7b1b
   bd2a8:	000c7b26 	.word	0x000c7b26
   bd2ac:	000c7b3e 	.word	0x000c7b3e
   bd2b0:	000c7b64 	.word	0x000c7b64

000bd2b4 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bd2b4:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bd2b6:	4b09      	ldr	r3, [pc, #36]	; (bd2dc <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bd2b8:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd2bc:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd2c0:	2300      	movs	r3, #0
   bd2c2:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bd2c6:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bd2c8:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bd2cc:	f7ff ff8a 	bl	bd1e4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bd2d0:	f1a0 030b 	sub.w	r3, r0, #11
   bd2d4:	4258      	negs	r0, r3
   bd2d6:	4158      	adcs	r0, r3
   bd2d8:	bd38      	pop	{r3, r4, r5, pc}
   bd2da:	bf00      	nop
   bd2dc:	00010006 	.word	0x00010006

000bd2e0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bd2e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd2e2:	4615      	mov	r5, r2
   bd2e4:	461a      	mov	r2, r3
   bd2e6:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd2e8:	9301      	str	r3, [sp, #4]
   bd2ea:	f7ff ffe3 	bl	bd2b4 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd2ee:	b190      	cbz	r0, bd316 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd2f0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd2f4:	4b09      	ldr	r3, [pc, #36]	; (bd31c <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bd2f6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd2fa:	2300      	movs	r3, #0
   bd2fc:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd300:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd302:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd304:	4620      	mov	r0, r4
   bd306:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd30a:	f7ff ff6b 	bl	bd1e4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd30e:	f1a0 030a 	sub.w	r3, r0, #10
   bd312:	4258      	negs	r0, r3
   bd314:	4158      	adcs	r0, r3
}
   bd316:	b003      	add	sp, #12
   bd318:	bd30      	pop	{r4, r5, pc}
   bd31a:	bf00      	nop
   bd31c:	00140006 	.word	0x00140006

000bd320 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bd320:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd322:	4615      	mov	r5, r2
   bd324:	461a      	mov	r2, r3
   bd326:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd328:	9301      	str	r3, [sp, #4]
   bd32a:	f7ff ffc3 	bl	bd2b4 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd32e:	b190      	cbz	r0, bd356 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd330:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd334:	4b09      	ldr	r3, [pc, #36]	; (bd35c <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bd336:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd33a:	2300      	movs	r3, #0
   bd33c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd340:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd342:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd344:	4620      	mov	r0, r4
   bd346:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd34a:	f7ff ff4b 	bl	bd1e4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd34e:	f1a0 030a 	sub.w	r3, r0, #10
   bd352:	4258      	negs	r0, r3
   bd354:	4158      	adcs	r0, r3
}
   bd356:	b003      	add	sp, #12
   bd358:	bd30      	pop	{r4, r5, pc}
   bd35a:	bf00      	nop
   bd35c:	00140006 	.word	0x00140006

000bd360 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bd360:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bd362:	460a      	mov	r2, r1
   bd364:	2100      	movs	r1, #0
   bd366:	f7ff bfbb 	b.w	bd2e0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bd36c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bd36c:	b510      	push	{r4, lr}
   bd36e:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bd370:	2074      	movs	r0, #116	; 0x74
   bd372:	f7f6 fe90 	bl	b4096 <_Znwj>
   bd376:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bd378:	b960      	cbnz	r0, bd394 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd37a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd37e:	b913      	cbnz	r3, bd386 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bd380:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd384:	b128      	cbz	r0, bd392 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bd386:	4908      	ldr	r1, [pc, #32]	; (bd3a8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bd388:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd38c:	f004 f919 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd390:	2000      	movs	r0, #0
}
   bd392:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd394:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bd396:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bd39a:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd39e:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bd3a0:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bd3a2:	2001      	movs	r0, #1
   bd3a4:	e7f5      	b.n	bd392 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bd3a6:	bf00      	nop
   bd3a8:	000c7b8d 	.word	0x000c7b8d

000bd3ac <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bd3ac:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd3ae:	6a03      	ldr	r3, [r0, #32]
{
   bd3b0:	4604      	mov	r4, r0
   bd3b2:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bd3b4:	b91b      	cbnz	r3, bd3be <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bd3b6:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd3b8:	f7ff ffd8 	bl	bd36c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd3bc:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd3be:	6a20      	ldr	r0, [r4, #32]
   bd3c0:	b180      	cbz	r0, bd3e4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd3c2:	7803      	ldrb	r3, [r0, #0]
   bd3c4:	f003 0303 	and.w	r3, r3, #3
   bd3c8:	2b03      	cmp	r3, #3
   bd3ca:	d10d      	bne.n	bd3e8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bd3cc:	2307      	movs	r3, #7
   bd3ce:	2201      	movs	r2, #1
   bd3d0:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd3d4:	4620      	mov	r0, r4
   bd3d6:	f7ff fcf1 	bl	bcdbc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bd3da:	6a23      	ldr	r3, [r4, #32]
   bd3dc:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bd3e0:	f000 0001 	and.w	r0, r0, #1
}
   bd3e4:	b002      	add	sp, #8
   bd3e6:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd3e8:	2b01      	cmp	r3, #1
   bd3ea:	f04f 0300 	mov.w	r3, #0
   bd3ee:	d011      	beq.n	bd414 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bd3f0:	f240 7101 	movw	r1, #1793	; 0x701
   bd3f4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bd3f8:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bd3fc:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd400:	4620      	mov	r0, r4
   bd402:	f7ff feef 	bl	bd1e4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd406:	280b      	cmp	r0, #11
   bd408:	d006      	beq.n	bd418 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd40a:	f1a0 030d 	sub.w	r3, r0, #13
   bd40e:	4258      	negs	r0, r3
   bd410:	4158      	adcs	r0, r3
   bd412:	e7e7      	b.n	bd3e4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bd414:	4618      	mov	r0, r3
   bd416:	e7e5      	b.n	bd3e4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bd418:	2001      	movs	r0, #1
   bd41a:	e7e3      	b.n	bd3e4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bd41c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bd41c:	b510      	push	{r4, lr}
   bd41e:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bd420:	2018      	movs	r0, #24
   bd422:	f7f6 fe38 	bl	b4096 <_Znwj>
   bd426:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bd428:	b960      	cbnz	r0, bd444 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd42a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd42e:	b913      	cbnz	r3, bd436 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bd430:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd434:	b128      	cbz	r0, bd442 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bd436:	4905      	ldr	r1, [pc, #20]	; (bd44c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bd438:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd43c:	f004 f8c1 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd440:	2000      	movs	r0, #0
}
   bd442:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bd444:	2300      	movs	r3, #0
   bd446:	7503      	strb	r3, [r0, #20]
  return (true);
   bd448:	2001      	movs	r0, #1
   bd44a:	e7fa      	b.n	bd442 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bd44c:	000c7bb4 	.word	0x000c7bb4

000bd450 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bd450:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bd452:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bd454:	4605      	mov	r5, r0
   bd456:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bd458:	b18b      	cbz	r3, bd47e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bd45a:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd45e:	4b13      	ldr	r3, [pc, #76]	; (bd4ac <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bd460:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd464:	2300      	movs	r3, #0
   bd466:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd46a:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bd46c:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd46e:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bd472:	f7ff feb7 	bl	bd1e4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd476:	280b      	cmp	r0, #11
   bd478:	d10b      	bne.n	bd492 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bd47a:	2401      	movs	r4, #1
   bd47c:	e00d      	b.n	bd49a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bd47e:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bd480:	f7ff ffcc 	bl	bd41c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bd484:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bd486:	9a01      	ldr	r2, [sp, #4]
   bd488:	2c00      	cmp	r4, #0
   bd48a:	d1e6      	bne.n	bd45a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bd48c:	4620      	mov	r0, r4
   bd48e:	b002      	add	sp, #8
   bd490:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd492:	f1a0 030d 	sub.w	r3, r0, #13
   bd496:	425c      	negs	r4, r3
   bd498:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bd49a:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bd49c:	b110      	cbz	r0, bd4a4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bd49e:	2118      	movs	r1, #24
   bd4a0:	f7f6 fdff 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bd4a4:	2300      	movs	r3, #0
   bd4a6:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bd4a8:	e7f0      	b.n	bd48c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bd4aa:	bf00      	nop
   bd4ac:	00010006 	.word	0x00010006

000bd4b0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bd4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bd4b2:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bd4b6:	4604      	mov	r4, r0
   bd4b8:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bd4ba:	b145      	cbz	r5, bd4ce <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bd4bc:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bd4c0:	b9b1      	cbnz	r1, bd4f0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd4c2:	4620      	mov	r0, r4
}
   bd4c4:	b003      	add	sp, #12
   bd4c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd4ca:	f7ff bfc1 	b.w	bd450 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bd4ce:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bd4d0:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bd4d4:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bd4d8:	f002 fd60 	bl	bff9c <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bd4dc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bd4e0:	f002 fd67 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
   bd4e4:	9a01      	ldr	r2, [sp, #4]
   bd4e6:	2800      	cmp	r0, #0
   bd4e8:	d0e8      	beq.n	bd4bc <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bd4ea:	4628      	mov	r0, r5
   bd4ec:	b003      	add	sp, #12
   bd4ee:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd4f0:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd4f2:	bf18      	it	ne
   bd4f4:	2104      	movne	r1, #4
   bd4f6:	e7e4      	b.n	bd4c2 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bd4f8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bd4f8:	b570      	push	{r4, r5, r6, lr}
   bd4fa:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bd4fc:	2300      	movs	r3, #0
   bd4fe:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bd502:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bd506:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bd50a:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bd50e:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bd512:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bd514:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bd518:	b91b      	cbnz	r3, bd522 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bd51a:	f44f 7180 	mov.w	r1, #256	; 0x100
   bd51e:	f7fb f9ed 	bl	b88fc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bd522:	4620      	mov	r0, r4
   bd524:	f7fc fe04 	bl	ba130 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bd528:	4631      	mov	r1, r6
   bd52a:	4620      	mov	r0, r4
   bd52c:	f7ff ffc0 	bl	bd4b0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd530:	b110      	cbz	r0, bd538 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bd532:	2501      	movs	r5, #1
}
   bd534:	4628      	mov	r0, r5
   bd536:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd538:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd53c:	b913      	cbnz	r3, bd544 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bd53e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd542:	b123      	cbz	r3, bd54e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bd544:	4917      	ldr	r1, [pc, #92]	; (bd5a4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bd546:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd54a:	f004 f83a 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd54e:	4631      	mov	r1, r6
   bd550:	4620      	mov	r0, r4
   bd552:	f7ff ffad 	bl	bd4b0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd556:	2800      	cmp	r0, #0
   bd558:	d1eb      	bne.n	bd532 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd55a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd55e:	b913      	cbnz	r3, bd566 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bd560:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd564:	b123      	cbz	r3, bd570 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bd566:	4910      	ldr	r1, [pc, #64]	; (bd5a8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bd568:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd56c:	f004 f829 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd570:	4631      	mov	r1, r6
   bd572:	4620      	mov	r0, r4
   bd574:	f7ff ff9c 	bl	bd4b0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bd578:	2800      	cmp	r0, #0
   bd57a:	d1da      	bne.n	bd532 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bd57c:	2d00      	cmp	r5, #0
   bd57e:	d0d9      	beq.n	bd534 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd580:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bd584:	2d00      	cmp	r5, #0
   bd586:	d0d5      	beq.n	bd534 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd588:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd58c:	b91b      	cbnz	r3, bd596 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bd58e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd592:	2b00      	cmp	r3, #0
   bd594:	d0cd      	beq.n	bd532 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bd596:	4905      	ldr	r1, [pc, #20]	; (bd5ac <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bd598:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd59c:	f004 f811 	bl	c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd5a0:	e7c8      	b.n	bd534 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd5a2:	bf00      	nop
   bd5a4:	000c7bdb 	.word	0x000c7bdb
   bd5a8:	000c7bff 	.word	0x000c7bff
   bd5ac:	000c7c22 	.word	0x000c7c22

000bd5b0 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bd5b0:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd5b2:	6a03      	ldr	r3, [r0, #32]
{
   bd5b4:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd5b6:	b91b      	cbnz	r3, bd5c0 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bd5b8:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd5ba:	f7ff fed7 	bl	bd36c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd5be:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd5c0:	6a20      	ldr	r0, [r4, #32]
   bd5c2:	b1b0      	cbz	r0, bd5f2 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bd5c4:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd5c8:	07db      	lsls	r3, r3, #31
   bd5ca:	d402      	bmi.n	bd5d2 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bd5cc:	4620      	mov	r0, r4
   bd5ce:	f7ff feed 	bl	bd3ac <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bd5d2:	6a23      	ldr	r3, [r4, #32]
   bd5d4:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd5d8:	f36f 0200 	bfc	r2, #0, #1
   bd5dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd5e0:	6a23      	ldr	r3, [r4, #32]
   bd5e2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd5e6:	f36f 0200 	bfc	r2, #0, #1
   bd5ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bd5ee:	6a23      	ldr	r3, [r4, #32]
   bd5f0:	69d8      	ldr	r0, [r3, #28]
}
   bd5f2:	b002      	add	sp, #8
   bd5f4:	bd10      	pop	{r4, pc}

000bd5f6 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bd5f6:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd5f8:	6a03      	ldr	r3, [r0, #32]
{
   bd5fa:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd5fc:	b91b      	cbnz	r3, bd606 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bd5fe:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd600:	f7ff feb4 	bl	bd36c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd604:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd606:	6a20      	ldr	r0, [r4, #32]
   bd608:	b1b0      	cbz	r0, bd638 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bd60a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd60e:	079b      	lsls	r3, r3, #30
   bd610:	d402      	bmi.n	bd618 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bd612:	4620      	mov	r0, r4
   bd614:	f7ff feca 	bl	bd3ac <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bd618:	6a23      	ldr	r3, [r4, #32]
   bd61a:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd61e:	f36f 0241 	bfc	r2, #1, #1
   bd622:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd626:	6a23      	ldr	r3, [r4, #32]
   bd628:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd62c:	f36f 0200 	bfc	r2, #0, #1
   bd630:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bd634:	6a23      	ldr	r3, [r4, #32]
   bd636:	6a18      	ldr	r0, [r3, #32]
}
   bd638:	b002      	add	sp, #8
   bd63a:	bd10      	pop	{r4, pc}

000bd63c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bd63c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bd63e:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bd640:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bd644:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bd646:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bd64a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bd64c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd650:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bd652:	2500      	movs	r5, #0
  _width = width;
   bd654:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bd658:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bd65a:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bd65e:	7303      	strb	r3, [r0, #12]
}
   bd660:	bd30      	pop	{r4, r5, pc}

000bd662 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd662:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd664:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd666:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd668:	b085      	sub	sp, #20
   bd66a:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bd66c:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd66e:	f88d 400c 	strb.w	r4, [sp, #12]
   bd672:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd674:	460e      	mov	r6, r1
   bd676:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bd678:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bd67c:	b140      	cbz	r0, bd690 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd67e:	7b5b      	ldrb	r3, [r3, #13]
   bd680:	9301      	str	r3, [sp, #4]
   bd682:	ab03      	add	r3, sp, #12
   bd684:	9300      	str	r3, [sp, #0]
   bd686:	2301      	movs	r3, #1
   bd688:	f000 f90a 	bl	bd8a0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd68c:	b005      	add	sp, #20
   bd68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bd690:	6858      	ldr	r0, [r3, #4]
   bd692:	2800      	cmp	r0, #0
   bd694:	d0fa      	beq.n	bd68c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd696:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd69a:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd69e:	f1be 0f03 	cmp.w	lr, #3
   bd6a2:	d10c      	bne.n	bd6be <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd6a4:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bd6a8:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd6ac:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bd6ae:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd6b2:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd6b6:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd6b8:	f000 fa2b 	bl	bdb12 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd6bc:	e7e6      	b.n	bd68c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd6be:	f1be 0f00 	cmp.w	lr, #0
   bd6c2:	d109      	bne.n	bd6d8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bd6c4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bd6c8:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd6cc:	f8cd c000 	str.w	ip, [sp]
   bd6d0:	ab03      	add	r3, sp, #12
   bd6d2:	463a      	mov	r2, r7
   bd6d4:	4631      	mov	r1, r6
   bd6d6:	e7ef      	b.n	bd6b8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd6d8:	f1be 0f02 	cmp.w	lr, #2
   bd6dc:	d102      	bne.n	bd6e4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bd6de:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bd6e2:	e7f1      	b.n	bd6c8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd6e4:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bd6e8:	bf01      	itttt	eq
   bd6ea:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bd6ee:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd6f2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bd6f6:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bd6fa:	e7e7      	b.n	bd6cc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bd6fc <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd6fc:	b4f0      	push	{r4, r5, r6, r7}
   bd6fe:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd700:	b902      	cbnz	r2, bd704 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd702:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd704:	2a04      	cmp	r2, #4
   bd706:	d814      	bhi.n	bd732 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd708:	f100 050f 	add.w	r5, r0, #15
   bd70c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd70e:	1884      	adds	r4, r0, r2
   bd710:	4629      	mov	r1, r5
   bd712:	4284      	cmp	r4, r0
   bd714:	d009      	beq.n	bd72a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd716:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd718:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd71a:	b927      	cbnz	r7, bd726 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd71c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd71e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd720:	3501      	adds	r5, #1
   bd722:	3c01      	subs	r4, #1
   bd724:	e7f5      	b.n	bd712 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd726:	73a6      	strb	r6, [r4, #14]
   bd728:	e7f9      	b.n	bd71e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd72a:	4620      	mov	r0, r4
}
   bd72c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd72e:	f7ff bf98 	b.w	bd662 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd732:	2000      	movs	r0, #0
   bd734:	bcf0      	pop	{r4, r5, r6, r7}
   bd736:	4770      	bx	lr

000bd738 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd73a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd73c:	7a85      	ldrb	r5, [r0, #10]
   bd73e:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd742:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bd744:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd746:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd748:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bd74a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bd74e:	b140      	cbz	r0, bd762 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd750:	2100      	movs	r1, #0
   bd752:	e9cd 2100 	strd	r2, r1, [sp]
   bd756:	a903      	add	r1, sp, #12
   bd758:	7b62      	ldrb	r2, [r4, #13]
   bd75a:	f000 f90f 	bl	bd97c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd75e:	b004      	add	sp, #16
   bd760:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd762:	6860      	ldr	r0, [r4, #4]
   bd764:	2800      	cmp	r0, #0
   bd766:	d0fa      	beq.n	bd75e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd768:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd76a:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd76c:	2903      	cmp	r1, #3
   bd76e:	d10d      	bne.n	bd78c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bd770:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd774:	21ff      	movs	r1, #255	; 0xff
   bd776:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bd77a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd77e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd782:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd784:	a903      	add	r1, sp, #12
   bd786:	f000 f9f6 	bl	bdb76 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd78a:	e7e8      	b.n	bd75e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd78c:	b941      	cbnz	r1, bd7a0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bd78e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bd792:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd796:	21ff      	movs	r1, #255	; 0xff
   bd798:	e9cd 2100 	strd	r2, r1, [sp]
   bd79c:	4622      	mov	r2, r4
   bd79e:	e7f1      	b.n	bd784 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd7a0:	2902      	cmp	r1, #2
   bd7a2:	d102      	bne.n	bd7aa <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bd7a4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bd7a8:	e7f3      	b.n	bd792 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd7aa:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bd7ac:	bf02      	ittt	eq
   bd7ae:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bd7b2:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bd7b6:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bd7ba:	e7ec      	b.n	bd796 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bd7bc <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd7bc:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd7be:	f100 050f 	add.w	r5, r0, #15
   bd7c2:	7b02      	ldrb	r2, [r0, #12]
   bd7c4:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd7c6:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd7c8:	f7ff ffb6 	bl	bd738 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd7cc:	b178      	cbz	r0, bd7ee <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd7ce:	7b22      	ldrb	r2, [r4, #12]
   bd7d0:	4629      	mov	r1, r5
   bd7d2:	4422      	add	r2, r4
  uint32_t value = 0;
   bd7d4:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd7d6:	42a2      	cmp	r2, r4
   bd7d8:	d00b      	beq.n	bd7f2 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd7da:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd7dc:	7ba0      	ldrb	r0, [r4, #14]
   bd7de:	b920      	cbnz	r0, bd7ea <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd7e0:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd7e2:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd7e4:	3a01      	subs	r2, #1
   bd7e6:	3101      	adds	r1, #1
   bd7e8:	e7f5      	b.n	bd7d6 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd7ea:	7808      	ldrb	r0, [r1, #0]
   bd7ec:	e7f9      	b.n	bd7e2 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd7f2:	bd38      	pop	{r3, r4, r5, pc}

000bd7f4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd7f4:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd7f6:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd7f8:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd7fa:	7143      	strb	r3, [r0, #5]
}
   bd7fc:	bd10      	pop	{r4, pc}

000bd7fe <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd7fe:	b510      	push	{r4, lr}
   bd800:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd802:	6800      	ldr	r0, [r0, #0]
   bd804:	f7ff ffda 	bl	bd7bc <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd808:	7922      	ldrb	r2, [r4, #4]
   bd80a:	2301      	movs	r3, #1
   bd80c:	4093      	lsls	r3, r2
  val >>= _shift;
   bd80e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd810:	3b01      	subs	r3, #1
  val >>= _shift;
   bd812:	40d0      	lsrs	r0, r2
}
   bd814:	4018      	ands	r0, r3
   bd816:	bd10      	pop	{r4, pc}

000bd818 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd818:	b570      	push	{r4, r5, r6, lr}
   bd81a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd81c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd81e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd820:	f7ff ffcc 	bl	bd7bc <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd824:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd826:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd828:	2201      	movs	r2, #1
   bd82a:	409a      	lsls	r2, r3
   bd82c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd82e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd832:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd836:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd838:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd83a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd83e:	4329      	orrs	r1, r5
   bd840:	7b02      	ldrb	r2, [r0, #12]
}
   bd842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd846:	f7ff bf59 	b.w	bd6fc <_ZN23Adafruit_BusIO_Register5writeEmh>

000bd84a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd84a:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd84c:	2200      	movs	r2, #0
   bd84e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd850:	2220      	movs	r2, #32
  _addr = addr;
   bd852:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd854:	60c2      	str	r2, [r0, #12]
#endif
}
   bd856:	4770      	bx	lr

000bd858 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd858:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd85a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd85c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd85e:	b153      	cbz	r3, bd876 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd860:	7821      	ldrb	r1, [r4, #0]
   bd862:	6860      	ldr	r0, [r4, #4]
   bd864:	f002 fb9a 	bl	bff9c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd868:	6860      	ldr	r0, [r4, #4]
   bd86a:	f002 fba2 	bl	bffb2 <_ZN7TwoWire15endTransmissionEv>
   bd86e:	fab0 f080 	clz	r0, r0
   bd872:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd874:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd876:	2101      	movs	r1, #1
   bd878:	f000 f803 	bl	bd882 <_ZN18Adafruit_I2CDevice5beginEb>
   bd87c:	2800      	cmp	r0, #0
   bd87e:	d1ef      	bne.n	bd860 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd880:	e7f8      	b.n	bd874 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd882 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd882:	b538      	push	{r3, r4, r5, lr}
   bd884:	4604      	mov	r4, r0
  _wire->begin();
   bd886:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd888:	460d      	mov	r5, r1
  _wire->begin();
   bd88a:	f002 fb55 	bl	bff38 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd88e:	2001      	movs	r0, #1
   bd890:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd892:	b125      	cbz	r5, bd89e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd894:	4620      	mov	r0, r4
}
   bd896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd89a:	f7ff bfdd 	b.w	bd858 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd89e:	bd38      	pop	{r3, r4, r5, pc}

000bd8a0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd8a4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd8a8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd8aa:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd8ac:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd8ae:	4432      	add	r2, r6
   bd8b0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd8b2:	4604      	mov	r4, r0
   bd8b4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd8b6:	d902      	bls.n	bd8be <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd8b8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd8be:	7801      	ldrb	r1, [r0, #0]
   bd8c0:	6840      	ldr	r0, [r0, #4]
   bd8c2:	f002 fb6b 	bl	bff9c <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd8c6:	b97e      	cbnz	r6, bd8e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd8c8:	6860      	ldr	r0, [r4, #4]
   bd8ca:	6803      	ldr	r3, [r0, #0]
   bd8cc:	462a      	mov	r2, r5
   bd8ce:	68db      	ldr	r3, [r3, #12]
   bd8d0:	4641      	mov	r1, r8
   bd8d2:	4798      	blx	r3
   bd8d4:	4285      	cmp	r5, r0
   bd8d6:	d1ef      	bne.n	bd8b8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd8d8:	6860      	ldr	r0, [r4, #4]
   bd8da:	4639      	mov	r1, r7
   bd8dc:	f002 fb65 	bl	bffaa <_ZN7TwoWire15endTransmissionEh>
   bd8e0:	fab0 f080 	clz	r0, r0
   bd8e4:	0940      	lsrs	r0, r0, #5
   bd8e6:	e7e8      	b.n	bd8ba <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd8e8:	f1b9 0f00 	cmp.w	r9, #0
   bd8ec:	d0ec      	beq.n	bd8c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd8ee:	6860      	ldr	r0, [r4, #4]
   bd8f0:	6803      	ldr	r3, [r0, #0]
   bd8f2:	4632      	mov	r2, r6
   bd8f4:	68db      	ldr	r3, [r3, #12]
   bd8f6:	4649      	mov	r1, r9
   bd8f8:	4798      	blx	r3
   bd8fa:	4286      	cmp	r6, r0
   bd8fc:	d1dc      	bne.n	bd8b8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd8fe:	e7e3      	b.n	bd8c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd900 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bd900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd904:	4615      	mov	r5, r2
   bd906:	4604      	mov	r4, r0
   bd908:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd90a:	b2d2      	uxtb	r2, r2
   bd90c:	7801      	ldrb	r1, [r0, #0]
   bd90e:	6840      	ldr	r0, [r0, #4]
   bd910:	f002 fb2f 	bl	bff72 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bd914:	4285      	cmp	r5, r0
   bd916:	d10d      	bne.n	bd934 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bd918:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd91a:	fa1f f887 	uxth.w	r8, r7
   bd91e:	45a8      	cmp	r8, r5
   bd920:	f107 0701 	add.w	r7, r7, #1
   bd924:	d209      	bcs.n	bd93a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bd926:	6860      	ldr	r0, [r4, #4]
   bd928:	6803      	ldr	r3, [r0, #0]
   bd92a:	695b      	ldr	r3, [r3, #20]
   bd92c:	4798      	blx	r3
   bd92e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd932:	e7f2      	b.n	bd91a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bd934:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd93a:	2001      	movs	r0, #1
   bd93c:	e7fb      	b.n	bd936 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bd93e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd93e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd942:	4607      	mov	r7, r0
   bd944:	4688      	mov	r8, r1
   bd946:	4616      	mov	r6, r2
   bd948:	4699      	mov	r9, r3
  size_t pos = 0;
   bd94a:	2500      	movs	r5, #0
  while (pos < len) {
   bd94c:	42b5      	cmp	r5, r6
   bd94e:	d212      	bcs.n	bd976 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bd950:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bd952:	1b74      	subs	r4, r6, r5
   bd954:	4294      	cmp	r4, r2
   bd956:	bf28      	it	cs
   bd958:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bd95a:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bd95c:	42ab      	cmp	r3, r5
   bd95e:	bf94      	ite	ls
   bd960:	464b      	movls	r3, r9
   bd962:	2300      	movhi	r3, #0
   bd964:	4622      	mov	r2, r4
   bd966:	eb08 0105 	add.w	r1, r8, r5
   bd96a:	4638      	mov	r0, r7
   bd96c:	f7ff ffc8 	bl	bd900 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bd970:	b110      	cbz	r0, bd978 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bd972:	4425      	add	r5, r4
  while (pos < len) {
   bd974:	e7ea      	b.n	bd94c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bd976:	2001      	movs	r0, #1
}
   bd978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bd97c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd97c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd97e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd980:	2300      	movs	r3, #0
   bd982:	e9cd 3300 	strd	r3, r3, [sp]
   bd986:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd98a:	9e06      	ldr	r6, [sp, #24]
   bd98c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd98e:	f7ff ff87 	bl	bd8a0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd992:	b140      	cbz	r0, bd9a6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd994:	2301      	movs	r3, #1
   bd996:	4632      	mov	r2, r6
   bd998:	4629      	mov	r1, r5
   bd99a:	4620      	mov	r0, r4
}
   bd99c:	b002      	add	sp, #8
   bd99e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd9a2:	f7ff bfcc 	b.w	bd93e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd9a6:	b002      	add	sp, #8
   bd9a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd9ac <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd9b0:	4604      	mov	r4, r0
  if (_spi) {
   bd9b2:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd9b4:	b085      	sub	sp, #20
   bd9b6:	460d      	mov	r5, r1
  if (_spi) {
   bd9b8:	b140      	cbz	r0, bd9cc <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd9ba:	2300      	movs	r3, #0
   bd9bc:	9300      	str	r3, [sp, #0]
   bd9be:	4613      	mov	r3, r2
   bd9c0:	460a      	mov	r2, r1
   bd9c2:	f003 ff7f 	bl	c18c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd9c6:	b005      	add	sp, #20
   bd9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd9cc:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd9ce:	68a0      	ldr	r0, [r4, #8]
   bd9d0:	4f48      	ldr	r7, [pc, #288]	; (bdaf4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd9d2:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd9d6:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd9d8:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd9da:	bf0c      	ite	eq
   bd9dc:	f04f 0b01 	moveq.w	fp, #1
   bd9e0:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd9e4:	ea1b 0f03 	tst.w	fp, r3
   bd9e8:	eb01 0302 	add.w	r3, r1, r2
   bd9ec:	bf0c      	ite	eq
   bd9ee:	f04f 0901 	moveq.w	r9, #1
   bd9f2:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd9f6:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd9f8:	9303      	str	r3, [sp, #12]
   bd9fa:	9b03      	ldr	r3, [sp, #12]
   bd9fc:	42ab      	cmp	r3, r5
   bd9fe:	d0e2      	beq.n	bd9c6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bda00:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bda04:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bda06:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bda0a:	b117      	cbz	r7, bda12 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bda0c:	4638      	mov	r0, r7
   bda0e:	f000 f9c9 	bl	bdda4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bda12:	7b63      	ldrb	r3, [r4, #13]
   bda14:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bda18:	d141      	bne.n	bda9e <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bda1a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bda1e:	1c5a      	adds	r2, r3, #1
   bda20:	d00f      	beq.n	bda42 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bda22:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bda26:	bf14      	ite	ne
   bda28:	2301      	movne	r3, #1
   bda2a:	2300      	moveq	r3, #0
   bda2c:	454b      	cmp	r3, r9
   bda2e:	d008      	beq.n	bda42 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bda30:	6963      	ldr	r3, [r4, #20]
   bda32:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bda34:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bda36:	2900      	cmp	r1, #0
   bda38:	d02c      	beq.n	bda94 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bda3a:	4302      	orrs	r2, r0
   bda3c:	601a      	str	r2, [r3, #0]
   bda3e:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bda42:	69a1      	ldr	r1, [r4, #24]
   bda44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bda46:	680a      	ldr	r2, [r1, #0]
   bda48:	4313      	orrs	r3, r2
   bda4a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bda4c:	b117      	cbz	r7, bda54 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bda4e:	4638      	mov	r0, r7
   bda50:	f000 f9a8 	bl	bdda4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bda54:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bda58:	3301      	adds	r3, #1
   bda5a:	d006      	beq.n	bda6a <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bda5c:	69e3      	ldr	r3, [r4, #28]
   bda5e:	681a      	ldr	r2, [r3, #0]
   bda60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bda62:	421a      	tst	r2, r3
            reply |= b;
   bda64:	bf18      	it	ne
   bda66:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bda6a:	69a1      	ldr	r1, [r4, #24]
   bda6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bda6e:	680a      	ldr	r2, [r1, #0]
   bda70:	ea22 0303 	bic.w	r3, r2, r3
   bda74:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bda76:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bda7a:	3301      	adds	r3, #1
        buffer[i] = reply;
   bda7c:	bf18      	it	ne
   bda7e:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bda82:	7b23      	ldrb	r3, [r4, #12]
   bda84:	2b00      	cmp	r3, #0
   bda86:	d132      	bne.n	bdaee <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bda88:	0076      	lsls	r6, r6, #1
   bda8a:	b2f6      	uxtb	r6, r6
   bda8c:	2e00      	cmp	r6, #0
   bda8e:	d1bc      	bne.n	bda0a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bda90:	3501      	adds	r5, #1
   bda92:	e7b2      	b.n	bd9fa <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bda94:	ea22 0200 	bic.w	r2, r2, r0
   bda98:	601a      	str	r2, [r3, #0]
   bda9a:	4689      	mov	r9, r1
   bda9c:	e7d1      	b.n	bda42 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bda9e:	69a1      	ldr	r1, [r4, #24]
   bdaa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bdaa2:	680a      	ldr	r2, [r1, #0]
   bdaa4:	4313      	orrs	r3, r2
   bdaa6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bdaa8:	b117      	cbz	r7, bdab0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bdaaa:	4638      	mov	r0, r7
   bdaac:	f000 f97a 	bl	bdda4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bdab0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bdab4:	3301      	adds	r3, #1
   bdab6:	d008      	beq.n	bdaca <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bdab8:	6963      	ldr	r3, [r4, #20]
   bdaba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bdabc:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bdabe:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bdac2:	bf14      	ite	ne
   bdac4:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bdac6:	438a      	biceq	r2, r1
   bdac8:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bdaca:	69a1      	ldr	r1, [r4, #24]
   bdacc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bdace:	680a      	ldr	r2, [r1, #0]
   bdad0:	ea22 0303 	bic.w	r3, r2, r3
   bdad4:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bdad6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bdada:	3301      	adds	r3, #1
   bdadc:	d0cb      	beq.n	bda76 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bdade:	69e3      	ldr	r3, [r4, #28]
   bdae0:	681a      	ldr	r2, [r3, #0]
   bdae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bdae4:	421a      	tst	r2, r3
            reply |= b;
   bdae6:	bf18      	it	ne
   bdae8:	ea46 0808 	orrne.w	r8, r6, r8
   bdaec:	e7c3      	b.n	bda76 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bdaee:	0876      	lsrs	r6, r6, #1
   bdaf0:	e7cc      	b.n	bda8c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bdaf2:	bf00      	nop
   bdaf4:	0007a120 	.word	0x0007a120

000bdaf8 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bdaf8:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bdafa:	2201      	movs	r2, #1
  uint8_t data = send;
   bdafc:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bdb00:	f10d 0107 	add.w	r1, sp, #7
   bdb04:	f7ff ff52 	bl	bd9ac <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bdb08:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bdb0c:	b003      	add	sp, #12
   bdb0e:	f85d fb04 	ldr.w	pc, [sp], #4

000bdb12 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bdb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdb16:	4604      	mov	r4, r0
  if (_spi) {
   bdb18:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bdb1a:	460e      	mov	r6, r1
   bdb1c:	4617      	mov	r7, r2
   bdb1e:	461d      	mov	r5, r3
  if (_spi) {
   bdb20:	b110      	cbz	r0, bdb28 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bdb22:	6861      	ldr	r1, [r4, #4]
   bdb24:	f003 fe5a 	bl	c17dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bdb28:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdb2c:	2100      	movs	r1, #0
   bdb2e:	b280      	uxth	r0, r0
   bdb30:	f004 fac5 	bl	c20be <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bdb34:	9b06      	ldr	r3, [sp, #24]
   bdb36:	eb05 0803 	add.w	r8, r5, r3
   bdb3a:	4545      	cmp	r5, r8
   bdb3c:	d108      	bne.n	bdb50 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bdb3e:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bdb40:	42b7      	cmp	r7, r6
   bdb42:	d00b      	beq.n	bdb5c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bdb44:	f816 1b01 	ldrb.w	r1, [r6], #1
   bdb48:	4620      	mov	r0, r4
   bdb4a:	f7ff ffd5 	bl	bdaf8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bdb4e:	e7f7      	b.n	bdb40 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bdb50:	f815 1b01 	ldrb.w	r1, [r5], #1
   bdb54:	4620      	mov	r0, r4
   bdb56:	f7ff ffcf 	bl	bdaf8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bdb5a:	e7ee      	b.n	bdb3a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bdb5c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdb60:	2101      	movs	r1, #1
   bdb62:	b280      	uxth	r0, r0
   bdb64:	f004 faab 	bl	c20be <digitalWrite>

  if (_spi) {
   bdb68:	6820      	ldr	r0, [r4, #0]
   bdb6a:	b108      	cbz	r0, bdb70 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bdb6c:	f003 fe1d 	bl	c17aa <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bdb70:	2001      	movs	r0, #1
   bdb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdb76 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bdb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdb7a:	4604      	mov	r4, r0
  if (_spi) {
   bdb7c:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bdb7e:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bdb82:	460e      	mov	r6, r1
   bdb84:	4617      	mov	r7, r2
   bdb86:	461d      	mov	r5, r3
  if (_spi) {
   bdb88:	b110      	cbz	r0, bdb90 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bdb8a:	6861      	ldr	r1, [r4, #4]
   bdb8c:	f003 fe26 	bl	c17dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bdb90:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdb94:	2100      	movs	r1, #0
   bdb96:	b280      	uxth	r0, r0
   bdb98:	f004 fa91 	bl	c20be <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bdb9c:	4437      	add	r7, r6
   bdb9e:	42be      	cmp	r6, r7
   bdba0:	d10a      	bne.n	bdbb8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bdba2:	9b06      	ldr	r3, [sp, #24]
   bdba4:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bdba6:	42ae      	cmp	r6, r5
   bdba8:	d00c      	beq.n	bdbc4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bdbaa:	4641      	mov	r1, r8
   bdbac:	4620      	mov	r0, r4
   bdbae:	f7ff ffa3 	bl	bdaf8 <_ZN18Adafruit_SPIDevice8transferEh>
   bdbb2:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bdbb6:	e7f6      	b.n	bdba6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bdbb8:	f816 1b01 	ldrb.w	r1, [r6], #1
   bdbbc:	4620      	mov	r0, r4
   bdbbe:	f7ff ff9b 	bl	bdaf8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bdbc2:	e7ec      	b.n	bdb9e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bdbc4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bdbc8:	2101      	movs	r1, #1
   bdbca:	b280      	uxth	r0, r0
   bdbcc:	f004 fa77 	bl	c20be <digitalWrite>

  if (_spi) {
   bdbd0:	6820      	ldr	r0, [r4, #0]
   bdbd2:	b108      	cbz	r0, bdbd8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bdbd4:	f003 fde9 	bl	c17aa <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bdbd8:	2001      	movs	r0, #1
   bdbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bdbe0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bdbe0:	b508      	push	{r3, lr}
   bdbe2:	4b02      	ldr	r3, [pc, #8]	; (bdbec <hal_ble_stack_init+0xc>)
   bdbe4:	681b      	ldr	r3, [r3, #0]
   bdbe6:	689b      	ldr	r3, [r3, #8]
   bdbe8:	9301      	str	r3, [sp, #4]
   bdbea:	bd08      	pop	{r3, pc}
   bdbec:	00030278 	.word	0x00030278

000bdbf0 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bdbf0:	b508      	push	{r3, lr}
   bdbf2:	4b02      	ldr	r3, [pc, #8]	; (bdbfc <hal_ble_gap_set_tx_power+0xc>)
   bdbf4:	681b      	ldr	r3, [r3, #0]
   bdbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdbf8:	9301      	str	r3, [sp, #4]
   bdbfa:	bd08      	pop	{r3, pc}
   bdbfc:	00030278 	.word	0x00030278

000bdc00 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bdc00:	b508      	push	{r3, lr}
   bdc02:	4b02      	ldr	r3, [pc, #8]	; (bdc0c <hal_ble_gap_set_advertising_data+0xc>)
   bdc04:	681b      	ldr	r3, [r3, #0]
   bdc06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdc08:	9301      	str	r3, [sp, #4]
   bdc0a:	bd08      	pop	{r3, pc}
   bdc0c:	00030278 	.word	0x00030278

000bdc10 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bdc10:	b508      	push	{r3, lr}
   bdc12:	4b02      	ldr	r3, [pc, #8]	; (bdc1c <hal_ble_gap_set_scan_response_data+0xc>)
   bdc14:	681b      	ldr	r3, [r3, #0]
   bdc16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdc18:	9301      	str	r3, [sp, #4]
   bdc1a:	bd08      	pop	{r3, pc}
   bdc1c:	00030278 	.word	0x00030278

000bdc20 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bdc20:	b508      	push	{r3, lr}
   bdc22:	4b02      	ldr	r3, [pc, #8]	; (bdc2c <hal_ble_gap_start_advertising+0xc>)
   bdc24:	681b      	ldr	r3, [r3, #0]
   bdc26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bdc28:	9301      	str	r3, [sp, #4]
   bdc2a:	bd08      	pop	{r3, pc}
   bdc2c:	00030278 	.word	0x00030278

000bdc30 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bdc30:	b508      	push	{r3, lr}
   bdc32:	4b03      	ldr	r3, [pc, #12]	; (bdc40 <hal_ble_gap_disconnect+0x10>)
   bdc34:	681b      	ldr	r3, [r3, #0]
   bdc36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bdc3a:	9301      	str	r3, [sp, #4]
   bdc3c:	bd08      	pop	{r3, pc}
   bdc3e:	0000      	.short	0x0000
   bdc40:	00030278 	.word	0x00030278

000bdc44 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bdc44:	b508      	push	{r3, lr}
   bdc46:	4b03      	ldr	r3, [pc, #12]	; (bdc54 <hal_ble_gatt_server_add_service+0x10>)
   bdc48:	681b      	ldr	r3, [r3, #0]
   bdc4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bdc4e:	9301      	str	r3, [sp, #4]
   bdc50:	bd08      	pop	{r3, pc}
   bdc52:	0000      	.short	0x0000
   bdc54:	00030278 	.word	0x00030278

000bdc58 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc58:	b508      	push	{r3, lr}
   bdc5a:	4b03      	ldr	r3, [pc, #12]	; (bdc68 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bdc5c:	681b      	ldr	r3, [r3, #0]
   bdc5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bdc62:	9301      	str	r3, [sp, #4]
   bdc64:	bd08      	pop	{r3, pc}
   bdc66:	0000      	.short	0x0000
   bdc68:	00030278 	.word	0x00030278

000bdc6c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc6c:	b508      	push	{r3, lr}
   bdc6e:	4b03      	ldr	r3, [pc, #12]	; (bdc7c <hal_ble_gatt_client_write_with_response+0x10>)
   bdc70:	681b      	ldr	r3, [r3, #0]
   bdc72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bdc76:	9301      	str	r3, [sp, #4]
   bdc78:	bd08      	pop	{r3, pc}
   bdc7a:	0000      	.short	0x0000
   bdc7c:	00030278 	.word	0x00030278

000bdc80 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc80:	b508      	push	{r3, lr}
   bdc82:	4b03      	ldr	r3, [pc, #12]	; (bdc90 <hal_ble_gatt_client_write_without_response+0x10>)
   bdc84:	681b      	ldr	r3, [r3, #0]
   bdc86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bdc8a:	9301      	str	r3, [sp, #4]
   bdc8c:	bd08      	pop	{r3, pc}
   bdc8e:	0000      	.short	0x0000
   bdc90:	00030278 	.word	0x00030278

000bdc94 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bdc94:	b508      	push	{r3, lr}
   bdc96:	4b03      	ldr	r3, [pc, #12]	; (bdca4 <hal_ble_gatt_server_add_characteristic+0x10>)
   bdc98:	681b      	ldr	r3, [r3, #0]
   bdc9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bdc9e:	9301      	str	r3, [sp, #4]
   bdca0:	bd08      	pop	{r3, pc}
   bdca2:	0000      	.short	0x0000
   bdca4:	00030278 	.word	0x00030278

000bdca8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bdca8:	b508      	push	{r3, lr}
   bdcaa:	4b03      	ldr	r3, [pc, #12]	; (bdcb8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bdcac:	681b      	ldr	r3, [r3, #0]
   bdcae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bdcb2:	9301      	str	r3, [sp, #4]
   bdcb4:	bd08      	pop	{r3, pc}
   bdcb6:	0000      	.short	0x0000
   bdcb8:	00030278 	.word	0x00030278

000bdcbc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdcbc:	b508      	push	{r3, lr}
   bdcbe:	4b03      	ldr	r3, [pc, #12]	; (bdccc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bdcc0:	681b      	ldr	r3, [r3, #0]
   bdcc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bdcc6:	9301      	str	r3, [sp, #4]
   bdcc8:	bd08      	pop	{r3, pc}
   bdcca:	0000      	.short	0x0000
   bdccc:	00030278 	.word	0x00030278

000bdcd0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdcd0:	b508      	push	{r3, lr}
   bdcd2:	4b03      	ldr	r3, [pc, #12]	; (bdce0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bdcd4:	681b      	ldr	r3, [r3, #0]
   bdcd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bdcda:	9301      	str	r3, [sp, #4]
   bdcdc:	bd08      	pop	{r3, pc}
   bdcde:	0000      	.short	0x0000
   bdce0:	00030278 	.word	0x00030278

000bdce4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bdce4:	b508      	push	{r3, lr}
   bdce6:	4b02      	ldr	r3, [pc, #8]	; (bdcf0 <os_thread_yield+0xc>)
   bdce8:	681b      	ldr	r3, [r3, #0]
   bdcea:	68db      	ldr	r3, [r3, #12]
   bdcec:	9301      	str	r3, [sp, #4]
   bdcee:	bd08      	pop	{r3, pc}
   bdcf0:	00030248 	.word	0x00030248

000bdcf4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bdcf4:	b508      	push	{r3, lr}
   bdcf6:	4b02      	ldr	r3, [pc, #8]	; (bdd00 <os_thread_scheduling+0xc>)
   bdcf8:	681b      	ldr	r3, [r3, #0]
   bdcfa:	69db      	ldr	r3, [r3, #28]
   bdcfc:	9301      	str	r3, [sp, #4]
   bdcfe:	bd08      	pop	{r3, pc}
   bdd00:	00030248 	.word	0x00030248

000bdd04 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bdd04:	b508      	push	{r3, lr}
   bdd06:	4b02      	ldr	r3, [pc, #8]	; (bdd10 <os_timer_create+0xc>)
   bdd08:	681b      	ldr	r3, [r3, #0]
   bdd0a:	6a1b      	ldr	r3, [r3, #32]
   bdd0c:	9301      	str	r3, [sp, #4]
   bdd0e:	bd08      	pop	{r3, pc}
   bdd10:	00030248 	.word	0x00030248

000bdd14 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bdd14:	b508      	push	{r3, lr}
   bdd16:	4b02      	ldr	r3, [pc, #8]	; (bdd20 <os_timer_destroy+0xc>)
   bdd18:	681b      	ldr	r3, [r3, #0]
   bdd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdd1c:	9301      	str	r3, [sp, #4]
   bdd1e:	bd08      	pop	{r3, pc}
   bdd20:	00030248 	.word	0x00030248

000bdd24 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bdd24:	b508      	push	{r3, lr}
   bdd26:	4b02      	ldr	r3, [pc, #8]	; (bdd30 <os_timer_get_id+0xc>)
   bdd28:	681b      	ldr	r3, [r3, #0]
   bdd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdd2c:	9301      	str	r3, [sp, #4]
   bdd2e:	bd08      	pop	{r3, pc}
   bdd30:	00030248 	.word	0x00030248

000bdd34 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bdd34:	b508      	push	{r3, lr}
   bdd36:	4b02      	ldr	r3, [pc, #8]	; (bdd40 <os_timer_change+0xc>)
   bdd38:	681b      	ldr	r3, [r3, #0]
   bdd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdd3c:	9301      	str	r3, [sp, #4]
   bdd3e:	bd08      	pop	{r3, pc}
   bdd40:	00030248 	.word	0x00030248

000bdd44 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bdd44:	b508      	push	{r3, lr}
   bdd46:	4b02      	ldr	r3, [pc, #8]	; (bdd50 <os_mutex_recursive_create+0xc>)
   bdd48:	681b      	ldr	r3, [r3, #0]
   bdd4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdd4c:	9301      	str	r3, [sp, #4]
   bdd4e:	bd08      	pop	{r3, pc}
   bdd50:	00030248 	.word	0x00030248

000bdd54 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bdd54:	b508      	push	{r3, lr}
   bdd56:	4b02      	ldr	r3, [pc, #8]	; (bdd60 <os_mutex_recursive_destroy+0xc>)
   bdd58:	681b      	ldr	r3, [r3, #0]
   bdd5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bdd5c:	9301      	str	r3, [sp, #4]
   bdd5e:	bd08      	pop	{r3, pc}
   bdd60:	00030248 	.word	0x00030248

000bdd64 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bdd64:	b508      	push	{r3, lr}
   bdd66:	4b02      	ldr	r3, [pc, #8]	; (bdd70 <os_mutex_recursive_lock+0xc>)
   bdd68:	681b      	ldr	r3, [r3, #0]
   bdd6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdd6c:	9301      	str	r3, [sp, #4]
   bdd6e:	bd08      	pop	{r3, pc}
   bdd70:	00030248 	.word	0x00030248

000bdd74 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bdd74:	b508      	push	{r3, lr}
   bdd76:	4b02      	ldr	r3, [pc, #8]	; (bdd80 <os_mutex_recursive_unlock+0xc>)
   bdd78:	681b      	ldr	r3, [r3, #0]
   bdd7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdd7c:	9301      	str	r3, [sp, #4]
   bdd7e:	bd08      	pop	{r3, pc}
   bdd80:	00030248 	.word	0x00030248

000bdd84 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bdd84:	b508      	push	{r3, lr}
   bdd86:	4b02      	ldr	r3, [pc, #8]	; (bdd90 <os_timer_set_id+0xc>)
   bdd88:	681b      	ldr	r3, [r3, #0]
   bdd8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdd8c:	9301      	str	r3, [sp, #4]
   bdd8e:	bd08      	pop	{r3, pc}
   bdd90:	00030248 	.word	0x00030248

000bdd94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bdd94:	b508      	push	{r3, lr}
   bdd96:	4b02      	ldr	r3, [pc, #8]	; (bdda0 <HAL_RNG_GetRandomNumber+0xc>)
   bdd98:	681b      	ldr	r3, [r3, #0]
   bdd9a:	685b      	ldr	r3, [r3, #4]
   bdd9c:	9301      	str	r3, [sp, #4]
   bdd9e:	bd08      	pop	{r3, pc}
   bdda0:	00030218 	.word	0x00030218

000bdda4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bdda4:	b508      	push	{r3, lr}
   bdda6:	4b02      	ldr	r3, [pc, #8]	; (bddb0 <HAL_Delay_Microseconds+0xc>)
   bdda8:	681b      	ldr	r3, [r3, #0]
   bddaa:	68db      	ldr	r3, [r3, #12]
   bddac:	9301      	str	r3, [sp, #4]
   bddae:	bd08      	pop	{r3, pc}
   bddb0:	00030218 	.word	0x00030218

000bddb4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bddb4:	b508      	push	{r3, lr}
   bddb6:	4b02      	ldr	r3, [pc, #8]	; (bddc0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bddb8:	681b      	ldr	r3, [r3, #0]
   bddba:	691b      	ldr	r3, [r3, #16]
   bddbc:	9301      	str	r3, [sp, #4]
   bddbe:	bd08      	pop	{r3, pc}
   bddc0:	00030218 	.word	0x00030218

000bddc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bddc4:	b508      	push	{r3, lr}
   bddc6:	4b02      	ldr	r3, [pc, #8]	; (bddd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bddc8:	681b      	ldr	r3, [r3, #0]
   bddca:	695b      	ldr	r3, [r3, #20]
   bddcc:	9301      	str	r3, [sp, #4]
   bddce:	bd08      	pop	{r3, pc}
   bddd0:	00030218 	.word	0x00030218

000bddd4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bddd4:	b508      	push	{r3, lr}
   bddd6:	4b02      	ldr	r3, [pc, #8]	; (bdde0 <hal_rtc_time_is_valid+0xc>)
   bddd8:	681b      	ldr	r3, [r3, #0]
   bddda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdddc:	9301      	str	r3, [sp, #4]
   bddde:	bd08      	pop	{r3, pc}
   bdde0:	00030218 	.word	0x00030218

000bdde4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bdde4:	b508      	push	{r3, lr}
   bdde6:	4b02      	ldr	r3, [pc, #8]	; (bddf0 <hal_rtc_get_time+0xc>)
   bdde8:	681b      	ldr	r3, [r3, #0]
   bddea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bddec:	9301      	str	r3, [sp, #4]
   bddee:	bd08      	pop	{r3, pc}
   bddf0:	00030218 	.word	0x00030218

000bddf4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bddf4:	b508      	push	{r3, lr}
   bddf6:	4b02      	ldr	r3, [pc, #8]	; (bde00 <HAL_Validate_Pin_Function+0xc>)
   bddf8:	681b      	ldr	r3, [r3, #0]
   bddfa:	685b      	ldr	r3, [r3, #4]
   bddfc:	9301      	str	r3, [sp, #4]
   bddfe:	bd08      	pop	{r3, pc}
   bde00:	0003022c 	.word	0x0003022c

000bde04 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bde04:	b508      	push	{r3, lr}
   bde06:	4b02      	ldr	r3, [pc, #8]	; (bde10 <HAL_Pin_Mode+0xc>)
   bde08:	681b      	ldr	r3, [r3, #0]
   bde0a:	689b      	ldr	r3, [r3, #8]
   bde0c:	9301      	str	r3, [sp, #4]
   bde0e:	bd08      	pop	{r3, pc}
   bde10:	0003022c 	.word	0x0003022c

000bde14 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bde14:	b508      	push	{r3, lr}
   bde16:	4b02      	ldr	r3, [pc, #8]	; (bde20 <HAL_Get_Pin_Mode+0xc>)
   bde18:	681b      	ldr	r3, [r3, #0]
   bde1a:	68db      	ldr	r3, [r3, #12]
   bde1c:	9301      	str	r3, [sp, #4]
   bde1e:	bd08      	pop	{r3, pc}
   bde20:	0003022c 	.word	0x0003022c

000bde24 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bde24:	b508      	push	{r3, lr}
   bde26:	4b02      	ldr	r3, [pc, #8]	; (bde30 <HAL_GPIO_Write+0xc>)
   bde28:	681b      	ldr	r3, [r3, #0]
   bde2a:	691b      	ldr	r3, [r3, #16]
   bde2c:	9301      	str	r3, [sp, #4]
   bde2e:	bd08      	pop	{r3, pc}
   bde30:	0003022c 	.word	0x0003022c

000bde34 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bde34:	b508      	push	{r3, lr}
   bde36:	4b02      	ldr	r3, [pc, #8]	; (bde40 <HAL_GPIO_Read+0xc>)
   bde38:	681b      	ldr	r3, [r3, #0]
   bde3a:	695b      	ldr	r3, [r3, #20]
   bde3c:	9301      	str	r3, [sp, #4]
   bde3e:	bd08      	pop	{r3, pc}
   bde40:	0003022c 	.word	0x0003022c

000bde44 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bde44:	b508      	push	{r3, lr}
   bde46:	4b02      	ldr	r3, [pc, #8]	; (bde50 <HAL_Interrupts_Attach+0xc>)
   bde48:	681b      	ldr	r3, [r3, #0]
   bde4a:	699b      	ldr	r3, [r3, #24]
   bde4c:	9301      	str	r3, [sp, #4]
   bde4e:	bd08      	pop	{r3, pc}
   bde50:	0003022c 	.word	0x0003022c

000bde54 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bde54:	b508      	push	{r3, lr}
   bde56:	4b02      	ldr	r3, [pc, #8]	; (bde60 <HAL_Interrupts_Detach+0xc>)
   bde58:	681b      	ldr	r3, [r3, #0]
   bde5a:	69db      	ldr	r3, [r3, #28]
   bde5c:	9301      	str	r3, [sp, #4]
   bde5e:	bd08      	pop	{r3, pc}
   bde60:	0003022c 	.word	0x0003022c

000bde64 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bde64:	b508      	push	{r3, lr}
   bde66:	4b02      	ldr	r3, [pc, #8]	; (bde70 <HAL_Interrupts_Enable_All+0xc>)
   bde68:	681b      	ldr	r3, [r3, #0]
   bde6a:	6a1b      	ldr	r3, [r3, #32]
   bde6c:	9301      	str	r3, [sp, #4]
   bde6e:	bd08      	pop	{r3, pc}
   bde70:	0003022c 	.word	0x0003022c

000bde74 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bde74:	b508      	push	{r3, lr}
   bde76:	4b02      	ldr	r3, [pc, #8]	; (bde80 <HAL_Interrupts_Disable_All+0xc>)
   bde78:	681b      	ldr	r3, [r3, #0]
   bde7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bde7c:	9301      	str	r3, [sp, #4]
   bde7e:	bd08      	pop	{r3, pc}
   bde80:	0003022c 	.word	0x0003022c

000bde84 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bde84:	b508      	push	{r3, lr}
   bde86:	4b02      	ldr	r3, [pc, #8]	; (bde90 <hal_adc_read+0xc>)
   bde88:	681b      	ldr	r3, [r3, #0]
   bde8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bde8c:	9301      	str	r3, [sp, #4]
   bde8e:	bd08      	pop	{r3, pc}
   bde90:	0003022c 	.word	0x0003022c

000bde94 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bde94:	b508      	push	{r3, lr}
   bde96:	4b02      	ldr	r3, [pc, #8]	; (bdea0 <hal_i2c_set_speed+0xc>)
   bde98:	681b      	ldr	r3, [r3, #0]
   bde9a:	681b      	ldr	r3, [r3, #0]
   bde9c:	9301      	str	r3, [sp, #4]
   bde9e:	bd08      	pop	{r3, pc}
   bdea0:	00030228 	.word	0x00030228

000bdea4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bdea4:	b508      	push	{r3, lr}
   bdea6:	4b02      	ldr	r3, [pc, #8]	; (bdeb0 <hal_i2c_begin+0xc>)
   bdea8:	681b      	ldr	r3, [r3, #0]
   bdeaa:	68db      	ldr	r3, [r3, #12]
   bdeac:	9301      	str	r3, [sp, #4]
   bdeae:	bd08      	pop	{r3, pc}
   bdeb0:	00030228 	.word	0x00030228

000bdeb4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bdeb4:	b508      	push	{r3, lr}
   bdeb6:	4b02      	ldr	r3, [pc, #8]	; (bdec0 <hal_i2c_begin_transmission+0xc>)
   bdeb8:	681b      	ldr	r3, [r3, #0]
   bdeba:	699b      	ldr	r3, [r3, #24]
   bdebc:	9301      	str	r3, [sp, #4]
   bdebe:	bd08      	pop	{r3, pc}
   bdec0:	00030228 	.word	0x00030228

000bdec4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bdec4:	b508      	push	{r3, lr}
   bdec6:	4b02      	ldr	r3, [pc, #8]	; (bded0 <hal_i2c_end_transmission+0xc>)
   bdec8:	681b      	ldr	r3, [r3, #0]
   bdeca:	69db      	ldr	r3, [r3, #28]
   bdecc:	9301      	str	r3, [sp, #4]
   bdece:	bd08      	pop	{r3, pc}
   bded0:	00030228 	.word	0x00030228

000bded4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bded4:	b508      	push	{r3, lr}
   bded6:	4b02      	ldr	r3, [pc, #8]	; (bdee0 <hal_i2c_write+0xc>)
   bded8:	681b      	ldr	r3, [r3, #0]
   bdeda:	6a1b      	ldr	r3, [r3, #32]
   bdedc:	9301      	str	r3, [sp, #4]
   bdede:	bd08      	pop	{r3, pc}
   bdee0:	00030228 	.word	0x00030228

000bdee4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bdee4:	b508      	push	{r3, lr}
   bdee6:	4b02      	ldr	r3, [pc, #8]	; (bdef0 <hal_i2c_available+0xc>)
   bdee8:	681b      	ldr	r3, [r3, #0]
   bdeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdeec:	9301      	str	r3, [sp, #4]
   bdeee:	bd08      	pop	{r3, pc}
   bdef0:	00030228 	.word	0x00030228

000bdef4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bdef4:	b508      	push	{r3, lr}
   bdef6:	4b02      	ldr	r3, [pc, #8]	; (bdf00 <hal_i2c_read+0xc>)
   bdef8:	681b      	ldr	r3, [r3, #0]
   bdefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdefc:	9301      	str	r3, [sp, #4]
   bdefe:	bd08      	pop	{r3, pc}
   bdf00:	00030228 	.word	0x00030228

000bdf04 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bdf04:	b508      	push	{r3, lr}
   bdf06:	4b02      	ldr	r3, [pc, #8]	; (bdf10 <hal_i2c_peek+0xc>)
   bdf08:	681b      	ldr	r3, [r3, #0]
   bdf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdf0c:	9301      	str	r3, [sp, #4]
   bdf0e:	bd08      	pop	{r3, pc}
   bdf10:	00030228 	.word	0x00030228

000bdf14 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bdf14:	b508      	push	{r3, lr}
   bdf16:	4b02      	ldr	r3, [pc, #8]	; (bdf20 <hal_i2c_flush+0xc>)
   bdf18:	681b      	ldr	r3, [r3, #0]
   bdf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdf1c:	9301      	str	r3, [sp, #4]
   bdf1e:	bd08      	pop	{r3, pc}
   bdf20:	00030228 	.word	0x00030228

000bdf24 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bdf24:	b508      	push	{r3, lr}
   bdf26:	4b02      	ldr	r3, [pc, #8]	; (bdf30 <hal_i2c_is_enabled+0xc>)
   bdf28:	681b      	ldr	r3, [r3, #0]
   bdf2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdf2c:	9301      	str	r3, [sp, #4]
   bdf2e:	bd08      	pop	{r3, pc}
   bdf30:	00030228 	.word	0x00030228

000bdf34 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bdf34:	b508      	push	{r3, lr}
   bdf36:	4b02      	ldr	r3, [pc, #8]	; (bdf40 <hal_i2c_init+0xc>)
   bdf38:	681b      	ldr	r3, [r3, #0]
   bdf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdf3c:	9301      	str	r3, [sp, #4]
   bdf3e:	bd08      	pop	{r3, pc}
   bdf40:	00030228 	.word	0x00030228

000bdf44 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bdf44:	b508      	push	{r3, lr}
   bdf46:	4b02      	ldr	r3, [pc, #8]	; (bdf50 <hal_i2c_request_ex+0xc>)
   bdf48:	681b      	ldr	r3, [r3, #0]
   bdf4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdf4c:	9301      	str	r3, [sp, #4]
   bdf4e:	bd08      	pop	{r3, pc}
   bdf50:	00030228 	.word	0x00030228

000bdf54 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bdf54:	b508      	push	{r3, lr}
   bdf56:	4b02      	ldr	r3, [pc, #8]	; (bdf60 <inet_inet_ntop+0xc>)
   bdf58:	681b      	ldr	r3, [r3, #0]
   bdf5a:	695b      	ldr	r3, [r3, #20]
   bdf5c:	9301      	str	r3, [sp, #4]
   bdf5e:	bd08      	pop	{r3, pc}
   bdf60:	00030264 	.word	0x00030264

000bdf64 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bdf64:	b508      	push	{r3, lr}
   bdf66:	4b02      	ldr	r3, [pc, #8]	; (bdf70 <netdb_freeaddrinfo+0xc>)
   bdf68:	681b      	ldr	r3, [r3, #0]
   bdf6a:	689b      	ldr	r3, [r3, #8]
   bdf6c:	9301      	str	r3, [sp, #4]
   bdf6e:	bd08      	pop	{r3, pc}
   bdf70:	00030268 	.word	0x00030268

000bdf74 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bdf74:	b508      	push	{r3, lr}
   bdf76:	4b02      	ldr	r3, [pc, #8]	; (bdf80 <netdb_getaddrinfo+0xc>)
   bdf78:	681b      	ldr	r3, [r3, #0]
   bdf7a:	68db      	ldr	r3, [r3, #12]
   bdf7c:	9301      	str	r3, [sp, #4]
   bdf7e:	bd08      	pop	{r3, pc}
   bdf80:	00030268 	.word	0x00030268

000bdf84 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bdf84:	b508      	push	{r3, lr}
   bdf86:	4b02      	ldr	r3, [pc, #8]	; (bdf90 <HAL_Servo_Attach+0xc>)
   bdf88:	681b      	ldr	r3, [r3, #0]
   bdf8a:	691b      	ldr	r3, [r3, #16]
   bdf8c:	9301      	str	r3, [sp, #4]
   bdf8e:	bd08      	pop	{r3, pc}
   bdf90:	00030224 	.word	0x00030224

000bdf94 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bdf94:	b508      	push	{r3, lr}
   bdf96:	4b02      	ldr	r3, [pc, #8]	; (bdfa0 <HAL_Servo_Detach+0xc>)
   bdf98:	681b      	ldr	r3, [r3, #0]
   bdf9a:	695b      	ldr	r3, [r3, #20]
   bdf9c:	9301      	str	r3, [sp, #4]
   bdf9e:	bd08      	pop	{r3, pc}
   bdfa0:	00030224 	.word	0x00030224

000bdfa4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bdfa4:	b508      	push	{r3, lr}
   bdfa6:	4b02      	ldr	r3, [pc, #8]	; (bdfb0 <HAL_Servo_Write_Pulse_Width+0xc>)
   bdfa8:	681b      	ldr	r3, [r3, #0]
   bdfaa:	699b      	ldr	r3, [r3, #24]
   bdfac:	9301      	str	r3, [sp, #4]
   bdfae:	bd08      	pop	{r3, pc}
   bdfb0:	00030224 	.word	0x00030224

000bdfb4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bdfb4:	b508      	push	{r3, lr}
   bdfb6:	4b02      	ldr	r3, [pc, #8]	; (bdfc0 <hal_spi_begin+0xc>)
   bdfb8:	681b      	ldr	r3, [r3, #0]
   bdfba:	681b      	ldr	r3, [r3, #0]
   bdfbc:	9301      	str	r3, [sp, #4]
   bdfbe:	bd08      	pop	{r3, pc}
   bdfc0:	00030230 	.word	0x00030230

000bdfc4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bdfc4:	b508      	push	{r3, lr}
   bdfc6:	4b02      	ldr	r3, [pc, #8]	; (bdfd0 <hal_spi_transfer+0xc>)
   bdfc8:	681b      	ldr	r3, [r3, #0]
   bdfca:	695b      	ldr	r3, [r3, #20]
   bdfcc:	9301      	str	r3, [sp, #4]
   bdfce:	bd08      	pop	{r3, pc}
   bdfd0:	00030230 	.word	0x00030230

000bdfd4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bdfd4:	b508      	push	{r3, lr}
   bdfd6:	4b02      	ldr	r3, [pc, #8]	; (bdfe0 <hal_spi_init+0xc>)
   bdfd8:	681b      	ldr	r3, [r3, #0]
   bdfda:	69db      	ldr	r3, [r3, #28]
   bdfdc:	9301      	str	r3, [sp, #4]
   bdfde:	bd08      	pop	{r3, pc}
   bdfe0:	00030230 	.word	0x00030230

000bdfe4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bdfe4:	b508      	push	{r3, lr}
   bdfe6:	4b02      	ldr	r3, [pc, #8]	; (bdff0 <hal_spi_is_enabled+0xc>)
   bdfe8:	681b      	ldr	r3, [r3, #0]
   bdfea:	6a1b      	ldr	r3, [r3, #32]
   bdfec:	9301      	str	r3, [sp, #4]
   bdfee:	bd08      	pop	{r3, pc}
   bdff0:	00030230 	.word	0x00030230

000bdff4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bdff4:	b508      	push	{r3, lr}
   bdff6:	4b02      	ldr	r3, [pc, #8]	; (be000 <hal_spi_info+0xc>)
   bdff8:	681b      	ldr	r3, [r3, #0]
   bdffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdffc:	9301      	str	r3, [sp, #4]
   bdffe:	bd08      	pop	{r3, pc}
   be000:	00030230 	.word	0x00030230

000be004 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   be004:	b508      	push	{r3, lr}
   be006:	4b02      	ldr	r3, [pc, #8]	; (be010 <hal_spi_transfer_dma+0xc>)
   be008:	681b      	ldr	r3, [r3, #0]
   be00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   be00c:	9301      	str	r3, [sp, #4]
   be00e:	bd08      	pop	{r3, pc}
   be010:	00030230 	.word	0x00030230

000be014 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   be014:	b508      	push	{r3, lr}
   be016:	4b02      	ldr	r3, [pc, #8]	; (be020 <hal_spi_transfer_dma_status+0xc>)
   be018:	681b      	ldr	r3, [r3, #0]
   be01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   be01c:	9301      	str	r3, [sp, #4]
   be01e:	bd08      	pop	{r3, pc}
   be020:	00030230 	.word	0x00030230

000be024 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   be024:	b508      	push	{r3, lr}
   be026:	4b02      	ldr	r3, [pc, #8]	; (be030 <hal_spi_set_settings+0xc>)
   be028:	681b      	ldr	r3, [r3, #0]
   be02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be02c:	9301      	str	r3, [sp, #4]
   be02e:	bd08      	pop	{r3, pc}
   be030:	00030230 	.word	0x00030230

000be034 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   be034:	b508      	push	{r3, lr}
   be036:	4b02      	ldr	r3, [pc, #8]	; (be040 <hal_spi_acquire+0xc>)
   be038:	681b      	ldr	r3, [r3, #0]
   be03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be03c:	9301      	str	r3, [sp, #4]
   be03e:	bd08      	pop	{r3, pc}
   be040:	00030230 	.word	0x00030230

000be044 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   be044:	b508      	push	{r3, lr}
   be046:	4b02      	ldr	r3, [pc, #8]	; (be050 <hal_spi_release+0xc>)
   be048:	681b      	ldr	r3, [r3, #0]
   be04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be04c:	9301      	str	r3, [sp, #4]
   be04e:	bd08      	pop	{r3, pc}
   be050:	00030230 	.word	0x00030230

000be054 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   be054:	b508      	push	{r3, lr}
   be056:	4b02      	ldr	r3, [pc, #8]	; (be060 <hal_usart_end+0xc>)
   be058:	681b      	ldr	r3, [r3, #0]
   be05a:	689b      	ldr	r3, [r3, #8]
   be05c:	9301      	str	r3, [sp, #4]
   be05e:	bd08      	pop	{r3, pc}
   be060:	0003023c 	.word	0x0003023c

000be064 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   be064:	b508      	push	{r3, lr}
   be066:	4b02      	ldr	r3, [pc, #8]	; (be070 <hal_usart_write+0xc>)
   be068:	681b      	ldr	r3, [r3, #0]
   be06a:	68db      	ldr	r3, [r3, #12]
   be06c:	9301      	str	r3, [sp, #4]
   be06e:	bd08      	pop	{r3, pc}
   be070:	0003023c 	.word	0x0003023c

000be074 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   be074:	b508      	push	{r3, lr}
   be076:	4b02      	ldr	r3, [pc, #8]	; (be080 <hal_usart_available+0xc>)
   be078:	681b      	ldr	r3, [r3, #0]
   be07a:	691b      	ldr	r3, [r3, #16]
   be07c:	9301      	str	r3, [sp, #4]
   be07e:	bd08      	pop	{r3, pc}
   be080:	0003023c 	.word	0x0003023c

000be084 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   be084:	b508      	push	{r3, lr}
   be086:	4b02      	ldr	r3, [pc, #8]	; (be090 <hal_usart_read+0xc>)
   be088:	681b      	ldr	r3, [r3, #0]
   be08a:	695b      	ldr	r3, [r3, #20]
   be08c:	9301      	str	r3, [sp, #4]
   be08e:	bd08      	pop	{r3, pc}
   be090:	0003023c 	.word	0x0003023c

000be094 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   be094:	b508      	push	{r3, lr}
   be096:	4b02      	ldr	r3, [pc, #8]	; (be0a0 <hal_usart_peek+0xc>)
   be098:	681b      	ldr	r3, [r3, #0]
   be09a:	699b      	ldr	r3, [r3, #24]
   be09c:	9301      	str	r3, [sp, #4]
   be09e:	bd08      	pop	{r3, pc}
   be0a0:	0003023c 	.word	0x0003023c

000be0a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   be0a4:	b508      	push	{r3, lr}
   be0a6:	4b02      	ldr	r3, [pc, #8]	; (be0b0 <hal_usart_flush+0xc>)
   be0a8:	681b      	ldr	r3, [r3, #0]
   be0aa:	69db      	ldr	r3, [r3, #28]
   be0ac:	9301      	str	r3, [sp, #4]
   be0ae:	bd08      	pop	{r3, pc}
   be0b0:	0003023c 	.word	0x0003023c

000be0b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   be0b4:	b508      	push	{r3, lr}
   be0b6:	4b02      	ldr	r3, [pc, #8]	; (be0c0 <hal_usart_is_enabled+0xc>)
   be0b8:	681b      	ldr	r3, [r3, #0]
   be0ba:	6a1b      	ldr	r3, [r3, #32]
   be0bc:	9301      	str	r3, [sp, #4]
   be0be:	bd08      	pop	{r3, pc}
   be0c0:	0003023c 	.word	0x0003023c

000be0c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   be0c4:	b508      	push	{r3, lr}
   be0c6:	4b02      	ldr	r3, [pc, #8]	; (be0d0 <hal_usart_available_data_for_write+0xc>)
   be0c8:	681b      	ldr	r3, [r3, #0]
   be0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   be0cc:	9301      	str	r3, [sp, #4]
   be0ce:	bd08      	pop	{r3, pc}
   be0d0:	0003023c 	.word	0x0003023c

000be0d4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   be0d4:	b508      	push	{r3, lr}
   be0d6:	4b02      	ldr	r3, [pc, #8]	; (be0e0 <hal_usart_begin_config+0xc>)
   be0d8:	681b      	ldr	r3, [r3, #0]
   be0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be0dc:	9301      	str	r3, [sp, #4]
   be0de:	bd08      	pop	{r3, pc}
   be0e0:	0003023c 	.word	0x0003023c

000be0e4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   be0e4:	b508      	push	{r3, lr}
   be0e6:	4b02      	ldr	r3, [pc, #8]	; (be0f0 <hal_usart_init_ex+0xc>)
   be0e8:	681b      	ldr	r3, [r3, #0]
   be0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be0ec:	9301      	str	r3, [sp, #4]
   be0ee:	bd08      	pop	{r3, pc}
   be0f0:	0003023c 	.word	0x0003023c

000be0f4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   be0f4:	b508      	push	{r3, lr}
   be0f6:	4b02      	ldr	r3, [pc, #8]	; (be100 <HAL_USB_USART_Init+0xc>)
   be0f8:	681b      	ldr	r3, [r3, #0]
   be0fa:	681b      	ldr	r3, [r3, #0]
   be0fc:	9301      	str	r3, [sp, #4]
   be0fe:	bd08      	pop	{r3, pc}
   be100:	0003024c 	.word	0x0003024c

000be104 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   be104:	b508      	push	{r3, lr}
   be106:	4b02      	ldr	r3, [pc, #8]	; (be110 <HAL_USB_USART_Begin+0xc>)
   be108:	681b      	ldr	r3, [r3, #0]
   be10a:	685b      	ldr	r3, [r3, #4]
   be10c:	9301      	str	r3, [sp, #4]
   be10e:	bd08      	pop	{r3, pc}
   be110:	0003024c 	.word	0x0003024c

000be114 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   be114:	b508      	push	{r3, lr}
   be116:	4b02      	ldr	r3, [pc, #8]	; (be120 <HAL_USB_USART_End+0xc>)
   be118:	681b      	ldr	r3, [r3, #0]
   be11a:	689b      	ldr	r3, [r3, #8]
   be11c:	9301      	str	r3, [sp, #4]
   be11e:	bd08      	pop	{r3, pc}
   be120:	0003024c 	.word	0x0003024c

000be124 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   be124:	b508      	push	{r3, lr}
   be126:	4b02      	ldr	r3, [pc, #8]	; (be130 <HAL_USB_USART_Available_Data+0xc>)
   be128:	681b      	ldr	r3, [r3, #0]
   be12a:	691b      	ldr	r3, [r3, #16]
   be12c:	9301      	str	r3, [sp, #4]
   be12e:	bd08      	pop	{r3, pc}
   be130:	0003024c 	.word	0x0003024c

000be134 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   be134:	b508      	push	{r3, lr}
   be136:	4b02      	ldr	r3, [pc, #8]	; (be140 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   be138:	681b      	ldr	r3, [r3, #0]
   be13a:	695b      	ldr	r3, [r3, #20]
   be13c:	9301      	str	r3, [sp, #4]
   be13e:	bd08      	pop	{r3, pc}
   be140:	0003024c 	.word	0x0003024c

000be144 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be144:	b508      	push	{r3, lr}
   be146:	4b02      	ldr	r3, [pc, #8]	; (be150 <HAL_USB_USART_Receive_Data+0xc>)
   be148:	681b      	ldr	r3, [r3, #0]
   be14a:	699b      	ldr	r3, [r3, #24]
   be14c:	9301      	str	r3, [sp, #4]
   be14e:	bd08      	pop	{r3, pc}
   be150:	0003024c 	.word	0x0003024c

000be154 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be154:	b508      	push	{r3, lr}
   be156:	4b02      	ldr	r3, [pc, #8]	; (be160 <HAL_USB_USART_Send_Data+0xc>)
   be158:	681b      	ldr	r3, [r3, #0]
   be15a:	69db      	ldr	r3, [r3, #28]
   be15c:	9301      	str	r3, [sp, #4]
   be15e:	bd08      	pop	{r3, pc}
   be160:	0003024c 	.word	0x0003024c

000be164 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   be164:	b508      	push	{r3, lr}
   be166:	4b02      	ldr	r3, [pc, #8]	; (be170 <HAL_USB_USART_Flush_Data+0xc>)
   be168:	681b      	ldr	r3, [r3, #0]
   be16a:	6a1b      	ldr	r3, [r3, #32]
   be16c:	9301      	str	r3, [sp, #4]
   be16e:	bd08      	pop	{r3, pc}
   be170:	0003024c 	.word	0x0003024c

000be174 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   be174:	b508      	push	{r3, lr}
   be176:	4b02      	ldr	r3, [pc, #8]	; (be180 <panic_+0xc>)
   be178:	681b      	ldr	r3, [r3, #0]
   be17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be17c:	9301      	str	r3, [sp, #4]
   be17e:	bd08      	pop	{r3, pc}
   be180:	00030260 	.word	0x00030260

000be184 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   be184:	b508      	push	{r3, lr}
   be186:	4b02      	ldr	r3, [pc, #8]	; (be190 <log_message+0xc>)
   be188:	681b      	ldr	r3, [r3, #0]
   be18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   be18c:	9301      	str	r3, [sp, #4]
   be18e:	bd08      	pop	{r3, pc}
   be190:	00030260 	.word	0x00030260

000be194 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   be194:	b508      	push	{r3, lr}
   be196:	4b02      	ldr	r3, [pc, #8]	; (be1a0 <log_level_name+0xc>)
   be198:	681b      	ldr	r3, [r3, #0]
   be19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   be19c:	9301      	str	r3, [sp, #4]
   be19e:	bd08      	pop	{r3, pc}
   be1a0:	00030260 	.word	0x00030260

000be1a4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   be1a4:	b508      	push	{r3, lr}
   be1a6:	4b02      	ldr	r3, [pc, #8]	; (be1b0 <log_set_callbacks+0xc>)
   be1a8:	681b      	ldr	r3, [r3, #0]
   be1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   be1ac:	9301      	str	r3, [sp, #4]
   be1ae:	bd08      	pop	{r3, pc}
   be1b0:	00030260 	.word	0x00030260

000be1b4 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   be1b4:	b508      	push	{r3, lr}
   be1b6:	4b03      	ldr	r3, [pc, #12]	; (be1c4 <led_set_status_active+0x10>)
   be1b8:	681b      	ldr	r3, [r3, #0]
   be1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   be1be:	9301      	str	r3, [sp, #4]
   be1c0:	bd08      	pop	{r3, pc}
   be1c2:	0000      	.short	0x0000
   be1c4:	00030260 	.word	0x00030260

000be1c8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   be1c8:	b508      	push	{r3, lr}
   be1ca:	4b02      	ldr	r3, [pc, #8]	; (be1d4 <system_mode+0xc>)
   be1cc:	681b      	ldr	r3, [r3, #0]
   be1ce:	681b      	ldr	r3, [r3, #0]
   be1d0:	9301      	str	r3, [sp, #4]
   be1d2:	bd08      	pop	{r3, pc}
   be1d4:	00030220 	.word	0x00030220

000be1d8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   be1d8:	b508      	push	{r3, lr}
   be1da:	4b02      	ldr	r3, [pc, #8]	; (be1e4 <set_system_mode+0xc>)
   be1dc:	681b      	ldr	r3, [r3, #0]
   be1de:	685b      	ldr	r3, [r3, #4]
   be1e0:	9301      	str	r3, [sp, #4]
   be1e2:	bd08      	pop	{r3, pc}
   be1e4:	00030220 	.word	0x00030220

000be1e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   be1e8:	b508      	push	{r3, lr}
   be1ea:	4b02      	ldr	r3, [pc, #8]	; (be1f4 <system_delay_ms+0xc>)
   be1ec:	681b      	ldr	r3, [r3, #0]
   be1ee:	695b      	ldr	r3, [r3, #20]
   be1f0:	9301      	str	r3, [sp, #4]
   be1f2:	bd08      	pop	{r3, pc}
   be1f4:	00030220 	.word	0x00030220

000be1f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   be1f8:	b508      	push	{r3, lr}
   be1fa:	4b02      	ldr	r3, [pc, #8]	; (be204 <application_thread_current+0xc>)
   be1fc:	681b      	ldr	r3, [r3, #0]
   be1fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be200:	9301      	str	r3, [sp, #4]
   be202:	bd08      	pop	{r3, pc}
   be204:	00030220 	.word	0x00030220

000be208 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   be208:	b508      	push	{r3, lr}
   be20a:	4b02      	ldr	r3, [pc, #8]	; (be214 <application_thread_invoke+0xc>)
   be20c:	681b      	ldr	r3, [r3, #0]
   be20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   be210:	9301      	str	r3, [sp, #4]
   be212:	bd08      	pop	{r3, pc}
   be214:	00030220 	.word	0x00030220

000be218 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   be218:	b508      	push	{r3, lr}
   be21a:	4b02      	ldr	r3, [pc, #8]	; (be224 <system_thread_get_state+0xc>)
   be21c:	681b      	ldr	r3, [r3, #0]
   be21e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   be220:	9301      	str	r3, [sp, #4]
   be222:	bd08      	pop	{r3, pc}
   be224:	00030220 	.word	0x00030220

000be228 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   be228:	b508      	push	{r3, lr}
   be22a:	4b02      	ldr	r3, [pc, #8]	; (be234 <led_pattern_period+0xc>)
   be22c:	681b      	ldr	r3, [r3, #0]
   be22e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   be230:	9301      	str	r3, [sp, #4]
   be232:	bd08      	pop	{r3, pc}
   be234:	00030220 	.word	0x00030220

000be238 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   be238:	b508      	push	{r3, lr}
   be23a:	4b03      	ldr	r3, [pc, #12]	; (be248 <system_ctrl_set_app_request_handler+0x10>)
   be23c:	681b      	ldr	r3, [r3, #0]
   be23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   be242:	9301      	str	r3, [sp, #4]
   be244:	bd08      	pop	{r3, pc}
   be246:	0000      	.short	0x0000
   be248:	00030220 	.word	0x00030220

000be24c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   be24c:	b508      	push	{r3, lr}
   be24e:	4b03      	ldr	r3, [pc, #12]	; (be25c <system_ctrl_set_result+0x10>)
   be250:	681b      	ldr	r3, [r3, #0]
   be252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   be256:	9301      	str	r3, [sp, #4]
   be258:	bd08      	pop	{r3, pc}
   be25a:	0000      	.short	0x0000
   be25c:	00030220 	.word	0x00030220

000be260 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   be260:	b508      	push	{r3, lr}
   be262:	4b02      	ldr	r3, [pc, #8]	; (be26c <spark_function+0xc>)
   be264:	681b      	ldr	r3, [r3, #0]
   be266:	685b      	ldr	r3, [r3, #4]
   be268:	9301      	str	r3, [sp, #4]
   be26a:	bd08      	pop	{r3, pc}
   be26c:	00030244 	.word	0x00030244

000be270 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   be270:	b508      	push	{r3, lr}
   be272:	4b02      	ldr	r3, [pc, #8]	; (be27c <spark_process+0xc>)
   be274:	681b      	ldr	r3, [r3, #0]
   be276:	689b      	ldr	r3, [r3, #8]
   be278:	9301      	str	r3, [sp, #4]
   be27a:	bd08      	pop	{r3, pc}
   be27c:	00030244 	.word	0x00030244

000be280 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   be280:	b508      	push	{r3, lr}
   be282:	4b02      	ldr	r3, [pc, #8]	; (be28c <spark_cloud_flag_connect+0xc>)
   be284:	681b      	ldr	r3, [r3, #0]
   be286:	68db      	ldr	r3, [r3, #12]
   be288:	9301      	str	r3, [sp, #4]
   be28a:	bd08      	pop	{r3, pc}
   be28c:	00030244 	.word	0x00030244

000be290 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   be290:	b508      	push	{r3, lr}
   be292:	4b02      	ldr	r3, [pc, #8]	; (be29c <spark_cloud_flag_connected+0xc>)
   be294:	681b      	ldr	r3, [r3, #0]
   be296:	695b      	ldr	r3, [r3, #20]
   be298:	9301      	str	r3, [sp, #4]
   be29a:	bd08      	pop	{r3, pc}
   be29c:	00030244 	.word	0x00030244

000be2a0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   be2a0:	b508      	push	{r3, lr}
   be2a2:	4b02      	ldr	r3, [pc, #8]	; (be2ac <spark_send_event+0xc>)
   be2a4:	681b      	ldr	r3, [r3, #0]
   be2a6:	6a1b      	ldr	r3, [r3, #32]
   be2a8:	9301      	str	r3, [sp, #4]
   be2aa:	bd08      	pop	{r3, pc}
   be2ac:	00030244 	.word	0x00030244

000be2b0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   be2b0:	b508      	push	{r3, lr}
   be2b2:	4b02      	ldr	r3, [pc, #8]	; (be2bc <spark_subscribe+0xc>)
   be2b4:	681b      	ldr	r3, [r3, #0]
   be2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be2b8:	9301      	str	r3, [sp, #4]
   be2ba:	bd08      	pop	{r3, pc}
   be2bc:	00030244 	.word	0x00030244

000be2c0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   be2c0:	b508      	push	{r3, lr}
   be2c2:	4b02      	ldr	r3, [pc, #8]	; (be2cc <spark_sync_time_pending+0xc>)
   be2c4:	681b      	ldr	r3, [r3, #0]
   be2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be2c8:	9301      	str	r3, [sp, #4]
   be2ca:	bd08      	pop	{r3, pc}
   be2cc:	00030244 	.word	0x00030244

000be2d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   be2d0:	b508      	push	{r3, lr}
   be2d2:	4b02      	ldr	r3, [pc, #8]	; (be2dc <spark_set_random_seed_from_cloud_handler+0xc>)
   be2d4:	681b      	ldr	r3, [r3, #0]
   be2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be2d8:	9301      	str	r3, [sp, #4]
   be2da:	bd08      	pop	{r3, pc}
   be2dc:	00030244 	.word	0x00030244

000be2e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   be2e0:	b508      	push	{r3, lr}
   be2e2:	4b02      	ldr	r3, [pc, #8]	; (be2ec <network_connect+0xc>)
   be2e4:	681b      	ldr	r3, [r3, #0]
   be2e6:	685b      	ldr	r3, [r3, #4]
   be2e8:	9301      	str	r3, [sp, #4]
   be2ea:	bd08      	pop	{r3, pc}
   be2ec:	00030240 	.word	0x00030240

000be2f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   be2f0:	b508      	push	{r3, lr}
   be2f2:	4b02      	ldr	r3, [pc, #8]	; (be2fc <network_connecting+0xc>)
   be2f4:	681b      	ldr	r3, [r3, #0]
   be2f6:	689b      	ldr	r3, [r3, #8]
   be2f8:	9301      	str	r3, [sp, #4]
   be2fa:	bd08      	pop	{r3, pc}
   be2fc:	00030240 	.word	0x00030240

000be300 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   be300:	b508      	push	{r3, lr}
   be302:	4b02      	ldr	r3, [pc, #8]	; (be30c <network_disconnect+0xc>)
   be304:	681b      	ldr	r3, [r3, #0]
   be306:	68db      	ldr	r3, [r3, #12]
   be308:	9301      	str	r3, [sp, #4]
   be30a:	bd08      	pop	{r3, pc}
   be30c:	00030240 	.word	0x00030240

000be310 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   be310:	b508      	push	{r3, lr}
   be312:	4b02      	ldr	r3, [pc, #8]	; (be31c <network_ready+0xc>)
   be314:	681b      	ldr	r3, [r3, #0]
   be316:	691b      	ldr	r3, [r3, #16]
   be318:	9301      	str	r3, [sp, #4]
   be31a:	bd08      	pop	{r3, pc}
   be31c:	00030240 	.word	0x00030240

000be320 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   be320:	b508      	push	{r3, lr}
   be322:	4b02      	ldr	r3, [pc, #8]	; (be32c <network_on+0xc>)
   be324:	681b      	ldr	r3, [r3, #0]
   be326:	695b      	ldr	r3, [r3, #20]
   be328:	9301      	str	r3, [sp, #4]
   be32a:	bd08      	pop	{r3, pc}
   be32c:	00030240 	.word	0x00030240

000be330 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   be330:	b508      	push	{r3, lr}
   be332:	4b02      	ldr	r3, [pc, #8]	; (be33c <network_off+0xc>)
   be334:	681b      	ldr	r3, [r3, #0]
   be336:	699b      	ldr	r3, [r3, #24]
   be338:	9301      	str	r3, [sp, #4]
   be33a:	bd08      	pop	{r3, pc}
   be33c:	00030240 	.word	0x00030240

000be340 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   be340:	b508      	push	{r3, lr}
   be342:	4b02      	ldr	r3, [pc, #8]	; (be34c <network_listen+0xc>)
   be344:	681b      	ldr	r3, [r3, #0]
   be346:	69db      	ldr	r3, [r3, #28]
   be348:	9301      	str	r3, [sp, #4]
   be34a:	bd08      	pop	{r3, pc}
   be34c:	00030240 	.word	0x00030240

000be350 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   be350:	b508      	push	{r3, lr}
   be352:	4b02      	ldr	r3, [pc, #8]	; (be35c <network_listening+0xc>)
   be354:	681b      	ldr	r3, [r3, #0]
   be356:	6a1b      	ldr	r3, [r3, #32]
   be358:	9301      	str	r3, [sp, #4]
   be35a:	bd08      	pop	{r3, pc}
   be35c:	00030240 	.word	0x00030240

000be360 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   be360:	b508      	push	{r3, lr}
   be362:	4b02      	ldr	r3, [pc, #8]	; (be36c <network_set_listen_timeout+0xc>)
   be364:	681b      	ldr	r3, [r3, #0]
   be366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be368:	9301      	str	r3, [sp, #4]
   be36a:	bd08      	pop	{r3, pc}
   be36c:	00030240 	.word	0x00030240

000be370 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   be370:	b508      	push	{r3, lr}
   be372:	4b02      	ldr	r3, [pc, #8]	; (be37c <network_get_listen_timeout+0xc>)
   be374:	681b      	ldr	r3, [r3, #0]
   be376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be378:	9301      	str	r3, [sp, #4]
   be37a:	bd08      	pop	{r3, pc}
   be37c:	00030240 	.word	0x00030240

000be380 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   be380:	b508      	push	{r3, lr}
   be382:	4b02      	ldr	r3, [pc, #8]	; (be38c <network_is_on+0xc>)
   be384:	681b      	ldr	r3, [r3, #0]
   be386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be388:	9301      	str	r3, [sp, #4]
   be38a:	bd08      	pop	{r3, pc}
   be38c:	00030240 	.word	0x00030240

000be390 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   be390:	b508      	push	{r3, lr}
   be392:	4b02      	ldr	r3, [pc, #8]	; (be39c <network_is_off+0xc>)
   be394:	681b      	ldr	r3, [r3, #0]
   be396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be398:	9301      	str	r3, [sp, #4]
   be39a:	bd08      	pop	{r3, pc}
   be39c:	00030240 	.word	0x00030240

000be3a0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   be3a0:	b508      	push	{r3, lr}
   be3a2:	4b02      	ldr	r3, [pc, #8]	; (be3ac <malloc+0xc>)
   be3a4:	681b      	ldr	r3, [r3, #0]
   be3a6:	681b      	ldr	r3, [r3, #0]
   be3a8:	9301      	str	r3, [sp, #4]
   be3aa:	bd08      	pop	{r3, pc}
   be3ac:	0003021c 	.word	0x0003021c

000be3b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   be3b0:	b508      	push	{r3, lr}
   be3b2:	4b02      	ldr	r3, [pc, #8]	; (be3bc <free+0xc>)
   be3b4:	681b      	ldr	r3, [r3, #0]
   be3b6:	685b      	ldr	r3, [r3, #4]
   be3b8:	9301      	str	r3, [sp, #4]
   be3ba:	bd08      	pop	{r3, pc}
   be3bc:	0003021c 	.word	0x0003021c

000be3c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   be3c0:	b508      	push	{r3, lr}
   be3c2:	4b02      	ldr	r3, [pc, #8]	; (be3cc <realloc+0xc>)
   be3c4:	681b      	ldr	r3, [r3, #0]
   be3c6:	689b      	ldr	r3, [r3, #8]
   be3c8:	9301      	str	r3, [sp, #4]
   be3ca:	bd08      	pop	{r3, pc}
   be3cc:	0003021c 	.word	0x0003021c

000be3d0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   be3d0:	b508      	push	{r3, lr}
   be3d2:	4b02      	ldr	r3, [pc, #8]	; (be3dc <sprintf+0xc>)
   be3d4:	681b      	ldr	r3, [r3, #0]
   be3d6:	68db      	ldr	r3, [r3, #12]
   be3d8:	9301      	str	r3, [sp, #4]
   be3da:	bd08      	pop	{r3, pc}
   be3dc:	0003021c 	.word	0x0003021c

000be3e0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   be3e0:	b508      	push	{r3, lr}
   be3e2:	4b02      	ldr	r3, [pc, #8]	; (be3ec <sscanf+0xc>)
   be3e4:	681b      	ldr	r3, [r3, #0]
   be3e6:	695b      	ldr	r3, [r3, #20]
   be3e8:	9301      	str	r3, [sp, #4]
   be3ea:	bd08      	pop	{r3, pc}
   be3ec:	0003021c 	.word	0x0003021c

000be3f0 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   be3f0:	b508      	push	{r3, lr}
   be3f2:	4b02      	ldr	r3, [pc, #8]	; (be3fc <snprintf+0xc>)
   be3f4:	681b      	ldr	r3, [r3, #0]
   be3f6:	69db      	ldr	r3, [r3, #28]
   be3f8:	9301      	str	r3, [sp, #4]
   be3fa:	bd08      	pop	{r3, pc}
   be3fc:	0003021c 	.word	0x0003021c

000be400 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   be400:	b508      	push	{r3, lr}
   be402:	4b02      	ldr	r3, [pc, #8]	; (be40c <vsnprintf+0xc>)
   be404:	681b      	ldr	r3, [r3, #0]
   be406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be408:	9301      	str	r3, [sp, #4]
   be40a:	bd08      	pop	{r3, pc}
   be40c:	0003021c 	.word	0x0003021c

000be410 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   be410:	b508      	push	{r3, lr}
   be412:	4b02      	ldr	r3, [pc, #8]	; (be41c <abort+0xc>)
   be414:	681b      	ldr	r3, [r3, #0]
   be416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be418:	9301      	str	r3, [sp, #4]
   be41a:	bd08      	pop	{r3, pc}
   be41c:	0003021c 	.word	0x0003021c

000be420 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   be420:	b508      	push	{r3, lr}
   be422:	4b02      	ldr	r3, [pc, #8]	; (be42c <_malloc_r+0xc>)
   be424:	681b      	ldr	r3, [r3, #0]
   be426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be428:	9301      	str	r3, [sp, #4]
   be42a:	bd08      	pop	{r3, pc}
   be42c:	0003021c 	.word	0x0003021c

000be430 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   be430:	b508      	push	{r3, lr}
   be432:	4b02      	ldr	r3, [pc, #8]	; (be43c <__errno+0xc>)
   be434:	681b      	ldr	r3, [r3, #0]
   be436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be438:	9301      	str	r3, [sp, #4]
   be43a:	bd08      	pop	{r3, pc}
   be43c:	0003021c 	.word	0x0003021c

000be440 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   be440:	b508      	push	{r3, lr}
   be442:	4b02      	ldr	r3, [pc, #8]	; (be44c <__assert_func+0xc>)
   be444:	681b      	ldr	r3, [r3, #0]
   be446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be448:	9301      	str	r3, [sp, #4]
   be44a:	bd08      	pop	{r3, pc}
   be44c:	0003021c 	.word	0x0003021c

000be450 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   be450:	b508      	push	{r3, lr}
   be452:	4b02      	ldr	r3, [pc, #8]	; (be45c <newlib_impure_ptr_callback+0xc>)
   be454:	681b      	ldr	r3, [r3, #0]
   be456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be458:	9301      	str	r3, [sp, #4]
   be45a:	bd08      	pop	{r3, pc}
   be45c:	0003021c 	.word	0x0003021c

000be460 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   be460:	b508      	push	{r3, lr}
   be462:	4b02      	ldr	r3, [pc, #8]	; (be46c <localtime_r+0xc>)
   be464:	681b      	ldr	r3, [r3, #0]
   be466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be468:	9301      	str	r3, [sp, #4]
   be46a:	bd08      	pop	{r3, pc}
   be46c:	0003021c 	.word	0x0003021c

000be470 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   be470:	428a      	cmp	r2, r1
{
   be472:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   be474:	d007      	beq.n	be486 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   be476:	1a44      	subs	r4, r0, r1
   be478:	9802      	ldr	r0, [sp, #8]
   be47a:	1ac0      	subs	r0, r0, r3
   be47c:	4344      	muls	r4, r0
   be47e:	1a50      	subs	r0, r2, r1
   be480:	fb94 f0f0 	sdiv	r0, r4, r0
   be484:	4418      	add	r0, r3
}
   be486:	bd10      	pop	{r4, pc}

000be488 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   be488:	2100      	movs	r1, #0
   be48a:	f7ff bead 	b.w	be1e8 <system_delay_ms>

000be48e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   be48e:	b510      	push	{r4, lr}
      if (_M_empty())
   be490:	6883      	ldr	r3, [r0, #8]
   be492:	4604      	mov	r4, r0
   be494:	b90b      	cbnz	r3, be49a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   be496:	f003 fed5 	bl	c2244 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be49a:	68c3      	ldr	r3, [r0, #12]
   be49c:	4798      	blx	r3
      if (_M_manager)
   be49e:	68a3      	ldr	r3, [r4, #8]
   be4a0:	b11b      	cbz	r3, be4aa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   be4a2:	2203      	movs	r2, #3
   be4a4:	4621      	mov	r1, r4
   be4a6:	4620      	mov	r0, r4
   be4a8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   be4aa:	4620      	mov	r0, r4
   be4ac:	2110      	movs	r1, #16
}
   be4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   be4b2:	f7f5 bdf6 	b.w	b40a2 <_ZdlPvj>

000be4b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be4b6:	4770      	bx	lr

000be4b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be4b8:	4770      	bx	lr

000be4ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be4ba:	4770      	bx	lr

000be4bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be4bc:	4770      	bx	lr
	...

000be4c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be4c0:	4b06      	ldr	r3, [pc, #24]	; (be4dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be4c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be4c4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be4c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   be4ca:	d005      	beq.n	be4d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be4cc:	4608      	mov	r0, r1
   be4ce:	f003 febd 	bl	c224c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be4d2:	2800      	cmp	r0, #0
   be4d4:	bf08      	it	eq
   be4d6:	2400      	moveq	r4, #0
      }
   be4d8:	4620      	mov	r0, r4
   be4da:	bd10      	pop	{r4, pc}
   be4dc:	000c7ee4 	.word	0x000c7ee4

000be4e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be4e0:	4b06      	ldr	r3, [pc, #24]	; (be4fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be4e2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be4e4:	b510      	push	{r4, lr}
   be4e6:	f100 040c 	add.w	r4, r0, #12
	    ||
   be4ea:	d005      	beq.n	be4f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be4ec:	4608      	mov	r0, r1
   be4ee:	f003 fead 	bl	c224c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be4f2:	2800      	cmp	r0, #0
   be4f4:	bf08      	it	eq
   be4f6:	2400      	moveq	r4, #0
      }
   be4f8:	4620      	mov	r0, r4
   be4fa:	bd10      	pop	{r4, pc}
   be4fc:	000c7ee4 	.word	0x000c7ee4

000be500 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be500:	4b06      	ldr	r3, [pc, #24]	; (be51c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be502:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be504:	b510      	push	{r4, lr}
   be506:	f100 040c 	add.w	r4, r0, #12
	    ||
   be50a:	d005      	beq.n	be518 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be50c:	4608      	mov	r0, r1
   be50e:	f003 fe9d 	bl	c224c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be512:	2800      	cmp	r0, #0
   be514:	bf08      	it	eq
   be516:	2400      	moveq	r4, #0
      }
   be518:	4620      	mov	r0, r4
   be51a:	bd10      	pop	{r4, pc}
   be51c:	000c7ee4 	.word	0x000c7ee4

000be520 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be520:	b510      	push	{r4, lr}
   be522:	2168      	movs	r1, #104	; 0x68
   be524:	4604      	mov	r4, r0
   be526:	f7f5 fdbc 	bl	b40a2 <_ZdlPvj>
   be52a:	4620      	mov	r0, r4
   be52c:	bd10      	pop	{r4, pc}

000be52e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be52e:	b510      	push	{r4, lr}
   be530:	2128      	movs	r1, #40	; 0x28
   be532:	4604      	mov	r4, r0
   be534:	f7f5 fdb5 	bl	b40a2 <_ZdlPvj>
   be538:	4620      	mov	r0, r4
   be53a:	bd10      	pop	{r4, pc}

000be53c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be53c:	b510      	push	{r4, lr}
   be53e:	2130      	movs	r1, #48	; 0x30
   be540:	4604      	mov	r4, r0
   be542:	f7f5 fdae 	bl	b40a2 <_ZdlPvj>
   be546:	4620      	mov	r0, r4
   be548:	bd10      	pop	{r4, pc}

000be54a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be54a:	2168      	movs	r1, #104	; 0x68
   be54c:	f7f5 bda9 	b.w	b40a2 <_ZdlPvj>

000be550 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be550:	2128      	movs	r1, #40	; 0x28
   be552:	f7f5 bda6 	b.w	b40a2 <_ZdlPvj>

000be556 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be556:	2130      	movs	r1, #48	; 0x30
   be558:	f7f5 bda3 	b.w	b40a2 <_ZdlPvj>

000be55c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be55c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be55e:	2500      	movs	r5, #0
   be560:	1cec      	adds	r4, r5, #3
   be562:	428c      	cmp	r4, r1
   be564:	d80d      	bhi.n	be582 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   be566:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   be568:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   be56a:	5d87      	ldrb	r7, [r0, r6]
   be56c:	4297      	cmp	r7, r2
   be56e:	d105      	bne.n	be57c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   be570:	4426      	add	r6, r4
   be572:	42b1      	cmp	r1, r6
   be574:	d305      	bcc.n	be582 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   be576:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   be578:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   be57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   be57c:	3401      	adds	r4, #1
   be57e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be580:	e7ee      	b.n	be560 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   be582:	2000      	movs	r0, #0
   be584:	e7f9      	b.n	be57a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000be588 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   be588:	4a02      	ldr	r2, [pc, #8]	; (be594 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   be58a:	4903      	ldr	r1, [pc, #12]	; (be598 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   be58c:	200a      	movs	r0, #10
   be58e:	f7ff bdf1 	b.w	be174 <panic_>
   be592:	bf00      	nop
   be594:	000bdda5 	.word	0x000bdda5
   be598:	000c7d41 	.word	0x000c7d41

000be59c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be59c:	b430      	push	{r4, r5}
   be59e:	460d      	mov	r5, r1
   be5a0:	4611      	mov	r1, r2
   be5a2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be5a4:	6803      	ldr	r3, [r0, #0]
   be5a6:	6809      	ldr	r1, [r1, #0]
   be5a8:	6828      	ldr	r0, [r5, #0]
   be5aa:	e9d3 4300 	ldrd	r4, r3, [r3]
   be5ae:	46a4      	mov	ip, r4
      }
   be5b0:	bc30      	pop	{r4, r5}
   be5b2:	4760      	bx	ip

000be5b4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be5b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be5b6:	b538      	push	{r3, r4, r5, lr}
   be5b8:	4604      	mov	r4, r0
	switch (__op)
   be5ba:	d102      	bne.n	be5c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be5bc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be5be:	6023      	str	r3, [r4, #0]
	}
   be5c0:	e003      	b.n	be5ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be5c2:	2a02      	cmp	r2, #2
   be5c4:	d003      	beq.n	be5ce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be5c6:	2a03      	cmp	r2, #3
   be5c8:	d00d      	beq.n	be5e6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be5ca:	2000      	movs	r0, #0
   be5cc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be5ce:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be5d0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be5d2:	f7f5 fd60 	bl	b4096 <_Znwj>
   be5d6:	4603      	mov	r3, r0
   be5d8:	2800      	cmp	r0, #0
   be5da:	d0f0      	beq.n	be5be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be5dc:	e895 0003 	ldmia.w	r5, {r0, r1}
   be5e0:	e883 0003 	stmia.w	r3, {r0, r1}
   be5e4:	e7eb      	b.n	be5be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be5e6:	6800      	ldr	r0, [r0, #0]
   be5e8:	2800      	cmp	r0, #0
   be5ea:	d0ee      	beq.n	be5ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be5ec:	2108      	movs	r1, #8
   be5ee:	f7f5 fd58 	bl	b40a2 <_ZdlPvj>
   be5f2:	e7ea      	b.n	be5ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be5f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be5f4:	b510      	push	{r4, lr}
   be5f6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be5f8:	3058      	adds	r0, #88	; 0x58
   be5fa:	f7f5 ff6b 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be5fe:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be606:	f003 b9b5 	b.w	c1974 <_ZN6StringD1Ev>

000be60a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   be60a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   be60c:	6843      	ldr	r3, [r0, #4]
   be60e:	3b01      	subs	r3, #1
    {
   be610:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   be612:	6043      	str	r3, [r0, #4]
   be614:	b963      	cbnz	r3, be630 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   be616:	6803      	ldr	r3, [r0, #0]
   be618:	689b      	ldr	r3, [r3, #8]
   be61a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   be61c:	68a3      	ldr	r3, [r4, #8]
   be61e:	3b01      	subs	r3, #1
   be620:	60a3      	str	r3, [r4, #8]
   be622:	b92b      	cbnz	r3, be630 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   be624:	6823      	ldr	r3, [r4, #0]
   be626:	4620      	mov	r0, r4
   be628:	68db      	ldr	r3, [r3, #12]
    }
   be62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   be62e:	4718      	bx	r3
    }
   be630:	bd10      	pop	{r4, pc}

000be632 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   be632:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be636:	b2da      	uxtb	r2, r3
   be638:	2a09      	cmp	r2, #9
   be63a:	d801      	bhi.n	be640 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   be63c:	4618      	mov	r0, r3
   be63e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   be640:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be644:	2b05      	cmp	r3, #5
   be646:	d801      	bhi.n	be64c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   be648:	3857      	subs	r0, #87	; 0x57
   be64a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   be64c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be650:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   be652:	bf94      	ite	ls
   be654:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   be656:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   be65a:	4770      	bx	lr

000be65c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   be65c:	b510      	push	{r4, lr}
            locked_(false) {
   be65e:	2300      	movs	r3, #0
   be660:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be662:	4b04      	ldr	r3, [pc, #16]	; (be674 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   be664:	4604      	mov	r4, r0
   be666:	6818      	ldr	r0, [r3, #0]
   be668:	f7ff fb7c 	bl	bdd64 <os_mutex_recursive_lock>
        locked_ = true;
   be66c:	2301      	movs	r3, #1
   be66e:	7023      	strb	r3, [r4, #0]
    }
   be670:	4620      	mov	r0, r4
   be672:	bd10      	pop	{r4, pc}
   be674:	2003e624 	.word	0x2003e624

000be678 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   be678:	b510      	push	{r4, lr}
        if (locked_) {
   be67a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   be67c:	4604      	mov	r4, r0
        if (locked_) {
   be67e:	b11b      	cbz	r3, be688 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be680:	4b02      	ldr	r3, [pc, #8]	; (be68c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   be682:	6818      	ldr	r0, [r3, #0]
   be684:	f7ff fb76 	bl	bdd74 <os_mutex_recursive_unlock>
    }
   be688:	4620      	mov	r0, r4
   be68a:	bd10      	pop	{r4, pc}
   be68c:	2003e624 	.word	0x2003e624

000be690 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   be690:	b082      	sub	sp, #8
   be692:	4603      	mov	r3, r0
    address_ = addr;
   be694:	6808      	ldr	r0, [r1, #0]
   be696:	6849      	ldr	r1, [r1, #4]
   be698:	466a      	mov	r2, sp
   be69a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   be69c:	466a      	mov	r2, sp
   be69e:	ca03      	ldmia	r2!, {r0, r1}
   be6a0:	6018      	str	r0, [r3, #0]
}
   be6a2:	4618      	mov	r0, r3
    address_ = addr.address_;
   be6a4:	6059      	str	r1, [r3, #4]
}
   be6a6:	b002      	add	sp, #8
   be6a8:	4770      	bx	lr

000be6aa <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   be6aa:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   be6ac:	7982      	ldrb	r2, [r0, #6]
   be6ae:	798b      	ldrb	r3, [r1, #6]
   be6b0:	429a      	cmp	r2, r3
   be6b2:	d106      	bne.n	be6c2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   be6b4:	2206      	movs	r2, #6
   be6b6:	f005 ffb3 	bl	c4620 <memcmp>
   be6ba:	fab0 f080 	clz	r0, r0
   be6be:	0940      	lsrs	r0, r0, #5
}
   be6c0:	bd08      	pop	{r3, pc}
    return false;
   be6c2:	2000      	movs	r0, #0
   be6c4:	e7fc      	b.n	be6c0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000be6c6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   be6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   be6ca:	6003      	str	r3, [r0, #0]
   be6cc:	8083      	strh	r3, [r0, #4]
}
   be6ce:	2000      	movs	r0, #0
   be6d0:	4770      	bx	lr

000be6d2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   be6d2:	b508      	push	{r3, lr}
   be6d4:	4602      	mov	r2, r0
        : address_{} {
   be6d6:	2100      	movs	r1, #0
   be6d8:	6001      	str	r1, [r0, #0]
   be6da:	6041      	str	r1, [r0, #4]
    clear();
   be6dc:	f7ff fff3 	bl	be6c6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   be6e0:	7191      	strb	r1, [r2, #6]
}
   be6e2:	4610      	mov	r0, r2
   be6e4:	bd08      	pop	{r3, pc}
	...

000be6e8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   be6e8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   be6ea:	2301      	movs	r3, #1
   be6ec:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be6ee:	4b05      	ldr	r3, [pc, #20]	; (be704 <_ZN8particle7BleUuidC1Ev+0x1c>)
   be6f0:	4602      	mov	r2, r0
   be6f2:	f103 0110 	add.w	r1, r3, #16
   be6f6:	f853 4b04 	ldr.w	r4, [r3], #4
   be6fa:	f842 4b04 	str.w	r4, [r2], #4
   be6fe:	428b      	cmp	r3, r1
   be700:	d1f9      	bne.n	be6f6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   be702:	bd10      	pop	{r4, pc}
   be704:	000c7ef2 	.word	0x000c7ef2

000be708 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be708:	b510      	push	{r4, lr}
    if (uuid128) {
   be70a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be70c:	4604      	mov	r4, r0
    if (uuid128) {
   be70e:	b1b1      	cbz	r1, be73e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   be710:	2a01      	cmp	r2, #1
   be712:	f101 0210 	add.w	r2, r1, #16
   be716:	d10a      	bne.n	be72e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   be718:	4601      	mov	r1, r0
   be71a:	f853 0b04 	ldr.w	r0, [r3], #4
   be71e:	f841 0b04 	str.w	r0, [r1], #4
   be722:	4293      	cmp	r3, r2
   be724:	d1f9      	bne.n	be71a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   be726:	2301      	movs	r3, #1
   be728:	6123      	str	r3, [r4, #16]
}
   be72a:	4620      	mov	r0, r4
   be72c:	bd10      	pop	{r4, pc}
   be72e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   be730:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   be734:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   be738:	429a      	cmp	r2, r3
   be73a:	d1f9      	bne.n	be730 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   be73c:	e7f3      	b.n	be726 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   be73e:	2210      	movs	r2, #16
   be740:	f005 ffa6 	bl	c4690 <memset>
   be744:	e7f1      	b.n	be72a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000be746 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   be746:	b538      	push	{r3, r4, r5, lr}
   be748:	4604      	mov	r4, r0
   be74a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   be74c:	461a      	mov	r2, r3
   be74e:	f7ff ffdb 	bl	be708 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   be752:	81a5      	strh	r5, [r4, #12]
}
   be754:	4620      	mov	r0, r4
   be756:	bd38      	pop	{r3, r4, r5, pc}

000be758 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   be758:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   be75a:	6902      	ldr	r2, [r0, #16]
   be75c:	b922      	cbnz	r2, be768 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   be75e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be760:	3800      	subs	r0, #0
   be762:	bf18      	it	ne
   be764:	2001      	movne	r0, #1
}
   be766:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be768:	4902      	ldr	r1, [pc, #8]	; (be774 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   be76a:	2210      	movs	r2, #16
   be76c:	f005 ff58 	bl	c4620 <memcmp>
   be770:	e7f6      	b.n	be760 <_ZNK8particle7BleUuid7isValidEv+0x8>
   be772:	bf00      	nop
   be774:	000c7f12 	.word	0x000c7f12

000be778 <_ZNK8particle7BleUuid4typeEv>:
}
   be778:	6900      	ldr	r0, [r0, #16]
   be77a:	4770      	bx	lr

000be77c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   be77c:	b538      	push	{r3, r4, r5, lr}
   be77e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   be780:	2214      	movs	r2, #20
   be782:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   be784:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   be786:	f005 ff83 	bl	c4690 <memset>
    if (type_ == BleUuidType::SHORT) {
   be78a:	6923      	ldr	r3, [r4, #16]
   be78c:	b91b      	cbnz	r3, be796 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   be78e:	89a3      	ldrh	r3, [r4, #12]
   be790:	802b      	strh	r3, [r5, #0]
}
   be792:	4628      	mov	r0, r5
   be794:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   be796:	2301      	movs	r3, #1
   be798:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   be79a:	4621      	mov	r1, r4
   be79c:	462b      	mov	r3, r5
   be79e:	f104 0210 	add.w	r2, r4, #16
   be7a2:	f851 0b04 	ldr.w	r0, [r1], #4
   be7a6:	f843 0b04 	str.w	r0, [r3], #4
   be7aa:	4291      	cmp	r1, r2
   be7ac:	d1f9      	bne.n	be7a2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   be7ae:	e7f0      	b.n	be792 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000be7b0 <_ZNK8particle7BleUuid7shortedEv>:
}
   be7b0:	8980      	ldrh	r0, [r0, #12]
   be7b2:	4770      	bx	lr

000be7b4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   be7b4:	4770      	bx	lr

000be7b6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   be7b6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be7b8:	6902      	ldr	r2, [r0, #16]
   be7ba:	690b      	ldr	r3, [r1, #16]
   be7bc:	429a      	cmp	r2, r3
   be7be:	d106      	bne.n	be7ce <_ZNK8particle7BleUuideqERKS0_+0x18>
   be7c0:	2210      	movs	r2, #16
   be7c2:	f005 ff2d 	bl	c4620 <memcmp>
   be7c6:	fab0 f080 	clz	r0, r0
   be7ca:	0940      	lsrs	r0, r0, #5
}
   be7cc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be7ce:	2000      	movs	r0, #0
   be7d0:	e7fc      	b.n	be7cc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000be7d4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   be7d4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   be7d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   be7da:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be7dc:	4b34      	ldr	r3, [pc, #208]	; (be8b0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   be7de:	460c      	mov	r4, r1
   be7e0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be7e2:	4602      	mov	r2, r0
   be7e4:	f103 0110 	add.w	r1, r3, #16
   be7e8:	f853 0b04 	ldr.w	r0, [r3], #4
   be7ec:	f842 0b04 	str.w	r0, [r2], #4
   be7f0:	428b      	cmp	r3, r1
   be7f2:	d1f9      	bne.n	be7e8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   be7f4:	b344      	cbz	r4, be848 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   be7f6:	2124      	movs	r1, #36	; 0x24
   be7f8:	4620      	mov	r0, r4
   be7fa:	f006 f816 	bl	c482a <strnlen>
   be7fe:	2804      	cmp	r0, #4
   be800:	f04f 0500 	mov.w	r5, #0
   be804:	d123      	bne.n	be84e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   be806:	f8ad 5004 	strh.w	r5, [sp, #4]
   be80a:	af01      	add	r7, sp, #4
   be80c:	1ca5      	adds	r5, r4, #2
   be80e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   be810:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   be814:	f7ff ff0d 	bl	be632 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   be818:	f1b0 0800 	subs.w	r8, r0, #0
   be81c:	db12      	blt.n	be844 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   be81e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   be822:	f7ff ff06 	bl	be632 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   be826:	2800      	cmp	r0, #0
   be828:	db0c      	blt.n	be844 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   be82a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be82c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   be830:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be832:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   be836:	d1eb      	bne.n	be810 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   be838:	f89d 3005 	ldrb.w	r3, [sp, #5]
   be83c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   be83e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be842:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   be844:	2300      	movs	r3, #0
   be846:	6133      	str	r3, [r6, #16]
}
   be848:	b002      	add	sp, #8
   be84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   be84e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be852:	2124      	movs	r1, #36	; 0x24
   be854:	4620      	mov	r0, r4
   be856:	f005 ffe8 	bl	c482a <strnlen>
   be85a:	42a8      	cmp	r0, r5
   be85c:	d807      	bhi.n	be86e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   be85e:	4642      	mov	r2, r8
   be860:	2100      	movs	r1, #0
   be862:	4630      	mov	r0, r6
}
   be864:	b002      	add	sp, #8
   be866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   be86a:	f005 bf11 	b.w	c4690 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be86e:	f1b8 0f00 	cmp.w	r8, #0
   be872:	d0e9      	beq.n	be848 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   be874:	5d60      	ldrb	r0, [r4, r5]
   be876:	f7ff fedc 	bl	be632 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   be87a:	0603      	lsls	r3, r0, #24
   be87c:	d415      	bmi.n	be8aa <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   be87e:	0100      	lsls	r0, r0, #4
   be880:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be884:	b2c7      	uxtb	r7, r0
   be886:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   be88a:	2124      	movs	r1, #36	; 0x24
   be88c:	4620      	mov	r0, r4
   be88e:	f005 ffcc 	bl	c482a <strnlen>
   be892:	3501      	adds	r5, #1
   be894:	42a8      	cmp	r0, r5
   be896:	d908      	bls.n	be8aa <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   be898:	5d60      	ldrb	r0, [r4, r5]
   be89a:	f7ff feca 	bl	be632 <_ZN8particle11hexToNibbleEc>
   be89e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   be8a0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   be8a2:	bfa4      	itt	ge
   be8a4:	4338      	orrge	r0, r7
   be8a6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be8aa:	3501      	adds	r5, #1
   be8ac:	e7d1      	b.n	be852 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   be8ae:	bf00      	nop
   be8b0:	000c7ef2 	.word	0x000c7ef2

000be8b4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   be8b4:	b513      	push	{r0, r1, r4, lr}
   be8b6:	4604      	mov	r4, r0
   be8b8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   be8ba:	f7ff ff15 	bl	be6e8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   be8be:	4620      	mov	r0, r4
   be8c0:	9901      	ldr	r1, [sp, #4]
   be8c2:	f7ff ff87 	bl	be7d4 <_ZN8particle7BleUuid9constructEPKc>
}
   be8c6:	4620      	mov	r0, r4
   be8c8:	b002      	add	sp, #8
   be8ca:	bd10      	pop	{r4, pc}

000be8cc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   be8cc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   be8ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be8d2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   be8d4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   be8d6:	8043      	strh	r3, [r0, #2]
   be8d8:	220e      	movs	r2, #14
   be8da:	4629      	mov	r1, r5
   be8dc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   be8de:	7105      	strb	r5, [r0, #4]
   be8e0:	3006      	adds	r0, #6
   be8e2:	f005 fed5 	bl	c4690 <memset>
   be8e6:	f104 0014 	add.w	r0, r4, #20
   be8ea:	f7ff fefd 	bl	be6e8 <_ZN8particle7BleUuidC1Ev>
   be8ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   be8f2:	f7ff fef9 	bl	be6e8 <_ZN8particle7BleUuidC1Ev>
   be8f6:	4904      	ldr	r1, [pc, #16]	; (be908 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   be8f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be8fc:	f003 f885 	bl	c1a0a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   be900:	6565      	str	r5, [r4, #84]	; 0x54
    }
   be902:	4620      	mov	r0, r4
   be904:	bd38      	pop	{r3, r4, r5, pc}
   be906:	bf00      	nop
   be908:	000c8057 	.word	0x000c8057

000be90c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   be90c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   be90e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   be912:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   be916:	4293      	cmp	r3, r2
   be918:	4618      	mov	r0, r3
   be91a:	d006      	beq.n	be92a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   be91c:	6804      	ldr	r4, [r0, #0]
   be91e:	8824      	ldrh	r4, [r4, #0]
   be920:	428c      	cmp	r4, r1
   be922:	f103 0308 	add.w	r3, r3, #8
   be926:	d1f6      	bne.n	be916 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   be928:	bd10      	pop	{r4, pc}
        return nullptr;
   be92a:	2000      	movs	r0, #0
   be92c:	e7fc      	b.n	be928 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000be930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   be930:	b5f0      	push	{r4, r5, r6, r7, lr}
   be932:	4606      	mov	r6, r0
   be934:	b085      	sub	sp, #20
   be936:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   be938:	460d      	mov	r5, r1
   be93a:	2900      	cmp	r1, #0
   be93c:	d050      	beq.n	be9e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   be93e:	2a00      	cmp	r2, #0
   be940:	d04e      	beq.n	be9e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   be942:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   be944:	7823      	ldrb	r3, [r4, #0]
   be946:	2af4      	cmp	r2, #244	; 0xf4
   be948:	bf28      	it	cs
   be94a:	22f4      	movcs	r2, #244	; 0xf4
   be94c:	b343      	cbz	r3, be9a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   be94e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   be950:	0798      	lsls	r0, r3, #30
   be952:	d509      	bpl.n	be968 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   be954:	89a0      	ldrh	r0, [r4, #12]
   be956:	9203      	str	r2, [sp, #12]
   be958:	2300      	movs	r3, #0
   be95a:	f7ff f97d 	bl	bdc58 <hal_ble_gatt_server_set_characteristic_value>
   be95e:	2800      	cmp	r0, #0
   be960:	9a03      	ldr	r2, [sp, #12]
   be962:	da03      	bge.n	be96c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   be964:	b005      	add	sp, #20
   be966:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   be968:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be96c:	6834      	ldr	r4, [r6, #0]
   be96e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   be970:	06d9      	lsls	r1, r3, #27
   be972:	d509      	bpl.n	be988 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   be974:	2f01      	cmp	r7, #1
   be976:	d007      	beq.n	be988 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be978:	89a0      	ldrh	r0, [r4, #12]
   be97a:	2300      	movs	r3, #0
   be97c:	4629      	mov	r1, r5
}
   be97e:	b005      	add	sp, #20
   be980:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be984:	f7ff b99a 	b.w	bdcbc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   be988:	069b      	lsls	r3, r3, #26
   be98a:	d5eb      	bpl.n	be964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be98c:	2f02      	cmp	r7, #2
   be98e:	d0e9      	beq.n	be964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be990:	89a0      	ldrh	r0, [r4, #12]
   be992:	2300      	movs	r3, #0
   be994:	4629      	mov	r1, r5
}
   be996:	b005      	add	sp, #20
   be998:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be99c:	f7ff b998 	b.w	bdcd0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   be9a0:	8860      	ldrh	r0, [r4, #2]
   be9a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be9a6:	4288      	cmp	r0, r1
   be9a8:	d01c      	beq.n	be9e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   be9aa:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   be9ac:	074e      	lsls	r6, r1, #29
   be9ae:	d501      	bpl.n	be9b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   be9b0:	2f01      	cmp	r7, #1
   be9b2:	d104      	bne.n	be9be <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be9b4:	070b      	lsls	r3, r1, #28
   be9b6:	d409      	bmi.n	be9cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   be9b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be9bc:	e7d2      	b.n	be964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be9be:	89a1      	ldrh	r1, [r4, #12]
   be9c0:	9300      	str	r3, [sp, #0]
   be9c2:	4613      	mov	r3, r2
   be9c4:	462a      	mov	r2, r5
   be9c6:	f7ff f95b 	bl	bdc80 <hal_ble_gatt_client_write_without_response>
   be9ca:	e7cb      	b.n	be964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be9cc:	2f02      	cmp	r7, #2
   be9ce:	d0f3      	beq.n	be9b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be9d0:	2300      	movs	r3, #0
   be9d2:	89a1      	ldrh	r1, [r4, #12]
   be9d4:	9300      	str	r3, [sp, #0]
   be9d6:	4613      	mov	r3, r2
   be9d8:	462a      	mov	r2, r5
   be9da:	f7ff f947 	bl	bdc6c <hal_ble_gatt_client_write_with_response>
   be9de:	e7c1      	b.n	be964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   be9e0:	4802      	ldr	r0, [pc, #8]	; (be9ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   be9e2:	e7bf      	b.n	be964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   be9e4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   be9e8:	e7bc      	b.n	be964 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be9ea:	bf00      	nop
   be9ec:	fffffef2 	.word	0xfffffef2

000be9f0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   be9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be9f4:	2600      	movs	r6, #0
   be9f6:	6006      	str	r6, [r0, #0]
   be9f8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be9fa:	2028      	movs	r0, #40	; 0x28
   be9fc:	460c      	mov	r4, r1
   be9fe:	f7f5 fb4a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bea02:	1e05      	subs	r5, r0, #0
   bea04:	f105 080c 	add.w	r8, r5, #12
   bea08:	d00f      	beq.n	bea2a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bea0a:	2301      	movs	r3, #1
   bea0c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bea10:	4b08      	ldr	r3, [pc, #32]	; (bea34 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bea12:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bea14:	4640      	mov	r0, r8
   bea16:	f7ff fe67 	bl	be6e8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bea1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bea1c:	622e      	str	r6, [r5, #32]
   bea1e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bea22:	4646      	mov	r6, r8
   bea24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bea26:	6823      	ldr	r3, [r4, #0]
   bea28:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bea2a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bea2e:	4638      	mov	r0, r7
   bea30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bea34:	000c7eb4 	.word	0x000c7eb4

000bea38 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bea38:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bea3a:	2500      	movs	r5, #0
   bea3c:	6005      	str	r5, [r0, #0]
   bea3e:	4606      	mov	r6, r0
   bea40:	2030      	movs	r0, #48	; 0x30
   bea42:	f7f5 fb28 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bea46:	4604      	mov	r4, r0
   bea48:	b188      	cbz	r0, bea6e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bea4a:	2301      	movs	r3, #1
   bea4c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bea50:	4b09      	ldr	r3, [pc, #36]	; (bea78 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bea52:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bea54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bea58:	8183      	strh	r3, [r0, #12]
   bea5a:	300e      	adds	r0, #14
   bea5c:	f7ff fe39 	bl	be6d2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bea60:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bea64:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bea68:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bea6c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bea6e:	6074      	str	r4, [r6, #4]
   bea70:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bea72:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bea74:	4630      	mov	r0, r6
   bea76:	bd70      	pop	{r4, r5, r6, pc}
   bea78:	000c7ed0 	.word	0x000c7ed0

000bea7c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bea7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bea7e:	460d      	mov	r5, r1
   bea80:	4604      	mov	r4, r0
    WiringBleLock lk;
   bea82:	a801      	add	r0, sp, #4
   bea84:	f7ff fdea 	bl	be65c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bea88:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bea8a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bea8e:	6023      	str	r3, [r4, #0]
   bea90:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bea94:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bea96:	a801      	add	r0, sp, #4
   bea98:	f7ff fdee 	bl	be678 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bea9c:	4620      	mov	r0, r4
   bea9e:	b003      	add	sp, #12
   beaa0:	bd30      	pop	{r4, r5, pc}

000beaa2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   beaa2:	b530      	push	{r4, r5, lr}
   beaa4:	4605      	mov	r5, r0
   beaa6:	b087      	sub	sp, #28
   beaa8:	460c      	mov	r4, r1
    WiringBleLock lk;
   beaaa:	a801      	add	r0, sp, #4
   beaac:	f7ff fdd6 	bl	be65c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   beab0:	682a      	ldr	r2, [r5, #0]
   beab2:	6823      	ldr	r3, [r4, #0]
   beab4:	8812      	ldrh	r2, [r2, #0]
   beab6:	881b      	ldrh	r3, [r3, #0]
   beab8:	429a      	cmp	r2, r3
   beaba:	d10d      	bne.n	bead8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   beabc:	4629      	mov	r1, r5
   beabe:	a802      	add	r0, sp, #8
   beac0:	f7ff ffdc 	bl	bea7c <_ZNK8particle13BlePeerDevice7addressEv>
   beac4:	4621      	mov	r1, r4
   beac6:	a804      	add	r0, sp, #16
   beac8:	f7ff ffd8 	bl	bea7c <_ZNK8particle13BlePeerDevice7addressEv>
   beacc:	a904      	add	r1, sp, #16
   beace:	a802      	add	r0, sp, #8
   bead0:	f7ff fdeb 	bl	be6aa <_ZNK8particle10BleAddresseqERKS0_>
   bead4:	4604      	mov	r4, r0
   bead6:	b900      	cbnz	r0, beada <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bead8:	2400      	movs	r4, #0
    WiringBleLock lk;
   beada:	a801      	add	r0, sp, #4
   beadc:	f7ff fdcc 	bl	be678 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   beae0:	4620      	mov	r0, r4
   beae2:	b007      	add	sp, #28
   beae4:	bd30      	pop	{r4, r5, pc}
	...

000beae8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   beae8:	b510      	push	{r4, lr}
   beaea:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   beaec:	2064      	movs	r0, #100	; 0x64
   beaee:	f7f5 fad2 	bl	b4096 <_Znwj>
   beaf2:	b168      	cbz	r0, beb10 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   beaf4:	2300      	movs	r3, #0
   beaf6:	e9c0 3300 	strd	r3, r3, [r0]
   beafa:	e9c0 3302 	strd	r3, r3, [r0, #8]
   beafe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   beb02:	e9c0 3306 	strd	r3, r3, [r0, #24]
   beb06:	6203      	str	r3, [r0, #32]
   beb08:	62c3      	str	r3, [r0, #44]	; 0x2c
   beb0a:	63c3      	str	r3, [r0, #60]	; 0x3c
   beb0c:	64c3      	str	r3, [r0, #76]	; 0x4c
   beb0e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   beb10:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   beb12:	b920      	cbnz	r0, beb1e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   beb14:	4a0a      	ldr	r2, [pc, #40]	; (beb40 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   beb16:	490b      	ldr	r1, [pc, #44]	; (beb44 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   beb18:	200a      	movs	r0, #10
   beb1a:	f7ff fb2b 	bl	be174 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   beb1e:	2000      	movs	r0, #0
   beb20:	f7ff f85e 	bl	bdbe0 <hal_ble_stack_init>
   beb24:	b120      	cbz	r0, beb30 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   beb26:	4a06      	ldr	r2, [pc, #24]	; (beb40 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   beb28:	4907      	ldr	r1, [pc, #28]	; (beb48 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   beb2a:	200a      	movs	r0, #10
   beb2c:	f7ff fb22 	bl	be174 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   beb30:	6821      	ldr	r1, [r4, #0]
   beb32:	4806      	ldr	r0, [pc, #24]	; (beb4c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   beb34:	2200      	movs	r2, #0
   beb36:	f7ff f8b7 	bl	bdca8 <hal_ble_set_callback_on_periph_link_events>
}
   beb3a:	4620      	mov	r0, r4
   beb3c:	bd10      	pop	{r4, pc}
   beb3e:	bf00      	nop
   beb40:	000bdda5 	.word	0x000bdda5
   beb44:	000c7d41 	.word	0x000c7d41
   beb48:	000c7d7f 	.word	0x000c7d7f
   beb4c:	000bf11d 	.word	0x000bf11d

000beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   beb50:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   beb52:	4c0a      	ldr	r4, [pc, #40]	; (beb7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   beb54:	7823      	ldrb	r3, [r4, #0]
   beb56:	f3bf 8f5b 	dmb	ish
   beb5a:	07db      	lsls	r3, r3, #31
   beb5c:	d40c      	bmi.n	beb78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   beb5e:	4620      	mov	r0, r4
   beb60:	f7f5 faae 	bl	b40c0 <__cxa_guard_acquire>
   beb64:	b140      	cbz	r0, beb78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   beb66:	4806      	ldr	r0, [pc, #24]	; (beb80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   beb68:	f7ff ffbe 	bl	beae8 <_ZN8particle14BleLocalDeviceC1Ev>
   beb6c:	4620      	mov	r0, r4
   beb6e:	f7f5 faac 	bl	b40ca <__cxa_guard_release>
   beb72:	4804      	ldr	r0, [pc, #16]	; (beb84 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   beb74:	f005 fd3e 	bl	c45f4 <atexit>
    return instance;
}
   beb78:	4801      	ldr	r0, [pc, #4]	; (beb80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   beb7a:	bd10      	pop	{r4, pc}
   beb7c:	2003e61c 	.word	0x2003e61c
   beb80:	2003e628 	.word	0x2003e628
   beb84:	000bedd5 	.word	0x000bedd5

000beb88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   beb88:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   beb8a:	6803      	ldr	r3, [r0, #0]
   beb8c:	3b09      	subs	r3, #9
   beb8e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   beb90:	b08d      	sub	sp, #52	; 0x34
   beb92:	4604      	mov	r4, r0
   beb94:	460d      	mov	r5, r1
    switch (event->type) {
   beb96:	d811      	bhi.n	bebbc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   beb98:	f7ff ffda 	bl	beb50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   beb9c:	88a1      	ldrh	r1, [r4, #4]
   beb9e:	6800      	ldr	r0, [r0, #0]
   beba0:	f7ff feb4 	bl	be90c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   beba4:	4603      	mov	r3, r0
   beba6:	b958      	cbnz	r0, bebc0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   beba8:	2220      	movs	r2, #32
   bebaa:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bebae:	4a0b      	ldr	r2, [pc, #44]	; (bebdc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bebb0:	9200      	str	r2, [sp, #0]
   bebb2:	490b      	ldr	r1, [pc, #44]	; (bebe0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bebb4:	aa04      	add	r2, sp, #16
   bebb6:	2032      	movs	r0, #50	; 0x32
   bebb8:	f7ff fae4 	bl	be184 <log_message>
}
   bebbc:	b00d      	add	sp, #52	; 0x34
   bebbe:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bebc0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bebc2:	2a00      	cmp	r2, #0
   bebc4:	d0fa      	beq.n	bebbc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bebc6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bebca:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bebce:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bebd2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bebd4:	aa04      	add	r2, sp, #16
   bebd6:	a903      	add	r1, sp, #12
   bebd8:	47a0      	blx	r4
}
   bebda:	e7ef      	b.n	bebbc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bebdc:	000c7dc1 	.word	0x000c7dc1
   bebe0:	000c7d58 	.word	0x000c7d58

000bebe4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bebe4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bebe6:	2000      	movs	r0, #0
   bebe8:	f7fe fffa 	bl	bdbe0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bebec:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bebf0:	bd08      	pop	{r3, pc}

000bebf2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bebf2:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bebf4:	2100      	movs	r1, #0
   bebf6:	f7fe bffb 	b.w	bdbf0 <hal_ble_gap_set_tx_power>

000bebfa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bebfa:	b919      	cbnz	r1, bec04 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bebfc:	460a      	mov	r2, r1
   bebfe:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bec00:	f7fe bffe 	b.w	bdc00 <hal_ble_gap_set_advertising_data>
   bec04:	e9d1 0100 	ldrd	r0, r1, [r1]
   bec08:	2200      	movs	r2, #0
   bec0a:	e7f9      	b.n	bec00 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bec0c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bec0c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bec0e:	69d8      	ldr	r0, [r3, #28]
}
   bec10:	2800      	cmp	r0, #0
   bec12:	bfd4      	ite	le
   bec14:	2000      	movle	r0, #0
   bec16:	2001      	movgt	r0, #1
   bec18:	4770      	bx	lr

000bec1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bec1a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bec1c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bec20:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bec22:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bec26:	42ae      	cmp	r6, r5
   bec28:	d004      	beq.n	bec34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bec2a:	4628      	mov	r0, r5
   bec2c:	f002 fea2 	bl	c1974 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bec30:	3510      	adds	r5, #16
   bec32:	e7f8      	b.n	bec26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bec34:	6820      	ldr	r0, [r4, #0]
   bec36:	f7ff fbbb 	bl	be3b0 <free>
}
   bec3a:	4620      	mov	r0, r4
   bec3c:	bd70      	pop	{r4, r5, r6, pc}

000bec3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bec3e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bec40:	1e14      	subs	r4, r2, #0
   bec42:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bec44:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bec46:	db02      	blt.n	bec4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bec48:	1862      	adds	r2, r4, r1
   bec4a:	429a      	cmp	r2, r3
   bec4c:	dd00      	ble.n	bec50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bec4e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bec50:	682a      	ldr	r2, [r5, #0]
   bec52:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bec54:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bec56:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bec58:	1a52      	subs	r2, r2, r1
   bec5a:	f005 fcff 	bl	c465c <memmove>
    size_ -= n;
   bec5e:	686a      	ldr	r2, [r5, #4]
   bec60:	1b12      	subs	r2, r2, r4
   bec62:	606a      	str	r2, [r5, #4]
}
   bec64:	bd38      	pop	{r3, r4, r5, pc}

000bec66 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bec66:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bec68:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bec6a:	4604      	mov	r4, r0
   bec6c:	460d      	mov	r5, r1
   bec6e:	ab01      	add	r3, sp, #4
   bec70:	e9d0 0100 	ldrd	r0, r1, [r0]
   bec74:	f7ff fc72 	bl	be55c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bec78:	4602      	mov	r2, r0
   bec7a:	b138      	cbz	r0, bec8c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bec7c:	9901      	ldr	r1, [sp, #4]
   bec7e:	4620      	mov	r0, r4
   bec80:	f7ff ffdd 	bl	bec3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bec84:	4629      	mov	r1, r5
   bec86:	4620      	mov	r0, r4
   bec88:	f7ff ffed 	bl	bec66 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bec8c:	b003      	add	sp, #12
   bec8e:	bd30      	pop	{r4, r5, pc}

000bec90 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bec90:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bec92:	460c      	mov	r4, r1
   bec94:	b929      	cbnz	r1, beca2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bec96:	460a      	mov	r2, r1
   bec98:	4608      	mov	r0, r1
}
   bec9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bec9e:	f7fe bfb7 	b.w	bdc10 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   beca2:	2101      	movs	r1, #1
   beca4:	4620      	mov	r0, r4
   beca6:	f7ff ffde 	bl	bec66 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   becaa:	e9d4 0100 	ldrd	r0, r1, [r4]
   becae:	2200      	movs	r2, #0
   becb0:	e7f3      	b.n	bec9a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000becb2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   becb2:	b538      	push	{r3, r4, r5, lr}
   becb4:	4604      	mov	r4, r0
   becb6:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   becb8:	f7ff ff9f 	bl	bebfa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   becbc:	2800      	cmp	r0, #0
   becbe:	db0a      	blt.n	becd6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   becc0:	4629      	mov	r1, r5
   becc2:	4620      	mov	r0, r4
   becc4:	f7ff ffe4 	bl	bec90 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   becc8:	2800      	cmp	r0, #0
   becca:	db04      	blt.n	becd6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   beccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   becd0:	2000      	movs	r0, #0
   becd2:	f7fe bfa5 	b.w	bdc20 <hal_ble_gap_start_advertising>
}
   becd6:	bd38      	pop	{r3, r4, r5, pc}

000becd8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   becd8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   becda:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   becdc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   becde:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bece0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bece2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bece4:	f7f5 f9d7 	bl	b4096 <_Znwj>
   bece8:	b118      	cbz	r0, becf2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   becea:	682b      	ldr	r3, [r5, #0]
   becec:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   becee:	686b      	ldr	r3, [r5, #4]
   becf0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   becf2:	4b03      	ldr	r3, [pc, #12]	; (bed00 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   becf4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   becf6:	4b03      	ldr	r3, [pc, #12]	; (bed04 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   becf8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   becfa:	60a3      	str	r3, [r4, #8]
      }
   becfc:	4620      	mov	r0, r4
   becfe:	bd38      	pop	{r3, r4, r5, pc}
   bed00:	000be59d 	.word	0x000be59d
   bed04:	000be5b5 	.word	0x000be5b5

000bed08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bed08:	680b      	ldr	r3, [r1, #0]
   bed0a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bed0c:	b113      	cbz	r3, bed14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bed0e:	685a      	ldr	r2, [r3, #4]
   bed10:	3201      	adds	r2, #1
   bed12:	605a      	str	r2, [r3, #4]
      }
   bed14:	4770      	bx	lr

000bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bed16:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bed18:	f851 3b04 	ldr.w	r3, [r1], #4
   bed1c:	4604      	mov	r4, r0
   bed1e:	f840 3b04 	str.w	r3, [r0], #4
   bed22:	f7ff fff1 	bl	bed08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bed26:	6823      	ldr	r3, [r4, #0]
   bed28:	b90b      	cbnz	r3, bed2e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bed2a:	f7ff fc2d 	bl	be588 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bed2e:	4620      	mov	r0, r4
   bed30:	bd10      	pop	{r4, pc}

000bed32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bed32:	b510      	push	{r4, lr}
   bed34:	f851 3b04 	ldr.w	r3, [r1], #4
   bed38:	4604      	mov	r4, r0
   bed3a:	f840 3b04 	str.w	r3, [r0], #4
   bed3e:	f7ff ffe3 	bl	bed08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bed42:	4620      	mov	r0, r4
   bed44:	bd10      	pop	{r4, pc}

000bed46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bed46:	b510      	push	{r4, lr}
   bed48:	f851 3b04 	ldr.w	r3, [r1], #4
   bed4c:	4604      	mov	r4, r0
   bed4e:	f840 3b04 	str.w	r3, [r0], #4
   bed52:	f7ff ffd9 	bl	bed08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bed56:	4620      	mov	r0, r4
   bed58:	bd10      	pop	{r4, pc}

000bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bed5a:	b510      	push	{r4, lr}
   bed5c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bed5e:	6800      	ldr	r0, [r0, #0]
   bed60:	b108      	cbz	r0, bed66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bed62:	f7ff fc52 	bl	be60a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bed66:	4620      	mov	r0, r4
   bed68:	bd10      	pop	{r4, pc}

000bed6a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bed6a:	b510      	push	{r4, lr}
   bed6c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bed6e:	3004      	adds	r0, #4
   bed70:	f7ff fff3 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bed74:	4620      	mov	r0, r4
   bed76:	bd10      	pop	{r4, pc}

000bed78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bed78:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bed7a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bed7e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bed80:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bed84:	42ae      	cmp	r6, r5
   bed86:	d004      	beq.n	bed92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bed88:	1d28      	adds	r0, r5, #4
   bed8a:	f7ff ffe6 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bed8e:	3508      	adds	r5, #8
   bed90:	e7f8      	b.n	bed84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bed92:	6820      	ldr	r0, [r4, #0]
   bed94:	f7ff fb0c 	bl	be3b0 <free>
}
   bed98:	4620      	mov	r0, r4
   bed9a:	bd70      	pop	{r4, r5, r6, pc}

000bed9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bed9c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bed9e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   beda2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   beda4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   beda8:	42ae      	cmp	r6, r5
   bedaa:	d004      	beq.n	bedb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bedac:	1d28      	adds	r0, r5, #4
   bedae:	f7ff ffd4 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bedb2:	3508      	adds	r5, #8
   bedb4:	e7f8      	b.n	beda8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bedb6:	6820      	ldr	r0, [r4, #0]
   bedb8:	f7ff fafa 	bl	be3b0 <free>
}
   bedbc:	4620      	mov	r0, r4
   bedbe:	bd70      	pop	{r4, r5, r6, pc}

000bedc0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bedc0:	b510      	push	{r4, lr}
   bedc2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bedc4:	3024      	adds	r0, #36	; 0x24
   bedc6:	f7ff ffe9 	bl	bed9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bedca:	f104 0018 	add.w	r0, r4, #24
   bedce:	f7ff ffd3 	bl	bed78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bedd2:	bd10      	pop	{r4, pc}

000bedd4 <__tcf_0>:
    static BleLocalDevice instance;
   bedd4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bedd6:	4b17      	ldr	r3, [pc, #92]	; (bee34 <__tcf_0+0x60>)
   bedd8:	681c      	ldr	r4, [r3, #0]
   bedda:	b354      	cbz	r4, bee32 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   beddc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bede0:	f7f5 fb78 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bede4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bede8:	f7f5 fb74 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bedec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bedf0:	f7f5 fb70 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bedf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bedf8:	f7f5 fb6c 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bedfc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bee00:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bee04:	42ae      	cmp	r6, r5
   bee06:	d004      	beq.n	bee12 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bee08:	1d28      	adds	r0, r5, #4
   bee0a:	f7ff ffa6 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bee0e:	3508      	adds	r5, #8
   bee10:	e7f8      	b.n	bee04 <__tcf_0+0x30>
    ::free(ptr);
   bee12:	69a0      	ldr	r0, [r4, #24]
   bee14:	f7ff facc 	bl	be3b0 <free>
    ~BleLocalDeviceImpl() = default;
   bee18:	f104 000c 	add.w	r0, r4, #12
   bee1c:	f7ff ffbe 	bl	bed9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bee20:	4620      	mov	r0, r4
   bee22:	f7ff ffa9 	bl	bed78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bee26:	4620      	mov	r0, r4
   bee28:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bee2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bee2e:	f7f5 b938 	b.w	b40a2 <_ZdlPvj>
   bee32:	bd70      	pop	{r4, r5, r6, pc}
   bee34:	2003e628 	.word	0x2003e628

000bee38 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bee38:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bee3a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bee3c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bee40:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bee44:	6803      	ldr	r3, [r0, #0]
   bee46:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bee48:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bee4a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bee4c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bee4e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bee50:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bee52:	f7ff ff82 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bee56:	b002      	add	sp, #8
   bee58:	bd10      	pop	{r4, pc}

000bee5a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bee5a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bee5c:	b510      	push	{r4, lr}
      if (_M_empty())
   bee5e:	b90a      	cbnz	r2, bee64 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bee60:	f003 f9f0 	bl	c2244 <_ZSt25__throw_bad_function_callv>
    }
   bee64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bee68:	68c3      	ldr	r3, [r0, #12]
   bee6a:	4718      	bx	r3

000bee6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bee6c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bee6e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bee70:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bee72:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bee74:	dd03      	ble.n	bee7e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bee76:	f7ff faa3 	bl	be3c0 <realloc>
            if (!d) {
   bee7a:	b918      	cbnz	r0, bee84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bee7c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bee7e:	f7ff fa97 	bl	be3b0 <free>
        T* d = nullptr;
   bee82:	2000      	movs	r0, #0
        data_ = d;
   bee84:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bee86:	60a5      	str	r5, [r4, #8]
        return true;
   bee88:	2001      	movs	r0, #1
   bee8a:	e7f7      	b.n	bee7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bee8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bee8c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bee8e:	6883      	ldr	r3, [r0, #8]
   bee90:	428b      	cmp	r3, r1
   bee92:	da02      	bge.n	bee9a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bee94:	f7ff ffea 	bl	bee6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bee98:	bd08      	pop	{r3, pc}
    return true;
   bee9a:	2001      	movs	r0, #1
   bee9c:	e7fc      	b.n	bee98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bee9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bee9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   beea2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   beea4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   beea6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   beea8:	4419      	add	r1, r3
   beeaa:	6883      	ldr	r3, [r0, #8]
   beeac:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   beeae:	4604      	mov	r4, r0
   beeb0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   beeb2:	dc12      	bgt.n	beeda <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   beeb4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   beeb6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   beeb8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   beeba:	1bd2      	subs	r2, r2, r7
   beebc:	4631      	mov	r1, r6
   beebe:	1970      	adds	r0, r6, r5
   beec0:	f005 fbcc 	bl	c465c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   beec4:	462a      	mov	r2, r5
   beec6:	4641      	mov	r1, r8
   beec8:	4630      	mov	r0, r6
   beeca:	f005 fbb9 	bl	c4640 <memcpy>
    size_ += n;
   beece:	6863      	ldr	r3, [r4, #4]
   beed0:	442b      	add	r3, r5
   beed2:	6063      	str	r3, [r4, #4]
    return true;
   beed4:	2001      	movs	r0, #1
}
   beed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   beeda:	f7ff ffc7 	bl	bee6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   beede:	2800      	cmp	r0, #0
   beee0:	d1e8      	bne.n	beeb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   beee2:	e7f8      	b.n	beed6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000beee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   beee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beee6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beee8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   beeec:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   beeee:	4604      	mov	r4, r0
   beef0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   beef2:	da0b      	bge.n	bef0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   beef4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   beef6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   beef8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   beefa:	1b52      	subs	r2, r2, r5
   beefc:	1c48      	adds	r0, r1, #1
   beefe:	f005 fbad 	bl	c465c <memmove>
    new(p) T(std::move(value));
   bef02:	557e      	strb	r6, [r7, r5]
    ++size_;
   bef04:	6863      	ldr	r3, [r4, #4]
   bef06:	3301      	adds	r3, #1
   bef08:	6063      	str	r3, [r4, #4]
}
   bef0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bef0c:	3101      	adds	r1, #1
   bef0e:	f7ff ffad 	bl	bee6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bef12:	2800      	cmp	r0, #0
   bef14:	d1ee      	bne.n	beef4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bef16:	e7f8      	b.n	bef0a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bef18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bef18:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bef1a:	6841      	ldr	r1, [r0, #4]
   bef1c:	f7ff bfe2 	b.w	beee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bef20 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bef20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bef24:	4604      	mov	r4, r0
   bef26:	461d      	mov	r5, r3
   bef28:	460f      	mov	r7, r1
   bef2a:	ab01      	add	r3, sp, #4
   bef2c:	4690      	mov	r8, r2
   bef2e:	460a      	mov	r2, r1
   bef30:	e9d0 0100 	ldrd	r0, r1, [r0]
   bef34:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bef38:	f7ff fb10 	bl	be55c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bef3c:	1cae      	adds	r6, r5, #2
   bef3e:	6863      	ldr	r3, [r4, #4]
   bef40:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bef42:	f1b9 0f00 	cmp.w	r9, #0
   bef46:	d126      	bne.n	bef96 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bef48:	b328      	cbz	r0, bef96 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bef4a:	4433      	add	r3, r6
   bef4c:	1a1b      	subs	r3, r3, r0
   bef4e:	2bff      	cmp	r3, #255	; 0xff
   bef50:	d809      	bhi.n	bef66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bef52:	9901      	ldr	r1, [sp, #4]
   bef54:	4620      	mov	r0, r4
   bef56:	f7ff fe72 	bl	bec3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bef5a:	6861      	ldr	r1, [r4, #4]
   bef5c:	4620      	mov	r0, r4
   bef5e:	4431      	add	r1, r6
   bef60:	f7ff ff94 	bl	bee8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bef64:	b918      	cbnz	r0, bef6e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bef66:	6860      	ldr	r0, [r4, #4]
}
   bef68:	b003      	add	sp, #12
   bef6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bef6e:	1c6a      	adds	r2, r5, #1
   bef70:	9901      	ldr	r1, [sp, #4]
   bef72:	b2d2      	uxtb	r2, r2
   bef74:	4620      	mov	r0, r4
   bef76:	f7ff ffb5 	bl	beee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bef7a:	9901      	ldr	r1, [sp, #4]
   bef7c:	463a      	mov	r2, r7
   bef7e:	3101      	adds	r1, #1
   bef80:	4620      	mov	r0, r4
   bef82:	f7ff ffaf 	bl	beee4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bef86:	9901      	ldr	r1, [sp, #4]
   bef88:	462b      	mov	r3, r5
   bef8a:	4642      	mov	r2, r8
   bef8c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bef8e:	4620      	mov	r0, r4
   bef90:	f7ff ff85 	bl	bee9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bef94:	e7e7      	b.n	bef66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bef96:	18f1      	adds	r1, r6, r3
   bef98:	29ff      	cmp	r1, #255	; 0xff
   bef9a:	d8e4      	bhi.n	bef66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bef9c:	4620      	mov	r0, r4
   bef9e:	f7ff ff75 	bl	bee8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   befa2:	2800      	cmp	r0, #0
   befa4:	d0df      	beq.n	bef66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   befa6:	1c69      	adds	r1, r5, #1
   befa8:	b2c9      	uxtb	r1, r1
   befaa:	4620      	mov	r0, r4
   befac:	f7ff ffb4 	bl	bef18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   befb0:	4639      	mov	r1, r7
   befb2:	4620      	mov	r0, r4
   befb4:	f7ff ffb0 	bl	bef18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   befb8:	6861      	ldr	r1, [r4, #4]
   befba:	462b      	mov	r3, r5
   befbc:	4642      	mov	r2, r8
   befbe:	e7e6      	b.n	bef8e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000befc0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   befc0:	b430      	push	{r4, r5}
   befc2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   befc6:	b11a      	cbz	r2, befd0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   befc8:	9502      	str	r5, [sp, #8]
}
   befca:	bc30      	pop	{r4, r5}
   befcc:	f7ff bfa8 	b.w	bef20 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   befd0:	6840      	ldr	r0, [r0, #4]
}
   befd2:	bc30      	pop	{r4, r5}
   befd4:	4770      	bx	lr

000befd6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   befd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   befd8:	2300      	movs	r3, #0
   befda:	e9c0 3300 	strd	r3, r3, [r0]
   befde:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   befe0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   befe2:	9300      	str	r3, [sp, #0]
   befe4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   befe6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   befea:	4619      	mov	r1, r3
   befec:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   beff0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   beff2:	f7ff ffe5 	bl	befc0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   beff6:	4620      	mov	r0, r4
   beff8:	b004      	add	sp, #16
   beffa:	bd10      	pop	{r4, pc}

000beffc <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   beffc:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   beffe:	9300      	str	r3, [sp, #0]
   bf000:	4613      	mov	r3, r2
   bf002:	460a      	mov	r2, r1
   bf004:	21ff      	movs	r1, #255	; 0xff
   bf006:	f7ff ffdb 	bl	befc0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bf00a:	b003      	add	sp, #12
   bf00c:	f85d fb04 	ldr.w	pc, [sp], #4

000bf010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf010:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf014:	4604      	mov	r4, r0
   bf016:	460d      	mov	r5, r1
   bf018:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf01a:	d914      	bls.n	bf046 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf01c:	4290      	cmp	r0, r2
   bf01e:	d213      	bcs.n	bf048 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf020:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf024:	1a75      	subs	r5, r6, r1
   bf026:	f1a1 0708 	sub.w	r7, r1, #8
   bf02a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf02c:	42b7      	cmp	r7, r6
   bf02e:	d018      	beq.n	bf062 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf030:	b11c      	cbz	r4, bf03a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf032:	4631      	mov	r1, r6
   bf034:	4620      	mov	r0, r4
   bf036:	f7ff fe86 	bl	bed46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bf03a:	1d30      	adds	r0, r6, #4
   bf03c:	f7ff fe8d 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf040:	3e08      	subs	r6, #8
   bf042:	3c08      	subs	r4, #8
   bf044:	e7f2      	b.n	bf02c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf046:	d00c      	beq.n	bf062 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf048:	42b5      	cmp	r5, r6
   bf04a:	d00a      	beq.n	bf062 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf04c:	b11c      	cbz	r4, bf056 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf04e:	4629      	mov	r1, r5
   bf050:	4620      	mov	r0, r4
   bf052:	f7ff fe78 	bl	bed46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf056:	1d28      	adds	r0, r5, #4
   bf058:	f7ff fe7f 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf05c:	3508      	adds	r5, #8
   bf05e:	3408      	adds	r4, #8
   bf060:	e7f2      	b.n	bf048 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf064 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bf066:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf068:	6846      	ldr	r6, [r0, #4]
   bf06a:	4668      	mov	r0, sp
   bf06c:	f7ff fe6b 	bl	bed46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf070:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bf074:	429f      	cmp	r7, r3
   bf076:	db12      	blt.n	bf09e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bf078:	3701      	adds	r7, #1
        if (n > 0) {
   bf07a:	2f00      	cmp	r7, #0
   bf07c:	dd29      	ble.n	bf0d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bf07e:	00f8      	lsls	r0, r7, #3
   bf080:	f7ff f98e 	bl	be3a0 <malloc>
            if (!d) {
   bf084:	4605      	mov	r5, r0
   bf086:	b1f0      	cbz	r0, bf0c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bf088:	e9d4 1200 	ldrd	r1, r2, [r4]
   bf08c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf090:	f7ff ffbe 	bl	bf010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf094:	6820      	ldr	r0, [r4, #0]
   bf096:	f7ff f98b 	bl	be3b0 <free>
        data_ = d;
   bf09a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bf09c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bf09e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf0a0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf0a2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bf0a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf0aa:	4631      	mov	r1, r6
   bf0ac:	f106 0008 	add.w	r0, r6, #8
   bf0b0:	f7ff ffae 	bl	bf010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf0b4:	b11e      	cbz	r6, bf0be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bf0b6:	4669      	mov	r1, sp
   bf0b8:	4630      	mov	r0, r6
   bf0ba:	f7ff fe44 	bl	bed46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bf0be:	6863      	ldr	r3, [r4, #4]
   bf0c0:	3301      	adds	r3, #1
   bf0c2:	6063      	str	r3, [r4, #4]
    return true;
   bf0c4:	2501      	movs	r5, #1
   bf0c6:	a801      	add	r0, sp, #4
   bf0c8:	f7ff fe47 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf0cc:	4628      	mov	r0, r5
   bf0ce:	b003      	add	sp, #12
   bf0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bf0d2:	2500      	movs	r5, #0
   bf0d4:	e7de      	b.n	bf094 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bf0d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bf0d8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf0dc:	4605      	mov	r5, r0
   bf0de:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bf0e0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bf0e4:	42a6      	cmp	r6, r4
   bf0e6:	d005      	beq.n	bf0f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bf0e8:	4639      	mov	r1, r7
   bf0ea:	4620      	mov	r0, r4
   bf0ec:	f7ff fcd9 	bl	beaa2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bf0f0:	b108      	cbz	r0, bf0f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bf0f2:	b914      	cbnz	r4, bf0fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bf0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bf0f6:	3408      	adds	r4, #8
   bf0f8:	e7f4      	b.n	bf0e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bf0fa:	1d20      	adds	r0, r4, #4
   bf0fc:	f7ff fe2d 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bf100:	e9d5 3200 	ldrd	r3, r2, [r5]
   bf104:	f104 0108 	add.w	r1, r4, #8
   bf108:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf10c:	4620      	mov	r0, r4
   bf10e:	f7ff ff7f 	bl	bf010 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bf112:	686b      	ldr	r3, [r5, #4]
   bf114:	3b01      	subs	r3, #1
   bf116:	606b      	str	r3, [r5, #4]
    return true;
   bf118:	e7ec      	b.n	bf0f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bf11c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf120:	4605      	mov	r5, r0
   bf122:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bf124:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf126:	460c      	mov	r4, r1
        WiringBleLock lk;
   bf128:	f7ff fa98 	bl	be65c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bf12c:	682e      	ldr	r6, [r5, #0]
   bf12e:	1ef3      	subs	r3, r6, #3
   bf130:	2b0d      	cmp	r3, #13
   bf132:	d83c      	bhi.n	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf134:	e8df f013 	tbh	[pc, r3, lsl #1]
   bf138:	0053000e 	.word	0x0053000e
   bf13c:	00d1003b 	.word	0x00d1003b
   bf140:	003b003b 	.word	0x003b003b
   bf144:	003b003b 	.word	0x003b003b
   bf148:	009b003b 	.word	0x009b003b
   bf14c:	009b009b 	.word	0x009b009b
   bf150:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bf154:	a804      	add	r0, sp, #16
   bf156:	f7ff fc6f 	bl	bea38 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bf15a:	9b04      	ldr	r3, [sp, #16]
   bf15c:	89aa      	ldrh	r2, [r5, #12]
   bf15e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bf160:	6869      	ldr	r1, [r5, #4]
   bf162:	9804      	ldr	r0, [sp, #16]
   bf164:	3108      	adds	r1, #8
   bf166:	3002      	adds	r0, #2
   bf168:	f7ff fa92 	bl	be690 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bf16c:	a904      	add	r1, sp, #16
   bf16e:	a806      	add	r0, sp, #24
   bf170:	f7ff fde9 	bl	bed46 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bf174:	a906      	add	r1, sp, #24
   bf176:	f104 0018 	add.w	r0, r4, #24
   bf17a:	f7ff ff73 	bl	bf064 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bf17e:	4605      	mov	r5, r0
   bf180:	a807      	add	r0, sp, #28
   bf182:	f7ff fdea 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf186:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bf188:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bf18a:	b9b5      	cbnz	r5, bf1ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bf18c:	4b5d      	ldr	r3, [pc, #372]	; (bf304 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bf18e:	495e      	ldr	r1, [pc, #376]	; (bf308 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf190:	9300      	str	r3, [sp, #0]
   bf192:	2032      	movs	r0, #50	; 0x32
   bf194:	462b      	mov	r3, r5
   bf196:	aa06      	add	r2, sp, #24
   bf198:	9507      	str	r5, [sp, #28]
   bf19a:	f7fe fff3 	bl	be184 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bf19e:	9b04      	ldr	r3, [sp, #16]
   bf1a0:	4629      	mov	r1, r5
   bf1a2:	8818      	ldrh	r0, [r3, #0]
   bf1a4:	f7fe fd44 	bl	bdc30 <hal_ble_gap_disconnect>
   bf1a8:	a805      	add	r0, sp, #20
   bf1aa:	f7ff fdd6 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bf1ae:	a803      	add	r0, sp, #12
   bf1b0:	f7ff fa62 	bl	be678 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bf1b4:	b00e      	add	sp, #56	; 0x38
   bf1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bf1ba:	4a54      	ldr	r2, [pc, #336]	; (bf30c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bf1bc:	9200      	str	r2, [sp, #0]
   bf1be:	2300      	movs	r3, #0
   bf1c0:	4951      	ldr	r1, [pc, #324]	; (bf308 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf1c2:	9307      	str	r3, [sp, #28]
   bf1c4:	aa06      	add	r2, sp, #24
   bf1c6:	2001      	movs	r0, #1
   bf1c8:	f7fe ffdc 	bl	be184 <log_message>
                if (impl->connectedCallback_) {
   bf1cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bf1ce:	2b00      	cmp	r3, #0
   bf1d0:	d0ea      	beq.n	bf1a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bf1d2:	a904      	add	r1, sp, #16
   bf1d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf1d8:	f7ff fe3f 	bl	bee5a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bf1dc:	e7e4      	b.n	bf1a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf1de:	89a9      	ldrh	r1, [r5, #12]
   bf1e0:	4620      	mov	r0, r4
   bf1e2:	f7ff fb93 	bl	be90c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf1e6:	4606      	mov	r6, r0
   bf1e8:	2800      	cmp	r0, #0
   bf1ea:	d0e0      	beq.n	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bf1ec:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bf1ee:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bf1f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf1f6:	8029      	strh	r1, [r5, #0]
   bf1f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bf1fc:	429a      	cmp	r2, r3
   bf1fe:	d003      	beq.n	bf208 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bf200:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bf204:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bf206:	e7f9      	b.n	bf1fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bf208:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bf20c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf210:	45b8      	cmp	r8, r7
   bf212:	d004      	beq.n	bf21e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bf214:	1d38      	adds	r0, r7, #4
   bf216:	f7ff fda0 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf21a:	3708      	adds	r7, #8
   bf21c:	e7f8      	b.n	bf210 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bf21e:	2300      	movs	r3, #0
   bf220:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bf222:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bf226:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf22a:	45b8      	cmp	r8, r7
   bf22c:	d004      	beq.n	bf238 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bf22e:	1d38      	adds	r0, r7, #4
   bf230:	f7ff fd93 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf234:	3708      	adds	r7, #8
   bf236:	e7f8      	b.n	bf22a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bf238:	2300      	movs	r3, #0
   bf23a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bf23c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bf23e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf240:	b123      	cbz	r3, bf24c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bf242:	4631      	mov	r1, r6
   bf244:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf248:	f7ff fe07 	bl	bee5a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bf24c:	2300      	movs	r3, #0
   bf24e:	2220      	movs	r2, #32
   bf250:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bf254:	4a2e      	ldr	r2, [pc, #184]	; (bf310 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bf256:	9200      	str	r2, [sp, #0]
   bf258:	492b      	ldr	r1, [pc, #172]	; (bf308 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf25a:	aa06      	add	r2, sp, #24
   bf25c:	2001      	movs	r0, #1
   bf25e:	f7fe ff91 	bl	be184 <log_message>
                    impl->peers_.removeOne(*peer);
   bf262:	4631      	mov	r1, r6
   bf264:	f104 0018 	add.w	r0, r4, #24
   bf268:	f7ff ff35 	bl	bf0d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bf26c:	e79f      	b.n	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf26e:	89a9      	ldrh	r1, [r5, #12]
   bf270:	4620      	mov	r0, r4
   bf272:	f7ff fb4b 	bl	be90c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf276:	2800      	cmp	r0, #0
   bf278:	d099      	beq.n	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bf27a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bf27c:	2b00      	cmp	r3, #0
   bf27e:	d096      	beq.n	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bf280:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf282:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bf284:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf288:	d001      	beq.n	bf28e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bf28a:	2e10      	cmp	r6, #16
   bf28c:	d117      	bne.n	bf2be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bf28e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bf290:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bf292:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bf294:	2506      	movs	r5, #6
                        };
   bf296:	f88d 3015 	strb.w	r3, [sp, #21]
   bf29a:	9104      	str	r1, [sp, #16]
   bf29c:	f88d 2014 	strb.w	r2, [sp, #20]
   bf2a0:	9006      	str	r0, [sp, #24]
   bf2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bf2a6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bf2a8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bf2ac:	9508      	str	r5, [sp, #32]
   bf2ae:	e883 0003 	stmia.w	r3, {r0, r1}
   bf2b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bf2b4:	a906      	add	r1, sp, #24
   bf2b6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf2ba:	4798      	blx	r3
   bf2bc:	e777      	b.n	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bf2be:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf2c0:	bf01      	itttt	eq
   bf2c2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bf2c4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf2c6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bf2ca:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bf2cc:	bf0f      	iteee	eq
   bf2ce:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bf2d2:	461a      	movne	r2, r3
   bf2d4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bf2d6:	461d      	movne	r5, r3
   bf2d8:	e7dd      	b.n	bf296 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf2da:	89a9      	ldrh	r1, [r5, #12]
   bf2dc:	4620      	mov	r0, r4
   bf2de:	f7ff fb15 	bl	be90c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf2e2:	4601      	mov	r1, r0
   bf2e4:	2800      	cmp	r0, #0
   bf2e6:	f43f af62 	beq.w	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf2ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf2ec:	2b00      	cmp	r3, #0
   bf2ee:	f43f af5e 	beq.w	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf2f2:	686b      	ldr	r3, [r5, #4]
   bf2f4:	9306      	str	r3, [sp, #24]
   bf2f6:	aa06      	add	r2, sp, #24
   bf2f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf2fa:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf2fe:	4798      	blx	r3
   bf300:	e755      	b.n	bf1ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf302:	bf00      	nop
   bf304:	000c7dd9 	.word	0x000c7dd9
   bf308:	000c7d58 	.word	0x000c7d58
   bf30c:	000c7dff 	.word	0x000c7dff
   bf310:	000c7e1c 	.word	0x000c7e1c

000bf314 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf314:	b513      	push	{r0, r1, r4, lr}
   bf316:	460b      	mov	r3, r1
   bf318:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf31a:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf31e:	466c      	mov	r4, sp
   bf320:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf324:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf328:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf32c:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf330:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf334:	b002      	add	sp, #8
   bf336:	bd10      	pop	{r4, pc}

000bf338 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf338:	b538      	push	{r3, r4, r5, lr}
   bf33a:	4605      	mov	r5, r0
   bf33c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf33e:	f7ff ffe9 	bl	bf314 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf342:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf344:	68a2      	ldr	r2, [r4, #8]
   bf346:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf348:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf34a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf34c:	68e2      	ldr	r2, [r4, #12]
   bf34e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf350:	60e3      	str	r3, [r4, #12]
      }
   bf352:	bd38      	pop	{r3, r4, r5, pc}

000bf354 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf354:	b570      	push	{r4, r5, r6, lr}
   bf356:	4604      	mov	r4, r0
   bf358:	b08c      	sub	sp, #48	; 0x30
   bf35a:	460e      	mov	r6, r1
   bf35c:	9201      	str	r2, [sp, #4]
   bf35e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf360:	f7ff fab4 	bl	be8cc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf364:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf366:	9901      	ldr	r1, [sp, #4]
   bf368:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf36c:	f002 fba3 	bl	c1ab6 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf370:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf374:	b1cd      	cbz	r5, bf3aa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf376:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf378:	9502      	str	r5, [sp, #8]
   bf37a:	a902      	add	r1, sp, #8
   bf37c:	a804      	add	r0, sp, #16
   bf37e:	9303      	str	r3, [sp, #12]
   bf380:	f7ff fcaa 	bl	becd8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf384:	2300      	movs	r3, #0
	__x.swap(*this);
   bf386:	a908      	add	r1, sp, #32
   bf388:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf38a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf38c:	f7ff ffd4 	bl	bf338 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf390:	4631      	mov	r1, r6
   bf392:	a808      	add	r0, sp, #32
   bf394:	f7ff ffd0 	bl	bf338 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf398:	a808      	add	r0, sp, #32
   bf39a:	f7f5 f89b 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf39e:	a804      	add	r0, sp, #16
   bf3a0:	f7f5 f898 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    }
   bf3a4:	4620      	mov	r0, r4
   bf3a6:	b00c      	add	sp, #48	; 0x30
   bf3a8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf3aa:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf3ac:	e7ea      	b.n	bf384 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf3b0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf3b4:	b087      	sub	sp, #28
   bf3b6:	461d      	mov	r5, r3
   bf3b8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf3bc:	4680      	mov	r8, r0
   bf3be:	468b      	mov	fp, r1
   bf3c0:	4692      	mov	sl, r2
   bf3c2:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf3c4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf3c6:	2200      	movs	r2, #0
   bf3c8:	2068      	movs	r0, #104	; 0x68
   bf3ca:	9102      	str	r1, [sp, #8]
   bf3cc:	9204      	str	r2, [sp, #16]
   bf3ce:	f7f4 fe62 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf3d2:	1e06      	subs	r6, r0, #0
   bf3d4:	f106 090c 	add.w	r9, r6, #12
   bf3d8:	d018      	beq.n	bf40c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf3da:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf3dc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf3de:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf3e2:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf3e4:	4a15      	ldr	r2, [pc, #84]	; (bf43c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf3e6:	f847 2b20 	str.w	r2, [r7], #32
   bf3ea:	9b03      	ldr	r3, [sp, #12]
   bf3ec:	9100      	str	r1, [sp, #0]
   bf3ee:	465a      	mov	r2, fp
   bf3f0:	4651      	mov	r1, sl
   bf3f2:	4648      	mov	r0, r9
   bf3f4:	f7ff ffae 	bl	bf354 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf3f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf3fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf3fc:	682b      	ldr	r3, [r5, #0]
   bf3fe:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf402:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf408:	6823      	ldr	r3, [r4, #0]
   bf40a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf40c:	a904      	add	r1, sp, #16
   bf40e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf410:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf414:	f7ff fd10 	bl	bee38 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf418:	a805      	add	r0, sp, #20
   bf41a:	f7ff fc9e 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf41e:	f8d8 3000 	ldr.w	r3, [r8]
   bf422:	b93b      	cbnz	r3, bf434 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf424:	4a06      	ldr	r2, [pc, #24]	; (bf440 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf426:	4907      	ldr	r1, [pc, #28]	; (bf444 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf428:	200a      	movs	r0, #10
}
   bf42a:	b007      	add	sp, #28
   bf42c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf430:	f7fe bea0 	b.w	be174 <panic_>
}
   bf434:	b007      	add	sp, #28
   bf436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf43a:	bf00      	nop
   bf43c:	000c7e98 	.word	0x000c7e98
   bf440:	000bdda5 	.word	0x000bdda5
   bf444:	000c7d41 	.word	0x000c7d41

000bf448 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf448:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf44c:	4604      	mov	r4, r0
   bf44e:	460d      	mov	r5, r1
   bf450:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf452:	d914      	bls.n	bf47e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf454:	4290      	cmp	r0, r2
   bf456:	d213      	bcs.n	bf480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf458:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf45c:	1a75      	subs	r5, r6, r1
   bf45e:	f1a1 0708 	sub.w	r7, r1, #8
   bf462:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf464:	42b7      	cmp	r7, r6
   bf466:	d018      	beq.n	bf49a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf468:	b11c      	cbz	r4, bf472 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf46a:	4631      	mov	r1, r6
   bf46c:	4620      	mov	r0, r4
   bf46e:	f7ff fc60 	bl	bed32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf472:	1d30      	adds	r0, r6, #4
   bf474:	f7ff fc71 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf478:	3e08      	subs	r6, #8
   bf47a:	3c08      	subs	r4, #8
   bf47c:	e7f2      	b.n	bf464 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf47e:	d00c      	beq.n	bf49a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf480:	42b5      	cmp	r5, r6
   bf482:	d00a      	beq.n	bf49a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf484:	b11c      	cbz	r4, bf48e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf486:	4629      	mov	r1, r5
   bf488:	4620      	mov	r0, r4
   bf48a:	f7ff fc52 	bl	bed32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf48e:	1d28      	adds	r0, r5, #4
   bf490:	f7ff fc63 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf494:	3508      	adds	r5, #8
   bf496:	3408      	adds	r4, #8
   bf498:	e7f2      	b.n	bf480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf49c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf49c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf49e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf4a0:	4605      	mov	r5, r0
        if (n > 0) {
   bf4a2:	dd11      	ble.n	bf4c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf4a4:	00f0      	lsls	r0, r6, #3
   bf4a6:	f7fe ff7b 	bl	be3a0 <malloc>
            if (!d) {
   bf4aa:	4604      	mov	r4, r0
   bf4ac:	b158      	cbz	r0, bf4c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf4ae:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf4b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf4b6:	f7ff ffc7 	bl	bf448 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf4ba:	6828      	ldr	r0, [r5, #0]
   bf4bc:	f7fe ff78 	bl	be3b0 <free>
        data_ = d;
   bf4c0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf4c2:	60ae      	str	r6, [r5, #8]
        return true;
   bf4c4:	2001      	movs	r0, #1
    }
   bf4c6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf4c8:	2400      	movs	r4, #0
   bf4ca:	e7f6      	b.n	bf4ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf4cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf4cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf4ce:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf4d0:	6845      	ldr	r5, [r0, #4]
   bf4d2:	4668      	mov	r0, sp
   bf4d4:	f7ff fc2d 	bl	bed32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf4d8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf4dc:	4299      	cmp	r1, r3
   bf4de:	da10      	bge.n	bf502 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf4e0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf4e2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf4e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf4e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf4ec:	4629      	mov	r1, r5
   bf4ee:	f105 0008 	add.w	r0, r5, #8
   bf4f2:	f7ff ffa9 	bl	bf448 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf4f6:	b98d      	cbnz	r5, bf51c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf4f8:	6863      	ldr	r3, [r4, #4]
   bf4fa:	3301      	adds	r3, #1
   bf4fc:	6063      	str	r3, [r4, #4]
    return true;
   bf4fe:	2601      	movs	r6, #1
   bf500:	e006      	b.n	bf510 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf502:	3101      	adds	r1, #1
   bf504:	4620      	mov	r0, r4
   bf506:	f7ff ffc9 	bl	bf49c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf50a:	4606      	mov	r6, r0
   bf50c:	2800      	cmp	r0, #0
   bf50e:	d1e7      	bne.n	bf4e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf510:	a801      	add	r0, sp, #4
   bf512:	f7ff fc22 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf516:	4630      	mov	r0, r6
   bf518:	b002      	add	sp, #8
   bf51a:	bd70      	pop	{r4, r5, r6, pc}
   bf51c:	4669      	mov	r1, sp
   bf51e:	4628      	mov	r0, r5
   bf520:	f7ff fc07 	bl	bed32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf524:	e7e8      	b.n	bf4f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf526 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf526:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf52a:	4604      	mov	r4, r0
   bf52c:	460d      	mov	r5, r1
   bf52e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf530:	d914      	bls.n	bf55c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf532:	4290      	cmp	r0, r2
   bf534:	d213      	bcs.n	bf55e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf536:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf53a:	1a75      	subs	r5, r6, r1
   bf53c:	f1a1 0708 	sub.w	r7, r1, #8
   bf540:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf542:	42b7      	cmp	r7, r6
   bf544:	d018      	beq.n	bf578 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf546:	b11c      	cbz	r4, bf550 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf548:	4631      	mov	r1, r6
   bf54a:	4620      	mov	r0, r4
   bf54c:	f7ff fbe3 	bl	bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf550:	1d30      	adds	r0, r6, #4
   bf552:	f7ff fc02 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf556:	3e08      	subs	r6, #8
   bf558:	3c08      	subs	r4, #8
   bf55a:	e7f2      	b.n	bf542 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf55c:	d00c      	beq.n	bf578 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf55e:	42b5      	cmp	r5, r6
   bf560:	d00a      	beq.n	bf578 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf562:	b11c      	cbz	r4, bf56c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf564:	4629      	mov	r1, r5
   bf566:	4620      	mov	r0, r4
   bf568:	f7ff fbd5 	bl	bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf56c:	1d28      	adds	r0, r5, #4
   bf56e:	f7ff fbf4 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf572:	3508      	adds	r5, #8
   bf574:	3408      	adds	r4, #8
   bf576:	e7f2      	b.n	bf55e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf57a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf57a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf57c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf57e:	4605      	mov	r5, r0
        if (n > 0) {
   bf580:	dd11      	ble.n	bf5a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf582:	00f0      	lsls	r0, r6, #3
   bf584:	f7fe ff0c 	bl	be3a0 <malloc>
            if (!d) {
   bf588:	4604      	mov	r4, r0
   bf58a:	b158      	cbz	r0, bf5a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf58c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf590:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf594:	f7ff ffc7 	bl	bf526 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf598:	6828      	ldr	r0, [r5, #0]
   bf59a:	f7fe ff09 	bl	be3b0 <free>
        data_ = d;
   bf59e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf5a0:	60ae      	str	r6, [r5, #8]
        return true;
   bf5a2:	2001      	movs	r0, #1
    }
   bf5a4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf5a6:	2400      	movs	r4, #0
   bf5a8:	e7f6      	b.n	bf598 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf5aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf5aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf5ac:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf5ae:	6845      	ldr	r5, [r0, #4]
   bf5b0:	4668      	mov	r0, sp
   bf5b2:	f7ff fbb0 	bl	bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf5b6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf5ba:	4299      	cmp	r1, r3
   bf5bc:	da10      	bge.n	bf5e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf5be:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf5c0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf5c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf5c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf5ca:	4629      	mov	r1, r5
   bf5cc:	f105 0008 	add.w	r0, r5, #8
   bf5d0:	f7ff ffa9 	bl	bf526 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf5d4:	b98d      	cbnz	r5, bf5fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf5d6:	6863      	ldr	r3, [r4, #4]
   bf5d8:	3301      	adds	r3, #1
   bf5da:	6063      	str	r3, [r4, #4]
    return true;
   bf5dc:	2601      	movs	r6, #1
   bf5de:	e006      	b.n	bf5ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf5e0:	3101      	adds	r1, #1
   bf5e2:	4620      	mov	r0, r4
   bf5e4:	f7ff ffc9 	bl	bf57a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf5e8:	4606      	mov	r6, r0
   bf5ea:	2800      	cmp	r0, #0
   bf5ec:	d1e7      	bne.n	bf5be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf5ee:	a801      	add	r0, sp, #4
   bf5f0:	f7ff fbb3 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf5f4:	4630      	mov	r0, r6
   bf5f6:	b002      	add	sp, #8
   bf5f8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf5fa:	4669      	mov	r1, sp
   bf5fc:	4628      	mov	r0, r5
   bf5fe:	f7ff fb8a 	bl	bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf602:	e7e8      	b.n	bf5d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf604 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf608:	4617      	mov	r7, r2
   bf60a:	b0a1      	sub	sp, #132	; 0x84
   bf60c:	4680      	mov	r8, r0
    WiringBleLock lk;
   bf60e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf610:	460e      	mov	r6, r1
    WiringBleLock lk;
   bf612:	f7ff f823 	bl	be65c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bf616:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bf618:	7923      	ldrb	r3, [r4, #4]
   bf61a:	b953      	cbnz	r3, bf632 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bf61c:	4639      	mov	r1, r7
   bf61e:	4640      	mov	r0, r8
   bf620:	f7ff fb79 	bl	bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bf624:	a80a      	add	r0, sp, #40	; 0x28
   bf626:	f7ff f827 	bl	be678 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bf62a:	4640      	mov	r0, r8
   bf62c:	b021      	add	sp, #132	; 0x84
   bf62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bf632:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bf634:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bf638:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bf63c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bf63e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bf642:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bf646:	9b03      	ldr	r3, [sp, #12]
   bf648:	429d      	cmp	r5, r3
   bf64a:	d021      	beq.n	bf690 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bf64c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bf650:	4658      	mov	r0, fp
   bf652:	f109 0114 	add.w	r1, r9, #20
   bf656:	f7ff f8ae 	bl	be7b6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bf65a:	b1b8      	cbz	r0, bf68c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bf65c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bf660:	4650      	mov	r0, sl
   bf662:	f7ff f8a8 	bl	be7b6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bf666:	b188      	cbz	r0, bf68c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bf668:	6823      	ldr	r3, [r4, #0]
   bf66a:	f8d9 2000 	ldr.w	r2, [r9]
   bf66e:	4053      	eors	r3, r2
   bf670:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bf674:	d10a      	bne.n	bf68c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bf676:	2220      	movs	r2, #32
   bf678:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bf67c:	4a5e      	ldr	r2, [pc, #376]	; (bf7f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bf67e:	9200      	str	r2, [sp, #0]
   bf680:	aa15      	add	r2, sp, #84	; 0x54
   bf682:	495e      	ldr	r1, [pc, #376]	; (bf7fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bf684:	2032      	movs	r0, #50	; 0x32
   bf686:	f7fe fd7d 	bl	be184 <log_message>
   bf68a:	e7c7      	b.n	bf61c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bf68c:	3508      	adds	r5, #8
   bf68e:	e7da      	b.n	bf646 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bf690:	4650      	mov	r0, sl
   bf692:	f7ff f861 	bl	be758 <_ZNK8particle7BleUuid7isValidEv>
   bf696:	b960      	cbnz	r0, bf6b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bf698:	4959      	ldr	r1, [pc, #356]	; (bf800 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bf69a:	2201      	movs	r2, #1
   bf69c:	a815      	add	r0, sp, #84	; 0x54
   bf69e:	ad15      	add	r5, sp, #84	; 0x54
   bf6a0:	f7ff f832 	bl	be708 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bf6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf6a6:	46d4      	mov	ip, sl
   bf6a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf6ac:	682b      	ldr	r3, [r5, #0]
   bf6ae:	f8cc 3000 	str.w	r3, [ip]
   bf6b2:	6833      	ldr	r3, [r6, #0]
   bf6b4:	e9d3 5300 	ldrd	r5, r3, [r3]
   bf6b8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bf6bc:	455d      	cmp	r5, fp
   bf6be:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bf6c0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bf6c2:	d06e      	beq.n	bf7a2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bf6c4:	f855 0b08 	ldr.w	r0, [r5], #8
   bf6c8:	f7ff f875 	bl	be7b6 <_ZNK8particle7BleUuideqERKS0_>
   bf6cc:	2800      	cmp	r0, #0
   bf6ce:	d0f5      	beq.n	bf6bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bf6d0:	f104 0a14 	add.w	sl, r4, #20
   bf6d4:	4650      	mov	r0, sl
   bf6d6:	f7ff f83f 	bl	be758 <_ZNK8particle7BleUuid7isValidEv>
   bf6da:	b988      	cbnz	r0, bf700 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bf6dc:	4b49      	ldr	r3, [pc, #292]	; (bf804 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf6de:	4948      	ldr	r1, [pc, #288]	; (bf800 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bf6e0:	881a      	ldrh	r2, [r3, #0]
   bf6e2:	3201      	adds	r2, #1
   bf6e4:	b292      	uxth	r2, r2
   bf6e6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf6e8:	a815      	add	r0, sp, #84	; 0x54
   bf6ea:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bf6ec:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf6ee:	f7ff f82a 	bl	be746 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bf6f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf6f4:	46d4      	mov	ip, sl
   bf6f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf6fa:	682b      	ldr	r3, [r5, #0]
   bf6fc:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bf700:	4b41      	ldr	r3, [pc, #260]	; (bf808 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bf702:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bf704:	2228      	movs	r2, #40	; 0x28
   bf706:	2100      	movs	r1, #0
   bf708:	a816      	add	r0, sp, #88	; 0x58
   bf70a:	f004 ffc1 	bl	c4690 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bf70e:	4651      	mov	r1, sl
   bf710:	a804      	add	r0, sp, #16
   bf712:	f7ff f833 	bl	be77c <_ZN8particle7BleUuid7halUUIDEv>
   bf716:	ab04      	add	r3, sp, #16
   bf718:	aa18      	add	r2, sp, #96	; 0x60
   bf71a:	f10d 0c20 	add.w	ip, sp, #32
   bf71e:	6818      	ldr	r0, [r3, #0]
   bf720:	6859      	ldr	r1, [r3, #4]
   bf722:	4615      	mov	r5, r2
   bf724:	c503      	stmia	r5!, {r0, r1}
   bf726:	3308      	adds	r3, #8
   bf728:	4563      	cmp	r3, ip
   bf72a:	462a      	mov	r2, r5
   bf72c:	d1f7      	bne.n	bf71e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bf72e:	6818      	ldr	r0, [r3, #0]
   bf730:	6028      	str	r0, [r5, #0]
    return value_;
   bf732:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bf734:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bf738:	f8d9 3000 	ldr.w	r3, [r9]
   bf73c:	8a9b      	ldrh	r3, [r3, #20]
   bf73e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bf742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf744:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bf746:	4b31      	ldr	r3, [pc, #196]	; (bf80c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf748:	2200      	movs	r2, #0
   bf74a:	1da1      	adds	r1, r4, #6
   bf74c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bf74e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf752:	f7fe fa9f 	bl	bdc94 <hal_ble_gatt_server_add_characteristic>
   bf756:	2800      	cmp	r0, #0
   bf758:	f47f af60 	bne.w	bf61c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bf75c:	2301      	movs	r3, #1
   bf75e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bf760:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bf762:	4639      	mov	r1, r7
        return characteristics_;
   bf764:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bf766:	a80d      	add	r0, sp, #52	; 0x34
   bf768:	f7ff fad5 	bl	bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf76c:	4620      	mov	r0, r4
   bf76e:	a90d      	add	r1, sp, #52	; 0x34
   bf770:	f7ff ff1b 	bl	bf5aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bf774:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf776:	a80e      	add	r0, sp, #56	; 0x38
   bf778:	f7ff faef 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf77c:	2c00      	cmp	r4, #0
   bf77e:	f47f af4d 	bne.w	bf61c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bf782:	2320      	movs	r3, #32
   bf784:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bf788:	4b21      	ldr	r3, [pc, #132]	; (bf810 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bf78a:	9300      	str	r3, [sp, #0]
   bf78c:	aa0d      	add	r2, sp, #52	; 0x34
   bf78e:	4623      	mov	r3, r4
   bf790:	e777      	b.n	bf682 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bf792:	4639      	mov	r1, r7
   bf794:	4640      	mov	r0, r8
   bf796:	f7ff fabe 	bl	bed16 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf79a:	a80c      	add	r0, sp, #48	; 0x30
   bf79c:	f7ff fadd 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf7a0:	e740      	b.n	bf624 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bf7a2:	a80b      	add	r0, sp, #44	; 0x2c
   bf7a4:	f7ff f924 	bl	be9f0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bf7a8:	4651      	mov	r1, sl
   bf7aa:	a815      	add	r0, sp, #84	; 0x54
   bf7ac:	f7fe ffe6 	bl	be77c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bf7b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf7b2:	2300      	movs	r3, #0
   bf7b4:	3214      	adds	r2, #20
   bf7b6:	a915      	add	r1, sp, #84	; 0x54
   bf7b8:	2001      	movs	r0, #1
   bf7ba:	f7fe fa43 	bl	bdc44 <hal_ble_gatt_server_add_service>
   bf7be:	2800      	cmp	r0, #0
   bf7c0:	d1e7      	bne.n	bf792 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bf7c2:	6835      	ldr	r5, [r6, #0]
   bf7c4:	a90b      	add	r1, sp, #44	; 0x2c
   bf7c6:	a80d      	add	r0, sp, #52	; 0x34
   bf7c8:	f7ff fab3 	bl	bed32 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bf7cc:	4628      	mov	r0, r5
   bf7ce:	a90d      	add	r1, sp, #52	; 0x34
   bf7d0:	f7ff fe7c 	bl	bf4cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bf7d4:	4605      	mov	r5, r0
   bf7d6:	a80e      	add	r0, sp, #56	; 0x38
   bf7d8:	f7ff fabf 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf7dc:	2d00      	cmp	r5, #0
   bf7de:	d0d8      	beq.n	bf792 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bf7e0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bf7e2:	6853      	ldr	r3, [r2, #4]
   bf7e4:	6812      	ldr	r2, [r2, #0]
   bf7e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bf7ea:	3b01      	subs	r3, #1
   bf7ec:	a80c      	add	r0, sp, #48	; 0x30
   bf7ee:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bf7f2:	f7ff fab2 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf7f6:	e76b      	b.n	bf6d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bf7f8:	000c7e3b 	.word	0x000c7e3b
   bf7fc:	000c7d58 	.word	0x000c7d58
   bf800:	000c7f02 	.word	0x000c7f02
   bf804:	2003e620 	.word	0x2003e620
   bf808:	002c0003 	.word	0x002c0003
   bf80c:	000beb89 	.word	0x000beb89
   bf810:	000c7e66 	.word	0x000c7e66

000bf814 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bf814:	4802      	ldr	r0, [pc, #8]	; (bf820 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf816:	2300      	movs	r3, #0
   bf818:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bf81a:	f7fe ba93 	b.w	bdd44 <os_mutex_recursive_create>
   bf81e:	bf00      	nop
   bf820:	2003e624 	.word	0x2003e624

000bf824 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bf824:	2200      	movs	r2, #0
   bf826:	6840      	ldr	r0, [r0, #4]
   bf828:	4611      	mov	r1, r2
   bf82a:	f7fe bd71 	b.w	be310 <network_ready>

000bf82e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bf82e:	2200      	movs	r2, #0
   bf830:	6840      	ldr	r0, [r0, #4]
   bf832:	4611      	mov	r1, r2
   bf834:	f7fe bd8c 	b.w	be350 <network_listening>

000bf838 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf838:	2200      	movs	r2, #0
   bf83a:	6840      	ldr	r0, [r0, #4]
   bf83c:	4611      	mov	r1, r2
   bf83e:	f7fe bd97 	b.w	be370 <network_get_listen_timeout>

000bf842 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf842:	6840      	ldr	r0, [r0, #4]
   bf844:	2200      	movs	r2, #0
   bf846:	f7fe bd8b 	b.w	be360 <network_set_listen_timeout>

000bf84a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf84a:	6840      	ldr	r0, [r0, #4]
   bf84c:	2200      	movs	r2, #0
   bf84e:	f081 0101 	eor.w	r1, r1, #1
   bf852:	f7fe bd75 	b.w	be340 <network_listen>

000bf856 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf856:	2300      	movs	r3, #0
   bf858:	6840      	ldr	r0, [r0, #4]
   bf85a:	461a      	mov	r2, r3
   bf85c:	4619      	mov	r1, r3
   bf85e:	f7fe bd67 	b.w	be330 <network_off>

000bf862 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf862:	2300      	movs	r3, #0
   bf864:	6840      	ldr	r0, [r0, #4]
   bf866:	461a      	mov	r2, r3
   bf868:	4619      	mov	r1, r3
   bf86a:	f7fe bd59 	b.w	be320 <network_on>

000bf86e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf86e:	2200      	movs	r2, #0
   bf870:	6840      	ldr	r0, [r0, #4]
   bf872:	4611      	mov	r1, r2
   bf874:	f7fe bd3c 	b.w	be2f0 <network_connecting>

000bf878 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf878:	6840      	ldr	r0, [r0, #4]
   bf87a:	2200      	movs	r2, #0
   bf87c:	2102      	movs	r1, #2
   bf87e:	f7fe bd3f 	b.w	be300 <network_disconnect>

000bf882 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf882:	2300      	movs	r3, #0
   bf884:	6840      	ldr	r0, [r0, #4]
   bf886:	461a      	mov	r2, r3
   bf888:	f7fe bd2a 	b.w	be2e0 <network_connect>

000bf88c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bf88c:	4b08      	ldr	r3, [pc, #32]	; (bf8b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bf88e:	b510      	push	{r4, lr}
   bf890:	2428      	movs	r4, #40	; 0x28
   bf892:	4622      	mov	r2, r4
   bf894:	4618      	mov	r0, r3
   bf896:	2100      	movs	r1, #0
   bf898:	f004 fefa 	bl	c4690 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bf89c:	4b05      	ldr	r3, [pc, #20]	; (bf8b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bf89e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bf8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf8a4:	6042      	str	r2, [r0, #4]
   bf8a6:	2204      	movs	r2, #4
   bf8a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bf8aa:	4a03      	ldr	r2, [pc, #12]	; (bf8b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bf8ac:	601a      	str	r2, [r3, #0]
   bf8ae:	bd10      	pop	{r4, pc}
   bf8b0:	2003e634 	.word	0x2003e634
   bf8b4:	2003e62c 	.word	0x2003e62c
   bf8b8:	000c7f2c 	.word	0x000c7f2c

000bf8bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf8bc:	4770      	bx	lr

000bf8be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bf8be:	2000      	movs	r0, #0
   bf8c0:	4770      	bx	lr

000bf8c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf8c2:	b510      	push	{r4, lr}
   bf8c4:	2110      	movs	r1, #16
   bf8c6:	4604      	mov	r4, r0
   bf8c8:	f7f4 fbeb 	bl	b40a2 <_ZdlPvj>
   bf8cc:	4620      	mov	r0, r4
   bf8ce:	bd10      	pop	{r4, pc}

000bf8d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bf8d0:	b508      	push	{r3, lr}
      { delete this; }
   bf8d2:	f7ff fff6 	bl	bf8c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bf8d6:	bd08      	pop	{r3, pc}

000bf8d8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bf8d8:	b530      	push	{r4, r5, lr}
        type_(type) {
   bf8da:	2200      	movs	r2, #0
   bf8dc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bf8e0:	6002      	str	r2, [r0, #0]
   bf8e2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf8e4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bf8e6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf8e8:	680c      	ldr	r4, [r1, #0]
   bf8ea:	8085      	strh	r5, [r0, #4]
   bf8ec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf8ee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bf8f0:	bd30      	pop	{r4, r5, pc}

000bf8f2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bf8f2:	b510      	push	{r4, lr}
   bf8f4:	4604      	mov	r4, r0
    free((void*)msg_);
   bf8f6:	6800      	ldr	r0, [r0, #0]
   bf8f8:	f7fe fd5a 	bl	be3b0 <free>
}
   bf8fc:	4620      	mov	r0, r4
   bf8fe:	bd10      	pop	{r4, pc}

000bf900 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf900:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bf902:	68c4      	ldr	r4, [r0, #12]
   bf904:	b1f4      	cbz	r4, bf944 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bf906:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bf908:	2b02      	cmp	r3, #2
   bf90a:	d103      	bne.n	bf914 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bf90c:	f104 000c 	add.w	r0, r4, #12
   bf910:	f7ff ffef 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bf914:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bf916:	b135      	cbz	r5, bf926 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bf918:	4628      	mov	r0, r5
   bf91a:	f7f4 fddb 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf91e:	2110      	movs	r1, #16
   bf920:	4628      	mov	r0, r5
   bf922:	f7f4 fbbe 	bl	b40a2 <_ZdlPvj>
   bf926:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bf928:	b135      	cbz	r5, bf938 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bf92a:	4628      	mov	r0, r5
   bf92c:	f7f4 fdd2 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf930:	2110      	movs	r1, #16
   bf932:	4628      	mov	r0, r5
   bf934:	f7f4 fbb5 	bl	b40a2 <_ZdlPvj>
   bf938:	4620      	mov	r0, r4
   bf93a:	2114      	movs	r1, #20
   bf93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf940:	f7f4 bbaf 	b.w	b40a2 <_ZdlPvj>
   bf944:	bd38      	pop	{r3, r4, r5, pc}

000bf946 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bf946:	b510      	push	{r4, lr}
   bf948:	b088      	sub	sp, #32
   bf94a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bf94c:	4668      	mov	r0, sp
   bf94e:	f002 f85c 	bl	c1a0a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bf952:	4669      	mov	r1, sp
   bf954:	a804      	add	r0, sp, #16
   bf956:	f002 f8a3 	bl	c1aa0 <_ZN6StringC1ERKS_>
   bf95a:	a804      	add	r0, sp, #16
   bf95c:	47a0      	blx	r4
   bf95e:	4604      	mov	r4, r0
   bf960:	a804      	add	r0, sp, #16
   bf962:	f002 f807 	bl	c1974 <_ZN6StringD1Ev>
    String p(param);
   bf966:	4668      	mov	r0, sp
   bf968:	f002 f804 	bl	c1974 <_ZN6StringD1Ev>
}
   bf96c:	4620      	mov	r0, r4
   bf96e:	b008      	add	sp, #32
   bf970:	bd10      	pop	{r4, pc}

000bf972 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bf972:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bf974:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bf976:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bf97a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bf97c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bf97e:	461a      	mov	r2, r3
   bf980:	4669      	mov	r1, sp
   bf982:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bf984:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bf988:	f8ad 4000 	strh.w	r4, [sp]
   bf98c:	f7fe fc68 	bl	be260 <spark_function>
}
   bf990:	b004      	add	sp, #16
   bf992:	bd10      	pop	{r4, pc}

000bf994 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf994:	680b      	ldr	r3, [r1, #0]
   bf996:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf998:	684b      	ldr	r3, [r1, #4]
   bf99a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf99c:	b113      	cbz	r3, bf9a4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bf99e:	685a      	ldr	r2, [r3, #4]
   bf9a0:	3201      	adds	r2, #1
   bf9a2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf9a4:	4770      	bx	lr

000bf9a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bf9a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf9a8:	4604      	mov	r4, r0
   bf9aa:	4668      	mov	r0, sp
   bf9ac:	460d      	mov	r5, r1
   bf9ae:	f7ff fff1 	bl	bf994 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf9b2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf9b4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf9b6:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bf9b8:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bf9ba:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf9bc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bf9be:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bf9c0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bf9c2:	f7ff f9ca 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bf9c6:	b135      	cbz	r5, bf9d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bf9c8:	1d28      	adds	r0, r5, #4
   bf9ca:	f7ff f9c6 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf9ce:	2108      	movs	r1, #8
   bf9d0:	4628      	mov	r0, r5
   bf9d2:	f7f4 fb66 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bf9d6:	4620      	mov	r0, r4
   bf9d8:	b003      	add	sp, #12
   bf9da:	bd30      	pop	{r4, r5, pc}

000bf9dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bf9dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf9de:	b510      	push	{r4, lr}
      if (_M_empty())
   bf9e0:	b90a      	cbnz	r2, bf9e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bf9e2:	f002 fc2f 	bl	c2244 <_ZSt25__throw_bad_function_callv>
    }
   bf9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf9ea:	68c3      	ldr	r3, [r0, #12]
   bf9ec:	4718      	bx	r3

000bf9ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf9ee:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf9f0:	6800      	ldr	r0, [r0, #0]
   bf9f2:	f100 0110 	add.w	r1, r0, #16
   bf9f6:	f7ff fff1 	bl	bf9dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bf9fa:	bd08      	pop	{r3, pc}

000bf9fc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bf9fc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf9fe:	b510      	push	{r4, lr}
      if (_M_empty())
   bfa00:	b90a      	cbnz	r2, bfa06 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bfa02:	f002 fc1f 	bl	c2244 <_ZSt25__throw_bad_function_callv>
    }
   bfa06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bfa0a:	68c3      	ldr	r3, [r0, #12]
   bfa0c:	4718      	bx	r3

000bfa0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bfa0e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bfa10:	6800      	ldr	r0, [r0, #0]
   bfa12:	f100 0110 	add.w	r1, r0, #16
   bfa16:	f7ff fff1 	bl	bf9fc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bfa1a:	bd08      	pop	{r3, pc}

000bfa1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bfa1c:	b538      	push	{r3, r4, r5, lr}
   bfa1e:	2300      	movs	r3, #0
   bfa20:	4604      	mov	r4, r0
   bfa22:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bfa24:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bfa26:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bfa28:	f7f4 fb35 	bl	b4096 <_Znwj>
   bfa2c:	b128      	cbz	r0, bfa3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bfa2e:	2301      	movs	r3, #1
   bfa30:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bfa34:	4b02      	ldr	r3, [pc, #8]	; (bfa40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bfa36:	6003      	str	r3, [r0, #0]
   bfa38:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bfa3a:	6020      	str	r0, [r4, #0]
	}
   bfa3c:	4620      	mov	r0, r4
   bfa3e:	bd38      	pop	{r3, r4, r5, pc}
   bfa40:	000c7f68 	.word	0x000c7f68

000bfa44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bfa44:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bfa46:	2300      	movs	r3, #0
   bfa48:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bfa4a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bfa4c:	4604      	mov	r4, r0
   bfa4e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bfa50:	b12b      	cbz	r3, bfa5e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bfa52:	2202      	movs	r2, #2
   bfa54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bfa56:	68eb      	ldr	r3, [r5, #12]
   bfa58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bfa5a:	68ab      	ldr	r3, [r5, #8]
   bfa5c:	60a3      	str	r3, [r4, #8]
    }
   bfa5e:	4620      	mov	r0, r4
   bfa60:	bd38      	pop	{r3, r4, r5, pc}
	...

000bfa64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bfa64:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfa66:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bfa68:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bfa6a:	4668      	mov	r0, sp
   bfa6c:	f7ff ff34 	bl	bf8d8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bfa70:	f04f 0302 	mov.w	r3, #2
   bfa74:	e8d4 2f4f 	ldrexb	r2, [r4]
   bfa78:	2a00      	cmp	r2, #0
   bfa7a:	d103      	bne.n	bfa84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bfa7c:	e8c4 3f41 	strexb	r1, r3, [r4]
   bfa80:	2900      	cmp	r1, #0
   bfa82:	d1f7      	bne.n	bfa74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bfa84:	d125      	bne.n	bfad2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bfa86:	f104 050c 	add.w	r5, r4, #12
   bfa8a:	4669      	mov	r1, sp
   bfa8c:	4628      	mov	r0, r5
   bfa8e:	f7ff ff23 	bl	bf8d8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bfa92:	f3bf 8f5b 	dmb	ish
   bfa96:	2301      	movs	r3, #1
   bfa98:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bfa9a:	2000      	movs	r0, #0
   bfa9c:	f104 0308 	add.w	r3, r4, #8
   bfaa0:	f3bf 8f5b 	dmb	ish
   bfaa4:	e853 6f00 	ldrex	r6, [r3]
   bfaa8:	e843 0200 	strex	r2, r0, [r3]
   bfaac:	2a00      	cmp	r2, #0
   bfaae:	d1f9      	bne.n	bfaa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bfab0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bfab4:	b16e      	cbz	r6, bfad2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bfab6:	f7fe fb9f 	bl	be1f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bfaba:	b178      	cbz	r0, bfadc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bfabc:	4629      	mov	r1, r5
   bfabe:	4630      	mov	r0, r6
   bfac0:	f7ff ff8c 	bl	bf9dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bfac4:	4630      	mov	r0, r6
   bfac6:	f7f4 fd05 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bfaca:	2110      	movs	r1, #16
   bfacc:	4630      	mov	r0, r6
   bface:	f7f4 fae8 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bfad2:	4668      	mov	r0, sp
   bfad4:	f7ff ff0d 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
    }
   bfad8:	b009      	add	sp, #36	; 0x24
   bfada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bfadc:	4631      	mov	r1, r6
   bfade:	a802      	add	r0, sp, #8
   bfae0:	f7ff ffb0 	bl	bfa44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bfae4:	68e0      	ldr	r0, [r4, #12]
   bfae6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfaea:	b108      	cbz	r0, bfaf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bfaec:	f004 fe3e 	bl	c476c <strdup>
        type_(type) {
   bfaf0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bfaf2:	2010      	movs	r0, #16
   bfaf4:	f8ad 501c 	strh.w	r5, [sp, #28]
   bfaf8:	f7f4 facd 	bl	b4096 <_Znwj>
   bfafc:	4605      	mov	r5, r0
   bfafe:	b1e8      	cbz	r0, bfb3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bfb00:	2700      	movs	r7, #0
   bfb02:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfb04:	2018      	movs	r0, #24
   bfb06:	f7f4 fac6 	bl	b4096 <_Znwj>
   bfb0a:	4604      	mov	r4, r0
   bfb0c:	b188      	cbz	r0, bfb32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bfb0e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bfb10:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfb12:	a802      	add	r0, sp, #8
   bfb14:	f7ff fbfe 	bl	bf314 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfb18:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfb1a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfb1c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfb1e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfb20:	9204      	str	r2, [sp, #16]
   bfb22:	a906      	add	r1, sp, #24
   bfb24:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfb26:	60e3      	str	r3, [r4, #12]
   bfb28:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bfb2c:	9205      	str	r2, [sp, #20]
   bfb2e:	f7ff fed3 	bl	bf8d8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bfb32:	4b08      	ldr	r3, [pc, #32]	; (bfb54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bfb34:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfb36:	4b08      	ldr	r3, [pc, #32]	; (bfb58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfb38:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfb3a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bfb3c:	a806      	add	r0, sp, #24
   bfb3e:	f7ff fed8 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfb42:	a802      	add	r0, sp, #8
   bfb44:	f7f4 fcc6 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfb48:	2200      	movs	r2, #0
   bfb4a:	4629      	mov	r1, r5
   bfb4c:	4803      	ldr	r0, [pc, #12]	; (bfb5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bfb4e:	f7fe fb5b 	bl	be208 <application_thread_invoke>
   bfb52:	e7b7      	b.n	bfac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bfb54:	000bf9ef 	.word	0x000bf9ef
   bfb58:	000bfc71 	.word	0x000bfc71
   bfb5c:	000be48f 	.word	0x000be48f

000bfb60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bfb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfb64:	b08b      	sub	sp, #44	; 0x2c
   bfb66:	4605      	mov	r5, r0
   bfb68:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bfb6c:	460f      	mov	r7, r1
   bfb6e:	4690      	mov	r8, r2
   bfb70:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfb72:	f7fe fb8d 	bl	be290 <spark_cloud_flag_connected>
   bfb76:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bfb78:	4683      	mov	fp, r0
   bfb7a:	bb38      	cbnz	r0, bfbcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bfb7c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bfb80:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfb82:	a905      	add	r1, sp, #20
   bfb84:	4630      	mov	r0, r6
   bfb86:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfb8a:	f7ff fea5 	bl	bf8d8 <_ZN8particle5ErrorC1EOS0_>
   bfb8e:	2014      	movs	r0, #20
   bfb90:	f7f4 fa81 	bl	b4096 <_Znwj>
   bfb94:	4604      	mov	r4, r0
   bfb96:	b148      	cbz	r0, bfbac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bfb98:	2302      	movs	r3, #2
   bfb9a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfb9c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfb9e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfba2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bfba4:	4631      	mov	r1, r6
   bfba6:	300c      	adds	r0, #12
   bfba8:	f7ff fe96 	bl	bf8d8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfbac:	4628      	mov	r0, r5
	: __shared_count(__p)
   bfbae:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfbb0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bfbb4:	f7ff ff32 	bl	bfa1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfbb8:	4630      	mov	r0, r6
   bfbba:	f7ff fe9a 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bfbbe:	a805      	add	r0, sp, #20
   bfbc0:	f7ff fe97 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bfbc4:	4628      	mov	r0, r5
   bfbc6:	b00b      	add	sp, #44	; 0x2c
   bfbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bfbcc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bfbce:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bfbd0:	2014      	movs	r0, #20
   bfbd2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bfbd6:	9307      	str	r3, [sp, #28]
   bfbd8:	f7f4 fa5d 	bl	b4096 <_Znwj>
   bfbdc:	4601      	mov	r1, r0
   bfbde:	b118      	cbz	r0, bfbe8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfbe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfbe4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfbe6:	7044      	strb	r4, [r0, #1]
   bfbe8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfbea:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bfbec:	f7ff ff16 	bl	bfa1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bfbf0:	4b1e      	ldr	r3, [pc, #120]	; (bfc6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bfbf2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bfbf4:	2008      	movs	r0, #8
   bfbf6:	f7f4 fa4e 	bl	b4096 <_Znwj>
   bfbfa:	4604      	mov	r4, r0
   bfbfc:	b110      	cbz	r0, bfc04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bfbfe:	a903      	add	r1, sp, #12
   bfc00:	f7ff fec8 	bl	bf994 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfc04:	9600      	str	r6, [sp, #0]
   bfc06:	fa5f f38a 	uxtb.w	r3, sl
   bfc0a:	464a      	mov	r2, r9
   bfc0c:	4641      	mov	r1, r8
   bfc0e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bfc10:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfc12:	f7fe fb45 	bl	be2a0 <spark_send_event>
   bfc16:	b9b8      	cbnz	r0, bfc48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bfc18:	9b03      	ldr	r3, [sp, #12]
   bfc1a:	785b      	ldrb	r3, [r3, #1]
   bfc1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bfc20:	b993      	cbnz	r3, bfc48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bfc22:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bfc26:	a905      	add	r1, sp, #20
   bfc28:	a803      	add	r0, sp, #12
   bfc2a:	9205      	str	r2, [sp, #20]
   bfc2c:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfc30:	f7ff ff18 	bl	bfa64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfc34:	a805      	add	r0, sp, #20
   bfc36:	f7ff fe5c 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bfc3a:	a805      	add	r0, sp, #20
   bfc3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   bfc3e:	f7ff feb2 	bl	bf9a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bfc42:	a806      	add	r0, sp, #24
   bfc44:	f7ff f889 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc48:	a903      	add	r1, sp, #12
   bfc4a:	a805      	add	r0, sp, #20
   bfc4c:	f7ff fea2 	bl	bf994 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfc50:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bfc52:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfc54:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bfc56:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bfc58:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bfc5a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bfc5c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bfc5e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bfc60:	f7ff f87b 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfc64:	a804      	add	r0, sp, #16
   bfc66:	f7ff f878 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bfc6a:	e7ab      	b.n	bfbc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bfc6c:	000bfced 	.word	0x000bfced

000bfc70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bfc70:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfc74:	4605      	mov	r5, r0
	switch (__op)
   bfc76:	d103      	bne.n	bfc80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfc78:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfc7a:	6003      	str	r3, [r0, #0]
      }
   bfc7c:	2000      	movs	r0, #0
   bfc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bfc80:	2a02      	cmp	r2, #2
   bfc82:	d010      	beq.n	bfca6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bfc84:	2a03      	cmp	r2, #3
   bfc86:	d1f9      	bne.n	bfc7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfc88:	6804      	ldr	r4, [r0, #0]
   bfc8a:	2c00      	cmp	r4, #0
   bfc8c:	d0f6      	beq.n	bfc7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bfc8e:	f104 0010 	add.w	r0, r4, #16
   bfc92:	f7ff fe2e 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfc96:	4620      	mov	r0, r4
   bfc98:	f7f4 fc1c 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfc9c:	2118      	movs	r1, #24
   bfc9e:	4620      	mov	r0, r4
   bfca0:	f7f4 f9ff 	bl	b40a2 <_ZdlPvj>
   bfca4:	e7ea      	b.n	bfc7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfca6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bfca8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfcaa:	f7f4 f9f4 	bl	b4096 <_Znwj>
   bfcae:	4604      	mov	r4, r0
   bfcb0:	b150      	cbz	r0, bfcc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bfcb2:	4631      	mov	r1, r6
   bfcb4:	f7ff fec6 	bl	bfa44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bfcb8:	6930      	ldr	r0, [r6, #16]
   bfcba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfcbe:	b108      	cbz	r0, bfcc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bfcc0:	f004 fd54 	bl	c476c <strdup>
        type_(type) {
   bfcc4:	6120      	str	r0, [r4, #16]
   bfcc6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bfcc8:	602c      	str	r4, [r5, #0]
	}
   bfcca:	e7d7      	b.n	bfc7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bfccc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bfccc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bfcce:	2300      	movs	r3, #0
   bfcd0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bfcd2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bfcd4:	4604      	mov	r4, r0
   bfcd6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bfcd8:	b12b      	cbz	r3, bfce6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bfcda:	2202      	movs	r2, #2
   bfcdc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bfcde:	68eb      	ldr	r3, [r5, #12]
   bfce0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bfce2:	68ab      	ldr	r3, [r5, #8]
   bfce4:	60a3      	str	r3, [r4, #8]
    }
   bfce6:	4620      	mov	r0, r4
   bfce8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bfcec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bfcec:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfcee:	b089      	sub	sp, #36	; 0x24
   bfcf0:	4604      	mov	r4, r0
   bfcf2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bfcf4:	a801      	add	r0, sp, #4
   bfcf6:	4611      	mov	r1, r2
   bfcf8:	f7ff fe55 	bl	bf9a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bfcfc:	b1a4      	cbz	r4, bfd28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bfcfe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfd00:	b11d      	cbz	r5, bfd0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bfd02:	4628      	mov	r0, r5
   bfd04:	f004 fd32 	bl	c476c <strdup>
   bfd08:	4605      	mov	r5, r0
   bfd0a:	a801      	add	r0, sp, #4
   bfd0c:	a903      	add	r1, sp, #12
        type_(type) {
   bfd0e:	9503      	str	r5, [sp, #12]
   bfd10:	f8ad 4010 	strh.w	r4, [sp, #16]
   bfd14:	f7ff fea6 	bl	bfa64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfd18:	a803      	add	r0, sp, #12
   bfd1a:	f7ff fdea 	bl	bf8f2 <_ZN8particle5ErrorD1Ev>
   bfd1e:	a802      	add	r0, sp, #8
   bfd20:	f7ff f81b 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfd24:	b009      	add	sp, #36	; 0x24
   bfd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bfd28:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bfd2a:	2301      	movs	r3, #1
   bfd2c:	e8d5 2f4f 	ldrexb	r2, [r5]
   bfd30:	2a00      	cmp	r2, #0
   bfd32:	d103      	bne.n	bfd3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bfd34:	e8c5 3f41 	strexb	r1, r3, [r5]
   bfd38:	2900      	cmp	r1, #0
   bfd3a:	d1f7      	bne.n	bfd2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bfd3c:	d1ef      	bne.n	bfd1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bfd3e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bfd40:	f3bf 8f5b 	dmb	ish
   bfd44:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bfd46:	1d2b      	adds	r3, r5, #4
   bfd48:	f3bf 8f5b 	dmb	ish
   bfd4c:	e853 6f00 	ldrex	r6, [r3]
   bfd50:	e843 4200 	strex	r2, r4, [r3]
   bfd54:	2a00      	cmp	r2, #0
   bfd56:	d1f9      	bne.n	bfd4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bfd58:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bfd5c:	2e00      	cmp	r6, #0
   bfd5e:	d0de      	beq.n	bfd1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bfd60:	4620      	mov	r0, r4
   bfd62:	f7fe fa49 	bl	be1f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bfd66:	4607      	mov	r7, r0
   bfd68:	b160      	cbz	r0, bfd84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bfd6a:	f105 010c 	add.w	r1, r5, #12
   bfd6e:	4630      	mov	r0, r6
   bfd70:	f7ff fe44 	bl	bf9fc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bfd74:	4630      	mov	r0, r6
   bfd76:	f7f4 fbad 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bfd7a:	2110      	movs	r1, #16
   bfd7c:	4630      	mov	r0, r6
   bfd7e:	f7f4 f990 	bl	b40a2 <_ZdlPvj>
   bfd82:	e7cc      	b.n	bfd1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bfd84:	4631      	mov	r1, r6
   bfd86:	a803      	add	r0, sp, #12
   bfd88:	f7ff ffa0 	bl	bfccc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bfd8c:	7b2b      	ldrb	r3, [r5, #12]
   bfd8e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bfd92:	2010      	movs	r0, #16
   bfd94:	f7f4 f97f 	bl	b4096 <_Znwj>
   bfd98:	4605      	mov	r5, r0
   bfd9a:	b1d0      	cbz	r0, bfdd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bfd9c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfd9e:	2014      	movs	r0, #20
   bfda0:	f7f4 f979 	bl	b4096 <_Znwj>
   bfda4:	4604      	mov	r4, r0
   bfda6:	b178      	cbz	r0, bfdc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bfda8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfdaa:	4601      	mov	r1, r0
   bfdac:	a803      	add	r0, sp, #12
   bfdae:	f7ff fab1 	bl	bf314 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfdb2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfdb4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdb6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfdb8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bfdba:	9205      	str	r2, [sp, #20]
   bfdbc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdbe:	60e3      	str	r3, [r4, #12]
   bfdc0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bfdc4:	9206      	str	r2, [sp, #24]
   bfdc6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bfdc8:	4b06      	ldr	r3, [pc, #24]	; (bfde4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bfdca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfdcc:	4b06      	ldr	r3, [pc, #24]	; (bfde8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfdce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfdd0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bfdd2:	a803      	add	r0, sp, #12
   bfdd4:	f7f4 fb7e 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfdd8:	2200      	movs	r2, #0
   bfdda:	4629      	mov	r1, r5
   bfddc:	4803      	ldr	r0, [pc, #12]	; (bfdec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bfdde:	f7fe fa13 	bl	be208 <application_thread_invoke>
   bfde2:	e7c7      	b.n	bfd74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bfde4:	000bfa0f 	.word	0x000bfa0f
   bfde8:	000bfdf1 	.word	0x000bfdf1
   bfdec:	000be48f 	.word	0x000be48f

000bfdf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bfdf0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfdf2:	b570      	push	{r4, r5, r6, lr}
   bfdf4:	4604      	mov	r4, r0
	switch (__op)
   bfdf6:	d103      	bne.n	bfe00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfdf8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfdfa:	6003      	str	r3, [r0, #0]
      }
   bfdfc:	2000      	movs	r0, #0
   bfdfe:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bfe00:	2a02      	cmp	r2, #2
   bfe02:	d00c      	beq.n	bfe1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bfe04:	2a03      	cmp	r2, #3
   bfe06:	d1f9      	bne.n	bfdfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfe08:	6804      	ldr	r4, [r0, #0]
   bfe0a:	2c00      	cmp	r4, #0
   bfe0c:	d0f6      	beq.n	bfdfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bfe0e:	4620      	mov	r0, r4
   bfe10:	f7f4 fb60 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfe14:	2114      	movs	r1, #20
   bfe16:	4620      	mov	r0, r4
   bfe18:	f7f4 f943 	bl	b40a2 <_ZdlPvj>
   bfe1c:	e7ee      	b.n	bfdfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfe1e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bfe20:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfe22:	f7f4 f938 	bl	b4096 <_Znwj>
   bfe26:	4605      	mov	r5, r0
   bfe28:	b120      	cbz	r0, bfe34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bfe2a:	4631      	mov	r1, r6
   bfe2c:	f7ff ff4e 	bl	bfccc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bfe30:	7c33      	ldrb	r3, [r6, #16]
   bfe32:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bfe34:	6025      	str	r5, [r4, #0]
	}
   bfe36:	e7e1      	b.n	bfdfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bfe38 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bfe38:	2200      	movs	r2, #0
   bfe3a:	6840      	ldr	r0, [r0, #4]
   bfe3c:	4611      	mov	r1, r2
   bfe3e:	f7fe ba87 	b.w	be350 <network_listening>

000bfe42 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bfe42:	2200      	movs	r2, #0
   bfe44:	6840      	ldr	r0, [r0, #4]
   bfe46:	4611      	mov	r1, r2
   bfe48:	f7fe ba92 	b.w	be370 <network_get_listen_timeout>

000bfe4c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bfe4c:	6840      	ldr	r0, [r0, #4]
   bfe4e:	2200      	movs	r2, #0
   bfe50:	f7fe ba86 	b.w	be360 <network_set_listen_timeout>

000bfe54 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bfe54:	6840      	ldr	r0, [r0, #4]
   bfe56:	2200      	movs	r2, #0
   bfe58:	f081 0101 	eor.w	r1, r1, #1
   bfe5c:	f7fe ba70 	b.w	be340 <network_listen>

000bfe60 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bfe60:	2300      	movs	r3, #0
   bfe62:	6840      	ldr	r0, [r0, #4]
   bfe64:	461a      	mov	r2, r3
   bfe66:	4619      	mov	r1, r3
   bfe68:	f7fe ba62 	b.w	be330 <network_off>

000bfe6c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bfe6c:	2300      	movs	r3, #0
   bfe6e:	6840      	ldr	r0, [r0, #4]
   bfe70:	461a      	mov	r2, r3
   bfe72:	4619      	mov	r1, r3
   bfe74:	f7fe ba54 	b.w	be320 <network_on>

000bfe78 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bfe78:	2200      	movs	r2, #0
   bfe7a:	6840      	ldr	r0, [r0, #4]
   bfe7c:	4611      	mov	r1, r2
   bfe7e:	f7fe ba47 	b.w	be310 <network_ready>

000bfe82 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bfe82:	2200      	movs	r2, #0
   bfe84:	6840      	ldr	r0, [r0, #4]
   bfe86:	4611      	mov	r1, r2
   bfe88:	f7fe ba32 	b.w	be2f0 <network_connecting>

000bfe8c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bfe8c:	6840      	ldr	r0, [r0, #4]
   bfe8e:	2200      	movs	r2, #0
   bfe90:	2102      	movs	r1, #2
   bfe92:	f7fe ba35 	b.w	be300 <network_disconnect>

000bfe96 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bfe96:	2300      	movs	r3, #0
   bfe98:	6840      	ldr	r0, [r0, #4]
   bfe9a:	461a      	mov	r2, r3
   bfe9c:	f7fe ba20 	b.w	be2e0 <network_connect>

000bfea0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bfea0:	4b02      	ldr	r3, [pc, #8]	; (bfeac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bfea2:	2203      	movs	r2, #3
   bfea4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bfea6:	4a02      	ldr	r2, [pc, #8]	; (bfeb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bfea8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bfeaa:	4770      	bx	lr
   bfeac:	2003e65c 	.word	0x2003e65c
   bfeb0:	000c7f84 	.word	0x000c7f84

000bfeb4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bfeb4:	4770      	bx	lr

000bfeb6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bfeb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfeb8:	4606      	mov	r6, r0
   bfeba:	4615      	mov	r5, r2
   bfebc:	460c      	mov	r4, r1
   bfebe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bfec0:	42bc      	cmp	r4, r7
   bfec2:	d006      	beq.n	bfed2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bfec4:	6833      	ldr	r3, [r6, #0]
   bfec6:	f814 1b01 	ldrb.w	r1, [r4], #1
   bfeca:	689b      	ldr	r3, [r3, #8]
   bfecc:	4630      	mov	r0, r6
   bfece:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bfed0:	e7f6      	b.n	bfec0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bfed2:	4628      	mov	r0, r5
   bfed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfed6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bfed6:	7c00      	ldrb	r0, [r0, #16]
   bfed8:	2200      	movs	r2, #0
   bfeda:	f7fd bffb 	b.w	bded4 <hal_i2c_write>

000bfede <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bfede:	7c00      	ldrb	r0, [r0, #16]
   bfee0:	2100      	movs	r1, #0
   bfee2:	f7fd bfff 	b.w	bdee4 <hal_i2c_available>

000bfee6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bfee6:	7c00      	ldrb	r0, [r0, #16]
   bfee8:	2100      	movs	r1, #0
   bfeea:	f7fe b803 	b.w	bdef4 <hal_i2c_read>

000bfeee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bfeee:	7c00      	ldrb	r0, [r0, #16]
   bfef0:	2100      	movs	r1, #0
   bfef2:	f7fe b807 	b.w	bdf04 <hal_i2c_peek>

000bfef6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bfef6:	7c00      	ldrb	r0, [r0, #16]
   bfef8:	2100      	movs	r1, #0
   bfefa:	f7fe b80b 	b.w	bdf14 <hal_i2c_flush>

000bfefe <_ZN7TwoWireD0Ev>:
   bfefe:	b510      	push	{r4, lr}
   bff00:	2114      	movs	r1, #20
   bff02:	4604      	mov	r4, r0
   bff04:	f7f4 f8cd 	bl	b40a2 <_ZdlPvj>
   bff08:	4620      	mov	r0, r4
   bff0a:	bd10      	pop	{r4, pc}

000bff0c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bff0c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bff0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bff12:	4604      	mov	r4, r0
   bff14:	4608      	mov	r0, r1
   bff16:	2100      	movs	r1, #0
   bff18:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bff1c:	4b03      	ldr	r3, [pc, #12]	; (bff2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bff1e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bff20:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bff22:	4611      	mov	r1, r2
   bff24:	f7fe f806 	bl	bdf34 <hal_i2c_init>
}
   bff28:	4620      	mov	r0, r4
   bff2a:	bd10      	pop	{r4, pc}
   bff2c:	000c7fc0 	.word	0x000c7fc0

000bff30 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bff30:	7c00      	ldrb	r0, [r0, #16]
   bff32:	2200      	movs	r2, #0
   bff34:	f7fd bfae 	b.w	bde94 <hal_i2c_set_speed>

000bff38 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bff38:	2300      	movs	r3, #0
   bff3a:	7c00      	ldrb	r0, [r0, #16]
   bff3c:	461a      	mov	r2, r3
   bff3e:	4619      	mov	r1, r3
   bff40:	f7fd bfb0 	b.w	bdea4 <hal_i2c_begin>

000bff44 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bff44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bff46:	2200      	movs	r2, #0
   bff48:	2314      	movs	r3, #20
   bff4a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bff4e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bff52:	780b      	ldrb	r3, [r1, #0]
   bff54:	f88d 3008 	strb.w	r3, [sp, #8]
   bff58:	684b      	ldr	r3, [r1, #4]
   bff5a:	9303      	str	r3, [sp, #12]
   bff5c:	68cb      	ldr	r3, [r1, #12]
   bff5e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bff60:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bff62:	7a0b      	ldrb	r3, [r1, #8]
   bff64:	9305      	str	r3, [sp, #20]
   bff66:	a901      	add	r1, sp, #4
   bff68:	f7fd ffec 	bl	bdf44 <hal_i2c_request_ex>
}
   bff6c:	b007      	add	sp, #28
   bff6e:	f85d fb04 	ldr.w	pc, [sp], #4

000bff72 <_ZN7TwoWire11requestFromEhjh>:
{
   bff72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bff74:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bff76:	f88d 1000 	strb.w	r1, [sp]
   bff7a:	f04f 0164 	mov.w	r1, #100	; 0x64
   bff7e:	9103      	str	r1, [sp, #12]
   bff80:	bf18      	it	ne
   bff82:	2301      	movne	r3, #1
   bff84:	4669      	mov	r1, sp
    size_ = size;
   bff86:	9201      	str	r2, [sp, #4]
   bff88:	f88d 3008 	strb.w	r3, [sp, #8]
   bff8c:	f7ff ffda 	bl	bff44 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bff90:	b005      	add	sp, #20
   bff92:	f85d fb04 	ldr.w	pc, [sp], #4

000bff96 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bff96:	2301      	movs	r3, #1
   bff98:	f7ff bfeb 	b.w	bff72 <_ZN7TwoWire11requestFromEhjh>

000bff9c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bff9c:	7c00      	ldrb	r0, [r0, #16]
   bff9e:	2200      	movs	r2, #0
   bffa0:	f7fd bf88 	b.w	bdeb4 <hal_i2c_begin_transmission>

000bffa4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bffa4:	b2c9      	uxtb	r1, r1
   bffa6:	f7ff bff9 	b.w	bff9c <_ZN7TwoWire17beginTransmissionEh>

000bffaa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bffaa:	7c00      	ldrb	r0, [r0, #16]
   bffac:	2200      	movs	r2, #0
   bffae:	f7fd bf89 	b.w	bdec4 <hal_i2c_end_transmission>

000bffb2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bffb2:	2101      	movs	r1, #1
   bffb4:	f7ff bff9 	b.w	bffaa <_ZN7TwoWire15endTransmissionEh>

000bffb8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bffb8:	4700      	bx	r0
	...

000bffbc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bffbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bffc0:	2400      	movs	r4, #0
{
   bffc2:	461d      	mov	r5, r3
   bffc4:	460f      	mov	r7, r1
   bffc6:	4690      	mov	r8, r2
   bffc8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bffca:	f7fd ff43 	bl	bde54 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bffce:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bffd0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bffd4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bffd8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bffdc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bffe0:	bfa2      	ittt	ge
   bffe2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bffe6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bffea:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bffec:	4907      	ldr	r1, [pc, #28]	; (c000c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bffee:	9400      	str	r4, [sp, #0]
   bfff0:	4643      	mov	r3, r8
   bfff2:	463a      	mov	r2, r7
   bfff4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bfff6:	bfa8      	it	ge
   bfff8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bfffc:	f7fd ff22 	bl	bde44 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   c0000:	fab0 f080 	clz	r0, r0
   c0004:	0940      	lsrs	r0, r0, #5
   c0006:	b004      	add	sp, #16
   c0008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c000c:	000bffb9 	.word	0x000bffb9

000c0010 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   c0010:	f7fd bf30 	b.w	bde74 <HAL_Interrupts_Disable_All>

000c0014 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   c0014:	f7fd bf26 	b.w	bde64 <HAL_Interrupts_Enable_All>

000c0018 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c0018:	4770      	bx	lr

000c001a <_ZN9IPAddressD0Ev>:
   c001a:	b510      	push	{r4, lr}
   c001c:	2118      	movs	r1, #24
   c001e:	4604      	mov	r4, r0
   c0020:	f7f4 f83f 	bl	b40a2 <_ZdlPvj>
   c0024:	4620      	mov	r0, r4
   c0026:	bd10      	pop	{r4, pc}

000c0028 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c0028:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c002a:	7d03      	ldrb	r3, [r0, #20]
   c002c:	2b06      	cmp	r3, #6
{
   c002e:	b08d      	sub	sp, #52	; 0x34
   c0030:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c0032:	f100 0704 	add.w	r7, r0, #4
   c0036:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c003a:	d012      	beq.n	c0062 <_ZNK9IPAddress7printToER5Print+0x3a>
   c003c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c0040:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c0044:	220a      	movs	r2, #10
   c0046:	4630      	mov	r0, r6
   c0048:	f001 fabd 	bl	c15c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c004c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c004e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c0050:	d019      	beq.n	c0086 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c0052:	2c00      	cmp	r4, #0
   c0054:	d0f4      	beq.n	c0040 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c0056:	212e      	movs	r1, #46	; 0x2e
   c0058:	4630      	mov	r0, r6
   c005a:	f001 fa95 	bl	c1588 <_ZN5Print5printEc>
   c005e:	4404      	add	r4, r0
   c0060:	e7ee      	b.n	c0040 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c0062:	232f      	movs	r3, #47	; 0x2f
   c0064:	466a      	mov	r2, sp
   c0066:	4639      	mov	r1, r7
   c0068:	200a      	movs	r0, #10
		buf[0] = 0;
   c006a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c006e:	f7fd ff71 	bl	bdf54 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c0072:	4668      	mov	r0, sp
   c0074:	f004 fb97 	bl	c47a6 <strlen>
   c0078:	6833      	ldr	r3, [r6, #0]
   c007a:	4602      	mov	r2, r0
   c007c:	68db      	ldr	r3, [r3, #12]
   c007e:	4669      	mov	r1, sp
   c0080:	4630      	mov	r0, r6
   c0082:	4798      	blx	r3
   c0084:	4604      	mov	r4, r0
    }
    return n;
}
   c0086:	4620      	mov	r0, r4
   c0088:	b00d      	add	sp, #52	; 0x34
   c008a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c008c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c008c:	b510      	push	{r4, lr}
   c008e:	4b05      	ldr	r3, [pc, #20]	; (c00a4 <_ZN9IPAddressC1Ev+0x18>)
   c0090:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c0092:	2211      	movs	r2, #17
   c0094:	f840 3b04 	str.w	r3, [r0], #4
   c0098:	2100      	movs	r1, #0
   c009a:	f004 faf9 	bl	c4690 <memset>
}
   c009e:	4620      	mov	r0, r4
   c00a0:	bd10      	pop	{r4, pc}
   c00a2:	bf00      	nop
   c00a4:	000c7fe8 	.word	0x000c7fe8

000c00a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c00a8:	4603      	mov	r3, r0
   c00aa:	4a07      	ldr	r2, [pc, #28]	; (c00c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c00ac:	b510      	push	{r4, lr}
   c00ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c00b2:	f101 0210 	add.w	r2, r1, #16
   c00b6:	f851 4b04 	ldr.w	r4, [r1], #4
   c00ba:	f843 4b04 	str.w	r4, [r3], #4
   c00be:	4291      	cmp	r1, r2
   c00c0:	d1f9      	bne.n	c00b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c00c2:	780a      	ldrb	r2, [r1, #0]
   c00c4:	701a      	strb	r2, [r3, #0]
}
   c00c6:	bd10      	pop	{r4, pc}
   c00c8:	000c7fe8 	.word	0x000c7fe8

000c00cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c00cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c00ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c00d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c00d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c00da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c00de:	2304      	movs	r3, #4
   c00e0:	6041      	str	r1, [r0, #4]
   c00e2:	7503      	strb	r3, [r0, #20]
}
   c00e4:	bd10      	pop	{r4, pc}
	...

000c00e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c00e8:	b507      	push	{r0, r1, r2, lr}
   c00ea:	4b06      	ldr	r3, [pc, #24]	; (c0104 <_ZN9IPAddressC1EPKh+0x1c>)
   c00ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c00ee:	78cb      	ldrb	r3, [r1, #3]
   c00f0:	9300      	str	r3, [sp, #0]
   c00f2:	788b      	ldrb	r3, [r1, #2]
   c00f4:	784a      	ldrb	r2, [r1, #1]
   c00f6:	7809      	ldrb	r1, [r1, #0]
   c00f8:	f7ff ffe8 	bl	c00cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c00fc:	b003      	add	sp, #12
   c00fe:	f85d fb04 	ldr.w	pc, [sp], #4
   c0102:	bf00      	nop
   c0104:	000c7fe8 	.word	0x000c7fe8

000c0108 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c0108:	f100 0310 	add.w	r3, r0, #16
   c010c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c010e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c0112:	2901      	cmp	r1, #1
   c0114:	4618      	mov	r0, r3
   c0116:	d108      	bne.n	c012a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c0118:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c011c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c0120:	3a01      	subs	r2, #1
   c0122:	f103 0310 	add.w	r3, r3, #16
   c0126:	d1f2      	bne.n	c010e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c0128:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c012a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c012c:	bf04      	itt	eq
   c012e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c0132:	1852      	addeq	r2, r2, r1
   c0134:	e7f4      	b.n	c0120 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c0136 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c0136:	b40e      	push	{r1, r2, r3}
   c0138:	b5f0      	push	{r4, r5, r6, r7, lr}
   c013a:	b088      	sub	sp, #32
   c013c:	af00      	add	r7, sp, #0
   c013e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0142:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c0144:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0148:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c014a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c014c:	462b      	mov	r3, r5
   c014e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c0150:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0152:	f7fe f955 	bl	be400 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c0156:	280f      	cmp	r0, #15
   c0158:	687a      	ldr	r2, [r7, #4]
   c015a:	d91a      	bls.n	c0192 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c015c:	f100 0308 	add.w	r3, r0, #8
   c0160:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c0164:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c0166:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c016a:	1c41      	adds	r1, r0, #1
   c016c:	462b      	mov	r3, r5
   c016e:	4668      	mov	r0, sp
        va_start(args, fmt);
   c0170:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0172:	f7fe f945 	bl	be400 <vsnprintf>
        if (n > 0) {
   c0176:	1e02      	subs	r2, r0, #0
   c0178:	dd04      	ble.n	c0184 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c017a:	6823      	ldr	r3, [r4, #0]
   c017c:	4669      	mov	r1, sp
   c017e:	689b      	ldr	r3, [r3, #8]
   c0180:	4620      	mov	r0, r4
   c0182:	4798      	blx	r3
   c0184:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c0186:	3720      	adds	r7, #32
   c0188:	46bd      	mov	sp, r7
   c018a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c018e:	b003      	add	sp, #12
   c0190:	4770      	bx	lr
    } else if (n > 0) {
   c0192:	2800      	cmp	r0, #0
   c0194:	d0f7      	beq.n	c0186 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c0196:	6823      	ldr	r3, [r4, #0]
   c0198:	4602      	mov	r2, r0
   c019a:	689b      	ldr	r3, [r3, #8]
   c019c:	f107 0110 	add.w	r1, r7, #16
   c01a0:	4620      	mov	r0, r4
   c01a2:	4798      	blx	r3
}
   c01a4:	e7ef      	b.n	c0186 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c01a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c01a6:	b538      	push	{r3, r4, r5, lr}
   c01a8:	680b      	ldr	r3, [r1, #0]
   c01aa:	6003      	str	r3, [r0, #0]
   c01ac:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c01ae:	6843      	ldr	r3, [r0, #4]
   c01b0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c01b2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c01b4:	d008      	beq.n	c01c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c01b6:	b115      	cbz	r5, c01be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c01b8:	686b      	ldr	r3, [r5, #4]
   c01ba:	3301      	adds	r3, #1
   c01bc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c01be:	6860      	ldr	r0, [r4, #4]
   c01c0:	b108      	cbz	r0, c01c6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c01c2:	f7fe fa22 	bl	be60a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c01c6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c01c8:	bd38      	pop	{r3, r4, r5, pc}

000c01ca <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   c01ca:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c01cc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c01ce:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c01d2:	689b      	ldr	r3, [r3, #8]
   c01d4:	2201      	movs	r2, #1
   c01d6:	f10d 0107 	add.w	r1, sp, #7
   c01da:	4798      	blx	r3
}
   c01dc:	b003      	add	sp, #12
   c01de:	f85d fb04 	ldr.w	pc, [sp], #4

000c01e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c01e2:	460b      	mov	r3, r1
   c01e4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c01e6:	2200      	movs	r2, #0
   c01e8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c01ea:	e9c0 2200 	strd	r2, r2, [r0]
   c01ee:	4604      	mov	r4, r0
        t_ = t;
   c01f0:	6083      	str	r3, [r0, #8]
    if (t) {
   c01f2:	b90b      	cbnz	r3, c01f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c01f4:	4620      	mov	r0, r4
   c01f6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c01f8:	f7ff ffd5 	bl	c01a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c01fc:	e7fa      	b.n	c01f4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c01fe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c01fe:	6883      	ldr	r3, [r0, #8]
   c0200:	b1eb      	cbz	r3, c023e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c0202:	781a      	ldrb	r2, [r3, #0]
   c0204:	2a03      	cmp	r2, #3
   c0206:	d81a      	bhi.n	c023e <_ZNK5spark9JSONValue4typeEv+0x40>
   c0208:	e8df f002 	tbb	[pc, r2]
   c020c:	1b021704 	.word	0x1b021704
   c0210:	2005      	movs	r0, #5
   c0212:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c0214:	6802      	ldr	r2, [r0, #0]
   c0216:	685b      	ldr	r3, [r3, #4]
   c0218:	6852      	ldr	r2, [r2, #4]
   c021a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c021c:	282d      	cmp	r0, #45	; 0x2d
   c021e:	d012      	beq.n	c0246 <_ZNK5spark9JSONValue4typeEv+0x48>
   c0220:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c0224:	2b09      	cmp	r3, #9
   c0226:	d90e      	bls.n	c0246 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c0228:	2874      	cmp	r0, #116	; 0x74
   c022a:	d00e      	beq.n	c024a <_ZNK5spark9JSONValue4typeEv+0x4c>
   c022c:	2866      	cmp	r0, #102	; 0x66
   c022e:	d00c      	beq.n	c024a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c0230:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c0234:	4258      	negs	r0, r3
   c0236:	4158      	adcs	r0, r3
   c0238:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c023a:	2006      	movs	r0, #6
   c023c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c023e:	2000      	movs	r0, #0
   c0240:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c0242:	2004      	movs	r0, #4
   c0244:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c0246:	2003      	movs	r0, #3
   c0248:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c024a:	2002      	movs	r0, #2
}
   c024c:	4770      	bx	lr

000c024e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c024e:	b510      	push	{r4, lr}
   c0250:	4604      	mov	r4, r0
    switch (type()) {
   c0252:	f7ff ffd4 	bl	c01fe <_ZNK5spark9JSONValue4typeEv>
   c0256:	2802      	cmp	r0, #2
   c0258:	d00e      	beq.n	c0278 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c025a:	1ec3      	subs	r3, r0, #3
   c025c:	b2db      	uxtb	r3, r3
   c025e:	2b01      	cmp	r3, #1
   c0260:	d814      	bhi.n	c028c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c0262:	6822      	ldr	r2, [r4, #0]
   c0264:	68a3      	ldr	r3, [r4, #8]
   c0266:	6850      	ldr	r0, [r2, #4]
   c0268:	685b      	ldr	r3, [r3, #4]
}
   c026a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c026e:	220a      	movs	r2, #10
   c0270:	2100      	movs	r1, #0
   c0272:	4418      	add	r0, r3
   c0274:	f005 b9c0 	b.w	c55f8 <strtol>
        const char* const s = d_->json + t_->start;
   c0278:	6822      	ldr	r2, [r4, #0]
   c027a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c027c:	6852      	ldr	r2, [r2, #4]
   c027e:	685b      	ldr	r3, [r3, #4]
   c0280:	5cd0      	ldrb	r0, [r2, r3]
   c0282:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c0286:	4258      	negs	r0, r3
   c0288:	4158      	adcs	r0, r3
}
   c028a:	bd10      	pop	{r4, pc}
    switch (type()) {
   c028c:	2000      	movs	r0, #0
   c028e:	e7fc      	b.n	c028a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c0290 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c0290:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c0292:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c0294:	e9c0 3300 	strd	r3, r3, [r0]
   c0298:	4604      	mov	r4, r0
        n_(0) {
   c029a:	480e      	ldr	r0, [pc, #56]	; (c02d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c029c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c02a0:	b1a9      	cbz	r1, c02ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c02a2:	780b      	ldrb	r3, [r1, #0]
   c02a4:	2b03      	cmp	r3, #3
   c02a6:	d006      	beq.n	c02b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c02a8:	b98b      	cbnz	r3, c02ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c02aa:	6813      	ldr	r3, [r2, #0]
   c02ac:	6858      	ldr	r0, [r3, #4]
   c02ae:	684b      	ldr	r3, [r1, #4]
   c02b0:	5cc3      	ldrb	r3, [r0, r3]
   c02b2:	2b6e      	cmp	r3, #110	; 0x6e
   c02b4:	d007      	beq.n	c02c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c02b6:	6813      	ldr	r3, [r2, #0]
   c02b8:	684d      	ldr	r5, [r1, #4]
   c02ba:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c02bc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c02be:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c02c0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c02c2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c02c4:	60e3      	str	r3, [r4, #12]
   c02c6:	4611      	mov	r1, r2
   c02c8:	4620      	mov	r0, r4
   c02ca:	f7ff ff6c 	bl	c01a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c02ce:	4620      	mov	r0, r4
   c02d0:	bd38      	pop	{r3, r4, r5, pc}
   c02d2:	bf00      	nop
   c02d4:	000c8057 	.word	0x000c8057

000c02d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c02d8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c02da:	2500      	movs	r5, #0
   c02dc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c02de:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c02e2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c02e6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c02ea:	4604      	mov	r4, r0
   c02ec:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c02ee:	b14b      	cbz	r3, c0304 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c02f0:	781a      	ldrb	r2, [r3, #0]
   c02f2:	2a01      	cmp	r2, #1
   c02f4:	d106      	bne.n	c0304 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c02f6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c02fa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c02fc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c02fe:	6143      	str	r3, [r0, #20]
   c0300:	f7ff ff51 	bl	c01a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c0304:	4620      	mov	r0, r4
   c0306:	bd38      	pop	{r3, r4, r5, pc}

000c0308 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c0308:	b510      	push	{r4, lr}
    if (!n_) {
   c030a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c030c:	4604      	mov	r4, r0
    if (!n_) {
   c030e:	b163      	cbz	r3, c032a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c0310:	6880      	ldr	r0, [r0, #8]
   c0312:	60e0      	str	r0, [r4, #12]
    --n_;
   c0314:	3b01      	subs	r3, #1
    ++t_;
   c0316:	3010      	adds	r0, #16
   c0318:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c031a:	6120      	str	r0, [r4, #16]
    --n_;
   c031c:	6163      	str	r3, [r4, #20]
    if (n_) {
   c031e:	b113      	cbz	r3, c0326 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c0320:	f7ff fef2 	bl	c0108 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c0324:	60a0      	str	r0, [r4, #8]
    return true;
   c0326:	2001      	movs	r0, #1
   c0328:	e000      	b.n	c032c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c032a:	4618      	mov	r0, r3
}
   c032c:	bd10      	pop	{r4, pc}

000c032e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c032e:	b510      	push	{r4, lr}
    write('}');
   c0330:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c0332:	4604      	mov	r4, r0
    write('}');
   c0334:	f7ff ff49 	bl	c01ca <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c0338:	2301      	movs	r3, #1
   c033a:	7123      	strb	r3, [r4, #4]
}
   c033c:	4620      	mov	r0, r4
   c033e:	bd10      	pop	{r4, pc}

000c0340 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c0340:	b508      	push	{r3, lr}
    switch (state_) {
   c0342:	7903      	ldrb	r3, [r0, #4]
   c0344:	2b01      	cmp	r3, #1
   c0346:	d002      	beq.n	c034e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c0348:	2b02      	cmp	r3, #2
   c034a:	d004      	beq.n	c0356 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c034c:	bd08      	pop	{r3, pc}
        write(',');
   c034e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c0350:	f7ff ff3b 	bl	c01ca <_ZN5spark10JSONWriter5writeEc>
}
   c0354:	e7fa      	b.n	c034c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c0356:	213a      	movs	r1, #58	; 0x3a
   c0358:	e7fa      	b.n	c0350 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c035a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c035a:	b510      	push	{r4, lr}
   c035c:	4604      	mov	r4, r0
    writeSeparator();
   c035e:	f7ff ffef 	bl	c0340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c0362:	4620      	mov	r0, r4
   c0364:	217b      	movs	r1, #123	; 0x7b
   c0366:	f7ff ff30 	bl	c01ca <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c036a:	2300      	movs	r3, #0
   c036c:	7123      	strb	r3, [r4, #4]
}
   c036e:	4620      	mov	r0, r4
   c0370:	bd10      	pop	{r4, pc}
	...

000c0374 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c0374:	b513      	push	{r0, r1, r4, lr}
   c0376:	4604      	mov	r4, r0
   c0378:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c037a:	f7ff ffe1 	bl	c0340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c037e:	6823      	ldr	r3, [r4, #0]
   c0380:	9a01      	ldr	r2, [sp, #4]
   c0382:	68db      	ldr	r3, [r3, #12]
   c0384:	4903      	ldr	r1, [pc, #12]	; (c0394 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c0386:	4620      	mov	r0, r4
   c0388:	4798      	blx	r3
    state_ = NEXT;
   c038a:	2301      	movs	r3, #1
}
   c038c:	4620      	mov	r0, r4
    state_ = NEXT;
   c038e:	7123      	strb	r3, [r4, #4]
}
   c0390:	b002      	add	sp, #8
   c0392:	bd10      	pop	{r4, pc}
   c0394:	000c6a0c 	.word	0x000c6a0c

000c0398 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c0398:	b513      	push	{r0, r1, r4, lr}
   c039a:	4604      	mov	r4, r0
   c039c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c039e:	f7ff ffcf 	bl	c0340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c03a2:	6823      	ldr	r3, [r4, #0]
   c03a4:	9a01      	ldr	r2, [sp, #4]
   c03a6:	68db      	ldr	r3, [r3, #12]
   c03a8:	4903      	ldr	r1, [pc, #12]	; (c03b8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c03aa:	4620      	mov	r0, r4
   c03ac:	4798      	blx	r3
    state_ = NEXT;
   c03ae:	2301      	movs	r3, #1
}
   c03b0:	4620      	mov	r0, r4
    state_ = NEXT;
   c03b2:	7123      	strb	r3, [r4, #4]
}
   c03b4:	b002      	add	sp, #8
   c03b6:	bd10      	pop	{r4, pc}
   c03b8:	000c7ff4 	.word	0x000c7ff4

000c03bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c03bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c03c0:	460d      	mov	r5, r1
    write('"');
   c03c2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c03c4:	4690      	mov	r8, r2
   c03c6:	4604      	mov	r4, r0
    write('"');
   c03c8:	f7ff feff 	bl	c01ca <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c03cc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c0474 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c03d0:	44a8      	add	r8, r5
    const char *s = str;
   c03d2:	462f      	mov	r7, r5
    while (s != end) {
   c03d4:	4547      	cmp	r7, r8
   c03d6:	46ba      	mov	sl, r7
   c03d8:	d03d      	beq.n	c0456 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c03da:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c03de:	2e22      	cmp	r6, #34	; 0x22
   c03e0:	d006      	beq.n	c03f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c03e2:	2e5c      	cmp	r6, #92	; 0x5c
   c03e4:	d004      	beq.n	c03f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c03e6:	4630      	mov	r0, r6
   c03e8:	f004 f912 	bl	c4610 <isprint>
   c03ec:	2800      	cmp	r0, #0
   c03ee:	d1f1      	bne.n	c03d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c03f0:	6823      	ldr	r3, [r4, #0]
   c03f2:	ebaa 0205 	sub.w	r2, sl, r5
   c03f6:	689b      	ldr	r3, [r3, #8]
   c03f8:	4629      	mov	r1, r5
   c03fa:	4620      	mov	r0, r4
   c03fc:	4798      	blx	r3
            write('\\');
   c03fe:	215c      	movs	r1, #92	; 0x5c
   c0400:	4620      	mov	r0, r4
   c0402:	f7ff fee2 	bl	c01ca <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c0406:	2e0d      	cmp	r6, #13
   c0408:	d80a      	bhi.n	c0420 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c040a:	2e07      	cmp	r6, #7
   c040c:	d91c      	bls.n	c0448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c040e:	f1a6 0308 	sub.w	r3, r6, #8
   c0412:	2b05      	cmp	r3, #5
   c0414:	d818      	bhi.n	c0448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c0416:	e8df f003 	tbb	[pc, r3]
   c041a:	0f0d      	.short	0x0f0d
   c041c:	15131711 	.word	0x15131711
   c0420:	2e22      	cmp	r6, #34	; 0x22
   c0422:	d001      	beq.n	c0428 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c0424:	2e5c      	cmp	r6, #92	; 0x5c
   c0426:	d10f      	bne.n	c0448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c0428:	4631      	mov	r1, r6
                write('b');
   c042a:	4620      	mov	r0, r4
   c042c:	f7ff fecd 	bl	c01ca <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c0430:	463d      	mov	r5, r7
    while (s != end) {
   c0432:	e7cf      	b.n	c03d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c0434:	2162      	movs	r1, #98	; 0x62
   c0436:	e7f8      	b.n	c042a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c0438:	2174      	movs	r1, #116	; 0x74
   c043a:	e7f6      	b.n	c042a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c043c:	216e      	movs	r1, #110	; 0x6e
   c043e:	e7f4      	b.n	c042a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c0440:	2166      	movs	r1, #102	; 0x66
   c0442:	e7f2      	b.n	c042a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c0444:	2172      	movs	r1, #114	; 0x72
   c0446:	e7f0      	b.n	c042a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c0448:	6823      	ldr	r3, [r4, #0]
   c044a:	4632      	mov	r2, r6
   c044c:	68db      	ldr	r3, [r3, #12]
   c044e:	4649      	mov	r1, r9
   c0450:	4620      	mov	r0, r4
   c0452:	4798      	blx	r3
                break;
   c0454:	e7ec      	b.n	c0430 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c0456:	42bd      	cmp	r5, r7
   c0458:	d005      	beq.n	c0466 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c045a:	6823      	ldr	r3, [r4, #0]
   c045c:	1b7a      	subs	r2, r7, r5
   c045e:	689b      	ldr	r3, [r3, #8]
   c0460:	4629      	mov	r1, r5
   c0462:	4620      	mov	r0, r4
   c0464:	4798      	blx	r3
    }
    write('"');
   c0466:	2122      	movs	r1, #34	; 0x22
   c0468:	4620      	mov	r0, r4
   c046a:	f7ff feae 	bl	c01ca <_ZN5spark10JSONWriter5writeEc>
}
   c046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0472:	bf00      	nop
   c0474:	000c7ff7 	.word	0x000c7ff7

000c0478 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c0478:	b513      	push	{r0, r1, r4, lr}
   c047a:	4604      	mov	r4, r0
   c047c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0480:	f7ff ff5e 	bl	c0340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c0484:	4620      	mov	r0, r4
   c0486:	e9dd 2100 	ldrd	r2, r1, [sp]
   c048a:	f7ff ff97 	bl	c03bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c048e:	2302      	movs	r3, #2
}
   c0490:	4620      	mov	r0, r4
    state_ = VALUE;
   c0492:	7123      	strb	r3, [r4, #4]
}
   c0494:	b002      	add	sp, #8
   c0496:	bd10      	pop	{r4, pc}

000c0498 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c0498:	b513      	push	{r0, r1, r4, lr}
   c049a:	4604      	mov	r4, r0
   c049c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c04a0:	f7ff ff4e 	bl	c0340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c04a4:	4620      	mov	r0, r4
   c04a6:	e9dd 2100 	ldrd	r2, r1, [sp]
   c04aa:	f7ff ff87 	bl	c03bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c04ae:	2301      	movs	r3, #1
}
   c04b0:	4620      	mov	r0, r4
    state_ = NEXT;
   c04b2:	7123      	strb	r3, [r4, #4]
}
   c04b4:	b002      	add	sp, #8
   c04b6:	bd10      	pop	{r4, pc}

000c04b8 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   c04b8:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   c04ba:	460b      	mov	r3, r1
    s->update(ticks);
   c04bc:	6892      	ldr	r2, [r2, #8]
   c04be:	4601      	mov	r1, r0
   c04c0:	4618      	mov	r0, r3
   c04c2:	4710      	bx	r2

000c04c4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   c04c4:	b570      	push	{r4, r5, r6, lr}
   c04c6:	4c0e      	ldr	r4, [pc, #56]	; (c0500 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   c04c8:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   c04ca:	2500      	movs	r5, #0
   c04cc:	241c      	movs	r4, #28
   c04ce:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c04d2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   c04d6:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   c04da:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c04dc:	f004 0403 	and.w	r4, r4, #3
   c04e0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   c04e4:	b2e4      	uxtb	r4, r4
   c04e6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   c04e8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   c04ea:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   c04ec:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   c04ee:	7c42      	ldrb	r2, [r0, #17]
   c04f0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   c04f2:	bf0a      	itet	eq
   c04f4:	4b03      	ldreq	r3, [pc, #12]	; (c0504 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   c04f6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   c04f8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   c04fc:	bd70      	pop	{r4, r5, r6, pc}
   c04fe:	bf00      	nop
   c0500:	000c6ea8 	.word	0x000c6ea8
   c0504:	000c04b9 	.word	0x000c04b9

000c0508 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   c0508:	6880      	ldr	r0, [r0, #8]
   c050a:	6803      	ldr	r3, [r0, #0]
   c050c:	68db      	ldr	r3, [r3, #12]
   c050e:	4718      	bx	r3

000c0510 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   c0510:	4770      	bx	lr

000c0512 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   c0512:	4608      	mov	r0, r1
   c0514:	b111      	cbz	r1, c051c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   c0516:	680b      	ldr	r3, [r1, #0]
   c0518:	685b      	ldr	r3, [r3, #4]
   c051a:	4718      	bx	r3
}
   c051c:	4770      	bx	lr

000c051e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   c051e:	4770      	bx	lr

000c0520 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c0520:	4770      	bx	lr

000c0522 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   c0522:	4770      	bx	lr

000c0524 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   c0524:	4770      	bx	lr

000c0526 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   c0526:	b538      	push	{r3, r4, r5, lr}
   c0528:	4604      	mov	r4, r0
   c052a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   c052c:	6800      	ldr	r0, [r0, #0]
   c052e:	212e      	movs	r1, #46	; 0x2e
   c0530:	f004 f900 	bl	c4734 <strchrnul>
    size = s - category;
   c0534:	6823      	ldr	r3, [r4, #0]
   c0536:	1ac3      	subs	r3, r0, r3
   c0538:	602b      	str	r3, [r5, #0]
    if (size) {
   c053a:	b123      	cbz	r3, c0546 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   c053c:	7803      	ldrb	r3, [r0, #0]
   c053e:	b103      	cbz	r3, c0542 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   c0540:	3001      	adds	r0, #1
   c0542:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c0544:	6020      	str	r0, [r4, #0]
}
   c0546:	4618      	mov	r0, r3
   c0548:	bd38      	pop	{r3, r4, r5, pc}

000c054a <_ZN5spark16JSONStreamWriterD0Ev>:
   c054a:	b510      	push	{r4, lr}
   c054c:	210c      	movs	r1, #12
   c054e:	4604      	mov	r4, r0
   c0550:	f7f3 fda7 	bl	b40a2 <_ZdlPvj>
   c0554:	4620      	mov	r0, r4
   c0556:	bd10      	pop	{r4, pc}

000c0558 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   c0558:	b510      	push	{r4, lr}
   c055a:	2104      	movs	r1, #4
   c055c:	4604      	mov	r4, r0
   c055e:	f7f3 fda0 	bl	b40a2 <_ZdlPvj>
   c0562:	4620      	mov	r0, r4
   c0564:	bd10      	pop	{r4, pc}

000c0566 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c0566:	b510      	push	{r4, lr}
   c0568:	2104      	movs	r1, #4
   c056a:	4604      	mov	r4, r0
   c056c:	f7f3 fd99 	bl	b40a2 <_ZdlPvj>
   c0570:	4620      	mov	r0, r4
   c0572:	bd10      	pop	{r4, pc}

000c0574 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   c0574:	f7fd bbf6 	b.w	bdd64 <os_mutex_recursive_lock>

000c0578 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   c0578:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   c057a:	f004 f8e5 	bl	c4748 <strcmp>
}
   c057e:	fab0 f080 	clz	r0, r0
   c0582:	0940      	lsrs	r0, r0, #5
   c0584:	bd08      	pop	{r3, pc}

000c0586 <__tcf_1>:
   c0586:	4770      	bx	lr

000c0588 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   c0588:	b510      	push	{r4, lr}
   c058a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   c058c:	f001 fc86 	bl	c1e9c <_Z16_fetch_usbserialv>
   c0590:	4284      	cmp	r4, r0
   c0592:	d010      	beq.n	c05b6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   c0594:	f001 fe2e 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   c0598:	4284      	cmp	r4, r0
   c059a:	d105      	bne.n	c05a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   c059c:	f001 fe2a 	bl	c21f4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   c05a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   c05a4:	f001 bc15 	b.w	c1dd2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   c05a8:	b12c      	cbz	r4, c05b6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   c05aa:	6823      	ldr	r3, [r4, #0]
   c05ac:	4620      	mov	r0, r4
   c05ae:	685b      	ldr	r3, [r3, #4]
}
   c05b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c05b4:	4718      	bx	r3
   c05b6:	bd10      	pop	{r4, pc}

000c05b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c05b8:	680b      	ldr	r3, [r1, #0]
   c05ba:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c05bc:	684b      	ldr	r3, [r1, #4]
   c05be:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c05c0:	b113      	cbz	r3, c05c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   c05c2:	685a      	ldr	r2, [r3, #4]
   c05c4:	3201      	adds	r2, #1
   c05c6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c05c8:	4770      	bx	lr

000c05ca <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   c05ca:	b513      	push	{r0, r1, r4, lr}
   c05cc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   c05ce:	4608      	mov	r0, r1
   c05d0:	9101      	str	r1, [sp, #4]
   c05d2:	f004 f8e8 	bl	c47a6 <strlen>
   c05d6:	9901      	ldr	r1, [sp, #4]
   c05d8:	4602      	mov	r2, r0
   c05da:	4620      	mov	r0, r4
}
   c05dc:	b002      	add	sp, #8
   c05de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   c05e2:	f7ff bf59 	b.w	c0498 <_ZN5spark10JSONWriter5valueEPKcj>

000c05e6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   c05e6:	b513      	push	{r0, r1, r4, lr}
   c05e8:	4604      	mov	r4, r0
    write(str, strlen(str));
   c05ea:	4608      	mov	r0, r1
   c05ec:	9101      	str	r1, [sp, #4]
   c05ee:	f004 f8da 	bl	c47a6 <strlen>
   c05f2:	6823      	ldr	r3, [r4, #0]
   c05f4:	9901      	ldr	r1, [sp, #4]
   c05f6:	68db      	ldr	r3, [r3, #12]
   c05f8:	4602      	mov	r2, r0
   c05fa:	4620      	mov	r0, r4
}
   c05fc:	b002      	add	sp, #8
   c05fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   c0602:	4718      	bx	r3

000c0604 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   c0604:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c0606:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   c0608:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c060c:	68db      	ldr	r3, [r3, #12]
   c060e:	2201      	movs	r2, #1
   c0610:	f10d 0107 	add.w	r1, sp, #7
   c0614:	4798      	blx	r3
}
   c0616:	b003      	add	sp, #12
   c0618:	f85d fb04 	ldr.w	pc, [sp], #4

000c061c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c061c:	b40e      	push	{r1, r2, r3}
   c061e:	b503      	push	{r0, r1, lr}
   c0620:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   c0622:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c0624:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   c0628:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   c062a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   c062c:	f000 ffe9 	bl	c1602 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   c0630:	b002      	add	sp, #8
   c0632:	f85d eb04 	ldr.w	lr, [sp], #4
   c0636:	b003      	add	sp, #12
   c0638:	4770      	bx	lr

000c063a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   c063a:	680a      	ldr	r2, [r1, #0]
   c063c:	6002      	str	r2, [r0, #0]
   c063e:	684a      	ldr	r2, [r1, #4]
   c0640:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   c0642:	2200      	movs	r2, #0
   c0644:	e9c0 2202 	strd	r2, r2, [r0, #8]
   c0648:	b510      	push	{r4, lr}
   c064a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   c064c:	688c      	ldr	r4, [r1, #8]
   c064e:	6084      	str	r4, [r0, #8]
   c0650:	68cc      	ldr	r4, [r1, #12]
   c0652:	60c4      	str	r4, [r0, #12]
   c0654:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c0656:	608a      	str	r2, [r1, #8]
   c0658:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   c065a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c065c:	610a      	str	r2, [r1, #16]
   c065e:	bd10      	pop	{r4, pc}

000c0660 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   c0664:	e9d0 8400 	ldrd	r8, r4, [r0]
   c0668:	f04f 0a14 	mov.w	sl, #20
   c066c:	9300      	str	r3, [sp, #0]
   c066e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   c0672:	4b18      	ldr	r3, [pc, #96]	; (c06d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c0674:	10a4      	asrs	r4, r4, #2
   c0676:	4617      	mov	r7, r2
   c0678:	435c      	muls	r4, r3
   c067a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   c067c:	2c00      	cmp	r4, #0
   c067e:	dd21      	ble.n	c06c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   c0680:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   c0682:	fb0a f006 	mul.w	r0, sl, r6
   c0686:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   c068a:	463a      	mov	r2, r7
   c068c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   c0690:	5828      	ldr	r0, [r5, r0]
   c0692:	9101      	str	r1, [sp, #4]
   c0694:	455f      	cmp	r7, fp
   c0696:	bf28      	it	cs
   c0698:	465a      	movcs	r2, fp
   c069a:	f004 f89f 	bl	c47dc <strncmp>
                if (cmp == 0) {
   c069e:	2800      	cmp	r0, #0
   c06a0:	9901      	ldr	r1, [sp, #4]
   c06a2:	f04f 0301 	mov.w	r3, #1
   c06a6:	d10b      	bne.n	c06c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   c06a8:	455f      	cmp	r7, fp
   c06aa:	d103      	bne.n	c06b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   c06ac:	9a00      	ldr	r2, [sp, #0]
   c06ae:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c06b0:	4634      	mov	r4, r6
   c06b2:	e7e3      	b.n	c067c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   c06b4:	d9fc      	bls.n	c06b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   c06b6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   c06b8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   c06bc:	3e01      	subs	r6, #1
   c06be:	e7f7      	b.n	c06b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   c06c0:	dbf9      	blt.n	c06b6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   c06c2:	e7f5      	b.n	c06b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   c06c4:	eba5 0508 	sub.w	r5, r5, r8
}
   c06c8:	4802      	ldr	r0, [pc, #8]	; (c06d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c06ca:	10ad      	asrs	r5, r5, #2
   c06cc:	4368      	muls	r0, r5
   c06ce:	b003      	add	sp, #12
   c06d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c06d4:	cccccccd 	.word	0xcccccccd

000c06d8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c06d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   c06da:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   c06dc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c06de:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   c06e0:	b303      	cbz	r3, c0724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   c06e2:	b1f9      	cbz	r1, c0724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   c06e4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   c06e6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   c06ea:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   c06ec:	a903      	add	r1, sp, #12
   c06ee:	a801      	add	r0, sp, #4
   c06f0:	f7ff ff19 	bl	c0526 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c06f4:	4601      	mov	r1, r0
   c06f6:	b1a8      	cbz	r0, c0724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   c06f8:	f10d 030b 	add.w	r3, sp, #11
   c06fc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   c06fe:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0702:	4620      	mov	r0, r4
   c0704:	f7ff ffac 	bl	c0660 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   c0708:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c070c:	b153      	cbz	r3, c0724 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   c070e:	6823      	ldr	r3, [r4, #0]
   c0710:	2414      	movs	r4, #20
   c0712:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   c0716:	3408      	adds	r4, #8
            if (node.level >= 0) {
   c0718:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   c071c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   c071e:	bfa8      	it	ge
   c0720:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   c0722:	e7e3      	b.n	c06ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   c0724:	4628      	mov	r0, r5
   c0726:	b004      	add	sp, #16
   c0728:	bd70      	pop	{r4, r5, r6, pc}
	...

000c072c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   c072c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   c072e:	4c09      	ldr	r4, [pc, #36]	; (c0754 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   c0730:	7823      	ldrb	r3, [r4, #0]
   c0732:	f3bf 8f5b 	dmb	ish
   c0736:	07db      	lsls	r3, r3, #31
   c0738:	d409      	bmi.n	c074e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c073a:	4620      	mov	r0, r4
   c073c:	f7f3 fcc0 	bl	b40c0 <__cxa_guard_acquire>
   c0740:	b128      	cbz	r0, c074e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c0742:	4620      	mov	r0, r4
   c0744:	f7f3 fcc1 	bl	b40ca <__cxa_guard_release>
   c0748:	4803      	ldr	r0, [pc, #12]	; (c0758 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   c074a:	f003 ff53 	bl	c45f4 <atexit>
}
   c074e:	4803      	ldr	r0, [pc, #12]	; (c075c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c0750:	bd10      	pop	{r4, pc}
   c0752:	bf00      	nop
   c0754:	2003e668 	.word	0x2003e668
   c0758:	000c051f 	.word	0x000c051f
   c075c:	2003db38 	.word	0x2003db38

000c0760 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c0760:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c0762:	4c09      	ldr	r4, [pc, #36]	; (c0788 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c0764:	7823      	ldrb	r3, [r4, #0]
   c0766:	f3bf 8f5b 	dmb	ish
   c076a:	07db      	lsls	r3, r3, #31
   c076c:	d409      	bmi.n	c0782 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c076e:	4620      	mov	r0, r4
   c0770:	f7f3 fca6 	bl	b40c0 <__cxa_guard_acquire>
   c0774:	b128      	cbz	r0, c0782 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c0776:	4620      	mov	r0, r4
   c0778:	f7f3 fca7 	bl	b40ca <__cxa_guard_release>
   c077c:	4803      	ldr	r0, [pc, #12]	; (c078c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c077e:	f003 ff39 	bl	c45f4 <atexit>
    return &factory;
}
   c0782:	4803      	ldr	r0, [pc, #12]	; (c0790 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c0784:	bd10      	pop	{r4, pc}
   c0786:	bf00      	nop
   c0788:	2003e66c 	.word	0x2003e66c
   c078c:	000c0587 	.word	0x000c0587
   c0790:	2003db3c 	.word	0x2003db3c

000c0794 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c0794:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c0796:	2500      	movs	r5, #0
   c0798:	4604      	mov	r4, r0
   c079a:	e9c0 5500 	strd	r5, r5, [r0]
   c079e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c07a2:	6085      	str	r5, [r0, #8]
   c07a4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c07a6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c07aa:	f7fd facb 	bl	bdd44 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c07ae:	f7ff ffbd 	bl	c072c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c07b2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c07b4:	f7ff ffd4 	bl	c0760 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c07b8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c07ba:	6220      	str	r0, [r4, #32]
}
   c07bc:	4620      	mov	r0, r4
   c07be:	bd38      	pop	{r3, r4, r5, pc}

000c07c0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c07c0:	b510      	push	{r4, lr}
    static LogManager mgr;
   c07c2:	4c0a      	ldr	r4, [pc, #40]	; (c07ec <_ZN5spark10LogManager8instanceEv+0x2c>)
   c07c4:	7823      	ldrb	r3, [r4, #0]
   c07c6:	f3bf 8f5b 	dmb	ish
   c07ca:	07db      	lsls	r3, r3, #31
   c07cc:	d40c      	bmi.n	c07e8 <_ZN5spark10LogManager8instanceEv+0x28>
   c07ce:	4620      	mov	r0, r4
   c07d0:	f7f3 fc76 	bl	b40c0 <__cxa_guard_acquire>
   c07d4:	b140      	cbz	r0, c07e8 <_ZN5spark10LogManager8instanceEv+0x28>
   c07d6:	4806      	ldr	r0, [pc, #24]	; (c07f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   c07d8:	f7ff ffdc 	bl	c0794 <_ZN5spark10LogManagerC1Ev>
   c07dc:	4620      	mov	r0, r4
   c07de:	f7f3 fc74 	bl	b40ca <__cxa_guard_release>
   c07e2:	4804      	ldr	r0, [pc, #16]	; (c07f4 <_ZN5spark10LogManager8instanceEv+0x34>)
   c07e4:	f003 ff06 	bl	c45f4 <atexit>
    return &mgr;
}
   c07e8:	4801      	ldr	r0, [pc, #4]	; (c07f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   c07ea:	bd10      	pop	{r4, pc}
   c07ec:	2003e664 	.word	0x2003e664
   c07f0:	2003e674 	.word	0x2003e674
   c07f4:	000c0d15 	.word	0x000c0d15

000c07f8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c07f8:	4a02      	ldr	r2, [pc, #8]	; (c0804 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c07fa:	4903      	ldr	r1, [pc, #12]	; (c0808 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c07fc:	4803      	ldr	r0, [pc, #12]	; (c080c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c07fe:	2300      	movs	r3, #0
   c0800:	f7fd bcd0 	b.w	be1a4 <log_set_callbacks>
   c0804:	000c0af9 	.word	0x000c0af9
   c0808:	000c0a85 	.word	0x000c0a85
   c080c:	000c0a05 	.word	0x000c0a05

000c0810 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c0810:	2300      	movs	r3, #0
   c0812:	461a      	mov	r2, r3
   c0814:	4619      	mov	r1, r3
   c0816:	4618      	mov	r0, r3
   c0818:	f7fd bcc4 	b.w	be1a4 <log_set_callbacks>

000c081c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c081c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c081e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c0820:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   c0822:	4668      	mov	r0, sp
   c0824:	f7ff fec8 	bl	c05b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c0828:	466a      	mov	r2, sp
   c082a:	4629      	mov	r1, r5
   c082c:	4620      	mov	r0, r4
   c082e:	f7ff fd53 	bl	c02d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c0832:	a801      	add	r0, sp, #4
   c0834:	f7fe fa91 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0838:	4620      	mov	r0, r4
   c083a:	b003      	add	sp, #12
   c083c:	bd30      	pop	{r4, r5, pc}

000c083e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c083e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c0840:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c0842:	4604      	mov	r4, r0
   c0844:	4668      	mov	r0, sp
   c0846:	f7ff feb7 	bl	c05b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c084a:	466a      	mov	r2, sp
   c084c:	4629      	mov	r1, r5
   c084e:	4620      	mov	r0, r4
   c0850:	f7ff fd1e 	bl	c0290 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0854:	a801      	add	r0, sp, #4
   c0856:	f7fe fa80 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c085a:	4620      	mov	r0, r4
   c085c:	b003      	add	sp, #12
   c085e:	bd30      	pop	{r4, r5, pc}

000c0860 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0860:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c0862:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0864:	4604      	mov	r4, r0
   c0866:	4668      	mov	r0, sp
   c0868:	f7ff fea6 	bl	c05b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c086c:	466a      	mov	r2, sp
   c086e:	4629      	mov	r1, r5
   c0870:	4620      	mov	r0, r4
   c0872:	f7ff fcb6 	bl	c01e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0876:	a801      	add	r0, sp, #4
   c0878:	f7fe fa6f 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c087c:	4620      	mov	r0, r4
   c087e:	b003      	add	sp, #12
   c0880:	bd30      	pop	{r4, r5, pc}
	...

000c0884 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c0884:	b570      	push	{r4, r5, r6, lr}
   c0886:	b08a      	sub	sp, #40	; 0x28
   c0888:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c088a:	4601      	mov	r1, r0
   c088c:	a804      	add	r0, sp, #16
   c088e:	f7ff ffc5 	bl	c081c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c0892:	4e14      	ldr	r6, [pc, #80]	; (c08e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c0894:	a804      	add	r0, sp, #16
   c0896:	f7ff fd37 	bl	c0308 <_ZN5spark18JSONObjectIterator4nextEv>
   c089a:	b1e8      	cbz	r0, c08d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c089c:	a904      	add	r1, sp, #16
   c089e:	4668      	mov	r0, sp
   c08a0:	f7ff ffcd 	bl	c083e <_ZNK5spark18JSONObjectIterator4nameEv>
   c08a4:	9802      	ldr	r0, [sp, #8]
   c08a6:	4631      	mov	r1, r6
   c08a8:	f7ff fe66 	bl	c0578 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c08ac:	4604      	mov	r4, r0
   c08ae:	b110      	cbz	r0, c08b6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c08b0:	1e2c      	subs	r4, r5, #0
   c08b2:	bf18      	it	ne
   c08b4:	2401      	movne	r4, #1
   c08b6:	a801      	add	r0, sp, #4
   c08b8:	f7fe fa4f 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c08bc:	2c00      	cmp	r4, #0
   c08be:	d0e9      	beq.n	c0894 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c08c0:	a904      	add	r1, sp, #16
   c08c2:	4668      	mov	r0, sp
   c08c4:	f7ff ffcc 	bl	c0860 <_ZNK5spark18JSONObjectIterator5valueEv>
   c08c8:	4668      	mov	r0, sp
   c08ca:	f7ff fcc0 	bl	c024e <_ZNK5spark9JSONValue5toIntEv>
   c08ce:	6028      	str	r0, [r5, #0]
   c08d0:	a801      	add	r0, sp, #4
   c08d2:	f7fe fa42 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c08d6:	e7dd      	b.n	c0894 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c08d8:	a805      	add	r0, sp, #20
   c08da:	f7fe fa3e 	bl	bed5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c08de:	b00a      	add	sp, #40	; 0x28
   c08e0:	bd70      	pop	{r4, r5, r6, pc}
   c08e2:	bf00      	nop
   c08e4:	000c7ffd 	.word	0x000c7ffd

000c08e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c08e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c08ea:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c08ec:	4620      	mov	r0, r4
   c08ee:	4913      	ldr	r1, [pc, #76]	; (c093c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c08f0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c08f2:	f003 ff29 	bl	c4748 <strcmp>
   c08f6:	b950      	cbnz	r0, c090e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c08f8:	f001 fad0 	bl	c1e9c <_Z16_fetch_usbserialv>
   c08fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c0900:	f001 fabc 	bl	c1e7c <_ZN9USBSerial5beginEl>
}
   c0904:	b003      	add	sp, #12
   c0906:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c090a:	f001 bac7 	b.w	c1e9c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c090e:	490c      	ldr	r1, [pc, #48]	; (c0940 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c0910:	4620      	mov	r0, r4
   c0912:	f003 ff19 	bl	c4748 <strcmp>
   c0916:	b978      	cbnz	r0, c0938 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c0918:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c091c:	a901      	add	r1, sp, #4
   c091e:	4628      	mov	r0, r5
        int baud = 9600;
   c0920:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c0922:	f7ff ffaf 	bl	c0884 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c0926:	f001 fc65 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   c092a:	9901      	ldr	r1, [sp, #4]
   c092c:	f001 fa4e 	bl	c1dcc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c0930:	f001 fc60 	bl	c21f4 <_Z22__fetch_global_Serial1v>
}
   c0934:	b003      	add	sp, #12
   c0936:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c0938:	2000      	movs	r0, #0
   c093a:	e7fb      	b.n	c0934 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c093c:	000c8002 	.word	0x000c8002
   c0940:	000c8009 	.word	0x000c8009

000c0944 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0944:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c0946:	e9d0 5300 	ldrd	r5, r3, [r0]
   c094a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c094c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c094e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0952:	42ae      	cmp	r6, r5
   c0954:	d005      	beq.n	c0962 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c0956:	f105 0008 	add.w	r0, r5, #8
   c095a:	f7ff fff3 	bl	c0944 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c095e:	3514      	adds	r5, #20
   c0960:	e7f7      	b.n	c0952 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c0962:	6820      	ldr	r0, [r4, #0]
   c0964:	f7fd fd24 	bl	be3b0 <free>
}
   c0968:	4620      	mov	r0, r4
   c096a:	bd70      	pop	{r4, r5, r6, pc}

000c096c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c096c:	b510      	push	{r4, lr}
   c096e:	4604      	mov	r4, r0
   c0970:	300c      	adds	r0, #12
   c0972:	f7ff ffe7 	bl	c0944 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0976:	4620      	mov	r0, r4
   c0978:	f7fe f94f 	bl	bec1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c097c:	4620      	mov	r0, r4
   c097e:	bd10      	pop	{r4, pc}

000c0980 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0980:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c0982:	4b04      	ldr	r3, [pc, #16]	; (c0994 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c0984:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c0986:	f840 3b04 	str.w	r3, [r0], #4
   c098a:	f7ff ffef 	bl	c096c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c098e:	4620      	mov	r0, r4
   c0990:	bd10      	pop	{r4, pc}
   c0992:	bf00      	nop
   c0994:	000c6e90 	.word	0x000c6e90

000c0998 <_ZN5spark16StreamLogHandlerD0Ev>:
   c0998:	b510      	push	{r4, lr}
   c099a:	4604      	mov	r4, r0
   c099c:	f7ff fff0 	bl	c0980 <_ZN5spark16StreamLogHandlerD1Ev>
   c09a0:	4620      	mov	r0, r4
   c09a2:	2124      	movs	r1, #36	; 0x24
   c09a4:	f7f3 fb7d 	bl	b40a2 <_ZdlPvj>
   c09a8:	4620      	mov	r0, r4
   c09aa:	bd10      	pop	{r4, pc}

000c09ac <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c09ac:	b510      	push	{r4, lr}
   c09ae:	4b03      	ldr	r3, [pc, #12]	; (c09bc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c09b0:	6003      	str	r3, [r0, #0]
   c09b2:	4604      	mov	r4, r0
   c09b4:	f7ff ffe4 	bl	c0980 <_ZN5spark16StreamLogHandlerD1Ev>
   c09b8:	4620      	mov	r0, r4
   c09ba:	bd10      	pop	{r4, pc}
   c09bc:	000c80a4 	.word	0x000c80a4

000c09c0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c09c0:	b510      	push	{r4, lr}
   c09c2:	4604      	mov	r4, r0
   c09c4:	f7ff fff2 	bl	c09ac <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c09c8:	4620      	mov	r0, r4
   c09ca:	2124      	movs	r1, #36	; 0x24
   c09cc:	f7f3 fb69 	bl	b40a2 <_ZdlPvj>
   c09d0:	4620      	mov	r0, r4
   c09d2:	bd10      	pop	{r4, pc}

000c09d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c09d4:	2200      	movs	r2, #0
   c09d6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c09da:	b510      	push	{r4, lr}
        capacity_(0) {
   c09dc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c09de:	680c      	ldr	r4, [r1, #0]
   c09e0:	6004      	str	r4, [r0, #0]
   c09e2:	684c      	ldr	r4, [r1, #4]
   c09e4:	6044      	str	r4, [r0, #4]
   c09e6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c09e8:	600a      	str	r2, [r1, #0]
   c09ea:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c09ec:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c09ee:	608a      	str	r2, [r1, #8]
}
   c09f0:	bd10      	pop	{r4, pc}

000c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c09f2:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c09f4:	6803      	ldr	r3, [r0, #0]
   c09f6:	4604      	mov	r4, r0
   c09f8:	6818      	ldr	r0, [r3, #0]
   c09fa:	f7fd f9bb 	bl	bdd74 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c09fe:	4620      	mov	r0, r4
   c0a00:	bd10      	pop	{r4, pc}
	...

000c0a04 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c0a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0a08:	b087      	sub	sp, #28
   c0a0a:	4680      	mov	r8, r0
   c0a0c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c0a0e:	4b1c      	ldr	r3, [pc, #112]	; (c0a80 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c0a10:	685b      	ldr	r3, [r3, #4]
   c0a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0a16:	4689      	mov	r9, r1
   c0a18:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c0a1a:	b96b      	cbnz	r3, c0a38 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c0a1c:	f7ff fed0 	bl	c07c0 <_ZN5spark10LogManager8instanceEv>
   c0a20:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0a22:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c0a26:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0a28:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c0a2a:	f7ff fda3 	bl	c0574 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c0a2e:	7b23      	ldrb	r3, [r4, #12]
   c0a30:	b12b      	cbz	r3, c0a3e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c0a32:	a805      	add	r0, sp, #20
   c0a34:	f7ff ffdd 	bl	c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c0a38:	b007      	add	sp, #28
   c0a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c0a3e:	2301      	movs	r3, #1
   c0a40:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c0a42:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c0a46:	fa5f f989 	uxtb.w	r9, r9
   c0a4a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0a4e:	45aa      	cmp	sl, r5
   c0a50:	d012      	beq.n	c0a78 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c0a52:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c0a56:	4631      	mov	r1, r6
   c0a58:	1d38      	adds	r0, r7, #4
   c0a5a:	f7ff fe3d 	bl	c06d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c0a5e:	4581      	cmp	r9, r0
   c0a60:	d3f5      	bcc.n	c0a4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c0a62:	683b      	ldr	r3, [r7, #0]
   c0a64:	9a03      	ldr	r2, [sp, #12]
   c0a66:	9200      	str	r2, [sp, #0]
   c0a68:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c0a6c:	464a      	mov	r2, r9
   c0a6e:	4633      	mov	r3, r6
   c0a70:	4641      	mov	r1, r8
   c0a72:	4638      	mov	r0, r7
   c0a74:	47d8      	blx	fp
   c0a76:	e7ea      	b.n	c0a4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c0a78:	2300      	movs	r3, #0
   c0a7a:	7323      	strb	r3, [r4, #12]
   c0a7c:	e7d9      	b.n	c0a32 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c0a7e:	bf00      	nop
   c0a80:	e000ed00 	.word	0xe000ed00

000c0a84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c0a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0a88:	469b      	mov	fp, r3
   c0a8a:	4b1a      	ldr	r3, [pc, #104]	; (c0af4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c0a8c:	685b      	ldr	r3, [r3, #4]
   c0a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0a92:	4680      	mov	r8, r0
   c0a94:	4689      	mov	r9, r1
   c0a96:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c0a98:	b96b      	cbnz	r3, c0ab6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c0a9a:	f7ff fe91 	bl	c07c0 <_ZN5spark10LogManager8instanceEv>
   c0a9e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0aa0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c0aa4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0aa6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0aa8:	f7ff fd64 	bl	c0574 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c0aac:	7b23      	ldrb	r3, [r4, #12]
   c0aae:	b12b      	cbz	r3, c0abc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c0ab0:	a801      	add	r0, sp, #4
   c0ab2:	f7ff ff9e 	bl	c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0ab6:	b003      	add	sp, #12
   c0ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c0abc:	2301      	movs	r3, #1
   c0abe:	7323      	strb	r3, [r4, #12]
   c0ac0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c0ac4:	b2f6      	uxtb	r6, r6
   c0ac6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0aca:	4555      	cmp	r5, sl
   c0acc:	d00e      	beq.n	c0aec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c0ace:	f855 7b04 	ldr.w	r7, [r5], #4
   c0ad2:	4659      	mov	r1, fp
   c0ad4:	1d38      	adds	r0, r7, #4
   c0ad6:	f7ff fdff 	bl	c06d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c0ada:	4286      	cmp	r6, r0
   c0adc:	d3f5      	bcc.n	c0aca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c0ade:	683b      	ldr	r3, [r7, #0]
   c0ae0:	464a      	mov	r2, r9
   c0ae2:	68db      	ldr	r3, [r3, #12]
   c0ae4:	4641      	mov	r1, r8
   c0ae6:	4638      	mov	r0, r7
   c0ae8:	4798      	blx	r3
   c0aea:	e7ee      	b.n	c0aca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c0aec:	2300      	movs	r3, #0
   c0aee:	7323      	strb	r3, [r4, #12]
   c0af0:	e7de      	b.n	c0ab0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c0af2:	bf00      	nop
   c0af4:	e000ed00 	.word	0xe000ed00

000c0af8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c0af8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c0afc:	4b16      	ldr	r3, [pc, #88]	; (c0b58 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c0afe:	685b      	ldr	r3, [r3, #4]
   c0b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0b04:	4605      	mov	r5, r0
   c0b06:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c0b08:	bb1b      	cbnz	r3, c0b52 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c0b0a:	f7ff fe59 	bl	c07c0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c0b0e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c0b12:	4604      	mov	r4, r0
   c0b14:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0b16:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0b18:	f7ff fd2c 	bl	c0574 <_ZN14RecursiveMutex4lockEv.isra.0>
   c0b1c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c0b20:	2446      	movs	r4, #70	; 0x46
   c0b22:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0b26:	45b0      	cmp	r8, r6
   c0b28:	d109      	bne.n	c0b3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c0b2a:	a801      	add	r0, sp, #4
   c0b2c:	f7ff ff61 	bl	c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c0b30:	42a5      	cmp	r5, r4
   c0b32:	bfb4      	ite	lt
   c0b34:	2000      	movlt	r0, #0
   c0b36:	2001      	movge	r0, #1
}
   c0b38:	b002      	add	sp, #8
   c0b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c0b3e:	f856 0b04 	ldr.w	r0, [r6], #4
   c0b42:	4639      	mov	r1, r7
   c0b44:	3004      	adds	r0, #4
   c0b46:	f7ff fdc7 	bl	c06d8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c0b4a:	4284      	cmp	r4, r0
   c0b4c:	bfa8      	it	ge
   c0b4e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0b50:	e7e9      	b.n	c0b26 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c0b52:	2000      	movs	r0, #0
   c0b54:	e7f0      	b.n	c0b38 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c0b56:	bf00      	nop
   c0b58:	e000ed00 	.word	0xe000ed00

000c0b5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0b5e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c0b62:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0b64:	4604      	mov	r4, r0
   c0b66:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0b68:	db0d      	blt.n	c0b86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c0b6a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c0b6c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c0b6e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0b70:	dd04      	ble.n	c0b7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c0b72:	00b9      	lsls	r1, r7, #2
   c0b74:	f7fd fc24 	bl	be3c0 <realloc>
            if (!d) {
   c0b78:	b918      	cbnz	r0, c0b82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c0b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c0b7c:	f7fd fc18 	bl	be3b0 <free>
        T* d = nullptr;
   c0b80:	2000      	movs	r0, #0
        data_ = d;
   c0b82:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c0b84:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c0b86:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c0b88:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c0b8a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c0b8e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0b90:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c0b94:	1d08      	adds	r0, r1, #4
   c0b96:	f003 fd61 	bl	c465c <memmove>
    new(p) T(std::move(value));
   c0b9a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c0b9e:	6863      	ldr	r3, [r4, #4]
   c0ba0:	3301      	adds	r3, #1
   c0ba2:	6063      	str	r3, [r4, #4]
    return true;
   c0ba4:	2001      	movs	r0, #1
   c0ba6:	e7e8      	b.n	c0b7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c0ba8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c0baa:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0bae:	4604      	mov	r4, r0
   c0bb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0bb2:	9301      	str	r3, [sp, #4]
   c0bb4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c0bb6:	f7ff fcdd 	bl	c0574 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c0bba:	e9d4 3200 	ldrd	r3, r2, [r4]
   c0bbe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c0bc2:	4293      	cmp	r3, r2
   c0bc4:	4619      	mov	r1, r3
   c0bc6:	d00b      	beq.n	c0be0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c0bc8:	6809      	ldr	r1, [r1, #0]
   c0bca:	42a9      	cmp	r1, r5
   c0bcc:	f103 0304 	add.w	r3, r3, #4
   c0bd0:	d1f7      	bne.n	c0bc2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c0bd2:	a801      	add	r0, sp, #4
   c0bd4:	f7ff ff0d 	bl	c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c0bd8:	2500      	movs	r5, #0
}
   c0bda:	4628      	mov	r0, r5
   c0bdc:	b003      	add	sp, #12
   c0bde:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c0be0:	4629      	mov	r1, r5
   c0be2:	4620      	mov	r0, r4
   c0be4:	f7ff ffba 	bl	c0b5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c0be8:	4605      	mov	r5, r0
   c0bea:	2800      	cmp	r0, #0
   c0bec:	d0f1      	beq.n	c0bd2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c0bee:	6863      	ldr	r3, [r4, #4]
   c0bf0:	2b01      	cmp	r3, #1
   c0bf2:	d101      	bne.n	c0bf8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c0bf4:	f7ff fe00 	bl	c07f8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0bf8:	a801      	add	r0, sp, #4
   c0bfa:	f7ff fefa 	bl	c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c0bfe:	e7ec      	b.n	c0bda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c0c00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0c00:	b570      	push	{r4, r5, r6, lr}
   c0c02:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c0c04:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0c08:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c0c0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c0c0e:	4282      	cmp	r2, r0
   c0c10:	d00f      	beq.n	c0c32 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c0c12:	4601      	mov	r1, r0
            if (*p == value) {
   c0c14:	681d      	ldr	r5, [r3, #0]
   c0c16:	f851 6b04 	ldr.w	r6, [r1], #4
   c0c1a:	42ae      	cmp	r6, r5
   c0c1c:	d107      	bne.n	c0c2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0c1e:	1a52      	subs	r2, r2, r1
   c0c20:	f003 fd1c 	bl	c465c <memmove>
    --size_;
   c0c24:	6863      	ldr	r3, [r4, #4]
   c0c26:	3b01      	subs	r3, #1
   c0c28:	6063      	str	r3, [r4, #4]
    return true;
   c0c2a:	2001      	movs	r0, #1
}
   c0c2c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c0c2e:	4608      	mov	r0, r1
   c0c30:	e7ed      	b.n	c0c0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0c32:	2000      	movs	r0, #0
   c0c34:	e7fa      	b.n	c0c2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0c36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0c36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0c38:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0c3c:	4604      	mov	r4, r0
   c0c3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0c40:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0c42:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0c44:	f7ff fc96 	bl	c0574 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0c48:	a901      	add	r1, sp, #4
   c0c4a:	4620      	mov	r0, r4
   c0c4c:	f7ff ffd8 	bl	c0c00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0c50:	b118      	cbz	r0, c0c5a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0c52:	6863      	ldr	r3, [r4, #4]
   c0c54:	b90b      	cbnz	r3, c0c5a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0c56:	f7ff fddb 	bl	c0810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0c5a:	a803      	add	r0, sp, #12
   c0c5c:	f7ff fec9 	bl	c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0c60:	b004      	add	sp, #16
   c0c62:	bd10      	pop	{r4, pc}

000c0c64 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0c64:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0c66:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c0c6a:	2318      	movs	r3, #24
   c0c6c:	4604      	mov	r4, r0
   c0c6e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0c72:	42ae      	cmp	r6, r5
   c0c74:	d015      	beq.n	c0ca2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0c76:	f105 0110 	add.w	r1, r5, #16
   c0c7a:	4620      	mov	r0, r4
   c0c7c:	f7ff ffc0 	bl	c0c00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0c80:	6863      	ldr	r3, [r4, #4]
   c0c82:	b90b      	cbnz	r3, c0c88 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0c84:	f7ff fdc4 	bl	c0810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0c88:	69e0      	ldr	r0, [r4, #28]
   c0c8a:	6929      	ldr	r1, [r5, #16]
   c0c8c:	6803      	ldr	r3, [r0, #0]
   c0c8e:	68db      	ldr	r3, [r3, #12]
   c0c90:	4798      	blx	r3
        if (h.stream) {
   c0c92:	6969      	ldr	r1, [r5, #20]
   c0c94:	b119      	cbz	r1, c0c9e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c0c96:	6a20      	ldr	r0, [r4, #32]
   c0c98:	6803      	ldr	r3, [r0, #0]
   c0c9a:	68db      	ldr	r3, [r3, #12]
   c0c9c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c0c9e:	3518      	adds	r5, #24
   c0ca0:	e7e7      	b.n	c0c72 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c0ca2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0ca6:	2618      	movs	r6, #24
   c0ca8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0cac:	42ae      	cmp	r6, r5
   c0cae:	d004      	beq.n	c0cba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0cb0:	4628      	mov	r0, r5
   c0cb2:	f000 fe5f 	bl	c1974 <_ZN6StringD1Ev>
   c0cb6:	3518      	adds	r5, #24
   c0cb8:	e7f8      	b.n	c0cac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c0cba:	2300      	movs	r3, #0
   c0cbc:	6163      	str	r3, [r4, #20]
}
   c0cbe:	bd70      	pop	{r4, r5, r6, pc}

000c0cc0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0cc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0cc2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c0cc4:	f7ff fda4 	bl	c0810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0cc8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c0ccc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0cce:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0cd0:	f7ff fc50 	bl	c0574 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c0cd4:	4620      	mov	r0, r4
   c0cd6:	f7ff ffc5 	bl	c0c64 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c0cda:	a801      	add	r0, sp, #4
   c0cdc:	f7ff fe89 	bl	c09f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c0ce0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c0ce2:	b108      	cbz	r0, c0ce8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c0ce4:	f7fd f836 	bl	bdd54 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c0ce8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0cec:	2618      	movs	r6, #24
   c0cee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0cf2:	42ae      	cmp	r6, r5
   c0cf4:	d004      	beq.n	c0d00 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c0cf6:	4628      	mov	r0, r5
   c0cf8:	f000 fe3c 	bl	c1974 <_ZN6StringD1Ev>
   c0cfc:	3518      	adds	r5, #24
   c0cfe:	e7f8      	b.n	c0cf2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c0d00:	6920      	ldr	r0, [r4, #16]
   c0d02:	f7fd fb55 	bl	be3b0 <free>
   c0d06:	6820      	ldr	r0, [r4, #0]
   c0d08:	f7fd fb52 	bl	be3b0 <free>
}
   c0d0c:	4620      	mov	r0, r4
   c0d0e:	b002      	add	sp, #8
   c0d10:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0d14 <__tcf_2>:
    static LogManager mgr;
   c0d14:	4801      	ldr	r0, [pc, #4]	; (c0d1c <__tcf_2+0x8>)
   c0d16:	f7ff bfd3 	b.w	c0cc0 <_ZN5spark10LogManagerD1Ev>
   c0d1a:	bf00      	nop
   c0d1c:	2003e674 	.word	0x2003e674

000c0d20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0d20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0d24:	4604      	mov	r4, r0
   c0d26:	460d      	mov	r5, r1
   c0d28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0d2a:	d915      	bls.n	c0d58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c0d2c:	4290      	cmp	r0, r2
   c0d2e:	d214      	bcs.n	c0d5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0d30:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0d34:	1a75      	subs	r5, r6, r1
   c0d36:	f1a1 0714 	sub.w	r7, r1, #20
   c0d3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0d3c:	42b7      	cmp	r7, r6
   c0d3e:	d01a      	beq.n	c0d76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0d40:	b11c      	cbz	r4, c0d4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0d42:	4631      	mov	r1, r6
   c0d44:	4620      	mov	r0, r4
   c0d46:	f7ff fc78 	bl	c063a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c0d4a:	f106 0008 	add.w	r0, r6, #8
   c0d4e:	f7ff fdf9 	bl	c0944 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0d52:	3e14      	subs	r6, #20
   c0d54:	3c14      	subs	r4, #20
   c0d56:	e7f1      	b.n	c0d3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0d58:	d00d      	beq.n	c0d76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c0d5a:	42b5      	cmp	r5, r6
   c0d5c:	d00b      	beq.n	c0d76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c0d5e:	b11c      	cbz	r4, c0d68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0d60:	4629      	mov	r1, r5
   c0d62:	4620      	mov	r0, r4
   c0d64:	f7ff fc69 	bl	c063a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0d68:	f105 0008 	add.w	r0, r5, #8
   c0d6c:	f7ff fdea 	bl	c0944 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0d70:	3514      	adds	r5, #20
   c0d72:	3414      	adds	r4, #20
   c0d74:	e7f1      	b.n	c0d5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0d78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0d78:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0d7c:	4604      	mov	r4, r0
   c0d7e:	460d      	mov	r5, r1
   c0d80:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0d82:	d914      	bls.n	c0dae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0d84:	4290      	cmp	r0, r2
   c0d86:	d213      	bcs.n	c0db0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0d88:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c0d8c:	1a75      	subs	r5, r6, r1
   c0d8e:	f1a1 0710 	sub.w	r7, r1, #16
   c0d92:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0d94:	42b7      	cmp	r7, r6
   c0d96:	d018      	beq.n	c0dca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0d98:	b11c      	cbz	r4, c0da2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c0d9a:	4631      	mov	r1, r6
   c0d9c:	4620      	mov	r0, r4
   c0d9e:	f000 fe65 	bl	c1a6c <_ZN6StringC1EOS_>
                end->~T();
   c0da2:	4630      	mov	r0, r6
   c0da4:	f000 fde6 	bl	c1974 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c0da8:	3e10      	subs	r6, #16
   c0daa:	3c10      	subs	r4, #16
   c0dac:	e7f2      	b.n	c0d94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c0dae:	d00c      	beq.n	c0dca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0db0:	42b5      	cmp	r5, r6
   c0db2:	d00a      	beq.n	c0dca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0db4:	b11c      	cbz	r4, c0dbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c0db6:	4629      	mov	r1, r5
   c0db8:	4620      	mov	r0, r4
   c0dba:	f000 fe57 	bl	c1a6c <_ZN6StringC1EOS_>
                p->~T();
   c0dbe:	4628      	mov	r0, r5
   c0dc0:	f000 fdd8 	bl	c1974 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0dc4:	3510      	adds	r5, #16
   c0dc6:	3410      	adds	r4, #16
   c0dc8:	e7f2      	b.n	c0db0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c0dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c0dcc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c0dce:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0dd0:	4605      	mov	r5, r0
        if (n > 0) {
   c0dd2:	dd11      	ble.n	c0df8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0dd4:	0130      	lsls	r0, r6, #4
   c0dd6:	f7fd fae3 	bl	be3a0 <malloc>
            if (!d) {
   c0dda:	4604      	mov	r4, r0
   c0ddc:	b158      	cbz	r0, c0df6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c0dde:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0de2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c0de6:	f7ff ffc7 	bl	c0d78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c0dea:	6828      	ldr	r0, [r5, #0]
   c0dec:	f7fd fae0 	bl	be3b0 <free>
        data_ = d;
   c0df0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c0df2:	60ae      	str	r6, [r5, #8]
        return true;
   c0df4:	2001      	movs	r0, #1
    }
   c0df6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c0df8:	2400      	movs	r4, #0
   c0dfa:	e7f6      	b.n	c0dea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c0dfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0e00:	4690      	mov	r8, r2
   c0e02:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0e04:	2300      	movs	r3, #0
   c0e06:	9103      	str	r1, [sp, #12]
    return size_;
   c0e08:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c0e0c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0e0e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0e10:	4299      	cmp	r1, r3
        capacity_(0) {
   c0e12:	e9c0 3300 	strd	r3, r3, [r0]
   c0e16:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c0e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c0e1e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0e22:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0e24:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0e26:	dc23      	bgt.n	c0e70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0e28:	e9d8 5700 	ldrd	r5, r7, [r8]
   c0e2c:	2314      	movs	r3, #20
   c0e2e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0e32:	42af      	cmp	r7, r5
   c0e34:	d03b      	beq.n	c0eae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0e36:	4629      	mov	r1, r5
   c0e38:	a80b      	add	r0, sp, #44	; 0x2c
   c0e3a:	f000 fe17 	bl	c1a6c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c0e3e:	a90b      	add	r1, sp, #44	; 0x2c
   c0e40:	a80f      	add	r0, sp, #60	; 0x3c
   c0e42:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0e44:	f000 fe12 	bl	c1a6c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0e48:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c0e4c:	4299      	cmp	r1, r3
   c0e4e:	da1b      	bge.n	c0e88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0e50:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0e54:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0e58:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c0e5c:	4631      	mov	r1, r6
   c0e5e:	f106 0010 	add.w	r0, r6, #16
   c0e62:	f7ff ff89 	bl	c0d78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0e66:	b9ee      	cbnz	r6, c0ea4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0e6a:	3301      	adds	r3, #1
   c0e6c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c0e6e:	e011      	b.n	c0e94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0e70:	a808      	add	r0, sp, #32
   c0e72:	f7ff ffab 	bl	c0dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0e76:	2800      	cmp	r0, #0
   c0e78:	d1d6      	bne.n	c0e28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c0e7a:	a808      	add	r0, sp, #32
   c0e7c:	f7fd fecd 	bl	bec1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0e80:	4620      	mov	r0, r4
   c0e82:	b015      	add	sp, #84	; 0x54
   c0e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0e88:	3101      	adds	r1, #1
   c0e8a:	a808      	add	r0, sp, #32
   c0e8c:	f7ff ff9e 	bl	c0dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0e90:	2800      	cmp	r0, #0
   c0e92:	d1dd      	bne.n	c0e50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0e94:	a80f      	add	r0, sp, #60	; 0x3c
   c0e96:	f000 fd6d 	bl	c1974 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c0e9a:	a80b      	add	r0, sp, #44	; 0x2c
   c0e9c:	f000 fd6a 	bl	c1974 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0ea0:	3514      	adds	r5, #20
   c0ea2:	e7c6      	b.n	c0e32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0ea4:	a90f      	add	r1, sp, #60	; 0x3c
   c0ea6:	4630      	mov	r0, r6
   c0ea8:	f000 fde0 	bl	c1a6c <_ZN6StringC1EOS_>
   c0eac:	e7dc      	b.n	c0e68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0eae:	2600      	movs	r6, #0
   c0eb0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0eb4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c0eb6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c0eba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0ebe:	429e      	cmp	r6, r3
   c0ec0:	da7c      	bge.n	c0fbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0ec2:	0133      	lsls	r3, r6, #4
   c0ec4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c0ec6:	9306      	str	r3, [sp, #24]
        if (!category) {
   c0ec8:	b90b      	cbnz	r3, c0ece <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c0eca:	3601      	adds	r6, #1
   c0ecc:	e7f5      	b.n	c0eba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c0ece:	2300      	movs	r3, #0
   c0ed0:	9307      	str	r3, [sp, #28]
   c0ed2:	fb09 f306 	mul.w	r3, r9, r6
   c0ed6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c0ed8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c0eda:	a907      	add	r1, sp, #28
   c0edc:	a806      	add	r0, sp, #24
   c0ede:	f7ff fb22 	bl	c0526 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0ee2:	4682      	mov	sl, r0
   c0ee4:	2800      	cmp	r0, #0
   c0ee6:	d0f0      	beq.n	c0eca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c0ee8:	f04f 0300 	mov.w	r3, #0
   c0eec:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0ef0:	4601      	mov	r1, r0
   c0ef2:	9a07      	ldr	r2, [sp, #28]
   c0ef4:	f10d 0317 	add.w	r3, sp, #23
   c0ef8:	4628      	mov	r0, r5
   c0efa:	f7ff fbb1 	bl	c0660 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0efe:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0f02:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0f04:	2f00      	cmp	r7, #0
   c0f06:	d14a      	bne.n	c0f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0f08:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c0f0c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0f10:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0f18:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c0f1c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0f20:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0f22:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0f26:	4293      	cmp	r3, r2
   c0f28:	db17      	blt.n	c0f5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c0f2a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c0f2e:	f1ba 0f00 	cmp.w	sl, #0
   c0f32:	dd30      	ble.n	c0f96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0f34:	fb09 f00a 	mul.w	r0, r9, sl
   c0f38:	f7fd fa32 	bl	be3a0 <malloc>
            if (!d) {
   c0f3c:	4683      	mov	fp, r0
   c0f3e:	b360      	cbz	r0, c0f9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0f40:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0f44:	fb09 1202 	mla	r2, r9, r2, r1
   c0f48:	f7ff feea 	bl	c0d20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0f4c:	6828      	ldr	r0, [r5, #0]
   c0f4e:	f7fd fa2f 	bl	be3b0 <free>
        data_ = d;
   c0f52:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0f56:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c0f5a:	682b      	ldr	r3, [r5, #0]
   c0f5c:	9a01      	ldr	r2, [sp, #4]
   c0f5e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0f62:	686a      	ldr	r2, [r5, #4]
   c0f64:	4651      	mov	r1, sl
   c0f66:	fb09 3202 	mla	r2, r9, r2, r3
   c0f6a:	f10a 0014 	add.w	r0, sl, #20
   c0f6e:	f7ff fed7 	bl	c0d20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0f72:	f1ba 0f00 	cmp.w	sl, #0
   c0f76:	d003      	beq.n	c0f80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0f78:	a90f      	add	r1, sp, #60	; 0x3c
   c0f7a:	4650      	mov	r0, sl
   c0f7c:	f7ff fb5d 	bl	c063a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0f80:	686b      	ldr	r3, [r5, #4]
   c0f82:	3301      	adds	r3, #1
   c0f84:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0f86:	a811      	add	r0, sp, #68	; 0x44
   c0f88:	f7ff fcdc 	bl	c0944 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0f8c:	b13f      	cbz	r7, c0f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c0f8e:	a80b      	add	r0, sp, #44	; 0x2c
   c0f90:	f7ff fcd8 	bl	c0944 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0f94:	e771      	b.n	c0e7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0f96:	46bb      	mov	fp, r7
   c0f98:	e7d8      	b.n	c0f4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0f9a:	2701      	movs	r7, #1
   c0f9c:	e7f3      	b.n	c0f86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c0f9e:	9b01      	ldr	r3, [sp, #4]
   c0fa0:	682d      	ldr	r5, [r5, #0]
   c0fa2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c0fa6:	9b06      	ldr	r3, [sp, #24]
   c0fa8:	781b      	ldrb	r3, [r3, #0]
   c0faa:	b92b      	cbnz	r3, c0fb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0fac:	f8d8 3000 	ldr.w	r3, [r8]
   c0fb0:	9a02      	ldr	r2, [sp, #8]
   c0fb2:	4413      	add	r3, r2
   c0fb4:	7c1b      	ldrb	r3, [r3, #16]
   c0fb6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0fb8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c0fba:	e78e      	b.n	c0eda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0fbc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0fbe:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0fc0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0fc2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0fc4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0fc6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c0fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c0fca:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0fcc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0fce:	60a2      	str	r2, [r4, #8]
   c0fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0fd2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0fd4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0fd6:	60e2      	str	r2, [r4, #12]
   c0fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c0fda:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0fdc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0fde:	6122      	str	r2, [r4, #16]
   c0fe0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0fe2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0fe4:	9b03      	ldr	r3, [sp, #12]
   c0fe6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c0fe8:	6162      	str	r2, [r4, #20]
   c0fea:	7623      	strb	r3, [r4, #24]
   c0fec:	e7cf      	b.n	c0f8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c0ff0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0ff2:	4604      	mov	r4, r0
   c0ff4:	b087      	sub	sp, #28
   c0ff6:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0ff8:	4626      	mov	r6, r4
        stream_(&stream) {
   c0ffa:	4619      	mov	r1, r3
   c0ffc:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0ffe:	4617      	mov	r7, r2
        stream_(&stream) {
   c1000:	f7f5 fc2c 	bl	b685c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c1004:	4b0b      	ldr	r3, [pc, #44]	; (c1034 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c1006:	f846 3b04 	str.w	r3, [r6], #4
   c100a:	4669      	mov	r1, sp
   c100c:	a803      	add	r0, sp, #12
   c100e:	f7f5 fc25 	bl	b685c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c1012:	aa03      	add	r2, sp, #12
   c1014:	4639      	mov	r1, r7
   c1016:	4630      	mov	r0, r6
   c1018:	f7ff fef0 	bl	c0dfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c101c:	a803      	add	r0, sp, #12
   c101e:	f7f5 fba1 	bl	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c1022:	4668      	mov	r0, sp
   c1024:	f7f5 fb9e 	bl	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c1028:	4b03      	ldr	r3, [pc, #12]	; (c1038 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c102a:	6023      	str	r3, [r4, #0]
}
   c102c:	4620      	mov	r0, r4
        stream_(&stream) {
   c102e:	6225      	str	r5, [r4, #32]
}
   c1030:	b007      	add	sp, #28
   c1032:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c1034:	000c6e90 	.word	0x000c6e90
   c1038:	000c808c 	.word	0x000c808c

000c103c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c103c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c103e:	460f      	mov	r7, r1
   c1040:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c1042:	491d      	ldr	r1, [pc, #116]	; (c10b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c1044:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c1046:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c1048:	4616      	mov	r6, r2
   c104a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c104c:	f003 fb7c 	bl	c4748 <strcmp>
   c1050:	b9c0      	cbnz	r0, c1084 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c1052:	b1a4      	cbz	r4, c107e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c1054:	4629      	mov	r1, r5
   c1056:	a801      	add	r0, sp, #4
   c1058:	f7ff fcbc 	bl	c09d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c105c:	4917      	ldr	r1, [pc, #92]	; (c10bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c105e:	2024      	movs	r0, #36	; 0x24
   c1060:	f001 f8ec 	bl	c223c <_ZnwjRKSt9nothrow_t>
   c1064:	4605      	mov	r5, r0
   c1066:	b130      	cbz	r0, c1076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c1068:	ab01      	add	r3, sp, #4
   c106a:	4632      	mov	r2, r6
   c106c:	4621      	mov	r1, r4
   c106e:	f7ff ffbf 	bl	c0ff0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c1072:	4b13      	ldr	r3, [pc, #76]	; (c10c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c1074:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c1076:	a801      	add	r0, sp, #4
   c1078:	f7f5 fb74 	bl	b6764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c107c:	462c      	mov	r4, r5
}
   c107e:	4620      	mov	r0, r4
   c1080:	b005      	add	sp, #20
   c1082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c1084:	490f      	ldr	r1, [pc, #60]	; (c10c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c1086:	4638      	mov	r0, r7
   c1088:	f003 fb5e 	bl	c4748 <strcmp>
   c108c:	b990      	cbnz	r0, c10b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c108e:	2c00      	cmp	r4, #0
   c1090:	d0f5      	beq.n	c107e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c1092:	4629      	mov	r1, r5
   c1094:	a801      	add	r0, sp, #4
   c1096:	f7ff fc9d 	bl	c09d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c109a:	4908      	ldr	r1, [pc, #32]	; (c10bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c109c:	2024      	movs	r0, #36	; 0x24
   c109e:	f001 f8cd 	bl	c223c <_ZnwjRKSt9nothrow_t>
   c10a2:	4605      	mov	r5, r0
   c10a4:	2800      	cmp	r0, #0
   c10a6:	d0e6      	beq.n	c1076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c10a8:	ab01      	add	r3, sp, #4
   c10aa:	4632      	mov	r2, r6
   c10ac:	4621      	mov	r1, r4
   c10ae:	f7ff ff9f 	bl	c0ff0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c10b2:	e7e0      	b.n	c1076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c10b4:	2400      	movs	r4, #0
   c10b6:	e7e2      	b.n	c107e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c10b8:	000c8011 	.word	0x000c8011
   c10bc:	000c81a4 	.word	0x000c81a4
   c10c0:	000c80a4 	.word	0x000c80a4
   c10c4:	000c8015 	.word	0x000c8015

000c10c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c10c8:	4b01      	ldr	r3, [pc, #4]	; (c10d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c10ca:	4a02      	ldr	r2, [pc, #8]	; (c10d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c10cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c10ce:	4770      	bx	lr
   c10d0:	2003e670 	.word	0x2003e670
   c10d4:	000c8026 	.word	0x000c8026

000c10d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c10d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c10dc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c10de:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c10e2:	4604      	mov	r4, r0
   c10e4:	460e      	mov	r6, r1
   c10e6:	4617      	mov	r7, r2
   c10e8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c10ea:	f000 fed7 	bl	c1e9c <_Z16_fetch_usbserialv>
   c10ee:	4581      	cmp	r9, r0
   c10f0:	d04c      	beq.n	c118c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c10f2:	792b      	ldrb	r3, [r5, #4]
   c10f4:	0719      	lsls	r1, r3, #28
   c10f6:	d504      	bpl.n	c1102 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c10f8:	696a      	ldr	r2, [r5, #20]
   c10fa:	4954      	ldr	r1, [pc, #336]	; (c124c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c10fc:	4620      	mov	r0, r4
   c10fe:	f7ff fa8d 	bl	c061c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c1102:	f1b8 0f00 	cmp.w	r8, #0
   c1106:	d00d      	beq.n	c1124 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c1108:	215b      	movs	r1, #91	; 0x5b
   c110a:	4620      	mov	r0, r4
   c110c:	f7ff fa7a 	bl	c0604 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c1110:	4641      	mov	r1, r8
   c1112:	4620      	mov	r0, r4
   c1114:	f7ff fa67 	bl	c05e6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c1118:	6823      	ldr	r3, [r4, #0]
   c111a:	494d      	ldr	r1, [pc, #308]	; (c1250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c111c:	68db      	ldr	r3, [r3, #12]
   c111e:	2202      	movs	r2, #2
   c1120:	4620      	mov	r0, r4
   c1122:	4798      	blx	r3
    if (attr.has_file) {
   c1124:	792b      	ldrb	r3, [r5, #4]
   c1126:	07da      	lsls	r2, r3, #31
   c1128:	d523      	bpl.n	c1172 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c112a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c112e:	212f      	movs	r1, #47	; 0x2f
   c1130:	4640      	mov	r0, r8
   c1132:	f003 fb86 	bl	c4842 <strrchr>
    if (s1) {
   c1136:	b108      	cbz	r0, c113c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c1138:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c113c:	4641      	mov	r1, r8
   c113e:	4620      	mov	r0, r4
   c1140:	f7ff fa51 	bl	c05e6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c1144:	792b      	ldrb	r3, [r5, #4]
   c1146:	079b      	lsls	r3, r3, #30
   c1148:	d508      	bpl.n	c115c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c114a:	213a      	movs	r1, #58	; 0x3a
   c114c:	4620      	mov	r0, r4
   c114e:	f7ff fa59 	bl	c0604 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c1152:	68ea      	ldr	r2, [r5, #12]
   c1154:	493f      	ldr	r1, [pc, #252]	; (c1254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c1156:	4620      	mov	r0, r4
   c1158:	f7ff fa60 	bl	c061c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c115c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c115e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c1160:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c1164:	68db      	ldr	r3, [r3, #12]
   c1166:	bf14      	ite	ne
   c1168:	493b      	ldrne	r1, [pc, #236]	; (c1258 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c116a:	493c      	ldreq	r1, [pc, #240]	; (c125c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c116c:	2202      	movs	r2, #2
            write(": ", 2);
   c116e:	4620      	mov	r0, r4
   c1170:	4798      	blx	r3
    if (attr.has_function) {
   c1172:	792b      	ldrb	r3, [r5, #4]
   c1174:	0758      	lsls	r0, r3, #29
   c1176:	d51d      	bpl.n	c11b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c1178:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c117a:	460b      	mov	r3, r1
   c117c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c117e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c1182:	b160      	cbz	r0, c119e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c1184:	2820      	cmp	r0, #32
   c1186:	d108      	bne.n	c119a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c1188:	4619      	mov	r1, r3
   c118a:	e7f7      	b.n	c117c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c118c:	4834      	ldr	r0, [pc, #208]	; (c1260 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c118e:	f000 f966 	bl	c145e <_ZN5spark12NetworkClass9listeningEv>
   c1192:	2800      	cmp	r0, #0
   c1194:	d0ad      	beq.n	c10f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c1196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c119a:	2828      	cmp	r0, #40	; 0x28
   c119c:	d1ee      	bne.n	c117c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c119e:	6823      	ldr	r3, [r4, #0]
   c11a0:	1a52      	subs	r2, r2, r1
   c11a2:	68db      	ldr	r3, [r3, #12]
   c11a4:	4620      	mov	r0, r4
   c11a6:	4798      	blx	r3
        write("(): ", 4);
   c11a8:	6823      	ldr	r3, [r4, #0]
   c11aa:	492e      	ldr	r1, [pc, #184]	; (c1264 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c11ac:	68db      	ldr	r3, [r3, #12]
   c11ae:	2204      	movs	r2, #4
   c11b0:	4620      	mov	r0, r4
   c11b2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c11b4:	2100      	movs	r1, #0
   c11b6:	4638      	mov	r0, r7
   c11b8:	f7fc ffec 	bl	be194 <log_level_name>
   c11bc:	4601      	mov	r1, r0
    write(s);
   c11be:	4620      	mov	r0, r4
   c11c0:	f7ff fa11 	bl	c05e6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c11c4:	6823      	ldr	r3, [r4, #0]
   c11c6:	4925      	ldr	r1, [pc, #148]	; (c125c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c11c8:	68db      	ldr	r3, [r3, #12]
   c11ca:	2202      	movs	r2, #2
   c11cc:	4620      	mov	r0, r4
   c11ce:	4798      	blx	r3
    if (msg) {
   c11d0:	b11e      	cbz	r6, c11da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c11d2:	4631      	mov	r1, r6
   c11d4:	4620      	mov	r0, r4
   c11d6:	f7ff fa06 	bl	c05e6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c11da:	792b      	ldrb	r3, [r5, #4]
   c11dc:	f013 0f30 	tst.w	r3, #48	; 0x30
   c11e0:	d02c      	beq.n	c123c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c11e2:	6823      	ldr	r3, [r4, #0]
   c11e4:	4920      	ldr	r1, [pc, #128]	; (c1268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c11e6:	68db      	ldr	r3, [r3, #12]
   c11e8:	2202      	movs	r2, #2
   c11ea:	4620      	mov	r0, r4
   c11ec:	4798      	blx	r3
        if (attr.has_code) {
   c11ee:	792b      	ldrb	r3, [r5, #4]
   c11f0:	06d9      	lsls	r1, r3, #27
   c11f2:	d50a      	bpl.n	c120a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c11f4:	6823      	ldr	r3, [r4, #0]
   c11f6:	491d      	ldr	r1, [pc, #116]	; (c126c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c11f8:	68db      	ldr	r3, [r3, #12]
   c11fa:	2207      	movs	r2, #7
   c11fc:	4620      	mov	r0, r4
   c11fe:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c1200:	69aa      	ldr	r2, [r5, #24]
   c1202:	491b      	ldr	r1, [pc, #108]	; (c1270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c1204:	4620      	mov	r0, r4
   c1206:	f7ff fa09 	bl	c061c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c120a:	792b      	ldrb	r3, [r5, #4]
   c120c:	069a      	lsls	r2, r3, #26
   c120e:	d511      	bpl.n	c1234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c1210:	06db      	lsls	r3, r3, #27
   c1212:	d505      	bpl.n	c1220 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c1214:	6823      	ldr	r3, [r4, #0]
   c1216:	4910      	ldr	r1, [pc, #64]	; (c1258 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c1218:	68db      	ldr	r3, [r3, #12]
   c121a:	2202      	movs	r2, #2
   c121c:	4620      	mov	r0, r4
   c121e:	4798      	blx	r3
            write("details = ", 10);
   c1220:	6823      	ldr	r3, [r4, #0]
   c1222:	4914      	ldr	r1, [pc, #80]	; (c1274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c1224:	68db      	ldr	r3, [r3, #12]
   c1226:	4620      	mov	r0, r4
   c1228:	220a      	movs	r2, #10
   c122a:	4798      	blx	r3
            write(attr.details);
   c122c:	69e9      	ldr	r1, [r5, #28]
   c122e:	4620      	mov	r0, r4
   c1230:	f7ff f9d9 	bl	c05e6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c1234:	215d      	movs	r1, #93	; 0x5d
   c1236:	4620      	mov	r0, r4
   c1238:	f7ff f9e4 	bl	c0604 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c123c:	6823      	ldr	r3, [r4, #0]
   c123e:	490e      	ldr	r1, [pc, #56]	; (c1278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c1240:	68db      	ldr	r3, [r3, #12]
   c1242:	4620      	mov	r0, r4
   c1244:	2202      	movs	r2, #2
}
   c1246:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c124a:	4718      	bx	r3
   c124c:	000c802a 	.word	0x000c802a
   c1250:	000c8031 	.word	0x000c8031
   c1254:	000c6a0c 	.word	0x000c6a0c
   c1258:	000c8034 	.word	0x000c8034
   c125c:	000c8039 	.word	0x000c8039
   c1260:	2003e69c 	.word	0x2003e69c
   c1264:	000c8037 	.word	0x000c8037
   c1268:	000c803c 	.word	0x000c803c
   c126c:	000c803f 	.word	0x000c803f
   c1270:	000c8047 	.word	0x000c8047
   c1274:	000c804a 	.word	0x000c804a
   c1278:	000c8055 	.word	0x000c8055

000c127c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c127c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1280:	b085      	sub	sp, #20
    return stream_;
   c1282:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c1286:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c1288:	4605      	mov	r5, r0
   c128a:	460f      	mov	r7, r1
   c128c:	4690      	mov	r8, r2
   c128e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c1290:	f000 fe04 	bl	c1e9c <_Z16_fetch_usbserialv>
   c1294:	4581      	cmp	r9, r0
   c1296:	d105      	bne.n	c12a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c1298:	4849      	ldr	r0, [pc, #292]	; (c13c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c129a:	f000 f8e0 	bl	c145e <_ZN5spark12NetworkClass9listeningEv>
   c129e:	2800      	cmp	r0, #0
   c12a0:	f040 808a 	bne.w	c13b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c12a4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c12a6:	4a47      	ldr	r2, [pc, #284]	; (c13c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c12a8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c12aa:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c12ae:	a801      	add	r0, sp, #4
        strm_(stream) {
   c12b0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c12b2:	f88d 9008 	strb.w	r9, [sp, #8]
   c12b6:	f7ff f850 	bl	c035a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c12ba:	4649      	mov	r1, r9
   c12bc:	4640      	mov	r0, r8
   c12be:	f7fc ff69 	bl	be194 <log_level_name>
    json.name("l", 1).value(s);
   c12c2:	4941      	ldr	r1, [pc, #260]	; (c13c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c12c4:	4680      	mov	r8, r0
   c12c6:	2201      	movs	r2, #1
   c12c8:	a801      	add	r0, sp, #4
   c12ca:	f7ff f8d5 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c12ce:	4641      	mov	r1, r8
   c12d0:	f7ff f97b 	bl	c05ca <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c12d4:	b13f      	cbz	r7, c12e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c12d6:	493d      	ldr	r1, [pc, #244]	; (c13cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c12d8:	2201      	movs	r2, #1
   c12da:	a801      	add	r0, sp, #4
   c12dc:	f7ff f8cc 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c12e0:	4639      	mov	r1, r7
   c12e2:	f7ff f972 	bl	c05ca <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c12e6:	b13e      	cbz	r6, c12f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c12e8:	4939      	ldr	r1, [pc, #228]	; (c13d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c12ea:	2201      	movs	r2, #1
   c12ec:	a801      	add	r0, sp, #4
   c12ee:	f7ff f8c3 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c12f2:	4631      	mov	r1, r6
   c12f4:	f7ff f969 	bl	c05ca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c12f8:	7923      	ldrb	r3, [r4, #4]
   c12fa:	07df      	lsls	r7, r3, #31
   c12fc:	d50e      	bpl.n	c131c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c12fe:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c1300:	212f      	movs	r1, #47	; 0x2f
   c1302:	4630      	mov	r0, r6
   c1304:	f003 fa9d 	bl	c4842 <strrchr>
    if (s1) {
   c1308:	b100      	cbz	r0, c130c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c130a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c130c:	4931      	ldr	r1, [pc, #196]	; (c13d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c130e:	2201      	movs	r2, #1
   c1310:	a801      	add	r0, sp, #4
   c1312:	f7ff f8b1 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c1316:	4631      	mov	r1, r6
   c1318:	f7ff f957 	bl	c05ca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c131c:	7923      	ldrb	r3, [r4, #4]
   c131e:	079e      	lsls	r6, r3, #30
   c1320:	d507      	bpl.n	c1332 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c1322:	492d      	ldr	r1, [pc, #180]	; (c13d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c1324:	2202      	movs	r2, #2
   c1326:	a801      	add	r0, sp, #4
   c1328:	f7ff f8a6 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c132c:	68e1      	ldr	r1, [r4, #12]
   c132e:	f7ff f821 	bl	c0374 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c1332:	7923      	ldrb	r3, [r4, #4]
   c1334:	0758      	lsls	r0, r3, #29
   c1336:	d514      	bpl.n	c1362 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c1338:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c133a:	4633      	mov	r3, r6
   c133c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c133e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c1342:	b12a      	cbz	r2, c1350 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c1344:	2a20      	cmp	r2, #32
   c1346:	d101      	bne.n	c134c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c1348:	461e      	mov	r6, r3
   c134a:	e7f7      	b.n	c133c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c134c:	2a28      	cmp	r2, #40	; 0x28
   c134e:	d1f5      	bne.n	c133c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c1350:	4922      	ldr	r1, [pc, #136]	; (c13dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c1352:	2202      	movs	r2, #2
   c1354:	a801      	add	r0, sp, #4
   c1356:	f7ff f88f 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c135a:	1bba      	subs	r2, r7, r6
   c135c:	4631      	mov	r1, r6
   c135e:	f7ff f89b 	bl	c0498 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c1362:	7923      	ldrb	r3, [r4, #4]
   c1364:	0719      	lsls	r1, r3, #28
   c1366:	d507      	bpl.n	c1378 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c1368:	491d      	ldr	r1, [pc, #116]	; (c13e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c136a:	2201      	movs	r2, #1
   c136c:	a801      	add	r0, sp, #4
   c136e:	f7ff f883 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c1372:	6961      	ldr	r1, [r4, #20]
   c1374:	f7ff f810 	bl	c0398 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c1378:	7923      	ldrb	r3, [r4, #4]
   c137a:	06da      	lsls	r2, r3, #27
   c137c:	d508      	bpl.n	c1390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c137e:	2204      	movs	r2, #4
   c1380:	4918      	ldr	r1, [pc, #96]	; (c13e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c1382:	eb0d 0002 	add.w	r0, sp, r2
   c1386:	f7ff f877 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c138a:	69a1      	ldr	r1, [r4, #24]
   c138c:	f7fe fff2 	bl	c0374 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c1390:	7923      	ldrb	r3, [r4, #4]
   c1392:	069b      	lsls	r3, r3, #26
   c1394:	d507      	bpl.n	c13a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c1396:	4914      	ldr	r1, [pc, #80]	; (c13e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c1398:	2206      	movs	r2, #6
   c139a:	a801      	add	r0, sp, #4
   c139c:	f7ff f86c 	bl	c0478 <_ZN5spark10JSONWriter4nameEPKcj>
   c13a0:	69e1      	ldr	r1, [r4, #28]
   c13a2:	f7ff f912 	bl	c05ca <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c13a6:	a801      	add	r0, sp, #4
   c13a8:	f7fe ffc1 	bl	c032e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c13ac:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c13ae:	490f      	ldr	r1, [pc, #60]	; (c13ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c13b0:	6803      	ldr	r3, [r0, #0]
   c13b2:	2202      	movs	r2, #2
   c13b4:	68db      	ldr	r3, [r3, #12]
   c13b6:	4798      	blx	r3
}
   c13b8:	b005      	add	sp, #20
   c13ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c13be:	bf00      	nop
   c13c0:	2003e69c 	.word	0x2003e69c
   c13c4:	000c8074 	.word	0x000c8074
   c13c8:	000c8007 	.word	0x000c8007
   c13cc:	000c8058 	.word	0x000c8058
   c13d0:	000c89c6 	.word	0x000c89c6
   c13d4:	000c6a8d 	.word	0x000c6a8d
   c13d8:	000c805a 	.word	0x000c805a
   c13dc:	000c805d 	.word	0x000c805d
   c13e0:	000c6c93 	.word	0x000c6c93
   c13e4:	000c8060 	.word	0x000c8060
   c13e8:	000c8065 	.word	0x000c8065
   c13ec:	000c8055 	.word	0x000c8055

000c13f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c13f0:	2300      	movs	r3, #0
   c13f2:	6840      	ldr	r0, [r0, #4]
   c13f4:	461a      	mov	r2, r3
   c13f6:	f7fc bf73 	b.w	be2e0 <network_connect>

000c13fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c13fa:	6840      	ldr	r0, [r0, #4]
   c13fc:	2200      	movs	r2, #0
   c13fe:	2102      	movs	r1, #2
   c1400:	f7fc bf7e 	b.w	be300 <network_disconnect>

000c1404 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c1404:	2200      	movs	r2, #0
   c1406:	6840      	ldr	r0, [r0, #4]
   c1408:	4611      	mov	r1, r2
   c140a:	f7fc bf71 	b.w	be2f0 <network_connecting>

000c140e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c140e:	2200      	movs	r2, #0
   c1410:	6840      	ldr	r0, [r0, #4]
   c1412:	4611      	mov	r1, r2
   c1414:	f7fc bf7c 	b.w	be310 <network_ready>

000c1418 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c1418:	2300      	movs	r3, #0
   c141a:	6840      	ldr	r0, [r0, #4]
   c141c:	461a      	mov	r2, r3
   c141e:	4619      	mov	r1, r3
   c1420:	f7fc bf7e 	b.w	be320 <network_on>

000c1424 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c1424:	2300      	movs	r3, #0
   c1426:	6840      	ldr	r0, [r0, #4]
   c1428:	461a      	mov	r2, r3
   c142a:	4619      	mov	r1, r3
   c142c:	f7fc bf80 	b.w	be330 <network_off>

000c1430 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c1430:	6840      	ldr	r0, [r0, #4]
   c1432:	2100      	movs	r1, #0
   c1434:	f7fc bfa4 	b.w	be380 <network_is_on>

000c1438 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c1438:	6840      	ldr	r0, [r0, #4]
   c143a:	2100      	movs	r1, #0
   c143c:	f7fc bfa8 	b.w	be390 <network_is_off>

000c1440 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c1440:	6840      	ldr	r0, [r0, #4]
   c1442:	2200      	movs	r2, #0
   c1444:	f081 0101 	eor.w	r1, r1, #1
   c1448:	f7fc bf7a 	b.w	be340 <network_listen>

000c144c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c144c:	6840      	ldr	r0, [r0, #4]
   c144e:	2200      	movs	r2, #0
   c1450:	f7fc bf86 	b.w	be360 <network_set_listen_timeout>

000c1454 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c1454:	2200      	movs	r2, #0
   c1456:	6840      	ldr	r0, [r0, #4]
   c1458:	4611      	mov	r1, r2
   c145a:	f7fc bf89 	b.w	be370 <network_get_listen_timeout>

000c145e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c145e:	2200      	movs	r2, #0
   c1460:	6840      	ldr	r0, [r0, #4]
   c1462:	4611      	mov	r1, r2
   c1464:	f7fc bf74 	b.w	be350 <network_listening>

000c1468 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c1468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c146c:	b095      	sub	sp, #84	; 0x54
   c146e:	4614      	mov	r4, r2
   c1470:	460d      	mov	r5, r1
   c1472:	4607      	mov	r7, r0
    IPAddress addr;
   c1474:	f7fe fe0a 	bl	c008c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c1478:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c147a:	221c      	movs	r2, #28
   c147c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c147e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1480:	f003 f906 	bl	c4690 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c1484:	2340      	movs	r3, #64	; 0x40
   c1486:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c1488:	4620      	mov	r0, r4
   c148a:	466b      	mov	r3, sp
   c148c:	aa0c      	add	r2, sp, #48	; 0x30
   c148e:	2100      	movs	r1, #0
   c1490:	f7fc fd70 	bl	bdf74 <netdb_getaddrinfo>
    if (!r) {
   c1494:	4604      	mov	r4, r0
   c1496:	2800      	cmp	r0, #0
   c1498:	d14b      	bne.n	c1532 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c149a:	4602      	mov	r2, r0
   c149c:	2101      	movs	r1, #1
   c149e:	6868      	ldr	r0, [r5, #4]
   c14a0:	f7fc ff36 	bl	be310 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c14a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c14a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c14a8:	4622      	mov	r2, r4
   c14aa:	6868      	ldr	r0, [r5, #4]
   c14ac:	f7fc ff30 	bl	be310 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c14b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c14b2:	4681      	mov	r9, r0
        bool ok = false;
   c14b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c14b6:	2e00      	cmp	r6, #0
   c14b8:	d03b      	beq.n	c1532 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c14ba:	2900      	cmp	r1, #0
   c14bc:	d139      	bne.n	c1532 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c14be:	6873      	ldr	r3, [r6, #4]
   c14c0:	2b02      	cmp	r3, #2
   c14c2:	d003      	beq.n	c14cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c14c4:	2b0a      	cmp	r3, #10
   c14c6:	d011      	beq.n	c14ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c14c8:	69f6      	ldr	r6, [r6, #28]
   c14ca:	e7f4      	b.n	c14b6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c14cc:	f1b8 0f00 	cmp.w	r8, #0
   c14d0:	d0fa      	beq.n	c14c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c14d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c14d4:	a806      	add	r0, sp, #24
   c14d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c14d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c14da:	f7fe fe05 	bl	c00e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c14de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c14e0:	1d3c      	adds	r4, r7, #4
   c14e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c14e4:	682b      	ldr	r3, [r5, #0]
   c14e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c14e8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c14ea:	e7ed      	b.n	c14c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c14ec:	f1b9 0f00 	cmp.w	r9, #0
   c14f0:	d0ea      	beq.n	c14c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c14f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c14f4:	2210      	movs	r2, #16
   c14f6:	a801      	add	r0, sp, #4
   c14f8:	f003 f8ca 	bl	c4690 <memset>
                    a.v = 6;
   c14fc:	2306      	movs	r3, #6
   c14fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c1502:	ad01      	add	r5, sp, #4
   c1504:	f104 0308 	add.w	r3, r4, #8
   c1508:	3418      	adds	r4, #24
   c150a:	6818      	ldr	r0, [r3, #0]
   c150c:	6859      	ldr	r1, [r3, #4]
   c150e:	462a      	mov	r2, r5
   c1510:	c203      	stmia	r2!, {r0, r1}
   c1512:	3308      	adds	r3, #8
   c1514:	42a3      	cmp	r3, r4
   c1516:	4615      	mov	r5, r2
   c1518:	d1f7      	bne.n	c150a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c151a:	a901      	add	r1, sp, #4
   c151c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c151e:	ad07      	add	r5, sp, #28
   c1520:	f7fe fdc2 	bl	c00a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c1524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1526:	1d3c      	adds	r4, r7, #4
   c1528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c152a:	682b      	ldr	r3, [r5, #0]
   c152c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c152e:	4649      	mov	r1, r9
   c1530:	e7ca      	b.n	c14c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c1532:	9800      	ldr	r0, [sp, #0]
   c1534:	f7fc fd16 	bl	bdf64 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c1538:	4638      	mov	r0, r7
   c153a:	b015      	add	sp, #84	; 0x54
   c153c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c1540 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c1540:	4b02      	ldr	r3, [pc, #8]	; (c154c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c1542:	4a03      	ldr	r2, [pc, #12]	; (c1550 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c1544:	601a      	str	r2, [r3, #0]
   c1546:	2200      	movs	r2, #0
   c1548:	605a      	str	r2, [r3, #4]

} // spark
   c154a:	4770      	bx	lr
   c154c:	2003e69c 	.word	0x2003e69c
   c1550:	000c80ec 	.word	0x000c80ec

000c1554 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c1554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1556:	4606      	mov	r6, r0
   c1558:	460d      	mov	r5, r1
  size_t n = 0;
   c155a:	188f      	adds	r7, r1, r2
   c155c:	2400      	movs	r4, #0
  while (size--) {
   c155e:	42bd      	cmp	r5, r7
   c1560:	d00c      	beq.n	c157c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c1562:	6833      	ldr	r3, [r6, #0]
   c1564:	f815 1b01 	ldrb.w	r1, [r5], #1
   c1568:	689b      	ldr	r3, [r3, #8]
   c156a:	4630      	mov	r0, r6
   c156c:	4798      	blx	r3
     if (chunk>=0)
   c156e:	1e03      	subs	r3, r0, #0
   c1570:	db01      	blt.n	c1576 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c1572:	441c      	add	r4, r3
  while (size--) {
   c1574:	e7f3      	b.n	c155e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c1576:	2c00      	cmp	r4, #0
   c1578:	bf08      	it	eq
   c157a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c157c:	4620      	mov	r0, r4
   c157e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c1580 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c1580:	b508      	push	{r3, lr}
  return write(str);
   c1582:	f7f6 fa5b 	bl	b7a3c <_ZN5Print5writeEPKc>
}
   c1586:	bd08      	pop	{r3, pc}

000c1588 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c1588:	6803      	ldr	r3, [r0, #0]
   c158a:	689b      	ldr	r3, [r3, #8]
   c158c:	4718      	bx	r3

000c158e <_ZN5Print5printEPK19__FlashStringHelper>:
   c158e:	b508      	push	{r3, lr}
   c1590:	f7f6 fa54 	bl	b7a3c <_ZN5Print5writeEPKc>
   c1594:	bd08      	pop	{r3, pc}

000c1596 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c1596:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c1598:	210d      	movs	r1, #13
{
   c159a:	4605      	mov	r5, r0
  size_t n = print('\r');
   c159c:	f7ff fff4 	bl	c1588 <_ZN5Print5printEc>
  n += print('\n');
   c15a0:	210a      	movs	r1, #10
  size_t n = print('\r');
   c15a2:	4604      	mov	r4, r0
  n += print('\n');
   c15a4:	4628      	mov	r0, r5
   c15a6:	f7ff ffef 	bl	c1588 <_ZN5Print5printEc>
  return n;
}
   c15aa:	4420      	add	r0, r4
   c15ac:	bd38      	pop	{r3, r4, r5, pc}

000c15ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c15ae:	b538      	push	{r3, r4, r5, lr}
   c15b0:	4605      	mov	r5, r0
  return write(str);
   c15b2:	f7f6 fa43 	bl	b7a3c <_ZN5Print5writeEPKc>
   c15b6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c15b8:	4628      	mov	r0, r5
   c15ba:	f7ff ffec 	bl	c1596 <_ZN5Print7printlnEv>
  return n;
}
   c15be:	4420      	add	r0, r4
   c15c0:	bd38      	pop	{r3, r4, r5, pc}

000c15c2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c15c2:	f7ff bff4 	b.w	c15ae <_ZN5Print7printlnEPKc>

000c15c6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c15c6:	b530      	push	{r4, r5, lr}
   c15c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c15ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c15cc:	2a01      	cmp	r2, #1
  *str = '\0';
   c15ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c15d2:	bf98      	it	ls
   c15d4:	220a      	movls	r2, #10
   c15d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c15d8:	460d      	mov	r5, r1
   c15da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c15de:	fb01 5312 	mls	r3, r1, r2, r5
   c15e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c15e6:	2b09      	cmp	r3, #9
   c15e8:	bf94      	ite	ls
   c15ea:	3330      	addls	r3, #48	; 0x30
   c15ec:	3337      	addhi	r3, #55	; 0x37
   c15ee:	b2db      	uxtb	r3, r3
  } while(n);
   c15f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c15f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c15f6:	d9ef      	bls.n	c15d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c15f8:	4621      	mov	r1, r4
   c15fa:	f7f6 fa1f 	bl	b7a3c <_ZN5Print5writeEPKc>
}
   c15fe:	b00b      	add	sp, #44	; 0x2c
   c1600:	bd30      	pop	{r4, r5, pc}

000c1602 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c1602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1606:	b086      	sub	sp, #24
   c1608:	af00      	add	r7, sp, #0
   c160a:	4605      	mov	r5, r0
   c160c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c160e:	1d38      	adds	r0, r7, #4
   c1610:	2114      	movs	r1, #20
{
   c1612:	4614      	mov	r4, r2
    va_copy(args2, args);
   c1614:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c1616:	f7fc fef3 	bl	be400 <vsnprintf>

    if (n<bufsize)
   c161a:	2813      	cmp	r0, #19
   c161c:	d80e      	bhi.n	c163c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c161e:	1d39      	adds	r1, r7, #4
   c1620:	4628      	mov	r0, r5
   c1622:	f7f6 fa0b 	bl	b7a3c <_ZN5Print5writeEPKc>
   c1626:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c1628:	b11e      	cbz	r6, c1632 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c162a:	4628      	mov	r0, r5
   c162c:	f7ff ffb3 	bl	c1596 <_ZN5Print7printlnEv>
   c1630:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c1632:	4620      	mov	r0, r4
   c1634:	3718      	adds	r7, #24
   c1636:	46bd      	mov	sp, r7
   c1638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c163c:	f100 0308 	add.w	r3, r0, #8
   c1640:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c1644:	46e8      	mov	r8, sp
        char bigger[n+1];
   c1646:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c164a:	4622      	mov	r2, r4
   c164c:	1c41      	adds	r1, r0, #1
   c164e:	683b      	ldr	r3, [r7, #0]
   c1650:	4668      	mov	r0, sp
   c1652:	f7fc fed5 	bl	be400 <vsnprintf>
  return write(str);
   c1656:	4669      	mov	r1, sp
   c1658:	4628      	mov	r0, r5
   c165a:	f7f6 f9ef 	bl	b7a3c <_ZN5Print5writeEPKc>
   c165e:	4604      	mov	r4, r0
   c1660:	46c5      	mov	sp, r8
   c1662:	e7e1      	b.n	c1628 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c1664 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c1664:	4b01      	ldr	r3, [pc, #4]	; (c166c <_GLOBAL__sub_I_RGB+0x8>)
   c1666:	2200      	movs	r2, #0
   c1668:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c166a:	4770      	bx	lr
   c166c:	2003e6a4 	.word	0x2003e6a4

000c1670 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c1670:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c1674:	1c53      	adds	r3, r2, #1
   c1676:	d00b      	beq.n	c1690 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c1678:	8843      	ldrh	r3, [r0, #2]
   c167a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c167c:	428b      	cmp	r3, r1
   c167e:	d803      	bhi.n	c1688 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c1680:	4288      	cmp	r0, r1
   c1682:	4603      	mov	r3, r0
   c1684:	bf28      	it	cs
   c1686:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c1688:	4619      	mov	r1, r3
   c168a:	b290      	uxth	r0, r2
   c168c:	f7fc bc8a 	b.w	bdfa4 <HAL_Servo_Write_Pulse_Width>
}
   c1690:	4770      	bx	lr

000c1692 <_ZN5Servo5writeEi>:
{
   c1692:	b513      	push	{r0, r1, r4, lr}
   c1694:	4604      	mov	r4, r0
   c1696:	4608      	mov	r0, r1
   c1698:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c169c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c16a0:	4288      	cmp	r0, r1
   c16a2:	db10      	blt.n	c16c6 <_ZN5Servo5writeEi+0x34>
   c16a4:	4290      	cmp	r0, r2
   c16a6:	bfa8      	it	ge
   c16a8:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c16aa:	88a3      	ldrh	r3, [r4, #4]
   c16ac:	9300      	str	r3, [sp, #0]
   c16ae:	8863      	ldrh	r3, [r4, #2]
   c16b0:	f7fc fede 	bl	be470 <_Z3mapiiiii>
   c16b4:	68e1      	ldr	r1, [r4, #12]
   c16b6:	4401      	add	r1, r0
   c16b8:	b289      	uxth	r1, r1
   c16ba:	4620      	mov	r0, r4
}
   c16bc:	b002      	add	sp, #8
   c16be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c16c2:	f7ff bfd5 	b.w	c1670 <_ZN5Servo17writeMicrosecondsEt>
   c16c6:	4608      	mov	r0, r1
   c16c8:	e7ef      	b.n	c16aa <_ZN5Servo5writeEi+0x18>
	...

000c16cc <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c16cc:	4a04      	ldr	r2, [pc, #16]	; (c16e0 <_ZN5Servo11resetFieldsEv+0x14>)
   c16ce:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c16d2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c16d6:	23b4      	movs	r3, #180	; 0xb4
   c16d8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c16da:	2300      	movs	r3, #0
   c16dc:	60c3      	str	r3, [r0, #12]
}
   c16de:	4770      	bx	lr
   c16e0:	0220ffff 	.word	0x0220ffff

000c16e4 <_ZN5ServoC1Ev>:
Servo::Servo()
   c16e4:	b508      	push	{r3, lr}
  this->resetFields();
   c16e6:	f7ff fff1 	bl	c16cc <_ZN5Servo11resetFieldsEv>
}
   c16ea:	bd08      	pop	{r3, pc}

000c16ec <_ZN5Servo6detachEv>:
{
   c16ec:	b510      	push	{r4, lr}
   c16ee:	4604      	mov	r4, r0
   c16f0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c16f4:	1c43      	adds	r3, r0, #1
   c16f6:	d007      	beq.n	c1708 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c16f8:	b280      	uxth	r0, r0
   c16fa:	f7fc fc4b 	bl	bdf94 <HAL_Servo_Detach>
  this->resetFields();
   c16fe:	4620      	mov	r0, r4
   c1700:	f7ff ffe4 	bl	c16cc <_ZN5Servo11resetFieldsEv>
  return true;
   c1704:	2001      	movs	r0, #1
}
   c1706:	bd10      	pop	{r4, pc}
    return false;
   c1708:	2000      	movs	r0, #0
   c170a:	e7fc      	b.n	c1706 <_ZN5Servo6detachEv+0x1a>

000c170c <_ZN5Servo6attachEtttss>:
{
   c170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1710:	460d      	mov	r5, r1
   c1712:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c1714:	2102      	movs	r1, #2
   c1716:	4628      	mov	r0, r5
{
   c1718:	4690      	mov	r8, r2
   c171a:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c171c:	f7fc fb6a 	bl	bddf4 <HAL_Validate_Pin_Function>
   c1720:	2802      	cmp	r0, #2
   c1722:	d003      	beq.n	c172c <_ZN5Servo6attachEtttss+0x20>
    return false;
   c1724:	2600      	movs	r6, #0
}
   c1726:	4630      	mov	r0, r6
   c1728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c172c:	4628      	mov	r0, r5
   c172e:	f000 fc77 	bl	c2020 <pinAvailable>
   c1732:	4606      	mov	r6, r0
   c1734:	2800      	cmp	r0, #0
   c1736:	d0f5      	beq.n	c1724 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c1738:	f9b4 3000 	ldrsh.w	r3, [r4]
   c173c:	3301      	adds	r3, #1
   c173e:	d002      	beq.n	c1746 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c1740:	4620      	mov	r0, r4
   c1742:	f7ff ffd3 	bl	c16ec <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c1746:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c174a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c174c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c1750:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c1752:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c1756:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c1758:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c175a:	4628      	mov	r0, r5
   c175c:	f7fc fc12 	bl	bdf84 <HAL_Servo_Attach>
  return true;
   c1760:	e7e1      	b.n	c1726 <_ZN5Servo6attachEtttss+0x1a>

000c1762 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c1762:	2100      	movs	r1, #0
   c1764:	f7fc bc6e 	b.w	be044 <hal_spi_release>

000c1768 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c1768:	2100      	movs	r1, #0
   c176a:	f7fc bc63 	b.w	be034 <hal_spi_acquire>

000c176e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c176e:	b510      	push	{r4, lr}
   c1770:	4604      	mov	r4, r0
   c1772:	4608      	mov	r0, r1
{
    _spi = spi;
   c1774:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c1776:	f7fc fc2d 	bl	bdfd4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c177a:	2300      	movs	r3, #0
   c177c:	6063      	str	r3, [r4, #4]
}
   c177e:	4620      	mov	r0, r4
   c1780:	bd10      	pop	{r4, pc}

000c1782 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c1782:	b513      	push	{r0, r1, r4, lr}
   c1784:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c1786:	7800      	ldrb	r0, [r0, #0]
   c1788:	f7ff ffee 	bl	c1768 <_ZN8SPIClass4lockEv.isra.0>
   c178c:	b958      	cbnz	r0, c17a6 <_ZN8SPIClass5beginEv+0x24>
   c178e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c1790:	9001      	str	r0, [sp, #4]
   c1792:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c1796:	f7fc fc0d 	bl	bdfb4 <hal_spi_begin>
        unlock();
   c179a:	9801      	ldr	r0, [sp, #4]
    }
}
   c179c:	b002      	add	sp, #8
   c179e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c17a2:	f7ff bfde 	b.w	c1762 <_ZN8SPIClass6unlockEv.isra.0>
   c17a6:	b002      	add	sp, #8
   c17a8:	bd10      	pop	{r4, pc}

000c17aa <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c17aa:	7800      	ldrb	r0, [r0, #0]
   c17ac:	f7ff bfd9 	b.w	c1762 <_ZN8SPIClass6unlockEv.isra.0>

000c17b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c17b0:	0840      	lsrs	r0, r0, #1
{
   c17b2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c17b4:	6018      	str	r0, [r3, #0]
   c17b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c17b8:	6818      	ldr	r0, [r3, #0]
   c17ba:	4288      	cmp	r0, r1
   c17bc:	b2e5      	uxtb	r5, r4
   c17be:	d906      	bls.n	c17ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c17c0:	3401      	adds	r4, #1
   c17c2:	2c08      	cmp	r4, #8
   c17c4:	d002      	beq.n	c17cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c17c6:	0840      	lsrs	r0, r0, #1
   c17c8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c17ca:	e7f5      	b.n	c17b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c17cc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c17ce:	4b02      	ldr	r3, [pc, #8]	; (c17d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c17d0:	5d5b      	ldrb	r3, [r3, r5]
   c17d2:	7013      	strb	r3, [r2, #0]
}
   c17d4:	bd30      	pop	{r4, r5, pc}
   c17d6:	bf00      	nop
   c17d8:	000c8120 	.word	0x000c8120

000c17dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c17dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c17e0:	4606      	mov	r6, r0
   c17e2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c17e4:	7800      	ldrb	r0, [r0, #0]
{
   c17e6:	460c      	mov	r4, r1
    CHECK(lock());
   c17e8:	f7ff ffbe 	bl	c1768 <_ZN8SPIClass4lockEv.isra.0>
   c17ec:	2800      	cmp	r0, #0
   c17ee:	db1b      	blt.n	c1828 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c17f0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c17f2:	2214      	movs	r2, #20
   c17f4:	2100      	movs	r1, #0
   c17f6:	a809      	add	r0, sp, #36	; 0x24
   c17f8:	f002 ff4a 	bl	c4690 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c17fc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c17fe:	2200      	movs	r2, #0
   c1800:	a909      	add	r1, sp, #36	; 0x24
   c1802:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c1804:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c1808:	f7fc fbf4 	bl	bdff4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c180c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c1810:	b113      	cbz	r3, c1818 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c1812:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c1816:	b155      	cbz	r5, c182e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c1818:	2700      	movs	r7, #0
   c181a:	46b9      	mov	r9, r7
   c181c:	46b8      	mov	r8, r7
   c181e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c1820:	7923      	ldrb	r3, [r4, #4]
   c1822:	b15d      	cbz	r5, c183c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c1824:	b1c3      	cbz	r3, c1858 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c1826:	2000      	movs	r0, #0
}
   c1828:	b00f      	add	sp, #60	; 0x3c
   c182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c182e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c1832:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c1836:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c183a:	e7f1      	b.n	c1820 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c183c:	2b00      	cmp	r3, #0
   c183e:	d135      	bne.n	c18ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c1840:	68a3      	ldr	r3, [r4, #8]
   c1842:	4543      	cmp	r3, r8
   c1844:	d108      	bne.n	c1858 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c1846:	f88d 9020 	strb.w	r9, [sp, #32]
   c184a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c184e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1852:	89a3      	ldrh	r3, [r4, #12]
   c1854:	429a      	cmp	r2, r3
   c1856:	d0e6      	beq.n	c1826 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c1858:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c185a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c185c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1860:	980a      	ldr	r0, [sp, #40]	; 0x28
   c1862:	ab04      	add	r3, sp, #16
   c1864:	f10d 020f 	add.w	r2, sp, #15
   c1868:	f7ff ffa2 	bl	c17b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c186c:	7921      	ldrb	r1, [r4, #4]
   c186e:	b985      	cbnz	r5, c1892 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c1870:	b989      	cbnz	r1, c1896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1872:	68a3      	ldr	r3, [r4, #8]
   c1874:	4543      	cmp	r3, r8
   c1876:	d30e      	bcc.n	c1896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c1878:	f88d 9020 	strb.w	r9, [sp, #32]
   c187c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1880:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1884:	89a3      	ldrh	r3, [r4, #12]
   c1886:	429a      	cmp	r2, r3
   c1888:	d105      	bne.n	c1896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c188a:	9b04      	ldr	r3, [sp, #16]
   c188c:	4543      	cmp	r3, r8
   c188e:	d102      	bne.n	c1896 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1890:	e7c9      	b.n	c1826 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c1892:	2900      	cmp	r1, #0
   c1894:	d1f9      	bne.n	c188a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c1896:	2300      	movs	r3, #0
   c1898:	9301      	str	r3, [sp, #4]
   c189a:	7b63      	ldrb	r3, [r4, #13]
   c189c:	9300      	str	r3, [sp, #0]
   c189e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c18a2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c18a4:	7830      	ldrb	r0, [r6, #0]
   c18a6:	f7fc fbbd 	bl	be024 <hal_spi_set_settings>
   c18aa:	e7bc      	b.n	c1826 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c18ac:	e9cd 5500 	strd	r5, r5, [sp]
   c18b0:	462b      	mov	r3, r5
   c18b2:	462a      	mov	r2, r5
   c18b4:	2101      	movs	r1, #1
   c18b6:	e7f5      	b.n	c18a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c18b8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   c18b8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c18ba:	7800      	ldrb	r0, [r0, #0]
   c18bc:	f7fc fb82 	bl	bdfc4 <hal_spi_transfer>
}
   c18c0:	b2c0      	uxtb	r0, r0
   c18c2:	bd08      	pop	{r3, pc}

000c18c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c18c4:	b530      	push	{r4, r5, lr}
   c18c6:	b087      	sub	sp, #28
   c18c8:	4604      	mov	r4, r0
   c18ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c18cc:	9500      	str	r5, [sp, #0]
   c18ce:	7800      	ldrb	r0, [r0, #0]
   c18d0:	f7fc fb98 	bl	be004 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c18d4:	b93d      	cbnz	r5, c18e6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c18d6:	7820      	ldrb	r0, [r4, #0]
   c18d8:	a902      	add	r1, sp, #8
   c18da:	f7fc fb9b 	bl	be014 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c18de:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c18e2:	07db      	lsls	r3, r3, #31
   c18e4:	d4f7      	bmi.n	c18d6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c18e6:	b007      	add	sp, #28
   c18e8:	bd30      	pop	{r4, r5, pc}

000c18ea <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c18ea:	b510      	push	{r4, lr}
   c18ec:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c18ee:	f7fc fa69 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c18f2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c18f4:	6823      	ldr	r3, [r4, #0]
   c18f6:	4620      	mov	r0, r4
   c18f8:	695b      	ldr	r3, [r3, #20]
   c18fa:	4798      	blx	r3
    if (c >= 0) return c;
   c18fc:	2800      	cmp	r0, #0
   c18fe:	da08      	bge.n	c1912 <_ZN6Stream9timedReadEv+0x28>
   c1900:	f7fc fa60 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c1904:	68e3      	ldr	r3, [r4, #12]
   c1906:	1ac0      	subs	r0, r0, r3
   c1908:	68a3      	ldr	r3, [r4, #8]
   c190a:	4298      	cmp	r0, r3
   c190c:	d3f2      	bcc.n	c18f4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c190e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c1912:	bd10      	pop	{r4, pc}

000c1914 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c1914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1918:	4607      	mov	r7, r0
   c191a:	4688      	mov	r8, r1
   c191c:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c191e:	461d      	mov	r5, r3
   c1920:	b173      	cbz	r3, c1940 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c1922:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c1924:	4638      	mov	r0, r7
   c1926:	f7ff ffe0 	bl	c18ea <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c192a:	1e03      	subs	r3, r0, #0
   c192c:	db05      	blt.n	c193a <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c192e:	4543      	cmp	r3, r8
   c1930:	d003      	beq.n	c193a <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c1932:	5533      	strb	r3, [r6, r4]
    index++;
   c1934:	3401      	adds	r4, #1
  while (index < length) {
   c1936:	42a5      	cmp	r5, r4
   c1938:	d1f4      	bne.n	c1924 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c193a:	4620      	mov	r0, r4
   c193c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c1940:	461c      	mov	r4, r3
   c1942:	e7fa      	b.n	c193a <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c1944 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c1944:	b570      	push	{r4, r5, r6, lr}
   c1946:	460d      	mov	r5, r1
  String ret;
   c1948:	4909      	ldr	r1, [pc, #36]	; (c1970 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c194a:	4604      	mov	r4, r0
   c194c:	4616      	mov	r6, r2
  String ret;
   c194e:	f000 f85c 	bl	c1a0a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c1952:	4628      	mov	r0, r5
   c1954:	f7ff ffc9 	bl	c18ea <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c1958:	2800      	cmp	r0, #0
   c195a:	db06      	blt.n	c196a <_ZN6Stream15readStringUntilEc+0x26>
   c195c:	4286      	cmp	r6, r0
   c195e:	d004      	beq.n	c196a <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c1960:	b2c1      	uxtb	r1, r0
   c1962:	4620      	mov	r0, r4
   c1964:	f000 f8d0 	bl	c1b08 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c1968:	e7f3      	b.n	c1952 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c196a:	4620      	mov	r0, r4
   c196c:	bd70      	pop	{r4, r5, r6, pc}
   c196e:	bf00      	nop
   c1970:	000c8057 	.word	0x000c8057

000c1974 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c1974:	b510      	push	{r4, lr}
   c1976:	4604      	mov	r4, r0
{
	free(buffer);
   c1978:	6800      	ldr	r0, [r0, #0]
   c197a:	f7fc fd19 	bl	be3b0 <free>
}
   c197e:	4620      	mov	r0, r4
   c1980:	bd10      	pop	{r4, pc}

000c1982 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c1982:	b510      	push	{r4, lr}
   c1984:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c1986:	6800      	ldr	r0, [r0, #0]
   c1988:	b108      	cbz	r0, c198e <_ZN6String10invalidateEv+0xc>
   c198a:	f7fc fd11 	bl	be3b0 <free>
	buffer = NULL;
   c198e:	2300      	movs	r3, #0
	capacity = len = 0;
   c1990:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c1994:	6023      	str	r3, [r4, #0]
}
   c1996:	bd10      	pop	{r4, pc}

000c1998 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c1998:	b538      	push	{r3, r4, r5, lr}
   c199a:	4604      	mov	r4, r0
   c199c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c199e:	6800      	ldr	r0, [r0, #0]
   c19a0:	3101      	adds	r1, #1
   c19a2:	f7fc fd0d 	bl	be3c0 <realloc>
	if (newbuffer) {
   c19a6:	b110      	cbz	r0, c19ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c19a8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c19ac:	2001      	movs	r0, #1
	}
	return 0;
}
   c19ae:	bd38      	pop	{r3, r4, r5, pc}

000c19b0 <_ZN6String7reserveEj>:
{
   c19b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c19b2:	6803      	ldr	r3, [r0, #0]
{
   c19b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c19b6:	b123      	cbz	r3, c19c2 <_ZN6String7reserveEj+0x12>
   c19b8:	6843      	ldr	r3, [r0, #4]
   c19ba:	428b      	cmp	r3, r1
   c19bc:	d301      	bcc.n	c19c2 <_ZN6String7reserveEj+0x12>
   c19be:	2001      	movs	r0, #1
}
   c19c0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c19c2:	4620      	mov	r0, r4
   c19c4:	f7ff ffe8 	bl	c1998 <_ZN6String12changeBufferEj>
   c19c8:	2800      	cmp	r0, #0
   c19ca:	d0f9      	beq.n	c19c0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c19cc:	68a3      	ldr	r3, [r4, #8]
   c19ce:	2b00      	cmp	r3, #0
   c19d0:	d1f5      	bne.n	c19be <_ZN6String7reserveEj+0xe>
   c19d2:	6822      	ldr	r2, [r4, #0]
   c19d4:	7013      	strb	r3, [r2, #0]
   c19d6:	e7f2      	b.n	c19be <_ZN6String7reserveEj+0xe>

000c19d8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c19d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c19da:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c19dc:	4611      	mov	r1, r2
   c19de:	9201      	str	r2, [sp, #4]
{
   c19e0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c19e2:	f7ff ffe5 	bl	c19b0 <_ZN6String7reserveEj>
   c19e6:	9a01      	ldr	r2, [sp, #4]
   c19e8:	b928      	cbnz	r0, c19f6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c19ea:	4620      	mov	r0, r4
   c19ec:	f7ff ffc9 	bl	c1982 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c19f0:	4620      	mov	r0, r4
   c19f2:	b003      	add	sp, #12
   c19f4:	bd30      	pop	{r4, r5, pc}
	len = length;
   c19f6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c19f8:	4629      	mov	r1, r5
   c19fa:	6820      	ldr	r0, [r4, #0]
   c19fc:	f002 fe20 	bl	c4640 <memcpy>
	buffer[len] = 0;
   c1a00:	6822      	ldr	r2, [r4, #0]
   c1a02:	68a3      	ldr	r3, [r4, #8]
   c1a04:	2100      	movs	r1, #0
   c1a06:	54d1      	strb	r1, [r2, r3]
	return *this;
   c1a08:	e7f2      	b.n	c19f0 <_ZN6String4copyEPKcj+0x18>

000c1a0a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c1a0a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c1a0c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c1a0e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c1a12:	4604      	mov	r4, r0
	len = 0;
   c1a14:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1a16:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c1a18:	b141      	cbz	r1, c1a2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c1a1a:	4608      	mov	r0, r1
   c1a1c:	9101      	str	r1, [sp, #4]
   c1a1e:	f002 fec2 	bl	c47a6 <strlen>
   c1a22:	9901      	ldr	r1, [sp, #4]
   c1a24:	4602      	mov	r2, r0
   c1a26:	4620      	mov	r0, r4
   c1a28:	f7ff ffd6 	bl	c19d8 <_ZN6String4copyEPKcj>
}
   c1a2c:	4620      	mov	r0, r4
   c1a2e:	b002      	add	sp, #8
   c1a30:	bd10      	pop	{r4, pc}

000c1a32 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c1a32:	b538      	push	{r3, r4, r5, lr}
   c1a34:	4605      	mov	r5, r0
	if (buffer) {
   c1a36:	6800      	ldr	r0, [r0, #0]
{
   c1a38:	460c      	mov	r4, r1
	if (buffer) {
   c1a3a:	b168      	cbz	r0, c1a58 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c1a3c:	686a      	ldr	r2, [r5, #4]
   c1a3e:	688b      	ldr	r3, [r1, #8]
   c1a40:	429a      	cmp	r2, r3
   c1a42:	d307      	bcc.n	c1a54 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c1a44:	6809      	ldr	r1, [r1, #0]
   c1a46:	f002 fe89 	bl	c475c <strcpy>
			len = rhs.len;
   c1a4a:	68a3      	ldr	r3, [r4, #8]
   c1a4c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c1a4e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c1a50:	60a3      	str	r3, [r4, #8]
}
   c1a52:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c1a54:	f7fc fcac 	bl	be3b0 <free>
	buffer = rhs.buffer;
   c1a58:	6823      	ldr	r3, [r4, #0]
   c1a5a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c1a5c:	6863      	ldr	r3, [r4, #4]
   c1a5e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c1a60:	68a3      	ldr	r3, [r4, #8]
   c1a62:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c1a64:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c1a66:	e9c4 3300 	strd	r3, r3, [r4]
   c1a6a:	e7f1      	b.n	c1a50 <_ZN6String4moveERS_+0x1e>

000c1a6c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c1a6c:	b510      	push	{r4, lr}
	buffer = NULL;
   c1a6e:	2300      	movs	r3, #0
	capacity = 0;
   c1a70:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c1a74:	4604      	mov	r4, r0
	len = 0;
   c1a76:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1a78:	7303      	strb	r3, [r0, #12]
	move(rval);
   c1a7a:	f7ff ffda 	bl	c1a32 <_ZN6String4moveERS_>
}
   c1a7e:	4620      	mov	r0, r4
   c1a80:	bd10      	pop	{r4, pc}

000c1a82 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c1a82:	4288      	cmp	r0, r1
{
   c1a84:	b510      	push	{r4, lr}
   c1a86:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c1a88:	d005      	beq.n	c1a96 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c1a8a:	680b      	ldr	r3, [r1, #0]
   c1a8c:	b12b      	cbz	r3, c1a9a <_ZN6StringaSERKS_+0x18>
   c1a8e:	688a      	ldr	r2, [r1, #8]
   c1a90:	4619      	mov	r1, r3
   c1a92:	f7ff ffa1 	bl	c19d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c1a96:	4620      	mov	r0, r4
   c1a98:	bd10      	pop	{r4, pc}
	else invalidate();
   c1a9a:	f7ff ff72 	bl	c1982 <_ZN6String10invalidateEv>
   c1a9e:	e7fa      	b.n	c1a96 <_ZN6StringaSERKS_+0x14>

000c1aa0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c1aa0:	b510      	push	{r4, lr}
	buffer = NULL;
   c1aa2:	2300      	movs	r3, #0
String::String(const String &value)
   c1aa4:	4604      	mov	r4, r0
	capacity = 0;
   c1aa6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c1aaa:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1aac:	7303      	strb	r3, [r0, #12]
	*this = value;
   c1aae:	f7ff ffe8 	bl	c1a82 <_ZN6StringaSERKS_>
}
   c1ab2:	4620      	mov	r0, r4
   c1ab4:	bd10      	pop	{r4, pc}

000c1ab6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c1ab6:	b513      	push	{r0, r1, r4, lr}
   c1ab8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c1aba:	b159      	cbz	r1, c1ad4 <_ZN6StringaSEPKc+0x1e>
   c1abc:	4608      	mov	r0, r1
   c1abe:	9101      	str	r1, [sp, #4]
   c1ac0:	f002 fe71 	bl	c47a6 <strlen>
   c1ac4:	9901      	ldr	r1, [sp, #4]
   c1ac6:	4602      	mov	r2, r0
   c1ac8:	4620      	mov	r0, r4
   c1aca:	f7ff ff85 	bl	c19d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c1ace:	4620      	mov	r0, r4
   c1ad0:	b002      	add	sp, #8
   c1ad2:	bd10      	pop	{r4, pc}
	else invalidate();
   c1ad4:	f7ff ff55 	bl	c1982 <_ZN6String10invalidateEv>
   c1ad8:	e7f9      	b.n	c1ace <_ZN6StringaSEPKc+0x18>

000c1ada <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c1ada:	b570      	push	{r4, r5, r6, lr}
   c1adc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c1ade:	460e      	mov	r6, r1
   c1ae0:	b909      	cbnz	r1, c1ae6 <_ZN6String6concatEPKcj+0xc>
   c1ae2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c1ae4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c1ae6:	b16a      	cbz	r2, c1b04 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c1ae8:	6884      	ldr	r4, [r0, #8]
   c1aea:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c1aec:	4621      	mov	r1, r4
   c1aee:	f7ff ff5f 	bl	c19b0 <_ZN6String7reserveEj>
   c1af2:	2800      	cmp	r0, #0
   c1af4:	d0f5      	beq.n	c1ae2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c1af6:	6828      	ldr	r0, [r5, #0]
   c1af8:	68ab      	ldr	r3, [r5, #8]
   c1afa:	4631      	mov	r1, r6
   c1afc:	4418      	add	r0, r3
   c1afe:	f002 fe2d 	bl	c475c <strcpy>
	len = newlen;
   c1b02:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c1b04:	2001      	movs	r0, #1
   c1b06:	e7ed      	b.n	c1ae4 <_ZN6String6concatEPKcj+0xa>

000c1b08 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c1b08:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c1b0a:	2300      	movs	r3, #0
	buf[0] = c;
   c1b0c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c1b10:	2201      	movs	r2, #1
   c1b12:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c1b14:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c1b18:	f7ff ffdf 	bl	c1ada <_ZN6String6concatEPKcj>
}
   c1b1c:	b003      	add	sp, #12
   c1b1e:	f85d fb04 	ldr.w	pc, [sp], #4

000c1b22 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c1b22:	6883      	ldr	r3, [r0, #8]
   c1b24:	428b      	cmp	r3, r1
   c1b26:	d903      	bls.n	c1b30 <_ZNK6StringixEj+0xe>
   c1b28:	6800      	ldr	r0, [r0, #0]
   c1b2a:	b110      	cbz	r0, c1b32 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c1b2c:	5c40      	ldrb	r0, [r0, r1]
   c1b2e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c1b30:	2000      	movs	r0, #0
}
   c1b32:	4770      	bx	lr

000c1b34 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c1b34:	f7ff bff5 	b.w	c1b22 <_ZNK6StringixEj>

000c1b38 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   c1b38:	b558      	push	{r3, r4, r6, lr}
   c1b3a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   c1b3c:	b12a      	cbz	r2, c1b4a <_ZNK6String8getBytesEPhjj+0x12>
   c1b3e:	b121      	cbz	r1, c1b4a <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   c1b40:	6884      	ldr	r4, [r0, #8]
   c1b42:	42a3      	cmp	r3, r4
   c1b44:	d302      	bcc.n	c1b4c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   c1b46:	2300      	movs	r3, #0
   c1b48:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   c1b4a:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   c1b4c:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   c1b4e:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   c1b50:	6801      	ldr	r1, [r0, #0]
   c1b52:	4294      	cmp	r4, r2
   c1b54:	bf28      	it	cs
   c1b56:	4614      	movcs	r4, r2
   c1b58:	4419      	add	r1, r3
   c1b5a:	4622      	mov	r2, r4
   c1b5c:	4630      	mov	r0, r6
   c1b5e:	f002 fe51 	bl	c4804 <strncpy>
	buf[n] = 0;
   c1b62:	2300      	movs	r3, #0
   c1b64:	5533      	strb	r3, [r6, r4]
   c1b66:	e7f0      	b.n	c1b4a <_ZNK6String8getBytesEPhjj+0x12>

000c1b68 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c1b68:	4b05      	ldr	r3, [pc, #20]	; (c1b80 <_GLOBAL__sub_I_System+0x18>)
   c1b6a:	2202      	movs	r2, #2
   c1b6c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c1b6e:	4b05      	ldr	r3, [pc, #20]	; (c1b84 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c1b70:	4a05      	ldr	r2, [pc, #20]	; (c1b88 <_GLOBAL__sub_I_System+0x20>)
   c1b72:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c1b74:	2000      	movs	r0, #0
   c1b76:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c1b7a:	f7fc bb2d 	b.w	be1d8 <set_system_mode>
   c1b7e:	bf00      	nop
   c1b80:	2003e6c0 	.word	0x2003e6c0
   c1b84:	2003e6b4 	.word	0x2003e6b4
   c1b88:	ffff0000 	.word	0xffff0000

000c1b8c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c1b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c1b90:	4a15      	ldr	r2, [pc, #84]	; (c1be8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c1b92:	f8df 8060 	ldr.w	r8, [pc, #96]	; c1bf4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c1b96:	e9d2 6300 	ldrd	r6, r3, [r2]
   c1b9a:	1980      	adds	r0, r0, r6
   c1b9c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c1ba0:	4b12      	ldr	r3, [pc, #72]	; (c1bec <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c1ba2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c1ba6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c1baa:	1986      	adds	r6, r0, r6
   c1bac:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c1bb0:	42bb      	cmp	r3, r7
   c1bb2:	bf08      	it	eq
   c1bb4:	42b2      	cmpeq	r2, r6
{
   c1bb6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c1bb8:	d013      	beq.n	c1be2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c1bba:	a903      	add	r1, sp, #12
   c1bbc:	4668      	mov	r0, sp
   c1bbe:	e9cd 6700 	strd	r6, r7, [sp]
   c1bc2:	f7fc fc4d 	bl	be460 <localtime_r>
	calendar_time.tm_year += 1900;
   c1bc6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1bc8:	4d09      	ldr	r5, [pc, #36]	; (c1bf0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c1bca:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1bce:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c1bd0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c1bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c1bda:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1bde:	6823      	ldr	r3, [r4, #0]
   c1be0:	602b      	str	r3, [r5, #0]
    }
}
   c1be2:	b00c      	add	sp, #48	; 0x30
   c1be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1be8:	2003e6f8 	.word	0x2003e6f8
   c1bec:	2003e6f0 	.word	0x2003e6f0
   c1bf0:	2003e6c8 	.word	0x2003e6c8
   c1bf4:	2003e700 	.word	0x2003e700

000c1bf8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c1bf8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1bfa:	2000      	movs	r0, #0
   c1bfc:	f7fc fb60 	bl	be2c0 <spark_sync_time_pending>
   c1c00:	b128      	cbz	r0, c1c0e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1c02:	f7fc fb45 	bl	be290 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1c06:	f080 0001 	eor.w	r0, r0, #1
   c1c0a:	b2c0      	uxtb	r0, r0
    }
   c1c0c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1c0e:	2001      	movs	r0, #1
   c1c10:	e7fc      	b.n	c1c0c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1c14 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c1c14:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c1c16:	f7ff ffb9 	bl	c1b8c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c1c1a:	4b02      	ldr	r3, [pc, #8]	; (c1c24 <_ZN9TimeClass5monthEx+0x10>)
   c1c1c:	6918      	ldr	r0, [r3, #16]
}
   c1c1e:	3001      	adds	r0, #1
   c1c20:	bd08      	pop	{r3, pc}
   c1c22:	bf00      	nop
   c1c24:	2003e6c8 	.word	0x2003e6c8

000c1c28 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c1c28:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c1c2a:	2000      	movs	r0, #0
   c1c2c:	f7fc f8d2 	bl	bddd4 <hal_rtc_time_is_valid>
    if (rtcstate)
   c1c30:	4604      	mov	r4, r0
   c1c32:	b9a0      	cbnz	r0, c1c5e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c1c34:	f7fc fac8 	bl	be1c8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c1c38:	2801      	cmp	r0, #1
   c1c3a:	d110      	bne.n	c1c5e <_ZN9TimeClass7isValidEv+0x36>
   c1c3c:	4620      	mov	r0, r4
   c1c3e:	f7fc faeb 	bl	be218 <system_thread_get_state>
   c1c42:	b960      	cbnz	r0, c1c5e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c1c44:	f7ff ffd8 	bl	c1bf8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c1c48:	b910      	cbnz	r0, c1c50 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c1c4a:	f7fc fb11 	bl	be270 <spark_process>
        while (_while() && !_condition()) {
   c1c4e:	e7f9      	b.n	c1c44 <_ZN9TimeClass7isValidEv+0x1c>
   c1c50:	f7ff ffd2 	bl	c1bf8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c1c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c1c58:	2000      	movs	r0, #0
   c1c5a:	f7fc b8bb 	b.w	bddd4 <hal_rtc_time_is_valid>
}
   c1c5e:	4620      	mov	r0, r4
   c1c60:	bd10      	pop	{r4, pc}

000c1c62 <_ZN9TimeClass3nowEv>:
{
   c1c62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c1c64:	f7ff ffe0 	bl	c1c28 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c1c68:	2210      	movs	r2, #16
   c1c6a:	2100      	movs	r1, #0
   c1c6c:	4668      	mov	r0, sp
   c1c6e:	f002 fd0f 	bl	c4690 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c1c72:	2100      	movs	r1, #0
   c1c74:	4668      	mov	r0, sp
   c1c76:	f7fc f8b5 	bl	bdde4 <hal_rtc_get_time>
}
   c1c7a:	9800      	ldr	r0, [sp, #0]
   c1c7c:	b005      	add	sp, #20
   c1c7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1c84 <_ZN9TimeClass4hourEv>:
{
   c1c84:	b508      	push	{r3, lr}
	return hour(now());
   c1c86:	f7ff ffec 	bl	c1c62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1c8a:	17c1      	asrs	r1, r0, #31
   c1c8c:	f7ff ff7e 	bl	c1b8c <_ZL22Refresh_UnixTime_Cachex>
}
   c1c90:	4b01      	ldr	r3, [pc, #4]	; (c1c98 <_ZN9TimeClass4hourEv+0x14>)
   c1c92:	6898      	ldr	r0, [r3, #8]
   c1c94:	bd08      	pop	{r3, pc}
   c1c96:	bf00      	nop
   c1c98:	2003e6c8 	.word	0x2003e6c8

000c1c9c <_ZN9TimeClass6minuteEv>:
{
   c1c9c:	b508      	push	{r3, lr}
	return minute(now());
   c1c9e:	f7ff ffe0 	bl	c1c62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1ca2:	17c1      	asrs	r1, r0, #31
   c1ca4:	f7ff ff72 	bl	c1b8c <_ZL22Refresh_UnixTime_Cachex>
}
   c1ca8:	4b01      	ldr	r3, [pc, #4]	; (c1cb0 <_ZN9TimeClass6minuteEv+0x14>)
   c1caa:	6858      	ldr	r0, [r3, #4]
   c1cac:	bd08      	pop	{r3, pc}
   c1cae:	bf00      	nop
   c1cb0:	2003e6c8 	.word	0x2003e6c8

000c1cb4 <_ZN9TimeClass6secondEv>:
{
   c1cb4:	b508      	push	{r3, lr}
	return second(now());
   c1cb6:	f7ff ffd4 	bl	c1c62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1cba:	17c1      	asrs	r1, r0, #31
   c1cbc:	f7ff ff66 	bl	c1b8c <_ZL22Refresh_UnixTime_Cachex>
}
   c1cc0:	4b01      	ldr	r3, [pc, #4]	; (c1cc8 <_ZN9TimeClass6secondEv+0x14>)
   c1cc2:	6818      	ldr	r0, [r3, #0]
   c1cc4:	bd08      	pop	{r3, pc}
   c1cc6:	bf00      	nop
   c1cc8:	2003e6c8 	.word	0x2003e6c8

000c1ccc <_ZN9TimeClass3dayEv>:
{
   c1ccc:	b508      	push	{r3, lr}
	return day(now());
   c1cce:	f7ff ffc8 	bl	c1c62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1cd2:	17c1      	asrs	r1, r0, #31
   c1cd4:	f7ff ff5a 	bl	c1b8c <_ZL22Refresh_UnixTime_Cachex>
}
   c1cd8:	4b01      	ldr	r3, [pc, #4]	; (c1ce0 <_ZN9TimeClass3dayEv+0x14>)
   c1cda:	68d8      	ldr	r0, [r3, #12]
   c1cdc:	bd08      	pop	{r3, pc}
   c1cde:	bf00      	nop
   c1ce0:	2003e6c8 	.word	0x2003e6c8

000c1ce4 <_ZN9TimeClass5monthEv>:
{
   c1ce4:	b508      	push	{r3, lr}
	return month(now());
   c1ce6:	f7ff ffbc 	bl	c1c62 <_ZN9TimeClass3nowEv>
}
   c1cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1cee:	17c1      	asrs	r1, r0, #31
   c1cf0:	f7ff bf90 	b.w	c1c14 <_ZN9TimeClass5monthEx>

000c1cf4 <_ZN9TimeClass4yearEv>:
{
   c1cf4:	b508      	push	{r3, lr}
	return year(now());
   c1cf6:	f7ff ffb4 	bl	c1c62 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1cfa:	17c1      	asrs	r1, r0, #31
   c1cfc:	f7ff ff46 	bl	c1b8c <_ZL22Refresh_UnixTime_Cachex>
}
   c1d00:	4b01      	ldr	r3, [pc, #4]	; (c1d08 <_ZN9TimeClass4yearEv+0x14>)
   c1d02:	6958      	ldr	r0, [r3, #20]
   c1d04:	bd08      	pop	{r3, pc}
   c1d06:	bf00      	nop
   c1d08:	2003e6c8 	.word	0x2003e6c8

000c1d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1d0c:	4b02      	ldr	r3, [pc, #8]	; (c1d18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1d0e:	681a      	ldr	r2, [r3, #0]
   c1d10:	4b02      	ldr	r3, [pc, #8]	; (c1d1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1d12:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1d14:	4770      	bx	lr
   c1d16:	bf00      	nop
   c1d18:	2003db40 	.word	0x2003db40
   c1d1c:	2003e6c4 	.word	0x2003e6c4

000c1d20 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1d20:	4770      	bx	lr

000c1d22 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1d22:	7441      	strb	r1, [r0, #17]
}
   c1d24:	4770      	bx	lr

000c1d26 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1d26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1d28:	7c00      	ldrb	r0, [r0, #16]
   c1d2a:	f7fc f9cb 	bl	be0c4 <hal_usart_available_data_for_write>
}
   c1d2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1d32:	bd08      	pop	{r3, pc}

000c1d34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1d34:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c1d36:	7c00      	ldrb	r0, [r0, #16]
   c1d38:	f7fc f99c 	bl	be074 <hal_usart_available>
}
   c1d3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1d40:	bd08      	pop	{r3, pc}

000c1d42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1d42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1d44:	7c00      	ldrb	r0, [r0, #16]
   c1d46:	f7fc f9a5 	bl	be094 <hal_usart_peek>
}
   c1d4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1d4e:	bd08      	pop	{r3, pc}

000c1d50 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1d50:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1d52:	7c00      	ldrb	r0, [r0, #16]
   c1d54:	f7fc f996 	bl	be084 <hal_usart_read>
}
   c1d58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1d5c:	bd08      	pop	{r3, pc}

000c1d5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1d5e:	7c00      	ldrb	r0, [r0, #16]
   c1d60:	f7fc b9a0 	b.w	be0a4 <hal_usart_flush>

000c1d64 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1d66:	7c45      	ldrb	r5, [r0, #17]
{
   c1d68:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1d6a:	b12d      	cbz	r5, c1d78 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c1d6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c1d6e:	b003      	add	sp, #12
   c1d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1d74:	f7fc b976 	b.w	be064 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1d78:	7c00      	ldrb	r0, [r0, #16]
   c1d7a:	9101      	str	r1, [sp, #4]
   c1d7c:	f7fc f9a2 	bl	be0c4 <hal_usart_available_data_for_write>
   c1d80:	2800      	cmp	r0, #0
   c1d82:	9901      	ldr	r1, [sp, #4]
   c1d84:	dcf2      	bgt.n	c1d6c <_ZN11USARTSerial5writeEh+0x8>
}
   c1d86:	4628      	mov	r0, r5
   c1d88:	b003      	add	sp, #12
   c1d8a:	bd30      	pop	{r4, r5, pc}

000c1d8c <_ZN11USARTSerialD0Ev>:
   c1d8c:	b510      	push	{r4, lr}
   c1d8e:	2114      	movs	r1, #20
   c1d90:	4604      	mov	r4, r0
   c1d92:	f7f2 f986 	bl	b40a2 <_ZdlPvj>
   c1d96:	4620      	mov	r0, r4
   c1d98:	bd10      	pop	{r4, pc}
	...

000c1d9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c1d9c:	b510      	push	{r4, lr}
   c1d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1da2:	4604      	mov	r4, r0
   c1da4:	4608      	mov	r0, r1
   c1da6:	4611      	mov	r1, r2
   c1da8:	2200      	movs	r2, #0
   c1daa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c1dae:	4b04      	ldr	r3, [pc, #16]	; (c1dc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1db0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1db2:	2301      	movs	r3, #1
  _serial = serial;
   c1db4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1db6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c1db8:	f7fc f994 	bl	be0e4 <hal_usart_init_ex>
}
   c1dbc:	4620      	mov	r0, r4
   c1dbe:	bd10      	pop	{r4, pc}
   c1dc0:	000c814c 	.word	0x000c814c

000c1dc4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1dc4:	7c00      	ldrb	r0, [r0, #16]
   c1dc6:	2300      	movs	r3, #0
   c1dc8:	f7fc b984 	b.w	be0d4 <hal_usart_begin_config>

000c1dcc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c1dcc:	2200      	movs	r2, #0
   c1dce:	f7ff bff9 	b.w	c1dc4 <_ZN11USARTSerial5beginEmm>

000c1dd2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1dd2:	7c00      	ldrb	r0, [r0, #16]
   c1dd4:	f7fc b93e 	b.w	be054 <hal_usart_end>

000c1dd8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1dd8:	7441      	strb	r1, [r0, #17]
}
   c1dda:	4770      	bx	lr

000c1ddc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1ddc:	4770      	bx	lr

000c1dde <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c1dde:	4770      	bx	lr

000c1de0 <_ZN9USBSerial4readEv>:
{
   c1de0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1de2:	2100      	movs	r1, #0
   c1de4:	7c00      	ldrb	r0, [r0, #16]
   c1de6:	f7fc f9ad 	bl	be144 <HAL_USB_USART_Receive_Data>
}
   c1dea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1dee:	bd08      	pop	{r3, pc}

000c1df0 <_ZN9USBSerial4peekEv>:
{
   c1df0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1df2:	2101      	movs	r1, #1
   c1df4:	7c00      	ldrb	r0, [r0, #16]
   c1df6:	f7fc f9a5 	bl	be144 <HAL_USB_USART_Receive_Data>
}
   c1dfa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1dfe:	bd08      	pop	{r3, pc}

000c1e00 <_ZN9USBSerial17availableForWriteEv>:
{
   c1e00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1e02:	7c00      	ldrb	r0, [r0, #16]
   c1e04:	f7fc f996 	bl	be134 <HAL_USB_USART_Available_Data_For_Write>
}
   c1e08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1e0c:	bd08      	pop	{r3, pc}

000c1e0e <_ZN9USBSerial9availableEv>:
{
   c1e0e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1e10:	7c00      	ldrb	r0, [r0, #16]
   c1e12:	f7fc f987 	bl	be124 <HAL_USB_USART_Available_Data>
}
   c1e16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1e1a:	bd08      	pop	{r3, pc}

000c1e1c <_ZN9USBSerial5writeEh>:
{
   c1e1c:	b513      	push	{r0, r1, r4, lr}
   c1e1e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1e20:	7c00      	ldrb	r0, [r0, #16]
{
   c1e22:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1e24:	f7fc f986 	bl	be134 <HAL_USB_USART_Available_Data_For_Write>
   c1e28:	2800      	cmp	r0, #0
   c1e2a:	9901      	ldr	r1, [sp, #4]
   c1e2c:	dc01      	bgt.n	c1e32 <_ZN9USBSerial5writeEh+0x16>
   c1e2e:	7c60      	ldrb	r0, [r4, #17]
   c1e30:	b120      	cbz	r0, c1e3c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1e32:	7c20      	ldrb	r0, [r4, #16]
   c1e34:	f7fc f98e 	bl	be154 <HAL_USB_USART_Send_Data>
   c1e38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c1e3c:	b002      	add	sp, #8
   c1e3e:	bd10      	pop	{r4, pc}

000c1e40 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1e40:	7c00      	ldrb	r0, [r0, #16]
   c1e42:	f7fc b98f 	b.w	be164 <HAL_USB_USART_Flush_Data>

000c1e46 <_ZN9USBSerialD0Ev>:
   c1e46:	b510      	push	{r4, lr}
   c1e48:	2114      	movs	r1, #20
   c1e4a:	4604      	mov	r4, r0
   c1e4c:	f7f2 f929 	bl	b40a2 <_ZdlPvj>
   c1e50:	4620      	mov	r0, r4
   c1e52:	bd10      	pop	{r4, pc}

000c1e54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1e54:	b510      	push	{r4, lr}
   c1e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1e5a:	4604      	mov	r4, r0
   c1e5c:	4608      	mov	r0, r1
   c1e5e:	2100      	movs	r1, #0
   c1e60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1e64:	4b04      	ldr	r3, [pc, #16]	; (c1e78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1e66:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1e68:	2301      	movs	r3, #1
  _serial = serial;
   c1e6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1e6c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c1e6e:	4611      	mov	r1, r2
   c1e70:	f7fc f940 	bl	be0f4 <HAL_USB_USART_Init>
}
   c1e74:	4620      	mov	r0, r4
   c1e76:	bd10      	pop	{r4, pc}
   c1e78:	000c817c 	.word	0x000c817c

000c1e7c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c1e7c:	7c00      	ldrb	r0, [r0, #16]
   c1e7e:	2200      	movs	r2, #0
   c1e80:	f7fc b940 	b.w	be104 <HAL_USB_USART_Begin>

000c1e84 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1e84:	7c00      	ldrb	r0, [r0, #16]
   c1e86:	f7fc b945 	b.w	be114 <HAL_USB_USART_End>

000c1e8a <_Z19acquireSerialBufferv>:
{
   c1e8a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c1e8c:	2214      	movs	r2, #20
{
   c1e8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c1e90:	2100      	movs	r1, #0
   c1e92:	f002 fbfd 	bl	c4690 <memset>
}
   c1e96:	4620      	mov	r0, r4
   c1e98:	bd10      	pop	{r4, pc}
	...

000c1e9c <_Z16_fetch_usbserialv>:
{
   c1e9c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1e9e:	4c0f      	ldr	r4, [pc, #60]	; (c1edc <_Z16_fetch_usbserialv+0x40>)
{
   c1ea0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c1ea2:	a803      	add	r0, sp, #12
   c1ea4:	f7ff fff1 	bl	c1e8a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1ea8:	7821      	ldrb	r1, [r4, #0]
   c1eaa:	f3bf 8f5b 	dmb	ish
   c1eae:	f011 0101 	ands.w	r1, r1, #1
   c1eb2:	d10f      	bne.n	c1ed4 <_Z16_fetch_usbserialv+0x38>
   c1eb4:	4620      	mov	r0, r4
   c1eb6:	9101      	str	r1, [sp, #4]
   c1eb8:	f7f2 f902 	bl	b40c0 <__cxa_guard_acquire>
   c1ebc:	9901      	ldr	r1, [sp, #4]
   c1ebe:	b148      	cbz	r0, c1ed4 <_Z16_fetch_usbserialv+0x38>
   c1ec0:	aa03      	add	r2, sp, #12
   c1ec2:	4807      	ldr	r0, [pc, #28]	; (c1ee0 <_Z16_fetch_usbserialv+0x44>)
   c1ec4:	f7ff ffc6 	bl	c1e54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c1ec8:	4620      	mov	r0, r4
   c1eca:	f7f2 f8fe 	bl	b40ca <__cxa_guard_release>
   c1ece:	4805      	ldr	r0, [pc, #20]	; (c1ee4 <_Z16_fetch_usbserialv+0x48>)
   c1ed0:	f002 fb90 	bl	c45f4 <atexit>
	return _usbserial;
}
   c1ed4:	4802      	ldr	r0, [pc, #8]	; (c1ee0 <_Z16_fetch_usbserialv+0x44>)
   c1ed6:	b008      	add	sp, #32
   c1ed8:	bd10      	pop	{r4, pc}
   c1eda:	bf00      	nop
   c1edc:	2003e708 	.word	0x2003e708
   c1ee0:	2003e70c 	.word	0x2003e70c
   c1ee4:	000c1ddd 	.word	0x000c1ddd

000c1ee8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c1ee8:	4b01      	ldr	r3, [pc, #4]	; (c1ef0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c1eea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1eec:	4770      	bx	lr
   c1eee:	bf00      	nop
   c1ef0:	2003db48 	.word	0x2003db48

000c1ef4 <serialEventRun>:
{
   c1ef4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c1ef6:	4b0b      	ldr	r3, [pc, #44]	; (c1f24 <serialEventRun+0x30>)
   c1ef8:	b143      	cbz	r3, c1f0c <serialEventRun+0x18>
   c1efa:	f7ff ffcf 	bl	c1e9c <_Z16_fetch_usbserialv>
   c1efe:	6803      	ldr	r3, [r0, #0]
   c1f00:	691b      	ldr	r3, [r3, #16]
   c1f02:	4798      	blx	r3
   c1f04:	2800      	cmp	r0, #0
   c1f06:	dd01      	ble.n	c1f0c <serialEventRun+0x18>
        serialEvent();
   c1f08:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1f0c:	4b06      	ldr	r3, [pc, #24]	; (c1f28 <serialEventRun+0x34>)
   c1f0e:	b143      	cbz	r3, c1f22 <serialEventRun+0x2e>
   c1f10:	f000 f970 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   c1f14:	6803      	ldr	r3, [r0, #0]
   c1f16:	691b      	ldr	r3, [r3, #16]
   c1f18:	4798      	blx	r3
   c1f1a:	2800      	cmp	r0, #0
   c1f1c:	dd01      	ble.n	c1f22 <serialEventRun+0x2e>
        serialEvent1();
   c1f1e:	f3af 8000 	nop.w
}
   c1f22:	bd08      	pop	{r3, pc}
	...

000c1f2c <_post_loop>:
{
   c1f2c:	b508      	push	{r3, lr}
	serialEventRun();
   c1f2e:	f7ff ffe1 	bl	c1ef4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1f32:	f7fb ff47 	bl	bddc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c1f36:	4b01      	ldr	r3, [pc, #4]	; (c1f3c <_post_loop+0x10>)
   c1f38:	6018      	str	r0, [r3, #0]
}
   c1f3a:	bd08      	pop	{r3, pc}
   c1f3c:	2003e728 	.word	0x2003e728

000c1f40 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1f40:	4805      	ldr	r0, [pc, #20]	; (c1f58 <_Z33system_initialize_user_backup_ramv+0x18>)
   c1f42:	4a06      	ldr	r2, [pc, #24]	; (c1f5c <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1f44:	4906      	ldr	r1, [pc, #24]	; (c1f60 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c1f46:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1f48:	1a12      	subs	r2, r2, r0
   c1f4a:	f002 fb79 	bl	c4640 <memcpy>
    __backup_sram_signature = signature;
   c1f4e:	4b05      	ldr	r3, [pc, #20]	; (c1f64 <_Z33system_initialize_user_backup_ramv+0x24>)
   c1f50:	4a05      	ldr	r2, [pc, #20]	; (c1f68 <_Z33system_initialize_user_backup_ramv+0x28>)
   c1f52:	601a      	str	r2, [r3, #0]
}
   c1f54:	bd08      	pop	{r3, pc}
   c1f56:	bf00      	nop
   c1f58:	2003f400 	.word	0x2003f400
   c1f5c:	2003f404 	.word	0x2003f404
   c1f60:	000c8b14 	.word	0x000c8b14
   c1f64:	2003f400 	.word	0x2003f400
   c1f68:	9a271c1e 	.word	0x9a271c1e

000c1f6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c1f6c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1f6e:	2300      	movs	r3, #0
   c1f70:	9300      	str	r3, [sp, #0]
   c1f72:	461a      	mov	r2, r3
   c1f74:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1f78:	f7fc f968 	bl	be24c <system_ctrl_set_result>
}
   c1f7c:	b003      	add	sp, #12
   c1f7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1f84 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c1f84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c1f86:	8843      	ldrh	r3, [r0, #2]
   c1f88:	2b0a      	cmp	r3, #10
   c1f8a:	d008      	beq.n	c1f9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c1f8c:	2b50      	cmp	r3, #80	; 0x50
   c1f8e:	d10b      	bne.n	c1fa8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c1f90:	4b09      	ldr	r3, [pc, #36]	; (c1fb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c1f92:	681b      	ldr	r3, [r3, #0]
   c1f94:	b14b      	cbz	r3, c1faa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c1f96:	b003      	add	sp, #12
   c1f98:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c1f9c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c1f9e:	f7ff ffe5 	bl	c1f6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c1fa2:	b003      	add	sp, #12
   c1fa4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1fa8:	2300      	movs	r3, #0
   c1faa:	9300      	str	r3, [sp, #0]
   c1fac:	461a      	mov	r2, r3
   c1fae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1fb2:	f7fc f94b 	bl	be24c <system_ctrl_set_result>
}
   c1fb6:	e7f4      	b.n	c1fa2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c1fb8:	2003e724 	.word	0x2003e724

000c1fbc <module_user_init_hook>:
{
   c1fbc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c1fbe:	4812      	ldr	r0, [pc, #72]	; (c2008 <module_user_init_hook+0x4c>)
   c1fc0:	2100      	movs	r1, #0
   c1fc2:	f7fc fa45 	bl	be450 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c1fc6:	4b11      	ldr	r3, [pc, #68]	; (c200c <module_user_init_hook+0x50>)
   c1fc8:	681a      	ldr	r2, [r3, #0]
   c1fca:	4b11      	ldr	r3, [pc, #68]	; (c2010 <module_user_init_hook+0x54>)
   c1fcc:	429a      	cmp	r2, r3
   c1fce:	4b11      	ldr	r3, [pc, #68]	; (c2014 <module_user_init_hook+0x58>)
   c1fd0:	bf0c      	ite	eq
   c1fd2:	2201      	moveq	r2, #1
   c1fd4:	2200      	movne	r2, #0
   c1fd6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c1fd8:	d001      	beq.n	c1fde <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c1fda:	f7ff ffb1 	bl	c1f40 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1fde:	f7fb fed9 	bl	bdd94 <HAL_RNG_GetRandomNumber>
   c1fe2:	4604      	mov	r4, r0
    srand(seed);
   c1fe4:	f002 fb5c 	bl	c46a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c1fe8:	4b0b      	ldr	r3, [pc, #44]	; (c2018 <module_user_init_hook+0x5c>)
   c1fea:	b113      	cbz	r3, c1ff2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1fec:	4620      	mov	r0, r4
   c1fee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1ff2:	2100      	movs	r1, #0
   c1ff4:	4808      	ldr	r0, [pc, #32]	; (c2018 <module_user_init_hook+0x5c>)
   c1ff6:	f7fc f96b 	bl	be2d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c1ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1ffe:	4807      	ldr	r0, [pc, #28]	; (c201c <module_user_init_hook+0x60>)
   c2000:	2100      	movs	r1, #0
   c2002:	f7fc b919 	b.w	be238 <system_ctrl_set_app_request_handler>
   c2006:	bf00      	nop
   c2008:	000c1ee9 	.word	0x000c1ee9
   c200c:	2003f400 	.word	0x2003f400
   c2010:	9a271c1e 	.word	0x9a271c1e
   c2014:	2003e720 	.word	0x2003e720
   c2018:	00000000 	.word	0x00000000
   c201c:	000c1f85 	.word	0x000c1f85

000c2020 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c2020:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c2022:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c2024:	d902      	bls.n	c202c <pinAvailable+0xc>
    return false;
   c2026:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c2028:	b002      	add	sp, #8
   c202a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c202c:	f1a0 030b 	sub.w	r3, r0, #11
   c2030:	2b02      	cmp	r3, #2
   c2032:	d81a      	bhi.n	c206a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c2034:	4c17      	ldr	r4, [pc, #92]	; (c2094 <pinAvailable+0x74>)
   c2036:	7821      	ldrb	r1, [r4, #0]
   c2038:	f3bf 8f5b 	dmb	ish
   c203c:	f011 0101 	ands.w	r1, r1, #1
   c2040:	d10b      	bne.n	c205a <pinAvailable+0x3a>
   c2042:	4620      	mov	r0, r4
   c2044:	9101      	str	r1, [sp, #4]
   c2046:	f7f2 f83b 	bl	b40c0 <__cxa_guard_acquire>
   c204a:	9901      	ldr	r1, [sp, #4]
   c204c:	b128      	cbz	r0, c205a <pinAvailable+0x3a>
   c204e:	4812      	ldr	r0, [pc, #72]	; (c2098 <pinAvailable+0x78>)
   c2050:	f7ff fb8d 	bl	c176e <_ZN8SPIClassC1E19hal_spi_interface_t>
   c2054:	4620      	mov	r0, r4
   c2056:	f7f2 f838 	bl	b40ca <__cxa_guard_release>
   c205a:	4b0f      	ldr	r3, [pc, #60]	; (c2098 <pinAvailable+0x78>)
   c205c:	7818      	ldrb	r0, [r3, #0]
   c205e:	f7fb ffc1 	bl	bdfe4 <hal_spi_is_enabled>
   c2062:	2800      	cmp	r0, #0
   c2064:	d1df      	bne.n	c2026 <pinAvailable+0x6>
  return true; // 'pin' is available
   c2066:	2001      	movs	r0, #1
   c2068:	e7de      	b.n	c2028 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c206a:	2801      	cmp	r0, #1
   c206c:	d809      	bhi.n	c2082 <pinAvailable+0x62>
   c206e:	f000 f881 	bl	c2174 <_Z19__fetch_global_Wirev>
   c2072:	2100      	movs	r1, #0
   c2074:	7c00      	ldrb	r0, [r0, #16]
   c2076:	f7fb ff55 	bl	bdf24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c207a:	f080 0001 	eor.w	r0, r0, #1
   c207e:	b2c0      	uxtb	r0, r0
   c2080:	e7d2      	b.n	c2028 <pinAvailable+0x8>
   c2082:	3809      	subs	r0, #9
   c2084:	2801      	cmp	r0, #1
   c2086:	d8ee      	bhi.n	c2066 <pinAvailable+0x46>
   c2088:	f000 f8b4 	bl	c21f4 <_Z22__fetch_global_Serial1v>
   c208c:	7c00      	ldrb	r0, [r0, #16]
   c208e:	f7fc f811 	bl	be0b4 <hal_usart_is_enabled>
   c2092:	e7f2      	b.n	c207a <pinAvailable+0x5a>
   c2094:	2003dd20 	.word	0x2003dd20
   c2098:	2003dd24 	.word	0x2003dd24

000c209c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c209c:	2825      	cmp	r0, #37	; 0x25
{
   c209e:	b538      	push	{r3, r4, r5, lr}
   c20a0:	4604      	mov	r4, r0
   c20a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c20a4:	d80a      	bhi.n	c20bc <pinMode+0x20>
   c20a6:	29ff      	cmp	r1, #255	; 0xff
   c20a8:	d008      	beq.n	c20bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c20aa:	f7ff ffb9 	bl	c2020 <pinAvailable>
   c20ae:	b128      	cbz	r0, c20bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c20b0:	4629      	mov	r1, r5
   c20b2:	4620      	mov	r0, r4
}
   c20b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c20b8:	f7fb bea4 	b.w	bde04 <HAL_Pin_Mode>
}
   c20bc:	bd38      	pop	{r3, r4, r5, pc}

000c20be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c20be:	b538      	push	{r3, r4, r5, lr}
   c20c0:	4604      	mov	r4, r0
   c20c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c20c4:	f7fb fea6 	bl	bde14 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c20c8:	28ff      	cmp	r0, #255	; 0xff
   c20ca:	d010      	beq.n	c20ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c20cc:	2806      	cmp	r0, #6
   c20ce:	d804      	bhi.n	c20da <digitalWrite+0x1c>
   c20d0:	234d      	movs	r3, #77	; 0x4d
   c20d2:	fa23 f000 	lsr.w	r0, r3, r0
   c20d6:	07c3      	lsls	r3, r0, #31
   c20d8:	d409      	bmi.n	c20ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c20da:	4620      	mov	r0, r4
   c20dc:	f7ff ffa0 	bl	c2020 <pinAvailable>
   c20e0:	b128      	cbz	r0, c20ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c20e2:	4629      	mov	r1, r5
   c20e4:	4620      	mov	r0, r4
}
   c20e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c20ea:	f7fb be9b 	b.w	bde24 <HAL_GPIO_Write>
}
   c20ee:	bd38      	pop	{r3, r4, r5, pc}

000c20f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c20f0:	b510      	push	{r4, lr}
   c20f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c20f4:	f7fb fe8e 	bl	bde14 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c20f8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c20fa:	b2db      	uxtb	r3, r3
   c20fc:	2b01      	cmp	r3, #1
   c20fe:	d908      	bls.n	c2112 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c2100:	4620      	mov	r0, r4
   c2102:	f7ff ff8d 	bl	c2020 <pinAvailable>
   c2106:	b120      	cbz	r0, c2112 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c2108:	4620      	mov	r0, r4
}
   c210a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c210e:	f7fb be91 	b.w	bde34 <HAL_GPIO_Read>
}
   c2112:	2000      	movs	r0, #0
   c2114:	bd10      	pop	{r4, pc}

000c2116 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c2116:	280d      	cmp	r0, #13
{
   c2118:	b510      	push	{r4, lr}
   c211a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c211c:	bf9c      	itt	ls
   c211e:	340e      	addls	r4, #14
   c2120:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c2122:	4620      	mov	r0, r4
   c2124:	f7ff ff7c 	bl	c2020 <pinAvailable>
   c2128:	b150      	cbz	r0, c2140 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c212a:	2103      	movs	r1, #3
   c212c:	4620      	mov	r0, r4
   c212e:	f7fb fe61 	bl	bddf4 <HAL_Validate_Pin_Function>
   c2132:	2803      	cmp	r0, #3
   c2134:	d104      	bne.n	c2140 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c2136:	4620      	mov	r0, r4
}
   c2138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c213c:	f7fb bea2 	b.w	bde84 <hal_adc_read>
}
   c2140:	2000      	movs	r0, #0
   c2142:	bd10      	pop	{r4, pc}

000c2144 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c2144:	4770      	bx	lr
	...

000c2148 <_Z17acquireWireBufferv>:
{
   c2148:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c214a:	2520      	movs	r5, #32
   c214c:	2314      	movs	r3, #20
{
   c214e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c2150:	6003      	str	r3, [r0, #0]
   c2152:	6085      	str	r5, [r0, #8]
   c2154:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c2156:	4906      	ldr	r1, [pc, #24]	; (c2170 <_Z17acquireWireBufferv+0x28>)
   c2158:	4628      	mov	r0, r5
   c215a:	f000 f871 	bl	c2240 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c215e:	4904      	ldr	r1, [pc, #16]	; (c2170 <_Z17acquireWireBufferv+0x28>)
	};
   c2160:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c2162:	4628      	mov	r0, r5
   c2164:	f000 f86c 	bl	c2240 <_ZnajRKSt9nothrow_t>
	};
   c2168:	60e0      	str	r0, [r4, #12]
}
   c216a:	4620      	mov	r0, r4
   c216c:	bd38      	pop	{r3, r4, r5, pc}
   c216e:	bf00      	nop
   c2170:	000c81a4 	.word	0x000c81a4

000c2174 <_Z19__fetch_global_Wirev>:
{
   c2174:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c2176:	4d0e      	ldr	r5, [pc, #56]	; (c21b0 <_Z19__fetch_global_Wirev+0x3c>)
   c2178:	7829      	ldrb	r1, [r5, #0]
   c217a:	f3bf 8f5b 	dmb	ish
   c217e:	f011 0401 	ands.w	r4, r1, #1
{
   c2182:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c2184:	d111      	bne.n	c21aa <_Z19__fetch_global_Wirev+0x36>
   c2186:	4628      	mov	r0, r5
   c2188:	f7f1 ff9a 	bl	b40c0 <__cxa_guard_acquire>
   c218c:	b168      	cbz	r0, c21aa <_Z19__fetch_global_Wirev+0x36>
   c218e:	a801      	add	r0, sp, #4
   c2190:	f7ff ffda 	bl	c2148 <_Z17acquireWireBufferv>
   c2194:	aa01      	add	r2, sp, #4
   c2196:	4621      	mov	r1, r4
   c2198:	4806      	ldr	r0, [pc, #24]	; (c21b4 <_Z19__fetch_global_Wirev+0x40>)
   c219a:	f7fd feb7 	bl	bff0c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c219e:	4628      	mov	r0, r5
   c21a0:	f7f1 ff93 	bl	b40ca <__cxa_guard_release>
   c21a4:	4804      	ldr	r0, [pc, #16]	; (c21b8 <_Z19__fetch_global_Wirev+0x44>)
   c21a6:	f002 fa25 	bl	c45f4 <atexit>
	return wire;
}
   c21aa:	4802      	ldr	r0, [pc, #8]	; (c21b4 <_Z19__fetch_global_Wirev+0x40>)
   c21ac:	b007      	add	sp, #28
   c21ae:	bd30      	pop	{r4, r5, pc}
   c21b0:	2003e72c 	.word	0x2003e72c
   c21b4:	2003e730 	.word	0x2003e730
   c21b8:	000c2145 	.word	0x000c2145

000c21bc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c21bc:	4770      	bx	lr
	...

000c21c0 <_Z20acquireSerial1Bufferv>:
{
   c21c0:	b538      	push	{r3, r4, r5, lr}
   c21c2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c21c4:	2514      	movs	r5, #20
   c21c6:	462a      	mov	r2, r5
   c21c8:	2100      	movs	r1, #0
   c21ca:	f002 fa61 	bl	c4690 <memset>
   c21ce:	8025      	strh	r5, [r4, #0]
   c21d0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21d2:	4907      	ldr	r1, [pc, #28]	; (c21f0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c21d4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21d6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c21d8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21da:	f000 f831 	bl	c2240 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21de:	4904      	ldr	r1, [pc, #16]	; (c21f0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c21e0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c21e2:	4628      	mov	r0, r5
   c21e4:	f000 f82c 	bl	c2240 <_ZnajRKSt9nothrow_t>
    };
   c21e8:	60e0      	str	r0, [r4, #12]
}
   c21ea:	4620      	mov	r0, r4
   c21ec:	bd38      	pop	{r3, r4, r5, pc}
   c21ee:	bf00      	nop
   c21f0:	000c81a4 	.word	0x000c81a4

000c21f4 <_Z22__fetch_global_Serial1v>:
{
   c21f4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c21f6:	4d0e      	ldr	r5, [pc, #56]	; (c2230 <_Z22__fetch_global_Serial1v+0x3c>)
   c21f8:	7829      	ldrb	r1, [r5, #0]
   c21fa:	f3bf 8f5b 	dmb	ish
   c21fe:	f011 0401 	ands.w	r4, r1, #1
{
   c2202:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c2204:	d111      	bne.n	c222a <_Z22__fetch_global_Serial1v+0x36>
   c2206:	4628      	mov	r0, r5
   c2208:	f7f1 ff5a 	bl	b40c0 <__cxa_guard_acquire>
   c220c:	b168      	cbz	r0, c222a <_Z22__fetch_global_Serial1v+0x36>
   c220e:	a801      	add	r0, sp, #4
   c2210:	f7ff ffd6 	bl	c21c0 <_Z20acquireSerial1Bufferv>
   c2214:	aa01      	add	r2, sp, #4
   c2216:	4621      	mov	r1, r4
   c2218:	4806      	ldr	r0, [pc, #24]	; (c2234 <_Z22__fetch_global_Serial1v+0x40>)
   c221a:	f7ff fdbf 	bl	c1d9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c221e:	4628      	mov	r0, r5
   c2220:	f7f1 ff53 	bl	b40ca <__cxa_guard_release>
   c2224:	4804      	ldr	r0, [pc, #16]	; (c2238 <_Z22__fetch_global_Serial1v+0x44>)
   c2226:	f002 f9e5 	bl	c45f4 <atexit>
    return serial1;
}
   c222a:	4802      	ldr	r0, [pc, #8]	; (c2234 <_Z22__fetch_global_Serial1v+0x40>)
   c222c:	b007      	add	sp, #28
   c222e:	bd30      	pop	{r4, r5, pc}
   c2230:	2003e744 	.word	0x2003e744
   c2234:	2003e748 	.word	0x2003e748
   c2238:	000c21bd 	.word	0x000c21bd

000c223c <_ZnwjRKSt9nothrow_t>:
   c223c:	f7f1 bf2b 	b.w	b4096 <_Znwj>

000c2240 <_ZnajRKSt9nothrow_t>:
   c2240:	f7f1 bf2b 	b.w	b409a <_Znaj>

000c2244 <_ZSt25__throw_bad_function_callv>:
   c2244:	b508      	push	{r3, lr}
   c2246:	f7fc f8e3 	bl	be410 <abort>
	...

000c224c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c224c:	4901      	ldr	r1, [pc, #4]	; (c2254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c224e:	f000 b8f9 	b.w	c2444 <_ZNKSt9type_infoeqERKS_>
   c2252:	bf00      	nop
   c2254:	000c81c0 	.word	0x000c81c0

000c2258 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c2258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c225a:	2400      	movs	r4, #0
   c225c:	2310      	movs	r3, #16
   c225e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c2262:	6803      	ldr	r3, [r0, #0]
   c2264:	4615      	mov	r5, r2
   c2266:	699e      	ldr	r6, [r3, #24]
   c2268:	6812      	ldr	r2, [r2, #0]
   c226a:	466b      	mov	r3, sp
   c226c:	e9cd 4400 	strd	r4, r4, [sp]
   c2270:	47b0      	blx	r6
   c2272:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c2276:	f003 0306 	and.w	r3, r3, #6
   c227a:	2b06      	cmp	r3, #6
   c227c:	bf03      	ittte	eq
   c227e:	9b00      	ldreq	r3, [sp, #0]
   c2280:	602b      	streq	r3, [r5, #0]
   c2282:	2001      	moveq	r0, #1
   c2284:	4620      	movne	r0, r4
   c2286:	b004      	add	sp, #16
   c2288:	bd70      	pop	{r4, r5, r6, pc}

000c228a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c228a:	9800      	ldr	r0, [sp, #0]
   c228c:	4290      	cmp	r0, r2
   c228e:	bf14      	ite	ne
   c2290:	2001      	movne	r0, #1
   c2292:	2006      	moveq	r0, #6
   c2294:	4770      	bx	lr
	...

000c2298 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c2298:	b510      	push	{r4, lr}
   c229a:	4b03      	ldr	r3, [pc, #12]	; (c22a8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c229c:	6003      	str	r3, [r0, #0]
   c229e:	4604      	mov	r4, r0
   c22a0:	f000 f8cd 	bl	c243e <_ZNSt9type_infoD1Ev>
   c22a4:	4620      	mov	r0, r4
   c22a6:	bd10      	pop	{r4, pc}
   c22a8:	000c8200 	.word	0x000c8200

000c22ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c22ac:	b510      	push	{r4, lr}
   c22ae:	4604      	mov	r4, r0
   c22b0:	f7ff fff2 	bl	c2298 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c22b4:	4620      	mov	r0, r4
   c22b6:	2108      	movs	r1, #8
   c22b8:	f7f1 fef3 	bl	b40a2 <_ZdlPvj>
   c22bc:	4620      	mov	r0, r4
   c22be:	bd10      	pop	{r4, pc}

000c22c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c22c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c22c4:	461f      	mov	r7, r3
   c22c6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c22ca:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c22ce:	4598      	cmp	r8, r3
   c22d0:	4606      	mov	r6, r0
   c22d2:	4615      	mov	r5, r2
   c22d4:	d107      	bne.n	c22e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c22d6:	9907      	ldr	r1, [sp, #28]
   c22d8:	f000 f8b4 	bl	c2444 <_ZNKSt9type_infoeqERKS_>
   c22dc:	b118      	cbz	r0, c22e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c22de:	7165      	strb	r5, [r4, #5]
   c22e0:	2000      	movs	r0, #0
   c22e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c22e6:	4639      	mov	r1, r7
   c22e8:	4630      	mov	r0, r6
   c22ea:	f000 f8ab 	bl	c2444 <_ZNKSt9type_infoeqERKS_>
   c22ee:	2800      	cmp	r0, #0
   c22f0:	d0f6      	beq.n	c22e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c22f2:	2301      	movs	r3, #1
   c22f4:	f8c4 8000 	str.w	r8, [r4]
   c22f8:	7125      	strb	r5, [r4, #4]
   c22fa:	71a3      	strb	r3, [r4, #6]
   c22fc:	e7f0      	b.n	c22e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c22fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c22fe:	b538      	push	{r3, r4, r5, lr}
   c2300:	4615      	mov	r5, r2
   c2302:	461c      	mov	r4, r3
   c2304:	f000 f89e 	bl	c2444 <_ZNKSt9type_infoeqERKS_>
   c2308:	b120      	cbz	r0, c2314 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c230a:	2308      	movs	r3, #8
   c230c:	60e3      	str	r3, [r4, #12]
   c230e:	2306      	movs	r3, #6
   c2310:	6025      	str	r5, [r4, #0]
   c2312:	7123      	strb	r3, [r4, #4]
   c2314:	bd38      	pop	{r3, r4, r5, pc}

000c2316 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c2316:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c2318:	4605      	mov	r5, r0
   c231a:	460c      	mov	r4, r1
   c231c:	9201      	str	r2, [sp, #4]
   c231e:	461e      	mov	r6, r3
   c2320:	f000 f890 	bl	c2444 <_ZNKSt9type_infoeqERKS_>
   c2324:	b950      	cbnz	r0, c233c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c2326:	2e03      	cmp	r6, #3
   c2328:	d808      	bhi.n	c233c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c232a:	6823      	ldr	r3, [r4, #0]
   c232c:	9a01      	ldr	r2, [sp, #4]
   c232e:	695b      	ldr	r3, [r3, #20]
   c2330:	4629      	mov	r1, r5
   c2332:	4620      	mov	r0, r4
   c2334:	b002      	add	sp, #8
   c2336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c233a:	4718      	bx	r3
   c233c:	b002      	add	sp, #8
   c233e:	bd70      	pop	{r4, r5, r6, pc}

000c2340 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c2340:	b510      	push	{r4, lr}
   c2342:	4b03      	ldr	r3, [pc, #12]	; (c2350 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c2344:	6003      	str	r3, [r0, #0]
   c2346:	4604      	mov	r4, r0
   c2348:	f7ff ffa6 	bl	c2298 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c234c:	4620      	mov	r0, r4
   c234e:	bd10      	pop	{r4, pc}
   c2350:	000c8260 	.word	0x000c8260

000c2354 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c2354:	b510      	push	{r4, lr}
   c2356:	4604      	mov	r4, r0
   c2358:	f7ff fff2 	bl	c2340 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c235c:	4620      	mov	r0, r4
   c235e:	210c      	movs	r1, #12
   c2360:	f7f1 fe9f 	bl	b40a2 <_ZdlPvj>
   c2364:	4620      	mov	r0, r4
   c2366:	bd10      	pop	{r4, pc}

000c2368 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c2368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c236a:	9f08      	ldr	r7, [sp, #32]
   c236c:	4297      	cmp	r7, r2
   c236e:	4605      	mov	r5, r0
   c2370:	460e      	mov	r6, r1
   c2372:	4614      	mov	r4, r2
   c2374:	d00a      	beq.n	c238c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c2376:	68a8      	ldr	r0, [r5, #8]
   c2378:	6802      	ldr	r2, [r0, #0]
   c237a:	9708      	str	r7, [sp, #32]
   c237c:	6a15      	ldr	r5, [r2, #32]
   c237e:	4631      	mov	r1, r6
   c2380:	4622      	mov	r2, r4
   c2382:	46ac      	mov	ip, r5
   c2384:	b003      	add	sp, #12
   c2386:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c238a:	4760      	bx	ip
   c238c:	4619      	mov	r1, r3
   c238e:	9301      	str	r3, [sp, #4]
   c2390:	f000 f858 	bl	c2444 <_ZNKSt9type_infoeqERKS_>
   c2394:	9b01      	ldr	r3, [sp, #4]
   c2396:	2800      	cmp	r0, #0
   c2398:	d0ed      	beq.n	c2376 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c239a:	2006      	movs	r0, #6
   c239c:	b003      	add	sp, #12
   c239e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c23a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c23a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c23a4:	460d      	mov	r5, r1
   c23a6:	4619      	mov	r1, r3
   c23a8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c23ac:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c23b0:	4681      	mov	r9, r0
   c23b2:	4617      	mov	r7, r2
   c23b4:	4698      	mov	r8, r3
   c23b6:	f000 f845 	bl	c2444 <_ZNKSt9type_infoeqERKS_>
   c23ba:	b190      	cbz	r0, c23e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c23bc:	2d00      	cmp	r5, #0
   c23be:	6034      	str	r4, [r6, #0]
   c23c0:	7137      	strb	r7, [r6, #4]
   c23c2:	db09      	blt.n	c23d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c23c4:	1961      	adds	r1, r4, r5
   c23c6:	458a      	cmp	sl, r1
   c23c8:	bf0c      	ite	eq
   c23ca:	2106      	moveq	r1, #6
   c23cc:	2101      	movne	r1, #1
   c23ce:	71b1      	strb	r1, [r6, #6]
   c23d0:	2000      	movs	r0, #0
   c23d2:	b001      	add	sp, #4
   c23d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c23d8:	3502      	adds	r5, #2
   c23da:	d1f9      	bne.n	c23d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c23dc:	2301      	movs	r3, #1
   c23de:	71b3      	strb	r3, [r6, #6]
   c23e0:	e7f6      	b.n	c23d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c23e2:	4554      	cmp	r4, sl
   c23e4:	d106      	bne.n	c23f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c23e6:	4659      	mov	r1, fp
   c23e8:	4648      	mov	r0, r9
   c23ea:	f000 f82b 	bl	c2444 <_ZNKSt9type_infoeqERKS_>
   c23ee:	b108      	cbz	r0, c23f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c23f0:	7177      	strb	r7, [r6, #5]
   c23f2:	e7ed      	b.n	c23d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c23f4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c23f8:	6803      	ldr	r3, [r0, #0]
   c23fa:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c23fe:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c2402:	69dc      	ldr	r4, [r3, #28]
   c2404:	463a      	mov	r2, r7
   c2406:	4643      	mov	r3, r8
   c2408:	4629      	mov	r1, r5
   c240a:	46a4      	mov	ip, r4
   c240c:	b001      	add	sp, #4
   c240e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2412:	4760      	bx	ip

000c2414 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c2414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2418:	4607      	mov	r7, r0
   c241a:	460c      	mov	r4, r1
   c241c:	4615      	mov	r5, r2
   c241e:	461e      	mov	r6, r3
   c2420:	f7ff ff6d 	bl	c22fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c2424:	b948      	cbnz	r0, c243a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c2426:	68b8      	ldr	r0, [r7, #8]
   c2428:	6803      	ldr	r3, [r0, #0]
   c242a:	699f      	ldr	r7, [r3, #24]
   c242c:	462a      	mov	r2, r5
   c242e:	4633      	mov	r3, r6
   c2430:	4621      	mov	r1, r4
   c2432:	46bc      	mov	ip, r7
   c2434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c2438:	4760      	bx	ip
   c243a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c243e <_ZNSt9type_infoD1Ev>:
   c243e:	4770      	bx	lr

000c2440 <_ZNKSt9type_info14__is_pointer_pEv>:
   c2440:	2000      	movs	r0, #0
   c2442:	4770      	bx	lr

000c2444 <_ZNKSt9type_infoeqERKS_>:
   c2444:	4281      	cmp	r1, r0
   c2446:	b508      	push	{r3, lr}
   c2448:	d00e      	beq.n	c2468 <_ZNKSt9type_infoeqERKS_+0x24>
   c244a:	6840      	ldr	r0, [r0, #4]
   c244c:	7803      	ldrb	r3, [r0, #0]
   c244e:	2b2a      	cmp	r3, #42	; 0x2a
   c2450:	d00c      	beq.n	c246c <_ZNKSt9type_infoeqERKS_+0x28>
   c2452:	6849      	ldr	r1, [r1, #4]
   c2454:	780b      	ldrb	r3, [r1, #0]
   c2456:	2b2a      	cmp	r3, #42	; 0x2a
   c2458:	bf08      	it	eq
   c245a:	3101      	addeq	r1, #1
   c245c:	f002 f974 	bl	c4748 <strcmp>
   c2460:	fab0 f080 	clz	r0, r0
   c2464:	0940      	lsrs	r0, r0, #5
   c2466:	bd08      	pop	{r3, pc}
   c2468:	2001      	movs	r0, #1
   c246a:	e7fc      	b.n	c2466 <_ZNKSt9type_infoeqERKS_+0x22>
   c246c:	2000      	movs	r0, #0
   c246e:	e7fa      	b.n	c2466 <_ZNKSt9type_infoeqERKS_+0x22>

000c2470 <cosf>:
   c2470:	ee10 3a10 	vmov	r3, s0
   c2474:	4a18      	ldr	r2, [pc, #96]	; (c24d8 <cosf+0x68>)
   c2476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c247a:	4293      	cmp	r3, r2
   c247c:	dd1b      	ble.n	c24b6 <cosf+0x46>
   c247e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c2482:	db02      	blt.n	c248a <cosf+0x1a>
   c2484:	ee30 0a40 	vsub.f32	s0, s0, s0
   c2488:	4770      	bx	lr
   c248a:	b500      	push	{lr}
   c248c:	b083      	sub	sp, #12
   c248e:	4668      	mov	r0, sp
   c2490:	f000 fb10 	bl	c2ab4 <__ieee754_rem_pio2f>
   c2494:	f000 0003 	and.w	r0, r0, #3
   c2498:	2801      	cmp	r0, #1
   c249a:	eddd 0a01 	vldr	s1, [sp, #4]
   c249e:	ed9d 0a00 	vldr	s0, [sp]
   c24a2:	d00c      	beq.n	c24be <cosf+0x4e>
   c24a4:	2802      	cmp	r0, #2
   c24a6:	d012      	beq.n	c24ce <cosf+0x5e>
   c24a8:	b170      	cbz	r0, c24c8 <cosf+0x58>
   c24aa:	2001      	movs	r0, #1
   c24ac:	f000 fff4 	bl	c3498 <__kernel_sinf>
   c24b0:	b003      	add	sp, #12
   c24b2:	f85d fb04 	ldr.w	pc, [sp], #4
   c24b6:	eddf 0a09 	vldr	s1, [pc, #36]	; c24dc <cosf+0x6c>
   c24ba:	f000 bc31 	b.w	c2d20 <__kernel_cosf>
   c24be:	f000 ffeb 	bl	c3498 <__kernel_sinf>
   c24c2:	eeb1 0a40 	vneg.f32	s0, s0
   c24c6:	e7f3      	b.n	c24b0 <cosf+0x40>
   c24c8:	f000 fc2a 	bl	c2d20 <__kernel_cosf>
   c24cc:	e7f0      	b.n	c24b0 <cosf+0x40>
   c24ce:	f000 fc27 	bl	c2d20 <__kernel_cosf>
   c24d2:	eeb1 0a40 	vneg.f32	s0, s0
   c24d6:	e7eb      	b.n	c24b0 <cosf+0x40>
   c24d8:	3f490fd8 	.word	0x3f490fd8
   c24dc:	00000000 	.word	0x00000000

000c24e0 <sinf>:
   c24e0:	ee10 3a10 	vmov	r3, s0
   c24e4:	4a19      	ldr	r2, [pc, #100]	; (c254c <sinf+0x6c>)
   c24e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c24ea:	4293      	cmp	r3, r2
   c24ec:	dd1c      	ble.n	c2528 <sinf+0x48>
   c24ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c24f2:	db02      	blt.n	c24fa <sinf+0x1a>
   c24f4:	ee30 0a40 	vsub.f32	s0, s0, s0
   c24f8:	4770      	bx	lr
   c24fa:	b500      	push	{lr}
   c24fc:	b083      	sub	sp, #12
   c24fe:	4668      	mov	r0, sp
   c2500:	f000 fad8 	bl	c2ab4 <__ieee754_rem_pio2f>
   c2504:	f000 0003 	and.w	r0, r0, #3
   c2508:	2801      	cmp	r0, #1
   c250a:	eddd 0a01 	vldr	s1, [sp, #4]
   c250e:	ed9d 0a00 	vldr	s0, [sp]
   c2512:	d00e      	beq.n	c2532 <sinf+0x52>
   c2514:	2802      	cmp	r0, #2
   c2516:	d013      	beq.n	c2540 <sinf+0x60>
   c2518:	b170      	cbz	r0, c2538 <sinf+0x58>
   c251a:	f000 fc01 	bl	c2d20 <__kernel_cosf>
   c251e:	eeb1 0a40 	vneg.f32	s0, s0
   c2522:	b003      	add	sp, #12
   c2524:	f85d fb04 	ldr.w	pc, [sp], #4
   c2528:	eddf 0a09 	vldr	s1, [pc, #36]	; c2550 <sinf+0x70>
   c252c:	2000      	movs	r0, #0
   c252e:	f000 bfb3 	b.w	c3498 <__kernel_sinf>
   c2532:	f000 fbf5 	bl	c2d20 <__kernel_cosf>
   c2536:	e7f4      	b.n	c2522 <sinf+0x42>
   c2538:	2001      	movs	r0, #1
   c253a:	f000 ffad 	bl	c3498 <__kernel_sinf>
   c253e:	e7f0      	b.n	c2522 <sinf+0x42>
   c2540:	2001      	movs	r0, #1
   c2542:	f000 ffa9 	bl	c3498 <__kernel_sinf>
   c2546:	eeb1 0a40 	vneg.f32	s0, s0
   c254a:	e7ea      	b.n	c2522 <sinf+0x42>
   c254c:	3f490fd8 	.word	0x3f490fd8
   c2550:	00000000 	.word	0x00000000

000c2554 <atan2>:
   c2554:	f000 b864 	b.w	c2620 <__ieee754_atan2>

000c2558 <sqrt>:
   c2558:	b538      	push	{r3, r4, r5, lr}
   c255a:	ed2d 8b02 	vpush	{d8}
   c255e:	ec55 4b10 	vmov	r4, r5, d0
   c2562:	f000 f933 	bl	c27cc <__ieee754_sqrt>
   c2566:	4b18      	ldr	r3, [pc, #96]	; (c25c8 <sqrt+0x70>)
   c2568:	eeb0 8a40 	vmov.f32	s16, s0
   c256c:	eef0 8a60 	vmov.f32	s17, s1
   c2570:	f993 3000 	ldrsb.w	r3, [r3]
   c2574:	3301      	adds	r3, #1
   c2576:	d00d      	beq.n	c2594 <sqrt+0x3c>
   c2578:	4622      	mov	r2, r4
   c257a:	462b      	mov	r3, r5
   c257c:	4620      	mov	r0, r4
   c257e:	4629      	mov	r1, r5
   c2580:	f001 ff6c 	bl	c445c <__aeabi_dcmpun>
   c2584:	b930      	cbnz	r0, c2594 <sqrt+0x3c>
   c2586:	2200      	movs	r2, #0
   c2588:	2300      	movs	r3, #0
   c258a:	4620      	mov	r0, r4
   c258c:	4629      	mov	r1, r5
   c258e:	f001 ff3d 	bl	c440c <__aeabi_dcmplt>
   c2592:	b930      	cbnz	r0, c25a2 <sqrt+0x4a>
   c2594:	eeb0 0a48 	vmov.f32	s0, s16
   c2598:	eef0 0a68 	vmov.f32	s1, s17
   c259c:	ecbd 8b02 	vpop	{d8}
   c25a0:	bd38      	pop	{r3, r4, r5, pc}
   c25a2:	f7fb ff45 	bl	be430 <__errno>
   c25a6:	2200      	movs	r2, #0
   c25a8:	2300      	movs	r3, #0
   c25aa:	2121      	movs	r1, #33	; 0x21
   c25ac:	6001      	str	r1, [r0, #0]
   c25ae:	4610      	mov	r0, r2
   c25b0:	4619      	mov	r1, r3
   c25b2:	f001 fde3 	bl	c417c <__aeabi_ddiv>
   c25b6:	ec41 0b18 	vmov	d8, r0, r1
   c25ba:	eeb0 0a48 	vmov.f32	s0, s16
   c25be:	eef0 0a68 	vmov.f32	s1, s17
   c25c2:	ecbd 8b02 	vpop	{d8}
   c25c6:	bd38      	pop	{r3, r4, r5, pc}
   c25c8:	2003db44 	.word	0x2003db44

000c25cc <atan2f>:
   c25cc:	f000 b9ca 	b.w	c2964 <__ieee754_atan2f>

000c25d0 <sqrtf>:
   c25d0:	b508      	push	{r3, lr}
   c25d2:	ed2d 8b02 	vpush	{d8}
   c25d6:	eeb0 8a40 	vmov.f32	s16, s0
   c25da:	f000 fb9d 	bl	c2d18 <__ieee754_sqrtf>
   c25de:	4b0e      	ldr	r3, [pc, #56]	; (c2618 <sqrtf+0x48>)
   c25e0:	f993 3000 	ldrsb.w	r3, [r3]
   c25e4:	3301      	adds	r3, #1
   c25e6:	d00b      	beq.n	c2600 <sqrtf+0x30>
   c25e8:	eeb4 8a48 	vcmp.f32	s16, s16
   c25ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c25f0:	d606      	bvs.n	c2600 <sqrtf+0x30>
   c25f2:	eddf 8a0a 	vldr	s17, [pc, #40]	; c261c <sqrtf+0x4c>
   c25f6:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c25fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c25fe:	d402      	bmi.n	c2606 <sqrtf+0x36>
   c2600:	ecbd 8b02 	vpop	{d8}
   c2604:	bd08      	pop	{r3, pc}
   c2606:	f7fb ff13 	bl	be430 <__errno>
   c260a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c260e:	ecbd 8b02 	vpop	{d8}
   c2612:	2321      	movs	r3, #33	; 0x21
   c2614:	6003      	str	r3, [r0, #0]
   c2616:	bd08      	pop	{r3, pc}
   c2618:	2003db44 	.word	0x2003db44
   c261c:	00000000 	.word	0x00000000

000c2620 <__ieee754_atan2>:
   c2620:	ec51 0b11 	vmov	r0, r1, d1
   c2624:	4243      	negs	r3, r0
   c2626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c262a:	4303      	orrs	r3, r0
   c262c:	4e64      	ldr	r6, [pc, #400]	; (c27c0 <__ieee754_atan2+0x1a0>)
   c262e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c2632:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c2636:	42b3      	cmp	r3, r6
   c2638:	ec55 4b10 	vmov	r4, r5, d0
   c263c:	d83e      	bhi.n	c26bc <__ieee754_atan2+0x9c>
   c263e:	4263      	negs	r3, r4
   c2640:	4323      	orrs	r3, r4
   c2642:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c2646:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c264a:	42b3      	cmp	r3, r6
   c264c:	46a9      	mov	r9, r5
   c264e:	d835      	bhi.n	c26bc <__ieee754_atan2+0x9c>
   c2650:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c2654:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c2658:	4303      	orrs	r3, r0
   c265a:	d03e      	beq.n	c26da <__ieee754_atan2+0xba>
   c265c:	178f      	asrs	r7, r1, #30
   c265e:	f007 0702 	and.w	r7, r7, #2
   c2662:	ea5a 0304 	orrs.w	r3, sl, r4
   c2666:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c266a:	d02f      	beq.n	c26cc <__ieee754_atan2+0xac>
   c266c:	ea5e 0300 	orrs.w	r3, lr, r0
   c2670:	d037      	beq.n	c26e2 <__ieee754_atan2+0xc2>
   c2672:	45b6      	cmp	lr, r6
   c2674:	d044      	beq.n	c2700 <__ieee754_atan2+0xe0>
   c2676:	45b2      	cmp	sl, r6
   c2678:	d033      	beq.n	c26e2 <__ieee754_atan2+0xc2>
   c267a:	ebaa 0e0e 	sub.w	lr, sl, lr
   c267e:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c2682:	ea4f 532e 	mov.w	r3, lr, asr #20
   c2686:	da38      	bge.n	c26fa <__ieee754_atan2+0xda>
   c2688:	2900      	cmp	r1, #0
   c268a:	da45      	bge.n	c2718 <__ieee754_atan2+0xf8>
   c268c:	333c      	adds	r3, #60	; 0x3c
   c268e:	da43      	bge.n	c2718 <__ieee754_atan2+0xf8>
   c2690:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c2788 <__ieee754_atan2+0x168>
   c2694:	2f01      	cmp	r7, #1
   c2696:	d05d      	beq.n	c2754 <__ieee754_atan2+0x134>
   c2698:	2f02      	cmp	r7, #2
   c269a:	d04a      	beq.n	c2732 <__ieee754_atan2+0x112>
   c269c:	b1a7      	cbz	r7, c26c8 <__ieee754_atan2+0xa8>
   c269e:	ec51 0b10 	vmov	r0, r1, d0
   c26a2:	a33b      	add	r3, pc, #236	; (adr r3, c2790 <__ieee754_atan2+0x170>)
   c26a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c26a8:	f001 fa86 	bl	c3bb8 <__aeabi_dsub>
   c26ac:	a33a      	add	r3, pc, #232	; (adr r3, c2798 <__ieee754_atan2+0x178>)
   c26ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   c26b2:	f001 fa81 	bl	c3bb8 <__aeabi_dsub>
   c26b6:	ec41 0b10 	vmov	d0, r0, r1
   c26ba:	e005      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c26bc:	4622      	mov	r2, r4
   c26be:	462b      	mov	r3, r5
   c26c0:	f001 fa7c 	bl	c3bbc <__adddf3>
   c26c4:	ec41 0b10 	vmov	d0, r0, r1
   c26c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c26cc:	2f02      	cmp	r7, #2
   c26ce:	d00e      	beq.n	c26ee <__ieee754_atan2+0xce>
   c26d0:	2f03      	cmp	r7, #3
   c26d2:	d1f9      	bne.n	c26c8 <__ieee754_atan2+0xa8>
   c26d4:	ed9f 0b32 	vldr	d0, [pc, #200]	; c27a0 <__ieee754_atan2+0x180>
   c26d8:	e7f6      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c26da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c26de:	f000 bf23 	b.w	c3528 <atan>
   c26e2:	f1b9 0f00 	cmp.w	r9, #0
   c26e6:	db05      	blt.n	c26f4 <__ieee754_atan2+0xd4>
   c26e8:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c27a8 <__ieee754_atan2+0x188>
   c26ec:	e7ec      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c26ee:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c2798 <__ieee754_atan2+0x178>
   c26f2:	e7e9      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c26f4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c27b0 <__ieee754_atan2+0x190>
   c26f8:	e7e6      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c26fa:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c27a8 <__ieee754_atan2+0x188>
   c26fe:	e7c9      	b.n	c2694 <__ieee754_atan2+0x74>
   c2700:	45f2      	cmp	sl, lr
   c2702:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c2706:	d02e      	beq.n	c2766 <__ieee754_atan2+0x146>
   c2708:	2f02      	cmp	r7, #2
   c270a:	d834      	bhi.n	c2776 <__ieee754_atan2+0x156>
   c270c:	4b2d      	ldr	r3, [pc, #180]	; (c27c4 <__ieee754_atan2+0x1a4>)
   c270e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2712:	ed97 0b00 	vldr	d0, [r7]
   c2716:	e7d7      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c2718:	4602      	mov	r2, r0
   c271a:	460b      	mov	r3, r1
   c271c:	4620      	mov	r0, r4
   c271e:	4629      	mov	r1, r5
   c2720:	f001 fd2c 	bl	c417c <__aeabi_ddiv>
   c2724:	ec41 0b10 	vmov	d0, r0, r1
   c2728:	f001 f89e 	bl	c3868 <fabs>
   c272c:	f000 fefc 	bl	c3528 <atan>
   c2730:	e7b0      	b.n	c2694 <__ieee754_atan2+0x74>
   c2732:	a317      	add	r3, pc, #92	; (adr r3, c2790 <__ieee754_atan2+0x170>)
   c2734:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2738:	ec51 0b10 	vmov	r0, r1, d0
   c273c:	f001 fa3c 	bl	c3bb8 <__aeabi_dsub>
   c2740:	4602      	mov	r2, r0
   c2742:	460b      	mov	r3, r1
   c2744:	a114      	add	r1, pc, #80	; (adr r1, c2798 <__ieee754_atan2+0x178>)
   c2746:	e9d1 0100 	ldrd	r0, r1, [r1]
   c274a:	f001 fa35 	bl	c3bb8 <__aeabi_dsub>
   c274e:	ec41 0b10 	vmov	d0, r0, r1
   c2752:	e7b9      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c2754:	ee10 1a90 	vmov	r1, s1
   c2758:	ec53 2b10 	vmov	r2, r3, d0
   c275c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2760:	ec43 2b10 	vmov	d0, r2, r3
   c2764:	e7b0      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c2766:	2f02      	cmp	r7, #2
   c2768:	d808      	bhi.n	c277c <__ieee754_atan2+0x15c>
   c276a:	4b17      	ldr	r3, [pc, #92]	; (c27c8 <__ieee754_atan2+0x1a8>)
   c276c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2770:	ed97 0b00 	vldr	d0, [r7]
   c2774:	e7a8      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c2776:	ed9f 0b04 	vldr	d0, [pc, #16]	; c2788 <__ieee754_atan2+0x168>
   c277a:	e7a5      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c277c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c27b8 <__ieee754_atan2+0x198>
   c2780:	e7a2      	b.n	c26c8 <__ieee754_atan2+0xa8>
   c2782:	bf00      	nop
   c2784:	f3af 8000 	nop.w
	...
   c2790:	33145c07 	.word	0x33145c07
   c2794:	3ca1a626 	.word	0x3ca1a626
   c2798:	54442d18 	.word	0x54442d18
   c279c:	400921fb 	.word	0x400921fb
   c27a0:	54442d18 	.word	0x54442d18
   c27a4:	c00921fb 	.word	0xc00921fb
   c27a8:	54442d18 	.word	0x54442d18
   c27ac:	3ff921fb 	.word	0x3ff921fb
   c27b0:	54442d18 	.word	0x54442d18
   c27b4:	bff921fb 	.word	0xbff921fb
   c27b8:	54442d18 	.word	0x54442d18
   c27bc:	3fe921fb 	.word	0x3fe921fb
   c27c0:	7ff00000 	.word	0x7ff00000
   c27c4:	000c82b8 	.word	0x000c82b8
   c27c8:	000c82a0 	.word	0x000c82a0

000c27cc <__ieee754_sqrt>:
   c27cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c27d0:	4a63      	ldr	r2, [pc, #396]	; (c2960 <__ieee754_sqrt+0x194>)
   c27d2:	ec55 4b10 	vmov	r4, r5, d0
   c27d6:	43aa      	bics	r2, r5
   c27d8:	f000 809f 	beq.w	c291a <__ieee754_sqrt+0x14e>
   c27dc:	2d00      	cmp	r5, #0
   c27de:	ee10 ca10 	vmov	ip, s0
   c27e2:	462b      	mov	r3, r5
   c27e4:	dd54      	ble.n	c2890 <__ieee754_sqrt+0xc4>
   c27e6:	1529      	asrs	r1, r5, #20
   c27e8:	d063      	beq.n	c28b2 <__ieee754_sqrt+0xe6>
   c27ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c27ee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c27f2:	07c9      	lsls	r1, r1, #31
   c27f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c27f8:	d404      	bmi.n	c2804 <__ieee754_sqrt+0x38>
   c27fa:	005b      	lsls	r3, r3, #1
   c27fc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c2800:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2804:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c2808:	2600      	movs	r6, #0
   c280a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c280e:	107f      	asrs	r7, r7, #1
   c2810:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2814:	f04f 0e16 	mov.w	lr, #22
   c2818:	4634      	mov	r4, r6
   c281a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c281e:	18a1      	adds	r1, r4, r2
   c2820:	4299      	cmp	r1, r3
   c2822:	dc02      	bgt.n	c282a <__ieee754_sqrt+0x5e>
   c2824:	1a5b      	subs	r3, r3, r1
   c2826:	188c      	adds	r4, r1, r2
   c2828:	4416      	add	r6, r2
   c282a:	005b      	lsls	r3, r3, #1
   c282c:	f1be 0e01 	subs.w	lr, lr, #1
   c2830:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c2834:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2838:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c283c:	d1ef      	bne.n	c281e <__ieee754_sqrt+0x52>
   c283e:	4675      	mov	r5, lr
   c2840:	2020      	movs	r0, #32
   c2842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c2846:	e00a      	b.n	c285e <__ieee754_sqrt+0x92>
   c2848:	d044      	beq.n	c28d4 <__ieee754_sqrt+0x108>
   c284a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c284e:	3801      	subs	r0, #1
   c2850:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c2854:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2858:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c285c:	d043      	beq.n	c28e6 <__ieee754_sqrt+0x11a>
   c285e:	42a3      	cmp	r3, r4
   c2860:	eb02 010e 	add.w	r1, r2, lr
   c2864:	ddf0      	ble.n	c2848 <__ieee754_sqrt+0x7c>
   c2866:	2900      	cmp	r1, #0
   c2868:	eb01 0e02 	add.w	lr, r1, r2
   c286c:	db0a      	blt.n	c2884 <__ieee754_sqrt+0xb8>
   c286e:	46a0      	mov	r8, r4
   c2870:	1b1b      	subs	r3, r3, r4
   c2872:	4561      	cmp	r1, ip
   c2874:	bf88      	it	hi
   c2876:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c287a:	ebac 0c01 	sub.w	ip, ip, r1
   c287e:	4415      	add	r5, r2
   c2880:	4644      	mov	r4, r8
   c2882:	e7e2      	b.n	c284a <__ieee754_sqrt+0x7e>
   c2884:	f1be 0f00 	cmp.w	lr, #0
   c2888:	dbf1      	blt.n	c286e <__ieee754_sqrt+0xa2>
   c288a:	f104 0801 	add.w	r8, r4, #1
   c288e:	e7ef      	b.n	c2870 <__ieee754_sqrt+0xa4>
   c2890:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c2894:	4322      	orrs	r2, r4
   c2896:	d038      	beq.n	c290a <__ieee754_sqrt+0x13e>
   c2898:	2d00      	cmp	r5, #0
   c289a:	d14e      	bne.n	c293a <__ieee754_sqrt+0x16e>
   c289c:	4629      	mov	r1, r5
   c289e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c28a2:	3915      	subs	r1, #21
   c28a4:	4613      	mov	r3, r2
   c28a6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c28aa:	2a00      	cmp	r2, #0
   c28ac:	d0f7      	beq.n	c289e <__ieee754_sqrt+0xd2>
   c28ae:	02d6      	lsls	r6, r2, #11
   c28b0:	d450      	bmi.n	c2954 <__ieee754_sqrt+0x188>
   c28b2:	2000      	movs	r0, #0
   c28b4:	005b      	lsls	r3, r3, #1
   c28b6:	02dd      	lsls	r5, r3, #11
   c28b8:	4604      	mov	r4, r0
   c28ba:	f100 0001 	add.w	r0, r0, #1
   c28be:	d5f9      	bpl.n	c28b4 <__ieee754_sqrt+0xe8>
   c28c0:	461a      	mov	r2, r3
   c28c2:	4663      	mov	r3, ip
   c28c4:	fa0c fc00 	lsl.w	ip, ip, r0
   c28c8:	f1c0 0020 	rsb	r0, r0, #32
   c28cc:	40c3      	lsrs	r3, r0
   c28ce:	1b09      	subs	r1, r1, r4
   c28d0:	4313      	orrs	r3, r2
   c28d2:	e78a      	b.n	c27ea <__ieee754_sqrt+0x1e>
   c28d4:	4561      	cmp	r1, ip
   c28d6:	d8b8      	bhi.n	c284a <__ieee754_sqrt+0x7e>
   c28d8:	2900      	cmp	r1, #0
   c28da:	eb01 0e02 	add.w	lr, r1, r2
   c28de:	dbd1      	blt.n	c2884 <__ieee754_sqrt+0xb8>
   c28e0:	4698      	mov	r8, r3
   c28e2:	2300      	movs	r3, #0
   c28e4:	e7c9      	b.n	c287a <__ieee754_sqrt+0xae>
   c28e6:	ea53 030c 	orrs.w	r3, r3, ip
   c28ea:	d110      	bne.n	c290e <__ieee754_sqrt+0x142>
   c28ec:	0868      	lsrs	r0, r5, #1
   c28ee:	1071      	asrs	r1, r6, #1
   c28f0:	07f3      	lsls	r3, r6, #31
   c28f2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c28f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c28fa:	bf48      	it	mi
   c28fc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c2900:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c2904:	4602      	mov	r2, r0
   c2906:	ec43 2b10 	vmov	d0, r2, r3
   c290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c290e:	1c6a      	adds	r2, r5, #1
   c2910:	bf16      	itet	ne
   c2912:	1c68      	addne	r0, r5, #1
   c2914:	3601      	addeq	r6, #1
   c2916:	0840      	lsrne	r0, r0, #1
   c2918:	e7e9      	b.n	c28ee <__ieee754_sqrt+0x122>
   c291a:	ee10 2a10 	vmov	r2, s0
   c291e:	ee10 0a10 	vmov	r0, s0
   c2922:	462b      	mov	r3, r5
   c2924:	4629      	mov	r1, r5
   c2926:	f001 faff 	bl	c3f28 <__aeabi_dmul>
   c292a:	4622      	mov	r2, r4
   c292c:	462b      	mov	r3, r5
   c292e:	f001 f945 	bl	c3bbc <__adddf3>
   c2932:	ec41 0b10 	vmov	d0, r0, r1
   c2936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c293a:	ee10 2a10 	vmov	r2, s0
   c293e:	4620      	mov	r0, r4
   c2940:	4629      	mov	r1, r5
   c2942:	f001 f939 	bl	c3bb8 <__aeabi_dsub>
   c2946:	4602      	mov	r2, r0
   c2948:	460b      	mov	r3, r1
   c294a:	f001 fc17 	bl	c417c <__aeabi_ddiv>
   c294e:	ec41 0b10 	vmov	d0, r0, r1
   c2952:	e7da      	b.n	c290a <__ieee754_sqrt+0x13e>
   c2954:	4663      	mov	r3, ip
   c2956:	2020      	movs	r0, #32
   c2958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c295c:	e7b6      	b.n	c28cc <__ieee754_sqrt+0x100>
   c295e:	bf00      	nop
   c2960:	7ff00000 	.word	0x7ff00000

000c2964 <__ieee754_atan2f>:
   c2964:	b510      	push	{r4, lr}
   c2966:	b082      	sub	sp, #8
   c2968:	edcd 0a01 	vstr	s1, [sp, #4]
   c296c:	9b01      	ldr	r3, [sp, #4]
   c296e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c2972:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c2976:	eef0 7a40 	vmov.f32	s15, s0
   c297a:	dc30      	bgt.n	c29de <__ieee754_atan2f+0x7a>
   c297c:	ee10 0a10 	vmov	r0, s0
   c2980:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c2984:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2988:	dc29      	bgt.n	c29de <__ieee754_atan2f+0x7a>
   c298a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c298e:	d042      	beq.n	c2a16 <__ieee754_atan2f+0xb2>
   c2990:	179c      	asrs	r4, r3, #30
   c2992:	f004 0402 	and.w	r4, r4, #2
   c2996:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c299a:	b331      	cbz	r1, c29ea <__ieee754_atan2f+0x86>
   c299c:	b37a      	cbz	r2, c29fe <__ieee754_atan2f+0x9a>
   c299e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c29a2:	d040      	beq.n	c2a26 <__ieee754_atan2f+0xc2>
   c29a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c29a8:	d029      	beq.n	c29fe <__ieee754_atan2f+0x9a>
   c29aa:	1a8a      	subs	r2, r1, r2
   c29ac:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c29b0:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c29b4:	da34      	bge.n	c2a20 <__ieee754_atan2f+0xbc>
   c29b6:	2b00      	cmp	r3, #0
   c29b8:	da42      	bge.n	c2a40 <__ieee754_atan2f+0xdc>
   c29ba:	313c      	adds	r1, #60	; 0x3c
   c29bc:	da40      	bge.n	c2a40 <__ieee754_atan2f+0xdc>
   c29be:	ed9f 0a34 	vldr	s0, [pc, #208]	; c2a90 <__ieee754_atan2f+0x12c>
   c29c2:	2c01      	cmp	r4, #1
   c29c4:	d04e      	beq.n	c2a64 <__ieee754_atan2f+0x100>
   c29c6:	2c02      	cmp	r4, #2
   c29c8:	d043      	beq.n	c2a52 <__ieee754_atan2f+0xee>
   c29ca:	b164      	cbz	r4, c29e6 <__ieee754_atan2f+0x82>
   c29cc:	ed9f 7a31 	vldr	s14, [pc, #196]	; c2a94 <__ieee754_atan2f+0x130>
   c29d0:	eddf 7a31 	vldr	s15, [pc, #196]	; c2a98 <__ieee754_atan2f+0x134>
   c29d4:	ee30 0a07 	vadd.f32	s0, s0, s14
   c29d8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c29dc:	e003      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c29de:	ed9d 7a01 	vldr	s14, [sp, #4]
   c29e2:	ee37 0a27 	vadd.f32	s0, s14, s15
   c29e6:	b002      	add	sp, #8
   c29e8:	bd10      	pop	{r4, pc}
   c29ea:	2c02      	cmp	r4, #2
   c29ec:	d010      	beq.n	c2a10 <__ieee754_atan2f+0xac>
   c29ee:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c2a9c <__ieee754_atan2f+0x138>
   c29f2:	2c03      	cmp	r4, #3
   c29f4:	bf18      	it	ne
   c29f6:	eeb0 0a67 	vmovne.f32	s0, s15
   c29fa:	b002      	add	sp, #8
   c29fc:	bd10      	pop	{r4, pc}
   c29fe:	ed9f 0a28 	vldr	s0, [pc, #160]	; c2aa0 <__ieee754_atan2f+0x13c>
   c2a02:	eddf 7a28 	vldr	s15, [pc, #160]	; c2aa4 <__ieee754_atan2f+0x140>
   c2a06:	2800      	cmp	r0, #0
   c2a08:	bfb8      	it	lt
   c2a0a:	eeb0 0a67 	vmovlt.f32	s0, s15
   c2a0e:	e7ea      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a10:	ed9f 0a21 	vldr	s0, [pc, #132]	; c2a98 <__ieee754_atan2f+0x134>
   c2a14:	e7e7      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a16:	b002      	add	sp, #8
   c2a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c2a1c:	f000 bf2e 	b.w	c387c <atanf>
   c2a20:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c2aa0 <__ieee754_atan2f+0x13c>
   c2a24:	e7cd      	b.n	c29c2 <__ieee754_atan2f+0x5e>
   c2a26:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2a2a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c2a2e:	d020      	beq.n	c2a72 <__ieee754_atan2f+0x10e>
   c2a30:	2c02      	cmp	r4, #2
   c2a32:	d826      	bhi.n	c2a82 <__ieee754_atan2f+0x11e>
   c2a34:	4b1c      	ldr	r3, [pc, #112]	; (c2aa8 <__ieee754_atan2f+0x144>)
   c2a36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2a3a:	ed94 0a00 	vldr	s0, [r4]
   c2a3e:	e7d2      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a40:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2a44:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2a48:	f000 fff2 	bl	c3a30 <fabsf>
   c2a4c:	f000 ff16 	bl	c387c <atanf>
   c2a50:	e7b7      	b.n	c29c2 <__ieee754_atan2f+0x5e>
   c2a52:	ed9f 7a10 	vldr	s14, [pc, #64]	; c2a94 <__ieee754_atan2f+0x130>
   c2a56:	eddf 7a10 	vldr	s15, [pc, #64]	; c2a98 <__ieee754_atan2f+0x134>
   c2a5a:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2a5e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c2a62:	e7c0      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a64:	ee10 3a10 	vmov	r3, s0
   c2a68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c2a6c:	ee00 3a10 	vmov	s0, r3
   c2a70:	e7b9      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a72:	2c02      	cmp	r4, #2
   c2a74:	d808      	bhi.n	c2a88 <__ieee754_atan2f+0x124>
   c2a76:	4b0d      	ldr	r3, [pc, #52]	; (c2aac <__ieee754_atan2f+0x148>)
   c2a78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2a7c:	ed94 0a00 	vldr	s0, [r4]
   c2a80:	e7b1      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a82:	ed9f 0a03 	vldr	s0, [pc, #12]	; c2a90 <__ieee754_atan2f+0x12c>
   c2a86:	e7ae      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a88:	ed9f 0a09 	vldr	s0, [pc, #36]	; c2ab0 <__ieee754_atan2f+0x14c>
   c2a8c:	e7ab      	b.n	c29e6 <__ieee754_atan2f+0x82>
   c2a8e:	bf00      	nop
   c2a90:	00000000 	.word	0x00000000
   c2a94:	33bbbd2e 	.word	0x33bbbd2e
   c2a98:	40490fdb 	.word	0x40490fdb
   c2a9c:	c0490fdb 	.word	0xc0490fdb
   c2aa0:	3fc90fdb 	.word	0x3fc90fdb
   c2aa4:	bfc90fdb 	.word	0xbfc90fdb
   c2aa8:	000c82dc 	.word	0x000c82dc
   c2aac:	000c82d0 	.word	0x000c82d0
   c2ab0:	3f490fdb 	.word	0x3f490fdb

000c2ab4 <__ieee754_rem_pio2f>:
   c2ab4:	b570      	push	{r4, r5, r6, lr}
   c2ab6:	ee10 3a10 	vmov	r3, s0
   c2aba:	4a89      	ldr	r2, [pc, #548]	; (c2ce0 <__ieee754_rem_pio2f+0x22c>)
   c2abc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c2ac0:	4294      	cmp	r4, r2
   c2ac2:	b086      	sub	sp, #24
   c2ac4:	4605      	mov	r5, r0
   c2ac6:	dd70      	ble.n	c2baa <__ieee754_rem_pio2f+0xf6>
   c2ac8:	4a86      	ldr	r2, [pc, #536]	; (c2ce4 <__ieee754_rem_pio2f+0x230>)
   c2aca:	4294      	cmp	r4, r2
   c2acc:	ee10 6a10 	vmov	r6, s0
   c2ad0:	dc22      	bgt.n	c2b18 <__ieee754_rem_pio2f+0x64>
   c2ad2:	2b00      	cmp	r3, #0
   c2ad4:	eddf 7a84 	vldr	s15, [pc, #528]	; c2ce8 <__ieee754_rem_pio2f+0x234>
   c2ad8:	4a84      	ldr	r2, [pc, #528]	; (c2cec <__ieee754_rem_pio2f+0x238>)
   c2ada:	f024 040f 	bic.w	r4, r4, #15
   c2ade:	eeb0 7a40 	vmov.f32	s14, s0
   c2ae2:	f340 80e4 	ble.w	c2cae <__ieee754_rem_pio2f+0x1fa>
   c2ae6:	4294      	cmp	r4, r2
   c2ae8:	ee70 7a67 	vsub.f32	s15, s0, s15
   c2aec:	bf09      	itett	eq
   c2aee:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2cf0 <__ieee754_rem_pio2f+0x23c>
   c2af2:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2cf4 <__ieee754_rem_pio2f+0x240>
   c2af6:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2cf8 <__ieee754_rem_pio2f+0x244>
   c2afa:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c2afe:	2001      	movs	r0, #1
   c2b00:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c2b04:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2b08:	edc5 6a00 	vstr	s13, [r5]
   c2b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2b10:	edc5 7a01 	vstr	s15, [r5, #4]
   c2b14:	b006      	add	sp, #24
   c2b16:	bd70      	pop	{r4, r5, r6, pc}
   c2b18:	4a78      	ldr	r2, [pc, #480]	; (c2cfc <__ieee754_rem_pio2f+0x248>)
   c2b1a:	4294      	cmp	r4, r2
   c2b1c:	dd54      	ble.n	c2bc8 <__ieee754_rem_pio2f+0x114>
   c2b1e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2b22:	da49      	bge.n	c2bb8 <__ieee754_rem_pio2f+0x104>
   c2b24:	15e2      	asrs	r2, r4, #23
   c2b26:	3a86      	subs	r2, #134	; 0x86
   c2b28:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c2b2c:	ee07 3a90 	vmov	s15, r3
   c2b30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2b34:	eddf 6a72 	vldr	s13, [pc, #456]	; c2d00 <__ieee754_rem_pio2f+0x24c>
   c2b38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2b40:	ed8d 7a03 	vstr	s14, [sp, #12]
   c2b44:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2b48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2b4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2b54:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2b5c:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2b64:	edcd 7a05 	vstr	s15, [sp, #20]
   c2b68:	f040 8090 	bne.w	c2c8c <__ieee754_rem_pio2f+0x1d8>
   c2b6c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c2b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2b74:	bf14      	ite	ne
   c2b76:	2302      	movne	r3, #2
   c2b78:	2301      	moveq	r3, #1
   c2b7a:	4962      	ldr	r1, [pc, #392]	; (c2d04 <__ieee754_rem_pio2f+0x250>)
   c2b7c:	9101      	str	r1, [sp, #4]
   c2b7e:	2102      	movs	r1, #2
   c2b80:	9100      	str	r1, [sp, #0]
   c2b82:	a803      	add	r0, sp, #12
   c2b84:	4629      	mov	r1, r5
   c2b86:	f000 f94d 	bl	c2e24 <__kernel_rem_pio2f>
   c2b8a:	2e00      	cmp	r6, #0
   c2b8c:	dac2      	bge.n	c2b14 <__ieee754_rem_pio2f+0x60>
   c2b8e:	ed95 7a00 	vldr	s14, [r5]
   c2b92:	edd5 7a01 	vldr	s15, [r5, #4]
   c2b96:	eeb1 7a47 	vneg.f32	s14, s14
   c2b9a:	eef1 7a67 	vneg.f32	s15, s15
   c2b9e:	ed85 7a00 	vstr	s14, [r5]
   c2ba2:	edc5 7a01 	vstr	s15, [r5, #4]
   c2ba6:	4240      	negs	r0, r0
   c2ba8:	e7b4      	b.n	c2b14 <__ieee754_rem_pio2f+0x60>
   c2baa:	2200      	movs	r2, #0
   c2bac:	ed85 0a00 	vstr	s0, [r5]
   c2bb0:	6042      	str	r2, [r0, #4]
   c2bb2:	2000      	movs	r0, #0
   c2bb4:	b006      	add	sp, #24
   c2bb6:	bd70      	pop	{r4, r5, r6, pc}
   c2bb8:	ee70 7a40 	vsub.f32	s15, s0, s0
   c2bbc:	2000      	movs	r0, #0
   c2bbe:	edc5 7a01 	vstr	s15, [r5, #4]
   c2bc2:	edc5 7a00 	vstr	s15, [r5]
   c2bc6:	e7a5      	b.n	c2b14 <__ieee754_rem_pio2f+0x60>
   c2bc8:	f000 ff32 	bl	c3a30 <fabsf>
   c2bcc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2d08 <__ieee754_rem_pio2f+0x254>
   c2bd0:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2ce8 <__ieee754_rem_pio2f+0x234>
   c2bd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2bd8:	eee0 7a07 	vfma.f32	s15, s0, s14
   c2bdc:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2cf4 <__ieee754_rem_pio2f+0x240>
   c2be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2be4:	ee17 0a90 	vmov	r0, s15
   c2be8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c2bec:	281f      	cmp	r0, #31
   c2bee:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2bf2:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2bf6:	eeb1 6a66 	vneg.f32	s12, s13
   c2bfa:	dc1e      	bgt.n	c2c3a <__ieee754_rem_pio2f+0x186>
   c2bfc:	4a43      	ldr	r2, [pc, #268]	; (c2d0c <__ieee754_rem_pio2f+0x258>)
   c2bfe:	1e41      	subs	r1, r0, #1
   c2c00:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2c04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2c08:	4293      	cmp	r3, r2
   c2c0a:	d016      	beq.n	c2c3a <__ieee754_rem_pio2f+0x186>
   c2c0c:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2c10:	ed85 7a00 	vstr	s14, [r5]
   c2c14:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2c18:	2e00      	cmp	r6, #0
   c2c1a:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2c1e:	ed85 0a01 	vstr	s0, [r5, #4]
   c2c22:	f6bf af77 	bge.w	c2b14 <__ieee754_rem_pio2f+0x60>
   c2c26:	eeb1 7a47 	vneg.f32	s14, s14
   c2c2a:	eeb1 0a40 	vneg.f32	s0, s0
   c2c2e:	ed85 7a00 	vstr	s14, [r5]
   c2c32:	ed85 0a01 	vstr	s0, [r5, #4]
   c2c36:	4240      	negs	r0, r0
   c2c38:	e76c      	b.n	c2b14 <__ieee754_rem_pio2f+0x60>
   c2c3a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2c3e:	15e2      	asrs	r2, r4, #23
   c2c40:	ee17 3a10 	vmov	r3, s14
   c2c44:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2c48:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c2c4c:	2c08      	cmp	r4, #8
   c2c4e:	dddf      	ble.n	c2c10 <__ieee754_rem_pio2f+0x15c>
   c2c50:	eddf 7a27 	vldr	s15, [pc, #156]	; c2cf0 <__ieee754_rem_pio2f+0x23c>
   c2c54:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2cf8 <__ieee754_rem_pio2f+0x244>
   c2c58:	eef0 5a40 	vmov.f32	s11, s0
   c2c5c:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2c60:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2c64:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2c68:	eef0 7a40 	vmov.f32	s15, s0
   c2c6c:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2c70:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2c74:	ee17 3a10 	vmov	r3, s14
   c2c78:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2c7c:	1ad2      	subs	r2, r2, r3
   c2c7e:	2a19      	cmp	r2, #25
   c2c80:	dc06      	bgt.n	c2c90 <__ieee754_rem_pio2f+0x1dc>
   c2c82:	eeb0 0a65 	vmov.f32	s0, s11
   c2c86:	ed85 7a00 	vstr	s14, [r5]
   c2c8a:	e7c3      	b.n	c2c14 <__ieee754_rem_pio2f+0x160>
   c2c8c:	2303      	movs	r3, #3
   c2c8e:	e774      	b.n	c2b7a <__ieee754_rem_pio2f+0xc6>
   c2c90:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2d10 <__ieee754_rem_pio2f+0x25c>
   c2c94:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2d14 <__ieee754_rem_pio2f+0x260>
   c2c98:	eeb0 0a65 	vmov.f32	s0, s11
   c2c9c:	eea6 0a07 	vfma.f32	s0, s12, s14
   c2ca0:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c2ca4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2ca8:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c2cac:	e7ae      	b.n	c2c0c <__ieee754_rem_pio2f+0x158>
   c2cae:	4294      	cmp	r4, r2
   c2cb0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2cb4:	bf09      	itett	eq
   c2cb6:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2cf0 <__ieee754_rem_pio2f+0x23c>
   c2cba:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2cf4 <__ieee754_rem_pio2f+0x240>
   c2cbe:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2cf8 <__ieee754_rem_pio2f+0x244>
   c2cc2:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c2cca:	ee77 6a87 	vadd.f32	s13, s15, s14
   c2cce:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2cd2:	edc5 6a00 	vstr	s13, [r5]
   c2cd6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2cda:	edc5 7a01 	vstr	s15, [r5, #4]
   c2cde:	e719      	b.n	c2b14 <__ieee754_rem_pio2f+0x60>
   c2ce0:	3f490fd8 	.word	0x3f490fd8
   c2ce4:	4016cbe3 	.word	0x4016cbe3
   c2ce8:	3fc90f80 	.word	0x3fc90f80
   c2cec:	3fc90fd0 	.word	0x3fc90fd0
   c2cf0:	37354400 	.word	0x37354400
   c2cf4:	37354443 	.word	0x37354443
   c2cf8:	2e85a308 	.word	0x2e85a308
   c2cfc:	43490f80 	.word	0x43490f80
   c2d00:	43800000 	.word	0x43800000
   c2d04:	000c8368 	.word	0x000c8368
   c2d08:	3f22f984 	.word	0x3f22f984
   c2d0c:	000c82e8 	.word	0x000c82e8
   c2d10:	2e85a300 	.word	0x2e85a300
   c2d14:	248d3132 	.word	0x248d3132

000c2d18 <__ieee754_sqrtf>:
   c2d18:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2d1c:	4770      	bx	lr
   c2d1e:	bf00      	nop

000c2d20 <__kernel_cosf>:
   c2d20:	ee10 3a10 	vmov	r3, s0
   c2d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2d28:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2d2c:	da2c      	bge.n	c2d88 <__kernel_cosf+0x68>
   c2d2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2d32:	ee17 3a90 	vmov	r3, s15
   c2d36:	2b00      	cmp	r3, #0
   c2d38:	d060      	beq.n	c2dfc <__kernel_cosf+0xdc>
   c2d3a:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2d3e:	eddf 7a31 	vldr	s15, [pc, #196]	; c2e04 <__kernel_cosf+0xe4>
   c2d42:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2e08 <__kernel_cosf+0xe8>
   c2d46:	eddf 5a31 	vldr	s11, [pc, #196]	; c2e0c <__kernel_cosf+0xec>
   c2d4a:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2e10 <__kernel_cosf+0xf0>
   c2d4e:	eddf 6a31 	vldr	s13, [pc, #196]	; c2e14 <__kernel_cosf+0xf4>
   c2d52:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2d56:	eddf 7a30 	vldr	s15, [pc, #192]	; c2e18 <__kernel_cosf+0xf8>
   c2d5a:	eee7 5a05 	vfma.f32	s11, s14, s10
   c2d5e:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2d62:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2d66:	eee7 6a27 	vfma.f32	s13, s14, s15
   c2d6a:	ee67 6a26 	vmul.f32	s13, s14, s13
   c2d6e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2d72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2d76:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2d7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2d7e:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2d82:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2d86:	4770      	bx	lr
   c2d88:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2d8c:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2e04 <__kernel_cosf+0xe4>
   c2d90:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2e08 <__kernel_cosf+0xe8>
   c2d94:	eddf 5a1d 	vldr	s11, [pc, #116]	; c2e0c <__kernel_cosf+0xec>
   c2d98:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2e10 <__kernel_cosf+0xf0>
   c2d9c:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2e14 <__kernel_cosf+0xf4>
   c2da0:	4a1e      	ldr	r2, [pc, #120]	; (c2e1c <__kernel_cosf+0xfc>)
   c2da2:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2da6:	4293      	cmp	r3, r2
   c2da8:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2e18 <__kernel_cosf+0xf8>
   c2dac:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2db0:	eea5 6a87 	vfma.f32	s12, s11, s14
   c2db4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2db8:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2dbc:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2dc0:	ddd5      	ble.n	c2d6e <__kernel_cosf+0x4e>
   c2dc2:	4a17      	ldr	r2, [pc, #92]	; (c2e20 <__kernel_cosf+0x100>)
   c2dc4:	4293      	cmp	r3, r2
   c2dc6:	dc14      	bgt.n	c2df2 <__kernel_cosf+0xd2>
   c2dc8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c2dcc:	ee07 3a90 	vmov	s15, r3
   c2dd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2dd4:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2dd8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2ddc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2de0:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2de4:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2de8:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c2dec:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2df0:	4770      	bx	lr
   c2df2:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2df6:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c2dfa:	e7ed      	b.n	c2dd8 <__kernel_cosf+0xb8>
   c2dfc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2e00:	4770      	bx	lr
   c2e02:	bf00      	nop
   c2e04:	ad47d74e 	.word	0xad47d74e
   c2e08:	310f74f6 	.word	0x310f74f6
   c2e0c:	b493f27c 	.word	0xb493f27c
   c2e10:	37d00d01 	.word	0x37d00d01
   c2e14:	3d2aaaab 	.word	0x3d2aaaab
   c2e18:	bab60b61 	.word	0xbab60b61
   c2e1c:	3e999999 	.word	0x3e999999
   c2e20:	3f480000 	.word	0x3f480000

000c2e24 <__kernel_rem_pio2f>:
   c2e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2e28:	ed2d 8b04 	vpush	{d8-d9}
   c2e2c:	b0db      	sub	sp, #364	; 0x16c
   c2e2e:	461c      	mov	r4, r3
   c2e30:	9303      	str	r3, [sp, #12]
   c2e32:	9106      	str	r1, [sp, #24]
   c2e34:	4ba3      	ldr	r3, [pc, #652]	; (c30c4 <__kernel_rem_pio2f+0x2a0>)
   c2e36:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2e38:	9208      	str	r2, [sp, #32]
   c2e3a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c2e3e:	1d11      	adds	r1, r2, #4
   c2e40:	4682      	mov	sl, r0
   c2e42:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2e46:	f2c0 82a2 	blt.w	c338e <__kernel_rem_pio2f+0x56a>
   c2e4a:	1ed3      	subs	r3, r2, #3
   c2e4c:	bf44      	itt	mi
   c2e4e:	4613      	movmi	r3, r2
   c2e50:	3304      	addmi	r3, #4
   c2e52:	10db      	asrs	r3, r3, #3
   c2e54:	9302      	str	r3, [sp, #8]
   c2e56:	3301      	adds	r3, #1
   c2e58:	00db      	lsls	r3, r3, #3
   c2e5a:	9307      	str	r3, [sp, #28]
   c2e5c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2e60:	1a9b      	subs	r3, r3, r2
   c2e62:	9305      	str	r3, [sp, #20]
   c2e64:	9b02      	ldr	r3, [sp, #8]
   c2e66:	eb15 0108 	adds.w	r1, r5, r8
   c2e6a:	eba3 0308 	sub.w	r3, r3, r8
   c2e6e:	d416      	bmi.n	c2e9e <__kernel_rem_pio2f+0x7a>
   c2e70:	3101      	adds	r1, #1
   c2e72:	ed9f 7a95 	vldr	s14, [pc, #596]	; c30c8 <__kernel_rem_pio2f+0x2a4>
   c2e76:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2e78:	4419      	add	r1, r3
   c2e7a:	aa1e      	add	r2, sp, #120	; 0x78
   c2e7c:	2b00      	cmp	r3, #0
   c2e7e:	bfa4      	itt	ge
   c2e80:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2e84:	ee07 4a90 	vmovge	s15, r4
   c2e88:	f103 0301 	add.w	r3, r3, #1
   c2e8c:	bfac      	ite	ge
   c2e8e:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2e92:	eef0 7a47 	vmovlt.f32	s15, s14
   c2e96:	428b      	cmp	r3, r1
   c2e98:	ece2 7a01 	vstmia	r2!, {s15}
   c2e9c:	d1ee      	bne.n	c2e7c <__kernel_rem_pio2f+0x58>
   c2e9e:	2d00      	cmp	r5, #0
   c2ea0:	f2c0 82e5 	blt.w	c346e <__kernel_rem_pio2f+0x64a>
   c2ea4:	9b03      	ldr	r3, [sp, #12]
   c2ea6:	a91e      	add	r1, sp, #120	; 0x78
   c2ea8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c2eac:	ae46      	add	r6, sp, #280	; 0x118
   c2eae:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2eb2:	4640      	mov	r0, r8
   c2eb4:	18ef      	adds	r7, r5, r3
   c2eb6:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c2eba:	f1b8 0f00 	cmp.w	r8, #0
   c2ebe:	eddf 7a82 	vldr	s15, [pc, #520]	; c30c8 <__kernel_rem_pio2f+0x2a4>
   c2ec2:	db09      	blt.n	c2ed8 <__kernel_rem_pio2f+0xb4>
   c2ec4:	4622      	mov	r2, r4
   c2ec6:	4653      	mov	r3, sl
   c2ec8:	ecf3 6a01 	vldmia	r3!, {s13}
   c2ecc:	ed32 7a01 	vldmdb	r2!, {s14}
   c2ed0:	428b      	cmp	r3, r1
   c2ed2:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2ed6:	d1f7      	bne.n	c2ec8 <__kernel_rem_pio2f+0xa4>
   c2ed8:	3001      	adds	r0, #1
   c2eda:	42b8      	cmp	r0, r7
   c2edc:	ece6 7a01 	vstmia	r6!, {s15}
   c2ee0:	f104 0404 	add.w	r4, r4, #4
   c2ee4:	d1e9      	bne.n	c2eba <__kernel_rem_pio2f+0x96>
   c2ee6:	ab09      	add	r3, sp, #36	; 0x24
   c2ee8:	af0a      	add	r7, sp, #40	; 0x28
   c2eea:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c2eee:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2ef2:	3b08      	subs	r3, #8
   c2ef4:	ed9f 9a76 	vldr	s18, [pc, #472]	; c30d0 <__kernel_rem_pio2f+0x2ac>
   c2ef8:	eddf 8a74 	vldr	s17, [pc, #464]	; c30cc <__kernel_rem_pio2f+0x2a8>
   c2efc:	9805      	ldr	r0, [sp, #20]
   c2efe:	9304      	str	r3, [sp, #16]
   c2f00:	eb0a 040c 	add.w	r4, sl, ip
   c2f04:	ae46      	add	r6, sp, #280	; 0x118
   c2f06:	9500      	str	r5, [sp, #0]
   c2f08:	ab5a      	add	r3, sp, #360	; 0x168
   c2f0a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c2f0e:	2d00      	cmp	r5, #0
   c2f10:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2f14:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2f18:	dd16      	ble.n	c2f48 <__kernel_rem_pio2f+0x124>
   c2f1a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c2f1e:	463a      	mov	r2, r7
   c2f20:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2f24:	eeb0 7a40 	vmov.f32	s14, s0
   c2f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2f2c:	ed73 6a01 	vldmdb	r3!, {s13}
   c2f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2f34:	42b3      	cmp	r3, r6
   c2f36:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c2f3a:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c2f3e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2f42:	eca2 7a01 	vstmia	r2!, {s14}
   c2f46:	d1eb      	bne.n	c2f20 <__kernel_rem_pio2f+0xfc>
   c2f48:	9001      	str	r0, [sp, #4]
   c2f4a:	f000 fdbf 	bl	c3acc <scalbnf>
   c2f4e:	eeb0 8a40 	vmov.f32	s16, s0
   c2f52:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2f56:	ee28 0a00 	vmul.f32	s0, s16, s0
   c2f5a:	f000 fd71 	bl	c3a40 <floorf>
   c2f5e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2f62:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2f66:	9801      	ldr	r0, [sp, #4]
   c2f68:	2800      	cmp	r0, #0
   c2f6a:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c2f6e:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2f72:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2f76:	dd79      	ble.n	c306c <__kernel_rem_pio2f+0x248>
   c2f78:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c2f7c:	f1c0 0308 	rsb	r3, r0, #8
   c2f80:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2f84:	fa41 fc03 	asr.w	ip, r1, r3
   c2f88:	fa0c f303 	lsl.w	r3, ip, r3
   c2f8c:	1acb      	subs	r3, r1, r3
   c2f8e:	f1c0 0207 	rsb	r2, r0, #7
   c2f92:	ee19 1a90 	vmov	r1, s19
   c2f96:	fa43 f202 	asr.w	r2, r3, r2
   c2f9a:	4461      	add	r1, ip
   c2f9c:	2a00      	cmp	r2, #0
   c2f9e:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2fa2:	ee09 1a90 	vmov	s19, r1
   c2fa6:	dc69      	bgt.n	c307c <__kernel_rem_pio2f+0x258>
   c2fa8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2fb0:	f040 80c1 	bne.w	c3136 <__kernel_rem_pio2f+0x312>
   c2fb4:	9b00      	ldr	r3, [sp, #0]
   c2fb6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c2fba:	455b      	cmp	r3, fp
   c2fbc:	dc10      	bgt.n	c2fe0 <__kernel_rem_pio2f+0x1bc>
   c2fbe:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2fc2:	3b01      	subs	r3, #1
   c2fc4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2fc8:	2100      	movs	r1, #0
   c2fca:	4694      	mov	ip, r2
   c2fcc:	f853 2904 	ldr.w	r2, [r3], #-4
   c2fd0:	454b      	cmp	r3, r9
   c2fd2:	ea41 0102 	orr.w	r1, r1, r2
   c2fd6:	d1f9      	bne.n	c2fcc <__kernel_rem_pio2f+0x1a8>
   c2fd8:	4662      	mov	r2, ip
   c2fda:	2900      	cmp	r1, #0
   c2fdc:	f040 80f3 	bne.w	c31c6 <__kernel_rem_pio2f+0x3a2>
   c2fe0:	9b00      	ldr	r3, [sp, #0]
   c2fe2:	3b01      	subs	r3, #1
   c2fe4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2fe8:	2b00      	cmp	r3, #0
   c2fea:	f040 80e8 	bne.w	c31be <__kernel_rem_pio2f+0x39a>
   c2fee:	9b04      	ldr	r3, [sp, #16]
   c2ff0:	f04f 0c01 	mov.w	ip, #1
   c2ff4:	f853 2904 	ldr.w	r2, [r3], #-4
   c2ff8:	f10c 0c01 	add.w	ip, ip, #1
   c2ffc:	2a00      	cmp	r2, #0
   c2ffe:	d0f9      	beq.n	c2ff4 <__kernel_rem_pio2f+0x1d0>
   c3000:	1c6b      	adds	r3, r5, #1
   c3002:	44ac      	add	ip, r5
   c3004:	469e      	mov	lr, r3
   c3006:	9a03      	ldr	r2, [sp, #12]
   c3008:	1951      	adds	r1, r2, r5
   c300a:	9a02      	ldr	r2, [sp, #8]
   c300c:	eb02 0b03 	add.w	fp, r2, r3
   c3010:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c3014:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c3016:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c301a:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c301e:	ab1e      	add	r3, sp, #120	; 0x78
   c3020:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c3024:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c3028:	eddb 7a01 	vldr	s15, [fp, #4]
   c302c:	ed9f 7a26 	vldr	s14, [pc, #152]	; c30c8 <__kernel_rem_pio2f+0x2a4>
   c3030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c3034:	f1b8 0f00 	cmp.w	r8, #0
   c3038:	f10b 0b04 	add.w	fp, fp, #4
   c303c:	edc1 7a00 	vstr	s15, [r1]
   c3040:	460a      	mov	r2, r1
   c3042:	f101 0104 	add.w	r1, r1, #4
   c3046:	db09      	blt.n	c305c <__kernel_rem_pio2f+0x238>
   c3048:	4653      	mov	r3, sl
   c304a:	e001      	b.n	c3050 <__kernel_rem_pio2f+0x22c>
   c304c:	ed72 7a01 	vldmdb	r2!, {s15}
   c3050:	ecf3 6a01 	vldmia	r3!, {s13}
   c3054:	42a3      	cmp	r3, r4
   c3056:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c305a:	d1f7      	bne.n	c304c <__kernel_rem_pio2f+0x228>
   c305c:	f10e 0e01 	add.w	lr, lr, #1
   c3060:	45e6      	cmp	lr, ip
   c3062:	eca5 7a01 	vstmia	r5!, {s14}
   c3066:	dddf      	ble.n	c3028 <__kernel_rem_pio2f+0x204>
   c3068:	4665      	mov	r5, ip
   c306a:	e74d      	b.n	c2f08 <__kernel_rem_pio2f+0xe4>
   c306c:	f040 809d 	bne.w	c31aa <__kernel_rem_pio2f+0x386>
   c3070:	1e6b      	subs	r3, r5, #1
   c3072:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c3076:	1212      	asrs	r2, r2, #8
   c3078:	2a00      	cmp	r2, #0
   c307a:	dd95      	ble.n	c2fa8 <__kernel_rem_pio2f+0x184>
   c307c:	ee19 3a90 	vmov	r3, s19
   c3080:	2d00      	cmp	r5, #0
   c3082:	f103 0301 	add.w	r3, r3, #1
   c3086:	ee09 3a90 	vmov	s19, r3
   c308a:	f340 8196 	ble.w	c33ba <__kernel_rem_pio2f+0x596>
   c308e:	6839      	ldr	r1, [r7, #0]
   c3090:	2900      	cmp	r1, #0
   c3092:	f040 8080 	bne.w	c3196 <__kernel_rem_pio2f+0x372>
   c3096:	2d01      	cmp	r5, #1
   c3098:	d026      	beq.n	c30e8 <__kernel_rem_pio2f+0x2c4>
   c309a:	463b      	mov	r3, r7
   c309c:	f04f 0c01 	mov.w	ip, #1
   c30a0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c30a4:	2900      	cmp	r1, #0
   c30a6:	d07a      	beq.n	c319e <__kernel_rem_pio2f+0x37a>
   c30a8:	f10c 0301 	add.w	r3, ip, #1
   c30ac:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c30b0:	429d      	cmp	r5, r3
   c30b2:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c30b6:	dd16      	ble.n	c30e6 <__kernel_rem_pio2f+0x2c2>
   c30b8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c30bc:	44bb      	add	fp, r7
   c30be:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c30c2:	e00a      	b.n	c30da <__kernel_rem_pio2f+0x2b6>
   c30c4:	000c86ac 	.word	0x000c86ac
   c30c8:	00000000 	.word	0x00000000
   c30cc:	43800000 	.word	0x43800000
   c30d0:	3b800000 	.word	0x3b800000
   c30d4:	3fc90000 	.word	0x3fc90000
   c30d8:	6819      	ldr	r1, [r3, #0]
   c30da:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c30de:	f843 1b04 	str.w	r1, [r3], #4
   c30e2:	455b      	cmp	r3, fp
   c30e4:	d1f8      	bne.n	c30d8 <__kernel_rem_pio2f+0x2b4>
   c30e6:	2101      	movs	r1, #1
   c30e8:	2800      	cmp	r0, #0
   c30ea:	dd0c      	ble.n	c3106 <__kernel_rem_pio2f+0x2e2>
   c30ec:	2801      	cmp	r0, #1
   c30ee:	f000 8145 	beq.w	c337c <__kernel_rem_pio2f+0x558>
   c30f2:	2802      	cmp	r0, #2
   c30f4:	d107      	bne.n	c3106 <__kernel_rem_pio2f+0x2e2>
   c30f6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c30fa:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c30fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c3102:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c3106:	2a02      	cmp	r2, #2
   c3108:	f47f af4e 	bne.w	c2fa8 <__kernel_rem_pio2f+0x184>
   c310c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c3110:	ee30 8a48 	vsub.f32	s16, s0, s16
   c3114:	2900      	cmp	r1, #0
   c3116:	f43f af47 	beq.w	c2fa8 <__kernel_rem_pio2f+0x184>
   c311a:	9209      	str	r2, [sp, #36]	; 0x24
   c311c:	9001      	str	r0, [sp, #4]
   c311e:	f000 fcd5 	bl	c3acc <scalbnf>
   c3122:	ee38 8a40 	vsub.f32	s16, s16, s0
   c3126:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c3128:	9801      	ldr	r0, [sp, #4]
   c312a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c312e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3132:	f43f af3f 	beq.w	c2fb4 <__kernel_rem_pio2f+0x190>
   c3136:	9202      	str	r2, [sp, #8]
   c3138:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c313c:	eeb0 0a48 	vmov.f32	s0, s16
   c3140:	1a98      	subs	r0, r3, r2
   c3142:	9501      	str	r5, [sp, #4]
   c3144:	9d00      	ldr	r5, [sp, #0]
   c3146:	f000 fcc1 	bl	c3acc <scalbnf>
   c314a:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c30cc <__kernel_rem_pio2f+0x2a8>
   c314e:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c3152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3156:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c315a:	f2c0 8156 	blt.w	c340a <__kernel_rem_pio2f+0x5e6>
   c315e:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c30d0 <__kernel_rem_pio2f+0x2ac>
   c3162:	9905      	ldr	r1, [sp, #20]
   c3164:	ee60 7a27 	vmul.f32	s15, s0, s15
   c3168:	3108      	adds	r1, #8
   c316a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c316e:	9105      	str	r1, [sp, #20]
   c3170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c3174:	f103 0b01 	add.w	fp, r3, #1
   c3178:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c317c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3180:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c3184:	ee10 1a10 	vmov	r1, s0
   c3188:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c318c:	ee17 3a90 	vmov	r3, s15
   c3190:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c3194:	e02e      	b.n	c31f4 <__kernel_rem_pio2f+0x3d0>
   c3196:	2301      	movs	r3, #1
   c3198:	f04f 0c00 	mov.w	ip, #0
   c319c:	e786      	b.n	c30ac <__kernel_rem_pio2f+0x288>
   c319e:	f10c 0c01 	add.w	ip, ip, #1
   c31a2:	45ac      	cmp	ip, r5
   c31a4:	f47f af7c 	bne.w	c30a0 <__kernel_rem_pio2f+0x27c>
   c31a8:	e79e      	b.n	c30e8 <__kernel_rem_pio2f+0x2c4>
   c31aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c31ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c31b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c31b6:	f280 80ef 	bge.w	c3398 <__kernel_rem_pio2f+0x574>
   c31ba:	2200      	movs	r2, #0
   c31bc:	e6f4      	b.n	c2fa8 <__kernel_rem_pio2f+0x184>
   c31be:	1c6b      	adds	r3, r5, #1
   c31c0:	469e      	mov	lr, r3
   c31c2:	469c      	mov	ip, r3
   c31c4:	e71f      	b.n	c3006 <__kernel_rem_pio2f+0x1e2>
   c31c6:	9905      	ldr	r1, [sp, #20]
   c31c8:	f1a1 0008 	sub.w	r0, r1, #8
   c31cc:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c31d0:	9005      	str	r0, [sp, #20]
   c31d2:	462b      	mov	r3, r5
   c31d4:	9d00      	ldr	r5, [sp, #0]
   c31d6:	b969      	cbnz	r1, c31f4 <__kernel_rem_pio2f+0x3d0>
   c31d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c31dc:	3b02      	subs	r3, #2
   c31de:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c31e2:	4601      	mov	r1, r0
   c31e4:	f853 0904 	ldr.w	r0, [r3], #-4
   c31e8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c31ec:	3908      	subs	r1, #8
   c31ee:	2800      	cmp	r0, #0
   c31f0:	d0f8      	beq.n	c31e4 <__kernel_rem_pio2f+0x3c0>
   c31f2:	9105      	str	r1, [sp, #20]
   c31f4:	9805      	ldr	r0, [sp, #20]
   c31f6:	9200      	str	r2, [sp, #0]
   c31f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c31fc:	f000 fc66 	bl	c3acc <scalbnf>
   c3200:	f1bb 0f00 	cmp.w	fp, #0
   c3204:	9a00      	ldr	r2, [sp, #0]
   c3206:	f2c0 8125 	blt.w	c3454 <__kernel_rem_pio2f+0x630>
   c320a:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c320e:	ab46      	add	r3, sp, #280	; 0x118
   c3210:	eb03 060e 	add.w	r6, r3, lr
   c3214:	f10e 0c04 	add.w	ip, lr, #4
   c3218:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c30d0 <__kernel_rem_pio2f+0x2ac>
   c321c:	eb07 030c 	add.w	r3, r7, ip
   c3220:	1d31      	adds	r1, r6, #4
   c3222:	ed73 7a01 	vldmdb	r3!, {s15}
   c3226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c322a:	42bb      	cmp	r3, r7
   c322c:	ee67 7a80 	vmul.f32	s15, s15, s0
   c3230:	ee20 0a07 	vmul.f32	s0, s0, s14
   c3234:	ed61 7a01 	vstmdb	r1!, {s15}
   c3238:	d1f3      	bne.n	c3222 <__kernel_rem_pio2f+0x3fe>
   c323a:	2d00      	cmp	r5, #0
   c323c:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c30d4 <__kernel_rem_pio2f+0x2b0>
   c3240:	f04f 0400 	mov.w	r4, #0
   c3244:	db20      	blt.n	c3288 <__kernel_rem_pio2f+0x464>
   c3246:	4892      	ldr	r0, [pc, #584]	; (c3490 <__kernel_rem_pio2f+0x66c>)
   c3248:	eddf 7a92 	vldr	s15, [pc, #584]	; c3494 <__kernel_rem_pio2f+0x670>
   c324c:	eeb0 7a46 	vmov.f32	s14, s12
   c3250:	4631      	mov	r1, r6
   c3252:	2300      	movs	r3, #0
   c3254:	e003      	b.n	c325e <__kernel_rem_pio2f+0x43a>
   c3256:	429c      	cmp	r4, r3
   c3258:	db08      	blt.n	c326c <__kernel_rem_pio2f+0x448>
   c325a:	ecb0 7a01 	vldmia	r0!, {s14}
   c325e:	ecf1 6a01 	vldmia	r1!, {s13}
   c3262:	3301      	adds	r3, #1
   c3264:	429d      	cmp	r5, r3
   c3266:	eee6 7a87 	vfma.f32	s15, s13, s14
   c326a:	daf4      	bge.n	c3256 <__kernel_rem_pio2f+0x432>
   c326c:	ab5a      	add	r3, sp, #360	; 0x168
   c326e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c3272:	45a3      	cmp	fp, r4
   c3274:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c3278:	f1a6 0604 	sub.w	r6, r6, #4
   c327c:	f104 0301 	add.w	r3, r4, #1
   c3280:	d005      	beq.n	c328e <__kernel_rem_pio2f+0x46a>
   c3282:	2d00      	cmp	r5, #0
   c3284:	461c      	mov	r4, r3
   c3286:	dade      	bge.n	c3246 <__kernel_rem_pio2f+0x422>
   c3288:	eddf 7a82 	vldr	s15, [pc, #520]	; c3494 <__kernel_rem_pio2f+0x670>
   c328c:	e7ee      	b.n	c326c <__kernel_rem_pio2f+0x448>
   c328e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c3290:	2902      	cmp	r1, #2
   c3292:	dc1c      	bgt.n	c32ce <__kernel_rem_pio2f+0x4aa>
   c3294:	2900      	cmp	r1, #0
   c3296:	f300 8092 	bgt.w	c33be <__kernel_rem_pio2f+0x59a>
   c329a:	d10f      	bne.n	c32bc <__kernel_rem_pio2f+0x498>
   c329c:	ab32      	add	r3, sp, #200	; 0xc8
   c329e:	eddf 7a7d 	vldr	s15, [pc, #500]	; c3494 <__kernel_rem_pio2f+0x670>
   c32a2:	449c      	add	ip, r3
   c32a4:	ed3c 7a01 	vldmdb	ip!, {s14}
   c32a8:	4563      	cmp	r3, ip
   c32aa:	ee77 7a87 	vadd.f32	s15, s15, s14
   c32ae:	d1f9      	bne.n	c32a4 <__kernel_rem_pio2f+0x480>
   c32b0:	b10a      	cbz	r2, c32b6 <__kernel_rem_pio2f+0x492>
   c32b2:	eef1 7a67 	vneg.f32	s15, s15
   c32b6:	9b06      	ldr	r3, [sp, #24]
   c32b8:	edc3 7a00 	vstr	s15, [r3]
   c32bc:	ee19 3a90 	vmov	r3, s19
   c32c0:	f003 0007 	and.w	r0, r3, #7
   c32c4:	b05b      	add	sp, #364	; 0x16c
   c32c6:	ecbd 8b04 	vpop	{d8-d9}
   c32ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c32ce:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c32d0:	2b03      	cmp	r3, #3
   c32d2:	d1f3      	bne.n	c32bc <__kernel_rem_pio2f+0x498>
   c32d4:	f1bb 0f00 	cmp.w	fp, #0
   c32d8:	f000 80d1 	beq.w	c347e <__kernel_rem_pio2f+0x65a>
   c32dc:	ab5a      	add	r3, sp, #360	; 0x168
   c32de:	4473      	add	r3, lr
   c32e0:	a932      	add	r1, sp, #200	; 0xc8
   c32e2:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c32e6:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c32ea:	ed73 7a01 	vldmdb	r3!, {s15}
   c32ee:	eef0 6a47 	vmov.f32	s13, s14
   c32f2:	ee37 7a27 	vadd.f32	s14, s14, s15
   c32f6:	4299      	cmp	r1, r3
   c32f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c32fc:	ed83 7a00 	vstr	s14, [r3]
   c3300:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c3304:	edc3 7a01 	vstr	s15, [r3, #4]
   c3308:	d1ef      	bne.n	c32ea <__kernel_rem_pio2f+0x4c6>
   c330a:	f1bb 0f01 	cmp.w	fp, #1
   c330e:	f340 80b6 	ble.w	c347e <__kernel_rem_pio2f+0x65a>
   c3312:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c3316:	ab5a      	add	r3, sp, #360	; 0x168
   c3318:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c331c:	449e      	add	lr, r3
   c331e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c3322:	f10b 0304 	add.w	r3, fp, #4
   c3326:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c332a:	440b      	add	r3, r1
   c332c:	a833      	add	r0, sp, #204	; 0xcc
   c332e:	ed73 7a01 	vldmdb	r3!, {s15}
   c3332:	eef0 6a47 	vmov.f32	s13, s14
   c3336:	ee37 7a27 	vadd.f32	s14, s14, s15
   c333a:	4298      	cmp	r0, r3
   c333c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3340:	ed83 7a00 	vstr	s14, [r3]
   c3344:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c3348:	edc3 7a01 	vstr	s15, [r3, #4]
   c334c:	d1ef      	bne.n	c332e <__kernel_rem_pio2f+0x50a>
   c334e:	f10b 0b08 	add.w	fp, fp, #8
   c3352:	eddf 7a50 	vldr	s15, [pc, #320]	; c3494 <__kernel_rem_pio2f+0x670>
   c3356:	eb01 030b 	add.w	r3, r1, fp
   c335a:	3108      	adds	r1, #8
   c335c:	ed33 7a01 	vldmdb	r3!, {s14}
   c3360:	4299      	cmp	r1, r3
   c3362:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3366:	d1f9      	bne.n	c335c <__kernel_rem_pio2f+0x538>
   c3368:	2a00      	cmp	r2, #0
   c336a:	d156      	bne.n	c341a <__kernel_rem_pio2f+0x5f6>
   c336c:	9906      	ldr	r1, [sp, #24]
   c336e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c3370:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c3372:	600a      	str	r2, [r1, #0]
   c3374:	604b      	str	r3, [r1, #4]
   c3376:	edc1 7a02 	vstr	s15, [r1, #8]
   c337a:	e79f      	b.n	c32bc <__kernel_rem_pio2f+0x498>
   c337c:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c3380:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c3384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c3388:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c338c:	e6bb      	b.n	c3106 <__kernel_rem_pio2f+0x2e2>
   c338e:	2308      	movs	r3, #8
   c3390:	9307      	str	r3, [sp, #28]
   c3392:	2300      	movs	r3, #0
   c3394:	9302      	str	r3, [sp, #8]
   c3396:	e561      	b.n	c2e5c <__kernel_rem_pio2f+0x38>
   c3398:	ee19 3a90 	vmov	r3, s19
   c339c:	2d00      	cmp	r5, #0
   c339e:	f103 0301 	add.w	r3, r3, #1
   c33a2:	ee09 3a90 	vmov	s19, r3
   c33a6:	bfc8      	it	gt
   c33a8:	2202      	movgt	r2, #2
   c33aa:	f73f ae70 	bgt.w	c308e <__kernel_rem_pio2f+0x26a>
   c33ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c33b2:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c33b6:	2202      	movs	r2, #2
   c33b8:	e5f6      	b.n	c2fa8 <__kernel_rem_pio2f+0x184>
   c33ba:	2100      	movs	r1, #0
   c33bc:	e694      	b.n	c30e8 <__kernel_rem_pio2f+0x2c4>
   c33be:	a932      	add	r1, sp, #200	; 0xc8
   c33c0:	eddf 7a34 	vldr	s15, [pc, #208]	; c3494 <__kernel_rem_pio2f+0x670>
   c33c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c33c8:	ed33 7a01 	vldmdb	r3!, {s14}
   c33cc:	4299      	cmp	r1, r3
   c33ce:	ee77 7a87 	vadd.f32	s15, s15, s14
   c33d2:	d1f9      	bne.n	c33c8 <__kernel_rem_pio2f+0x5a4>
   c33d4:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c33d8:	bb8a      	cbnz	r2, c343e <__kernel_rem_pio2f+0x61a>
   c33da:	9b06      	ldr	r3, [sp, #24]
   c33dc:	f1bb 0f00 	cmp.w	fp, #0
   c33e0:	edc3 7a00 	vstr	s15, [r3]
   c33e4:	ee77 7a67 	vsub.f32	s15, s14, s15
   c33e8:	dd0b      	ble.n	c3402 <__kernel_rem_pio2f+0x5de>
   c33ea:	a933      	add	r1, sp, #204	; 0xcc
   c33ec:	2301      	movs	r3, #1
   c33ee:	ecb1 7a01 	vldmia	r1!, {s14}
   c33f2:	3301      	adds	r3, #1
   c33f4:	459b      	cmp	fp, r3
   c33f6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c33fa:	daf8      	bge.n	c33ee <__kernel_rem_pio2f+0x5ca>
   c33fc:	b10a      	cbz	r2, c3402 <__kernel_rem_pio2f+0x5de>
   c33fe:	eef1 7a67 	vneg.f32	s15, s15
   c3402:	9b06      	ldr	r3, [sp, #24]
   c3404:	edc3 7a01 	vstr	s15, [r3, #4]
   c3408:	e758      	b.n	c32bc <__kernel_rem_pio2f+0x498>
   c340a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c340e:	469b      	mov	fp, r3
   c3410:	ee10 1a10 	vmov	r1, s0
   c3414:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c3418:	e6ec      	b.n	c31f4 <__kernel_rem_pio2f+0x3d0>
   c341a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c341e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c3422:	9b06      	ldr	r3, [sp, #24]
   c3424:	eef1 6a66 	vneg.f32	s13, s13
   c3428:	eeb1 7a47 	vneg.f32	s14, s14
   c342c:	eef1 7a67 	vneg.f32	s15, s15
   c3430:	edc3 6a00 	vstr	s13, [r3]
   c3434:	ed83 7a01 	vstr	s14, [r3, #4]
   c3438:	edc3 7a02 	vstr	s15, [r3, #8]
   c343c:	e73e      	b.n	c32bc <__kernel_rem_pio2f+0x498>
   c343e:	9b06      	ldr	r3, [sp, #24]
   c3440:	eef1 6a67 	vneg.f32	s13, s15
   c3444:	f1bb 0f00 	cmp.w	fp, #0
   c3448:	ee77 7a67 	vsub.f32	s15, s14, s15
   c344c:	edc3 6a00 	vstr	s13, [r3]
   c3450:	dccb      	bgt.n	c33ea <__kernel_rem_pio2f+0x5c6>
   c3452:	e7d4      	b.n	c33fe <__kernel_rem_pio2f+0x5da>
   c3454:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3456:	2b02      	cmp	r3, #2
   c3458:	dc0d      	bgt.n	c3476 <__kernel_rem_pio2f+0x652>
   c345a:	2b00      	cmp	r3, #0
   c345c:	dc14      	bgt.n	c3488 <__kernel_rem_pio2f+0x664>
   c345e:	f47f af2d 	bne.w	c32bc <__kernel_rem_pio2f+0x498>
   c3462:	eddf 7a0c 	vldr	s15, [pc, #48]	; c3494 <__kernel_rem_pio2f+0x670>
   c3466:	2a00      	cmp	r2, #0
   c3468:	f43f af25 	beq.w	c32b6 <__kernel_rem_pio2f+0x492>
   c346c:	e721      	b.n	c32b2 <__kernel_rem_pio2f+0x48e>
   c346e:	9b03      	ldr	r3, [sp, #12]
   c3470:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c3474:	e537      	b.n	c2ee6 <__kernel_rem_pio2f+0xc2>
   c3476:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3478:	2b03      	cmp	r3, #3
   c347a:	f47f af1f 	bne.w	c32bc <__kernel_rem_pio2f+0x498>
   c347e:	eddf 7a05 	vldr	s15, [pc, #20]	; c3494 <__kernel_rem_pio2f+0x670>
   c3482:	2a00      	cmp	r2, #0
   c3484:	d1c9      	bne.n	c341a <__kernel_rem_pio2f+0x5f6>
   c3486:	e771      	b.n	c336c <__kernel_rem_pio2f+0x548>
   c3488:	eddf 7a02 	vldr	s15, [pc, #8]	; c3494 <__kernel_rem_pio2f+0x670>
   c348c:	e7a2      	b.n	c33d4 <__kernel_rem_pio2f+0x5b0>
   c348e:	bf00      	nop
   c3490:	000c8684 	.word	0x000c8684
   c3494:	00000000 	.word	0x00000000

000c3498 <__kernel_sinf>:
   c3498:	ee10 3a10 	vmov	r3, s0
   c349c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c34a0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c34a4:	da04      	bge.n	c34b0 <__kernel_sinf+0x18>
   c34a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c34aa:	ee17 3a90 	vmov	r3, s15
   c34ae:	b35b      	cbz	r3, c3508 <__kernel_sinf+0x70>
   c34b0:	ee60 7a00 	vmul.f32	s15, s0, s0
   c34b4:	ed9f 7a15 	vldr	s14, [pc, #84]	; c350c <__kernel_sinf+0x74>
   c34b8:	eddf 5a15 	vldr	s11, [pc, #84]	; c3510 <__kernel_sinf+0x78>
   c34bc:	ed9f 6a15 	vldr	s12, [pc, #84]	; c3514 <__kernel_sinf+0x7c>
   c34c0:	eddf 6a15 	vldr	s13, [pc, #84]	; c3518 <__kernel_sinf+0x80>
   c34c4:	eee7 5a87 	vfma.f32	s11, s15, s14
   c34c8:	ed9f 7a14 	vldr	s14, [pc, #80]	; c351c <__kernel_sinf+0x84>
   c34cc:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c34d0:	ee20 5a27 	vmul.f32	s10, s0, s15
   c34d4:	eee6 6a27 	vfma.f32	s13, s12, s15
   c34d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c34dc:	b930      	cbnz	r0, c34ec <__kernel_sinf+0x54>
   c34de:	eddf 6a10 	vldr	s13, [pc, #64]	; c3520 <__kernel_sinf+0x88>
   c34e2:	eee7 6a87 	vfma.f32	s13, s15, s14
   c34e6:	eea6 0a85 	vfma.f32	s0, s13, s10
   c34ea:	4770      	bx	lr
   c34ec:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c34f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c34f4:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c34f8:	eddf 6a0a 	vldr	s13, [pc, #40]	; c3524 <__kernel_sinf+0x8c>
   c34fc:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c3500:	eee5 0a26 	vfma.f32	s1, s10, s13
   c3504:	ee30 0a60 	vsub.f32	s0, s0, s1
   c3508:	4770      	bx	lr
   c350a:	bf00      	nop
   c350c:	2f2ec9d3 	.word	0x2f2ec9d3
   c3510:	b2d72f34 	.word	0xb2d72f34
   c3514:	3638ef1b 	.word	0x3638ef1b
   c3518:	b9500d01 	.word	0xb9500d01
   c351c:	3c088889 	.word	0x3c088889
   c3520:	be2aaaab 	.word	0xbe2aaaab
   c3524:	3e2aaaab 	.word	0x3e2aaaab

000c3528 <atan>:
   c3528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c352c:	ec55 4b10 	vmov	r4, r5, d0
   c3530:	4bc3      	ldr	r3, [pc, #780]	; (c3840 <atan+0x318>)
   c3532:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c3536:	429e      	cmp	r6, r3
   c3538:	46aa      	mov	sl, r5
   c353a:	dd17      	ble.n	c356c <atan+0x44>
   c353c:	4bc1      	ldr	r3, [pc, #772]	; (c3844 <atan+0x31c>)
   c353e:	429e      	cmp	r6, r3
   c3540:	dc0a      	bgt.n	c3558 <atan+0x30>
   c3542:	d007      	beq.n	c3554 <atan+0x2c>
   c3544:	f1ba 0f00 	cmp.w	sl, #0
   c3548:	f340 80cb 	ble.w	c36e2 <atan+0x1ba>
   c354c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c37d0 <atan+0x2a8>
   c3550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3554:	2c00      	cmp	r4, #0
   c3556:	d0f5      	beq.n	c3544 <atan+0x1c>
   c3558:	4622      	mov	r2, r4
   c355a:	462b      	mov	r3, r5
   c355c:	4620      	mov	r0, r4
   c355e:	4629      	mov	r1, r5
   c3560:	f000 fb2c 	bl	c3bbc <__adddf3>
   c3564:	ec41 0b10 	vmov	d0, r0, r1
   c3568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c356c:	4bb6      	ldr	r3, [pc, #728]	; (c3848 <atan+0x320>)
   c356e:	429e      	cmp	r6, r3
   c3570:	f300 80bb 	bgt.w	c36ea <atan+0x1c2>
   c3574:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c3578:	429e      	cmp	r6, r3
   c357a:	f340 80a0 	ble.w	c36be <atan+0x196>
   c357e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c3582:	4622      	mov	r2, r4
   c3584:	462b      	mov	r3, r5
   c3586:	4620      	mov	r0, r4
   c3588:	4629      	mov	r1, r5
   c358a:	f000 fccd 	bl	c3f28 <__aeabi_dmul>
   c358e:	4602      	mov	r2, r0
   c3590:	460b      	mov	r3, r1
   c3592:	4680      	mov	r8, r0
   c3594:	4689      	mov	r9, r1
   c3596:	f000 fcc7 	bl	c3f28 <__aeabi_dmul>
   c359a:	a38f      	add	r3, pc, #572	; (adr r3, c37d8 <atan+0x2b0>)
   c359c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35a0:	4606      	mov	r6, r0
   c35a2:	460f      	mov	r7, r1
   c35a4:	f000 fcc0 	bl	c3f28 <__aeabi_dmul>
   c35a8:	a38d      	add	r3, pc, #564	; (adr r3, c37e0 <atan+0x2b8>)
   c35aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35ae:	f000 fb05 	bl	c3bbc <__adddf3>
   c35b2:	4632      	mov	r2, r6
   c35b4:	463b      	mov	r3, r7
   c35b6:	f000 fcb7 	bl	c3f28 <__aeabi_dmul>
   c35ba:	a38b      	add	r3, pc, #556	; (adr r3, c37e8 <atan+0x2c0>)
   c35bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35c0:	f000 fafc 	bl	c3bbc <__adddf3>
   c35c4:	4632      	mov	r2, r6
   c35c6:	463b      	mov	r3, r7
   c35c8:	f000 fcae 	bl	c3f28 <__aeabi_dmul>
   c35cc:	a388      	add	r3, pc, #544	; (adr r3, c37f0 <atan+0x2c8>)
   c35ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35d2:	f000 faf3 	bl	c3bbc <__adddf3>
   c35d6:	4632      	mov	r2, r6
   c35d8:	463b      	mov	r3, r7
   c35da:	f000 fca5 	bl	c3f28 <__aeabi_dmul>
   c35de:	a386      	add	r3, pc, #536	; (adr r3, c37f8 <atan+0x2d0>)
   c35e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35e4:	f000 faea 	bl	c3bbc <__adddf3>
   c35e8:	4632      	mov	r2, r6
   c35ea:	463b      	mov	r3, r7
   c35ec:	f000 fc9c 	bl	c3f28 <__aeabi_dmul>
   c35f0:	a383      	add	r3, pc, #524	; (adr r3, c3800 <atan+0x2d8>)
   c35f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35f6:	f000 fae1 	bl	c3bbc <__adddf3>
   c35fa:	4642      	mov	r2, r8
   c35fc:	464b      	mov	r3, r9
   c35fe:	f000 fc93 	bl	c3f28 <__aeabi_dmul>
   c3602:	a381      	add	r3, pc, #516	; (adr r3, c3808 <atan+0x2e0>)
   c3604:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3608:	4680      	mov	r8, r0
   c360a:	4689      	mov	r9, r1
   c360c:	4630      	mov	r0, r6
   c360e:	4639      	mov	r1, r7
   c3610:	f000 fc8a 	bl	c3f28 <__aeabi_dmul>
   c3614:	a37e      	add	r3, pc, #504	; (adr r3, c3810 <atan+0x2e8>)
   c3616:	e9d3 2300 	ldrd	r2, r3, [r3]
   c361a:	f000 facd 	bl	c3bb8 <__aeabi_dsub>
   c361e:	4632      	mov	r2, r6
   c3620:	463b      	mov	r3, r7
   c3622:	f000 fc81 	bl	c3f28 <__aeabi_dmul>
   c3626:	a37c      	add	r3, pc, #496	; (adr r3, c3818 <atan+0x2f0>)
   c3628:	e9d3 2300 	ldrd	r2, r3, [r3]
   c362c:	f000 fac4 	bl	c3bb8 <__aeabi_dsub>
   c3630:	4632      	mov	r2, r6
   c3632:	463b      	mov	r3, r7
   c3634:	f000 fc78 	bl	c3f28 <__aeabi_dmul>
   c3638:	a379      	add	r3, pc, #484	; (adr r3, c3820 <atan+0x2f8>)
   c363a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c363e:	f000 fabb 	bl	c3bb8 <__aeabi_dsub>
   c3642:	4632      	mov	r2, r6
   c3644:	463b      	mov	r3, r7
   c3646:	f000 fc6f 	bl	c3f28 <__aeabi_dmul>
   c364a:	a377      	add	r3, pc, #476	; (adr r3, c3828 <atan+0x300>)
   c364c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3650:	f000 fab2 	bl	c3bb8 <__aeabi_dsub>
   c3654:	4632      	mov	r2, r6
   c3656:	463b      	mov	r3, r7
   c3658:	f000 fc66 	bl	c3f28 <__aeabi_dmul>
   c365c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c3660:	4602      	mov	r2, r0
   c3662:	460b      	mov	r3, r1
   c3664:	4640      	mov	r0, r8
   c3666:	4649      	mov	r1, r9
   c3668:	d062      	beq.n	c3730 <atan+0x208>
   c366a:	f000 faa7 	bl	c3bbc <__adddf3>
   c366e:	4e77      	ldr	r6, [pc, #476]	; (c384c <atan+0x324>)
   c3670:	4622      	mov	r2, r4
   c3672:	462b      	mov	r3, r5
   c3674:	f000 fc58 	bl	c3f28 <__aeabi_dmul>
   c3678:	4b75      	ldr	r3, [pc, #468]	; (c3850 <atan+0x328>)
   c367a:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c367e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c3682:	449b      	add	fp, r3
   c3684:	e9db 2300 	ldrd	r2, r3, [fp]
   c3688:	f000 fa96 	bl	c3bb8 <__aeabi_dsub>
   c368c:	4622      	mov	r2, r4
   c368e:	462b      	mov	r3, r5
   c3690:	f000 fa92 	bl	c3bb8 <__aeabi_dsub>
   c3694:	4602      	mov	r2, r0
   c3696:	460b      	mov	r3, r1
   c3698:	e9d6 0100 	ldrd	r0, r1, [r6]
   c369c:	f000 fa8c 	bl	c3bb8 <__aeabi_dsub>
   c36a0:	f1ba 0f00 	cmp.w	sl, #0
   c36a4:	ec41 0b10 	vmov	d0, r0, r1
   c36a8:	f6bf af5e 	bge.w	c3568 <atan+0x40>
   c36ac:	ee10 1a90 	vmov	r1, s1
   c36b0:	4602      	mov	r2, r0
   c36b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c36b6:	ec43 2b10 	vmov	d0, r2, r3
   c36ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c36be:	a35c      	add	r3, pc, #368	; (adr r3, c3830 <atan+0x308>)
   c36c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c36c4:	ee10 0a10 	vmov	r0, s0
   c36c8:	4629      	mov	r1, r5
   c36ca:	f000 fa77 	bl	c3bbc <__adddf3>
   c36ce:	4b61      	ldr	r3, [pc, #388]	; (c3854 <atan+0x32c>)
   c36d0:	2200      	movs	r2, #0
   c36d2:	f000 feb9 	bl	c4448 <__aeabi_dcmpgt>
   c36d6:	2800      	cmp	r0, #0
   c36d8:	f43f af51 	beq.w	c357e <atan+0x56>
   c36dc:	ec45 4b10 	vmov	d0, r4, r5
   c36e0:	e742      	b.n	c3568 <atan+0x40>
   c36e2:	ed9f 0b55 	vldr	d0, [pc, #340]	; c3838 <atan+0x310>
   c36e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c36ea:	f000 f8bd 	bl	c3868 <fabs>
   c36ee:	4b5a      	ldr	r3, [pc, #360]	; (c3858 <atan+0x330>)
   c36f0:	429e      	cmp	r6, r3
   c36f2:	ec55 4b10 	vmov	r4, r5, d0
   c36f6:	dc2b      	bgt.n	c3750 <atan+0x228>
   c36f8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c36fc:	429e      	cmp	r6, r3
   c36fe:	dc56      	bgt.n	c37ae <atan+0x286>
   c3700:	ee10 2a10 	vmov	r2, s0
   c3704:	462b      	mov	r3, r5
   c3706:	ee10 0a10 	vmov	r0, s0
   c370a:	4629      	mov	r1, r5
   c370c:	f000 fa56 	bl	c3bbc <__adddf3>
   c3710:	4b50      	ldr	r3, [pc, #320]	; (c3854 <atan+0x32c>)
   c3712:	2200      	movs	r2, #0
   c3714:	f000 fa50 	bl	c3bb8 <__aeabi_dsub>
   c3718:	4602      	mov	r2, r0
   c371a:	460b      	mov	r3, r1
   c371c:	4620      	mov	r0, r4
   c371e:	4629      	mov	r1, r5
   c3720:	4614      	mov	r4, r2
   c3722:	461d      	mov	r5, r3
   c3724:	f04f 0b00 	mov.w	fp, #0
   c3728:	2200      	movs	r2, #0
   c372a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c372e:	e027      	b.n	c3780 <atan+0x258>
   c3730:	f000 fa44 	bl	c3bbc <__adddf3>
   c3734:	4622      	mov	r2, r4
   c3736:	462b      	mov	r3, r5
   c3738:	f000 fbf6 	bl	c3f28 <__aeabi_dmul>
   c373c:	4602      	mov	r2, r0
   c373e:	460b      	mov	r3, r1
   c3740:	4620      	mov	r0, r4
   c3742:	4629      	mov	r1, r5
   c3744:	f000 fa38 	bl	c3bb8 <__aeabi_dsub>
   c3748:	ec41 0b10 	vmov	d0, r0, r1
   c374c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3750:	4b42      	ldr	r3, [pc, #264]	; (c385c <atan+0x334>)
   c3752:	429e      	cmp	r6, r3
   c3754:	da1f      	bge.n	c3796 <atan+0x26e>
   c3756:	4b42      	ldr	r3, [pc, #264]	; (c3860 <atan+0x338>)
   c3758:	2200      	movs	r2, #0
   c375a:	4629      	mov	r1, r5
   c375c:	ee10 0a10 	vmov	r0, s0
   c3760:	f000 fa2a 	bl	c3bb8 <__aeabi_dsub>
   c3764:	4602      	mov	r2, r0
   c3766:	460b      	mov	r3, r1
   c3768:	4620      	mov	r0, r4
   c376a:	4629      	mov	r1, r5
   c376c:	4614      	mov	r4, r2
   c376e:	461d      	mov	r5, r3
   c3770:	2200      	movs	r2, #0
   c3772:	4b3b      	ldr	r3, [pc, #236]	; (c3860 <atan+0x338>)
   c3774:	f04f 0b02 	mov.w	fp, #2
   c3778:	f000 fbd6 	bl	c3f28 <__aeabi_dmul>
   c377c:	4b35      	ldr	r3, [pc, #212]	; (c3854 <atan+0x32c>)
   c377e:	2200      	movs	r2, #0
   c3780:	f000 fa1c 	bl	c3bbc <__adddf3>
   c3784:	4602      	mov	r2, r0
   c3786:	460b      	mov	r3, r1
   c3788:	4620      	mov	r0, r4
   c378a:	4629      	mov	r1, r5
   c378c:	f000 fcf6 	bl	c417c <__aeabi_ddiv>
   c3790:	4604      	mov	r4, r0
   c3792:	460d      	mov	r5, r1
   c3794:	e6f5      	b.n	c3582 <atan+0x5a>
   c3796:	462b      	mov	r3, r5
   c3798:	4932      	ldr	r1, [pc, #200]	; (c3864 <atan+0x33c>)
   c379a:	ee10 2a10 	vmov	r2, s0
   c379e:	2000      	movs	r0, #0
   c37a0:	f000 fcec 	bl	c417c <__aeabi_ddiv>
   c37a4:	f04f 0b03 	mov.w	fp, #3
   c37a8:	4604      	mov	r4, r0
   c37aa:	460d      	mov	r5, r1
   c37ac:	e6e9      	b.n	c3582 <atan+0x5a>
   c37ae:	4b29      	ldr	r3, [pc, #164]	; (c3854 <atan+0x32c>)
   c37b0:	2200      	movs	r2, #0
   c37b2:	4629      	mov	r1, r5
   c37b4:	ee10 0a10 	vmov	r0, s0
   c37b8:	f000 f9fe 	bl	c3bb8 <__aeabi_dsub>
   c37bc:	4602      	mov	r2, r0
   c37be:	460b      	mov	r3, r1
   c37c0:	4620      	mov	r0, r4
   c37c2:	4629      	mov	r1, r5
   c37c4:	f04f 0b01 	mov.w	fp, #1
   c37c8:	4614      	mov	r4, r2
   c37ca:	461d      	mov	r5, r3
   c37cc:	e7d6      	b.n	c377c <atan+0x254>
   c37ce:	bf00      	nop
   c37d0:	54442d18 	.word	0x54442d18
   c37d4:	3ff921fb 	.word	0x3ff921fb
   c37d8:	e322da11 	.word	0xe322da11
   c37dc:	3f90ad3a 	.word	0x3f90ad3a
   c37e0:	24760deb 	.word	0x24760deb
   c37e4:	3fa97b4b 	.word	0x3fa97b4b
   c37e8:	a0d03d51 	.word	0xa0d03d51
   c37ec:	3fb10d66 	.word	0x3fb10d66
   c37f0:	c54c206e 	.word	0xc54c206e
   c37f4:	3fb745cd 	.word	0x3fb745cd
   c37f8:	920083ff 	.word	0x920083ff
   c37fc:	3fc24924 	.word	0x3fc24924
   c3800:	5555550d 	.word	0x5555550d
   c3804:	3fd55555 	.word	0x3fd55555
   c3808:	2c6a6c2f 	.word	0x2c6a6c2f
   c380c:	bfa2b444 	.word	0xbfa2b444
   c3810:	52defd9a 	.word	0x52defd9a
   c3814:	3fadde2d 	.word	0x3fadde2d
   c3818:	af749a6d 	.word	0xaf749a6d
   c381c:	3fb3b0f2 	.word	0x3fb3b0f2
   c3820:	fe231671 	.word	0xfe231671
   c3824:	3fbc71c6 	.word	0x3fbc71c6
   c3828:	9998ebc4 	.word	0x9998ebc4
   c382c:	3fc99999 	.word	0x3fc99999
   c3830:	8800759c 	.word	0x8800759c
   c3834:	7e37e43c 	.word	0x7e37e43c
   c3838:	54442d18 	.word	0x54442d18
   c383c:	bff921fb 	.word	0xbff921fb
   c3840:	440fffff 	.word	0x440fffff
   c3844:	7ff00000 	.word	0x7ff00000
   c3848:	3fdbffff 	.word	0x3fdbffff
   c384c:	000c86b8 	.word	0x000c86b8
   c3850:	000c86d8 	.word	0x000c86d8
   c3854:	3ff00000 	.word	0x3ff00000
   c3858:	3ff2ffff 	.word	0x3ff2ffff
   c385c:	40038000 	.word	0x40038000
   c3860:	3ff80000 	.word	0x3ff80000
   c3864:	bff00000 	.word	0xbff00000

000c3868 <fabs>:
   c3868:	ec51 0b10 	vmov	r0, r1, d0
   c386c:	ee10 2a10 	vmov	r2, s0
   c3870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c3874:	ec43 2b10 	vmov	d0, r2, r3
   c3878:	4770      	bx	lr
   c387a:	bf00      	nop

000c387c <atanf>:
   c387c:	b538      	push	{r3, r4, r5, lr}
   c387e:	ee10 5a10 	vmov	r5, s0
   c3882:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c3886:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c388a:	eef0 7a40 	vmov.f32	s15, s0
   c388e:	db0b      	blt.n	c38a8 <atanf+0x2c>
   c3890:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c3894:	dc5b      	bgt.n	c394e <atanf+0xd2>
   c3896:	eddf 7a53 	vldr	s15, [pc, #332]	; c39e4 <atanf+0x168>
   c389a:	ed9f 0a53 	vldr	s0, [pc, #332]	; c39e8 <atanf+0x16c>
   c389e:	2d00      	cmp	r5, #0
   c38a0:	bfc8      	it	gt
   c38a2:	eeb0 0a67 	vmovgt.f32	s0, s15
   c38a6:	bd38      	pop	{r3, r4, r5, pc}
   c38a8:	4b50      	ldr	r3, [pc, #320]	; (c39ec <atanf+0x170>)
   c38aa:	429c      	cmp	r4, r3
   c38ac:	dc5e      	bgt.n	c396c <atanf+0xf0>
   c38ae:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c38b2:	db4f      	blt.n	c3954 <atanf+0xd8>
   c38b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c38b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c38bc:	eddf 4a4c 	vldr	s9, [pc, #304]	; c39f0 <atanf+0x174>
   c38c0:	eddf 5a4c 	vldr	s11, [pc, #304]	; c39f4 <atanf+0x178>
   c38c4:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c39f8 <atanf+0x17c>
   c38c8:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c39fc <atanf+0x180>
   c38cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c38d0:	eeb0 6a66 	vmov.f32	s12, s13
   c38d4:	eee7 5a24 	vfma.f32	s11, s14, s9
   c38d8:	1c5a      	adds	r2, r3, #1
   c38da:	eddf 4a49 	vldr	s9, [pc, #292]	; c3a00 <atanf+0x184>
   c38de:	eddf 6a49 	vldr	s13, [pc, #292]	; c3a04 <atanf+0x188>
   c38e2:	eea5 5a87 	vfma.f32	s10, s11, s14
   c38e6:	eee7 6a24 	vfma.f32	s13, s14, s9
   c38ea:	eddf 5a47 	vldr	s11, [pc, #284]	; c3a08 <atanf+0x18c>
   c38ee:	eddf 4a47 	vldr	s9, [pc, #284]	; c3a0c <atanf+0x190>
   c38f2:	eee6 5a87 	vfma.f32	s11, s13, s14
   c38f6:	eea5 4a07 	vfma.f32	s8, s10, s14
   c38fa:	ed9f 5a45 	vldr	s10, [pc, #276]	; c3a10 <atanf+0x194>
   c38fe:	eddf 6a45 	vldr	s13, [pc, #276]	; c3a14 <atanf+0x198>
   c3902:	eea5 5a87 	vfma.f32	s10, s11, s14
   c3906:	eee4 4a07 	vfma.f32	s9, s8, s14
   c390a:	eddf 5a43 	vldr	s11, [pc, #268]	; c3a18 <atanf+0x19c>
   c390e:	eee4 6a87 	vfma.f32	s13, s9, s14
   c3912:	eee5 5a07 	vfma.f32	s11, s10, s14
   c3916:	ee66 6a86 	vmul.f32	s13, s13, s12
   c391a:	ee25 7a87 	vmul.f32	s14, s11, s14
   c391e:	d03a      	beq.n	c3996 <atanf+0x11a>
   c3920:	4a3e      	ldr	r2, [pc, #248]	; (c3a1c <atanf+0x1a0>)
   c3922:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c3926:	ee76 6a87 	vadd.f32	s13, s13, s14
   c392a:	ed92 0a00 	vldr	s0, [r2]
   c392e:	4a3c      	ldr	r2, [pc, #240]	; (c3a20 <atanf+0x1a4>)
   c3930:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c3934:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3938:	2d00      	cmp	r5, #0
   c393a:	ed93 7a00 	vldr	s14, [r3]
   c393e:	ee70 7a67 	vsub.f32	s15, s0, s15
   c3942:	ee37 0a67 	vsub.f32	s0, s14, s15
   c3946:	daae      	bge.n	c38a6 <atanf+0x2a>
   c3948:	eeb1 0a40 	vneg.f32	s0, s0
   c394c:	bd38      	pop	{r3, r4, r5, pc}
   c394e:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3952:	bd38      	pop	{r3, r4, r5, pc}
   c3954:	ed9f 7a33 	vldr	s14, [pc, #204]	; c3a24 <atanf+0x1a8>
   c3958:	ee30 7a07 	vadd.f32	s14, s0, s14
   c395c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c3960:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c3964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3968:	dda4      	ble.n	c38b4 <atanf+0x38>
   c396a:	bd38      	pop	{r3, r4, r5, pc}
   c396c:	f000 f860 	bl	c3a30 <fabsf>
   c3970:	4b2d      	ldr	r3, [pc, #180]	; (c3a28 <atanf+0x1ac>)
   c3972:	429c      	cmp	r4, r3
   c3974:	dc16      	bgt.n	c39a4 <atanf+0x128>
   c3976:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c397a:	429c      	cmp	r4, r3
   c397c:	dc27      	bgt.n	c39ce <atanf+0x152>
   c397e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c3982:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c3986:	eea0 7a27 	vfma.f32	s14, s0, s15
   c398a:	2300      	movs	r3, #0
   c398c:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3990:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c3994:	e790      	b.n	c38b8 <atanf+0x3c>
   c3996:	ee76 6a87 	vadd.f32	s13, s13, s14
   c399a:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c399e:	eeb0 0a67 	vmov.f32	s0, s15
   c39a2:	bd38      	pop	{r3, r4, r5, pc}
   c39a4:	4b21      	ldr	r3, [pc, #132]	; (c3a2c <atanf+0x1b0>)
   c39a6:	429c      	cmp	r4, r3
   c39a8:	dc0b      	bgt.n	c39c2 <atanf+0x146>
   c39aa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c39ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c39b2:	eea0 7a27 	vfma.f32	s14, s0, s15
   c39b6:	2302      	movs	r3, #2
   c39b8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c39bc:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c39c0:	e77a      	b.n	c38b8 <atanf+0x3c>
   c39c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c39c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c39ca:	2303      	movs	r3, #3
   c39cc:	e774      	b.n	c38b8 <atanf+0x3c>
   c39ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c39d2:	ee30 7a67 	vsub.f32	s14, s0, s15
   c39d6:	ee30 0a27 	vadd.f32	s0, s0, s15
   c39da:	2301      	movs	r3, #1
   c39dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c39e0:	e76a      	b.n	c38b8 <atanf+0x3c>
   c39e2:	bf00      	nop
   c39e4:	3fc90fdb 	.word	0x3fc90fdb
   c39e8:	bfc90fdb 	.word	0xbfc90fdb
   c39ec:	3edfffff 	.word	0x3edfffff
   c39f0:	3c8569d7 	.word	0x3c8569d7
   c39f4:	3d4bda59 	.word	0x3d4bda59
   c39f8:	3d886b35 	.word	0x3d886b35
   c39fc:	3dba2e6e 	.word	0x3dba2e6e
   c3a00:	bd15a221 	.word	0xbd15a221
   c3a04:	bd6ef16b 	.word	0xbd6ef16b
   c3a08:	bd9d8795 	.word	0xbd9d8795
   c3a0c:	3e124925 	.word	0x3e124925
   c3a10:	bde38e38 	.word	0xbde38e38
   c3a14:	3eaaaaab 	.word	0x3eaaaaab
   c3a18:	be4ccccd 	.word	0xbe4ccccd
   c3a1c:	000c8708 	.word	0x000c8708
   c3a20:	000c86f8 	.word	0x000c86f8
   c3a24:	7149f2ca 	.word	0x7149f2ca
   c3a28:	3f97ffff 	.word	0x3f97ffff
   c3a2c:	401bffff 	.word	0x401bffff

000c3a30 <fabsf>:
   c3a30:	ee10 3a10 	vmov	r3, s0
   c3a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3a38:	ee00 3a10 	vmov	s0, r3
   c3a3c:	4770      	bx	lr
   c3a3e:	bf00      	nop

000c3a40 <floorf>:
   c3a40:	ee10 2a10 	vmov	r2, s0
   c3a44:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3a48:	3b7f      	subs	r3, #127	; 0x7f
   c3a4a:	2b16      	cmp	r3, #22
   c3a4c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3a50:	dc28      	bgt.n	c3aa4 <floorf+0x64>
   c3a52:	2b00      	cmp	r3, #0
   c3a54:	db18      	blt.n	c3a88 <floorf+0x48>
   c3a56:	491a      	ldr	r1, [pc, #104]	; (c3ac0 <floorf+0x80>)
   c3a58:	4119      	asrs	r1, r3
   c3a5a:	420a      	tst	r2, r1
   c3a5c:	d021      	beq.n	c3aa2 <floorf+0x62>
   c3a5e:	eddf 7a19 	vldr	s15, [pc, #100]	; c3ac4 <floorf+0x84>
   c3a62:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3a6e:	dd18      	ble.n	c3aa2 <floorf+0x62>
   c3a70:	2a00      	cmp	r2, #0
   c3a72:	da04      	bge.n	c3a7e <floorf+0x3e>
   c3a74:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c3a78:	fa40 f303 	asr.w	r3, r0, r3
   c3a7c:	441a      	add	r2, r3
   c3a7e:	ea22 0301 	bic.w	r3, r2, r1
   c3a82:	ee00 3a10 	vmov	s0, r3
   c3a86:	4770      	bx	lr
   c3a88:	eddf 7a0e 	vldr	s15, [pc, #56]	; c3ac4 <floorf+0x84>
   c3a8c:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3a90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3a98:	dd03      	ble.n	c3aa2 <floorf+0x62>
   c3a9a:	2a00      	cmp	r2, #0
   c3a9c:	db08      	blt.n	c3ab0 <floorf+0x70>
   c3a9e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c3ac8 <floorf+0x88>
   c3aa2:	4770      	bx	lr
   c3aa4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c3aa8:	d3fb      	bcc.n	c3aa2 <floorf+0x62>
   c3aaa:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3aae:	4770      	bx	lr
   c3ab0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c3ab4:	2900      	cmp	r1, #0
   c3ab6:	bf18      	it	ne
   c3ab8:	eeb0 0a67 	vmovne.f32	s0, s15
   c3abc:	4770      	bx	lr
   c3abe:	bf00      	nop
   c3ac0:	007fffff 	.word	0x007fffff
   c3ac4:	7149f2ca 	.word	0x7149f2ca
   c3ac8:	00000000 	.word	0x00000000

000c3acc <scalbnf>:
   c3acc:	b082      	sub	sp, #8
   c3ace:	ed8d 0a01 	vstr	s0, [sp, #4]
   c3ad2:	9b01      	ldr	r3, [sp, #4]
   c3ad4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c3ad8:	d02a      	beq.n	c3b30 <scalbnf+0x64>
   c3ada:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c3ade:	d223      	bcs.n	c3b28 <scalbnf+0x5c>
   c3ae0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c3ae4:	d128      	bne.n	c3b38 <scalbnf+0x6c>
   c3ae6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c3aea:	eddf 7a2a 	vldr	s15, [pc, #168]	; c3b94 <scalbnf+0xc8>
   c3aee:	4b2a      	ldr	r3, [pc, #168]	; (c3b98 <scalbnf+0xcc>)
   c3af0:	ee67 7a27 	vmul.f32	s15, s14, s15
   c3af4:	4298      	cmp	r0, r3
   c3af6:	edcd 7a01 	vstr	s15, [sp, #4]
   c3afa:	db37      	blt.n	c3b6c <scalbnf+0xa0>
   c3afc:	9b01      	ldr	r3, [sp, #4]
   c3afe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c3b02:	3a19      	subs	r2, #25
   c3b04:	4402      	add	r2, r0
   c3b06:	2afe      	cmp	r2, #254	; 0xfe
   c3b08:	dd1a      	ble.n	c3b40 <scalbnf+0x74>
   c3b0a:	ed9f 0a24 	vldr	s0, [pc, #144]	; c3b9c <scalbnf+0xd0>
   c3b0e:	ed9f 7a24 	vldr	s14, [pc, #144]	; c3ba0 <scalbnf+0xd4>
   c3b12:	9b01      	ldr	r3, [sp, #4]
   c3b14:	2b00      	cmp	r3, #0
   c3b16:	eef0 7a40 	vmov.f32	s15, s0
   c3b1a:	bfb8      	it	lt
   c3b1c:	eeb0 0a47 	vmovlt.f32	s0, s14
   c3b20:	ee20 0a27 	vmul.f32	s0, s0, s15
   c3b24:	b002      	add	sp, #8
   c3b26:	4770      	bx	lr
   c3b28:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3b2c:	b002      	add	sp, #8
   c3b2e:	4770      	bx	lr
   c3b30:	ed9d 0a01 	vldr	s0, [sp, #4]
   c3b34:	b002      	add	sp, #8
   c3b36:	4770      	bx	lr
   c3b38:	0dd2      	lsrs	r2, r2, #23
   c3b3a:	4402      	add	r2, r0
   c3b3c:	2afe      	cmp	r2, #254	; 0xfe
   c3b3e:	dce4      	bgt.n	c3b0a <scalbnf+0x3e>
   c3b40:	2a00      	cmp	r2, #0
   c3b42:	dc0b      	bgt.n	c3b5c <scalbnf+0x90>
   c3b44:	f112 0f16 	cmn.w	r2, #22
   c3b48:	da17      	bge.n	c3b7a <scalbnf+0xae>
   c3b4a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c3b4e:	4298      	cmp	r0, r3
   c3b50:	dcdb      	bgt.n	c3b0a <scalbnf+0x3e>
   c3b52:	ed9f 0a14 	vldr	s0, [pc, #80]	; c3ba4 <scalbnf+0xd8>
   c3b56:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3ba8 <scalbnf+0xdc>
   c3b5a:	e7da      	b.n	c3b12 <scalbnf+0x46>
   c3b5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3b60:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3b64:	ee00 3a10 	vmov	s0, r3
   c3b68:	b002      	add	sp, #8
   c3b6a:	4770      	bx	lr
   c3b6c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c3ba4 <scalbnf+0xd8>
   c3b70:	eddd 7a01 	vldr	s15, [sp, #4]
   c3b74:	ee27 0a80 	vmul.f32	s0, s15, s0
   c3b78:	e7d8      	b.n	c3b2c <scalbnf+0x60>
   c3b7a:	3219      	adds	r2, #25
   c3b7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3b80:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3b84:	eddf 7a09 	vldr	s15, [pc, #36]	; c3bac <scalbnf+0xe0>
   c3b88:	ee07 3a10 	vmov	s14, r3
   c3b8c:	ee27 0a27 	vmul.f32	s0, s14, s15
   c3b90:	e7cc      	b.n	c3b2c <scalbnf+0x60>
   c3b92:	bf00      	nop
   c3b94:	4c000000 	.word	0x4c000000
   c3b98:	ffff3cb0 	.word	0xffff3cb0
   c3b9c:	7149f2ca 	.word	0x7149f2ca
   c3ba0:	f149f2ca 	.word	0xf149f2ca
   c3ba4:	0da24260 	.word	0x0da24260
   c3ba8:	8da24260 	.word	0x8da24260
   c3bac:	33000000 	.word	0x33000000

000c3bb0 <__aeabi_drsub>:
   c3bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c3bb4:	e002      	b.n	c3bbc <__adddf3>
   c3bb6:	bf00      	nop

000c3bb8 <__aeabi_dsub>:
   c3bb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c3bbc <__adddf3>:
   c3bbc:	b530      	push	{r4, r5, lr}
   c3bbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c3bc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c3bc6:	ea94 0f05 	teq	r4, r5
   c3bca:	bf08      	it	eq
   c3bcc:	ea90 0f02 	teqeq	r0, r2
   c3bd0:	bf1f      	itttt	ne
   c3bd2:	ea54 0c00 	orrsne.w	ip, r4, r0
   c3bd6:	ea55 0c02 	orrsne.w	ip, r5, r2
   c3bda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c3bde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3be2:	f000 80e2 	beq.w	c3daa <__adddf3+0x1ee>
   c3be6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c3bea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c3bee:	bfb8      	it	lt
   c3bf0:	426d      	neglt	r5, r5
   c3bf2:	dd0c      	ble.n	c3c0e <__adddf3+0x52>
   c3bf4:	442c      	add	r4, r5
   c3bf6:	ea80 0202 	eor.w	r2, r0, r2
   c3bfa:	ea81 0303 	eor.w	r3, r1, r3
   c3bfe:	ea82 0000 	eor.w	r0, r2, r0
   c3c02:	ea83 0101 	eor.w	r1, r3, r1
   c3c06:	ea80 0202 	eor.w	r2, r0, r2
   c3c0a:	ea81 0303 	eor.w	r3, r1, r3
   c3c0e:	2d36      	cmp	r5, #54	; 0x36
   c3c10:	bf88      	it	hi
   c3c12:	bd30      	pophi	{r4, r5, pc}
   c3c14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3c18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3c1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3c20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3c24:	d002      	beq.n	c3c2c <__adddf3+0x70>
   c3c26:	4240      	negs	r0, r0
   c3c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3c2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3c34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3c38:	d002      	beq.n	c3c40 <__adddf3+0x84>
   c3c3a:	4252      	negs	r2, r2
   c3c3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3c40:	ea94 0f05 	teq	r4, r5
   c3c44:	f000 80a7 	beq.w	c3d96 <__adddf3+0x1da>
   c3c48:	f1a4 0401 	sub.w	r4, r4, #1
   c3c4c:	f1d5 0e20 	rsbs	lr, r5, #32
   c3c50:	db0d      	blt.n	c3c6e <__adddf3+0xb2>
   c3c52:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3c56:	fa22 f205 	lsr.w	r2, r2, r5
   c3c5a:	1880      	adds	r0, r0, r2
   c3c5c:	f141 0100 	adc.w	r1, r1, #0
   c3c60:	fa03 f20e 	lsl.w	r2, r3, lr
   c3c64:	1880      	adds	r0, r0, r2
   c3c66:	fa43 f305 	asr.w	r3, r3, r5
   c3c6a:	4159      	adcs	r1, r3
   c3c6c:	e00e      	b.n	c3c8c <__adddf3+0xd0>
   c3c6e:	f1a5 0520 	sub.w	r5, r5, #32
   c3c72:	f10e 0e20 	add.w	lr, lr, #32
   c3c76:	2a01      	cmp	r2, #1
   c3c78:	fa03 fc0e 	lsl.w	ip, r3, lr
   c3c7c:	bf28      	it	cs
   c3c7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3c82:	fa43 f305 	asr.w	r3, r3, r5
   c3c86:	18c0      	adds	r0, r0, r3
   c3c88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c3c8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3c90:	d507      	bpl.n	c3ca2 <__adddf3+0xe6>
   c3c92:	f04f 0e00 	mov.w	lr, #0
   c3c96:	f1dc 0c00 	rsbs	ip, ip, #0
   c3c9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   c3c9e:	eb6e 0101 	sbc.w	r1, lr, r1
   c3ca2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c3ca6:	d31b      	bcc.n	c3ce0 <__adddf3+0x124>
   c3ca8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c3cac:	d30c      	bcc.n	c3cc8 <__adddf3+0x10c>
   c3cae:	0849      	lsrs	r1, r1, #1
   c3cb0:	ea5f 0030 	movs.w	r0, r0, rrx
   c3cb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c3cb8:	f104 0401 	add.w	r4, r4, #1
   c3cbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3cc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3cc4:	f080 809a 	bcs.w	c3dfc <__adddf3+0x240>
   c3cc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c3ccc:	bf08      	it	eq
   c3cce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3cd2:	f150 0000 	adcs.w	r0, r0, #0
   c3cd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3cda:	ea41 0105 	orr.w	r1, r1, r5
   c3cde:	bd30      	pop	{r4, r5, pc}
   c3ce0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3ce4:	4140      	adcs	r0, r0
   c3ce6:	eb41 0101 	adc.w	r1, r1, r1
   c3cea:	3c01      	subs	r4, #1
   c3cec:	bf28      	it	cs
   c3cee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3cf2:	d2e9      	bcs.n	c3cc8 <__adddf3+0x10c>
   c3cf4:	f091 0f00 	teq	r1, #0
   c3cf8:	bf04      	itt	eq
   c3cfa:	4601      	moveq	r1, r0
   c3cfc:	2000      	moveq	r0, #0
   c3cfe:	fab1 f381 	clz	r3, r1
   c3d02:	bf08      	it	eq
   c3d04:	3320      	addeq	r3, #32
   c3d06:	f1a3 030b 	sub.w	r3, r3, #11
   c3d0a:	f1b3 0220 	subs.w	r2, r3, #32
   c3d0e:	da0c      	bge.n	c3d2a <__adddf3+0x16e>
   c3d10:	320c      	adds	r2, #12
   c3d12:	dd08      	ble.n	c3d26 <__adddf3+0x16a>
   c3d14:	f102 0c14 	add.w	ip, r2, #20
   c3d18:	f1c2 020c 	rsb	r2, r2, #12
   c3d1c:	fa01 f00c 	lsl.w	r0, r1, ip
   c3d20:	fa21 f102 	lsr.w	r1, r1, r2
   c3d24:	e00c      	b.n	c3d40 <__adddf3+0x184>
   c3d26:	f102 0214 	add.w	r2, r2, #20
   c3d2a:	bfd8      	it	le
   c3d2c:	f1c2 0c20 	rsble	ip, r2, #32
   c3d30:	fa01 f102 	lsl.w	r1, r1, r2
   c3d34:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3d38:	bfdc      	itt	le
   c3d3a:	ea41 010c 	orrle.w	r1, r1, ip
   c3d3e:	4090      	lslle	r0, r2
   c3d40:	1ae4      	subs	r4, r4, r3
   c3d42:	bfa2      	ittt	ge
   c3d44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3d48:	4329      	orrge	r1, r5
   c3d4a:	bd30      	popge	{r4, r5, pc}
   c3d4c:	ea6f 0404 	mvn.w	r4, r4
   c3d50:	3c1f      	subs	r4, #31
   c3d52:	da1c      	bge.n	c3d8e <__adddf3+0x1d2>
   c3d54:	340c      	adds	r4, #12
   c3d56:	dc0e      	bgt.n	c3d76 <__adddf3+0x1ba>
   c3d58:	f104 0414 	add.w	r4, r4, #20
   c3d5c:	f1c4 0220 	rsb	r2, r4, #32
   c3d60:	fa20 f004 	lsr.w	r0, r0, r4
   c3d64:	fa01 f302 	lsl.w	r3, r1, r2
   c3d68:	ea40 0003 	orr.w	r0, r0, r3
   c3d6c:	fa21 f304 	lsr.w	r3, r1, r4
   c3d70:	ea45 0103 	orr.w	r1, r5, r3
   c3d74:	bd30      	pop	{r4, r5, pc}
   c3d76:	f1c4 040c 	rsb	r4, r4, #12
   c3d7a:	f1c4 0220 	rsb	r2, r4, #32
   c3d7e:	fa20 f002 	lsr.w	r0, r0, r2
   c3d82:	fa01 f304 	lsl.w	r3, r1, r4
   c3d86:	ea40 0003 	orr.w	r0, r0, r3
   c3d8a:	4629      	mov	r1, r5
   c3d8c:	bd30      	pop	{r4, r5, pc}
   c3d8e:	fa21 f004 	lsr.w	r0, r1, r4
   c3d92:	4629      	mov	r1, r5
   c3d94:	bd30      	pop	{r4, r5, pc}
   c3d96:	f094 0f00 	teq	r4, #0
   c3d9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c3d9e:	bf06      	itte	eq
   c3da0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3da4:	3401      	addeq	r4, #1
   c3da6:	3d01      	subne	r5, #1
   c3da8:	e74e      	b.n	c3c48 <__adddf3+0x8c>
   c3daa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3dae:	bf18      	it	ne
   c3db0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3db4:	d029      	beq.n	c3e0a <__adddf3+0x24e>
   c3db6:	ea94 0f05 	teq	r4, r5
   c3dba:	bf08      	it	eq
   c3dbc:	ea90 0f02 	teqeq	r0, r2
   c3dc0:	d005      	beq.n	c3dce <__adddf3+0x212>
   c3dc2:	ea54 0c00 	orrs.w	ip, r4, r0
   c3dc6:	bf04      	itt	eq
   c3dc8:	4619      	moveq	r1, r3
   c3dca:	4610      	moveq	r0, r2
   c3dcc:	bd30      	pop	{r4, r5, pc}
   c3dce:	ea91 0f03 	teq	r1, r3
   c3dd2:	bf1e      	ittt	ne
   c3dd4:	2100      	movne	r1, #0
   c3dd6:	2000      	movne	r0, #0
   c3dd8:	bd30      	popne	{r4, r5, pc}
   c3dda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c3dde:	d105      	bne.n	c3dec <__adddf3+0x230>
   c3de0:	0040      	lsls	r0, r0, #1
   c3de2:	4149      	adcs	r1, r1
   c3de4:	bf28      	it	cs
   c3de6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c3dea:	bd30      	pop	{r4, r5, pc}
   c3dec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3df0:	bf3c      	itt	cc
   c3df2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3df6:	bd30      	popcc	{r4, r5, pc}
   c3df8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3dfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3e00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3e04:	f04f 0000 	mov.w	r0, #0
   c3e08:	bd30      	pop	{r4, r5, pc}
   c3e0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3e0e:	bf1a      	itte	ne
   c3e10:	4619      	movne	r1, r3
   c3e12:	4610      	movne	r0, r2
   c3e14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3e18:	bf1c      	itt	ne
   c3e1a:	460b      	movne	r3, r1
   c3e1c:	4602      	movne	r2, r0
   c3e1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3e22:	bf06      	itte	eq
   c3e24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3e28:	ea91 0f03 	teqeq	r1, r3
   c3e2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3e30:	bd30      	pop	{r4, r5, pc}
   c3e32:	bf00      	nop

000c3e34 <__aeabi_ui2d>:
   c3e34:	f090 0f00 	teq	r0, #0
   c3e38:	bf04      	itt	eq
   c3e3a:	2100      	moveq	r1, #0
   c3e3c:	4770      	bxeq	lr
   c3e3e:	b530      	push	{r4, r5, lr}
   c3e40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3e44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3e48:	f04f 0500 	mov.w	r5, #0
   c3e4c:	f04f 0100 	mov.w	r1, #0
   c3e50:	e750      	b.n	c3cf4 <__adddf3+0x138>
   c3e52:	bf00      	nop

000c3e54 <__aeabi_i2d>:
   c3e54:	f090 0f00 	teq	r0, #0
   c3e58:	bf04      	itt	eq
   c3e5a:	2100      	moveq	r1, #0
   c3e5c:	4770      	bxeq	lr
   c3e5e:	b530      	push	{r4, r5, lr}
   c3e60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3e64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3e68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c3e6c:	bf48      	it	mi
   c3e6e:	4240      	negmi	r0, r0
   c3e70:	f04f 0100 	mov.w	r1, #0
   c3e74:	e73e      	b.n	c3cf4 <__adddf3+0x138>
   c3e76:	bf00      	nop

000c3e78 <__aeabi_f2d>:
   c3e78:	0042      	lsls	r2, r0, #1
   c3e7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c3e7e:	ea4f 0131 	mov.w	r1, r1, rrx
   c3e82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3e86:	bf1f      	itttt	ne
   c3e88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c3e8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3e90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3e94:	4770      	bxne	lr
   c3e96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c3e9a:	bf08      	it	eq
   c3e9c:	4770      	bxeq	lr
   c3e9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3ea2:	bf04      	itt	eq
   c3ea4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3ea8:	4770      	bxeq	lr
   c3eaa:	b530      	push	{r4, r5, lr}
   c3eac:	f44f 7460 	mov.w	r4, #896	; 0x380
   c3eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3eb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3eb8:	e71c      	b.n	c3cf4 <__adddf3+0x138>
   c3eba:	bf00      	nop

000c3ebc <__aeabi_ul2d>:
   c3ebc:	ea50 0201 	orrs.w	r2, r0, r1
   c3ec0:	bf08      	it	eq
   c3ec2:	4770      	bxeq	lr
   c3ec4:	b530      	push	{r4, r5, lr}
   c3ec6:	f04f 0500 	mov.w	r5, #0
   c3eca:	e00a      	b.n	c3ee2 <__aeabi_l2d+0x16>

000c3ecc <__aeabi_l2d>:
   c3ecc:	ea50 0201 	orrs.w	r2, r0, r1
   c3ed0:	bf08      	it	eq
   c3ed2:	4770      	bxeq	lr
   c3ed4:	b530      	push	{r4, r5, lr}
   c3ed6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c3eda:	d502      	bpl.n	c3ee2 <__aeabi_l2d+0x16>
   c3edc:	4240      	negs	r0, r0
   c3ede:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3ee2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3ee6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3eea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c3eee:	f43f aed8 	beq.w	c3ca2 <__adddf3+0xe6>
   c3ef2:	f04f 0203 	mov.w	r2, #3
   c3ef6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3efa:	bf18      	it	ne
   c3efc:	3203      	addne	r2, #3
   c3efe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3f02:	bf18      	it	ne
   c3f04:	3203      	addne	r2, #3
   c3f06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c3f0a:	f1c2 0320 	rsb	r3, r2, #32
   c3f0e:	fa00 fc03 	lsl.w	ip, r0, r3
   c3f12:	fa20 f002 	lsr.w	r0, r0, r2
   c3f16:	fa01 fe03 	lsl.w	lr, r1, r3
   c3f1a:	ea40 000e 	orr.w	r0, r0, lr
   c3f1e:	fa21 f102 	lsr.w	r1, r1, r2
   c3f22:	4414      	add	r4, r2
   c3f24:	e6bd      	b.n	c3ca2 <__adddf3+0xe6>
   c3f26:	bf00      	nop

000c3f28 <__aeabi_dmul>:
   c3f28:	b570      	push	{r4, r5, r6, lr}
   c3f2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3f2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3f32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3f36:	bf1d      	ittte	ne
   c3f38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3f3c:	ea94 0f0c 	teqne	r4, ip
   c3f40:	ea95 0f0c 	teqne	r5, ip
   c3f44:	f000 f8de 	bleq	c4104 <__aeabi_dmul+0x1dc>
   c3f48:	442c      	add	r4, r5
   c3f4a:	ea81 0603 	eor.w	r6, r1, r3
   c3f4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3f52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3f56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c3f5a:	bf18      	it	ne
   c3f5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3f60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3f68:	d038      	beq.n	c3fdc <__aeabi_dmul+0xb4>
   c3f6a:	fba0 ce02 	umull	ip, lr, r0, r2
   c3f6e:	f04f 0500 	mov.w	r5, #0
   c3f72:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3f76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c3f7a:	fbe0 e503 	umlal	lr, r5, r0, r3
   c3f7e:	f04f 0600 	mov.w	r6, #0
   c3f82:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3f86:	f09c 0f00 	teq	ip, #0
   c3f8a:	bf18      	it	ne
   c3f8c:	f04e 0e01 	orrne.w	lr, lr, #1
   c3f90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3f94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3f98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c3f9c:	d204      	bcs.n	c3fa8 <__aeabi_dmul+0x80>
   c3f9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3fa2:	416d      	adcs	r5, r5
   c3fa4:	eb46 0606 	adc.w	r6, r6, r6
   c3fa8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c3fac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c3fb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c3fb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c3fb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c3fbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3fc0:	bf88      	it	hi
   c3fc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3fc6:	d81e      	bhi.n	c4006 <__aeabi_dmul+0xde>
   c3fc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c3fcc:	bf08      	it	eq
   c3fce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3fd2:	f150 0000 	adcs.w	r0, r0, #0
   c3fd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3fda:	bd70      	pop	{r4, r5, r6, pc}
   c3fdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3fe0:	ea46 0101 	orr.w	r1, r6, r1
   c3fe4:	ea40 0002 	orr.w	r0, r0, r2
   c3fe8:	ea81 0103 	eor.w	r1, r1, r3
   c3fec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3ff0:	bfc2      	ittt	gt
   c3ff2:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3ff6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3ffa:	bd70      	popgt	{r4, r5, r6, pc}
   c3ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4000:	f04f 0e00 	mov.w	lr, #0
   c4004:	3c01      	subs	r4, #1
   c4006:	f300 80ab 	bgt.w	c4160 <__aeabi_dmul+0x238>
   c400a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c400e:	bfde      	ittt	le
   c4010:	2000      	movle	r0, #0
   c4012:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c4016:	bd70      	pople	{r4, r5, r6, pc}
   c4018:	f1c4 0400 	rsb	r4, r4, #0
   c401c:	3c20      	subs	r4, #32
   c401e:	da35      	bge.n	c408c <__aeabi_dmul+0x164>
   c4020:	340c      	adds	r4, #12
   c4022:	dc1b      	bgt.n	c405c <__aeabi_dmul+0x134>
   c4024:	f104 0414 	add.w	r4, r4, #20
   c4028:	f1c4 0520 	rsb	r5, r4, #32
   c402c:	fa00 f305 	lsl.w	r3, r0, r5
   c4030:	fa20 f004 	lsr.w	r0, r0, r4
   c4034:	fa01 f205 	lsl.w	r2, r1, r5
   c4038:	ea40 0002 	orr.w	r0, r0, r2
   c403c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c4040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c4044:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c4048:	fa21 f604 	lsr.w	r6, r1, r4
   c404c:	eb42 0106 	adc.w	r1, r2, r6
   c4050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c4054:	bf08      	it	eq
   c4056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c405a:	bd70      	pop	{r4, r5, r6, pc}
   c405c:	f1c4 040c 	rsb	r4, r4, #12
   c4060:	f1c4 0520 	rsb	r5, r4, #32
   c4064:	fa00 f304 	lsl.w	r3, r0, r4
   c4068:	fa20 f005 	lsr.w	r0, r0, r5
   c406c:	fa01 f204 	lsl.w	r2, r1, r4
   c4070:	ea40 0002 	orr.w	r0, r0, r2
   c4074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4078:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c407c:	f141 0100 	adc.w	r1, r1, #0
   c4080:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c4084:	bf08      	it	eq
   c4086:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c408a:	bd70      	pop	{r4, r5, r6, pc}
   c408c:	f1c4 0520 	rsb	r5, r4, #32
   c4090:	fa00 f205 	lsl.w	r2, r0, r5
   c4094:	ea4e 0e02 	orr.w	lr, lr, r2
   c4098:	fa20 f304 	lsr.w	r3, r0, r4
   c409c:	fa01 f205 	lsl.w	r2, r1, r5
   c40a0:	ea43 0302 	orr.w	r3, r3, r2
   c40a4:	fa21 f004 	lsr.w	r0, r1, r4
   c40a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c40ac:	fa21 f204 	lsr.w	r2, r1, r4
   c40b0:	ea20 0002 	bic.w	r0, r0, r2
   c40b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c40b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c40bc:	bf08      	it	eq
   c40be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c40c2:	bd70      	pop	{r4, r5, r6, pc}
   c40c4:	f094 0f00 	teq	r4, #0
   c40c8:	d10f      	bne.n	c40ea <__aeabi_dmul+0x1c2>
   c40ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c40ce:	0040      	lsls	r0, r0, #1
   c40d0:	eb41 0101 	adc.w	r1, r1, r1
   c40d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c40d8:	bf08      	it	eq
   c40da:	3c01      	subeq	r4, #1
   c40dc:	d0f7      	beq.n	c40ce <__aeabi_dmul+0x1a6>
   c40de:	ea41 0106 	orr.w	r1, r1, r6
   c40e2:	f095 0f00 	teq	r5, #0
   c40e6:	bf18      	it	ne
   c40e8:	4770      	bxne	lr
   c40ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c40ee:	0052      	lsls	r2, r2, #1
   c40f0:	eb43 0303 	adc.w	r3, r3, r3
   c40f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c40f8:	bf08      	it	eq
   c40fa:	3d01      	subeq	r5, #1
   c40fc:	d0f7      	beq.n	c40ee <__aeabi_dmul+0x1c6>
   c40fe:	ea43 0306 	orr.w	r3, r3, r6
   c4102:	4770      	bx	lr
   c4104:	ea94 0f0c 	teq	r4, ip
   c4108:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c410c:	bf18      	it	ne
   c410e:	ea95 0f0c 	teqne	r5, ip
   c4112:	d00c      	beq.n	c412e <__aeabi_dmul+0x206>
   c4114:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4118:	bf18      	it	ne
   c411a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c411e:	d1d1      	bne.n	c40c4 <__aeabi_dmul+0x19c>
   c4120:	ea81 0103 	eor.w	r1, r1, r3
   c4124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4128:	f04f 0000 	mov.w	r0, #0
   c412c:	bd70      	pop	{r4, r5, r6, pc}
   c412e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4132:	bf06      	itte	eq
   c4134:	4610      	moveq	r0, r2
   c4136:	4619      	moveq	r1, r3
   c4138:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c413c:	d019      	beq.n	c4172 <__aeabi_dmul+0x24a>
   c413e:	ea94 0f0c 	teq	r4, ip
   c4142:	d102      	bne.n	c414a <__aeabi_dmul+0x222>
   c4144:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c4148:	d113      	bne.n	c4172 <__aeabi_dmul+0x24a>
   c414a:	ea95 0f0c 	teq	r5, ip
   c414e:	d105      	bne.n	c415c <__aeabi_dmul+0x234>
   c4150:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c4154:	bf1c      	itt	ne
   c4156:	4610      	movne	r0, r2
   c4158:	4619      	movne	r1, r3
   c415a:	d10a      	bne.n	c4172 <__aeabi_dmul+0x24a>
   c415c:	ea81 0103 	eor.w	r1, r1, r3
   c4160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4164:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c4168:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c416c:	f04f 0000 	mov.w	r0, #0
   c4170:	bd70      	pop	{r4, r5, r6, pc}
   c4172:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c4176:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c417a:	bd70      	pop	{r4, r5, r6, pc}

000c417c <__aeabi_ddiv>:
   c417c:	b570      	push	{r4, r5, r6, lr}
   c417e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c4182:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c4186:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c418a:	bf1d      	ittte	ne
   c418c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c4190:	ea94 0f0c 	teqne	r4, ip
   c4194:	ea95 0f0c 	teqne	r5, ip
   c4198:	f000 f8a7 	bleq	c42ea <__aeabi_ddiv+0x16e>
   c419c:	eba4 0405 	sub.w	r4, r4, r5
   c41a0:	ea81 0e03 	eor.w	lr, r1, r3
   c41a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c41a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c41ac:	f000 8088 	beq.w	c42c0 <__aeabi_ddiv+0x144>
   c41b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c41b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c41b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c41bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c41c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c41c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c41c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c41cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c41d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c41d4:	429d      	cmp	r5, r3
   c41d6:	bf08      	it	eq
   c41d8:	4296      	cmpeq	r6, r2
   c41da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c41de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c41e2:	d202      	bcs.n	c41ea <__aeabi_ddiv+0x6e>
   c41e4:	085b      	lsrs	r3, r3, #1
   c41e6:	ea4f 0232 	mov.w	r2, r2, rrx
   c41ea:	1ab6      	subs	r6, r6, r2
   c41ec:	eb65 0503 	sbc.w	r5, r5, r3
   c41f0:	085b      	lsrs	r3, r3, #1
   c41f2:	ea4f 0232 	mov.w	r2, r2, rrx
   c41f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c41fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c41fe:	ebb6 0e02 	subs.w	lr, r6, r2
   c4202:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4206:	bf22      	ittt	cs
   c4208:	1ab6      	subcs	r6, r6, r2
   c420a:	4675      	movcs	r5, lr
   c420c:	ea40 000c 	orrcs.w	r0, r0, ip
   c4210:	085b      	lsrs	r3, r3, #1
   c4212:	ea4f 0232 	mov.w	r2, r2, rrx
   c4216:	ebb6 0e02 	subs.w	lr, r6, r2
   c421a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c421e:	bf22      	ittt	cs
   c4220:	1ab6      	subcs	r6, r6, r2
   c4222:	4675      	movcs	r5, lr
   c4224:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c4228:	085b      	lsrs	r3, r3, #1
   c422a:	ea4f 0232 	mov.w	r2, r2, rrx
   c422e:	ebb6 0e02 	subs.w	lr, r6, r2
   c4232:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4236:	bf22      	ittt	cs
   c4238:	1ab6      	subcs	r6, r6, r2
   c423a:	4675      	movcs	r5, lr
   c423c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c4240:	085b      	lsrs	r3, r3, #1
   c4242:	ea4f 0232 	mov.w	r2, r2, rrx
   c4246:	ebb6 0e02 	subs.w	lr, r6, r2
   c424a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c424e:	bf22      	ittt	cs
   c4250:	1ab6      	subcs	r6, r6, r2
   c4252:	4675      	movcs	r5, lr
   c4254:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c4258:	ea55 0e06 	orrs.w	lr, r5, r6
   c425c:	d018      	beq.n	c4290 <__aeabi_ddiv+0x114>
   c425e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c4262:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c4266:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c426a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c426e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c4272:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c4276:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c427a:	d1c0      	bne.n	c41fe <__aeabi_ddiv+0x82>
   c427c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4280:	d10b      	bne.n	c429a <__aeabi_ddiv+0x11e>
   c4282:	ea41 0100 	orr.w	r1, r1, r0
   c4286:	f04f 0000 	mov.w	r0, #0
   c428a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c428e:	e7b6      	b.n	c41fe <__aeabi_ddiv+0x82>
   c4290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4294:	bf04      	itt	eq
   c4296:	4301      	orreq	r1, r0
   c4298:	2000      	moveq	r0, #0
   c429a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c429e:	bf88      	it	hi
   c42a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c42a4:	f63f aeaf 	bhi.w	c4006 <__aeabi_dmul+0xde>
   c42a8:	ebb5 0c03 	subs.w	ip, r5, r3
   c42ac:	bf04      	itt	eq
   c42ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   c42b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c42b6:	f150 0000 	adcs.w	r0, r0, #0
   c42ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c42be:	bd70      	pop	{r4, r5, r6, pc}
   c42c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c42c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c42c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c42cc:	bfc2      	ittt	gt
   c42ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   c42d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c42d6:	bd70      	popgt	{r4, r5, r6, pc}
   c42d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c42dc:	f04f 0e00 	mov.w	lr, #0
   c42e0:	3c01      	subs	r4, #1
   c42e2:	e690      	b.n	c4006 <__aeabi_dmul+0xde>
   c42e4:	ea45 0e06 	orr.w	lr, r5, r6
   c42e8:	e68d      	b.n	c4006 <__aeabi_dmul+0xde>
   c42ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c42ee:	ea94 0f0c 	teq	r4, ip
   c42f2:	bf08      	it	eq
   c42f4:	ea95 0f0c 	teqeq	r5, ip
   c42f8:	f43f af3b 	beq.w	c4172 <__aeabi_dmul+0x24a>
   c42fc:	ea94 0f0c 	teq	r4, ip
   c4300:	d10a      	bne.n	c4318 <__aeabi_ddiv+0x19c>
   c4302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c4306:	f47f af34 	bne.w	c4172 <__aeabi_dmul+0x24a>
   c430a:	ea95 0f0c 	teq	r5, ip
   c430e:	f47f af25 	bne.w	c415c <__aeabi_dmul+0x234>
   c4312:	4610      	mov	r0, r2
   c4314:	4619      	mov	r1, r3
   c4316:	e72c      	b.n	c4172 <__aeabi_dmul+0x24a>
   c4318:	ea95 0f0c 	teq	r5, ip
   c431c:	d106      	bne.n	c432c <__aeabi_ddiv+0x1b0>
   c431e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c4322:	f43f aefd 	beq.w	c4120 <__aeabi_dmul+0x1f8>
   c4326:	4610      	mov	r0, r2
   c4328:	4619      	mov	r1, r3
   c432a:	e722      	b.n	c4172 <__aeabi_dmul+0x24a>
   c432c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4330:	bf18      	it	ne
   c4332:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4336:	f47f aec5 	bne.w	c40c4 <__aeabi_dmul+0x19c>
   c433a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c433e:	f47f af0d 	bne.w	c415c <__aeabi_dmul+0x234>
   c4342:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c4346:	f47f aeeb 	bne.w	c4120 <__aeabi_dmul+0x1f8>
   c434a:	e712      	b.n	c4172 <__aeabi_dmul+0x24a>

000c434c <__gedf2>:
   c434c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c4350:	e006      	b.n	c4360 <__cmpdf2+0x4>
   c4352:	bf00      	nop

000c4354 <__ledf2>:
   c4354:	f04f 0c01 	mov.w	ip, #1
   c4358:	e002      	b.n	c4360 <__cmpdf2+0x4>
   c435a:	bf00      	nop

000c435c <__cmpdf2>:
   c435c:	f04f 0c01 	mov.w	ip, #1
   c4360:	f84d cd04 	str.w	ip, [sp, #-4]!
   c4364:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4368:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c436c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4370:	bf18      	it	ne
   c4372:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c4376:	d01b      	beq.n	c43b0 <__cmpdf2+0x54>
   c4378:	b001      	add	sp, #4
   c437a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c437e:	bf0c      	ite	eq
   c4380:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c4384:	ea91 0f03 	teqne	r1, r3
   c4388:	bf02      	ittt	eq
   c438a:	ea90 0f02 	teqeq	r0, r2
   c438e:	2000      	moveq	r0, #0
   c4390:	4770      	bxeq	lr
   c4392:	f110 0f00 	cmn.w	r0, #0
   c4396:	ea91 0f03 	teq	r1, r3
   c439a:	bf58      	it	pl
   c439c:	4299      	cmppl	r1, r3
   c439e:	bf08      	it	eq
   c43a0:	4290      	cmpeq	r0, r2
   c43a2:	bf2c      	ite	cs
   c43a4:	17d8      	asrcs	r0, r3, #31
   c43a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c43aa:	f040 0001 	orr.w	r0, r0, #1
   c43ae:	4770      	bx	lr
   c43b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c43b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c43b8:	d102      	bne.n	c43c0 <__cmpdf2+0x64>
   c43ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c43be:	d107      	bne.n	c43d0 <__cmpdf2+0x74>
   c43c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c43c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c43c8:	d1d6      	bne.n	c4378 <__cmpdf2+0x1c>
   c43ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c43ce:	d0d3      	beq.n	c4378 <__cmpdf2+0x1c>
   c43d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   c43d4:	4770      	bx	lr
   c43d6:	bf00      	nop

000c43d8 <__aeabi_cdrcmple>:
   c43d8:	4684      	mov	ip, r0
   c43da:	4610      	mov	r0, r2
   c43dc:	4662      	mov	r2, ip
   c43de:	468c      	mov	ip, r1
   c43e0:	4619      	mov	r1, r3
   c43e2:	4663      	mov	r3, ip
   c43e4:	e000      	b.n	c43e8 <__aeabi_cdcmpeq>
   c43e6:	bf00      	nop

000c43e8 <__aeabi_cdcmpeq>:
   c43e8:	b501      	push	{r0, lr}
   c43ea:	f7ff ffb7 	bl	c435c <__cmpdf2>
   c43ee:	2800      	cmp	r0, #0
   c43f0:	bf48      	it	mi
   c43f2:	f110 0f00 	cmnmi.w	r0, #0
   c43f6:	bd01      	pop	{r0, pc}

000c43f8 <__aeabi_dcmpeq>:
   c43f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c43fc:	f7ff fff4 	bl	c43e8 <__aeabi_cdcmpeq>
   c4400:	bf0c      	ite	eq
   c4402:	2001      	moveq	r0, #1
   c4404:	2000      	movne	r0, #0
   c4406:	f85d fb08 	ldr.w	pc, [sp], #8
   c440a:	bf00      	nop

000c440c <__aeabi_dcmplt>:
   c440c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4410:	f7ff ffea 	bl	c43e8 <__aeabi_cdcmpeq>
   c4414:	bf34      	ite	cc
   c4416:	2001      	movcc	r0, #1
   c4418:	2000      	movcs	r0, #0
   c441a:	f85d fb08 	ldr.w	pc, [sp], #8
   c441e:	bf00      	nop

000c4420 <__aeabi_dcmple>:
   c4420:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4424:	f7ff ffe0 	bl	c43e8 <__aeabi_cdcmpeq>
   c4428:	bf94      	ite	ls
   c442a:	2001      	movls	r0, #1
   c442c:	2000      	movhi	r0, #0
   c442e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4432:	bf00      	nop

000c4434 <__aeabi_dcmpge>:
   c4434:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4438:	f7ff ffce 	bl	c43d8 <__aeabi_cdrcmple>
   c443c:	bf94      	ite	ls
   c443e:	2001      	movls	r0, #1
   c4440:	2000      	movhi	r0, #0
   c4442:	f85d fb08 	ldr.w	pc, [sp], #8
   c4446:	bf00      	nop

000c4448 <__aeabi_dcmpgt>:
   c4448:	f84d ed08 	str.w	lr, [sp, #-8]!
   c444c:	f7ff ffc4 	bl	c43d8 <__aeabi_cdrcmple>
   c4450:	bf34      	ite	cc
   c4452:	2001      	movcc	r0, #1
   c4454:	2000      	movcs	r0, #0
   c4456:	f85d fb08 	ldr.w	pc, [sp], #8
   c445a:	bf00      	nop

000c445c <__aeabi_dcmpun>:
   c445c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4464:	d102      	bne.n	c446c <__aeabi_dcmpun+0x10>
   c4466:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c446a:	d10a      	bne.n	c4482 <__aeabi_dcmpun+0x26>
   c446c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4474:	d102      	bne.n	c447c <__aeabi_dcmpun+0x20>
   c4476:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c447a:	d102      	bne.n	c4482 <__aeabi_dcmpun+0x26>
   c447c:	f04f 0000 	mov.w	r0, #0
   c4480:	4770      	bx	lr
   c4482:	f04f 0001 	mov.w	r0, #1
   c4486:	4770      	bx	lr

000c4488 <__aeabi_d2iz>:
   c4488:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c448c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c4490:	d215      	bcs.n	c44be <__aeabi_d2iz+0x36>
   c4492:	d511      	bpl.n	c44b8 <__aeabi_d2iz+0x30>
   c4494:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4498:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c449c:	d912      	bls.n	c44c4 <__aeabi_d2iz+0x3c>
   c449e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c44a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c44a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c44aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c44ae:	fa23 f002 	lsr.w	r0, r3, r2
   c44b2:	bf18      	it	ne
   c44b4:	4240      	negne	r0, r0
   c44b6:	4770      	bx	lr
   c44b8:	f04f 0000 	mov.w	r0, #0
   c44bc:	4770      	bx	lr
   c44be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c44c2:	d105      	bne.n	c44d0 <__aeabi_d2iz+0x48>
   c44c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c44c8:	bf08      	it	eq
   c44ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c44ce:	4770      	bx	lr
   c44d0:	f04f 0000 	mov.w	r0, #0
   c44d4:	4770      	bx	lr
   c44d6:	bf00      	nop

000c44d8 <__aeabi_d2uiz>:
   c44d8:	004a      	lsls	r2, r1, #1
   c44da:	d211      	bcs.n	c4500 <__aeabi_d2uiz+0x28>
   c44dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c44e0:	d211      	bcs.n	c4506 <__aeabi_d2uiz+0x2e>
   c44e2:	d50d      	bpl.n	c4500 <__aeabi_d2uiz+0x28>
   c44e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c44e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c44ec:	d40e      	bmi.n	c450c <__aeabi_d2uiz+0x34>
   c44ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c44f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c44f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c44fa:	fa23 f002 	lsr.w	r0, r3, r2
   c44fe:	4770      	bx	lr
   c4500:	f04f 0000 	mov.w	r0, #0
   c4504:	4770      	bx	lr
   c4506:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c450a:	d102      	bne.n	c4512 <__aeabi_d2uiz+0x3a>
   c450c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c4510:	4770      	bx	lr
   c4512:	f04f 0000 	mov.w	r0, #0
   c4516:	4770      	bx	lr

000c4518 <__aeabi_d2f>:
   c4518:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c451c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c4520:	bf24      	itt	cs
   c4522:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c4526:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c452a:	d90d      	bls.n	c4548 <__aeabi_d2f+0x30>
   c452c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c4530:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c4534:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c4538:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c453c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c4540:	bf08      	it	eq
   c4542:	f020 0001 	biceq.w	r0, r0, #1
   c4546:	4770      	bx	lr
   c4548:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c454c:	d121      	bne.n	c4592 <__aeabi_d2f+0x7a>
   c454e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c4552:	bfbc      	itt	lt
   c4554:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c4558:	4770      	bxlt	lr
   c455a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c455e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c4562:	f1c2 0218 	rsb	r2, r2, #24
   c4566:	f1c2 0c20 	rsb	ip, r2, #32
   c456a:	fa10 f30c 	lsls.w	r3, r0, ip
   c456e:	fa20 f002 	lsr.w	r0, r0, r2
   c4572:	bf18      	it	ne
   c4574:	f040 0001 	orrne.w	r0, r0, #1
   c4578:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c457c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c4580:	fa03 fc0c 	lsl.w	ip, r3, ip
   c4584:	ea40 000c 	orr.w	r0, r0, ip
   c4588:	fa23 f302 	lsr.w	r3, r3, r2
   c458c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c4590:	e7cc      	b.n	c452c <__aeabi_d2f+0x14>
   c4592:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c4596:	d107      	bne.n	c45a8 <__aeabi_d2f+0x90>
   c4598:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c459c:	bf1e      	ittt	ne
   c459e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c45a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c45a6:	4770      	bxne	lr
   c45a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c45ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c45b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c45b4:	4770      	bx	lr
   c45b6:	bf00      	nop

000c45b8 <__aeabi_d2ulz>:
   c45b8:	b5d0      	push	{r4, r6, r7, lr}
   c45ba:	4b0c      	ldr	r3, [pc, #48]	; (c45ec <__aeabi_d2ulz+0x34>)
   c45bc:	2200      	movs	r2, #0
   c45be:	4606      	mov	r6, r0
   c45c0:	460f      	mov	r7, r1
   c45c2:	f7ff fcb1 	bl	c3f28 <__aeabi_dmul>
   c45c6:	f7ff ff87 	bl	c44d8 <__aeabi_d2uiz>
   c45ca:	4604      	mov	r4, r0
   c45cc:	f7ff fc32 	bl	c3e34 <__aeabi_ui2d>
   c45d0:	4b07      	ldr	r3, [pc, #28]	; (c45f0 <__aeabi_d2ulz+0x38>)
   c45d2:	2200      	movs	r2, #0
   c45d4:	f7ff fca8 	bl	c3f28 <__aeabi_dmul>
   c45d8:	4602      	mov	r2, r0
   c45da:	460b      	mov	r3, r1
   c45dc:	4630      	mov	r0, r6
   c45de:	4639      	mov	r1, r7
   c45e0:	f7ff faea 	bl	c3bb8 <__aeabi_dsub>
   c45e4:	f7ff ff78 	bl	c44d8 <__aeabi_d2uiz>
   c45e8:	4621      	mov	r1, r4
   c45ea:	bdd0      	pop	{r4, r6, r7, pc}
   c45ec:	3df00000 	.word	0x3df00000
   c45f0:	41f00000 	.word	0x41f00000

000c45f4 <atexit>:
   c45f4:	2300      	movs	r3, #0
   c45f6:	4601      	mov	r1, r0
   c45f8:	461a      	mov	r2, r3
   c45fa:	4618      	mov	r0, r3
   c45fc:	f001 b806 	b.w	c560c <__register_exitproc>

000c4600 <atof>:
   c4600:	2100      	movs	r1, #0
   c4602:	f000 bf6b 	b.w	c54dc <strtod>

000c4606 <atoi>:
   c4606:	220a      	movs	r2, #10
   c4608:	2100      	movs	r1, #0
   c460a:	f000 bff5 	b.w	c55f8 <strtol>
	...

000c4610 <isprint>:
   c4610:	4b02      	ldr	r3, [pc, #8]	; (c461c <isprint+0xc>)
   c4612:	4418      	add	r0, r3
   c4614:	7840      	ldrb	r0, [r0, #1]
   c4616:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c461a:	4770      	bx	lr
   c461c:	000c87e8 	.word	0x000c87e8

000c4620 <memcmp>:
   c4620:	b510      	push	{r4, lr}
   c4622:	3901      	subs	r1, #1
   c4624:	4402      	add	r2, r0
   c4626:	4290      	cmp	r0, r2
   c4628:	d101      	bne.n	c462e <memcmp+0xe>
   c462a:	2000      	movs	r0, #0
   c462c:	e005      	b.n	c463a <memcmp+0x1a>
   c462e:	7803      	ldrb	r3, [r0, #0]
   c4630:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c4634:	42a3      	cmp	r3, r4
   c4636:	d001      	beq.n	c463c <memcmp+0x1c>
   c4638:	1b18      	subs	r0, r3, r4
   c463a:	bd10      	pop	{r4, pc}
   c463c:	3001      	adds	r0, #1
   c463e:	e7f2      	b.n	c4626 <memcmp+0x6>

000c4640 <memcpy>:
   c4640:	440a      	add	r2, r1
   c4642:	4291      	cmp	r1, r2
   c4644:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c4648:	d100      	bne.n	c464c <memcpy+0xc>
   c464a:	4770      	bx	lr
   c464c:	b510      	push	{r4, lr}
   c464e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c4652:	f803 4f01 	strb.w	r4, [r3, #1]!
   c4656:	4291      	cmp	r1, r2
   c4658:	d1f9      	bne.n	c464e <memcpy+0xe>
   c465a:	bd10      	pop	{r4, pc}

000c465c <memmove>:
   c465c:	4288      	cmp	r0, r1
   c465e:	b510      	push	{r4, lr}
   c4660:	eb01 0402 	add.w	r4, r1, r2
   c4664:	d902      	bls.n	c466c <memmove+0x10>
   c4666:	4284      	cmp	r4, r0
   c4668:	4623      	mov	r3, r4
   c466a:	d807      	bhi.n	c467c <memmove+0x20>
   c466c:	1e43      	subs	r3, r0, #1
   c466e:	42a1      	cmp	r1, r4
   c4670:	d008      	beq.n	c4684 <memmove+0x28>
   c4672:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4676:	f803 2f01 	strb.w	r2, [r3, #1]!
   c467a:	e7f8      	b.n	c466e <memmove+0x12>
   c467c:	4402      	add	r2, r0
   c467e:	4601      	mov	r1, r0
   c4680:	428a      	cmp	r2, r1
   c4682:	d100      	bne.n	c4686 <memmove+0x2a>
   c4684:	bd10      	pop	{r4, pc}
   c4686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c468a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c468e:	e7f7      	b.n	c4680 <memmove+0x24>

000c4690 <memset>:
   c4690:	4402      	add	r2, r0
   c4692:	4603      	mov	r3, r0
   c4694:	4293      	cmp	r3, r2
   c4696:	d100      	bne.n	c469a <memset+0xa>
   c4698:	4770      	bx	lr
   c469a:	f803 1b01 	strb.w	r1, [r3], #1
   c469e:	e7f9      	b.n	c4694 <memset+0x4>

000c46a0 <srand>:
   c46a0:	b538      	push	{r3, r4, r5, lr}
   c46a2:	4b10      	ldr	r3, [pc, #64]	; (c46e4 <srand+0x44>)
   c46a4:	681d      	ldr	r5, [r3, #0]
   c46a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c46a8:	4604      	mov	r4, r0
   c46aa:	b9b3      	cbnz	r3, c46da <srand+0x3a>
   c46ac:	2018      	movs	r0, #24
   c46ae:	f7f9 fe77 	bl	be3a0 <malloc>
   c46b2:	4602      	mov	r2, r0
   c46b4:	63a8      	str	r0, [r5, #56]	; 0x38
   c46b6:	b920      	cbnz	r0, c46c2 <srand+0x22>
   c46b8:	4b0b      	ldr	r3, [pc, #44]	; (c46e8 <srand+0x48>)
   c46ba:	480c      	ldr	r0, [pc, #48]	; (c46ec <srand+0x4c>)
   c46bc:	2142      	movs	r1, #66	; 0x42
   c46be:	f7f9 febf 	bl	be440 <__assert_func>
   c46c2:	490b      	ldr	r1, [pc, #44]	; (c46f0 <srand+0x50>)
   c46c4:	4b0b      	ldr	r3, [pc, #44]	; (c46f4 <srand+0x54>)
   c46c6:	e9c0 1300 	strd	r1, r3, [r0]
   c46ca:	4b0b      	ldr	r3, [pc, #44]	; (c46f8 <srand+0x58>)
   c46cc:	6083      	str	r3, [r0, #8]
   c46ce:	230b      	movs	r3, #11
   c46d0:	8183      	strh	r3, [r0, #12]
   c46d2:	2100      	movs	r1, #0
   c46d4:	2001      	movs	r0, #1
   c46d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c46da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c46dc:	2200      	movs	r2, #0
   c46de:	611c      	str	r4, [r3, #16]
   c46e0:	615a      	str	r2, [r3, #20]
   c46e2:	bd38      	pop	{r3, r4, r5, pc}
   c46e4:	2003db48 	.word	0x2003db48
   c46e8:	000c8718 	.word	0x000c8718
   c46ec:	000c872f 	.word	0x000c872f
   c46f0:	abcd330e 	.word	0xabcd330e
   c46f4:	e66d1234 	.word	0xe66d1234
   c46f8:	0005deec 	.word	0x0005deec

000c46fc <strcat>:
   c46fc:	b510      	push	{r4, lr}
   c46fe:	4602      	mov	r2, r0
   c4700:	7814      	ldrb	r4, [r2, #0]
   c4702:	4613      	mov	r3, r2
   c4704:	3201      	adds	r2, #1
   c4706:	2c00      	cmp	r4, #0
   c4708:	d1fa      	bne.n	c4700 <strcat+0x4>
   c470a:	3b01      	subs	r3, #1
   c470c:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4710:	f803 2f01 	strb.w	r2, [r3, #1]!
   c4714:	2a00      	cmp	r2, #0
   c4716:	d1f9      	bne.n	c470c <strcat+0x10>
   c4718:	bd10      	pop	{r4, pc}

000c471a <strchr>:
   c471a:	b2c9      	uxtb	r1, r1
   c471c:	4603      	mov	r3, r0
   c471e:	f810 2b01 	ldrb.w	r2, [r0], #1
   c4722:	b11a      	cbz	r2, c472c <strchr+0x12>
   c4724:	428a      	cmp	r2, r1
   c4726:	d1f9      	bne.n	c471c <strchr+0x2>
   c4728:	4618      	mov	r0, r3
   c472a:	4770      	bx	lr
   c472c:	2900      	cmp	r1, #0
   c472e:	bf18      	it	ne
   c4730:	2300      	movne	r3, #0
   c4732:	e7f9      	b.n	c4728 <strchr+0xe>

000c4734 <strchrnul>:
   c4734:	b510      	push	{r4, lr}
   c4736:	4604      	mov	r4, r0
   c4738:	f7ff ffef 	bl	c471a <strchr>
   c473c:	b918      	cbnz	r0, c4746 <strchrnul+0x12>
   c473e:	4620      	mov	r0, r4
   c4740:	f000 f831 	bl	c47a6 <strlen>
   c4744:	4420      	add	r0, r4
   c4746:	bd10      	pop	{r4, pc}

000c4748 <strcmp>:
   c4748:	f810 2b01 	ldrb.w	r2, [r0], #1
   c474c:	f811 3b01 	ldrb.w	r3, [r1], #1
   c4750:	2a01      	cmp	r2, #1
   c4752:	bf28      	it	cs
   c4754:	429a      	cmpcs	r2, r3
   c4756:	d0f7      	beq.n	c4748 <strcmp>
   c4758:	1ad0      	subs	r0, r2, r3
   c475a:	4770      	bx	lr

000c475c <strcpy>:
   c475c:	4603      	mov	r3, r0
   c475e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c4762:	f803 2b01 	strb.w	r2, [r3], #1
   c4766:	2a00      	cmp	r2, #0
   c4768:	d1f9      	bne.n	c475e <strcpy+0x2>
   c476a:	4770      	bx	lr

000c476c <strdup>:
   c476c:	4b02      	ldr	r3, [pc, #8]	; (c4778 <strdup+0xc>)
   c476e:	4601      	mov	r1, r0
   c4770:	6818      	ldr	r0, [r3, #0]
   c4772:	f000 b803 	b.w	c477c <_strdup_r>
   c4776:	bf00      	nop
   c4778:	2003db48 	.word	0x2003db48

000c477c <_strdup_r>:
   c477c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c477e:	4604      	mov	r4, r0
   c4780:	4608      	mov	r0, r1
   c4782:	460d      	mov	r5, r1
   c4784:	f000 f80f 	bl	c47a6 <strlen>
   c4788:	1c42      	adds	r2, r0, #1
   c478a:	4611      	mov	r1, r2
   c478c:	4620      	mov	r0, r4
   c478e:	9201      	str	r2, [sp, #4]
   c4790:	f7f9 fe46 	bl	be420 <_malloc_r>
   c4794:	4604      	mov	r4, r0
   c4796:	b118      	cbz	r0, c47a0 <_strdup_r+0x24>
   c4798:	9a01      	ldr	r2, [sp, #4]
   c479a:	4629      	mov	r1, r5
   c479c:	f7ff ff50 	bl	c4640 <memcpy>
   c47a0:	4620      	mov	r0, r4
   c47a2:	b003      	add	sp, #12
   c47a4:	bd30      	pop	{r4, r5, pc}

000c47a6 <strlen>:
   c47a6:	4603      	mov	r3, r0
   c47a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   c47ac:	2a00      	cmp	r2, #0
   c47ae:	d1fb      	bne.n	c47a8 <strlen+0x2>
   c47b0:	1a18      	subs	r0, r3, r0
   c47b2:	3801      	subs	r0, #1
   c47b4:	4770      	bx	lr
	...

000c47b8 <strlwr>:
   c47b8:	b510      	push	{r4, lr}
   c47ba:	4c07      	ldr	r4, [pc, #28]	; (c47d8 <strlwr+0x20>)
   c47bc:	1e42      	subs	r2, r0, #1
   c47be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c47c2:	b903      	cbnz	r3, c47c6 <strlwr+0xe>
   c47c4:	bd10      	pop	{r4, pc}
   c47c6:	5ce1      	ldrb	r1, [r4, r3]
   c47c8:	f001 0103 	and.w	r1, r1, #3
   c47cc:	2901      	cmp	r1, #1
   c47ce:	bf08      	it	eq
   c47d0:	3320      	addeq	r3, #32
   c47d2:	7013      	strb	r3, [r2, #0]
   c47d4:	e7f3      	b.n	c47be <strlwr+0x6>
   c47d6:	bf00      	nop
   c47d8:	000c87e9 	.word	0x000c87e9

000c47dc <strncmp>:
   c47dc:	b510      	push	{r4, lr}
   c47de:	b17a      	cbz	r2, c4800 <strncmp+0x24>
   c47e0:	4603      	mov	r3, r0
   c47e2:	3901      	subs	r1, #1
   c47e4:	1884      	adds	r4, r0, r2
   c47e6:	f813 0b01 	ldrb.w	r0, [r3], #1
   c47ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c47ee:	4290      	cmp	r0, r2
   c47f0:	d101      	bne.n	c47f6 <strncmp+0x1a>
   c47f2:	42a3      	cmp	r3, r4
   c47f4:	d101      	bne.n	c47fa <strncmp+0x1e>
   c47f6:	1a80      	subs	r0, r0, r2
   c47f8:	bd10      	pop	{r4, pc}
   c47fa:	2800      	cmp	r0, #0
   c47fc:	d1f3      	bne.n	c47e6 <strncmp+0xa>
   c47fe:	e7fa      	b.n	c47f6 <strncmp+0x1a>
   c4800:	4610      	mov	r0, r2
   c4802:	e7f9      	b.n	c47f8 <strncmp+0x1c>

000c4804 <strncpy>:
   c4804:	b510      	push	{r4, lr}
   c4806:	3901      	subs	r1, #1
   c4808:	4603      	mov	r3, r0
   c480a:	b132      	cbz	r2, c481a <strncpy+0x16>
   c480c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c4810:	f803 4b01 	strb.w	r4, [r3], #1
   c4814:	3a01      	subs	r2, #1
   c4816:	2c00      	cmp	r4, #0
   c4818:	d1f7      	bne.n	c480a <strncpy+0x6>
   c481a:	441a      	add	r2, r3
   c481c:	2100      	movs	r1, #0
   c481e:	4293      	cmp	r3, r2
   c4820:	d100      	bne.n	c4824 <strncpy+0x20>
   c4822:	bd10      	pop	{r4, pc}
   c4824:	f803 1b01 	strb.w	r1, [r3], #1
   c4828:	e7f9      	b.n	c481e <strncpy+0x1a>

000c482a <strnlen>:
   c482a:	b510      	push	{r4, lr}
   c482c:	4602      	mov	r2, r0
   c482e:	4401      	add	r1, r0
   c4830:	428a      	cmp	r2, r1
   c4832:	4613      	mov	r3, r2
   c4834:	d003      	beq.n	c483e <strnlen+0x14>
   c4836:	781c      	ldrb	r4, [r3, #0]
   c4838:	3201      	adds	r2, #1
   c483a:	2c00      	cmp	r4, #0
   c483c:	d1f8      	bne.n	c4830 <strnlen+0x6>
   c483e:	1a18      	subs	r0, r3, r0
   c4840:	bd10      	pop	{r4, pc}

000c4842 <strrchr>:
   c4842:	b538      	push	{r3, r4, r5, lr}
   c4844:	4603      	mov	r3, r0
   c4846:	460c      	mov	r4, r1
   c4848:	b969      	cbnz	r1, c4866 <strrchr+0x24>
   c484a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c484e:	f7ff bf64 	b.w	c471a <strchr>
   c4852:	1c43      	adds	r3, r0, #1
   c4854:	4605      	mov	r5, r0
   c4856:	4621      	mov	r1, r4
   c4858:	4618      	mov	r0, r3
   c485a:	f7ff ff5e 	bl	c471a <strchr>
   c485e:	2800      	cmp	r0, #0
   c4860:	d1f7      	bne.n	c4852 <strrchr+0x10>
   c4862:	4628      	mov	r0, r5
   c4864:	bd38      	pop	{r3, r4, r5, pc}
   c4866:	2500      	movs	r5, #0
   c4868:	e7f5      	b.n	c4856 <strrchr+0x14>

000c486a <strstr>:
   c486a:	780a      	ldrb	r2, [r1, #0]
   c486c:	b570      	push	{r4, r5, r6, lr}
   c486e:	b96a      	cbnz	r2, c488c <strstr+0x22>
   c4870:	bd70      	pop	{r4, r5, r6, pc}
   c4872:	429a      	cmp	r2, r3
   c4874:	d109      	bne.n	c488a <strstr+0x20>
   c4876:	460c      	mov	r4, r1
   c4878:	4605      	mov	r5, r0
   c487a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c487e:	2b00      	cmp	r3, #0
   c4880:	d0f6      	beq.n	c4870 <strstr+0x6>
   c4882:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c4886:	429e      	cmp	r6, r3
   c4888:	d0f7      	beq.n	c487a <strstr+0x10>
   c488a:	3001      	adds	r0, #1
   c488c:	7803      	ldrb	r3, [r0, #0]
   c488e:	2b00      	cmp	r3, #0
   c4890:	d1ef      	bne.n	c4872 <strstr+0x8>
   c4892:	4618      	mov	r0, r3
   c4894:	e7ec      	b.n	c4870 <strstr+0x6>

000c4896 <sulp>:
   c4896:	b570      	push	{r4, r5, r6, lr}
   c4898:	4604      	mov	r4, r0
   c489a:	460d      	mov	r5, r1
   c489c:	ec45 4b10 	vmov	d0, r4, r5
   c48a0:	4616      	mov	r6, r2
   c48a2:	f001 fe0d 	bl	c64c0 <__ulp>
   c48a6:	ec51 0b10 	vmov	r0, r1, d0
   c48aa:	b17e      	cbz	r6, c48cc <sulp+0x36>
   c48ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c48b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c48b4:	2b00      	cmp	r3, #0
   c48b6:	dd09      	ble.n	c48cc <sulp+0x36>
   c48b8:	051b      	lsls	r3, r3, #20
   c48ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c48be:	2400      	movs	r4, #0
   c48c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c48c4:	4622      	mov	r2, r4
   c48c6:	462b      	mov	r3, r5
   c48c8:	f7ff fb2e 	bl	c3f28 <__aeabi_dmul>
   c48cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000c48d0 <_strtod_l>:
   c48d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c48d4:	ed2d 8b02 	vpush	{d8}
   c48d8:	b09d      	sub	sp, #116	; 0x74
   c48da:	461f      	mov	r7, r3
   c48dc:	2300      	movs	r3, #0
   c48de:	9318      	str	r3, [sp, #96]	; 0x60
   c48e0:	4ba2      	ldr	r3, [pc, #648]	; (c4b6c <_strtod_l+0x29c>)
   c48e2:	9213      	str	r2, [sp, #76]	; 0x4c
   c48e4:	681b      	ldr	r3, [r3, #0]
   c48e6:	9305      	str	r3, [sp, #20]
   c48e8:	4604      	mov	r4, r0
   c48ea:	4618      	mov	r0, r3
   c48ec:	4688      	mov	r8, r1
   c48ee:	f7ff ff5a 	bl	c47a6 <strlen>
   c48f2:	f04f 0a00 	mov.w	sl, #0
   c48f6:	4605      	mov	r5, r0
   c48f8:	f04f 0b00 	mov.w	fp, #0
   c48fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4902:	781a      	ldrb	r2, [r3, #0]
   c4904:	2a2b      	cmp	r2, #43	; 0x2b
   c4906:	d04e      	beq.n	c49a6 <_strtod_l+0xd6>
   c4908:	d83b      	bhi.n	c4982 <_strtod_l+0xb2>
   c490a:	2a0d      	cmp	r2, #13
   c490c:	d834      	bhi.n	c4978 <_strtod_l+0xa8>
   c490e:	2a08      	cmp	r2, #8
   c4910:	d834      	bhi.n	c497c <_strtod_l+0xac>
   c4912:	2a00      	cmp	r2, #0
   c4914:	d03e      	beq.n	c4994 <_strtod_l+0xc4>
   c4916:	2300      	movs	r3, #0
   c4918:	930a      	str	r3, [sp, #40]	; 0x28
   c491a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c491c:	7833      	ldrb	r3, [r6, #0]
   c491e:	2b30      	cmp	r3, #48	; 0x30
   c4920:	f040 80b0 	bne.w	c4a84 <_strtod_l+0x1b4>
   c4924:	7873      	ldrb	r3, [r6, #1]
   c4926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c492a:	2b58      	cmp	r3, #88	; 0x58
   c492c:	d168      	bne.n	c4a00 <_strtod_l+0x130>
   c492e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4930:	9301      	str	r3, [sp, #4]
   c4932:	ab18      	add	r3, sp, #96	; 0x60
   c4934:	9702      	str	r7, [sp, #8]
   c4936:	9300      	str	r3, [sp, #0]
   c4938:	4a8d      	ldr	r2, [pc, #564]	; (c4b70 <_strtod_l+0x2a0>)
   c493a:	ab19      	add	r3, sp, #100	; 0x64
   c493c:	a917      	add	r1, sp, #92	; 0x5c
   c493e:	4620      	mov	r0, r4
   c4940:	f000 ff2e 	bl	c57a0 <__gethex>
   c4944:	f010 0707 	ands.w	r7, r0, #7
   c4948:	4605      	mov	r5, r0
   c494a:	d005      	beq.n	c4958 <_strtod_l+0x88>
   c494c:	2f06      	cmp	r7, #6
   c494e:	d12c      	bne.n	c49aa <_strtod_l+0xda>
   c4950:	3601      	adds	r6, #1
   c4952:	2300      	movs	r3, #0
   c4954:	9617      	str	r6, [sp, #92]	; 0x5c
   c4956:	930a      	str	r3, [sp, #40]	; 0x28
   c4958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c495a:	2b00      	cmp	r3, #0
   c495c:	f040 8590 	bne.w	c5480 <_strtod_l+0xbb0>
   c4960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4962:	b1eb      	cbz	r3, c49a0 <_strtod_l+0xd0>
   c4964:	4652      	mov	r2, sl
   c4966:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c496a:	ec43 2b10 	vmov	d0, r2, r3
   c496e:	b01d      	add	sp, #116	; 0x74
   c4970:	ecbd 8b02 	vpop	{d8}
   c4974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4978:	2a20      	cmp	r2, #32
   c497a:	d1cc      	bne.n	c4916 <_strtod_l+0x46>
   c497c:	3301      	adds	r3, #1
   c497e:	9317      	str	r3, [sp, #92]	; 0x5c
   c4980:	e7be      	b.n	c4900 <_strtod_l+0x30>
   c4982:	2a2d      	cmp	r2, #45	; 0x2d
   c4984:	d1c7      	bne.n	c4916 <_strtod_l+0x46>
   c4986:	2201      	movs	r2, #1
   c4988:	920a      	str	r2, [sp, #40]	; 0x28
   c498a:	1c5a      	adds	r2, r3, #1
   c498c:	9217      	str	r2, [sp, #92]	; 0x5c
   c498e:	785b      	ldrb	r3, [r3, #1]
   c4990:	2b00      	cmp	r3, #0
   c4992:	d1c2      	bne.n	c491a <_strtod_l+0x4a>
   c4994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c4996:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c499a:	2b00      	cmp	r3, #0
   c499c:	f040 856e 	bne.w	c547c <_strtod_l+0xbac>
   c49a0:	4652      	mov	r2, sl
   c49a2:	465b      	mov	r3, fp
   c49a4:	e7e1      	b.n	c496a <_strtod_l+0x9a>
   c49a6:	2200      	movs	r2, #0
   c49a8:	e7ee      	b.n	c4988 <_strtod_l+0xb8>
   c49aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c49ac:	b13a      	cbz	r2, c49be <_strtod_l+0xee>
   c49ae:	2135      	movs	r1, #53	; 0x35
   c49b0:	a81a      	add	r0, sp, #104	; 0x68
   c49b2:	f001 fe90 	bl	c66d6 <__copybits>
   c49b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c49b8:	4620      	mov	r0, r4
   c49ba:	f001 fa4f 	bl	c5e5c <_Bfree>
   c49be:	3f01      	subs	r7, #1
   c49c0:	2f04      	cmp	r7, #4
   c49c2:	d806      	bhi.n	c49d2 <_strtod_l+0x102>
   c49c4:	e8df f007 	tbb	[pc, r7]
   c49c8:	1714030a 	.word	0x1714030a
   c49cc:	0a          	.byte	0x0a
   c49cd:	00          	.byte	0x00
   c49ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c49d2:	0728      	lsls	r0, r5, #28
   c49d4:	d5c0      	bpl.n	c4958 <_strtod_l+0x88>
   c49d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c49da:	e7bd      	b.n	c4958 <_strtod_l+0x88>
   c49dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c49e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c49e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c49e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c49ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c49ee:	e7f0      	b.n	c49d2 <_strtod_l+0x102>
   c49f0:	f8df b180 	ldr.w	fp, [pc, #384]	; c4b74 <_strtod_l+0x2a4>
   c49f4:	e7ed      	b.n	c49d2 <_strtod_l+0x102>
   c49f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c49fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c49fe:	e7e8      	b.n	c49d2 <_strtod_l+0x102>
   c4a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a02:	1c5a      	adds	r2, r3, #1
   c4a04:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a06:	785b      	ldrb	r3, [r3, #1]
   c4a08:	2b30      	cmp	r3, #48	; 0x30
   c4a0a:	d0f9      	beq.n	c4a00 <_strtod_l+0x130>
   c4a0c:	2b00      	cmp	r3, #0
   c4a0e:	d0a3      	beq.n	c4958 <_strtod_l+0x88>
   c4a10:	2301      	movs	r3, #1
   c4a12:	f04f 0900 	mov.w	r9, #0
   c4a16:	9304      	str	r3, [sp, #16]
   c4a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4a1a:	9308      	str	r3, [sp, #32]
   c4a1c:	f8cd 901c 	str.w	r9, [sp, #28]
   c4a20:	464f      	mov	r7, r9
   c4a22:	220a      	movs	r2, #10
   c4a24:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c4a26:	7806      	ldrb	r6, [r0, #0]
   c4a28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c4a2c:	b2d9      	uxtb	r1, r3
   c4a2e:	2909      	cmp	r1, #9
   c4a30:	d92a      	bls.n	c4a88 <_strtod_l+0x1b8>
   c4a32:	9905      	ldr	r1, [sp, #20]
   c4a34:	462a      	mov	r2, r5
   c4a36:	f7ff fed1 	bl	c47dc <strncmp>
   c4a3a:	b398      	cbz	r0, c4aa4 <_strtod_l+0x1d4>
   c4a3c:	2000      	movs	r0, #0
   c4a3e:	4632      	mov	r2, r6
   c4a40:	463d      	mov	r5, r7
   c4a42:	9005      	str	r0, [sp, #20]
   c4a44:	4603      	mov	r3, r0
   c4a46:	2a65      	cmp	r2, #101	; 0x65
   c4a48:	d001      	beq.n	c4a4e <_strtod_l+0x17e>
   c4a4a:	2a45      	cmp	r2, #69	; 0x45
   c4a4c:	d118      	bne.n	c4a80 <_strtod_l+0x1b0>
   c4a4e:	b91d      	cbnz	r5, c4a58 <_strtod_l+0x188>
   c4a50:	9a04      	ldr	r2, [sp, #16]
   c4a52:	4302      	orrs	r2, r0
   c4a54:	d09e      	beq.n	c4994 <_strtod_l+0xc4>
   c4a56:	2500      	movs	r5, #0
   c4a58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c4a5c:	f108 0201 	add.w	r2, r8, #1
   c4a60:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a62:	f898 2001 	ldrb.w	r2, [r8, #1]
   c4a66:	2a2b      	cmp	r2, #43	; 0x2b
   c4a68:	d075      	beq.n	c4b56 <_strtod_l+0x286>
   c4a6a:	2a2d      	cmp	r2, #45	; 0x2d
   c4a6c:	d07b      	beq.n	c4b66 <_strtod_l+0x296>
   c4a6e:	f04f 0c00 	mov.w	ip, #0
   c4a72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c4a76:	2909      	cmp	r1, #9
   c4a78:	f240 8082 	bls.w	c4b80 <_strtod_l+0x2b0>
   c4a7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4a80:	2600      	movs	r6, #0
   c4a82:	e09d      	b.n	c4bc0 <_strtod_l+0x2f0>
   c4a84:	2300      	movs	r3, #0
   c4a86:	e7c4      	b.n	c4a12 <_strtod_l+0x142>
   c4a88:	2f08      	cmp	r7, #8
   c4a8a:	bfd8      	it	le
   c4a8c:	9907      	ldrle	r1, [sp, #28]
   c4a8e:	f100 0001 	add.w	r0, r0, #1
   c4a92:	bfda      	itte	le
   c4a94:	fb02 3301 	mlale	r3, r2, r1, r3
   c4a98:	9307      	strle	r3, [sp, #28]
   c4a9a:	fb02 3909 	mlagt	r9, r2, r9, r3
   c4a9e:	3701      	adds	r7, #1
   c4aa0:	9017      	str	r0, [sp, #92]	; 0x5c
   c4aa2:	e7bf      	b.n	c4a24 <_strtod_l+0x154>
   c4aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4aa6:	195a      	adds	r2, r3, r5
   c4aa8:	9217      	str	r2, [sp, #92]	; 0x5c
   c4aaa:	5d5a      	ldrb	r2, [r3, r5]
   c4aac:	2f00      	cmp	r7, #0
   c4aae:	d037      	beq.n	c4b20 <_strtod_l+0x250>
   c4ab0:	9005      	str	r0, [sp, #20]
   c4ab2:	463d      	mov	r5, r7
   c4ab4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c4ab8:	2b09      	cmp	r3, #9
   c4aba:	d912      	bls.n	c4ae2 <_strtod_l+0x212>
   c4abc:	2301      	movs	r3, #1
   c4abe:	e7c2      	b.n	c4a46 <_strtod_l+0x176>
   c4ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4ac2:	1c5a      	adds	r2, r3, #1
   c4ac4:	9217      	str	r2, [sp, #92]	; 0x5c
   c4ac6:	785a      	ldrb	r2, [r3, #1]
   c4ac8:	3001      	adds	r0, #1
   c4aca:	2a30      	cmp	r2, #48	; 0x30
   c4acc:	d0f8      	beq.n	c4ac0 <_strtod_l+0x1f0>
   c4ace:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c4ad2:	2b08      	cmp	r3, #8
   c4ad4:	f200 84d9 	bhi.w	c548a <_strtod_l+0xbba>
   c4ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4ada:	9005      	str	r0, [sp, #20]
   c4adc:	2000      	movs	r0, #0
   c4ade:	9308      	str	r3, [sp, #32]
   c4ae0:	4605      	mov	r5, r0
   c4ae2:	3a30      	subs	r2, #48	; 0x30
   c4ae4:	f100 0301 	add.w	r3, r0, #1
   c4ae8:	d014      	beq.n	c4b14 <_strtod_l+0x244>
   c4aea:	9905      	ldr	r1, [sp, #20]
   c4aec:	4419      	add	r1, r3
   c4aee:	9105      	str	r1, [sp, #20]
   c4af0:	462b      	mov	r3, r5
   c4af2:	eb00 0e05 	add.w	lr, r0, r5
   c4af6:	210a      	movs	r1, #10
   c4af8:	4573      	cmp	r3, lr
   c4afa:	d113      	bne.n	c4b24 <_strtod_l+0x254>
   c4afc:	182b      	adds	r3, r5, r0
   c4afe:	2b08      	cmp	r3, #8
   c4b00:	f105 0501 	add.w	r5, r5, #1
   c4b04:	4405      	add	r5, r0
   c4b06:	dc1c      	bgt.n	c4b42 <_strtod_l+0x272>
   c4b08:	9907      	ldr	r1, [sp, #28]
   c4b0a:	230a      	movs	r3, #10
   c4b0c:	fb03 2301 	mla	r3, r3, r1, r2
   c4b10:	9307      	str	r3, [sp, #28]
   c4b12:	2300      	movs	r3, #0
   c4b14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b16:	1c51      	adds	r1, r2, #1
   c4b18:	9117      	str	r1, [sp, #92]	; 0x5c
   c4b1a:	7852      	ldrb	r2, [r2, #1]
   c4b1c:	4618      	mov	r0, r3
   c4b1e:	e7c9      	b.n	c4ab4 <_strtod_l+0x1e4>
   c4b20:	4638      	mov	r0, r7
   c4b22:	e7d2      	b.n	c4aca <_strtod_l+0x1fa>
   c4b24:	2b08      	cmp	r3, #8
   c4b26:	dc04      	bgt.n	c4b32 <_strtod_l+0x262>
   c4b28:	9e07      	ldr	r6, [sp, #28]
   c4b2a:	434e      	muls	r6, r1
   c4b2c:	9607      	str	r6, [sp, #28]
   c4b2e:	3301      	adds	r3, #1
   c4b30:	e7e2      	b.n	c4af8 <_strtod_l+0x228>
   c4b32:	f103 0c01 	add.w	ip, r3, #1
   c4b36:	f1bc 0f10 	cmp.w	ip, #16
   c4b3a:	bfd8      	it	le
   c4b3c:	fb01 f909 	mulle.w	r9, r1, r9
   c4b40:	e7f5      	b.n	c4b2e <_strtod_l+0x25e>
   c4b42:	2d10      	cmp	r5, #16
   c4b44:	bfdc      	itt	le
   c4b46:	230a      	movle	r3, #10
   c4b48:	fb03 2909 	mlale	r9, r3, r9, r2
   c4b4c:	e7e1      	b.n	c4b12 <_strtod_l+0x242>
   c4b4e:	2300      	movs	r3, #0
   c4b50:	9305      	str	r3, [sp, #20]
   c4b52:	2301      	movs	r3, #1
   c4b54:	e77c      	b.n	c4a50 <_strtod_l+0x180>
   c4b56:	f04f 0c00 	mov.w	ip, #0
   c4b5a:	f108 0202 	add.w	r2, r8, #2
   c4b5e:	9217      	str	r2, [sp, #92]	; 0x5c
   c4b60:	f898 2002 	ldrb.w	r2, [r8, #2]
   c4b64:	e785      	b.n	c4a72 <_strtod_l+0x1a2>
   c4b66:	f04f 0c01 	mov.w	ip, #1
   c4b6a:	e7f6      	b.n	c4b5a <_strtod_l+0x28a>
   c4b6c:	000c895c 	.word	0x000c895c
   c4b70:	000c8794 	.word	0x000c8794
   c4b74:	7ff00000 	.word	0x7ff00000
   c4b78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b7a:	1c51      	adds	r1, r2, #1
   c4b7c:	9117      	str	r1, [sp, #92]	; 0x5c
   c4b7e:	7852      	ldrb	r2, [r2, #1]
   c4b80:	2a30      	cmp	r2, #48	; 0x30
   c4b82:	d0f9      	beq.n	c4b78 <_strtod_l+0x2a8>
   c4b84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c4b88:	2908      	cmp	r1, #8
   c4b8a:	f63f af79 	bhi.w	c4a80 <_strtod_l+0x1b0>
   c4b8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c4b92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b94:	9206      	str	r2, [sp, #24]
   c4b96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4b98:	1c51      	adds	r1, r2, #1
   c4b9a:	9117      	str	r1, [sp, #92]	; 0x5c
   c4b9c:	7852      	ldrb	r2, [r2, #1]
   c4b9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c4ba2:	2e09      	cmp	r6, #9
   c4ba4:	d937      	bls.n	c4c16 <_strtod_l+0x346>
   c4ba6:	9e06      	ldr	r6, [sp, #24]
   c4ba8:	1b89      	subs	r1, r1, r6
   c4baa:	2908      	cmp	r1, #8
   c4bac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c4bb0:	dc02      	bgt.n	c4bb8 <_strtod_l+0x2e8>
   c4bb2:	4576      	cmp	r6, lr
   c4bb4:	bfa8      	it	ge
   c4bb6:	4676      	movge	r6, lr
   c4bb8:	f1bc 0f00 	cmp.w	ip, #0
   c4bbc:	d000      	beq.n	c4bc0 <_strtod_l+0x2f0>
   c4bbe:	4276      	negs	r6, r6
   c4bc0:	2d00      	cmp	r5, #0
   c4bc2:	d14d      	bne.n	c4c60 <_strtod_l+0x390>
   c4bc4:	9904      	ldr	r1, [sp, #16]
   c4bc6:	4301      	orrs	r1, r0
   c4bc8:	f47f aec6 	bne.w	c4958 <_strtod_l+0x88>
   c4bcc:	2b00      	cmp	r3, #0
   c4bce:	f47f aee1 	bne.w	c4994 <_strtod_l+0xc4>
   c4bd2:	2a69      	cmp	r2, #105	; 0x69
   c4bd4:	d027      	beq.n	c4c26 <_strtod_l+0x356>
   c4bd6:	dc24      	bgt.n	c4c22 <_strtod_l+0x352>
   c4bd8:	2a49      	cmp	r2, #73	; 0x49
   c4bda:	d024      	beq.n	c4c26 <_strtod_l+0x356>
   c4bdc:	2a4e      	cmp	r2, #78	; 0x4e
   c4bde:	f47f aed9 	bne.w	c4994 <_strtod_l+0xc4>
   c4be2:	499f      	ldr	r1, [pc, #636]	; (c4e60 <_strtod_l+0x590>)
   c4be4:	a817      	add	r0, sp, #92	; 0x5c
   c4be6:	f001 f833 	bl	c5c50 <__match>
   c4bea:	2800      	cmp	r0, #0
   c4bec:	f43f aed2 	beq.w	c4994 <_strtod_l+0xc4>
   c4bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4bf2:	781b      	ldrb	r3, [r3, #0]
   c4bf4:	2b28      	cmp	r3, #40	; 0x28
   c4bf6:	d12d      	bne.n	c4c54 <_strtod_l+0x384>
   c4bf8:	499a      	ldr	r1, [pc, #616]	; (c4e64 <_strtod_l+0x594>)
   c4bfa:	aa1a      	add	r2, sp, #104	; 0x68
   c4bfc:	a817      	add	r0, sp, #92	; 0x5c
   c4bfe:	f001 f83b 	bl	c5c78 <__hexnan>
   c4c02:	2805      	cmp	r0, #5
   c4c04:	d126      	bne.n	c4c54 <_strtod_l+0x384>
   c4c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4c08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c4c0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4c10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4c14:	e6a0      	b.n	c4958 <_strtod_l+0x88>
   c4c16:	210a      	movs	r1, #10
   c4c18:	fb01 2e0e 	mla	lr, r1, lr, r2
   c4c1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4c20:	e7b9      	b.n	c4b96 <_strtod_l+0x2c6>
   c4c22:	2a6e      	cmp	r2, #110	; 0x6e
   c4c24:	e7db      	b.n	c4bde <_strtod_l+0x30e>
   c4c26:	4990      	ldr	r1, [pc, #576]	; (c4e68 <_strtod_l+0x598>)
   c4c28:	a817      	add	r0, sp, #92	; 0x5c
   c4c2a:	f001 f811 	bl	c5c50 <__match>
   c4c2e:	2800      	cmp	r0, #0
   c4c30:	f43f aeb0 	beq.w	c4994 <_strtod_l+0xc4>
   c4c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4c36:	498d      	ldr	r1, [pc, #564]	; (c4e6c <_strtod_l+0x59c>)
   c4c38:	3b01      	subs	r3, #1
   c4c3a:	a817      	add	r0, sp, #92	; 0x5c
   c4c3c:	9317      	str	r3, [sp, #92]	; 0x5c
   c4c3e:	f001 f807 	bl	c5c50 <__match>
   c4c42:	b910      	cbnz	r0, c4c4a <_strtod_l+0x37a>
   c4c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4c46:	3301      	adds	r3, #1
   c4c48:	9317      	str	r3, [sp, #92]	; 0x5c
   c4c4a:	f8df b230 	ldr.w	fp, [pc, #560]	; c4e7c <_strtod_l+0x5ac>
   c4c4e:	f04f 0a00 	mov.w	sl, #0
   c4c52:	e681      	b.n	c4958 <_strtod_l+0x88>
   c4c54:	4886      	ldr	r0, [pc, #536]	; (c4e70 <_strtod_l+0x5a0>)
   c4c56:	f001 fd93 	bl	c6780 <nan>
   c4c5a:	ec5b ab10 	vmov	sl, fp, d0
   c4c5e:	e67b      	b.n	c4958 <_strtod_l+0x88>
   c4c60:	9b05      	ldr	r3, [sp, #20]
   c4c62:	9807      	ldr	r0, [sp, #28]
   c4c64:	1af3      	subs	r3, r6, r3
   c4c66:	2f00      	cmp	r7, #0
   c4c68:	bf08      	it	eq
   c4c6a:	462f      	moveq	r7, r5
   c4c6c:	2d10      	cmp	r5, #16
   c4c6e:	9306      	str	r3, [sp, #24]
   c4c70:	46a8      	mov	r8, r5
   c4c72:	bfa8      	it	ge
   c4c74:	f04f 0810 	movge.w	r8, #16
   c4c78:	f7ff f8dc 	bl	c3e34 <__aeabi_ui2d>
   c4c7c:	2d09      	cmp	r5, #9
   c4c7e:	4682      	mov	sl, r0
   c4c80:	468b      	mov	fp, r1
   c4c82:	dd13      	ble.n	c4cac <_strtod_l+0x3dc>
   c4c84:	4b7b      	ldr	r3, [pc, #492]	; (c4e74 <_strtod_l+0x5a4>)
   c4c86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c4c8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c4c8e:	f7ff f94b 	bl	c3f28 <__aeabi_dmul>
   c4c92:	4682      	mov	sl, r0
   c4c94:	4648      	mov	r0, r9
   c4c96:	468b      	mov	fp, r1
   c4c98:	f7ff f8cc 	bl	c3e34 <__aeabi_ui2d>
   c4c9c:	4602      	mov	r2, r0
   c4c9e:	460b      	mov	r3, r1
   c4ca0:	4650      	mov	r0, sl
   c4ca2:	4659      	mov	r1, fp
   c4ca4:	f7fe ff8a 	bl	c3bbc <__adddf3>
   c4ca8:	4682      	mov	sl, r0
   c4caa:	468b      	mov	fp, r1
   c4cac:	2d0f      	cmp	r5, #15
   c4cae:	dc38      	bgt.n	c4d22 <_strtod_l+0x452>
   c4cb0:	9b06      	ldr	r3, [sp, #24]
   c4cb2:	2b00      	cmp	r3, #0
   c4cb4:	f43f ae50 	beq.w	c4958 <_strtod_l+0x88>
   c4cb8:	dd24      	ble.n	c4d04 <_strtod_l+0x434>
   c4cba:	2b16      	cmp	r3, #22
   c4cbc:	dc0b      	bgt.n	c4cd6 <_strtod_l+0x406>
   c4cbe:	496d      	ldr	r1, [pc, #436]	; (c4e74 <_strtod_l+0x5a4>)
   c4cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4cc8:	4652      	mov	r2, sl
   c4cca:	465b      	mov	r3, fp
   c4ccc:	f7ff f92c 	bl	c3f28 <__aeabi_dmul>
   c4cd0:	4682      	mov	sl, r0
   c4cd2:	468b      	mov	fp, r1
   c4cd4:	e640      	b.n	c4958 <_strtod_l+0x88>
   c4cd6:	9a06      	ldr	r2, [sp, #24]
   c4cd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c4cdc:	4293      	cmp	r3, r2
   c4cde:	db20      	blt.n	c4d22 <_strtod_l+0x452>
   c4ce0:	4c64      	ldr	r4, [pc, #400]	; (c4e74 <_strtod_l+0x5a4>)
   c4ce2:	f1c5 050f 	rsb	r5, r5, #15
   c4ce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c4cea:	4652      	mov	r2, sl
   c4cec:	465b      	mov	r3, fp
   c4cee:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4cf2:	f7ff f919 	bl	c3f28 <__aeabi_dmul>
   c4cf6:	9b06      	ldr	r3, [sp, #24]
   c4cf8:	1b5d      	subs	r5, r3, r5
   c4cfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c4cfe:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4d02:	e7e3      	b.n	c4ccc <_strtod_l+0x3fc>
   c4d04:	9b06      	ldr	r3, [sp, #24]
   c4d06:	3316      	adds	r3, #22
   c4d08:	db0b      	blt.n	c4d22 <_strtod_l+0x452>
   c4d0a:	9b05      	ldr	r3, [sp, #20]
   c4d0c:	1b9e      	subs	r6, r3, r6
   c4d0e:	4b59      	ldr	r3, [pc, #356]	; (c4e74 <_strtod_l+0x5a4>)
   c4d10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4d14:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4d18:	4650      	mov	r0, sl
   c4d1a:	4659      	mov	r1, fp
   c4d1c:	f7ff fa2e 	bl	c417c <__aeabi_ddiv>
   c4d20:	e7d6      	b.n	c4cd0 <_strtod_l+0x400>
   c4d22:	9b06      	ldr	r3, [sp, #24]
   c4d24:	eba5 0808 	sub.w	r8, r5, r8
   c4d28:	4498      	add	r8, r3
   c4d2a:	f1b8 0f00 	cmp.w	r8, #0
   c4d2e:	dd74      	ble.n	c4e1a <_strtod_l+0x54a>
   c4d30:	f018 030f 	ands.w	r3, r8, #15
   c4d34:	d00a      	beq.n	c4d4c <_strtod_l+0x47c>
   c4d36:	494f      	ldr	r1, [pc, #316]	; (c4e74 <_strtod_l+0x5a4>)
   c4d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4d3c:	4652      	mov	r2, sl
   c4d3e:	465b      	mov	r3, fp
   c4d40:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4d44:	f7ff f8f0 	bl	c3f28 <__aeabi_dmul>
   c4d48:	4682      	mov	sl, r0
   c4d4a:	468b      	mov	fp, r1
   c4d4c:	f038 080f 	bics.w	r8, r8, #15
   c4d50:	d04f      	beq.n	c4df2 <_strtod_l+0x522>
   c4d52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4d56:	dd22      	ble.n	c4d9e <_strtod_l+0x4ce>
   c4d58:	2500      	movs	r5, #0
   c4d5a:	462e      	mov	r6, r5
   c4d5c:	9507      	str	r5, [sp, #28]
   c4d5e:	9505      	str	r5, [sp, #20]
   c4d60:	2322      	movs	r3, #34	; 0x22
   c4d62:	f8df b118 	ldr.w	fp, [pc, #280]	; c4e7c <_strtod_l+0x5ac>
   c4d66:	6023      	str	r3, [r4, #0]
   c4d68:	f04f 0a00 	mov.w	sl, #0
   c4d6c:	9b07      	ldr	r3, [sp, #28]
   c4d6e:	2b00      	cmp	r3, #0
   c4d70:	f43f adf2 	beq.w	c4958 <_strtod_l+0x88>
   c4d74:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4d76:	4620      	mov	r0, r4
   c4d78:	f001 f870 	bl	c5e5c <_Bfree>
   c4d7c:	9905      	ldr	r1, [sp, #20]
   c4d7e:	4620      	mov	r0, r4
   c4d80:	f001 f86c 	bl	c5e5c <_Bfree>
   c4d84:	4631      	mov	r1, r6
   c4d86:	4620      	mov	r0, r4
   c4d88:	f001 f868 	bl	c5e5c <_Bfree>
   c4d8c:	9907      	ldr	r1, [sp, #28]
   c4d8e:	4620      	mov	r0, r4
   c4d90:	f001 f864 	bl	c5e5c <_Bfree>
   c4d94:	4629      	mov	r1, r5
   c4d96:	4620      	mov	r0, r4
   c4d98:	f001 f860 	bl	c5e5c <_Bfree>
   c4d9c:	e5dc      	b.n	c4958 <_strtod_l+0x88>
   c4d9e:	4b36      	ldr	r3, [pc, #216]	; (c4e78 <_strtod_l+0x5a8>)
   c4da0:	9304      	str	r3, [sp, #16]
   c4da2:	2300      	movs	r3, #0
   c4da4:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4da8:	4650      	mov	r0, sl
   c4daa:	4659      	mov	r1, fp
   c4dac:	4699      	mov	r9, r3
   c4dae:	f1b8 0f01 	cmp.w	r8, #1
   c4db2:	dc21      	bgt.n	c4df8 <_strtod_l+0x528>
   c4db4:	b10b      	cbz	r3, c4dba <_strtod_l+0x4ea>
   c4db6:	4682      	mov	sl, r0
   c4db8:	468b      	mov	fp, r1
   c4dba:	4b2f      	ldr	r3, [pc, #188]	; (c4e78 <_strtod_l+0x5a8>)
   c4dbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4dc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4dc4:	4652      	mov	r2, sl
   c4dc6:	465b      	mov	r3, fp
   c4dc8:	e9d9 0100 	ldrd	r0, r1, [r9]
   c4dcc:	f7ff f8ac 	bl	c3f28 <__aeabi_dmul>
   c4dd0:	4b2a      	ldr	r3, [pc, #168]	; (c4e7c <_strtod_l+0x5ac>)
   c4dd2:	460a      	mov	r2, r1
   c4dd4:	400b      	ands	r3, r1
   c4dd6:	492a      	ldr	r1, [pc, #168]	; (c4e80 <_strtod_l+0x5b0>)
   c4dd8:	428b      	cmp	r3, r1
   c4dda:	4682      	mov	sl, r0
   c4ddc:	d8bc      	bhi.n	c4d58 <_strtod_l+0x488>
   c4dde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4de2:	428b      	cmp	r3, r1
   c4de4:	bf86      	itte	hi
   c4de6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4e84 <_strtod_l+0x5b4>
   c4dea:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c4dee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4df2:	2300      	movs	r3, #0
   c4df4:	9304      	str	r3, [sp, #16]
   c4df6:	e084      	b.n	c4f02 <_strtod_l+0x632>
   c4df8:	f018 0f01 	tst.w	r8, #1
   c4dfc:	d005      	beq.n	c4e0a <_strtod_l+0x53a>
   c4dfe:	9b04      	ldr	r3, [sp, #16]
   c4e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4e04:	f7ff f890 	bl	c3f28 <__aeabi_dmul>
   c4e08:	2301      	movs	r3, #1
   c4e0a:	9a04      	ldr	r2, [sp, #16]
   c4e0c:	3208      	adds	r2, #8
   c4e0e:	f109 0901 	add.w	r9, r9, #1
   c4e12:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4e16:	9204      	str	r2, [sp, #16]
   c4e18:	e7c9      	b.n	c4dae <_strtod_l+0x4de>
   c4e1a:	d0ea      	beq.n	c4df2 <_strtod_l+0x522>
   c4e1c:	f1c8 0800 	rsb	r8, r8, #0
   c4e20:	f018 020f 	ands.w	r2, r8, #15
   c4e24:	d00a      	beq.n	c4e3c <_strtod_l+0x56c>
   c4e26:	4b13      	ldr	r3, [pc, #76]	; (c4e74 <_strtod_l+0x5a4>)
   c4e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c4e2c:	4650      	mov	r0, sl
   c4e2e:	4659      	mov	r1, fp
   c4e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4e34:	f7ff f9a2 	bl	c417c <__aeabi_ddiv>
   c4e38:	4682      	mov	sl, r0
   c4e3a:	468b      	mov	fp, r1
   c4e3c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4e40:	d0d7      	beq.n	c4df2 <_strtod_l+0x522>
   c4e42:	f1b8 0f1f 	cmp.w	r8, #31
   c4e46:	dd1f      	ble.n	c4e88 <_strtod_l+0x5b8>
   c4e48:	2500      	movs	r5, #0
   c4e4a:	462e      	mov	r6, r5
   c4e4c:	9507      	str	r5, [sp, #28]
   c4e4e:	9505      	str	r5, [sp, #20]
   c4e50:	2322      	movs	r3, #34	; 0x22
   c4e52:	f04f 0a00 	mov.w	sl, #0
   c4e56:	f04f 0b00 	mov.w	fp, #0
   c4e5a:	6023      	str	r3, [r4, #0]
   c4e5c:	e786      	b.n	c4d6c <_strtod_l+0x49c>
   c4e5e:	bf00      	nop
   c4e60:	000c8791 	.word	0x000c8791
   c4e64:	000c87a8 	.word	0x000c87a8
   c4e68:	000c8788 	.word	0x000c8788
   c4e6c:	000c878b 	.word	0x000c878b
   c4e70:	000c8057 	.word	0x000c8057
   c4e74:	000c89f0 	.word	0x000c89f0
   c4e78:	000c89c8 	.word	0x000c89c8
   c4e7c:	7ff00000 	.word	0x7ff00000
   c4e80:	7ca00000 	.word	0x7ca00000
   c4e84:	7fefffff 	.word	0x7fefffff
   c4e88:	f018 0310 	ands.w	r3, r8, #16
   c4e8c:	bf18      	it	ne
   c4e8e:	236a      	movne	r3, #106	; 0x6a
   c4e90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c5240 <_strtod_l+0x970>
   c4e94:	9304      	str	r3, [sp, #16]
   c4e96:	4650      	mov	r0, sl
   c4e98:	4659      	mov	r1, fp
   c4e9a:	2300      	movs	r3, #0
   c4e9c:	f018 0f01 	tst.w	r8, #1
   c4ea0:	d004      	beq.n	c4eac <_strtod_l+0x5dc>
   c4ea2:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4ea6:	f7ff f83f 	bl	c3f28 <__aeabi_dmul>
   c4eaa:	2301      	movs	r3, #1
   c4eac:	ea5f 0868 	movs.w	r8, r8, asr #1
   c4eb0:	f109 0908 	add.w	r9, r9, #8
   c4eb4:	d1f2      	bne.n	c4e9c <_strtod_l+0x5cc>
   c4eb6:	b10b      	cbz	r3, c4ebc <_strtod_l+0x5ec>
   c4eb8:	4682      	mov	sl, r0
   c4eba:	468b      	mov	fp, r1
   c4ebc:	9b04      	ldr	r3, [sp, #16]
   c4ebe:	b1c3      	cbz	r3, c4ef2 <_strtod_l+0x622>
   c4ec0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4ec4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4ec8:	2b00      	cmp	r3, #0
   c4eca:	4659      	mov	r1, fp
   c4ecc:	dd11      	ble.n	c4ef2 <_strtod_l+0x622>
   c4ece:	2b1f      	cmp	r3, #31
   c4ed0:	f340 8124 	ble.w	c511c <_strtod_l+0x84c>
   c4ed4:	2b34      	cmp	r3, #52	; 0x34
   c4ed6:	bfde      	ittt	le
   c4ed8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c4edc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c4ee0:	fa03 f202 	lslle.w	r2, r3, r2
   c4ee4:	f04f 0a00 	mov.w	sl, #0
   c4ee8:	bfcc      	ite	gt
   c4eea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c4eee:	ea02 0b01 	andle.w	fp, r2, r1
   c4ef2:	2200      	movs	r2, #0
   c4ef4:	2300      	movs	r3, #0
   c4ef6:	4650      	mov	r0, sl
   c4ef8:	4659      	mov	r1, fp
   c4efa:	f7ff fa7d 	bl	c43f8 <__aeabi_dcmpeq>
   c4efe:	2800      	cmp	r0, #0
   c4f00:	d1a2      	bne.n	c4e48 <_strtod_l+0x578>
   c4f02:	9b07      	ldr	r3, [sp, #28]
   c4f04:	9300      	str	r3, [sp, #0]
   c4f06:	9908      	ldr	r1, [sp, #32]
   c4f08:	462b      	mov	r3, r5
   c4f0a:	463a      	mov	r2, r7
   c4f0c:	4620      	mov	r0, r4
   c4f0e:	f001 f80d 	bl	c5f2c <__s2b>
   c4f12:	9007      	str	r0, [sp, #28]
   c4f14:	2800      	cmp	r0, #0
   c4f16:	f43f af1f 	beq.w	c4d58 <_strtod_l+0x488>
   c4f1a:	9b05      	ldr	r3, [sp, #20]
   c4f1c:	1b9e      	subs	r6, r3, r6
   c4f1e:	9b06      	ldr	r3, [sp, #24]
   c4f20:	2b00      	cmp	r3, #0
   c4f22:	bfb4      	ite	lt
   c4f24:	4633      	movlt	r3, r6
   c4f26:	2300      	movge	r3, #0
   c4f28:	930c      	str	r3, [sp, #48]	; 0x30
   c4f2a:	9b06      	ldr	r3, [sp, #24]
   c4f2c:	2500      	movs	r5, #0
   c4f2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4f32:	9312      	str	r3, [sp, #72]	; 0x48
   c4f34:	462e      	mov	r6, r5
   c4f36:	9b07      	ldr	r3, [sp, #28]
   c4f38:	4620      	mov	r0, r4
   c4f3a:	6859      	ldr	r1, [r3, #4]
   c4f3c:	f000 ff4e 	bl	c5ddc <_Balloc>
   c4f40:	9005      	str	r0, [sp, #20]
   c4f42:	2800      	cmp	r0, #0
   c4f44:	f43f af0c 	beq.w	c4d60 <_strtod_l+0x490>
   c4f48:	9b07      	ldr	r3, [sp, #28]
   c4f4a:	691a      	ldr	r2, [r3, #16]
   c4f4c:	3202      	adds	r2, #2
   c4f4e:	f103 010c 	add.w	r1, r3, #12
   c4f52:	0092      	lsls	r2, r2, #2
   c4f54:	300c      	adds	r0, #12
   c4f56:	f7ff fb73 	bl	c4640 <memcpy>
   c4f5a:	ec4b ab10 	vmov	d0, sl, fp
   c4f5e:	aa1a      	add	r2, sp, #104	; 0x68
   c4f60:	a919      	add	r1, sp, #100	; 0x64
   c4f62:	4620      	mov	r0, r4
   c4f64:	f001 fb28 	bl	c65b8 <__d2b>
   c4f68:	ec4b ab18 	vmov	d8, sl, fp
   c4f6c:	9018      	str	r0, [sp, #96]	; 0x60
   c4f6e:	2800      	cmp	r0, #0
   c4f70:	f43f aef6 	beq.w	c4d60 <_strtod_l+0x490>
   c4f74:	2101      	movs	r1, #1
   c4f76:	4620      	mov	r0, r4
   c4f78:	f001 f872 	bl	c6060 <__i2b>
   c4f7c:	4606      	mov	r6, r0
   c4f7e:	2800      	cmp	r0, #0
   c4f80:	f43f aeee 	beq.w	c4d60 <_strtod_l+0x490>
   c4f84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4f86:	9904      	ldr	r1, [sp, #16]
   c4f88:	2b00      	cmp	r3, #0
   c4f8a:	bfab      	itete	ge
   c4f8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c4f8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4f90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4f92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4f96:	bfac      	ite	ge
   c4f98:	eb03 0902 	addge.w	r9, r3, r2
   c4f9c:	1ad7      	sublt	r7, r2, r3
   c4f9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4fa0:	eba3 0801 	sub.w	r8, r3, r1
   c4fa4:	4490      	add	r8, r2
   c4fa6:	4ba1      	ldr	r3, [pc, #644]	; (c522c <_strtod_l+0x95c>)
   c4fa8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4fac:	4598      	cmp	r8, r3
   c4fae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c4fb2:	f280 80c7 	bge.w	c5144 <_strtod_l+0x874>
   c4fb6:	eba3 0308 	sub.w	r3, r3, r8
   c4fba:	2b1f      	cmp	r3, #31
   c4fbc:	eba2 0203 	sub.w	r2, r2, r3
   c4fc0:	f04f 0101 	mov.w	r1, #1
   c4fc4:	f300 80b1 	bgt.w	c512a <_strtod_l+0x85a>
   c4fc8:	fa01 f303 	lsl.w	r3, r1, r3
   c4fcc:	930d      	str	r3, [sp, #52]	; 0x34
   c4fce:	2300      	movs	r3, #0
   c4fd0:	9308      	str	r3, [sp, #32]
   c4fd2:	eb09 0802 	add.w	r8, r9, r2
   c4fd6:	9b04      	ldr	r3, [sp, #16]
   c4fd8:	45c1      	cmp	r9, r8
   c4fda:	4417      	add	r7, r2
   c4fdc:	441f      	add	r7, r3
   c4fde:	464b      	mov	r3, r9
   c4fe0:	bfa8      	it	ge
   c4fe2:	4643      	movge	r3, r8
   c4fe4:	42bb      	cmp	r3, r7
   c4fe6:	bfa8      	it	ge
   c4fe8:	463b      	movge	r3, r7
   c4fea:	2b00      	cmp	r3, #0
   c4fec:	bfc2      	ittt	gt
   c4fee:	eba8 0803 	subgt.w	r8, r8, r3
   c4ff2:	1aff      	subgt	r7, r7, r3
   c4ff4:	eba9 0903 	subgt.w	r9, r9, r3
   c4ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c4ffa:	2b00      	cmp	r3, #0
   c4ffc:	dd17      	ble.n	c502e <_strtod_l+0x75e>
   c4ffe:	4631      	mov	r1, r6
   c5000:	461a      	mov	r2, r3
   c5002:	4620      	mov	r0, r4
   c5004:	f001 f8ec 	bl	c61e0 <__pow5mult>
   c5008:	4606      	mov	r6, r0
   c500a:	2800      	cmp	r0, #0
   c500c:	f43f aea8 	beq.w	c4d60 <_strtod_l+0x490>
   c5010:	4601      	mov	r1, r0
   c5012:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c5014:	4620      	mov	r0, r4
   c5016:	f001 f839 	bl	c608c <__multiply>
   c501a:	900b      	str	r0, [sp, #44]	; 0x2c
   c501c:	2800      	cmp	r0, #0
   c501e:	f43f ae9f 	beq.w	c4d60 <_strtod_l+0x490>
   c5022:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5024:	4620      	mov	r0, r4
   c5026:	f000 ff19 	bl	c5e5c <_Bfree>
   c502a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c502c:	9318      	str	r3, [sp, #96]	; 0x60
   c502e:	f1b8 0f00 	cmp.w	r8, #0
   c5032:	f300 808c 	bgt.w	c514e <_strtod_l+0x87e>
   c5036:	9b06      	ldr	r3, [sp, #24]
   c5038:	2b00      	cmp	r3, #0
   c503a:	dd08      	ble.n	c504e <_strtod_l+0x77e>
   c503c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c503e:	9905      	ldr	r1, [sp, #20]
   c5040:	4620      	mov	r0, r4
   c5042:	f001 f8cd 	bl	c61e0 <__pow5mult>
   c5046:	9005      	str	r0, [sp, #20]
   c5048:	2800      	cmp	r0, #0
   c504a:	f43f ae89 	beq.w	c4d60 <_strtod_l+0x490>
   c504e:	2f00      	cmp	r7, #0
   c5050:	dd08      	ble.n	c5064 <_strtod_l+0x794>
   c5052:	9905      	ldr	r1, [sp, #20]
   c5054:	463a      	mov	r2, r7
   c5056:	4620      	mov	r0, r4
   c5058:	f001 f91c 	bl	c6294 <__lshift>
   c505c:	9005      	str	r0, [sp, #20]
   c505e:	2800      	cmp	r0, #0
   c5060:	f43f ae7e 	beq.w	c4d60 <_strtod_l+0x490>
   c5064:	f1b9 0f00 	cmp.w	r9, #0
   c5068:	dd08      	ble.n	c507c <_strtod_l+0x7ac>
   c506a:	4631      	mov	r1, r6
   c506c:	464a      	mov	r2, r9
   c506e:	4620      	mov	r0, r4
   c5070:	f001 f910 	bl	c6294 <__lshift>
   c5074:	4606      	mov	r6, r0
   c5076:	2800      	cmp	r0, #0
   c5078:	f43f ae72 	beq.w	c4d60 <_strtod_l+0x490>
   c507c:	9a05      	ldr	r2, [sp, #20]
   c507e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5080:	4620      	mov	r0, r4
   c5082:	f001 f993 	bl	c63ac <__mdiff>
   c5086:	4605      	mov	r5, r0
   c5088:	2800      	cmp	r0, #0
   c508a:	f43f ae69 	beq.w	c4d60 <_strtod_l+0x490>
   c508e:	68c3      	ldr	r3, [r0, #12]
   c5090:	930b      	str	r3, [sp, #44]	; 0x2c
   c5092:	2300      	movs	r3, #0
   c5094:	60c3      	str	r3, [r0, #12]
   c5096:	4631      	mov	r1, r6
   c5098:	f001 f96c 	bl	c6374 <__mcmp>
   c509c:	2800      	cmp	r0, #0
   c509e:	da60      	bge.n	c5162 <_strtod_l+0x892>
   c50a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c50a2:	ea53 030a 	orrs.w	r3, r3, sl
   c50a6:	f040 8082 	bne.w	c51ae <_strtod_l+0x8de>
   c50aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c50ae:	2b00      	cmp	r3, #0
   c50b0:	d17d      	bne.n	c51ae <_strtod_l+0x8de>
   c50b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c50b6:	0d1b      	lsrs	r3, r3, #20
   c50b8:	051b      	lsls	r3, r3, #20
   c50ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c50be:	d976      	bls.n	c51ae <_strtod_l+0x8de>
   c50c0:	696b      	ldr	r3, [r5, #20]
   c50c2:	b913      	cbnz	r3, c50ca <_strtod_l+0x7fa>
   c50c4:	692b      	ldr	r3, [r5, #16]
   c50c6:	2b01      	cmp	r3, #1
   c50c8:	dd71      	ble.n	c51ae <_strtod_l+0x8de>
   c50ca:	4629      	mov	r1, r5
   c50cc:	2201      	movs	r2, #1
   c50ce:	4620      	mov	r0, r4
   c50d0:	f001 f8e0 	bl	c6294 <__lshift>
   c50d4:	4631      	mov	r1, r6
   c50d6:	4605      	mov	r5, r0
   c50d8:	f001 f94c 	bl	c6374 <__mcmp>
   c50dc:	2800      	cmp	r0, #0
   c50de:	dd66      	ble.n	c51ae <_strtod_l+0x8de>
   c50e0:	9904      	ldr	r1, [sp, #16]
   c50e2:	4a53      	ldr	r2, [pc, #332]	; (c5230 <_strtod_l+0x960>)
   c50e4:	465b      	mov	r3, fp
   c50e6:	2900      	cmp	r1, #0
   c50e8:	f000 8081 	beq.w	c51ee <_strtod_l+0x91e>
   c50ec:	ea02 010b 	and.w	r1, r2, fp
   c50f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c50f4:	dc7b      	bgt.n	c51ee <_strtod_l+0x91e>
   c50f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c50fa:	f77f aea9 	ble.w	c4e50 <_strtod_l+0x580>
   c50fe:	4b4d      	ldr	r3, [pc, #308]	; (c5234 <_strtod_l+0x964>)
   c5100:	4650      	mov	r0, sl
   c5102:	4659      	mov	r1, fp
   c5104:	2200      	movs	r2, #0
   c5106:	f7fe ff0f 	bl	c3f28 <__aeabi_dmul>
   c510a:	460b      	mov	r3, r1
   c510c:	4303      	orrs	r3, r0
   c510e:	bf08      	it	eq
   c5110:	2322      	moveq	r3, #34	; 0x22
   c5112:	4682      	mov	sl, r0
   c5114:	468b      	mov	fp, r1
   c5116:	bf08      	it	eq
   c5118:	6023      	streq	r3, [r4, #0]
   c511a:	e62b      	b.n	c4d74 <_strtod_l+0x4a4>
   c511c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5120:	fa02 f303 	lsl.w	r3, r2, r3
   c5124:	ea03 0a0a 	and.w	sl, r3, sl
   c5128:	e6e3      	b.n	c4ef2 <_strtod_l+0x622>
   c512a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c512e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c5132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c5136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c513a:	fa01 f308 	lsl.w	r3, r1, r8
   c513e:	9308      	str	r3, [sp, #32]
   c5140:	910d      	str	r1, [sp, #52]	; 0x34
   c5142:	e746      	b.n	c4fd2 <_strtod_l+0x702>
   c5144:	2300      	movs	r3, #0
   c5146:	9308      	str	r3, [sp, #32]
   c5148:	2301      	movs	r3, #1
   c514a:	930d      	str	r3, [sp, #52]	; 0x34
   c514c:	e741      	b.n	c4fd2 <_strtod_l+0x702>
   c514e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5150:	4642      	mov	r2, r8
   c5152:	4620      	mov	r0, r4
   c5154:	f001 f89e 	bl	c6294 <__lshift>
   c5158:	9018      	str	r0, [sp, #96]	; 0x60
   c515a:	2800      	cmp	r0, #0
   c515c:	f47f af6b 	bne.w	c5036 <_strtod_l+0x766>
   c5160:	e5fe      	b.n	c4d60 <_strtod_l+0x490>
   c5162:	465f      	mov	r7, fp
   c5164:	d16e      	bne.n	c5244 <_strtod_l+0x974>
   c5166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c5168:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c516c:	b342      	cbz	r2, c51c0 <_strtod_l+0x8f0>
   c516e:	4a32      	ldr	r2, [pc, #200]	; (c5238 <_strtod_l+0x968>)
   c5170:	4293      	cmp	r3, r2
   c5172:	d128      	bne.n	c51c6 <_strtod_l+0x8f6>
   c5174:	9b04      	ldr	r3, [sp, #16]
   c5176:	4651      	mov	r1, sl
   c5178:	b1eb      	cbz	r3, c51b6 <_strtod_l+0x8e6>
   c517a:	4b2d      	ldr	r3, [pc, #180]	; (c5230 <_strtod_l+0x960>)
   c517c:	403b      	ands	r3, r7
   c517e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c5182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5186:	d819      	bhi.n	c51bc <_strtod_l+0x8ec>
   c5188:	0d1b      	lsrs	r3, r3, #20
   c518a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c518e:	fa02 f303 	lsl.w	r3, r2, r3
   c5192:	4299      	cmp	r1, r3
   c5194:	d117      	bne.n	c51c6 <_strtod_l+0x8f6>
   c5196:	4b29      	ldr	r3, [pc, #164]	; (c523c <_strtod_l+0x96c>)
   c5198:	429f      	cmp	r7, r3
   c519a:	d102      	bne.n	c51a2 <_strtod_l+0x8d2>
   c519c:	3101      	adds	r1, #1
   c519e:	f43f addf 	beq.w	c4d60 <_strtod_l+0x490>
   c51a2:	4b23      	ldr	r3, [pc, #140]	; (c5230 <_strtod_l+0x960>)
   c51a4:	403b      	ands	r3, r7
   c51a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c51aa:	f04f 0a00 	mov.w	sl, #0
   c51ae:	9b04      	ldr	r3, [sp, #16]
   c51b0:	2b00      	cmp	r3, #0
   c51b2:	d1a4      	bne.n	c50fe <_strtod_l+0x82e>
   c51b4:	e5de      	b.n	c4d74 <_strtod_l+0x4a4>
   c51b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c51ba:	e7ea      	b.n	c5192 <_strtod_l+0x8c2>
   c51bc:	4613      	mov	r3, r2
   c51be:	e7e8      	b.n	c5192 <_strtod_l+0x8c2>
   c51c0:	ea53 030a 	orrs.w	r3, r3, sl
   c51c4:	d08c      	beq.n	c50e0 <_strtod_l+0x810>
   c51c6:	9b08      	ldr	r3, [sp, #32]
   c51c8:	b1db      	cbz	r3, c5202 <_strtod_l+0x932>
   c51ca:	423b      	tst	r3, r7
   c51cc:	d0ef      	beq.n	c51ae <_strtod_l+0x8de>
   c51ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c51d0:	9a04      	ldr	r2, [sp, #16]
   c51d2:	4650      	mov	r0, sl
   c51d4:	4659      	mov	r1, fp
   c51d6:	b1c3      	cbz	r3, c520a <_strtod_l+0x93a>
   c51d8:	f7ff fb5d 	bl	c4896 <sulp>
   c51dc:	4602      	mov	r2, r0
   c51de:	460b      	mov	r3, r1
   c51e0:	ec51 0b18 	vmov	r0, r1, d8
   c51e4:	f7fe fcea 	bl	c3bbc <__adddf3>
   c51e8:	4682      	mov	sl, r0
   c51ea:	468b      	mov	fp, r1
   c51ec:	e7df      	b.n	c51ae <_strtod_l+0x8de>
   c51ee:	4013      	ands	r3, r2
   c51f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c51f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c51f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c51fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c5200:	e7d5      	b.n	c51ae <_strtod_l+0x8de>
   c5202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c5204:	ea13 0f0a 	tst.w	r3, sl
   c5208:	e7e0      	b.n	c51cc <_strtod_l+0x8fc>
   c520a:	f7ff fb44 	bl	c4896 <sulp>
   c520e:	4602      	mov	r2, r0
   c5210:	460b      	mov	r3, r1
   c5212:	ec51 0b18 	vmov	r0, r1, d8
   c5216:	f7fe fccf 	bl	c3bb8 <__aeabi_dsub>
   c521a:	2200      	movs	r2, #0
   c521c:	2300      	movs	r3, #0
   c521e:	4682      	mov	sl, r0
   c5220:	468b      	mov	fp, r1
   c5222:	f7ff f8e9 	bl	c43f8 <__aeabi_dcmpeq>
   c5226:	2800      	cmp	r0, #0
   c5228:	d0c1      	beq.n	c51ae <_strtod_l+0x8de>
   c522a:	e611      	b.n	c4e50 <_strtod_l+0x580>
   c522c:	fffffc02 	.word	0xfffffc02
   c5230:	7ff00000 	.word	0x7ff00000
   c5234:	39500000 	.word	0x39500000
   c5238:	000fffff 	.word	0x000fffff
   c523c:	7fefffff 	.word	0x7fefffff
   c5240:	000c87c0 	.word	0x000c87c0
   c5244:	4631      	mov	r1, r6
   c5246:	4628      	mov	r0, r5
   c5248:	f001 fa12 	bl	c6670 <__ratio>
   c524c:	ec59 8b10 	vmov	r8, r9, d0
   c5250:	ee10 0a10 	vmov	r0, s0
   c5254:	2200      	movs	r2, #0
   c5256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c525a:	4649      	mov	r1, r9
   c525c:	f7ff f8e0 	bl	c4420 <__aeabi_dcmple>
   c5260:	2800      	cmp	r0, #0
   c5262:	d07a      	beq.n	c535a <_strtod_l+0xa8a>
   c5264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5266:	2b00      	cmp	r3, #0
   c5268:	d04a      	beq.n	c5300 <_strtod_l+0xa30>
   c526a:	4b95      	ldr	r3, [pc, #596]	; (c54c0 <_strtod_l+0xbf0>)
   c526c:	2200      	movs	r2, #0
   c526e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5272:	f8df 924c 	ldr.w	r9, [pc, #588]	; c54c0 <_strtod_l+0xbf0>
   c5276:	f04f 0800 	mov.w	r8, #0
   c527a:	4b92      	ldr	r3, [pc, #584]	; (c54c4 <_strtod_l+0xbf4>)
   c527c:	403b      	ands	r3, r7
   c527e:	930d      	str	r3, [sp, #52]	; 0x34
   c5280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c5282:	4b91      	ldr	r3, [pc, #580]	; (c54c8 <_strtod_l+0xbf8>)
   c5284:	429a      	cmp	r2, r3
   c5286:	f040 80b0 	bne.w	c53ea <_strtod_l+0xb1a>
   c528a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c528e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c5292:	ec4b ab10 	vmov	d0, sl, fp
   c5296:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c529a:	f001 f911 	bl	c64c0 <__ulp>
   c529e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c52a2:	ec53 2b10 	vmov	r2, r3, d0
   c52a6:	f7fe fe3f 	bl	c3f28 <__aeabi_dmul>
   c52aa:	4652      	mov	r2, sl
   c52ac:	465b      	mov	r3, fp
   c52ae:	f7fe fc85 	bl	c3bbc <__adddf3>
   c52b2:	460b      	mov	r3, r1
   c52b4:	4983      	ldr	r1, [pc, #524]	; (c54c4 <_strtod_l+0xbf4>)
   c52b6:	4a85      	ldr	r2, [pc, #532]	; (c54cc <_strtod_l+0xbfc>)
   c52b8:	4019      	ands	r1, r3
   c52ba:	4291      	cmp	r1, r2
   c52bc:	4682      	mov	sl, r0
   c52be:	d960      	bls.n	c5382 <_strtod_l+0xab2>
   c52c0:	ee18 3a90 	vmov	r3, s17
   c52c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c52c8:	4293      	cmp	r3, r2
   c52ca:	d104      	bne.n	c52d6 <_strtod_l+0xa06>
   c52cc:	ee18 3a10 	vmov	r3, s16
   c52d0:	3301      	adds	r3, #1
   c52d2:	f43f ad45 	beq.w	c4d60 <_strtod_l+0x490>
   c52d6:	f8df b200 	ldr.w	fp, [pc, #512]	; c54d8 <_strtod_l+0xc08>
   c52da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c52de:	9918      	ldr	r1, [sp, #96]	; 0x60
   c52e0:	4620      	mov	r0, r4
   c52e2:	f000 fdbb 	bl	c5e5c <_Bfree>
   c52e6:	9905      	ldr	r1, [sp, #20]
   c52e8:	4620      	mov	r0, r4
   c52ea:	f000 fdb7 	bl	c5e5c <_Bfree>
   c52ee:	4631      	mov	r1, r6
   c52f0:	4620      	mov	r0, r4
   c52f2:	f000 fdb3 	bl	c5e5c <_Bfree>
   c52f6:	4629      	mov	r1, r5
   c52f8:	4620      	mov	r0, r4
   c52fa:	f000 fdaf 	bl	c5e5c <_Bfree>
   c52fe:	e61a      	b.n	c4f36 <_strtod_l+0x666>
   c5300:	f1ba 0f00 	cmp.w	sl, #0
   c5304:	d11b      	bne.n	c533e <_strtod_l+0xa6e>
   c5306:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c530a:	b9f3      	cbnz	r3, c534a <_strtod_l+0xa7a>
   c530c:	4b6c      	ldr	r3, [pc, #432]	; (c54c0 <_strtod_l+0xbf0>)
   c530e:	2200      	movs	r2, #0
   c5310:	4640      	mov	r0, r8
   c5312:	4649      	mov	r1, r9
   c5314:	f7ff f87a 	bl	c440c <__aeabi_dcmplt>
   c5318:	b9d0      	cbnz	r0, c5350 <_strtod_l+0xa80>
   c531a:	4640      	mov	r0, r8
   c531c:	4649      	mov	r1, r9
   c531e:	4b6c      	ldr	r3, [pc, #432]	; (c54d0 <_strtod_l+0xc00>)
   c5320:	2200      	movs	r2, #0
   c5322:	f7fe fe01 	bl	c3f28 <__aeabi_dmul>
   c5326:	4680      	mov	r8, r0
   c5328:	4689      	mov	r9, r1
   c532a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c532e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c5332:	9315      	str	r3, [sp, #84]	; 0x54
   c5334:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c5338:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c533c:	e79d      	b.n	c527a <_strtod_l+0x9aa>
   c533e:	f1ba 0f01 	cmp.w	sl, #1
   c5342:	d102      	bne.n	c534a <_strtod_l+0xa7a>
   c5344:	2f00      	cmp	r7, #0
   c5346:	f43f ad83 	beq.w	c4e50 <_strtod_l+0x580>
   c534a:	4b62      	ldr	r3, [pc, #392]	; (c54d4 <_strtod_l+0xc04>)
   c534c:	2200      	movs	r2, #0
   c534e:	e78e      	b.n	c526e <_strtod_l+0x99e>
   c5350:	f8df 917c 	ldr.w	r9, [pc, #380]	; c54d0 <_strtod_l+0xc00>
   c5354:	f04f 0800 	mov.w	r8, #0
   c5358:	e7e7      	b.n	c532a <_strtod_l+0xa5a>
   c535a:	4b5d      	ldr	r3, [pc, #372]	; (c54d0 <_strtod_l+0xc00>)
   c535c:	4640      	mov	r0, r8
   c535e:	4649      	mov	r1, r9
   c5360:	2200      	movs	r2, #0
   c5362:	f7fe fde1 	bl	c3f28 <__aeabi_dmul>
   c5366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5368:	4680      	mov	r8, r0
   c536a:	4689      	mov	r9, r1
   c536c:	b933      	cbnz	r3, c537c <_strtod_l+0xaac>
   c536e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c5372:	900e      	str	r0, [sp, #56]	; 0x38
   c5374:	930f      	str	r3, [sp, #60]	; 0x3c
   c5376:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c537a:	e7dd      	b.n	c5338 <_strtod_l+0xa68>
   c537c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c5380:	e7f9      	b.n	c5376 <_strtod_l+0xaa6>
   c5382:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c5386:	9b04      	ldr	r3, [sp, #16]
   c5388:	2b00      	cmp	r3, #0
   c538a:	d1a8      	bne.n	c52de <_strtod_l+0xa0e>
   c538c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c5390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c5392:	0d1b      	lsrs	r3, r3, #20
   c5394:	051b      	lsls	r3, r3, #20
   c5396:	429a      	cmp	r2, r3
   c5398:	d1a1      	bne.n	c52de <_strtod_l+0xa0e>
   c539a:	4640      	mov	r0, r8
   c539c:	4649      	mov	r1, r9
   c539e:	f001 fa05 	bl	c67ac <__aeabi_d2lz>
   c53a2:	f7fe fd93 	bl	c3ecc <__aeabi_l2d>
   c53a6:	4602      	mov	r2, r0
   c53a8:	460b      	mov	r3, r1
   c53aa:	4640      	mov	r0, r8
   c53ac:	4649      	mov	r1, r9
   c53ae:	f7fe fc03 	bl	c3bb8 <__aeabi_dsub>
   c53b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c53b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c53b8:	ea43 030a 	orr.w	r3, r3, sl
   c53bc:	4313      	orrs	r3, r2
   c53be:	4680      	mov	r8, r0
   c53c0:	4689      	mov	r9, r1
   c53c2:	d055      	beq.n	c5470 <_strtod_l+0xba0>
   c53c4:	a336      	add	r3, pc, #216	; (adr r3, c54a0 <_strtod_l+0xbd0>)
   c53c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c53ca:	f7ff f81f 	bl	c440c <__aeabi_dcmplt>
   c53ce:	2800      	cmp	r0, #0
   c53d0:	f47f acd0 	bne.w	c4d74 <_strtod_l+0x4a4>
   c53d4:	a334      	add	r3, pc, #208	; (adr r3, c54a8 <_strtod_l+0xbd8>)
   c53d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c53da:	4640      	mov	r0, r8
   c53dc:	4649      	mov	r1, r9
   c53de:	f7ff f833 	bl	c4448 <__aeabi_dcmpgt>
   c53e2:	2800      	cmp	r0, #0
   c53e4:	f43f af7b 	beq.w	c52de <_strtod_l+0xa0e>
   c53e8:	e4c4      	b.n	c4d74 <_strtod_l+0x4a4>
   c53ea:	9b04      	ldr	r3, [sp, #16]
   c53ec:	b333      	cbz	r3, c543c <_strtod_l+0xb6c>
   c53ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c53f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c53f4:	d822      	bhi.n	c543c <_strtod_l+0xb6c>
   c53f6:	a32e      	add	r3, pc, #184	; (adr r3, c54b0 <_strtod_l+0xbe0>)
   c53f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c53fc:	4640      	mov	r0, r8
   c53fe:	4649      	mov	r1, r9
   c5400:	f7ff f80e 	bl	c4420 <__aeabi_dcmple>
   c5404:	b1a0      	cbz	r0, c5430 <_strtod_l+0xb60>
   c5406:	4649      	mov	r1, r9
   c5408:	4640      	mov	r0, r8
   c540a:	f7ff f865 	bl	c44d8 <__aeabi_d2uiz>
   c540e:	2801      	cmp	r0, #1
   c5410:	bf38      	it	cc
   c5412:	2001      	movcc	r0, #1
   c5414:	f7fe fd0e 	bl	c3e34 <__aeabi_ui2d>
   c5418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c541a:	4680      	mov	r8, r0
   c541c:	4689      	mov	r9, r1
   c541e:	bb23      	cbnz	r3, c546a <_strtod_l+0xb9a>
   c5420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c5424:	9010      	str	r0, [sp, #64]	; 0x40
   c5426:	9311      	str	r3, [sp, #68]	; 0x44
   c5428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c542c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5430:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c5432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c5434:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c5438:	1a9b      	subs	r3, r3, r2
   c543a:	9309      	str	r3, [sp, #36]	; 0x24
   c543c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5440:	eeb0 0a48 	vmov.f32	s0, s16
   c5444:	eef0 0a68 	vmov.f32	s1, s17
   c5448:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c544c:	f001 f838 	bl	c64c0 <__ulp>
   c5450:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5454:	ec53 2b10 	vmov	r2, r3, d0
   c5458:	f7fe fd66 	bl	c3f28 <__aeabi_dmul>
   c545c:	ec53 2b18 	vmov	r2, r3, d8
   c5460:	f7fe fbac 	bl	c3bbc <__adddf3>
   c5464:	4682      	mov	sl, r0
   c5466:	468b      	mov	fp, r1
   c5468:	e78d      	b.n	c5386 <_strtod_l+0xab6>
   c546a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c546e:	e7db      	b.n	c5428 <_strtod_l+0xb58>
   c5470:	a311      	add	r3, pc, #68	; (adr r3, c54b8 <_strtod_l+0xbe8>)
   c5472:	e9d3 2300 	ldrd	r2, r3, [r3]
   c5476:	f7fe ffc9 	bl	c440c <__aeabi_dcmplt>
   c547a:	e7b2      	b.n	c53e2 <_strtod_l+0xb12>
   c547c:	2300      	movs	r3, #0
   c547e:	930a      	str	r3, [sp, #40]	; 0x28
   c5480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c5482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c5484:	6013      	str	r3, [r2, #0]
   c5486:	f7ff ba6b 	b.w	c4960 <_strtod_l+0x90>
   c548a:	2a65      	cmp	r2, #101	; 0x65
   c548c:	f43f ab5f 	beq.w	c4b4e <_strtod_l+0x27e>
   c5490:	2a45      	cmp	r2, #69	; 0x45
   c5492:	f43f ab5c 	beq.w	c4b4e <_strtod_l+0x27e>
   c5496:	2301      	movs	r3, #1
   c5498:	f7ff bb94 	b.w	c4bc4 <_strtod_l+0x2f4>
   c549c:	f3af 8000 	nop.w
   c54a0:	94a03595 	.word	0x94a03595
   c54a4:	3fdfffff 	.word	0x3fdfffff
   c54a8:	35afe535 	.word	0x35afe535
   c54ac:	3fe00000 	.word	0x3fe00000
   c54b0:	ffc00000 	.word	0xffc00000
   c54b4:	41dfffff 	.word	0x41dfffff
   c54b8:	94a03595 	.word	0x94a03595
   c54bc:	3fcfffff 	.word	0x3fcfffff
   c54c0:	3ff00000 	.word	0x3ff00000
   c54c4:	7ff00000 	.word	0x7ff00000
   c54c8:	7fe00000 	.word	0x7fe00000
   c54cc:	7c9fffff 	.word	0x7c9fffff
   c54d0:	3fe00000 	.word	0x3fe00000
   c54d4:	bff00000 	.word	0xbff00000
   c54d8:	7fefffff 	.word	0x7fefffff

000c54dc <strtod>:
   c54dc:	460a      	mov	r2, r1
   c54de:	4601      	mov	r1, r0
   c54e0:	4802      	ldr	r0, [pc, #8]	; (c54ec <strtod+0x10>)
   c54e2:	4b03      	ldr	r3, [pc, #12]	; (c54f0 <strtod+0x14>)
   c54e4:	6800      	ldr	r0, [r0, #0]
   c54e6:	f7ff b9f3 	b.w	c48d0 <_strtod_l>
   c54ea:	bf00      	nop
   c54ec:	2003db48 	.word	0x2003db48
   c54f0:	2003dbb4 	.word	0x2003dbb4

000c54f4 <_strtol_l.constprop.0>:
   c54f4:	2b01      	cmp	r3, #1
   c54f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c54fa:	d001      	beq.n	c5500 <_strtol_l.constprop.0+0xc>
   c54fc:	2b24      	cmp	r3, #36	; 0x24
   c54fe:	d906      	bls.n	c550e <_strtol_l.constprop.0+0x1a>
   c5500:	f7f8 ff96 	bl	be430 <__errno>
   c5504:	2316      	movs	r3, #22
   c5506:	6003      	str	r3, [r0, #0]
   c5508:	2000      	movs	r0, #0
   c550a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c550e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c55f4 <_strtol_l.constprop.0+0x100>
   c5512:	460d      	mov	r5, r1
   c5514:	462e      	mov	r6, r5
   c5516:	f815 4b01 	ldrb.w	r4, [r5], #1
   c551a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c551e:	f017 0708 	ands.w	r7, r7, #8
   c5522:	d1f7      	bne.n	c5514 <_strtol_l.constprop.0+0x20>
   c5524:	2c2d      	cmp	r4, #45	; 0x2d
   c5526:	d132      	bne.n	c558e <_strtol_l.constprop.0+0x9a>
   c5528:	782c      	ldrb	r4, [r5, #0]
   c552a:	2701      	movs	r7, #1
   c552c:	1cb5      	adds	r5, r6, #2
   c552e:	2b00      	cmp	r3, #0
   c5530:	d05b      	beq.n	c55ea <_strtol_l.constprop.0+0xf6>
   c5532:	2b10      	cmp	r3, #16
   c5534:	d109      	bne.n	c554a <_strtol_l.constprop.0+0x56>
   c5536:	2c30      	cmp	r4, #48	; 0x30
   c5538:	d107      	bne.n	c554a <_strtol_l.constprop.0+0x56>
   c553a:	782c      	ldrb	r4, [r5, #0]
   c553c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c5540:	2c58      	cmp	r4, #88	; 0x58
   c5542:	d14d      	bne.n	c55e0 <_strtol_l.constprop.0+0xec>
   c5544:	786c      	ldrb	r4, [r5, #1]
   c5546:	2310      	movs	r3, #16
   c5548:	3502      	adds	r5, #2
   c554a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c554e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c5552:	f04f 0c00 	mov.w	ip, #0
   c5556:	fbb8 f9f3 	udiv	r9, r8, r3
   c555a:	4666      	mov	r6, ip
   c555c:	fb03 8a19 	mls	sl, r3, r9, r8
   c5560:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c5564:	f1be 0f09 	cmp.w	lr, #9
   c5568:	d816      	bhi.n	c5598 <_strtol_l.constprop.0+0xa4>
   c556a:	4674      	mov	r4, lr
   c556c:	42a3      	cmp	r3, r4
   c556e:	dd24      	ble.n	c55ba <_strtol_l.constprop.0+0xc6>
   c5570:	f1bc 0f00 	cmp.w	ip, #0
   c5574:	db1e      	blt.n	c55b4 <_strtol_l.constprop.0+0xc0>
   c5576:	45b1      	cmp	r9, r6
   c5578:	d31c      	bcc.n	c55b4 <_strtol_l.constprop.0+0xc0>
   c557a:	d101      	bne.n	c5580 <_strtol_l.constprop.0+0x8c>
   c557c:	45a2      	cmp	sl, r4
   c557e:	db19      	blt.n	c55b4 <_strtol_l.constprop.0+0xc0>
   c5580:	fb06 4603 	mla	r6, r6, r3, r4
   c5584:	f04f 0c01 	mov.w	ip, #1
   c5588:	f815 4b01 	ldrb.w	r4, [r5], #1
   c558c:	e7e8      	b.n	c5560 <_strtol_l.constprop.0+0x6c>
   c558e:	2c2b      	cmp	r4, #43	; 0x2b
   c5590:	bf04      	itt	eq
   c5592:	782c      	ldrbeq	r4, [r5, #0]
   c5594:	1cb5      	addeq	r5, r6, #2
   c5596:	e7ca      	b.n	c552e <_strtol_l.constprop.0+0x3a>
   c5598:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c559c:	f1be 0f19 	cmp.w	lr, #25
   c55a0:	d801      	bhi.n	c55a6 <_strtol_l.constprop.0+0xb2>
   c55a2:	3c37      	subs	r4, #55	; 0x37
   c55a4:	e7e2      	b.n	c556c <_strtol_l.constprop.0+0x78>
   c55a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c55aa:	f1be 0f19 	cmp.w	lr, #25
   c55ae:	d804      	bhi.n	c55ba <_strtol_l.constprop.0+0xc6>
   c55b0:	3c57      	subs	r4, #87	; 0x57
   c55b2:	e7db      	b.n	c556c <_strtol_l.constprop.0+0x78>
   c55b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c55b8:	e7e6      	b.n	c5588 <_strtol_l.constprop.0+0x94>
   c55ba:	f1bc 0f00 	cmp.w	ip, #0
   c55be:	da05      	bge.n	c55cc <_strtol_l.constprop.0+0xd8>
   c55c0:	2322      	movs	r3, #34	; 0x22
   c55c2:	6003      	str	r3, [r0, #0]
   c55c4:	4646      	mov	r6, r8
   c55c6:	b942      	cbnz	r2, c55da <_strtol_l.constprop.0+0xe6>
   c55c8:	4630      	mov	r0, r6
   c55ca:	e79e      	b.n	c550a <_strtol_l.constprop.0+0x16>
   c55cc:	b107      	cbz	r7, c55d0 <_strtol_l.constprop.0+0xdc>
   c55ce:	4276      	negs	r6, r6
   c55d0:	2a00      	cmp	r2, #0
   c55d2:	d0f9      	beq.n	c55c8 <_strtol_l.constprop.0+0xd4>
   c55d4:	f1bc 0f00 	cmp.w	ip, #0
   c55d8:	d000      	beq.n	c55dc <_strtol_l.constprop.0+0xe8>
   c55da:	1e69      	subs	r1, r5, #1
   c55dc:	6011      	str	r1, [r2, #0]
   c55de:	e7f3      	b.n	c55c8 <_strtol_l.constprop.0+0xd4>
   c55e0:	2430      	movs	r4, #48	; 0x30
   c55e2:	2b00      	cmp	r3, #0
   c55e4:	d1b1      	bne.n	c554a <_strtol_l.constprop.0+0x56>
   c55e6:	2308      	movs	r3, #8
   c55e8:	e7af      	b.n	c554a <_strtol_l.constprop.0+0x56>
   c55ea:	2c30      	cmp	r4, #48	; 0x30
   c55ec:	d0a5      	beq.n	c553a <_strtol_l.constprop.0+0x46>
   c55ee:	230a      	movs	r3, #10
   c55f0:	e7ab      	b.n	c554a <_strtol_l.constprop.0+0x56>
   c55f2:	bf00      	nop
   c55f4:	000c87e9 	.word	0x000c87e9

000c55f8 <strtol>:
   c55f8:	4613      	mov	r3, r2
   c55fa:	460a      	mov	r2, r1
   c55fc:	4601      	mov	r1, r0
   c55fe:	4802      	ldr	r0, [pc, #8]	; (c5608 <strtol+0x10>)
   c5600:	6800      	ldr	r0, [r0, #0]
   c5602:	f7ff bf77 	b.w	c54f4 <_strtol_l.constprop.0>
   c5606:	bf00      	nop
   c5608:	2003db48 	.word	0x2003db48

000c560c <__register_exitproc>:
   c560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5610:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c56cc <__register_exitproc+0xc0>
   c5614:	4606      	mov	r6, r0
   c5616:	f8d8 0000 	ldr.w	r0, [r8]
   c561a:	461f      	mov	r7, r3
   c561c:	460d      	mov	r5, r1
   c561e:	4691      	mov	r9, r2
   c5620:	f000 fbc6 	bl	c5db0 <__retarget_lock_acquire_recursive>
   c5624:	4b25      	ldr	r3, [pc, #148]	; (c56bc <__register_exitproc+0xb0>)
   c5626:	681c      	ldr	r4, [r3, #0]
   c5628:	b934      	cbnz	r4, c5638 <__register_exitproc+0x2c>
   c562a:	4c25      	ldr	r4, [pc, #148]	; (c56c0 <__register_exitproc+0xb4>)
   c562c:	601c      	str	r4, [r3, #0]
   c562e:	4b25      	ldr	r3, [pc, #148]	; (c56c4 <__register_exitproc+0xb8>)
   c5630:	b113      	cbz	r3, c5638 <__register_exitproc+0x2c>
   c5632:	681b      	ldr	r3, [r3, #0]
   c5634:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c5638:	6863      	ldr	r3, [r4, #4]
   c563a:	2b1f      	cmp	r3, #31
   c563c:	dd07      	ble.n	c564e <__register_exitproc+0x42>
   c563e:	f8d8 0000 	ldr.w	r0, [r8]
   c5642:	f000 fbb7 	bl	c5db4 <__retarget_lock_release_recursive>
   c5646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c564a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c564e:	b34e      	cbz	r6, c56a4 <__register_exitproc+0x98>
   c5650:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c5654:	b988      	cbnz	r0, c567a <__register_exitproc+0x6e>
   c5656:	4b1c      	ldr	r3, [pc, #112]	; (c56c8 <__register_exitproc+0xbc>)
   c5658:	b923      	cbnz	r3, c5664 <__register_exitproc+0x58>
   c565a:	f8d8 0000 	ldr.w	r0, [r8]
   c565e:	f000 fba8 	bl	c5db2 <__retarget_lock_release>
   c5662:	e7f0      	b.n	c5646 <__register_exitproc+0x3a>
   c5664:	f44f 7084 	mov.w	r0, #264	; 0x108
   c5668:	f7f8 fe9a 	bl	be3a0 <malloc>
   c566c:	2800      	cmp	r0, #0
   c566e:	d0f4      	beq.n	c565a <__register_exitproc+0x4e>
   c5670:	2300      	movs	r3, #0
   c5672:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c5676:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c567a:	6863      	ldr	r3, [r4, #4]
   c567c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c5680:	2201      	movs	r2, #1
   c5682:	409a      	lsls	r2, r3
   c5684:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c5688:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c568c:	4313      	orrs	r3, r2
   c568e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c5692:	2e02      	cmp	r6, #2
   c5694:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c5698:	bf02      	ittt	eq
   c569a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c569e:	4313      	orreq	r3, r2
   c56a0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c56a4:	6863      	ldr	r3, [r4, #4]
   c56a6:	f8d8 0000 	ldr.w	r0, [r8]
   c56aa:	1c5a      	adds	r2, r3, #1
   c56ac:	3302      	adds	r3, #2
   c56ae:	6062      	str	r2, [r4, #4]
   c56b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c56b4:	f000 fb7e 	bl	c5db4 <__retarget_lock_release_recursive>
   c56b8:	2000      	movs	r0, #0
   c56ba:	e7c6      	b.n	c564a <__register_exitproc+0x3e>
   c56bc:	2003e7e8 	.word	0x2003e7e8
   c56c0:	2003e75c 	.word	0x2003e75c
   c56c4:	00000000 	.word	0x00000000
   c56c8:	000be3a1 	.word	0x000be3a1
   c56cc:	2003dbac 	.word	0x2003dbac

000c56d0 <rshift>:
   c56d0:	6903      	ldr	r3, [r0, #16]
   c56d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c56d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c56da:	ea4f 1261 	mov.w	r2, r1, asr #5
   c56de:	f100 0414 	add.w	r4, r0, #20
   c56e2:	dd45      	ble.n	c5770 <rshift+0xa0>
   c56e4:	f011 011f 	ands.w	r1, r1, #31
   c56e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c56ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c56f0:	d10c      	bne.n	c570c <rshift+0x3c>
   c56f2:	f100 0710 	add.w	r7, r0, #16
   c56f6:	4629      	mov	r1, r5
   c56f8:	42b1      	cmp	r1, r6
   c56fa:	d334      	bcc.n	c5766 <rshift+0x96>
   c56fc:	1a9b      	subs	r3, r3, r2
   c56fe:	009b      	lsls	r3, r3, #2
   c5700:	1eea      	subs	r2, r5, #3
   c5702:	4296      	cmp	r6, r2
   c5704:	bf38      	it	cc
   c5706:	2300      	movcc	r3, #0
   c5708:	4423      	add	r3, r4
   c570a:	e015      	b.n	c5738 <rshift+0x68>
   c570c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c5710:	f1c1 0820 	rsb	r8, r1, #32
   c5714:	40cf      	lsrs	r7, r1
   c5716:	f105 0e04 	add.w	lr, r5, #4
   c571a:	46a1      	mov	r9, r4
   c571c:	4576      	cmp	r6, lr
   c571e:	46f4      	mov	ip, lr
   c5720:	d815      	bhi.n	c574e <rshift+0x7e>
   c5722:	1a9a      	subs	r2, r3, r2
   c5724:	0092      	lsls	r2, r2, #2
   c5726:	3a04      	subs	r2, #4
   c5728:	3501      	adds	r5, #1
   c572a:	42ae      	cmp	r6, r5
   c572c:	bf38      	it	cc
   c572e:	2200      	movcc	r2, #0
   c5730:	18a3      	adds	r3, r4, r2
   c5732:	50a7      	str	r7, [r4, r2]
   c5734:	b107      	cbz	r7, c5738 <rshift+0x68>
   c5736:	3304      	adds	r3, #4
   c5738:	1b1a      	subs	r2, r3, r4
   c573a:	42a3      	cmp	r3, r4
   c573c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c5740:	bf08      	it	eq
   c5742:	2300      	moveq	r3, #0
   c5744:	6102      	str	r2, [r0, #16]
   c5746:	bf08      	it	eq
   c5748:	6143      	streq	r3, [r0, #20]
   c574a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c574e:	f8dc c000 	ldr.w	ip, [ip]
   c5752:	fa0c fc08 	lsl.w	ip, ip, r8
   c5756:	ea4c 0707 	orr.w	r7, ip, r7
   c575a:	f849 7b04 	str.w	r7, [r9], #4
   c575e:	f85e 7b04 	ldr.w	r7, [lr], #4
   c5762:	40cf      	lsrs	r7, r1
   c5764:	e7da      	b.n	c571c <rshift+0x4c>
   c5766:	f851 cb04 	ldr.w	ip, [r1], #4
   c576a:	f847 cf04 	str.w	ip, [r7, #4]!
   c576e:	e7c3      	b.n	c56f8 <rshift+0x28>
   c5770:	4623      	mov	r3, r4
   c5772:	e7e1      	b.n	c5738 <rshift+0x68>

000c5774 <__hexdig_fun>:
   c5774:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c5778:	2b09      	cmp	r3, #9
   c577a:	d802      	bhi.n	c5782 <__hexdig_fun+0xe>
   c577c:	3820      	subs	r0, #32
   c577e:	b2c0      	uxtb	r0, r0
   c5780:	4770      	bx	lr
   c5782:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c5786:	2b05      	cmp	r3, #5
   c5788:	d801      	bhi.n	c578e <__hexdig_fun+0x1a>
   c578a:	3847      	subs	r0, #71	; 0x47
   c578c:	e7f7      	b.n	c577e <__hexdig_fun+0xa>
   c578e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c5792:	2b05      	cmp	r3, #5
   c5794:	d801      	bhi.n	c579a <__hexdig_fun+0x26>
   c5796:	3827      	subs	r0, #39	; 0x27
   c5798:	e7f1      	b.n	c577e <__hexdig_fun+0xa>
   c579a:	2000      	movs	r0, #0
   c579c:	4770      	bx	lr
	...

000c57a0 <__gethex>:
   c57a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c57a4:	ed2d 8b02 	vpush	{d8}
   c57a8:	b089      	sub	sp, #36	; 0x24
   c57aa:	ee08 0a10 	vmov	s16, r0
   c57ae:	9304      	str	r3, [sp, #16]
   c57b0:	4bb4      	ldr	r3, [pc, #720]	; (c5a84 <__gethex+0x2e4>)
   c57b2:	681b      	ldr	r3, [r3, #0]
   c57b4:	9301      	str	r3, [sp, #4]
   c57b6:	4618      	mov	r0, r3
   c57b8:	468b      	mov	fp, r1
   c57ba:	4690      	mov	r8, r2
   c57bc:	f7fe fff3 	bl	c47a6 <strlen>
   c57c0:	9b01      	ldr	r3, [sp, #4]
   c57c2:	f8db 2000 	ldr.w	r2, [fp]
   c57c6:	4403      	add	r3, r0
   c57c8:	4682      	mov	sl, r0
   c57ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c57ce:	9305      	str	r3, [sp, #20]
   c57d0:	1c93      	adds	r3, r2, #2
   c57d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c57d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c57da:	32fe      	adds	r2, #254	; 0xfe
   c57dc:	18d1      	adds	r1, r2, r3
   c57de:	461f      	mov	r7, r3
   c57e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   c57e4:	9100      	str	r1, [sp, #0]
   c57e6:	2830      	cmp	r0, #48	; 0x30
   c57e8:	d0f8      	beq.n	c57dc <__gethex+0x3c>
   c57ea:	f7ff ffc3 	bl	c5774 <__hexdig_fun>
   c57ee:	4604      	mov	r4, r0
   c57f0:	2800      	cmp	r0, #0
   c57f2:	d13a      	bne.n	c586a <__gethex+0xca>
   c57f4:	9901      	ldr	r1, [sp, #4]
   c57f6:	4652      	mov	r2, sl
   c57f8:	4638      	mov	r0, r7
   c57fa:	f7fe ffef 	bl	c47dc <strncmp>
   c57fe:	4605      	mov	r5, r0
   c5800:	2800      	cmp	r0, #0
   c5802:	d168      	bne.n	c58d6 <__gethex+0x136>
   c5804:	f817 000a 	ldrb.w	r0, [r7, sl]
   c5808:	eb07 060a 	add.w	r6, r7, sl
   c580c:	f7ff ffb2 	bl	c5774 <__hexdig_fun>
   c5810:	2800      	cmp	r0, #0
   c5812:	d062      	beq.n	c58da <__gethex+0x13a>
   c5814:	4633      	mov	r3, r6
   c5816:	7818      	ldrb	r0, [r3, #0]
   c5818:	2830      	cmp	r0, #48	; 0x30
   c581a:	461f      	mov	r7, r3
   c581c:	f103 0301 	add.w	r3, r3, #1
   c5820:	d0f9      	beq.n	c5816 <__gethex+0x76>
   c5822:	f7ff ffa7 	bl	c5774 <__hexdig_fun>
   c5826:	2301      	movs	r3, #1
   c5828:	fab0 f480 	clz	r4, r0
   c582c:	0964      	lsrs	r4, r4, #5
   c582e:	4635      	mov	r5, r6
   c5830:	9300      	str	r3, [sp, #0]
   c5832:	463a      	mov	r2, r7
   c5834:	4616      	mov	r6, r2
   c5836:	3201      	adds	r2, #1
   c5838:	7830      	ldrb	r0, [r6, #0]
   c583a:	f7ff ff9b 	bl	c5774 <__hexdig_fun>
   c583e:	2800      	cmp	r0, #0
   c5840:	d1f8      	bne.n	c5834 <__gethex+0x94>
   c5842:	9901      	ldr	r1, [sp, #4]
   c5844:	4652      	mov	r2, sl
   c5846:	4630      	mov	r0, r6
   c5848:	f7fe ffc8 	bl	c47dc <strncmp>
   c584c:	b980      	cbnz	r0, c5870 <__gethex+0xd0>
   c584e:	b94d      	cbnz	r5, c5864 <__gethex+0xc4>
   c5850:	eb06 050a 	add.w	r5, r6, sl
   c5854:	462a      	mov	r2, r5
   c5856:	4616      	mov	r6, r2
   c5858:	3201      	adds	r2, #1
   c585a:	7830      	ldrb	r0, [r6, #0]
   c585c:	f7ff ff8a 	bl	c5774 <__hexdig_fun>
   c5860:	2800      	cmp	r0, #0
   c5862:	d1f8      	bne.n	c5856 <__gethex+0xb6>
   c5864:	1bad      	subs	r5, r5, r6
   c5866:	00ad      	lsls	r5, r5, #2
   c5868:	e004      	b.n	c5874 <__gethex+0xd4>
   c586a:	2400      	movs	r4, #0
   c586c:	4625      	mov	r5, r4
   c586e:	e7e0      	b.n	c5832 <__gethex+0x92>
   c5870:	2d00      	cmp	r5, #0
   c5872:	d1f7      	bne.n	c5864 <__gethex+0xc4>
   c5874:	7833      	ldrb	r3, [r6, #0]
   c5876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c587a:	2b50      	cmp	r3, #80	; 0x50
   c587c:	d13b      	bne.n	c58f6 <__gethex+0x156>
   c587e:	7873      	ldrb	r3, [r6, #1]
   c5880:	2b2b      	cmp	r3, #43	; 0x2b
   c5882:	d02c      	beq.n	c58de <__gethex+0x13e>
   c5884:	2b2d      	cmp	r3, #45	; 0x2d
   c5886:	d02e      	beq.n	c58e6 <__gethex+0x146>
   c5888:	1c71      	adds	r1, r6, #1
   c588a:	f04f 0900 	mov.w	r9, #0
   c588e:	7808      	ldrb	r0, [r1, #0]
   c5890:	f7ff ff70 	bl	c5774 <__hexdig_fun>
   c5894:	1e43      	subs	r3, r0, #1
   c5896:	b2db      	uxtb	r3, r3
   c5898:	2b18      	cmp	r3, #24
   c589a:	d82c      	bhi.n	c58f6 <__gethex+0x156>
   c589c:	f1a0 0210 	sub.w	r2, r0, #16
   c58a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c58a4:	f7ff ff66 	bl	c5774 <__hexdig_fun>
   c58a8:	1e43      	subs	r3, r0, #1
   c58aa:	b2db      	uxtb	r3, r3
   c58ac:	2b18      	cmp	r3, #24
   c58ae:	d91d      	bls.n	c58ec <__gethex+0x14c>
   c58b0:	f1b9 0f00 	cmp.w	r9, #0
   c58b4:	d000      	beq.n	c58b8 <__gethex+0x118>
   c58b6:	4252      	negs	r2, r2
   c58b8:	4415      	add	r5, r2
   c58ba:	f8cb 1000 	str.w	r1, [fp]
   c58be:	b1e4      	cbz	r4, c58fa <__gethex+0x15a>
   c58c0:	9b00      	ldr	r3, [sp, #0]
   c58c2:	2b00      	cmp	r3, #0
   c58c4:	bf14      	ite	ne
   c58c6:	2700      	movne	r7, #0
   c58c8:	2706      	moveq	r7, #6
   c58ca:	4638      	mov	r0, r7
   c58cc:	b009      	add	sp, #36	; 0x24
   c58ce:	ecbd 8b02 	vpop	{d8}
   c58d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c58d6:	463e      	mov	r6, r7
   c58d8:	4625      	mov	r5, r4
   c58da:	2401      	movs	r4, #1
   c58dc:	e7ca      	b.n	c5874 <__gethex+0xd4>
   c58de:	f04f 0900 	mov.w	r9, #0
   c58e2:	1cb1      	adds	r1, r6, #2
   c58e4:	e7d3      	b.n	c588e <__gethex+0xee>
   c58e6:	f04f 0901 	mov.w	r9, #1
   c58ea:	e7fa      	b.n	c58e2 <__gethex+0x142>
   c58ec:	230a      	movs	r3, #10
   c58ee:	fb03 0202 	mla	r2, r3, r2, r0
   c58f2:	3a10      	subs	r2, #16
   c58f4:	e7d4      	b.n	c58a0 <__gethex+0x100>
   c58f6:	4631      	mov	r1, r6
   c58f8:	e7df      	b.n	c58ba <__gethex+0x11a>
   c58fa:	1bf3      	subs	r3, r6, r7
   c58fc:	3b01      	subs	r3, #1
   c58fe:	4621      	mov	r1, r4
   c5900:	2b07      	cmp	r3, #7
   c5902:	dc0b      	bgt.n	c591c <__gethex+0x17c>
   c5904:	ee18 0a10 	vmov	r0, s16
   c5908:	f000 fa68 	bl	c5ddc <_Balloc>
   c590c:	4604      	mov	r4, r0
   c590e:	b940      	cbnz	r0, c5922 <__gethex+0x182>
   c5910:	4b5d      	ldr	r3, [pc, #372]	; (c5a88 <__gethex+0x2e8>)
   c5912:	4602      	mov	r2, r0
   c5914:	21de      	movs	r1, #222	; 0xde
   c5916:	485d      	ldr	r0, [pc, #372]	; (c5a8c <__gethex+0x2ec>)
   c5918:	f7f8 fd92 	bl	be440 <__assert_func>
   c591c:	3101      	adds	r1, #1
   c591e:	105b      	asrs	r3, r3, #1
   c5920:	e7ee      	b.n	c5900 <__gethex+0x160>
   c5922:	f100 0914 	add.w	r9, r0, #20
   c5926:	f04f 0b00 	mov.w	fp, #0
   c592a:	f1ca 0301 	rsb	r3, sl, #1
   c592e:	f8cd 9008 	str.w	r9, [sp, #8]
   c5932:	f8cd b000 	str.w	fp, [sp]
   c5936:	9306      	str	r3, [sp, #24]
   c5938:	42b7      	cmp	r7, r6
   c593a:	d340      	bcc.n	c59be <__gethex+0x21e>
   c593c:	9802      	ldr	r0, [sp, #8]
   c593e:	9b00      	ldr	r3, [sp, #0]
   c5940:	f840 3b04 	str.w	r3, [r0], #4
   c5944:	eba0 0009 	sub.w	r0, r0, r9
   c5948:	1080      	asrs	r0, r0, #2
   c594a:	0146      	lsls	r6, r0, #5
   c594c:	6120      	str	r0, [r4, #16]
   c594e:	4618      	mov	r0, r3
   c5950:	f000 fb36 	bl	c5fc0 <__hi0bits>
   c5954:	1a30      	subs	r0, r6, r0
   c5956:	f8d8 6000 	ldr.w	r6, [r8]
   c595a:	42b0      	cmp	r0, r6
   c595c:	dd63      	ble.n	c5a26 <__gethex+0x286>
   c595e:	1b87      	subs	r7, r0, r6
   c5960:	4639      	mov	r1, r7
   c5962:	4620      	mov	r0, r4
   c5964:	f000 feda 	bl	c671c <__any_on>
   c5968:	4682      	mov	sl, r0
   c596a:	b1a8      	cbz	r0, c5998 <__gethex+0x1f8>
   c596c:	1e7b      	subs	r3, r7, #1
   c596e:	1159      	asrs	r1, r3, #5
   c5970:	f003 021f 	and.w	r2, r3, #31
   c5974:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c5978:	f04f 0a01 	mov.w	sl, #1
   c597c:	fa0a f202 	lsl.w	r2, sl, r2
   c5980:	420a      	tst	r2, r1
   c5982:	d009      	beq.n	c5998 <__gethex+0x1f8>
   c5984:	4553      	cmp	r3, sl
   c5986:	dd05      	ble.n	c5994 <__gethex+0x1f4>
   c5988:	1eb9      	subs	r1, r7, #2
   c598a:	4620      	mov	r0, r4
   c598c:	f000 fec6 	bl	c671c <__any_on>
   c5990:	2800      	cmp	r0, #0
   c5992:	d145      	bne.n	c5a20 <__gethex+0x280>
   c5994:	f04f 0a02 	mov.w	sl, #2
   c5998:	4639      	mov	r1, r7
   c599a:	4620      	mov	r0, r4
   c599c:	f7ff fe98 	bl	c56d0 <rshift>
   c59a0:	443d      	add	r5, r7
   c59a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c59a6:	42ab      	cmp	r3, r5
   c59a8:	da4c      	bge.n	c5a44 <__gethex+0x2a4>
   c59aa:	ee18 0a10 	vmov	r0, s16
   c59ae:	4621      	mov	r1, r4
   c59b0:	f000 fa54 	bl	c5e5c <_Bfree>
   c59b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c59b6:	2300      	movs	r3, #0
   c59b8:	6013      	str	r3, [r2, #0]
   c59ba:	27a3      	movs	r7, #163	; 0xa3
   c59bc:	e785      	b.n	c58ca <__gethex+0x12a>
   c59be:	1e73      	subs	r3, r6, #1
   c59c0:	9a05      	ldr	r2, [sp, #20]
   c59c2:	9303      	str	r3, [sp, #12]
   c59c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c59c8:	4293      	cmp	r3, r2
   c59ca:	d019      	beq.n	c5a00 <__gethex+0x260>
   c59cc:	f1bb 0f20 	cmp.w	fp, #32
   c59d0:	d107      	bne.n	c59e2 <__gethex+0x242>
   c59d2:	9b02      	ldr	r3, [sp, #8]
   c59d4:	9a00      	ldr	r2, [sp, #0]
   c59d6:	f843 2b04 	str.w	r2, [r3], #4
   c59da:	9302      	str	r3, [sp, #8]
   c59dc:	2300      	movs	r3, #0
   c59de:	9300      	str	r3, [sp, #0]
   c59e0:	469b      	mov	fp, r3
   c59e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c59e6:	f7ff fec5 	bl	c5774 <__hexdig_fun>
   c59ea:	9b00      	ldr	r3, [sp, #0]
   c59ec:	f000 000f 	and.w	r0, r0, #15
   c59f0:	fa00 f00b 	lsl.w	r0, r0, fp
   c59f4:	4303      	orrs	r3, r0
   c59f6:	9300      	str	r3, [sp, #0]
   c59f8:	f10b 0b04 	add.w	fp, fp, #4
   c59fc:	9b03      	ldr	r3, [sp, #12]
   c59fe:	e00d      	b.n	c5a1c <__gethex+0x27c>
   c5a00:	9b03      	ldr	r3, [sp, #12]
   c5a02:	9a06      	ldr	r2, [sp, #24]
   c5a04:	4413      	add	r3, r2
   c5a06:	42bb      	cmp	r3, r7
   c5a08:	d3e0      	bcc.n	c59cc <__gethex+0x22c>
   c5a0a:	4618      	mov	r0, r3
   c5a0c:	9901      	ldr	r1, [sp, #4]
   c5a0e:	9307      	str	r3, [sp, #28]
   c5a10:	4652      	mov	r2, sl
   c5a12:	f7fe fee3 	bl	c47dc <strncmp>
   c5a16:	9b07      	ldr	r3, [sp, #28]
   c5a18:	2800      	cmp	r0, #0
   c5a1a:	d1d7      	bne.n	c59cc <__gethex+0x22c>
   c5a1c:	461e      	mov	r6, r3
   c5a1e:	e78b      	b.n	c5938 <__gethex+0x198>
   c5a20:	f04f 0a03 	mov.w	sl, #3
   c5a24:	e7b8      	b.n	c5998 <__gethex+0x1f8>
   c5a26:	da0a      	bge.n	c5a3e <__gethex+0x29e>
   c5a28:	1a37      	subs	r7, r6, r0
   c5a2a:	4621      	mov	r1, r4
   c5a2c:	ee18 0a10 	vmov	r0, s16
   c5a30:	463a      	mov	r2, r7
   c5a32:	f000 fc2f 	bl	c6294 <__lshift>
   c5a36:	1bed      	subs	r5, r5, r7
   c5a38:	4604      	mov	r4, r0
   c5a3a:	f100 0914 	add.w	r9, r0, #20
   c5a3e:	f04f 0a00 	mov.w	sl, #0
   c5a42:	e7ae      	b.n	c59a2 <__gethex+0x202>
   c5a44:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5a48:	42a8      	cmp	r0, r5
   c5a4a:	dd72      	ble.n	c5b32 <__gethex+0x392>
   c5a4c:	1b45      	subs	r5, r0, r5
   c5a4e:	42ae      	cmp	r6, r5
   c5a50:	dc36      	bgt.n	c5ac0 <__gethex+0x320>
   c5a52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5a56:	2b02      	cmp	r3, #2
   c5a58:	d02a      	beq.n	c5ab0 <__gethex+0x310>
   c5a5a:	2b03      	cmp	r3, #3
   c5a5c:	d02c      	beq.n	c5ab8 <__gethex+0x318>
   c5a5e:	2b01      	cmp	r3, #1
   c5a60:	d11c      	bne.n	c5a9c <__gethex+0x2fc>
   c5a62:	42ae      	cmp	r6, r5
   c5a64:	d11a      	bne.n	c5a9c <__gethex+0x2fc>
   c5a66:	2e01      	cmp	r6, #1
   c5a68:	d112      	bne.n	c5a90 <__gethex+0x2f0>
   c5a6a:	9a04      	ldr	r2, [sp, #16]
   c5a6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c5a70:	6013      	str	r3, [r2, #0]
   c5a72:	2301      	movs	r3, #1
   c5a74:	6123      	str	r3, [r4, #16]
   c5a76:	f8c9 3000 	str.w	r3, [r9]
   c5a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5a7c:	2762      	movs	r7, #98	; 0x62
   c5a7e:	601c      	str	r4, [r3, #0]
   c5a80:	e723      	b.n	c58ca <__gethex+0x12a>
   c5a82:	bf00      	nop
   c5a84:	000c895c 	.word	0x000c895c
   c5a88:	000c88e9 	.word	0x000c88e9
   c5a8c:	000c88fa 	.word	0x000c88fa
   c5a90:	1e71      	subs	r1, r6, #1
   c5a92:	4620      	mov	r0, r4
   c5a94:	f000 fe42 	bl	c671c <__any_on>
   c5a98:	2800      	cmp	r0, #0
   c5a9a:	d1e6      	bne.n	c5a6a <__gethex+0x2ca>
   c5a9c:	ee18 0a10 	vmov	r0, s16
   c5aa0:	4621      	mov	r1, r4
   c5aa2:	f000 f9db 	bl	c5e5c <_Bfree>
   c5aa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c5aa8:	2300      	movs	r3, #0
   c5aaa:	6013      	str	r3, [r2, #0]
   c5aac:	2750      	movs	r7, #80	; 0x50
   c5aae:	e70c      	b.n	c58ca <__gethex+0x12a>
   c5ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5ab2:	2b00      	cmp	r3, #0
   c5ab4:	d1f2      	bne.n	c5a9c <__gethex+0x2fc>
   c5ab6:	e7d8      	b.n	c5a6a <__gethex+0x2ca>
   c5ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5aba:	2b00      	cmp	r3, #0
   c5abc:	d1d5      	bne.n	c5a6a <__gethex+0x2ca>
   c5abe:	e7ed      	b.n	c5a9c <__gethex+0x2fc>
   c5ac0:	1e6f      	subs	r7, r5, #1
   c5ac2:	f1ba 0f00 	cmp.w	sl, #0
   c5ac6:	d131      	bne.n	c5b2c <__gethex+0x38c>
   c5ac8:	b127      	cbz	r7, c5ad4 <__gethex+0x334>
   c5aca:	4639      	mov	r1, r7
   c5acc:	4620      	mov	r0, r4
   c5ace:	f000 fe25 	bl	c671c <__any_on>
   c5ad2:	4682      	mov	sl, r0
   c5ad4:	117b      	asrs	r3, r7, #5
   c5ad6:	2101      	movs	r1, #1
   c5ad8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c5adc:	f007 071f 	and.w	r7, r7, #31
   c5ae0:	fa01 f707 	lsl.w	r7, r1, r7
   c5ae4:	421f      	tst	r7, r3
   c5ae6:	4629      	mov	r1, r5
   c5ae8:	4620      	mov	r0, r4
   c5aea:	bf18      	it	ne
   c5aec:	f04a 0a02 	orrne.w	sl, sl, #2
   c5af0:	1b76      	subs	r6, r6, r5
   c5af2:	f7ff fded 	bl	c56d0 <rshift>
   c5af6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c5afa:	2702      	movs	r7, #2
   c5afc:	f1ba 0f00 	cmp.w	sl, #0
   c5b00:	d048      	beq.n	c5b94 <__gethex+0x3f4>
   c5b02:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c5b06:	2b02      	cmp	r3, #2
   c5b08:	d015      	beq.n	c5b36 <__gethex+0x396>
   c5b0a:	2b03      	cmp	r3, #3
   c5b0c:	d017      	beq.n	c5b3e <__gethex+0x39e>
   c5b0e:	2b01      	cmp	r3, #1
   c5b10:	d109      	bne.n	c5b26 <__gethex+0x386>
   c5b12:	f01a 0f02 	tst.w	sl, #2
   c5b16:	d006      	beq.n	c5b26 <__gethex+0x386>
   c5b18:	f8d9 0000 	ldr.w	r0, [r9]
   c5b1c:	ea4a 0a00 	orr.w	sl, sl, r0
   c5b20:	f01a 0f01 	tst.w	sl, #1
   c5b24:	d10e      	bne.n	c5b44 <__gethex+0x3a4>
   c5b26:	f047 0710 	orr.w	r7, r7, #16
   c5b2a:	e033      	b.n	c5b94 <__gethex+0x3f4>
   c5b2c:	f04f 0a01 	mov.w	sl, #1
   c5b30:	e7d0      	b.n	c5ad4 <__gethex+0x334>
   c5b32:	2701      	movs	r7, #1
   c5b34:	e7e2      	b.n	c5afc <__gethex+0x35c>
   c5b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5b38:	f1c3 0301 	rsb	r3, r3, #1
   c5b3c:	9315      	str	r3, [sp, #84]	; 0x54
   c5b3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5b40:	2b00      	cmp	r3, #0
   c5b42:	d0f0      	beq.n	c5b26 <__gethex+0x386>
   c5b44:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5b48:	f104 0314 	add.w	r3, r4, #20
   c5b4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5b50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c5b54:	f04f 0c00 	mov.w	ip, #0
   c5b58:	4618      	mov	r0, r3
   c5b5a:	f853 2b04 	ldr.w	r2, [r3], #4
   c5b5e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c5b62:	d01c      	beq.n	c5b9e <__gethex+0x3fe>
   c5b64:	3201      	adds	r2, #1
   c5b66:	6002      	str	r2, [r0, #0]
   c5b68:	2f02      	cmp	r7, #2
   c5b6a:	f104 0314 	add.w	r3, r4, #20
   c5b6e:	d13f      	bne.n	c5bf0 <__gethex+0x450>
   c5b70:	f8d8 2000 	ldr.w	r2, [r8]
   c5b74:	3a01      	subs	r2, #1
   c5b76:	42b2      	cmp	r2, r6
   c5b78:	d10a      	bne.n	c5b90 <__gethex+0x3f0>
   c5b7a:	1171      	asrs	r1, r6, #5
   c5b7c:	2201      	movs	r2, #1
   c5b7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c5b82:	f006 061f 	and.w	r6, r6, #31
   c5b86:	fa02 f606 	lsl.w	r6, r2, r6
   c5b8a:	421e      	tst	r6, r3
   c5b8c:	bf18      	it	ne
   c5b8e:	4617      	movne	r7, r2
   c5b90:	f047 0720 	orr.w	r7, r7, #32
   c5b94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5b96:	601c      	str	r4, [r3, #0]
   c5b98:	9b04      	ldr	r3, [sp, #16]
   c5b9a:	601d      	str	r5, [r3, #0]
   c5b9c:	e695      	b.n	c58ca <__gethex+0x12a>
   c5b9e:	4299      	cmp	r1, r3
   c5ba0:	f843 cc04 	str.w	ip, [r3, #-4]
   c5ba4:	d8d8      	bhi.n	c5b58 <__gethex+0x3b8>
   c5ba6:	68a3      	ldr	r3, [r4, #8]
   c5ba8:	459b      	cmp	fp, r3
   c5baa:	db19      	blt.n	c5be0 <__gethex+0x440>
   c5bac:	6861      	ldr	r1, [r4, #4]
   c5bae:	ee18 0a10 	vmov	r0, s16
   c5bb2:	3101      	adds	r1, #1
   c5bb4:	f000 f912 	bl	c5ddc <_Balloc>
   c5bb8:	4681      	mov	r9, r0
   c5bba:	b918      	cbnz	r0, c5bc4 <__gethex+0x424>
   c5bbc:	4b1a      	ldr	r3, [pc, #104]	; (c5c28 <__gethex+0x488>)
   c5bbe:	4602      	mov	r2, r0
   c5bc0:	2184      	movs	r1, #132	; 0x84
   c5bc2:	e6a8      	b.n	c5916 <__gethex+0x176>
   c5bc4:	6922      	ldr	r2, [r4, #16]
   c5bc6:	3202      	adds	r2, #2
   c5bc8:	f104 010c 	add.w	r1, r4, #12
   c5bcc:	0092      	lsls	r2, r2, #2
   c5bce:	300c      	adds	r0, #12
   c5bd0:	f7fe fd36 	bl	c4640 <memcpy>
   c5bd4:	4621      	mov	r1, r4
   c5bd6:	ee18 0a10 	vmov	r0, s16
   c5bda:	f000 f93f 	bl	c5e5c <_Bfree>
   c5bde:	464c      	mov	r4, r9
   c5be0:	6923      	ldr	r3, [r4, #16]
   c5be2:	1c5a      	adds	r2, r3, #1
   c5be4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5be8:	6122      	str	r2, [r4, #16]
   c5bea:	2201      	movs	r2, #1
   c5bec:	615a      	str	r2, [r3, #20]
   c5bee:	e7bb      	b.n	c5b68 <__gethex+0x3c8>
   c5bf0:	6922      	ldr	r2, [r4, #16]
   c5bf2:	455a      	cmp	r2, fp
   c5bf4:	dd0b      	ble.n	c5c0e <__gethex+0x46e>
   c5bf6:	2101      	movs	r1, #1
   c5bf8:	4620      	mov	r0, r4
   c5bfa:	f7ff fd69 	bl	c56d0 <rshift>
   c5bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5c02:	3501      	adds	r5, #1
   c5c04:	42ab      	cmp	r3, r5
   c5c06:	f6ff aed0 	blt.w	c59aa <__gethex+0x20a>
   c5c0a:	2701      	movs	r7, #1
   c5c0c:	e7c0      	b.n	c5b90 <__gethex+0x3f0>
   c5c0e:	f016 061f 	ands.w	r6, r6, #31
   c5c12:	d0fa      	beq.n	c5c0a <__gethex+0x46a>
   c5c14:	4453      	add	r3, sl
   c5c16:	f1c6 0620 	rsb	r6, r6, #32
   c5c1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c5c1e:	f000 f9cf 	bl	c5fc0 <__hi0bits>
   c5c22:	42b0      	cmp	r0, r6
   c5c24:	dbe7      	blt.n	c5bf6 <__gethex+0x456>
   c5c26:	e7f0      	b.n	c5c0a <__gethex+0x46a>
   c5c28:	000c88e9 	.word	0x000c88e9

000c5c2c <L_shift>:
   c5c2c:	f1c2 0208 	rsb	r2, r2, #8
   c5c30:	0092      	lsls	r2, r2, #2
   c5c32:	b570      	push	{r4, r5, r6, lr}
   c5c34:	f1c2 0620 	rsb	r6, r2, #32
   c5c38:	6843      	ldr	r3, [r0, #4]
   c5c3a:	6804      	ldr	r4, [r0, #0]
   c5c3c:	fa03 f506 	lsl.w	r5, r3, r6
   c5c40:	432c      	orrs	r4, r5
   c5c42:	40d3      	lsrs	r3, r2
   c5c44:	6004      	str	r4, [r0, #0]
   c5c46:	f840 3f04 	str.w	r3, [r0, #4]!
   c5c4a:	4288      	cmp	r0, r1
   c5c4c:	d3f4      	bcc.n	c5c38 <L_shift+0xc>
   c5c4e:	bd70      	pop	{r4, r5, r6, pc}

000c5c50 <__match>:
   c5c50:	b530      	push	{r4, r5, lr}
   c5c52:	6803      	ldr	r3, [r0, #0]
   c5c54:	3301      	adds	r3, #1
   c5c56:	f811 4b01 	ldrb.w	r4, [r1], #1
   c5c5a:	b914      	cbnz	r4, c5c62 <__match+0x12>
   c5c5c:	6003      	str	r3, [r0, #0]
   c5c5e:	2001      	movs	r0, #1
   c5c60:	bd30      	pop	{r4, r5, pc}
   c5c62:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5c66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c5c6a:	2d19      	cmp	r5, #25
   c5c6c:	bf98      	it	ls
   c5c6e:	3220      	addls	r2, #32
   c5c70:	42a2      	cmp	r2, r4
   c5c72:	d0f0      	beq.n	c5c56 <__match+0x6>
   c5c74:	2000      	movs	r0, #0
   c5c76:	e7f3      	b.n	c5c60 <__match+0x10>

000c5c78 <__hexnan>:
   c5c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5c7c:	680b      	ldr	r3, [r1, #0]
   c5c7e:	115e      	asrs	r6, r3, #5
   c5c80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5c84:	f013 031f 	ands.w	r3, r3, #31
   c5c88:	b087      	sub	sp, #28
   c5c8a:	bf18      	it	ne
   c5c8c:	3604      	addne	r6, #4
   c5c8e:	2500      	movs	r5, #0
   c5c90:	1f37      	subs	r7, r6, #4
   c5c92:	4690      	mov	r8, r2
   c5c94:	6802      	ldr	r2, [r0, #0]
   c5c96:	9301      	str	r3, [sp, #4]
   c5c98:	4682      	mov	sl, r0
   c5c9a:	f846 5c04 	str.w	r5, [r6, #-4]
   c5c9e:	46b9      	mov	r9, r7
   c5ca0:	463c      	mov	r4, r7
   c5ca2:	9502      	str	r5, [sp, #8]
   c5ca4:	46ab      	mov	fp, r5
   c5ca6:	7851      	ldrb	r1, [r2, #1]
   c5ca8:	1c53      	adds	r3, r2, #1
   c5caa:	9303      	str	r3, [sp, #12]
   c5cac:	b341      	cbz	r1, c5d00 <__hexnan+0x88>
   c5cae:	4608      	mov	r0, r1
   c5cb0:	9205      	str	r2, [sp, #20]
   c5cb2:	9104      	str	r1, [sp, #16]
   c5cb4:	f7ff fd5e 	bl	c5774 <__hexdig_fun>
   c5cb8:	2800      	cmp	r0, #0
   c5cba:	d14f      	bne.n	c5d5c <__hexnan+0xe4>
   c5cbc:	9904      	ldr	r1, [sp, #16]
   c5cbe:	9a05      	ldr	r2, [sp, #20]
   c5cc0:	2920      	cmp	r1, #32
   c5cc2:	d818      	bhi.n	c5cf6 <__hexnan+0x7e>
   c5cc4:	9b02      	ldr	r3, [sp, #8]
   c5cc6:	459b      	cmp	fp, r3
   c5cc8:	dd13      	ble.n	c5cf2 <__hexnan+0x7a>
   c5cca:	454c      	cmp	r4, r9
   c5ccc:	d206      	bcs.n	c5cdc <__hexnan+0x64>
   c5cce:	2d07      	cmp	r5, #7
   c5cd0:	dc04      	bgt.n	c5cdc <__hexnan+0x64>
   c5cd2:	462a      	mov	r2, r5
   c5cd4:	4649      	mov	r1, r9
   c5cd6:	4620      	mov	r0, r4
   c5cd8:	f7ff ffa8 	bl	c5c2c <L_shift>
   c5cdc:	4544      	cmp	r4, r8
   c5cde:	d950      	bls.n	c5d82 <__hexnan+0x10a>
   c5ce0:	2300      	movs	r3, #0
   c5ce2:	f1a4 0904 	sub.w	r9, r4, #4
   c5ce6:	f844 3c04 	str.w	r3, [r4, #-4]
   c5cea:	f8cd b008 	str.w	fp, [sp, #8]
   c5cee:	464c      	mov	r4, r9
   c5cf0:	461d      	mov	r5, r3
   c5cf2:	9a03      	ldr	r2, [sp, #12]
   c5cf4:	e7d7      	b.n	c5ca6 <__hexnan+0x2e>
   c5cf6:	2929      	cmp	r1, #41	; 0x29
   c5cf8:	d156      	bne.n	c5da8 <__hexnan+0x130>
   c5cfa:	3202      	adds	r2, #2
   c5cfc:	f8ca 2000 	str.w	r2, [sl]
   c5d00:	f1bb 0f00 	cmp.w	fp, #0
   c5d04:	d050      	beq.n	c5da8 <__hexnan+0x130>
   c5d06:	454c      	cmp	r4, r9
   c5d08:	d206      	bcs.n	c5d18 <__hexnan+0xa0>
   c5d0a:	2d07      	cmp	r5, #7
   c5d0c:	dc04      	bgt.n	c5d18 <__hexnan+0xa0>
   c5d0e:	462a      	mov	r2, r5
   c5d10:	4649      	mov	r1, r9
   c5d12:	4620      	mov	r0, r4
   c5d14:	f7ff ff8a 	bl	c5c2c <L_shift>
   c5d18:	4544      	cmp	r4, r8
   c5d1a:	d934      	bls.n	c5d86 <__hexnan+0x10e>
   c5d1c:	f1a8 0204 	sub.w	r2, r8, #4
   c5d20:	4623      	mov	r3, r4
   c5d22:	f853 1b04 	ldr.w	r1, [r3], #4
   c5d26:	f842 1f04 	str.w	r1, [r2, #4]!
   c5d2a:	429f      	cmp	r7, r3
   c5d2c:	d2f9      	bcs.n	c5d22 <__hexnan+0xaa>
   c5d2e:	1b3b      	subs	r3, r7, r4
   c5d30:	f023 0303 	bic.w	r3, r3, #3
   c5d34:	3304      	adds	r3, #4
   c5d36:	3401      	adds	r4, #1
   c5d38:	3e03      	subs	r6, #3
   c5d3a:	42b4      	cmp	r4, r6
   c5d3c:	bf88      	it	hi
   c5d3e:	2304      	movhi	r3, #4
   c5d40:	4443      	add	r3, r8
   c5d42:	2200      	movs	r2, #0
   c5d44:	f843 2b04 	str.w	r2, [r3], #4
   c5d48:	429f      	cmp	r7, r3
   c5d4a:	d2fb      	bcs.n	c5d44 <__hexnan+0xcc>
   c5d4c:	683b      	ldr	r3, [r7, #0]
   c5d4e:	b91b      	cbnz	r3, c5d58 <__hexnan+0xe0>
   c5d50:	4547      	cmp	r7, r8
   c5d52:	d127      	bne.n	c5da4 <__hexnan+0x12c>
   c5d54:	2301      	movs	r3, #1
   c5d56:	603b      	str	r3, [r7, #0]
   c5d58:	2005      	movs	r0, #5
   c5d5a:	e026      	b.n	c5daa <__hexnan+0x132>
   c5d5c:	3501      	adds	r5, #1
   c5d5e:	2d08      	cmp	r5, #8
   c5d60:	f10b 0b01 	add.w	fp, fp, #1
   c5d64:	dd06      	ble.n	c5d74 <__hexnan+0xfc>
   c5d66:	4544      	cmp	r4, r8
   c5d68:	d9c3      	bls.n	c5cf2 <__hexnan+0x7a>
   c5d6a:	2300      	movs	r3, #0
   c5d6c:	f844 3c04 	str.w	r3, [r4, #-4]
   c5d70:	2501      	movs	r5, #1
   c5d72:	3c04      	subs	r4, #4
   c5d74:	6822      	ldr	r2, [r4, #0]
   c5d76:	f000 000f 	and.w	r0, r0, #15
   c5d7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c5d7e:	6022      	str	r2, [r4, #0]
   c5d80:	e7b7      	b.n	c5cf2 <__hexnan+0x7a>
   c5d82:	2508      	movs	r5, #8
   c5d84:	e7b5      	b.n	c5cf2 <__hexnan+0x7a>
   c5d86:	9b01      	ldr	r3, [sp, #4]
   c5d88:	2b00      	cmp	r3, #0
   c5d8a:	d0df      	beq.n	c5d4c <__hexnan+0xd4>
   c5d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5d90:	f1c3 0320 	rsb	r3, r3, #32
   c5d94:	fa22 f303 	lsr.w	r3, r2, r3
   c5d98:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c5d9c:	401a      	ands	r2, r3
   c5d9e:	f846 2c04 	str.w	r2, [r6, #-4]
   c5da2:	e7d3      	b.n	c5d4c <__hexnan+0xd4>
   c5da4:	3f04      	subs	r7, #4
   c5da6:	e7d1      	b.n	c5d4c <__hexnan+0xd4>
   c5da8:	2004      	movs	r0, #4
   c5daa:	b007      	add	sp, #28
   c5dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5db0 <__retarget_lock_acquire_recursive>:
   c5db0:	4770      	bx	lr

000c5db2 <__retarget_lock_release>:
   c5db2:	4770      	bx	lr

000c5db4 <__retarget_lock_release_recursive>:
   c5db4:	4770      	bx	lr

000c5db6 <__ascii_mbtowc>:
   c5db6:	b082      	sub	sp, #8
   c5db8:	b901      	cbnz	r1, c5dbc <__ascii_mbtowc+0x6>
   c5dba:	a901      	add	r1, sp, #4
   c5dbc:	b142      	cbz	r2, c5dd0 <__ascii_mbtowc+0x1a>
   c5dbe:	b14b      	cbz	r3, c5dd4 <__ascii_mbtowc+0x1e>
   c5dc0:	7813      	ldrb	r3, [r2, #0]
   c5dc2:	600b      	str	r3, [r1, #0]
   c5dc4:	7812      	ldrb	r2, [r2, #0]
   c5dc6:	1e10      	subs	r0, r2, #0
   c5dc8:	bf18      	it	ne
   c5dca:	2001      	movne	r0, #1
   c5dcc:	b002      	add	sp, #8
   c5dce:	4770      	bx	lr
   c5dd0:	4610      	mov	r0, r2
   c5dd2:	e7fb      	b.n	c5dcc <__ascii_mbtowc+0x16>
   c5dd4:	f06f 0001 	mvn.w	r0, #1
   c5dd8:	e7f8      	b.n	c5dcc <__ascii_mbtowc+0x16>
	...

000c5ddc <_Balloc>:
   c5ddc:	b570      	push	{r4, r5, r6, lr}
   c5dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5de0:	4604      	mov	r4, r0
   c5de2:	460d      	mov	r5, r1
   c5de4:	b976      	cbnz	r6, c5e04 <_Balloc+0x28>
   c5de6:	2010      	movs	r0, #16
   c5de8:	f7f8 fada 	bl	be3a0 <malloc>
   c5dec:	4602      	mov	r2, r0
   c5dee:	6260      	str	r0, [r4, #36]	; 0x24
   c5df0:	b920      	cbnz	r0, c5dfc <_Balloc+0x20>
   c5df2:	4b18      	ldr	r3, [pc, #96]	; (c5e54 <_Balloc+0x78>)
   c5df4:	4818      	ldr	r0, [pc, #96]	; (c5e58 <_Balloc+0x7c>)
   c5df6:	2166      	movs	r1, #102	; 0x66
   c5df8:	f7f8 fb22 	bl	be440 <__assert_func>
   c5dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5e00:	6006      	str	r6, [r0, #0]
   c5e02:	60c6      	str	r6, [r0, #12]
   c5e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5e06:	68f3      	ldr	r3, [r6, #12]
   c5e08:	b183      	cbz	r3, c5e2c <_Balloc+0x50>
   c5e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5e0c:	68db      	ldr	r3, [r3, #12]
   c5e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5e12:	b9b8      	cbnz	r0, c5e44 <_Balloc+0x68>
   c5e14:	2101      	movs	r1, #1
   c5e16:	fa01 f605 	lsl.w	r6, r1, r5
   c5e1a:	1d72      	adds	r2, r6, #5
   c5e1c:	0092      	lsls	r2, r2, #2
   c5e1e:	4620      	mov	r0, r4
   c5e20:	f000 fc9d 	bl	c675e <_calloc_r>
   c5e24:	b160      	cbz	r0, c5e40 <_Balloc+0x64>
   c5e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c5e2a:	e00e      	b.n	c5e4a <_Balloc+0x6e>
   c5e2c:	2221      	movs	r2, #33	; 0x21
   c5e2e:	2104      	movs	r1, #4
   c5e30:	4620      	mov	r0, r4
   c5e32:	f000 fc94 	bl	c675e <_calloc_r>
   c5e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5e38:	60f0      	str	r0, [r6, #12]
   c5e3a:	68db      	ldr	r3, [r3, #12]
   c5e3c:	2b00      	cmp	r3, #0
   c5e3e:	d1e4      	bne.n	c5e0a <_Balloc+0x2e>
   c5e40:	2000      	movs	r0, #0
   c5e42:	bd70      	pop	{r4, r5, r6, pc}
   c5e44:	6802      	ldr	r2, [r0, #0]
   c5e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c5e4a:	2300      	movs	r3, #0
   c5e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5e50:	e7f7      	b.n	c5e42 <_Balloc+0x66>
   c5e52:	bf00      	nop
   c5e54:	000c8718 	.word	0x000c8718
   c5e58:	000c896e 	.word	0x000c896e

000c5e5c <_Bfree>:
   c5e5c:	b570      	push	{r4, r5, r6, lr}
   c5e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5e60:	4605      	mov	r5, r0
   c5e62:	460c      	mov	r4, r1
   c5e64:	b976      	cbnz	r6, c5e84 <_Bfree+0x28>
   c5e66:	2010      	movs	r0, #16
   c5e68:	f7f8 fa9a 	bl	be3a0 <malloc>
   c5e6c:	4602      	mov	r2, r0
   c5e6e:	6268      	str	r0, [r5, #36]	; 0x24
   c5e70:	b920      	cbnz	r0, c5e7c <_Bfree+0x20>
   c5e72:	4b09      	ldr	r3, [pc, #36]	; (c5e98 <_Bfree+0x3c>)
   c5e74:	4809      	ldr	r0, [pc, #36]	; (c5e9c <_Bfree+0x40>)
   c5e76:	218a      	movs	r1, #138	; 0x8a
   c5e78:	f7f8 fae2 	bl	be440 <__assert_func>
   c5e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5e80:	6006      	str	r6, [r0, #0]
   c5e82:	60c6      	str	r6, [r0, #12]
   c5e84:	b13c      	cbz	r4, c5e96 <_Bfree+0x3a>
   c5e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5e88:	6862      	ldr	r2, [r4, #4]
   c5e8a:	68db      	ldr	r3, [r3, #12]
   c5e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5e90:	6021      	str	r1, [r4, #0]
   c5e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5e96:	bd70      	pop	{r4, r5, r6, pc}
   c5e98:	000c8718 	.word	0x000c8718
   c5e9c:	000c896e 	.word	0x000c896e

000c5ea0 <__multadd>:
   c5ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5ea4:	690d      	ldr	r5, [r1, #16]
   c5ea6:	4607      	mov	r7, r0
   c5ea8:	460c      	mov	r4, r1
   c5eaa:	461e      	mov	r6, r3
   c5eac:	f101 0c14 	add.w	ip, r1, #20
   c5eb0:	2000      	movs	r0, #0
   c5eb2:	f8dc 3000 	ldr.w	r3, [ip]
   c5eb6:	b299      	uxth	r1, r3
   c5eb8:	fb02 6101 	mla	r1, r2, r1, r6
   c5ebc:	0c1e      	lsrs	r6, r3, #16
   c5ebe:	0c0b      	lsrs	r3, r1, #16
   c5ec0:	fb02 3306 	mla	r3, r2, r6, r3
   c5ec4:	b289      	uxth	r1, r1
   c5ec6:	3001      	adds	r0, #1
   c5ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c5ecc:	4285      	cmp	r5, r0
   c5ece:	f84c 1b04 	str.w	r1, [ip], #4
   c5ed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5ed6:	dcec      	bgt.n	c5eb2 <__multadd+0x12>
   c5ed8:	b30e      	cbz	r6, c5f1e <__multadd+0x7e>
   c5eda:	68a3      	ldr	r3, [r4, #8]
   c5edc:	42ab      	cmp	r3, r5
   c5ede:	dc19      	bgt.n	c5f14 <__multadd+0x74>
   c5ee0:	6861      	ldr	r1, [r4, #4]
   c5ee2:	4638      	mov	r0, r7
   c5ee4:	3101      	adds	r1, #1
   c5ee6:	f7ff ff79 	bl	c5ddc <_Balloc>
   c5eea:	4680      	mov	r8, r0
   c5eec:	b928      	cbnz	r0, c5efa <__multadd+0x5a>
   c5eee:	4602      	mov	r2, r0
   c5ef0:	4b0c      	ldr	r3, [pc, #48]	; (c5f24 <__multadd+0x84>)
   c5ef2:	480d      	ldr	r0, [pc, #52]	; (c5f28 <__multadd+0x88>)
   c5ef4:	21b5      	movs	r1, #181	; 0xb5
   c5ef6:	f7f8 faa3 	bl	be440 <__assert_func>
   c5efa:	6922      	ldr	r2, [r4, #16]
   c5efc:	3202      	adds	r2, #2
   c5efe:	f104 010c 	add.w	r1, r4, #12
   c5f02:	0092      	lsls	r2, r2, #2
   c5f04:	300c      	adds	r0, #12
   c5f06:	f7fe fb9b 	bl	c4640 <memcpy>
   c5f0a:	4621      	mov	r1, r4
   c5f0c:	4638      	mov	r0, r7
   c5f0e:	f7ff ffa5 	bl	c5e5c <_Bfree>
   c5f12:	4644      	mov	r4, r8
   c5f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5f18:	3501      	adds	r5, #1
   c5f1a:	615e      	str	r6, [r3, #20]
   c5f1c:	6125      	str	r5, [r4, #16]
   c5f1e:	4620      	mov	r0, r4
   c5f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5f24:	000c88e9 	.word	0x000c88e9
   c5f28:	000c896e 	.word	0x000c896e

000c5f2c <__s2b>:
   c5f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5f30:	460c      	mov	r4, r1
   c5f32:	4615      	mov	r5, r2
   c5f34:	461f      	mov	r7, r3
   c5f36:	2209      	movs	r2, #9
   c5f38:	3308      	adds	r3, #8
   c5f3a:	4606      	mov	r6, r0
   c5f3c:	fb93 f3f2 	sdiv	r3, r3, r2
   c5f40:	2100      	movs	r1, #0
   c5f42:	2201      	movs	r2, #1
   c5f44:	429a      	cmp	r2, r3
   c5f46:	db09      	blt.n	c5f5c <__s2b+0x30>
   c5f48:	4630      	mov	r0, r6
   c5f4a:	f7ff ff47 	bl	c5ddc <_Balloc>
   c5f4e:	b940      	cbnz	r0, c5f62 <__s2b+0x36>
   c5f50:	4602      	mov	r2, r0
   c5f52:	4b19      	ldr	r3, [pc, #100]	; (c5fb8 <__s2b+0x8c>)
   c5f54:	4819      	ldr	r0, [pc, #100]	; (c5fbc <__s2b+0x90>)
   c5f56:	21ce      	movs	r1, #206	; 0xce
   c5f58:	f7f8 fa72 	bl	be440 <__assert_func>
   c5f5c:	0052      	lsls	r2, r2, #1
   c5f5e:	3101      	adds	r1, #1
   c5f60:	e7f0      	b.n	c5f44 <__s2b+0x18>
   c5f62:	9b08      	ldr	r3, [sp, #32]
   c5f64:	6143      	str	r3, [r0, #20]
   c5f66:	2d09      	cmp	r5, #9
   c5f68:	f04f 0301 	mov.w	r3, #1
   c5f6c:	6103      	str	r3, [r0, #16]
   c5f6e:	dd16      	ble.n	c5f9e <__s2b+0x72>
   c5f70:	f104 0909 	add.w	r9, r4, #9
   c5f74:	46c8      	mov	r8, r9
   c5f76:	442c      	add	r4, r5
   c5f78:	f818 3b01 	ldrb.w	r3, [r8], #1
   c5f7c:	4601      	mov	r1, r0
   c5f7e:	3b30      	subs	r3, #48	; 0x30
   c5f80:	220a      	movs	r2, #10
   c5f82:	4630      	mov	r0, r6
   c5f84:	f7ff ff8c 	bl	c5ea0 <__multadd>
   c5f88:	45a0      	cmp	r8, r4
   c5f8a:	d1f5      	bne.n	c5f78 <__s2b+0x4c>
   c5f8c:	f1a5 0408 	sub.w	r4, r5, #8
   c5f90:	444c      	add	r4, r9
   c5f92:	1b2d      	subs	r5, r5, r4
   c5f94:	1963      	adds	r3, r4, r5
   c5f96:	42bb      	cmp	r3, r7
   c5f98:	db04      	blt.n	c5fa4 <__s2b+0x78>
   c5f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5f9e:	340a      	adds	r4, #10
   c5fa0:	2509      	movs	r5, #9
   c5fa2:	e7f6      	b.n	c5f92 <__s2b+0x66>
   c5fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5fa8:	4601      	mov	r1, r0
   c5faa:	3b30      	subs	r3, #48	; 0x30
   c5fac:	220a      	movs	r2, #10
   c5fae:	4630      	mov	r0, r6
   c5fb0:	f7ff ff76 	bl	c5ea0 <__multadd>
   c5fb4:	e7ee      	b.n	c5f94 <__s2b+0x68>
   c5fb6:	bf00      	nop
   c5fb8:	000c88e9 	.word	0x000c88e9
   c5fbc:	000c896e 	.word	0x000c896e

000c5fc0 <__hi0bits>:
   c5fc0:	0c03      	lsrs	r3, r0, #16
   c5fc2:	041b      	lsls	r3, r3, #16
   c5fc4:	b9d3      	cbnz	r3, c5ffc <__hi0bits+0x3c>
   c5fc6:	0400      	lsls	r0, r0, #16
   c5fc8:	2310      	movs	r3, #16
   c5fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c5fce:	bf04      	itt	eq
   c5fd0:	0200      	lsleq	r0, r0, #8
   c5fd2:	3308      	addeq	r3, #8
   c5fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5fd8:	bf04      	itt	eq
   c5fda:	0100      	lsleq	r0, r0, #4
   c5fdc:	3304      	addeq	r3, #4
   c5fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5fe2:	bf04      	itt	eq
   c5fe4:	0080      	lsleq	r0, r0, #2
   c5fe6:	3302      	addeq	r3, #2
   c5fe8:	2800      	cmp	r0, #0
   c5fea:	db05      	blt.n	c5ff8 <__hi0bits+0x38>
   c5fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5ff0:	f103 0301 	add.w	r3, r3, #1
   c5ff4:	bf08      	it	eq
   c5ff6:	2320      	moveq	r3, #32
   c5ff8:	4618      	mov	r0, r3
   c5ffa:	4770      	bx	lr
   c5ffc:	2300      	movs	r3, #0
   c5ffe:	e7e4      	b.n	c5fca <__hi0bits+0xa>

000c6000 <__lo0bits>:
   c6000:	6803      	ldr	r3, [r0, #0]
   c6002:	f013 0207 	ands.w	r2, r3, #7
   c6006:	4601      	mov	r1, r0
   c6008:	d00b      	beq.n	c6022 <__lo0bits+0x22>
   c600a:	07da      	lsls	r2, r3, #31
   c600c:	d423      	bmi.n	c6056 <__lo0bits+0x56>
   c600e:	0798      	lsls	r0, r3, #30
   c6010:	bf49      	itett	mi
   c6012:	085b      	lsrmi	r3, r3, #1
   c6014:	089b      	lsrpl	r3, r3, #2
   c6016:	2001      	movmi	r0, #1
   c6018:	600b      	strmi	r3, [r1, #0]
   c601a:	bf5c      	itt	pl
   c601c:	600b      	strpl	r3, [r1, #0]
   c601e:	2002      	movpl	r0, #2
   c6020:	4770      	bx	lr
   c6022:	b298      	uxth	r0, r3
   c6024:	b9a8      	cbnz	r0, c6052 <__lo0bits+0x52>
   c6026:	0c1b      	lsrs	r3, r3, #16
   c6028:	2010      	movs	r0, #16
   c602a:	b2da      	uxtb	r2, r3
   c602c:	b90a      	cbnz	r2, c6032 <__lo0bits+0x32>
   c602e:	3008      	adds	r0, #8
   c6030:	0a1b      	lsrs	r3, r3, #8
   c6032:	071a      	lsls	r2, r3, #28
   c6034:	bf04      	itt	eq
   c6036:	091b      	lsreq	r3, r3, #4
   c6038:	3004      	addeq	r0, #4
   c603a:	079a      	lsls	r2, r3, #30
   c603c:	bf04      	itt	eq
   c603e:	089b      	lsreq	r3, r3, #2
   c6040:	3002      	addeq	r0, #2
   c6042:	07da      	lsls	r2, r3, #31
   c6044:	d403      	bmi.n	c604e <__lo0bits+0x4e>
   c6046:	085b      	lsrs	r3, r3, #1
   c6048:	f100 0001 	add.w	r0, r0, #1
   c604c:	d005      	beq.n	c605a <__lo0bits+0x5a>
   c604e:	600b      	str	r3, [r1, #0]
   c6050:	4770      	bx	lr
   c6052:	4610      	mov	r0, r2
   c6054:	e7e9      	b.n	c602a <__lo0bits+0x2a>
   c6056:	2000      	movs	r0, #0
   c6058:	4770      	bx	lr
   c605a:	2020      	movs	r0, #32
   c605c:	4770      	bx	lr
	...

000c6060 <__i2b>:
   c6060:	b510      	push	{r4, lr}
   c6062:	460c      	mov	r4, r1
   c6064:	2101      	movs	r1, #1
   c6066:	f7ff feb9 	bl	c5ddc <_Balloc>
   c606a:	4602      	mov	r2, r0
   c606c:	b928      	cbnz	r0, c607a <__i2b+0x1a>
   c606e:	4b05      	ldr	r3, [pc, #20]	; (c6084 <__i2b+0x24>)
   c6070:	4805      	ldr	r0, [pc, #20]	; (c6088 <__i2b+0x28>)
   c6072:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c6076:	f7f8 f9e3 	bl	be440 <__assert_func>
   c607a:	2301      	movs	r3, #1
   c607c:	6144      	str	r4, [r0, #20]
   c607e:	6103      	str	r3, [r0, #16]
   c6080:	bd10      	pop	{r4, pc}
   c6082:	bf00      	nop
   c6084:	000c88e9 	.word	0x000c88e9
   c6088:	000c896e 	.word	0x000c896e

000c608c <__multiply>:
   c608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6090:	4691      	mov	r9, r2
   c6092:	690a      	ldr	r2, [r1, #16]
   c6094:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c6098:	429a      	cmp	r2, r3
   c609a:	bfb8      	it	lt
   c609c:	460b      	movlt	r3, r1
   c609e:	460c      	mov	r4, r1
   c60a0:	bfbc      	itt	lt
   c60a2:	464c      	movlt	r4, r9
   c60a4:	4699      	movlt	r9, r3
   c60a6:	6927      	ldr	r7, [r4, #16]
   c60a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c60ac:	68a3      	ldr	r3, [r4, #8]
   c60ae:	6861      	ldr	r1, [r4, #4]
   c60b0:	eb07 060a 	add.w	r6, r7, sl
   c60b4:	42b3      	cmp	r3, r6
   c60b6:	b085      	sub	sp, #20
   c60b8:	bfb8      	it	lt
   c60ba:	3101      	addlt	r1, #1
   c60bc:	f7ff fe8e 	bl	c5ddc <_Balloc>
   c60c0:	b930      	cbnz	r0, c60d0 <__multiply+0x44>
   c60c2:	4602      	mov	r2, r0
   c60c4:	4b44      	ldr	r3, [pc, #272]	; (c61d8 <__multiply+0x14c>)
   c60c6:	4845      	ldr	r0, [pc, #276]	; (c61dc <__multiply+0x150>)
   c60c8:	f240 115d 	movw	r1, #349	; 0x15d
   c60cc:	f7f8 f9b8 	bl	be440 <__assert_func>
   c60d0:	f100 0514 	add.w	r5, r0, #20
   c60d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c60d8:	462b      	mov	r3, r5
   c60da:	2200      	movs	r2, #0
   c60dc:	4543      	cmp	r3, r8
   c60de:	d321      	bcc.n	c6124 <__multiply+0x98>
   c60e0:	f104 0314 	add.w	r3, r4, #20
   c60e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c60e8:	f109 0314 	add.w	r3, r9, #20
   c60ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c60f0:	9202      	str	r2, [sp, #8]
   c60f2:	1b3a      	subs	r2, r7, r4
   c60f4:	3a15      	subs	r2, #21
   c60f6:	f022 0203 	bic.w	r2, r2, #3
   c60fa:	3204      	adds	r2, #4
   c60fc:	f104 0115 	add.w	r1, r4, #21
   c6100:	428f      	cmp	r7, r1
   c6102:	bf38      	it	cc
   c6104:	2204      	movcc	r2, #4
   c6106:	9201      	str	r2, [sp, #4]
   c6108:	9a02      	ldr	r2, [sp, #8]
   c610a:	9303      	str	r3, [sp, #12]
   c610c:	429a      	cmp	r2, r3
   c610e:	d80c      	bhi.n	c612a <__multiply+0x9e>
   c6110:	2e00      	cmp	r6, #0
   c6112:	dd03      	ble.n	c611c <__multiply+0x90>
   c6114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c6118:	2b00      	cmp	r3, #0
   c611a:	d05a      	beq.n	c61d2 <__multiply+0x146>
   c611c:	6106      	str	r6, [r0, #16]
   c611e:	b005      	add	sp, #20
   c6120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c6124:	f843 2b04 	str.w	r2, [r3], #4
   c6128:	e7d8      	b.n	c60dc <__multiply+0x50>
   c612a:	f8b3 a000 	ldrh.w	sl, [r3]
   c612e:	f1ba 0f00 	cmp.w	sl, #0
   c6132:	d024      	beq.n	c617e <__multiply+0xf2>
   c6134:	f104 0e14 	add.w	lr, r4, #20
   c6138:	46a9      	mov	r9, r5
   c613a:	f04f 0c00 	mov.w	ip, #0
   c613e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c6142:	f8d9 1000 	ldr.w	r1, [r9]
   c6146:	fa1f fb82 	uxth.w	fp, r2
   c614a:	b289      	uxth	r1, r1
   c614c:	fb0a 110b 	mla	r1, sl, fp, r1
   c6150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c6154:	f8d9 2000 	ldr.w	r2, [r9]
   c6158:	4461      	add	r1, ip
   c615a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c615e:	fb0a c20b 	mla	r2, sl, fp, ip
   c6162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c6166:	b289      	uxth	r1, r1
   c6168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c616c:	4577      	cmp	r7, lr
   c616e:	f849 1b04 	str.w	r1, [r9], #4
   c6172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c6176:	d8e2      	bhi.n	c613e <__multiply+0xb2>
   c6178:	9a01      	ldr	r2, [sp, #4]
   c617a:	f845 c002 	str.w	ip, [r5, r2]
   c617e:	9a03      	ldr	r2, [sp, #12]
   c6180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c6184:	3304      	adds	r3, #4
   c6186:	f1b9 0f00 	cmp.w	r9, #0
   c618a:	d020      	beq.n	c61ce <__multiply+0x142>
   c618c:	6829      	ldr	r1, [r5, #0]
   c618e:	f104 0c14 	add.w	ip, r4, #20
   c6192:	46ae      	mov	lr, r5
   c6194:	f04f 0a00 	mov.w	sl, #0
   c6198:	f8bc b000 	ldrh.w	fp, [ip]
   c619c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c61a0:	fb09 220b 	mla	r2, r9, fp, r2
   c61a4:	4492      	add	sl, r2
   c61a6:	b289      	uxth	r1, r1
   c61a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c61ac:	f84e 1b04 	str.w	r1, [lr], #4
   c61b0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c61b4:	f8be 1000 	ldrh.w	r1, [lr]
   c61b8:	0c12      	lsrs	r2, r2, #16
   c61ba:	fb09 1102 	mla	r1, r9, r2, r1
   c61be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c61c2:	4567      	cmp	r7, ip
   c61c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c61c8:	d8e6      	bhi.n	c6198 <__multiply+0x10c>
   c61ca:	9a01      	ldr	r2, [sp, #4]
   c61cc:	50a9      	str	r1, [r5, r2]
   c61ce:	3504      	adds	r5, #4
   c61d0:	e79a      	b.n	c6108 <__multiply+0x7c>
   c61d2:	3e01      	subs	r6, #1
   c61d4:	e79c      	b.n	c6110 <__multiply+0x84>
   c61d6:	bf00      	nop
   c61d8:	000c88e9 	.word	0x000c88e9
   c61dc:	000c896e 	.word	0x000c896e

000c61e0 <__pow5mult>:
   c61e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c61e4:	4615      	mov	r5, r2
   c61e6:	f012 0203 	ands.w	r2, r2, #3
   c61ea:	4606      	mov	r6, r0
   c61ec:	460f      	mov	r7, r1
   c61ee:	d007      	beq.n	c6200 <__pow5mult+0x20>
   c61f0:	4c25      	ldr	r4, [pc, #148]	; (c6288 <__pow5mult+0xa8>)
   c61f2:	3a01      	subs	r2, #1
   c61f4:	2300      	movs	r3, #0
   c61f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c61fa:	f7ff fe51 	bl	c5ea0 <__multadd>
   c61fe:	4607      	mov	r7, r0
   c6200:	10ad      	asrs	r5, r5, #2
   c6202:	d03d      	beq.n	c6280 <__pow5mult+0xa0>
   c6204:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c6206:	b97c      	cbnz	r4, c6228 <__pow5mult+0x48>
   c6208:	2010      	movs	r0, #16
   c620a:	f7f8 f8c9 	bl	be3a0 <malloc>
   c620e:	4602      	mov	r2, r0
   c6210:	6270      	str	r0, [r6, #36]	; 0x24
   c6212:	b928      	cbnz	r0, c6220 <__pow5mult+0x40>
   c6214:	4b1d      	ldr	r3, [pc, #116]	; (c628c <__pow5mult+0xac>)
   c6216:	481e      	ldr	r0, [pc, #120]	; (c6290 <__pow5mult+0xb0>)
   c6218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c621c:	f7f8 f910 	bl	be440 <__assert_func>
   c6220:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c6224:	6004      	str	r4, [r0, #0]
   c6226:	60c4      	str	r4, [r0, #12]
   c6228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c622c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c6230:	b94c      	cbnz	r4, c6246 <__pow5mult+0x66>
   c6232:	f240 2171 	movw	r1, #625	; 0x271
   c6236:	4630      	mov	r0, r6
   c6238:	f7ff ff12 	bl	c6060 <__i2b>
   c623c:	2300      	movs	r3, #0
   c623e:	f8c8 0008 	str.w	r0, [r8, #8]
   c6242:	4604      	mov	r4, r0
   c6244:	6003      	str	r3, [r0, #0]
   c6246:	f04f 0900 	mov.w	r9, #0
   c624a:	07eb      	lsls	r3, r5, #31
   c624c:	d50a      	bpl.n	c6264 <__pow5mult+0x84>
   c624e:	4639      	mov	r1, r7
   c6250:	4622      	mov	r2, r4
   c6252:	4630      	mov	r0, r6
   c6254:	f7ff ff1a 	bl	c608c <__multiply>
   c6258:	4639      	mov	r1, r7
   c625a:	4680      	mov	r8, r0
   c625c:	4630      	mov	r0, r6
   c625e:	f7ff fdfd 	bl	c5e5c <_Bfree>
   c6262:	4647      	mov	r7, r8
   c6264:	106d      	asrs	r5, r5, #1
   c6266:	d00b      	beq.n	c6280 <__pow5mult+0xa0>
   c6268:	6820      	ldr	r0, [r4, #0]
   c626a:	b938      	cbnz	r0, c627c <__pow5mult+0x9c>
   c626c:	4622      	mov	r2, r4
   c626e:	4621      	mov	r1, r4
   c6270:	4630      	mov	r0, r6
   c6272:	f7ff ff0b 	bl	c608c <__multiply>
   c6276:	6020      	str	r0, [r4, #0]
   c6278:	f8c0 9000 	str.w	r9, [r0]
   c627c:	4604      	mov	r4, r0
   c627e:	e7e4      	b.n	c624a <__pow5mult+0x6a>
   c6280:	4638      	mov	r0, r7
   c6282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c6286:	bf00      	nop
   c6288:	000c8ab8 	.word	0x000c8ab8
   c628c:	000c8718 	.word	0x000c8718
   c6290:	000c896e 	.word	0x000c896e

000c6294 <__lshift>:
   c6294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c6298:	460c      	mov	r4, r1
   c629a:	6849      	ldr	r1, [r1, #4]
   c629c:	6923      	ldr	r3, [r4, #16]
   c629e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c62a2:	68a3      	ldr	r3, [r4, #8]
   c62a4:	4607      	mov	r7, r0
   c62a6:	4691      	mov	r9, r2
   c62a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c62ac:	f108 0601 	add.w	r6, r8, #1
   c62b0:	42b3      	cmp	r3, r6
   c62b2:	db0b      	blt.n	c62cc <__lshift+0x38>
   c62b4:	4638      	mov	r0, r7
   c62b6:	f7ff fd91 	bl	c5ddc <_Balloc>
   c62ba:	4605      	mov	r5, r0
   c62bc:	b948      	cbnz	r0, c62d2 <__lshift+0x3e>
   c62be:	4602      	mov	r2, r0
   c62c0:	4b2a      	ldr	r3, [pc, #168]	; (c636c <__lshift+0xd8>)
   c62c2:	482b      	ldr	r0, [pc, #172]	; (c6370 <__lshift+0xdc>)
   c62c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c62c8:	f7f8 f8ba 	bl	be440 <__assert_func>
   c62cc:	3101      	adds	r1, #1
   c62ce:	005b      	lsls	r3, r3, #1
   c62d0:	e7ee      	b.n	c62b0 <__lshift+0x1c>
   c62d2:	2300      	movs	r3, #0
   c62d4:	f100 0114 	add.w	r1, r0, #20
   c62d8:	f100 0210 	add.w	r2, r0, #16
   c62dc:	4618      	mov	r0, r3
   c62de:	4553      	cmp	r3, sl
   c62e0:	db37      	blt.n	c6352 <__lshift+0xbe>
   c62e2:	6920      	ldr	r0, [r4, #16]
   c62e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c62e8:	f104 0314 	add.w	r3, r4, #20
   c62ec:	f019 091f 	ands.w	r9, r9, #31
   c62f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c62f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c62f8:	d02f      	beq.n	c635a <__lshift+0xc6>
   c62fa:	f1c9 0e20 	rsb	lr, r9, #32
   c62fe:	468a      	mov	sl, r1
   c6300:	f04f 0c00 	mov.w	ip, #0
   c6304:	681a      	ldr	r2, [r3, #0]
   c6306:	fa02 f209 	lsl.w	r2, r2, r9
   c630a:	ea42 020c 	orr.w	r2, r2, ip
   c630e:	f84a 2b04 	str.w	r2, [sl], #4
   c6312:	f853 2b04 	ldr.w	r2, [r3], #4
   c6316:	4298      	cmp	r0, r3
   c6318:	fa22 fc0e 	lsr.w	ip, r2, lr
   c631c:	d8f2      	bhi.n	c6304 <__lshift+0x70>
   c631e:	1b03      	subs	r3, r0, r4
   c6320:	3b15      	subs	r3, #21
   c6322:	f023 0303 	bic.w	r3, r3, #3
   c6326:	3304      	adds	r3, #4
   c6328:	f104 0215 	add.w	r2, r4, #21
   c632c:	4290      	cmp	r0, r2
   c632e:	bf38      	it	cc
   c6330:	2304      	movcc	r3, #4
   c6332:	f841 c003 	str.w	ip, [r1, r3]
   c6336:	f1bc 0f00 	cmp.w	ip, #0
   c633a:	d001      	beq.n	c6340 <__lshift+0xac>
   c633c:	f108 0602 	add.w	r6, r8, #2
   c6340:	3e01      	subs	r6, #1
   c6342:	4638      	mov	r0, r7
   c6344:	612e      	str	r6, [r5, #16]
   c6346:	4621      	mov	r1, r4
   c6348:	f7ff fd88 	bl	c5e5c <_Bfree>
   c634c:	4628      	mov	r0, r5
   c634e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c6352:	f842 0f04 	str.w	r0, [r2, #4]!
   c6356:	3301      	adds	r3, #1
   c6358:	e7c1      	b.n	c62de <__lshift+0x4a>
   c635a:	3904      	subs	r1, #4
   c635c:	f853 2b04 	ldr.w	r2, [r3], #4
   c6360:	f841 2f04 	str.w	r2, [r1, #4]!
   c6364:	4298      	cmp	r0, r3
   c6366:	d8f9      	bhi.n	c635c <__lshift+0xc8>
   c6368:	e7ea      	b.n	c6340 <__lshift+0xac>
   c636a:	bf00      	nop
   c636c:	000c88e9 	.word	0x000c88e9
   c6370:	000c896e 	.word	0x000c896e

000c6374 <__mcmp>:
   c6374:	b530      	push	{r4, r5, lr}
   c6376:	6902      	ldr	r2, [r0, #16]
   c6378:	690c      	ldr	r4, [r1, #16]
   c637a:	1b12      	subs	r2, r2, r4
   c637c:	d10e      	bne.n	c639c <__mcmp+0x28>
   c637e:	f100 0314 	add.w	r3, r0, #20
   c6382:	3114      	adds	r1, #20
   c6384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c6388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c638c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c6390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c6394:	42a5      	cmp	r5, r4
   c6396:	d003      	beq.n	c63a0 <__mcmp+0x2c>
   c6398:	d305      	bcc.n	c63a6 <__mcmp+0x32>
   c639a:	2201      	movs	r2, #1
   c639c:	4610      	mov	r0, r2
   c639e:	bd30      	pop	{r4, r5, pc}
   c63a0:	4283      	cmp	r3, r0
   c63a2:	d3f3      	bcc.n	c638c <__mcmp+0x18>
   c63a4:	e7fa      	b.n	c639c <__mcmp+0x28>
   c63a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c63aa:	e7f7      	b.n	c639c <__mcmp+0x28>

000c63ac <__mdiff>:
   c63ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c63b0:	460c      	mov	r4, r1
   c63b2:	4606      	mov	r6, r0
   c63b4:	4611      	mov	r1, r2
   c63b6:	4620      	mov	r0, r4
   c63b8:	4690      	mov	r8, r2
   c63ba:	f7ff ffdb 	bl	c6374 <__mcmp>
   c63be:	1e05      	subs	r5, r0, #0
   c63c0:	d110      	bne.n	c63e4 <__mdiff+0x38>
   c63c2:	4629      	mov	r1, r5
   c63c4:	4630      	mov	r0, r6
   c63c6:	f7ff fd09 	bl	c5ddc <_Balloc>
   c63ca:	b930      	cbnz	r0, c63da <__mdiff+0x2e>
   c63cc:	4b3a      	ldr	r3, [pc, #232]	; (c64b8 <__mdiff+0x10c>)
   c63ce:	4602      	mov	r2, r0
   c63d0:	f240 2132 	movw	r1, #562	; 0x232
   c63d4:	4839      	ldr	r0, [pc, #228]	; (c64bc <__mdiff+0x110>)
   c63d6:	f7f8 f833 	bl	be440 <__assert_func>
   c63da:	2301      	movs	r3, #1
   c63dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c63e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c63e4:	bfa4      	itt	ge
   c63e6:	4643      	movge	r3, r8
   c63e8:	46a0      	movge	r8, r4
   c63ea:	4630      	mov	r0, r6
   c63ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c63f0:	bfa6      	itte	ge
   c63f2:	461c      	movge	r4, r3
   c63f4:	2500      	movge	r5, #0
   c63f6:	2501      	movlt	r5, #1
   c63f8:	f7ff fcf0 	bl	c5ddc <_Balloc>
   c63fc:	b920      	cbnz	r0, c6408 <__mdiff+0x5c>
   c63fe:	4b2e      	ldr	r3, [pc, #184]	; (c64b8 <__mdiff+0x10c>)
   c6400:	4602      	mov	r2, r0
   c6402:	f44f 7110 	mov.w	r1, #576	; 0x240
   c6406:	e7e5      	b.n	c63d4 <__mdiff+0x28>
   c6408:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c640c:	6926      	ldr	r6, [r4, #16]
   c640e:	60c5      	str	r5, [r0, #12]
   c6410:	f104 0914 	add.w	r9, r4, #20
   c6414:	f108 0514 	add.w	r5, r8, #20
   c6418:	f100 0e14 	add.w	lr, r0, #20
   c641c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c6420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c6424:	f108 0210 	add.w	r2, r8, #16
   c6428:	46f2      	mov	sl, lr
   c642a:	2100      	movs	r1, #0
   c642c:	f859 3b04 	ldr.w	r3, [r9], #4
   c6430:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c6434:	fa1f f883 	uxth.w	r8, r3
   c6438:	fa11 f18b 	uxtah	r1, r1, fp
   c643c:	0c1b      	lsrs	r3, r3, #16
   c643e:	eba1 0808 	sub.w	r8, r1, r8
   c6442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c6446:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c644a:	fa1f f888 	uxth.w	r8, r8
   c644e:	1419      	asrs	r1, r3, #16
   c6450:	454e      	cmp	r6, r9
   c6452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c6456:	f84a 3b04 	str.w	r3, [sl], #4
   c645a:	d8e7      	bhi.n	c642c <__mdiff+0x80>
   c645c:	1b33      	subs	r3, r6, r4
   c645e:	3b15      	subs	r3, #21
   c6460:	f023 0303 	bic.w	r3, r3, #3
   c6464:	3304      	adds	r3, #4
   c6466:	3415      	adds	r4, #21
   c6468:	42a6      	cmp	r6, r4
   c646a:	bf38      	it	cc
   c646c:	2304      	movcc	r3, #4
   c646e:	441d      	add	r5, r3
   c6470:	4473      	add	r3, lr
   c6472:	469e      	mov	lr, r3
   c6474:	462e      	mov	r6, r5
   c6476:	4566      	cmp	r6, ip
   c6478:	d30e      	bcc.n	c6498 <__mdiff+0xec>
   c647a:	f10c 0203 	add.w	r2, ip, #3
   c647e:	1b52      	subs	r2, r2, r5
   c6480:	f022 0203 	bic.w	r2, r2, #3
   c6484:	3d03      	subs	r5, #3
   c6486:	45ac      	cmp	ip, r5
   c6488:	bf38      	it	cc
   c648a:	2200      	movcc	r2, #0
   c648c:	441a      	add	r2, r3
   c648e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c6492:	b17b      	cbz	r3, c64b4 <__mdiff+0x108>
   c6494:	6107      	str	r7, [r0, #16]
   c6496:	e7a3      	b.n	c63e0 <__mdiff+0x34>
   c6498:	f856 8b04 	ldr.w	r8, [r6], #4
   c649c:	fa11 f288 	uxtah	r2, r1, r8
   c64a0:	1414      	asrs	r4, r2, #16
   c64a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c64a6:	b292      	uxth	r2, r2
   c64a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c64ac:	f84e 2b04 	str.w	r2, [lr], #4
   c64b0:	1421      	asrs	r1, r4, #16
   c64b2:	e7e0      	b.n	c6476 <__mdiff+0xca>
   c64b4:	3f01      	subs	r7, #1
   c64b6:	e7ea      	b.n	c648e <__mdiff+0xe2>
   c64b8:	000c88e9 	.word	0x000c88e9
   c64bc:	000c896e 	.word	0x000c896e

000c64c0 <__ulp>:
   c64c0:	b082      	sub	sp, #8
   c64c2:	ed8d 0b00 	vstr	d0, [sp]
   c64c6:	9b01      	ldr	r3, [sp, #4]
   c64c8:	4912      	ldr	r1, [pc, #72]	; (c6514 <__ulp+0x54>)
   c64ca:	4019      	ands	r1, r3
   c64cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c64d0:	2900      	cmp	r1, #0
   c64d2:	dd05      	ble.n	c64e0 <__ulp+0x20>
   c64d4:	2200      	movs	r2, #0
   c64d6:	460b      	mov	r3, r1
   c64d8:	ec43 2b10 	vmov	d0, r2, r3
   c64dc:	b002      	add	sp, #8
   c64de:	4770      	bx	lr
   c64e0:	4249      	negs	r1, r1
   c64e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c64e6:	ea4f 5021 	mov.w	r0, r1, asr #20
   c64ea:	f04f 0200 	mov.w	r2, #0
   c64ee:	f04f 0300 	mov.w	r3, #0
   c64f2:	da04      	bge.n	c64fe <__ulp+0x3e>
   c64f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c64f8:	fa41 f300 	asr.w	r3, r1, r0
   c64fc:	e7ec      	b.n	c64d8 <__ulp+0x18>
   c64fe:	f1a0 0114 	sub.w	r1, r0, #20
   c6502:	291e      	cmp	r1, #30
   c6504:	bfda      	itte	le
   c6506:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c650a:	fa20 f101 	lsrle.w	r1, r0, r1
   c650e:	2101      	movgt	r1, #1
   c6510:	460a      	mov	r2, r1
   c6512:	e7e1      	b.n	c64d8 <__ulp+0x18>
   c6514:	7ff00000 	.word	0x7ff00000

000c6518 <__b2d>:
   c6518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c651a:	6905      	ldr	r5, [r0, #16]
   c651c:	f100 0714 	add.w	r7, r0, #20
   c6520:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c6524:	1f2e      	subs	r6, r5, #4
   c6526:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c652a:	4620      	mov	r0, r4
   c652c:	f7ff fd48 	bl	c5fc0 <__hi0bits>
   c6530:	f1c0 0320 	rsb	r3, r0, #32
   c6534:	280a      	cmp	r0, #10
   c6536:	f8df c07c 	ldr.w	ip, [pc, #124]	; c65b4 <__b2d+0x9c>
   c653a:	600b      	str	r3, [r1, #0]
   c653c:	dc14      	bgt.n	c6568 <__b2d+0x50>
   c653e:	f1c0 0e0b 	rsb	lr, r0, #11
   c6542:	fa24 f10e 	lsr.w	r1, r4, lr
   c6546:	42b7      	cmp	r7, r6
   c6548:	ea41 030c 	orr.w	r3, r1, ip
   c654c:	bf34      	ite	cc
   c654e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c6552:	2100      	movcs	r1, #0
   c6554:	3015      	adds	r0, #21
   c6556:	fa04 f000 	lsl.w	r0, r4, r0
   c655a:	fa21 f10e 	lsr.w	r1, r1, lr
   c655e:	ea40 0201 	orr.w	r2, r0, r1
   c6562:	ec43 2b10 	vmov	d0, r2, r3
   c6566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c6568:	42b7      	cmp	r7, r6
   c656a:	bf3a      	itte	cc
   c656c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c6570:	f1a5 0608 	subcc.w	r6, r5, #8
   c6574:	2100      	movcs	r1, #0
   c6576:	380b      	subs	r0, #11
   c6578:	d017      	beq.n	c65aa <__b2d+0x92>
   c657a:	f1c0 0c20 	rsb	ip, r0, #32
   c657e:	fa04 f500 	lsl.w	r5, r4, r0
   c6582:	42be      	cmp	r6, r7
   c6584:	fa21 f40c 	lsr.w	r4, r1, ip
   c6588:	ea45 0504 	orr.w	r5, r5, r4
   c658c:	bf8c      	ite	hi
   c658e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c6592:	2400      	movls	r4, #0
   c6594:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c6598:	fa01 f000 	lsl.w	r0, r1, r0
   c659c:	fa24 f40c 	lsr.w	r4, r4, ip
   c65a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c65a4:	ea40 0204 	orr.w	r2, r0, r4
   c65a8:	e7db      	b.n	c6562 <__b2d+0x4a>
   c65aa:	ea44 030c 	orr.w	r3, r4, ip
   c65ae:	460a      	mov	r2, r1
   c65b0:	e7d7      	b.n	c6562 <__b2d+0x4a>
   c65b2:	bf00      	nop
   c65b4:	3ff00000 	.word	0x3ff00000

000c65b8 <__d2b>:
   c65b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c65bc:	4689      	mov	r9, r1
   c65be:	2101      	movs	r1, #1
   c65c0:	ec57 6b10 	vmov	r6, r7, d0
   c65c4:	4690      	mov	r8, r2
   c65c6:	f7ff fc09 	bl	c5ddc <_Balloc>
   c65ca:	4604      	mov	r4, r0
   c65cc:	b930      	cbnz	r0, c65dc <__d2b+0x24>
   c65ce:	4602      	mov	r2, r0
   c65d0:	4b25      	ldr	r3, [pc, #148]	; (c6668 <__d2b+0xb0>)
   c65d2:	4826      	ldr	r0, [pc, #152]	; (c666c <__d2b+0xb4>)
   c65d4:	f240 310a 	movw	r1, #778	; 0x30a
   c65d8:	f7f7 ff32 	bl	be440 <__assert_func>
   c65dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c65e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c65e4:	bb35      	cbnz	r5, c6634 <__d2b+0x7c>
   c65e6:	2e00      	cmp	r6, #0
   c65e8:	9301      	str	r3, [sp, #4]
   c65ea:	d028      	beq.n	c663e <__d2b+0x86>
   c65ec:	4668      	mov	r0, sp
   c65ee:	9600      	str	r6, [sp, #0]
   c65f0:	f7ff fd06 	bl	c6000 <__lo0bits>
   c65f4:	9900      	ldr	r1, [sp, #0]
   c65f6:	b300      	cbz	r0, c663a <__d2b+0x82>
   c65f8:	9a01      	ldr	r2, [sp, #4]
   c65fa:	f1c0 0320 	rsb	r3, r0, #32
   c65fe:	fa02 f303 	lsl.w	r3, r2, r3
   c6602:	430b      	orrs	r3, r1
   c6604:	40c2      	lsrs	r2, r0
   c6606:	6163      	str	r3, [r4, #20]
   c6608:	9201      	str	r2, [sp, #4]
   c660a:	9b01      	ldr	r3, [sp, #4]
   c660c:	61a3      	str	r3, [r4, #24]
   c660e:	2b00      	cmp	r3, #0
   c6610:	bf14      	ite	ne
   c6612:	2202      	movne	r2, #2
   c6614:	2201      	moveq	r2, #1
   c6616:	6122      	str	r2, [r4, #16]
   c6618:	b1d5      	cbz	r5, c6650 <__d2b+0x98>
   c661a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c661e:	4405      	add	r5, r0
   c6620:	f8c9 5000 	str.w	r5, [r9]
   c6624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c6628:	f8c8 0000 	str.w	r0, [r8]
   c662c:	4620      	mov	r0, r4
   c662e:	b003      	add	sp, #12
   c6630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c6634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c6638:	e7d5      	b.n	c65e6 <__d2b+0x2e>
   c663a:	6161      	str	r1, [r4, #20]
   c663c:	e7e5      	b.n	c660a <__d2b+0x52>
   c663e:	a801      	add	r0, sp, #4
   c6640:	f7ff fcde 	bl	c6000 <__lo0bits>
   c6644:	9b01      	ldr	r3, [sp, #4]
   c6646:	6163      	str	r3, [r4, #20]
   c6648:	2201      	movs	r2, #1
   c664a:	6122      	str	r2, [r4, #16]
   c664c:	3020      	adds	r0, #32
   c664e:	e7e3      	b.n	c6618 <__d2b+0x60>
   c6650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c6654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c6658:	f8c9 0000 	str.w	r0, [r9]
   c665c:	6918      	ldr	r0, [r3, #16]
   c665e:	f7ff fcaf 	bl	c5fc0 <__hi0bits>
   c6662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c6666:	e7df      	b.n	c6628 <__d2b+0x70>
   c6668:	000c88e9 	.word	0x000c88e9
   c666c:	000c896e 	.word	0x000c896e

000c6670 <__ratio>:
   c6670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6674:	4688      	mov	r8, r1
   c6676:	4669      	mov	r1, sp
   c6678:	4681      	mov	r9, r0
   c667a:	f7ff ff4d 	bl	c6518 <__b2d>
   c667e:	a901      	add	r1, sp, #4
   c6680:	4640      	mov	r0, r8
   c6682:	ec55 4b10 	vmov	r4, r5, d0
   c6686:	f7ff ff47 	bl	c6518 <__b2d>
   c668a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c668e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c6692:	eba3 0c02 	sub.w	ip, r3, r2
   c6696:	e9dd 3200 	ldrd	r3, r2, [sp]
   c669a:	1a9b      	subs	r3, r3, r2
   c669c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c66a0:	ec51 0b10 	vmov	r0, r1, d0
   c66a4:	2b00      	cmp	r3, #0
   c66a6:	bfd6      	itet	le
   c66a8:	460a      	movle	r2, r1
   c66aa:	462a      	movgt	r2, r5
   c66ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c66b0:	468b      	mov	fp, r1
   c66b2:	462f      	mov	r7, r5
   c66b4:	bfd4      	ite	le
   c66b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c66ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c66be:	4620      	mov	r0, r4
   c66c0:	ee10 2a10 	vmov	r2, s0
   c66c4:	465b      	mov	r3, fp
   c66c6:	4639      	mov	r1, r7
   c66c8:	f7fd fd58 	bl	c417c <__aeabi_ddiv>
   c66cc:	ec41 0b10 	vmov	d0, r0, r1
   c66d0:	b003      	add	sp, #12
   c66d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c66d6 <__copybits>:
   c66d6:	3901      	subs	r1, #1
   c66d8:	b570      	push	{r4, r5, r6, lr}
   c66da:	1149      	asrs	r1, r1, #5
   c66dc:	6914      	ldr	r4, [r2, #16]
   c66de:	3101      	adds	r1, #1
   c66e0:	f102 0314 	add.w	r3, r2, #20
   c66e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c66e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c66ec:	1f05      	subs	r5, r0, #4
   c66ee:	42a3      	cmp	r3, r4
   c66f0:	d30c      	bcc.n	c670c <__copybits+0x36>
   c66f2:	1aa3      	subs	r3, r4, r2
   c66f4:	3b11      	subs	r3, #17
   c66f6:	f023 0303 	bic.w	r3, r3, #3
   c66fa:	3211      	adds	r2, #17
   c66fc:	42a2      	cmp	r2, r4
   c66fe:	bf88      	it	hi
   c6700:	2300      	movhi	r3, #0
   c6702:	4418      	add	r0, r3
   c6704:	2300      	movs	r3, #0
   c6706:	4288      	cmp	r0, r1
   c6708:	d305      	bcc.n	c6716 <__copybits+0x40>
   c670a:	bd70      	pop	{r4, r5, r6, pc}
   c670c:	f853 6b04 	ldr.w	r6, [r3], #4
   c6710:	f845 6f04 	str.w	r6, [r5, #4]!
   c6714:	e7eb      	b.n	c66ee <__copybits+0x18>
   c6716:	f840 3b04 	str.w	r3, [r0], #4
   c671a:	e7f4      	b.n	c6706 <__copybits+0x30>

000c671c <__any_on>:
   c671c:	f100 0214 	add.w	r2, r0, #20
   c6720:	6900      	ldr	r0, [r0, #16]
   c6722:	114b      	asrs	r3, r1, #5
   c6724:	4298      	cmp	r0, r3
   c6726:	b510      	push	{r4, lr}
   c6728:	db11      	blt.n	c674e <__any_on+0x32>
   c672a:	dd0a      	ble.n	c6742 <__any_on+0x26>
   c672c:	f011 011f 	ands.w	r1, r1, #31
   c6730:	d007      	beq.n	c6742 <__any_on+0x26>
   c6732:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c6736:	fa24 f001 	lsr.w	r0, r4, r1
   c673a:	fa00 f101 	lsl.w	r1, r0, r1
   c673e:	428c      	cmp	r4, r1
   c6740:	d10b      	bne.n	c675a <__any_on+0x3e>
   c6742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c6746:	4293      	cmp	r3, r2
   c6748:	d803      	bhi.n	c6752 <__any_on+0x36>
   c674a:	2000      	movs	r0, #0
   c674c:	bd10      	pop	{r4, pc}
   c674e:	4603      	mov	r3, r0
   c6750:	e7f7      	b.n	c6742 <__any_on+0x26>
   c6752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c6756:	2900      	cmp	r1, #0
   c6758:	d0f5      	beq.n	c6746 <__any_on+0x2a>
   c675a:	2001      	movs	r0, #1
   c675c:	e7f6      	b.n	c674c <__any_on+0x30>

000c675e <_calloc_r>:
   c675e:	b513      	push	{r0, r1, r4, lr}
   c6760:	434a      	muls	r2, r1
   c6762:	4611      	mov	r1, r2
   c6764:	9201      	str	r2, [sp, #4]
   c6766:	f7f7 fe5b 	bl	be420 <_malloc_r>
   c676a:	4604      	mov	r4, r0
   c676c:	b118      	cbz	r0, c6776 <_calloc_r+0x18>
   c676e:	9a01      	ldr	r2, [sp, #4]
   c6770:	2100      	movs	r1, #0
   c6772:	f7fd ff8d 	bl	c4690 <memset>
   c6776:	4620      	mov	r0, r4
   c6778:	b002      	add	sp, #8
   c677a:	bd10      	pop	{r4, pc}
   c677c:	0000      	movs	r0, r0
	...

000c6780 <nan>:
   c6780:	ed9f 0b01 	vldr	d0, [pc, #4]	; c6788 <nan+0x8>
   c6784:	4770      	bx	lr
   c6786:	bf00      	nop
   c6788:	00000000 	.word	0x00000000
   c678c:	7ff80000 	.word	0x7ff80000

000c6790 <__ascii_wctomb>:
   c6790:	b149      	cbz	r1, c67a6 <__ascii_wctomb+0x16>
   c6792:	2aff      	cmp	r2, #255	; 0xff
   c6794:	bf85      	ittet	hi
   c6796:	238a      	movhi	r3, #138	; 0x8a
   c6798:	6003      	strhi	r3, [r0, #0]
   c679a:	700a      	strbls	r2, [r1, #0]
   c679c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c67a0:	bf98      	it	ls
   c67a2:	2001      	movls	r0, #1
   c67a4:	4770      	bx	lr
   c67a6:	4608      	mov	r0, r1
   c67a8:	4770      	bx	lr
	...

000c67ac <__aeabi_d2lz>:
   c67ac:	b538      	push	{r3, r4, r5, lr}
   c67ae:	2200      	movs	r2, #0
   c67b0:	2300      	movs	r3, #0
   c67b2:	4604      	mov	r4, r0
   c67b4:	460d      	mov	r5, r1
   c67b6:	f7fd fe29 	bl	c440c <__aeabi_dcmplt>
   c67ba:	b928      	cbnz	r0, c67c8 <__aeabi_d2lz+0x1c>
   c67bc:	4620      	mov	r0, r4
   c67be:	4629      	mov	r1, r5
   c67c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c67c4:	f7fd bef8 	b.w	c45b8 <__aeabi_d2ulz>
   c67c8:	4620      	mov	r0, r4
   c67ca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c67ce:	f7fd fef3 	bl	c45b8 <__aeabi_d2ulz>
   c67d2:	4240      	negs	r0, r0
   c67d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c67d8:	bd38      	pop	{r3, r4, r5, pc}
   c67da:	bf00      	nop

000c67dc <dynalib_user>:
   c67dc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c67ec:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c67fc:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   c680c:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   c681c:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   c682c:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   c683c:	2075 7325 4d20 444f 2545 3e75 5700 7261     u %s MODE%u>.War
   c684c:	696e 676e 202c 6f6d 6f74 2072 6f63 6d6d     ning, motor comm
   c685c:	6e61 2064 6168 2073 6f6e 2074 6562 6e65     and has not been
   c686c:	7220 6365 6965 6576 2064 6e69 6f20 6576      received in ove
   c687c:	2072 6425 736d 202c 7563 7474 6e69 2067     r %dms, cutting 
   c688c:	6f6d 6f74 7372 5700 7261 696e 676e 202c     motors.Warning, 
   c689c:	5047 2053 726f 4320 6d6f 6170 7373 6420     GPS or Compass d
   c68ac:	7461 2061 6f6e 2074 7661 6961 616c 6c62     ata not availabl
   c68bc:	2065 6f66 2072 7267 6165 6574 2072 6874     e for greater th
   c68cc:	6e61 2520 6d64 2c73 6520 6978 6974 676e     an %dms, exiting
   c68dc:	6120 7475 6e6f 6d6f 756f 2073 6f6d 6564      autonomous mode
   c68ec:	5b00 4157 4e52 205d 544c 2045 654d 7373     .[WARN] LTE Mess
   c68fc:	6761 7365 6820 7661 2065 6f6e 2074 6562     ages have not be
   c690c:	6e65 7220 6365 6965 6576 2064 6e69 2520     en received in %
   c691c:	7364 202c 7361 7573 696d 676e 5820 6542     ds, assuming XBe
   c692c:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   c693c:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c694c:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c695c:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c696c:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c697c:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c698c:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c699c:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c69ac:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c69bc:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c69cc:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c69dc:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c69ec:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   c69fc:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   c6a0c:	6425 5700 7261 696e 676e 202c 6863 6365     %d.Warning, chec
   c6a1c:	736b 6d75 6420 656f 2073 6f6e 2074 616d     ksum does not ma
   c6a2c:	6374 0068 575b 5241 5d4e 4d20 7365 6173     tch.[WARN] Messa
   c6a3c:	6567 4320 6568 6b63 7573 206d 6f44 7365     ge Checksum Does
   c6a4c:	4e20 746f 4d20 7461 6863 3a21 2520 0073      Not Match!: %s.
   c6a5c:	7463 006c 7325 2520 2073 6425 2520 2064     ctl.%s %s %d %d 
   c6a6c:	6425 4e00 7765 7420 7261 6567 2074 5047     %d.New target GP
   c6a7c:	2c53 4c20 7461 203a 6625 4c20 6e6f 203a     S, Lat: %f Lon: 
   c6a8c:	6625 6d00 7274 5200 6365 6965 6576 2064     %f.mtr.Received 
   c6a9c:	6f4d 6f74 2072 6f43 6d6d 6e61 3a64 4c20     Motor Command: L
   c6aac:	7053 6565 3d64 6425 522c 7053 6565 3d64     Speed=%d,RSpeed=
   c6abc:	6425 7200 7165 7000 7374 5b00 5550 5354     %d.req.pts.[PUTS
   c6acc:	205d 6552 6563 7669 6465 5320 7274 6e69     ] Received Strin
   c6adc:	2067 6f43 6d6d 6e61 3a64 2520 0073 7073     g Command: %s.sp
   c6aec:	0063 7768 0061 6d64 0070 6765 0070 7325     c.hwa.dmp.egp.%s
   c6afc:	2520 0073 7473 0070 495b 464e 5d4f 5220      %s.stp.[INFO] R
   c6b0c:	6365 6965 6576 2064 544c 2045 654d 7373     eceived LTE Mess
   c6b1c:	6761 3a65 2520 0073 654e 2077 5442 4320     age: %s.New BT C
   c6b2c:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   c6b3c:	6365 6965 6576 2064 4c42 2045 654d 7373     eceived BLE Mess
   c6b4c:	6761 3a65 2520 0073 7245 6f72 2c72 4320     age: %s.Error, C
   c6b5c:	756f 646c 6e20 746f 6920 696e 6974 6c61     ould not initial
   c6b6c:	7a69 2065 5047 0053 4343 7548 0062 6e49     ize GPS.CCHub.In
   c6b7c:	7570 2074 6f43 6d6d 6e61 0064 6146 6c69     put Command.Fail
   c6b8c:	6465 7420 206f 6966 646e 4c20 5349 4d33     ed to find LIS3M
   c6b9c:	4c44 6320 6968 0070 494c 3353 444d 204c     DL chip.LIS3MDL 
   c6bac:	6f46 6e75 2164 4200 6425 3025 6432 3025     Found!.B%d%02d%0
   c6bbc:	6432 3025 6434 3025 6432 3025 6432 3025     2d%04d%02d%02d%0
   c6bcc:	6432 5700 7461 7265 6f42 0074 632e 7673     2d.WaterBot..csv
   c6bdc:	5f00 4f4c 2e47 7874 0074 7245 6f72 3a72     ._LOG.txt.Error:
   c6bec:	6320 756f 646c 6e20 746f 6320 6e6f 656e      could not conne
   c6bfc:	7463 7420 206f 4453 6320 7261 2164 5400     ct to SD card!.T
   c6c0c:	6d69 2c65 614c 6974 7574 6564 4c2c 6e6f     ime,Latitude,Lon
   c6c1c:	6967 7574 6564 542c 6d65 6570 6172 7574     gitude,Temperatu
   c6c2c:	6572 702c 2c48 6944 7373 6c6f 6576 2064     re,pH,Dissolved 
   c6c3c:	324f 432c 6e6f 7564 7463 7669 7469 2079     O2,Conductivity 
   c6c4c:	2e30 4b31 432c 6e6f 7564 7463 7669 7469     0.1K,Conductivit
   c6c5c:	2079 4b31 5b00 4e49 4f46 205d 6157 6574     y 1K.[INFO] Wate
   c6c6c:	4272 746f 2520 3a64 5320 6174 7472 6465     rBot %d: Started
   c6c7c:	4c20 676f 6967 676e 0021 7325 3025 7832      Logging!.%s%02x
   c6c8c:	4200 746f 6431 7461 4200 6425 4343 646c     .Bot1dat.B%dCCld
   c6c9c:	0074 2542 4364 7743 626c 4200 6425 4343     t.B%dCCwlb.B%dCC
   c6cac:	6e73 2573 2e30 6636 2520 2e30 6636 2520     sns%0.6f %0.6f %
   c6cbc:	2064 6425 2520 2064 6425 2520 2064 5300     d %d %d %d %d .S
   c6ccc:	6e65 6964 676e 6120 7320 6174 7574 2073     ending a status 
   c6cdc:	7075 6164 6574 0021 2542 4164 7342 7075     update!.B%dABsup
   c6cec:	6425 2520 2064 3025 362e 2066 3025 362e     %d %d %0.6f %0.6
   c6cfc:	2066 6425 2520 2064 2500 2c73 6625 252c     f %d %d .%s,%f,%
   c6d0c:	2c66 6625 252c 2c66 6625 252c 2c66 6625     f,%f,%f,%f,%f,%f
   c6d1c:	4e00 7765 5820 6542 2065 6f43 6d6d 6e61     .New XBee Comman
   c6d2c:	3a64 5b00 4e49 4f46 205d 6552 6563 7669     d:.[INFO] Receiv
   c6d3c:	6465 5820 6542 2065 654d 7373 6761 3a65     ed XBee Message:
   c6d4c:	2520 0073 6e45 6574 6972 676e 4420 7461      %s.Entering Dat
   c6d5c:	2061 664f 6c66 616f 6564 2072 6f4d 6564     a Offloader Mode
   c6d6c:	2f00 4500 7272 726f 202c 6f63 6c75 2064     ./.Error, could 
   c6d7c:	6f6e 2074 706f 6e65 7220 6f6f 2074 4453     not open root SD
   c6d8c:	6320 7261 2064 6964 6572 7463 726f 0079      card directory.
   c6d9c:	6157 7469 6e69 2067 6f66 2072 4343 7548     Waiting for CCHu
   c6dac:	2062 6f63 6e6e 6365 6974 6e6f 2e2e 002e     b connection....
   c6dbc:	7453 7261 6974 676e 7420 6172 736e 6566     Starting transfe
   c6dcc:	2e72 2e2e 4300 6568 6b63 6e69 2067 6669     r....Checking if
   c6ddc:	6620 6c69 2065 7325 6920 2073 2061 632e      file %s is a .c
   c6dec:	7673 6f20 2072 742e 7478 2e2e 002e 6966     sv or .txt....fi
   c6dfc:	656c 6f64 656e 6600 6c69 6e65 6d61 0065     ledone.filename.
   c6e0c:	6553 646e 6e69 2067 6f63 6d6d 6e61 2064     Sending command 
   c6e1c:	7325 4600 6c69 2065 7325 6920 2073 2061     %s.File %s is a 
   c6e2c:	632e 7673 6f20 2072 742e 7478 7020 6972     .csv or .txt pri
   c6e3c:	746e 6e69 2067 6164 6174 6600 6c69 6365     nting data.filec
   c6e4c:	6d6f 0070 7874 7200 0078 666f 0066 6264     omp.tx.rx.off.db
   c6e5c:	0067 0000                                   g...

000c6e60 <_ZTVN8particle11SPISettingsE>:
	...
   c6e68:	437d 000b 40d1 000b 4183 000b               }C...@...A..

000c6e74 <_ZTV5Timer>:
	...
   c6e7c:	44e9 000b 4531 000b 419f 000b               .D..1E...A..

000c6e88 <_ZTVN5spark10LogHandlerE>:
	...
   c6e98:	40a9 000b 40d3 000b                         .@...@..

000c6ea0 <_ZTVN8particle9LEDStatusE>:
	...
   c6ea8:	4269 000b 4285 000b 40dd 000b               iB...B...@..

000c6eb4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6ebc:	4299 000b 42cd 000b 10d9 000c 40d5 000b     .B...B.......@..

000c6ecc <_ZTV4File>:
	...
   c6ed4:	4181 000b 4191 000b 4217 000b 4211 000b     .A...A...B...B..
   c6ee4:	40df 000b 41f1 000b 41eb 000b 41e5 000b     .@...A...A...A..
   c6ef4:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c6f04:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c6f14:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c6f24:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c6f34:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c6f44:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c6f54:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c6f64:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6f74:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6f84:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6f94:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6fa4:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6fb0 <CSWTCH.417>:
   c6fb0:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6fc0:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c6fd0:	444d 004c                                   MDL.

000c6fd4 <CSWTCH.26>:
   c6fd4:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c6fe4 <_ZTV16Adafruit_LIS3MDL>:
	...
   c6fec:	837b 000b 83c5 000b 8379 000b 8475 000b     {.......y...u...
   c6ffc:	837d 000b 6573 5074 6361 656b 4374 6766     }...setPacketCfg
   c700c:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c701c:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c702c:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c703c:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c704c:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c705c:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c706c:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c707c:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c708c:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c709c:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c70ac:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c70bc:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c70cc:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c70dc:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c70ec:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c70fc:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c710c:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c711c:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c712c:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c713c:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c714c:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c715c:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c716c:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c717c:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c718c:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c719c:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c71ac:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c71bc:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c71cc:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c71dc:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c71ec:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c71fc:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c720c:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c721c:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c722c:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c723c:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c724c:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c725c:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c726c:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c727c:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c728c:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c729c:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c72ac:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c72bc:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c72cc:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c72dc:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c72ec:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c72fc:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c730c:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c731c:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c732c:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c733c:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c734c:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c735c:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c736c:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c737c:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c738c:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c739c:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c73ac:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c73bc:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c73cc:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c73dc:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c73ec:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c73fc:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c740c:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c741c:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c742c:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c743c:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c744c:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c745c:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c746c:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c747c:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c748c:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c749c:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c74ac:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c74bc:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c74cc:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c74dc:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c74ec:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c74fc:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c750c:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c751c:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c752c:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c753c:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c754c:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c755c:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c756c:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c757c:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c758c:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c759c:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c75ac:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c75bc:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c75cc:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c75dc:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c75ec:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c75fc:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c760c:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c761c:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c762c:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c763c:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c764c:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c765c:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c766c:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c767c:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c768c:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c769c:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c76ac:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c76bc:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c76cc:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c76dc:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c76ec:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c76fc:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c770c:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c771c:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c772c:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c773c:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c774c:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c775c:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c776c:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c777c:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c778c:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c779c:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c77ac:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c77bc:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c77cc:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c77dc:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c77ec:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c77fc:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c780c:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c781c:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c782c:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c783c:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c784c:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c785c:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c786c:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c787c:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c788c:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c789c:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c78ac:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c78bc:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c78cc:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c78dc:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c78ec:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c78fc:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c790c:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c791c:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c792c:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c793c:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c794c:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c795c:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c796c:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c797c:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c798c:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c799c:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c79ac:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c79bc:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c79cc:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c79dc:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c79ec:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c79fc:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c7a0c:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c7a1c:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c7a2c:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c7a3c:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c7a4c:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c7a5c:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c7a6c:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c7a7c:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c7a8c:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c7a9c:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c7aac:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c7abc:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c7acc:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c7adc:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c7aec:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c7afc:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c7b0c:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c7b1c:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c7b2c:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c7b3c:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c7b4c:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c7b5c:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c7b6c:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c7b7c:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c7b8c:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c7b9c:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c7bac:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c7bbc:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c7bcc:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c7bdc:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c7bec:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c7bfc:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c7c0c:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c7c1c:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c7c2c:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c7c3c:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c7c4c:	7365 2e73 2e2e 0000                         ess.....

000c7c54 <CSWTCH.334>:
   c7c54:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c7c64:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c7c74:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c7c94:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c7cbc:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7d10:	0000 0010 0004                              ......

000c7d16 <CSWTCH.335>:
   c7d16:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7d32:	002c 0000 0000 0000 0010 0024               ,.........$.

000c7d3e <CSWTCH.336>:
   c7d3e:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c7d4e:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c7d5e:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c7d6e:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c7d7e:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c7d8e:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c7d9e:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c7dae:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c7dbe:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c7dce:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c7dde:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c7dee:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c7dfe:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c7e0e:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c7e1e:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c7e2e:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c7e3e:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c7e4e:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c7e5e:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c7e6e:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c7e7e:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c7e90 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7e98:	e4bd 000b e521 000b e5f5 000b e54b 000b     ....!.......K...
   c7ea8:	e4c1 000b                                   ....

000c7eac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7eb4:	e4b9 000b e52f 000b e4bb 000b e551 000b     ..../.......Q...
   c7ec4:	e4e1 000b                                   ....

000c7ec8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7ed0:	e4b7 000b e53d 000b edc1 000b e557 000b     ....=.......W...
   c7ee0:	e501 000b                                   ....

000c7ee4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7ef0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7f02 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7f02:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7f12 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7f12:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c7f24 <_ZTVN5spark13CellularClassE>:
	...
   c7f2c:	f883 000b f879 000b f86f 000b f825 000b     ....y...o...%...
   c7f3c:	f863 000b f857 000b 1431 000c 1439 000c     c...W...1...9...
   c7f4c:	f84b 000b f843 000b f839 000b f82f 000b     K...C...9.../...
   c7f5c:	1469 000c                                   i...

000c7f60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7f68:	f8bd 000b f8c3 000b f901 000b f8d1 000b     ................
   c7f78:	f8bf 000b                                   ....

000c7f7c <_ZTVN5spark13EthernetClassE>:
	...
   c7f84:	fe97 000b fe8d 000b fe83 000b fe79 000b     ............y...
   c7f94:	fe6d 000b fe61 000b 1431 000c 1439 000c     m...a...1...9...
   c7fa4:	fe55 000b fe4d 000b fe43 000b fe39 000b     U...M...C...9...
   c7fb4:	1469 000c                                   i...

000c7fb8 <_ZTV7TwoWire>:
	...
   c7fc0:	feb5 000b feff 000b fed7 000b feb7 000b     ................
   c7fd0:	fedf 000b fee7 000b feef 000b fef7 000b     ................

000c7fe0 <_ZTV9IPAddress>:
	...
   c7fe8:	0029 000c 0019 000c 001b 000c 7525 7500     )...........%u.u
   c7ff8:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c8008:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c8018:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c8028:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c8038:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c8048:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c8058:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c8068:	6961 006c                                   ail.

000c806c <_ZTVN5spark16JSONStreamWriterE>:
	...
   c8074:	0525 000c 054b 000c 0509 000c 0137 000c     %...K.......7...

000c8084 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c808c:	0981 000c 0999 000c 10d9 000c 40d5 000b     .............@..

000c809c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c80a4:	09ad 000c 09c1 000c 127d 000c 0511 000c     ........}.......

000c80b4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c80bc:	0523 000c 0559 000c 103d 000c 0513 000c     #...Y...=.......

000c80cc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c80d4:	0521 000c 0567 000c 08e9 000c 0589 000c     !...g...........

000c80e4 <_ZTVN5spark12NetworkClassE>:
	...
   c80ec:	13f1 000c 13fb 000c 1405 000c 140f 000c     ................
   c80fc:	1419 000c 1425 000c 1431 000c 1439 000c     ....%...1...9...
   c810c:	1441 000c 144d 000c 1455 000c 145f 000c     A...M...U..._...
   c811c:	1469 000c                                   i...

000c8120 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c8120:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c8130:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c8140:	6d69 0065                                   ime.

000c8144 <_ZTV11USARTSerial>:
	...
   c814c:	1d21 000c 1d8d 000c 1d65 000c 1555 000c     !.......e...U...
   c815c:	1d35 000c 1d51 000c 1d43 000c 1d5f 000c     5...Q...C..._...
   c816c:	1d23 000c 1d27 000c                         #...'...

000c8174 <_ZTV9USBSerial>:
	...
   c817c:	1ddf 000c 1e47 000c 1e1d 000c 1555 000c     ....G.......U...
   c818c:	1e0f 000c 1de1 000c 1df1 000c 1e41 000c     ............A...
   c819c:	1e01 000c 1dd9 000c                         ........

000c81a4 <_ZSt7nothrow>:
	...

000c81a5 <_ZTSSt19_Sp_make_shared_tag>:
   c81a5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c81b5:	6572 5f64 6174 0067 0000                     red_tag....

000c81c0 <_ZTISt19_Sp_make_shared_tag>:
   c81c0:	8200 000c 81a5 000c                         ........

000c81c8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c81c8:	8260 000c 81d4 000c 8284 000c               `...........

000c81d4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c81d4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c81e4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c81f4:	0045 0000                                   E...

000c81f8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c81f8:	0000 0000 81c8 000c 2299 000c 22ad 000c     ........."..."..
   c8208:	2441 000c 2441 000c 2317 000c 2259 000c     A$..A$...#..Y"..
   c8218:	22ff 000c 22c1 000c 228b 000c               ."..."..."..

000c8224 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c8224:	8260 000c 8230 000c 81c8 000c               `...0.......

000c8230 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c8230:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c8240:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c8250:	666e 456f 0000 0000                         nfoE....

000c8258 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c8258:	0000 0000 8224 000c 2341 000c 2355 000c     ....$...A#..U#..
   c8268:	2441 000c 2441 000c 2317 000c 2259 000c     A$..A$...#..Y"..
   c8278:	2415 000c 23a1 000c 2369 000c               .$...#..i#..

000c8284 <_ZTISt9type_info>:
   c8284:	8200 000c 828c 000c                         ........

000c828c <_ZTSSt9type_info>:
   c828c:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   c829c:	0000 0000                                   ....

000c82a0 <CSWTCH.8>:
   c82a0:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c82b0:	21d2 7f33 d97c c002                         .!3.|...

000c82b8 <CSWTCH.9>:
   c82b8:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c82c8:	2d18 5444 21fb c009                         .-DT.!..

000c82d0 <CSWTCH.8>:
   c82d0:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c82dc <CSWTCH.9>:
   c82dc:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c82e8 <npio2_hw>:
   c82e8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c82f8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c8308:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c8318:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c8328:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c8338:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c8348:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c8358:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c8368 <two_over_pi>:
   c8368:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c8378:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c8388:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c8398:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c83a8:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c83b8:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c83c8:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c83d8:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c83e8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c83f8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c8408:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c8418:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c8428:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c8438:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c8448:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c8458:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c8468:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c8478:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c8488:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c8498:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c84a8:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c84b8:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c84c8:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c84d8:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c84e8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c84f8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c8508:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c8518:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c8528:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c8538:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c8548:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c8558:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c8568:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c8578:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c8588:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c8598:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c85a8:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c85b8:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c85c8:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c85d8:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c85e8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c85f8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c8608:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c8618:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c8628:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c8638:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c8648:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c8658:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c8668:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c8678:	008c 0000 006b 0000                         ....k...

000c8680 <PIo2>:
   c8680:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c8690:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c86a0:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c86ac <init_jk>:
   c86ac:	0004 0000 0007 0000 0009 0000               ............

000c86b8 <atanhi>:
   c86b8:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c86c8:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c86d8 <atanlo>:
   c86d8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c86e8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c86f8 <atanhi>:
   c86f8:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c8708 <atanlo>:
   c8708:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c8718:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c8728:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c8738:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c8748:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c8758:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c8768:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c8778:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c8788:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c8794 <fpi.1>:
   c8794:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c87a4:	0000 0000                                   ....

000c87a8 <fpinan.0>:
   c87a8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c87c0 <tinytens>:
   c87c0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c87d0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c87e0:	6f43 64ac 0628 1168                         Co.d(.h.

000c87e8 <_ctype_>:
   c87e8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c87f8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c8808:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c8818:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c8828:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c8838:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c8848:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c8858:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8868:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c88e8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c88f8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c8908:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c8918:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c8928:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c8938:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c8948:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c8958:	632e 0000                                   .c..

000c895c <_C_numeric_locale>:
   c895c:	71d7 000c 8057 000c dbb0 2003 4f50 4953     .q..W...... POSI
   c896c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c897c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c898c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c899c:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c89ac:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c89bc:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c89c8 <__mprec_bigtens>:
   c89c8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c89d8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c89e8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c89f0 <__mprec_tens>:
   c89f0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c8a00:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c8a10:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c8a20:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c8a30:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8a40:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8a50:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8a60:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8a70:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8a80:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c8a90:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c8aa0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c8ab0:	9db4 79d9 7843 44ea                         ...yCx.D

000c8ab8 <p05.0>:
   c8ab8:	0005 0000 0019 0000 007d 0000               ........}...

000c8ac4 <link_const_variable_data_end>:
   c8ac4:	000b68c1 	.word	0x000b68c1
   c8ac8:	000bf815 	.word	0x000bf815
   c8acc:	000bf88d 	.word	0x000bf88d
   c8ad0:	000bfea1 	.word	0x000bfea1
   c8ad4:	000c10c9 	.word	0x000c10c9
   c8ad8:	000c1541 	.word	0x000c1541
   c8adc:	000c1665 	.word	0x000c1665
   c8ae0:	000c1b69 	.word	0x000c1b69
   c8ae4:	000c1d0d 	.word	0x000c1d0d

000c8ae8 <link_constructors_end>:
	...
