
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011380  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c53a0  000c53a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c53c4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dbd4  000c53c8  0002dbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a28  2003ddc8  2003ddc8  0003ddc8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c55bc  000c55bc  000355bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c55e4  000c55e4  000355e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00204a3a  00000000  00000000  000355e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001d8ae  00000000  00000000  0023a022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006d2bb  00000000  00000000  002578d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004c98  00000000  00000000  002c4b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00010f90  00000000  00000000  002c9823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00049262  00000000  00000000  002da7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00079a78  00000000  00000000  00323a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159cd7  00000000  00000000  0039d48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ef30  00000000  00000000  004f7164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00d fa53 	bl	c14dc <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00d fa75 	bl	c152c <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dbd4 	.word	0x2003dbd4
   b404c:	000c53c8 	.word	0x000c53c8
   b4050:	2003ddc8 	.word	0x2003ddc8
   b4054:	2003ddc8 	.word	0x2003ddc8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f00b fb9d 	bl	bf7a0 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c537c 	.word	0x000c537c
   b4080:	000c53a0 	.word	0x000c53a0

000b4084 <module_user_setup>:
   b4084:	f001 ba8e 	b.w	b55a4 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f001 f9b3 	bl	b53f4 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f00b bb3d 	b.w	bf710 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f008 bd09 	b.w	bcaac <malloc>

000b409a <_Znaj>:
   b409a:	f008 bd07 	b.w	bcaac <malloc>

000b409e <_ZdaPv>:
   b409e:	f008 bd0d 	b.w	bcabc <free>

000b40a2 <_ZdlPvj>:
   b40a2:	f008 bd0b 	b.w	bcabc <free>
	...

000b40a8 <__cxa_pure_virtual>:
   b40a8:	b508      	push	{r3, lr}
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f008 fbf6 	bl	bc8a0 <panic_>
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bc3bd 	.word	0x000bc3bd
   b40bc:	000c3668 	.word	0x000c3668

000b40c0 <__cxa_guard_acquire>:
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= manualRC << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 5;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    statusFlags |= logSensors << 6;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00b fed4 	bl	bfee8 <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00a b9cc 	b.w	be4e2 <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003de14 	.word	0x2003de14
   b4150:	2003ddd4 	.word	0x2003ddd4
   b4154:	2003de04 	.word	0x2003de04
   b4158:	2003e0ec 	.word	0x2003e0ec
   b415c:	2003df35 	.word	0x2003df35
   b4160:	2003df34 	.word	0x2003df34
   b4164:	2003df29 	.word	0x2003df29
   b4168:	2003e5b4 	.word	0x2003e5b4
   b416c:	2003e5d4 	.word	0x2003e5d4
   b4170:	000c367d 	.word	0x000c367d

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f002 bc07 	b.w	b69a4 <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f002 fbfe 	bl	b69a4 <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 bb6e 	b.w	b6890 <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f002 ba4f 	b.w	b6658 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f002 f99a 	bl	b64fc <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f008 f997 	bl	bc520 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f008 f9a9 	bl	bc550 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f008 f989 	bl	bc520 <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	b2c9      	uxtb	r1, r1
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4718      	bx	r3

000b4240 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4240:	b510      	push	{r4, lr}
   b4242:	4b05      	ldr	r3, [pc, #20]	; (b4258 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4244:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4246:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4248:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b424a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424e:	f008 fb47 	bl	bc8e0 <led_set_status_active>
}
   b4252:	4620      	mov	r0, r4
   b4254:	bd10      	pop	{r4, pc}
   b4256:	bf00      	nop
   b4258:	000c3bd0 	.word	0x000c3bd0

000b425c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0
}
   b4260:	f7ff ffee 	bl	b4240 <_ZN8particle9LEDStatusD1Ev>
   b4264:	4620      	mov	r0, r4
   b4266:	2120      	movs	r1, #32
   b4268:	f7ff ff1b 	bl	b40a2 <_ZdlPvj>
   b426c:	4620      	mov	r0, r4
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4270:	4b0a      	ldr	r3, [pc, #40]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4272:	b510      	push	{r4, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4278:	f00a fb30 	bl	be8dc <_ZN5spark10LogManager8instanceEv>
   b427c:	4621      	mov	r1, r4
   b427e:	f00a fd68 	bl	bed52 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4282:	f00b fe31 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4286:	f00b fe23 	bl	bfed0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b428a:	4620      	mov	r0, r4
   b428c:	4b04      	ldr	r3, [pc, #16]	; (b42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428e:	f840 3b04 	str.w	r3, [r0], #4
   b4292:	f00a fbf9 	bl	bea88 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
   b429a:	bf00      	nop
   b429c:	000c3be4 	.word	0x000c3be4
   b42a0:	000c3bb8 	.word	0x000c3bb8

000b42a4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
    }
   b42a8:	f7ff ffe2 	bl	b4270 <_ZN5spark16SerialLogHandlerD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2124      	movs	r1, #36	; 0x24
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ba:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42be:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42c0:	b130      	cbz	r0, b42d0 <_ZN5Timer5startEj.isra.0+0x18>
   b42c2:	2300      	movs	r3, #0
   b42c4:	e9cd 3300 	strd	r3, r3, [sp]
   b42c8:	461a      	mov	r2, r3
   b42ca:	2102      	movs	r1, #2
   b42cc:	f008 f948 	bl	bc560 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	b130      	cbz	r0, b42e2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42d4:	2300      	movs	r3, #0
   b42d6:	e9cd 5300 	strd	r5, r3, [sp]
   b42da:	461a      	mov	r2, r3
   b42dc:	4619      	mov	r1, r3
   b42de:	f008 f93f 	bl	bc560 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e2:	b003      	add	sp, #12
   b42e4:	bd30      	pop	{r4, r5, pc}

000b42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e6:	b40e      	push	{r1, r2, r3}
   b42e8:	b503      	push	{r0, r1, lr}
   b42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f4:	f00a f91f 	bl	be536 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f8:	b002      	add	sp, #8
   b42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fe:	b003      	add	sp, #12
   b4300:	4770      	bx	lr
	...

000b4304 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4306:	4604      	mov	r4, r0
   b4308:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b430a:	7922      	ldrb	r2, [r4, #4]
   b430c:	68a3      	ldr	r3, [r4, #8]
   b430e:	b132      	cbz	r2, b431e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4310:	b9a3      	cbnz	r3, b433c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4312:	490b      	ldr	r1, [pc, #44]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4314:	b002      	add	sp, #8
   b4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b431a:	f00a b8cb 	b.w	be4b4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431e:	4a09      	ldr	r2, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4320:	7b26      	ldrb	r6, [r4, #12]
   b4322:	4d09      	ldr	r5, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4324:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4326:	7b64      	ldrb	r4, [r4, #13]
   b4328:	2e01      	cmp	r6, #1
   b432a:	bf18      	it	ne
   b432c:	4629      	movne	r1, r5
   b432e:	e9cd 1400 	strd	r1, r4, [sp]
   b4332:	4907      	ldr	r1, [pc, #28]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4334:	f7ff ffd7 	bl	b42e6 <_ZN5Print6printfEPKcz>
  }
   b4338:	b002      	add	sp, #8
   b433a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b433c:	4a05      	ldr	r2, [pc, #20]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433e:	e7ef      	b.n	b4320 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4340:	000c36a7 	.word	0x000c36a7
   b4344:	000c4c8c 	.word	0x000c4c8c
   b4348:	000c36a3 	.word	0x000c36a3
   b434c:	000c369f 	.word	0x000c369f
   b4350:	000c36bd 	.word	0x000c36bd
   b4354:	000c3696 	.word	0x000c3696

000b4358 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4358:	b40e      	push	{r1, r2, r3}
   b435a:	b503      	push	{r0, r1, lr}
   b435c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4364:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4366:	f00a f8e6 	bl	be536 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436a:	b002      	add	sp, #8
   b436c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4370:	b003      	add	sp, #12
   b4372:	4770      	bx	lr

000b4374 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4374:	b510      	push	{r4, lr}
      if (_M_manager)
   b4376:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4378:	4604      	mov	r4, r0
      if (_M_manager)
   b437a:	b113      	cbz	r3, b4382 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b437c:	2203      	movs	r2, #3
   b437e:	4601      	mov	r1, r0
   b4380:	4798      	blx	r3
    }
   b4382:	4620      	mov	r0, r4
   b4384:	bd10      	pop	{r4, pc}
	...

000b4388 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4388:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b438a:	4b13      	ldr	r3, [pc, #76]	; (b43d8 <_ZN5TimerD1Ev+0x50>)
   b438c:	6003      	str	r3, [r0, #0]
   b438e:	4604      	mov	r4, r0
        if (handle) {
   b4390:	6880      	ldr	r0, [r0, #8]
   b4392:	b1c8      	cbz	r0, b43c8 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4394:	2500      	movs	r5, #0
   b4396:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b439a:	e9cd 3500 	strd	r3, r5, [sp]
   b439e:	2102      	movs	r1, #2
   b43a0:	462b      	mov	r3, r5
   b43a2:	462a      	mov	r2, r5
   b43a4:	f008 f8dc 	bl	bc560 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b43a8:	68a0      	ldr	r0, [r4, #8]
   b43aa:	4629      	mov	r1, r5
   b43ac:	f008 f900 	bl	bc5b0 <os_timer_set_id>
            while (running) {
   b43b0:	7923      	ldrb	r3, [r4, #4]
   b43b2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b43b6:	b113      	cbz	r3, b43be <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b43b8:	f008 f8aa 	bl	bc510 <os_thread_yield>
            while (running) {
   b43bc:	e7f8      	b.n	b43b0 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b43be:	68a0      	ldr	r0, [r4, #8]
   b43c0:	4629      	mov	r1, r5
   b43c2:	f008 f8bd 	bl	bc540 <os_timer_destroy>
            handle = nullptr;
   b43c6:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b43c8:	f104 000c 	add.w	r0, r4, #12
   b43cc:	f7ff ffd2 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
    }
   b43d0:	4620      	mov	r0, r4
   b43d2:	b003      	add	sp, #12
   b43d4:	bd30      	pop	{r4, r5, pc}
   b43d6:	bf00      	nop
   b43d8:	000c3ba4 	.word	0x000c3ba4

000b43dc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43dc:	b510      	push	{r4, lr}
   b43de:	4604      	mov	r4, r0
    }
   b43e0:	f7ff ffd2 	bl	b4388 <_ZN5TimerD1Ev>
   b43e4:	4620      	mov	r0, r4
   b43e6:	211c      	movs	r1, #28
   b43e8:	f7ff fe5b 	bl	b40a2 <_ZdlPvj>
   b43ec:	4620      	mov	r0, r4
   b43ee:	bd10      	pop	{r4, pc}

000b43f0 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b43f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43f2:	468c      	mov	ip, r1
   b43f4:	2500      	movs	r5, #0
   b43f6:	4914      	ldr	r1, [pc, #80]	; (b4448 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b43f8:	7105      	strb	r5, [r0, #4]
   b43fa:	4604      	mov	r4, r0
   b43fc:	6085      	str	r5, [r0, #8]
   b43fe:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4400:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4404:	b085      	sub	sp, #20
   b4406:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4408:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b440c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4410:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4414:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4418:	e897 0003 	ldmia.w	r7, {r0, r1}
   b441c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4420:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4422:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4424:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4426:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4428:	6095      	str	r5, [r2, #8]
   b442a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b442c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b442e:	e9cd 3500 	strd	r3, r5, [sp]
   b4432:	4a06      	ldr	r2, [pc, #24]	; (b444c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4434:	4623      	mov	r3, r4
   b4436:	4661      	mov	r1, ip
   b4438:	f104 0008 	add.w	r0, r4, #8
   b443c:	f008 f878 	bl	bc530 <os_timer_create>
    }
   b4440:	4620      	mov	r0, r4
   b4442:	b005      	add	sp, #20
   b4444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4446:	bf00      	nop
   b4448:	000c3ba4 	.word	0x000c3ba4
   b444c:	000b41e7 	.word	0x000b41e7

000b4450 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b4450:	b510      	push	{r4, lr}
   b4452:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b4454:	2200      	movs	r2, #0
   b4456:	7c40      	ldrb	r0, [r0, #17]
   b4458:	f008 fa7c 	bl	bc954 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b445c:	7c63      	ldrb	r3, [r4, #17]
   b445e:	2b0f      	cmp	r3, #15
        d_.period = period;
   b4460:	bf18      	it	ne
   b4462:	8320      	strhne	r0, [r4, #24]
}
   b4464:	bd10      	pop	{r4, pc}
	...

000b4468 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b4468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   b446a:	4b24      	ldr	r3, [pc, #144]	; (b44fc <_Z10LEDHandlerv+0x94>)
   b446c:	4d24      	ldr	r5, [pc, #144]	; (b4500 <_Z10LEDHandlerv+0x98>)
   b446e:	781b      	ldrb	r3, [r3, #0]
   b4470:	b15b      	cbz	r3, b448a <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4472:	7c6b      	ldrb	r3, [r5, #17]
   b4474:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4476:	bf1c      	itt	ne
   b4478:	2302      	movne	r3, #2
   b447a:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b447c:	23ff      	movs	r3, #255	; 0xff
   b447e:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b4480:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b4482:	481f      	ldr	r0, [pc, #124]	; (b4500 <_Z10LEDHandlerv+0x98>)
   b4484:	f7ff ffe4 	bl	b4450 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lowBattery){
   b448a:	4b1e      	ldr	r3, [pc, #120]	; (b4504 <_Z10LEDHandlerv+0x9c>)
   b448c:	781b      	ldrb	r3, [r3, #0]
   b448e:	2b00      	cmp	r3, #0
   b4490:	d12d      	bne.n	b44ee <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b4492:	4b1d      	ldr	r3, [pc, #116]	; (b4508 <_Z10LEDHandlerv+0xa0>)
   b4494:	781b      	ldrb	r3, [r3, #0]
   b4496:	2b00      	cmp	r3, #0
   b4498:	d12c      	bne.n	b44f4 <_Z10LEDHandlerv+0x8c>
    else if(manualRC){
   b449a:	4b1c      	ldr	r3, [pc, #112]	; (b450c <_Z10LEDHandlerv+0xa4>)
   b449c:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b449e:	2b00      	cmp	r3, #0
   b44a0:	bf15      	itete	ne
   b44a2:	260a      	movne	r6, #10
   b44a4:	2614      	moveq	r6, #20
   b44a6:	2702      	movne	r7, #2
   b44a8:	2703      	moveq	r7, #3
    statusMode |= XBeeAvail << 1;
   b44aa:	4b19      	ldr	r3, [pc, #100]	; (b4510 <_Z10LEDHandlerv+0xa8>)
   b44ac:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b44ae:	4b19      	ldr	r3, [pc, #100]	; (b4514 <_Z10LEDHandlerv+0xac>)
   b44b0:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b44b2:	4b19      	ldr	r3, [pc, #100]	; (b4518 <_Z10LEDHandlerv+0xb0>)
    statusMode |= BLEAvail << 2;
   b44b4:	00a4      	lsls	r4, r4, #2
   b44b6:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b44ba:	781a      	ldrb	r2, [r3, #0]
   b44bc:	4314      	orrs	r4, r2
   b44be:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b44c0:	f00b fd12 	bl	bfee8 <_Z16_fetch_usbserialv>
   b44c4:	4622      	mov	r2, r4
   b44c6:	3c01      	subs	r4, #1
   b44c8:	4914      	ldr	r1, [pc, #80]	; (b451c <_Z10LEDHandlerv+0xb4>)
   b44ca:	b2e4      	uxtb	r4, r4
   b44cc:	f7ff ff44 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b44d0:	2c06      	cmp	r4, #6
   b44d2:	bf98      	it	ls
   b44d4:	4b12      	ldrls	r3, [pc, #72]	; (b4520 <_Z10LEDHandlerv+0xb8>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44d6:	7c6a      	ldrb	r2, [r5, #17]
   b44d8:	bf94      	ite	ls
   b44da:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b44de:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b44e2:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b44e4:	bf18      	it	ne
   b44e6:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b44e8:	4631      	mov	r1, r6
    d_.color = color;
   b44ea:	616b      	str	r3, [r5, #20]
   b44ec:	e7c9      	b.n	b4482 <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b44ee:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b44f0:	2702      	movs	r7, #2
   b44f2:	e7da      	b.n	b44aa <_Z10LEDHandlerv+0x42>
        SetSpeed = LED_SPEED_NORMAL;
   b44f4:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b44f6:	2701      	movs	r7, #1
   b44f8:	e7d7      	b.n	b44aa <_Z10LEDHandlerv+0x42>
   b44fa:	bf00      	nop
   b44fc:	2003e0ec 	.word	0x2003e0ec
   b4500:	2003e594 	.word	0x2003e594
   b4504:	2003df34 	.word	0x2003df34
   b4508:	2003df29 	.word	0x2003df29
   b450c:	2003df35 	.word	0x2003df35
   b4510:	2003de14 	.word	0x2003de14
   b4514:	2003ddd4 	.word	0x2003ddd4
   b4518:	2003de04 	.word	0x2003de04
   b451c:	000c36da 	.word	0x000c36da
   b4520:	000c3cb0 	.word	0x000c3cb0

000b4524 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4524:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b4526:	460a      	mov	r2, r1
   b4528:	4901      	ldr	r1, [pc, #4]	; (b4530 <_ZN7FatFile4openEPKci+0xc>)
   b452a:	6809      	ldr	r1, [r1, #0]
   b452c:	f002 b9ed 	b.w	b690a <_ZN7FatFile4openEPS_PKci>
   b4530:	2003e614 	.word	0x2003e614

000b4534 <_Z11wdogHandlerv>:
void wdogHandler(){
   b4534:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4536:	f008 fa91 	bl	bca5c <spark_cloud_flag_connected>
   b453a:	4c2b      	ldr	r4, [pc, #172]	; (b45e8 <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b453c:	b1e0      	cbz	r0, b4578 <_Z11wdogHandlerv+0x44>
   b453e:	2301      	movs	r3, #1
        LTEAvail = false;
   b4540:	7023      	strb	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4542:	f007 ff4b 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b4546:	4b29      	ldr	r3, [pc, #164]	; (b45ec <_Z11wdogHandlerv+0xb8>)
   b4548:	4c29      	ldr	r4, [pc, #164]	; (b45f0 <_Z11wdogHandlerv+0xbc>)
   b454a:	681b      	ldr	r3, [r3, #0]
   b454c:	f247 5230 	movw	r2, #30000	; 0x7530
   b4550:	1ac0      	subs	r0, r0, r3
   b4552:	4290      	cmp	r0, r2
   b4554:	d823      	bhi.n	b459e <_Z11wdogHandlerv+0x6a>
   b4556:	b313      	cbz	r3, b459e <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b4558:	2301      	movs	r3, #1
        XBeeAvail = false;
   b455a:	7023      	strb	r3, [r4, #0]
   b455c:	f007 ff3e 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b4560:	4b24      	ldr	r3, [pc, #144]	; (b45f4 <_Z11wdogHandlerv+0xc0>)
   b4562:	4c25      	ldr	r4, [pc, #148]	; (b45f8 <_Z11wdogHandlerv+0xc4>)
   b4564:	681b      	ldr	r3, [r3, #0]
   b4566:	f247 5230 	movw	r2, #30000	; 0x7530
   b456a:	1ac0      	subs	r0, r0, r3
   b456c:	4290      	cmp	r0, r2
   b456e:	d828      	bhi.n	b45c2 <_Z11wdogHandlerv+0x8e>
   b4570:	b33b      	cbz	r3, b45c2 <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b4572:	2301      	movs	r3, #1
        BLEAvail = false;
   b4574:	7023      	strb	r3, [r4, #0]
}
   b4576:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b4578:	7823      	ldrb	r3, [r4, #0]
   b457a:	2b00      	cmp	r3, #0
   b457c:	d0e1      	beq.n	b4542 <_Z11wdogHandlerv+0xe>
    return m_attr;
   b457e:	481f      	ldr	r0, [pc, #124]	; (b45fc <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4580:	7c03      	ldrb	r3, [r0, #16]
   b4582:	b92b      	cbnz	r3, b4590 <_Z11wdogHandlerv+0x5c>
   b4584:	491e      	ldr	r1, [pc, #120]	; (b4600 <_Z11wdogHandlerv+0xcc>)
   b4586:	f244 2202 	movw	r2, #16898	; 0x4202
   b458a:	3010      	adds	r0, #16
   b458c:	f7ff ffca 	bl	b4524 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4590:	491c      	ldr	r1, [pc, #112]	; (b4604 <_Z11wdogHandlerv+0xd0>)
   b4592:	481a      	ldr	r0, [pc, #104]	; (b45fc <_Z11wdogHandlerv+0xc8>)
   b4594:	221e      	movs	r2, #30
   b4596:	f7ff fedf 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b459a:	2300      	movs	r3, #0
   b459c:	e7d0      	b.n	b4540 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b459e:	7823      	ldrb	r3, [r4, #0]
   b45a0:	b16b      	cbz	r3, b45be <_Z11wdogHandlerv+0x8a>
   b45a2:	4816      	ldr	r0, [pc, #88]	; (b45fc <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45a4:	7c03      	ldrb	r3, [r0, #16]
   b45a6:	b92b      	cbnz	r3, b45b4 <_Z11wdogHandlerv+0x80>
   b45a8:	4915      	ldr	r1, [pc, #84]	; (b4600 <_Z11wdogHandlerv+0xcc>)
   b45aa:	f244 2202 	movw	r2, #16898	; 0x4202
   b45ae:	3010      	adds	r0, #16
   b45b0:	f7ff ffb8 	bl	b4524 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b45b4:	4913      	ldr	r1, [pc, #76]	; (b4604 <_Z11wdogHandlerv+0xd0>)
   b45b6:	4811      	ldr	r0, [pc, #68]	; (b45fc <_Z11wdogHandlerv+0xc8>)
   b45b8:	221e      	movs	r2, #30
   b45ba:	f7ff fecd 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b45be:	2300      	movs	r3, #0
   b45c0:	e7cb      	b.n	b455a <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b45c2:	7822      	ldrb	r2, [r4, #0]
   b45c4:	b172      	cbz	r2, b45e4 <_Z11wdogHandlerv+0xb0>
   b45c6:	b16b      	cbz	r3, b45e4 <_Z11wdogHandlerv+0xb0>
   b45c8:	480c      	ldr	r0, [pc, #48]	; (b45fc <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45ca:	7c03      	ldrb	r3, [r0, #16]
   b45cc:	b92b      	cbnz	r3, b45da <_Z11wdogHandlerv+0xa6>
   b45ce:	490c      	ldr	r1, [pc, #48]	; (b4600 <_Z11wdogHandlerv+0xcc>)
   b45d0:	f244 2202 	movw	r2, #16898	; 0x4202
   b45d4:	3010      	adds	r0, #16
   b45d6:	f7ff ffa5 	bl	b4524 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b45da:	490b      	ldr	r1, [pc, #44]	; (b4608 <_Z11wdogHandlerv+0xd4>)
   b45dc:	4807      	ldr	r0, [pc, #28]	; (b45fc <_Z11wdogHandlerv+0xc8>)
   b45de:	221e      	movs	r2, #30
   b45e0:	f7ff feba 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b45e4:	2300      	movs	r3, #0
   b45e6:	e7c5      	b.n	b4574 <_Z11wdogHandlerv+0x40>
   b45e8:	2003de04 	.word	0x2003de04
   b45ec:	2003de18 	.word	0x2003de18
   b45f0:	2003de14 	.word	0x2003de14
   b45f4:	2003dde0 	.word	0x2003dde0
   b45f8:	2003ddd4 	.word	0x2003ddd4
   b45fc:	2003ded0 	.word	0x2003ded0
   b4600:	2003de53 	.word	0x2003de53
   b4604:	000c36e5 	.word	0x000c36e5
   b4608:	000c3736 	.word	0x000c3736

000b460c <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b460c:	b530      	push	{r4, r5, lr}
   b460e:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4610:	4b1b      	ldr	r3, [pc, #108]	; (b4680 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4612:	9300      	str	r3, [sp, #0]
   b4614:	7913      	ldrb	r3, [r2, #4]
   b4616:	f88d 3004 	strb.w	r3, [sp, #4]
   b461a:	6893      	ldr	r3, [r2, #8]
   b461c:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b461e:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b4622:	8993      	ldrh	r3, [r2, #12]
   b4624:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4628:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b462a:	460a      	mov	r2, r1
   b462c:	466b      	mov	r3, sp
   b462e:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4632:	4628      	mov	r0, r5
   b4634:	f002 fcf2 	bl	b701c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4638:	b910      	cbnz	r0, b4640 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b463a:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b463c:	b005      	add	sp, #20
   b463e:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4640:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4642:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4646:	4628      	mov	r0, r5
   b4648:	f002 f958 	bl	b68fc <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b464c:	2101      	movs	r1, #1
   b464e:	4620      	mov	r0, r4
   b4650:	f002 fb8e 	bl	b6d70 <_ZN9FatVolume4initEh>
   b4654:	4601      	mov	r1, r0
   b4656:	b168      	cbz	r0, b4674 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4658:	4621      	mov	r1, r4
   b465a:	4628      	mov	r0, r5
   b465c:	f001 ff48 	bl	b64f0 <_ZN7FatFile8openRootEP9FatVolume>
   b4660:	2800      	cmp	r0, #0
   b4662:	d0ea      	beq.n	b463a <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4664:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4668:	f013 0f70 	tst.w	r3, #112	; 0x70
   b466c:	d0e5      	beq.n	b463a <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b466e:	4b05      	ldr	r3, [pc, #20]	; (b4684 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4670:	601d      	str	r5, [r3, #0]
    return true;
   b4672:	e7e3      	b.n	b463c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4674:	4620      	mov	r0, r4
   b4676:	f002 fb7b 	bl	b6d70 <_ZN9FatVolume4initEh>
   b467a:	2800      	cmp	r0, #0
   b467c:	d1ec      	bne.n	b4658 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b467e:	e7dc      	b.n	b463a <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4680:	000c3b90 	.word	0x000c3b90
   b4684:	2003e614 	.word	0x2003e614

000b4688 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b468c:	b084      	sub	sp, #16
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b468e:	7883      	ldrb	r3, [r0, #2]
   b4690:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4692:	af00      	add	r7, sp, #0
   b4694:	4604      	mov	r4, r0
   b4696:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4698:	d14b      	bne.n	b4732 <_Z14processCommandPKchb+0xaa>
   b469a:	78c3      	ldrb	r3, [r0, #3]
   b469c:	2b42      	cmp	r3, #66	; 0x42
   b469e:	d174      	bne.n	b478a <_Z14processCommandPKchb+0x102>
        char dataStr[strlen(command)-8];
   b46a0:	4620      	mov	r0, r4
   b46a2:	f00c ffce 	bl	c1642 <strlen>
   b46a6:	3801      	subs	r0, #1
   b46a8:	f020 0007 	bic.w	r0, r0, #7
        }
   b46ac:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b46ae:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b46b2:	4620      	mov	r0, r4
   b46b4:	f00c ffc5 	bl	c1642 <strlen>
   b46b8:	4468      	add	r0, sp
   b46ba:	2600      	movs	r6, #0
   b46bc:	f800 6c09 	strb.w	r6, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b46c0:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b46c2:	73fe      	strb	r6, [r7, #15]
        checkStr[0] = command[strlen(command)-2];
   b46c4:	f00c ffbd 	bl	c1642 <strlen>
   b46c8:	4420      	add	r0, r4
        char dataStr[strlen(command)-8];
   b46ca:	466d      	mov	r5, sp
        checkStr[0] = command[strlen(command)-2];
   b46cc:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b46d0:	703b      	strb	r3, [r7, #0]
        checkStr[1] = command[strlen(command)-1];
   b46d2:	4620      	mov	r0, r4
   b46d4:	f00c ffb5 	bl	c1642 <strlen>
   b46d8:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46da:	4631      	mov	r1, r6
        checkStr[1] = command[strlen(command)-1];
   b46dc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b46e0:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46e2:	2210      	movs	r2, #16
   b46e4:	4638      	mov	r0, r7
        checkStr[2] = '\0';
   b46e6:	70be      	strb	r6, [r7, #2]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46e8:	f00d fec2 	bl	c2470 <strtol>
   b46ec:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b46ee:	fa5f f888 	uxtb.w	r8, r8
   b46f2:	f00b fbf9 	bl	bfee8 <_Z16_fetch_usbserialv>
   b46f6:	4978      	ldr	r1, [pc, #480]	; (b48d8 <_Z14processCommandPKchb+0x250>)
   b46f8:	4643      	mov	r3, r8
   b46fa:	4642      	mov	r2, r8
   b46fc:	f7ff fe2c 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4700:	2604      	movs	r6, #4
   b4702:	4620      	mov	r0, r4
   b4704:	f00c ff9d 	bl	c1642 <strlen>
   b4708:	3802      	subs	r0, #2
   b470a:	4286      	cmp	r6, r0
   b470c:	d216      	bcs.n	b473c <_Z14processCommandPKchb+0xb4>
            if(i < 7) cmdStr[i-4] = command[i];
   b470e:	2e06      	cmp	r6, #6
   b4710:	bf9b      	ittet	ls
   b4712:	f107 0310 	addls.w	r3, r7, #16
   b4716:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4718:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b471a:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b471c:	bf8c      	ite	hi
   b471e:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b4720:	f803 2c08 	strbls.w	r2, [r3, #-8]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4724:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4728:	bf88      	it	hi
   b472a:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b472e:	b2f6      	uxtb	r6, r6
   b4730:	e7e7      	b.n	b4702 <_Z14processCommandPKchb+0x7a>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4732:	2b42      	cmp	r3, #66	; 0x42
   b4734:	d129      	bne.n	b478a <_Z14processCommandPKchb+0x102>
   b4736:	78c3      	ldrb	r3, [r0, #3]
   b4738:	2b31      	cmp	r3, #49	; 0x31
   b473a:	e7b0      	b.n	b469e <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b473c:	4540      	cmp	r0, r8
   b473e:	d02e      	beq.n	b479e <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4740:	f00b fbd2 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4744:	4605      	mov	r5, r0
   b4746:	4620      	mov	r0, r4
   b4748:	f00c ff7b 	bl	c1642 <strlen>
   b474c:	1e82      	subs	r2, r0, #2
   b474e:	4628      	mov	r0, r5
    return m_attr;
   b4750:	4d62      	ldr	r5, [pc, #392]	; (b48dc <_Z14processCommandPKchb+0x254>)
   b4752:	4963      	ldr	r1, [pc, #396]	; (b48e0 <_Z14processCommandPKchb+0x258>)
   b4754:	4643      	mov	r3, r8
   b4756:	f7ff fdff 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b475a:	7c2b      	ldrb	r3, [r5, #16]
   b475c:	b9cb      	cbnz	r3, b4792 <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b475e:	4961      	ldr	r1, [pc, #388]	; (b48e4 <_Z14processCommandPKchb+0x25c>)
   b4760:	f244 2202 	movw	r2, #16898	; 0x4202
   b4764:	f105 0010 	add.w	r0, r5, #16
   b4768:	f7ff fedc 	bl	b4524 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b476c:	495e      	ldr	r1, [pc, #376]	; (b48e8 <_Z14processCommandPKchb+0x260>)
   b476e:	4622      	mov	r2, r4
   b4770:	4628      	mov	r0, r5
   b4772:	f7ff fdf1 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4776:	f105 0010 	add.w	r0, r5, #16
   b477a:	f002 f8bf 	bl	b68fc <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b477e:	f00b fbb3 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4782:	495a      	ldr	r1, [pc, #360]	; (b48ec <_Z14processCommandPKchb+0x264>)
   b4784:	f009 fead 	bl	be4e2 <_ZN5Print7printlnEPKc>
            return;
   b4788:	46cd      	mov	sp, r9
}
   b478a:	3710      	adds	r7, #16
   b478c:	46bd      	mov	sp, r7
   b478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4792:	4955      	ldr	r1, [pc, #340]	; (b48e8 <_Z14processCommandPKchb+0x260>)
   b4794:	4622      	mov	r2, r4
   b4796:	4628      	mov	r0, r5
   b4798:	f7ff fdde 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b479c:	e7ef      	b.n	b477e <_Z14processCommandPKchb+0xf6>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b479e:	4954      	ldr	r1, [pc, #336]	; (b48f0 <_Z14processCommandPKchb+0x268>)
   b47a0:	f107 000c 	add.w	r0, r7, #12
   b47a4:	f00c ff1e 	bl	c15e4 <strcmp>
   b47a8:	2800      	cmp	r0, #0
   b47aa:	d0ed      	beq.n	b4788 <_Z14processCommandPKchb+0x100>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b47ac:	4951      	ldr	r1, [pc, #324]	; (b48f4 <_Z14processCommandPKchb+0x26c>)
   b47ae:	f107 000c 	add.w	r0, r7, #12
   b47b2:	f00c ff17 	bl	c15e4 <strcmp>
   b47b6:	bb58      	cbnz	r0, b4810 <_Z14processCommandPKchb+0x188>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b47b8:	782b      	ldrb	r3, [r5, #0]
   b47ba:	713b      	strb	r3, [r7, #4]
   b47bc:	786b      	ldrb	r3, [r5, #1]
   b47be:	717b      	strb	r3, [r7, #5]
   b47c0:	78ab      	ldrb	r3, [r5, #2]
   b47c2:	71bb      	strb	r3, [r7, #6]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47c4:	78eb      	ldrb	r3, [r5, #3]
   b47c6:	723b      	strb	r3, [r7, #8]
   b47c8:	792b      	ldrb	r3, [r5, #4]
   b47ca:	727b      	strb	r3, [r7, #9]
            setLSpeed = atoi(lSpd);
   b47cc:	1d38      	adds	r0, r7, #4
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47ce:	796b      	ldrb	r3, [r5, #5]
   b47d0:	72bb      	strb	r3, [r7, #10]
            setLSpeed = atoi(lSpd);
   b47d2:	f00c fe66 	bl	c14a2 <atoi>
   b47d6:	4d48      	ldr	r5, [pc, #288]	; (b48f8 <_Z14processCommandPKchb+0x270>)
            setRSpeed = atoi(rSpd);
   b47d8:	4c48      	ldr	r4, [pc, #288]	; (b48fc <_Z14processCommandPKchb+0x274>)
            setLSpeed = atoi(lSpd);
   b47da:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b47dc:	f107 0008 	add.w	r0, r7, #8
   b47e0:	f00c fe5f 	bl	c14a2 <atoi>
   b47e4:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b47e6:	f00b fb7f 	bl	bfee8 <_Z16_fetch_usbserialv>
   b47ea:	7823      	ldrb	r3, [r4, #0]
   b47ec:	782a      	ldrb	r2, [r5, #0]
   b47ee:	4944      	ldr	r1, [pc, #272]	; (b4900 <_Z14processCommandPKchb+0x278>)
   b47f0:	f7ff fdb2 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            ESCL.write(setLSpeed);
   b47f4:	7829      	ldrb	r1, [r5, #0]
   b47f6:	4843      	ldr	r0, [pc, #268]	; (b4904 <_Z14processCommandPKchb+0x27c>)
   b47f8:	f008 fb3c 	bl	bce74 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b47fc:	7821      	ldrb	r1, [r4, #0]
   b47fe:	4842      	ldr	r0, [pc, #264]	; (b4908 <_Z14processCommandPKchb+0x280>)
   b4800:	f008 fb38 	bl	bce74 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b4804:	4a41      	ldr	r2, [pc, #260]	; (b490c <_Z14processCommandPKchb+0x284>)
   b4806:	2301      	movs	r3, #1
   b4808:	7013      	strb	r3, [r2, #0]
            manualRC = true;
   b480a:	4a41      	ldr	r2, [pc, #260]	; (b4910 <_Z14processCommandPKchb+0x288>)
   b480c:	7013      	strb	r3, [r2, #0]
   b480e:	e7bb      	b.n	b4788 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b4810:	4940      	ldr	r1, [pc, #256]	; (b4914 <_Z14processCommandPKchb+0x28c>)
   b4812:	f107 000c 	add.w	r0, r7, #12
   b4816:	f00c fee5 	bl	c15e4 <strcmp>
   b481a:	b918      	cbnz	r0, b4824 <_Z14processCommandPKchb+0x19c>
            requestActive = mode;
   b481c:	4b3e      	ldr	r3, [pc, #248]	; (b4918 <_Z14processCommandPKchb+0x290>)
   b481e:	f883 a000 	strb.w	sl, [r3]
   b4822:	e7b1      	b.n	b4788 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"pts")){
   b4824:	493d      	ldr	r1, [pc, #244]	; (b491c <_Z14processCommandPKchb+0x294>)
   b4826:	f107 000c 	add.w	r0, r7, #12
   b482a:	f00c fedb 	bl	c15e4 <strcmp>
   b482e:	b9f0      	cbnz	r0, b486e <_Z14processCommandPKchb+0x1e6>
   b4830:	4c2a      	ldr	r4, [pc, #168]	; (b48dc <_Z14processCommandPKchb+0x254>)
            Serial.println(dataStr);
   b4832:	f00b fb59 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4836:	4629      	mov	r1, r5
   b4838:	f009 fe53 	bl	be4e2 <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b483c:	7c23      	ldrb	r3, [r4, #16]
   b483e:	b983      	cbnz	r3, b4862 <_Z14processCommandPKchb+0x1da>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4840:	4928      	ldr	r1, [pc, #160]	; (b48e4 <_Z14processCommandPKchb+0x25c>)
   b4842:	f244 2202 	movw	r2, #16898	; 0x4202
   b4846:	f104 0010 	add.w	r0, r4, #16
   b484a:	f7ff fe6b 	bl	b4524 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b484e:	4934      	ldr	r1, [pc, #208]	; (b4920 <_Z14processCommandPKchb+0x298>)
   b4850:	462a      	mov	r2, r5
   b4852:	4620      	mov	r0, r4
   b4854:	f7ff fd80 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4858:	f104 0010 	add.w	r0, r4, #16
   b485c:	f002 f84e 	bl	b68fc <_ZN7FatFile5closeEv>
   b4860:	e792      	b.n	b4788 <_Z14processCommandPKchb+0x100>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4862:	492f      	ldr	r1, [pc, #188]	; (b4920 <_Z14processCommandPKchb+0x298>)
   b4864:	462a      	mov	r2, r5
   b4866:	4620      	mov	r0, r4
   b4868:	f7ff fd76 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b486c:	e78c      	b.n	b4788 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b486e:	492d      	ldr	r1, [pc, #180]	; (b4924 <_Z14processCommandPKchb+0x29c>)
   b4870:	f107 000c 	add.w	r0, r7, #12
   b4874:	f00c feb6 	bl	c15e4 <strcmp>
   b4878:	b920      	cbnz	r0, b4884 <_Z14processCommandPKchb+0x1fc>
   b487a:	f007 fdaf 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b487e:	4b2a      	ldr	r3, [pc, #168]	; (b4928 <_Z14processCommandPKchb+0x2a0>)
   b4880:	6018      	str	r0, [r3, #0]
   b4882:	e781      	b.n	b4788 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"hwa")){
   b4884:	4929      	ldr	r1, [pc, #164]	; (b492c <_Z14processCommandPKchb+0x2a4>)
   b4886:	f107 000c 	add.w	r0, r7, #12
   b488a:	f00c feab 	bl	c15e4 <strcmp>
   b488e:	b910      	cbnz	r0, b4896 <_Z14processCommandPKchb+0x20e>
            waitForConnection = false;
   b4890:	4b27      	ldr	r3, [pc, #156]	; (b4930 <_Z14processCommandPKchb+0x2a8>)
   b4892:	7018      	strb	r0, [r3, #0]
   b4894:	e778      	b.n	b4788 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b4896:	4927      	ldr	r1, [pc, #156]	; (b4934 <_Z14processCommandPKchb+0x2ac>)
   b4898:	f107 000c 	add.w	r0, r7, #12
   b489c:	f00c fea2 	bl	c15e4 <strcmp>
   b48a0:	2800      	cmp	r0, #0
   b48a2:	f43f af71 	beq.w	b4788 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b48a6:	4924      	ldr	r1, [pc, #144]	; (b4938 <_Z14processCommandPKchb+0x2b0>)
   b48a8:	f107 000c 	add.w	r0, r7, #12
   b48ac:	f00c fe9a 	bl	c15e4 <strcmp>
   b48b0:	2800      	cmp	r0, #0
   b48b2:	f47f af69 	bne.w	b4788 <_Z14processCommandPKchb+0x100>
            offloadMode = true;
   b48b6:	4b21      	ldr	r3, [pc, #132]	; (b493c <_Z14processCommandPKchb+0x2b4>)
            status.setSpeed(LED_SPEED_FAST);
   b48b8:	4821      	ldr	r0, [pc, #132]	; (b4940 <_Z14processCommandPKchb+0x2b8>)
            offloadMode = true;
   b48ba:	2201      	movs	r2, #1
   b48bc:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b48be:	4b20      	ldr	r3, [pc, #128]	; (b4940 <_Z14processCommandPKchb+0x2b8>)
   b48c0:	7c5a      	ldrb	r2, [r3, #17]
   b48c2:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b48c4:	bf1c      	itt	ne
   b48c6:	2202      	movne	r2, #2
   b48c8:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b48ca:	211e      	movs	r1, #30
    d_.color = color;
   b48cc:	22ff      	movs	r2, #255	; 0xff
   b48ce:	615a      	str	r2, [r3, #20]
   b48d0:	f7ff fdbe 	bl	b4450 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b48d4:	e758      	b.n	b4788 <_Z14processCommandPKchb+0x100>
   b48d6:	bf00      	nop
   b48d8:	000c3785 	.word	0x000c3785
   b48dc:	2003ded0 	.word	0x2003ded0
   b48e0:	000c379a 	.word	0x000c379a
   b48e4:	2003de53 	.word	0x2003de53
   b48e8:	000c37b7 	.word	0x000c37b7
   b48ec:	000c37e3 	.word	0x000c37e3
   b48f0:	000c3804 	.word	0x000c3804
   b48f4:	000c3808 	.word	0x000c3808
   b48f8:	2003e590 	.word	0x2003e590
   b48fc:	2003e591 	.word	0x2003e591
   b4900:	000c380c 	.word	0x000c380c
   b4904:	2003dde4 	.word	0x2003dde4
   b4908:	2003ddf4 	.word	0x2003ddf4
   b490c:	2003e5e0 	.word	0x2003e5e0
   b4910:	2003df35 	.word	0x2003df35
   b4914:	000c3838 	.word	0x000c3838
   b4918:	2003e0ed 	.word	0x2003e0ed
   b491c:	000c383c 	.word	0x000c383c
   b4920:	000c3840 	.word	0x000c3840
   b4924:	000c3863 	.word	0x000c3863
   b4928:	2003de74 	.word	0x2003de74
   b492c:	000c3867 	.word	0x000c3867
   b4930:	2003e5e1 	.word	0x2003e5e1
   b4934:	000c386b 	.word	0x000c386b
   b4938:	000c386f 	.word	0x000c386f
   b493c:	2003e0ec 	.word	0x2003e0ec
   b4940:	2003e594 	.word	0x2003e594

000b4944 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4944:	b510      	push	{r4, lr}
   b4946:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4948:	2200      	movs	r2, #0
   b494a:	2104      	movs	r1, #4
   b494c:	4620      	mov	r0, r4
   b494e:	f7ff fe9b 	bl	b4688 <_Z14processCommandPKchb>
    if(logMessages){
   b4952:	4b0b      	ldr	r3, [pc, #44]	; (b4980 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4954:	781b      	ldrb	r3, [r3, #0]
   b4956:	b193      	cbz	r3, b497e <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4958:	480a      	ldr	r0, [pc, #40]	; (b4984 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b495a:	7c03      	ldrb	r3, [r0, #16]
   b495c:	b92b      	cbnz	r3, b496a <_Z13cmdLTEHandlerPKcS0_+0x26>
   b495e:	490a      	ldr	r1, [pc, #40]	; (b4988 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4960:	f244 2202 	movw	r2, #16898	; 0x4202
   b4964:	3010      	adds	r0, #16
   b4966:	f7ff fddd 	bl	b4524 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b496a:	4622      	mov	r2, r4
   b496c:	4907      	ldr	r1, [pc, #28]	; (b498c <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b496e:	4805      	ldr	r0, [pc, #20]	; (b4984 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4970:	f7ff fcf2 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4978:	4805      	ldr	r0, [pc, #20]	; (b4990 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b497a:	f001 bfbf 	b.w	b68fc <_ZN7FatFile5closeEv>
}
   b497e:	bd10      	pop	{r4, pc}
   b4980:	2003df28 	.word	0x2003df28
   b4984:	2003ded0 	.word	0x2003ded0
   b4988:	2003de53 	.word	0x2003de53
   b498c:	000c3873 	.word	0x000c3873
   b4990:	2003dee0 	.word	0x2003dee0

000b4994 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4994:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4996:	f101 0308 	add.w	r3, r1, #8
   b499a:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b499e:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b49a0:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b49a4:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b49a6:	460a      	mov	r2, r1
   b49a8:	4601      	mov	r1, r0
   b49aa:	4668      	mov	r0, sp
   b49ac:	f00c fd96 	bl	c14dc <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49b0:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b49b4:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b49ba:	b113      	cbz	r3, b49c2 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b49bc:	2300      	movs	r3, #0
   b49be:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b49c2:	f00b fa91 	bl	bfee8 <_Z16_fetch_usbserialv>
   b49c6:	4916      	ldr	r1, [pc, #88]	; (b4a20 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b49c8:	f009 fd8b 	bl	be4e2 <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b49cc:	f00b fa8c 	bl	bfee8 <_Z16_fetch_usbserialv>
   b49d0:	4629      	mov	r1, r5
   b49d2:	f009 fd86 	bl	be4e2 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b49d6:	2201      	movs	r2, #1
   b49d8:	4611      	mov	r1, r2
   b49da:	4628      	mov	r0, r5
   b49dc:	f7ff fe54 	bl	b4688 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b49e0:	782b      	ldrb	r3, [r5, #0]
   b49e2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b49e6:	2b41      	cmp	r3, #65	; 0x41
   b49e8:	d103      	bne.n	b49f2 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b49ea:	f007 fcf7 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   b49ee:	4b0d      	ldr	r3, [pc, #52]	; (b4a24 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b49f0:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b49f2:	4b0d      	ldr	r3, [pc, #52]	; (b4a28 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b49f4:	781b      	ldrb	r3, [r3, #0]
   b49f6:	b183      	cbz	r3, b4a1a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b49f8:	480c      	ldr	r0, [pc, #48]	; (b4a2c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49fa:	7c03      	ldrb	r3, [r0, #16]
   b49fc:	b92b      	cbnz	r3, b4a0a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b49fe:	490c      	ldr	r1, [pc, #48]	; (b4a30 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4a00:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a04:	3010      	adds	r0, #16
   b4a06:	f7ff fd8d 	bl	b4524 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4a0a:	490a      	ldr	r1, [pc, #40]	; (b4a34 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4a0c:	4807      	ldr	r0, [pc, #28]	; (b4a2c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4a0e:	462a      	mov	r2, r5
   b4a10:	f7ff fca2 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4a14:	4808      	ldr	r0, [pc, #32]	; (b4a38 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4a16:	f001 ff71 	bl	b68fc <_ZN7FatFile5closeEv>
}
   b4a1a:	46bd      	mov	sp, r7
   b4a1c:	bdb0      	pop	{r4, r5, r7, pc}
   b4a1e:	bf00      	nop
   b4a20:	000c3893 	.word	0x000c3893
   b4a24:	2003dde0 	.word	0x2003dde0
   b4a28:	2003df28 	.word	0x2003df28
   b4a2c:	2003ded0 	.word	0x2003ded0
   b4a30:	2003de53 	.word	0x2003de53
   b4a34:	000c38a3 	.word	0x000c38a3
   b4a38:	2003dee0 	.word	0x2003dee0

000b4a3c <_Z8setupLTEv>:
void setupLTE(){
   b4a3c:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4a3e:	2400      	movs	r4, #0
   b4a40:	e9cd 4400 	strd	r4, r4, [sp]
   b4a44:	4904      	ldr	r1, [pc, #16]	; (b4a58 <_Z8setupLTEv+0x1c>)
   b4a46:	4805      	ldr	r0, [pc, #20]	; (b4a5c <_Z8setupLTEv+0x20>)
   b4a48:	2301      	movs	r3, #1
   b4a4a:	4622      	mov	r2, r4
   b4a4c:	f008 f816 	bl	bca7c <spark_subscribe>
    LTEAvail = false;
   b4a50:	4b03      	ldr	r3, [pc, #12]	; (b4a60 <_Z8setupLTEv+0x24>)
   b4a52:	701c      	strb	r4, [r3, #0]
}
   b4a54:	b002      	add	sp, #8
   b4a56:	bd10      	pop	{r4, pc}
   b4a58:	000b4945 	.word	0x000b4945
   b4a5c:	000c38c3 	.word	0x000c38c3
   b4a60:	2003de04 	.word	0x2003de04

000b4a64 <_Z9setupXBeev>:
void setupXBee(){
   b4a64:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4a66:	f00b feb5 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   b4a6a:	4908      	ldr	r1, [pc, #32]	; (b4a8c <_Z9setupXBeev+0x28>)
   b4a6c:	f7ff fc3b 	bl	b42e6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4a70:	2014      	movs	r0, #20
   b4a72:	f00a fe21 	bl	bf6b8 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4a76:	f00b fead 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   b4a7a:	4905      	ldr	r1, [pc, #20]	; (b4a90 <_Z9setupXBeev+0x2c>)
   b4a7c:	f7ff fc33 	bl	b42e6 <_ZN5Print6printfEPKcz>
}
   b4a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4a84:	2014      	movs	r0, #20
   b4a86:	f00a be17 	b.w	bf6b8 <delay>
   b4a8a:	bf00      	nop
   b4a8c:	000c4c8b 	.word	0x000c4c8b
   b4a90:	000c36a5 	.word	0x000c36a5

000b4a94 <_Z8setupGPSv>:
void setupGPS(){
   b4a94:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4a96:	f00b fed9 	bl	c084c <_Z19__fetch_global_Wirev>
   b4a9a:	2300      	movs	r3, #0
   b4a9c:	4601      	mov	r1, r0
   b4a9e:	9300      	str	r3, [sp, #0]
   b4aa0:	4812      	ldr	r0, [pc, #72]	; (b4aec <_Z8setupGPSv+0x58>)
   b4aa2:	f240 434c 	movw	r3, #1100	; 0x44c
   b4aa6:	2242      	movs	r2, #66	; 0x42
   b4aa8:	f007 fb7a 	bl	bc1a0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4aac:	b940      	cbnz	r0, b4ac0 <_Z8setupGPSv+0x2c>
        delay(1000);
   b4aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4ab2:	f00a fe01 	bl	bf6b8 <delay>
        Serial.println("Error, Could not initialize GPS");
   b4ab6:	f00b fa17 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4aba:	490d      	ldr	r1, [pc, #52]	; (b4af0 <_Z8setupGPSv+0x5c>)
   b4abc:	f009 fd11 	bl	be4e2 <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4ac0:	f240 424c 	movw	r2, #1100	; 0x44c
   b4ac4:	2101      	movs	r1, #1
   b4ac6:	4809      	ldr	r0, [pc, #36]	; (b4aec <_Z8setupGPSv+0x58>)
   b4ac8:	f007 fa9e 	bl	bc008 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4acc:	f240 434c 	movw	r3, #1100	; 0x44c
   b4ad0:	2201      	movs	r2, #1
   b4ad2:	2100      	movs	r1, #0
   b4ad4:	4805      	ldr	r0, [pc, #20]	; (b4aec <_Z8setupGPSv+0x58>)
   b4ad6:	f007 fa77 	bl	bbfc8 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4ada:	f00b feb7 	bl	c084c <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4ade:	4905      	ldr	r1, [pc, #20]	; (b4af4 <_Z8setupGPSv+0x60>)
}
   b4ae0:	b003      	add	sp, #12
   b4ae2:	f85d eb04 	ldr.w	lr, [sp], #4
   b4ae6:	f00b bb23 	b.w	c0130 <_ZN7TwoWire8setSpeedEm>
   b4aea:	bf00      	nop
   b4aec:	2003df6c 	.word	0x2003df6c
   b4af0:	000c38c9 	.word	0x000c38c9
   b4af4:	00061a80 	.word	0x00061a80

000b4af8 <_Z12getGPSLatLonv>:
bool getGPSLatLon(){
   b4af8:	b510      	push	{r4, lr}
    latitude_mdeg= myGPS.getLatitude();
   b4afa:	4c08      	ldr	r4, [pc, #32]	; (b4b1c <_Z12getGPSLatLonv+0x24>)
   b4afc:	f240 414c 	movw	r1, #1100	; 0x44c
   b4b00:	4620      	mov	r0, r4
   b4b02:	f007 fbcc 	bl	bc29e <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b4b06:	4b06      	ldr	r3, [pc, #24]	; (b4b20 <_Z12getGPSLatLonv+0x28>)
    longitude_mdeg = myGPS.getLongitude();
   b4b08:	f240 414c 	movw	r1, #1100	; 0x44c
    latitude_mdeg= myGPS.getLatitude();
   b4b0c:	6018      	str	r0, [r3, #0]
    longitude_mdeg = myGPS.getLongitude();
   b4b0e:	4620      	mov	r0, r4
   b4b10:	f007 fba2 	bl	bc258 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b4b14:	4b03      	ldr	r3, [pc, #12]	; (b4b24 <_Z12getGPSLatLonv+0x2c>)
   b4b16:	6018      	str	r0, [r3, #0]
}
   b4b18:	2001      	movs	r0, #1
   b4b1a:	bd10      	pop	{r4, pc}
   b4b1c:	2003df6c 	.word	0x2003df6c
   b4b20:	2003de7c 	.word	0x2003de7c
   b4b24:	2003df30 	.word	0x2003df30

000b4b28 <_Z12updateMotorsv>:
void updateMotors(){
   b4b28:	b510      	push	{r4, lr}
    if(updateMotorControl){
   b4b2a:	4c08      	ldr	r4, [pc, #32]	; (b4b4c <_Z12updateMotorsv+0x24>)
   b4b2c:	7823      	ldrb	r3, [r4, #0]
   b4b2e:	b15b      	cbz	r3, b4b48 <_Z12updateMotorsv+0x20>
        ESCL.write(setLSpeed);
   b4b30:	4b07      	ldr	r3, [pc, #28]	; (b4b50 <_Z12updateMotorsv+0x28>)
   b4b32:	4808      	ldr	r0, [pc, #32]	; (b4b54 <_Z12updateMotorsv+0x2c>)
   b4b34:	7819      	ldrb	r1, [r3, #0]
   b4b36:	f008 f99d 	bl	bce74 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4b3a:	4b07      	ldr	r3, [pc, #28]	; (b4b58 <_Z12updateMotorsv+0x30>)
   b4b3c:	4807      	ldr	r0, [pc, #28]	; (b4b5c <_Z12updateMotorsv+0x34>)
   b4b3e:	7819      	ldrb	r1, [r3, #0]
   b4b40:	f008 f998 	bl	bce74 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4b44:	2300      	movs	r3, #0
   b4b46:	7023      	strb	r3, [r4, #0]
}
   b4b48:	bd10      	pop	{r4, pc}
   b4b4a:	bf00      	nop
   b4b4c:	2003e5e0 	.word	0x2003e5e0
   b4b50:	2003e590 	.word	0x2003e590
   b4b54:	2003dde4 	.word	0x2003dde4
   b4b58:	2003e591 	.word	0x2003e591
   b4b5c:	2003ddf4 	.word	0x2003ddf4

000b4b60 <_Z13sensorHandlerv>:
void sensorHandler(){
   b4b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4b64:	4db2      	ldr	r5, [pc, #712]	; (b4e30 <_Z13sensorHandlerv+0x2d0>)
void sensorHandler(){
   b4b66:	b0ab      	sub	sp, #172	; 0xac
   b4b68:	f007 fc38 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4b6c:	682b      	ldr	r3, [r5, #0]
   b4b6e:	4283      	cmp	r3, r0
   b4b70:	f080 8109 	bcs.w	b4d86 <_Z13sensorHandlerv+0x226>
   b4b74:	f8df b2e8 	ldr.w	fp, [pc, #744]	; b4e60 <_Z13sensorHandlerv+0x300>
   b4b78:	f89b 3000 	ldrb.w	r3, [fp]
   b4b7c:	2b00      	cmp	r3, #0
   b4b7e:	f000 8102 	beq.w	b4d86 <_Z13sensorHandlerv+0x226>
        Wire.requestFrom(PHADDR, 20, 1);
   b4b82:	f00b fe63 	bl	c084c <_Z19__fetch_global_Wirev>
   b4b86:	2301      	movs	r3, #1
   b4b88:	2214      	movs	r2, #20
   b4b8a:	2163      	movs	r1, #99	; 0x63
   b4b8c:	f00b faf1 	bl	c0172 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4b90:	f00b fe5c 	bl	c084c <_Z19__fetch_global_Wirev>
   b4b94:	6803      	ldr	r3, [r0, #0]
   b4b96:	695b      	ldr	r3, [r3, #20]
   b4b98:	4798      	blx	r3
        int c = 0;
   b4b9a:	ac16      	add	r4, sp, #88	; 0x58
   b4b9c:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4b9e:	f00b fe55 	bl	c084c <_Z19__fetch_global_Wirev>
   b4ba2:	6803      	ldr	r3, [r0, #0]
   b4ba4:	691b      	ldr	r3, [r3, #16]
   b4ba6:	4798      	blx	r3
   b4ba8:	b138      	cbz	r0, b4bba <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b4baa:	f00b fe4f 	bl	c084c <_Z19__fetch_global_Wirev>
   b4bae:	6803      	ldr	r3, [r0, #0]
   b4bb0:	695b      	ldr	r3, [r3, #20]
   b4bb2:	4798      	blx	r3
   b4bb4:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4bb8:	e7f1      	b.n	b4b9e <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b4bba:	4630      	mov	r0, r6
   b4bbc:	f00c fc6e 	bl	c149c <atof>
   b4bc0:	ec51 0b10 	vmov	r0, r1, d0
   b4bc4:	f00c fbf6 	bl	c13b4 <__aeabi_d2f>
   b4bc8:	f8df a298 	ldr.w	sl, [pc, #664]	; b4e64 <_Z13sensorHandlerv+0x304>
   b4bcc:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b4bd0:	f00b fe3c 	bl	c084c <_Z19__fetch_global_Wirev>
   b4bd4:	2301      	movs	r3, #1
   b4bd6:	2214      	movs	r2, #20
   b4bd8:	2164      	movs	r1, #100	; 0x64
   b4bda:	f00b faca 	bl	c0172 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4bde:	f00b fe35 	bl	c084c <_Z19__fetch_global_Wirev>
   b4be2:	6803      	ldr	r3, [r0, #0]
   b4be4:	695b      	ldr	r3, [r3, #20]
   b4be6:	4798      	blx	r3
        c = 0;
   b4be8:	ac1b      	add	r4, sp, #108	; 0x6c
   b4bea:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4bec:	f00b fe2e 	bl	c084c <_Z19__fetch_global_Wirev>
   b4bf0:	6803      	ldr	r3, [r0, #0]
   b4bf2:	691b      	ldr	r3, [r3, #16]
   b4bf4:	4798      	blx	r3
   b4bf6:	b138      	cbz	r0, b4c08 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b4bf8:	f00b fe28 	bl	c084c <_Z19__fetch_global_Wirev>
   b4bfc:	6803      	ldr	r3, [r0, #0]
   b4bfe:	695b      	ldr	r3, [r3, #20]
   b4c00:	4798      	blx	r3
   b4c02:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4c06:	e7f1      	b.n	b4bec <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b4c08:	4630      	mov	r0, r6
   b4c0a:	f00c fc47 	bl	c149c <atof>
        Wire.requestFrom(COND, 20, 1);
   b4c0e:	f00b fe1d 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c12:	2301      	movs	r3, #1
   b4c14:	2214      	movs	r2, #20
   b4c16:	2165      	movs	r1, #101	; 0x65
   b4c18:	f00b faab 	bl	c0172 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4c1c:	f00b fe16 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c20:	6803      	ldr	r3, [r0, #0]
   b4c22:	695b      	ldr	r3, [r3, #20]
   b4c24:	4798      	blx	r3
        c = 0;
   b4c26:	ac20      	add	r4, sp, #128	; 0x80
   b4c28:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4c2a:	f00b fe0f 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c2e:	6803      	ldr	r3, [r0, #0]
   b4c30:	691b      	ldr	r3, [r3, #16]
   b4c32:	4798      	blx	r3
   b4c34:	b138      	cbz	r0, b4c46 <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b4c36:	f00b fe09 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c3a:	6803      	ldr	r3, [r0, #0]
   b4c3c:	695b      	ldr	r3, [r3, #20]
   b4c3e:	4798      	blx	r3
   b4c40:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4c44:	e7f1      	b.n	b4c2a <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b4c46:	4630      	mov	r0, r6
   b4c48:	f00c fc28 	bl	c149c <atof>
   b4c4c:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b4c50:	f00b fdfc 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c54:	2301      	movs	r3, #1
   b4c56:	2214      	movs	r2, #20
   b4c58:	2166      	movs	r1, #102	; 0x66
   b4c5a:	f00b fa8a 	bl	c0172 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4c5e:	f00b fdf5 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c62:	6803      	ldr	r3, [r0, #0]
   b4c64:	695b      	ldr	r3, [r3, #20]
   b4c66:	4798      	blx	r3
        c = 0;
   b4c68:	af25      	add	r7, sp, #148	; 0x94
   b4c6a:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b4c6c:	f00b fdee 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c70:	6803      	ldr	r3, [r0, #0]
   b4c72:	691b      	ldr	r3, [r3, #16]
   b4c74:	4798      	blx	r3
   b4c76:	4604      	mov	r4, r0
   b4c78:	b138      	cbz	r0, b4c8a <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b4c7a:	f00b fde7 	bl	c084c <_Z19__fetch_global_Wirev>
   b4c7e:	6803      	ldr	r3, [r0, #0]
   b4c80:	695b      	ldr	r3, [r3, #20]
   b4c82:	4798      	blx	r3
   b4c84:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b4c88:	e7f0      	b.n	b4c6c <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b4c8a:	4630      	mov	r0, r6
   b4c8c:	f00c fc06 	bl	c149c <atof>
        if(logSensors){
   b4c90:	4b68      	ldr	r3, [pc, #416]	; (b4e34 <_Z13sensorHandlerv+0x2d4>)
        dataWait = false;
   b4c92:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b4c96:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b4c98:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b4c9c:	2b00      	cmp	r3, #0
   b4c9e:	d072      	beq.n	b4d86 <_Z13sensorHandlerv+0x226>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b4ca0:	f00a fce0 	bl	bf664 <_ZN9TimeClass5monthEv>
   b4ca4:	9011      	str	r0, [sp, #68]	; 0x44
   b4ca6:	f00a fcd1 	bl	bf64c <_ZN9TimeClass3dayEv>
   b4caa:	4604      	mov	r4, r0
   b4cac:	f00a fce2 	bl	bf674 <_ZN9TimeClass4yearEv>
   b4cb0:	4683      	mov	fp, r0
   b4cb2:	f00a fca7 	bl	bf604 <_ZN9TimeClass4hourEv>
   b4cb6:	9010      	str	r0, [sp, #64]	; 0x40
   b4cb8:	f00a fcb0 	bl	bf61c <_ZN9TimeClass6minuteEv>
   b4cbc:	900f      	str	r0, [sp, #60]	; 0x3c
   b4cbe:	f00a fcb9 	bl	bf634 <_ZN9TimeClass6secondEv>
   b4cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4cc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b4cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b4cc8:	9004      	str	r0, [sp, #16]
   b4cca:	e9cd b201 	strd	fp, r2, [sp, #4]
   b4cce:	9103      	str	r1, [sp, #12]
   b4cd0:	4a59      	ldr	r2, [pc, #356]	; (b4e38 <_Z13sensorHandlerv+0x2d8>)
   b4cd2:	9400      	str	r4, [sp, #0]
   b4cd4:	2110      	movs	r1, #16
   b4cd6:	a812      	add	r0, sp, #72	; 0x48
   b4cd8:	f007 ff08 	bl	bcaec <snprintf>
   b4cdc:	4857      	ldr	r0, [pc, #348]	; (b4e3c <_Z13sensorHandlerv+0x2dc>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b4cde:	7c03      	ldrb	r3, [r0, #16]
   b4ce0:	b92b      	cbnz	r3, b4cee <_Z13sensorHandlerv+0x18e>
   b4ce2:	4957      	ldr	r1, [pc, #348]	; (b4e40 <_Z13sensorHandlerv+0x2e0>)
   b4ce4:	f244 2202 	movw	r2, #16898	; 0x4202
   b4ce8:	3010      	adds	r0, #16
   b4cea:	f7ff fc1b 	bl	b4524 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b4cee:	4649      	mov	r1, r9
   b4cf0:	4640      	mov	r0, r8
   b4cf2:	f00c fb5f 	bl	c13b4 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4cf6:	f00c f84b 	bl	c0d90 <__aeabi_f2d>
   b4cfa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b4cfe:	4b51      	ldr	r3, [pc, #324]	; (b4e44 <_Z13sensorHandlerv+0x2e4>)
   b4d00:	6818      	ldr	r0, [r3, #0]
   b4d02:	f00c f845 	bl	c0d90 <__aeabi_f2d>
   b4d06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b4d0a:	4b4f      	ldr	r3, [pc, #316]	; (b4e48 <_Z13sensorHandlerv+0x2e8>)
   b4d0c:	6818      	ldr	r0, [r3, #0]
   b4d0e:	f00c f83f 	bl	c0d90 <__aeabi_f2d>
   b4d12:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4d16:	f8da 0000 	ldr.w	r0, [sl]
   b4d1a:	f00c f839 	bl	c0d90 <__aeabi_f2d>
   b4d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b4d22:	4639      	mov	r1, r7
   b4d24:	4630      	mov	r0, r6
   b4d26:	f00c fb45 	bl	c13b4 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4d2a:	f00c f831 	bl	c0d90 <__aeabi_f2d>
   b4d2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4d32:	4b46      	ldr	r3, [pc, #280]	; (b4e4c <_Z13sensorHandlerv+0x2ec>)
   b4d34:	6818      	ldr	r0, [r3, #0]
   b4d36:	ee07 0a90 	vmov	s15, r0
   b4d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d3e:	ee17 0a90 	vmov	r0, s15
   b4d42:	f00c f825 	bl	c0d90 <__aeabi_f2d>
   b4d46:	a338      	add	r3, pc, #224	; (adr r3, b4e28 <_Z13sensorHandlerv+0x2c8>)
   b4d48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d4c:	f00c f9a2 	bl	c1094 <__aeabi_ddiv>
   b4d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4d54:	4b3e      	ldr	r3, [pc, #248]	; (b4e50 <_Z13sensorHandlerv+0x2f0>)
   b4d56:	6818      	ldr	r0, [r3, #0]
   b4d58:	ee07 0a90 	vmov	s15, r0
   b4d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d60:	ee17 0a90 	vmov	r0, s15
   b4d64:	f00c f814 	bl	c0d90 <__aeabi_f2d>
   b4d68:	a32f      	add	r3, pc, #188	; (adr r3, b4e28 <_Z13sensorHandlerv+0x2c8>)
   b4d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d6e:	f00c f991 	bl	c1094 <__aeabi_ddiv>
   b4d72:	aa12      	add	r2, sp, #72	; 0x48
   b4d74:	e9cd 0100 	strd	r0, r1, [sp]
   b4d78:	4936      	ldr	r1, [pc, #216]	; (b4e54 <_Z13sensorHandlerv+0x2f4>)
   b4d7a:	4830      	ldr	r0, [pc, #192]	; (b4e3c <_Z13sensorHandlerv+0x2dc>)
   b4d7c:	f7ff faec 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b4d80:	4835      	ldr	r0, [pc, #212]	; (b4e58 <_Z13sensorHandlerv+0x2f8>)
   b4d82:	f001 fdbb 	bl	b68fc <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b4d86:	4c35      	ldr	r4, [pc, #212]	; (b4e5c <_Z13sensorHandlerv+0x2fc>)
   b4d88:	f007 fb28 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   b4d8c:	6823      	ldr	r3, [r4, #0]
   b4d8e:	4283      	cmp	r3, r0
   b4d90:	d244      	bcs.n	b4e1c <_Z13sensorHandlerv+0x2bc>
   b4d92:	f007 fb23 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b4d96:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b4d9a:	6020      	str	r0, [r4, #0]
   b4d9c:	f007 fb1e 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b4da0:	f200 3039 	addw	r0, r0, #825	; 0x339
   b4da4:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b4da6:	f00b fd51 	bl	c084c <_Z19__fetch_global_Wirev>
   b4daa:	2163      	movs	r1, #99	; 0x63
   b4dac:	f00b f9fa 	bl	c01a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4db0:	f00b fd4c 	bl	c084c <_Z19__fetch_global_Wirev>
   b4db4:	2172      	movs	r1, #114	; 0x72
   b4db6:	f7ff fa3f 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4dba:	f00b fd47 	bl	c084c <_Z19__fetch_global_Wirev>
   b4dbe:	f00b f9f8 	bl	c01b2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b4dc2:	f00b fd43 	bl	c084c <_Z19__fetch_global_Wirev>
   b4dc6:	2164      	movs	r1, #100	; 0x64
   b4dc8:	f00b f9ec 	bl	c01a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4dcc:	f00b fd3e 	bl	c084c <_Z19__fetch_global_Wirev>
   b4dd0:	2172      	movs	r1, #114	; 0x72
   b4dd2:	f7ff fa31 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4dd6:	f00b fd39 	bl	c084c <_Z19__fetch_global_Wirev>
   b4dda:	f00b f9ea 	bl	c01b2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b4dde:	f00b fd35 	bl	c084c <_Z19__fetch_global_Wirev>
   b4de2:	2165      	movs	r1, #101	; 0x65
   b4de4:	f00b f9de 	bl	c01a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4de8:	f00b fd30 	bl	c084c <_Z19__fetch_global_Wirev>
   b4dec:	2172      	movs	r1, #114	; 0x72
   b4dee:	f7ff fa23 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4df2:	f00b fd2b 	bl	c084c <_Z19__fetch_global_Wirev>
   b4df6:	f00b f9dc 	bl	c01b2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b4dfa:	f00b fd27 	bl	c084c <_Z19__fetch_global_Wirev>
   b4dfe:	2166      	movs	r1, #102	; 0x66
   b4e00:	f00b f9d0 	bl	c01a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4e04:	f00b fd22 	bl	c084c <_Z19__fetch_global_Wirev>
   b4e08:	2172      	movs	r1, #114	; 0x72
   b4e0a:	f7ff fa15 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4e0e:	f00b fd1d 	bl	c084c <_Z19__fetch_global_Wirev>
   b4e12:	f00b f9ce 	bl	c01b2 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b4e16:	4b12      	ldr	r3, [pc, #72]	; (b4e60 <_Z13sensorHandlerv+0x300>)
   b4e18:	2201      	movs	r2, #1
   b4e1a:	701a      	strb	r2, [r3, #0]
}
   b4e1c:	b02b      	add	sp, #172	; 0xac
   b4e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e22:	bf00      	nop
   b4e24:	f3af 8000 	nop.w
   b4e28:	00000000 	.word	0x00000000
   b4e2c:	412e8480 	.word	0x412e8480
   b4e30:	2003de30 	.word	0x2003de30
   b4e34:	2003df29 	.word	0x2003df29
   b4e38:	000c38e9 	.word	0x000c38e9
   b4e3c:	2003df38 	.word	0x2003df38
   b4e40:	2003de35 	.word	0x2003de35
   b4e44:	2003e584 	.word	0x2003e584
   b4e48:	2003e580 	.word	0x2003e580
   b4e4c:	2003df30 	.word	0x2003df30
   b4e50:	2003de7c 	.word	0x2003de7c
   b4e54:	000c3902 	.word	0x000c3902
   b4e58:	2003df48 	.word	0x2003df48
   b4e5c:	2003e58c 	.word	0x2003e58c
   b4e60:	2003de34 	.word	0x2003de34
   b4e64:	2003e588 	.word	0x2003e588

000b4e68 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4e6c:	4e3c      	ldr	r6, [pc, #240]	; (b4f60 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4e6e:	f8df 8104 	ldr.w	r8, [pc, #260]	; b4f74 <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b4e72:	f8df 9104 	ldr.w	r9, [pc, #260]	; b4f78 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b4e76:	b089      	sub	sp, #36	; 0x24
   b4e78:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4e7a:	f00b fcab 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   b4e7e:	6803      	ldr	r3, [r0, #0]
   b4e80:	691b      	ldr	r3, [r3, #16]
   b4e82:	4798      	blx	r3
   b4e84:	2800      	cmp	r0, #0
   b4e86:	d066      	beq.n	b4f56 <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b4e88:	f00b fca4 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   b4e8c:	220a      	movs	r2, #10
   b4e8e:	4601      	mov	r1, r0
   b4e90:	4638      	mov	r0, r7
   b4e92:	f009 fbaf 	bl	be5f4 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4e96:	68bb      	ldr	r3, [r7, #8]
   b4e98:	3307      	adds	r3, #7
   b4e9a:	f023 0307 	bic.w	r3, r3, #7
    }
   b4e9e:	466d      	mov	r5, sp
        char buffer[data.length()];
   b4ea0:	ebad 0d03 	sub.w	sp, sp, r3
   b4ea4:	46ea      	mov	sl, sp
   b4ea6:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4ea8:	68b9      	ldr	r1, [r7, #8]
   b4eaa:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4eae:	458b      	cmp	fp, r1
   b4eb0:	f103 0401 	add.w	r4, r3, #1
   b4eb4:	d207      	bcs.n	b4ec6 <_Z11XBeeHandlerv+0x5e>
   b4eb6:	4659      	mov	r1, fp
   b4eb8:	4638      	mov	r0, r7
   b4eba:	f008 f935 	bl	bd128 <_ZNK6String6charAtEj>
   b4ebe:	4623      	mov	r3, r4
   b4ec0:	f80a 000b 	strb.w	r0, [sl, fp]
   b4ec4:	e7f0      	b.n	b4ea8 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4ec6:	2901      	cmp	r1, #1
   b4ec8:	d90a      	bls.n	b4ee0 <_Z11XBeeHandlerv+0x78>
   b4eca:	3901      	subs	r1, #1
   b4ecc:	4638      	mov	r0, r7
   b4ece:	f008 f92b 	bl	bd128 <_ZNK6String6charAtEj>
   b4ed2:	280d      	cmp	r0, #13
   b4ed4:	bf01      	itttt	eq
   b4ed6:	68bb      	ldreq	r3, [r7, #8]
   b4ed8:	4453      	addeq	r3, sl
   b4eda:	2200      	moveq	r2, #0
   b4edc:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4ee0:	2201      	movs	r2, #1
   b4ee2:	2102      	movs	r1, #2
   b4ee4:	4650      	mov	r0, sl
   b4ee6:	f7ff fbcf 	bl	b4688 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4eea:	f00a fffd 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4eee:	4631      	mov	r1, r6
   b4ef0:	f009 faf7 	bl	be4e2 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4ef4:	f00a fff8 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4ef8:	6839      	ldr	r1, [r7, #0]
   b4efa:	f009 faf2 	bl	be4e2 <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4efe:	f89a 3000 	ldrb.w	r3, [sl]
   b4f02:	3b42      	subs	r3, #66	; 0x42
   b4f04:	2b01      	cmp	r3, #1
   b4f06:	d803      	bhi.n	b4f10 <_Z11XBeeHandlerv+0xa8>
   b4f08:	f007 fa68 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   b4f0c:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b4f10:	f899 3000 	ldrb.w	r3, [r9]
   b4f14:	b1d3      	cbz	r3, b4f4c <_Z11XBeeHandlerv+0xe4>
   b4f16:	4813      	ldr	r0, [pc, #76]	; (b4f64 <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4f18:	7c03      	ldrb	r3, [r0, #16]
   b4f1a:	b92b      	cbnz	r3, b4f28 <_Z11XBeeHandlerv+0xc0>
   b4f1c:	4912      	ldr	r1, [pc, #72]	; (b4f68 <_Z11XBeeHandlerv+0x100>)
   b4f1e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4f22:	3010      	adds	r0, #16
   b4f24:	f7ff fafe 	bl	b4524 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4f28:	4639      	mov	r1, r7
   b4f2a:	f107 0010 	add.w	r0, r7, #16
   b4f2e:	f008 f8b1 	bl	bd094 <_ZN6StringC1ERKS_>
   b4f32:	490e      	ldr	r1, [pc, #56]	; (b4f6c <_Z11XBeeHandlerv+0x104>)
   b4f34:	480b      	ldr	r0, [pc, #44]	; (b4f64 <_Z11XBeeHandlerv+0xfc>)
   b4f36:	f107 0210 	add.w	r2, r7, #16
   b4f3a:	f7ff fa0d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4f3e:	f107 0010 	add.w	r0, r7, #16
   b4f42:	f008 f811 	bl	bcf68 <_ZN6StringD1Ev>
            logFile.close();
   b4f46:	480a      	ldr	r0, [pc, #40]	; (b4f70 <_Z11XBeeHandlerv+0x108>)
   b4f48:	f001 fcd8 	bl	b68fc <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4f4c:	4638      	mov	r0, r7
   b4f4e:	f008 f80b 	bl	bcf68 <_ZN6StringD1Ev>
   b4f52:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b4f54:	e791      	b.n	b4e7a <_Z11XBeeHandlerv+0x12>
}
   b4f56:	3724      	adds	r7, #36	; 0x24
   b4f58:	46bd      	mov	sp, r7
   b4f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f5e:	bf00      	nop
   b4f60:	000c391a 	.word	0x000c391a
   b4f64:	2003ded0 	.word	0x2003ded0
   b4f68:	2003de53 	.word	0x2003de53
   b4f6c:	000c392c 	.word	0x000c392c
   b4f70:	2003dee0 	.word	0x2003dee0
   b4f74:	2003de18 	.word	0x2003de18
   b4f78:	2003df28 	.word	0x2003df28

000b4f7c <_Z13dataOffloaderv>:
void dataOffloader(){
   b4f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f80:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b4f82:	f00a ffb1 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4f86:	4961      	ldr	r1, [pc, #388]	; (b510c <_Z13dataOffloaderv+0x190>)
   b4f88:	f009 faab 	bl	be4e2 <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b4f8c:	4960      	ldr	r1, [pc, #384]	; (b5110 <_Z13dataOffloaderv+0x194>)
   b4f8e:	4861      	ldr	r0, [pc, #388]	; (b5114 <_Z13dataOffloaderv+0x198>)
   b4f90:	2200      	movs	r2, #0
   b4f92:	f7ff fac7 	bl	b4524 <_ZN7FatFile4openEPKci>
   b4f96:	b948      	cbnz	r0, b4fac <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b4f98:	4b5f      	ldr	r3, [pc, #380]	; (b5118 <_Z13dataOffloaderv+0x19c>)
   b4f9a:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b4f9c:	f00a ffa4 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4fa0:	495e      	ldr	r1, [pc, #376]	; (b511c <_Z13dataOffloaderv+0x1a0>)
}
   b4fa2:	b02d      	add	sp, #180	; 0xb4
   b4fa4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b4fa8:	f009 ba9b 	b.w	be4e2 <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b4fac:	f00a ff9c 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4fb0:	495b      	ldr	r1, [pc, #364]	; (b5120 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b4fb2:	4d5c      	ldr	r5, [pc, #368]	; (b5124 <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b4fb4:	f009 fa95 	bl	be4e2 <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b4fb8:	f008 fc04 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fbc:	f008 fc60 	bl	bd880 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4fc0:	4604      	mov	r4, r0
   b4fc2:	b948      	cbnz	r0, b4fd8 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b4fc4:	f008 fbfe 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fc8:	4622      	mov	r2, r4
   b4fca:	4629      	mov	r1, r5
   b4fcc:	f008 fcab 	bl	bd926 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b4fd0:	200a      	movs	r0, #10
   b4fd2:	f00a fb71 	bl	bf6b8 <delay>
    while(!BLE.connected()){
   b4fd6:	e7ef      	b.n	b4fb8 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b4fd8:	f00a ff86 	bl	bfee8 <_Z16_fetch_usbserialv>
   b4fdc:	4952      	ldr	r1, [pc, #328]	; (b5128 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b4fde:	4f4d      	ldr	r7, [pc, #308]	; (b5114 <_Z13dataOffloaderv+0x198>)
   b4fe0:	4d52      	ldr	r5, [pc, #328]	; (b512c <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b4fe2:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5150 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b4fe6:	f009 fa7c 	bl	be4e2 <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b4fea:	2200      	movs	r2, #0
   b4fec:	4639      	mov	r1, r7
   b4fee:	4628      	mov	r0, r5
   b4ff0:	f001 fc11 	bl	b6816 <_ZN7FatFile8openNextEPS_i>
   b4ff4:	b1f8      	cbz	r0, b5036 <_Z13dataOffloaderv+0xba>
   b4ff6:	f008 fbe5 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ffa:	f008 fc41 	bl	bd880 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4ffe:	b1d0      	cbz	r0, b5036 <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5000:	221e      	movs	r2, #30
   b5002:	a901      	add	r1, sp, #4
   b5004:	4628      	mov	r0, r5
   b5006:	f000 fe6a 	bl	b5cde <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b500a:	f00a ff6d 	bl	bfee8 <_Z16_fetch_usbserialv>
   b500e:	4641      	mov	r1, r8
   b5010:	aa01      	add	r2, sp, #4
   b5012:	f7ff f9a1 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b5016:	a801      	add	r0, sp, #4
   b5018:	f00c fb13 	bl	c1642 <strlen>
   b501c:	ab01      	add	r3, sp, #4
   b501e:	3804      	subs	r0, #4
   b5020:	4418      	add	r0, r3
   b5022:	f00c fb17 	bl	c1654 <strlwr>
   b5026:	4942      	ldr	r1, [pc, #264]	; (b5130 <_Z13dataOffloaderv+0x1b4>)
   b5028:	f00c fb5a 	bl	c16e0 <strstr>
   b502c:	b9d8      	cbnz	r0, b5066 <_Z13dataOffloaderv+0xea>
            myFile.close();
   b502e:	4628      	mov	r0, r5
   b5030:	f001 fc64 	bl	b68fc <_ZN7FatFile5closeEv>
   b5034:	e7d9      	b.n	b4fea <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b5036:	4837      	ldr	r0, [pc, #220]	; (b5114 <_Z13dataOffloaderv+0x198>)
   b5038:	f001 fc60 	bl	b68fc <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b503c:	2226      	movs	r2, #38	; 0x26
   b503e:	2100      	movs	r1, #0
   b5040:	a809      	add	r0, sp, #36	; 0x24
   b5042:	f00c fa73 	bl	c152c <memset>
    strcpy(fileCode,"filedone");
   b5046:	493b      	ldr	r1, [pc, #236]	; (b5134 <_Z13dataOffloaderv+0x1b8>)
   b5048:	a809      	add	r0, sp, #36	; 0x24
   b504a:	f00c fad5 	bl	c15f8 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b504e:	2300      	movs	r3, #0
   b5050:	2226      	movs	r2, #38	; 0x26
   b5052:	a909      	add	r1, sp, #36	; 0x24
   b5054:	4838      	ldr	r0, [pc, #224]	; (b5138 <_Z13dataOffloaderv+0x1bc>)
   b5056:	f008 faa5 	bl	bd5a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b505a:	4b2f      	ldr	r3, [pc, #188]	; (b5118 <_Z13dataOffloaderv+0x19c>)
   b505c:	2200      	movs	r2, #0
   b505e:	701a      	strb	r2, [r3, #0]
}
   b5060:	b02d      	add	sp, #180	; 0xb4
   b5062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5066:	2226      	movs	r2, #38	; 0x26
   b5068:	2100      	movs	r1, #0
   b506a:	a809      	add	r0, sp, #36	; 0x24
   b506c:	f00c fa5e 	bl	c152c <memset>
            strcpy(fileCode,"filename");
   b5070:	4932      	ldr	r1, [pc, #200]	; (b513c <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b5072:	4e33      	ldr	r6, [pc, #204]	; (b5140 <_Z13dataOffloaderv+0x1c4>)
   b5074:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5138 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b5078:	a809      	add	r0, sp, #36	; 0x24
   b507a:	f00c fabd 	bl	c15f8 <strcpy>
            strcat(fileCode,namebuf);
   b507e:	a901      	add	r1, sp, #4
   b5080:	a809      	add	r0, sp, #36	; 0x24
   b5082:	f00c fa89 	bl	c1598 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b5086:	f00a ff2f 	bl	bfee8 <_Z16_fetch_usbserialv>
   b508a:	492e      	ldr	r1, [pc, #184]	; (b5144 <_Z13dataOffloaderv+0x1c8>)
   b508c:	aa09      	add	r2, sp, #36	; 0x24
   b508e:	f7ff f963 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b5092:	2300      	movs	r3, #0
   b5094:	2226      	movs	r2, #38	; 0x26
   b5096:	a909      	add	r1, sp, #36	; 0x24
   b5098:	4827      	ldr	r0, [pc, #156]	; (b5138 <_Z13dataOffloaderv+0x1bc>)
   b509a:	f008 fa83 	bl	bd5a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b509e:	f00a ff23 	bl	bfee8 <_Z16_fetch_usbserialv>
   b50a2:	4929      	ldr	r1, [pc, #164]	; (b5148 <_Z13dataOffloaderv+0x1cc>)
   b50a4:	aa01      	add	r2, sp, #4
   b50a6:	f7ff f957 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b50aa:	2096      	movs	r0, #150	; 0x96
   b50ac:	f00a fb04 	bl	bf6b8 <delay>
            noInterrupts();
   b50b0:	f00a ff40 	bl	bff34 <_Z12noInterruptsv>
            while(myFile.available()){
   b50b4:	4630      	mov	r0, r6
   b50b6:	f7ff f812 	bl	b40de <_ZN4File9availableEv>
   b50ba:	4604      	mov	r4, r0
   b50bc:	b188      	cbz	r0, b50e2 <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b50be:	2264      	movs	r2, #100	; 0x64
   b50c0:	2100      	movs	r1, #0
   b50c2:	a813      	add	r0, sp, #76	; 0x4c
   b50c4:	f00c fa32 	bl	c152c <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b50c8:	aa13      	add	r2, sp, #76	; 0x4c
   b50ca:	2364      	movs	r3, #100	; 0x64
   b50cc:	210d      	movs	r1, #13
   b50ce:	4630      	mov	r0, r6
   b50d0:	f009 fa77 	bl	be5c2 <_ZN6Stream14readBytesUntilEcPcj>
   b50d4:	2300      	movs	r3, #0
   b50d6:	2264      	movs	r2, #100	; 0x64
   b50d8:	a913      	add	r1, sp, #76	; 0x4c
   b50da:	4648      	mov	r0, r9
   b50dc:	f008 fa62 	bl	bd5a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b50e0:	e7e8      	b.n	b50b4 <_Z13dataOffloaderv+0x138>
            interrupts();
   b50e2:	f00a ff29 	bl	bff38 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b50e6:	2226      	movs	r2, #38	; 0x26
   b50e8:	4621      	mov	r1, r4
   b50ea:	a809      	add	r0, sp, #36	; 0x24
   b50ec:	f00c fa1e 	bl	c152c <memset>
            strcpy(fileCode,"filecomp");
   b50f0:	4916      	ldr	r1, [pc, #88]	; (b514c <_Z13dataOffloaderv+0x1d0>)
   b50f2:	a809      	add	r0, sp, #36	; 0x24
   b50f4:	f00c fa80 	bl	c15f8 <strcpy>
   b50f8:	4623      	mov	r3, r4
   b50fa:	2226      	movs	r2, #38	; 0x26
   b50fc:	a909      	add	r1, sp, #36	; 0x24
   b50fe:	480e      	ldr	r0, [pc, #56]	; (b5138 <_Z13dataOffloaderv+0x1bc>)
   b5100:	f008 fa50 	bl	bd5a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b5104:	2096      	movs	r0, #150	; 0x96
   b5106:	f00a fad7 	bl	bf6b8 <delay>
   b510a:	e790      	b.n	b502e <_Z13dataOffloaderv+0xb2>
   b510c:	000c394d 	.word	0x000c394d
   b5110:	000c396a 	.word	0x000c396a
   b5114:	2003deac 	.word	0x2003deac
   b5118:	2003e0ec 	.word	0x2003e0ec
   b511c:	000c396c 	.word	0x000c396c
   b5120:	000c3999 	.word	0x000c3999
   b5124:	2003de20 	.word	0x2003de20
   b5128:	000c39b9 	.word	0x000c39b9
   b512c:	2003df48 	.word	0x2003df48
   b5130:	000c39f7 	.word	0x000c39f7
   b5134:	000c39fc 	.word	0x000c39fc
   b5138:	2003e0e4 	.word	0x2003e0e4
   b513c:	000c3a05 	.word	0x000c3a05
   b5140:	2003df38 	.word	0x2003df38
   b5144:	000c3a0e 	.word	0x000c3a0e
   b5148:	000c3a21 	.word	0x000c3a21
   b514c:	000c3a49 	.word	0x000c3a49
   b5150:	000c39ce 	.word	0x000c39ce

000b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5154:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5156:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5158:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b515a:	b17c      	cbz	r4, b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b515c:	6863      	ldr	r3, [r4, #4]
   b515e:	3b01      	subs	r3, #1
   b5160:	6063      	str	r3, [r4, #4]
   b5162:	b95b      	cbnz	r3, b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5164:	6823      	ldr	r3, [r4, #0]
   b5166:	4620      	mov	r0, r4
   b5168:	689b      	ldr	r3, [r3, #8]
   b516a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b516c:	68a3      	ldr	r3, [r4, #8]
   b516e:	3b01      	subs	r3, #1
   b5170:	60a3      	str	r3, [r4, #8]
   b5172:	b91b      	cbnz	r3, b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5174:	6823      	ldr	r3, [r4, #0]
   b5176:	4620      	mov	r0, r4
   b5178:	68db      	ldr	r3, [r3, #12]
   b517a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b517c:	4628      	mov	r0, r5
   b517e:	bd38      	pop	{r3, r4, r5, pc}

000b5180 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5184:	b084      	sub	sp, #16
   b5186:	af02      	add	r7, sp, #8
   b5188:	4680      	mov	r8, r0
   b518a:	4691      	mov	r9, r2
   b518c:	461e      	mov	r6, r3
   b518e:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5190:	f00c fa57 	bl	c1642 <strlen>
   b5194:	3009      	adds	r0, #9
   b5196:	f020 0107 	bic.w	r1, r0, #7
   b519a:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b519e:	4640      	mov	r0, r8
   b51a0:	f00c fa4f 	bl	c1642 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b51a4:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b51a8:	4925      	ldr	r1, [pc, #148]	; (b5240 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b51aa:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b51ac:	4603      	mov	r3, r0
   b51ae:	4642      	mov	r2, r8
   b51b0:	4620      	mov	r0, r4
   b51b2:	f007 fc93 	bl	bcadc <sprintf>
    if(sendLTE || sendMode == 4){
   b51b6:	f1ba 0f00 	cmp.w	sl, #0
   b51ba:	d101      	bne.n	b51c0 <_Z8sendDataPKchbbb+0x40>
   b51bc:	2d04      	cmp	r5, #4
   b51be:	d10c      	bne.n	b51da <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b51c0:	4b20      	ldr	r3, [pc, #128]	; (b5244 <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b51c2:	4921      	ldr	r1, [pc, #132]	; (b5248 <_Z8sendDataPKchbbb+0xc8>)
   b51c4:	781b      	ldrb	r3, [r3, #0]
   b51c6:	f88d 3000 	strb.w	r3, [sp]
   b51ca:	4638      	mov	r0, r7
   b51cc:	233c      	movs	r3, #60	; 0x3c
   b51ce:	4622      	mov	r2, r4
   b51d0:	f00a fc44 	bl	bfa5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b51d4:	1d38      	adds	r0, r7, #4
   b51d6:	f7ff ffbd 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b51da:	f1b9 0f00 	cmp.w	r9, #0
   b51de:	d101      	bne.n	b51e4 <_Z8sendDataPKchbbb+0x64>
   b51e0:	2d01      	cmp	r5, #1
   b51e2:	d121      	bne.n	b5228 <_Z8sendDataPKchbbb+0xa8>
   b51e4:	f008 faee 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b51e8:	f008 fb4a 	bl	bd880 <_ZNK8particle14BleLocalDevice9connectedEv>
   b51ec:	b1e0      	cbz	r0, b5228 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b51ee:	4620      	mov	r0, r4
   b51f0:	f00c fa27 	bl	c1642 <strlen>
   b51f4:	3007      	adds	r0, #7
   b51f6:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b51fa:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b51fc:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5200:	4620      	mov	r0, r4
   b5202:	f00c fa1e 	bl	c1642 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5206:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b520a:	4602      	mov	r2, r0
   b520c:	4621      	mov	r1, r4
   b520e:	4648      	mov	r0, r9
   b5210:	f00c f964 	bl	c14dc <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5214:	4620      	mov	r0, r4
   b5216:	f00c fa14 	bl	c1642 <strlen>
   b521a:	2300      	movs	r3, #0
   b521c:	4602      	mov	r2, r0
   b521e:	4649      	mov	r1, r9
   b5220:	480a      	ldr	r0, [pc, #40]	; (b524c <_Z8sendDataPKchbbb+0xcc>)
   b5222:	f008 f9bf 	bl	bd5a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5226:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5228:	b90e      	cbnz	r6, b522e <_Z8sendDataPKchbbb+0xae>
   b522a:	2d02      	cmp	r5, #2
   b522c:	d104      	bne.n	b5238 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b522e:	f00b fad1 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   b5232:	4621      	mov	r1, r4
   b5234:	f009 f955 	bl	be4e2 <_ZN5Print7printlnEPKc>
}
   b5238:	3708      	adds	r7, #8
   b523a:	46bd      	mov	sp, r7
   b523c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5240:	000c3a52 	.word	0x000c3a52
   b5244:	2003de1c 	.word	0x2003de1c
   b5248:	000c3a59 	.word	0x000c3a59
   b524c:	2003e5d8 	.word	0x2003e5d8

000b5250 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5250:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b5252:	4d27      	ldr	r5, [pc, #156]	; (b52f0 <_Z16sendResponseDatav+0xa0>)
   b5254:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5256:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5258:	2b00      	cmp	r3, #0
   b525a:	d046      	beq.n	b52ea <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b525c:	2241      	movs	r2, #65	; 0x41
   b525e:	2100      	movs	r1, #0
   b5260:	a80b      	add	r0, sp, #44	; 0x2c
   b5262:	f00c f963 	bl	c152c <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b5266:	4b23      	ldr	r3, [pc, #140]	; (b52f4 <_Z16sendResponseDatav+0xa4>)
   b5268:	9308      	str	r3, [sp, #32]
   b526a:	4b23      	ldr	r3, [pc, #140]	; (b52f8 <_Z16sendResponseDatav+0xa8>)
   b526c:	eddf 6a23 	vldr	s13, [pc, #140]	; b52fc <_Z16sendResponseDatav+0xac>
   b5270:	ed93 7a00 	vldr	s14, [r3]
   b5274:	4b22      	ldr	r3, [pc, #136]	; (b5300 <_Z16sendResponseDatav+0xb0>)
   b5276:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b527a:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b527c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5280:	ed8d 7a07 	vstr	s14, [sp, #28]
   b5284:	ed93 7a00 	vldr	s14, [r3]
   b5288:	4b1e      	ldr	r3, [pc, #120]	; (b5304 <_Z16sendResponseDatav+0xb4>)
   b528a:	ee27 7a26 	vmul.f32	s14, s14, s13
   b528e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5292:	ed8d 7a06 	vstr	s14, [sp, #24]
   b5296:	ed93 7a00 	vldr	s14, [r3]
   b529a:	4b1b      	ldr	r3, [pc, #108]	; (b5308 <_Z16sendResponseDatav+0xb8>)
   b529c:	ee27 7a26 	vmul.f32	s14, s14, s13
   b52a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b52a4:	ed8d 7a05 	vstr	s14, [sp, #20]
   b52a8:	edd3 7a00 	vldr	s15, [r3]
   b52ac:	4b17      	ldr	r3, [pc, #92]	; (b530c <_Z16sendResponseDatav+0xbc>)
   b52ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b52b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b52b6:	edcd 7a04 	vstr	s15, [sp, #16]
   b52ba:	6818      	ldr	r0, [r3, #0]
   b52bc:	f00b fd68 	bl	c0d90 <__aeabi_f2d>
   b52c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b52c4:	4b12      	ldr	r3, [pc, #72]	; (b5310 <_Z16sendResponseDatav+0xc0>)
   b52c6:	6818      	ldr	r0, [r3, #0]
   b52c8:	f00b fd62 	bl	c0d90 <__aeabi_f2d>
   b52cc:	2201      	movs	r2, #1
   b52ce:	e9cd 0100 	strd	r0, r1, [sp]
   b52d2:	4910      	ldr	r1, [pc, #64]	; (b5314 <_Z16sendResponseDatav+0xc4>)
   b52d4:	a80b      	add	r0, sp, #44	; 0x2c
   b52d6:	f007 fc01 	bl	bcadc <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b52da:	7829      	ldrb	r1, [r5, #0]
   b52dc:	9400      	str	r4, [sp, #0]
   b52de:	4623      	mov	r3, r4
   b52e0:	4622      	mov	r2, r4
   b52e2:	a80b      	add	r0, sp, #44	; 0x2c
   b52e4:	f7ff ff4c 	bl	b5180 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b52e8:	702c      	strb	r4, [r5, #0]
}
   b52ea:	b01d      	add	sp, #116	; 0x74
   b52ec:	bd30      	pop	{r4, r5, pc}
   b52ee:	bf00      	nop
   b52f0:	2003e0ed 	.word	0x2003e0ed
   b52f4:	00010d88 	.word	0x00010d88
   b52f8:	2003e584 	.word	0x2003e584
   b52fc:	447a0000 	.word	0x447a0000
   b5300:	2003e57c 	.word	0x2003e57c
   b5304:	2003e588 	.word	0x2003e588
   b5308:	2003e580 	.word	0x2003e580
   b530c:	2003df2c 	.word	0x2003df2c
   b5310:	2003de78 	.word	0x2003de78
   b5314:	000c3a61 	.word	0x000c3a61

000b5318 <_Z12statusUpdatev>:
void statusUpdate(){
   b5318:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b531a:	4e2c      	ldr	r6, [pc, #176]	; (b53cc <_Z12statusUpdatev+0xb4>)
   b531c:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b531e:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5320:	2b00      	cmp	r3, #0
   b5322:	d049      	beq.n	b53b8 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5324:	4a2a      	ldr	r2, [pc, #168]	; (b53d0 <_Z12statusUpdatev+0xb8>)
   b5326:	4b2b      	ldr	r3, [pc, #172]	; (b53d4 <_Z12statusUpdatev+0xbc>)
   b5328:	6810      	ldr	r0, [r2, #0]
   b532a:	781b      	ldrb	r3, [r3, #0]
   b532c:	9307      	str	r3, [sp, #28]
   b532e:	f00b fd2f 	bl	c0d90 <__aeabi_f2d>
   b5332:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5336:	4a28      	ldr	r2, [pc, #160]	; (b53d8 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b5338:	4c28      	ldr	r4, [pc, #160]	; (b53dc <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b533a:	6810      	ldr	r0, [r2, #0]
   b533c:	f00b fd28 	bl	c0d90 <__aeabi_f2d>
   b5340:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5344:	4a26      	ldr	r2, [pc, #152]	; (b53e0 <_Z12statusUpdatev+0xc8>)
   b5346:	9b07      	ldr	r3, [sp, #28]
   b5348:	7812      	ldrb	r2, [r2, #0]
   b534a:	4926      	ldr	r1, [pc, #152]	; (b53e4 <_Z12statusUpdatev+0xcc>)
   b534c:	9200      	str	r2, [sp, #0]
   b534e:	a809      	add	r0, sp, #36	; 0x24
   b5350:	2201      	movs	r2, #1
   b5352:	f007 fbc3 	bl	bcadc <sprintf>
        Serial.println(updateStr);
   b5356:	f00a fdc7 	bl	bfee8 <_Z16_fetch_usbserialv>
   b535a:	a909      	add	r1, sp, #36	; 0x24
   b535c:	f009 f8c1 	bl	be4e2 <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5360:	f00a fdc2 	bl	bfee8 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5364:	8821      	ldrh	r1, [r4, #0]
   b5366:	4605      	mov	r5, r0
   b5368:	220a      	movs	r2, #10
   b536a:	f009 f8c6 	bl	be4fa <_ZN5Print11printNumberEmh>
        n += println();
   b536e:	4628      	mov	r0, r5
   b5370:	f009 f8ab 	bl	be4ca <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b5374:	4b1c      	ldr	r3, [pc, #112]	; (b53e8 <_Z12statusUpdatev+0xd0>)
   b5376:	781b      	ldrb	r3, [r3, #0]
   b5378:	bb03      	cbnz	r3, b53bc <_Z12statusUpdatev+0xa4>
   b537a:	4b1c      	ldr	r3, [pc, #112]	; (b53ec <_Z12statusUpdatev+0xd4>)
   b537c:	781b      	ldrb	r3, [r3, #0]
   b537e:	b9eb      	cbnz	r3, b53bc <_Z12statusUpdatev+0xa4>
   b5380:	8823      	ldrh	r3, [r4, #0]
   b5382:	b1f3      	cbz	r3, b53c2 <_Z12statusUpdatev+0xaa>
   b5384:	f013 0303 	ands.w	r3, r3, #3
   b5388:	d11b      	bne.n	b53c2 <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b538a:	2201      	movs	r2, #1
   b538c:	9200      	str	r2, [sp, #0]
   b538e:	4619      	mov	r1, r3
   b5390:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5392:	a809      	add	r0, sp, #36	; 0x24
   b5394:	f7ff fef4 	bl	b5180 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5398:	8823      	ldrh	r3, [r4, #0]
   b539a:	b10b      	cbz	r3, b53a0 <_Z12statusUpdatev+0x88>
   b539c:	3b01      	subs	r3, #1
   b539e:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b53a0:	2400      	movs	r4, #0
        delay(100);
   b53a2:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b53a4:	7034      	strb	r4, [r6, #0]
        delay(100);
   b53a6:	f00a f987 	bl	bf6b8 <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b53aa:	4811      	ldr	r0, [pc, #68]	; (b53f0 <_Z12statusUpdatev+0xd8>)
   b53ac:	9400      	str	r4, [sp, #0]
   b53ae:	4623      	mov	r3, r4
   b53b0:	2201      	movs	r2, #1
   b53b2:	4621      	mov	r1, r4
   b53b4:	f7ff fee4 	bl	b5180 <_Z8sendDataPKchbbb>
}
   b53b8:	b010      	add	sp, #64	; 0x40
   b53ba:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b53bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b53c0:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b53c2:	2100      	movs	r1, #0
   b53c4:	2301      	movs	r3, #1
   b53c6:	9100      	str	r1, [sp, #0]
   b53c8:	461a      	mov	r2, r3
   b53ca:	e7e2      	b.n	b5392 <_Z12statusUpdatev+0x7a>
   b53cc:	2003e5d4 	.word	0x2003e5d4
   b53d0:	2003df2c 	.word	0x2003df2c
   b53d4:	2003de2c 	.word	0x2003de2c
   b53d8:	2003de78 	.word	0x2003de78
   b53dc:	2003de06 	.word	0x2003de06
   b53e0:	2003e5b4 	.word	0x2003e5b4
   b53e4:	000c3a85 	.word	0x000c3a85
   b53e8:	2003ddd4 	.word	0x2003ddd4
   b53ec:	2003de14 	.word	0x2003de14
   b53f0:	000c3a9e 	.word	0x000c3a9e

000b53f4 <loop>:
void loop(){
   b53f4:	b530      	push	{r4, r5, lr}
   b53f6:	ed2d 8b02 	vpush	{d8}
   b53fa:	b08d      	sub	sp, #52	; 0x34
    if(getGPSLatLon()){
   b53fc:	f7ff fb7c 	bl	b4af8 <_Z12getGPSLatLonv>
   b5400:	b370      	cbz	r0, b5460 <loop+0x6c>
        latitude = ((float)latitude_mdeg/10000000.0);
   b5402:	4b30      	ldr	r3, [pc, #192]	; (b54c4 <loop+0xd0>)
   b5404:	eddf 6a30 	vldr	s13, [pc, #192]	; b54c8 <loop+0xd4>
   b5408:	edd3 7a00 	vldr	s15, [r3]
   b540c:	4b2f      	ldr	r3, [pc, #188]	; (b54cc <loop+0xd8>)
   b540e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5412:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   b5416:	ed83 7a00 	vstr	s14, [r3]
        longitude = ((float)longitude_mdeg/10000000.0);
   b541a:	4b2d      	ldr	r3, [pc, #180]	; (b54d0 <loop+0xdc>)
   b541c:	edd3 7a00 	vldr	s15, [r3]
   b5420:	4b2c      	ldr	r3, [pc, #176]	; (b54d4 <loop+0xe0>)
   b5422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
   b5426:	ee17 0a10 	vmov	r0, s14
        longitude = ((float)longitude_mdeg/10000000.0);
   b542a:	ee87 8aa6 	vdiv.f32	s16, s15, s13
   b542e:	ed83 8a00 	vstr	s16, [r3]
        sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
   b5432:	f00b fcad 	bl	c0d90 <__aeabi_f2d>
   b5436:	4602      	mov	r2, r0
   b5438:	460b      	mov	r3, r1
   b543a:	ee18 0a10 	vmov	r0, s16
   b543e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b5442:	f00b fca5 	bl	c0d90 <__aeabi_f2d>
   b5446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b544a:	e9cd 0100 	strd	r0, r1, [sp]
   b544e:	4922      	ldr	r1, [pc, #136]	; (b54d8 <loop+0xe4>)
   b5450:	a804      	add	r0, sp, #16
   b5452:	f007 fb43 	bl	bcadc <sprintf>
        Serial.println(latLonBuf);
   b5456:	f00a fd47 	bl	bfee8 <_Z16_fetch_usbserialv>
   b545a:	a904      	add	r1, sp, #16
   b545c:	f009 f841 	bl	be4e2 <_ZN5Print7printlnEPKc>
    long heading = myGPS.getHeading();
   b5460:	f240 414c 	movw	r1, #1100	; 0x44c
   b5464:	481d      	ldr	r0, [pc, #116]	; (b54dc <loop+0xe8>)
   b5466:	f006 ff3d 	bl	bc2e4 <_ZN14SFE_UBLOX_GNSS10getHeadingEt>
   b546a:	4604      	mov	r4, r0
    Serial.println(heading);
   b546c:	f00a fd3c 	bl	bfee8 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   b5470:	2c00      	cmp	r4, #0
   b5472:	4605      	mov	r5, r0
   b5474:	da24      	bge.n	b54c0 <loop+0xcc>
            t = print('-');
   b5476:	212d      	movs	r1, #45	; 0x2d
   b5478:	f009 f820 	bl	be4bc <_ZN5Print5printEc>
            val = -n;
   b547c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b547e:	220a      	movs	r2, #10
   b5480:	4628      	mov	r0, r5
   b5482:	f009 f83a 	bl	be4fa <_ZN5Print11printNumberEmh>
        n += println();
   b5486:	4628      	mov	r0, r5
   b5488:	f009 f81f 	bl	be4ca <_ZN5Print7printlnEv>
    delay(250);
   b548c:	20fa      	movs	r0, #250	; 0xfa
   b548e:	f00a f913 	bl	bf6b8 <delay>
    sensorHandler();
   b5492:	f7ff fb65 	bl	b4b60 <_Z13sensorHandlerv>
    XBeeHandler();
   b5496:	f7ff fce7 	bl	b4e68 <_Z11XBeeHandlerv>
    statusUpdate();
   b549a:	f7ff ff3d 	bl	b5318 <_Z12statusUpdatev>
    updateMotors();
   b549e:	f7ff fb43 	bl	b4b28 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b54a2:	4b0f      	ldr	r3, [pc, #60]	; (b54e0 <loop+0xec>)
   b54a4:	781b      	ldrb	r3, [r3, #0]
   b54a6:	b10b      	cbz	r3, b54ac <loop+0xb8>
   b54a8:	f7ff fd68 	bl	b4f7c <_Z13dataOffloaderv>
    sendResponseData();
   b54ac:	f7ff fed0 	bl	b5250 <_Z16sendResponseDatav>
    delay(100);
   b54b0:	2064      	movs	r0, #100	; 0x64
}
   b54b2:	b00d      	add	sp, #52	; 0x34
   b54b4:	ecbd 8b02 	vpop	{d8}
   b54b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay(100);
   b54bc:	f00a b8fc 	b.w	bf6b8 <delay>
            val = n;
   b54c0:	4621      	mov	r1, r4
   b54c2:	e7dc      	b.n	b547e <loop+0x8a>
   b54c4:	2003de7c 	.word	0x2003de7c
   b54c8:	4b189680 	.word	0x4b189680
   b54cc:	2003de78 	.word	0x2003de78
   b54d0:	2003df30 	.word	0x2003df30
   b54d4:	2003df2c 	.word	0x2003df2c
   b54d8:	000c3aac 	.word	0x000c3aac
   b54dc:	2003df6c 	.word	0x2003df6c
   b54e0:	2003e0ec 	.word	0x2003e0ec

000b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b54e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b54e6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b54ea:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b54ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b54ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b54f2:	42ae      	cmp	r6, r5
   b54f4:	d004      	beq.n	b5500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b54f6:	4628      	mov	r0, r5
   b54f8:	f007 fd36 	bl	bcf68 <_ZN6StringD1Ev>
   b54fc:	3514      	adds	r5, #20
   b54fe:	e7f8      	b.n	b54f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5500:	6820      	ldr	r0, [r4, #0]
   b5502:	f007 fadb 	bl	bcabc <free>
    AllocatorT::free(data_);
}
   b5506:	4620      	mov	r0, r4
   b5508:	bd70      	pop	{r4, r5, r6, pc}

000b550a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b550a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b550c:	4616      	mov	r6, r2
   b550e:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b5510:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5512:	e9c0 2200 	strd	r2, r2, [r0]
   b5516:	4604      	mov	r4, r0
   b5518:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b551a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b551c:	4619      	mov	r1, r3
   b551e:	a804      	add	r0, sp, #16
   b5520:	f008 f802 	bl	bd528 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b5524:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5526:	4638      	mov	r0, r7
   b5528:	f007 fffe 	bl	bd528 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b552c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b552e:	9302      	str	r3, [sp, #8]
   b5530:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5532:	4620      	mov	r0, r4
   b5534:	e9cd 7300 	strd	r7, r3, [sp]
   b5538:	4632      	mov	r2, r6
   b553a:	ab04      	add	r3, sp, #16
   b553c:	4629      	mov	r1, r5
   b553e:	f008 fd69 	bl	be014 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b5542:	4620      	mov	r0, r4
   b5544:	b00f      	add	sp, #60	; 0x3c
   b5546:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5548 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5548:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b554a:	4c0b      	ldr	r4, [pc, #44]	; (b5578 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b554c:	7821      	ldrb	r1, [r4, #0]
   b554e:	f3bf 8f5b 	dmb	ish
   b5552:	f011 0101 	ands.w	r1, r1, #1
   b5556:	d10b      	bne.n	b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5558:	4620      	mov	r0, r4
   b555a:	9101      	str	r1, [sp, #4]
   b555c:	f7fe fdb0 	bl	b40c0 <__cxa_guard_acquire>
   b5560:	9901      	ldr	r1, [sp, #4]
   b5562:	b128      	cbz	r0, b5570 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5564:	4805      	ldr	r0, [pc, #20]	; (b557c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5566:	f007 fb6d 	bl	bcc44 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b556a:	4620      	mov	r0, r4
   b556c:	f7fe fdad 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b5570:	4802      	ldr	r0, [pc, #8]	; (b557c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5572:	b002      	add	sp, #8
   b5574:	bd10      	pop	{r4, pc}
   b5576:	bf00      	nop
   b5578:	2003ddc8 	.word	0x2003ddc8
   b557c:	2003ddcc 	.word	0x2003ddcc

000b5580 <_Z8setupSPIv>:
void setupSPI(){
   b5580:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b5582:	f7ff ffe1 	bl	b5548 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5586:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b558a:	2100      	movs	r1, #0
   b558c:	f007 fb78 	bl	bcc80 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5590:	f7ff ffda 	bl	b5548 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5598:	4901      	ldr	r1, [pc, #4]	; (b55a0 <_Z8setupSPIv+0x20>)
   b559a:	2201      	movs	r2, #1
   b559c:	f007 bc0e 	b.w	bcdbc <_ZN8SPIClass13setClockSpeedEjj>
   b55a0:	000f4240 	.word	0x000f4240

000b55a4 <setup>:
void setup(){
   b55a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b55a8:	48b4      	ldr	r0, [pc, #720]	; (b587c <setup+0x2d8>)
    setLSpeed = 90;
   b55aa:	4eb5      	ldr	r6, [pc, #724]	; (b5880 <setup+0x2dc>)
   b55ac:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b55ae:	4db5      	ldr	r5, [pc, #724]	; (b5884 <setup+0x2e0>)
   b55b0:	f003 0303 	and.w	r3, r3, #3
   b55b4:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b55b8:	b093      	sub	sp, #76	; 0x4c
   b55ba:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b55bc:	2200      	movs	r2, #0
   b55be:	2101      	movs	r1, #1
   b55c0:	3004      	adds	r0, #4
   b55c2:	f007 f98d 	bl	bc8e0 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b55c6:	2101      	movs	r1, #1
   b55c8:	2002      	movs	r0, #2
   b55ca:	f00b f8bd 	bl	c0748 <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b55ce:	2101      	movs	r1, #1
   b55d0:	201c      	movs	r0, #28
   b55d2:	f00b f8b9 	bl	c0748 <pinMode>
    pinMode(LEAK_DET, INPUT);
   b55d6:	2100      	movs	r1, #0
   b55d8:	201d      	movs	r0, #29
   b55da:	f00b f8b5 	bl	c0748 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b55de:	2100      	movs	r1, #0
   b55e0:	2002      	movs	r0, #2
   b55e2:	f00b f8c2 	bl	c076a <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b55e6:	2100      	movs	r1, #0
   b55e8:	201c      	movs	r0, #28
    ESCL.attach(ESC_PWM_L,1000,2000);
   b55ea:	2400      	movs	r4, #0
    digitalWrite(PWR_EN,LOW);
   b55ec:	f00b f8bd 	bl	c076a <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b55f0:	27b4      	movs	r7, #180	; 0xb4
   b55f2:	f006 fef3 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b55f6:	235a      	movs	r3, #90	; 0x5a
   b55f8:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b55fa:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b55fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5600:	e9cd 4700 	strd	r4, r7, [sp]
   b5604:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5608:	2106      	movs	r1, #6
   b560a:	489f      	ldr	r0, [pc, #636]	; (b5888 <setup+0x2e4>)
   b560c:	f007 fc6e 	bl	bceec <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b5610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5614:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5618:	e9cd 4700 	strd	r4, r7, [sp]
   b561c:	2105      	movs	r1, #5
   b561e:	489b      	ldr	r0, [pc, #620]	; (b588c <setup+0x2e8>)
    logSensors = true;
   b5620:	4f9b      	ldr	r7, [pc, #620]	; (b5890 <setup+0x2ec>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b5622:	f007 fc63 	bl	bceec <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b5626:	7831      	ldrb	r1, [r6, #0]
   b5628:	4897      	ldr	r0, [pc, #604]	; (b5888 <setup+0x2e4>)
    logMessages = true;
   b562a:	4e9a      	ldr	r6, [pc, #616]	; (b5894 <setup+0x2f0>)
    ESCL.write(setLSpeed);
   b562c:	f007 fc22 	bl	bce74 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b5630:	7829      	ldrb	r1, [r5, #0]
   b5632:	4896      	ldr	r0, [pc, #600]	; (b588c <setup+0x2e8>)
   b5634:	f007 fc1e 	bl	bce74 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b5638:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b563c:	f00a f83c 	bl	bf6b8 <delay>
    BLE.on();
   b5640:	f008 f8c0 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5644:	f008 f908 	bl	bd858 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b5648:	f008 f8bc 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b564c:	2108      	movs	r1, #8
   b564e:	f008 f90a 	bl	bd866 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b5652:	f00a fc49 	bl	bfee8 <_Z16_fetch_usbserialv>
   b5656:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b565a:	f00a fc35 	bl	bfec8 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b565e:	f00b f8b9 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   b5662:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5666:	f00a fd0b 	bl	c0080 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b566a:	f7ff ff89 	bl	b5580 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b566e:	f7ff f9f9 	bl	b4a64 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b5672:	f7ff fa0f 	bl	b4a94 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b5676:	f7ff f9e1 	bl	b4a3c <_Z8setupLTEv>
    manualRC = true;
   b567a:	4b87      	ldr	r3, [pc, #540]	; (b5898 <setup+0x2f4>)
   b567c:	2501      	movs	r5, #1
   b567e:	701d      	strb	r5, [r3, #0]
   b5680:	f006 feac 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b5684:	4b85      	ldr	r3, [pc, #532]	; (b589c <setup+0x2f8>)
   b5686:	6018      	str	r0, [r3, #0]
   b5688:	f006 fea8 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b568c:	4b84      	ldr	r3, [pc, #528]	; (b58a0 <setup+0x2fc>)
   b568e:	6018      	str	r0, [r3, #0]
   b5690:	f006 fea4 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b5694:	4b83      	ldr	r3, [pc, #524]	; (b58a4 <setup+0x300>)
    logSensors = true;
   b5696:	703d      	strb	r5, [r7, #0]
    lastStatusTime = millis();
   b5698:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b569a:	4b83      	ldr	r3, [pc, #524]	; (b58a8 <setup+0x304>)
    logMessages = true;
   b569c:	7035      	strb	r5, [r6, #0]
    XBeeRxTime = 0;
   b569e:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b56a0:	4b82      	ldr	r3, [pc, #520]	; (b58ac <setup+0x308>)
   b56a2:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b56a4:	4b82      	ldr	r3, [pc, #520]	; (b58b0 <setup+0x30c>)
   b56a6:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b56a8:	4b82      	ldr	r3, [pc, #520]	; (b58b4 <setup+0x310>)
   b56aa:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b56ac:	4b82      	ldr	r3, [pc, #520]	; (b58b8 <setup+0x314>)
   b56ae:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b56b0:	4b82      	ldr	r3, [pc, #520]	; (b58bc <setup+0x318>)
   b56b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b56b6:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b56b8:	4b81      	ldr	r3, [pc, #516]	; (b58c0 <setup+0x31c>)
   b56ba:	2232      	movs	r2, #50	; 0x32
   b56bc:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b56be:	f008 f881 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b56c2:	4a80      	ldr	r2, [pc, #512]	; (b58c4 <setup+0x320>)
   b56c4:	4601      	mov	r1, r0
   b56c6:	a80d      	add	r0, sp, #52	; 0x34
   b56c8:	f008 fdce 	bl	be268 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b56cc:	a80d      	add	r0, sp, #52	; 0x34
   b56ce:	f008 f97e 	bl	bd9ce <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b56d2:	f008 f877 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b56d6:	4a7c      	ldr	r2, [pc, #496]	; (b58c8 <setup+0x324>)
   b56d8:	4601      	mov	r1, r0
   b56da:	a80d      	add	r0, sp, #52	; 0x34
   b56dc:	f008 fdc4 	bl	be268 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b56e0:	a80d      	add	r0, sp, #52	; 0x34
   b56e2:	f008 f974 	bl	bd9ce <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b56e6:	f008 f86d 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b56ea:	4a78      	ldr	r2, [pc, #480]	; (b58cc <setup+0x328>)
   b56ec:	4601      	mov	r1, r0
   b56ee:	a80d      	add	r0, sp, #52	; 0x34
   b56f0:	f008 fdba 	bl	be268 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b56f4:	a80d      	add	r0, sp, #52	; 0x34
   b56f6:	f008 f96a 	bl	bd9ce <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b56fa:	4b75      	ldr	r3, [pc, #468]	; (b58d0 <setup+0x32c>)
   b56fc:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b56fe:	4b75      	ldr	r3, [pc, #468]	; (b58d4 <setup+0x330>)
        BleUuid tempUUID(uuid);
   b5700:	a80d      	add	r0, sp, #52	; 0x34
   b5702:	6819      	ldr	r1, [r3, #0]
   b5704:	f007 ff10 	bl	bd528 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5708:	a80d      	add	r0, sp, #52	; 0x34
   b570a:	f007 fe6f 	bl	bd3ec <_ZNK8particle7BleUuid4typeEv>
   b570e:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5710:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5712:	2d00      	cmp	r5, #0
   b5714:	f040 8084 	bne.w	b5820 <setup+0x27c>
            uint16_t uuid16 = tempUUID.shorted();
   b5718:	f007 fe84 	bl	bd424 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b571c:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b571e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5722:	2302      	movs	r3, #2
   b5724:	aa09      	add	r2, sp, #36	; 0x24
   b5726:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5728:	486b      	ldr	r0, [pc, #428]	; (b58d8 <setup+0x334>)
   b572a:	f008 fa7b 	bl	bdc24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b572e:	2300      	movs	r3, #0
   b5730:	4967      	ldr	r1, [pc, #412]	; (b58d0 <setup+0x32c>)
   b5732:	4869      	ldr	r0, [pc, #420]	; (b58d8 <setup+0x334>)
   b5734:	2208      	movs	r2, #8
   b5736:	f008 fa93 	bl	bdc60 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b573a:	f008 f843 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b573e:	2200      	movs	r2, #0
   b5740:	4965      	ldr	r1, [pc, #404]	; (b58d8 <setup+0x334>)
   b5742:	f008 f8f0 	bl	bd926 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5746:	f00b f881 	bl	c084c <_Z19__fetch_global_Wirev>
   b574a:	f00a fcf5 	bl	c0138 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b574e:	f00b f87d 	bl	c084c <_Z19__fetch_global_Wirev>
   b5752:	4962      	ldr	r1, [pc, #392]	; (b58dc <setup+0x338>)
   b5754:	f00a fcec 	bl	c0130 <_ZN7TwoWire8setSpeedEm>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5758:	f009 ff84 	bl	bf664 <_ZN9TimeClass5monthEv>
   b575c:	9007      	str	r0, [sp, #28]
   b575e:	f009 ff75 	bl	bf64c <_ZN9TimeClass3dayEv>
   b5762:	4604      	mov	r4, r0
   b5764:	f009 ff86 	bl	bf674 <_ZN9TimeClass4yearEv>
   b5768:	4605      	mov	r5, r0
   b576a:	f009 ff4b 	bl	bf604 <_ZN9TimeClass4hourEv>
   b576e:	4680      	mov	r8, r0
   b5770:	f009 ff54 	bl	bf61c <_ZN9TimeClass6minuteEv>
   b5774:	4681      	mov	r9, r0
   b5776:	f009 ff5d 	bl	bf634 <_ZN9TimeClass6secondEv>
   b577a:	9b07      	ldr	r3, [sp, #28]
   b577c:	4a58      	ldr	r2, [pc, #352]	; (b58e0 <setup+0x33c>)
   b577e:	9400      	str	r4, [sp, #0]
   b5780:	e9cd 9003 	strd	r9, r0, [sp, #12]
   b5784:	2110      	movs	r1, #16
   b5786:	e9cd 5801 	strd	r5, r8, [sp, #4]
   b578a:	a809      	add	r0, sp, #36	; 0x24
   b578c:	f007 f9ae 	bl	bcaec <snprintf>
    strcpy(filename,DEF_FILENAME);
   b5790:	4954      	ldr	r1, [pc, #336]	; (b58e4 <setup+0x340>)
   b5792:	4855      	ldr	r0, [pc, #340]	; (b58e8 <setup+0x344>)
   b5794:	f00b ff30 	bl	c15f8 <strcpy>
    strcat(filename,timestamp);
   b5798:	a909      	add	r1, sp, #36	; 0x24
   b579a:	4853      	ldr	r0, [pc, #332]	; (b58e8 <setup+0x344>)
   b579c:	f00b fefc 	bl	c1598 <strcat>
    strcpy(filenameMessages,filename);
   b57a0:	4951      	ldr	r1, [pc, #324]	; (b58e8 <setup+0x344>)
   b57a2:	4852      	ldr	r0, [pc, #328]	; (b58ec <setup+0x348>)
   b57a4:	f00b ff28 	bl	c15f8 <strcpy>
    strcat(filename,".csv");
   b57a8:	4951      	ldr	r1, [pc, #324]	; (b58f0 <setup+0x34c>)
   b57aa:	484f      	ldr	r0, [pc, #316]	; (b58e8 <setup+0x344>)
   b57ac:	f00b fef4 	bl	c1598 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b57b0:	4950      	ldr	r1, [pc, #320]	; (b58f4 <setup+0x350>)
   b57b2:	484e      	ldr	r0, [pc, #312]	; (b58ec <setup+0x348>)
   b57b4:	f00b fef0 	bl	c1598 <strcat>
    Serial.println(filename);
   b57b8:	f00a fb96 	bl	bfee8 <_Z16_fetch_usbserialv>
   b57bc:	494a      	ldr	r1, [pc, #296]	; (b58e8 <setup+0x344>)
   b57be:	f008 fe90 	bl	be4e2 <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b57c2:	f00a fb91 	bl	bfee8 <_Z16_fetch_usbserialv>
   b57c6:	4949      	ldr	r1, [pc, #292]	; (b58ec <setup+0x348>)
   b57c8:	f008 fe8b 	bl	be4e2 <_ZN5Print7printlnEPKc>
    watchdog.start();
   b57cc:	484a      	ldr	r0, [pc, #296]	; (b58f8 <setup+0x354>)
   b57ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b57d2:	f7fe fd71 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b57d6:	4849      	ldr	r0, [pc, #292]	; (b58fc <setup+0x358>)
   b57d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b57dc:	f7fe fd6c 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b57e0:	4847      	ldr	r0, [pc, #284]	; (b5900 <setup+0x35c>)
   b57e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b57e6:	f7fe fd67 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b57ea:	4b46      	ldr	r3, [pc, #280]	; (b5904 <setup+0x360>)
   b57ec:	930d      	str	r3, [sp, #52]	; 0x34
   b57ee:	2300      	movs	r3, #0
   b57f0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   b57f4:	4b44      	ldr	r3, [pc, #272]	; (b5908 <setup+0x364>)
   b57f6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b57f8:	4844      	ldr	r0, [pc, #272]	; (b590c <setup+0x368>)
   b57fa:	2301      	movs	r3, #1
   b57fc:	aa0d      	add	r2, sp, #52	; 0x34
   b57fe:	2108      	movs	r1, #8
   b5800:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   b5804:	f7fe ff02 	bl	b460c <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5808:	4604      	mov	r4, r0
   b580a:	b980      	cbnz	r0, b582e <setup+0x28a>
        Serial.println("Error: could not connect to SD card!");
   b580c:	f00a fb6c 	bl	bfee8 <_Z16_fetch_usbserialv>
   b5810:	493f      	ldr	r1, [pc, #252]	; (b5910 <setup+0x36c>)
   b5812:	f008 fe66 	bl	be4e2 <_ZN5Print7printlnEPKc>
        logSensors = false;
   b5816:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b5818:	7034      	strb	r4, [r6, #0]
}
   b581a:	b013      	add	sp, #76	; 0x4c
   b581c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5820:	f007 fe02 	bl	bd428 <_ZNK8particle7BleUuid8rawBytesEv>
   b5824:	9400      	str	r4, [sp, #0]
   b5826:	4602      	mov	r2, r0
   b5828:	2310      	movs	r3, #16
   b582a:	2107      	movs	r1, #7
   b582c:	e77c      	b.n	b5728 <setup+0x184>
    if(logSensors){
   b582e:	783b      	ldrb	r3, [r7, #0]
   b5830:	b17b      	cbz	r3, b5852 <setup+0x2ae>
   b5832:	4838      	ldr	r0, [pc, #224]	; (b5914 <setup+0x370>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5834:	7c03      	ldrb	r3, [r0, #16]
   b5836:	b92b      	cbnz	r3, b5844 <setup+0x2a0>
   b5838:	492b      	ldr	r1, [pc, #172]	; (b58e8 <setup+0x344>)
   b583a:	f244 2202 	movw	r2, #16898	; 0x4202
   b583e:	3010      	adds	r0, #16
   b5840:	f7fe fe70 	bl	b4524 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5844:	4934      	ldr	r1, [pc, #208]	; (b5918 <setup+0x374>)
   b5846:	4833      	ldr	r0, [pc, #204]	; (b5914 <setup+0x370>)
   b5848:	f008 fe4b 	bl	be4e2 <_ZN5Print7printlnEPKc>
        myFile.close();
   b584c:	4833      	ldr	r0, [pc, #204]	; (b591c <setup+0x378>)
   b584e:	f001 f855 	bl	b68fc <_ZN7FatFile5closeEv>
    if(logMessages){
   b5852:	7833      	ldrb	r3, [r6, #0]
   b5854:	2b00      	cmp	r3, #0
   b5856:	d0e0      	beq.n	b581a <setup+0x276>
   b5858:	4831      	ldr	r0, [pc, #196]	; (b5920 <setup+0x37c>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b585a:	7c03      	ldrb	r3, [r0, #16]
   b585c:	b92b      	cbnz	r3, b586a <setup+0x2c6>
   b585e:	4923      	ldr	r1, [pc, #140]	; (b58ec <setup+0x348>)
   b5860:	f244 2202 	movw	r2, #16898	; 0x4202
   b5864:	3010      	adds	r0, #16
   b5866:	f7fe fe5d 	bl	b4524 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b586a:	492e      	ldr	r1, [pc, #184]	; (b5924 <setup+0x380>)
   b586c:	482c      	ldr	r0, [pc, #176]	; (b5920 <setup+0x37c>)
   b586e:	2201      	movs	r2, #1
   b5870:	f7fe fd72 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5874:	482c      	ldr	r0, [pc, #176]	; (b5928 <setup+0x384>)
   b5876:	f001 f841 	bl	b68fc <_ZN7FatFile5closeEv>
}
   b587a:	e7ce      	b.n	b581a <setup+0x276>
   b587c:	2003e594 	.word	0x2003e594
   b5880:	2003e590 	.word	0x2003e590
   b5884:	2003e591 	.word	0x2003e591
   b5888:	2003dde4 	.word	0x2003dde4
   b588c:	2003ddf4 	.word	0x2003ddf4
   b5890:	2003df29 	.word	0x2003df29
   b5894:	2003df28 	.word	0x2003df28
   b5898:	2003df35 	.word	0x2003df35
   b589c:	2003e58c 	.word	0x2003e58c
   b58a0:	2003de30 	.word	0x2003de30
   b58a4:	2003de74 	.word	0x2003de74
   b58a8:	2003de18 	.word	0x2003de18
   b58ac:	2003dde0 	.word	0x2003dde0
   b58b0:	2003de34 	.word	0x2003de34
   b58b4:	2003e0ec 	.word	0x2003e0ec
   b58b8:	2003e0ed 	.word	0x2003e0ed
   b58bc:	2003de06 	.word	0x2003de06
   b58c0:	2003de2c 	.word	0x2003de2c
   b58c4:	2003e5d8 	.word	0x2003e5d8
   b58c8:	2003e0f0 	.word	0x2003e0f0
   b58cc:	2003e0e4 	.word	0x2003e0e4
   b58d0:	2003ddd5 	.word	0x2003ddd5
   b58d4:	2003dbd4 	.word	0x2003dbd4
   b58d8:	2003de20 	.word	0x2003de20
   b58dc:	00061a80 	.word	0x00061a80
   b58e0:	000c38e9 	.word	0x000c38e9
   b58e4:	000c3acb 	.word	0x000c3acb
   b58e8:	2003de35 	.word	0x2003de35
   b58ec:	2003de53 	.word	0x2003de53
   b58f0:	000c39f7 	.word	0x000c39f7
   b58f4:	000c3ad4 	.word	0x000c3ad4
   b58f8:	2003e5e4 	.word	0x2003e5e4
   b58fc:	2003de80 	.word	0x2003de80
   b5900:	2003e5b8 	.word	0x2003e5b8
   b5904:	000c3b90 	.word	0x000c3b90
   b5908:	007a1200 	.word	0x007a1200
   b590c:	2003e0f8 	.word	0x2003e0f8
   b5910:	000c3add 	.word	0x000c3add
   b5914:	2003df38 	.word	0x2003df38
   b5918:	000c3b02 	.word	0x000c3b02
   b591c:	2003df48 	.word	0x2003df48
   b5920:	2003ded0 	.word	0x2003ded0
   b5924:	000c3b58 	.word	0x000c3b58
   b5928:	2003dee0 	.word	0x2003dee0

000b592c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b592c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b592e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5930:	4604      	mov	r4, r0
   b5932:	460d      	mov	r5, r1
   b5934:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5936:	d916      	bls.n	b5966 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5938:	4290      	cmp	r0, r2
   b593a:	d215      	bcs.n	b5968 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b593c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5940:	1a75      	subs	r5, r6, r1
   b5942:	f1a1 0714 	sub.w	r7, r1, #20
   b5946:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5948:	42b7      	cmp	r7, r6
   b594a:	d01c      	beq.n	b5986 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b594c:	b12c      	cbz	r4, b595a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b594e:	4631      	mov	r1, r6
   b5950:	4620      	mov	r0, r4
   b5952:	f007 fb85 	bl	bd060 <_ZN6StringC1EOS_>
   b5956:	7c33      	ldrb	r3, [r6, #16]
   b5958:	7423      	strb	r3, [r4, #16]
   b595a:	4630      	mov	r0, r6
   b595c:	f007 fb04 	bl	bcf68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5960:	3e14      	subs	r6, #20
   b5962:	3c14      	subs	r4, #20
   b5964:	e7f0      	b.n	b5948 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5966:	d00e      	beq.n	b5986 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5968:	42b5      	cmp	r5, r6
   b596a:	d00c      	beq.n	b5986 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b596c:	b12c      	cbz	r4, b597a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b596e:	4629      	mov	r1, r5
   b5970:	4620      	mov	r0, r4
   b5972:	f007 fb75 	bl	bd060 <_ZN6StringC1EOS_>
   b5976:	7c2b      	ldrb	r3, [r5, #16]
   b5978:	7423      	strb	r3, [r4, #16]
   b597a:	4628      	mov	r0, r5
   b597c:	f007 faf4 	bl	bcf68 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5980:	3514      	adds	r5, #20
   b5982:	3414      	adds	r4, #20
   b5984:	e7f0      	b.n	b5968 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b598c:	2300      	movs	r3, #0
   b598e:	e9c0 3300 	strd	r3, r3, [r0]
   b5992:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5994:	684f      	ldr	r7, [r1, #4]
   b5996:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5998:	4604      	mov	r4, r0
   b599a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b599c:	dd23      	ble.n	b59e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b599e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b59a2:	fb08 f007 	mul.w	r0, r8, r7
   b59a6:	f007 f881 	bl	bcaac <malloc>
            if (!d) {
   b59aa:	4605      	mov	r5, r0
   b59ac:	b1d8      	cbz	r0, b59e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b59ae:	e9d4 1200 	ldrd	r1, r2, [r4]
   b59b2:	fb08 1202 	mla	r2, r8, r2, r1
   b59b6:	f7ff ffb9 	bl	b592c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b59ba:	6820      	ldr	r0, [r4, #0]
   b59bc:	f007 f87e 	bl	bcabc <free>
        data_ = d;
   b59c0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b59c2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b59c4:	e9d6 7300 	ldrd	r7, r3, [r6]
   b59c8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b59cc:	45b8      	cmp	r8, r7
   b59ce:	d008      	beq.n	b59e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b59d0:	4639      	mov	r1, r7
   b59d2:	4628      	mov	r0, r5
   b59d4:	f007 fb5e 	bl	bd094 <_ZN6StringC1ERKS_>
   b59d8:	7c3b      	ldrb	r3, [r7, #16]
   b59da:	742b      	strb	r3, [r5, #16]
   b59dc:	3714      	adds	r7, #20
   b59de:	3514      	adds	r5, #20
   b59e0:	e7f4      	b.n	b59cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b59e2:	6873      	ldr	r3, [r6, #4]
   b59e4:	6063      	str	r3, [r4, #4]
}
   b59e6:	4620      	mov	r0, r4
   b59e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b59ec <_GLOBAL__sub_I_SystemMode>:
   b59ec:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b59ee:	4b71      	ldr	r3, [pc, #452]	; (b5bb4 <_GLOBAL__sub_I_SystemMode+0x1c8>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b59f0:	4a71      	ldr	r2, [pc, #452]	; (b5bb8 <_GLOBAL__sub_I_SystemMode+0x1cc>)
  explicit SdFat(SPIClass* spiPort) {
   b59f2:	4c72      	ldr	r4, [pc, #456]	; (b5bbc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   b59f4:	2601      	movs	r6, #1
   b59f6:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b59f8:	4b71      	ldr	r3, [pc, #452]	; (b5bc0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b59fa:	2500      	movs	r5, #0
   b59fc:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b5a00:	609a      	str	r2, [r3, #8]
   b5a02:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5a04:	2003      	movs	r0, #3
   b5a06:	f006 ff7d 	bl	bc904 <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b5a0a:	486e      	ldr	r0, [pc, #440]	; (b5bc4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5a0c:	f001 fd4c 	bl	b74a8 <_ZN14SFE_UBLOX_GNSSC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b5a10:	f7ff fd9a 	bl	b5548 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a14:	2364      	movs	r3, #100	; 0x64
   b5a16:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b5a1a:	4b6b      	ldr	r3, [pc, #428]	; (b5bc8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5a1c:	6065      	str	r5, [r4, #4]
   b5a1e:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b5a22:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b5a26:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b5a2a:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b5a2e:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b5a32:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5a36:	b908      	cbnz	r0, b5a3c <_GLOBAL__sub_I_SystemMode+0x50>
   b5a38:	f7ff fd86 	bl	b5548 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b5a3c:	4b63      	ldr	r3, [pc, #396]	; (b5bcc <_GLOBAL__sub_I_SystemMode+0x1e0>)
  File() {}
   b5a3e:	4a64      	ldr	r2, [pc, #400]	; (b5bd0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b5a40:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5a44:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   b5a48:	2400      	movs	r4, #0
   b5a4a:	601a      	str	r2, [r3, #0]
   b5a4c:	e9c3 4601 	strd	r4, r6, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5a50:	611c      	str	r4, [r3, #16]
   b5a52:	4b60      	ldr	r3, [pc, #384]	; (b5bd4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
        capacity_(0) {
   b5a54:	9407      	str	r4, [sp, #28]
   b5a56:	601a      	str	r2, [r3, #0]
   b5a58:	e9c3 4601 	strd	r4, r6, [r3, #4]
   b5a5c:	611c      	str	r4, [r3, #16]
   b5a5e:	4b5e      	ldr	r3, [pc, #376]	; (b5bd8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
        filter_(level, filters) {
   b5a60:	4d5e      	ldr	r5, [pc, #376]	; (b5bdc <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b5a62:	601a      	str	r2, [r3, #0]
   b5a64:	e9c3 4601 	strd	r4, r6, [r3, #4]
   b5a68:	611c      	str	r4, [r3, #16]
   b5a6a:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5a6e:	f00a fa3b 	bl	bfee8 <_Z16_fetch_usbserialv>
   b5a72:	a905      	add	r1, sp, #20
   b5a74:	4607      	mov	r7, r0
   b5a76:	a808      	add	r0, sp, #32
   b5a78:	f7ff ff86 	bl	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5a7c:	a908      	add	r1, sp, #32
   b5a7e:	a80b      	add	r0, sp, #44	; 0x2c
   b5a80:	f7ff ff82 	bl	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5a84:	4b56      	ldr	r3, [pc, #344]	; (b5be0 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b5a86:	602b      	str	r3, [r5, #0]
   b5a88:	a90b      	add	r1, sp, #44	; 0x2c
   b5a8a:	a80e      	add	r0, sp, #56	; 0x38
   b5a8c:	f7ff ff7c 	bl	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a90:	aa0e      	add	r2, sp, #56	; 0x38
   b5a92:	211e      	movs	r1, #30
   b5a94:	1d28      	adds	r0, r5, #4
   b5a96:	f009 fa3f 	bl	bef18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5a9a:	a80e      	add	r0, sp, #56	; 0x38
   b5a9c:	f7ff fd22 	bl	b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5aa0:	a80b      	add	r0, sp, #44	; 0x2c
   b5aa2:	f7ff fd1f 	bl	b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5aa6:	4b4f      	ldr	r3, [pc, #316]	; (b5be4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5aa8:	602b      	str	r3, [r5, #0]
   b5aaa:	622f      	str	r7, [r5, #32]
   b5aac:	a808      	add	r0, sp, #32
   b5aae:	f7ff fd19 	bl	b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5ab2:	4b4d      	ldr	r3, [pc, #308]	; (b5be8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b5ab4:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5ab6:	f00a fa17 	bl	bfee8 <_Z16_fetch_usbserialv>
   b5aba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5abe:	f00a fa03 	bl	bfec8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5ac2:	f008 ff0b 	bl	be8dc <_ZN5spark10LogManager8instanceEv>
   b5ac6:	4629      	mov	r1, r5
   b5ac8:	f009 f8fc 	bl	becc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b5acc:	a805      	add	r0, sp, #20
   b5ace:	f7ff fd09 	bl	b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b5ad2:	4846      	ldr	r0, [pc, #280]	; (b5bec <_GLOBAL__sub_I_SystemMode+0x200>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5ad4:	4d46      	ldr	r5, [pc, #280]	; (b5bf0 <_GLOBAL__sub_I_SystemMode+0x204>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5ad6:	4f47      	ldr	r7, [pc, #284]	; (b5bf4 <_GLOBAL__sub_I_SystemMode+0x208>)
Servo ESCL; 
   b5ad8:	f007 f9f4 	bl	bcec4 <_ZN5ServoC1Ev>
Servo ESCR;
   b5adc:	4846      	ldr	r0, [pc, #280]	; (b5bf8 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b5ade:	f007 f9f1 	bl	bcec4 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5ae2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5ae6:	682b      	ldr	r3, [r5, #0]
   b5ae8:	9300      	str	r3, [sp, #0]
   b5aea:	4b44      	ldr	r3, [pc, #272]	; (b5bfc <_GLOBAL__sub_I_SystemMode+0x210>)
   b5aec:	4944      	ldr	r1, [pc, #272]	; (b5c00 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5aee:	681b      	ldr	r3, [r3, #0]
   b5af0:	4844      	ldr	r0, [pc, #272]	; (b5c04 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5af2:	f04f 0210 	mov.w	r2, #16
   b5af6:	f7ff fd08 	bl	b550a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b5afa:	4b43      	ldr	r3, [pc, #268]	; (b5c08 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b5afc:	9402      	str	r4, [sp, #8]
   b5afe:	9301      	str	r3, [sp, #4]
   b5b00:	682b      	ldr	r3, [r5, #0]
   b5b02:	9300      	str	r3, [sp, #0]
   b5b04:	4b41      	ldr	r3, [pc, #260]	; (b5c0c <_GLOBAL__sub_I_SystemMode+0x220>)
   b5b06:	4942      	ldr	r1, [pc, #264]	; (b5c10 <_GLOBAL__sub_I_SystemMode+0x224>)
   b5b08:	681b      	ldr	r3, [r3, #0]
   b5b0a:	4842      	ldr	r0, [pc, #264]	; (b5c14 <_GLOBAL__sub_I_SystemMode+0x228>)
   b5b0c:	f04f 0204 	mov.w	r2, #4
   b5b10:	f7ff fcfb 	bl	b550a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b5b14:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5b18:	682b      	ldr	r3, [r5, #0]
   b5b1a:	9300      	str	r3, [sp, #0]
   b5b1c:	4b3e      	ldr	r3, [pc, #248]	; (b5c18 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b5b1e:	493f      	ldr	r1, [pc, #252]	; (b5c1c <_GLOBAL__sub_I_SystemMode+0x230>)
   b5b20:	681b      	ldr	r3, [r3, #0]
   b5b22:	483f      	ldr	r0, [pc, #252]	; (b5c20 <_GLOBAL__sub_I_SystemMode+0x234>)
	    _M_manager = &_My_handler::_M_manager;
   b5b24:	4d3f      	ldr	r5, [pc, #252]	; (b5c24 <_GLOBAL__sub_I_SystemMode+0x238>)
   b5b26:	f04f 0210 	mov.w	r2, #16
   b5b2a:	f7ff fcee 	bl	b550a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b5b2e:	483e      	ldr	r0, [pc, #248]	; (b5c28 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b5b30:	f008 f883 	bl	bdc3a <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5b34:	4b3d      	ldr	r3, [pc, #244]	; (b5c2c <_GLOBAL__sub_I_SystemMode+0x240>)
   b5b36:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5b38:	aa0e      	add	r2, sp, #56	; 0x38
   b5b3a:	4623      	mov	r3, r4
   b5b3c:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5b40:	483b      	ldr	r0, [pc, #236]	; (b5c30 <_GLOBAL__sub_I_SystemMode+0x244>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5b42:	9711      	str	r7, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5b44:	9510      	str	r5, [sp, #64]	; 0x40
   b5b46:	f7fe fc53 	bl	b43f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5b4a:	a80e      	add	r0, sp, #56	; 0x38
   b5b4c:	f7fe fc12 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5b50:	4b38      	ldr	r3, [pc, #224]	; (b5c34 <_GLOBAL__sub_I_SystemMode+0x248>)
   b5b52:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5b54:	aa0e      	add	r2, sp, #56	; 0x38
   b5b56:	4623      	mov	r3, r4
   b5b58:	4631      	mov	r1, r6
   b5b5a:	4837      	ldr	r0, [pc, #220]	; (b5c38 <_GLOBAL__sub_I_SystemMode+0x24c>)
	    _M_manager = &_My_handler::_M_manager;
   b5b5c:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b5b60:	f7fe fc46 	bl	b43f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5b64:	a80e      	add	r0, sp, #56	; 0x38
   b5b66:	f7fe fc05 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5b6a:	4b34      	ldr	r3, [pc, #208]	; (b5c3c <_GLOBAL__sub_I_SystemMode+0x250>)
   b5b6c:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5b6e:	aa0e      	add	r2, sp, #56	; 0x38
   b5b70:	4623      	mov	r3, r4
   b5b72:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5b76:	4832      	ldr	r0, [pc, #200]	; (b5c40 <_GLOBAL__sub_I_SystemMode+0x254>)
	    _M_manager = &_My_handler::_M_manager;
   b5b78:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b5b7c:	f7fe fc38 	bl	b43f0 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5b80:	a80e      	add	r0, sp, #56	; 0x38
   b5b82:	f7fe fbf7 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5b86:	4622      	mov	r2, r4
   b5b88:	2114      	movs	r1, #20
   b5b8a:	2001      	movs	r0, #1
   b5b8c:	f006 fee2 	bl	bc954 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5b90:	2201      	movs	r2, #1
   b5b92:	2114      	movs	r1, #20
   b5b94:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5b98:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5b9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5b9e:	4829      	ldr	r0, [pc, #164]	; (b5c44 <_GLOBAL__sub_I_SystemMode+0x258>)
   b5ba0:	f007 f828 	bl	bcbf4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
String xbeeBuf;
   b5ba4:	4928      	ldr	r1, [pc, #160]	; (b5c48 <_GLOBAL__sub_I_SystemMode+0x25c>)
   b5ba6:	4829      	ldr	r0, [pc, #164]	; (b5c4c <_GLOBAL__sub_I_SystemMode+0x260>)
   b5ba8:	b013      	add	sp, #76	; 0x4c
   b5baa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String xbeeBuf;
   b5bae:	f007 ba26 	b.w	bcffe <_ZN6StringC1EPK19__FlashStringHelper>
   b5bb2:	bf00      	nop
   b5bb4:	2003de1c 	.word	0x2003de1c
   b5bb8:	ffff0000 	.word	0xffff0000
   b5bbc:	2003e0f8 	.word	0x2003e0f8
   b5bc0:	2003de08 	.word	0x2003de08
   b5bc4:	2003df6c 	.word	0x2003df6c
   b5bc8:	000c3b90 	.word	0x000c3b90
   b5bcc:	2003df38 	.word	0x2003df38
   b5bd0:	000c3bfc 	.word	0x000c3bfc
   b5bd4:	2003ded0 	.word	0x2003ded0
   b5bd8:	2003de9c 	.word	0x2003de9c
   b5bdc:	2003df04 	.word	0x2003df04
   b5be0:	000c3bb8 	.word	0x000c3bb8
   b5be4:	000c4cc4 	.word	0x000c4cc4
   b5be8:	000c3be4 	.word	0x000c3be4
   b5bec:	2003dde4 	.word	0x2003dde4
   b5bf0:	2003dbd4 	.word	0x2003dbd4
   b5bf4:	000b4235 	.word	0x000b4235
   b5bf8:	2003ddf4 	.word	0x2003ddf4
   b5bfc:	2003dbe0 	.word	0x2003dbe0
   b5c00:	000c3b7d 	.word	0x000c3b7d
   b5c04:	2003e5d8 	.word	0x2003e5d8
   b5c08:	000b4995 	.word	0x000b4995
   b5c0c:	2003dbdc 	.word	0x2003dbdc
   b5c10:	000c3b80 	.word	0x000c3b80
   b5c14:	2003e0f0 	.word	0x2003e0f0
   b5c18:	2003dbd8 	.word	0x2003dbd8
   b5c1c:	000c3b83 	.word	0x000c3b83
   b5c20:	2003e0e4 	.word	0x2003e0e4
   b5c24:	000b4221 	.word	0x000b4221
   b5c28:	2003de20 	.word	0x2003de20
   b5c2c:	000b4535 	.word	0x000b4535
   b5c30:	2003e5e4 	.word	0x2003e5e4
   b5c34:	000b4469 	.word	0x000b4469
   b5c38:	2003de80 	.word	0x2003de80
   b5c3c:	000b40fd 	.word	0x000b40fd
   b5c40:	2003e5b8 	.word	0x2003e5b8
   b5c44:	2003e594 	.word	0x2003e594
   b5c48:	000c4c8c 	.word	0x000c4c8c
   b5c4c:	2003e600 	.word	0x2003e600

000b5c50 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5c50:	2904      	cmp	r1, #4
   b5c52:	d804      	bhi.n	b5c5e <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5c54:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5c58:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5c5c:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5c5e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5c60:	bf9b      	ittet	ls
   b5c62:	f101 31ff 	addls.w	r1, r1, #4294967295
   b5c66:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5c6a:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5c6c:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5c6e:	bf84      	itt	hi
   b5c70:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5c74:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5c76:	4770      	bx	lr

000b5c78 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5c78:	b510      	push	{r4, lr}
   b5c7a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5c7c:	3024      	adds	r0, #36	; 0x24
   b5c7e:	f000 ff69 	bl	b6b54 <_ZN8FatCache4syncEv>
   b5c82:	b128      	cbz	r0, b5c90 <_ZN9FatVolume9cacheSyncEv+0x18>
   b5c84:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5c8c:	f000 bf62 	b.w	b6b54 <_ZN8FatCache4syncEv>
  }
   b5c90:	bd10      	pop	{r4, pc}

000b5c92 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b5c92:	1e41      	subs	r1, r0, #1
   b5c94:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5c98:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5c9a:	0842      	lsrs	r2, r0, #1
   b5c9c:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b5ca0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5ca4:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5ca8:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5caa:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5cac:	d1f5      	bne.n	b5c9a <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5cae:	4770      	bx	lr

000b5cb0 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b5cb0:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b5cb2:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b5cb4:	4604      	mov	r4, r0
   b5cb6:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b5cb8:	b923      	cbnz	r3, b5cc4 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b5cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b5cbe:	6889      	ldr	r1, [r1, #8]
   b5cc0:	f000 bc16 	b.w	b64f0 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b5cc4:	2224      	movs	r2, #36	; 0x24
   b5cc6:	2100      	movs	r1, #0
   b5cc8:	f00b fc30 	bl	c152c <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b5ccc:	2310      	movs	r3, #16
  m_flags = F_READ;
   b5cce:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b5cd0:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5cd2:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b5cd4:	68ab      	ldr	r3, [r5, #8]
   b5cd6:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b5cd8:	68eb      	ldr	r3, [r5, #12]
   b5cda:	6223      	str	r3, [r4, #32]
}
   b5cdc:	bd38      	pop	{r3, r4, r5, pc}

000b5cde <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b5cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ce2:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b5ce4:	7803      	ldrb	r3, [r0, #0]
   b5ce6:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b5cea:	4606      	mov	r6, r0
   b5cec:	460f      	mov	r7, r1
   b5cee:	4690      	mov	r8, r2
   b5cf0:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b5cf4:	2b00      	cmp	r3, #0
   b5cf6:	d05d      	beq.n	b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
   b5cf8:	2a0c      	cmp	r2, #12
   b5cfa:	d95b      	bls.n	b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b5cfc:	78c3      	ldrb	r3, [r0, #3]
   b5cfe:	b933      	cbnz	r3, b5d0e <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b5d00:	f000 fb46 	bl	b6390 <_ZN7FatFile6getSFNEPc>
   b5d04:	4604      	mov	r4, r0
}
   b5d06:	4620      	mov	r0, r4
   b5d08:	b00d      	add	sp, #52	; 0x34
   b5d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b5d0e:	4601      	mov	r1, r0
   b5d10:	a803      	add	r0, sp, #12
   b5d12:	f7ff ffcd 	bl	b5cb0 <_ZN7FatFile11openClusterEPS_>
   b5d16:	2800      	cmp	r0, #0
   b5d18:	d04c      	beq.n	b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b5d1a:	eb07 0308 	add.w	r3, r7, r8
   b5d1e:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5d22:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b5d26:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b5d28:	78f3      	ldrb	r3, [r6, #3]
   b5d2a:	fa5f f58b 	uxtb.w	r5, fp
   b5d2e:	42ab      	cmp	r3, r5
   b5d30:	d340      	bcc.n	b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b5d32:	88b1      	ldrh	r1, [r6, #4]
   b5d34:	eba1 010b 	sub.w	r1, r1, fp
   b5d38:	0149      	lsls	r1, r1, #5
   b5d3a:	a803      	add	r0, sp, #12
   b5d3c:	f000 fcbe 	bl	b66bc <_ZN7FatFile7seekSetEm>
   b5d40:	4604      	mov	r4, r0
   b5d42:	2800      	cmp	r0, #0
   b5d44:	d036      	beq.n	b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b5d46:	2100      	movs	r1, #0
   b5d48:	a803      	add	r0, sp, #12
   b5d4a:	f000 fc98 	bl	b667e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5d4e:	4603      	mov	r3, r0
   b5d50:	b380      	cbz	r0, b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b5d52:	7ac2      	ldrb	r2, [r0, #11]
   b5d54:	2a0f      	cmp	r2, #15
   b5d56:	d12d      	bne.n	b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b5d58:	7802      	ldrb	r2, [r0, #0]
   b5d5a:	f002 021f 	and.w	r2, r2, #31
   b5d5e:	42aa      	cmp	r2, r5
   b5d60:	d128      	bne.n	b5db4 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5d62:	f10b 35ff 	add.w	r5, fp, #4294967295
   b5d66:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b5d6a:	197a      	adds	r2, r7, r5
   b5d6c:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b5d6e:	4618      	mov	r0, r3
   b5d70:	9101      	str	r1, [sp, #4]
   b5d72:	f7ff ff6d 	bl	b5c50 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b5d76:	b168      	cbz	r0, b5d94 <_ZN7FatFile7getNameEPcj+0xb6>
   b5d78:	45a8      	cmp	r8, r5
   b5d7a:	d912      	bls.n	b5da2 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b5d7c:	9901      	ldr	r1, [sp, #4]
   b5d7e:	3101      	adds	r1, #1
   b5d80:	287f      	cmp	r0, #127	; 0x7f
   b5d82:	b2c9      	uxtb	r1, r1
   b5d84:	bf28      	it	cs
   b5d86:	203f      	movcs	r0, #63	; 0x3f
   b5d88:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b5d8a:	f802 0b01 	strb.w	r0, [r2], #1
   b5d8e:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b5d92:	d1ec      	bne.n	b5d6e <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b5d94:	45a8      	cmp	r8, r5
   b5d96:	d904      	bls.n	b5da2 <_ZN7FatFile7getNameEPcj+0xc4>
   b5d98:	781a      	ldrb	r2, [r3, #0]
   b5d9a:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b5d9c:	bf48      	it	mi
   b5d9e:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b5da2:	9a00      	ldr	r2, [sp, #0]
   b5da4:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b5da8:	781b      	ldrb	r3, [r3, #0]
   b5daa:	065b      	lsls	r3, r3, #25
   b5dac:	f10b 0b01 	add.w	fp, fp, #1
   b5db0:	d5ba      	bpl.n	b5d28 <_ZN7FatFile7getNameEPcj+0x4a>
   b5db2:	e7a8      	b.n	b5d06 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b5db4:	2400      	movs	r4, #0
   b5db6:	703c      	strb	r4, [r7, #0]
  return false;
   b5db8:	e7a5      	b.n	b5d06 <_ZN7FatFile7getNameEPcj+0x28>
	...

000b5dbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b5dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5dc0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5dc6:	2b20      	cmp	r3, #32
   b5dc8:	d0fa      	beq.n	b5dc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5dca:	4d6a      	ldr	r5, [pc, #424]	; (b5f74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5dcc:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b5dce:	2400      	movs	r4, #0
    c = path[len];
   b5dd0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5dd2:	b1c3      	cbz	r3, b5e06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5dd4:	2b2f      	cmp	r3, #47	; 0x2f
   b5dd6:	d016      	beq.n	b5e06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5dd8:	2b5c      	cmp	r3, #92	; 0x5c
   b5dda:	d102      	bne.n	b5de2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5ddc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b5dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5de2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5de6:	b2c0      	uxtb	r0, r0
   b5de8:	281d      	cmp	r0, #29
   b5dea:	d803      	bhi.n	b5df4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5dec:	fa25 f000 	lsr.w	r0, r5, r0
   b5df0:	07c0      	lsls	r0, r0, #31
   b5df2:	d4f3      	bmi.n	b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5df4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5df8:	283c      	cmp	r0, #60	; 0x3c
   b5dfa:	d0ef      	beq.n	b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5dfc:	3b20      	subs	r3, #32
   b5dfe:	2b5e      	cmp	r3, #94	; 0x5e
   b5e00:	d8ec      	bhi.n	b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5e02:	3401      	adds	r4, #1
    c = path[len];
   b5e04:	e7e4      	b.n	b5dd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5e06:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5e08:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b5e0a:	4607      	mov	r7, r0
   b5e0c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5e10:	2d20      	cmp	r5, #32
   b5e12:	d0fa      	beq.n	b5e0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5e14:	2d2f      	cmp	r5, #47	; 0x2f
   b5e16:	d0f8      	beq.n	b5e0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5e18:	6017      	str	r7, [r2, #0]
  while (len) {
   b5e1a:	b14c      	cbz	r4, b5e30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5e1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5e20:	2a2e      	cmp	r2, #46	; 0x2e
   b5e22:	d001      	beq.n	b5e28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5e24:	2a20      	cmp	r2, #32
   b5e26:	d101      	bne.n	b5e2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5e28:	3c01      	subs	r4, #1
  while (len) {
   b5e2a:	e7f6      	b.n	b5e1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5e2c:	2cff      	cmp	r4, #255	; 0xff
   b5e2e:	dcd5      	bgt.n	b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5e30:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5e34:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5e38:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b5e3a:	f8c1 300d 	str.w	r3, [r1, #13]
   b5e3e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e40:	f04f 0800 	mov.w	r8, #0
   b5e44:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5e48:	2b2e      	cmp	r3, #46	; 0x2e
   b5e4a:	d001      	beq.n	b5e50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5e4c:	2b20      	cmp	r3, #32
   b5e4e:	d102      	bne.n	b5e56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5e50:	f108 0801 	add.w	r8, r8, #1
   b5e54:	e7f6      	b.n	b5e44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5e56:	fab8 f088 	clz	r0, r8
   b5e5a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5e5c:	1e65      	subs	r5, r4, #1
   b5e5e:	1c6b      	adds	r3, r5, #1
   b5e60:	d002      	beq.n	b5e68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5e62:	5d73      	ldrb	r3, [r6, r5]
   b5e64:	2b2e      	cmp	r3, #46	; 0x2e
   b5e66:	d114      	bne.n	b5e92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e68:	f04f 0900 	mov.w	r9, #0
   b5e6c:	2707      	movs	r7, #7
   b5e6e:	464a      	mov	r2, r9
   b5e70:	46ca      	mov	sl, r9
   b5e72:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5e76:	45a0      	cmp	r8, r4
   b5e78:	da68      	bge.n	b5f4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b5e7a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5e7e:	2b20      	cmp	r3, #32
   b5e80:	d003      	beq.n	b5e8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5e82:	2b2e      	cmp	r3, #46	; 0x2e
   b5e84:	d107      	bne.n	b5e96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5e86:	45a8      	cmp	r8, r5
   b5e88:	d012      	beq.n	b5eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b5e8a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5e8c:	f108 0801 	add.w	r8, r8, #1
   b5e90:	e7f1      	b.n	b5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5e92:	3d01      	subs	r5, #1
   b5e94:	e7e3      	b.n	b5e5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5e96:	2b22      	cmp	r3, #34	; 0x22
   b5e98:	d008      	beq.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b5e9a:	2b7c      	cmp	r3, #124	; 0x7c
   b5e9c:	d006      	beq.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b5e9e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5ea2:	f1bc 0f05 	cmp.w	ip, #5
   b5ea6:	d80a      	bhi.n	b5ebe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5ea8:	2b2d      	cmp	r3, #45	; 0x2d
   b5eaa:	d012      	beq.n	b5ed2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b5eac:	45a8      	cmp	r8, r5
   b5eae:	d15b      	bne.n	b5f68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5eb0:	2f0a      	cmp	r7, #10
   b5eb2:	d04a      	beq.n	b5f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5eb4:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5eb6:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5eb8:	f04f 0e10 	mov.w	lr, #16
   b5ebc:	e7e6      	b.n	b5e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b5ebe:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5ec2:	f1bc 0f05 	cmp.w	ip, #5
   b5ec6:	d9f1      	bls.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5ec8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5ecc:	f1bc 0f02 	cmp.w	ip, #2
   b5ed0:	d9ec      	bls.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5ed2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5ed6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5eda:	d8e7      	bhi.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5edc:	45a8      	cmp	r8, r5
   b5ede:	d0e7      	beq.n	b5eb0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5ee0:	42ba      	cmp	r2, r7
   b5ee2:	d830      	bhi.n	b5f46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5ee4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5ee8:	f1bc 0f19 	cmp.w	ip, #25
   b5eec:	d81a      	bhi.n	b5f24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5eee:	3b20      	subs	r3, #32
        lc |= bit;
   b5ef0:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5ef4:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5ef6:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5efa:	f102 0c01 	add.w	ip, r2, #1
   b5efe:	fa5f fc8c 	uxtb.w	ip, ip
   b5f02:	440a      	add	r2, r1
      if (i < 7) {
   b5f04:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5f08:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5f0a:	d801      	bhi.n	b5f10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5f0c:	f881 c00c 	strb.w	ip, [r1, #12]
   b5f10:	4662      	mov	r2, ip
   b5f12:	e7bb      	b.n	b5e8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5f14:	45a8      	cmp	r8, r5
   b5f16:	dc18      	bgt.n	b5f4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5f18:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5f1a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5f1c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5f1e:	f04f 0e10 	mov.w	lr, #16
   b5f22:	e7b2      	b.n	b5e8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5f24:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5f28:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5f2c:	bf98      	it	ls
   b5f2e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5f32:	e7e2      	b.n	b5efa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5f34:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5f36:	2001      	movs	r0, #1
   b5f38:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5f3a:	4419      	add	r1, r3
   b5f3c:	237e      	movs	r3, #126	; 0x7e
   b5f3e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5f40:	2331      	movs	r3, #49	; 0x31
   b5f42:	738b      	strb	r3, [r1, #14]
   b5f44:	e74b      	b.n	b5dde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5f46:	2f0a      	cmp	r7, #10
   b5f48:	d1e4      	bne.n	b5f14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5f4a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5f4c:	7b4b      	ldrb	r3, [r1, #13]
   b5f4e:	2b20      	cmp	r3, #32
   b5f50:	f43f af44 	beq.w	b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5f54:	2800      	cmp	r0, #0
   b5f56:	d0ed      	beq.n	b5f34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5f58:	ea1a 0f09 	tst.w	sl, r9
   b5f5c:	bf18      	it	ne
   b5f5e:	f04f 0902 	movne.w	r9, #2
   b5f62:	f881 9000 	strb.w	r9, [r1]
   b5f66:	e73a      	b.n	b5dde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5f68:	42ba      	cmp	r2, r7
   b5f6a:	d8ec      	bhi.n	b5f46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5f6c:	2000      	movs	r0, #0
      c = '_';
   b5f6e:	235f      	movs	r3, #95	; 0x5f
   b5f70:	e7c3      	b.n	b5efa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5f72:	bf00      	nop
   b5f74:	31000101 	.word	0x31000101

000b5f78 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5f7c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5f80:	4606      	mov	r6, r0
   b5f82:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5f84:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5f86:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5f88:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5f8c:	6861      	ldr	r1, [r4, #4]
   b5f8e:	68a2      	ldr	r2, [r4, #8]
   b5f90:	186b      	adds	r3, r5, r1
   b5f92:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5f94:	4411      	add	r1, r2
   b5f96:	4291      	cmp	r1, r2
   b5f98:	d006      	beq.n	b5fa8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b5f9a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5f9e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5fa2:	4043      	eors	r3, r0
   b5fa4:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5fa6:	e7f6      	b.n	b5f96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5fa8:	f1b9 0f03 	cmp.w	r9, #3
   b5fac:	bf28      	it	cs
   b5fae:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fb2:	f109 0204 	add.w	r2, r9, #4
   b5fb6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5fb8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fbc:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fbe:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fc0:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fc2:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fc4:	bf94      	ite	ls
   b5fc6:	3130      	addls	r1, #48	; 0x30
   b5fc8:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fca:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fcc:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b5fce:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fd2:	d1f1      	bne.n	b5fb8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5fd4:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5fd8:	2100      	movs	r1, #0
   b5fda:	735f      	strb	r7, [r3, #13]
   b5fdc:	4630      	mov	r0, r6
   b5fde:	f000 fb6d 	bl	b66bc <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5fe2:	2101      	movs	r1, #1
   b5fe4:	4630      	mov	r0, r6
   b5fe6:	f000 fb4a 	bl	b667e <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b5fea:	4601      	mov	r1, r0
   b5fec:	b928      	cbnz	r0, b5ffa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b5fee:	7870      	ldrb	r0, [r6, #1]
   b5ff0:	fab0 f080 	clz	r0, r0
   b5ff4:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b5ffa:	7803      	ldrb	r3, [r0, #0]
   b5ffc:	b16b      	cbz	r3, b601a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5ffe:	7ac3      	ldrb	r3, [r0, #11]
   b6000:	071b      	lsls	r3, r3, #28
   b6002:	d4ee      	bmi.n	b5fe2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6004:	220b      	movs	r2, #11
   b6006:	4640      	mov	r0, r8
   b6008:	f00b fa58 	bl	c14bc <memcmp>
   b600c:	2800      	cmp	r0, #0
   b600e:	d1e8      	bne.n	b5fe2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6010:	3501      	adds	r5, #1
   b6012:	b2ad      	uxth	r5, r5
   b6014:	2d64      	cmp	r5, #100	; 0x64
   b6016:	d1b9      	bne.n	b5f8c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6018:	e7ed      	b.n	b5ff6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b601a:	2001      	movs	r0, #1
   b601c:	e7eb      	b.n	b5ff6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6020 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6024:	ed2d 8b02 	vpush	{d8}
   b6028:	b08b      	sub	sp, #44	; 0x2c
   b602a:	460d      	mov	r5, r1
   b602c:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b602e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6030:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6032:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6036:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6038:	d105      	bne.n	b6046 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b603a:	2000      	movs	r0, #0
}
   b603c:	b00b      	add	sp, #44	; 0x2c
   b603e:	ecbd 8b02 	vpop	{d8}
   b6042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6046:	9b07      	ldr	r3, [sp, #28]
   b6048:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b604a:	2b00      	cmp	r3, #0
   b604c:	d1f5      	bne.n	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b604e:	6853      	ldr	r3, [r2, #4]
   b6050:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6052:	7813      	ldrb	r3, [r2, #0]
   b6054:	079c      	lsls	r4, r3, #30
   b6056:	bf1f      	itttt	ne
   b6058:	9b05      	ldrne	r3, [sp, #20]
   b605a:	330c      	addne	r3, #12
   b605c:	220d      	movne	r2, #13
   b605e:	fbb3 f3f2 	udivne	r3, r3, r2
   b6062:	bf1a      	itte	ne
   b6064:	3301      	addne	r3, #1
   b6066:	b2db      	uxtbne	r3, r3
   b6068:	2301      	moveq	r3, #1
    seekSet(0);
   b606a:	2100      	movs	r1, #0
   b606c:	4628      	mov	r0, r5
   b606e:	9303      	str	r3, [sp, #12]
   b6070:	f000 fb24 	bl	b66bc <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6074:	f107 030d 	add.w	r3, r7, #13
  }
   b6078:	f04f 0b00 	mov.w	fp, #0
   b607c:	ee08 3a10 	vmov	s16, r3
   b6080:	46da      	mov	sl, fp
   b6082:	465c      	mov	r4, fp
   b6084:	465e      	mov	r6, fp
   b6086:	f8cd b010 	str.w	fp, [sp, #16]
   b608a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b608c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b608e:	2101      	movs	r1, #1
   b6090:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6092:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6096:	f000 faf2 	bl	b667e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b609a:	4603      	mov	r3, r0
   b609c:	2800      	cmp	r0, #0
   b609e:	d171      	bne.n	b6184 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b60a0:	786b      	ldrb	r3, [r5, #1]
   b60a2:	2b00      	cmp	r3, #0
   b60a4:	d1c9      	bne.n	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b60a6:	9b06      	ldr	r3, [sp, #24]
   b60a8:	059a      	lsls	r2, r3, #22
   b60aa:	d5c6      	bpl.n	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b60ac:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b60b0:	3b01      	subs	r3, #1
   b60b2:	2b01      	cmp	r3, #1
   b60b4:	d8c1      	bhi.n	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b60b6:	9b04      	ldr	r3, [sp, #16]
   b60b8:	2c00      	cmp	r4, #0
   b60ba:	bf08      	it	eq
   b60bc:	4643      	moveq	r3, r8
   b60be:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b60c0:	9b03      	ldr	r3, [sp, #12]
   b60c2:	429c      	cmp	r4, r3
   b60c4:	f0c0 80f1 	bcc.w	b62aa <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b60c8:	f1b9 0f00 	cmp.w	r9, #0
   b60cc:	f040 810a 	bne.w	b62e4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b60d0:	9b04      	ldr	r3, [sp, #16]
   b60d2:	4628      	mov	r0, r5
   b60d4:	0159      	lsls	r1, r3, #5
   b60d6:	f000 faf1 	bl	b66bc <_ZN7FatFile7seekSetEm>
   b60da:	2800      	cmp	r0, #0
   b60dc:	d0ad      	beq.n	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b60de:	9b03      	ldr	r3, [sp, #12]
   b60e0:	f103 39ff 	add.w	r9, r3, #4294967295
   b60e4:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b60e8:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b60ea:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b60ee:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b60f2:	2e00      	cmp	r6, #0
   b60f4:	f000 810d 	beq.w	b6312 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b60f8:	2100      	movs	r1, #0
   b60fa:	4628      	mov	r0, r5
   b60fc:	f000 fabf 	bl	b667e <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6100:	4604      	mov	r4, r0
   b6102:	2800      	cmp	r0, #0
   b6104:	d099      	beq.n	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6106:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6108:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b610c:	454e      	cmp	r6, r9
   b610e:	f043 0301 	orr.w	r3, r3, #1
   b6112:	bf0c      	ite	eq
   b6114:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6118:	46b3      	movne	fp, r6
   b611a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b611e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6122:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6126:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b612a:	f107 000d 	add.w	r0, r7, #13
   b612e:	f7ff fdb0 	bl	b5c92 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6132:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6136:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6138:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b613c:	f00b 031f 	and.w	r3, fp, #31
   b6140:	220d      	movs	r2, #13
   b6142:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6144:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6148:	4353      	muls	r3, r2
   b614a:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b614c:	9905      	ldr	r1, [sp, #20]
   b614e:	4299      	cmp	r1, r3
   b6150:	f240 80d0 	bls.w	b62f4 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6154:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6158:	2a04      	cmp	r2, #4
   b615a:	fa5f fe82 	uxtb.w	lr, r2
   b615e:	f102 0001 	add.w	r0, r2, #1
   b6162:	f200 80cd 	bhi.w	b6300 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6166:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b616a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b616e:	280d      	cmp	r0, #13
   b6170:	f103 0301 	add.w	r3, r3, #1
   b6174:	4602      	mov	r2, r0
   b6176:	d1e9      	bne.n	b614c <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6178:	3e01      	subs	r6, #1
   b617a:	b2f6      	uxtb	r6, r6
   b617c:	e7b9      	b.n	b60f2 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b617e:	f04f 0901 	mov.w	r9, #1
   b6182:	e783      	b.n	b608c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6184:	7802      	ldrb	r2, [r0, #0]
   b6186:	2ae5      	cmp	r2, #229	; 0xe5
   b6188:	d000      	beq.n	b618c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b618a:	b97a      	cbnz	r2, b61ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b618c:	9904      	ldr	r1, [sp, #16]
   b618e:	2c00      	cmp	r4, #0
   b6190:	bf08      	it	eq
   b6192:	4641      	moveq	r1, r8
   b6194:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6196:	9903      	ldr	r1, [sp, #12]
   b6198:	428c      	cmp	r4, r1
        freeFound++;
   b619a:	bf3c      	itt	cc
   b619c:	3401      	addcc	r4, #1
   b619e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b61a0:	2a00      	cmp	r2, #0
   b61a2:	d080      	beq.n	b60a6 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b61a4:	2ae5      	cmp	r2, #229	; 0xe5
   b61a6:	d105      	bne.n	b61b4 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b61a8:	2600      	movs	r6, #0
   b61aa:	e76f      	b.n	b608c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b61ac:	9903      	ldr	r1, [sp, #12]
   b61ae:	428c      	cmp	r4, r1
   b61b0:	bf38      	it	cc
   b61b2:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b61b4:	2a2e      	cmp	r2, #46	; 0x2e
   b61b6:	d0f7      	beq.n	b61a8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b61b8:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b61ba:	290f      	cmp	r1, #15
   b61bc:	d14a      	bne.n	b6254 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b61be:	bb16      	cbnz	r6, b6206 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b61c0:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b61c4:	f43f af62 	beq.w	b608c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b61c8:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b61cc:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b61d0:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b61d2:	220d      	movs	r2, #13
   b61d4:	f10a 38ff 	add.w	r8, sl, #4294967295
   b61d8:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b61dc:	9a05      	ldr	r2, [sp, #20]
   b61de:	4542      	cmp	r2, r8
   b61e0:	d9e2      	bls.n	b61a8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b61e2:	eba2 0208 	sub.w	r2, r2, r8
   b61e6:	9208      	str	r2, [sp, #32]
   b61e8:	2200      	movs	r2, #0
   b61ea:	eb02 0108 	add.w	r1, r2, r8
   b61ee:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b61f0:	4618      	mov	r0, r3
   b61f2:	b2d1      	uxtb	r1, r2
   b61f4:	f7ff fd2c 	bl	b5c50 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b61f8:	9908      	ldr	r1, [sp, #32]
   b61fa:	428a      	cmp	r2, r1
   b61fc:	d10d      	bne.n	b621a <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b61fe:	2800      	cmp	r0, #0
   b6200:	bf18      	it	ne
   b6202:	2600      	movne	r6, #0
   b6204:	e742      	b.n	b608c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6206:	f10a 3aff 	add.w	sl, sl, #4294967295
   b620a:	fa5f fa8a 	uxtb.w	sl, sl
   b620e:	4552      	cmp	r2, sl
   b6210:	d1ca      	bne.n	b61a8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6212:	7b5a      	ldrb	r2, [r3, #13]
   b6214:	455a      	cmp	r2, fp
   b6216:	d0dc      	beq.n	b61d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6218:	e7c6      	b.n	b61a8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b621a:	28ff      	cmp	r0, #255	; 0xff
   b621c:	d8c4      	bhi.n	b61a8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b621e:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6222:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6226:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6228:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b622a:	bf9c      	itt	ls
   b622c:	f10e 0020 	addls.w	r0, lr, #32
   b6230:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6234:	4608      	mov	r0, r1
   b6236:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6238:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b623a:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b623e:	f1bc 0f19 	cmp.w	ip, #25
   b6242:	bf9c      	itt	ls
   b6244:	3120      	addls	r1, #32
   b6246:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6248:	4571      	cmp	r1, lr
   b624a:	d1ad      	bne.n	b61a8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b624c:	3201      	adds	r2, #1
   b624e:	2a0d      	cmp	r2, #13
   b6250:	d1cb      	bne.n	b61ea <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6252:	e71b      	b.n	b608c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6254:	0708      	lsls	r0, r1, #28
   b6256:	d4a7      	bmi.n	b61a8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6258:	b15e      	cbz	r6, b6272 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b625a:	f1ba 0f01 	cmp.w	sl, #1
   b625e:	f47f aeec 	bne.w	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6262:	4618      	mov	r0, r3
   b6264:	f7ff fd15 	bl	b5c92 <_ZN7FatFile11lfnChecksumEPh>
   b6268:	4558      	cmp	r0, fp
   b626a:	f47f aee6 	bne.w	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b626e:	46b1      	mov	r9, r6
   b6270:	e00e      	b.n	b6290 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6272:	ee18 1a10 	vmov	r1, s16
   b6276:	220b      	movs	r2, #11
   b6278:	4618      	mov	r0, r3
   b627a:	f00b f91f 	bl	c14bc <memcmp>
   b627e:	2800      	cmp	r0, #0
   b6280:	f47f af04 	bne.w	b608c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6284:	f897 9000 	ldrb.w	r9, [r7]
   b6288:	f019 0901 	ands.w	r9, r9, #1
   b628c:	f47f af77 	bne.w	b617e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6290:	9b06      	ldr	r3, [sp, #24]
   b6292:	0519      	lsls	r1, r3, #20
   b6294:	f53f aed1 	bmi.w	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6298:	9b06      	ldr	r3, [sp, #24]
   b629a:	9807      	ldr	r0, [sp, #28]
   b629c:	f8cd 9000 	str.w	r9, [sp]
   b62a0:	4642      	mov	r2, r8
   b62a2:	4629      	mov	r1, r5
   b62a4:	f000 fa4d 	bl	b6742 <_ZN7FatFile15openCachedEntryEPS_tih>
   b62a8:	e6c8      	b.n	b603c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b62aa:	2100      	movs	r1, #0
   b62ac:	4628      	mov	r0, r5
   b62ae:	f000 f9e6 	bl	b667e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b62b2:	b9a0      	cbnz	r0, b62de <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b62b4:	786b      	ldrb	r3, [r5, #1]
   b62b6:	2b00      	cmp	r3, #0
   b62b8:	f47f aebf 	bne.w	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b62bc:	4628      	mov	r0, r5
   b62be:	f000 f89f 	bl	b6400 <_ZN7FatFile13addDirClusterEv>
   b62c2:	2800      	cmp	r0, #0
   b62c4:	f43f aeb9 	beq.w	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b62c8:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b62ca:	791b      	ldrb	r3, [r3, #4]
   b62cc:	2b01      	cmp	r3, #1
   b62ce:	f63f aefb 	bhi.w	b60c8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b62d2:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b62d4:	3410      	adds	r4, #16
   b62d6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b62d8:	42a3      	cmp	r3, r4
   b62da:	d8ef      	bhi.n	b62bc <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b62dc:	e6f4      	b.n	b60c8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b62de:	3401      	adds	r4, #1
   b62e0:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b62e2:	e6ed      	b.n	b60c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b62e4:	4639      	mov	r1, r7
   b62e6:	4628      	mov	r0, r5
   b62e8:	f7ff fe46 	bl	b5f78 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b62ec:	2800      	cmp	r0, #0
   b62ee:	f47f aeef 	bne.w	b60d0 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b62f2:	e6a2      	b.n	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b62f4:	bf14      	ite	ne
   b62f6:	f04f 31ff 	movne.w	r1, #4294967295
   b62fa:	2100      	moveq	r1, #0
   b62fc:	b289      	uxth	r1, r1
   b62fe:	e72b      	b.n	b6158 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6300:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6304:	bf94      	ite	ls
   b6306:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b630a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b630e:	8091      	strh	r1, [r2, #4]
   b6310:	e72d      	b.n	b616e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6312:	4631      	mov	r1, r6
   b6314:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6316:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b631a:	f000 f9b0 	bl	b667e <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b631e:	4604      	mov	r4, r0
   b6320:	2800      	cmp	r0, #0
   b6322:	f43f ae8a 	beq.w	b603a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6326:	2220      	movs	r2, #32
   b6328:	4631      	mov	r1, r6
   b632a:	f00b f8ff 	bl	c152c <memset>
  memcpy(dir->name, fname->sfn, 11);
   b632e:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6332:	6023      	str	r3, [r4, #0]
   b6334:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6338:	6063      	str	r3, [r4, #4]
   b633a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b633e:	8123      	strh	r3, [r4, #8]
   b6340:	7dfb      	ldrb	r3, [r7, #23]
   b6342:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6344:	783b      	ldrb	r3, [r7, #0]
   b6346:	f003 0318 	and.w	r3, r3, #24
   b634a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b634c:	4b0f      	ldr	r3, [pc, #60]	; (b638c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b634e:	681b      	ldr	r3, [r3, #0]
   b6350:	b19b      	cbz	r3, b637a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6352:	f104 010e 	add.w	r1, r4, #14
   b6356:	f104 0010 	add.w	r0, r4, #16
   b635a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b635c:	8a23      	ldrh	r3, [r4, #16]
   b635e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6360:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6362:	89e3      	ldrh	r3, [r4, #14]
   b6364:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6366:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6368:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b636c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6370:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6374:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b6378:	e78e      	b.n	b6298 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b637a:	2321      	movs	r3, #33	; 0x21
   b637c:	7423      	strb	r3, [r4, #16]
   b637e:	2328      	movs	r3, #40	; 0x28
   b6380:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6382:	2308      	movs	r3, #8
   b6384:	73a6      	strb	r6, [r4, #14]
   b6386:	73e3      	strb	r3, [r4, #15]
   b6388:	e7e8      	b.n	b635c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b638a:	bf00      	nop
   b638c:	2003e610 	.word	0x2003e610

000b6390 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b6390:	b510      	push	{r4, lr}
   b6392:	460c      	mov	r4, r1
    return m_attr;
   b6394:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b6396:	b909      	cbnz	r1, b639c <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b6398:	2000      	movs	r0, #0
}
   b639a:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b639c:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b63a0:	d005      	beq.n	b63ae <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b63a2:	232f      	movs	r3, #47	; 0x2f
   b63a4:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b63a6:	2300      	movs	r3, #0
   b63a8:	7063      	strb	r3, [r4, #1]
  return true;
   b63aa:	2001      	movs	r0, #1
   b63ac:	e7f5      	b.n	b639a <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b63ae:	f000 f865 	bl	b647c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b63b2:	2800      	cmp	r0, #0
   b63b4:	d0f0      	beq.n	b6398 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b63b6:	4621      	mov	r1, r4
   b63b8:	f000 f86f 	bl	b649a <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b63bc:	e7f5      	b.n	b63aa <_ZN7FatFile6getSFNEPc+0x1a>

000b63be <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b63be:	b538      	push	{r3, r4, r5, lr}
   b63c0:	4604      	mov	r4, r0
   b63c2:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b63c4:	2224      	movs	r2, #36	; 0x24
   b63c6:	2100      	movs	r1, #0
   b63c8:	f00b f8b0 	bl	c152c <memset>

  m_vol = vol;
   b63cc:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b63ce:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b63d0:	2b10      	cmp	r3, #16
   b63d2:	d003      	beq.n	b63dc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b63d4:	2b20      	cmp	r3, #32
   b63d6:	d006      	beq.n	b63e6 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b63d8:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b63da:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b63dc:	2320      	movs	r3, #32
  m_flags = F_READ;
   b63de:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b63e0:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b63e2:	70a0      	strb	r0, [r4, #2]
  return true;
   b63e4:	e7f9      	b.n	b63da <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b63e6:	2340      	movs	r3, #64	; 0x40
   b63e8:	e7f9      	b.n	b63de <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b63ea <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b63ea:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b63ec:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b63ee:	f043 0304 	orr.w	r3, r3, #4
   b63f2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b63f4:	f100 0210 	add.w	r2, r0, #16
   b63f8:	6880      	ldr	r0, [r0, #8]
   b63fa:	f000 bc61 	b.w	b6cc0 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6400 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6404:	7801      	ldrb	r1, [r0, #0]
   b6406:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b640a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b640c:	d003      	beq.n	b6416 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b640e:	2600      	movs	r6, #0
}
   b6410:	4630      	mov	r0, r6
   b6412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6416:	6942      	ldr	r2, [r0, #20]
   b6418:	4b17      	ldr	r3, [pc, #92]	; (b6478 <_ZN7FatFile13addDirClusterEv+0x78>)
   b641a:	429a      	cmp	r2, r3
   b641c:	d2f7      	bcs.n	b640e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b641e:	f7ff ffe4 	bl	b63ea <_ZN7FatFile10addClusterEv>
   b6422:	4606      	mov	r6, r0
   b6424:	2800      	cmp	r0, #0
   b6426:	d0f2      	beq.n	b640e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6428:	6921      	ldr	r1, [r4, #16]
   b642a:	68a0      	ldr	r0, [r4, #8]
   b642c:	f000 fbdd 	bl	b6bea <_ZNK9FatVolume17clusterFirstBlockEm>
   b6430:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b6432:	68a0      	ldr	r0, [r4, #8]
   b6434:	2205      	movs	r2, #5
   b6436:	4639      	mov	r1, r7
   b6438:	3024      	adds	r0, #36	; 0x24
   b643a:	f000 fbb3 	bl	b6ba4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b643e:	4680      	mov	r8, r0
   b6440:	2800      	cmp	r0, #0
   b6442:	d0e4      	beq.n	b640e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6444:	4629      	mov	r1, r5
   b6446:	f44f 7200 	mov.w	r2, #512	; 0x200
   b644a:	f00b f86f 	bl	c152c <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b644e:	2501      	movs	r5, #1
   b6450:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6452:	791a      	ldrb	r2, [r3, #4]
   b6454:	42aa      	cmp	r2, r5
   b6456:	d909      	bls.n	b646c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6458:	6818      	ldr	r0, [r3, #0]
   b645a:	4642      	mov	r2, r8
   b645c:	19e9      	adds	r1, r5, r7
   b645e:	f000 ff0e 	bl	b727e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6462:	2800      	cmp	r0, #0
   b6464:	d0d3      	beq.n	b640e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6466:	3501      	adds	r5, #1
   b6468:	b2ed      	uxtb	r5, r5
   b646a:	e7f1      	b.n	b6450 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b646c:	6963      	ldr	r3, [r4, #20]
   b646e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6472:	6163      	str	r3, [r4, #20]
  return true;
   b6474:	e7cc      	b.n	b6410 <_ZN7FatFile13addDirClusterEv+0x10>
   b6476:	bf00      	nop
   b6478:	001ffe00 	.word	0x001ffe00

000b647c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b647c:	b510      	push	{r4, lr}
   b647e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6480:	6880      	ldr	r0, [r0, #8]
   b6482:	460a      	mov	r2, r1
   b6484:	3024      	adds	r0, #36	; 0x24
   b6486:	69a1      	ldr	r1, [r4, #24]
   b6488:	f000 fb8c 	bl	b6ba4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b648c:	b120      	cbz	r0, b6498 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b648e:	88a3      	ldrh	r3, [r4, #4]
   b6490:	f003 030f 	and.w	r3, r3, #15
   b6494:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6498:	bd10      	pop	{r4, pc}

000b649a <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b649a:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b649c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b649e:	4604      	mov	r4, r0
   b64a0:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b64a2:	2608      	movs	r6, #8
  uint8_t j = 0;
   b64a4:	4618      	mov	r0, r3
      name[j++] = '.';
   b64a6:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b64a8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b64ac:	2a20      	cmp	r2, #32
   b64ae:	d018      	beq.n	b64e2 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b64b0:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b64b2:	bf02      	ittt	eq
   b64b4:	540f      	strbeq	r7, [r1, r0]
   b64b6:	1c42      	addeq	r2, r0, #1
   b64b8:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b64ba:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b64bc:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b64c0:	bf08      	it	eq
   b64c2:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b64c4:	f1bc 0f19 	cmp.w	ip, #25
   b64c8:	d806      	bhi.n	b64d8 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b64ca:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b64ce:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b64d2:	bf1c      	itt	ne
   b64d4:	3220      	addne	r2, #32
   b64d6:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b64d8:	f100 0c01 	add.w	ip, r0, #1
   b64dc:	540a      	strb	r2, [r1, r0]
   b64de:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b64e2:	3301      	adds	r3, #1
   b64e4:	b2db      	uxtb	r3, r3
   b64e6:	2b0b      	cmp	r3, #11
   b64e8:	d1de      	bne.n	b64a8 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b64ea:	2300      	movs	r3, #0
   b64ec:	540b      	strb	r3, [r1, r0]
}
   b64ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b64f0 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b64f0:	7803      	ldrb	r3, [r0, #0]
   b64f2:	b90b      	cbnz	r3, b64f8 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b64f4:	f7ff bf63 	b.w	b63be <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b64f8:	2000      	movs	r0, #0
   b64fa:	4770      	bx	lr

000b64fc <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b64fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6500:	7803      	ldrb	r3, [r0, #0]
   b6502:	4604      	mov	r4, r0
   b6504:	4688      	mov	r8, r1
   b6506:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6508:	2b00      	cmp	r3, #0
   b650a:	d05d      	beq.n	b65c8 <_ZN7FatFile4readEPvj+0xcc>
   b650c:	7882      	ldrb	r2, [r0, #2]
   b650e:	07d1      	lsls	r1, r2, #31
   b6510:	d55a      	bpl.n	b65c8 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6512:	071a      	lsls	r2, r3, #28
   b6514:	d52d      	bpl.n	b6572 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6516:	69c3      	ldr	r3, [r0, #28]
   b6518:	6942      	ldr	r2, [r0, #20]
   b651a:	1a9b      	subs	r3, r3, r2
   b651c:	429d      	cmp	r5, r3
   b651e:	bf28      	it	cs
   b6520:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6522:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6524:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6528:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b652c:	2e00      	cmp	r6, #0
   b652e:	f000 808f 	beq.w	b6650 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6532:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6534:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6536:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6538:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b653a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b653e:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6542:	d51f      	bpl.n	b6584 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6544:	6a00      	ldr	r0, [r0, #32]
   b6546:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6548:	68a0      	ldr	r0, [r4, #8]
   b654a:	f1ba 0f00 	cmp.w	sl, #0
   b654e:	d142      	bne.n	b65d6 <_ZN7FatFile4readEPvj+0xda>
   b6550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6554:	d33f      	bcc.n	b65d6 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b6556:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6558:	4299      	cmp	r1, r3
   b655a:	d03c      	beq.n	b65d6 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b655c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6560:	d252      	bcs.n	b6608 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6562:	6800      	ldr	r0, [r0, #0]
   b6564:	4642      	mov	r2, r8
   b6566:	f000 fe01 	bl	b716c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b656a:	b368      	cbz	r0, b65c8 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b656c:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6570:	e044      	b.n	b65fc <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6572:	069b      	lsls	r3, r3, #26
   b6574:	d5d5      	bpl.n	b6522 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6576:	6883      	ldr	r3, [r0, #8]
   b6578:	891a      	ldrh	r2, [r3, #8]
   b657a:	6943      	ldr	r3, [r0, #20]
   b657c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6580:	b29b      	uxth	r3, r3
   b6582:	e7cb      	b.n	b651c <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b6584:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6588:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b658c:	f1ba 0f00 	cmp.w	sl, #0
   b6590:	d108      	bne.n	b65a4 <_ZN7FatFile4readEPvj+0xa8>
   b6592:	f1b9 0f00 	cmp.w	r9, #0
   b6596:	d105      	bne.n	b65a4 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6598:	b95b      	cbnz	r3, b65b2 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b659a:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b659c:	bf4c      	ite	mi
   b659e:	6a03      	ldrmi	r3, [r0, #32]
   b65a0:	6a23      	ldrpl	r3, [r4, #32]
   b65a2:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b65a4:	6921      	ldr	r1, [r4, #16]
   b65a6:	68a0      	ldr	r0, [r4, #8]
   b65a8:	f000 fb1f 	bl	b6bea <_ZNK9FatVolume17clusterFirstBlockEm>
   b65ac:	eb09 0100 	add.w	r1, r9, r0
   b65b0:	e7ca      	b.n	b6548 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b65b2:	6921      	ldr	r1, [r4, #16]
   b65b4:	465a      	mov	r2, fp
   b65b6:	f000 fb1e 	bl	b6bf6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b65ba:	2800      	cmp	r0, #0
   b65bc:	db04      	blt.n	b65c8 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b65be:	d1f1      	bne.n	b65a4 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b65c0:	7823      	ldrb	r3, [r4, #0]
   b65c2:	f013 0f70 	tst.w	r3, #112	; 0x70
   b65c6:	d143      	bne.n	b6650 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b65c8:	7863      	ldrb	r3, [r4, #1]
   b65ca:	f043 0302 	orr.w	r3, r3, #2
   b65ce:	7063      	strb	r3, [r4, #1]
  return -1;
   b65d0:	f04f 30ff 	mov.w	r0, #4294967295
   b65d4:	e03d      	b.n	b6652 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b65d6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b65da:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b65dc:	f04f 0200 	mov.w	r2, #0
   b65e0:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b65e4:	bf28      	it	cs
   b65e6:	4637      	movcs	r7, r6
   b65e8:	f000 fadc 	bl	b6ba4 <_ZN8FatCache4readEmh>
      if (!pc) {
   b65ec:	2800      	cmp	r0, #0
   b65ee:	d0eb      	beq.n	b65c8 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b65f0:	eb00 010a 	add.w	r1, r0, sl
   b65f4:	463a      	mov	r2, r7
   b65f6:	4640      	mov	r0, r8
   b65f8:	f00a ff70 	bl	c14dc <memcpy>
    m_curPosition += n;
   b65fc:	6963      	ldr	r3, [r4, #20]
   b65fe:	443b      	add	r3, r7
    dst += n;
   b6600:	44b8      	add	r8, r7
    m_curPosition += n;
   b6602:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6604:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6606:	e791      	b.n	b652c <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6608:	7822      	ldrb	r2, [r4, #0]
   b660a:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b660c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6610:	d406      	bmi.n	b6620 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6612:	7902      	ldrb	r2, [r0, #4]
   b6614:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6618:	b2d2      	uxtb	r2, r2
   b661a:	4592      	cmp	sl, r2
   b661c:	bf28      	it	cs
   b661e:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6620:	4299      	cmp	r1, r3
      n = 512*nb;
   b6622:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6626:	d208      	bcs.n	b663a <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6628:	68a0      	ldr	r0, [r4, #8]
   b662a:	4653      	mov	r3, sl
   b662c:	6800      	ldr	r0, [r0, #0]
   b662e:	4642      	mov	r2, r8
   b6630:	f000 fde4 	bl	b71fc <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6634:	2800      	cmp	r0, #0
   b6636:	d1e1      	bne.n	b65fc <_ZN7FatFile4readEPvj+0x100>
   b6638:	e7c6      	b.n	b65c8 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b663a:	4453      	add	r3, sl
   b663c:	428b      	cmp	r3, r1
   b663e:	d9f3      	bls.n	b6628 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6640:	3024      	adds	r0, #36	; 0x24
   b6642:	9101      	str	r1, [sp, #4]
   b6644:	f000 fa86 	bl	b6b54 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6648:	9901      	ldr	r1, [sp, #4]
   b664a:	2800      	cmp	r0, #0
   b664c:	d1ec      	bne.n	b6628 <_ZN7FatFile4readEPvj+0x12c>
   b664e:	e7bb      	b.n	b65c8 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6650:	1ba8      	subs	r0, r5, r6
}
   b6652:	b003      	add	sp, #12
   b6654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6658 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6658:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b665a:	2201      	movs	r2, #1
   b665c:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6660:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6664:	4604      	mov	r4, r0
   b6666:	f7ff ff49 	bl	b64fc <_ZN7FatFile4readEPvj>
   b666a:	2801      	cmp	r0, #1
   b666c:	bf0a      	itet	eq
   b666e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6672:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6676:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b667a:	b002      	add	sp, #8
   b667c:	bd70      	pop	{r4, r5, r6, pc}

000b667e <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b667e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6680:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b6682:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6686:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6688:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b668c:	d000      	beq.n	b6690 <_ZN7FatFile12readDirCacheEb+0x12>
   b668e:	b999      	cbnz	r1, b66b8 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6690:	2201      	movs	r2, #1
   b6692:	f10d 0107 	add.w	r1, sp, #7
   b6696:	4620      	mov	r0, r4
   b6698:	f7ff ff30 	bl	b64fc <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b669c:	b240      	sxtb	r0, r0
   b669e:	2801      	cmp	r0, #1
   b66a0:	d002      	beq.n	b66a8 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b66a2:	2000      	movs	r0, #0
}
   b66a4:	b003      	add	sp, #12
   b66a6:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b66a8:	6963      	ldr	r3, [r4, #20]
   b66aa:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b66ac:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b66ae:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b66b0:	3030      	adds	r0, #48	; 0x30
   b66b2:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b66b6:	e7f5      	b.n	b66a4 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b66b8:	3320      	adds	r3, #32
   b66ba:	e7f7      	b.n	b66ac <_ZN7FatFile12readDirCacheEb+0x2e>

000b66bc <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b66bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b66c0:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b66c2:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b66c4:	4604      	mov	r4, r0
   b66c6:	460d      	mov	r5, r1
  if (!isOpen()) {
   b66c8:	b162      	cbz	r2, b66e4 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b66ca:	6940      	ldr	r0, [r0, #20]
   b66cc:	4288      	cmp	r0, r1
   b66ce:	d002      	beq.n	b66d6 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b66d0:	b919      	cbnz	r1, b66da <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b66d2:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b66d4:	6165      	str	r5, [r4, #20]
    return true;
   b66d6:	2001      	movs	r0, #1
   b66d8:	e006      	b.n	b66e8 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b66da:	0716      	lsls	r6, r2, #28
   b66dc:	d506      	bpl.n	b66ec <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b66de:	69e3      	ldr	r3, [r4, #28]
   b66e0:	428b      	cmp	r3, r1
   b66e2:	d20b      	bcs.n	b66fc <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b66e4:	6127      	str	r7, [r4, #16]
  return false;
   b66e6:	2000      	movs	r0, #0
}
   b66e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b66ec:	0691      	lsls	r1, r2, #26
   b66ee:	d505      	bpl.n	b66fc <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b66f0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b66f2:	891b      	ldrh	r3, [r3, #8]
   b66f4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b66f8:	d9ec      	bls.n	b66d4 <_ZN7FatFile7seekSetEm+0x18>
   b66fa:	e7f3      	b.n	b66e4 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b66fc:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6700:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6704:	1e43      	subs	r3, r0, #1
   b6706:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b670a:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b670c:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b670e:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6710:	42b3      	cmp	r3, r6
   b6712:	d800      	bhi.n	b6716 <_ZN7FatFile7seekSetEm+0x5a>
   b6714:	b998      	cbnz	r0, b673e <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6716:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6718:	bf4c      	ite	mi
   b671a:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b671e:	6a23      	ldrpl	r3, [r4, #32]
   b6720:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6722:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6726:	2e00      	cmp	r6, #0
   b6728:	d0d4      	beq.n	b66d4 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b672a:	6921      	ldr	r1, [r4, #16]
   b672c:	68a0      	ldr	r0, [r4, #8]
   b672e:	4642      	mov	r2, r8
   b6730:	f000 fa61 	bl	b6bf6 <_ZN9FatVolume6fatGetEmPm>
   b6734:	2800      	cmp	r0, #0
   b6736:	f106 36ff 	add.w	r6, r6, #4294967295
   b673a:	dcf4      	bgt.n	b6726 <_ZN7FatFile7seekSetEm+0x6a>
   b673c:	e7d2      	b.n	b66e4 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b673e:	1af6      	subs	r6, r6, r3
   b6740:	e7ef      	b.n	b6722 <_ZN7FatFile7seekSetEm+0x66>

000b6742 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6744:	460f      	mov	r7, r1
   b6746:	4604      	mov	r4, r0
   b6748:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b674a:	2100      	movs	r1, #0
   b674c:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b674e:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6750:	f00a feec 	bl	c152c <memset>
  m_vol = dirFile->m_vol;
   b6754:	68b8      	ldr	r0, [r7, #8]
   b6756:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6758:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b675a:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b675e:	6a3b      	ldr	r3, [r7, #32]
   b6760:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6762:	016a      	lsls	r2, r5, #5
   b6764:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6768:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b676c:	071f      	lsls	r7, r3, #28
   b676e:	d444      	bmi.n	b67fa <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6770:	f003 0317 	and.w	r3, r3, #23
   b6774:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6776:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b677a:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b677e:	bf04      	itt	eq
   b6780:	f043 0308 	orreq.w	r3, r3, #8
   b6784:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6786:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b678a:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b678c:	f006 0303 	and.w	r3, r6, #3
   b6790:	2b01      	cmp	r3, #1
   b6792:	d02c      	beq.n	b67ee <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b6794:	2b02      	cmp	r3, #2
   b6796:	d028      	beq.n	b67ea <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6798:	bb7b      	cbnz	r3, b67fa <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b679a:	0571      	lsls	r1, r6, #21
   b679c:	d42d      	bmi.n	b67fa <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b679e:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b67a0:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b67a2:	78a1      	ldrb	r1, [r4, #2]
   b67a4:	078b      	lsls	r3, r1, #30
   b67a6:	d504      	bpl.n	b67b2 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b67a8:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b67aa:	06df      	lsls	r7, r3, #27
   b67ac:	d425      	bmi.n	b67fa <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b67ae:	07dd      	lsls	r5, r3, #31
   b67b0:	d423      	bmi.n	b67fa <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b67b2:	11b3      	asrs	r3, r6, #6
   b67b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b67b8:	f006 0508 	and.w	r5, r6, #8
   b67bc:	432b      	orrs	r3, r5
   b67be:	430b      	orrs	r3, r1
   b67c0:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b67c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b67c4:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b67c6:	1883      	adds	r3, r0, r2
   b67c8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b67cc:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b67d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b67d4:	0572      	lsls	r2, r6, #21
   b67d6:	d513      	bpl.n	b6800 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b67d8:	b959      	cbnz	r1, b67f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b67da:	78a3      	ldrb	r3, [r4, #2]
   b67dc:	f043 0304 	orr.w	r3, r3, #4
   b67e0:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b67e2:	0473      	lsls	r3, r6, #17
   b67e4:	d410      	bmi.n	b6808 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b67e6:	2001      	movs	r0, #1
}
   b67e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b67ea:	2303      	movs	r3, #3
   b67ec:	e7d8      	b.n	b67a0 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b67ee:	2302      	movs	r3, #2
   b67f0:	e7d6      	b.n	b67a0 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b67f2:	f000 faa0 	bl	b6d36 <_ZN9FatVolume9freeChainEm>
   b67f6:	2800      	cmp	r0, #0
   b67f8:	d1ef      	bne.n	b67da <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b67fa:	2000      	movs	r0, #0
   b67fc:	7020      	strb	r0, [r4, #0]
  return false;
   b67fe:	e7f3      	b.n	b67e8 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6800:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6804:	61e3      	str	r3, [r4, #28]
   b6806:	e7ec      	b.n	b67e2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6808:	69e1      	ldr	r1, [r4, #28]
   b680a:	4620      	mov	r0, r4
   b680c:	f7ff ff56 	bl	b66bc <_ZN7FatFile7seekSetEm>
   b6810:	2800      	cmp	r0, #0
   b6812:	d1e8      	bne.n	b67e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6814:	e7f1      	b.n	b67fa <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6816 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b6816:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b681a:	7803      	ldrb	r3, [r0, #0]
   b681c:	4607      	mov	r7, r0
   b681e:	460d      	mov	r5, r1
   b6820:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b6822:	bb53      	cbnz	r3, b687a <_ZN7FatFile8openNextEPS_i+0x64>
   b6824:	780b      	ldrb	r3, [r1, #0]
   b6826:	f013 0f70 	tst.w	r3, #112	; 0x70
   b682a:	d026      	beq.n	b687a <_ZN7FatFile8openNextEPS_i+0x64>
   b682c:	694c      	ldr	r4, [r1, #20]
   b682e:	f014 041f 	ands.w	r4, r4, #31
   b6832:	d122      	bne.n	b687a <_ZN7FatFile8openNextEPS_i+0x64>
   b6834:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6836:	2100      	movs	r1, #0
   b6838:	4628      	mov	r0, r5
    return m_curPosition;
   b683a:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b683e:	f7ff ff1e 	bl	b667e <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6842:	b1d0      	cbz	r0, b687a <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6844:	7806      	ldrb	r6, [r0, #0]
   b6846:	b1c6      	cbz	r6, b687a <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6848:	2e2e      	cmp	r6, #46	; 0x2e
   b684a:	d010      	beq.n	b686e <_ZN7FatFile8openNextEPS_i+0x58>
   b684c:	2ee5      	cmp	r6, #229	; 0xe5
   b684e:	d00e      	beq.n	b686e <_ZN7FatFile8openNextEPS_i+0x58>
   b6850:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6852:	071a      	lsls	r2, r3, #28
   b6854:	d413      	bmi.n	b687e <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6856:	b964      	cbnz	r4, b6872 <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6858:	9400      	str	r4, [sp, #0]
   b685a:	4653      	mov	r3, sl
   b685c:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6860:	4629      	mov	r1, r5
   b6862:	4638      	mov	r0, r7
   b6864:	f7ff ff6d 	bl	b6742 <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6868:	b002      	add	sp, #8
   b686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b686e:	2400      	movs	r4, #0
   b6870:	e7e1      	b.n	b6836 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6872:	f7ff fa0e 	bl	b5c92 <_ZN7FatFile11lfnChecksumEPh>
   b6876:	4540      	cmp	r0, r8
   b6878:	d0ee      	beq.n	b6858 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b687a:	2000      	movs	r0, #0
   b687c:	e7f4      	b.n	b6868 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b687e:	2b0f      	cmp	r3, #15
   b6880:	d1f5      	bne.n	b686e <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6882:	0673      	lsls	r3, r6, #25
   b6884:	d5d7      	bpl.n	b6836 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b6886:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b688a:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b688e:	e7d2      	b.n	b6836 <_ZN7FatFile8openNextEPS_i+0x20>

000b6890 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6890:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b6892:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b6894:	4604      	mov	r4, r0
  if (!isOpen()) {
   b6896:	b90b      	cbnz	r3, b689c <_ZN7FatFile4syncEv+0xc>
    return true;
   b6898:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b689a:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b689c:	7883      	ldrb	r3, [r0, #2]
   b689e:	075a      	lsls	r2, r3, #29
   b68a0:	d523      	bpl.n	b68ea <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b68a2:	2101      	movs	r1, #1
   b68a4:	f7ff fdea 	bl	b647c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b68a8:	4605      	mov	r5, r0
   b68aa:	b928      	cbnz	r0, b68b8 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b68ac:	7863      	ldrb	r3, [r4, #1]
   b68ae:	f043 0301 	orr.w	r3, r3, #1
   b68b2:	7063      	strb	r3, [r4, #1]
  return false;
   b68b4:	2000      	movs	r0, #0
   b68b6:	e7f0      	b.n	b689a <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b68b8:	7803      	ldrb	r3, [r0, #0]
   b68ba:	2be5      	cmp	r3, #229	; 0xe5
   b68bc:	d0f6      	beq.n	b68ac <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b68be:	7823      	ldrb	r3, [r4, #0]
   b68c0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b68c2:	bf44      	itt	mi
   b68c4:	69e3      	ldrmi	r3, [r4, #28]
   b68c6:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b68c8:	6a23      	ldr	r3, [r4, #32]
   b68ca:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b68cc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b68ce:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b68d0:	4b09      	ldr	r3, [pc, #36]	; (b68f8 <_ZN7FatFile4syncEv+0x68>)
   b68d2:	681b      	ldr	r3, [r3, #0]
   b68d4:	b12b      	cbz	r3, b68e2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b68d6:	f100 0116 	add.w	r1, r0, #22
   b68da:	3018      	adds	r0, #24
   b68dc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b68de:	8b2b      	ldrh	r3, [r5, #24]
   b68e0:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b68e2:	78a3      	ldrb	r3, [r4, #2]
   b68e4:	f023 0304 	bic.w	r3, r3, #4
   b68e8:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b68ea:	68a0      	ldr	r0, [r4, #8]
   b68ec:	f7ff f9c4 	bl	b5c78 <_ZN9FatVolume9cacheSyncEv>
   b68f0:	2800      	cmp	r0, #0
   b68f2:	d0db      	beq.n	b68ac <_ZN7FatFile4syncEv+0x1c>
   b68f4:	e7d0      	b.n	b6898 <_ZN7FatFile4syncEv+0x8>
   b68f6:	bf00      	nop
   b68f8:	2003e610 	.word	0x2003e610

000b68fc <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b68fc:	b510      	push	{r4, lr}
   b68fe:	4604      	mov	r4, r0
  bool rtn = sync();
   b6900:	f7ff ffc6 	bl	b6890 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6904:	2300      	movs	r3, #0
   b6906:	7023      	strb	r3, [r4, #0]
}
   b6908:	bd10      	pop	{r4, pc}

000b690a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b690a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b690c:	b093      	sub	sp, #76	; 0x4c
   b690e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6910:	2300      	movs	r3, #0
   b6912:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6914:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6916:	9201      	str	r2, [sp, #4]
   b6918:	4606      	mov	r6, r0
   b691a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b691c:	b113      	cbz	r3, b6924 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b691e:	2000      	movs	r0, #0
}
   b6920:	b013      	add	sp, #76	; 0x4c
   b6922:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6924:	780b      	ldrb	r3, [r1, #0]
   b6926:	f013 0f70 	tst.w	r3, #112	; 0x70
   b692a:	d0f8      	beq.n	b691e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b692c:	7813      	ldrb	r3, [r2, #0]
   b692e:	2b2f      	cmp	r3, #47	; 0x2f
   b6930:	d112      	bne.n	b6958 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6932:	9a01      	ldr	r2, [sp, #4]
   b6934:	7813      	ldrb	r3, [r2, #0]
   b6936:	2b2f      	cmp	r3, #47	; 0x2f
   b6938:	d102      	bne.n	b6940 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b693a:	3201      	adds	r2, #1
   b693c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b693e:	e7f8      	b.n	b6932 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6940:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6942:	b91b      	cbnz	r3, b694c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6944:	4630      	mov	r0, r6
   b6946:	f7ff fdd3 	bl	b64f0 <_ZN7FatFile8openRootEP9FatVolume>
   b694a:	e7e9      	b.n	b6920 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b694c:	a809      	add	r0, sp, #36	; 0x24
   b694e:	f7ff fd36 	bl	b63be <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6952:	2800      	cmp	r0, #0
   b6954:	d0e3      	beq.n	b691e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6956:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6958:	9801      	ldr	r0, [sp, #4]
   b695a:	aa01      	add	r2, sp, #4
   b695c:	a903      	add	r1, sp, #12
   b695e:	f7ff fa2d 	bl	b5dbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6962:	2800      	cmp	r0, #0
   b6964:	d0db      	beq.n	b691e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6966:	9b01      	ldr	r3, [sp, #4]
   b6968:	781b      	ldrb	r3, [r3, #0]
   b696a:	b19b      	cbz	r3, b6994 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b696c:	2300      	movs	r3, #0
   b696e:	aa03      	add	r2, sp, #12
   b6970:	4621      	mov	r1, r4
   b6972:	4630      	mov	r0, r6
   b6974:	f7ff fb54 	bl	b6020 <_ZN7FatFile4openEPS_P7fname_ti>
   b6978:	2800      	cmp	r0, #0
   b697a:	d0d0      	beq.n	b691e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b697c:	4635      	mov	r5, r6
   b697e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6980:	ac09      	add	r4, sp, #36	; 0x24
   b6982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6988:	682b      	ldr	r3, [r5, #0]
   b698a:	6023      	str	r3, [r4, #0]
    close();
   b698c:	4630      	mov	r0, r6
   b698e:	f7ff ffb5 	bl	b68fc <_ZN7FatFile5closeEv>
  while (1) {
   b6992:	e7e0      	b.n	b6956 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6994:	463b      	mov	r3, r7
   b6996:	aa03      	add	r2, sp, #12
   b6998:	4621      	mov	r1, r4
   b699a:	4630      	mov	r0, r6
   b699c:	f7ff fb40 	bl	b6020 <_ZN7FatFile4openEPS_P7fname_ti>
   b69a0:	e7be      	b.n	b6920 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b69a4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b69a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b69a8:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b69aa:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b69ac:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b69ae:	4604      	mov	r4, r0
   b69b0:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b69b2:	d55b      	bpl.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
   b69b4:	7883      	ldrb	r3, [r0, #2]
   b69b6:	079a      	lsls	r2, r3, #30
   b69b8:	d558      	bpl.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b69ba:	071b      	lsls	r3, r3, #28
   b69bc:	d451      	bmi.n	b6a62 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b69be:	6963      	ldr	r3, [r4, #20]
   b69c0:	43db      	mvns	r3, r3
   b69c2:	42bb      	cmp	r3, r7
   b69c4:	d352      	bcc.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
   b69c6:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b69c8:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b69cc:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b69ce:	f1b8 0f00 	cmp.w	r8, #0
   b69d2:	f000 8091 	beq.w	b6af8 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b69d6:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b69d8:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b69da:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b69de:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b69e2:	d10e      	bne.n	b6a02 <_ZN7FatFile5writeEPKvj+0x5e>
   b69e4:	b96d      	cbnz	r5, b6a02 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b69e6:	6921      	ldr	r1, [r4, #16]
   b69e8:	2900      	cmp	r1, #0
   b69ea:	d046      	beq.n	b6a7a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b69ec:	4652      	mov	r2, sl
   b69ee:	f000 f902 	bl	b6bf6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b69f2:	2800      	cmp	r0, #0
   b69f4:	db3a      	blt.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b69f6:	d104      	bne.n	b6a02 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b69f8:	4620      	mov	r0, r4
   b69fa:	f7ff fcf6 	bl	b63ea <_ZN7FatFile10addClusterEv>
   b69fe:	2800      	cmp	r0, #0
   b6a00:	d034      	beq.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6a02:	6921      	ldr	r1, [r4, #16]
   b6a04:	68a0      	ldr	r0, [r4, #8]
   b6a06:	f000 f8f0 	bl	b6bea <_ZNK9FatVolume17clusterFirstBlockEm>
   b6a0a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6a0c:	68a0      	ldr	r0, [r4, #8]
   b6a0e:	b915      	cbnz	r5, b6a16 <_ZN7FatFile5writeEPKvj+0x72>
   b6a10:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6a14:	d23f      	bcs.n	b6a96 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6a16:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6a1a:	4546      	cmp	r6, r8
   b6a1c:	bf28      	it	cs
   b6a1e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6a20:	2d00      	cmp	r5, #0
   b6a22:	d136      	bne.n	b6a92 <_ZN7FatFile5writeEPKvj+0xee>
   b6a24:	6962      	ldr	r2, [r4, #20]
   b6a26:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6a28:	429a      	cmp	r2, r3
   b6a2a:	bf34      	ite	cc
   b6a2c:	2201      	movcc	r2, #1
   b6a2e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6a30:	3024      	adds	r0, #36	; 0x24
   b6a32:	f000 f8b7 	bl	b6ba4 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6a36:	b1c8      	cbz	r0, b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6a38:	4428      	add	r0, r5
   b6a3a:	4632      	mov	r2, r6
   b6a3c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6a3e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6a40:	f00a fd4c 	bl	c14dc <memcpy>
      if (512 == (n + blockOffset)) {
   b6a44:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6a48:	d104      	bne.n	b6a54 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6a4a:	68a0      	ldr	r0, [r4, #8]
   b6a4c:	3024      	adds	r0, #36	; 0x24
   b6a4e:	f000 f881 	bl	b6b54 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6a52:	b158      	cbz	r0, b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6a54:	6963      	ldr	r3, [r4, #20]
   b6a56:	4433      	add	r3, r6
   b6a58:	6163      	str	r3, [r4, #20]
    src += n;
   b6a5a:	44b1      	add	r9, r6
    nToWrite -= n;
   b6a5c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6a60:	e7b4      	b.n	b69cc <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6a62:	69c1      	ldr	r1, [r0, #28]
   b6a64:	f7ff fe2a 	bl	b66bc <_ZN7FatFile7seekSetEm>
   b6a68:	2800      	cmp	r0, #0
   b6a6a:	d1a8      	bne.n	b69be <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6a6c:	7863      	ldrb	r3, [r4, #1]
   b6a6e:	f043 0301 	orr.w	r3, r3, #1
   b6a72:	7063      	strb	r3, [r4, #1]
  return -1;
   b6a74:	f04f 30ff 	mov.w	r0, #4294967295
   b6a78:	e050      	b.n	b6b1c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6a7a:	6a23      	ldr	r3, [r4, #32]
   b6a7c:	b93b      	cbnz	r3, b6a8e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6a7e:	4620      	mov	r0, r4
   b6a80:	f7ff fcb3 	bl	b63ea <_ZN7FatFile10addClusterEv>
   b6a84:	2800      	cmp	r0, #0
   b6a86:	d0f1      	beq.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6a88:	6923      	ldr	r3, [r4, #16]
   b6a8a:	6223      	str	r3, [r4, #32]
   b6a8c:	e7b9      	b.n	b6a02 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6a8e:	6123      	str	r3, [r4, #16]
   b6a90:	e7b7      	b.n	b6a02 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6a92:	2201      	movs	r2, #1
   b6a94:	e7cc      	b.n	b6a30 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6a96:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6a9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6a9c:	d31b      	bcc.n	b6ad6 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6a9e:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6aa2:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6aa6:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6aa8:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6aac:	4573      	cmp	r3, lr
   b6aae:	bf28      	it	cs
   b6ab0:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6ab2:	4291      	cmp	r1, r2
      n = 512*nb;
   b6ab4:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6ab8:	d307      	bcc.n	b6aca <_ZN7FatFile5writeEPKvj+0x126>
   b6aba:	441a      	add	r2, r3
   b6abc:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6abe:	bf82      	ittt	hi
   b6ac0:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b6ac4:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6ac8:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6aca:	68a5      	ldr	r5, [r4, #8]
   b6acc:	464a      	mov	r2, r9
   b6ace:	6828      	ldr	r0, [r5, #0]
   b6ad0:	f000 fc4b 	bl	b736a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6ad4:	e7bd      	b.n	b6a52 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6ad6:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6ad8:	bf02      	ittt	eq
   b6ada:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b6ade:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6ae2:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6ae4:	68a3      	ldr	r3, [r4, #8]
   b6ae6:	464a      	mov	r2, r9
   b6ae8:	6818      	ldr	r0, [r3, #0]
   b6aea:	f000 fbc8 	bl	b727e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6aee:	2800      	cmp	r0, #0
   b6af0:	d0bc      	beq.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6af2:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6af6:	e7ad      	b.n	b6a54 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6af8:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6afa:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6afc:	42b2      	cmp	r2, r6
   b6afe:	d204      	bcs.n	b6b0a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6b00:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6b02:	f043 0304 	orr.w	r3, r3, #4
   b6b06:	70a3      	strb	r3, [r4, #2]
   b6b08:	e003      	b.n	b6b12 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6b0a:	4a08      	ldr	r2, [pc, #32]	; (b6b2c <_ZN7FatFile5writeEPKvj+0x188>)
   b6b0c:	6812      	ldr	r2, [r2, #0]
   b6b0e:	2a00      	cmp	r2, #0
   b6b10:	d1f7      	bne.n	b6b02 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6b12:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6b16:	2b00      	cmp	r3, #0
   b6b18:	db02      	blt.n	b6b20 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6b1a:	4638      	mov	r0, r7
}
   b6b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6b20:	4620      	mov	r0, r4
   b6b22:	f7ff feb5 	bl	b6890 <_ZN7FatFile4syncEv>
   b6b26:	2800      	cmp	r0, #0
   b6b28:	d1f7      	bne.n	b6b1a <_ZN7FatFile5writeEPKvj+0x176>
   b6b2a:	e79f      	b.n	b6a6c <_ZN7FatFile5writeEPKvj+0xc8>
   b6b2c:	2003e610 	.word	0x2003e610

000b6b30 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6b30:	b513      	push	{r0, r1, r4, lr}
   b6b32:	4604      	mov	r4, r0
    }
   b6b34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6b36:	b159      	cbz	r1, b6b50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6b38:	9101      	str	r1, [sp, #4]
   b6b3a:	f00a fd82 	bl	c1642 <strlen>
   b6b3e:	6823      	ldr	r3, [r4, #0]
   b6b40:	9901      	ldr	r1, [sp, #4]
   b6b42:	68db      	ldr	r3, [r3, #12]
   b6b44:	4602      	mov	r2, r0
   b6b46:	4620      	mov	r0, r4
    }
   b6b48:	b002      	add	sp, #8
   b6b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6b4e:	4718      	bx	r3
    }
   b6b50:	b002      	add	sp, #8
   b6b52:	bd10      	pop	{r4, pc}

000b6b54 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6b56:	7803      	ldrb	r3, [r0, #0]
   b6b58:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6b5a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6b5c:	d520      	bpl.n	b6ba0 <_ZN8FatCache4syncEv+0x4c>
   b6b5e:	6843      	ldr	r3, [r0, #4]
   b6b60:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6b62:	f100 020c 	add.w	r2, r0, #12
   b6b66:	6818      	ldr	r0, [r3, #0]
   b6b68:	9201      	str	r2, [sp, #4]
   b6b6a:	f000 fb88 	bl	b727e <_ZN9SdSpiCard10writeBlockEmPKh>
   b6b6e:	9a01      	ldr	r2, [sp, #4]
   b6b70:	4605      	mov	r5, r0
   b6b72:	b918      	cbnz	r0, b6b7c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6b74:	2500      	movs	r5, #0
}
   b6b76:	4628      	mov	r0, r5
   b6b78:	b003      	add	sp, #12
   b6b7a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6b7c:	7823      	ldrb	r3, [r4, #0]
   b6b7e:	079b      	lsls	r3, r3, #30
   b6b80:	d404      	bmi.n	b6b8c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6b82:	7823      	ldrb	r3, [r4, #0]
   b6b84:	f023 0301 	bic.w	r3, r3, #1
   b6b88:	7023      	strb	r3, [r4, #0]
   b6b8a:	e7f4      	b.n	b6b76 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6b8c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6b90:	6919      	ldr	r1, [r3, #16]
   b6b92:	4401      	add	r1, r0
   b6b94:	6818      	ldr	r0, [r3, #0]
   b6b96:	f000 fb72 	bl	b727e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6b9a:	2800      	cmp	r0, #0
   b6b9c:	d1f1      	bne.n	b6b82 <_ZN8FatCache4syncEv+0x2e>
   b6b9e:	e7e9      	b.n	b6b74 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6ba0:	2501      	movs	r5, #1
   b6ba2:	e7e8      	b.n	b6b76 <_ZN8FatCache4syncEv+0x22>

000b6ba4 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6ba4:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6ba6:	6883      	ldr	r3, [r0, #8]
   b6ba8:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6baa:	4604      	mov	r4, r0
   b6bac:	460e      	mov	r6, r1
   b6bae:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6bb0:	d009      	beq.n	b6bc6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6bb2:	f7ff ffcf 	bl	b6b54 <_ZN8FatCache4syncEv>
   b6bb6:	b908      	cbnz	r0, b6bbc <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6bb8:	2000      	movs	r0, #0
}
   b6bba:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6bbc:	076b      	lsls	r3, r5, #29
   b6bbe:	d50a      	bpl.n	b6bd6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6bc0:	2300      	movs	r3, #0
   b6bc2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6bc4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6bc6:	7822      	ldrb	r2, [r4, #0]
   b6bc8:	f005 0503 	and.w	r5, r5, #3
   b6bcc:	4620      	mov	r0, r4
   b6bce:	4315      	orrs	r5, r2
   b6bd0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6bd4:	e7f1      	b.n	b6bba <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6bd6:	6863      	ldr	r3, [r4, #4]
   b6bd8:	f104 020c 	add.w	r2, r4, #12
   b6bdc:	6818      	ldr	r0, [r3, #0]
   b6bde:	4631      	mov	r1, r6
   b6be0:	f000 fac4 	bl	b716c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6be4:	2800      	cmp	r0, #0
   b6be6:	d1eb      	bne.n	b6bc0 <_ZN8FatCache4readEmh+0x1c>
   b6be8:	e7e6      	b.n	b6bb8 <_ZN8FatCache4readEmh+0x14>

000b6bea <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6bea:	7983      	ldrb	r3, [r0, #6]
   b6bec:	6940      	ldr	r0, [r0, #20]
   b6bee:	3902      	subs	r1, #2
   b6bf0:	4099      	lsls	r1, r3
}
   b6bf2:	4408      	add	r0, r1
   b6bf4:	4770      	bx	lr

000b6bf6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6bf6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6bf8:	b570      	push	{r4, r5, r6, lr}
   b6bfa:	4605      	mov	r5, r0
   b6bfc:	460c      	mov	r4, r1
   b6bfe:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6c00:	d802      	bhi.n	b6c08 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6c02:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6c06:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6c08:	69c3      	ldr	r3, [r0, #28]
   b6c0a:	428b      	cmp	r3, r1
   b6c0c:	d3f9      	bcc.n	b6c02 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6c0e:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6c10:	2b20      	cmp	r3, #32
   b6c12:	d116      	bne.n	b6c42 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6c14:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6c16:	2202      	movs	r2, #2
   b6c18:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6c1c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6c20:	f7ff ffc0 	bl	b6ba4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6c24:	2800      	cmp	r0, #0
   b6c26:	d0ec      	beq.n	b6c02 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6c28:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6c2c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6c30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6c34:	69ea      	ldr	r2, [r5, #28]
   b6c36:	429a      	cmp	r2, r3
  *value = next;
   b6c38:	bf26      	itte	cs
   b6c3a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6c3c:	2001      	movcs	r0, #1
    return 0;
   b6c3e:	2000      	movcc	r0, #0
   b6c40:	e7e1      	b.n	b6c06 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6c42:	2b10      	cmp	r3, #16
   b6c44:	d1dd      	bne.n	b6c02 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6c46:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6c4a:	6981      	ldr	r1, [r0, #24]
   b6c4c:	2202      	movs	r2, #2
   b6c4e:	4419      	add	r1, r3
   b6c50:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6c54:	f7ff ffa6 	bl	b6ba4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6c58:	2800      	cmp	r0, #0
   b6c5a:	d0d2      	beq.n	b6c02 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6c5c:	b2e4      	uxtb	r4, r4
   b6c5e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6c62:	e7e7      	b.n	b6c34 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6c64 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6c64:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6c66:	b538      	push	{r3, r4, r5, lr}
   b6c68:	460c      	mov	r4, r1
   b6c6a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6c6c:	d801      	bhi.n	b6c72 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b6c6e:	2000      	movs	r0, #0
}
   b6c70:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6c72:	69c3      	ldr	r3, [r0, #28]
   b6c74:	428b      	cmp	r3, r1
   b6c76:	d3fa      	bcc.n	b6c6e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6c78:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6c7a:	2b20      	cmp	r3, #32
   b6c7c:	d10f      	bne.n	b6c9e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b6c7e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6c80:	2203      	movs	r2, #3
   b6c82:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6c86:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6c8a:	f7ff ff8b 	bl	b6ba4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6c8e:	2800      	cmp	r0, #0
   b6c90:	d0ed      	beq.n	b6c6e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6c92:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6c96:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b6c9a:	2001      	movs	r0, #1
   b6c9c:	e7e8      	b.n	b6c70 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b6c9e:	2b10      	cmp	r3, #16
   b6ca0:	d1e5      	bne.n	b6c6e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6ca2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6ca6:	6981      	ldr	r1, [r0, #24]
   b6ca8:	2203      	movs	r2, #3
   b6caa:	4419      	add	r1, r3
   b6cac:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6cb0:	f7ff ff78 	bl	b6ba4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6cb4:	2800      	cmp	r0, #0
   b6cb6:	d0da      	beq.n	b6c6e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b6cb8:	b2e4      	uxtb	r4, r4
   b6cba:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b6cbe:	e7ec      	b.n	b6c9a <_ZN9FatVolume6fatPutEmm+0x36>

000b6cc0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6cc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6cc4:	68c4      	ldr	r4, [r0, #12]
   b6cc6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6cc8:	4605      	mov	r5, r0
   b6cca:	460e      	mov	r6, r1
   b6ccc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6cce:	d301      	bcc.n	b6cd4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6cd0:	2701      	movs	r7, #1
   b6cd2:	e001      	b.n	b6cd8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6cd4:	460c      	mov	r4, r1
    setStart = false;
   b6cd6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6cd8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b6cda:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6cdc:	42a3      	cmp	r3, r4
   b6cde:	d202      	bcs.n	b6ce6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6ce0:	b9c7      	cbnz	r7, b6d14 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6ce2:	68ec      	ldr	r4, [r5, #12]
   b6ce4:	e7f4      	b.n	b6cd0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6ce6:	42a6      	cmp	r6, r4
   b6ce8:	d014      	beq.n	b6d14 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b6cea:	aa01      	add	r2, sp, #4
   b6cec:	4621      	mov	r1, r4
   b6cee:	4628      	mov	r0, r5
   b6cf0:	f7ff ff81 	bl	b6bf6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6cf4:	2800      	cmp	r0, #0
   b6cf6:	db0d      	blt.n	b6d14 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6cf8:	d0ee      	beq.n	b6cd8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6cfa:	9b01      	ldr	r3, [sp, #4]
   b6cfc:	2b00      	cmp	r3, #0
   b6cfe:	d1eb      	bne.n	b6cd8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6d00:	b107      	cbz	r7, b6d04 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6d02:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6d04:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6d08:	4621      	mov	r1, r4
   b6d0a:	4628      	mov	r0, r5
   b6d0c:	f7ff ffaa 	bl	b6c64 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6d10:	4607      	mov	r7, r0
   b6d12:	b920      	cbnz	r0, b6d1e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6d14:	2700      	movs	r7, #0
}
   b6d16:	4638      	mov	r0, r7
   b6d18:	b002      	add	sp, #8
   b6d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6d1e:	b916      	cbnz	r6, b6d26 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6d20:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6d24:	e7f7      	b.n	b6d16 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6d26:	4622      	mov	r2, r4
   b6d28:	4631      	mov	r1, r6
   b6d2a:	4628      	mov	r0, r5
   b6d2c:	f7ff ff9a 	bl	b6c64 <_ZN9FatVolume6fatPutEmm>
   b6d30:	2800      	cmp	r0, #0
   b6d32:	d1f5      	bne.n	b6d20 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6d34:	e7ee      	b.n	b6d14 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6d36 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6d38:	4605      	mov	r5, r0
   b6d3a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6d3c:	aa01      	add	r2, sp, #4
   b6d3e:	4621      	mov	r1, r4
   b6d40:	4628      	mov	r0, r5
   b6d42:	f7ff ff58 	bl	b6bf6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6d46:	1e06      	subs	r6, r0, #0
   b6d48:	db10      	blt.n	b6d6c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6d4a:	2200      	movs	r2, #0
   b6d4c:	4621      	mov	r1, r4
   b6d4e:	4628      	mov	r0, r5
   b6d50:	f7ff ff88 	bl	b6c64 <_ZN9FatVolume6fatPutEmm>
   b6d54:	b150      	cbz	r0, b6d6c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6d56:	68eb      	ldr	r3, [r5, #12]
   b6d58:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6d5a:	bf24      	itt	cs
   b6d5c:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b6d60:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6d62:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6d64:	2e00      	cmp	r6, #0
   b6d66:	d1e9      	bne.n	b6d3c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6d68:	b002      	add	sp, #8
   b6d6a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6d6c:	2000      	movs	r0, #0
   b6d6e:	e7fb      	b.n	b6d68 <_ZN9FatVolume9freeChainEm+0x32>

000b6d70 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6d70:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6d72:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6d74:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6d76:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6d78:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b6d7c:	4604      	mov	r4, r0
  m_fatType = 0;
   b6d7e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6d80:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6d84:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6d86:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6d8a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b6d8c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6d90:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6d94:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6d98:	460d      	mov	r5, r1
   b6d9a:	b1b9      	cbz	r1, b6dcc <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b6d9c:	2904      	cmp	r1, #4
   b6d9e:	d901      	bls.n	b6da4 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6da0:	2000      	movs	r0, #0
}
   b6da2:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6da4:	4611      	mov	r1, r2
   b6da6:	4630      	mov	r0, r6
   b6da8:	f7ff fefc 	bl	b6ba4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6dac:	2800      	cmp	r0, #0
   b6dae:	d0f7      	beq.n	b6da0 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6db0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6db4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6db8:	065b      	lsls	r3, r3, #25
   b6dba:	d1f1      	bne.n	b6da0 <_ZN9FatVolume4initEh+0x30>
   b6dbc:	f105 011b 	add.w	r1, r5, #27
   b6dc0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6dc4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6dc8:	2d00      	cmp	r5, #0
   b6dca:	d0e9      	beq.n	b6da0 <_ZN9FatVolume4initEh+0x30>
   b6dcc:	2200      	movs	r2, #0
   b6dce:	4629      	mov	r1, r5
   b6dd0:	4630      	mov	r0, r6
   b6dd2:	f7ff fee7 	bl	b6ba4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6dd6:	2800      	cmp	r0, #0
   b6dd8:	d0e2      	beq.n	b6da0 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b6dda:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6de2:	d1dd      	bne.n	b6da0 <_ZN9FatVolume4initEh+0x30>
   b6de4:	7c03      	ldrb	r3, [r0, #16]
   b6de6:	2b02      	cmp	r3, #2
   b6de8:	d1da      	bne.n	b6da0 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b6dea:	89c3      	ldrh	r3, [r0, #14]
   b6dec:	2b00      	cmp	r3, #0
   b6dee:	d0d7      	beq.n	b6da0 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6df0:	7b41      	ldrb	r1, [r0, #13]
   b6df2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6df4:	1e4b      	subs	r3, r1, #1
   b6df6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6df8:	2300      	movs	r3, #0
   b6dfa:	71a3      	strb	r3, [r4, #6]
   b6dfc:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6dfe:	2301      	movs	r3, #1
   b6e00:	4299      	cmp	r1, r3
   b6e02:	d007      	beq.n	b6e14 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6e04:	3e01      	subs	r6, #1
   b6e06:	d0cb      	beq.n	b6da0 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6e08:	79a2      	ldrb	r2, [r4, #6]
   b6e0a:	005b      	lsls	r3, r3, #1
   b6e0c:	3201      	adds	r2, #1
   b6e0e:	b2db      	uxtb	r3, r3
   b6e10:	71a2      	strb	r2, [r4, #6]
   b6e12:	e7f5      	b.n	b6e00 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6e14:	8ac1      	ldrh	r1, [r0, #22]
   b6e16:	b901      	cbnz	r1, b6e1a <_ZN9FatVolume4initEh+0xaa>
   b6e18:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b6e1a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6e1c:	89c3      	ldrh	r3, [r0, #14]
   b6e1e:	442b      	add	r3, r5
   b6e20:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6e22:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6e26:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6e28:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6e2c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6e2e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6e32:	0149      	lsls	r1, r1, #5
   b6e34:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6e38:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6e3c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6e3e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6e42:	b902      	cbnz	r2, b6e46 <_ZN9FatVolume4initEh+0xd6>
   b6e44:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6e46:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6e48:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6e4a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6e4c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6e4e:	1c4b      	adds	r3, r1, #1
   b6e50:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6e52:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6e56:	4299      	cmp	r1, r3
   b6e58:	d802      	bhi.n	b6e60 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b6e5a:	230c      	movs	r3, #12
   b6e5c:	71e3      	strb	r3, [r4, #7]
   b6e5e:	e79f      	b.n	b6da0 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6e60:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6e64:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6e66:	bf85      	ittet	hi
   b6e68:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b6e6a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b6e6c:	2310      	movls	r3, #16
    m_fatType = 32;
   b6e6e:	2320      	movhi	r3, #32
   b6e70:	71e3      	strb	r3, [r4, #7]
  return true;
   b6e72:	2001      	movs	r0, #1
   b6e74:	e795      	b.n	b6da2 <_ZN9FatVolume4initEh+0x32>

000b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6e76:	f000 bacb 	b.w	b7410 <_ZN14SdSpiAltDriver4sendEh>

000b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b6e7a:	f000 baae 	b.w	b73da <_ZN14SdSpiAltDriver7receiveEv>
	...

000b6e80 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6e80:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6e82:	4e0e      	ldr	r6, [pc, #56]	; (b6ebc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6e84:	460d      	mov	r5, r1
   b6e86:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6e88:	f005 faa0 	bl	bc3cc <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6e8c:	6833      	ldr	r3, [r6, #0]
   b6e8e:	1ac0      	subs	r0, r0, r3
   b6e90:	4b0b      	ldr	r3, [pc, #44]	; (b6ec0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6e92:	4298      	cmp	r0, r3
   b6e94:	d908      	bls.n	b6ea8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6e96:	f005 faa1 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6e9a:	4b0a      	ldr	r3, [pc, #40]	; (b6ec4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b6e9c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b6e9e:	f005 fdd5 	bl	bca4c <spark_process>
   b6ea2:	f005 fa93 	bl	bc3cc <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6ea6:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6ea8:	f005 fa98 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b6eac:	b280      	uxth	r0, r0
   b6eae:	1b40      	subs	r0, r0, r5
}
   b6eb0:	42a0      	cmp	r0, r4
   b6eb2:	bfd4      	ite	le
   b6eb4:	2000      	movle	r0, #0
   b6eb6:	2001      	movgt	r0, #1
   b6eb8:	bd70      	pop	{r4, r5, r6, pc}
   b6eba:	bf00      	nop
   b6ebc:	2003e618 	.word	0x2003e618
   b6ec0:	000186a0 	.word	0x000186a0
   b6ec4:	2003e740 	.word	0x2003e740

000b6ec8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6ec8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b6eca:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6ecc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b6ece:	b94d      	cbnz	r5, b6ee4 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6ed0:	6840      	ldr	r0, [r0, #4]
   b6ed2:	f000 fa6b 	bl	b73ac <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6ed6:	6863      	ldr	r3, [r4, #4]
   b6ed8:	4629      	mov	r1, r5
   b6eda:	7d18      	ldrb	r0, [r3, #20]
   b6edc:	f009 fc45 	bl	c076a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6ee0:	2301      	movs	r3, #1
   b6ee2:	7223      	strb	r3, [r4, #8]
  }
}
   b6ee4:	bd38      	pop	{r3, r4, r5, pc}

000b6ee6 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6ee6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6ee8:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b6eea:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6eec:	b16b      	cbz	r3, b6f0a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b6eee:	6843      	ldr	r3, [r0, #4]
   b6ef0:	2101      	movs	r1, #1
   b6ef2:	7d18      	ldrb	r0, [r3, #20]
   b6ef4:	f009 fc39 	bl	c076a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6ef8:	6860      	ldr	r0, [r4, #4]
   b6efa:	21ff      	movs	r1, #255	; 0xff
   b6efc:	f7ff ffbb 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6f00:	6860      	ldr	r0, [r4, #4]
   b6f02:	f000 fa67 	bl	b73d4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6f06:	2300      	movs	r3, #0
   b6f08:	7223      	strb	r3, [r4, #8]
  }
}
   b6f0a:	bd10      	pop	{r4, pc}

000b6f0c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f0e:	4604      	mov	r4, r0
   b6f10:	460d      	mov	r5, r1
   b6f12:	4616      	mov	r6, r2
   b6f14:	f005 fa62 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6f18:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b6f1a:	6860      	ldr	r0, [r4, #4]
   b6f1c:	f7ff ffad 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f20:	28ff      	cmp	r0, #255	; 0xff
   b6f22:	7260      	strb	r0, [r4, #9]
   b6f24:	d10e      	bne.n	b6f44 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6f2a:	4639      	mov	r1, r7
   b6f2c:	4620      	mov	r0, r4
   b6f2e:	f7ff ffa7 	bl	b6e80 <_ZN9SdSpiCard10isTimedOutEtt>
   b6f32:	2800      	cmp	r0, #0
   b6f34:	d0f1      	beq.n	b6f1a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6f36:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6f38:	4620      	mov	r0, r4
   b6f3a:	7023      	strb	r3, [r4, #0]
   b6f3c:	f7ff ffd3 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6f40:	2000      	movs	r0, #0
}
   b6f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6f44:	28fe      	cmp	r0, #254	; 0xfe
   b6f46:	d001      	beq.n	b6f4c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6f48:	2350      	movs	r3, #80	; 0x50
   b6f4a:	e7f5      	b.n	b6f38 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6f4c:	6860      	ldr	r0, [r4, #4]
   b6f4e:	4632      	mov	r2, r6
   b6f50:	4629      	mov	r1, r5
   b6f52:	f000 fa47 	bl	b73e4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6f56:	7260      	strb	r0, [r4, #9]
   b6f58:	b108      	cbz	r0, b6f5e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b6f5a:	2360      	movs	r3, #96	; 0x60
   b6f5c:	e7ec      	b.n	b6f38 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b6f5e:	6860      	ldr	r0, [r4, #4]
   b6f60:	f7ff ff8b 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6f64:	6860      	ldr	r0, [r4, #4]
   b6f66:	f7ff ff88 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b6f6a:	2001      	movs	r0, #1
   b6f6c:	e7e9      	b.n	b6f42 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b6f6e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b6f6e:	b570      	push	{r4, r5, r6, lr}
   b6f70:	4604      	mov	r4, r0
   b6f72:	460e      	mov	r6, r1
   b6f74:	f005 fa32 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   b6f78:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b6f7a:	4632      	mov	r2, r6
   b6f7c:	4629      	mov	r1, r5
   b6f7e:	4620      	mov	r0, r4
   b6f80:	f7ff ff7e 	bl	b6e80 <_ZN9SdSpiCard10isTimedOutEtt>
   b6f84:	b930      	cbnz	r0, b6f94 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b6f86:	6860      	ldr	r0, [r4, #4]
   b6f88:	f7ff ff77 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f8c:	28ff      	cmp	r0, #255	; 0xff
   b6f8e:	d1f4      	bne.n	b6f7a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b6f90:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b6f92:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6f94:	2000      	movs	r0, #0
   b6f96:	e7fc      	b.n	b6f92 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b6f98 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b6f9a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6f9c:	9201      	str	r2, [sp, #4]
   b6f9e:	4604      	mov	r4, r0
   b6fa0:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b6fa2:	b90b      	cbnz	r3, b6fa8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b6fa4:	f7ff ff90 	bl	b6ec8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b6fa8:	b125      	cbz	r5, b6fb4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b6faa:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6fae:	4620      	mov	r0, r4
   b6fb0:	f7ff ffdd 	bl	b6f6e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b6fb4:	6860      	ldr	r0, [r4, #4]
   b6fb6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b6fba:	f7ff ff5c 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6fbe:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6fc0:	af01      	add	r7, sp, #4
   b6fc2:	5db9      	ldrb	r1, [r7, r6]
   b6fc4:	6860      	ldr	r0, [r4, #4]
   b6fc6:	f7ff ff56 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b6fca:	3e01      	subs	r6, #1
   b6fcc:	d2f9      	bcs.n	b6fc2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6fce:	2d00      	cmp	r5, #0
   b6fd0:	6860      	ldr	r0, [r4, #4]
   b6fd2:	bf0c      	ite	eq
   b6fd4:	2195      	moveq	r1, #149	; 0x95
   b6fd6:	2187      	movne	r1, #135	; 0x87
   b6fd8:	f7ff ff4d 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6fdc:	6860      	ldr	r0, [r4, #4]
   b6fde:	f7ff ff4c 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6fe2:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6fe4:	6860      	ldr	r0, [r4, #4]
   b6fe6:	f7ff ff48 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6fea:	0603      	lsls	r3, r0, #24
   b6fec:	7260      	strb	r0, [r4, #9]
   b6fee:	d503      	bpl.n	b6ff8 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6ff0:	3d01      	subs	r5, #1
   b6ff2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6ff6:	d1f5      	bne.n	b6fe4 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6ff8:	b003      	add	sp, #12
   b6ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6ffc <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6ffc:	b570      	push	{r4, r5, r6, lr}
   b6ffe:	4604      	mov	r4, r0
   b7000:	460d      	mov	r5, r1
   b7002:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7004:	2137      	movs	r1, #55	; 0x37
   b7006:	2200      	movs	r2, #0
   b7008:	f7ff ffc6 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b700c:	4632      	mov	r2, r6
   b700e:	4629      	mov	r1, r5
   b7010:	4620      	mov	r0, r4
  }
   b7012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7016:	f7ff bfbf 	b.w	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b701c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7020:	2500      	movs	r5, #0
   b7022:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7024:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7026:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7028:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b702a:	4604      	mov	r4, r0
   b702c:	4690      	mov	r8, r2
   b702e:	461e      	mov	r6, r3
   b7030:	f005 f9d4 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7034:	4641      	mov	r1, r8
   b7036:	4607      	mov	r7, r0
   b7038:	6860      	ldr	r0, [r4, #4]
   b703a:	f000 f9bb 	bl	b73b4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b703e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7040:	4a49      	ldr	r2, [pc, #292]	; (b7168 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7042:	721d      	strb	r5, [r3, #8]
   b7044:	2501      	movs	r5, #1
   b7046:	60da      	str	r2, [r3, #12]
   b7048:	821d      	strh	r5, [r3, #16]
  spiStart();
   b704a:	4620      	mov	r0, r4
   b704c:	f7ff ff3c 	bl	b6ec8 <_ZN9SdSpiCard8spiStartEv>
   b7050:	6863      	ldr	r3, [r4, #4]
   b7052:	4629      	mov	r1, r5
   b7054:	7d18      	ldrb	r0, [r3, #20]
   b7056:	f009 fb88 	bl	c076a <digitalWrite>
   b705a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b705c:	6860      	ldr	r0, [r4, #4]
   b705e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7060:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7062:	f7ff ff08 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7066:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b706a:	d1f7      	bne.n	b705c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b706c:	6863      	ldr	r3, [r4, #4]
   b706e:	4629      	mov	r1, r5
   b7070:	7d18      	ldrb	r0, [r3, #20]
   b7072:	f009 fb7a 	bl	c076a <digitalWrite>
  }
   b7076:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7078:	2200      	movs	r2, #0
   b707a:	4611      	mov	r1, r2
   b707c:	4620      	mov	r0, r4
   b707e:	f7ff ff8b 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b7082:	2801      	cmp	r0, #1
   b7084:	4680      	mov	r8, r0
   b7086:	d018      	beq.n	b70ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7088:	3d01      	subs	r5, #1
   b708a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b708e:	d107      	bne.n	b70a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7090:	2320      	movs	r3, #32
  spiStop();
   b7092:	4620      	mov	r0, r4
   b7094:	7023      	strb	r3, [r4, #0]
   b7096:	f7ff ff26 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b709a:	2000      	movs	r0, #0
}
   b709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b70a0:	6860      	ldr	r0, [r4, #4]
   b70a2:	21fd      	movs	r1, #253	; 0xfd
   b70a4:	f7ff fee7 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b70a8:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b70ac:	6860      	ldr	r0, [r4, #4]
   b70ae:	f7ff fee4 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b70b2:	f1b8 0801 	subs.w	r8, r8, #1
   b70b6:	d1f9      	bne.n	b70ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b70b8:	e7de      	b.n	b7078 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b70ba:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b70be:	2108      	movs	r1, #8
   b70c0:	4620      	mov	r0, r4
   b70c2:	f7ff ff69 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b70c6:	2805      	cmp	r0, #5
   b70c8:	d114      	bne.n	b70f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b70ca:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b70ce:	2500      	movs	r5, #0
   b70d0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b70d2:	462a      	mov	r2, r5
   b70d4:	2129      	movs	r1, #41	; 0x29
   b70d6:	4620      	mov	r0, r4
   b70d8:	f7ff ff90 	bl	b6ffc <_ZN9SdSpiCard8cardAcmdEhm>
   b70dc:	4602      	mov	r2, r0
   b70de:	b1d8      	cbz	r0, b7118 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b70e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b70e4:	4639      	mov	r1, r7
   b70e6:	4620      	mov	r0, r4
   b70e8:	f7ff feca 	bl	b6e80 <_ZN9SdSpiCard10isTimedOutEtt>
   b70ec:	2800      	cmp	r0, #0
   b70ee:	d0f0      	beq.n	b70d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b70f0:	2343      	movs	r3, #67	; 0x43
   b70f2:	e7ce      	b.n	b7092 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b70f4:	2504      	movs	r5, #4
      m_status = spiReceive();
   b70f6:	6860      	ldr	r0, [r4, #4]
   b70f8:	f7ff febf 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b70fc:	3d01      	subs	r5, #1
   b70fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7102:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7104:	d1f7      	bne.n	b70f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7106:	28aa      	cmp	r0, #170	; 0xaa
   b7108:	d104      	bne.n	b7114 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b710a:	2302      	movs	r3, #2
   b710c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b710e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7112:	e7dd      	b.n	b70d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7114:	2325      	movs	r3, #37	; 0x25
   b7116:	e7bc      	b.n	b7092 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7118:	7aa3      	ldrb	r3, [r4, #10]
   b711a:	2b02      	cmp	r3, #2
   b711c:	d118      	bne.n	b7150 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b711e:	213a      	movs	r1, #58	; 0x3a
   b7120:	4620      	mov	r0, r4
   b7122:	f7ff ff39 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b7126:	b108      	cbz	r0, b712c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7128:	2337      	movs	r3, #55	; 0x37
   b712a:	e7b2      	b.n	b7092 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b712c:	6860      	ldr	r0, [r4, #4]
   b712e:	f7ff fea4 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7132:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7136:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7138:	bf04      	itt	eq
   b713a:	2303      	moveq	r3, #3
   b713c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b713e:	6860      	ldr	r0, [r4, #4]
   b7140:	f7ff fe9b 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7144:	6860      	ldr	r0, [r4, #4]
   b7146:	f7ff fe98 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b714a:	6860      	ldr	r0, [r4, #4]
   b714c:	f7ff fe95 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7150:	4620      	mov	r0, r4
   b7152:	f7ff fec8 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7156:	6863      	ldr	r3, [r4, #4]
   b7158:	7930      	ldrb	r0, [r6, #4]
   b715a:	68b1      	ldr	r1, [r6, #8]
   b715c:	89b2      	ldrh	r2, [r6, #12]
   b715e:	821a      	strh	r2, [r3, #16]
   b7160:	7218      	strb	r0, [r3, #8]
   b7162:	60d9      	str	r1, [r3, #12]
  return true;
   b7164:	2001      	movs	r0, #1
   b7166:	e799      	b.n	b709c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7168:	0003d090 	.word	0x0003d090

000b716c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b716c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b716e:	7a83      	ldrb	r3, [r0, #10]
   b7170:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7172:	bf18      	it	ne
   b7174:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7176:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7178:	460a      	mov	r2, r1
   b717a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b717c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b717e:	f7ff ff0b 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b7182:	b130      	cbz	r0, b7192 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7184:	2330      	movs	r3, #48	; 0x30
   b7186:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7188:	4620      	mov	r0, r4
   b718a:	f7ff feac 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b718e:	2500      	movs	r5, #0
   b7190:	e00b      	b.n	b71aa <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7192:	4629      	mov	r1, r5
   b7194:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7198:	4620      	mov	r0, r4
   b719a:	f7ff feb7 	bl	b6f0c <_ZN9SdSpiCard8readDataEPhj>
   b719e:	4605      	mov	r5, r0
   b71a0:	2800      	cmp	r0, #0
   b71a2:	d0f1      	beq.n	b7188 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b71a4:	4620      	mov	r0, r4
   b71a6:	f7ff fe9e 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
}
   b71aa:	4628      	mov	r0, r5
   b71ac:	bd38      	pop	{r3, r4, r5, pc}

000b71ae <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b71ae:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b71b0:	7a83      	ldrb	r3, [r0, #10]
   b71b2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b71b4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b71b6:	bf18      	it	ne
   b71b8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b71ba:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b71bc:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b71be:	f7ff feeb 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b71c2:	b130      	cbz	r0, b71d2 <_ZN9SdSpiCard9readStartEm+0x24>
   b71c4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b71c6:	4620      	mov	r0, r4
   b71c8:	7023      	strb	r3, [r4, #0]
   b71ca:	f7ff fe8c 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b71ce:	2000      	movs	r0, #0
}
   b71d0:	bd10      	pop	{r4, pc}
  return true;
   b71d2:	2001      	movs	r0, #1
   b71d4:	e7fc      	b.n	b71d0 <_ZN9SdSpiCard9readStartEm+0x22>

000b71d6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b71d6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b71d8:	2200      	movs	r2, #0
   b71da:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b71dc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b71de:	f7ff fedb 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b71e2:	b130      	cbz	r0, b71f2 <_ZN9SdSpiCard8readStopEv+0x1c>
   b71e4:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b71e6:	4620      	mov	r0, r4
   b71e8:	7023      	strb	r3, [r4, #0]
   b71ea:	f7ff fe7c 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b71ee:	2000      	movs	r0, #0
}
   b71f0:	bd10      	pop	{r4, pc}
  spiStop();
   b71f2:	4620      	mov	r0, r4
   b71f4:	f7ff fe77 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b71f8:	2001      	movs	r0, #1
   b71fa:	e7f9      	b.n	b71f0 <_ZN9SdSpiCard8readStopEv+0x1a>

000b71fc <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b71fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b71fe:	4604      	mov	r4, r0
   b7200:	4616      	mov	r6, r2
   b7202:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7204:	f7ff ffd3 	bl	b71ae <_ZN9SdSpiCard9readStartEm>
   b7208:	b168      	cbz	r0, b7226 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b720a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b720c:	b2ab      	uxth	r3, r5
   b720e:	429f      	cmp	r7, r3
   b7210:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7214:	d909      	bls.n	b722a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7216:	f44f 7200 	mov.w	r2, #512	; 0x200
   b721a:	4620      	mov	r0, r4
   b721c:	f7ff fe76 	bl	b6f0c <_ZN9SdSpiCard8readDataEPhj>
   b7220:	3501      	adds	r5, #1
   b7222:	2800      	cmp	r0, #0
   b7224:	d1f2      	bne.n	b720c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7226:	2000      	movs	r0, #0
   b7228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b722a:	4620      	mov	r0, r4
}
   b722c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7230:	f7ff bfd1 	b.w	b71d6 <_ZN9SdSpiCard8readStopEv>

000b7234 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7234:	b538      	push	{r3, r4, r5, lr}
   b7236:	4604      	mov	r4, r0
   b7238:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b723a:	6840      	ldr	r0, [r0, #4]
   b723c:	f7ff fe1b 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7240:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7244:	6860      	ldr	r0, [r4, #4]
   b7246:	4629      	mov	r1, r5
   b7248:	f000 f8e6 	bl	b7418 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b724c:	6860      	ldr	r0, [r4, #4]
   b724e:	21ff      	movs	r1, #255	; 0xff
   b7250:	f7ff fe11 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7254:	6860      	ldr	r0, [r4, #4]
   b7256:	21ff      	movs	r1, #255	; 0xff
   b7258:	f7ff fe0d 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b725c:	6860      	ldr	r0, [r4, #4]
   b725e:	f7ff fe0c 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7262:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7264:	f000 001f 	and.w	r0, r0, #31
   b7268:	2805      	cmp	r0, #5
   b726a:	d006      	beq.n	b727a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b726c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b726e:	4620      	mov	r0, r4
   b7270:	7023      	strb	r3, [r4, #0]
   b7272:	f7ff fe38 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7276:	2000      	movs	r0, #0
}
   b7278:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b727a:	2001      	movs	r0, #1
   b727c:	e7fc      	b.n	b7278 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b727e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b727e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7280:	7a83      	ldrb	r3, [r0, #10]
   b7282:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7284:	bf18      	it	ne
   b7286:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7288:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b728a:	460a      	mov	r2, r1
   b728c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b728e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7290:	f7ff fe82 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b7294:	4606      	mov	r6, r0
   b7296:	b130      	cbz	r0, b72a6 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7298:	2332      	movs	r3, #50	; 0x32
   b729a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b729c:	4620      	mov	r0, r4
   b729e:	f7ff fe22 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b72a2:	2500      	movs	r5, #0
   b72a4:	e01f      	b.n	b72e6 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b72a6:	462a      	mov	r2, r5
   b72a8:	21fe      	movs	r1, #254	; 0xfe
   b72aa:	4620      	mov	r0, r4
   b72ac:	f7ff ffc2 	bl	b7234 <_ZN9SdSpiCard9writeDataEhPKh>
   b72b0:	2800      	cmp	r0, #0
   b72b2:	d0f3      	beq.n	b729c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b72b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b72b8:	4620      	mov	r0, r4
   b72ba:	f7ff fe58 	bl	b6f6e <_ZN9SdSpiCard11waitNotBusyEt>
   b72be:	4605      	mov	r5, r0
   b72c0:	b908      	cbnz	r0, b72c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b72c2:	235a      	movs	r3, #90	; 0x5a
   b72c4:	e7e9      	b.n	b729a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b72c6:	4632      	mov	r2, r6
   b72c8:	210d      	movs	r1, #13
   b72ca:	4620      	mov	r0, r4
   b72cc:	f7ff fe64 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b72d0:	b108      	cbz	r0, b72d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b72d2:	2329      	movs	r3, #41	; 0x29
   b72d4:	e7e1      	b.n	b729a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b72d6:	6860      	ldr	r0, [r4, #4]
   b72d8:	f7ff fdcf 	bl	b6e7a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b72dc:	2800      	cmp	r0, #0
   b72de:	d1f8      	bne.n	b72d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b72e0:	4620      	mov	r0, r4
   b72e2:	f7ff fe00 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
}
   b72e6:	4628      	mov	r0, r5
   b72e8:	bd70      	pop	{r4, r5, r6, pc}

000b72ea <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b72ea:	b513      	push	{r0, r1, r4, lr}
   b72ec:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b72ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b72f2:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b72f4:	f7ff fe3b 	bl	b6f6e <_ZN9SdSpiCard11waitNotBusyEt>
   b72f8:	9a01      	ldr	r2, [sp, #4]
   b72fa:	b930      	cbnz	r0, b730a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b72fc:	235b      	movs	r3, #91	; 0x5b
   b72fe:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7300:	4620      	mov	r0, r4
   b7302:	f7ff fdf0 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7306:	2000      	movs	r0, #0
   b7308:	e005      	b.n	b7316 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b730a:	21fc      	movs	r1, #252	; 0xfc
   b730c:	4620      	mov	r0, r4
   b730e:	f7ff ff91 	bl	b7234 <_ZN9SdSpiCard9writeDataEhPKh>
   b7312:	2800      	cmp	r0, #0
   b7314:	d0f4      	beq.n	b7300 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7316:	b002      	add	sp, #8
   b7318:	bd10      	pop	{r4, pc}

000b731a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b731a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b731c:	7a83      	ldrb	r3, [r0, #10]
   b731e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7320:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7322:	bf18      	it	ne
   b7324:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7326:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7328:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b732a:	f7ff fe35 	bl	b6f98 <_ZN9SdSpiCard11cardCommandEhm>
   b732e:	b130      	cbz	r0, b733e <_ZN9SdSpiCard10writeStartEm+0x24>
   b7330:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7332:	4620      	mov	r0, r4
   b7334:	7023      	strb	r3, [r4, #0]
   b7336:	f7ff fdd6 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b733a:	2000      	movs	r0, #0
}
   b733c:	bd10      	pop	{r4, pc}
  return true;
   b733e:	2001      	movs	r0, #1
   b7340:	e7fc      	b.n	b733c <_ZN9SdSpiCard10writeStartEm+0x22>

000b7342 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7342:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7344:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7348:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b734a:	f7ff fe10 	bl	b6f6e <_ZN9SdSpiCard11waitNotBusyEt>
   b734e:	4605      	mov	r5, r0
   b7350:	b930      	cbnz	r0, b7360 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7352:	2356      	movs	r3, #86	; 0x56
   b7354:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7356:	4620      	mov	r0, r4
   b7358:	f7ff fdc5 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b735c:	4628      	mov	r0, r5
   b735e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7360:	6860      	ldr	r0, [r4, #4]
   b7362:	21fd      	movs	r1, #253	; 0xfd
   b7364:	f7ff fd87 	bl	b6e76 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7368:	e7f5      	b.n	b7356 <_ZN9SdSpiCard9writeStopEv+0x14>

000b736a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b736a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b736c:	4604      	mov	r4, r0
   b736e:	4616      	mov	r6, r2
   b7370:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7372:	f7ff ffd2 	bl	b731a <_ZN9SdSpiCard10writeStartEm>
   b7376:	b170      	cbz	r0, b7396 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7378:	2500      	movs	r5, #0
   b737a:	42bd      	cmp	r5, r7
   b737c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7380:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7382:	d004      	beq.n	b738e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7384:	f7ff ffb1 	bl	b72ea <_ZN9SdSpiCard9writeDataEPKh>
   b7388:	b128      	cbz	r0, b7396 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b738a:	3501      	adds	r5, #1
   b738c:	e7f5      	b.n	b737a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b738e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7392:	f7ff bfd6 	b.w	b7342 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7396:	4620      	mov	r0, r4
   b7398:	f7ff fda5 	bl	b6ee6 <_ZN9SdSpiCard7spiStopEv>
}
   b739c:	2000      	movs	r0, #0
   b739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73a0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b73a0:	4b01      	ldr	r3, [pc, #4]	; (b73a8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b73a2:	2201      	movs	r2, #1
   b73a4:	701a      	strb	r2, [r3, #0]
}
   b73a6:	4770      	bx	lr
   b73a8:	2003e61c 	.word	0x2003e61c

000b73ac <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b73ac:	1d01      	adds	r1, r0, #4
   b73ae:	6800      	ldr	r0, [r0, #0]
   b73b0:	f005 bc96 	b.w	bcce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b73b4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b73b4:	b510      	push	{r4, lr}
   b73b6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b73b8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b73ba:	6800      	ldr	r0, [r0, #0]
   b73bc:	f005 fc4c 	bl	bcc58 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b73c0:	7d20      	ldrb	r0, [r4, #20]
   b73c2:	2101      	movs	r1, #1
   b73c4:	f009 f9c0 	bl	c0748 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b73c8:	7d20      	ldrb	r0, [r4, #20]
   b73ca:	2101      	movs	r1, #1
}
   b73cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b73d0:	f009 b9cb 	b.w	c076a <digitalWrite>

000b73d4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b73d4:	6800      	ldr	r0, [r0, #0]
   b73d6:	f005 bc6a 	b.w	bccae <_ZN8SPIClass14endTransactionEv>

000b73da <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b73da:	6800      	ldr	r0, [r0, #0]
   b73dc:	21ff      	movs	r1, #255	; 0xff
   b73de:	f005 bd1f 	b.w	bce20 <_ZN8SPIClass8transferEh>
	...

000b73e4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b73e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b73e6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b73e8:	4a07      	ldr	r2, [pc, #28]	; (b7408 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b73ea:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b73ec:	2500      	movs	r5, #0
   b73ee:	4c07      	ldr	r4, [pc, #28]	; (b740c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b73f0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b73f2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b73f4:	460a      	mov	r2, r1
   b73f6:	4629      	mov	r1, r5
   b73f8:	f005 fd18 	bl	bce2c <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b73fc:	7823      	ldrb	r3, [r4, #0]
   b73fe:	2b00      	cmp	r3, #0
   b7400:	d0fc      	beq.n	b73fc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7402:	2000      	movs	r0, #0
   b7404:	b003      	add	sp, #12
   b7406:	bd30      	pop	{r4, r5, pc}
   b7408:	000b73a1 	.word	0x000b73a1
   b740c:	2003e61c 	.word	0x2003e61c

000b7410 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7410:	6800      	ldr	r0, [r0, #0]
   b7412:	f005 bd05 	b.w	bce20 <_ZN8SPIClass8transferEh>
	...

000b7418 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7418:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b741a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b741c:	4a06      	ldr	r2, [pc, #24]	; (b7438 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b741e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7420:	2500      	movs	r5, #0
   b7422:	4c06      	ldr	r4, [pc, #24]	; (b743c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7424:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7426:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7428:	462a      	mov	r2, r5
   b742a:	f005 fcff 	bl	bce2c <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b742e:	7823      	ldrb	r3, [r4, #0]
   b7430:	2b00      	cmp	r3, #0
   b7432:	d0fc      	beq.n	b742e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7434:	b003      	add	sp, #12
   b7436:	bd30      	pop	{r4, r5, pc}
   b7438:	000b73a1 	.word	0x000b73a1
   b743c:	2003e61c 	.word	0x2003e61c

000b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b7440:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7442:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b7444:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7446:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7448:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b744a:	041b      	lsls	r3, r3, #16
   b744c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b7450:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b7452:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b7454:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b7458:	bd10      	pop	{r4, pc}

000b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b745a:	1843      	adds	r3, r0, r1
   b745c:	5c40      	ldrb	r0, [r0, r1]
   b745e:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b7460:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b7464:	4770      	bx	lr

000b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b7466:	b410      	push	{r4}
    if (base == 0) {
   b7468:	b92a      	cbnz	r2, b7476 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b746a:	6802      	ldr	r2, [r0, #0]
    }
}
   b746c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b7470:	6892      	ldr	r2, [r2, #8]
   b7472:	b2c9      	uxtb	r1, r1
   b7474:	4710      	bx	r2
}
   b7476:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b747a:	b2d2      	uxtb	r2, r2
   b747c:	f007 b83d 	b.w	be4fa <_ZN5Print11printNumberEmh>

000b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b7480:	b912      	cbnz	r2, b7488 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b7482:	6803      	ldr	r3, [r0, #0]
   b7484:	689b      	ldr	r3, [r3, #8]
   b7486:	4718      	bx	r3
        return printNumber(val, base) + t;
   b7488:	b2d2      	uxtb	r2, r2
   b748a:	f007 b836 	b.w	be4fa <_ZN5Print11printNumberEmh>

000b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b748e:	b510      	push	{r4, lr}
   b7490:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b7492:	f7ff fff5 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b7496:	4620      	mov	r0, r4
    }
   b7498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b749c:	f007 b815 	b.w	be4ca <_ZN5Print7printlnEv>

000b74a0 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b74a0:	6803      	ldr	r3, [r0, #0]
   b74a2:	b2c9      	uxtb	r1, r1
   b74a4:	689b      	ldr	r3, [r3, #8]
   b74a6:	4718      	bx	r3

000b74a8 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b74a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b74ac:	8002      	strh	r2, [r0, #0]
   b74ae:	2142      	movs	r1, #66	; 0x42
   b74b0:	2200      	movs	r2, #0
   b74b2:	b510      	push	{r4, lr}
   b74b4:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b74b8:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b74bc:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b74c0:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b74c4:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b74c8:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b74cc:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b74d0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b74d4:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b74d8:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b74dc:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b74e0:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b74e4:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b74e8:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b74ec:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b74f0:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b74f4:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b74f8:	2180      	movs	r1, #128	; 0x80
   b74fa:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b74fe:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b7502:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b7506:	4925      	ldr	r1, [pc, #148]	; (b759c <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b7508:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b750c:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b7510:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b7514:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b7518:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b751c:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b7520:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b7524:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b7528:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b752c:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b7530:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b7534:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b7538:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b753c:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b7540:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b7544:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b7548:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b754c:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b7550:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b7554:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b7558:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b755c:	4910      	ldr	r1, [pc, #64]	; (b75a0 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b755e:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b7562:	f640 1164 	movw	r1, #2404	; 0x964
   b7566:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b756a:	2158      	movs	r1, #88	; 0x58
   b756c:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7570:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7572:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b7576:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b757a:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b757e:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b7582:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b7586:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b758a:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b758e:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7592:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b7596:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b759a:	bd10      	pop	{r4, pc}
   b759c:	02020000 	.word	0x02020000
   b75a0:	64640200 	.word	0x64640200

000b75a4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b75a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75a6:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b75a8:	460d      	mov	r5, r1
   b75aa:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b75ae:	b9a9      	cbnz	r1, b75dc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b75b0:	b1a8      	cbz	r0, b75de <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b75b2:	f7fc fd74 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b75b6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b75ba:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b75be:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b75c2:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b75c6:	b913      	cbnz	r3, b75ce <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b75c8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b75cc:	b123      	cbz	r3, b75d8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b75ce:	4920      	ldr	r1, [pc, #128]	; (b7650 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b75d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b75d4:	f006 ff8f 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b75d8:	2001      	movs	r0, #1
   b75da:	e011      	b.n	b7600 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b75dc:	b9b8      	cbnz	r0, b760e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b75de:	4628      	mov	r0, r5
   b75e0:	f7fc fd5b 	bl	b409a <_Znaj>
   b75e4:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b75e8:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b75ec:	bb60      	cbnz	r0, b7648 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b75ee:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b75f2:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b75f6:	b923      	cbnz	r3, b7602 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b75f8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b75fc:	b90b      	cbnz	r3, b7602 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b75fe:	2000      	movs	r0, #0
}
   b7600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b7602:	4914      	ldr	r1, [pc, #80]	; (b7654 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7604:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7608:	f006 ff75 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b760c:	e7f7      	b.n	b75fe <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b760e:	4608      	mov	r0, r1
   b7610:	f7fc fd43 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b7614:	4606      	mov	r6, r0
   b7616:	b940      	cbnz	r0, b762a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7618:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b761c:	b91b      	cbnz	r3, b7626 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b761e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7622:	2b00      	cmp	r3, #0
   b7624:	d0eb      	beq.n	b75fe <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7626:	490c      	ldr	r1, [pc, #48]	; (b7658 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b7628:	e7ec      	b.n	b7604 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b762a:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b762e:	42aa      	cmp	r2, r5
   b7630:	bf28      	it	cs
   b7632:	462a      	movcs	r2, r5
   b7634:	4639      	mov	r1, r7
   b7636:	f009 ff51 	bl	c14dc <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b763a:	4638      	mov	r0, r7
   b763c:	f7fc fd2f 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b7640:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b7644:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b7648:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b764c:	e7c4      	b.n	b75d8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b764e:	bf00      	nop
   b7650:	000c3ccc 	.word	0x000c3ccc
   b7654:	000c3cf7 	.word	0x000c3cf7
   b7658:	000c3d22 	.word	0x000c3d22

000b765c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b765c:	290d      	cmp	r1, #13
   b765e:	f000 80cd 	beq.w	b77fc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b7662:	d809      	bhi.n	b7678 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b7664:	2902      	cmp	r1, #2
   b7666:	f000 80a7 	beq.w	b77b8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b766a:	2906      	cmp	r1, #6
   b766c:	f000 80be 	beq.w	b77ec <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b7670:	2901      	cmp	r1, #1
   b7672:	d016      	beq.n	b76a2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b7674:	2000      	movs	r0, #0
}
   b7676:	4770      	bx	lr
  switch (Class)
   b7678:	2913      	cmp	r1, #19
   b767a:	f000 80d4 	beq.w	b7826 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b767e:	2928      	cmp	r1, #40	; 0x28
   b7680:	f000 80dc 	beq.w	b783c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b7684:	2910      	cmp	r1, #16
   b7686:	d1f5      	bne.n	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b7688:	2a10      	cmp	r2, #16
   b768a:	f000 80c9 	beq.w	b7820 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b768e:	f200 80ba 	bhi.w	b7806 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b7692:	2a02      	cmp	r2, #2
   b7694:	f000 80c1 	beq.w	b781a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b7698:	2a03      	cmp	r2, #3
   b769a:	d1eb      	bne.n	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b769c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b76a0:	e066      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b76a2:	2a26      	cmp	r2, #38	; 0x26
   b76a4:	d854      	bhi.n	b7750 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b76a6:	2a00      	cmp	r2, #0
   b76a8:	d0e4      	beq.n	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b76aa:	3a01      	subs	r2, #1
   b76ac:	2a25      	cmp	r2, #37	; 0x25
   b76ae:	d8e1      	bhi.n	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b76b0:	a301      	add	r3, pc, #4	; (adr r3, b76b8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b76b2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b76b6:	bf00      	nop
   b76b8:	000b776f 	.word	0x000b776f
   b76bc:	000b7675 	.word	0x000b7675
   b76c0:	000b7779 	.word	0x000b7779
   b76c4:	000b777d 	.word	0x000b777d
   b76c8:	000b7781 	.word	0x000b7781
   b76cc:	000b7675 	.word	0x000b7675
   b76d0:	000b7785 	.word	0x000b7785
   b76d4:	000b7675 	.word	0x000b7675
   b76d8:	000b7789 	.word	0x000b7789
   b76dc:	000b7675 	.word	0x000b7675
   b76e0:	000b7675 	.word	0x000b7675
   b76e4:	000b7675 	.word	0x000b7675
   b76e8:	000b7675 	.word	0x000b7675
   b76ec:	000b7675 	.word	0x000b7675
   b76f0:	000b7675 	.word	0x000b7675
   b76f4:	000b7675 	.word	0x000b7675
   b76f8:	000b778d 	.word	0x000b778d
   b76fc:	000b7791 	.word	0x000b7791
   b7700:	000b7795 	.word	0x000b7795
   b7704:	000b7799 	.word	0x000b7799
   b7708:	000b7675 	.word	0x000b7675
   b770c:	000b7675 	.word	0x000b7675
   b7710:	000b779d 	.word	0x000b779d
   b7714:	000b7675 	.word	0x000b7675
   b7718:	000b7675 	.word	0x000b7675
   b771c:	000b7675 	.word	0x000b7675
   b7720:	000b7675 	.word	0x000b7675
   b7724:	000b7675 	.word	0x000b7675
   b7728:	000b7675 	.word	0x000b7675
   b772c:	000b7675 	.word	0x000b7675
   b7730:	000b7675 	.word	0x000b7675
   b7734:	000b7675 	.word	0x000b7675
   b7738:	000b77a1 	.word	0x000b77a1
   b773c:	000b77a5 	.word	0x000b77a5
   b7740:	000b7675 	.word	0x000b7675
   b7744:	000b7675 	.word	0x000b7675
   b7748:	000b7675 	.word	0x000b7675
   b774c:	000b77a9 	.word	0x000b77a9
   b7750:	2a3c      	cmp	r2, #60	; 0x3c
   b7752:	d02d      	beq.n	b77b0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b7754:	d805      	bhi.n	b7762 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b7756:	2a35      	cmp	r2, #53	; 0x35
   b7758:	d028      	beq.n	b77ac <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b775a:	2a3b      	cmp	r2, #59	; 0x3b
   b775c:	d18a      	bne.n	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b775e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b7760:	e006      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7762:	2a60      	cmp	r2, #96	; 0x60
   b7764:	d026      	beq.n	b77b4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b7766:	2a61      	cmp	r2, #97	; 0x61
   b7768:	d184      	bne.n	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b776a:	6980      	ldr	r0, [r0, #24]
   b776c:	e000      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b776e:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b7770:	3800      	subs	r0, #0
   b7772:	bf18      	it	ne
   b7774:	2001      	movne	r0, #1
   b7776:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b7778:	6900      	ldr	r0, [r0, #16]
   b777a:	e7f9      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b777c:	6940      	ldr	r0, [r0, #20]
   b777e:	e7f7      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b7780:	69c0      	ldr	r0, [r0, #28]
   b7782:	e7f5      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b7784:	6a00      	ldr	r0, [r0, #32]
   b7786:	e7f3      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b7788:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b778a:	e7f1      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b778c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b778e:	e7ef      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b7790:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b7792:	e7ed      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b7794:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7796:	e7eb      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b7798:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b779a:	e7e9      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b779c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b779e:	e7e7      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b77a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b77a2:	e7e5      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b77a4:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b77a6:	e7e3      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b77a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b77aa:	e7e1      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b77ac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b77ae:	e7df      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b77b0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b77b2:	e7dd      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b77b4:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b77b6:	e7db      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b77b8:	2a34      	cmp	r2, #52	; 0x34
   b77ba:	d015      	beq.n	b77e8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b77bc:	d806      	bhi.n	b77cc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b77be:	2a13      	cmp	r2, #19
   b77c0:	d00b      	beq.n	b77da <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b77c2:	2a15      	cmp	r2, #21
   b77c4:	f47f af56 	bne.w	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b77c8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b77ca:	e7d1      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b77cc:	2a72      	cmp	r2, #114	; 0x72
   b77ce:	d006      	beq.n	b77de <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b77d0:	2a73      	cmp	r2, #115	; 0x73
   b77d2:	f47f af4f 	bne.w	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b77d6:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b77d8:	e7ca      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b77da:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b77dc:	e7c8      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b77de:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b77e0:	2b00      	cmp	r3, #0
   b77e2:	d13b      	bne.n	b785c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b77e4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b77e6:	e7c3      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b77e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b77ea:	e7c1      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b77ec:	b122      	cbz	r2, b77f8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b77ee:	2a08      	cmp	r2, #8
   b77f0:	f47f af40 	bne.w	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b77f4:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b77f6:	e7bb      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b77f8:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b77fa:	e7b9      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b77fc:	2a03      	cmp	r2, #3
   b77fe:	f47f af39 	bne.w	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b7802:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b7804:	e7b4      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7806:	2a14      	cmp	r2, #20
   b7808:	d005      	beq.n	b7816 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b780a:	2a15      	cmp	r2, #21
   b780c:	f47f af32 	bne.w	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b7810:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b7814:	e7ac      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b7816:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b7818:	e7aa      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b781a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b781e:	e7a7      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b7820:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b7824:	e7a4      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7826:	2a60      	cmp	r2, #96	; 0x60
   b7828:	d005      	beq.n	b7836 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b782a:	2a80      	cmp	r2, #128	; 0x80
   b782c:	f47f af22 	bne.w	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b7830:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b7834:	e79c      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b7836:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b783a:	e799      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b783c:	2a01      	cmp	r2, #1
   b783e:	d007      	beq.n	b7850 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b7840:	2a02      	cmp	r2, #2
   b7842:	d008      	beq.n	b7856 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b7844:	2a00      	cmp	r2, #0
   b7846:	f47f af15 	bne.w	b7674 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b784a:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b784e:	e78f      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b7850:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b7854:	e78c      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b7856:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b785a:	e789      	b.n	b7770 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b785c:	2001      	movs	r0, #1
   b785e:	4770      	bx	lr

000b7860 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b7860:	290d      	cmp	r1, #13
   b7862:	d035      	beq.n	b78d0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b7864:	d807      	bhi.n	b7876 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b7866:	2902      	cmp	r1, #2
   b7868:	d019      	beq.n	b789e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b786a:	2906      	cmp	r1, #6
   b786c:	d02a      	beq.n	b78c4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b786e:	2901      	cmp	r1, #1
   b7870:	d00d      	beq.n	b788e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b7872:	2000      	movs	r0, #0
}
   b7874:	4770      	bx	lr
  switch (Class)
   b7876:	2913      	cmp	r1, #19
   b7878:	d02f      	beq.n	b78da <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b787a:	2928      	cmp	r1, #40	; 0x28
   b787c:	d034      	beq.n	b78e8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b787e:	2910      	cmp	r1, #16
   b7880:	d1f7      	bne.n	b7872 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b7882:	3a02      	subs	r2, #2
   b7884:	b2d2      	uxtb	r2, r2
   b7886:	2a13      	cmp	r2, #19
   b7888:	d8f3      	bhi.n	b7872 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b788a:	4b1f      	ldr	r3, [pc, #124]	; (b7908 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b788c:	e004      	b.n	b7898 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b788e:	3a01      	subs	r2, #1
   b7890:	b2d2      	uxtb	r2, r2
   b7892:	2a60      	cmp	r2, #96	; 0x60
   b7894:	d8ed      	bhi.n	b7872 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b7896:	4b1d      	ldr	r3, [pc, #116]	; (b790c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b7898:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b789c:	4770      	bx	lr
    switch (ID)
   b789e:	2a34      	cmp	r2, #52	; 0x34
   b78a0:	d027      	beq.n	b78f2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b78a2:	d807      	bhi.n	b78b4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b78a4:	2a13      	cmp	r2, #19
   b78a6:	d026      	beq.n	b78f6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b78a8:	2a15      	cmp	r2, #21
   b78aa:	bf14      	ite	ne
   b78ac:	2000      	movne	r0, #0
   b78ae:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b78b2:	4770      	bx	lr
   b78b4:	2a72      	cmp	r2, #114	; 0x72
   b78b6:	d020      	beq.n	b78fa <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b78b8:	2a73      	cmp	r2, #115	; 0x73
   b78ba:	bf14      	ite	ne
   b78bc:	2000      	movne	r0, #0
   b78be:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b78c2:	4770      	bx	lr
    switch (ID)
   b78c4:	b1e2      	cbz	r2, b7900 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b78c6:	2a08      	cmp	r2, #8
   b78c8:	bf14      	ite	ne
   b78ca:	2000      	movne	r0, #0
   b78cc:	2006      	moveq	r0, #6
   b78ce:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b78d0:	2a03      	cmp	r2, #3
   b78d2:	bf14      	ite	ne
   b78d4:	2000      	movne	r0, #0
   b78d6:	201c      	moveq	r0, #28
   b78d8:	4770      	bx	lr
    switch (ID)
   b78da:	2a60      	cmp	r2, #96	; 0x60
   b78dc:	d012      	beq.n	b7904 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b78de:	2a80      	cmp	r2, #128	; 0x80
   b78e0:	bf14      	ite	ne
   b78e2:	2000      	movne	r0, #0
   b78e4:	20a4      	moveq	r0, #164	; 0xa4
   b78e6:	4770      	bx	lr
    switch (ID)
   b78e8:	2a02      	cmp	r2, #2
   b78ea:	d8c2      	bhi.n	b7872 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b78ec:	4b08      	ldr	r3, [pc, #32]	; (b7910 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b78ee:	5c98      	ldrb	r0, [r3, r2]
   b78f0:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b78f2:	200c      	movs	r0, #12
   b78f4:	4770      	bx	lr
   b78f6:	2048      	movs	r0, #72	; 0x48
   b78f8:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b78fa:	f44f 7004 	mov.w	r0, #528	; 0x210
   b78fe:	4770      	bx	lr
   b7900:	2014      	movs	r0, #20
   b7902:	4770      	bx	lr
   b7904:	2008      	movs	r0, #8
   b7906:	4770      	bx	lr
   b7908:	000c49e2 	.word	0x000c49e2
   b790c:	000c4920 	.word	0x000c4920
   b7910:	000c4a0a 	.word	0x000c4a0a

000b7914 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b7914:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b7916:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b791a:	07ca      	lsls	r2, r1, #31
   b791c:	d415      	bmi.n	b794a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b791e:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b7922:	4b59      	ldr	r3, [pc, #356]	; (b7a88 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b7924:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b7928:	429a      	cmp	r2, r3
   b792a:	d101      	bne.n	b7930 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b792c:	078b      	lsls	r3, r1, #30
   b792e:	d40c      	bmi.n	b794a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b7930:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b7934:	2b47      	cmp	r3, #71	; 0x47
   b7936:	d174      	bne.n	b7a22 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b7938:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b793c:	f245 1441 	movw	r4, #20801	; 0x5141
   b7940:	42a3      	cmp	r3, r4
   b7942:	d104      	bne.n	b794e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b7944:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b7948:	d06b      	beq.n	b7a22 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b794a:	2001      	movs	r0, #1
   b794c:	e070      	b.n	b7a30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b794e:	f245 1442 	movw	r4, #20802	; 0x5142
   b7952:	42a3      	cmp	r3, r4
   b7954:	d102      	bne.n	b795c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b7956:	f011 0f08 	tst.w	r1, #8
   b795a:	e7f5      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b795c:	f245 3442 	movw	r4, #21314	; 0x5342
   b7960:	42a3      	cmp	r3, r4
   b7962:	d102      	bne.n	b796a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b7964:	f011 0f10 	tst.w	r1, #16
   b7968:	e7ee      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b796a:	f244 1447 	movw	r4, #16711	; 0x4147
   b796e:	42a3      	cmp	r3, r4
   b7970:	d102      	bne.n	b7978 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b7972:	f011 0f20 	tst.w	r1, #32
   b7976:	e7e7      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b7978:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b797c:	42a3      	cmp	r3, r4
   b797e:	d102      	bne.n	b7986 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b7980:	f011 0f40 	tst.w	r1, #64	; 0x40
   b7984:	e7e0      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b7986:	f245 144c 	movw	r4, #20812	; 0x514c
   b798a:	42a3      	cmp	r3, r4
   b798c:	d102      	bne.n	b7994 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b798e:	f011 0f80 	tst.w	r1, #128	; 0x80
   b7992:	e7d9      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b7994:	f245 114e 	movw	r1, #20814	; 0x514e
   b7998:	428b      	cmp	r3, r1
   b799a:	d104      	bne.n	b79a6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b799c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b79a0:	f013 0f01 	tst.w	r3, #1
   b79a4:	e7d0      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b79a6:	f245 314e 	movw	r1, #21326	; 0x534e
   b79aa:	428b      	cmp	r3, r1
   b79ac:	d104      	bne.n	b79b8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b79ae:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b79b2:	f013 0f02 	tst.w	r3, #2
   b79b6:	e7c7      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b79b8:	f245 1150 	movw	r1, #20816	; 0x5150
   b79bc:	428b      	cmp	r3, r1
   b79be:	d104      	bne.n	b79ca <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b79c0:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b79c4:	f013 0f04 	tst.w	r3, #4
   b79c8:	e7be      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b79ca:	f245 1151 	movw	r1, #20817	; 0x5151
   b79ce:	428b      	cmp	r3, r1
   b79d0:	d104      	bne.n	b79dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b79d2:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b79d6:	f013 0f08 	tst.w	r3, #8
   b79da:	e7b5      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b79dc:	f245 3152 	movw	r1, #21330	; 0x5352
   b79e0:	428b      	cmp	r3, r1
   b79e2:	d104      	bne.n	b79ee <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b79e4:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b79e8:	f013 0f10 	tst.w	r3, #16
   b79ec:	e7ac      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b79ee:	f244 1153 	movw	r1, #16723	; 0x4153
   b79f2:	428b      	cmp	r3, r1
   b79f4:	d104      	bne.n	b7a00 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b79f6:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b79fa:	f013 0f20 	tst.w	r3, #32
   b79fe:	e7a3      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b7a00:	f245 4153 	movw	r1, #21587	; 0x5453
   b7a04:	428b      	cmp	r3, r1
   b7a06:	d104      	bne.n	b7a12 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b7a08:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7a0c:	f013 0f40 	tst.w	r3, #64	; 0x40
   b7a10:	e79a      	b.n	b7948 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b7a12:	f245 6153 	movw	r1, #22099	; 0x5653
   b7a16:	428b      	cmp	r3, r1
   b7a18:	d103      	bne.n	b7a22 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b7a1a:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b7a1e:	2b00      	cmp	r3, #0
   b7a20:	db93      	blt.n	b794a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b7a22:	4b1a      	ldr	r3, [pc, #104]	; (b7a8c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b7a24:	429a      	cmp	r2, r3
   b7a26:	d104      	bne.n	b7a32 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b7a28:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7a2c:	f000 0001 	and.w	r0, r0, #1
}
   b7a30:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b7a32:	4b17      	ldr	r3, [pc, #92]	; (b7a90 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b7a34:	429a      	cmp	r2, r3
   b7a36:	d104      	bne.n	b7a42 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b7a38:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7a3c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b7a40:	e7f6      	b.n	b7a30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b7a42:	4b14      	ldr	r3, [pc, #80]	; (b7a94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b7a44:	429a      	cmp	r2, r3
   b7a46:	d104      	bne.n	b7a52 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b7a48:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7a4c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b7a50:	e7ee      	b.n	b7a30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b7a52:	4b11      	ldr	r3, [pc, #68]	; (b7a98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b7a54:	429a      	cmp	r2, r3
   b7a56:	d104      	bne.n	b7a62 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b7a58:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7a5c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b7a60:	e7e6      	b.n	b7a30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b7a62:	4b0e      	ldr	r3, [pc, #56]	; (b7a9c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b7a64:	429a      	cmp	r2, r3
   b7a66:	d104      	bne.n	b7a72 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b7a68:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7a6c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b7a70:	e7de      	b.n	b7a30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b7a72:	4b0b      	ldr	r3, [pc, #44]	; (b7aa0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b7a74:	429a      	cmp	r2, r3
   b7a76:	d104      	bne.n	b7a82 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b7a78:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7a7c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b7a80:	e7d6      	b.n	b7a30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b7a82:	2000      	movs	r0, #0
   b7a84:	e7d4      	b.n	b7a30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b7a86:	bf00      	nop
   b7a88:	4d544400 	.word	0x4d544400
   b7a8c:	4d4c5200 	.word	0x4d4c5200
   b7a90:	434d5200 	.word	0x434d5200
   b7a94:	54585400 	.word	0x54585400
   b7a98:	574c5600 	.word	0x574c5600
   b7a9c:	47545600 	.word	0x47545600
   b7aa0:	41445a00 	.word	0x41445a00

000b7aa4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b7aa4:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b7aa8:	2b2a      	cmp	r3, #42	; 0x2a
   b7aaa:	d157      	bne.n	b7b5c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b7aac:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b7ab0:	2b47      	cmp	r3, #71	; 0x47
   b7ab2:	d153      	bne.n	b7b5c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b7ab4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b7ab8:	4a29      	ldr	r2, [pc, #164]	; (b7b60 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b7aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b7abe:	4293      	cmp	r3, r2
   b7ac0:	d011      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b7ac2:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b7ac6:	2a47      	cmp	r2, #71	; 0x47
   b7ac8:	d11a      	bne.n	b7b00 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b7aca:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b7ace:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b7ad2:	3941      	subs	r1, #65	; 0x41
   b7ad4:	b289      	uxth	r1, r1
   b7ad6:	2910      	cmp	r1, #16
   b7ad8:	d907      	bls.n	b7aea <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b7ada:	f022 0110 	bic.w	r1, r2, #16
   b7ade:	f245 3042 	movw	r0, #21314	; 0x5342
   b7ae2:	4281      	cmp	r1, r0
   b7ae4:	d129      	bne.n	b7b3a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b7ae6:	2001      	movs	r0, #1
}
   b7ae8:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b7aea:	481e      	ldr	r0, [pc, #120]	; (b7b64 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b7aec:	fa20 f101 	lsr.w	r1, r0, r1
   b7af0:	07c9      	lsls	r1, r1, #31
   b7af2:	d4f8      	bmi.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b7af4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b7af8:	f245 4153 	movw	r1, #21587	; 0x5453
   b7afc:	428a      	cmp	r2, r1
   b7afe:	d0f2      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b7b00:	4a19      	ldr	r2, [pc, #100]	; (b7b68 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b7b02:	4293      	cmp	r3, r2
   b7b04:	d0ef      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b7b06:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b7b0a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b7b0e:	4293      	cmp	r3, r2
   b7b10:	d0e9      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b7b12:	4a16      	ldr	r2, [pc, #88]	; (b7b6c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b7b14:	4293      	cmp	r3, r2
   b7b16:	d0e6      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b7b18:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b7b1c:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b7b20:	4293      	cmp	r3, r2
   b7b22:	d0e0      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b7b24:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b7b28:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b7b2c:	4293      	cmp	r3, r2
   b7b2e:	d0da      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b7b30:	480f      	ldr	r0, [pc, #60]	; (b7b70 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b7b32:	1a1b      	subs	r3, r3, r0
   b7b34:	4258      	negs	r0, r3
   b7b36:	4158      	adcs	r0, r3
   b7b38:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b7b3a:	f244 1147 	movw	r1, #16711	; 0x4147
   b7b3e:	428a      	cmp	r2, r1
   b7b40:	d0d1      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b7b42:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b7b46:	428a      	cmp	r2, r1
   b7b48:	d0cd      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b7b4a:	f245 314e 	movw	r1, #21326	; 0x534e
   b7b4e:	428a      	cmp	r2, r1
   b7b50:	d0c9      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b7b52:	f244 1153 	movw	r1, #16723	; 0x4153
   b7b56:	428a      	cmp	r2, r1
   b7b58:	d0c5      	beq.n	b7ae6 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b7b5a:	e7cb      	b.n	b7af4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b7b5c:	2000      	movs	r0, #0
   b7b5e:	4770      	bx	lr
   b7b60:	4d544400 	.word	0x4d544400
   b7b64:	0001a803 	.word	0x0001a803
   b7b68:	4d4c5200 	.word	0x4d4c5200
   b7b6c:	54585400 	.word	0x54585400
   b7b70:	41445a00 	.word	0x41445a00

000b7b74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b7b74:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b7b76:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b7b7a:	07ca      	lsls	r2, r1, #31
   b7b7c:	d415      	bmi.n	b7baa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b7b7e:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b7b82:	4b59      	ldr	r3, [pc, #356]	; (b7ce8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b7b84:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b7b88:	429a      	cmp	r2, r3
   b7b8a:	d101      	bne.n	b7b90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b7b8c:	078b      	lsls	r3, r1, #30
   b7b8e:	d40c      	bmi.n	b7baa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b7b90:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b7b94:	2b47      	cmp	r3, #71	; 0x47
   b7b96:	d174      	bne.n	b7c82 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b7b98:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b7b9c:	f245 1441 	movw	r4, #20801	; 0x5141
   b7ba0:	42a3      	cmp	r3, r4
   b7ba2:	d104      	bne.n	b7bae <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b7ba4:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b7ba8:	d06b      	beq.n	b7c82 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b7baa:	2001      	movs	r0, #1
   b7bac:	e070      	b.n	b7c90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b7bae:	f245 1442 	movw	r4, #20802	; 0x5142
   b7bb2:	42a3      	cmp	r3, r4
   b7bb4:	d102      	bne.n	b7bbc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b7bb6:	f011 0f08 	tst.w	r1, #8
   b7bba:	e7f5      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b7bbc:	f245 3442 	movw	r4, #21314	; 0x5342
   b7bc0:	42a3      	cmp	r3, r4
   b7bc2:	d102      	bne.n	b7bca <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b7bc4:	f011 0f10 	tst.w	r1, #16
   b7bc8:	e7ee      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b7bca:	f244 1447 	movw	r4, #16711	; 0x4147
   b7bce:	42a3      	cmp	r3, r4
   b7bd0:	d102      	bne.n	b7bd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b7bd2:	f011 0f20 	tst.w	r1, #32
   b7bd6:	e7e7      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b7bd8:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b7bdc:	42a3      	cmp	r3, r4
   b7bde:	d102      	bne.n	b7be6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b7be0:	f011 0f40 	tst.w	r1, #64	; 0x40
   b7be4:	e7e0      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b7be6:	f245 144c 	movw	r4, #20812	; 0x514c
   b7bea:	42a3      	cmp	r3, r4
   b7bec:	d102      	bne.n	b7bf4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b7bee:	f011 0f80 	tst.w	r1, #128	; 0x80
   b7bf2:	e7d9      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b7bf4:	f245 114e 	movw	r1, #20814	; 0x514e
   b7bf8:	428b      	cmp	r3, r1
   b7bfa:	d104      	bne.n	b7c06 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b7bfc:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b7c00:	f013 0f01 	tst.w	r3, #1
   b7c04:	e7d0      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b7c06:	f245 314e 	movw	r1, #21326	; 0x534e
   b7c0a:	428b      	cmp	r3, r1
   b7c0c:	d104      	bne.n	b7c18 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b7c0e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b7c12:	f013 0f02 	tst.w	r3, #2
   b7c16:	e7c7      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b7c18:	f245 1150 	movw	r1, #20816	; 0x5150
   b7c1c:	428b      	cmp	r3, r1
   b7c1e:	d104      	bne.n	b7c2a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b7c20:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b7c24:	f013 0f04 	tst.w	r3, #4
   b7c28:	e7be      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b7c2a:	f245 1151 	movw	r1, #20817	; 0x5151
   b7c2e:	428b      	cmp	r3, r1
   b7c30:	d104      	bne.n	b7c3c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b7c32:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b7c36:	f013 0f08 	tst.w	r3, #8
   b7c3a:	e7b5      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b7c3c:	f245 3152 	movw	r1, #21330	; 0x5352
   b7c40:	428b      	cmp	r3, r1
   b7c42:	d104      	bne.n	b7c4e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b7c44:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b7c48:	f013 0f10 	tst.w	r3, #16
   b7c4c:	e7ac      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b7c4e:	f244 1153 	movw	r1, #16723	; 0x4153
   b7c52:	428b      	cmp	r3, r1
   b7c54:	d104      	bne.n	b7c60 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b7c56:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b7c5a:	f013 0f20 	tst.w	r3, #32
   b7c5e:	e7a3      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b7c60:	f245 4153 	movw	r1, #21587	; 0x5453
   b7c64:	428b      	cmp	r3, r1
   b7c66:	d104      	bne.n	b7c72 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b7c68:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b7c6c:	f013 0f40 	tst.w	r3, #64	; 0x40
   b7c70:	e79a      	b.n	b7ba8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b7c72:	f245 6153 	movw	r1, #22099	; 0x5653
   b7c76:	428b      	cmp	r3, r1
   b7c78:	d103      	bne.n	b7c82 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b7c7a:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b7c7e:	2b00      	cmp	r3, #0
   b7c80:	db93      	blt.n	b7baa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b7c82:	4b1a      	ldr	r3, [pc, #104]	; (b7cec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b7c84:	429a      	cmp	r2, r3
   b7c86:	d104      	bne.n	b7c92 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b7c88:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b7c8c:	f000 0001 	and.w	r0, r0, #1
}
   b7c90:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b7c92:	4b17      	ldr	r3, [pc, #92]	; (b7cf0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b7c94:	429a      	cmp	r2, r3
   b7c96:	d104      	bne.n	b7ca2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b7c98:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b7c9c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b7ca0:	e7f6      	b.n	b7c90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b7ca2:	4b14      	ldr	r3, [pc, #80]	; (b7cf4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b7ca4:	429a      	cmp	r2, r3
   b7ca6:	d104      	bne.n	b7cb2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b7ca8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b7cac:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b7cb0:	e7ee      	b.n	b7c90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b7cb2:	4b11      	ldr	r3, [pc, #68]	; (b7cf8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b7cb4:	429a      	cmp	r2, r3
   b7cb6:	d104      	bne.n	b7cc2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b7cb8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b7cbc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b7cc0:	e7e6      	b.n	b7c90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b7cc2:	4b0e      	ldr	r3, [pc, #56]	; (b7cfc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b7cc4:	429a      	cmp	r2, r3
   b7cc6:	d104      	bne.n	b7cd2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b7cc8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b7ccc:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b7cd0:	e7de      	b.n	b7c90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b7cd2:	4b0b      	ldr	r3, [pc, #44]	; (b7d00 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b7cd4:	429a      	cmp	r2, r3
   b7cd6:	d104      	bne.n	b7ce2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b7cd8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b7cdc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b7ce0:	e7d6      	b.n	b7c90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b7ce2:	2000      	movs	r0, #0
   b7ce4:	e7d4      	b.n	b7c90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b7ce6:	bf00      	nop
   b7ce8:	4d544400 	.word	0x4d544400
   b7cec:	4d4c5200 	.word	0x4d4c5200
   b7cf0:	434d5200 	.word	0x434d5200
   b7cf4:	54585400 	.word	0x54585400
   b7cf8:	574c5600 	.word	0x574c5600
   b7cfc:	47545600 	.word	0x47545600
   b7d00:	41445a00 	.word	0x41445a00

000b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b7d04:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b7d08:	b110      	cbz	r0, b7d10 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b7d0a:	6803      	ldr	r3, [r0, #0]
   b7d0c:	689b      	ldr	r3, [r3, #8]
   b7d0e:	4718      	bx	r3
}
   b7d10:	4770      	bx	lr
	...

000b7d14 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b7d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b7d16:	4b3d      	ldr	r3, [pc, #244]	; (b7e0c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b7d18:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7d1a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b7d1e:	6818      	ldr	r0, [r3, #0]
   b7d20:	9000      	str	r0, [sp, #0]
   b7d22:	889b      	ldrh	r3, [r3, #4]
   b7d24:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7d28:	2205      	movs	r2, #5
   b7d2a:	4629      	mov	r1, r5
   b7d2c:	4668      	mov	r0, sp
   b7d2e:	f009 fbc5 	bl	c14bc <memcmp>
   b7d32:	b928      	cbnz	r0, b7d40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b7d34:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b7d38:	b113      	cbz	r3, b7d40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b7d3a:	2001      	movs	r0, #1
}
   b7d3c:	b003      	add	sp, #12
   b7d3e:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b7d40:	4933      	ldr	r1, [pc, #204]	; (b7e10 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b7d42:	4668      	mov	r0, sp
   b7d44:	f009 fc58 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7d48:	2205      	movs	r2, #5
   b7d4a:	4629      	mov	r1, r5
   b7d4c:	4668      	mov	r0, sp
   b7d4e:	f009 fbb5 	bl	c14bc <memcmp>
   b7d52:	b918      	cbnz	r0, b7d5c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b7d54:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b7d58:	2b00      	cmp	r3, #0
   b7d5a:	d1ee      	bne.n	b7d3a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b7d5c:	492d      	ldr	r1, [pc, #180]	; (b7e14 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b7d5e:	4668      	mov	r0, sp
   b7d60:	f009 fc4a 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7d64:	2205      	movs	r2, #5
   b7d66:	4629      	mov	r1, r5
   b7d68:	4668      	mov	r0, sp
   b7d6a:	f009 fba7 	bl	c14bc <memcmp>
   b7d6e:	b918      	cbnz	r0, b7d78 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b7d70:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b7d74:	2b00      	cmp	r3, #0
   b7d76:	d1e0      	bne.n	b7d3a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b7d78:	4927      	ldr	r1, [pc, #156]	; (b7e18 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b7d7a:	4668      	mov	r0, sp
   b7d7c:	f009 fc3c 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7d80:	2205      	movs	r2, #5
   b7d82:	4629      	mov	r1, r5
   b7d84:	4668      	mov	r0, sp
   b7d86:	f009 fb99 	bl	c14bc <memcmp>
   b7d8a:	b918      	cbnz	r0, b7d94 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b7d8c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b7d90:	2b00      	cmp	r3, #0
   b7d92:	d1d2      	bne.n	b7d3a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b7d94:	4921      	ldr	r1, [pc, #132]	; (b7e1c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b7d96:	4668      	mov	r0, sp
   b7d98:	f009 fc2e 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7d9c:	2205      	movs	r2, #5
   b7d9e:	4629      	mov	r1, r5
   b7da0:	4668      	mov	r0, sp
   b7da2:	f009 fb8b 	bl	c14bc <memcmp>
   b7da6:	b918      	cbnz	r0, b7db0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b7da8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b7dac:	2b00      	cmp	r3, #0
   b7dae:	d1c4      	bne.n	b7d3a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b7db0:	491b      	ldr	r1, [pc, #108]	; (b7e20 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b7db2:	4668      	mov	r0, sp
   b7db4:	f009 fc20 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7db8:	2205      	movs	r2, #5
   b7dba:	4629      	mov	r1, r5
   b7dbc:	4668      	mov	r0, sp
   b7dbe:	f009 fb7d 	bl	c14bc <memcmp>
   b7dc2:	b918      	cbnz	r0, b7dcc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b7dc4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b7dc8:	2b00      	cmp	r3, #0
   b7dca:	d1b6      	bne.n	b7d3a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b7dcc:	4915      	ldr	r1, [pc, #84]	; (b7e24 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b7dce:	4668      	mov	r0, sp
   b7dd0:	f009 fc12 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7dd4:	2205      	movs	r2, #5
   b7dd6:	4629      	mov	r1, r5
   b7dd8:	4668      	mov	r0, sp
   b7dda:	f009 fb6f 	bl	c14bc <memcmp>
   b7dde:	b918      	cbnz	r0, b7de8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b7de0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b7de4:	2b00      	cmp	r3, #0
   b7de6:	d1a8      	bne.n	b7d3a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b7de8:	490f      	ldr	r1, [pc, #60]	; (b7e28 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b7dea:	4668      	mov	r0, sp
   b7dec:	f009 fc04 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7df0:	2205      	movs	r2, #5
   b7df2:	4629      	mov	r1, r5
   b7df4:	4668      	mov	r0, sp
   b7df6:	f009 fb61 	bl	c14bc <memcmp>
   b7dfa:	b928      	cbnz	r0, b7e08 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b7dfc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b7e00:	3800      	subs	r0, #0
   b7e02:	bf18      	it	ne
   b7e04:	2001      	movne	r0, #1
   b7e06:	e799      	b.n	b7d3c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b7e08:	2000      	movs	r0, #0
   b7e0a:	e797      	b.n	b7d3c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b7e0c:	000c3d78 	.word	0x000c3d78
   b7e10:	000c3d4e 	.word	0x000c3d4e
   b7e14:	000c3d54 	.word	0x000c3d54
   b7e18:	000c3d5a 	.word	0x000c3d5a
   b7e1c:	000c3d60 	.word	0x000c3d60
   b7e20:	000c3d66 	.word	0x000c3d66
   b7e24:	000c3d6c 	.word	0x000c3d6c
   b7e28:	000c3d72 	.word	0x000c3d72

000b7e2c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b7e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b7e2e:	4b62      	ldr	r3, [pc, #392]	; (b7fb8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b7e30:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7e32:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b7e36:	6818      	ldr	r0, [r3, #0]
   b7e38:	9000      	str	r0, [sp, #0]
   b7e3a:	889b      	ldrh	r3, [r3, #4]
   b7e3c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7e40:	2205      	movs	r2, #5
   b7e42:	4629      	mov	r1, r5
   b7e44:	4668      	mov	r0, sp
   b7e46:	f009 fb39 	bl	c14bc <memcmp>
   b7e4a:	b978      	cbnz	r0, b7e6c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b7e4c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b7e50:	b163      	cbz	r3, b7e6c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b7e52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b7e56:	b14a      	cbz	r2, b7e6c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b7e58:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b7e5c:	2a00      	cmp	r2, #0
   b7e5e:	f040 80a3 	bne.w	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7e62:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b7e66:	2b00      	cmp	r3, #0
   b7e68:	f040 809e 	bne.w	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b7e6c:	4953      	ldr	r1, [pc, #332]	; (b7fbc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b7e6e:	4668      	mov	r0, sp
   b7e70:	f009 fbc2 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7e74:	2205      	movs	r2, #5
   b7e76:	4629      	mov	r1, r5
   b7e78:	4668      	mov	r0, sp
   b7e7a:	f009 fb1f 	bl	c14bc <memcmp>
   b7e7e:	b978      	cbnz	r0, b7ea0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b7e80:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b7e84:	b163      	cbz	r3, b7ea0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b7e86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b7e8a:	b14a      	cbz	r2, b7ea0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b7e8c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b7e90:	2a00      	cmp	r2, #0
   b7e92:	f040 8089 	bne.w	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7e96:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b7e9a:	2b00      	cmp	r3, #0
   b7e9c:	f040 8084 	bne.w	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b7ea0:	4947      	ldr	r1, [pc, #284]	; (b7fc0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b7ea2:	4668      	mov	r0, sp
   b7ea4:	f009 fba8 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7ea8:	2205      	movs	r2, #5
   b7eaa:	4629      	mov	r1, r5
   b7eac:	4668      	mov	r0, sp
   b7eae:	f009 fb05 	bl	c14bc <memcmp>
   b7eb2:	b968      	cbnz	r0, b7ed0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b7eb4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b7eb8:	b153      	cbz	r3, b7ed0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b7eba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b7ebe:	b13a      	cbz	r2, b7ed0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b7ec0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b7ec4:	2a00      	cmp	r2, #0
   b7ec6:	d16f      	bne.n	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7ec8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b7ecc:	2b00      	cmp	r3, #0
   b7ece:	d16b      	bne.n	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b7ed0:	493c      	ldr	r1, [pc, #240]	; (b7fc4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b7ed2:	4668      	mov	r0, sp
   b7ed4:	f009 fb90 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7ed8:	2205      	movs	r2, #5
   b7eda:	4629      	mov	r1, r5
   b7edc:	4668      	mov	r0, sp
   b7ede:	f009 faed 	bl	c14bc <memcmp>
   b7ee2:	b968      	cbnz	r0, b7f00 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b7ee4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b7ee8:	b153      	cbz	r3, b7f00 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b7eea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b7eee:	b13a      	cbz	r2, b7f00 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b7ef0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b7ef4:	2a00      	cmp	r2, #0
   b7ef6:	d157      	bne.n	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7ef8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b7efc:	2b00      	cmp	r3, #0
   b7efe:	d153      	bne.n	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b7f00:	4931      	ldr	r1, [pc, #196]	; (b7fc8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b7f02:	4668      	mov	r0, sp
   b7f04:	f009 fb78 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7f08:	2205      	movs	r2, #5
   b7f0a:	4629      	mov	r1, r5
   b7f0c:	4668      	mov	r0, sp
   b7f0e:	f009 fad5 	bl	c14bc <memcmp>
   b7f12:	b968      	cbnz	r0, b7f30 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b7f14:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b7f18:	b153      	cbz	r3, b7f30 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b7f1a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b7f1e:	b13a      	cbz	r2, b7f30 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b7f20:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b7f24:	2a00      	cmp	r2, #0
   b7f26:	d13f      	bne.n	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7f28:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b7f2c:	2b00      	cmp	r3, #0
   b7f2e:	d13b      	bne.n	b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b7f30:	4926      	ldr	r1, [pc, #152]	; (b7fcc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b7f32:	4668      	mov	r0, sp
   b7f34:	f009 fb60 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7f38:	2205      	movs	r2, #5
   b7f3a:	4629      	mov	r1, r5
   b7f3c:	4668      	mov	r0, sp
   b7f3e:	f009 fabd 	bl	c14bc <memcmp>
   b7f42:	b958      	cbnz	r0, b7f5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b7f44:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b7f48:	b143      	cbz	r3, b7f5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b7f4a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b7f4e:	b12a      	cbz	r2, b7f5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b7f50:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b7f54:	bb42      	cbnz	r2, b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7f56:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b7f5a:	bb2b      	cbnz	r3, b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b7f5c:	491c      	ldr	r1, [pc, #112]	; (b7fd0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b7f5e:	4668      	mov	r0, sp
   b7f60:	f009 fb4a 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7f64:	2205      	movs	r2, #5
   b7f66:	4629      	mov	r1, r5
   b7f68:	4668      	mov	r0, sp
   b7f6a:	f009 faa7 	bl	c14bc <memcmp>
   b7f6e:	b940      	cbnz	r0, b7f82 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b7f70:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b7f74:	b12b      	cbz	r3, b7f82 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b7f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b7f78:	b11a      	cbz	r2, b7f82 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b7f7a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b7f7c:	b9a2      	cbnz	r2, b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7f80:	b993      	cbnz	r3, b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b7f82:	4914      	ldr	r1, [pc, #80]	; (b7fd4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b7f84:	4668      	mov	r0, sp
   b7f86:	f009 fb37 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7f8a:	2205      	movs	r2, #5
   b7f8c:	4629      	mov	r1, r5
   b7f8e:	4668      	mov	r0, sp
   b7f90:	f009 fa94 	bl	c14bc <memcmp>
   b7f94:	b958      	cbnz	r0, b7fae <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b7f96:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b7f9a:	b153      	cbz	r3, b7fb2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b7f9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b7f9e:	b120      	cbz	r0, b7faa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b7fa0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b7fa2:	b90a      	cbnz	r2, b7fa8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b7fa4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b7fa6:	b100      	cbz	r0, b7faa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b7fa8:	2001      	movs	r0, #1
}
   b7faa:	b003      	add	sp, #12
   b7fac:	bd30      	pop	{r4, r5, pc}
  return false;
   b7fae:	2000      	movs	r0, #0
   b7fb0:	e7fb      	b.n	b7faa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b7fb2:	4618      	mov	r0, r3
   b7fb4:	e7f9      	b.n	b7faa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b7fb6:	bf00      	nop
   b7fb8:	000c3d78 	.word	0x000c3d78
   b7fbc:	000c3d4e 	.word	0x000c3d4e
   b7fc0:	000c3d54 	.word	0x000c3d54
   b7fc4:	000c3d5a 	.word	0x000c3d5a
   b7fc8:	000c3d60 	.word	0x000c3d60
   b7fcc:	000c3d66 	.word	0x000c3d66
   b7fd0:	000c3d6c 	.word	0x000c3d6c
   b7fd4:	000c3d72 	.word	0x000c3d72

000b7fd8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b7fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b7fda:	4b38      	ldr	r3, [pc, #224]	; (b80bc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b7fdc:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7fde:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b7fe2:	6818      	ldr	r0, [r3, #0]
   b7fe4:	9000      	str	r0, [sp, #0]
   b7fe6:	889b      	ldrh	r3, [r3, #4]
   b7fe8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b7fec:	2205      	movs	r2, #5
   b7fee:	4629      	mov	r1, r5
   b7ff0:	4668      	mov	r0, sp
   b7ff2:	f009 fa63 	bl	c14bc <memcmp>
   b7ff6:	b920      	cbnz	r0, b8002 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b7ff8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b7ffc:	3001      	adds	r0, #1
}
   b7ffe:	b003      	add	sp, #12
   b8000:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8002:	492f      	ldr	r1, [pc, #188]	; (b80c0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8004:	4668      	mov	r0, sp
   b8006:	f009 faf7 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b800a:	2205      	movs	r2, #5
   b800c:	4629      	mov	r1, r5
   b800e:	4668      	mov	r0, sp
   b8010:	f009 fa54 	bl	c14bc <memcmp>
   b8014:	b910      	cbnz	r0, b801c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8016:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b801a:	e7ef      	b.n	b7ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b801c:	4929      	ldr	r1, [pc, #164]	; (b80c4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b801e:	4668      	mov	r0, sp
   b8020:	f009 faea 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8024:	2205      	movs	r2, #5
   b8026:	4629      	mov	r1, r5
   b8028:	4668      	mov	r0, sp
   b802a:	f009 fa47 	bl	c14bc <memcmp>
   b802e:	b910      	cbnz	r0, b8036 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b8030:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8034:	e7e2      	b.n	b7ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8036:	4924      	ldr	r1, [pc, #144]	; (b80c8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8038:	4668      	mov	r0, sp
   b803a:	f009 fadd 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b803e:	2205      	movs	r2, #5
   b8040:	4629      	mov	r1, r5
   b8042:	4668      	mov	r0, sp
   b8044:	f009 fa3a 	bl	c14bc <memcmp>
   b8048:	b910      	cbnz	r0, b8050 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b804a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b804e:	e7d5      	b.n	b7ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8050:	491e      	ldr	r1, [pc, #120]	; (b80cc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b8052:	4668      	mov	r0, sp
   b8054:	f009 fad0 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8058:	2205      	movs	r2, #5
   b805a:	4629      	mov	r1, r5
   b805c:	4668      	mov	r0, sp
   b805e:	f009 fa2d 	bl	c14bc <memcmp>
   b8062:	b910      	cbnz	r0, b806a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b8064:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8068:	e7c8      	b.n	b7ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b806a:	4919      	ldr	r1, [pc, #100]	; (b80d0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b806c:	4668      	mov	r0, sp
   b806e:	f009 fac3 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8072:	2205      	movs	r2, #5
   b8074:	4629      	mov	r1, r5
   b8076:	4668      	mov	r0, sp
   b8078:	f009 fa20 	bl	c14bc <memcmp>
   b807c:	b910      	cbnz	r0, b8084 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b807e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8082:	e7bb      	b.n	b7ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8084:	4913      	ldr	r1, [pc, #76]	; (b80d4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b8086:	4668      	mov	r0, sp
   b8088:	f009 fab6 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b808c:	2205      	movs	r2, #5
   b808e:	4629      	mov	r1, r5
   b8090:	4668      	mov	r0, sp
   b8092:	f009 fa13 	bl	c14bc <memcmp>
   b8096:	b910      	cbnz	r0, b809e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b8098:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b809c:	e7ae      	b.n	b7ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b809e:	490e      	ldr	r1, [pc, #56]	; (b80d8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b80a0:	4668      	mov	r0, sp
   b80a2:	f009 faa9 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b80a6:	2205      	movs	r2, #5
   b80a8:	4629      	mov	r1, r5
   b80aa:	4668      	mov	r0, sp
   b80ac:	f009 fa06 	bl	c14bc <memcmp>
   b80b0:	b910      	cbnz	r0, b80b8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b80b2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b80b6:	e7a1      	b.n	b7ffc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b80b8:	2000      	movs	r0, #0
   b80ba:	e7a0      	b.n	b7ffe <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b80bc:	000c3d78 	.word	0x000c3d78
   b80c0:	000c3d4e 	.word	0x000c3d4e
   b80c4:	000c3d54 	.word	0x000c3d54
   b80c8:	000c3d5a 	.word	0x000c3d5a
   b80cc:	000c3d60 	.word	0x000c3d60
   b80d0:	000c3d66 	.word	0x000c3d66
   b80d4:	000c3d6c 	.word	0x000c3d6c
   b80d8:	000c3d72 	.word	0x000c3d72

000b80dc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b80dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b80de:	4b38      	ldr	r3, [pc, #224]	; (b81c0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b80e0:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b80e2:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b80e6:	6818      	ldr	r0, [r3, #0]
   b80e8:	9000      	str	r0, [sp, #0]
   b80ea:	889b      	ldrh	r3, [r3, #4]
   b80ec:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b80f0:	2205      	movs	r2, #5
   b80f2:	4629      	mov	r1, r5
   b80f4:	4668      	mov	r0, sp
   b80f6:	f009 f9e1 	bl	c14bc <memcmp>
   b80fa:	b920      	cbnz	r0, b8106 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b80fc:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8100:	3002      	adds	r0, #2
}
   b8102:	b003      	add	sp, #12
   b8104:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8106:	492f      	ldr	r1, [pc, #188]	; (b81c4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8108:	4668      	mov	r0, sp
   b810a:	f009 fa75 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b810e:	2205      	movs	r2, #5
   b8110:	4629      	mov	r1, r5
   b8112:	4668      	mov	r0, sp
   b8114:	f009 f9d2 	bl	c14bc <memcmp>
   b8118:	b910      	cbnz	r0, b8120 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b811a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b811e:	e7ef      	b.n	b8100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8120:	4929      	ldr	r1, [pc, #164]	; (b81c8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b8122:	4668      	mov	r0, sp
   b8124:	f009 fa68 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8128:	2205      	movs	r2, #5
   b812a:	4629      	mov	r1, r5
   b812c:	4668      	mov	r0, sp
   b812e:	f009 f9c5 	bl	c14bc <memcmp>
   b8132:	b910      	cbnz	r0, b813a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b8134:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8138:	e7e2      	b.n	b8100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b813a:	4924      	ldr	r1, [pc, #144]	; (b81cc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b813c:	4668      	mov	r0, sp
   b813e:	f009 fa5b 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8142:	2205      	movs	r2, #5
   b8144:	4629      	mov	r1, r5
   b8146:	4668      	mov	r0, sp
   b8148:	f009 f9b8 	bl	c14bc <memcmp>
   b814c:	b910      	cbnz	r0, b8154 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b814e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8152:	e7d5      	b.n	b8100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8154:	491e      	ldr	r1, [pc, #120]	; (b81d0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b8156:	4668      	mov	r0, sp
   b8158:	f009 fa4e 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b815c:	2205      	movs	r2, #5
   b815e:	4629      	mov	r1, r5
   b8160:	4668      	mov	r0, sp
   b8162:	f009 f9ab 	bl	c14bc <memcmp>
   b8166:	b910      	cbnz	r0, b816e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b8168:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b816c:	e7c8      	b.n	b8100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b816e:	4919      	ldr	r1, [pc, #100]	; (b81d4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b8170:	4668      	mov	r0, sp
   b8172:	f009 fa41 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8176:	2205      	movs	r2, #5
   b8178:	4629      	mov	r1, r5
   b817a:	4668      	mov	r0, sp
   b817c:	f009 f99e 	bl	c14bc <memcmp>
   b8180:	b910      	cbnz	r0, b8188 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b8182:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8186:	e7bb      	b.n	b8100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8188:	4913      	ldr	r1, [pc, #76]	; (b81d8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b818a:	4668      	mov	r0, sp
   b818c:	f009 fa34 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8190:	2205      	movs	r2, #5
   b8192:	4629      	mov	r1, r5
   b8194:	4668      	mov	r0, sp
   b8196:	f009 f991 	bl	c14bc <memcmp>
   b819a:	b910      	cbnz	r0, b81a2 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b819c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b81a0:	e7ae      	b.n	b8100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b81a2:	490e      	ldr	r1, [pc, #56]	; (b81dc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b81a4:	4668      	mov	r0, sp
   b81a6:	f009 fa27 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b81aa:	2205      	movs	r2, #5
   b81ac:	4629      	mov	r1, r5
   b81ae:	4668      	mov	r0, sp
   b81b0:	f009 f984 	bl	c14bc <memcmp>
   b81b4:	b910      	cbnz	r0, b81bc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b81b6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b81ba:	e7a1      	b.n	b8100 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b81bc:	2000      	movs	r0, #0
   b81be:	e7a0      	b.n	b8102 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b81c0:	000c3d78 	.word	0x000c3d78
   b81c4:	000c3d4e 	.word	0x000c3d4e
   b81c8:	000c3d54 	.word	0x000c3d54
   b81cc:	000c3d5a 	.word	0x000c3d5a
   b81d0:	000c3d60 	.word	0x000c3d60
   b81d4:	000c3d66 	.word	0x000c3d66
   b81d8:	000c3d6c 	.word	0x000c3d6c
   b81dc:	000c3d72 	.word	0x000c3d72

000b81e0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b81e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b81e2:	4b39      	ldr	r3, [pc, #228]	; (b82c8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b81e4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b81e6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b81ea:	6818      	ldr	r0, [r3, #0]
   b81ec:	9000      	str	r0, [sp, #0]
   b81ee:	889b      	ldrh	r3, [r3, #4]
   b81f0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b81f4:	2205      	movs	r2, #5
   b81f6:	4629      	mov	r1, r5
   b81f8:	4668      	mov	r0, sp
   b81fa:	f009 f95f 	bl	c14bc <memcmp>
   b81fe:	b920      	cbnz	r0, b820a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8200:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8204:	3066      	adds	r0, #102	; 0x66
}
   b8206:	b003      	add	sp, #12
   b8208:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b820a:	4930      	ldr	r1, [pc, #192]	; (b82cc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b820c:	4668      	mov	r0, sp
   b820e:	f009 f9f3 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8212:	2205      	movs	r2, #5
   b8214:	4629      	mov	r1, r5
   b8216:	4668      	mov	r0, sp
   b8218:	f009 f950 	bl	c14bc <memcmp>
   b821c:	b910      	cbnz	r0, b8224 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b821e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8222:	e7ef      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8224:	492a      	ldr	r1, [pc, #168]	; (b82d0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8226:	4668      	mov	r0, sp
   b8228:	f009 f9e6 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b822c:	2205      	movs	r2, #5
   b822e:	4629      	mov	r1, r5
   b8230:	4668      	mov	r0, sp
   b8232:	f009 f943 	bl	c14bc <memcmp>
   b8236:	b910      	cbnz	r0, b823e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8238:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b823c:	e7e2      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b823e:	4925      	ldr	r1, [pc, #148]	; (b82d4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b8240:	4668      	mov	r0, sp
   b8242:	f009 f9d9 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8246:	2205      	movs	r2, #5
   b8248:	4629      	mov	r1, r5
   b824a:	4668      	mov	r0, sp
   b824c:	f009 f936 	bl	c14bc <memcmp>
   b8250:	b910      	cbnz	r0, b8258 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b8252:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8256:	e7d5      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8258:	491f      	ldr	r1, [pc, #124]	; (b82d8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b825a:	4668      	mov	r0, sp
   b825c:	f009 f9cc 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8260:	2205      	movs	r2, #5
   b8262:	4629      	mov	r1, r5
   b8264:	4668      	mov	r0, sp
   b8266:	f009 f929 	bl	c14bc <memcmp>
   b826a:	b910      	cbnz	r0, b8272 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b826c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8270:	e7c8      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8272:	491a      	ldr	r1, [pc, #104]	; (b82dc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b8274:	4668      	mov	r0, sp
   b8276:	f009 f9bf 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b827a:	2205      	movs	r2, #5
   b827c:	4629      	mov	r1, r5
   b827e:	4668      	mov	r0, sp
   b8280:	f009 f91c 	bl	c14bc <memcmp>
   b8284:	b910      	cbnz	r0, b828c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b8286:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b828a:	e7bb      	b.n	b8204 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b828c:	4914      	ldr	r1, [pc, #80]	; (b82e0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b828e:	4668      	mov	r0, sp
   b8290:	f009 f9b2 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8294:	2205      	movs	r2, #5
   b8296:	4629      	mov	r1, r5
   b8298:	4668      	mov	r0, sp
   b829a:	f009 f90f 	bl	c14bc <memcmp>
   b829e:	b918      	cbnz	r0, b82a8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b82a0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b82a4:	3034      	adds	r0, #52	; 0x34
   b82a6:	e7ae      	b.n	b8206 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b82a8:	490e      	ldr	r1, [pc, #56]	; (b82e4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b82aa:	4668      	mov	r0, sp
   b82ac:	f009 f9a4 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b82b0:	2205      	movs	r2, #5
   b82b2:	4629      	mov	r1, r5
   b82b4:	4668      	mov	r0, sp
   b82b6:	f009 f901 	bl	c14bc <memcmp>
   b82ba:	b910      	cbnz	r0, b82c2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b82bc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b82c0:	e7f0      	b.n	b82a4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b82c2:	2000      	movs	r0, #0
   b82c4:	e79f      	b.n	b8206 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b82c6:	bf00      	nop
   b82c8:	000c3d78 	.word	0x000c3d78
   b82cc:	000c3d4e 	.word	0x000c3d4e
   b82d0:	000c3d54 	.word	0x000c3d54
   b82d4:	000c3d5a 	.word	0x000c3d5a
   b82d8:	000c3d60 	.word	0x000c3d60
   b82dc:	000c3d66 	.word	0x000c3d66
   b82e0:	000c3d6c 	.word	0x000c3d6c
   b82e4:	000c3d72 	.word	0x000c3d72

000b82e8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b82e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b82ea:	4b39      	ldr	r3, [pc, #228]	; (b83d0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b82ec:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b82ee:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b82f2:	6818      	ldr	r0, [r3, #0]
   b82f4:	9000      	str	r0, [sp, #0]
   b82f6:	889b      	ldrh	r3, [r3, #4]
   b82f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b82fc:	2205      	movs	r2, #5
   b82fe:	4629      	mov	r1, r5
   b8300:	4668      	mov	r0, sp
   b8302:	f009 f8db 	bl	c14bc <memcmp>
   b8306:	b920      	cbnz	r0, b8312 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8308:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b830c:	3067      	adds	r0, #103	; 0x67
}
   b830e:	b003      	add	sp, #12
   b8310:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8312:	4930      	ldr	r1, [pc, #192]	; (b83d4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b8314:	4668      	mov	r0, sp
   b8316:	f009 f96f 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b831a:	2205      	movs	r2, #5
   b831c:	4629      	mov	r1, r5
   b831e:	4668      	mov	r0, sp
   b8320:	f009 f8cc 	bl	c14bc <memcmp>
   b8324:	b910      	cbnz	r0, b832c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8326:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b832a:	e7ef      	b.n	b830c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b832c:	492a      	ldr	r1, [pc, #168]	; (b83d8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b832e:	4668      	mov	r0, sp
   b8330:	f009 f962 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8334:	2205      	movs	r2, #5
   b8336:	4629      	mov	r1, r5
   b8338:	4668      	mov	r0, sp
   b833a:	f009 f8bf 	bl	c14bc <memcmp>
   b833e:	b910      	cbnz	r0, b8346 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b8340:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8344:	e7e2      	b.n	b830c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8346:	4925      	ldr	r1, [pc, #148]	; (b83dc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b8348:	4668      	mov	r0, sp
   b834a:	f009 f955 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b834e:	2205      	movs	r2, #5
   b8350:	4629      	mov	r1, r5
   b8352:	4668      	mov	r0, sp
   b8354:	f009 f8b2 	bl	c14bc <memcmp>
   b8358:	b910      	cbnz	r0, b8360 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b835a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b835e:	e7d5      	b.n	b830c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8360:	491f      	ldr	r1, [pc, #124]	; (b83e0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b8362:	4668      	mov	r0, sp
   b8364:	f009 f948 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8368:	2205      	movs	r2, #5
   b836a:	4629      	mov	r1, r5
   b836c:	4668      	mov	r0, sp
   b836e:	f009 f8a5 	bl	c14bc <memcmp>
   b8372:	b910      	cbnz	r0, b837a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b8374:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8378:	e7c8      	b.n	b830c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b837a:	491a      	ldr	r1, [pc, #104]	; (b83e4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b837c:	4668      	mov	r0, sp
   b837e:	f009 f93b 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8382:	2205      	movs	r2, #5
   b8384:	4629      	mov	r1, r5
   b8386:	4668      	mov	r0, sp
   b8388:	f009 f898 	bl	c14bc <memcmp>
   b838c:	b910      	cbnz	r0, b8394 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b838e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8392:	e7bb      	b.n	b830c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8394:	4914      	ldr	r1, [pc, #80]	; (b83e8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b8396:	4668      	mov	r0, sp
   b8398:	f009 f92e 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b839c:	2205      	movs	r2, #5
   b839e:	4629      	mov	r1, r5
   b83a0:	4668      	mov	r0, sp
   b83a2:	f009 f88b 	bl	c14bc <memcmp>
   b83a6:	b918      	cbnz	r0, b83b0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b83a8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b83ac:	3035      	adds	r0, #53	; 0x35
   b83ae:	e7ae      	b.n	b830e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b83b0:	490e      	ldr	r1, [pc, #56]	; (b83ec <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b83b2:	4668      	mov	r0, sp
   b83b4:	f009 f920 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83b8:	2205      	movs	r2, #5
   b83ba:	4629      	mov	r1, r5
   b83bc:	4668      	mov	r0, sp
   b83be:	f009 f87d 	bl	c14bc <memcmp>
   b83c2:	b910      	cbnz	r0, b83ca <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b83c4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b83c8:	e7f0      	b.n	b83ac <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b83ca:	2000      	movs	r0, #0
   b83cc:	e79f      	b.n	b830e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b83ce:	bf00      	nop
   b83d0:	000c3d78 	.word	0x000c3d78
   b83d4:	000c3d4e 	.word	0x000c3d4e
   b83d8:	000c3d54 	.word	0x000c3d54
   b83dc:	000c3d5a 	.word	0x000c3d5a
   b83e0:	000c3d60 	.word	0x000c3d60
   b83e4:	000c3d66 	.word	0x000c3d66
   b83e8:	000c3d6c 	.word	0x000c3d6c
   b83ec:	000c3d72 	.word	0x000c3d72

000b83f0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b83f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b83f2:	4b39      	ldr	r3, [pc, #228]	; (b84d8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b83f4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83f6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b83fa:	6818      	ldr	r0, [r3, #0]
   b83fc:	9000      	str	r0, [sp, #0]
   b83fe:	889b      	ldrh	r3, [r3, #4]
   b8400:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8404:	2205      	movs	r2, #5
   b8406:	4629      	mov	r1, r5
   b8408:	4668      	mov	r0, sp
   b840a:	f009 f857 	bl	c14bc <memcmp>
   b840e:	b928      	cbnz	r0, b841c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b8410:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b8414:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b8418:	b003      	add	sp, #12
   b841a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b841c:	492f      	ldr	r1, [pc, #188]	; (b84dc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b841e:	4668      	mov	r0, sp
   b8420:	f009 f8ea 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8424:	2205      	movs	r2, #5
   b8426:	4629      	mov	r1, r5
   b8428:	4668      	mov	r0, sp
   b842a:	f009 f847 	bl	c14bc <memcmp>
   b842e:	b910      	cbnz	r0, b8436 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b8430:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8434:	e7ee      	b.n	b8414 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8436:	492a      	ldr	r1, [pc, #168]	; (b84e0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b8438:	4668      	mov	r0, sp
   b843a:	f009 f8dd 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b843e:	2205      	movs	r2, #5
   b8440:	4629      	mov	r1, r5
   b8442:	4668      	mov	r0, sp
   b8444:	f009 f83a 	bl	c14bc <memcmp>
   b8448:	b910      	cbnz	r0, b8450 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b844a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b844e:	e7e1      	b.n	b8414 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8450:	4924      	ldr	r1, [pc, #144]	; (b84e4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b8452:	4668      	mov	r0, sp
   b8454:	f009 f8d0 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8458:	2205      	movs	r2, #5
   b845a:	4629      	mov	r1, r5
   b845c:	4668      	mov	r0, sp
   b845e:	f009 f82d 	bl	c14bc <memcmp>
   b8462:	b910      	cbnz	r0, b846a <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b8464:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8468:	e7d4      	b.n	b8414 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b846a:	491f      	ldr	r1, [pc, #124]	; (b84e8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b846c:	4668      	mov	r0, sp
   b846e:	f009 f8c3 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8472:	2205      	movs	r2, #5
   b8474:	4629      	mov	r1, r5
   b8476:	4668      	mov	r0, sp
   b8478:	f009 f820 	bl	c14bc <memcmp>
   b847c:	b910      	cbnz	r0, b8484 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b847e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8482:	e7c7      	b.n	b8414 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8484:	4919      	ldr	r1, [pc, #100]	; (b84ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b8486:	4668      	mov	r0, sp
   b8488:	f009 f8b6 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b848c:	2205      	movs	r2, #5
   b848e:	4629      	mov	r1, r5
   b8490:	4668      	mov	r0, sp
   b8492:	f009 f813 	bl	c14bc <memcmp>
   b8496:	b910      	cbnz	r0, b849e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b8498:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b849c:	e7ba      	b.n	b8414 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b849e:	4914      	ldr	r1, [pc, #80]	; (b84f0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b84a0:	4668      	mov	r0, sp
   b84a2:	f009 f8a9 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b84a6:	2205      	movs	r2, #5
   b84a8:	4629      	mov	r1, r5
   b84aa:	4668      	mov	r0, sp
   b84ac:	f009 f806 	bl	c14bc <memcmp>
   b84b0:	b918      	cbnz	r0, b84ba <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b84b2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b84b6:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b84b8:	e7ae      	b.n	b8418 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b84ba:	490e      	ldr	r1, [pc, #56]	; (b84f4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b84bc:	4668      	mov	r0, sp
   b84be:	f009 f89b 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b84c2:	2205      	movs	r2, #5
   b84c4:	4629      	mov	r1, r5
   b84c6:	4668      	mov	r0, sp
   b84c8:	f008 fff8 	bl	c14bc <memcmp>
   b84cc:	b910      	cbnz	r0, b84d4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b84ce:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b84d2:	e7f0      	b.n	b84b6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b84d4:	2000      	movs	r0, #0
   b84d6:	e79f      	b.n	b8418 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b84d8:	000c3d78 	.word	0x000c3d78
   b84dc:	000c3d4e 	.word	0x000c3d4e
   b84e0:	000c3d54 	.word	0x000c3d54
   b84e4:	000c3d5a 	.word	0x000c3d5a
   b84e8:	000c3d60 	.word	0x000c3d60
   b84ec:	000c3d66 	.word	0x000c3d66
   b84f0:	000c3d6c 	.word	0x000c3d6c
   b84f4:	000c3d72 	.word	0x000c3d72

000b84f8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b84f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b84fa:	4b3a      	ldr	r3, [pc, #232]	; (b85e4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b84fc:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b84fe:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8502:	6818      	ldr	r0, [r3, #0]
   b8504:	9000      	str	r0, [sp, #0]
   b8506:	889b      	ldrh	r3, [r3, #4]
   b8508:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b850c:	2205      	movs	r2, #5
   b850e:	4629      	mov	r1, r5
   b8510:	4668      	mov	r0, sp
   b8512:	f008 ffd3 	bl	c14bc <memcmp>
   b8516:	b930      	cbnz	r0, b8526 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b8518:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b851c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8520:	3001      	adds	r0, #1
}
   b8522:	b003      	add	sp, #12
   b8524:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8526:	4930      	ldr	r1, [pc, #192]	; (b85e8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b8528:	4668      	mov	r0, sp
   b852a:	f009 f865 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b852e:	2205      	movs	r2, #5
   b8530:	4629      	mov	r1, r5
   b8532:	4668      	mov	r0, sp
   b8534:	f008 ffc2 	bl	c14bc <memcmp>
   b8538:	b910      	cbnz	r0, b8540 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b853a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b853e:	e7ed      	b.n	b851c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8540:	492a      	ldr	r1, [pc, #168]	; (b85ec <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b8542:	4668      	mov	r0, sp
   b8544:	f009 f858 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8548:	2205      	movs	r2, #5
   b854a:	4629      	mov	r1, r5
   b854c:	4668      	mov	r0, sp
   b854e:	f008 ffb5 	bl	c14bc <memcmp>
   b8552:	b910      	cbnz	r0, b855a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b8554:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8558:	e7e0      	b.n	b851c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b855a:	4925      	ldr	r1, [pc, #148]	; (b85f0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b855c:	4668      	mov	r0, sp
   b855e:	f009 f84b 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8562:	2205      	movs	r2, #5
   b8564:	4629      	mov	r1, r5
   b8566:	4668      	mov	r0, sp
   b8568:	f008 ffa8 	bl	c14bc <memcmp>
   b856c:	b910      	cbnz	r0, b8574 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b856e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8572:	e7d3      	b.n	b851c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8574:	491f      	ldr	r1, [pc, #124]	; (b85f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b8576:	4668      	mov	r0, sp
   b8578:	f009 f83e 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b857c:	2205      	movs	r2, #5
   b857e:	4629      	mov	r1, r5
   b8580:	4668      	mov	r0, sp
   b8582:	f008 ff9b 	bl	c14bc <memcmp>
   b8586:	b910      	cbnz	r0, b858e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b8588:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b858c:	e7c6      	b.n	b851c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b858e:	491a      	ldr	r1, [pc, #104]	; (b85f8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b8590:	4668      	mov	r0, sp
   b8592:	f009 f831 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8596:	2205      	movs	r2, #5
   b8598:	4629      	mov	r1, r5
   b859a:	4668      	mov	r0, sp
   b859c:	f008 ff8e 	bl	c14bc <memcmp>
   b85a0:	b910      	cbnz	r0, b85a8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b85a2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b85a6:	e7b9      	b.n	b851c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b85a8:	4914      	ldr	r1, [pc, #80]	; (b85fc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b85aa:	4668      	mov	r0, sp
   b85ac:	f009 f824 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85b0:	2205      	movs	r2, #5
   b85b2:	4629      	mov	r1, r5
   b85b4:	4668      	mov	r0, sp
   b85b6:	f008 ff81 	bl	c14bc <memcmp>
   b85ba:	b918      	cbnz	r0, b85c4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b85bc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b85c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b85c2:	e7ad      	b.n	b8520 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b85c4:	490e      	ldr	r1, [pc, #56]	; (b8600 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b85c6:	4668      	mov	r0, sp
   b85c8:	f009 f816 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85cc:	2205      	movs	r2, #5
   b85ce:	4629      	mov	r1, r5
   b85d0:	4668      	mov	r0, sp
   b85d2:	f008 ff73 	bl	c14bc <memcmp>
   b85d6:	b910      	cbnz	r0, b85de <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b85d8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b85dc:	e7f0      	b.n	b85c0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b85de:	2000      	movs	r0, #0
   b85e0:	e79f      	b.n	b8522 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b85e2:	bf00      	nop
   b85e4:	000c3d78 	.word	0x000c3d78
   b85e8:	000c3d4e 	.word	0x000c3d4e
   b85ec:	000c3d54 	.word	0x000c3d54
   b85f0:	000c3d5a 	.word	0x000c3d5a
   b85f4:	000c3d60 	.word	0x000c3d60
   b85f8:	000c3d66 	.word	0x000c3d66
   b85fc:	000c3d6c 	.word	0x000c3d6c
   b8600:	000c3d72 	.word	0x000c3d72

000b8604 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b8604:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b8606:	4b30      	ldr	r3, [pc, #192]	; (b86c8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b8608:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b860a:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b860e:	6818      	ldr	r0, [r3, #0]
   b8610:	9000      	str	r0, [sp, #0]
   b8612:	889b      	ldrh	r3, [r3, #4]
   b8614:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8618:	2205      	movs	r2, #5
   b861a:	4621      	mov	r1, r4
   b861c:	4668      	mov	r0, sp
   b861e:	f008 ff4d 	bl	c14bc <memcmp>
   b8622:	b910      	cbnz	r0, b862a <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b8624:	2064      	movs	r0, #100	; 0x64
}
   b8626:	b002      	add	sp, #8
   b8628:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b862a:	4928      	ldr	r1, [pc, #160]	; (b86cc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b862c:	4668      	mov	r0, sp
   b862e:	f008 ffe3 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8632:	2205      	movs	r2, #5
   b8634:	4621      	mov	r1, r4
   b8636:	4668      	mov	r0, sp
   b8638:	f008 ff40 	bl	c14bc <memcmp>
   b863c:	2800      	cmp	r0, #0
   b863e:	d0f1      	beq.n	b8624 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b8640:	4923      	ldr	r1, [pc, #140]	; (b86d0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b8642:	4668      	mov	r0, sp
   b8644:	f008 ffd8 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8648:	2205      	movs	r2, #5
   b864a:	4621      	mov	r1, r4
   b864c:	4668      	mov	r0, sp
   b864e:	f008 ff35 	bl	c14bc <memcmp>
   b8652:	2800      	cmp	r0, #0
   b8654:	d0e6      	beq.n	b8624 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b8656:	491f      	ldr	r1, [pc, #124]	; (b86d4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b8658:	4668      	mov	r0, sp
   b865a:	f008 ffcd 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b865e:	2205      	movs	r2, #5
   b8660:	4621      	mov	r1, r4
   b8662:	4668      	mov	r0, sp
   b8664:	f008 ff2a 	bl	c14bc <memcmp>
   b8668:	2800      	cmp	r0, #0
   b866a:	d0db      	beq.n	b8624 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b866c:	491a      	ldr	r1, [pc, #104]	; (b86d8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b866e:	4668      	mov	r0, sp
   b8670:	f008 ffc2 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8674:	2205      	movs	r2, #5
   b8676:	4621      	mov	r1, r4
   b8678:	4668      	mov	r0, sp
   b867a:	f008 ff1f 	bl	c14bc <memcmp>
   b867e:	2800      	cmp	r0, #0
   b8680:	d0d0      	beq.n	b8624 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b8682:	4916      	ldr	r1, [pc, #88]	; (b86dc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b8684:	4668      	mov	r0, sp
   b8686:	f008 ffb7 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b868a:	2205      	movs	r2, #5
   b868c:	4621      	mov	r1, r4
   b868e:	4668      	mov	r0, sp
   b8690:	f008 ff14 	bl	c14bc <memcmp>
   b8694:	2800      	cmp	r0, #0
   b8696:	d0c5      	beq.n	b8624 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b8698:	4911      	ldr	r1, [pc, #68]	; (b86e0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b869a:	4668      	mov	r0, sp
   b869c:	f008 ffac 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86a0:	2205      	movs	r2, #5
   b86a2:	4621      	mov	r1, r4
   b86a4:	4668      	mov	r0, sp
   b86a6:	f008 ff09 	bl	c14bc <memcmp>
   b86aa:	b148      	cbz	r0, b86c0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b86ac:	490d      	ldr	r1, [pc, #52]	; (b86e4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b86ae:	4668      	mov	r0, sp
   b86b0:	f008 ffa2 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86b4:	2205      	movs	r2, #5
   b86b6:	4621      	mov	r1, r4
   b86b8:	4668      	mov	r0, sp
   b86ba:	f008 feff 	bl	c14bc <memcmp>
   b86be:	b908      	cbnz	r0, b86c4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b86c0:	2032      	movs	r0, #50	; 0x32
   b86c2:	e7b0      	b.n	b8626 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b86c4:	2000      	movs	r0, #0
   b86c6:	e7ae      	b.n	b8626 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b86c8:	000c3d78 	.word	0x000c3d78
   b86cc:	000c3d4e 	.word	0x000c3d4e
   b86d0:	000c3d54 	.word	0x000c3d54
   b86d4:	000c3d5a 	.word	0x000c3d5a
   b86d8:	000c3d60 	.word	0x000c3d60
   b86dc:	000c3d66 	.word	0x000c3d66
   b86e0:	000c3d6c 	.word	0x000c3d6c
   b86e4:	000c3d72 	.word	0x000c3d72

000b86e8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b86e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b86ea:	4b38      	ldr	r3, [pc, #224]	; (b87cc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b86ec:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86ee:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b86f2:	6818      	ldr	r0, [r3, #0]
   b86f4:	9000      	str	r0, [sp, #0]
   b86f6:	889b      	ldrh	r3, [r3, #4]
   b86f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86fc:	2205      	movs	r2, #5
   b86fe:	4629      	mov	r1, r5
   b8700:	4668      	mov	r0, sp
   b8702:	f008 fedb 	bl	c14bc <memcmp>
   b8706:	b918      	cbnz	r0, b8710 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b8708:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b870c:	b003      	add	sp, #12
   b870e:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8710:	492f      	ldr	r1, [pc, #188]	; (b87d0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b8712:	4668      	mov	r0, sp
   b8714:	f008 ff70 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8718:	2205      	movs	r2, #5
   b871a:	4629      	mov	r1, r5
   b871c:	4668      	mov	r0, sp
   b871e:	f008 fecd 	bl	c14bc <memcmp>
   b8722:	b910      	cbnz	r0, b872a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b8724:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8728:	e7f0      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b872a:	492a      	ldr	r1, [pc, #168]	; (b87d4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b872c:	4668      	mov	r0, sp
   b872e:	f008 ff63 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8732:	2205      	movs	r2, #5
   b8734:	4629      	mov	r1, r5
   b8736:	4668      	mov	r0, sp
   b8738:	f008 fec0 	bl	c14bc <memcmp>
   b873c:	b910      	cbnz	r0, b8744 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b873e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8742:	e7e3      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8744:	4924      	ldr	r1, [pc, #144]	; (b87d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b8746:	4668      	mov	r0, sp
   b8748:	f008 ff56 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b874c:	2205      	movs	r2, #5
   b874e:	4629      	mov	r1, r5
   b8750:	4668      	mov	r0, sp
   b8752:	f008 feb3 	bl	c14bc <memcmp>
   b8756:	b910      	cbnz	r0, b875e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b8758:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b875c:	e7d6      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b875e:	491f      	ldr	r1, [pc, #124]	; (b87dc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b8760:	4668      	mov	r0, sp
   b8762:	f008 ff49 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8766:	2205      	movs	r2, #5
   b8768:	4629      	mov	r1, r5
   b876a:	4668      	mov	r0, sp
   b876c:	f008 fea6 	bl	c14bc <memcmp>
   b8770:	b910      	cbnz	r0, b8778 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b8772:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8776:	e7c9      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8778:	4919      	ldr	r1, [pc, #100]	; (b87e0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b877a:	4668      	mov	r0, sp
   b877c:	f008 ff3c 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8780:	2205      	movs	r2, #5
   b8782:	4629      	mov	r1, r5
   b8784:	4668      	mov	r0, sp
   b8786:	f008 fe99 	bl	c14bc <memcmp>
   b878a:	b910      	cbnz	r0, b8792 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b878c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8790:	e7bc      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8792:	4914      	ldr	r1, [pc, #80]	; (b87e4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b8794:	4668      	mov	r0, sp
   b8796:	f008 ff2f 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b879a:	2205      	movs	r2, #5
   b879c:	4629      	mov	r1, r5
   b879e:	4668      	mov	r0, sp
   b87a0:	f008 fe8c 	bl	c14bc <memcmp>
   b87a4:	b910      	cbnz	r0, b87ac <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b87a6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b87aa:	e7af      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b87ac:	490e      	ldr	r1, [pc, #56]	; (b87e8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b87ae:	4668      	mov	r0, sp
   b87b0:	f008 ff22 	bl	c15f8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87b4:	2205      	movs	r2, #5
   b87b6:	4629      	mov	r1, r5
   b87b8:	4668      	mov	r0, sp
   b87ba:	f008 fe7f 	bl	c14bc <memcmp>
   b87be:	b910      	cbnz	r0, b87c6 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b87c0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b87c4:	e7a2      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b87c6:	2000      	movs	r0, #0
   b87c8:	e7a0      	b.n	b870c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b87ca:	bf00      	nop
   b87cc:	000c3d78 	.word	0x000c3d78
   b87d0:	000c3d4e 	.word	0x000c3d4e
   b87d4:	000c3d54 	.word	0x000c3d54
   b87d8:	000c3d5a 	.word	0x000c3d5a
   b87dc:	000c3d60 	.word	0x000c3d60
   b87e0:	000c3d66 	.word	0x000c3d66
   b87e4:	000c3d6c 	.word	0x000c3d6c
   b87e8:	000c3d72 	.word	0x000c3d72

000b87ec <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b87ec:	4770      	bx	lr
	...

000b87f0 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b87f0:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b87f2:	8813      	ldrh	r3, [r2, #0]
   b87f4:	4d0c      	ldr	r5, [pc, #48]	; (b8828 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b87f6:	2b01      	cmp	r3, #1
{
   b87f8:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b87fa:	d10e      	bne.n	b881a <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b87fc:	020a      	lsls	r2, r1, #8
   b87fe:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b8802:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b8804:	3301      	adds	r3, #1
   b8806:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b8808:	f7ff fff0 	bl	b87ec <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b880c:	8820      	ldrh	r0, [r4, #0]
   b880e:	882b      	ldrh	r3, [r5, #0]
}
   b8810:	4298      	cmp	r0, r3
   b8812:	bf14      	ite	ne
   b8814:	2003      	movne	r0, #3
   b8816:	2000      	moveq	r0, #0
   b8818:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b881a:	2b02      	cmp	r3, #2
   b881c:	d1f2      	bne.n	b8804 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b881e:	882a      	ldrh	r2, [r5, #0]
   b8820:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b8822:	3206      	adds	r2, #6
   b8824:	e7ed      	b.n	b8802 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b8826:	bf00      	nop
   b8828:	2003e61e 	.word	0x2003e61e

000b882c <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b882c:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b882e:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b8830:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b8832:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b8834:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b8836:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b883a:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b883e:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b8842:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b8846:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b884a:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b884c:	4413      	add	r3, r2
   b884e:	734b      	strb	r3, [r1, #13]
   b8850:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b8852:	b293      	uxth	r3, r2
   b8854:	429c      	cmp	r4, r3
   b8856:	d90a      	bls.n	b886e <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b8858:	688b      	ldr	r3, [r1, #8]
   b885a:	7b08      	ldrb	r0, [r1, #12]
   b885c:	5c9b      	ldrb	r3, [r3, r2]
   b885e:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b8860:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b8862:	b2db      	uxtb	r3, r3
   b8864:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b8866:	4403      	add	r3, r0
   b8868:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b886a:	3201      	adds	r2, #1
   b886c:	e7f1      	b.n	b8852 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b886e:	bd30      	pop	{r4, r5, pc}

000b8870 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b8870:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b8874:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b8876:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b887a:	b2c9      	uxtb	r1, r1
   b887c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b8880:	4419      	add	r1, r3
   b8882:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b8886:	4770      	bx	lr

000b8888 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b8888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b888c:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b8890:	f10b 0b08 	add.w	fp, fp, #8
   b8894:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b8898:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b889c:	f1ab 0302 	sub.w	r3, fp, #2
{
   b88a0:	4604      	mov	r4, r0
   b88a2:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b88a4:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b88a6:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b88a8:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b88aa:	f1ba 0f00 	cmp.w	sl, #0
   b88ae:	f000 80a6 	beq.w	b89fe <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b88b2:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b88b4:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b88b8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b88bc:	4556      	cmp	r6, sl
   b88be:	bf28      	it	cs
   b88c0:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b88c2:	ebaa 0a06 	sub.w	sl, sl, r6
   b88c6:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b88ca:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b88ce:	bf02      	ittt	eq
   b88d0:	f106 36ff 	addeq.w	r6, r6, #4294967295
   b88d4:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b88d6:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b88da:	f007 fc5f 	bl	c019c <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b88de:	f1b9 0f00 	cmp.w	r9, #0
   b88e2:	d15c      	bne.n	b899e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b88e4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b88e8:	6803      	ldr	r3, [r0, #0]
   b88ea:	21b5      	movs	r1, #181	; 0xb5
   b88ec:	689b      	ldr	r3, [r3, #8]
   b88ee:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b88f0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b88f4:	6803      	ldr	r3, [r0, #0]
   b88f6:	2162      	movs	r1, #98	; 0x62
   b88f8:	689b      	ldr	r3, [r3, #8]
   b88fa:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b88fc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8900:	7829      	ldrb	r1, [r5, #0]
   b8902:	6803      	ldr	r3, [r0, #0]
   b8904:	689b      	ldr	r3, [r3, #8]
   b8906:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b8908:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b890c:	7869      	ldrb	r1, [r5, #1]
   b890e:	6803      	ldr	r3, [r0, #0]
   b8910:	689b      	ldr	r3, [r3, #8]
   b8912:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b8914:	78a9      	ldrb	r1, [r5, #2]
   b8916:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b891a:	f7fe fdc1 	bl	b74a0 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b891e:	8869      	ldrh	r1, [r5, #2]
   b8920:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8924:	0a09      	lsrs	r1, r1, #8
   b8926:	f7fe fdbb 	bl	b74a0 <_ZN7TwoWire5writeEi.isra.0>
   b892a:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b892c:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b892e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8932:	fa1f f983 	uxth.w	r9, r3
   b8936:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b893a:	454a      	cmp	r2, r9
   b893c:	b2bf      	uxth	r7, r7
   b893e:	d90d      	bls.n	b895c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b8940:	42be      	cmp	r6, r7
   b8942:	d90b      	bls.n	b895c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b8944:	68aa      	ldr	r2, [r5, #8]
   b8946:	6801      	ldr	r1, [r0, #0]
   b8948:	9301      	str	r3, [sp, #4]
   b894a:	4442      	add	r2, r8
   b894c:	688f      	ldr	r7, [r1, #8]
   b894e:	5cd1      	ldrb	r1, [r2, r3]
   b8950:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b8952:	9b01      	ldr	r3, [sp, #4]
   b8954:	3301      	adds	r3, #1
   b8956:	e7e9      	b.n	b892c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b8958:	46b9      	mov	r9, r7
   b895a:	e7a6      	b.n	b88aa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b895c:	3e02      	subs	r6, #2
      startSpot += x;
   b895e:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b8960:	42b7      	cmp	r7, r6
      startSpot += x;
   b8962:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b8966:	d10c      	bne.n	b8982 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b8968:	6803      	ldr	r3, [r0, #0]
   b896a:	7b29      	ldrb	r1, [r5, #12]
   b896c:	689b      	ldr	r3, [r3, #8]
   b896e:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b8970:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8974:	7b69      	ldrb	r1, [r5, #13]
   b8976:	6803      	ldr	r3, [r0, #0]
   b8978:	689b      	ldr	r3, [r3, #8]
   b897a:	4798      	blx	r3
        bytesSent += 2;
   b897c:	f109 0708 	add.w	r7, r9, #8
   b8980:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b8982:	455f      	cmp	r7, fp
   b8984:	d2e8      	bcs.n	b8958 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b8986:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b898a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b898e:	f007 fc0c 	bl	c01aa <_ZN7TwoWire15endTransmissionEh>
   b8992:	2800      	cmp	r0, #0
   b8994:	d0e0      	beq.n	b8958 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b8996:	200c      	movs	r0, #12
}
   b8998:	b003      	add	sp, #12
   b899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b899e:	2200      	movs	r2, #0
   b89a0:	b291      	uxth	r1, r2
   b89a2:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b89a6:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b89a8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b89ac:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b89ae:	d910      	bls.n	b89d2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b89b0:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b89b4:	eb08 0c02 	add.w	ip, r8, r2
   b89b8:	1c53      	adds	r3, r2, #1
   b89ba:	45f4      	cmp	ip, lr
   b89bc:	9301      	str	r3, [sp, #4]
   b89be:	da08      	bge.n	b89d2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b89c0:	68a9      	ldr	r1, [r5, #8]
   b89c2:	6802      	ldr	r2, [r0, #0]
   b89c4:	f811 100c 	ldrb.w	r1, [r1, ip]
   b89c8:	6892      	ldr	r2, [r2, #8]
   b89ca:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b89cc:	9b01      	ldr	r3, [sp, #4]
   b89ce:	461a      	mov	r2, r3
   b89d0:	e7e6      	b.n	b89a0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b89d2:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b89d4:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b89d6:	429f      	cmp	r7, r3
      startSpot += x;
   b89d8:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b89dc:	d1d1      	bne.n	b8982 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b89de:	3e02      	subs	r6, #2
   b89e0:	42b2      	cmp	r2, r6
   b89e2:	d1ce      	bne.n	b8982 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b89e4:	6803      	ldr	r3, [r0, #0]
   b89e6:	7b29      	ldrb	r1, [r5, #12]
   b89e8:	689b      	ldr	r3, [r3, #8]
   b89ea:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b89ec:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b89f0:	7b69      	ldrb	r1, [r5, #13]
   b89f2:	6803      	ldr	r3, [r0, #0]
   b89f4:	689b      	ldr	r3, [r3, #8]
   b89f6:	4798      	blx	r3
        bytesSent += 2;
   b89f8:	fa1f f78b 	uxth.w	r7, fp
   b89fc:	e7c1      	b.n	b8982 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b89fe:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8a02:	f007 fbd6 	bl	c01b2 <_ZN7TwoWire15endTransmissionEv>
   b8a06:	2800      	cmp	r0, #0
   b8a08:	d0c6      	beq.n	b8998 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b8a0a:	e7c4      	b.n	b8996 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b8a0c <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b8a0c:	b570      	push	{r4, r5, r6, lr}
   b8a0e:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b8a10:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b8a14:	6803      	ldr	r3, [r0, #0]
{
   b8a16:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b8a18:	689b      	ldr	r3, [r3, #8]
   b8a1a:	21b5      	movs	r1, #181	; 0xb5
   b8a1c:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b8a1e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8a22:	6803      	ldr	r3, [r0, #0]
   b8a24:	2162      	movs	r1, #98	; 0x62
   b8a26:	689b      	ldr	r3, [r3, #8]
   b8a28:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b8a2a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8a2e:	7821      	ldrb	r1, [r4, #0]
   b8a30:	6803      	ldr	r3, [r0, #0]
   b8a32:	689b      	ldr	r3, [r3, #8]
   b8a34:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b8a36:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8a3a:	7861      	ldrb	r1, [r4, #1]
   b8a3c:	6803      	ldr	r3, [r0, #0]
   b8a3e:	689b      	ldr	r3, [r3, #8]
   b8a40:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b8a42:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8a46:	78a1      	ldrb	r1, [r4, #2]
   b8a48:	6803      	ldr	r3, [r0, #0]
   b8a4a:	689b      	ldr	r3, [r3, #8]
   b8a4c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b8a4e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8a52:	8861      	ldrh	r1, [r4, #2]
   b8a54:	6803      	ldr	r3, [r0, #0]
   b8a56:	0a09      	lsrs	r1, r1, #8
   b8a58:	689b      	ldr	r3, [r3, #8]
   b8a5a:	4798      	blx	r3
   b8a5c:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b8a5e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8a62:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b8a64:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8a66:	b2b2      	uxth	r2, r6
   b8a68:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b8a6a:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8a6c:	d904      	bls.n	b8a78 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b8a6e:	68a1      	ldr	r1, [r4, #8]
   b8a70:	5c89      	ldrb	r1, [r1, r2]
   b8a72:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8a74:	3601      	adds	r6, #1
   b8a76:	e7f2      	b.n	b8a5e <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b8a78:	7b21      	ldrb	r1, [r4, #12]
   b8a7a:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b8a7c:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8a80:	7b61      	ldrb	r1, [r4, #13]
   b8a82:	6803      	ldr	r3, [r0, #0]
}
   b8a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b8a88:	689b      	ldr	r3, [r3, #8]
   b8a8a:	4718      	bx	r3

000b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b8a8c:	b510      	push	{r4, lr}
   b8a8e:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b8a90:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b8a94:	f004 f9c4 	bl	bce20 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b8a98:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b8a9c:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b8aa0:	429a      	cmp	r2, r3
   b8aa2:	d90b      	bls.n	b8abc <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b8aa4:	28ff      	cmp	r0, #255	; 0xff
   b8aa6:	d101      	bne.n	b8aac <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b8aa8:	7822      	ldrb	r2, [r4, #0]
   b8aaa:	b13a      	cbz	r2, b8abc <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b8aac:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b8ab0:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b8ab2:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b8ab6:	3301      	adds	r3, #1
   b8ab8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b8abc:	bd10      	pop	{r4, pc}
	...

000b8ac0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b8ac0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b8ac4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b8ac8:	4604      	mov	r4, r0
   b8aca:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b8acc:	b97b      	cbnz	r3, b8aee <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8ace:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b8ad2:	b923      	cbnz	r3, b8ade <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b8ad4:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b8ad8:	2b00      	cmp	r3, #0
   b8ada:	f000 80ca 	beq.w	b8c72 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b8ade:	4966      	ldr	r1, [pc, #408]	; (b8c78 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b8ae0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b8ae4:	b004      	add	sp, #16
   b8ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b8aea:	f005 bcea 	b.w	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b8aee:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b8af2:	4a62      	ldr	r2, [pc, #392]	; (b8c7c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b8af4:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b8af6:	2600      	movs	r6, #0
   b8af8:	2301      	movs	r3, #1
   b8afa:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b8afe:	4669      	mov	r1, sp
   b8b00:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b8b04:	f8ad 300c 	strh.w	r3, [sp, #12]
   b8b08:	9200      	str	r2, [sp, #0]
   b8b0a:	f88d 6004 	strb.w	r6, [sp, #4]
   b8b0e:	f004 f8e7 	bl	bcce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b8b12:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b8b16:	4631      	mov	r1, r6
   b8b18:	f007 fe27 	bl	c076a <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b8b1c:	21b5      	movs	r1, #181	; 0xb5
   b8b1e:	4620      	mov	r0, r4
   b8b20:	f7ff ffb4 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b8b24:	2162      	movs	r1, #98	; 0x62
   b8b26:	4620      	mov	r0, r4
   b8b28:	f7ff ffb0 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b8b2c:	7829      	ldrb	r1, [r5, #0]
   b8b2e:	4620      	mov	r0, r4
   b8b30:	f7ff ffac 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b8b34:	7869      	ldrb	r1, [r5, #1]
   b8b36:	4620      	mov	r0, r4
   b8b38:	f7ff ffa8 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b8b3c:	78a9      	ldrb	r1, [r5, #2]
   b8b3e:	4620      	mov	r0, r4
   b8b40:	f7ff ffa4 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b8b44:	8869      	ldrh	r1, [r5, #2]
   b8b46:	4620      	mov	r0, r4
   b8b48:	0a09      	lsrs	r1, r1, #8
   b8b4a:	f7ff ff9f 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b8b4e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8b52:	2b00      	cmp	r3, #0
   b8b54:	d042      	beq.n	b8bdc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b8b56:	494a      	ldr	r1, [pc, #296]	; (b8c80 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b8b58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8b5c:	f005 fcb1 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b8b60:	2210      	movs	r2, #16
   b8b62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8b66:	21b5      	movs	r1, #181	; 0xb5
   b8b68:	f7fe fc8a 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b8b6c:	4945      	ldr	r1, [pc, #276]	; (b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b8b6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8b72:	f005 fca6 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b8b76:	2210      	movs	r2, #16
   b8b78:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8b7c:	2162      	movs	r1, #98	; 0x62
   b8b7e:	f7fe fc7f 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b8b82:	4940      	ldr	r1, [pc, #256]	; (b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b8b84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8b88:	f005 fc9b 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b8b8c:	2210      	movs	r2, #16
   b8b8e:	7829      	ldrb	r1, [r5, #0]
   b8b90:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8b94:	f7fe fc74 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b8b98:	493a      	ldr	r1, [pc, #232]	; (b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b8b9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8b9e:	f005 fc90 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b8ba2:	2210      	movs	r2, #16
   b8ba4:	7869      	ldrb	r1, [r5, #1]
   b8ba6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8baa:	f7fe fc69 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b8bae:	4935      	ldr	r1, [pc, #212]	; (b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b8bb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8bb4:	f005 fc85 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b8bb8:	2210      	movs	r2, #16
   b8bba:	78a9      	ldrb	r1, [r5, #2]
   b8bbc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8bc0:	f005 fc9b 	bl	be4fa <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b8bc4:	492f      	ldr	r1, [pc, #188]	; (b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b8bc6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8bca:	f005 fc7a 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b8bce:	8869      	ldrh	r1, [r5, #2]
   b8bd0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8bd4:	2210      	movs	r2, #16
   b8bd6:	0a09      	lsrs	r1, r1, #8
   b8bd8:	f005 fc8f 	bl	be4fa <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b8bdc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b8be0:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8be2:	886a      	ldrh	r2, [r5, #2]
   b8be4:	b2b3      	uxth	r3, r6
   b8be6:	429a      	cmp	r2, r3
   b8be8:	d916      	bls.n	b8c18 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b8bea:	461f      	mov	r7, r3
   b8bec:	68ab      	ldr	r3, [r5, #8]
   b8bee:	4620      	mov	r0, r4
   b8bf0:	5dd9      	ldrb	r1, [r3, r7]
   b8bf2:	f7ff ff4b 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b8bf6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8bfa:	b15b      	cbz	r3, b8c14 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b8bfc:	4641      	mov	r1, r8
   b8bfe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c02:	f005 fc5e 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b8c06:	68ab      	ldr	r3, [r5, #8]
   b8c08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c0c:	5dd9      	ldrb	r1, [r3, r7]
   b8c0e:	2210      	movs	r2, #16
   b8c10:	f7fe fc36 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8c14:	3601      	adds	r6, #1
   b8c16:	e7e4      	b.n	b8be2 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b8c18:	7b29      	ldrb	r1, [r5, #12]
   b8c1a:	4620      	mov	r0, r4
   b8c1c:	f7ff ff36 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b8c20:	7b69      	ldrb	r1, [r5, #13]
   b8c22:	4620      	mov	r0, r4
   b8c24:	f7ff ff32 	bl	b8a8c <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b8c28:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b8c2c:	2101      	movs	r1, #1
   b8c2e:	f007 fd9c 	bl	c076a <digitalWrite>
  _spiPort->endTransaction();
   b8c32:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b8c36:	f004 f83a 	bl	bccae <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b8c3a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8c3e:	b1c3      	cbz	r3, b8c72 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b8c40:	4910      	ldr	r1, [pc, #64]	; (b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b8c42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c46:	f005 fc3c 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b8c4a:	7b29      	ldrb	r1, [r5, #12]
   b8c4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c50:	2210      	movs	r2, #16
   b8c52:	f7fe fc15 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b8c56:	490b      	ldr	r1, [pc, #44]	; (b8c84 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b8c58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c5c:	f005 fc31 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b8c60:	7b69      	ldrb	r1, [r5, #13]
   b8c62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c66:	2210      	movs	r2, #16
}
   b8c68:	b004      	add	sp, #16
   b8c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b8c6e:	f7fe bc0e 	b.w	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b8c72:	b004      	add	sp, #16
   b8c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8c78:	000c3d7e 	.word	0x000c3d7e
   b8c7c:	000c3b90 	.word	0x000c3b90
   b8c80:	000c3db3 	.word	0x000c3db3
   b8c84:	000c4c6a 	.word	0x000c4c6a

000b8c88 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b8c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b8c8a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b8c8e:	4604      	mov	r4, r0
   b8c90:	460d      	mov	r5, r1
   b8c92:	4616      	mov	r6, r2
  if (_printDebug == true)
   b8c94:	2b00      	cmp	r3, #0
   b8c96:	f000 8082 	beq.w	b8d9e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b8c9a:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b8c9e:	4940      	ldr	r1, [pc, #256]	; (b8da0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b8ca0:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b8ca4:	f005 fc0d 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b8ca8:	782b      	ldrb	r3, [r5, #0]
   b8caa:	2b01      	cmp	r3, #1
   b8cac:	d13c      	bne.n	b8d28 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b8cae:	493d      	ldr	r1, [pc, #244]	; (b8da4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b8cb0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b8cb4:	f005 fc05 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b8cb8:	493b      	ldr	r1, [pc, #236]	; (b8da8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b8cba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8cbe:	f005 fc00 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b8cc2:	882b      	ldrh	r3, [r5, #0]
   b8cc4:	f240 7201 	movw	r2, #1793	; 0x701
   b8cc8:	4293      	cmp	r3, r2
   b8cca:	d145      	bne.n	b8d58 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b8ccc:	4937      	ldr	r1, [pc, #220]	; (b8dac <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b8cce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b8cd2:	f005 fbf6 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b8cd6:	4936      	ldr	r1, [pc, #216]	; (b8db0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b8cd8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8cdc:	f005 fbf1 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
   b8ce0:	8869      	ldrh	r1, [r5, #2]
   b8ce2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8ce6:	2210      	movs	r2, #16
   b8ce8:	f005 fc07 	bl	be4fa <_ZN5Print11printNumberEmh>
    if (printPayload)
   b8cec:	2f01      	cmp	r7, #1
   b8cee:	d101      	bne.n	b8cf4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b8cf0:	2e00      	cmp	r6, #0
   b8cf2:	d049      	beq.n	b8d88 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b8cf4:	492f      	ldr	r1, [pc, #188]	; (b8db4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b8cf6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b8cfa:	4f2f      	ldr	r7, [pc, #188]	; (b8db8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b8cfc:	f005 fbe1 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
   b8d00:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b8d02:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b8d04:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b8d08:	b2b3      	uxth	r3, r6
   b8d0a:	429a      	cmp	r2, r3
   b8d0c:	d941      	bls.n	b8d92 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b8d0e:	4639      	mov	r1, r7
   b8d10:	f005 fbd7 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b8d14:	b2b3      	uxth	r3, r6
   b8d16:	68a9      	ldr	r1, [r5, #8]
   b8d18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d1c:	5cc9      	ldrb	r1, [r1, r3]
   b8d1e:	2210      	movs	r2, #16
   b8d20:	f7fe fbae 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b8d24:	3601      	adds	r6, #1
   b8d26:	e7ec      	b.n	b8d02 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b8d28:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b8d2a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b8d2e:	d101      	bne.n	b8d34 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b8d30:	4922      	ldr	r1, [pc, #136]	; (b8dbc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b8d32:	e7bf      	b.n	b8cb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b8d34:	2b06      	cmp	r3, #6
   b8d36:	d101      	bne.n	b8d3c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b8d38:	4921      	ldr	r1, [pc, #132]	; (b8dc0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b8d3a:	e7bb      	b.n	b8cb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b8d3c:	2b0a      	cmp	r3, #10
   b8d3e:	d101      	bne.n	b8d44 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b8d40:	4920      	ldr	r1, [pc, #128]	; (b8dc4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b8d42:	e7b7      	b.n	b8cb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b8d44:	4920      	ldr	r1, [pc, #128]	; (b8dc8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b8d46:	f005 fbbc 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b8d4a:	7829      	ldrb	r1, [r5, #0]
   b8d4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d50:	2210      	movs	r2, #16
   b8d52:	f7fe fb95 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b8d56:	e7af      	b.n	b8cb8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b8d58:	f640 0206 	movw	r2, #2054	; 0x806
   b8d5c:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b8d5e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b8d62:	d101      	bne.n	b8d68 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b8d64:	4919      	ldr	r1, [pc, #100]	; (b8dcc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b8d66:	e7b4      	b.n	b8cd2 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b8d68:	f640 1206 	movw	r2, #2310	; 0x906
   b8d6c:	4293      	cmp	r3, r2
   b8d6e:	d101      	bne.n	b8d74 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b8d70:	4917      	ldr	r1, [pc, #92]	; (b8dd0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b8d72:	e7ae      	b.n	b8cd2 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b8d74:	4914      	ldr	r1, [pc, #80]	; (b8dc8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b8d76:	f005 fba4 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b8d7a:	7869      	ldrb	r1, [r5, #1]
   b8d7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d80:	2210      	movs	r2, #16
   b8d82:	f7fe fb7d 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b8d86:	e7a6      	b.n	b8cd6 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b8d88:	4912      	ldr	r1, [pc, #72]	; (b8dd4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b8d8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d8e:	f005 fb98 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b8d92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b8d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b8d9a:	f005 bb96 	b.w	be4ca <_ZN5Print7printlnEv>
}
   b8d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8da0:	000c3dc4 	.word	0x000c3dc4
   b8da4:	000c3dc9 	.word	0x000c3dc9
   b8da8:	000c3dd9 	.word	0x000c3dd9
   b8dac:	000c3dde 	.word	0x000c3dde
   b8db0:	000c3dec 	.word	0x000c3dec
   b8db4:	000c3df5 	.word	0x000c3df5
   b8db8:	000c4c6a 	.word	0x000c4c6a
   b8dbc:	000c3dcd 	.word	0x000c3dcd
   b8dc0:	000c3dd1 	.word	0x000c3dd1
   b8dc4:	000c3dd5 	.word	0x000c3dd5
   b8dc8:	000c404a 	.word	0x000c404a
   b8dcc:	000c3de2 	.word	0x000c3de2
   b8dd0:	000c3de7 	.word	0x000c3de7
   b8dd4:	000c3dff 	.word	0x000c3dff

000b8dd8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b8dd8:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b8dda:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b8dde:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b8de0:	b955      	cbnz	r5, b8df8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b8de2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b8de6:	b90b      	cbnz	r3, b8dec <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b8de8:	2000      	movs	r0, #0
}
   b8dea:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b8dec:	491a      	ldr	r1, [pc, #104]	; (b8e58 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b8dee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8df2:	f005 fb80 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b8df6:	e7f7      	b.n	b8de8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b8df8:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b8dfc:	b12b      	cbz	r3, b8e0a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b8dfe:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b8e02:	2b00      	cmp	r3, #0
   b8e04:	d0f0      	beq.n	b8de8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b8e06:	4915      	ldr	r1, [pc, #84]	; (b8e5c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b8e08:	e7f1      	b.n	b8dee <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b8e0a:	4628      	mov	r0, r5
   b8e0c:	f7fb f945 	bl	b409a <_Znaj>
   b8e10:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8e14:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b8e18:	b930      	cbnz	r0, b8e28 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8e1a:	b91b      	cbnz	r3, b8e24 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b8e1c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8e20:	2b00      	cmp	r3, #0
   b8e22:	d0e1      	beq.n	b8de8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b8e24:	490e      	ldr	r1, [pc, #56]	; (b8e60 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b8e26:	e7e2      	b.n	b8dee <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b8e28:	b17b      	cbz	r3, b8e4a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b8e2a:	490e      	ldr	r1, [pc, #56]	; (b8e64 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b8e2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8e30:	f005 fb47 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b8e34:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8e38:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b8e3c:	220a      	movs	r2, #10
   b8e3e:	4628      	mov	r0, r5
   b8e40:	f005 fb5b 	bl	be4fa <_ZN5Print11printNumberEmh>
        n += println();
   b8e44:	4628      	mov	r0, r5
   b8e46:	f005 fb40 	bl	be4ca <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b8e4a:	2300      	movs	r3, #0
   b8e4c:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b8e50:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b8e54:	2001      	movs	r0, #1
   b8e56:	e7c8      	b.n	b8dea <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b8e58:	000c3e11 	.word	0x000c3e11
   b8e5c:	000c3e62 	.word	0x000c3e62
   b8e60:	000c3ea5 	.word	0x000c3ea5
   b8e64:	000c3ec9 	.word	0x000c3ec9

000b8e68 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b8e68:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b8e6c:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b8e70:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b8e72:	bf3b      	ittet	cc
   b8e74:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b8e78:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b8e7a:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b8e7c:	1a80      	subcc	r0, r0, r2
   b8e7e:	b280      	uxth	r0, r0
}
   b8e80:	4770      	bx	lr

000b8e82 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b8e82:	b508      	push	{r3, lr}
   b8e84:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b8e86:	f7ff ffef 	bl	b8e68 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b8e8a:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b8e8e:	1a18      	subs	r0, r3, r0
}
   b8e90:	b280      	uxth	r0, r0
   b8e92:	bd08      	pop	{r3, pc}

000b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b8e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b8e98:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b8e9c:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b8ea0:	1aed      	subs	r5, r5, r3
   b8ea2:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b8ea4:	4295      	cmp	r5, r2
   b8ea6:	bf28      	it	cs
   b8ea8:	4615      	movcs	r5, r2
{
   b8eaa:	4616      	mov	r6, r2
   b8eac:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b8eae:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b8eb2:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b8eb4:	462a      	mov	r2, r5
   b8eb6:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b8eb8:	b2bf      	uxth	r7, r7
{
   b8eba:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b8ebc:	f008 fb0e 	bl	c14dc <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b8ec0:	b19f      	cbz	r7, b8eea <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b8ec2:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b8ec6:	463a      	mov	r2, r7
   b8ec8:	eb08 0105 	add.w	r1, r8, r5
   b8ecc:	f008 fb06 	bl	c14dc <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b8ed0:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b8ed4:	4620      	mov	r0, r4
   b8ed6:	f7ff ffc7 	bl	b8e68 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b8eda:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b8ede:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b8ee0:	bf38      	it	cc
   b8ee2:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b8ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b8eea:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b8eee:	4416      	add	r6, r2
   b8ef0:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b8ef4:	e7ee      	b.n	b8ed4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b8ef8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b8ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b8efa:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b8efe:	4604      	mov	r4, r0
   b8f00:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b8f02:	b113      	cbz	r3, b8f0a <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b8f04:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b8f08:	b953      	cbnz	r3, b8f20 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b8f0a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b8f0e:	b128      	cbz	r0, b8f1c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b8f10:	4924      	ldr	r1, [pc, #144]	; (b8fa4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b8f12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8f16:	f005 faee 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b8f1a:	2000      	movs	r0, #0
}
   b8f1c:	b003      	add	sp, #12
   b8f1e:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b8f20:	f7ff ffaf 	bl	b8e82 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b8f24:	886b      	ldrh	r3, [r5, #2]
   b8f26:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b8f28:	b29b      	uxth	r3, r3
   b8f2a:	4283      	cmp	r3, r0
   b8f2c:	d908      	bls.n	b8f40 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8f2e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8f32:	b91b      	cbnz	r3, b8f3c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b8f34:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b8f38:	2800      	cmp	r0, #0
   b8f3a:	d0ef      	beq.n	b8f1c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b8f3c:	491a      	ldr	r1, [pc, #104]	; (b8fa8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b8f3e:	e7e8      	b.n	b8f12 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b8f40:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b8f44:	2202      	movs	r2, #2
   b8f46:	4669      	mov	r1, sp
   b8f48:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b8f4a:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b8f4e:	f7ff ffa1 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b8f52:	2201      	movs	r2, #1
   b8f54:	4629      	mov	r1, r5
   b8f56:	4620      	mov	r0, r4
   b8f58:	f7ff ff9c 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b8f5c:	2201      	movs	r2, #1
   b8f5e:	18a9      	adds	r1, r5, r2
   b8f60:	4620      	mov	r0, r4
   b8f62:	f7ff ff97 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b8f66:	886b      	ldrh	r3, [r5, #2]
   b8f68:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b8f6c:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b8f6e:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b8f70:	a901      	add	r1, sp, #4
   b8f72:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b8f74:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b8f78:	f7ff ff8c 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b8f7c:	886a      	ldrh	r2, [r5, #2]
   b8f7e:	68a9      	ldr	r1, [r5, #8]
   b8f80:	4620      	mov	r0, r4
   b8f82:	f7ff ff87 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b8f86:	2201      	movs	r2, #1
   b8f88:	f105 010c 	add.w	r1, r5, #12
   b8f8c:	4620      	mov	r0, r4
   b8f8e:	f7ff ff81 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b8f92:	4620      	mov	r0, r4
   b8f94:	2201      	movs	r2, #1
   b8f96:	f105 010d 	add.w	r1, r5, #13
   b8f9a:	f7ff ff7b 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b8f9e:	2001      	movs	r0, #1
   b8fa0:	e7bc      	b.n	b8f1c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b8fa2:	bf00      	nop
   b8fa4:	000c3eef 	.word	0x000c3eef
   b8fa8:	000c3f17 	.word	0x000c3f17

000b8fac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b8fac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b8fb0:	780e      	ldrb	r6, [r1, #0]
   b8fb2:	2e0d      	cmp	r6, #13
{
   b8fb4:	4604      	mov	r4, r0
   b8fb6:	460d      	mov	r5, r1
  switch (msg->cls)
   b8fb8:	f001 8228 	beq.w	ba40c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b8fbc:	d809      	bhi.n	b8fd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b8fbe:	2e02      	cmp	r6, #2
   b8fc0:	f000 879a 	beq.w	b9ef8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b8fc4:	2e06      	cmp	r6, #6
   b8fc6:	f001 81cc 	beq.w	ba362 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b8fca:	2e01      	cmp	r6, #1
   b8fcc:	d04f      	beq.n	b906e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b8fce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b8fd2:	2e13      	cmp	r6, #19
   b8fd4:	f001 83eb 	beq.w	ba7ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b8fd8:	2e28      	cmp	r6, #40	; 0x28
   b8fda:	f001 84ca 	beq.w	ba972 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b8fde:	2e10      	cmp	r6, #16
   b8fe0:	d1f5      	bne.n	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b8fe2:	680b      	ldr	r3, [r1, #0]
   b8fe4:	4a8e      	ldr	r2, [pc, #568]	; (b9220 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b8fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b8fea:	4293      	cmp	r3, r2
   b8fec:	f041 826a 	bne.w	ba4c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b8ff0:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b8ff2:	2e00      	cmp	r6, #0
   b8ff4:	d0eb      	beq.n	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b8ff6:	68a8      	ldr	r0, [r5, #8]
   b8ff8:	2100      	movs	r1, #0
   b8ffa:	f7fe fa21 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b8ffe:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b9000:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9002:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9004:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9006:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9008:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b900a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b900c:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b900e:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9010:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9012:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9014:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9016:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9018:	68a8      	ldr	r0, [r5, #8]
   b901a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b901c:	2108      	movs	r1, #8
   b901e:	f7fe fa0f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9022:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9024:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9026:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9028:	210c      	movs	r1, #12
   b902a:	f7fe fa16 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b902e:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9030:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9032:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9034:	210e      	movs	r1, #14
   b9036:	f7fe fa10 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b903a:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b903c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b903e:	f04f 32ff 	mov.w	r2, #4294967295
   b9042:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9044:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9046:	6a1a      	ldr	r2, [r3, #32]
   b9048:	b17a      	cbz	r2, b906a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b904a:	7819      	ldrb	r1, [r3, #0]
   b904c:	0708      	lsls	r0, r1, #28
   b904e:	d40c      	bmi.n	b906a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b9050:	1d19      	adds	r1, r3, #4
   b9052:	3314      	adds	r3, #20
   b9054:	f851 0b04 	ldr.w	r0, [r1], #4
   b9058:	f842 0b04 	str.w	r0, [r2], #4
   b905c:	4299      	cmp	r1, r3
   b905e:	d1f9      	bne.n	b9054 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b9060:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b9062:	7813      	ldrb	r3, [r2, #0]
   b9064:	f043 0308 	orr.w	r3, r3, #8
   b9068:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b906a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b906c:	e03d      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b906e:	680b      	ldr	r3, [r1, #0]
   b9070:	4a6c      	ldr	r2, [pc, #432]	; (b9224 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b9072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9076:	4293      	cmp	r3, r2
   b9078:	d141      	bne.n	b90fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b907a:	68c6      	ldr	r6, [r0, #12]
   b907c:	2e00      	cmp	r6, #0
   b907e:	d0a6      	beq.n	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b9080:	68a8      	ldr	r0, [r5, #8]
   b9082:	2100      	movs	r1, #0
   b9084:	f7fe f9dc 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9088:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b908a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b908c:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b908e:	2104      	movs	r1, #4
   b9090:	f7fe f9d6 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9094:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9096:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9098:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b909a:	2108      	movs	r1, #8
   b909c:	f7fe f9d0 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b90a0:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b90a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b90a4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b90a6:	210c      	movs	r1, #12
   b90a8:	f7fe f9ca 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b90ac:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b90ae:	68a8      	ldr	r0, [r5, #8]
   b90b0:	68e6      	ldr	r6, [r4, #12]
   b90b2:	2110      	movs	r1, #16
   b90b4:	f7fe f9c4 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b90b8:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b90ba:	68e3      	ldr	r3, [r4, #12]
   b90bc:	f04f 32ff 	mov.w	r2, #4294967295
   b90c0:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b90c2:	68e3      	ldr	r3, [r4, #12]
   b90c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b90c6:	b17a      	cbz	r2, b90e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b90c8:	7819      	ldrb	r1, [r3, #0]
   b90ca:	0709      	lsls	r1, r1, #28
   b90cc:	d40c      	bmi.n	b90e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b90ce:	1d19      	adds	r1, r3, #4
   b90d0:	3318      	adds	r3, #24
   b90d2:	f851 0b04 	ldr.w	r0, [r1], #4
   b90d6:	f842 0b04 	str.w	r0, [r2], #4
   b90da:	4299      	cmp	r1, r3
   b90dc:	d1f9      	bne.n	b90d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b90de:	68e2      	ldr	r2, [r4, #12]
   b90e0:	7813      	ldrb	r3, [r2, #0]
   b90e2:	f043 0308 	orr.w	r3, r3, #8
   b90e6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b90e8:	68e3      	ldr	r3, [r4, #12]
   b90ea:	781b      	ldrb	r3, [r3, #0]
   b90ec:	075f      	lsls	r7, r3, #29
   b90ee:	f57f af6e 	bpl.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b90f2:	4629      	mov	r1, r5
   b90f4:	4620      	mov	r0, r4
}
   b90f6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b90fa:	f7ff befd 	b.w	b8ef8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b90fe:	4a4a      	ldr	r2, [pc, #296]	; (b9228 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b9100:	4293      	cmp	r3, r2
   b9102:	d13d      	bne.n	b9180 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9104:	6906      	ldr	r6, [r0, #16]
   b9106:	2e00      	cmp	r6, #0
   b9108:	f43f af61 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b910c:	68a8      	ldr	r0, [r5, #8]
   b910e:	2100      	movs	r1, #0
   b9110:	f7fe f996 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9114:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9116:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9118:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b911a:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b911c:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b911e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9120:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9122:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9124:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9126:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9128:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b912a:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b912c:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b912e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9130:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9132:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9134:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b9136:	68a8      	ldr	r0, [r5, #8]
   b9138:	6926      	ldr	r6, [r4, #16]
   b913a:	2108      	movs	r1, #8
   b913c:	f7fe f980 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9140:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b9142:	68a8      	ldr	r0, [r5, #8]
   b9144:	6926      	ldr	r6, [r4, #16]
   b9146:	210c      	movs	r1, #12
   b9148:	f7fe f97a 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b914c:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b914e:	6923      	ldr	r3, [r4, #16]
   b9150:	f04f 32ff 	mov.w	r2, #4294967295
   b9154:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9156:	6923      	ldr	r3, [r4, #16]
   b9158:	6a1a      	ldr	r2, [r3, #32]
   b915a:	b17a      	cbz	r2, b917c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b915c:	7819      	ldrb	r1, [r3, #0]
   b915e:	070e      	lsls	r6, r1, #28
   b9160:	d40c      	bmi.n	b917c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b9162:	1d19      	adds	r1, r3, #4
   b9164:	3314      	adds	r3, #20
   b9166:	f851 0b04 	ldr.w	r0, [r1], #4
   b916a:	f842 0b04 	str.w	r0, [r2], #4
   b916e:	4299      	cmp	r1, r3
   b9170:	d1f9      	bne.n	b9166 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b9172:	6922      	ldr	r2, [r4, #16]
   b9174:	7813      	ldrb	r3, [r2, #0]
   b9176:	f043 0308 	orr.w	r3, r3, #8
   b917a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b917c:	6923      	ldr	r3, [r4, #16]
   b917e:	e7b4      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b9180:	4a2a      	ldr	r2, [pc, #168]	; (b922c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b9182:	4293      	cmp	r3, r2
   b9184:	d154      	bne.n	b9230 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b9186:	6946      	ldr	r6, [r0, #20]
   b9188:	2e00      	cmp	r6, #0
   b918a:	f43f af20 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b918e:	68a8      	ldr	r0, [r5, #8]
   b9190:	2100      	movs	r1, #0
   b9192:	f7fe f955 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9196:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b9198:	68a8      	ldr	r0, [r5, #8]
   b919a:	6966      	ldr	r6, [r4, #20]
   b919c:	2104      	movs	r1, #4
   b919e:	f7fe f95c 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b91a2:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b91a4:	68a8      	ldr	r0, [r5, #8]
   b91a6:	6966      	ldr	r6, [r4, #20]
   b91a8:	2106      	movs	r1, #6
   b91aa:	f7fe f956 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b91ae:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b91b0:	68a8      	ldr	r0, [r5, #8]
   b91b2:	6966      	ldr	r6, [r4, #20]
   b91b4:	2108      	movs	r1, #8
   b91b6:	f7fe f950 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b91ba:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b91bc:	68a8      	ldr	r0, [r5, #8]
   b91be:	6966      	ldr	r6, [r4, #20]
   b91c0:	210a      	movs	r1, #10
   b91c2:	f7fe f94a 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b91c6:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b91c8:	68a8      	ldr	r0, [r5, #8]
   b91ca:	6966      	ldr	r6, [r4, #20]
   b91cc:	210c      	movs	r1, #12
   b91ce:	f7fe f944 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b91d2:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b91d4:	68a8      	ldr	r0, [r5, #8]
   b91d6:	6966      	ldr	r6, [r4, #20]
   b91d8:	210e      	movs	r1, #14
   b91da:	f7fe f93e 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b91de:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b91e0:	68a8      	ldr	r0, [r5, #8]
   b91e2:	6966      	ldr	r6, [r4, #20]
   b91e4:	2110      	movs	r1, #16
   b91e6:	f7fe f938 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b91ea:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b91ec:	6963      	ldr	r3, [r4, #20]
   b91ee:	f04f 32ff 	mov.w	r2, #4294967295
   b91f2:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b91f4:	6963      	ldr	r3, [r4, #20]
   b91f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b91f8:	b17a      	cbz	r2, b921a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b91fa:	7819      	ldrb	r1, [r3, #0]
   b91fc:	0708      	lsls	r0, r1, #28
   b91fe:	d40c      	bmi.n	b921a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9200:	1d19      	adds	r1, r3, #4
   b9202:	3318      	adds	r3, #24
   b9204:	f851 0b04 	ldr.w	r0, [r1], #4
   b9208:	f842 0b04 	str.w	r0, [r2], #4
   b920c:	4299      	cmp	r1, r3
   b920e:	d1f9      	bne.n	b9204 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9210:	6962      	ldr	r2, [r4, #20]
   b9212:	7813      	ldrb	r3, [r2, #0]
   b9214:	f043 0308 	orr.w	r3, r3, #8
   b9218:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b921a:	6963      	ldr	r3, [r4, #20]
   b921c:	e765      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b921e:	bf00      	nop
   b9220:	00101400 	.word	0x00101400
   b9224:	00140100 	.word	0x00140100
   b9228:	00100300 	.word	0x00100300
   b922c:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9230:	4a8c      	ldr	r2, [pc, #560]	; (b9464 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b9232:	4293      	cmp	r3, r2
   b9234:	d149      	bne.n	b92ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9236:	69c6      	ldr	r6, [r0, #28]
   b9238:	2e00      	cmp	r6, #0
   b923a:	f43f aec8 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b923e:	68a8      	ldr	r0, [r5, #8]
   b9240:	2100      	movs	r1, #0
   b9242:	f7fe f8fd 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9246:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9248:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b924a:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b924c:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b924e:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9250:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9252:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9254:	2108      	movs	r1, #8
   b9256:	f7fe f8f3 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b925a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b925c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b925e:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9260:	210c      	movs	r1, #12
   b9262:	f7fe f8ed 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9266:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9268:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b926a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b926c:	2110      	movs	r1, #16
   b926e:	f7fe f8e7 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9272:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b9274:	68a8      	ldr	r0, [r5, #8]
   b9276:	69e6      	ldr	r6, [r4, #28]
   b9278:	2114      	movs	r1, #20
   b927a:	f7fe f8e1 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b927e:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b9280:	68a8      	ldr	r0, [r5, #8]
   b9282:	69e6      	ldr	r6, [r4, #28]
   b9284:	2118      	movs	r1, #24
   b9286:	f7fe f8db 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b928a:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b928c:	68a8      	ldr	r0, [r5, #8]
   b928e:	69e6      	ldr	r6, [r4, #28]
   b9290:	211c      	movs	r1, #28
   b9292:	f7fe f8d5 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9296:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9298:	69e3      	ldr	r3, [r4, #28]
   b929a:	f04f 32ff 	mov.w	r2, #4294967295
   b929e:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b92a0:	69e3      	ldr	r3, [r4, #28]
   b92a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b92a4:	b17a      	cbz	r2, b92c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b92a6:	7819      	ldrb	r1, [r3, #0]
   b92a8:	0709      	lsls	r1, r1, #28
   b92aa:	d40c      	bmi.n	b92c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b92ac:	1d19      	adds	r1, r3, #4
   b92ae:	3324      	adds	r3, #36	; 0x24
   b92b0:	f851 0b04 	ldr.w	r0, [r1], #4
   b92b4:	f842 0b04 	str.w	r0, [r2], #4
   b92b8:	4299      	cmp	r1, r3
   b92ba:	d1f9      	bne.n	b92b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b92bc:	69e2      	ldr	r2, [r4, #28]
   b92be:	7813      	ldrb	r3, [r2, #0]
   b92c0:	f043 0308 	orr.w	r3, r3, #8
   b92c4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b92c6:	69e3      	ldr	r3, [r4, #28]
   b92c8:	e70f      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b92ca:	4a67      	ldr	r2, [pc, #412]	; (b9468 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b92cc:	4293      	cmp	r3, r2
   b92ce:	f040 80cd 	bne.w	b946c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b92d2:	6a06      	ldr	r6, [r0, #32]
   b92d4:	2e00      	cmp	r6, #0
   b92d6:	f43f ae7a 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b92da:	68a8      	ldr	r0, [r5, #8]
   b92dc:	2100      	movs	r1, #0
   b92de:	f7fe f8af 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b92e2:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b92e4:	68a8      	ldr	r0, [r5, #8]
   b92e6:	6a26      	ldr	r6, [r4, #32]
   b92e8:	2104      	movs	r1, #4
   b92ea:	f7fe f8b6 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b92ee:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b92f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b92f2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b92f4:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b92f6:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b92f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b92fa:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b92fc:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b92fe:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b9300:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9302:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9304:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9306:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9308:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b930a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b930c:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b930e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9310:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9312:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9314:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9316:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9318:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b931a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b931c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b931e:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b9320:	210c      	movs	r1, #12
   b9322:	68a8      	ldr	r0, [r5, #8]
   b9324:	6a26      	ldr	r6, [r4, #32]
   b9326:	f7fe f88b 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b932a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b932c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b932e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9330:	2110      	movs	r1, #16
   b9332:	f7fe f885 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9336:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9338:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b933a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b933c:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b933e:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9340:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9342:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9344:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9346:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9348:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b934a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b934c:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b934e:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9350:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9352:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9354:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9356:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9358:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b935a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b935c:	2118      	movs	r1, #24
   b935e:	f7fe f86f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9362:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9364:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9366:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9368:	211c      	movs	r1, #28
   b936a:	f7fe f869 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b936e:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9370:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9372:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9374:	2120      	movs	r1, #32
   b9376:	f7fe f863 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b937a:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b937c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b937e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9380:	2124      	movs	r1, #36	; 0x24
   b9382:	f7fe f85d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9386:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b9388:	68a8      	ldr	r0, [r5, #8]
   b938a:	6a26      	ldr	r6, [r4, #32]
   b938c:	2128      	movs	r1, #40	; 0x28
   b938e:	f7fe f857 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9392:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b9394:	6a26      	ldr	r6, [r4, #32]
   b9396:	68a8      	ldr	r0, [r5, #8]
   b9398:	212c      	movs	r1, #44	; 0x2c
   b939a:	f7fe f851 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b939e:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93a0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b93a2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93a4:	2130      	movs	r1, #48	; 0x30
   b93a6:	f7fe f84b 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b93aa:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93ac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b93ae:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93b0:	2134      	movs	r1, #52	; 0x34
   b93b2:	f7fe f845 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b93b6:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b93ba:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93bc:	2138      	movs	r1, #56	; 0x38
   b93be:	f7fe f83f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b93c2:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b93c6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93c8:	213c      	movs	r1, #60	; 0x3c
   b93ca:	f7fe f839 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b93ce:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93d0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b93d2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b93d4:	2140      	movs	r1, #64	; 0x40
   b93d6:	f7fe f833 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b93da:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b93dc:	68a8      	ldr	r0, [r5, #8]
   b93de:	6a26      	ldr	r6, [r4, #32]
   b93e0:	2144      	movs	r1, #68	; 0x44
   b93e2:	f7fe f82d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b93e6:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b93e8:	68a8      	ldr	r0, [r5, #8]
   b93ea:	6a26      	ldr	r6, [r4, #32]
   b93ec:	2148      	movs	r1, #72	; 0x48
   b93ee:	f7fe f827 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b93f2:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b93f4:	68a8      	ldr	r0, [r5, #8]
   b93f6:	6a26      	ldr	r6, [r4, #32]
   b93f8:	214c      	movs	r1, #76	; 0x4c
   b93fa:	f7fe f82e 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b93fe:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b9402:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9404:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9406:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b940a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b940e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9410:	68a8      	ldr	r0, [r5, #8]
   b9412:	2154      	movs	r1, #84	; 0x54
   b9414:	f7fe f814 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9418:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b941a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b941c:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b941e:	2158      	movs	r1, #88	; 0x58
   b9420:	f7fe f81b 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9424:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b9428:	68a8      	ldr	r0, [r5, #8]
   b942a:	6a26      	ldr	r6, [r4, #32]
   b942c:	215a      	movs	r1, #90	; 0x5a
   b942e:	f7fe f814 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9432:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9436:	6a22      	ldr	r2, [r4, #32]
   b9438:	f04f 33ff 	mov.w	r3, #4294967295
   b943c:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b943e:	6a22      	ldr	r2, [r4, #32]
   b9440:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9442:	6a21      	ldr	r1, [r4, #32]
   b9444:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b9446:	b158      	cbz	r0, b9460 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9448:	780b      	ldrb	r3, [r1, #0]
   b944a:	071b      	lsls	r3, r3, #28
   b944c:	d408      	bmi.n	b9460 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b944e:	225c      	movs	r2, #92	; 0x5c
   b9450:	3104      	adds	r1, #4
   b9452:	f008 f843 	bl	c14dc <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9456:	6a22      	ldr	r2, [r4, #32]
   b9458:	7813      	ldrb	r3, [r2, #0]
   b945a:	f043 0308 	orr.w	r3, r3, #8
   b945e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b9460:	6a23      	ldr	r3, [r4, #32]
   b9462:	e642      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9464:	00200500 	.word	0x00200500
   b9468:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b946c:	4a8e      	ldr	r2, [pc, #568]	; (b96a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b946e:	4293      	cmp	r3, r2
   b9470:	d137      	bne.n	b94e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b9472:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9474:	2b00      	cmp	r3, #0
   b9476:	f43f adaa 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b947a:	688a      	ldr	r2, [r1, #8]
   b947c:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b947e:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b9480:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9482:	68a8      	ldr	r0, [r5, #8]
   b9484:	2104      	movs	r1, #4
   b9486:	f7fd ffdb 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b948a:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b948c:	68a8      	ldr	r0, [r5, #8]
   b948e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9490:	2108      	movs	r1, #8
   b9492:	f7fd ffd5 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9496:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b9498:	68a8      	ldr	r0, [r5, #8]
   b949a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b949c:	210c      	movs	r1, #12
   b949e:	f7fd ffcf 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b94a2:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b94a4:	68a8      	ldr	r0, [r5, #8]
   b94a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b94a8:	2110      	movs	r1, #16
   b94aa:	f7fd ffc9 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b94ae:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b94b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b94b2:	f04f 32ff 	mov.w	r2, #4294967295
   b94b6:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b94b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b94ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b94bc:	b17a      	cbz	r2, b94de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b94be:	7819      	ldrb	r1, [r3, #0]
   b94c0:	070f      	lsls	r7, r1, #28
   b94c2:	d40c      	bmi.n	b94de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b94c4:	1d19      	adds	r1, r3, #4
   b94c6:	3318      	adds	r3, #24
   b94c8:	f851 0b04 	ldr.w	r0, [r1], #4
   b94cc:	f842 0b04 	str.w	r0, [r2], #4
   b94d0:	4299      	cmp	r1, r3
   b94d2:	d1f9      	bne.n	b94c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b94d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b94d6:	7813      	ldrb	r3, [r2, #0]
   b94d8:	f043 0308 	orr.w	r3, r3, #8
   b94dc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b94de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b94e0:	e603      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b94e2:	4a72      	ldr	r2, [pc, #456]	; (b96ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b94e4:	4293      	cmp	r3, r2
   b94e6:	d139      	bne.n	b955c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b94e8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b94ea:	2e00      	cmp	r6, #0
   b94ec:	f43f ad6f 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b94f0:	68a8      	ldr	r0, [r5, #8]
   b94f2:	2100      	movs	r1, #0
   b94f4:	f7fd ffa4 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b94f8:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b94fa:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b94fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b94fe:	2104      	movs	r1, #4
   b9500:	f7fd ff9e 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9504:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9506:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b950a:	2108      	movs	r1, #8
   b950c:	f7fd ff98 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9510:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9512:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9516:	210c      	movs	r1, #12
   b9518:	f7fd ff92 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b951c:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b951e:	68a8      	ldr	r0, [r5, #8]
   b9520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b9522:	2110      	movs	r1, #16
   b9524:	f7fd ff8c 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9528:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b952a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b952c:	f04f 32ff 	mov.w	r2, #4294967295
   b9530:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9536:	b17a      	cbz	r2, b9558 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9538:	7819      	ldrb	r1, [r3, #0]
   b953a:	070e      	lsls	r6, r1, #28
   b953c:	d40c      	bmi.n	b9558 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b953e:	1d19      	adds	r1, r3, #4
   b9540:	3318      	adds	r3, #24
   b9542:	f851 0b04 	ldr.w	r0, [r1], #4
   b9546:	f842 0b04 	str.w	r0, [r2], #4
   b954a:	4299      	cmp	r1, r3
   b954c:	d1f9      	bne.n	b9542 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b954e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b9550:	7813      	ldrb	r3, [r2, #0]
   b9552:	f043 0308 	orr.w	r3, r3, #8
   b9556:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b955a:	e5c6      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b955c:	4a54      	ldr	r2, [pc, #336]	; (b96b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b955e:	4293      	cmp	r3, r2
   b9560:	d151      	bne.n	b9606 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b9562:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b9564:	2e00      	cmp	r6, #0
   b9566:	f43f ad32 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b956a:	68a8      	ldr	r0, [r5, #8]
   b956c:	2100      	movs	r1, #0
   b956e:	f7fd ff67 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9572:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9574:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9576:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9578:	2104      	movs	r1, #4
   b957a:	f7fd ff61 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b957e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9580:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9582:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9584:	2108      	movs	r1, #8
   b9586:	f7fd ff5b 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b958a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b958c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b958e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9590:	210c      	movs	r1, #12
   b9592:	f7fd ff55 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9596:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b9598:	68a8      	ldr	r0, [r5, #8]
   b959a:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b959c:	2110      	movs	r1, #16
   b959e:	f7fd ff4f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b95a2:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b95a4:	68a8      	ldr	r0, [r5, #8]
   b95a6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b95a8:	2114      	movs	r1, #20
   b95aa:	f7fd ff49 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b95ae:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b95b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b95b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b95b4:	2118      	movs	r1, #24
   b95b6:	f7fd ff43 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b95ba:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b95bc:	68a8      	ldr	r0, [r5, #8]
   b95be:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b95c0:	211c      	movs	r1, #28
   b95c2:	f7fd ff3d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b95c6:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b95c8:	68a8      	ldr	r0, [r5, #8]
   b95ca:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b95cc:	2120      	movs	r1, #32
   b95ce:	f7fd ff37 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b95d2:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b95d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b95d6:	f04f 32ff 	mov.w	r2, #4294967295
   b95da:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b95dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b95de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b95e0:	b17a      	cbz	r2, b9602 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b95e2:	7819      	ldrb	r1, [r3, #0]
   b95e4:	0708      	lsls	r0, r1, #28
   b95e6:	d40c      	bmi.n	b9602 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b95e8:	1d19      	adds	r1, r3, #4
   b95ea:	3328      	adds	r3, #40	; 0x28
   b95ec:	f851 0b04 	ldr.w	r0, [r1], #4
   b95f0:	f842 0b04 	str.w	r0, [r2], #4
   b95f4:	4299      	cmp	r1, r3
   b95f6:	d1f9      	bne.n	b95ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b95f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b95fa:	7813      	ldrb	r3, [r2, #0]
   b95fc:	f043 0308 	orr.w	r3, r3, #8
   b9600:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b9602:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9604:	e571      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b9606:	4a2b      	ldr	r2, [pc, #172]	; (b96b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b9608:	4293      	cmp	r3, r2
   b960a:	d155      	bne.n	b96b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b960c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b960e:	2b00      	cmp	r3, #0
   b9610:	f43f acdd 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9614:	688a      	ldr	r2, [r1, #8]
   b9616:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b9618:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b961a:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b961c:	68a8      	ldr	r0, [r5, #8]
   b961e:	2104      	movs	r1, #4
   b9620:	f7fd ff0e 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9624:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9626:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9628:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b962a:	2108      	movs	r1, #8
   b962c:	f7fd ff08 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9630:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9632:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9634:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9636:	210c      	movs	r1, #12
   b9638:	f7fd ff02 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b963c:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b963e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9640:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9642:	2110      	movs	r1, #16
   b9644:	f7fd fefc 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9648:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b964a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b964c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b964e:	7d12      	ldrb	r2, [r2, #20]
   b9650:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9652:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b9654:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9656:	7d52      	ldrb	r2, [r2, #21]
   b9658:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b965a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b965c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b965e:	7d92      	ldrb	r2, [r2, #22]
   b9660:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9662:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9664:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b9666:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9668:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b966a:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b966c:	68a8      	ldr	r0, [r5, #8]
   b966e:	2118      	movs	r1, #24
   b9670:	f7fd fee6 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9674:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9676:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9678:	f04f 32ff 	mov.w	r2, #4294967295
   b967c:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b967e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b9682:	b17a      	cbz	r2, b96a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9684:	7819      	ldrb	r1, [r3, #0]
   b9686:	0709      	lsls	r1, r1, #28
   b9688:	d40c      	bmi.n	b96a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b968a:	1d19      	adds	r1, r3, #4
   b968c:	3320      	adds	r3, #32
   b968e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9692:	f842 0b04 	str.w	r0, [r2], #4
   b9696:	4299      	cmp	r1, r3
   b9698:	d1f9      	bne.n	b968e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b969a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b969c:	7813      	ldrb	r3, [r2, #0]
   b969e:	f043 0308 	orr.w	r3, r3, #8
   b96a2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b96a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b96a6:	e520      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b96a8:	00140900 	.word	0x00140900
   b96ac:	00141100 	.word	0x00141100
   b96b0:	00241200 	.word	0x00241200
   b96b4:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b96b8:	4a30      	ldr	r2, [pc, #192]	; (b977c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b96ba:	4293      	cmp	r3, r2
   b96bc:	d160      	bne.n	b9780 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b96be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b96c0:	2b00      	cmp	r3, #0
   b96c2:	f43f ac84 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b96c6:	688a      	ldr	r2, [r1, #8]
   b96c8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b96ca:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b96cc:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b96ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b96d0:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b96d2:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b96d4:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b96d6:	68a8      	ldr	r0, [r5, #8]
   b96d8:	2104      	movs	r1, #4
   b96da:	f7fd feb1 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b96de:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96e0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b96e2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96e4:	2108      	movs	r1, #8
   b96e6:	f7fd feab 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b96ea:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96ec:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b96ee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96f0:	210c      	movs	r1, #12
   b96f2:	f7fd fea5 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b96f6:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b96fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b96fc:	2110      	movs	r1, #16
   b96fe:	f7fd fe9f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9702:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9704:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9706:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9708:	2114      	movs	r1, #20
   b970a:	f7fd fe99 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b970e:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9710:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b9712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9714:	7e12      	ldrb	r2, [r2, #24]
   b9716:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9718:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b971a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b971c:	7e52      	ldrb	r2, [r2, #25]
   b971e:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9720:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b9722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9724:	7e92      	ldrb	r2, [r2, #26]
   b9726:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9728:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b972a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b972c:	7ed2      	ldrb	r2, [r2, #27]
   b972e:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b9730:	68a8      	ldr	r0, [r5, #8]
   b9732:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9734:	211c      	movs	r1, #28
   b9736:	f7fd fe83 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b973a:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b973c:	68a8      	ldr	r0, [r5, #8]
   b973e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9740:	2120      	movs	r1, #32
   b9742:	f7fd fe7d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9746:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b974a:	f04f 32ff 	mov.w	r2, #4294967295
   b974e:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9750:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9754:	b17a      	cbz	r2, b9776 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9756:	7819      	ldrb	r1, [r3, #0]
   b9758:	070f      	lsls	r7, r1, #28
   b975a:	d40c      	bmi.n	b9776 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b975c:	1d19      	adds	r1, r3, #4
   b975e:	3328      	adds	r3, #40	; 0x28
   b9760:	f851 0b04 	ldr.w	r0, [r1], #4
   b9764:	f842 0b04 	str.w	r0, [r2], #4
   b9768:	4299      	cmp	r1, r3
   b976a:	d1f9      	bne.n	b9760 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b976c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b976e:	7813      	ldrb	r3, [r2, #0]
   b9770:	f043 0308 	orr.w	r3, r3, #8
   b9774:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b9776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9778:	e4b7      	b.n	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b977a:	bf00      	nop
   b977c:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b9780:	4aa1      	ldr	r2, [pc, #644]	; (b9a08 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b9782:	4293      	cmp	r3, r2
   b9784:	f040 80f0 	bne.w	b9968 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b9788:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b978a:	2e00      	cmp	r6, #0
   b978c:	f43f ac1f 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b9790:	68a8      	ldr	r0, [r5, #8]
   b9792:	2100      	movs	r1, #0
   b9794:	f7fd fe54 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9798:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b979a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b979c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b979e:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b97a0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b97a2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b97a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b97a6:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b97a8:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   b97aa:	68a8      	ldr	r0, [r5, #8]
   b97ac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b97ae:	2106      	movs	r1, #6
   b97b0:	f7fd fe53 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b97b4:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b97b6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b97b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b97ba:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b97bc:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b97be:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b97c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b97c2:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b97c4:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b97c6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b97c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b97ca:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b97cc:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b97ce:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b97d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b97d2:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b97d4:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   b97d6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b97d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b97da:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b97dc:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   b97de:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b97e0:	68a8      	ldr	r0, [r5, #8]
   b97e2:	2110      	movs	r1, #16
   b97e4:	f7fd fe2c 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b97e8:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97ea:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b97ec:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97ee:	2114      	movs	r1, #20
   b97f0:	f7fd fe26 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b97f4:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b97f6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b97f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b97fa:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b97fc:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b97fe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b9800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9802:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b9804:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9806:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b9808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b980a:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b980c:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b980e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b9810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9812:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b9814:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9816:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b9818:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b981a:	211c      	movs	r1, #28
   b981c:	f7fd fe10 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b9820:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9822:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b9824:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9826:	2120      	movs	r1, #32
   b9828:	f7fd fe0a 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b982c:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b982e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b9830:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9832:	2124      	movs	r1, #36	; 0x24
   b9834:	f7fd fe04 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b9838:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b983a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b983c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b983e:	2128      	movs	r1, #40	; 0x28
   b9840:	f7fd fdfe 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b9844:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   b9846:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9848:	68a8      	ldr	r0, [r5, #8]
   b984a:	212c      	movs	r1, #44	; 0x2c
   b984c:	f7fd fdf8 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9850:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   b9852:	68a8      	ldr	r0, [r5, #8]
   b9854:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9856:	2130      	movs	r1, #48	; 0x30
   b9858:	f7fd fdf2 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b985c:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b985e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b9860:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9862:	2134      	movs	r1, #52	; 0x34
   b9864:	f7fd fdec 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b9868:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b986a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b986c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b986e:	2138      	movs	r1, #56	; 0x38
   b9870:	f7fd fde6 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b9874:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9876:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b9878:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b987a:	213c      	movs	r1, #60	; 0x3c
   b987c:	f7fd fde0 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b9880:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9882:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b9884:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9886:	2140      	movs	r1, #64	; 0x40
   b9888:	f7fd fdda 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b988c:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   b988e:	68a8      	ldr	r0, [r5, #8]
   b9890:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9892:	2144      	movs	r1, #68	; 0x44
   b9894:	f7fd fdd4 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9898:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b989a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b989c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b989e:	2148      	movs	r1, #72	; 0x48
   b98a0:	f7fd fdce 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b98a4:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98a6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b98a8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98aa:	214c      	movs	r1, #76	; 0x4c
   b98ac:	f7fd fdc8 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b98b0:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98b2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b98b4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98b6:	2150      	movs	r1, #80	; 0x50
   b98b8:	f7fd fdc2 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b98bc:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98be:	2154      	movs	r1, #84	; 0x54
   b98c0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b98c2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98c4:	f7fd fdbc 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b98c8:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   b98ca:	68a8      	ldr	r0, [r5, #8]
   b98cc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b98ce:	2158      	movs	r1, #88	; 0x58
   b98d0:	f7fd fdc3 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b98d4:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   b98d8:	68a8      	ldr	r0, [r5, #8]
   b98da:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b98dc:	215a      	movs	r1, #90	; 0x5a
   b98de:	f7fd fdbc 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b98e2:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   b98e6:	68a8      	ldr	r0, [r5, #8]
   b98e8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b98ea:	215c      	movs	r1, #92	; 0x5c
   b98ec:	f7fd fdb5 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b98f0:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b98f4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b98f6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b98f8:	215e      	movs	r1, #94	; 0x5e
   b98fa:	f7fd fdae 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b98fe:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   b9902:	68a8      	ldr	r0, [r5, #8]
   b9904:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9906:	2160      	movs	r1, #96	; 0x60
   b9908:	f7fd fda7 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b990c:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   b9910:	68a8      	ldr	r0, [r5, #8]
   b9912:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9914:	2162      	movs	r1, #98	; 0x62
   b9916:	f7fd fda0 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b991a:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   b991e:	68a8      	ldr	r0, [r5, #8]
   b9920:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9922:	2164      	movs	r1, #100	; 0x64
   b9924:	f7fd fd8c 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9928:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   b992a:	68a8      	ldr	r0, [r5, #8]
   b992c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b992e:	2168      	movs	r1, #104	; 0x68
   b9930:	f7fd fd86 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9934:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9936:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9938:	f04f 33ff 	mov.w	r3, #4294967295
   b993c:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b993e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9940:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9942:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b9944:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   b9948:	b158      	cbz	r0, b9962 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b994a:	780b      	ldrb	r3, [r1, #0]
   b994c:	071e      	lsls	r6, r3, #28
   b994e:	d408      	bmi.n	b9962 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   b9950:	2274      	movs	r2, #116	; 0x74
   b9952:	3104      	adds	r1, #4
   b9954:	f007 fdc2 	bl	c14dc <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9958:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b995a:	7813      	ldrb	r3, [r2, #0]
   b995c:	f043 0308 	orr.w	r3, r3, #8
   b9960:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   b9962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9964:	f7ff bbc1 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   b9968:	4a28      	ldr	r2, [pc, #160]	; (b9a0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   b996a:	4293      	cmp	r3, r2
   b996c:	d150      	bne.n	b9a10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   b996e:	6a86      	ldr	r6, [r0, #40]	; 0x28
   b9970:	2e00      	cmp	r6, #0
   b9972:	f43f ab2c 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   b9976:	68a8      	ldr	r0, [r5, #8]
   b9978:	2100      	movs	r1, #0
   b997a:	f7fd fd61 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b997e:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   b9980:	68a8      	ldr	r0, [r5, #8]
   b9982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b9984:	2104      	movs	r1, #4
   b9986:	f7fd fd5b 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b998a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b998c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b998e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9990:	2108      	movs	r1, #8
   b9992:	f7fd fd55 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b9996:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   b9998:	68a8      	ldr	r0, [r5, #8]
   b999a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b999c:	210c      	movs	r1, #12
   b999e:	f7fd fd5c 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99a2:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   b99a4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   b99a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b99a8:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   b99aa:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   b99ac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   b99ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b99b0:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   b99b2:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   b99b4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   b99b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b99b8:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   b99ba:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   b99bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   b99be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b99c0:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   b99c2:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   b99c4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   b99c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b99c8:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   b99ca:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   b99cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b99ce:	68aa      	ldr	r2, [r5, #8]
   b99d0:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   b99d2:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b99d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b99d6:	f04f 32ff 	mov.w	r2, #4294967295
   b99da:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b99dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b99de:	6a1a      	ldr	r2, [r3, #32]
   b99e0:	b17a      	cbz	r2, b9a02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b99e2:	7819      	ldrb	r1, [r3, #0]
   b99e4:	0708      	lsls	r0, r1, #28
   b99e6:	d40c      	bmi.n	b9a02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   b99e8:	1d19      	adds	r1, r3, #4
   b99ea:	3318      	adds	r3, #24
   b99ec:	f851 0b04 	ldr.w	r0, [r1], #4
   b99f0:	f842 0b04 	str.w	r0, [r2], #4
   b99f4:	4299      	cmp	r1, r3
   b99f6:	d1f9      	bne.n	b99ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   b99f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b99fa:	7813      	ldrb	r3, [r2, #0]
   b99fc:	f043 0308 	orr.w	r3, r3, #8
   b9a00:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   b9a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b9a04:	f7ff bb71 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9a08:	00741700 	.word	0x00741700
   b9a0c:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   b9a10:	4a84      	ldr	r2, [pc, #528]	; (b9c24 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   b9a12:	4293      	cmp	r3, r2
   b9a14:	d13a      	bne.n	b9a8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   b9a16:	6c06      	ldr	r6, [r0, #64]	; 0x40
   b9a18:	2e00      	cmp	r6, #0
   b9a1a:	f43f aad8 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   b9a1e:	68a8      	ldr	r0, [r5, #8]
   b9a20:	2100      	movs	r1, #0
   b9a22:	f7fd fd0d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a26:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a28:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   b9a2a:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a2c:	2104      	movs	r1, #4
   b9a2e:	f7fd fd07 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   b9a32:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a34:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   b9a36:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a38:	2108      	movs	r1, #8
   b9a3a:	f7fd fd01 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   b9a3e:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   b9a40:	68a8      	ldr	r0, [r5, #8]
   b9a42:	6c26      	ldr	r6, [r4, #64]	; 0x40
   b9a44:	210c      	movs	r1, #12
   b9a46:	f7fd fcfb 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a4a:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   b9a4c:	68a8      	ldr	r0, [r5, #8]
   b9a4e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   b9a50:	2110      	movs	r1, #16
   b9a52:	f7fd fcf5 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a56:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b9a5a:	f04f 32ff 	mov.w	r2, #4294967295
   b9a5e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b9a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9a64:	b17a      	cbz	r2, b9a86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9a66:	7819      	ldrb	r1, [r3, #0]
   b9a68:	0709      	lsls	r1, r1, #28
   b9a6a:	d40c      	bmi.n	b9a86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   b9a6c:	1d19      	adds	r1, r3, #4
   b9a6e:	3318      	adds	r3, #24
   b9a70:	f851 0b04 	ldr.w	r0, [r1], #4
   b9a74:	f842 0b04 	str.w	r0, [r2], #4
   b9a78:	4299      	cmp	r1, r3
   b9a7a:	d1f9      	bne.n	b9a70 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   b9a7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b9a7e:	7813      	ldrb	r3, [r2, #0]
   b9a80:	f043 0308 	orr.w	r3, r3, #8
   b9a84:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   b9a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b9a88:	f7ff bb2f 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   b9a8c:	4a66      	ldr	r2, [pc, #408]	; (b9c28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   b9a8e:	4293      	cmp	r3, r2
   b9a90:	d138      	bne.n	b9b04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   b9a92:	6c46      	ldr	r6, [r0, #68]	; 0x44
   b9a94:	2e00      	cmp	r6, #0
   b9a96:	f43f aa9a 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   b9a9a:	68a8      	ldr	r0, [r5, #8]
   b9a9c:	2100      	movs	r1, #0
   b9a9e:	f7fd fccf 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9aa2:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9aa4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   b9aa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   b9aa8:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   b9aaa:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9aac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   b9aae:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   b9ab0:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   b9ab2:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9ab4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   b9ab6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b9ab8:	7a52      	ldrb	r2, [r2, #9]
   b9aba:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9abc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   b9abe:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   b9ac0:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   b9ac2:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9ac4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   b9ac6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b9ac8:	7ad2      	ldrb	r2, [r2, #11]
   b9aca:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9acc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   b9ace:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ad0:	210c      	movs	r1, #12
   b9ad2:	f7fd fcb5 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   b9ad6:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   b9ad8:	68a8      	ldr	r0, [r5, #8]
   b9ada:	6c66      	ldr	r6, [r4, #68]	; 0x44
   b9adc:	2110      	movs	r1, #16
   b9ade:	f7fd fcbc 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9ae2:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   b9ae4:	68a8      	ldr	r0, [r5, #8]
   b9ae6:	6c66      	ldr	r6, [r4, #68]	; 0x44
   b9ae8:	2112      	movs	r1, #18
   b9aea:	f7fd fcb6 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9aee:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   b9af0:	68ab      	ldr	r3, [r5, #8]
   b9af2:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   b9af4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b9af6:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9af8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b9afa:	f04f 32ff 	mov.w	r2, #4294967295
   b9afe:	61da      	str	r2, [r3, #28]
   b9b00:	f7ff ba65 	b.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   b9b04:	4a49      	ldr	r2, [pc, #292]	; (b9c2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   b9b06:	4293      	cmp	r3, r2
   b9b08:	d162      	bne.n	b9bd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   b9b0a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   b9b0c:	2b00      	cmp	r3, #0
   b9b0e:	f43f aa5e 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9b12:	688a      	ldr	r2, [r1, #8]
   b9b14:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   b9b16:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   b9b18:	6c86      	ldr	r6, [r0, #72]	; 0x48
   b9b1a:	68a8      	ldr	r0, [r5, #8]
   b9b1c:	2104      	movs	r1, #4
   b9b1e:	f7fd fc8f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b22:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   b9b24:	68a8      	ldr	r0, [r5, #8]
   b9b26:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   b9b28:	2108      	movs	r1, #8
   b9b2a:	f7fd fc89 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b2e:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b30:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   b9b32:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b34:	210c      	movs	r1, #12
   b9b36:	f7fd fc83 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   b9b3a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b3c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   b9b3e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b40:	2110      	movs	r1, #16
   b9b42:	f7fd fc7d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   b9b46:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b48:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   b9b4a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b4c:	2114      	movs	r1, #20
   b9b4e:	f7fd fc77 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   b9b52:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9b54:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   b9b56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9b58:	7e12      	ldrb	r2, [r2, #24]
   b9b5a:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9b5c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   b9b5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9b60:	7e52      	ldrb	r2, [r2, #25]
   b9b62:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9b64:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   b9b66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9b68:	7e92      	ldrb	r2, [r2, #26]
   b9b6a:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   b9b6c:	211c      	movs	r1, #28
   b9b6e:	68a8      	ldr	r0, [r5, #8]
   b9b70:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   b9b72:	f7fd fc65 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b76:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   b9b78:	68a8      	ldr	r0, [r5, #8]
   b9b7a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   b9b7c:	2120      	movs	r1, #32
   b9b7e:	f7fd fc5f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b82:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   b9b84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   b9b86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9b88:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   b9b8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b9b90:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   b9b92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9b94:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   b9b98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9b9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9b9e:	f04f 32ff 	mov.w	r2, #4294967295
   b9ba2:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9ba4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9ba8:	b17a      	cbz	r2, b9bca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9baa:	7819      	ldrb	r1, [r3, #0]
   b9bac:	070f      	lsls	r7, r1, #28
   b9bae:	d40c      	bmi.n	b9bca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   b9bb0:	1d19      	adds	r1, r3, #4
   b9bb2:	332c      	adds	r3, #44	; 0x2c
   b9bb4:	f851 0b04 	ldr.w	r0, [r1], #4
   b9bb8:	f842 0b04 	str.w	r0, [r2], #4
   b9bbc:	4299      	cmp	r1, r3
   b9bbe:	d1f9      	bne.n	b9bb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   b9bc0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   b9bc2:	7813      	ldrb	r3, [r2, #0]
   b9bc4:	f043 0308 	orr.w	r3, r3, #8
   b9bc8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   b9bca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b9bcc:	f7ff ba8d 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   b9bd0:	784a      	ldrb	r2, [r1, #1]
   b9bd2:	2a35      	cmp	r2, #53	; 0x35
   b9bd4:	d17f      	bne.n	b9cd6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   b9bd6:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   b9bd8:	2e00      	cmp	r6, #0
   b9bda:	f43f a9f8 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   b9bde:	68a8      	ldr	r0, [r5, #8]
   b9be0:	2100      	movs	r1, #0
   b9be2:	f7fd fc2d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9be6:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9be8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   b9bea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b9bec:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   b9bee:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9bf0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   b9bf2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b9bf4:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   b9bf6:	725a      	strb	r2, [r3, #9]
   b9bf8:	f04f 0808 	mov.w	r8, #8
   b9bfc:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b9bfe:	f04f 0a0c 	mov.w	sl, #12
   b9c02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9c04:	7a59      	ldrb	r1, [r3, #9]
   b9c06:	b2ba      	uxth	r2, r7
   b9c08:	4291      	cmp	r1, r2
   b9c0a:	d811      	bhi.n	b9c30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   b9c0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9c0e:	2201      	movs	r2, #1
   b9c10:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9c14:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b9c16:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   b9c1a:	2800      	cmp	r0, #0
   b9c1c:	d14d      	bne.n	b9cba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   b9c1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9c20:	f7ff ba63 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9c24:	00142200 	.word	0x00142200
   b9c28:	00182600 	.word	0x00182600
   b9c2c:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b9c30:	886a      	ldrh	r2, [r5, #2]
   b9c32:	fb0a f607 	mul.w	r6, sl, r7
   b9c36:	3a08      	subs	r2, #8
   b9c38:	42b2      	cmp	r2, r6
   b9c3a:	dde7      	ble.n	b9c0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   b9c3c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   b9c3e:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   b9c40:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   b9c44:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9c46:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   b9c48:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b9c4a:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   b9c4c:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   b9c4e:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   b9c50:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9c52:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   b9c54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b9c56:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   b9c58:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   b9c5a:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   b9c5c:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9c5e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   b9c60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b9c62:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   b9c64:	4433      	add	r3, r6
   b9c66:	78d2      	ldrb	r2, [r2, #3]
   b9c68:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b9c6a:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c6e:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b9c72:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c76:	68a8      	ldr	r0, [r5, #8]
   b9c78:	b289      	uxth	r1, r1
   b9c7a:	f7fd fbee 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b9c7e:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c80:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b9c84:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   b9c88:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c8c:	68a8      	ldr	r0, [r5, #8]
   b9c8e:	b289      	uxth	r1, r1
   b9c90:	f7fd fbe3 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   b9c94:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   b9c96:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   b9c9a:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   b9c9e:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   b9ca2:	68a8      	ldr	r0, [r5, #8]
   b9ca4:	b289      	uxth	r1, r1
   b9ca6:	f7fd fbcb 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9caa:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b9cac:	3701      	adds	r7, #1
   b9cae:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   b9cb0:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b9cb2:	f108 080c 	add.w	r8, r8, #12
   b9cb6:	d1a4      	bne.n	b9c02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   b9cb8:	e7a8      	b.n	b9c0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9cba:	780b      	ldrb	r3, [r1, #0]
   b9cbc:	071e      	lsls	r6, r3, #28
   b9cbe:	d4ae      	bmi.n	b9c1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   b9cc0:	f640 32fc 	movw	r2, #3068	; 0xbfc
   b9cc4:	3104      	adds	r1, #4
   b9cc6:	f007 fc09 	bl	c14dc <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9cca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   b9ccc:	7813      	ldrb	r3, [r2, #0]
   b9cce:	f043 0308 	orr.w	r3, r3, #8
   b9cd2:	7013      	strb	r3, [r2, #0]
   b9cd4:	e7a3      	b.n	b9c1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   b9cd6:	2a3c      	cmp	r2, #60	; 0x3c
   b9cd8:	f040 80bf 	bne.w	b9e5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   b9cdc:	884a      	ldrh	r2, [r1, #2]
   b9cde:	2a28      	cmp	r2, #40	; 0x28
   b9ce0:	d002      	beq.n	b9ce8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   b9ce2:	2a40      	cmp	r2, #64	; 0x40
   b9ce4:	f040 80b9 	bne.w	b9e5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   b9ce8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9cea:	2b00      	cmp	r3, #0
   b9cec:	f43f a96f 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9cf0:	68aa      	ldr	r2, [r5, #8]
   b9cf2:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   b9cf4:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   b9cf6:	68a8      	ldr	r0, [r5, #8]
   b9cf8:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9cfa:	2102      	movs	r1, #2
   b9cfc:	f7fd fbad 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9d00:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   b9d02:	68a8      	ldr	r0, [r5, #8]
   b9d04:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9d06:	2104      	movs	r1, #4
   b9d08:	f7fd fb9a 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d0c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d0e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   b9d10:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d12:	2108      	movs	r1, #8
   b9d14:	f7fd fb94 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   b9d18:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d1a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   b9d1c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d1e:	210c      	movs	r1, #12
   b9d20:	f7fd fb8e 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   b9d24:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d26:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   b9d28:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d2a:	2110      	movs	r1, #16
   b9d2c:	f7fd fb88 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   b9d30:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   b9d32:	886b      	ldrh	r3, [r5, #2]
   b9d34:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b9d36:	2b28      	cmp	r3, #40	; 0x28
   b9d38:	d14b      	bne.n	b9dd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   b9d3a:	2600      	movs	r6, #0
   b9d3c:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   b9d3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d40:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   b9d42:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   b9d44:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d46:	7d12      	ldrb	r2, [r2, #20]
   b9d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   b9d4c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   b9d4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d50:	7d52      	ldrb	r2, [r2, #21]
   b9d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   b9d56:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   b9d58:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d5a:	7d92      	ldrb	r2, [r2, #22]
   b9d5c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   b9d60:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d62:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   b9d66:	68a8      	ldr	r0, [r5, #8]
   b9d68:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b9d6a:	2118      	movs	r1, #24
   b9d6c:	f7fd fb68 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d70:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   b9d72:	68a8      	ldr	r0, [r5, #8]
   b9d74:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b9d76:	211c      	movs	r1, #28
   b9d78:	f7fd fb62 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   b9d7e:	68a8      	ldr	r0, [r5, #8]
   b9d80:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b9d82:	2120      	movs	r1, #32
   b9d84:	f7fd fb5c 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d88:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   b9d8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d8c:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   b9d8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d90:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   b9d92:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9d94:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   b9d96:	68a8      	ldr	r0, [r5, #8]
   b9d98:	f7fd fb52 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d9c:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9da0:	f04f 32ff 	mov.w	r2, #4294967295
   b9da4:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9da6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   b9daa:	b17a      	cbz	r2, b9dcc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9dac:	7819      	ldrb	r1, [r3, #0]
   b9dae:	0708      	lsls	r0, r1, #28
   b9db0:	d40c      	bmi.n	b9dcc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   b9db2:	1d19      	adds	r1, r3, #4
   b9db4:	3344      	adds	r3, #68	; 0x44
   b9db6:	f851 0b04 	ldr.w	r0, [r1], #4
   b9dba:	f842 0b04 	str.w	r0, [r2], #4
   b9dbe:	4299      	cmp	r1, r3
   b9dc0:	d1f9      	bne.n	b9db6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b9dc2:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b9dc4:	7813      	ldrb	r3, [r2, #0]
   b9dc6:	f043 0308 	orr.w	r3, r3, #8
   b9dca:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   b9dcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9dce:	f7ff b98c 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dd2:	68a8      	ldr	r0, [r5, #8]
   b9dd4:	2114      	movs	r1, #20
   b9dd6:	f7fd fb33 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   b9dda:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ddc:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   b9dde:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9de0:	2118      	movs	r1, #24
   b9de2:	f7fd fb2d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   b9de6:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   b9de8:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   b9dea:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9dec:	f892 2020 	ldrb.w	r2, [r2, #32]
   b9df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   b9df4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   b9df6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9df8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   b9dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   b9e00:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   b9e02:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9e04:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   b9e08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   b9e0c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   b9e0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9e10:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   b9e14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   b9e18:	68a8      	ldr	r0, [r5, #8]
   b9e1a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9e1c:	2124      	movs	r1, #36	; 0x24
   b9e1e:	f7fd fb0f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e22:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   b9e24:	68a8      	ldr	r0, [r5, #8]
   b9e26:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9e28:	2128      	movs	r1, #40	; 0x28
   b9e2a:	f7fd fb09 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e2e:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   b9e30:	68a8      	ldr	r0, [r5, #8]
   b9e32:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9e34:	212c      	movs	r1, #44	; 0x2c
   b9e36:	f7fd fb03 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e3a:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   b9e3c:	68a8      	ldr	r0, [r5, #8]
   b9e3e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9e40:	2130      	movs	r1, #48	; 0x30
   b9e42:	f7fd fafd 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e46:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   b9e48:	2134      	movs	r1, #52	; 0x34
   b9e4a:	68a8      	ldr	r0, [r5, #8]
   b9e4c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9e4e:	f7fd faf7 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e52:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   b9e54:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b9e56:	213c      	movs	r1, #60	; 0x3c
   b9e58:	e79d      	b.n	b9d96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   b9e5a:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   b9e5e:	d12a      	bne.n	b9eb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   b9e60:	6d66      	ldr	r6, [r4, #84]	; 0x54
   b9e62:	2e00      	cmp	r6, #0
   b9e64:	f43f a8b3 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   b9e68:	68a8      	ldr	r0, [r5, #8]
   b9e6a:	2100      	movs	r1, #0
   b9e6c:	f7fd fae8 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e70:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9e72:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   b9e74:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   b9e76:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   b9e78:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9e7a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   b9e7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   b9e7e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   b9e80:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9e82:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b9e84:	f04f 32ff 	mov.w	r2, #4294967295
   b9e88:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b9e8c:	6a1a      	ldr	r2, [r3, #32]
   b9e8e:	b17a      	cbz	r2, b9eb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9e90:	7819      	ldrb	r1, [r3, #0]
   b9e92:	0709      	lsls	r1, r1, #28
   b9e94:	d40c      	bmi.n	b9eb0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   b9e96:	1d19      	adds	r1, r3, #4
   b9e98:	3314      	adds	r3, #20
   b9e9a:	f851 0b04 	ldr.w	r0, [r1], #4
   b9e9e:	f842 0b04 	str.w	r0, [r2], #4
   b9ea2:	4299      	cmp	r1, r3
   b9ea4:	d1f9      	bne.n	b9e9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ea6:	6d62      	ldr	r2, [r4, #84]	; 0x54
   b9ea8:	7813      	ldrb	r3, [r2, #0]
   b9eaa:	f043 0308 	orr.w	r3, r3, #8
   b9eae:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b9eb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b9eb2:	f7ff b91a 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   b9eb6:	4aa1      	ldr	r2, [pc, #644]	; (ba13c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   b9eb8:	4293      	cmp	r3, r2
   b9eba:	f47f a888 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   b9ebe:	69a6      	ldr	r6, [r4, #24]
   b9ec0:	2e00      	cmp	r6, #0
   b9ec2:	f43f a884 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   b9ec6:	68a8      	ldr	r0, [r5, #8]
   b9ec8:	2100      	movs	r1, #0
   b9eca:	f7fd fab9 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ece:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9ed0:	69a3      	ldr	r3, [r4, #24]
   b9ed2:	f04f 32ff 	mov.w	r2, #4294967295
   b9ed6:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9ed8:	69a3      	ldr	r3, [r4, #24]
   b9eda:	691a      	ldr	r2, [r3, #16]
   b9edc:	b14a      	cbz	r2, b9ef2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ede:	7819      	ldrb	r1, [r3, #0]
   b9ee0:	070f      	lsls	r7, r1, #28
   b9ee2:	d406      	bmi.n	b9ef2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   b9ee4:	685b      	ldr	r3, [r3, #4]
   b9ee6:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ee8:	69a2      	ldr	r2, [r4, #24]
   b9eea:	7813      	ldrb	r3, [r2, #0]
   b9eec:	f043 0308 	orr.w	r3, r3, #8
   b9ef0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   b9ef2:	69a3      	ldr	r3, [r4, #24]
   b9ef4:	f7ff b8f9 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   b9ef8:	784b      	ldrb	r3, [r1, #1]
   b9efa:	2b72      	cmp	r3, #114	; 0x72
   b9efc:	f040 80a4 	bne.w	ba048 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   b9f00:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b9f02:	2b00      	cmp	r3, #0
   b9f04:	d069      	beq.n	b9fda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   b9f06:	689b      	ldr	r3, [r3, #8]
   b9f08:	2b00      	cmp	r3, #0
   b9f0a:	d066      	beq.n	b9fda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   b9f0c:	688a      	ldr	r2, [r1, #8]
   b9f0e:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   b9f10:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   b9f12:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b9f14:	68a8      	ldr	r0, [r5, #8]
   b9f16:	689f      	ldr	r7, [r3, #8]
   b9f18:	4631      	mov	r1, r6
   b9f1a:	f7fd fa9e 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f1e:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   b9f20:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b9f22:	68a8      	ldr	r0, [r5, #8]
   b9f24:	689e      	ldr	r6, [r3, #8]
   b9f26:	2104      	movs	r1, #4
   b9f28:	f7fd fa8a 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f2c:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   b9f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b9f30:	68a8      	ldr	r0, [r5, #8]
   b9f32:	689e      	ldr	r6, [r3, #8]
   b9f34:	2108      	movs	r1, #8
   b9f36:	f7fd fa83 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f3a:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   b9f3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b9f3e:	68a8      	ldr	r0, [r5, #8]
   b9f40:	689e      	ldr	r6, [r3, #8]
   b9f42:	210c      	movs	r1, #12
   b9f44:	f7fd fa7c 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f48:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   b9f4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b9f4c:	68a8      	ldr	r0, [r5, #8]
   b9f4e:	689e      	ldr	r6, [r3, #8]
   b9f50:	2110      	movs	r1, #16
   b9f52:	f7fd fa82 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f56:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   b9f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b9f5a:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   b9f5c:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b9f5e:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   b9f60:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   b9f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b9f64:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   b9f66:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b9f68:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   b9f6a:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   b9f6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b9f6e:	689e      	ldr	r6, [r3, #8]
   b9f70:	7833      	ldrb	r3, [r6, #0]
   b9f72:	bb23      	cbnz	r3, b9fbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   b9f74:	68a8      	ldr	r0, [r5, #8]
   b9f76:	f44f 7103 	mov.w	r1, #524	; 0x20c
   b9f7a:	f7fd fa6e 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f7e:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   b9f80:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b9f82:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   b9f84:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b9f86:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   b9f8a:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   b9f8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b9f8e:	689b      	ldr	r3, [r3, #8]
   b9f90:	781a      	ldrb	r2, [r3, #0]
   b9f92:	2a00      	cmp	r2, #0
   b9f94:	f040 865d 	bne.w	bac52 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   b9f98:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   b9f9a:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   b9f9e:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   b9fa0:	b299      	uxth	r1, r3
   b9fa2:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b9fa4:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   b9fa6:	d914      	bls.n	b9fd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   b9fa8:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   b9fac:	d011      	beq.n	b9fd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   b9fae:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b9fb0:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   b9fb2:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b9fb4:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   b9fb6:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b9fb8:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   b9fba:	3301      	adds	r3, #1
   b9fbc:	e7f0      	b.n	b9fa0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   b9fbe:	68a8      	ldr	r0, [r5, #8]
   b9fc0:	2114      	movs	r1, #20
   b9fc2:	f7fd fa4a 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9fc6:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   b9fc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b9fca:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   b9fcc:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b9fce:	7d92      	ldrb	r2, [r2, #22]
   b9fd0:	e7db      	b.n	b9f8a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   b9fd2:	7813      	ldrb	r3, [r2, #0]
   b9fd4:	f043 0308 	orr.w	r3, r3, #8
   b9fd8:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   b9fda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9fdc:	2b00      	cmp	r3, #0
   b9fde:	f43e aff6 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   b9fe2:	689b      	ldr	r3, [r3, #8]
   b9fe4:	2b00      	cmp	r3, #0
   b9fe6:	f43e aff2 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   b9fea:	22b5      	movs	r2, #181	; 0xb5
   b9fec:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   b9fee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9ff0:	689b      	ldr	r3, [r3, #8]
   b9ff2:	2262      	movs	r2, #98	; 0x62
   b9ff4:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   b9ff6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9ff8:	689b      	ldr	r3, [r3, #8]
   b9ffa:	2202      	movs	r2, #2
   b9ffc:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   b9ffe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba000:	689b      	ldr	r3, [r3, #8]
   ba002:	2272      	movs	r2, #114	; 0x72
   ba004:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   ba006:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba008:	886a      	ldrh	r2, [r5, #2]
   ba00a:	689b      	ldr	r3, [r3, #8]
   ba00c:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   ba00e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba010:	689a      	ldr	r2, [r3, #8]
   ba012:	886b      	ldrh	r3, [r5, #2]
   ba014:	0a1b      	lsrs	r3, r3, #8
   ba016:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   ba018:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba01a:	886a      	ldrh	r2, [r5, #2]
   ba01c:	6898      	ldr	r0, [r3, #8]
   ba01e:	68a9      	ldr	r1, [r5, #8]
   ba020:	3006      	adds	r0, #6
   ba022:	f007 fa5b 	bl	c14dc <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   ba026:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba028:	7b2a      	ldrb	r2, [r5, #12]
   ba02a:	689b      	ldr	r3, [r3, #8]
   ba02c:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   ba030:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba032:	7b6a      	ldrb	r2, [r5, #13]
   ba034:	689b      	ldr	r3, [r3, #8]
   ba036:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba03a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba03c:	7813      	ldrb	r3, [r2, #0]
   ba03e:	f043 0308 	orr.w	r3, r3, #8
   ba042:	7013      	strb	r3, [r2, #0]
   ba044:	f7fe bfc3 	b.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   ba048:	2b73      	cmp	r3, #115	; 0x73
   ba04a:	d14d      	bne.n	ba0e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   ba04c:	6e01      	ldr	r1, [r0, #96]	; 0x60
   ba04e:	780b      	ldrb	r3, [r1, #0]
   ba050:	071e      	lsls	r6, r3, #28
   ba052:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba056:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   ba05a:	d543      	bpl.n	ba0e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   ba05c:	0843      	lsrs	r3, r0, #1
   ba05e:	f47e afb6 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba062:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   ba064:	f44f 7688 	mov.w	r6, #272	; 0x110
   ba068:	688b      	ldr	r3, [r1, #8]
   ba06a:	437e      	muls	r6, r7
   ba06c:	22b5      	movs	r2, #181	; 0xb5
   ba06e:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   ba070:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba072:	689b      	ldr	r3, [r3, #8]
   ba074:	4433      	add	r3, r6
   ba076:	2262      	movs	r2, #98	; 0x62
   ba078:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   ba07a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba07c:	689b      	ldr	r3, [r3, #8]
   ba07e:	4433      	add	r3, r6
   ba080:	2202      	movs	r2, #2
   ba082:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   ba084:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba086:	689b      	ldr	r3, [r3, #8]
   ba088:	4433      	add	r3, r6
   ba08a:	2273      	movs	r2, #115	; 0x73
   ba08c:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   ba08e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba090:	886a      	ldrh	r2, [r5, #2]
   ba092:	689b      	ldr	r3, [r3, #8]
   ba094:	4433      	add	r3, r6
   ba096:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   ba098:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba09a:	886a      	ldrh	r2, [r5, #2]
   ba09c:	689b      	ldr	r3, [r3, #8]
   ba09e:	4433      	add	r3, r6
   ba0a0:	0a12      	lsrs	r2, r2, #8
   ba0a2:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   ba0a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba0a6:	886a      	ldrh	r2, [r5, #2]
   ba0a8:	6898      	ldr	r0, [r3, #8]
   ba0aa:	68a9      	ldr	r1, [r5, #8]
   ba0ac:	4430      	add	r0, r6
   ba0ae:	3006      	adds	r0, #6
   ba0b0:	f007 fa14 	bl	c14dc <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   ba0b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba0b6:	7b2a      	ldrb	r2, [r5, #12]
   ba0b8:	689b      	ldr	r3, [r3, #8]
   ba0ba:	4433      	add	r3, r6
   ba0bc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   ba0c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba0c2:	7b6a      	ldrb	r2, [r5, #13]
   ba0c4:	689b      	ldr	r3, [r3, #8]
   ba0c6:	441e      	add	r6, r3
   ba0c8:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   ba0cc:	6e21      	ldr	r1, [r4, #96]	; 0x60
   ba0ce:	780b      	ldrb	r3, [r1, #0]
   ba0d0:	2201      	movs	r2, #1
   ba0d2:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba0d6:	40ba      	lsls	r2, r7
   ba0d8:	4302      	orrs	r2, r0
   ba0da:	f362 03c4 	bfi	r3, r2, #3, #2
   ba0de:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   ba0e0:	f7fe bf75 	b.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba0e4:	4617      	mov	r7, r2
   ba0e6:	e7bd      	b.n	ba064 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   ba0e8:	2b34      	cmp	r3, #52	; 0x34
   ba0ea:	d129      	bne.n	ba140 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   ba0ec:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba0ee:	2b00      	cmp	r3, #0
   ba0f0:	f43e af6d 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba0f4:	689b      	ldr	r3, [r3, #8]
   ba0f6:	2b00      	cmp	r3, #0
   ba0f8:	f43e af69 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba0fc:	688a      	ldr	r2, [r1, #8]
   ba0fe:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   ba100:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba102:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   ba104:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba106:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba108:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba10a:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   ba10c:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba10e:	68a8      	ldr	r0, [r5, #8]
   ba110:	689e      	ldr	r6, [r3, #8]
   ba112:	2104      	movs	r1, #4
   ba114:	f7fd f994 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba118:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   ba11a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba11c:	68a8      	ldr	r0, [r5, #8]
   ba11e:	689e      	ldr	r6, [r3, #8]
   ba120:	2108      	movs	r1, #8
   ba122:	f7fd f99a 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba126:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   ba128:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba12a:	68a8      	ldr	r0, [r5, #8]
   ba12c:	689e      	ldr	r6, [r3, #8]
   ba12e:	210a      	movs	r1, #10
   ba130:	f7fd f993 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba134:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba136:	6e62      	ldr	r2, [r4, #100]	; 0x64
   ba138:	e780      	b.n	ba03c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   ba13a:	bf00      	nop
   ba13c:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   ba140:	2b13      	cmp	r3, #19
   ba142:	d14a      	bne.n	ba1da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   ba144:	6e83      	ldr	r3, [r0, #104]	; 0x68
   ba146:	2b00      	cmp	r3, #0
   ba148:	f43e af41 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba14c:	688a      	ldr	r2, [r1, #8]
   ba14e:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   ba150:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba152:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba154:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba156:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba158:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   ba15a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba15c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba15e:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba160:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba162:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba164:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba166:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba168:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba16a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba16c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba16e:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba170:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba172:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba174:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba176:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba178:	729a      	strb	r2, [r3, #10]
   ba17a:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba17c:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   ba17e:	7a3a      	ldrb	r2, [r7, #8]
   ba180:	b2f3      	uxtb	r3, r6
   ba182:	429a      	cmp	r2, r3
   ba184:	d809      	bhi.n	ba19a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   ba186:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba188:	2201      	movs	r2, #1
   ba18a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba18e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   ba190:	6d88      	ldr	r0, [r1, #88]	; 0x58
   ba192:	b9a8      	cbnz	r0, ba1c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   ba194:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba196:	f7fe bfa8 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba19a:	886b      	ldrh	r3, [r5, #2]
   ba19c:	3b08      	subs	r3, #8
   ba19e:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba1a2:	ea4f 0186 	mov.w	r1, r6, lsl #2
   ba1a6:	ddee      	ble.n	ba186 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba1a8:	3108      	adds	r1, #8
   ba1aa:	68a8      	ldr	r0, [r5, #8]
   ba1ac:	b289      	uxth	r1, r1
   ba1ae:	f7fd f947 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1b2:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba1b6:	3601      	adds	r6, #1
   ba1b8:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba1ba:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba1bc:	d1de      	bne.n	ba17c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   ba1be:	e7e2      	b.n	ba186 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba1c0:	780b      	ldrb	r3, [r1, #0]
   ba1c2:	071b      	lsls	r3, r3, #28
   ba1c4:	d4e6      	bmi.n	ba194 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   ba1c6:	2248      	movs	r2, #72	; 0x48
   ba1c8:	3104      	adds	r1, #4
   ba1ca:	f007 f987 	bl	c14dc <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba1ce:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   ba1d0:	7813      	ldrb	r3, [r2, #0]
   ba1d2:	f043 0308 	orr.w	r3, r3, #8
   ba1d6:	7013      	strb	r3, [r2, #0]
   ba1d8:	e7dc      	b.n	ba194 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   ba1da:	2b15      	cmp	r3, #21
   ba1dc:	f47e aef7 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   ba1e0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   ba1e2:	2b00      	cmp	r3, #0
   ba1e4:	f43e aef3 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba1e8:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba1ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba1ec:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba1ee:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   ba1f0:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba1f2:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   ba1f4:	3101      	adds	r1, #1
   ba1f6:	2908      	cmp	r1, #8
   ba1f8:	d1f7      	bne.n	ba1ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   ba1fa:	68a8      	ldr	r0, [r5, #8]
   ba1fc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   ba1fe:	f7fd f92c 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba202:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba204:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   ba206:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba208:	7a92      	ldrb	r2, [r2, #10]
   ba20a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba20c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   ba20e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba210:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   ba212:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba214:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   ba216:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba218:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   ba21a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba21c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   ba21e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba220:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   ba222:	73da      	strb	r2, [r3, #15]
   ba224:	2610      	movs	r6, #16
   ba226:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba228:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba22a:	7b51      	ldrb	r1, [r2, #13]
   ba22c:	b2da      	uxtb	r2, r3
   ba22e:	4291      	cmp	r1, r2
   ba230:	d80b      	bhi.n	ba24a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   ba232:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba234:	2201      	movs	r2, #1
   ba236:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba23a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   ba23c:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   ba240:	2800      	cmp	r0, #0
   ba242:	d17f      	bne.n	ba344 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   ba244:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba246:	f7fe bf50 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba24a:	886a      	ldrh	r2, [r5, #2]
   ba24c:	3a10      	subs	r2, #16
   ba24e:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   ba252:	ea4f 1843 	mov.w	r8, r3, lsl #5
   ba256:	ddec      	ble.n	ba232 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   ba258:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba25a:	46b4      	mov	ip, r6
   ba25c:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba25e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba260:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba262:	4440      	add	r0, r8
   ba264:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba266:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba26a:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   ba26c:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba26e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba270:	4437      	add	r7, r6
   ba272:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba274:	4440      	add	r0, r8
   ba276:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba278:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba27a:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   ba27c:	2a03      	cmp	r2, #3
   ba27e:	d80b      	bhi.n	ba298 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba280:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba282:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba284:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   ba288:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba28c:	4440      	add	r0, r8
   ba28e:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba290:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba294:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   ba298:	3201      	adds	r2, #1
   ba29a:	2a08      	cmp	r2, #8
   ba29c:	f10c 0c01 	add.w	ip, ip, #1
   ba2a0:	d1dd      	bne.n	ba25e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   ba2a2:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba2a4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba2a6:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   ba2a8:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba2aa:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba2ae:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba2b0:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   ba2b2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba2b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba2b6:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba2b8:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba2bc:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba2be:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba2c0:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba2c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba2c4:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba2c6:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba2ca:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba2cc:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba2ce:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba2d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba2d2:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba2d4:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba2d8:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba2da:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   ba2dc:	3118      	adds	r1, #24
   ba2de:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   ba2e2:	68a8      	ldr	r0, [r5, #8]
   ba2e4:	b289      	uxth	r1, r1
   ba2e6:	f7fd f8b8 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba2ea:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba2ec:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   ba2ee:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   ba2f2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba2f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba2f6:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba2f8:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba2fa:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba2fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   ba300:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba302:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba304:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba306:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba308:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba30a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   ba30e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba310:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba312:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba314:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba316:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba318:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   ba31c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba31e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba320:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba322:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba324:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba326:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba32a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba32c:	68aa      	ldr	r2, [r5, #8]
   ba32e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba330:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba332:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba338:	f106 0620 	add.w	r6, r6, #32
   ba33c:	463b      	mov	r3, r7
   ba33e:	f47f af73 	bne.w	ba228 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   ba342:	e776      	b.n	ba232 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba344:	780b      	ldrb	r3, [r1, #0]
   ba346:	071f      	lsls	r7, r3, #28
   ba348:	f53f af7c 	bmi.w	ba244 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   ba34c:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   ba350:	3102      	adds	r1, #2
   ba352:	f007 f8c3 	bl	c14dc <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba356:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba358:	7813      	ldrb	r3, [r2, #0]
   ba35a:	f043 0308 	orr.w	r3, r3, #8
   ba35e:	7013      	strb	r3, [r2, #0]
   ba360:	e770      	b.n	ba244 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   ba362:	680b      	ldr	r3, [r1, #0]
   ba364:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba368:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   ba36c:	d12f      	bne.n	ba3ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   ba36e:	6f03      	ldr	r3, [r0, #112]	; 0x70
   ba370:	2b00      	cmp	r3, #0
   ba372:	f43e ae2c 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba376:	688a      	ldr	r2, [r1, #8]
   ba378:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   ba37a:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   ba37c:	6f06      	ldr	r6, [r0, #112]	; 0x70
   ba37e:	68a8      	ldr	r0, [r5, #8]
   ba380:	2102      	movs	r1, #2
   ba382:	f7fd f86a 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba386:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   ba388:	68a8      	ldr	r0, [r5, #8]
   ba38a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba38c:	2104      	movs	r1, #4
   ba38e:	f7fd f857 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba392:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   ba394:	68a8      	ldr	r0, [r5, #8]
   ba396:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba398:	2108      	movs	r1, #8
   ba39a:	f7fd f851 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba39e:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   ba3a0:	68a8      	ldr	r0, [r5, #8]
   ba3a2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba3a4:	210c      	movs	r1, #12
   ba3a6:	f7fd f858 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3aa:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   ba3ac:	68a8      	ldr	r0, [r5, #8]
   ba3ae:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba3b0:	210e      	movs	r1, #14
   ba3b2:	f7fd f852 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3b6:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   ba3b8:	68a8      	ldr	r0, [r5, #8]
   ba3ba:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba3bc:	2110      	movs	r1, #16
   ba3be:	f7fd f84c 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3c2:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   ba3c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba3c6:	2201      	movs	r2, #1
   ba3c8:	751a      	strb	r2, [r3, #20]
   ba3ca:	f7fe be00 	b.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   ba3ce:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   ba3d2:	f47e adfc 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   ba3d6:	6f46      	ldr	r6, [r0, #116]	; 0x74
   ba3d8:	2e00      	cmp	r6, #0
   ba3da:	f43e adf8 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   ba3de:	68a8      	ldr	r0, [r5, #8]
   ba3e0:	2100      	movs	r1, #0
   ba3e2:	f7fd f83a 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3e6:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   ba3e8:	68a8      	ldr	r0, [r5, #8]
   ba3ea:	6f66      	ldr	r6, [r4, #116]	; 0x74
   ba3ec:	2102      	movs	r1, #2
   ba3ee:	f7fd f834 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3f2:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   ba3f4:	68a8      	ldr	r0, [r5, #8]
   ba3f6:	6f66      	ldr	r6, [r4, #116]	; 0x74
   ba3f8:	2104      	movs	r1, #4
   ba3fa:	f7fd f82e 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3fe:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba400:	6f63      	ldr	r3, [r4, #116]	; 0x74
   ba402:	f04f 32ff 	mov.w	r2, #4294967295
   ba406:	609a      	str	r2, [r3, #8]
   ba408:	f7fe bde1 	b.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   ba40c:	680b      	ldr	r3, [r1, #0]
   ba40e:	4ab0      	ldr	r2, [pc, #704]	; (ba6d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   ba410:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba414:	4293      	cmp	r3, r2
   ba416:	f47e adda 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   ba41a:	6f83      	ldr	r3, [r0, #120]	; 0x78
   ba41c:	2b00      	cmp	r3, #0
   ba41e:	f43e add6 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba422:	688a      	ldr	r2, [r1, #8]
   ba424:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   ba426:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba428:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   ba42a:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   ba42c:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   ba42e:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   ba430:	6f86      	ldr	r6, [r0, #120]	; 0x78
   ba432:	68a8      	ldr	r0, [r5, #8]
   ba434:	2102      	movs	r1, #2
   ba436:	f7fd f810 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba43a:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   ba43c:	68a8      	ldr	r0, [r5, #8]
   ba43e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba440:	2104      	movs	r1, #4
   ba442:	f7fd f80a 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba446:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   ba448:	68a8      	ldr	r0, [r5, #8]
   ba44a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba44c:	2106      	movs	r1, #6
   ba44e:	f7fd f804 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba452:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   ba454:	68a8      	ldr	r0, [r5, #8]
   ba456:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba458:	2108      	movs	r1, #8
   ba45a:	f7fc fff1 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba45e:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   ba460:	68a8      	ldr	r0, [r5, #8]
   ba462:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba464:	210c      	movs	r1, #12
   ba466:	f7fc ffeb 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba46a:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   ba46c:	68a8      	ldr	r0, [r5, #8]
   ba46e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba470:	2110      	movs	r1, #16
   ba472:	f7fc ffe5 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba476:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   ba478:	68a8      	ldr	r0, [r5, #8]
   ba47a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba47c:	2114      	movs	r1, #20
   ba47e:	f7fc ffdf 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba482:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   ba484:	68a8      	ldr	r0, [r5, #8]
   ba486:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba488:	2118      	movs	r1, #24
   ba48a:	f7fc ffd9 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba48e:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba490:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   ba492:	f04f 32ff 	mov.w	r2, #4294967295
   ba496:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba498:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   ba49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba49c:	b17a      	cbz	r2, ba4be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba49e:	7819      	ldrb	r1, [r3, #0]
   ba4a0:	070e      	lsls	r6, r1, #28
   ba4a2:	d40c      	bmi.n	ba4be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   ba4a4:	1d19      	adds	r1, r3, #4
   ba4a6:	3320      	adds	r3, #32
   ba4a8:	f851 0b04 	ldr.w	r0, [r1], #4
   ba4ac:	f842 0b04 	str.w	r0, [r2], #4
   ba4b0:	4299      	cmp	r1, r3
   ba4b2:	d1f9      	bne.n	ba4a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   ba4b4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   ba4b6:	7813      	ldrb	r3, [r2, #0]
   ba4b8:	f043 0308 	orr.w	r3, r3, #8
   ba4bc:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   ba4be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   ba4c0:	f7fe be13 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   ba4c4:	4a83      	ldr	r2, [pc, #524]	; (ba6d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   ba4c6:	4293      	cmp	r3, r2
   ba4c8:	d158      	bne.n	ba57c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   ba4ca:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   ba4ce:	2f00      	cmp	r7, #0
   ba4d0:	f43e ad7d 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   ba4d4:	68a8      	ldr	r0, [r5, #8]
   ba4d6:	2100      	movs	r1, #0
   ba4d8:	f7fc ffb2 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4dc:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   ba4de:	68a8      	ldr	r0, [r5, #8]
   ba4e0:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   ba4e4:	2108      	movs	r1, #8
   ba4e6:	f7fc ffab 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4ea:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4ec:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   ba4ee:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4f2:	210c      	movs	r1, #12
   ba4f4:	f7fc ffa4 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   ba4f8:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4fa:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   ba4fc:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba500:	4631      	mov	r1, r6
   ba502:	f7fc ff9d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   ba506:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba508:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   ba50a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba50e:	2114      	movs	r1, #20
   ba510:	f7fc ff96 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   ba514:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba516:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   ba518:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba51c:	2118      	movs	r1, #24
   ba51e:	f7fc ff8f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   ba522:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba524:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   ba526:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba52a:	211c      	movs	r1, #28
   ba52c:	f7fc ff88 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   ba530:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba532:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   ba534:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba538:	2120      	movs	r1, #32
   ba53a:	f7fc ff81 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   ba53e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba540:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   ba544:	f04f 32ff 	mov.w	r2, #4294967295
   ba548:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba54a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   ba54e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba550:	b182      	cbz	r2, ba574 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba552:	7819      	ldrb	r1, [r3, #0]
   ba554:	0709      	lsls	r1, r1, #28
   ba556:	d40d      	bmi.n	ba574 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   ba558:	1d19      	adds	r1, r3, #4
   ba55a:	3328      	adds	r3, #40	; 0x28
   ba55c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba560:	f842 0b04 	str.w	r0, [r2], #4
   ba564:	4299      	cmp	r1, r3
   ba566:	d1f9      	bne.n	ba55c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba568:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   ba56c:	7813      	ldrb	r3, [r2, #0]
   ba56e:	f043 0308 	orr.w	r3, r3, #8
   ba572:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   ba574:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   ba578:	f7fe bdb7 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   ba57c:	784b      	ldrb	r3, [r1, #1]
   ba57e:	2b02      	cmp	r3, #2
   ba580:	d158      	bne.n	ba634 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   ba582:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   ba586:	2e00      	cmp	r6, #0
   ba588:	f43e ad21 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   ba58c:	68a8      	ldr	r0, [r5, #8]
   ba58e:	2100      	movs	r1, #0
   ba590:	f7fc ff56 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba594:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   ba596:	68a8      	ldr	r0, [r5, #8]
   ba598:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   ba59c:	2104      	movs	r1, #4
   ba59e:	f7fc ff5c 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5a2:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   ba5a4:	68a8      	ldr	r0, [r5, #8]
   ba5a6:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   ba5aa:	2106      	movs	r1, #6
   ba5ac:	f7fc ff55 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5b0:	8170      	strh	r0, [r6, #10]
   ba5b2:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   ba5b4:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   ba5b8:	886b      	ldrh	r3, [r5, #2]
   ba5ba:	7a7a      	ldrb	r2, [r7, #9]
   ba5bc:	b2b1      	uxth	r1, r6
   ba5be:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   ba5c2:	d320      	bcc.n	ba606 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   ba5c4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   ba5c8:	886a      	ldrh	r2, [r5, #2]
   ba5ca:	7a73      	ldrb	r3, [r6, #9]
   ba5cc:	08db      	lsrs	r3, r3, #3
   ba5ce:	3302      	adds	r3, #2
   ba5d0:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   ba5d4:	ea4f 0183 	mov.w	r1, r3, lsl #2
   ba5d8:	d826      	bhi.n	ba628 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5da:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   ba5de:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   ba5e2:	b160      	cbz	r0, ba5fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5e4:	780b      	ldrb	r3, [r1, #0]
   ba5e6:	071a      	lsls	r2, r3, #28
   ba5e8:	d409      	bmi.n	ba5fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   ba5ea:	2288      	movs	r2, #136	; 0x88
   ba5ec:	3104      	adds	r1, #4
   ba5ee:	f006 ff75 	bl	c14dc <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba5f2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   ba5f6:	7813      	ldrb	r3, [r2, #0]
   ba5f8:	f043 0308 	orr.w	r3, r3, #8
   ba5fc:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   ba5fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   ba602:	f7fe bd72 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   ba606:	3b08      	subs	r3, #8
   ba608:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba60c:	ddda      	ble.n	ba5c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   ba60e:	0089      	lsls	r1, r1, #2
   ba610:	3108      	adds	r1, #8
   ba612:	68a8      	ldr	r0, [r5, #8]
   ba614:	b289      	uxth	r1, r1
   ba616:	f7fc ff13 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba61a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   ba61e:	3601      	adds	r6, #1
   ba620:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   ba622:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   ba624:	d1c6      	bne.n	ba5b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   ba626:	e7cd      	b.n	ba5c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   ba628:	68a8      	ldr	r0, [r5, #8]
   ba62a:	f7fc ff09 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba62e:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   ba632:	e7d2      	b.n	ba5da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   ba634:	2b03      	cmp	r3, #3
   ba636:	d14f      	bne.n	ba6d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   ba638:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   ba63c:	2900      	cmp	r1, #0
   ba63e:	f43e acc6 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   ba642:	886a      	ldrh	r2, [r5, #2]
   ba644:	1f13      	subs	r3, r2, #4
   ba646:	bf48      	it	mi
   ba648:	1cd3      	addmi	r3, r2, #3
   ba64a:	10db      	asrs	r3, r3, #3
   ba64c:	2700      	movs	r7, #0
   ba64e:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   ba652:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   ba654:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   ba656:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   ba65a:	3b04      	subs	r3, #4
   ba65c:	42bb      	cmp	r3, r7
   ba65e:	dc08      	bgt.n	ba672 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba660:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   ba664:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   ba668:	bb10      	cbnz	r0, ba6b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   ba66a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   ba66e:	f7fe bd3c 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   ba672:	fa1f f887 	uxth.w	r8, r7
   ba676:	f108 0104 	add.w	r1, r8, #4
   ba67a:	68a8      	ldr	r0, [r5, #8]
   ba67c:	b289      	uxth	r1, r1
   ba67e:	f7fc fedf 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba682:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   ba686:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   ba68a:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   ba68e:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   ba692:	68a8      	ldr	r0, [r5, #8]
   ba694:	b289      	uxth	r1, r1
   ba696:	f7fc fed3 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   ba69a:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   ba69e:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   ba6a0:	3601      	adds	r6, #1
   ba6a2:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   ba6a4:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   ba6a8:	f107 0708 	add.w	r7, r7, #8
   ba6ac:	d1d2      	bne.n	ba654 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   ba6ae:	e7d7      	b.n	ba660 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba6b0:	780b      	ldrb	r3, [r1, #0]
   ba6b2:	071b      	lsls	r3, r3, #28
   ba6b4:	d4d9      	bmi.n	ba66a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   ba6b6:	f44f 720e 	mov.w	r2, #568	; 0x238
   ba6ba:	3108      	adds	r1, #8
   ba6bc:	3004      	adds	r0, #4
   ba6be:	f006 ff0d 	bl	c14dc <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   ba6c2:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   ba6c6:	7813      	ldrb	r3, [r2, #0]
   ba6c8:	f043 0308 	orr.w	r3, r3, #8
   ba6cc:	7013      	strb	r3, [r2, #0]
   ba6ce:	e7cc      	b.n	ba66a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   ba6d0:	001c0300 	.word	0x001c0300
   ba6d4:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   ba6d8:	2b10      	cmp	r3, #16
   ba6da:	f47e ac78 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   ba6de:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   ba6e2:	2e00      	cmp	r6, #0
   ba6e4:	f43e ac73 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   ba6e8:	68a8      	ldr	r0, [r5, #8]
   ba6ea:	2100      	movs	r1, #0
   ba6ec:	f7fc fea8 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6f0:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba6f2:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   ba6f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   ba6f8:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   ba6fa:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba6fc:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   ba6fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   ba702:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   ba704:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   ba706:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   ba708:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   ba70c:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   ba70e:	74da      	strb	r2, [r3, #19]
   ba710:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   ba712:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   ba716:	7cc6      	ldrb	r6, [r0, #19]
   ba718:	b28a      	uxth	r2, r1
   ba71a:	4296      	cmp	r6, r2
   ba71c:	d80c      	bhi.n	ba738 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba71e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   ba722:	f04f 32ff 	mov.w	r2, #4294967295
   ba726:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba728:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   ba72c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   ba72e:	bb62      	cbnz	r2, ba78a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba730:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   ba734:	f7fe bcd9 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   ba738:	886a      	ldrh	r2, [r5, #2]
   ba73a:	3a10      	subs	r2, #16
   ba73c:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   ba740:	dded      	ble.n	ba71e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   ba742:	68aa      	ldr	r2, [r5, #8]
   ba744:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   ba746:	1d0a      	adds	r2, r1, #4
   ba748:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   ba74c:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   ba74e:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   ba750:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   ba752:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   ba756:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   ba758:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   ba75c:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   ba75e:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   ba760:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   ba762:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   ba766:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   ba768:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   ba76c:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   ba76e:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   ba770:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   ba772:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   ba776:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   ba778:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   ba77c:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   ba77e:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   ba780:	2907      	cmp	r1, #7
   ba782:	f103 0304 	add.w	r3, r3, #4
   ba786:	d1c4      	bne.n	ba712 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   ba788:	e7c9      	b.n	ba71e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba78a:	7819      	ldrb	r1, [r3, #0]
   ba78c:	070f      	lsls	r7, r1, #28
   ba78e:	d4cf      	bmi.n	ba730 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   ba790:	1d19      	adds	r1, r3, #4
   ba792:	3330      	adds	r3, #48	; 0x30
   ba794:	f851 0b04 	ldr.w	r0, [r1], #4
   ba798:	f842 0b04 	str.w	r0, [r2], #4
   ba79c:	4299      	cmp	r1, r3
   ba79e:	d1f9      	bne.n	ba794 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba7a0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   ba7a4:	7813      	ldrb	r3, [r2, #0]
   ba7a6:	f043 0308 	orr.w	r3, r3, #8
   ba7aa:	7013      	strb	r3, [r2, #0]
   ba7ac:	e7c0      	b.n	ba730 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   ba7ae:	680b      	ldr	r3, [r1, #0]
   ba7b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba7b4:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   ba7b8:	d16a      	bne.n	ba890 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   ba7ba:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   ba7be:	2b00      	cmp	r3, #0
   ba7c0:	f43e ac05 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   ba7c4:	7818      	ldrb	r0, [r3, #0]
   ba7c6:	7859      	ldrb	r1, [r3, #1]
   ba7c8:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   ba7ca:	bf36      	itet	cc
   ba7cc:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   ba7d0:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   ba7d2:	1a52      	subcc	r2, r2, r1
   ba7d4:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   ba7d6:	2a0e      	cmp	r2, #14
   ba7d8:	d84b      	bhi.n	ba872 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   ba7da:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   ba7dc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   ba7e0:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   ba7e2:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   ba7e4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   ba7e8:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   ba7ea:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   ba7ec:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   ba7ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   ba7f2:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   ba7f4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   ba7f8:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   ba7fa:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   ba7fc:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   ba7fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   ba802:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   ba804:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   ba808:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   ba80a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   ba80c:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   ba80e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   ba812:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   ba814:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   ba818:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   ba81a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   ba81c:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   ba81e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   ba822:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   ba824:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   ba828:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   ba82a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   ba82c:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   ba82e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   ba832:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   ba834:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   ba838:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   ba83a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   ba83c:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   ba83e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   ba842:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   ba844:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   ba848:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   ba84a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   ba84c:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   ba84e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   ba852:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   ba854:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   ba858:	7813      	ldrb	r3, [r2, #0]
   ba85a:	3301      	adds	r3, #1
   ba85c:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   ba85e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba862:	781a      	ldrb	r2, [r3, #0]
   ba864:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   ba866:	f47e abb2 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   ba86a:	2200      	movs	r2, #0
   ba86c:	701a      	strb	r2, [r3, #0]
   ba86e:	f7fe bbae 	b.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba872:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba876:	b923      	cbnz	r3, ba882 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   ba878:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   ba87c:	2b00      	cmp	r3, #0
   ba87e:	f43e aba6 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   ba882:	4996      	ldr	r1, [pc, #600]	; (baadc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   ba884:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   ba888:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   ba88c:	f003 be33 	b.w	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   ba890:	784b      	ldrb	r3, [r1, #1]
   ba892:	2b80      	cmp	r3, #128	; 0x80
   ba894:	f47e ab9b 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba898:	884b      	ldrh	r3, [r1, #2]
   ba89a:	2ba4      	cmp	r3, #164	; 0xa4
   ba89c:	f63e ab97 	bhi.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   ba8a0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   ba8a4:	2a00      	cmp	r2, #0
   ba8a6:	f43e ab92 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   ba8aa:	7810      	ldrb	r0, [r2, #0]
   ba8ac:	7851      	ldrb	r1, [r2, #1]
   ba8ae:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   ba8b0:	bf36      	itet	cc
   ba8b2:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   ba8b4:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   ba8b6:	1a5b      	subcc	r3, r3, r1
   ba8b8:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   ba8ba:	2bf8      	cmp	r3, #248	; 0xf8
   ba8bc:	d84f      	bhi.n	ba95e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   ba8be:	23ac      	movs	r3, #172	; 0xac
   ba8c0:	fb03 2200 	mla	r2, r3, r0, r2
   ba8c4:	21b5      	movs	r1, #181	; 0xb5
   ba8c6:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   ba8c8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba8cc:	7811      	ldrb	r1, [r2, #0]
   ba8ce:	fb03 2201 	mla	r2, r3, r1, r2
   ba8d2:	2162      	movs	r1, #98	; 0x62
   ba8d4:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   ba8d6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba8da:	7811      	ldrb	r1, [r2, #0]
   ba8dc:	fb03 2201 	mla	r2, r3, r1, r2
   ba8e0:	2113      	movs	r1, #19
   ba8e2:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   ba8e4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba8e8:	7811      	ldrb	r1, [r2, #0]
   ba8ea:	fb03 2201 	mla	r2, r3, r1, r2
   ba8ee:	2180      	movs	r1, #128	; 0x80
   ba8f0:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   ba8f2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba8f6:	7811      	ldrb	r1, [r2, #0]
   ba8f8:	fb03 2201 	mla	r2, r3, r1, r2
   ba8fc:	8869      	ldrh	r1, [r5, #2]
   ba8fe:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   ba900:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba904:	7811      	ldrb	r1, [r2, #0]
   ba906:	fb03 2201 	mla	r2, r3, r1, r2
   ba90a:	8869      	ldrh	r1, [r5, #2]
   ba90c:	0a09      	lsrs	r1, r1, #8
   ba90e:	71d1      	strb	r1, [r2, #7]
   ba910:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   ba912:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   ba914:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   ba918:	b28e      	uxth	r6, r1
   ba91a:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   ba91c:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   ba91e:	d907      	bls.n	ba930 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   ba920:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   ba922:	fb03 2200 	mla	r2, r3, r0, r2
   ba926:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   ba928:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   ba92a:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   ba92c:	3101      	adds	r1, #1
   ba92e:	e7f0      	b.n	ba912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   ba930:	fb03 2200 	mla	r2, r3, r0, r2
   ba934:	7b29      	ldrb	r1, [r5, #12]
   ba936:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   ba93a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba93e:	7b69      	ldrb	r1, [r5, #13]
   ba940:	7810      	ldrb	r0, [r2, #0]
   ba942:	fb03 2300 	mla	r3, r3, r0, r2
   ba946:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   ba94a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   ba94e:	7813      	ldrb	r3, [r2, #0]
   ba950:	3301      	adds	r3, #1
   ba952:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   ba954:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   ba958:	781a      	ldrb	r2, [r3, #0]
   ba95a:	2afa      	cmp	r2, #250	; 0xfa
   ba95c:	e783      	b.n	ba866 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba95e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba962:	b923      	cbnz	r3, ba96e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   ba964:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   ba968:	2b00      	cmp	r3, #0
   ba96a:	f43e ab30 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   ba96e:	495c      	ldr	r1, [pc, #368]	; (baae0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   ba970:	e788      	b.n	ba884 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   ba972:	680b      	ldr	r3, [r1, #0]
   ba974:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba978:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   ba97c:	f040 80b2 	bne.w	baae4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   ba980:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   ba984:	2f00      	cmp	r7, #0
   ba986:	f43e ab22 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   ba98a:	68a8      	ldr	r0, [r5, #8]
   ba98c:	2100      	movs	r1, #0
   ba98e:	f7fc fd57 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba992:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   ba994:	68a8      	ldr	r0, [r5, #8]
   ba996:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   ba99a:	2104      	movs	r1, #4
   ba99c:	f7fc fd5d 	bl	b745a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9a0:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   ba9a2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   ba9a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9a8:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   ba9aa:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba9ac:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   ba9ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9b2:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   ba9b4:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba9b6:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   ba9b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9bc:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   ba9be:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba9c0:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   ba9c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9c6:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   ba9c8:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba9ca:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   ba9cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9d0:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   ba9d2:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba9d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   ba9d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9da:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   ba9dc:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9de:	210c      	movs	r1, #12
   ba9e0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   ba9e2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9e6:	f7fc fd2b 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   ba9ea:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   ba9ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   ba9ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9f2:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   ba9f4:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba9f6:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   ba9f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   ba9fc:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   ba9fe:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa00:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   baa02:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa06:	2114      	movs	r1, #20
   baa08:	f7fc fd1a 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   baa0c:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa0e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   baa10:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa14:	2118      	movs	r1, #24
   baa16:	f7fc fd13 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   baa1a:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa1c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   baa1e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa22:	211c      	movs	r1, #28
   baa24:	f7fc fd0c 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   baa28:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa2a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   baa2c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa30:	2120      	movs	r1, #32
   baa32:	f7fc fd05 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   baa36:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa38:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   baa3a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa3e:	2124      	movs	r1, #36	; 0x24
   baa40:	f7fc fcfe 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   baa44:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa46:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   baa48:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa4c:	4631      	mov	r1, r6
   baa4e:	f7fc fcf7 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   baa52:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa54:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   baa56:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa5a:	212c      	movs	r1, #44	; 0x2c
   baa5c:	f7fc fcf0 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   baa60:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa62:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   baa64:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa68:	2130      	movs	r1, #48	; 0x30
   baa6a:	f7fc fce9 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   baa6e:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   baa70:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   baa74:	68a8      	ldr	r0, [r5, #8]
   baa76:	2134      	movs	r1, #52	; 0x34
   baa78:	f7fc fce2 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa7c:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   baa7e:	68a8      	ldr	r0, [r5, #8]
   baa80:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   baa84:	2138      	movs	r1, #56	; 0x38
   baa86:	f7fc fcdb 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa8a:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   baa8c:	68a8      	ldr	r0, [r5, #8]
   baa8e:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   baa92:	213c      	movs	r1, #60	; 0x3c
   baa94:	f7fc fcd4 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa98:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   baa9a:	68a8      	ldr	r0, [r5, #8]
   baa9c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   baaa0:	2140      	movs	r1, #64	; 0x40
   baaa2:	f7fc fccd 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaa6:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baaa8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   baaac:	f04f 32ff 	mov.w	r2, #4294967295
   baab0:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baab2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   baab6:	6d88      	ldr	r0, [r1, #88]	; 0x58
   baab8:	b160      	cbz	r0, baad4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baaba:	780b      	ldrb	r3, [r1, #0]
   baabc:	071e      	lsls	r6, r3, #28
   baabe:	d409      	bmi.n	baad4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   baac0:	2248      	movs	r2, #72	; 0x48
   baac2:	3104      	adds	r1, #4
   baac4:	f006 fd0a 	bl	c14dc <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   baac8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   baacc:	7813      	ldrb	r3, [r2, #0]
   baace:	f043 0308 	orr.w	r3, r3, #8
   baad2:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   baad4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   baad8:	f7fe bb07 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   baadc:	000c3f55 	.word	0x000c3f55
   baae0:	000c3f92 	.word	0x000c3f92
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   baae4:	4a5d      	ldr	r2, [pc, #372]	; (bac5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   baae6:	4293      	cmp	r3, r2
   baae8:	d156      	bne.n	bab98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   baaea:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   baaee:	2e00      	cmp	r6, #0
   baaf0:	f43e aa6d 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   baaf4:	68a8      	ldr	r0, [r5, #8]
   baaf6:	2100      	movs	r1, #0
   baaf8:	f7fc fca2 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baafc:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baafe:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bab00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bab04:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bab06:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab08:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bab0a:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab0e:	2108      	movs	r1, #8
   bab10:	f7fc fc96 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bab14:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab16:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bab18:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab1c:	210c      	movs	r1, #12
   bab1e:	f7fc fc8f 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bab22:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab24:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bab26:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab2a:	2110      	movs	r1, #16
   bab2c:	f7fc fc88 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bab30:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bab32:	68a8      	ldr	r0, [r5, #8]
   bab34:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bab38:	2114      	movs	r1, #20
   bab3a:	f7fc fc81 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab3e:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bab40:	68a8      	ldr	r0, [r5, #8]
   bab42:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bab46:	2118      	movs	r1, #24
   bab48:	f7fc fc7a 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab4c:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bab4e:	68a8      	ldr	r0, [r5, #8]
   bab50:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bab54:	211c      	movs	r1, #28
   bab56:	f7fc fc73 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab5a:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bab5c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bab60:	f04f 32ff 	mov.w	r2, #4294967295
   bab64:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bab66:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bab6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bab6c:	b182      	cbz	r2, bab90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab6e:	7819      	ldrb	r1, [r3, #0]
   bab70:	0708      	lsls	r0, r1, #28
   bab72:	d40d      	bmi.n	bab90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bab74:	1d19      	adds	r1, r3, #4
   bab76:	3324      	adds	r3, #36	; 0x24
   bab78:	f851 0b04 	ldr.w	r0, [r1], #4
   bab7c:	f842 0b04 	str.w	r0, [r2], #4
   bab80:	4299      	cmp	r1, r3
   bab82:	d1f9      	bne.n	bab78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bab84:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bab88:	7813      	ldrb	r3, [r2, #0]
   bab8a:	f043 0308 	orr.w	r3, r3, #8
   bab8e:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bab90:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bab94:	f7fe baa9 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bab98:	4a31      	ldr	r2, [pc, #196]	; (bac60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bab9a:	4293      	cmp	r3, r2
   bab9c:	f47e aa17 	bne.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   baba0:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   baba4:	2e00      	cmp	r6, #0
   baba6:	f43e aa12 	beq.w	b8fce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   babaa:	68a8      	ldr	r0, [r5, #8]
   babac:	2100      	movs	r1, #0
   babae:	f7fc fc47 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babb2:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   babb4:	68a8      	ldr	r0, [r5, #8]
   babb6:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   babba:	2108      	movs	r1, #8
   babbc:	f7fc fc40 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babc0:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babc2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   babc4:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babc8:	210c      	movs	r1, #12
   babca:	f7fc fc39 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   babce:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babd0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   babd2:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babd6:	2110      	movs	r1, #16
   babd8:	f7fc fc32 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   babdc:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babde:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   babe0:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babe4:	2114      	movs	r1, #20
   babe6:	f7fc fc2b 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   babea:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babec:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   babee:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babf2:	2118      	movs	r1, #24
   babf4:	f7fc fc24 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   babf8:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babfa:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   babfc:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac00:	211c      	movs	r1, #28
   bac02:	f7fc fc1d 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bac06:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac08:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bac0a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac0e:	2120      	movs	r1, #32
   bac10:	f7fc fc16 	bl	b7440 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bac14:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac16:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bac1a:	f04f 32ff 	mov.w	r2, #4294967295
   bac1e:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac20:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bac24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bac26:	b182      	cbz	r2, bac4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bac28:	7819      	ldrb	r1, [r3, #0]
   bac2a:	0709      	lsls	r1, r1, #28
   bac2c:	d40d      	bmi.n	bac4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bac2e:	1d19      	adds	r1, r3, #4
   bac30:	3328      	adds	r3, #40	; 0x28
   bac32:	f851 0b04 	ldr.w	r0, [r1], #4
   bac36:	f842 0b04 	str.w	r0, [r2], #4
   bac3a:	4299      	cmp	r1, r3
   bac3c:	d1f9      	bne.n	bac32 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bac3e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bac42:	7813      	ldrb	r3, [r2, #0]
   bac44:	f043 0308 	orr.w	r3, r3, #8
   bac48:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bac4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bac4e:	f7fe ba4c 	b.w	b90ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bac52:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bac54:	2018      	movs	r0, #24
   bac56:	f7ff b9a2 	b.w	b9f9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bac5a:	bf00      	nop
   bac5c:	00200100 	.word	0x00200100
   bac60:	00240200 	.word	0x00240200

000bac64 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bac68:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bac6a:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bac6e:	f89d a020 	ldrb.w	sl, [sp, #32]
   bac72:	4604      	mov	r4, r0
   bac74:	460f      	mov	r7, r1
   bac76:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bac78:	b993      	cbnz	r3, baca0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bac7a:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bac7e:	886b      	ldrh	r3, [r5, #2]
   bac80:	88aa      	ldrh	r2, [r5, #4]
   bac82:	3303      	adds	r3, #3
   bac84:	4293      	cmp	r3, r2
   bac86:	db03      	blt.n	bac90 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bac88:	4639      	mov	r1, r7
   bac8a:	4620      	mov	r0, r4
   bac8c:	f7fd fdf0 	bl	b8870 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bac90:	88ae      	ldrh	r6, [r5, #4]
   bac92:	bb7e      	cbnz	r6, bacf4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bac94:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bac96:	88ab      	ldrh	r3, [r5, #4]
   bac98:	3301      	adds	r3, #1
   bac9a:	80ab      	strh	r3, [r5, #4]
}
   bac9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   baca0:	2b03      	cmp	r3, #3
   baca2:	d124      	bne.n	bacee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   baca4:	7852      	ldrb	r2, [r2, #1]
   baca6:	7829      	ldrb	r1, [r5, #0]
   baca8:	f7fc fdda 	bl	b7860 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bacac:	4680      	mov	r8, r0
   bacae:	2800      	cmp	r0, #0
   bacb0:	d1e5      	bne.n	bac7e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bacb2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bacb6:	b91b      	cbnz	r3, bacc0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bacb8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bacbc:	2b00      	cmp	r3, #0
   bacbe:	d0de      	beq.n	bac7e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bacc0:	49b7      	ldr	r1, [pc, #732]	; (bafa0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bacc2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bacc6:	f003 fbfc 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bacca:	7829      	ldrb	r1, [r5, #0]
   baccc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bacd0:	220a      	movs	r2, #10
   bacd2:	f7fc fbd5 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bacd6:	49b3      	ldr	r1, [pc, #716]	; (bafa4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bacd8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bacdc:	f003 fbf1 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bace0:	7869      	ldrb	r1, [r5, #1]
   bace2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bace6:	220a      	movs	r2, #10
   bace8:	f7fc fbd1 	bl	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bacec:	e7c7      	b.n	bac7e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bacee:	f04f 0802 	mov.w	r8, #2
   bacf2:	e7c4      	b.n	bac7e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bacf4:	2e01      	cmp	r6, #1
   bacf6:	d101      	bne.n	bacfc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bacf8:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bacfa:	e7cc      	b.n	bac96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bacfc:	2e02      	cmp	r6, #2
   bacfe:	d101      	bne.n	bad04 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bad00:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bad02:	e7c8      	b.n	bac96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bad04:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bad06:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bad08:	d103      	bne.n	bad12 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bad0a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bad0e:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bad10:	e7c1      	b.n	bac96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bad12:	1d0b      	adds	r3, r1, #4
   bad14:	429e      	cmp	r6, r3
   bad16:	d136      	bne.n	bad86 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bad18:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bad1a:	88aa      	ldrh	r2, [r5, #4]
   bad1c:	f108 0306 	add.w	r3, r8, #6
   bad20:	429a      	cmp	r2, r3
   bad22:	d1b8      	bne.n	bac96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bad24:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bad28:	2b00      	cmp	r3, #0
   bad2a:	d1b4      	bne.n	bac96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bad2c:	2200      	movs	r2, #0
   bad2e:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bad30:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bad34:	b91a      	cbnz	r2, bad3e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bad36:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bad3a:	2a00      	cmp	r2, #0
   bad3c:	d0ab      	beq.n	bac96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bad3e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bad42:	2b00      	cmp	r3, #0
   bad44:	f000 8170 	beq.w	bb028 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bad48:	4997      	ldr	r1, [pc, #604]	; (bafa8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bad4a:	f003 fbba 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bad4e:	4997      	ldr	r1, [pc, #604]	; (bafac <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bad50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bad54:	f003 fbb5 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bad58:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bad5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bad60:	220a      	movs	r2, #10
   bad62:	f003 fbca 	bl	be4fa <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bad66:	4992      	ldr	r1, [pc, #584]	; (bafb0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bad68:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bad6c:	f003 fba9 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bad70:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bad74:	220a      	movs	r2, #10
   bad76:	4641      	mov	r1, r8
   bad78:	4620      	mov	r0, r4
   bad7a:	f003 fbbe 	bl	be4fa <_ZN5Print11printNumberEmh>
        n += println();
   bad7e:	4620      	mov	r0, r4
   bad80:	f003 fba3 	bl	be4ca <_ZN5Print7printlnEv>
        return n;
   bad84:	e787      	b.n	bac96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bad86:	3105      	adds	r1, #5
   bad88:	428e      	cmp	r6, r1
   bad8a:	f040 812f 	bne.w	bafec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bad8e:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bad90:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bad92:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bad94:	89a9      	ldrh	r1, [r5, #12]
   bad96:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bad9a:	4291      	cmp	r1, r2
   bad9c:	f040 80ae 	bne.w	baefc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bada0:	2301      	movs	r3, #1
   bada2:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bada4:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bada8:	7829      	ldrb	r1, [r5, #0]
   badaa:	4549      	cmp	r1, r9
   badac:	d155      	bne.n	bae5a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   badae:	786b      	ldrb	r3, [r5, #1]
   badb0:	4553      	cmp	r3, sl
   badb2:	d152      	bne.n	bae5a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   badb4:	2301      	movs	r3, #1
   badb6:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   badb8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   badbc:	b3b3      	cbz	r3, bae2c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   badbe:	497d      	ldr	r1, [pc, #500]	; (bafb4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   badc0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   badc4:	f003 fb7d 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   badc8:	220a      	movs	r2, #10
   badca:	8869      	ldrh	r1, [r5, #2]
   badcc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   badd0:	f003 fb93 	bl	be4fa <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   badd4:	4978      	ldr	r1, [pc, #480]	; (bafb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   badd6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   badda:	f003 fb72 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   badde:	2200      	movs	r2, #0
   bade0:	4629      	mov	r1, r5
   bade2:	4620      	mov	r0, r4
   bade4:	f7fd ff50 	bl	b8c88 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bade8:	7bab      	ldrb	r3, [r5, #14]
   badea:	2b01      	cmp	r3, #1
   badec:	d104      	bne.n	badf8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   badee:	4973      	ldr	r1, [pc, #460]	; (bafbc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   badf0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   badf4:	f003 fb7f 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   badf8:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   badfc:	2b01      	cmp	r3, #1
   badfe:	d104      	bne.n	bae0a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bae00:	496f      	ldr	r1, [pc, #444]	; (bafc0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bae02:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bae06:	f003 fb76 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bae0a:	7beb      	ldrb	r3, [r5, #15]
   bae0c:	2b01      	cmp	r3, #1
   bae0e:	d104      	bne.n	bae1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bae10:	496c      	ldr	r1, [pc, #432]	; (bafc4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bae12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bae16:	f003 fb6e 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bae1a:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bae1e:	2b01      	cmp	r3, #1
   bae20:	d104      	bne.n	bae2c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bae22:	4969      	ldr	r1, [pc, #420]	; (bafc8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bae24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bae28:	f003 fb65 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bae2c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bae30:	b91b      	cbnz	r3, bae3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bae32:	4629      	mov	r1, r5
   bae34:	4620      	mov	r0, r4
   bae36:	f7fe f8b9 	bl	b8fac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bae3a:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bae3e:	2b03      	cmp	r3, #3
   bae40:	f47f af6b 	bne.w	bad1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bae44:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bae48:	b108      	cbz	r0, bae4e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bae4a:	f7f9 f928 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bae4e:	2300      	movs	r3, #0
   bae50:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bae54:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bae58:	e75f      	b.n	bad1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bae5a:	882b      	ldrh	r3, [r5, #0]
   bae5c:	f240 1205 	movw	r2, #261	; 0x105
   bae60:	4293      	cmp	r3, r2
   bae62:	d123      	bne.n	baeac <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bae64:	68ab      	ldr	r3, [r5, #8]
   bae66:	781a      	ldrb	r2, [r3, #0]
   bae68:	454a      	cmp	r2, r9
   bae6a:	d102      	bne.n	bae72 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bae6c:	785b      	ldrb	r3, [r3, #1]
   bae6e:	4553      	cmp	r3, sl
   bae70:	d0a0      	beq.n	badb4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bae72:	786a      	ldrb	r2, [r5, #1]
   bae74:	4620      	mov	r0, r4
   bae76:	f7fc fbf1 	bl	b765c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bae7a:	2800      	cmp	r0, #0
   bae7c:	d09c      	beq.n	badb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bae7e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bae82:	2b00      	cmp	r3, #0
   bae84:	d0d2      	beq.n	bae2c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bae86:	4951      	ldr	r1, [pc, #324]	; (bafcc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bae88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bae8c:	f003 fb19 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bae90:	2210      	movs	r2, #16
   bae92:	7829      	ldrb	r1, [r5, #0]
   bae94:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bae98:	f7fc faf2 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bae9c:	4941      	ldr	r1, [pc, #260]	; (bafa4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bae9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baea2:	f003 fb0e 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   baea6:	7869      	ldrb	r1, [r5, #1]
   baea8:	2210      	movs	r2, #16
   baeaa:	e022      	b.n	baef2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   baeac:	2b05      	cmp	r3, #5
   baeae:	d1e0      	bne.n	bae72 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   baeb0:	68ab      	ldr	r3, [r5, #8]
   baeb2:	781a      	ldrb	r2, [r3, #0]
   baeb4:	454a      	cmp	r2, r9
   baeb6:	d1dc      	bne.n	bae72 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   baeb8:	785b      	ldrb	r3, [r3, #1]
   baeba:	4553      	cmp	r3, sl
   baebc:	d1d9      	bne.n	bae72 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   baebe:	2303      	movs	r3, #3
   baec0:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   baec2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   baec6:	2b00      	cmp	r3, #0
   baec8:	d0b0      	beq.n	bae2c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   baeca:	4941      	ldr	r1, [pc, #260]	; (bafd0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   baecc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baed0:	f003 faf7 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   baed4:	68ab      	ldr	r3, [r5, #8]
   baed6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baeda:	7819      	ldrb	r1, [r3, #0]
   baedc:	2210      	movs	r2, #16
   baede:	f7fc facf 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   baee2:	493c      	ldr	r1, [pc, #240]	; (bafd4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   baee4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baee8:	f003 faeb 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   baeec:	68ab      	ldr	r3, [r5, #8]
   baeee:	7859      	ldrb	r1, [r3, #1]
   baef0:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   baef2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baef6:	f7fc faca 	bl	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   baefa:	e75d      	b.n	badb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   baefc:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   baefe:	782b      	ldrb	r3, [r5, #0]
   baf00:	454b      	cmp	r3, r9
   baf02:	d143      	bne.n	baf8c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   baf04:	786a      	ldrb	r2, [r5, #1]
   baf06:	4552      	cmp	r2, sl
   baf08:	d140      	bne.n	baf8c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   baf0a:	2300      	movs	r3, #0
   baf0c:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   baf0e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   baf12:	b91b      	cbnz	r3, baf1c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   baf14:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   baf18:	2b00      	cmp	r3, #0
   baf1a:	d08e      	beq.n	bae3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   baf1c:	492e      	ldr	r1, [pc, #184]	; (bafd8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   baf1e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf22:	f003 face 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   baf26:	492d      	ldr	r1, [pc, #180]	; (bafdc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   baf28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf2c:	f003 fac9 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   baf30:	7b29      	ldrb	r1, [r5, #12]
   baf32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf36:	220a      	movs	r2, #10
   baf38:	f7fc faa2 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   baf3c:	4928      	ldr	r1, [pc, #160]	; (bafe0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   baf3e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf42:	f003 fabe 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   baf46:	7b69      	ldrb	r1, [r5, #13]
   baf48:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf4c:	220a      	movs	r2, #10
   baf4e:	f7fc fa97 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   baf52:	4924      	ldr	r1, [pc, #144]	; (bafe4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   baf54:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf58:	f003 fab3 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   baf5c:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   baf60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf64:	220a      	movs	r2, #10
   baf66:	f7fc fa8b 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   baf6a:	491f      	ldr	r1, [pc, #124]	; (bafe8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   baf6c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf70:	f003 faa7 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   baf74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf78:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   baf7c:	220a      	movs	r2, #10
   baf7e:	f7fc fa7f 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   baf82:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   baf86:	f003 faa0 	bl	be4ca <_ZN5Print7printlnEv>
   baf8a:	e756      	b.n	bae3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   baf8c:	2b05      	cmp	r3, #5
   baf8e:	d1be      	bne.n	baf0e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   baf90:	68ab      	ldr	r3, [r5, #8]
   baf92:	781a      	ldrb	r2, [r3, #0]
   baf94:	454a      	cmp	r2, r9
   baf96:	d1ba      	bne.n	baf0e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   baf98:	785b      	ldrb	r3, [r3, #1]
   baf9a:	4553      	cmp	r3, sl
   baf9c:	d1b7      	bne.n	baf0e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   baf9e:	e7b4      	b.n	baf0a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bafa0:	000c3fd4 	.word	0x000c3fd4
   bafa4:	000c4045 	.word	0x000c4045
   bafa8:	000c414d 	.word	0x000c414d
   bafac:	000c41a4 	.word	0x000c41a4
   bafb0:	000c41ba 	.word	0x000c41ba
   bafb4:	000c4081 	.word	0x000c4081
   bafb8:	000c4092 	.word	0x000c4092
   bafbc:	000c409e 	.word	0x000c409e
   bafc0:	000c40b2 	.word	0x000c40b2
   bafc4:	000c40c6 	.word	0x000c40c6
   bafc8:	000c40e0 	.word	0x000c40e0
   bafcc:	000c404d 	.word	0x000c404d
   bafd0:	000c400c 	.word	0x000c400c
   bafd4:	000c403b 	.word	0x000c403b
   bafd8:	000c40fa 	.word	0x000c40fa
   bafdc:	000c410b 	.word	0x000c410b
   bafe0:	000c4118 	.word	0x000c4118
   bafe4:	000c4125 	.word	0x000c4125
   bafe8:	000c4139 	.word	0x000c4139
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bafec:	786a      	ldrb	r2, [r5, #1]
   bafee:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   baff0:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   baff4:	4620      	mov	r0, r4
   baff6:	f7fc fb31 	bl	b765c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   baffa:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   baffe:	2800      	cmp	r0, #0
   bb000:	bf18      	it	ne
   bb002:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bb006:	2b00      	cmp	r3, #0
   bb008:	f47f ae87 	bne.w	bad1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bb00c:	1ef3      	subs	r3, r6, #3
   bb00e:	454b      	cmp	r3, r9
   bb010:	f77f ae83 	ble.w	bad1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bb014:	3e04      	subs	r6, #4
   bb016:	eba6 0609 	sub.w	r6, r6, r9
   bb01a:	4546      	cmp	r6, r8
   bb01c:	da02      	bge.n	bb024 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bb01e:	68ab      	ldr	r3, [r5, #8]
   bb020:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb022:	e67a      	b.n	bad1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bb024:	2301      	movs	r3, #1
   bb026:	e681      	b.n	bad2c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb028:	4900      	ldr	r1, [pc, #0]	; (bb02c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bb02a:	e68e      	b.n	bad4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bb02c:	000c4172 	.word	0x000c4172

000bb030 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bb030:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb032:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bb036:	4604      	mov	r4, r0
   bb038:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb03a:	b113      	cbz	r3, bb042 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bb03c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bb040:	b953      	cbnz	r3, bb058 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bb042:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bb046:	b128      	cbz	r0, bb054 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bb048:	490e      	ldr	r1, [pc, #56]	; (bb084 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb04a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb04e:	f003 fa52 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bb052:	2000      	movs	r0, #0
}
   bb054:	b003      	add	sp, #12
   bb056:	bd30      	pop	{r4, r5, pc}
   bb058:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bb05a:	f7fd ff12 	bl	b8e82 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bb05e:	4285      	cmp	r5, r0
   bb060:	9901      	ldr	r1, [sp, #4]
   bb062:	d908      	bls.n	bb076 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb064:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb068:	b91b      	cbnz	r3, bb072 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bb06a:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bb06e:	2800      	cmp	r0, #0
   bb070:	d0f0      	beq.n	bb054 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb072:	4905      	ldr	r1, [pc, #20]	; (bb088 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bb074:	e7e9      	b.n	bb04a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bb076:	4620      	mov	r0, r4
   bb078:	462a      	mov	r2, r5
   bb07a:	f7fd ff0b 	bl	b8e94 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bb07e:	2001      	movs	r0, #1
   bb080:	e7e8      	b.n	bb054 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bb082:	bf00      	nop
   bb084:	000c41d2 	.word	0x000c41d2
   bb088:	000c41fd 	.word	0x000c41fd

000bb08c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bb08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb090:	4604      	mov	r4, r0
   bb092:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bb094:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bb098:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bb09c:	f88d 100f 	strb.w	r1, [sp, #15]
   bb0a0:	4615      	mov	r5, r2
   bb0a2:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bb0a4:	b118      	cbz	r0, bb0ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bb0a6:	6803      	ldr	r3, [r0, #0]
   bb0a8:	b2c9      	uxtb	r1, r1
   bb0aa:	689b      	ldr	r3, [r3, #8]
   bb0ac:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bb0ae:	7823      	ldrb	r3, [r4, #0]
   bb0b0:	2b01      	cmp	r3, #1
   bb0b2:	d80e      	bhi.n	bb0d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb0b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb0b8:	2bb5      	cmp	r3, #181	; 0xb5
   bb0ba:	d12e      	bne.n	bb11a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bb0bc:	2300      	movs	r3, #0
   bb0be:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb0c2:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bb0c4:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb0c8:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb0cc:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb0ce:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bb0d2:	7826      	ldrb	r6, [r4, #0]
   bb0d4:	2e02      	cmp	r6, #2
   bb0d6:	f040 81d5 	bne.w	bb484 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bb0da:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb0de:	bb5b      	cbnz	r3, bb138 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bb0e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb0e4:	2bb5      	cmp	r3, #181	; 0xb5
   bb0e6:	d001      	beq.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bb0e8:	2300      	movs	r3, #0
   bb0ea:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb0ec:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb0f0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb0f4:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb0f8:	2b01      	cmp	r3, #1
   bb0fa:	f040 81a3 	bne.w	bb444 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb0fe:	463b      	mov	r3, r7
   bb100:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb104:	4620      	mov	r0, r4
   bb106:	f7ff fdad 	bl	bac64 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bb10a:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb10e:	3301      	adds	r3, #1
   bb110:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bb114:	b005      	add	sp, #20
   bb116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bb11a:	2b24      	cmp	r3, #36	; 0x24
   bb11c:	d105      	bne.n	bb12a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bb11e:	2300      	movs	r3, #0
   bb120:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bb124:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb126:	7023      	strb	r3, [r4, #0]
   bb128:	e7d3      	b.n	bb0d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bb12a:	2bd3      	cmp	r3, #211	; 0xd3
   bb12c:	d1d1      	bne.n	bb0d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bb12e:	2300      	movs	r3, #0
   bb130:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb134:	2303      	movs	r3, #3
   bb136:	e7f6      	b.n	bb126 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bb138:	2b01      	cmp	r3, #1
   bb13a:	d103      	bne.n	bb144 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bb13c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb140:	2b62      	cmp	r3, #98	; 0x62
   bb142:	e7d0      	b.n	bb0e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bb144:	2b02      	cmp	r3, #2
   bb146:	d10e      	bne.n	bb166 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bb148:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb14c:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bb150:	2200      	movs	r2, #0
   bb152:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bb156:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bb15a:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bb15e:	88eb      	ldrh	r3, [r5, #6]
   bb160:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bb164:	e7c2      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bb166:	2b03      	cmp	r3, #3
   bb168:	f040 80b7 	bne.w	bb2da <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb16c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bb170:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bb174:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb178:	2905      	cmp	r1, #5
   bb17a:	d0b7      	beq.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bb17c:	42b9      	cmp	r1, r7
   bb17e:	d10c      	bne.n	bb19a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bb180:	4546      	cmp	r6, r8
   bb182:	d10a      	bne.n	bb19a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb184:	2300      	movs	r3, #0
   bb186:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb18a:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bb18c:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bb190:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bb192:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bb196:	80ab      	strh	r3, [r5, #4]
   bb198:	e7a8      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bb19a:	4632      	mov	r2, r6
   bb19c:	4620      	mov	r0, r4
   bb19e:	f7fc fa5d 	bl	b765c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb1a2:	2800      	cmp	r0, #0
   bb1a4:	f000 8095 	beq.w	bb2d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bb1a8:	4632      	mov	r2, r6
   bb1aa:	4620      	mov	r0, r4
   bb1ac:	f7fc fb58 	bl	b7860 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bb1b0:	4606      	mov	r6, r0
   bb1b2:	b9e8      	cbnz	r0, bb1f0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb1b4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb1b8:	b913      	cbnz	r3, bb1c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bb1ba:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb1be:	b1bb      	cbz	r3, bb1f0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb1c0:	49a7      	ldr	r1, [pc, #668]	; (bb460 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bb1c2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb1c6:	f003 f97c 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bb1ca:	220a      	movs	r2, #10
   bb1cc:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb1d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb1d4:	f7fc f954 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb1d8:	49a2      	ldr	r1, [pc, #648]	; (bb464 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb1da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb1de:	f003 f970 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bb1e2:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb1e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb1ea:	220a      	movs	r2, #10
   bb1ec:	f7fc f94f 	bl	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bb1f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bb1f4:	b1a3      	cbz	r3, bb220 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb1f6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb1fa:	b913      	cbnz	r3, bb202 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bb1fc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb200:	b123      	cbz	r3, bb20c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bb202:	4999      	ldr	r1, [pc, #612]	; (bb468 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bb204:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb208:	f003 f975 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bb20c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb210:	b108      	cbz	r0, bb216 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bb212:	f7f8 ff44 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bb216:	2300      	movs	r3, #0
   bb218:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bb21c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bb220:	4630      	mov	r0, r6
   bb222:	f7f8 ff3a 	bl	b409a <_Znaj>
   bb226:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb22a:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bb22e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bb232:	bb38      	cbnz	r0, bb284 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb234:	b913      	cbnz	r3, bb23c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bb236:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb23a:	b1e3      	cbz	r3, bb276 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bb23c:	498b      	ldr	r1, [pc, #556]	; (bb46c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bb23e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb242:	f003 f93e 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bb246:	2210      	movs	r2, #16
   bb248:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb24c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb250:	f7fc f916 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb254:	4983      	ldr	r1, [pc, #524]	; (bb464 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb256:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb25a:	f003 f932 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bb25e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb262:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb266:	2210      	movs	r2, #16
   bb268:	f7fc f911 	bl	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bb26c:	4980      	ldr	r1, [pc, #512]	; (bb470 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bb26e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb272:	f003 f940 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb276:	2300      	movs	r3, #0
   bb278:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb27c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bb280:	702b      	strb	r3, [r5, #0]
   bb282:	e783      	b.n	bb18c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bb284:	2203      	movs	r2, #3
   bb286:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bb28a:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bb28e:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bb292:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bb296:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bb29a:	2b00      	cmp	r3, #0
   bb29c:	f43f af26 	beq.w	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bb2a0:	4974      	ldr	r1, [pc, #464]	; (bb474 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bb2a2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb2a6:	f003 f90c 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bb2aa:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb2ae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb2b2:	2210      	movs	r2, #16
   bb2b4:	f7fc f8e4 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb2b8:	496a      	ldr	r1, [pc, #424]	; (bb464 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb2ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb2be:	f003 f900 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bb2c2:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb2c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb2ca:	2210      	movs	r2, #16
   bb2cc:	f7fc f8df 	bl	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb2d0:	e70c      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bb2d2:	2301      	movs	r3, #1
   bb2d4:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bb2d8:	e708      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bb2da:	2b04      	cmp	r3, #4
   bb2dc:	d104      	bne.n	bb2e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bb2de:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bb2e2:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bb2e6:	e701      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bb2e8:	2b05      	cmp	r3, #5
   bb2ea:	d106      	bne.n	bb2fa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bb2ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb2f0:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb2f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bb2f8:	e7f3      	b.n	bb2e2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bb2fa:	2b06      	cmp	r3, #6
   bb2fc:	d12b      	bne.n	bb356 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bb2fe:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb302:	bb13      	cbnz	r3, bb34a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb304:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb308:	b913      	cbnz	r3, bb310 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bb30a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb30e:	b1bb      	cbz	r3, bb340 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bb310:	4959      	ldr	r1, [pc, #356]	; (bb478 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bb312:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb316:	f003 f8d4 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bb31a:	2210      	movs	r2, #16
   bb31c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb320:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb324:	f7fc f8ac 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb328:	494e      	ldr	r1, [pc, #312]	; (bb464 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb32a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb32e:	f003 f8c8 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bb332:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb336:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb33a:	2210      	movs	r2, #16
   bb33c:	f7fc f8a7 	bl	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bb340:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb344:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bb348:	e6d0      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bb34a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb34e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb352:	701a      	strb	r2, [r3, #0]
   bb354:	e6ca      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bb356:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb358:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bb35c:	f47f aec6 	bne.w	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bb360:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb364:	bb9b      	cbnz	r3, bb3ce <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bb366:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bb36a:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb36e:	2b02      	cmp	r3, #2
   bb370:	f47f aebc 	bne.w	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bb374:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb378:	2905      	cmp	r1, #5
   bb37a:	f47f aeb7 	bne.w	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bb37e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb382:	781a      	ldrb	r2, [r3, #0]
   bb384:	42ba      	cmp	r2, r7
   bb386:	f47f aeb1 	bne.w	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bb38a:	785a      	ldrb	r2, [r3, #1]
   bb38c:	4542      	cmp	r2, r8
   bb38e:	f47f aead 	bne.w	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bb392:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bb396:	2a02      	cmp	r2, #2
   bb398:	d121      	bne.n	bb3de <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bb39a:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bb39e:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bb3a2:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bb3a6:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bb3aa:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bb3ae:	2001      	movs	r0, #1
   bb3b0:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bb3b4:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bb3b8:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bb3bc:	781b      	ldrb	r3, [r3, #0]
   bb3be:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bb3c0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bb3c4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bb3c8:	7852      	ldrb	r2, [r2, #1]
   bb3ca:	705a      	strb	r2, [r3, #1]
   bb3cc:	e68e      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bb3ce:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bb3d0:	bf16      	itet	ne
   bb3d2:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bb3d6:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bb3da:	705a      	strbne	r2, [r3, #1]
   bb3dc:	e7c5      	b.n	bb36a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb3de:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb3e2:	b923      	cbnz	r3, bb3ee <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bb3e4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb3e8:	2b00      	cmp	r3, #0
   bb3ea:	f43f ae7f 	beq.w	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bb3ee:	4923      	ldr	r1, [pc, #140]	; (bb47c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bb3f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb3f4:	f003 f865 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bb3f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb3fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb400:	7819      	ldrb	r1, [r3, #0]
   bb402:	2210      	movs	r2, #16
   bb404:	f7fc f83c 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bb408:	4916      	ldr	r1, [pc, #88]	; (bb464 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb40a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb40e:	f003 f858 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bb412:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb416:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb41a:	7859      	ldrb	r1, [r3, #1]
   bb41c:	2210      	movs	r2, #16
   bb41e:	f7fc f82f 	bl	b7480 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bb422:	4917      	ldr	r1, [pc, #92]	; (bb480 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bb424:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb428:	f003 f84b 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bb42c:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bb430:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bb434:	220a      	movs	r2, #10
   bb436:	4630      	mov	r0, r6
   bb438:	f003 f85f 	bl	be4fa <_ZN5Print11printNumberEmh>
        n += println();
   bb43c:	4630      	mov	r0, r6
   bb43e:	f003 f844 	bl	be4ca <_ZN5Print7printlnEv>
        return n;
   bb442:	e653      	b.n	bb0ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb444:	b913      	cbnz	r3, bb44c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bb446:	463b      	mov	r3, r7
   bb448:	462a      	mov	r2, r5
   bb44a:	e65b      	b.n	bb104 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bb44c:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bb44e:	bf08      	it	eq
   bb450:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bb454:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb456:	bf18      	it	ne
   bb458:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bb45c:	e652      	b.n	bb104 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bb45e:	bf00      	nop
   bb460:	000c423e 	.word	0x000c423e
   bb464:	000c4045 	.word	0x000c4045
   bb468:	000c4273 	.word	0x000c4273
   bb46c:	000c42b5 	.word	0x000c42b5
   bb470:	000c42fa 	.word	0x000c42fa
   bb474:	000c432c 	.word	0x000c432c
   bb478:	000c435d 	.word	0x000c435d
   bb47c:	000c438d 	.word	0x000c438d
   bb480:	000c43bd 	.word	0x000c43bd
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bb484:	2e01      	cmp	r6, #1
   bb486:	f040 8188 	bne.w	bb79a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bb48a:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bb48e:	2b00      	cmp	r3, #0
   bb490:	d146      	bne.n	bb520 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bb492:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb496:	2a24      	cmp	r2, #36	; 0x24
   bb498:	f000 8086 	beq.w	bb5a8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bb49c:	2300      	movs	r3, #0
   bb49e:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bb4a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb4a4:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bb4a6:	bf04      	itt	eq
   bb4a8:	23fb      	moveq	r3, #251	; 0xfb
   bb4aa:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bb4ae:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bb4b2:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bb4b6:	3501      	adds	r5, #1
   bb4b8:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bb4ba:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bb4bc:	bf08      	it	eq
   bb4be:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bb4c0:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bb4c4:	bf08      	it	eq
   bb4c6:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bb4c8:	2d00      	cmp	r5, #0
   bb4ca:	f47f ae23 	bne.w	bb114 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bb4ce:	4620      	mov	r0, r4
   bb4d0:	f7fc fc20 	bl	b7d14 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bb4d4:	2800      	cmp	r0, #0
   bb4d6:	f000 8120 	beq.w	bb71a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bb4da:	4620      	mov	r0, r4
   bb4dc:	f7fc fd7c 	bl	b7fd8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bb4e0:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bb4e2:	4620      	mov	r0, r4
   bb4e4:	f7fc fdfa 	bl	b80dc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bb4e8:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bb4ea:	4620      	mov	r0, r4
   bb4ec:	f7fd f88a 	bl	b8604 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bb4f0:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bb4f2:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bb4f4:	1e41      	subs	r1, r0, #1
   bb4f6:	428e      	cmp	r6, r1
   bb4f8:	f280 80b4 	bge.w	bb664 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bb4fc:	783a      	ldrb	r2, [r7, #0]
   bb4fe:	3a04      	subs	r2, #4
   bb500:	4296      	cmp	r6, r2
   bb502:	f280 80af 	bge.w	bb664 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bb506:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bb508:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bb50c:	f000 80ad 	beq.w	bb66a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bb510:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bb512:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bb516:	bf18      	it	ne
   bb518:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bb51a:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bb51c:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bb51e:	e7ea      	b.n	bb4f6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bb520:	2b01      	cmp	r3, #1
   bb522:	d103      	bne.n	bb52c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bb524:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb528:	2a47      	cmp	r2, #71	; 0x47
   bb52a:	e7b5      	b.n	bb498 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bb52c:	b2da      	uxtb	r2, r3
   bb52e:	2a05      	cmp	r2, #5
   bb530:	d93a      	bls.n	bb5a8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bb532:	4620      	mov	r0, r4
   bb534:	f7fc fbee 	bl	b7d14 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bb538:	b308      	cbz	r0, bb57e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bb53a:	4620      	mov	r0, r4
   bb53c:	f7fc fd4c 	bl	b7fd8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bb540:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bb542:	4620      	mov	r0, r4
   bb544:	f7fc fdca 	bl	b80dc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bb548:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bb54a:	4620      	mov	r0, r4
   bb54c:	f7fd f85a 	bl	b8604 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bb550:	782b      	ldrb	r3, [r5, #0]
   bb552:	4283      	cmp	r3, r0
   bb554:	d213      	bcs.n	bb57e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bb556:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb55a:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bb55c:	782b      	ldrb	r3, [r5, #0]
   bb55e:	3301      	adds	r3, #1
   bb560:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bb562:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bb564:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bb566:	d10a      	bne.n	bb57e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb568:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb56c:	b913      	cbnz	r3, bb574 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bb56e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb572:	b123      	cbz	r3, bb57e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bb574:	498f      	ldr	r1, [pc, #572]	; (bb7b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bb576:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb57a:	f002 ffbc 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bb57e:	4620      	mov	r0, r4
   bb580:	f7fc f9c8 	bl	b7914 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bb584:	b128      	cbz	r0, bb592 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bb586:	2201      	movs	r2, #1
   bb588:	f10d 010f 	add.w	r1, sp, #15
   bb58c:	4620      	mov	r0, r4
   bb58e:	f7ff fd4f 	bl	bb030 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bb592:	4620      	mov	r0, r4
   bb594:	f7fc faee 	bl	b7b74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bb598:	2800      	cmp	r0, #0
   bb59a:	d081      	beq.n	bb4a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bb59c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb5a0:	4620      	mov	r0, r4
   bb5a2:	f7fc fbaf 	bl	b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bb5a6:	e77b      	b.n	bb4a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bb5a8:	18e2      	adds	r2, r4, r3
   bb5aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb5ae:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bb5b2:	2b05      	cmp	r3, #5
   bb5b4:	f47f af74 	bne.w	bb4a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bb5b8:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bb5bc:	b923      	cbnz	r3, bb5c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bb5be:	4620      	mov	r0, r4
   bb5c0:	f7fc fa70 	bl	b7aa4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bb5c4:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bb5c8:	4620      	mov	r0, r4
   bb5ca:	f7fc fba3 	bl	b7d14 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bb5ce:	b1b8      	cbz	r0, bb600 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bb5d0:	4620      	mov	r0, r4
   bb5d2:	f7fc fd01 	bl	b7fd8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bb5d6:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bb5d8:	4620      	mov	r0, r4
   bb5da:	f7fc fd7f 	bl	b80dc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bb5de:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bb5e0:	4620      	mov	r0, r4
   bb5e2:	f7fd f80f 	bl	b8604 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bb5e6:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bb5e8:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bb5ea:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bb5ec:	2100      	movs	r1, #0
   bb5ee:	4628      	mov	r0, r5
   bb5f0:	f005 ff9c 	bl	c152c <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bb5f4:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bb5f8:	602b      	str	r3, [r5, #0]
   bb5fa:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bb5fe:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bb600:	4620      	mov	r0, r4
   bb602:	f7fc f987 	bl	b7914 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bb606:	b128      	cbz	r0, bb614 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bb608:	2206      	movs	r2, #6
   bb60a:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bb60e:	4620      	mov	r0, r4
   bb610:	f7ff fd0e 	bl	bb030 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bb614:	4620      	mov	r0, r4
   bb616:	f7fc faad 	bl	b7b74 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bb61a:	b1e8      	cbz	r0, bb658 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bb61c:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bb620:	4620      	mov	r0, r4
   bb622:	f7fc fb6f 	bl	b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bb626:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bb62a:	4620      	mov	r0, r4
   bb62c:	f7fc fb6a 	bl	b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bb630:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bb634:	4620      	mov	r0, r4
   bb636:	f7fc fb65 	bl	b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bb63a:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bb63e:	4620      	mov	r0, r4
   bb640:	f7fc fb60 	bl	b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bb644:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bb648:	4620      	mov	r0, r4
   bb64a:	f7fc fb5b 	bl	b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bb64e:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bb652:	4620      	mov	r0, r4
   bb654:	f7fc fb56 	bl	b7d04 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bb658:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bb65c:	2b05      	cmp	r3, #5
   bb65e:	f67f af1f 	bls.w	bb4a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bb662:	e766      	b.n	bb532 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bb664:	2d2a      	cmp	r5, #42	; 0x2a
   bb666:	f040 808b 	bne.w	bb780 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bb66a:	091a      	lsrs	r2, r3, #4
   bb66c:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bb670:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bb672:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bb674:	f003 030f 	and.w	r3, r3, #15
   bb678:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bb67c:	bf84      	itt	hi
   bb67e:	3237      	addhi	r2, #55	; 0x37
   bb680:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bb682:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bb686:	bf88      	it	hi
   bb688:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bb68c:	f818 3006 	ldrb.w	r3, [r8, r6]
   bb690:	42ab      	cmp	r3, r5
   bb692:	eb08 0b06 	add.w	fp, r8, r6
   bb696:	d143      	bne.n	bb720 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bb698:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bb69c:	4553      	cmp	r3, sl
   bb69e:	d13f      	bne.n	bb720 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bb6a0:	4620      	mov	r0, r4
   bb6a2:	f7fc fd9d 	bl	b81e0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bb6a6:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bb6a8:	4620      	mov	r0, r4
   bb6aa:	f7fc fe1d 	bl	b82e8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bb6ae:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bb6b0:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bb6b2:	2100      	movs	r1, #0
   bb6b4:	f005 ff3a 	bl	c152c <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bb6b8:	783a      	ldrb	r2, [r7, #0]
   bb6ba:	4641      	mov	r1, r8
   bb6bc:	4630      	mov	r0, r6
   bb6be:	f005 ff0d 	bl	c14dc <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bb6c2:	783b      	ldrb	r3, [r7, #0]
   bb6c4:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bb6c6:	4620      	mov	r0, r4
   bb6c8:	f7fd f80e 	bl	b86e8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bb6cc:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bb6ce:	f025 0503 	bic.w	r5, r5, #3
   bb6d2:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bb6d6:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bb6d8:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bb6dc:	4620      	mov	r0, r4
   bb6de:	f7fc fba5 	bl	b7e2c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bb6e2:	b1d0      	cbz	r0, bb71a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bb6e4:	f01a 0104 	ands.w	r1, sl, #4
   bb6e8:	d117      	bne.n	bb71a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bb6ea:	4620      	mov	r0, r4
   bb6ec:	9102      	str	r1, [sp, #8]
   bb6ee:	f7fc fe7f 	bl	b83f0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bb6f2:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bb6f4:	4620      	mov	r0, r4
   bb6f6:	f7fc feff 	bl	b84f8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bb6fa:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bb6fc:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bb6fe:	464a      	mov	r2, r9
   bb700:	f005 ff14 	bl	c152c <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bb704:	783a      	ldrb	r2, [r7, #0]
   bb706:	4641      	mov	r1, r8
   bb708:	4650      	mov	r0, sl
   bb70a:	f005 fee7 	bl	c14dc <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bb70e:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bb712:	783b      	ldrb	r3, [r7, #0]
   bb714:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bb718:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bb71a:	2300      	movs	r3, #0
   bb71c:	7023      	strb	r3, [r4, #0]
   bb71e:	e4f9      	b.n	bb114 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb720:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb724:	b91b      	cbnz	r3, bb72e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bb726:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb72a:	2b00      	cmp	r3, #0
   bb72c:	d0f5      	beq.n	bb71a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bb72e:	4922      	ldr	r1, [pc, #136]	; (bb7b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bb730:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb734:	f002 fec5 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bb738:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb73c:	6803      	ldr	r3, [r0, #0]
   bb73e:	4629      	mov	r1, r5
   bb740:	689b      	ldr	r3, [r3, #8]
   bb742:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bb744:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb748:	6803      	ldr	r3, [r0, #0]
   bb74a:	4651      	mov	r1, sl
   bb74c:	689b      	ldr	r3, [r3, #8]
   bb74e:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bb750:	491a      	ldr	r1, [pc, #104]	; (bb7bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bb752:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb756:	f002 feb4 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bb75a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb75e:	f89b 1000 	ldrb.w	r1, [fp]
   bb762:	6803      	ldr	r3, [r0, #0]
   bb764:	689b      	ldr	r3, [r3, #8]
   bb766:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bb768:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb76c:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bb770:	6803      	ldr	r3, [r0, #0]
   bb772:	689b      	ldr	r3, [r3, #8]
   bb774:	4798      	blx	r3
              _debugSerial->println();
   bb776:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb77a:	f002 fea6 	bl	be4ca <_ZN5Print7printlnEv>
   bb77e:	e7cc      	b.n	bb71a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb780:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb784:	b91b      	cbnz	r3, bb78e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bb786:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb78a:	2b00      	cmp	r3, #0
   bb78c:	d0c5      	beq.n	bb71a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bb78e:	490c      	ldr	r1, [pc, #48]	; (bb7c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bb790:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb794:	f002 feaf 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bb798:	e7bf      	b.n	bb71a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bb79a:	2e03      	cmp	r6, #3
   bb79c:	f47f acba 	bne.w	bb114 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bb7a0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb7a4:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bb7a8:	4620      	mov	r0, r4
   bb7aa:	f7fd f821 	bl	b87f0 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bb7ae:	7020      	strb	r0, [r4, #0]
}
   bb7b0:	e4b0      	b.n	bb114 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bb7b2:	bf00      	nop
   bb7b4:	000c43c4 	.word	0x000c43c4
   bb7b8:	000c43e2 	.word	0x000c43e2
   bb7bc:	000c440d 	.word	0x000c440d
   bb7c0:	000c4413 	.word	0x000c4413

000bb7c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bb7c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bb7c8:	4604      	mov	r4, r0
   bb7ca:	4699      	mov	r9, r3
   bb7cc:	460f      	mov	r7, r1
   bb7ce:	4690      	mov	r8, r2
   bb7d0:	f000 fe04 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bb7d4:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bb7d8:	1ac0      	subs	r0, r0, r3
   bb7da:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bb7de:	4298      	cmp	r0, r3
   bb7e0:	f0c0 80a8 	bcc.w	bb934 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bb7e4:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bb7e8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb7ec:	f004 fcd6 	bl	c019c <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bb7f0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb7f4:	21fd      	movs	r1, #253	; 0xfd
   bb7f6:	f7fb fe53 	bl	b74a0 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bb7fa:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb7fe:	2100      	movs	r1, #0
   bb800:	f004 fcd3 	bl	c01aa <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bb804:	4605      	mov	r5, r0
   bb806:	b1a8      	cbz	r0, bb834 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb808:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb80c:	b933      	cbnz	r3, bb81c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bb80e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb812:	b91b      	cbnz	r3, bb81c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bb814:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bb816:	b002      	add	sp, #8
   bb818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bb81c:	4946      	ldr	r1, [pc, #280]	; (bb938 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bb81e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb822:	f002 fe4e 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bb826:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb82a:	220a      	movs	r2, #10
   bb82c:	4629      	mov	r1, r5
   bb82e:	f7fb fe2e 	bl	b748e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb832:	e7ef      	b.n	bb814 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bb834:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bb838:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb83c:	2202      	movs	r2, #2
   bb83e:	f004 fcaa 	bl	c0196 <_ZN7TwoWire11requestFromEhj>
   bb842:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bb844:	2d02      	cmp	r5, #2
   bb846:	d008      	beq.n	bb85a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb848:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb84c:	b91b      	cbnz	r3, bb856 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bb84e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb852:	2b00      	cmp	r3, #0
   bb854:	d0de      	beq.n	bb814 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bb856:	4939      	ldr	r1, [pc, #228]	; (bb93c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bb858:	e7e1      	b.n	bb81e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bb85a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb85e:	6803      	ldr	r3, [r0, #0]
   bb860:	695b      	ldr	r3, [r3, #20]
   bb862:	4798      	blx	r3
   bb864:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bb866:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb86a:	6803      	ldr	r3, [r0, #0]
   bb86c:	695b      	ldr	r3, [r3, #20]
   bb86e:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bb870:	b2c6      	uxtb	r6, r0
   bb872:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bb876:	b22a      	sxth	r2, r5
   bb878:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bb87a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb87e:	b955      	cbnz	r5, bb896 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bb880:	b123      	cbz	r3, bb88c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bb882:	492f      	ldr	r1, [pc, #188]	; (bb940 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bb884:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb888:	f002 fe35 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bb88c:	f000 fda6 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bb890:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bb894:	e7be      	b.n	bb814 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bb896:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bb898:	bfb8      	it	lt
   bb89a:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bb89e:	2d64      	cmp	r5, #100	; 0x64
   bb8a0:	d936      	bls.n	bb910 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bb8a2:	b17b      	cbz	r3, bb8c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bb8a4:	4927      	ldr	r1, [pc, #156]	; (bb944 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bb8a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8aa:	f002 fe0a 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb8ae:	4629      	mov	r1, r5
   bb8b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8b4:	220a      	movs	r2, #10
   bb8b6:	f002 fe20 	bl	be4fa <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bb8ba:	4923      	ldr	r1, [pc, #140]	; (bb948 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bb8bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8c0:	f002 fe19 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bb8c4:	2d00      	cmp	r5, #0
   bb8c6:	d035      	beq.n	bb934 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bb8c8:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bb8ca:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bb8ce:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb8d2:	42ae      	cmp	r6, r5
   bb8d4:	bf28      	it	cs
   bb8d6:	462e      	movcs	r6, r5
   bb8d8:	4632      	mov	r2, r6
   bb8da:	f004 fc5c 	bl	c0196 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bb8de:	b2c0      	uxtb	r0, r0
   bb8e0:	4286      	cmp	r6, r0
   bb8e2:	d197      	bne.n	bb814 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bb8e4:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bb8e8:	fa1f f38a 	uxth.w	r3, sl
   bb8ec:	429e      	cmp	r6, r3
   bb8ee:	d91e      	bls.n	bb92e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bb8f0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bb8f4:	6803      	ldr	r3, [r0, #0]
   bb8f6:	695b      	ldr	r3, [r3, #20]
   bb8f8:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bb8fa:	f8cd 9000 	str.w	r9, [sp]
   bb8fe:	b2c1      	uxtb	r1, r0
   bb900:	4643      	mov	r3, r8
   bb902:	463a      	mov	r2, r7
   bb904:	4620      	mov	r0, r4
   bb906:	f7ff fbc1 	bl	bb08c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bb90a:	f10a 0a01 	add.w	sl, sl, #1
   bb90e:	e7eb      	b.n	bb8e8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bb910:	2b00      	cmp	r3, #0
   bb912:	d0d7      	beq.n	bb8c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bb914:	490d      	ldr	r1, [pc, #52]	; (bb94c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bb916:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb91a:	f002 fdd2 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
   bb91e:	4629      	mov	r1, r5
   bb920:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb924:	220a      	movs	r2, #10
   bb926:	f002 fde8 	bl	be4fa <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bb92a:	4909      	ldr	r1, [pc, #36]	; (bb950 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bb92c:	e7c6      	b.n	bb8bc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bb92e:	1bad      	subs	r5, r5, r6
   bb930:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bb932:	e7c7      	b.n	bb8c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bb934:	2001      	movs	r0, #1
   bb936:	e76e      	b.n	bb816 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bb938:	000c4434 	.word	0x000c4434
   bb93c:	000c4468 	.word	0x000c4468
   bb940:	000c449d 	.word	0x000c449d
   bb944:	000c44c5 	.word	0x000c44c5
   bb948:	000c44e5 	.word	0x000c44e5
   bb94c:	000c44f5 	.word	0x000c44f5
   bb950:	000c450d 	.word	0x000c450d

000bb954 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bb954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb956:	4604      	mov	r4, r0
   bb958:	460d      	mov	r5, r1
   bb95a:	4616      	mov	r6, r2
   bb95c:	461f      	mov	r7, r3
  while (_serialPort->available())
   bb95e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bb962:	6803      	ldr	r3, [r0, #0]
   bb964:	691b      	ldr	r3, [r3, #16]
   bb966:	4798      	blx	r3
   bb968:	b160      	cbz	r0, bb984 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bb96a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bb96e:	6803      	ldr	r3, [r0, #0]
   bb970:	695b      	ldr	r3, [r3, #20]
   bb972:	4798      	blx	r3
   bb974:	9700      	str	r7, [sp, #0]
   bb976:	b2c1      	uxtb	r1, r0
   bb978:	4633      	mov	r3, r6
   bb97a:	462a      	mov	r2, r5
   bb97c:	4620      	mov	r0, r4
   bb97e:	f7ff fb85 	bl	bb08c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bb982:	e7ec      	b.n	bb95e <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bb984:	2001      	movs	r0, #1
   bb986:	b003      	add	sp, #12
   bb988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb98c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bb98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb990:	4604      	mov	r4, r0
   bb992:	b087      	sub	sp, #28
   bb994:	460d      	mov	r5, r1
   bb996:	4616      	mov	r6, r2
   bb998:	461f      	mov	r7, r3
   bb99a:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bb99e:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bb9a2:	fa5f f388 	uxtb.w	r3, r8
   bb9a6:	429a      	cmp	r2, r3
   bb9a8:	d90b      	bls.n	bb9c2 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bb9aa:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bb9ae:	4620      	mov	r0, r4
   bb9b0:	5cd1      	ldrb	r1, [r2, r3]
   bb9b2:	9700      	str	r7, [sp, #0]
   bb9b4:	4633      	mov	r3, r6
   bb9b6:	462a      	mov	r2, r5
   bb9b8:	f7ff fb68 	bl	bb08c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bb9bc:	f108 0801 	add.w	r8, r8, #1
   bb9c0:	e7ed      	b.n	bb99e <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bb9c2:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bb9c6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bb9ca:	4a25      	ldr	r2, [pc, #148]	; (bba60 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bb9cc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bb9d0:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bb9d4:	a902      	add	r1, sp, #8
   bb9d6:	f04f 0901 	mov.w	r9, #1
   bb9da:	9202      	str	r2, [sp, #8]
   bb9dc:	9304      	str	r3, [sp, #16]
   bb9de:	f88d 800c 	strb.w	r8, [sp, #12]
   bb9e2:	f8ad 9014 	strh.w	r9, [sp, #20]
   bb9e6:	f001 f97b 	bl	bcce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bb9ea:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bb9ee:	4641      	mov	r1, r8
   bb9f0:	f004 febb 	bl	c076a <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bb9f4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bb9f8:	21ff      	movs	r1, #255	; 0xff
   bb9fa:	f001 fa11 	bl	bce20 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bb9fe:	28ff      	cmp	r0, #255	; 0xff
   bba00:	d116      	bne.n	bba30 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bba02:	7823      	ldrb	r3, [r4, #0]
   bba04:	b983      	cbnz	r3, bba28 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bba06:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bba0a:	4649      	mov	r1, r9
   bba0c:	f004 fead 	bl	c076a <digitalWrite>
    _spiPort->endTransaction();
   bba10:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bba14:	f001 f94b 	bl	bccae <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bba18:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bba1c:	f003 fe4c 	bl	bf6b8 <delay>
} // end checkUbloxSpi()
   bba20:	2001      	movs	r0, #1
   bba22:	b007      	add	sp, #28
   bba24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bba28:	28ff      	cmp	r0, #255	; 0xff
   bba2a:	d101      	bne.n	bba30 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bba2c:	7823      	ldrb	r3, [r4, #0]
   bba2e:	b163      	cbz	r3, bba4a <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bba30:	4601      	mov	r1, r0
   bba32:	9700      	str	r7, [sp, #0]
   bba34:	4620      	mov	r0, r4
   bba36:	4633      	mov	r3, r6
   bba38:	462a      	mov	r2, r5
   bba3a:	f7ff fb27 	bl	bb08c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bba3e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bba42:	21ff      	movs	r1, #255	; 0xff
   bba44:	f001 f9ec 	bl	bce20 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bba48:	e7ee      	b.n	bba28 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bba4a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bba4e:	2101      	movs	r1, #1
   bba50:	f004 fe8b 	bl	c076a <digitalWrite>
  _spiPort->endTransaction();
   bba54:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bba58:	f001 f929 	bl	bccae <_ZN8SPIClass14endTransactionEv>
  return (true);
   bba5c:	e7e0      	b.n	bba20 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bba5e:	bf00      	nop
   bba60:	000c3b90 	.word	0x000c3b90

000bba64 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bba64:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bba66:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bba6a:	b91c      	cbnz	r4, bba74 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bba70:	f7ff bea8 	b.w	bb7c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bba74:	2c01      	cmp	r4, #1
   bba76:	d103      	bne.n	bba80 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bba78:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bba7c:	f7ff bf6a 	b.w	bb954 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bba80:	2c02      	cmp	r4, #2
   bba82:	d103      	bne.n	bba8c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bba84:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bba88:	f7ff bf80 	b.w	bb98c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bba8c:	2000      	movs	r0, #0
   bba8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   bba92:	4770      	bx	lr

000bba94 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bba98:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bba9a:	2102      	movs	r1, #2
   bba9c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bba9e:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbaa2:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbaa6:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bbaaa:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbaac:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbab0:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbab4:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bbab8:	4604      	mov	r4, r0
   bbaba:	4617      	mov	r7, r2
   bbabc:	4698      	mov	r8, r3
   bbabe:	f000 fc8d 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bbac2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bbac6:	4606      	mov	r6, r0
   bbac8:	4481      	add	r9, r0
   bbaca:	f000 fc87 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbace:	4581      	cmp	r9, r0
   bbad0:	f240 80a8 	bls.w	bbc24 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bbad4:	4643      	mov	r3, r8
   bbad6:	463a      	mov	r2, r7
   bbad8:	4629      	mov	r1, r5
   bbada:	4620      	mov	r0, r4
   bbadc:	f7ff ffc2 	bl	bba64 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bbae0:	2800      	cmp	r0, #0
   bbae2:	f000 809b 	beq.w	bbc1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bbae6:	7beb      	ldrb	r3, [r5, #15]
   bbae8:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bbaec:	2b01      	cmp	r3, #1
   bbaee:	d125      	bne.n	bbb3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bbaf0:	2901      	cmp	r1, #1
   bbaf2:	f040 80ec 	bne.w	bbcce <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bbaf6:	7bab      	ldrb	r3, [r5, #14]
   bbaf8:	2b01      	cmp	r3, #1
   bbafa:	782b      	ldrb	r3, [r5, #0]
   bbafc:	d13b      	bne.n	bbb76 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bbafe:	42bb      	cmp	r3, r7
   bbb00:	d13e      	bne.n	bbb80 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bbb02:	786a      	ldrb	r2, [r5, #1]
   bbb04:	4542      	cmp	r2, r8
   bbb06:	d136      	bne.n	bbb76 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bbb08:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb0c:	b913      	cbnz	r3, bbb14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bbb0e:	200b      	movs	r0, #11
}
   bbb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bbb14:	4978      	ldr	r1, [pc, #480]	; (bbcf8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bbb16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb1a:	f002 fcd2 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbb1e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbb22:	f000 fc5b 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbb26:	220a      	movs	r2, #10
   bbb28:	1b81      	subs	r1, r0, r6
   bbb2a:	4628      	mov	r0, r5
   bbb2c:	f7fb fc9b 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbb30:	4972      	ldr	r1, [pc, #456]	; (bbcfc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bbb32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb36:	f002 fcde 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbb3a:	e7e8      	b.n	bbb0e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bbb3c:	2b02      	cmp	r3, #2
   bbb3e:	d137      	bne.n	bbbb0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bbb40:	2901      	cmp	r1, #1
   bbb42:	f040 80aa 	bne.w	bbc9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bbb46:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb4a:	b193      	cbz	r3, bbb72 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bbb4c:	496c      	ldr	r1, [pc, #432]	; (bbd00 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bbb4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb52:	f002 fcb6 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbb56:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbb5a:	f000 fc3f 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbb5e:	220a      	movs	r2, #10
   bbb60:	1b81      	subs	r1, r0, r6
   bbb62:	4628      	mov	r0, r5
   bbb64:	f7fb fc7f 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbb68:	4964      	ldr	r1, [pc, #400]	; (bbcfc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bbb6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb6e:	f002 fcc2 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bbb72:	200a      	movs	r0, #10
   bbb74:	e7cc      	b.n	bbb10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bbb76:	42bb      	cmp	r3, r7
   bbb78:	d102      	bne.n	bbb80 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bbb7a:	786b      	ldrb	r3, [r5, #1]
   bbb7c:	4543      	cmp	r3, r8
   bbb7e:	d019      	beq.n	bbbb4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bbb80:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb84:	b193      	cbz	r3, bbbac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bbb86:	495f      	ldr	r1, [pc, #380]	; (bbd04 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bbb88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb8c:	f002 fc99 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbb90:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbb94:	f000 fc22 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbb98:	220a      	movs	r2, #10
   bbb9a:	1b81      	subs	r1, r0, r6
   bbb9c:	4628      	mov	r0, r5
   bbb9e:	f7fb fc62 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbba2:	4956      	ldr	r1, [pc, #344]	; (bbcfc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bbba4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbba8:	f002 fca5 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bbbac:	200d      	movs	r0, #13
   bbbae:	e7af      	b.n	bbb10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bbbb0:	2901      	cmp	r1, #1
   bbbb2:	d172      	bne.n	bbc9a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bbbb4:	89eb      	ldrh	r3, [r5, #14]
   bbbb6:	bb8b      	cbnz	r3, bbc1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bbbb8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbbc:	b193      	cbz	r3, bbbe4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bbbbe:	4952      	ldr	r1, [pc, #328]	; (bbd08 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bbbc0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbc4:	f002 fc7d 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbbc8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbbcc:	f000 fc06 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbbd0:	220a      	movs	r2, #10
   bbbd2:	1b81      	subs	r1, r0, r6
   bbbd4:	4628      	mov	r0, r5
   bbbd6:	f7fb fc46 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbbda:	4948      	ldr	r1, [pc, #288]	; (bbcfc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bbbdc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbe0:	f002 fc89 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bbbe4:	2002      	movs	r0, #2
   bbbe6:	e793      	b.n	bbb10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bbbe8:	430b      	orrs	r3, r1
   bbbea:	d117      	bne.n	bbc1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bbbec:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbf0:	b193      	cbz	r3, bbc18 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bbbf2:	4946      	ldr	r1, [pc, #280]	; (bbd0c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bbbf4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbf8:	f002 fc63 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbbfc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbc00:	f000 fbec 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbc04:	220a      	movs	r2, #10
   bbc06:	1b81      	subs	r1, r0, r6
   bbc08:	4628      	mov	r0, r5
   bbc0a:	f7fb fc2c 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbc0e:	493b      	ldr	r1, [pc, #236]	; (bbcfc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bbc10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc14:	f002 fc6f 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bbc18:	2001      	movs	r0, #1
   bbc1a:	e779      	b.n	bbb10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bbc1c:	2001      	movs	r0, #1
   bbc1e:	f003 fd4b 	bl	bf6b8 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bbc22:	e752      	b.n	bbaca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bbc24:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bbc26:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bbc2a:	2a01      	cmp	r2, #1
   bbc2c:	d11f      	bne.n	bbc6e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bbc2e:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bbc32:	2a02      	cmp	r2, #2
   bbc34:	d11b      	bne.n	bbc6e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bbc36:	7baa      	ldrb	r2, [r5, #14]
   bbc38:	2a01      	cmp	r2, #1
   bbc3a:	d118      	bne.n	bbc6e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bbc3c:	782a      	ldrb	r2, [r5, #0]
   bbc3e:	42ba      	cmp	r2, r7
   bbc40:	d115      	bne.n	bbc6e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bbc42:	786a      	ldrb	r2, [r5, #1]
   bbc44:	4542      	cmp	r2, r8
   bbc46:	d112      	bne.n	bbc6e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bbc48:	2b00      	cmp	r3, #0
   bbc4a:	f43f af60 	beq.w	bbb0e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bbc4e:	4930      	ldr	r1, [pc, #192]	; (bbd10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bbc50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc54:	f002 fc35 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bbc58:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbc5c:	f000 fbbe 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbc60:	220a      	movs	r2, #10
   bbc62:	1b81      	subs	r1, r0, r6
   bbc64:	4628      	mov	r0, r5
   bbc66:	f7fb fbfe 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bbc6a:	492a      	ldr	r1, [pc, #168]	; (bbd14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bbc6c:	e761      	b.n	bbb32 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bbc6e:	b193      	cbz	r3, bbc96 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bbc70:	4929      	ldr	r1, [pc, #164]	; (bbd18 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bbc72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc76:	f002 fc24 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bbc7a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbc7e:	f000 fbad 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbc82:	220a      	movs	r2, #10
   bbc84:	1b81      	subs	r1, r0, r6
   bbc86:	4628      	mov	r0, r5
   bbc88:	f7fb fbed 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bbc8c:	4923      	ldr	r1, [pc, #140]	; (bbd1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bbc8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc92:	f002 fc30 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bbc96:	2003      	movs	r0, #3
   bbc98:	e73a      	b.n	bbb10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bbc9a:	2903      	cmp	r1, #3
   bbc9c:	d1a4      	bne.n	bbbe8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bbc9e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbca2:	b193      	cbz	r3, bbcca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bbca4:	491e      	ldr	r1, [pc, #120]	; (bbd20 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bbca6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcaa:	f002 fc0a 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbcae:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbcb2:	f000 fb93 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbcb6:	220a      	movs	r2, #10
   bbcb8:	1b81      	subs	r1, r0, r6
   bbcba:	4628      	mov	r0, r5
   bbcbc:	f7fb fbd3 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbcc0:	490e      	ldr	r1, [pc, #56]	; (bbcfc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bbcc2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcc6:	f002 fc16 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bbcca:	2004      	movs	r0, #4
   bbccc:	e720      	b.n	bbb10 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bbcce:	2903      	cmp	r1, #3
   bbcd0:	d0e5      	beq.n	bbc9e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bbcd2:	2900      	cmp	r1, #0
   bbcd4:	d1a2      	bne.n	bbc1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bbcd6:	7bab      	ldrb	r3, [r5, #14]
   bbcd8:	2b01      	cmp	r3, #1
   bbcda:	d19f      	bne.n	bbc1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bbcdc:	782b      	ldrb	r3, [r5, #0]
   bbcde:	42bb      	cmp	r3, r7
   bbce0:	d19c      	bne.n	bbc1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bbce2:	786b      	ldrb	r3, [r5, #1]
   bbce4:	4543      	cmp	r3, r8
   bbce6:	d199      	bne.n	bbc1c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bbce8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbcec:	2b00      	cmp	r3, #0
   bbcee:	f43f af0e 	beq.w	bbb0e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bbcf2:	490c      	ldr	r1, [pc, #48]	; (bbd24 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bbcf4:	e70f      	b.n	bbb16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bbcf6:	bf00      	nop
   bbcf8:	000c4514 	.word	0x000c4514
   bbcfc:	000c4551 	.word	0x000c4551
   bbd00:	000c4557 	.word	0x000c4557
   bbd04:	000c4588 	.word	0x000c4588
   bbd08:	000c45ba 	.word	0x000c45ba
   bbd0c:	000c465a 	.word	0x000c465a
   bbd10:	000c469b 	.word	0x000c469b
   bbd14:	000c46ce 	.word	0x000c46ce
   bbd18:	000c46d6 	.word	0x000c46d6
   bbd1c:	000c46f9 	.word	0x000c46f9
   bbd20:	000c45e0 	.word	0x000c45e0
   bbd24:	000c461b 	.word	0x000c461b

000bbd28 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bbd28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbd2c:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bbd2e:	2102      	movs	r1, #2
   bbd30:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbd32:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbd36:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbd3a:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bbd3e:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbd40:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbd44:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bbd48:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bbd4c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bbd50:	4604      	mov	r4, r0
   bbd52:	4617      	mov	r7, r2
   bbd54:	4698      	mov	r8, r3
   bbd56:	f000 fb41 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bbd5a:	f240 1a01 	movw	sl, #257	; 0x101
   bbd5e:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bbd60:	f240 2b01 	movw	fp, #513	; 0x201
   bbd64:	f000 fb3a 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bbd68:	1b80      	subs	r0, r0, r6
   bbd6a:	4548      	cmp	r0, r9
   bbd6c:	d269      	bcs.n	bbe42 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bbd6e:	4643      	mov	r3, r8
   bbd70:	463a      	mov	r2, r7
   bbd72:	4629      	mov	r1, r5
   bbd74:	4620      	mov	r0, r4
   bbd76:	f7ff fe75 	bl	bba64 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bbd7a:	2800      	cmp	r0, #0
   bbd7c:	d05d      	beq.n	bbe3a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bbd7e:	89ea      	ldrh	r2, [r5, #14]
   bbd80:	4552      	cmp	r2, sl
   bbd82:	d11e      	bne.n	bbdc2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bbd84:	782b      	ldrb	r3, [r5, #0]
   bbd86:	42bb      	cmp	r3, r7
   bbd88:	d11b      	bne.n	bbdc2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bbd8a:	786b      	ldrb	r3, [r5, #1]
   bbd8c:	4543      	cmp	r3, r8
   bbd8e:	d118      	bne.n	bbdc2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bbd90:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd94:	b193      	cbz	r3, bbdbc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bbd96:	4937      	ldr	r1, [pc, #220]	; (bbe74 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bbd98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd9c:	f002 fb91 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbda0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbda4:	f000 fb1a 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbda8:	220a      	movs	r2, #10
   bbdaa:	1b81      	subs	r1, r0, r6
   bbdac:	4628      	mov	r0, r5
   bbdae:	f7fb fb5a 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbdb2:	4931      	ldr	r1, [pc, #196]	; (bbe78 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bbdb4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdb8:	f002 fb9d 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bbdbc:	200b      	movs	r0, #11
}
   bbdbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bbdc2:	7beb      	ldrb	r3, [r5, #15]
   bbdc4:	2b01      	cmp	r3, #1
   bbdc6:	d11d      	bne.n	bbe04 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bbdc8:	782b      	ldrb	r3, [r5, #0]
   bbdca:	42bb      	cmp	r3, r7
   bbdcc:	d102      	bne.n	bbdd4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bbdce:	786b      	ldrb	r3, [r5, #1]
   bbdd0:	4543      	cmp	r3, r8
   bbdd2:	d032      	beq.n	bbe3a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bbdd4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbdd8:	b193      	cbz	r3, bbe00 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bbdda:	4928      	ldr	r1, [pc, #160]	; (bbe7c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bbddc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbde0:	f002 fb6f 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbde4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbde8:	f000 faf8 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbdec:	220a      	movs	r2, #10
   bbdee:	1b81      	subs	r1, r0, r6
   bbdf0:	4628      	mov	r0, r5
   bbdf2:	f7fb fb38 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbdf6:	4920      	ldr	r1, [pc, #128]	; (bbe78 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bbdf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdfc:	f002 fb7b 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bbe00:	200d      	movs	r0, #13
   bbe02:	e7dc      	b.n	bbdbe <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bbe04:	455a      	cmp	r2, fp
   bbe06:	d018      	beq.n	bbe3a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bbe08:	b9bb      	cbnz	r3, bbe3a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bbe0a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbe0e:	b193      	cbz	r3, bbe36 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bbe10:	491b      	ldr	r1, [pc, #108]	; (bbe80 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bbe12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe16:	f002 fb54 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bbe1a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbe1e:	f000 fadd 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbe22:	220a      	movs	r2, #10
   bbe24:	1b81      	subs	r1, r0, r6
   bbe26:	4628      	mov	r0, r5
   bbe28:	f7fb fb1d 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bbe2c:	4912      	ldr	r1, [pc, #72]	; (bbe78 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bbe2e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe32:	f002 fb60 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bbe36:	2002      	movs	r0, #2
   bbe38:	e7c1      	b.n	bbdbe <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bbe3a:	2001      	movs	r0, #1
   bbe3c:	f003 fc3c 	bl	bf6b8 <delay>
  while (millis() - startTime < maxTime)
   bbe40:	e790      	b.n	bbd64 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bbe42:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbe46:	b193      	cbz	r3, bbe6e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bbe48:	490e      	ldr	r1, [pc, #56]	; (bbe84 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bbe4a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe4e:	f002 fb38 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bbe52:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bbe56:	f000 fac1 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
   bbe5a:	220a      	movs	r2, #10
   bbe5c:	1b81      	subs	r1, r0, r6
   bbe5e:	4628      	mov	r0, r5
   bbe60:	f7fb fb01 	bl	b7466 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bbe64:	4908      	ldr	r1, [pc, #32]	; (bbe88 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bbe66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe6a:	f002 fb44 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bbe6e:	2003      	movs	r0, #3
   bbe70:	e7a5      	b.n	bbdbe <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bbe72:	bf00      	nop
   bbe74:	000c4700 	.word	0x000c4700
   bbe78:	000c4551 	.word	0x000c4551
   bbe7c:	000c473a 	.word	0x000c473a
   bbe80:	000c476e 	.word	0x000c476e
   bbe84:	000c47a7 	.word	0x000c47a7
   bbe88:	000c47cc 	.word	0x000c47cc

000bbe8c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bbe8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bbe90:	4604      	mov	r4, r0
   bbe92:	4698      	mov	r8, r3
   bbe94:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bbe96:	f7fc fcc9 	bl	b882c <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bbe9a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bbe9e:	460d      	mov	r5, r1
  if (_printDebug == true)
   bbea0:	b14b      	cbz	r3, bbeb6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bbea2:	492a      	ldr	r1, [pc, #168]	; (bbf4c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bbea4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbea8:	f002 fb0b 	bl	be4c2 <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bbeac:	2201      	movs	r2, #1
   bbeae:	4629      	mov	r1, r5
   bbeb0:	4620      	mov	r0, r4
   bbeb2:	f7fc fee9 	bl	b8c88 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bbeb6:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bbeba:	b993      	cbnz	r3, bbee2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bbebc:	463a      	mov	r2, r7
   bbebe:	4629      	mov	r1, r5
   bbec0:	4620      	mov	r0, r4
   bbec2:	f7fc fce1 	bl	b8888 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bbec6:	4606      	mov	r6, r0
   bbec8:	b188      	cbz	r0, bbeee <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bbeca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbece:	b123      	cbz	r3, bbeda <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bbed0:	491f      	ldr	r1, [pc, #124]	; (bbf50 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bbed2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbed6:	f002 fb0e 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bbeda:	4630      	mov	r0, r6
   bbedc:	b002      	add	sp, #8
   bbede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bbee2:	2b01      	cmp	r3, #1
   bbee4:	d11b      	bne.n	bbf1e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bbee6:	4629      	mov	r1, r5
   bbee8:	4620      	mov	r0, r4
   bbeea:	f7fc fd8f 	bl	b8a0c <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bbeee:	b35f      	cbz	r7, bbf48 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bbef0:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bbef2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bbef6:	2a06      	cmp	r2, #6
   bbef8:	d002      	beq.n	bbf00 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bbefa:	f1b8 0f00 	cmp.w	r8, #0
   bbefe:	d015      	beq.n	bbf2c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bbf00:	b123      	cbz	r3, bbf0c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bbf02:	4914      	ldr	r1, [pc, #80]	; (bbf54 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bbf04:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf08:	f002 faf5 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bbf0c:	786b      	ldrb	r3, [r5, #1]
   bbf0e:	782a      	ldrb	r2, [r5, #0]
   bbf10:	9700      	str	r7, [sp, #0]
   bbf12:	4629      	mov	r1, r5
   bbf14:	4620      	mov	r0, r4
   bbf16:	f7ff fdbd 	bl	bba94 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bbf1a:	4606      	mov	r6, r0
   bbf1c:	e7dd      	b.n	bbeda <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bbf1e:	2b02      	cmp	r3, #2
   bbf20:	d1e5      	bne.n	bbeee <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bbf22:	4629      	mov	r1, r5
   bbf24:	4620      	mov	r0, r4
   bbf26:	f7fc fdcb 	bl	b8ac0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bbf2a:	e7e0      	b.n	bbeee <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bbf2c:	b123      	cbz	r3, bbf38 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bbf2e:	490a      	ldr	r1, [pc, #40]	; (bbf58 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bbf30:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf34:	f002 fadf 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bbf38:	786b      	ldrb	r3, [r5, #1]
   bbf3a:	782a      	ldrb	r2, [r5, #0]
   bbf3c:	9700      	str	r7, [sp, #0]
   bbf3e:	4629      	mov	r1, r5
   bbf40:	4620      	mov	r0, r4
   bbf42:	f7ff fef1 	bl	bbd28 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bbf46:	e7e8      	b.n	bbf1a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bbf48:	463e      	mov	r6, r7
   bbf4a:	e7c6      	b.n	bbeda <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bbf4c:	000c47e7 	.word	0x000c47e7
   bbf50:	000c47f2 	.word	0x000c47f2
   bbf54:	000c480a 	.word	0x000c480a
   bbf58:	000c4830 	.word	0x000c4830

000bbf5c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bbf5c:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bbf5e:	4b09      	ldr	r3, [pc, #36]	; (bbf84 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bbf60:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bbf64:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bbf68:	2300      	movs	r3, #0
   bbf6a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bbf6e:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bbf70:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bbf74:	f7ff ff8a 	bl	bbe8c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bbf78:	f1a0 030b 	sub.w	r3, r0, #11
   bbf7c:	4258      	negs	r0, r3
   bbf7e:	4158      	adcs	r0, r3
   bbf80:	bd38      	pop	{r3, r4, r5, pc}
   bbf82:	bf00      	nop
   bbf84:	00010006 	.word	0x00010006

000bbf88 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bbf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbf8a:	4615      	mov	r5, r2
   bbf8c:	461a      	mov	r2, r3
   bbf8e:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bbf90:	9301      	str	r3, [sp, #4]
   bbf92:	f7ff ffe3 	bl	bbf5c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bbf96:	b190      	cbz	r0, bbfbe <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bbf98:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bbf9c:	4b09      	ldr	r3, [pc, #36]	; (bbfc4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bbf9e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bbfa2:	2300      	movs	r3, #0
   bbfa4:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bbfa8:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bbfaa:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bbfac:	4620      	mov	r0, r4
   bbfae:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bbfb2:	f7ff ff6b 	bl	bbe8c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bbfb6:	f1a0 030a 	sub.w	r3, r0, #10
   bbfba:	4258      	negs	r0, r3
   bbfbc:	4158      	adcs	r0, r3
}
   bbfbe:	b003      	add	sp, #12
   bbfc0:	bd30      	pop	{r4, r5, pc}
   bbfc2:	bf00      	nop
   bbfc4:	00140006 	.word	0x00140006

000bbfc8 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bbfc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbfca:	4615      	mov	r5, r2
   bbfcc:	461a      	mov	r2, r3
   bbfce:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bbfd0:	9301      	str	r3, [sp, #4]
   bbfd2:	f7ff ffc3 	bl	bbf5c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bbfd6:	b190      	cbz	r0, bbffe <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bbfd8:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bbfdc:	4b09      	ldr	r3, [pc, #36]	; (bc004 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bbfde:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bbfe2:	2300      	movs	r3, #0
   bbfe4:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bbfe8:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bbfea:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bbfec:	4620      	mov	r0, r4
   bbfee:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bbff2:	f7ff ff4b 	bl	bbe8c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bbff6:	f1a0 030a 	sub.w	r3, r0, #10
   bbffa:	4258      	negs	r0, r3
   bbffc:	4158      	adcs	r0, r3
}
   bbffe:	b003      	add	sp, #12
   bc000:	bd30      	pop	{r4, r5, pc}
   bc002:	bf00      	nop
   bc004:	00140006 	.word	0x00140006

000bc008 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bc008:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bc00a:	460a      	mov	r2, r1
   bc00c:	2100      	movs	r1, #0
   bc00e:	f7ff bfbb 	b.w	bbf88 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bc014 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bc014:	b510      	push	{r4, lr}
   bc016:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bc018:	2074      	movs	r0, #116	; 0x74
   bc01a:	f7f8 f83c 	bl	b4096 <_Znwj>
   bc01e:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bc020:	b960      	cbnz	r0, bc03c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc022:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc026:	b913      	cbnz	r3, bc02e <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bc028:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc02c:	b128      	cbz	r0, bc03a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bc02e:	4908      	ldr	r1, [pc, #32]	; (bc050 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bc030:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc034:	f002 fa5f 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc038:	2000      	movs	r0, #0
}
   bc03a:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc03c:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bc03e:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bc042:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc046:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bc048:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bc04a:	2001      	movs	r0, #1
   bc04c:	e7f5      	b.n	bc03a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bc04e:	bf00      	nop
   bc050:	000c4859 	.word	0x000c4859

000bc054 <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bc054:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc056:	6a03      	ldr	r3, [r0, #32]
{
   bc058:	4604      	mov	r4, r0
   bc05a:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bc05c:	b91b      	cbnz	r3, bc066 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bc05e:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc060:	f7ff ffd8 	bl	bc014 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc064:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc066:	6a20      	ldr	r0, [r4, #32]
   bc068:	b180      	cbz	r0, bc08c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc06a:	7803      	ldrb	r3, [r0, #0]
   bc06c:	f003 0303 	and.w	r3, r3, #3
   bc070:	2b03      	cmp	r3, #3
   bc072:	d10d      	bne.n	bc090 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bc074:	2307      	movs	r3, #7
   bc076:	2201      	movs	r2, #1
   bc078:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc07c:	4620      	mov	r0, r4
   bc07e:	f7ff fcf1 	bl	bba64 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bc082:	6a23      	ldr	r3, [r4, #32]
   bc084:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bc088:	f000 0001 	and.w	r0, r0, #1
}
   bc08c:	b002      	add	sp, #8
   bc08e:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc090:	2b01      	cmp	r3, #1
   bc092:	f04f 0300 	mov.w	r3, #0
   bc096:	d011      	beq.n	bc0bc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bc098:	f240 7101 	movw	r1, #1793	; 0x701
   bc09c:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bc0a0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bc0a4:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc0a8:	4620      	mov	r0, r4
   bc0aa:	f7ff feef 	bl	bbe8c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc0ae:	280b      	cmp	r0, #11
   bc0b0:	d006      	beq.n	bc0c0 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc0b2:	f1a0 030d 	sub.w	r3, r0, #13
   bc0b6:	4258      	negs	r0, r3
   bc0b8:	4158      	adcs	r0, r3
   bc0ba:	e7e7      	b.n	bc08c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bc0bc:	4618      	mov	r0, r3
   bc0be:	e7e5      	b.n	bc08c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bc0c0:	2001      	movs	r0, #1
   bc0c2:	e7e3      	b.n	bc08c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bc0c4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bc0c4:	b510      	push	{r4, lr}
   bc0c6:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bc0c8:	2018      	movs	r0, #24
   bc0ca:	f7f7 ffe4 	bl	b4096 <_Znwj>
   bc0ce:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bc0d0:	b960      	cbnz	r0, bc0ec <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc0d2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0d6:	b913      	cbnz	r3, bc0de <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bc0d8:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc0dc:	b128      	cbz	r0, bc0ea <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bc0de:	4905      	ldr	r1, [pc, #20]	; (bc0f4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bc0e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0e4:	f002 fa07 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc0e8:	2000      	movs	r0, #0
}
   bc0ea:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bc0ec:	2300      	movs	r3, #0
   bc0ee:	7503      	strb	r3, [r0, #20]
  return (true);
   bc0f0:	2001      	movs	r0, #1
   bc0f2:	e7fa      	b.n	bc0ea <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bc0f4:	000c4880 	.word	0x000c4880

000bc0f8 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bc0f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bc0fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bc0fc:	4605      	mov	r5, r0
   bc0fe:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bc100:	b18b      	cbz	r3, bc126 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bc102:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc106:	4b13      	ldr	r3, [pc, #76]	; (bc154 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bc108:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc10c:	2300      	movs	r3, #0
   bc10e:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc112:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bc114:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc116:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bc11a:	f7ff feb7 	bl	bbe8c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc11e:	280b      	cmp	r0, #11
   bc120:	d10b      	bne.n	bc13a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bc122:	2401      	movs	r4, #1
   bc124:	e00d      	b.n	bc142 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bc126:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bc128:	f7ff ffcc 	bl	bc0c4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bc12c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bc12e:	9a01      	ldr	r2, [sp, #4]
   bc130:	2c00      	cmp	r4, #0
   bc132:	d1e6      	bne.n	bc102 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bc134:	4620      	mov	r0, r4
   bc136:	b002      	add	sp, #8
   bc138:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc13a:	f1a0 030d 	sub.w	r3, r0, #13
   bc13e:	425c      	negs	r4, r3
   bc140:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bc142:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bc144:	b110      	cbz	r0, bc14c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bc146:	2118      	movs	r1, #24
   bc148:	f7f7 ffab 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bc14c:	2300      	movs	r3, #0
   bc14e:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bc150:	e7f0      	b.n	bc134 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bc152:	bf00      	nop
   bc154:	00010006 	.word	0x00010006

000bc158 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bc158:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bc15a:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bc15e:	4604      	mov	r4, r0
   bc160:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bc162:	b145      	cbz	r5, bc176 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bc164:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bc168:	b9b1      	cbnz	r1, bc198 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc16a:	4620      	mov	r0, r4
}
   bc16c:	b003      	add	sp, #12
   bc16e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc172:	f7ff bfc1 	b.w	bc0f8 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bc176:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bc178:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bc17c:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bc180:	f004 f80c 	bl	c019c <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bc184:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc188:	f004 f813 	bl	c01b2 <_ZN7TwoWire15endTransmissionEv>
   bc18c:	9a01      	ldr	r2, [sp, #4]
   bc18e:	2800      	cmp	r0, #0
   bc190:	d0e8      	beq.n	bc164 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bc192:	4628      	mov	r0, r5
   bc194:	b003      	add	sp, #12
   bc196:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc198:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc19a:	bf18      	it	ne
   bc19c:	2104      	movne	r1, #4
   bc19e:	e7e4      	b.n	bc16a <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bc1a0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bc1a0:	b570      	push	{r4, r5, r6, lr}
   bc1a2:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bc1a4:	2300      	movs	r3, #0
   bc1a6:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bc1aa:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bc1ae:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bc1b2:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bc1b6:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bc1ba:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bc1bc:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bc1c0:	b91b      	cbnz	r3, bc1ca <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bc1c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   bc1c6:	f7fb f9ed 	bl	b75a4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bc1ca:	4620      	mov	r0, r4
   bc1cc:	f7fc fe04 	bl	b8dd8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bc1d0:	4631      	mov	r1, r6
   bc1d2:	4620      	mov	r0, r4
   bc1d4:	f7ff ffc0 	bl	bc158 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc1d8:	b110      	cbz	r0, bc1e0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bc1da:	2501      	movs	r5, #1
}
   bc1dc:	4628      	mov	r0, r5
   bc1de:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc1e0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc1e4:	b913      	cbnz	r3, bc1ec <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bc1e6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc1ea:	b123      	cbz	r3, bc1f6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bc1ec:	4917      	ldr	r1, [pc, #92]	; (bc24c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bc1ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1f2:	f002 f980 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc1f6:	4631      	mov	r1, r6
   bc1f8:	4620      	mov	r0, r4
   bc1fa:	f7ff ffad 	bl	bc158 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc1fe:	2800      	cmp	r0, #0
   bc200:	d1eb      	bne.n	bc1da <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc202:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc206:	b913      	cbnz	r3, bc20e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bc208:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc20c:	b123      	cbz	r3, bc218 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bc20e:	4910      	ldr	r1, [pc, #64]	; (bc250 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bc210:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc214:	f002 f96f 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc218:	4631      	mov	r1, r6
   bc21a:	4620      	mov	r0, r4
   bc21c:	f7ff ff9c 	bl	bc158 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bc220:	2800      	cmp	r0, #0
   bc222:	d1da      	bne.n	bc1da <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bc224:	2d00      	cmp	r5, #0
   bc226:	d0d9      	beq.n	bc1dc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc228:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bc22c:	2d00      	cmp	r5, #0
   bc22e:	d0d5      	beq.n	bc1dc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc230:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc234:	b91b      	cbnz	r3, bc23e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bc236:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc23a:	2b00      	cmp	r3, #0
   bc23c:	d0cd      	beq.n	bc1da <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bc23e:	4905      	ldr	r1, [pc, #20]	; (bc254 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bc240:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc244:	f002 f957 	bl	be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc248:	e7c8      	b.n	bc1dc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc24a:	bf00      	nop
   bc24c:	000c48a7 	.word	0x000c48a7
   bc250:	000c48cb 	.word	0x000c48cb
   bc254:	000c48ee 	.word	0x000c48ee

000bc258 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bc258:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc25a:	6a03      	ldr	r3, [r0, #32]
{
   bc25c:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bc25e:	b91b      	cbnz	r3, bc268 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bc260:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc262:	f7ff fed7 	bl	bc014 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc266:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc268:	6a20      	ldr	r0, [r4, #32]
   bc26a:	b1b0      	cbz	r0, bc29a <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bc26c:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bc270:	07db      	lsls	r3, r3, #31
   bc272:	d402      	bmi.n	bc27a <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bc274:	4620      	mov	r0, r4
   bc276:	f7ff feed 	bl	bc054 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bc27a:	6a23      	ldr	r3, [r4, #32]
   bc27c:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bc280:	f36f 0200 	bfc	r2, #0, #1
   bc284:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bc288:	6a23      	ldr	r3, [r4, #32]
   bc28a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bc28e:	f36f 0200 	bfc	r2, #0, #1
   bc292:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bc296:	6a23      	ldr	r3, [r4, #32]
   bc298:	69d8      	ldr	r0, [r3, #28]
}
   bc29a:	b002      	add	sp, #8
   bc29c:	bd10      	pop	{r4, pc}

000bc29e <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bc29e:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc2a0:	6a03      	ldr	r3, [r0, #32]
{
   bc2a2:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bc2a4:	b91b      	cbnz	r3, bc2ae <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bc2a6:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc2a8:	f7ff feb4 	bl	bc014 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc2ac:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc2ae:	6a20      	ldr	r0, [r4, #32]
   bc2b0:	b1b0      	cbz	r0, bc2e0 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bc2b2:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bc2b6:	079b      	lsls	r3, r3, #30
   bc2b8:	d402      	bmi.n	bc2c0 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bc2ba:	4620      	mov	r0, r4
   bc2bc:	f7ff feca 	bl	bc054 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bc2c0:	6a23      	ldr	r3, [r4, #32]
   bc2c2:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bc2c6:	f36f 0241 	bfc	r2, #1, #1
   bc2ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bc2ce:	6a23      	ldr	r3, [r4, #32]
   bc2d0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bc2d4:	f36f 0200 	bfc	r2, #0, #1
   bc2d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bc2dc:	6a23      	ldr	r3, [r4, #32]
   bc2de:	6a18      	ldr	r0, [r3, #32]
}
   bc2e0:	b002      	add	sp, #8
   bc2e2:	bd10      	pop	{r4, pc}

000bc2e4 <_ZN14SFE_UBLOX_GNSS10getHeadingEt>:
{
   bc2e4:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc2e6:	6a03      	ldr	r3, [r0, #32]
{
   bc2e8:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bc2ea:	b91b      	cbnz	r3, bc2f4 <_ZN14SFE_UBLOX_GNSS10getHeadingEt+0x10>
   bc2ec:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc2ee:	f7ff fe91 	bl	bc014 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc2f2:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc2f4:	6a20      	ldr	r0, [r4, #32]
   bc2f6:	b1b0      	cbz	r0, bc326 <_ZN14SFE_UBLOX_GNSS10getHeadingEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried2.bits.headMot == false)
   bc2f8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   bc2fc:	075b      	lsls	r3, r3, #29
   bc2fe:	d402      	bmi.n	bc306 <_ZN14SFE_UBLOX_GNSS10getHeadingEt+0x22>
    getPVT(maxWait);
   bc300:	4620      	mov	r0, r4
   bc302:	f7ff fea7 	bl	bc054 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried2.bits.headMot = false; // Since we are about to give this to user, mark this data as stale
   bc306:	6a23      	ldr	r3, [r4, #32]
   bc308:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   bc30c:	f36f 0282 	bfc	r2, #2, #1
   bc310:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bc314:	6a23      	ldr	r3, [r4, #32]
   bc316:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bc31a:	f36f 0200 	bfc	r2, #0, #1
   bc31e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.headMot);
   bc322:	6a23      	ldr	r3, [r4, #32]
   bc324:	6c58      	ldr	r0, [r3, #68]	; 0x44
}
   bc326:	b002      	add	sp, #8
   bc328:	bd10      	pop	{r4, pc}
	...

000bc32c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bc32c:	b508      	push	{r3, lr}
   bc32e:	4b02      	ldr	r3, [pc, #8]	; (bc338 <netdb_freeaddrinfo+0xc>)
   bc330:	681b      	ldr	r3, [r3, #0]
   bc332:	689b      	ldr	r3, [r3, #8]
   bc334:	9301      	str	r3, [sp, #4]
   bc336:	bd08      	pop	{r3, pc}
   bc338:	00030268 	.word	0x00030268

000bc33c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bc33c:	b508      	push	{r3, lr}
   bc33e:	4b02      	ldr	r3, [pc, #8]	; (bc348 <netdb_getaddrinfo+0xc>)
   bc340:	681b      	ldr	r3, [r3, #0]
   bc342:	68db      	ldr	r3, [r3, #12]
   bc344:	9301      	str	r3, [sp, #4]
   bc346:	bd08      	pop	{r3, pc}
   bc348:	00030268 	.word	0x00030268

000bc34c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bc34c:	b508      	push	{r3, lr}
   bc34e:	4b02      	ldr	r3, [pc, #8]	; (bc358 <HAL_Validate_Pin_Function+0xc>)
   bc350:	681b      	ldr	r3, [r3, #0]
   bc352:	685b      	ldr	r3, [r3, #4]
   bc354:	9301      	str	r3, [sp, #4]
   bc356:	bd08      	pop	{r3, pc}
   bc358:	0003022c 	.word	0x0003022c

000bc35c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bc35c:	b508      	push	{r3, lr}
   bc35e:	4b02      	ldr	r3, [pc, #8]	; (bc368 <HAL_Pin_Mode+0xc>)
   bc360:	681b      	ldr	r3, [r3, #0]
   bc362:	689b      	ldr	r3, [r3, #8]
   bc364:	9301      	str	r3, [sp, #4]
   bc366:	bd08      	pop	{r3, pc}
   bc368:	0003022c 	.word	0x0003022c

000bc36c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bc36c:	b508      	push	{r3, lr}
   bc36e:	4b02      	ldr	r3, [pc, #8]	; (bc378 <HAL_Get_Pin_Mode+0xc>)
   bc370:	681b      	ldr	r3, [r3, #0]
   bc372:	68db      	ldr	r3, [r3, #12]
   bc374:	9301      	str	r3, [sp, #4]
   bc376:	bd08      	pop	{r3, pc}
   bc378:	0003022c 	.word	0x0003022c

000bc37c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bc37c:	b508      	push	{r3, lr}
   bc37e:	4b02      	ldr	r3, [pc, #8]	; (bc388 <HAL_GPIO_Write+0xc>)
   bc380:	681b      	ldr	r3, [r3, #0]
   bc382:	691b      	ldr	r3, [r3, #16]
   bc384:	9301      	str	r3, [sp, #4]
   bc386:	bd08      	pop	{r3, pc}
   bc388:	0003022c 	.word	0x0003022c

000bc38c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bc38c:	b508      	push	{r3, lr}
   bc38e:	4b02      	ldr	r3, [pc, #8]	; (bc398 <HAL_Interrupts_Enable_All+0xc>)
   bc390:	681b      	ldr	r3, [r3, #0]
   bc392:	6a1b      	ldr	r3, [r3, #32]
   bc394:	9301      	str	r3, [sp, #4]
   bc396:	bd08      	pop	{r3, pc}
   bc398:	0003022c 	.word	0x0003022c

000bc39c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bc39c:	b508      	push	{r3, lr}
   bc39e:	4b02      	ldr	r3, [pc, #8]	; (bc3a8 <HAL_Interrupts_Disable_All+0xc>)
   bc3a0:	681b      	ldr	r3, [r3, #0]
   bc3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc3a4:	9301      	str	r3, [sp, #4]
   bc3a6:	bd08      	pop	{r3, pc}
   bc3a8:	0003022c 	.word	0x0003022c

000bc3ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bc3ac:	b508      	push	{r3, lr}
   bc3ae:	4b02      	ldr	r3, [pc, #8]	; (bc3b8 <HAL_RNG_GetRandomNumber+0xc>)
   bc3b0:	681b      	ldr	r3, [r3, #0]
   bc3b2:	685b      	ldr	r3, [r3, #4]
   bc3b4:	9301      	str	r3, [sp, #4]
   bc3b6:	bd08      	pop	{r3, pc}
   bc3b8:	00030218 	.word	0x00030218

000bc3bc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bc3bc:	b508      	push	{r3, lr}
   bc3be:	4b02      	ldr	r3, [pc, #8]	; (bc3c8 <HAL_Delay_Microseconds+0xc>)
   bc3c0:	681b      	ldr	r3, [r3, #0]
   bc3c2:	68db      	ldr	r3, [r3, #12]
   bc3c4:	9301      	str	r3, [sp, #4]
   bc3c6:	bd08      	pop	{r3, pc}
   bc3c8:	00030218 	.word	0x00030218

000bc3cc <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bc3cc:	b508      	push	{r3, lr}
   bc3ce:	4b02      	ldr	r3, [pc, #8]	; (bc3d8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bc3d0:	681b      	ldr	r3, [r3, #0]
   bc3d2:	691b      	ldr	r3, [r3, #16]
   bc3d4:	9301      	str	r3, [sp, #4]
   bc3d6:	bd08      	pop	{r3, pc}
   bc3d8:	00030218 	.word	0x00030218

000bc3dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bc3dc:	b508      	push	{r3, lr}
   bc3de:	4b02      	ldr	r3, [pc, #8]	; (bc3e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bc3e0:	681b      	ldr	r3, [r3, #0]
   bc3e2:	695b      	ldr	r3, [r3, #20]
   bc3e4:	9301      	str	r3, [sp, #4]
   bc3e6:	bd08      	pop	{r3, pc}
   bc3e8:	00030218 	.word	0x00030218

000bc3ec <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bc3ec:	b508      	push	{r3, lr}
   bc3ee:	4b02      	ldr	r3, [pc, #8]	; (bc3f8 <hal_rtc_time_is_valid+0xc>)
   bc3f0:	681b      	ldr	r3, [r3, #0]
   bc3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc3f4:	9301      	str	r3, [sp, #4]
   bc3f6:	bd08      	pop	{r3, pc}
   bc3f8:	00030218 	.word	0x00030218

000bc3fc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bc3fc:	b508      	push	{r3, lr}
   bc3fe:	4b02      	ldr	r3, [pc, #8]	; (bc408 <hal_rtc_get_time+0xc>)
   bc400:	681b      	ldr	r3, [r3, #0]
   bc402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bc404:	9301      	str	r3, [sp, #4]
   bc406:	bd08      	pop	{r3, pc}
   bc408:	00030218 	.word	0x00030218

000bc40c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bc40c:	b508      	push	{r3, lr}
   bc40e:	4b02      	ldr	r3, [pc, #8]	; (bc418 <hal_ble_stack_init+0xc>)
   bc410:	681b      	ldr	r3, [r3, #0]
   bc412:	689b      	ldr	r3, [r3, #8]
   bc414:	9301      	str	r3, [sp, #4]
   bc416:	bd08      	pop	{r3, pc}
   bc418:	00030278 	.word	0x00030278

000bc41c <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bc41c:	b508      	push	{r3, lr}
   bc41e:	4b02      	ldr	r3, [pc, #8]	; (bc428 <hal_ble_gap_set_tx_power+0xc>)
   bc420:	681b      	ldr	r3, [r3, #0]
   bc422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc424:	9301      	str	r3, [sp, #4]
   bc426:	bd08      	pop	{r3, pc}
   bc428:	00030278 	.word	0x00030278

000bc42c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bc42c:	b508      	push	{r3, lr}
   bc42e:	4b02      	ldr	r3, [pc, #8]	; (bc438 <hal_ble_gap_set_advertising_data+0xc>)
   bc430:	681b      	ldr	r3, [r3, #0]
   bc432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc434:	9301      	str	r3, [sp, #4]
   bc436:	bd08      	pop	{r3, pc}
   bc438:	00030278 	.word	0x00030278

000bc43c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bc43c:	b508      	push	{r3, lr}
   bc43e:	4b02      	ldr	r3, [pc, #8]	; (bc448 <hal_ble_gap_set_scan_response_data+0xc>)
   bc440:	681b      	ldr	r3, [r3, #0]
   bc442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc444:	9301      	str	r3, [sp, #4]
   bc446:	bd08      	pop	{r3, pc}
   bc448:	00030278 	.word	0x00030278

000bc44c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bc44c:	b508      	push	{r3, lr}
   bc44e:	4b02      	ldr	r3, [pc, #8]	; (bc458 <hal_ble_gap_start_advertising+0xc>)
   bc450:	681b      	ldr	r3, [r3, #0]
   bc452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bc454:	9301      	str	r3, [sp, #4]
   bc456:	bd08      	pop	{r3, pc}
   bc458:	00030278 	.word	0x00030278

000bc45c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bc45c:	b508      	push	{r3, lr}
   bc45e:	4b03      	ldr	r3, [pc, #12]	; (bc46c <hal_ble_gap_disconnect+0x10>)
   bc460:	681b      	ldr	r3, [r3, #0]
   bc462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bc466:	9301      	str	r3, [sp, #4]
   bc468:	bd08      	pop	{r3, pc}
   bc46a:	0000      	.short	0x0000
   bc46c:	00030278 	.word	0x00030278

000bc470 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bc470:	b508      	push	{r3, lr}
   bc472:	4b03      	ldr	r3, [pc, #12]	; (bc480 <hal_ble_gatt_server_add_service+0x10>)
   bc474:	681b      	ldr	r3, [r3, #0]
   bc476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bc47a:	9301      	str	r3, [sp, #4]
   bc47c:	bd08      	pop	{r3, pc}
   bc47e:	0000      	.short	0x0000
   bc480:	00030278 	.word	0x00030278

000bc484 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bc484:	b508      	push	{r3, lr}
   bc486:	4b03      	ldr	r3, [pc, #12]	; (bc494 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bc488:	681b      	ldr	r3, [r3, #0]
   bc48a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bc48e:	9301      	str	r3, [sp, #4]
   bc490:	bd08      	pop	{r3, pc}
   bc492:	0000      	.short	0x0000
   bc494:	00030278 	.word	0x00030278

000bc498 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bc498:	b508      	push	{r3, lr}
   bc49a:	4b03      	ldr	r3, [pc, #12]	; (bc4a8 <hal_ble_gatt_client_write_with_response+0x10>)
   bc49c:	681b      	ldr	r3, [r3, #0]
   bc49e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bc4a2:	9301      	str	r3, [sp, #4]
   bc4a4:	bd08      	pop	{r3, pc}
   bc4a6:	0000      	.short	0x0000
   bc4a8:	00030278 	.word	0x00030278

000bc4ac <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bc4ac:	b508      	push	{r3, lr}
   bc4ae:	4b03      	ldr	r3, [pc, #12]	; (bc4bc <hal_ble_gatt_client_write_without_response+0x10>)
   bc4b0:	681b      	ldr	r3, [r3, #0]
   bc4b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bc4b6:	9301      	str	r3, [sp, #4]
   bc4b8:	bd08      	pop	{r3, pc}
   bc4ba:	0000      	.short	0x0000
   bc4bc:	00030278 	.word	0x00030278

000bc4c0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bc4c0:	b508      	push	{r3, lr}
   bc4c2:	4b03      	ldr	r3, [pc, #12]	; (bc4d0 <hal_ble_gatt_server_add_characteristic+0x10>)
   bc4c4:	681b      	ldr	r3, [r3, #0]
   bc4c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bc4ca:	9301      	str	r3, [sp, #4]
   bc4cc:	bd08      	pop	{r3, pc}
   bc4ce:	0000      	.short	0x0000
   bc4d0:	00030278 	.word	0x00030278

000bc4d4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bc4d4:	b508      	push	{r3, lr}
   bc4d6:	4b03      	ldr	r3, [pc, #12]	; (bc4e4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bc4d8:	681b      	ldr	r3, [r3, #0]
   bc4da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bc4de:	9301      	str	r3, [sp, #4]
   bc4e0:	bd08      	pop	{r3, pc}
   bc4e2:	0000      	.short	0x0000
   bc4e4:	00030278 	.word	0x00030278

000bc4e8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bc4e8:	b508      	push	{r3, lr}
   bc4ea:	4b03      	ldr	r3, [pc, #12]	; (bc4f8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bc4ec:	681b      	ldr	r3, [r3, #0]
   bc4ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bc4f2:	9301      	str	r3, [sp, #4]
   bc4f4:	bd08      	pop	{r3, pc}
   bc4f6:	0000      	.short	0x0000
   bc4f8:	00030278 	.word	0x00030278

000bc4fc <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bc4fc:	b508      	push	{r3, lr}
   bc4fe:	4b03      	ldr	r3, [pc, #12]	; (bc50c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bc500:	681b      	ldr	r3, [r3, #0]
   bc502:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bc506:	9301      	str	r3, [sp, #4]
   bc508:	bd08      	pop	{r3, pc}
   bc50a:	0000      	.short	0x0000
   bc50c:	00030278 	.word	0x00030278

000bc510 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bc510:	b508      	push	{r3, lr}
   bc512:	4b02      	ldr	r3, [pc, #8]	; (bc51c <os_thread_yield+0xc>)
   bc514:	681b      	ldr	r3, [r3, #0]
   bc516:	68db      	ldr	r3, [r3, #12]
   bc518:	9301      	str	r3, [sp, #4]
   bc51a:	bd08      	pop	{r3, pc}
   bc51c:	00030248 	.word	0x00030248

000bc520 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bc520:	b508      	push	{r3, lr}
   bc522:	4b02      	ldr	r3, [pc, #8]	; (bc52c <os_thread_scheduling+0xc>)
   bc524:	681b      	ldr	r3, [r3, #0]
   bc526:	69db      	ldr	r3, [r3, #28]
   bc528:	9301      	str	r3, [sp, #4]
   bc52a:	bd08      	pop	{r3, pc}
   bc52c:	00030248 	.word	0x00030248

000bc530 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bc530:	b508      	push	{r3, lr}
   bc532:	4b02      	ldr	r3, [pc, #8]	; (bc53c <os_timer_create+0xc>)
   bc534:	681b      	ldr	r3, [r3, #0]
   bc536:	6a1b      	ldr	r3, [r3, #32]
   bc538:	9301      	str	r3, [sp, #4]
   bc53a:	bd08      	pop	{r3, pc}
   bc53c:	00030248 	.word	0x00030248

000bc540 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bc540:	b508      	push	{r3, lr}
   bc542:	4b02      	ldr	r3, [pc, #8]	; (bc54c <os_timer_destroy+0xc>)
   bc544:	681b      	ldr	r3, [r3, #0]
   bc546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc548:	9301      	str	r3, [sp, #4]
   bc54a:	bd08      	pop	{r3, pc}
   bc54c:	00030248 	.word	0x00030248

000bc550 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bc550:	b508      	push	{r3, lr}
   bc552:	4b02      	ldr	r3, [pc, #8]	; (bc55c <os_timer_get_id+0xc>)
   bc554:	681b      	ldr	r3, [r3, #0]
   bc556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc558:	9301      	str	r3, [sp, #4]
   bc55a:	bd08      	pop	{r3, pc}
   bc55c:	00030248 	.word	0x00030248

000bc560 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bc560:	b508      	push	{r3, lr}
   bc562:	4b02      	ldr	r3, [pc, #8]	; (bc56c <os_timer_change+0xc>)
   bc564:	681b      	ldr	r3, [r3, #0]
   bc566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc568:	9301      	str	r3, [sp, #4]
   bc56a:	bd08      	pop	{r3, pc}
   bc56c:	00030248 	.word	0x00030248

000bc570 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bc570:	b508      	push	{r3, lr}
   bc572:	4b02      	ldr	r3, [pc, #8]	; (bc57c <os_mutex_recursive_create+0xc>)
   bc574:	681b      	ldr	r3, [r3, #0]
   bc576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc578:	9301      	str	r3, [sp, #4]
   bc57a:	bd08      	pop	{r3, pc}
   bc57c:	00030248 	.word	0x00030248

000bc580 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bc580:	b508      	push	{r3, lr}
   bc582:	4b02      	ldr	r3, [pc, #8]	; (bc58c <os_mutex_recursive_destroy+0xc>)
   bc584:	681b      	ldr	r3, [r3, #0]
   bc586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bc588:	9301      	str	r3, [sp, #4]
   bc58a:	bd08      	pop	{r3, pc}
   bc58c:	00030248 	.word	0x00030248

000bc590 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bc590:	b508      	push	{r3, lr}
   bc592:	4b02      	ldr	r3, [pc, #8]	; (bc59c <os_mutex_recursive_lock+0xc>)
   bc594:	681b      	ldr	r3, [r3, #0]
   bc596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc598:	9301      	str	r3, [sp, #4]
   bc59a:	bd08      	pop	{r3, pc}
   bc59c:	00030248 	.word	0x00030248

000bc5a0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bc5a0:	b508      	push	{r3, lr}
   bc5a2:	4b02      	ldr	r3, [pc, #8]	; (bc5ac <os_mutex_recursive_unlock+0xc>)
   bc5a4:	681b      	ldr	r3, [r3, #0]
   bc5a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc5a8:	9301      	str	r3, [sp, #4]
   bc5aa:	bd08      	pop	{r3, pc}
   bc5ac:	00030248 	.word	0x00030248

000bc5b0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bc5b0:	b508      	push	{r3, lr}
   bc5b2:	4b02      	ldr	r3, [pc, #8]	; (bc5bc <os_timer_set_id+0xc>)
   bc5b4:	681b      	ldr	r3, [r3, #0]
   bc5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bc5b8:	9301      	str	r3, [sp, #4]
   bc5ba:	bd08      	pop	{r3, pc}
   bc5bc:	00030248 	.word	0x00030248

000bc5c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bc5c0:	b508      	push	{r3, lr}
   bc5c2:	4b02      	ldr	r3, [pc, #8]	; (bc5cc <inet_inet_ntop+0xc>)
   bc5c4:	681b      	ldr	r3, [r3, #0]
   bc5c6:	695b      	ldr	r3, [r3, #20]
   bc5c8:	9301      	str	r3, [sp, #4]
   bc5ca:	bd08      	pop	{r3, pc}
   bc5cc:	00030264 	.word	0x00030264

000bc5d0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bc5d0:	b508      	push	{r3, lr}
   bc5d2:	4b02      	ldr	r3, [pc, #8]	; (bc5dc <hal_usart_end+0xc>)
   bc5d4:	681b      	ldr	r3, [r3, #0]
   bc5d6:	689b      	ldr	r3, [r3, #8]
   bc5d8:	9301      	str	r3, [sp, #4]
   bc5da:	bd08      	pop	{r3, pc}
   bc5dc:	0003023c 	.word	0x0003023c

000bc5e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bc5e0:	b508      	push	{r3, lr}
   bc5e2:	4b02      	ldr	r3, [pc, #8]	; (bc5ec <hal_usart_write+0xc>)
   bc5e4:	681b      	ldr	r3, [r3, #0]
   bc5e6:	68db      	ldr	r3, [r3, #12]
   bc5e8:	9301      	str	r3, [sp, #4]
   bc5ea:	bd08      	pop	{r3, pc}
   bc5ec:	0003023c 	.word	0x0003023c

000bc5f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bc5f0:	b508      	push	{r3, lr}
   bc5f2:	4b02      	ldr	r3, [pc, #8]	; (bc5fc <hal_usart_available+0xc>)
   bc5f4:	681b      	ldr	r3, [r3, #0]
   bc5f6:	691b      	ldr	r3, [r3, #16]
   bc5f8:	9301      	str	r3, [sp, #4]
   bc5fa:	bd08      	pop	{r3, pc}
   bc5fc:	0003023c 	.word	0x0003023c

000bc600 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bc600:	b508      	push	{r3, lr}
   bc602:	4b02      	ldr	r3, [pc, #8]	; (bc60c <hal_usart_read+0xc>)
   bc604:	681b      	ldr	r3, [r3, #0]
   bc606:	695b      	ldr	r3, [r3, #20]
   bc608:	9301      	str	r3, [sp, #4]
   bc60a:	bd08      	pop	{r3, pc}
   bc60c:	0003023c 	.word	0x0003023c

000bc610 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bc610:	b508      	push	{r3, lr}
   bc612:	4b02      	ldr	r3, [pc, #8]	; (bc61c <hal_usart_peek+0xc>)
   bc614:	681b      	ldr	r3, [r3, #0]
   bc616:	699b      	ldr	r3, [r3, #24]
   bc618:	9301      	str	r3, [sp, #4]
   bc61a:	bd08      	pop	{r3, pc}
   bc61c:	0003023c 	.word	0x0003023c

000bc620 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bc620:	b508      	push	{r3, lr}
   bc622:	4b02      	ldr	r3, [pc, #8]	; (bc62c <hal_usart_flush+0xc>)
   bc624:	681b      	ldr	r3, [r3, #0]
   bc626:	69db      	ldr	r3, [r3, #28]
   bc628:	9301      	str	r3, [sp, #4]
   bc62a:	bd08      	pop	{r3, pc}
   bc62c:	0003023c 	.word	0x0003023c

000bc630 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bc630:	b508      	push	{r3, lr}
   bc632:	4b02      	ldr	r3, [pc, #8]	; (bc63c <hal_usart_is_enabled+0xc>)
   bc634:	681b      	ldr	r3, [r3, #0]
   bc636:	6a1b      	ldr	r3, [r3, #32]
   bc638:	9301      	str	r3, [sp, #4]
   bc63a:	bd08      	pop	{r3, pc}
   bc63c:	0003023c 	.word	0x0003023c

000bc640 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bc640:	b508      	push	{r3, lr}
   bc642:	4b02      	ldr	r3, [pc, #8]	; (bc64c <hal_usart_available_data_for_write+0xc>)
   bc644:	681b      	ldr	r3, [r3, #0]
   bc646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc648:	9301      	str	r3, [sp, #4]
   bc64a:	bd08      	pop	{r3, pc}
   bc64c:	0003023c 	.word	0x0003023c

000bc650 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bc650:	b508      	push	{r3, lr}
   bc652:	4b02      	ldr	r3, [pc, #8]	; (bc65c <hal_usart_begin_config+0xc>)
   bc654:	681b      	ldr	r3, [r3, #0]
   bc656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc658:	9301      	str	r3, [sp, #4]
   bc65a:	bd08      	pop	{r3, pc}
   bc65c:	0003023c 	.word	0x0003023c

000bc660 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bc660:	b508      	push	{r3, lr}
   bc662:	4b02      	ldr	r3, [pc, #8]	; (bc66c <hal_usart_init_ex+0xc>)
   bc664:	681b      	ldr	r3, [r3, #0]
   bc666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc668:	9301      	str	r3, [sp, #4]
   bc66a:	bd08      	pop	{r3, pc}
   bc66c:	0003023c 	.word	0x0003023c

000bc670 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bc670:	b508      	push	{r3, lr}
   bc672:	4b02      	ldr	r3, [pc, #8]	; (bc67c <hal_i2c_set_speed+0xc>)
   bc674:	681b      	ldr	r3, [r3, #0]
   bc676:	681b      	ldr	r3, [r3, #0]
   bc678:	9301      	str	r3, [sp, #4]
   bc67a:	bd08      	pop	{r3, pc}
   bc67c:	00030228 	.word	0x00030228

000bc680 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bc680:	b508      	push	{r3, lr}
   bc682:	4b02      	ldr	r3, [pc, #8]	; (bc68c <hal_i2c_begin+0xc>)
   bc684:	681b      	ldr	r3, [r3, #0]
   bc686:	68db      	ldr	r3, [r3, #12]
   bc688:	9301      	str	r3, [sp, #4]
   bc68a:	bd08      	pop	{r3, pc}
   bc68c:	00030228 	.word	0x00030228

000bc690 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bc690:	b508      	push	{r3, lr}
   bc692:	4b02      	ldr	r3, [pc, #8]	; (bc69c <hal_i2c_begin_transmission+0xc>)
   bc694:	681b      	ldr	r3, [r3, #0]
   bc696:	699b      	ldr	r3, [r3, #24]
   bc698:	9301      	str	r3, [sp, #4]
   bc69a:	bd08      	pop	{r3, pc}
   bc69c:	00030228 	.word	0x00030228

000bc6a0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bc6a0:	b508      	push	{r3, lr}
   bc6a2:	4b02      	ldr	r3, [pc, #8]	; (bc6ac <hal_i2c_end_transmission+0xc>)
   bc6a4:	681b      	ldr	r3, [r3, #0]
   bc6a6:	69db      	ldr	r3, [r3, #28]
   bc6a8:	9301      	str	r3, [sp, #4]
   bc6aa:	bd08      	pop	{r3, pc}
   bc6ac:	00030228 	.word	0x00030228

000bc6b0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bc6b0:	b508      	push	{r3, lr}
   bc6b2:	4b02      	ldr	r3, [pc, #8]	; (bc6bc <hal_i2c_write+0xc>)
   bc6b4:	681b      	ldr	r3, [r3, #0]
   bc6b6:	6a1b      	ldr	r3, [r3, #32]
   bc6b8:	9301      	str	r3, [sp, #4]
   bc6ba:	bd08      	pop	{r3, pc}
   bc6bc:	00030228 	.word	0x00030228

000bc6c0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bc6c0:	b508      	push	{r3, lr}
   bc6c2:	4b02      	ldr	r3, [pc, #8]	; (bc6cc <hal_i2c_available+0xc>)
   bc6c4:	681b      	ldr	r3, [r3, #0]
   bc6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc6c8:	9301      	str	r3, [sp, #4]
   bc6ca:	bd08      	pop	{r3, pc}
   bc6cc:	00030228 	.word	0x00030228

000bc6d0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bc6d0:	b508      	push	{r3, lr}
   bc6d2:	4b02      	ldr	r3, [pc, #8]	; (bc6dc <hal_i2c_read+0xc>)
   bc6d4:	681b      	ldr	r3, [r3, #0]
   bc6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc6d8:	9301      	str	r3, [sp, #4]
   bc6da:	bd08      	pop	{r3, pc}
   bc6dc:	00030228 	.word	0x00030228

000bc6e0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bc6e0:	b508      	push	{r3, lr}
   bc6e2:	4b02      	ldr	r3, [pc, #8]	; (bc6ec <hal_i2c_peek+0xc>)
   bc6e4:	681b      	ldr	r3, [r3, #0]
   bc6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc6e8:	9301      	str	r3, [sp, #4]
   bc6ea:	bd08      	pop	{r3, pc}
   bc6ec:	00030228 	.word	0x00030228

000bc6f0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bc6f0:	b508      	push	{r3, lr}
   bc6f2:	4b02      	ldr	r3, [pc, #8]	; (bc6fc <hal_i2c_flush+0xc>)
   bc6f4:	681b      	ldr	r3, [r3, #0]
   bc6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bc6f8:	9301      	str	r3, [sp, #4]
   bc6fa:	bd08      	pop	{r3, pc}
   bc6fc:	00030228 	.word	0x00030228

000bc700 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bc700:	b508      	push	{r3, lr}
   bc702:	4b02      	ldr	r3, [pc, #8]	; (bc70c <hal_i2c_is_enabled+0xc>)
   bc704:	681b      	ldr	r3, [r3, #0]
   bc706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc708:	9301      	str	r3, [sp, #4]
   bc70a:	bd08      	pop	{r3, pc}
   bc70c:	00030228 	.word	0x00030228

000bc710 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bc710:	b508      	push	{r3, lr}
   bc712:	4b02      	ldr	r3, [pc, #8]	; (bc71c <hal_i2c_init+0xc>)
   bc714:	681b      	ldr	r3, [r3, #0]
   bc716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc718:	9301      	str	r3, [sp, #4]
   bc71a:	bd08      	pop	{r3, pc}
   bc71c:	00030228 	.word	0x00030228

000bc720 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bc720:	b508      	push	{r3, lr}
   bc722:	4b02      	ldr	r3, [pc, #8]	; (bc72c <hal_i2c_request_ex+0xc>)
   bc724:	681b      	ldr	r3, [r3, #0]
   bc726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc728:	9301      	str	r3, [sp, #4]
   bc72a:	bd08      	pop	{r3, pc}
   bc72c:	00030228 	.word	0x00030228

000bc730 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bc730:	b508      	push	{r3, lr}
   bc732:	4b02      	ldr	r3, [pc, #8]	; (bc73c <hal_spi_begin+0xc>)
   bc734:	681b      	ldr	r3, [r3, #0]
   bc736:	681b      	ldr	r3, [r3, #0]
   bc738:	9301      	str	r3, [sp, #4]
   bc73a:	bd08      	pop	{r3, pc}
   bc73c:	00030230 	.word	0x00030230

000bc740 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bc740:	b508      	push	{r3, lr}
   bc742:	4b02      	ldr	r3, [pc, #8]	; (bc74c <hal_spi_set_clock_divider+0xc>)
   bc744:	681b      	ldr	r3, [r3, #0]
   bc746:	691b      	ldr	r3, [r3, #16]
   bc748:	9301      	str	r3, [sp, #4]
   bc74a:	bd08      	pop	{r3, pc}
   bc74c:	00030230 	.word	0x00030230

000bc750 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bc750:	b508      	push	{r3, lr}
   bc752:	4b02      	ldr	r3, [pc, #8]	; (bc75c <hal_spi_transfer+0xc>)
   bc754:	681b      	ldr	r3, [r3, #0]
   bc756:	695b      	ldr	r3, [r3, #20]
   bc758:	9301      	str	r3, [sp, #4]
   bc75a:	bd08      	pop	{r3, pc}
   bc75c:	00030230 	.word	0x00030230

000bc760 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bc760:	b508      	push	{r3, lr}
   bc762:	4b02      	ldr	r3, [pc, #8]	; (bc76c <hal_spi_init+0xc>)
   bc764:	681b      	ldr	r3, [r3, #0]
   bc766:	69db      	ldr	r3, [r3, #28]
   bc768:	9301      	str	r3, [sp, #4]
   bc76a:	bd08      	pop	{r3, pc}
   bc76c:	00030230 	.word	0x00030230

000bc770 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bc770:	b508      	push	{r3, lr}
   bc772:	4b02      	ldr	r3, [pc, #8]	; (bc77c <hal_spi_is_enabled+0xc>)
   bc774:	681b      	ldr	r3, [r3, #0]
   bc776:	6a1b      	ldr	r3, [r3, #32]
   bc778:	9301      	str	r3, [sp, #4]
   bc77a:	bd08      	pop	{r3, pc}
   bc77c:	00030230 	.word	0x00030230

000bc780 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bc780:	b508      	push	{r3, lr}
   bc782:	4b02      	ldr	r3, [pc, #8]	; (bc78c <hal_spi_info+0xc>)
   bc784:	681b      	ldr	r3, [r3, #0]
   bc786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bc788:	9301      	str	r3, [sp, #4]
   bc78a:	bd08      	pop	{r3, pc}
   bc78c:	00030230 	.word	0x00030230

000bc790 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bc790:	b508      	push	{r3, lr}
   bc792:	4b02      	ldr	r3, [pc, #8]	; (bc79c <hal_spi_transfer_dma+0xc>)
   bc794:	681b      	ldr	r3, [r3, #0]
   bc796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bc798:	9301      	str	r3, [sp, #4]
   bc79a:	bd08      	pop	{r3, pc}
   bc79c:	00030230 	.word	0x00030230

000bc7a0 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bc7a0:	b508      	push	{r3, lr}
   bc7a2:	4b02      	ldr	r3, [pc, #8]	; (bc7ac <hal_spi_begin_ext+0xc>)
   bc7a4:	681b      	ldr	r3, [r3, #0]
   bc7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bc7a8:	9301      	str	r3, [sp, #4]
   bc7aa:	bd08      	pop	{r3, pc}
   bc7ac:	00030230 	.word	0x00030230

000bc7b0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bc7b0:	b508      	push	{r3, lr}
   bc7b2:	4b02      	ldr	r3, [pc, #8]	; (bc7bc <hal_spi_transfer_dma_status+0xc>)
   bc7b4:	681b      	ldr	r3, [r3, #0]
   bc7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bc7b8:	9301      	str	r3, [sp, #4]
   bc7ba:	bd08      	pop	{r3, pc}
   bc7bc:	00030230 	.word	0x00030230

000bc7c0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bc7c0:	b508      	push	{r3, lr}
   bc7c2:	4b02      	ldr	r3, [pc, #8]	; (bc7cc <hal_spi_set_settings+0xc>)
   bc7c4:	681b      	ldr	r3, [r3, #0]
   bc7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bc7c8:	9301      	str	r3, [sp, #4]
   bc7ca:	bd08      	pop	{r3, pc}
   bc7cc:	00030230 	.word	0x00030230

000bc7d0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bc7d0:	b508      	push	{r3, lr}
   bc7d2:	4b02      	ldr	r3, [pc, #8]	; (bc7dc <hal_spi_acquire+0xc>)
   bc7d4:	681b      	ldr	r3, [r3, #0]
   bc7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bc7d8:	9301      	str	r3, [sp, #4]
   bc7da:	bd08      	pop	{r3, pc}
   bc7dc:	00030230 	.word	0x00030230

000bc7e0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bc7e0:	b508      	push	{r3, lr}
   bc7e2:	4b02      	ldr	r3, [pc, #8]	; (bc7ec <hal_spi_release+0xc>)
   bc7e4:	681b      	ldr	r3, [r3, #0]
   bc7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bc7e8:	9301      	str	r3, [sp, #4]
   bc7ea:	bd08      	pop	{r3, pc}
   bc7ec:	00030230 	.word	0x00030230

000bc7f0 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bc7f0:	b508      	push	{r3, lr}
   bc7f2:	4b02      	ldr	r3, [pc, #8]	; (bc7fc <HAL_Servo_Attach+0xc>)
   bc7f4:	681b      	ldr	r3, [r3, #0]
   bc7f6:	691b      	ldr	r3, [r3, #16]
   bc7f8:	9301      	str	r3, [sp, #4]
   bc7fa:	bd08      	pop	{r3, pc}
   bc7fc:	00030224 	.word	0x00030224

000bc800 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bc800:	b508      	push	{r3, lr}
   bc802:	4b02      	ldr	r3, [pc, #8]	; (bc80c <HAL_Servo_Detach+0xc>)
   bc804:	681b      	ldr	r3, [r3, #0]
   bc806:	695b      	ldr	r3, [r3, #20]
   bc808:	9301      	str	r3, [sp, #4]
   bc80a:	bd08      	pop	{r3, pc}
   bc80c:	00030224 	.word	0x00030224

000bc810 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bc810:	b508      	push	{r3, lr}
   bc812:	4b02      	ldr	r3, [pc, #8]	; (bc81c <HAL_Servo_Write_Pulse_Width+0xc>)
   bc814:	681b      	ldr	r3, [r3, #0]
   bc816:	699b      	ldr	r3, [r3, #24]
   bc818:	9301      	str	r3, [sp, #4]
   bc81a:	bd08      	pop	{r3, pc}
   bc81c:	00030224 	.word	0x00030224

000bc820 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bc820:	b508      	push	{r3, lr}
   bc822:	4b02      	ldr	r3, [pc, #8]	; (bc82c <HAL_USB_USART_Init+0xc>)
   bc824:	681b      	ldr	r3, [r3, #0]
   bc826:	681b      	ldr	r3, [r3, #0]
   bc828:	9301      	str	r3, [sp, #4]
   bc82a:	bd08      	pop	{r3, pc}
   bc82c:	0003024c 	.word	0x0003024c

000bc830 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bc830:	b508      	push	{r3, lr}
   bc832:	4b02      	ldr	r3, [pc, #8]	; (bc83c <HAL_USB_USART_Begin+0xc>)
   bc834:	681b      	ldr	r3, [r3, #0]
   bc836:	685b      	ldr	r3, [r3, #4]
   bc838:	9301      	str	r3, [sp, #4]
   bc83a:	bd08      	pop	{r3, pc}
   bc83c:	0003024c 	.word	0x0003024c

000bc840 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bc840:	b508      	push	{r3, lr}
   bc842:	4b02      	ldr	r3, [pc, #8]	; (bc84c <HAL_USB_USART_End+0xc>)
   bc844:	681b      	ldr	r3, [r3, #0]
   bc846:	689b      	ldr	r3, [r3, #8]
   bc848:	9301      	str	r3, [sp, #4]
   bc84a:	bd08      	pop	{r3, pc}
   bc84c:	0003024c 	.word	0x0003024c

000bc850 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bc850:	b508      	push	{r3, lr}
   bc852:	4b02      	ldr	r3, [pc, #8]	; (bc85c <HAL_USB_USART_Available_Data+0xc>)
   bc854:	681b      	ldr	r3, [r3, #0]
   bc856:	691b      	ldr	r3, [r3, #16]
   bc858:	9301      	str	r3, [sp, #4]
   bc85a:	bd08      	pop	{r3, pc}
   bc85c:	0003024c 	.word	0x0003024c

000bc860 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bc860:	b508      	push	{r3, lr}
   bc862:	4b02      	ldr	r3, [pc, #8]	; (bc86c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bc864:	681b      	ldr	r3, [r3, #0]
   bc866:	695b      	ldr	r3, [r3, #20]
   bc868:	9301      	str	r3, [sp, #4]
   bc86a:	bd08      	pop	{r3, pc}
   bc86c:	0003024c 	.word	0x0003024c

000bc870 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc870:	b508      	push	{r3, lr}
   bc872:	4b02      	ldr	r3, [pc, #8]	; (bc87c <HAL_USB_USART_Receive_Data+0xc>)
   bc874:	681b      	ldr	r3, [r3, #0]
   bc876:	699b      	ldr	r3, [r3, #24]
   bc878:	9301      	str	r3, [sp, #4]
   bc87a:	bd08      	pop	{r3, pc}
   bc87c:	0003024c 	.word	0x0003024c

000bc880 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bc880:	b508      	push	{r3, lr}
   bc882:	4b02      	ldr	r3, [pc, #8]	; (bc88c <HAL_USB_USART_Send_Data+0xc>)
   bc884:	681b      	ldr	r3, [r3, #0]
   bc886:	69db      	ldr	r3, [r3, #28]
   bc888:	9301      	str	r3, [sp, #4]
   bc88a:	bd08      	pop	{r3, pc}
   bc88c:	0003024c 	.word	0x0003024c

000bc890 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bc890:	b508      	push	{r3, lr}
   bc892:	4b02      	ldr	r3, [pc, #8]	; (bc89c <HAL_USB_USART_Flush_Data+0xc>)
   bc894:	681b      	ldr	r3, [r3, #0]
   bc896:	6a1b      	ldr	r3, [r3, #32]
   bc898:	9301      	str	r3, [sp, #4]
   bc89a:	bd08      	pop	{r3, pc}
   bc89c:	0003024c 	.word	0x0003024c

000bc8a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bc8a0:	b508      	push	{r3, lr}
   bc8a2:	4b02      	ldr	r3, [pc, #8]	; (bc8ac <panic_+0xc>)
   bc8a4:	681b      	ldr	r3, [r3, #0]
   bc8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bc8a8:	9301      	str	r3, [sp, #4]
   bc8aa:	bd08      	pop	{r3, pc}
   bc8ac:	00030260 	.word	0x00030260

000bc8b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bc8b0:	b508      	push	{r3, lr}
   bc8b2:	4b02      	ldr	r3, [pc, #8]	; (bc8bc <log_message+0xc>)
   bc8b4:	681b      	ldr	r3, [r3, #0]
   bc8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bc8b8:	9301      	str	r3, [sp, #4]
   bc8ba:	bd08      	pop	{r3, pc}
   bc8bc:	00030260 	.word	0x00030260

000bc8c0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bc8c0:	b508      	push	{r3, lr}
   bc8c2:	4b02      	ldr	r3, [pc, #8]	; (bc8cc <log_level_name+0xc>)
   bc8c4:	681b      	ldr	r3, [r3, #0]
   bc8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bc8c8:	9301      	str	r3, [sp, #4]
   bc8ca:	bd08      	pop	{r3, pc}
   bc8cc:	00030260 	.word	0x00030260

000bc8d0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bc8d0:	b508      	push	{r3, lr}
   bc8d2:	4b02      	ldr	r3, [pc, #8]	; (bc8dc <log_set_callbacks+0xc>)
   bc8d4:	681b      	ldr	r3, [r3, #0]
   bc8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bc8d8:	9301      	str	r3, [sp, #4]
   bc8da:	bd08      	pop	{r3, pc}
   bc8dc:	00030260 	.word	0x00030260

000bc8e0 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bc8e0:	b508      	push	{r3, lr}
   bc8e2:	4b03      	ldr	r3, [pc, #12]	; (bc8f0 <led_set_status_active+0x10>)
   bc8e4:	681b      	ldr	r3, [r3, #0]
   bc8e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bc8ea:	9301      	str	r3, [sp, #4]
   bc8ec:	bd08      	pop	{r3, pc}
   bc8ee:	0000      	.short	0x0000
   bc8f0:	00030260 	.word	0x00030260

000bc8f4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bc8f4:	b508      	push	{r3, lr}
   bc8f6:	4b02      	ldr	r3, [pc, #8]	; (bc900 <system_mode+0xc>)
   bc8f8:	681b      	ldr	r3, [r3, #0]
   bc8fa:	681b      	ldr	r3, [r3, #0]
   bc8fc:	9301      	str	r3, [sp, #4]
   bc8fe:	bd08      	pop	{r3, pc}
   bc900:	00030220 	.word	0x00030220

000bc904 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bc904:	b508      	push	{r3, lr}
   bc906:	4b02      	ldr	r3, [pc, #8]	; (bc910 <set_system_mode+0xc>)
   bc908:	681b      	ldr	r3, [r3, #0]
   bc90a:	685b      	ldr	r3, [r3, #4]
   bc90c:	9301      	str	r3, [sp, #4]
   bc90e:	bd08      	pop	{r3, pc}
   bc910:	00030220 	.word	0x00030220

000bc914 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bc914:	b508      	push	{r3, lr}
   bc916:	4b02      	ldr	r3, [pc, #8]	; (bc920 <system_delay_ms+0xc>)
   bc918:	681b      	ldr	r3, [r3, #0]
   bc91a:	695b      	ldr	r3, [r3, #20]
   bc91c:	9301      	str	r3, [sp, #4]
   bc91e:	bd08      	pop	{r3, pc}
   bc920:	00030220 	.word	0x00030220

000bc924 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bc924:	b508      	push	{r3, lr}
   bc926:	4b02      	ldr	r3, [pc, #8]	; (bc930 <application_thread_current+0xc>)
   bc928:	681b      	ldr	r3, [r3, #0]
   bc92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc92c:	9301      	str	r3, [sp, #4]
   bc92e:	bd08      	pop	{r3, pc}
   bc930:	00030220 	.word	0x00030220

000bc934 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bc934:	b508      	push	{r3, lr}
   bc936:	4b02      	ldr	r3, [pc, #8]	; (bc940 <application_thread_invoke+0xc>)
   bc938:	681b      	ldr	r3, [r3, #0]
   bc93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bc93c:	9301      	str	r3, [sp, #4]
   bc93e:	bd08      	pop	{r3, pc}
   bc940:	00030220 	.word	0x00030220

000bc944 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bc944:	b508      	push	{r3, lr}
   bc946:	4b02      	ldr	r3, [pc, #8]	; (bc950 <system_thread_get_state+0xc>)
   bc948:	681b      	ldr	r3, [r3, #0]
   bc94a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bc94c:	9301      	str	r3, [sp, #4]
   bc94e:	bd08      	pop	{r3, pc}
   bc950:	00030220 	.word	0x00030220

000bc954 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bc954:	b508      	push	{r3, lr}
   bc956:	4b02      	ldr	r3, [pc, #8]	; (bc960 <led_pattern_period+0xc>)
   bc958:	681b      	ldr	r3, [r3, #0]
   bc95a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bc95c:	9301      	str	r3, [sp, #4]
   bc95e:	bd08      	pop	{r3, pc}
   bc960:	00030220 	.word	0x00030220

000bc964 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bc964:	b508      	push	{r3, lr}
   bc966:	4b03      	ldr	r3, [pc, #12]	; (bc974 <system_ctrl_set_app_request_handler+0x10>)
   bc968:	681b      	ldr	r3, [r3, #0]
   bc96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bc96e:	9301      	str	r3, [sp, #4]
   bc970:	bd08      	pop	{r3, pc}
   bc972:	0000      	.short	0x0000
   bc974:	00030220 	.word	0x00030220

000bc978 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bc978:	b508      	push	{r3, lr}
   bc97a:	4b03      	ldr	r3, [pc, #12]	; (bc988 <system_ctrl_set_result+0x10>)
   bc97c:	681b      	ldr	r3, [r3, #0]
   bc97e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bc982:	9301      	str	r3, [sp, #4]
   bc984:	bd08      	pop	{r3, pc}
   bc986:	0000      	.short	0x0000
   bc988:	00030220 	.word	0x00030220

000bc98c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bc98c:	b508      	push	{r3, lr}
   bc98e:	4b02      	ldr	r3, [pc, #8]	; (bc998 <network_connect+0xc>)
   bc990:	681b      	ldr	r3, [r3, #0]
   bc992:	685b      	ldr	r3, [r3, #4]
   bc994:	9301      	str	r3, [sp, #4]
   bc996:	bd08      	pop	{r3, pc}
   bc998:	00030240 	.word	0x00030240

000bc99c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bc99c:	b508      	push	{r3, lr}
   bc99e:	4b02      	ldr	r3, [pc, #8]	; (bc9a8 <network_connecting+0xc>)
   bc9a0:	681b      	ldr	r3, [r3, #0]
   bc9a2:	689b      	ldr	r3, [r3, #8]
   bc9a4:	9301      	str	r3, [sp, #4]
   bc9a6:	bd08      	pop	{r3, pc}
   bc9a8:	00030240 	.word	0x00030240

000bc9ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bc9ac:	b508      	push	{r3, lr}
   bc9ae:	4b02      	ldr	r3, [pc, #8]	; (bc9b8 <network_disconnect+0xc>)
   bc9b0:	681b      	ldr	r3, [r3, #0]
   bc9b2:	68db      	ldr	r3, [r3, #12]
   bc9b4:	9301      	str	r3, [sp, #4]
   bc9b6:	bd08      	pop	{r3, pc}
   bc9b8:	00030240 	.word	0x00030240

000bc9bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bc9bc:	b508      	push	{r3, lr}
   bc9be:	4b02      	ldr	r3, [pc, #8]	; (bc9c8 <network_ready+0xc>)
   bc9c0:	681b      	ldr	r3, [r3, #0]
   bc9c2:	691b      	ldr	r3, [r3, #16]
   bc9c4:	9301      	str	r3, [sp, #4]
   bc9c6:	bd08      	pop	{r3, pc}
   bc9c8:	00030240 	.word	0x00030240

000bc9cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bc9cc:	b508      	push	{r3, lr}
   bc9ce:	4b02      	ldr	r3, [pc, #8]	; (bc9d8 <network_on+0xc>)
   bc9d0:	681b      	ldr	r3, [r3, #0]
   bc9d2:	695b      	ldr	r3, [r3, #20]
   bc9d4:	9301      	str	r3, [sp, #4]
   bc9d6:	bd08      	pop	{r3, pc}
   bc9d8:	00030240 	.word	0x00030240

000bc9dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bc9dc:	b508      	push	{r3, lr}
   bc9de:	4b02      	ldr	r3, [pc, #8]	; (bc9e8 <network_off+0xc>)
   bc9e0:	681b      	ldr	r3, [r3, #0]
   bc9e2:	699b      	ldr	r3, [r3, #24]
   bc9e4:	9301      	str	r3, [sp, #4]
   bc9e6:	bd08      	pop	{r3, pc}
   bc9e8:	00030240 	.word	0x00030240

000bc9ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bc9ec:	b508      	push	{r3, lr}
   bc9ee:	4b02      	ldr	r3, [pc, #8]	; (bc9f8 <network_listen+0xc>)
   bc9f0:	681b      	ldr	r3, [r3, #0]
   bc9f2:	69db      	ldr	r3, [r3, #28]
   bc9f4:	9301      	str	r3, [sp, #4]
   bc9f6:	bd08      	pop	{r3, pc}
   bc9f8:	00030240 	.word	0x00030240

000bc9fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bc9fc:	b508      	push	{r3, lr}
   bc9fe:	4b02      	ldr	r3, [pc, #8]	; (bca08 <network_listening+0xc>)
   bca00:	681b      	ldr	r3, [r3, #0]
   bca02:	6a1b      	ldr	r3, [r3, #32]
   bca04:	9301      	str	r3, [sp, #4]
   bca06:	bd08      	pop	{r3, pc}
   bca08:	00030240 	.word	0x00030240

000bca0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bca0c:	b508      	push	{r3, lr}
   bca0e:	4b02      	ldr	r3, [pc, #8]	; (bca18 <network_set_listen_timeout+0xc>)
   bca10:	681b      	ldr	r3, [r3, #0]
   bca12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bca14:	9301      	str	r3, [sp, #4]
   bca16:	bd08      	pop	{r3, pc}
   bca18:	00030240 	.word	0x00030240

000bca1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bca1c:	b508      	push	{r3, lr}
   bca1e:	4b02      	ldr	r3, [pc, #8]	; (bca28 <network_get_listen_timeout+0xc>)
   bca20:	681b      	ldr	r3, [r3, #0]
   bca22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bca24:	9301      	str	r3, [sp, #4]
   bca26:	bd08      	pop	{r3, pc}
   bca28:	00030240 	.word	0x00030240

000bca2c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bca2c:	b508      	push	{r3, lr}
   bca2e:	4b02      	ldr	r3, [pc, #8]	; (bca38 <network_is_on+0xc>)
   bca30:	681b      	ldr	r3, [r3, #0]
   bca32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bca34:	9301      	str	r3, [sp, #4]
   bca36:	bd08      	pop	{r3, pc}
   bca38:	00030240 	.word	0x00030240

000bca3c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bca3c:	b508      	push	{r3, lr}
   bca3e:	4b02      	ldr	r3, [pc, #8]	; (bca48 <network_is_off+0xc>)
   bca40:	681b      	ldr	r3, [r3, #0]
   bca42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bca44:	9301      	str	r3, [sp, #4]
   bca46:	bd08      	pop	{r3, pc}
   bca48:	00030240 	.word	0x00030240

000bca4c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bca4c:	b508      	push	{r3, lr}
   bca4e:	4b02      	ldr	r3, [pc, #8]	; (bca58 <spark_process+0xc>)
   bca50:	681b      	ldr	r3, [r3, #0]
   bca52:	689b      	ldr	r3, [r3, #8]
   bca54:	9301      	str	r3, [sp, #4]
   bca56:	bd08      	pop	{r3, pc}
   bca58:	00030244 	.word	0x00030244

000bca5c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bca5c:	b508      	push	{r3, lr}
   bca5e:	4b02      	ldr	r3, [pc, #8]	; (bca68 <spark_cloud_flag_connected+0xc>)
   bca60:	681b      	ldr	r3, [r3, #0]
   bca62:	695b      	ldr	r3, [r3, #20]
   bca64:	9301      	str	r3, [sp, #4]
   bca66:	bd08      	pop	{r3, pc}
   bca68:	00030244 	.word	0x00030244

000bca6c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bca6c:	b508      	push	{r3, lr}
   bca6e:	4b02      	ldr	r3, [pc, #8]	; (bca78 <spark_send_event+0xc>)
   bca70:	681b      	ldr	r3, [r3, #0]
   bca72:	6a1b      	ldr	r3, [r3, #32]
   bca74:	9301      	str	r3, [sp, #4]
   bca76:	bd08      	pop	{r3, pc}
   bca78:	00030244 	.word	0x00030244

000bca7c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bca7c:	b508      	push	{r3, lr}
   bca7e:	4b02      	ldr	r3, [pc, #8]	; (bca88 <spark_subscribe+0xc>)
   bca80:	681b      	ldr	r3, [r3, #0]
   bca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bca84:	9301      	str	r3, [sp, #4]
   bca86:	bd08      	pop	{r3, pc}
   bca88:	00030244 	.word	0x00030244

000bca8c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bca8c:	b508      	push	{r3, lr}
   bca8e:	4b02      	ldr	r3, [pc, #8]	; (bca98 <spark_sync_time_pending+0xc>)
   bca90:	681b      	ldr	r3, [r3, #0]
   bca92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bca94:	9301      	str	r3, [sp, #4]
   bca96:	bd08      	pop	{r3, pc}
   bca98:	00030244 	.word	0x00030244

000bca9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bca9c:	b508      	push	{r3, lr}
   bca9e:	4b02      	ldr	r3, [pc, #8]	; (bcaa8 <spark_set_random_seed_from_cloud_handler+0xc>)
   bcaa0:	681b      	ldr	r3, [r3, #0]
   bcaa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcaa4:	9301      	str	r3, [sp, #4]
   bcaa6:	bd08      	pop	{r3, pc}
   bcaa8:	00030244 	.word	0x00030244

000bcaac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bcaac:	b508      	push	{r3, lr}
   bcaae:	4b02      	ldr	r3, [pc, #8]	; (bcab8 <malloc+0xc>)
   bcab0:	681b      	ldr	r3, [r3, #0]
   bcab2:	681b      	ldr	r3, [r3, #0]
   bcab4:	9301      	str	r3, [sp, #4]
   bcab6:	bd08      	pop	{r3, pc}
   bcab8:	0003021c 	.word	0x0003021c

000bcabc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bcabc:	b508      	push	{r3, lr}
   bcabe:	4b02      	ldr	r3, [pc, #8]	; (bcac8 <free+0xc>)
   bcac0:	681b      	ldr	r3, [r3, #0]
   bcac2:	685b      	ldr	r3, [r3, #4]
   bcac4:	9301      	str	r3, [sp, #4]
   bcac6:	bd08      	pop	{r3, pc}
   bcac8:	0003021c 	.word	0x0003021c

000bcacc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bcacc:	b508      	push	{r3, lr}
   bcace:	4b02      	ldr	r3, [pc, #8]	; (bcad8 <realloc+0xc>)
   bcad0:	681b      	ldr	r3, [r3, #0]
   bcad2:	689b      	ldr	r3, [r3, #8]
   bcad4:	9301      	str	r3, [sp, #4]
   bcad6:	bd08      	pop	{r3, pc}
   bcad8:	0003021c 	.word	0x0003021c

000bcadc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bcadc:	b508      	push	{r3, lr}
   bcade:	4b02      	ldr	r3, [pc, #8]	; (bcae8 <sprintf+0xc>)
   bcae0:	681b      	ldr	r3, [r3, #0]
   bcae2:	68db      	ldr	r3, [r3, #12]
   bcae4:	9301      	str	r3, [sp, #4]
   bcae6:	bd08      	pop	{r3, pc}
   bcae8:	0003021c 	.word	0x0003021c

000bcaec <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bcaec:	b508      	push	{r3, lr}
   bcaee:	4b02      	ldr	r3, [pc, #8]	; (bcaf8 <snprintf+0xc>)
   bcaf0:	681b      	ldr	r3, [r3, #0]
   bcaf2:	69db      	ldr	r3, [r3, #28]
   bcaf4:	9301      	str	r3, [sp, #4]
   bcaf6:	bd08      	pop	{r3, pc}
   bcaf8:	0003021c 	.word	0x0003021c

000bcafc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bcafc:	b508      	push	{r3, lr}
   bcafe:	4b02      	ldr	r3, [pc, #8]	; (bcb08 <vsnprintf+0xc>)
   bcb00:	681b      	ldr	r3, [r3, #0]
   bcb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcb04:	9301      	str	r3, [sp, #4]
   bcb06:	bd08      	pop	{r3, pc}
   bcb08:	0003021c 	.word	0x0003021c

000bcb0c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bcb0c:	b508      	push	{r3, lr}
   bcb0e:	4b02      	ldr	r3, [pc, #8]	; (bcb18 <abort+0xc>)
   bcb10:	681b      	ldr	r3, [r3, #0]
   bcb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcb14:	9301      	str	r3, [sp, #4]
   bcb16:	bd08      	pop	{r3, pc}
   bcb18:	0003021c 	.word	0x0003021c

000bcb1c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bcb1c:	b508      	push	{r3, lr}
   bcb1e:	4b02      	ldr	r3, [pc, #8]	; (bcb28 <_malloc_r+0xc>)
   bcb20:	681b      	ldr	r3, [r3, #0]
   bcb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcb24:	9301      	str	r3, [sp, #4]
   bcb26:	bd08      	pop	{r3, pc}
   bcb28:	0003021c 	.word	0x0003021c

000bcb2c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bcb2c:	b508      	push	{r3, lr}
   bcb2e:	4b02      	ldr	r3, [pc, #8]	; (bcb38 <__errno+0xc>)
   bcb30:	681b      	ldr	r3, [r3, #0]
   bcb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcb34:	9301      	str	r3, [sp, #4]
   bcb36:	bd08      	pop	{r3, pc}
   bcb38:	0003021c 	.word	0x0003021c

000bcb3c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bcb3c:	b508      	push	{r3, lr}
   bcb3e:	4b02      	ldr	r3, [pc, #8]	; (bcb48 <__assert_func+0xc>)
   bcb40:	681b      	ldr	r3, [r3, #0]
   bcb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcb44:	9301      	str	r3, [sp, #4]
   bcb46:	bd08      	pop	{r3, pc}
   bcb48:	0003021c 	.word	0x0003021c

000bcb4c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bcb4c:	b508      	push	{r3, lr}
   bcb4e:	4b02      	ldr	r3, [pc, #8]	; (bcb58 <newlib_impure_ptr_callback+0xc>)
   bcb50:	681b      	ldr	r3, [r3, #0]
   bcb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcb54:	9301      	str	r3, [sp, #4]
   bcb56:	bd08      	pop	{r3, pc}
   bcb58:	0003021c 	.word	0x0003021c

000bcb5c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bcb5c:	b508      	push	{r3, lr}
   bcb5e:	4b02      	ldr	r3, [pc, #8]	; (bcb68 <localtime_r+0xc>)
   bcb60:	681b      	ldr	r3, [r3, #0]
   bcb62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcb64:	9301      	str	r3, [sp, #4]
   bcb66:	bd08      	pop	{r3, pc}
   bcb68:	0003021c 	.word	0x0003021c

000bcb6c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bcb6c:	2200      	movs	r2, #0
   bcb6e:	6840      	ldr	r0, [r0, #4]
   bcb70:	4611      	mov	r1, r2
   bcb72:	f7ff bf43 	b.w	bc9fc <network_listening>

000bcb76 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bcb76:	2200      	movs	r2, #0
   bcb78:	6840      	ldr	r0, [r0, #4]
   bcb7a:	4611      	mov	r1, r2
   bcb7c:	f7ff bf4e 	b.w	bca1c <network_get_listen_timeout>

000bcb80 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bcb80:	6840      	ldr	r0, [r0, #4]
   bcb82:	2200      	movs	r2, #0
   bcb84:	f7ff bf42 	b.w	bca0c <network_set_listen_timeout>

000bcb88 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bcb88:	6840      	ldr	r0, [r0, #4]
   bcb8a:	2200      	movs	r2, #0
   bcb8c:	f081 0101 	eor.w	r1, r1, #1
   bcb90:	f7ff bf2c 	b.w	bc9ec <network_listen>

000bcb94 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bcb94:	2300      	movs	r3, #0
   bcb96:	6840      	ldr	r0, [r0, #4]
   bcb98:	461a      	mov	r2, r3
   bcb9a:	4619      	mov	r1, r3
   bcb9c:	f7ff bf1e 	b.w	bc9dc <network_off>

000bcba0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bcba0:	2300      	movs	r3, #0
   bcba2:	6840      	ldr	r0, [r0, #4]
   bcba4:	461a      	mov	r2, r3
   bcba6:	4619      	mov	r1, r3
   bcba8:	f7ff bf10 	b.w	bc9cc <network_on>

000bcbac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bcbac:	2200      	movs	r2, #0
   bcbae:	6840      	ldr	r0, [r0, #4]
   bcbb0:	4611      	mov	r1, r2
   bcbb2:	f7ff bf03 	b.w	bc9bc <network_ready>

000bcbb6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bcbb6:	2200      	movs	r2, #0
   bcbb8:	6840      	ldr	r0, [r0, #4]
   bcbba:	4611      	mov	r1, r2
   bcbbc:	f7ff beee 	b.w	bc99c <network_connecting>

000bcbc0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bcbc0:	6840      	ldr	r0, [r0, #4]
   bcbc2:	2200      	movs	r2, #0
   bcbc4:	2102      	movs	r1, #2
   bcbc6:	f7ff bef1 	b.w	bc9ac <network_disconnect>

000bcbca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bcbca:	2300      	movs	r3, #0
   bcbcc:	6840      	ldr	r0, [r0, #4]
   bcbce:	461a      	mov	r2, r3
   bcbd0:	f7ff bedc 	b.w	bc98c <network_connect>

000bcbd4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bcbd4:	4b02      	ldr	r3, [pc, #8]	; (bcbe0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bcbd6:	2203      	movs	r2, #3
   bcbd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bcbda:	4a02      	ldr	r2, [pc, #8]	; (bcbe4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bcbdc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bcbde:	4770      	bx	lr
   bcbe0:	2003e620 	.word	0x2003e620
   bcbe4:	000c4a18 	.word	0x000c4a18

000bcbe8 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bcbe8:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bcbea:	460b      	mov	r3, r1
    s->update(ticks);
   bcbec:	6892      	ldr	r2, [r2, #8]
   bcbee:	4601      	mov	r1, r0
   bcbf0:	4618      	mov	r0, r3
   bcbf2:	4710      	bx	r2

000bcbf4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bcbf4:	b570      	push	{r4, r5, r6, lr}
   bcbf6:	4c0e      	ldr	r4, [pc, #56]	; (bcc30 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bcbf8:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bcbfa:	2500      	movs	r5, #0
   bcbfc:	241c      	movs	r4, #28
   bcbfe:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bcc02:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bcc06:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bcc0a:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bcc0c:	f004 0403 	and.w	r4, r4, #3
   bcc10:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bcc14:	b2e4      	uxtb	r4, r4
   bcc16:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bcc18:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bcc1a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bcc1c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bcc1e:	7c42      	ldrb	r2, [r0, #17]
   bcc20:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bcc22:	bf0a      	itet	eq
   bcc24:	4b03      	ldreq	r3, [pc, #12]	; (bcc34 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bcc26:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bcc28:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bcc2c:	bd70      	pop	{r4, r5, r6, pc}
   bcc2e:	bf00      	nop
   bcc30:	000c3bd0 	.word	0x000c3bd0
   bcc34:	000bcbe9 	.word	0x000bcbe9

000bcc38 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bcc38:	2100      	movs	r1, #0
   bcc3a:	f7ff bdd1 	b.w	bc7e0 <hal_spi_release>

000bcc3e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bcc3e:	2100      	movs	r1, #0
   bcc40:	f7ff bdc6 	b.w	bc7d0 <hal_spi_acquire>

000bcc44 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bcc44:	b510      	push	{r4, lr}
   bcc46:	4604      	mov	r4, r0
   bcc48:	4608      	mov	r0, r1
{
    _spi = spi;
   bcc4a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bcc4c:	f7ff fd88 	bl	bc760 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bcc50:	2300      	movs	r3, #0
   bcc52:	6063      	str	r3, [r4, #4]
}
   bcc54:	4620      	mov	r0, r4
   bcc56:	bd10      	pop	{r4, pc}

000bcc58 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bcc58:	b513      	push	{r0, r1, r4, lr}
   bcc5a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bcc5c:	7800      	ldrb	r0, [r0, #0]
   bcc5e:	f7ff ffee 	bl	bcc3e <_ZN8SPIClass4lockEv.isra.0>
   bcc62:	b958      	cbnz	r0, bcc7c <_ZN8SPIClass5beginEv+0x24>
   bcc64:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bcc66:	9001      	str	r0, [sp, #4]
   bcc68:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bcc6c:	f7ff fd60 	bl	bc730 <hal_spi_begin>
        unlock();
   bcc70:	9801      	ldr	r0, [sp, #4]
    }
}
   bcc72:	b002      	add	sp, #8
   bcc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bcc78:	f7ff bfde 	b.w	bcc38 <_ZN8SPIClass6unlockEv.isra.0>
   bcc7c:	b002      	add	sp, #8
   bcc7e:	bd10      	pop	{r4, pc}

000bcc80 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   bcc80:	b513      	push	{r0, r1, r4, lr}
   bcc82:	4604      	mov	r4, r0
    if (!lock())
   bcc84:	7800      	ldrb	r0, [r0, #0]
{
   bcc86:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   bcc8a:	f7ff ffd8 	bl	bcc3e <_ZN8SPIClass4lockEv.isra.0>
   bcc8e:	e9dd 2100 	ldrd	r2, r1, [sp]
   bcc92:	4603      	mov	r3, r0
   bcc94:	b948      	cbnz	r0, bccaa <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   bcc96:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   bcc98:	9000      	str	r0, [sp, #0]
   bcc9a:	f7ff fd81 	bl	bc7a0 <hal_spi_begin_ext>
        unlock();
   bcc9e:	9800      	ldr	r0, [sp, #0]
    }
}
   bcca0:	b002      	add	sp, #8
   bcca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bcca6:	f7ff bfc7 	b.w	bcc38 <_ZN8SPIClass6unlockEv.isra.0>
   bccaa:	b002      	add	sp, #8
   bccac:	bd10      	pop	{r4, pc}

000bccae <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bccae:	7800      	ldrb	r0, [r0, #0]
   bccb0:	f7ff bfc2 	b.w	bcc38 <_ZN8SPIClass6unlockEv.isra.0>

000bccb4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bccb4:	0840      	lsrs	r0, r0, #1
{
   bccb6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bccb8:	6018      	str	r0, [r3, #0]
   bccba:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bccbc:	6818      	ldr	r0, [r3, #0]
   bccbe:	4288      	cmp	r0, r1
   bccc0:	b2e5      	uxtb	r5, r4
   bccc2:	d906      	bls.n	bccd2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bccc4:	3401      	adds	r4, #1
   bccc6:	2c08      	cmp	r4, #8
   bccc8:	d002      	beq.n	bccd0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bccca:	0840      	lsrs	r0, r0, #1
   bcccc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bccce:	e7f5      	b.n	bccbc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bccd0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bccd2:	4b02      	ldr	r3, [pc, #8]	; (bccdc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bccd4:	5d5b      	ldrb	r3, [r3, r5]
   bccd6:	7013      	strb	r3, [r2, #0]
}
   bccd8:	bd30      	pop	{r4, r5, pc}
   bccda:	bf00      	nop
   bccdc:	000c4a4c 	.word	0x000c4a4c

000bcce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bcce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcce4:	4606      	mov	r6, r0
   bcce6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bcce8:	7800      	ldrb	r0, [r0, #0]
{
   bccea:	460c      	mov	r4, r1
    CHECK(lock());
   bccec:	f7ff ffa7 	bl	bcc3e <_ZN8SPIClass4lockEv.isra.0>
   bccf0:	2800      	cmp	r0, #0
   bccf2:	db1b      	blt.n	bcd2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bccf4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bccf6:	2214      	movs	r2, #20
   bccf8:	2100      	movs	r1, #0
   bccfa:	a809      	add	r0, sp, #36	; 0x24
   bccfc:	f004 fc16 	bl	c152c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bcd00:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bcd02:	2200      	movs	r2, #0
   bcd04:	a909      	add	r1, sp, #36	; 0x24
   bcd06:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bcd08:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bcd0c:	f7ff fd38 	bl	bc780 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bcd10:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bcd14:	b113      	cbz	r3, bcd1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bcd16:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bcd1a:	b155      	cbz	r5, bcd32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bcd1c:	2700      	movs	r7, #0
   bcd1e:	46b9      	mov	r9, r7
   bcd20:	46b8      	mov	r8, r7
   bcd22:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bcd24:	7923      	ldrb	r3, [r4, #4]
   bcd26:	b15d      	cbz	r5, bcd40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bcd28:	b1c3      	cbz	r3, bcd5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bcd2a:	2000      	movs	r0, #0
}
   bcd2c:	b00f      	add	sp, #60	; 0x3c
   bcd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bcd32:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bcd36:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bcd3a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bcd3e:	e7f1      	b.n	bcd24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bcd40:	2b00      	cmp	r3, #0
   bcd42:	d135      	bne.n	bcdb0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bcd44:	68a3      	ldr	r3, [r4, #8]
   bcd46:	4543      	cmp	r3, r8
   bcd48:	d108      	bne.n	bcd5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bcd4a:	f88d 9020 	strb.w	r9, [sp, #32]
   bcd4e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bcd52:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bcd56:	89a3      	ldrh	r3, [r4, #12]
   bcd58:	429a      	cmp	r2, r3
   bcd5a:	d0e6      	beq.n	bcd2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bcd5c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcd5e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bcd60:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bcd64:	980a      	ldr	r0, [sp, #40]	; 0x28
   bcd66:	ab04      	add	r3, sp, #16
   bcd68:	f10d 020f 	add.w	r2, sp, #15
   bcd6c:	f7ff ffa2 	bl	bccb4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bcd70:	7921      	ldrb	r1, [r4, #4]
   bcd72:	b985      	cbnz	r5, bcd96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bcd74:	b989      	cbnz	r1, bcd9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bcd76:	68a3      	ldr	r3, [r4, #8]
   bcd78:	4543      	cmp	r3, r8
   bcd7a:	d30e      	bcc.n	bcd9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bcd7c:	f88d 9020 	strb.w	r9, [sp, #32]
   bcd80:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bcd84:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bcd88:	89a3      	ldrh	r3, [r4, #12]
   bcd8a:	429a      	cmp	r2, r3
   bcd8c:	d105      	bne.n	bcd9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bcd8e:	9b04      	ldr	r3, [sp, #16]
   bcd90:	4543      	cmp	r3, r8
   bcd92:	d102      	bne.n	bcd9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bcd94:	e7c9      	b.n	bcd2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bcd96:	2900      	cmp	r1, #0
   bcd98:	d1f9      	bne.n	bcd8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bcd9a:	2300      	movs	r3, #0
   bcd9c:	9301      	str	r3, [sp, #4]
   bcd9e:	7b63      	ldrb	r3, [r4, #13]
   bcda0:	9300      	str	r3, [sp, #0]
   bcda2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bcda6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bcda8:	7830      	ldrb	r0, [r6, #0]
   bcdaa:	f7ff fd09 	bl	bc7c0 <hal_spi_set_settings>
   bcdae:	e7bc      	b.n	bcd2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bcdb0:	e9cd 5500 	strd	r5, r5, [sp]
   bcdb4:	462b      	mov	r3, r5
   bcdb6:	462a      	mov	r2, r5
   bcdb8:	2101      	movs	r1, #1
   bcdba:	e7f5      	b.n	bcda8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bcdbc <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   bcdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcdc0:	b088      	sub	sp, #32
    unsigned clock = 0;
   bcdc2:	2300      	movs	r3, #0
{
   bcdc4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   bcdc6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   bcdc8:	9302      	str	r3, [sp, #8]
{
   bcdca:	460e      	mov	r6, r1
   bcdcc:	4617      	mov	r7, r2
    if (!lock())
   bcdce:	f7ff ff36 	bl	bcc3e <_ZN8SPIClass4lockEv.isra.0>
   bcdd2:	4605      	mov	r5, r0
   bcdd4:	bb00      	cbnz	r0, bce18 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   bcdd6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   bcdda:	4601      	mov	r1, r0
   bcddc:	2214      	movs	r2, #20
   bcdde:	a803      	add	r0, sp, #12
   bcde0:	f004 fba4 	bl	c152c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bcde4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bcde6:	462a      	mov	r2, r5
   bcde8:	a903      	add	r1, sp, #12
   bcdea:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   bcdec:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   bcdf0:	f7ff fcc6 	bl	bc780 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   bcdf4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   bcdf6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   bcdfa:	ab02      	add	r3, sp, #8
   bcdfc:	f10d 0207 	add.w	r2, sp, #7
   bce00:	fb07 f106 	mul.w	r1, r7, r6
   bce04:	f7ff ff56 	bl	bccb4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   bce08:	7820      	ldrb	r0, [r4, #0]
   bce0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   bce0e:	f7ff fc97 	bl	bc740 <hal_spi_set_clock_divider>
        unlock();
   bce12:	7820      	ldrb	r0, [r4, #0]
   bce14:	f7ff ff10 	bl	bcc38 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   bce18:	9802      	ldr	r0, [sp, #8]
   bce1a:	b008      	add	sp, #32
   bce1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bce20 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   bce20:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bce22:	7800      	ldrb	r0, [r0, #0]
   bce24:	f7ff fc94 	bl	bc750 <hal_spi_transfer>
}
   bce28:	b2c0      	uxtb	r0, r0
   bce2a:	bd08      	pop	{r3, pc}

000bce2c <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   bce2c:	b530      	push	{r4, r5, lr}
   bce2e:	b087      	sub	sp, #28
   bce30:	4604      	mov	r4, r0
   bce32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   bce34:	9500      	str	r5, [sp, #0]
   bce36:	7800      	ldrb	r0, [r0, #0]
   bce38:	f7ff fcaa 	bl	bc790 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   bce3c:	b93d      	cbnz	r5, bce4e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   bce3e:	7820      	ldrb	r0, [r4, #0]
   bce40:	a902      	add	r1, sp, #8
   bce42:	f7ff fcb5 	bl	bc7b0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   bce46:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bce4a:	07db      	lsls	r3, r3, #31
   bce4c:	d4f7      	bmi.n	bce3e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   bce4e:	b007      	add	sp, #28
   bce50:	bd30      	pop	{r4, r5, pc}

000bce52 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   bce52:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   bce56:	1c53      	adds	r3, r2, #1
   bce58:	d00b      	beq.n	bce72 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   bce5a:	8843      	ldrh	r3, [r0, #2]
   bce5c:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   bce5e:	428b      	cmp	r3, r1
   bce60:	d803      	bhi.n	bce6a <_ZN5Servo17writeMicrosecondsEt+0x18>
   bce62:	4288      	cmp	r0, r1
   bce64:	4603      	mov	r3, r0
   bce66:	bf28      	it	cs
   bce68:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   bce6a:	4619      	mov	r1, r3
   bce6c:	b290      	uxth	r0, r2
   bce6e:	f7ff bccf 	b.w	bc810 <HAL_Servo_Write_Pulse_Width>
}
   bce72:	4770      	bx	lr

000bce74 <_ZN5Servo5writeEi>:
{
   bce74:	b513      	push	{r0, r1, r4, lr}
   bce76:	4604      	mov	r4, r0
   bce78:	4608      	mov	r0, r1
   bce7a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   bce7e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   bce82:	4288      	cmp	r0, r1
   bce84:	db10      	blt.n	bcea8 <_ZN5Servo5writeEi+0x34>
   bce86:	4290      	cmp	r0, r2
   bce88:	bfa8      	it	ge
   bce8a:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   bce8c:	88a3      	ldrh	r3, [r4, #4]
   bce8e:	9300      	str	r3, [sp, #0]
   bce90:	8863      	ldrh	r3, [r4, #2]
   bce92:	f002 fc05 	bl	bf6a0 <_Z3mapiiiii>
   bce96:	68e1      	ldr	r1, [r4, #12]
   bce98:	4401      	add	r1, r0
   bce9a:	b289      	uxth	r1, r1
   bce9c:	4620      	mov	r0, r4
}
   bce9e:	b002      	add	sp, #8
   bcea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   bcea4:	f7ff bfd5 	b.w	bce52 <_ZN5Servo17writeMicrosecondsEt>
   bcea8:	4608      	mov	r0, r1
   bceaa:	e7ef      	b.n	bce8c <_ZN5Servo5writeEi+0x18>

000bceac <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   bceac:	4a04      	ldr	r2, [pc, #16]	; (bcec0 <_ZN5Servo11resetFieldsEv+0x14>)
   bceae:	f44f 6316 	mov.w	r3, #2400	; 0x960
   bceb2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   bceb6:	23b4      	movs	r3, #180	; 0xb4
   bceb8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   bceba:	2300      	movs	r3, #0
   bcebc:	60c3      	str	r3, [r0, #12]
}
   bcebe:	4770      	bx	lr
   bcec0:	0220ffff 	.word	0x0220ffff

000bcec4 <_ZN5ServoC1Ev>:
Servo::Servo()
   bcec4:	b508      	push	{r3, lr}
  this->resetFields();
   bcec6:	f7ff fff1 	bl	bceac <_ZN5Servo11resetFieldsEv>
}
   bceca:	bd08      	pop	{r3, pc}

000bcecc <_ZN5Servo6detachEv>:
{
   bcecc:	b510      	push	{r4, lr}
   bcece:	4604      	mov	r4, r0
   bced0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   bced4:	1c43      	adds	r3, r0, #1
   bced6:	d007      	beq.n	bcee8 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   bced8:	b280      	uxth	r0, r0
   bceda:	f7ff fc91 	bl	bc800 <HAL_Servo_Detach>
  this->resetFields();
   bcede:	4620      	mov	r0, r4
   bcee0:	f7ff ffe4 	bl	bceac <_ZN5Servo11resetFieldsEv>
  return true;
   bcee4:	2001      	movs	r0, #1
}
   bcee6:	bd10      	pop	{r4, pc}
    return false;
   bcee8:	2000      	movs	r0, #0
   bceea:	e7fc      	b.n	bcee6 <_ZN5Servo6detachEv+0x1a>

000bceec <_ZN5Servo6attachEtttss>:
{
   bceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcef0:	460d      	mov	r5, r1
   bcef2:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   bcef4:	2102      	movs	r1, #2
   bcef6:	4628      	mov	r0, r5
{
   bcef8:	4690      	mov	r8, r2
   bcefa:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   bcefc:	f7ff fa26 	bl	bc34c <HAL_Validate_Pin_Function>
   bcf00:	2802      	cmp	r0, #2
   bcf02:	d003      	beq.n	bcf0c <_ZN5Servo6attachEtttss+0x20>
    return false;
   bcf04:	2600      	movs	r6, #0
}
   bcf06:	4630      	mov	r0, r6
   bcf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   bcf0c:	4628      	mov	r0, r5
   bcf0e:	f003 fbdd 	bl	c06cc <pinAvailable>
   bcf12:	4606      	mov	r6, r0
   bcf14:	2800      	cmp	r0, #0
   bcf16:	d0f5      	beq.n	bcf04 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   bcf18:	f9b4 3000 	ldrsh.w	r3, [r4]
   bcf1c:	3301      	adds	r3, #1
   bcf1e:	d002      	beq.n	bcf26 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   bcf20:	4620      	mov	r0, r4
   bcf22:	f7ff ffd3 	bl	bcecc <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   bcf26:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   bcf2a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   bcf2c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   bcf30:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   bcf32:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   bcf36:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   bcf38:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   bcf3a:	4628      	mov	r0, r5
   bcf3c:	f7ff fc58 	bl	bc7f0 <HAL_Servo_Attach>
  return true;
   bcf40:	e7e1      	b.n	bcf06 <_ZN5Servo6attachEtttss+0x1a>
	...

000bcf44 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bcf44:	4b05      	ldr	r3, [pc, #20]	; (bcf5c <_GLOBAL__sub_I_System+0x18>)
   bcf46:	2202      	movs	r2, #2
   bcf48:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bcf4a:	4b05      	ldr	r3, [pc, #20]	; (bcf60 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bcf4c:	4a05      	ldr	r2, [pc, #20]	; (bcf64 <_GLOBAL__sub_I_System+0x20>)
   bcf4e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bcf50:	2000      	movs	r0, #0
   bcf52:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bcf56:	f7ff bcd5 	b.w	bc904 <set_system_mode>
   bcf5a:	bf00      	nop
   bcf5c:	2003e634 	.word	0x2003e634
   bcf60:	2003e628 	.word	0x2003e628
   bcf64:	ffff0000 	.word	0xffff0000

000bcf68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bcf68:	b510      	push	{r4, lr}
   bcf6a:	4604      	mov	r4, r0
{
	free(buffer);
   bcf6c:	6800      	ldr	r0, [r0, #0]
   bcf6e:	f7ff fda5 	bl	bcabc <free>
}
   bcf72:	4620      	mov	r0, r4
   bcf74:	bd10      	pop	{r4, pc}

000bcf76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bcf76:	b510      	push	{r4, lr}
   bcf78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bcf7a:	6800      	ldr	r0, [r0, #0]
   bcf7c:	b108      	cbz	r0, bcf82 <_ZN6String10invalidateEv+0xc>
   bcf7e:	f7ff fd9d 	bl	bcabc <free>
	buffer = NULL;
   bcf82:	2300      	movs	r3, #0
	capacity = len = 0;
   bcf84:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bcf88:	6023      	str	r3, [r4, #0]
}
   bcf8a:	bd10      	pop	{r4, pc}

000bcf8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bcf8c:	b538      	push	{r3, r4, r5, lr}
   bcf8e:	4604      	mov	r4, r0
   bcf90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bcf92:	6800      	ldr	r0, [r0, #0]
   bcf94:	3101      	adds	r1, #1
   bcf96:	f7ff fd99 	bl	bcacc <realloc>
	if (newbuffer) {
   bcf9a:	b110      	cbz	r0, bcfa2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bcf9c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bcfa0:	2001      	movs	r0, #1
	}
	return 0;
}
   bcfa2:	bd38      	pop	{r3, r4, r5, pc}

000bcfa4 <_ZN6String7reserveEj>:
{
   bcfa4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bcfa6:	6803      	ldr	r3, [r0, #0]
{
   bcfa8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bcfaa:	b123      	cbz	r3, bcfb6 <_ZN6String7reserveEj+0x12>
   bcfac:	6843      	ldr	r3, [r0, #4]
   bcfae:	428b      	cmp	r3, r1
   bcfb0:	d301      	bcc.n	bcfb6 <_ZN6String7reserveEj+0x12>
   bcfb2:	2001      	movs	r0, #1
}
   bcfb4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bcfb6:	4620      	mov	r0, r4
   bcfb8:	f7ff ffe8 	bl	bcf8c <_ZN6String12changeBufferEj>
   bcfbc:	2800      	cmp	r0, #0
   bcfbe:	d0f9      	beq.n	bcfb4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bcfc0:	68a3      	ldr	r3, [r4, #8]
   bcfc2:	2b00      	cmp	r3, #0
   bcfc4:	d1f5      	bne.n	bcfb2 <_ZN6String7reserveEj+0xe>
   bcfc6:	6822      	ldr	r2, [r4, #0]
   bcfc8:	7013      	strb	r3, [r2, #0]
   bcfca:	e7f2      	b.n	bcfb2 <_ZN6String7reserveEj+0xe>

000bcfcc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bcfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcfce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bcfd0:	4611      	mov	r1, r2
   bcfd2:	9201      	str	r2, [sp, #4]
{
   bcfd4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bcfd6:	f7ff ffe5 	bl	bcfa4 <_ZN6String7reserveEj>
   bcfda:	9a01      	ldr	r2, [sp, #4]
   bcfdc:	b928      	cbnz	r0, bcfea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bcfde:	4620      	mov	r0, r4
   bcfe0:	f7ff ffc9 	bl	bcf76 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bcfe4:	4620      	mov	r0, r4
   bcfe6:	b003      	add	sp, #12
   bcfe8:	bd30      	pop	{r4, r5, pc}
	len = length;
   bcfea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bcfec:	4629      	mov	r1, r5
   bcfee:	6820      	ldr	r0, [r4, #0]
   bcff0:	f004 fa74 	bl	c14dc <memcpy>
	buffer[len] = 0;
   bcff4:	6822      	ldr	r2, [r4, #0]
   bcff6:	68a3      	ldr	r3, [r4, #8]
   bcff8:	2100      	movs	r1, #0
   bcffa:	54d1      	strb	r1, [r2, r3]
	return *this;
   bcffc:	e7f2      	b.n	bcfe4 <_ZN6String4copyEPKcj+0x18>

000bcffe <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bcffe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bd000:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bd002:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bd006:	4604      	mov	r4, r0
	len = 0;
   bd008:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd00a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bd00c:	b141      	cbz	r1, bd020 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bd00e:	4608      	mov	r0, r1
   bd010:	9101      	str	r1, [sp, #4]
   bd012:	f004 fb16 	bl	c1642 <strlen>
   bd016:	9901      	ldr	r1, [sp, #4]
   bd018:	4602      	mov	r2, r0
   bd01a:	4620      	mov	r0, r4
   bd01c:	f7ff ffd6 	bl	bcfcc <_ZN6String4copyEPKcj>
}
   bd020:	4620      	mov	r0, r4
   bd022:	b002      	add	sp, #8
   bd024:	bd10      	pop	{r4, pc}

000bd026 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bd026:	b538      	push	{r3, r4, r5, lr}
   bd028:	4605      	mov	r5, r0
	if (buffer) {
   bd02a:	6800      	ldr	r0, [r0, #0]
{
   bd02c:	460c      	mov	r4, r1
	if (buffer) {
   bd02e:	b168      	cbz	r0, bd04c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bd030:	686a      	ldr	r2, [r5, #4]
   bd032:	688b      	ldr	r3, [r1, #8]
   bd034:	429a      	cmp	r2, r3
   bd036:	d307      	bcc.n	bd048 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bd038:	6809      	ldr	r1, [r1, #0]
   bd03a:	f004 fadd 	bl	c15f8 <strcpy>
			len = rhs.len;
   bd03e:	68a3      	ldr	r3, [r4, #8]
   bd040:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bd042:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bd044:	60a3      	str	r3, [r4, #8]
}
   bd046:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bd048:	f7ff fd38 	bl	bcabc <free>
	buffer = rhs.buffer;
   bd04c:	6823      	ldr	r3, [r4, #0]
   bd04e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bd050:	6863      	ldr	r3, [r4, #4]
   bd052:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bd054:	68a3      	ldr	r3, [r4, #8]
   bd056:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bd058:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bd05a:	e9c4 3300 	strd	r3, r3, [r4]
   bd05e:	e7f1      	b.n	bd044 <_ZN6String4moveERS_+0x1e>

000bd060 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bd060:	b510      	push	{r4, lr}
	buffer = NULL;
   bd062:	2300      	movs	r3, #0
	capacity = 0;
   bd064:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bd068:	4604      	mov	r4, r0
	len = 0;
   bd06a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd06c:	7303      	strb	r3, [r0, #12]
	move(rval);
   bd06e:	f7ff ffda 	bl	bd026 <_ZN6String4moveERS_>
}
   bd072:	4620      	mov	r0, r4
   bd074:	bd10      	pop	{r4, pc}

000bd076 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bd076:	4288      	cmp	r0, r1
{
   bd078:	b510      	push	{r4, lr}
   bd07a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bd07c:	d005      	beq.n	bd08a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bd07e:	680b      	ldr	r3, [r1, #0]
   bd080:	b12b      	cbz	r3, bd08e <_ZN6StringaSERKS_+0x18>
   bd082:	688a      	ldr	r2, [r1, #8]
   bd084:	4619      	mov	r1, r3
   bd086:	f7ff ffa1 	bl	bcfcc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd08a:	4620      	mov	r0, r4
   bd08c:	bd10      	pop	{r4, pc}
	else invalidate();
   bd08e:	f7ff ff72 	bl	bcf76 <_ZN6String10invalidateEv>
   bd092:	e7fa      	b.n	bd08a <_ZN6StringaSERKS_+0x14>

000bd094 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bd094:	b510      	push	{r4, lr}
	buffer = NULL;
   bd096:	2300      	movs	r3, #0
String::String(const String &value)
   bd098:	4604      	mov	r4, r0
	capacity = 0;
   bd09a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bd09e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bd0a0:	7303      	strb	r3, [r0, #12]
	*this = value;
   bd0a2:	f7ff ffe8 	bl	bd076 <_ZN6StringaSERKS_>
}
   bd0a6:	4620      	mov	r0, r4
   bd0a8:	bd10      	pop	{r4, pc}

000bd0aa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bd0aa:	b513      	push	{r0, r1, r4, lr}
   bd0ac:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bd0ae:	b159      	cbz	r1, bd0c8 <_ZN6StringaSEPKc+0x1e>
   bd0b0:	4608      	mov	r0, r1
   bd0b2:	9101      	str	r1, [sp, #4]
   bd0b4:	f004 fac5 	bl	c1642 <strlen>
   bd0b8:	9901      	ldr	r1, [sp, #4]
   bd0ba:	4602      	mov	r2, r0
   bd0bc:	4620      	mov	r0, r4
   bd0be:	f7ff ff85 	bl	bcfcc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bd0c2:	4620      	mov	r0, r4
   bd0c4:	b002      	add	sp, #8
   bd0c6:	bd10      	pop	{r4, pc}
	else invalidate();
   bd0c8:	f7ff ff55 	bl	bcf76 <_ZN6String10invalidateEv>
   bd0cc:	e7f9      	b.n	bd0c2 <_ZN6StringaSEPKc+0x18>

000bd0ce <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bd0ce:	b570      	push	{r4, r5, r6, lr}
   bd0d0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bd0d2:	460e      	mov	r6, r1
   bd0d4:	b909      	cbnz	r1, bd0da <_ZN6String6concatEPKcj+0xc>
   bd0d6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bd0d8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bd0da:	b16a      	cbz	r2, bd0f8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bd0dc:	6884      	ldr	r4, [r0, #8]
   bd0de:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bd0e0:	4621      	mov	r1, r4
   bd0e2:	f7ff ff5f 	bl	bcfa4 <_ZN6String7reserveEj>
   bd0e6:	2800      	cmp	r0, #0
   bd0e8:	d0f5      	beq.n	bd0d6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bd0ea:	6828      	ldr	r0, [r5, #0]
   bd0ec:	68ab      	ldr	r3, [r5, #8]
   bd0ee:	4631      	mov	r1, r6
   bd0f0:	4418      	add	r0, r3
   bd0f2:	f004 fa81 	bl	c15f8 <strcpy>
	len = newlen;
   bd0f6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bd0f8:	2001      	movs	r0, #1
   bd0fa:	e7ed      	b.n	bd0d8 <_ZN6String6concatEPKcj+0xa>

000bd0fc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bd0fc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bd0fe:	2300      	movs	r3, #0
	buf[0] = c;
   bd100:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bd104:	2201      	movs	r2, #1
   bd106:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bd108:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bd10c:	f7ff ffdf 	bl	bd0ce <_ZN6String6concatEPKcj>
}
   bd110:	b003      	add	sp, #12
   bd112:	f85d fb04 	ldr.w	pc, [sp], #4

000bd116 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   bd116:	6883      	ldr	r3, [r0, #8]
   bd118:	428b      	cmp	r3, r1
   bd11a:	d903      	bls.n	bd124 <_ZNK6StringixEj+0xe>
   bd11c:	6800      	ldr	r0, [r0, #0]
   bd11e:	b110      	cbz	r0, bd126 <_ZNK6StringixEj+0x10>
	return buffer[index];
   bd120:	5c40      	ldrb	r0, [r0, r1]
   bd122:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   bd124:	2000      	movs	r0, #0
}
   bd126:	4770      	bx	lr

000bd128 <_ZNK6String6charAtEj>:
	return operator[](loc);
   bd128:	f7ff bff5 	b.w	bd116 <_ZNK6StringixEj>

000bd12c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd12c:	4770      	bx	lr

000bd12e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bd12e:	4770      	bx	lr

000bd130 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bd130:	4770      	bx	lr

000bd132 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd132:	4770      	bx	lr

000bd134 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd134:	4b06      	ldr	r3, [pc, #24]	; (bd150 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd136:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd138:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bd13a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd13e:	d005      	beq.n	bd14c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd140:	4608      	mov	r0, r1
   bd142:	f003 fbaf 	bl	c08a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd146:	2800      	cmp	r0, #0
   bd148:	bf08      	it	eq
   bd14a:	2400      	moveq	r4, #0
      }
   bd14c:	4620      	mov	r0, r4
   bd14e:	bd10      	pop	{r4, pc}
   bd150:	000c4bf4 	.word	0x000c4bf4

000bd154 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd154:	4b06      	ldr	r3, [pc, #24]	; (bd170 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd156:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd158:	b510      	push	{r4, lr}
   bd15a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd15e:	d005      	beq.n	bd16c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd160:	4608      	mov	r0, r1
   bd162:	f003 fb9f 	bl	c08a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd166:	2800      	cmp	r0, #0
   bd168:	bf08      	it	eq
   bd16a:	2400      	moveq	r4, #0
      }
   bd16c:	4620      	mov	r0, r4
   bd16e:	bd10      	pop	{r4, pc}
   bd170:	000c4bf4 	.word	0x000c4bf4

000bd174 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd174:	4b06      	ldr	r3, [pc, #24]	; (bd190 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd176:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd178:	b510      	push	{r4, lr}
   bd17a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd17e:	d005      	beq.n	bd18c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd180:	4608      	mov	r0, r1
   bd182:	f003 fb8f 	bl	c08a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd186:	2800      	cmp	r0, #0
   bd188:	bf08      	it	eq
   bd18a:	2400      	moveq	r4, #0
      }
   bd18c:	4620      	mov	r0, r4
   bd18e:	bd10      	pop	{r4, pc}
   bd190:	000c4bf4 	.word	0x000c4bf4

000bd194 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd194:	b510      	push	{r4, lr}
   bd196:	2168      	movs	r1, #104	; 0x68
   bd198:	4604      	mov	r4, r0
   bd19a:	f7f6 ff82 	bl	b40a2 <_ZdlPvj>
   bd19e:	4620      	mov	r0, r4
   bd1a0:	bd10      	pop	{r4, pc}

000bd1a2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd1a2:	b510      	push	{r4, lr}
   bd1a4:	2128      	movs	r1, #40	; 0x28
   bd1a6:	4604      	mov	r4, r0
   bd1a8:	f7f6 ff7b 	bl	b40a2 <_ZdlPvj>
   bd1ac:	4620      	mov	r0, r4
   bd1ae:	bd10      	pop	{r4, pc}

000bd1b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd1b0:	b510      	push	{r4, lr}
   bd1b2:	2130      	movs	r1, #48	; 0x30
   bd1b4:	4604      	mov	r4, r0
   bd1b6:	f7f6 ff74 	bl	b40a2 <_ZdlPvj>
   bd1ba:	4620      	mov	r0, r4
   bd1bc:	bd10      	pop	{r4, pc}

000bd1be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bd1be:	2168      	movs	r1, #104	; 0x68
   bd1c0:	f7f6 bf6f 	b.w	b40a2 <_ZdlPvj>

000bd1c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd1c4:	2128      	movs	r1, #40	; 0x28
   bd1c6:	f7f6 bf6c 	b.w	b40a2 <_ZdlPvj>

000bd1ca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd1ca:	2130      	movs	r1, #48	; 0x30
   bd1cc:	f7f6 bf69 	b.w	b40a2 <_ZdlPvj>

000bd1d0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bd1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd1d2:	2500      	movs	r5, #0
   bd1d4:	1cec      	adds	r4, r5, #3
   bd1d6:	428c      	cmp	r4, r1
   bd1d8:	d80d      	bhi.n	bd1f6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bd1da:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bd1dc:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bd1de:	5d87      	ldrb	r7, [r0, r6]
   bd1e0:	4297      	cmp	r7, r2
   bd1e2:	d105      	bne.n	bd1f0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bd1e4:	4426      	add	r6, r4
   bd1e6:	42b1      	cmp	r1, r6
   bd1e8:	d305      	bcc.n	bd1f6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bd1ea:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bd1ec:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bd1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bd1f0:	3401      	adds	r4, #1
   bd1f2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd1f4:	e7ee      	b.n	bd1d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bd1f6:	2000      	movs	r0, #0
   bd1f8:	e7f9      	b.n	bd1ee <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bd1fc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bd1fc:	4a02      	ldr	r2, [pc, #8]	; (bd208 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bd1fe:	4903      	ldr	r1, [pc, #12]	; (bd20c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bd200:	200a      	movs	r0, #10
   bd202:	f7ff bb4d 	b.w	bc8a0 <panic_>
   bd206:	bf00      	nop
   bd208:	000bc3bd 	.word	0x000bc3bd
   bd20c:	000c4a54 	.word	0x000c4a54

000bd210 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd210:	b430      	push	{r4, r5}
   bd212:	460d      	mov	r5, r1
   bd214:	4611      	mov	r1, r2
   bd216:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bd218:	6803      	ldr	r3, [r0, #0]
   bd21a:	6809      	ldr	r1, [r1, #0]
   bd21c:	6828      	ldr	r0, [r5, #0]
   bd21e:	e9d3 4300 	ldrd	r4, r3, [r3]
   bd222:	46a4      	mov	ip, r4
      }
   bd224:	bc30      	pop	{r4, r5}
   bd226:	4760      	bx	ip

000bd228 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bd228:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd22a:	b538      	push	{r3, r4, r5, lr}
   bd22c:	4604      	mov	r4, r0
	switch (__op)
   bd22e:	d102      	bne.n	bd236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bd230:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bd232:	6023      	str	r3, [r4, #0]
	}
   bd234:	e003      	b.n	bd23e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bd236:	2a02      	cmp	r2, #2
   bd238:	d003      	beq.n	bd242 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bd23a:	2a03      	cmp	r2, #3
   bd23c:	d00d      	beq.n	bd25a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bd23e:	2000      	movs	r0, #0
   bd240:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bd242:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bd244:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd246:	f7f6 ff26 	bl	b4096 <_Znwj>
   bd24a:	4603      	mov	r3, r0
   bd24c:	2800      	cmp	r0, #0
   bd24e:	d0f0      	beq.n	bd232 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bd250:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd254:	e883 0003 	stmia.w	r3, {r0, r1}
   bd258:	e7eb      	b.n	bd232 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bd25a:	6800      	ldr	r0, [r0, #0]
   bd25c:	2800      	cmp	r0, #0
   bd25e:	d0ee      	beq.n	bd23e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bd260:	2108      	movs	r1, #8
   bd262:	f7f6 ff1e 	bl	b40a2 <_ZdlPvj>
   bd266:	e7ea      	b.n	bd23e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bd268 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd268:	b510      	push	{r4, lr}
   bd26a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bd26c:	3058      	adds	r0, #88	; 0x58
   bd26e:	f7f7 f881 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bd272:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bd276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd27a:	f7ff be75 	b.w	bcf68 <_ZN6StringD1Ev>

000bd27e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd27e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd280:	6843      	ldr	r3, [r0, #4]
   bd282:	3b01      	subs	r3, #1
    {
   bd284:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd286:	6043      	str	r3, [r0, #4]
   bd288:	b963      	cbnz	r3, bd2a4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd28a:	6803      	ldr	r3, [r0, #0]
   bd28c:	689b      	ldr	r3, [r3, #8]
   bd28e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd290:	68a3      	ldr	r3, [r4, #8]
   bd292:	3b01      	subs	r3, #1
   bd294:	60a3      	str	r3, [r4, #8]
   bd296:	b92b      	cbnz	r3, bd2a4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd298:	6823      	ldr	r3, [r4, #0]
   bd29a:	4620      	mov	r0, r4
   bd29c:	68db      	ldr	r3, [r3, #12]
    }
   bd29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd2a2:	4718      	bx	r3
    }
   bd2a4:	bd10      	pop	{r4, pc}

000bd2a6 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bd2a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd2aa:	b2da      	uxtb	r2, r3
   bd2ac:	2a09      	cmp	r2, #9
   bd2ae:	d801      	bhi.n	bd2b4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bd2b0:	4618      	mov	r0, r3
   bd2b2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bd2b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd2b8:	2b05      	cmp	r3, #5
   bd2ba:	d801      	bhi.n	bd2c0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bd2bc:	3857      	subs	r0, #87	; 0x57
   bd2be:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bd2c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd2c4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bd2c6:	bf94      	ite	ls
   bd2c8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bd2ca:	f04f 30ff 	movhi.w	r0, #4294967295
}
   bd2ce:	4770      	bx	lr

000bd2d0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bd2d0:	b510      	push	{r4, lr}
            locked_(false) {
   bd2d2:	2300      	movs	r3, #0
   bd2d4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd2d6:	4b04      	ldr	r3, [pc, #16]	; (bd2e8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bd2d8:	4604      	mov	r4, r0
   bd2da:	6818      	ldr	r0, [r3, #0]
   bd2dc:	f7ff f958 	bl	bc590 <os_mutex_recursive_lock>
        locked_ = true;
   bd2e0:	2301      	movs	r3, #1
   bd2e2:	7023      	strb	r3, [r4, #0]
    }
   bd2e4:	4620      	mov	r0, r4
   bd2e6:	bd10      	pop	{r4, pc}
   bd2e8:	2003e640 	.word	0x2003e640

000bd2ec <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bd2ec:	b510      	push	{r4, lr}
        if (locked_) {
   bd2ee:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bd2f0:	4604      	mov	r4, r0
        if (locked_) {
   bd2f2:	b11b      	cbz	r3, bd2fc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bd2f4:	4b02      	ldr	r3, [pc, #8]	; (bd300 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bd2f6:	6818      	ldr	r0, [r3, #0]
   bd2f8:	f7ff f952 	bl	bc5a0 <os_mutex_recursive_unlock>
    }
   bd2fc:	4620      	mov	r0, r4
   bd2fe:	bd10      	pop	{r4, pc}
   bd300:	2003e640 	.word	0x2003e640

000bd304 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bd304:	b082      	sub	sp, #8
   bd306:	4603      	mov	r3, r0
    address_ = addr;
   bd308:	6808      	ldr	r0, [r1, #0]
   bd30a:	6849      	ldr	r1, [r1, #4]
   bd30c:	466a      	mov	r2, sp
   bd30e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bd310:	466a      	mov	r2, sp
   bd312:	ca03      	ldmia	r2!, {r0, r1}
   bd314:	6018      	str	r0, [r3, #0]
}
   bd316:	4618      	mov	r0, r3
    address_ = addr.address_;
   bd318:	6059      	str	r1, [r3, #4]
}
   bd31a:	b002      	add	sp, #8
   bd31c:	4770      	bx	lr

000bd31e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bd31e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bd320:	7982      	ldrb	r2, [r0, #6]
   bd322:	798b      	ldrb	r3, [r1, #6]
   bd324:	429a      	cmp	r2, r3
   bd326:	d106      	bne.n	bd336 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bd328:	2206      	movs	r2, #6
   bd32a:	f004 f8c7 	bl	c14bc <memcmp>
   bd32e:	fab0 f080 	clz	r0, r0
   bd332:	0940      	lsrs	r0, r0, #5
}
   bd334:	bd08      	pop	{r3, pc}
    return false;
   bd336:	2000      	movs	r0, #0
   bd338:	e7fc      	b.n	bd334 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bd33a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bd33a:	f04f 33ff 	mov.w	r3, #4294967295
   bd33e:	6003      	str	r3, [r0, #0]
   bd340:	8083      	strh	r3, [r0, #4]
}
   bd342:	2000      	movs	r0, #0
   bd344:	4770      	bx	lr

000bd346 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bd346:	b508      	push	{r3, lr}
   bd348:	4602      	mov	r2, r0
        : address_{} {
   bd34a:	2100      	movs	r1, #0
   bd34c:	6001      	str	r1, [r0, #0]
   bd34e:	6041      	str	r1, [r0, #4]
    clear();
   bd350:	f7ff fff3 	bl	bd33a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bd354:	7191      	strb	r1, [r2, #6]
}
   bd356:	4610      	mov	r0, r2
   bd358:	bd08      	pop	{r3, pc}
	...

000bd35c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bd35c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bd35e:	2301      	movs	r3, #1
   bd360:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd362:	4b05      	ldr	r3, [pc, #20]	; (bd378 <_ZN8particle7BleUuidC1Ev+0x1c>)
   bd364:	4602      	mov	r2, r0
   bd366:	f103 0110 	add.w	r1, r3, #16
   bd36a:	f853 4b04 	ldr.w	r4, [r3], #4
   bd36e:	f842 4b04 	str.w	r4, [r2], #4
   bd372:	428b      	cmp	r3, r1
   bd374:	d1f9      	bne.n	bd36a <_ZN8particle7BleUuidC1Ev+0xe>
}
   bd376:	bd10      	pop	{r4, pc}
   bd378:	000c4c02 	.word	0x000c4c02

000bd37c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bd37c:	b510      	push	{r4, lr}
    if (uuid128) {
   bd37e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bd380:	4604      	mov	r4, r0
    if (uuid128) {
   bd382:	b1b1      	cbz	r1, bd3b2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bd384:	2a01      	cmp	r2, #1
   bd386:	f101 0210 	add.w	r2, r1, #16
   bd38a:	d10a      	bne.n	bd3a2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bd38c:	4601      	mov	r1, r0
   bd38e:	f853 0b04 	ldr.w	r0, [r3], #4
   bd392:	f841 0b04 	str.w	r0, [r1], #4
   bd396:	4293      	cmp	r3, r2
   bd398:	d1f9      	bne.n	bd38e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bd39a:	2301      	movs	r3, #1
   bd39c:	6123      	str	r3, [r4, #16]
}
   bd39e:	4620      	mov	r0, r4
   bd3a0:	bd10      	pop	{r4, pc}
   bd3a2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bd3a4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bd3a8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bd3ac:	429a      	cmp	r2, r3
   bd3ae:	d1f9      	bne.n	bd3a4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bd3b0:	e7f3      	b.n	bd39a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bd3b2:	2210      	movs	r2, #16
   bd3b4:	f004 f8ba 	bl	c152c <memset>
   bd3b8:	e7f1      	b.n	bd39e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bd3ba <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bd3ba:	b538      	push	{r3, r4, r5, lr}
   bd3bc:	4604      	mov	r4, r0
   bd3be:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bd3c0:	461a      	mov	r2, r3
   bd3c2:	f7ff ffdb 	bl	bd37c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bd3c6:	81a5      	strh	r5, [r4, #12]
}
   bd3c8:	4620      	mov	r0, r4
   bd3ca:	bd38      	pop	{r3, r4, r5, pc}

000bd3cc <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bd3cc:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bd3ce:	6902      	ldr	r2, [r0, #16]
   bd3d0:	b922      	cbnz	r2, bd3dc <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bd3d2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd3d4:	3800      	subs	r0, #0
   bd3d6:	bf18      	it	ne
   bd3d8:	2001      	movne	r0, #1
}
   bd3da:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd3dc:	4902      	ldr	r1, [pc, #8]	; (bd3e8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bd3de:	2210      	movs	r2, #16
   bd3e0:	f004 f86c 	bl	c14bc <memcmp>
   bd3e4:	e7f6      	b.n	bd3d4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   bd3e6:	bf00      	nop
   bd3e8:	000c4c22 	.word	0x000c4c22

000bd3ec <_ZNK8particle7BleUuid4typeEv>:
}
   bd3ec:	6900      	ldr	r0, [r0, #16]
   bd3ee:	4770      	bx	lr

000bd3f0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bd3f0:	b538      	push	{r3, r4, r5, lr}
   bd3f2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bd3f4:	2214      	movs	r2, #20
   bd3f6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bd3f8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bd3fa:	f004 f897 	bl	c152c <memset>
    if (type_ == BleUuidType::SHORT) {
   bd3fe:	6923      	ldr	r3, [r4, #16]
   bd400:	b91b      	cbnz	r3, bd40a <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bd402:	89a3      	ldrh	r3, [r4, #12]
   bd404:	802b      	strh	r3, [r5, #0]
}
   bd406:	4628      	mov	r0, r5
   bd408:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bd40a:	2301      	movs	r3, #1
   bd40c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bd40e:	4621      	mov	r1, r4
   bd410:	462b      	mov	r3, r5
   bd412:	f104 0210 	add.w	r2, r4, #16
   bd416:	f851 0b04 	ldr.w	r0, [r1], #4
   bd41a:	f843 0b04 	str.w	r0, [r3], #4
   bd41e:	4291      	cmp	r1, r2
   bd420:	d1f9      	bne.n	bd416 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bd422:	e7f0      	b.n	bd406 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bd424 <_ZNK8particle7BleUuid7shortedEv>:
}
   bd424:	8980      	ldrh	r0, [r0, #12]
   bd426:	4770      	bx	lr

000bd428 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bd428:	4770      	bx	lr

000bd42a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bd42a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bd42c:	6902      	ldr	r2, [r0, #16]
   bd42e:	690b      	ldr	r3, [r1, #16]
   bd430:	429a      	cmp	r2, r3
   bd432:	d106      	bne.n	bd442 <_ZNK8particle7BleUuideqERKS0_+0x18>
   bd434:	2210      	movs	r2, #16
   bd436:	f004 f841 	bl	c14bc <memcmp>
   bd43a:	fab0 f080 	clz	r0, r0
   bd43e:	0940      	lsrs	r0, r0, #5
}
   bd440:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bd442:	2000      	movs	r0, #0
   bd444:	e7fc      	b.n	bd440 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bd448 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bd448:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bd44a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bd44e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd450:	4b34      	ldr	r3, [pc, #208]	; (bd524 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bd452:	460c      	mov	r4, r1
   bd454:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd456:	4602      	mov	r2, r0
   bd458:	f103 0110 	add.w	r1, r3, #16
   bd45c:	f853 0b04 	ldr.w	r0, [r3], #4
   bd460:	f842 0b04 	str.w	r0, [r2], #4
   bd464:	428b      	cmp	r3, r1
   bd466:	d1f9      	bne.n	bd45c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bd468:	b344      	cbz	r4, bd4bc <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bd46a:	2124      	movs	r1, #36	; 0x24
   bd46c:	4620      	mov	r0, r4
   bd46e:	f004 f917 	bl	c16a0 <strnlen>
   bd472:	2804      	cmp	r0, #4
   bd474:	f04f 0500 	mov.w	r5, #0
   bd478:	d123      	bne.n	bd4c2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   bd47a:	f8ad 5004 	strh.w	r5, [sp, #4]
   bd47e:	af01      	add	r7, sp, #4
   bd480:	1ca5      	adds	r5, r4, #2
   bd482:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   bd484:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   bd488:	f7ff ff0d 	bl	bd2a6 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   bd48c:	f1b0 0800 	subs.w	r8, r0, #0
   bd490:	db12      	blt.n	bd4b8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   bd492:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   bd496:	f7ff ff06 	bl	bd2a6 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   bd49a:	2800      	cmp	r0, #0
   bd49c:	db0c      	blt.n	bd4b8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   bd49e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bd4a0:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   bd4a4:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bd4a6:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   bd4aa:	d1eb      	bne.n	bd484 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   bd4ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
   bd4b0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   bd4b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bd4b6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bd4b8:	2300      	movs	r3, #0
   bd4ba:	6133      	str	r3, [r6, #16]
}
   bd4bc:	b002      	add	sp, #8
   bd4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bd4c2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bd4c6:	2124      	movs	r1, #36	; 0x24
   bd4c8:	4620      	mov	r0, r4
   bd4ca:	f004 f8e9 	bl	c16a0 <strnlen>
   bd4ce:	42a8      	cmp	r0, r5
   bd4d0:	d807      	bhi.n	bd4e2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bd4d2:	4642      	mov	r2, r8
   bd4d4:	2100      	movs	r1, #0
   bd4d6:	4630      	mov	r0, r6
}
   bd4d8:	b002      	add	sp, #8
   bd4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bd4de:	f004 b825 	b.w	c152c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bd4e2:	f1b8 0f00 	cmp.w	r8, #0
   bd4e6:	d0e9      	beq.n	bd4bc <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bd4e8:	5d60      	ldrb	r0, [r4, r5]
   bd4ea:	f7ff fedc 	bl	bd2a6 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bd4ee:	0603      	lsls	r3, r0, #24
   bd4f0:	d415      	bmi.n	bd51e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bd4f2:	0100      	lsls	r0, r0, #4
   bd4f4:	f108 38ff 	add.w	r8, r8, #4294967295
   bd4f8:	b2c7      	uxtb	r7, r0
   bd4fa:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bd4fe:	2124      	movs	r1, #36	; 0x24
   bd500:	4620      	mov	r0, r4
   bd502:	f004 f8cd 	bl	c16a0 <strnlen>
   bd506:	3501      	adds	r5, #1
   bd508:	42a8      	cmp	r0, r5
   bd50a:	d908      	bls.n	bd51e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bd50c:	5d60      	ldrb	r0, [r4, r5]
   bd50e:	f7ff feca 	bl	bd2a6 <_ZN8particle11hexToNibbleEc>
   bd512:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bd514:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bd516:	bfa4      	itt	ge
   bd518:	4338      	orrge	r0, r7
   bd51a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bd51e:	3501      	adds	r5, #1
   bd520:	e7d1      	b.n	bd4c6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bd522:	bf00      	nop
   bd524:	000c4c02 	.word	0x000c4c02

000bd528 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bd528:	b513      	push	{r0, r1, r4, lr}
   bd52a:	4604      	mov	r4, r0
   bd52c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bd52e:	f7ff ff15 	bl	bd35c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bd532:	4620      	mov	r0, r4
   bd534:	9901      	ldr	r1, [sp, #4]
   bd536:	f7ff ff87 	bl	bd448 <_ZN8particle7BleUuid9constructEPKc>
}
   bd53a:	4620      	mov	r0, r4
   bd53c:	b002      	add	sp, #8
   bd53e:	bd10      	pop	{r4, pc}

000bd540 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bd540:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bd542:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bd546:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bd548:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bd54a:	8043      	strh	r3, [r0, #2]
   bd54c:	220e      	movs	r2, #14
   bd54e:	4629      	mov	r1, r5
   bd550:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bd552:	7105      	strb	r5, [r0, #4]
   bd554:	3006      	adds	r0, #6
   bd556:	f003 ffe9 	bl	c152c <memset>
   bd55a:	f104 0014 	add.w	r0, r4, #20
   bd55e:	f7ff fefd 	bl	bd35c <_ZN8particle7BleUuidC1Ev>
   bd562:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bd566:	f7ff fef9 	bl	bd35c <_ZN8particle7BleUuidC1Ev>
   bd56a:	4904      	ldr	r1, [pc, #16]	; (bd57c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bd56c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bd570:	f7ff fd45 	bl	bcffe <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bd574:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bd576:	4620      	mov	r0, r4
   bd578:	bd38      	pop	{r3, r4, r5, pc}
   bd57a:	bf00      	nop
   bd57c:	000c4c8c 	.word	0x000c4c8c

000bd580 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bd580:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bd582:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bd586:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bd58a:	4293      	cmp	r3, r2
   bd58c:	4618      	mov	r0, r3
   bd58e:	d006      	beq.n	bd59e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bd590:	6804      	ldr	r4, [r0, #0]
   bd592:	8824      	ldrh	r4, [r4, #0]
   bd594:	428c      	cmp	r4, r1
   bd596:	f103 0308 	add.w	r3, r3, #8
   bd59a:	d1f6      	bne.n	bd58a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bd59c:	bd10      	pop	{r4, pc}
        return nullptr;
   bd59e:	2000      	movs	r0, #0
   bd5a0:	e7fc      	b.n	bd59c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bd5a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bd5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd5a6:	4606      	mov	r6, r0
   bd5a8:	b085      	sub	sp, #20
   bd5aa:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bd5ac:	460d      	mov	r5, r1
   bd5ae:	2900      	cmp	r1, #0
   bd5b0:	d050      	beq.n	bd654 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bd5b2:	2a00      	cmp	r2, #0
   bd5b4:	d04e      	beq.n	bd654 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bd5b6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bd5b8:	7823      	ldrb	r3, [r4, #0]
   bd5ba:	2af4      	cmp	r2, #244	; 0xf4
   bd5bc:	bf28      	it	cs
   bd5be:	22f4      	movcs	r2, #244	; 0xf4
   bd5c0:	b343      	cbz	r3, bd614 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bd5c2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bd5c4:	0798      	lsls	r0, r3, #30
   bd5c6:	d509      	bpl.n	bd5dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bd5c8:	89a0      	ldrh	r0, [r4, #12]
   bd5ca:	9203      	str	r2, [sp, #12]
   bd5cc:	2300      	movs	r3, #0
   bd5ce:	f7fe ff59 	bl	bc484 <hal_ble_gatt_server_set_characteristic_value>
   bd5d2:	2800      	cmp	r0, #0
   bd5d4:	9a03      	ldr	r2, [sp, #12]
   bd5d6:	da03      	bge.n	bd5e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bd5d8:	b005      	add	sp, #20
   bd5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bd5dc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bd5e0:	6834      	ldr	r4, [r6, #0]
   bd5e2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bd5e4:	06d9      	lsls	r1, r3, #27
   bd5e6:	d509      	bpl.n	bd5fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bd5e8:	2f01      	cmp	r7, #1
   bd5ea:	d007      	beq.n	bd5fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bd5ec:	89a0      	ldrh	r0, [r4, #12]
   bd5ee:	2300      	movs	r3, #0
   bd5f0:	4629      	mov	r1, r5
}
   bd5f2:	b005      	add	sp, #20
   bd5f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bd5f8:	f7fe bf76 	b.w	bc4e8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bd5fc:	069b      	lsls	r3, r3, #26
   bd5fe:	d5eb      	bpl.n	bd5d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bd600:	2f02      	cmp	r7, #2
   bd602:	d0e9      	beq.n	bd5d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bd604:	89a0      	ldrh	r0, [r4, #12]
   bd606:	2300      	movs	r3, #0
   bd608:	4629      	mov	r1, r5
}
   bd60a:	b005      	add	sp, #20
   bd60c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bd610:	f7fe bf74 	b.w	bc4fc <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bd614:	8860      	ldrh	r0, [r4, #2]
   bd616:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bd61a:	4288      	cmp	r0, r1
   bd61c:	d01c      	beq.n	bd658 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bd61e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bd620:	074e      	lsls	r6, r1, #29
   bd622:	d501      	bpl.n	bd628 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bd624:	2f01      	cmp	r7, #1
   bd626:	d104      	bne.n	bd632 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bd628:	070b      	lsls	r3, r1, #28
   bd62a:	d409      	bmi.n	bd640 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bd62c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bd630:	e7d2      	b.n	bd5d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bd632:	89a1      	ldrh	r1, [r4, #12]
   bd634:	9300      	str	r3, [sp, #0]
   bd636:	4613      	mov	r3, r2
   bd638:	462a      	mov	r2, r5
   bd63a:	f7fe ff37 	bl	bc4ac <hal_ble_gatt_client_write_without_response>
   bd63e:	e7cb      	b.n	bd5d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bd640:	2f02      	cmp	r7, #2
   bd642:	d0f3      	beq.n	bd62c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bd644:	2300      	movs	r3, #0
   bd646:	89a1      	ldrh	r1, [r4, #12]
   bd648:	9300      	str	r3, [sp, #0]
   bd64a:	4613      	mov	r3, r2
   bd64c:	462a      	mov	r2, r5
   bd64e:	f7fe ff23 	bl	bc498 <hal_ble_gatt_client_write_with_response>
   bd652:	e7c1      	b.n	bd5d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bd654:	4802      	ldr	r0, [pc, #8]	; (bd660 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bd656:	e7bf      	b.n	bd5d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bd658:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bd65c:	e7bc      	b.n	bd5d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bd65e:	bf00      	nop
   bd660:	fffffef2 	.word	0xfffffef2

000bd664 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bd664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bd668:	2600      	movs	r6, #0
   bd66a:	6006      	str	r6, [r0, #0]
   bd66c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bd66e:	2028      	movs	r0, #40	; 0x28
   bd670:	460c      	mov	r4, r1
   bd672:	f7f6 fd10 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bd676:	1e05      	subs	r5, r0, #0
   bd678:	f105 080c 	add.w	r8, r5, #12
   bd67c:	d00f      	beq.n	bd69e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bd67e:	2301      	movs	r3, #1
   bd680:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bd684:	4b08      	ldr	r3, [pc, #32]	; (bd6a8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bd686:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bd688:	4640      	mov	r0, r8
   bd68a:	f7ff fe67 	bl	bd35c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bd68e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bd690:	622e      	str	r6, [r5, #32]
   bd692:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bd696:	4646      	mov	r6, r8
   bd698:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bd69a:	6823      	ldr	r3, [r4, #0]
   bd69c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bd69e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bd6a2:	4638      	mov	r0, r7
   bd6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd6a8:	000c4bc4 	.word	0x000c4bc4

000bd6ac <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bd6ac:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bd6ae:	2500      	movs	r5, #0
   bd6b0:	6005      	str	r5, [r0, #0]
   bd6b2:	4606      	mov	r6, r0
   bd6b4:	2030      	movs	r0, #48	; 0x30
   bd6b6:	f7f6 fcee 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bd6ba:	4604      	mov	r4, r0
   bd6bc:	b188      	cbz	r0, bd6e2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bd6be:	2301      	movs	r3, #1
   bd6c0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bd6c4:	4b09      	ldr	r3, [pc, #36]	; (bd6ec <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bd6c6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bd6c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bd6cc:	8183      	strh	r3, [r0, #12]
   bd6ce:	300e      	adds	r0, #14
   bd6d0:	f7ff fe39 	bl	bd346 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bd6d4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bd6d8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bd6dc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bd6e0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bd6e2:	6074      	str	r4, [r6, #4]
   bd6e4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bd6e6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bd6e8:	4630      	mov	r0, r6
   bd6ea:	bd70      	pop	{r4, r5, r6, pc}
   bd6ec:	000c4be0 	.word	0x000c4be0

000bd6f0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bd6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd6f2:	460d      	mov	r5, r1
   bd6f4:	4604      	mov	r4, r0
    WiringBleLock lk;
   bd6f6:	a801      	add	r0, sp, #4
   bd6f8:	f7ff fdea 	bl	bd2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bd6fc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bd6fe:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bd702:	6023      	str	r3, [r4, #0]
   bd704:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bd708:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bd70a:	a801      	add	r0, sp, #4
   bd70c:	f7ff fdee 	bl	bd2ec <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bd710:	4620      	mov	r0, r4
   bd712:	b003      	add	sp, #12
   bd714:	bd30      	pop	{r4, r5, pc}

000bd716 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bd716:	b530      	push	{r4, r5, lr}
   bd718:	4605      	mov	r5, r0
   bd71a:	b087      	sub	sp, #28
   bd71c:	460c      	mov	r4, r1
    WiringBleLock lk;
   bd71e:	a801      	add	r0, sp, #4
   bd720:	f7ff fdd6 	bl	bd2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bd724:	682a      	ldr	r2, [r5, #0]
   bd726:	6823      	ldr	r3, [r4, #0]
   bd728:	8812      	ldrh	r2, [r2, #0]
   bd72a:	881b      	ldrh	r3, [r3, #0]
   bd72c:	429a      	cmp	r2, r3
   bd72e:	d10d      	bne.n	bd74c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bd730:	4629      	mov	r1, r5
   bd732:	a802      	add	r0, sp, #8
   bd734:	f7ff ffdc 	bl	bd6f0 <_ZNK8particle13BlePeerDevice7addressEv>
   bd738:	4621      	mov	r1, r4
   bd73a:	a804      	add	r0, sp, #16
   bd73c:	f7ff ffd8 	bl	bd6f0 <_ZNK8particle13BlePeerDevice7addressEv>
   bd740:	a904      	add	r1, sp, #16
   bd742:	a802      	add	r0, sp, #8
   bd744:	f7ff fdeb 	bl	bd31e <_ZNK8particle10BleAddresseqERKS0_>
   bd748:	4604      	mov	r4, r0
   bd74a:	b900      	cbnz	r0, bd74e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bd74c:	2400      	movs	r4, #0
    WiringBleLock lk;
   bd74e:	a801      	add	r0, sp, #4
   bd750:	f7ff fdcc 	bl	bd2ec <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bd754:	4620      	mov	r0, r4
   bd756:	b007      	add	sp, #28
   bd758:	bd30      	pop	{r4, r5, pc}
	...

000bd75c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bd75c:	b510      	push	{r4, lr}
   bd75e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bd760:	2064      	movs	r0, #100	; 0x64
   bd762:	f7f6 fc98 	bl	b4096 <_Znwj>
   bd766:	b168      	cbz	r0, bd784 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bd768:	2300      	movs	r3, #0
   bd76a:	e9c0 3300 	strd	r3, r3, [r0]
   bd76e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bd772:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bd776:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bd77a:	6203      	str	r3, [r0, #32]
   bd77c:	62c3      	str	r3, [r0, #44]	; 0x2c
   bd77e:	63c3      	str	r3, [r0, #60]	; 0x3c
   bd780:	64c3      	str	r3, [r0, #76]	; 0x4c
   bd782:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bd784:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bd786:	b920      	cbnz	r0, bd792 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bd788:	4a0a      	ldr	r2, [pc, #40]	; (bd7b4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bd78a:	490b      	ldr	r1, [pc, #44]	; (bd7b8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bd78c:	200a      	movs	r0, #10
   bd78e:	f7ff f887 	bl	bc8a0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bd792:	2000      	movs	r0, #0
   bd794:	f7fe fe3a 	bl	bc40c <hal_ble_stack_init>
   bd798:	b120      	cbz	r0, bd7a4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bd79a:	4a06      	ldr	r2, [pc, #24]	; (bd7b4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bd79c:	4907      	ldr	r1, [pc, #28]	; (bd7bc <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bd79e:	200a      	movs	r0, #10
   bd7a0:	f7ff f87e 	bl	bc8a0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bd7a4:	6821      	ldr	r1, [r4, #0]
   bd7a6:	4806      	ldr	r0, [pc, #24]	; (bd7c0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bd7a8:	2200      	movs	r2, #0
   bd7aa:	f7fe fe93 	bl	bc4d4 <hal_ble_set_callback_on_periph_link_events>
}
   bd7ae:	4620      	mov	r0, r4
   bd7b0:	bd10      	pop	{r4, pc}
   bd7b2:	bf00      	nop
   bd7b4:	000bc3bd 	.word	0x000bc3bd
   bd7b8:	000c4a54 	.word	0x000c4a54
   bd7bc:	000c4a92 	.word	0x000c4a92
   bd7c0:	000bdd81 	.word	0x000bdd81

000bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bd7c4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bd7c6:	4c0a      	ldr	r4, [pc, #40]	; (bd7f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bd7c8:	7823      	ldrb	r3, [r4, #0]
   bd7ca:	f3bf 8f5b 	dmb	ish
   bd7ce:	07db      	lsls	r3, r3, #31
   bd7d0:	d40c      	bmi.n	bd7ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bd7d2:	4620      	mov	r0, r4
   bd7d4:	f7f6 fc74 	bl	b40c0 <__cxa_guard_acquire>
   bd7d8:	b140      	cbz	r0, bd7ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bd7da:	4806      	ldr	r0, [pc, #24]	; (bd7f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bd7dc:	f7ff ffbe 	bl	bd75c <_ZN8particle14BleLocalDeviceC1Ev>
   bd7e0:	4620      	mov	r0, r4
   bd7e2:	f7f6 fc72 	bl	b40ca <__cxa_guard_release>
   bd7e6:	4804      	ldr	r0, [pc, #16]	; (bd7f8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bd7e8:	f003 fe52 	bl	c1490 <atexit>
    return instance;
}
   bd7ec:	4801      	ldr	r0, [pc, #4]	; (bd7f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bd7ee:	bd10      	pop	{r4, pc}
   bd7f0:	2003e638 	.word	0x2003e638
   bd7f4:	2003e644 	.word	0x2003e644
   bd7f8:	000bda39 	.word	0x000bda39

000bd7fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bd7fc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bd7fe:	6803      	ldr	r3, [r0, #0]
   bd800:	3b09      	subs	r3, #9
   bd802:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bd804:	b08d      	sub	sp, #52	; 0x34
   bd806:	4604      	mov	r4, r0
   bd808:	460d      	mov	r5, r1
    switch (event->type) {
   bd80a:	d811      	bhi.n	bd830 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bd80c:	f7ff ffda 	bl	bd7c4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bd810:	88a1      	ldrh	r1, [r4, #4]
   bd812:	6800      	ldr	r0, [r0, #0]
   bd814:	f7ff feb4 	bl	bd580 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   bd818:	4603      	mov	r3, r0
   bd81a:	b958      	cbnz	r0, bd834 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   bd81c:	2220      	movs	r2, #32
   bd81e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bd822:	4a0b      	ldr	r2, [pc, #44]	; (bd850 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bd824:	9200      	str	r2, [sp, #0]
   bd826:	490b      	ldr	r1, [pc, #44]	; (bd854 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bd828:	aa04      	add	r2, sp, #16
   bd82a:	2032      	movs	r0, #50	; 0x32
   bd82c:	f7ff f840 	bl	bc8b0 <log_message>
}
   bd830:	b00d      	add	sp, #52	; 0x34
   bd832:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bd834:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bd836:	2a00      	cmp	r2, #0
   bd838:	d0fa      	beq.n	bd830 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bd83a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd83e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bd842:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bd846:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bd848:	aa04      	add	r2, sp, #16
   bd84a:	a903      	add	r1, sp, #12
   bd84c:	47a0      	blx	r4
}
   bd84e:	e7ef      	b.n	bd830 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bd850:	000c4ad4 	.word	0x000c4ad4
   bd854:	000c4a6b 	.word	0x000c4a6b

000bd858 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bd858:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bd85a:	2000      	movs	r0, #0
   bd85c:	f7fe fdd6 	bl	bc40c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bd860:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bd864:	bd08      	pop	{r3, pc}

000bd866 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bd866:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bd868:	2100      	movs	r1, #0
   bd86a:	f7fe bdd7 	b.w	bc41c <hal_ble_gap_set_tx_power>

000bd86e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bd86e:	b919      	cbnz	r1, bd878 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bd870:	460a      	mov	r2, r1
   bd872:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bd874:	f7fe bdda 	b.w	bc42c <hal_ble_gap_set_advertising_data>
   bd878:	e9d1 0100 	ldrd	r0, r1, [r1]
   bd87c:	2200      	movs	r2, #0
   bd87e:	e7f9      	b.n	bd874 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bd880 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bd880:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bd882:	69d8      	ldr	r0, [r3, #28]
}
   bd884:	2800      	cmp	r0, #0
   bd886:	bfd4      	ite	le
   bd888:	2000      	movle	r0, #0
   bd88a:	2001      	movgt	r0, #1
   bd88c:	4770      	bx	lr

000bd88e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd88e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd890:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd894:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd896:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bd89a:	42ae      	cmp	r6, r5
   bd89c:	d004      	beq.n	bd8a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bd89e:	4628      	mov	r0, r5
   bd8a0:	f7ff fb62 	bl	bcf68 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bd8a4:	3510      	adds	r5, #16
   bd8a6:	e7f8      	b.n	bd89a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd8a8:	6820      	ldr	r0, [r4, #0]
   bd8aa:	f7ff f907 	bl	bcabc <free>
}
   bd8ae:	4620      	mov	r0, r4
   bd8b0:	bd70      	pop	{r4, r5, r6, pc}

000bd8b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bd8b2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bd8b4:	1e14      	subs	r4, r2, #0
   bd8b6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bd8b8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bd8ba:	db02      	blt.n	bd8c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bd8bc:	1862      	adds	r2, r4, r1
   bd8be:	429a      	cmp	r2, r3
   bd8c0:	dd00      	ble.n	bd8c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bd8c2:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bd8c4:	682a      	ldr	r2, [r5, #0]
   bd8c6:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bd8c8:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bd8ca:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bd8cc:	1a52      	subs	r2, r2, r1
   bd8ce:	f003 fe13 	bl	c14f8 <memmove>
    size_ -= n;
   bd8d2:	686a      	ldr	r2, [r5, #4]
   bd8d4:	1b12      	subs	r2, r2, r4
   bd8d6:	606a      	str	r2, [r5, #4]
}
   bd8d8:	bd38      	pop	{r3, r4, r5, pc}

000bd8da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bd8da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bd8dc:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bd8de:	4604      	mov	r4, r0
   bd8e0:	460d      	mov	r5, r1
   bd8e2:	ab01      	add	r3, sp, #4
   bd8e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   bd8e8:	f7ff fc72 	bl	bd1d0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bd8ec:	4602      	mov	r2, r0
   bd8ee:	b138      	cbz	r0, bd900 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bd8f0:	9901      	ldr	r1, [sp, #4]
   bd8f2:	4620      	mov	r0, r4
   bd8f4:	f7ff ffdd 	bl	bd8b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bd8f8:	4629      	mov	r1, r5
   bd8fa:	4620      	mov	r0, r4
   bd8fc:	f7ff ffed 	bl	bd8da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bd900:	b003      	add	sp, #12
   bd902:	bd30      	pop	{r4, r5, pc}

000bd904 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bd904:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bd906:	460c      	mov	r4, r1
   bd908:	b929      	cbnz	r1, bd916 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bd90a:	460a      	mov	r2, r1
   bd90c:	4608      	mov	r0, r1
}
   bd90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bd912:	f7fe bd93 	b.w	bc43c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   bd916:	2101      	movs	r1, #1
   bd918:	4620      	mov	r0, r4
   bd91a:	f7ff ffde 	bl	bd8da <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bd91e:	e9d4 0100 	ldrd	r0, r1, [r4]
   bd922:	2200      	movs	r2, #0
   bd924:	e7f3      	b.n	bd90e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000bd926 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   bd926:	b538      	push	{r3, r4, r5, lr}
   bd928:	4604      	mov	r4, r0
   bd92a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   bd92c:	f7ff ff9f 	bl	bd86e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   bd930:	2800      	cmp	r0, #0
   bd932:	db0a      	blt.n	bd94a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   bd934:	4629      	mov	r1, r5
   bd936:	4620      	mov	r0, r4
   bd938:	f7ff ffe4 	bl	bd904 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   bd93c:	2800      	cmp	r0, #0
   bd93e:	db04      	blt.n	bd94a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   bd940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bd944:	2000      	movs	r0, #0
   bd946:	f7fe bd81 	b.w	bc44c <hal_ble_gap_start_advertising>
}
   bd94a:	bd38      	pop	{r3, r4, r5, pc}

000bd94c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bd94c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd94e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bd950:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bd952:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd954:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bd956:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd958:	f7f6 fb9d 	bl	b4096 <_Znwj>
   bd95c:	b118      	cbz	r0, bd966 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bd95e:	682b      	ldr	r3, [r5, #0]
   bd960:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd962:	686b      	ldr	r3, [r5, #4]
   bd964:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bd966:	4b03      	ldr	r3, [pc, #12]	; (bd974 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bd968:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd96a:	4b03      	ldr	r3, [pc, #12]	; (bd978 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd96c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd96e:	60a3      	str	r3, [r4, #8]
      }
   bd970:	4620      	mov	r0, r4
   bd972:	bd38      	pop	{r3, r4, r5, pc}
   bd974:	000bd211 	.word	0x000bd211
   bd978:	000bd229 	.word	0x000bd229

000bd97c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bd97c:	680b      	ldr	r3, [r1, #0]
   bd97e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bd980:	b113      	cbz	r3, bd988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bd982:	685a      	ldr	r2, [r3, #4]
   bd984:	3201      	adds	r2, #1
   bd986:	605a      	str	r2, [r3, #4]
      }
   bd988:	4770      	bx	lr

000bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bd98a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd98c:	f851 3b04 	ldr.w	r3, [r1], #4
   bd990:	4604      	mov	r4, r0
   bd992:	f840 3b04 	str.w	r3, [r0], #4
   bd996:	f7ff fff1 	bl	bd97c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bd99a:	6823      	ldr	r3, [r4, #0]
   bd99c:	b90b      	cbnz	r3, bd9a2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bd99e:	f7ff fc2d 	bl	bd1fc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bd9a2:	4620      	mov	r0, r4
   bd9a4:	bd10      	pop	{r4, pc}

000bd9a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bd9a6:	b510      	push	{r4, lr}
   bd9a8:	f851 3b04 	ldr.w	r3, [r1], #4
   bd9ac:	4604      	mov	r4, r0
   bd9ae:	f840 3b04 	str.w	r3, [r0], #4
   bd9b2:	f7ff ffe3 	bl	bd97c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bd9b6:	4620      	mov	r0, r4
   bd9b8:	bd10      	pop	{r4, pc}

000bd9ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bd9ba:	b510      	push	{r4, lr}
   bd9bc:	f851 3b04 	ldr.w	r3, [r1], #4
   bd9c0:	4604      	mov	r4, r0
   bd9c2:	f840 3b04 	str.w	r3, [r0], #4
   bd9c6:	f7ff ffd9 	bl	bd97c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bd9ca:	4620      	mov	r0, r4
   bd9cc:	bd10      	pop	{r4, pc}

000bd9ce <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bd9ce:	b510      	push	{r4, lr}
   bd9d0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bd9d2:	3004      	adds	r0, #4
   bd9d4:	f7f7 fbbe 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bd9d8:	4620      	mov	r0, r4
   bd9da:	bd10      	pop	{r4, pc}

000bd9dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd9dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd9de:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd9e2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd9e4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bd9e8:	42ae      	cmp	r6, r5
   bd9ea:	d004      	beq.n	bd9f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bd9ec:	1d28      	adds	r0, r5, #4
   bd9ee:	f7f7 fbb1 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd9f2:	3508      	adds	r5, #8
   bd9f4:	e7f8      	b.n	bd9e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd9f6:	6820      	ldr	r0, [r4, #0]
   bd9f8:	f7ff f860 	bl	bcabc <free>
}
   bd9fc:	4620      	mov	r0, r4
   bd9fe:	bd70      	pop	{r4, r5, r6, pc}

000bda00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bda00:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bda02:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bda06:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bda08:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bda0c:	42ae      	cmp	r6, r5
   bda0e:	d004      	beq.n	bda1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bda10:	1d28      	adds	r0, r5, #4
   bda12:	f7f7 fb9f 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda16:	3508      	adds	r5, #8
   bda18:	e7f8      	b.n	bda0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bda1a:	6820      	ldr	r0, [r4, #0]
   bda1c:	f7ff f84e 	bl	bcabc <free>
}
   bda20:	4620      	mov	r0, r4
   bda22:	bd70      	pop	{r4, r5, r6, pc}

000bda24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bda24:	b510      	push	{r4, lr}
   bda26:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bda28:	3024      	adds	r0, #36	; 0x24
   bda2a:	f7ff ffe9 	bl	bda00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bda2e:	f104 0018 	add.w	r0, r4, #24
   bda32:	f7ff ffd3 	bl	bd9dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bda36:	bd10      	pop	{r4, pc}

000bda38 <__tcf_0>:
    static BleLocalDevice instance;
   bda38:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bda3a:	4b17      	ldr	r3, [pc, #92]	; (bda98 <__tcf_0+0x60>)
   bda3c:	681c      	ldr	r4, [r3, #0]
   bda3e:	b354      	cbz	r4, bda96 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bda40:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bda44:	f7f6 fc96 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
   bda48:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bda4c:	f7f6 fc92 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
   bda50:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bda54:	f7f6 fc8e 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
   bda58:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bda5c:	f7f6 fc8a 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bda60:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bda64:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bda68:	42ae      	cmp	r6, r5
   bda6a:	d004      	beq.n	bda76 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bda6c:	1d28      	adds	r0, r5, #4
   bda6e:	f7f7 fb71 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda72:	3508      	adds	r5, #8
   bda74:	e7f8      	b.n	bda68 <__tcf_0+0x30>
    ::free(ptr);
   bda76:	69a0      	ldr	r0, [r4, #24]
   bda78:	f7ff f820 	bl	bcabc <free>
    ~BleLocalDeviceImpl() = default;
   bda7c:	f104 000c 	add.w	r0, r4, #12
   bda80:	f7ff ffbe 	bl	bda00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bda84:	4620      	mov	r0, r4
   bda86:	f7ff ffa9 	bl	bd9dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bda8a:	4620      	mov	r0, r4
   bda8c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bda8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bda92:	f7f6 bb06 	b.w	b40a2 <_ZdlPvj>
   bda96:	bd70      	pop	{r4, r5, r6, pc}
   bda98:	2003e644 	.word	0x2003e644

000bda9c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bda9c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bda9e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bdaa0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bdaa4:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bdaa8:	6803      	ldr	r3, [r0, #0]
   bdaaa:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bdaac:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bdaae:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bdab0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bdab2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bdab4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bdab6:	f7f7 fb4d 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bdaba:	b002      	add	sp, #8
   bdabc:	bd10      	pop	{r4, pc}

000bdabe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bdabe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bdac0:	b510      	push	{r4, lr}
      if (_M_empty())
   bdac2:	b90a      	cbnz	r2, bdac8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bdac4:	f002 feea 	bl	c089c <_ZSt25__throw_bad_function_callv>
    }
   bdac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bdacc:	68c3      	ldr	r3, [r0, #12]
   bdace:	4718      	bx	r3

000bdad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bdad0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bdad2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bdad4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bdad6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bdad8:	dd03      	ble.n	bdae2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bdada:	f7fe fff7 	bl	bcacc <realloc>
            if (!d) {
   bdade:	b918      	cbnz	r0, bdae8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bdae0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bdae2:	f7fe ffeb 	bl	bcabc <free>
        T* d = nullptr;
   bdae6:	2000      	movs	r0, #0
        data_ = d;
   bdae8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bdaea:	60a5      	str	r5, [r4, #8]
        return true;
   bdaec:	2001      	movs	r0, #1
   bdaee:	e7f7      	b.n	bdae0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bdaf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bdaf0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bdaf2:	6883      	ldr	r3, [r0, #8]
   bdaf4:	428b      	cmp	r3, r1
   bdaf6:	da02      	bge.n	bdafe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bdaf8:	f7ff ffea 	bl	bdad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bdafc:	bd08      	pop	{r3, pc}
    return true;
   bdafe:	2001      	movs	r0, #1
   bdb00:	e7fc      	b.n	bdafc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bdb02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bdb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdb06:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bdb08:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bdb0a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bdb0c:	4419      	add	r1, r3
   bdb0e:	6883      	ldr	r3, [r0, #8]
   bdb10:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bdb12:	4604      	mov	r4, r0
   bdb14:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bdb16:	dc12      	bgt.n	bdb3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bdb18:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdb1a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bdb1c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdb1e:	1bd2      	subs	r2, r2, r7
   bdb20:	4631      	mov	r1, r6
   bdb22:	1970      	adds	r0, r6, r5
   bdb24:	f003 fce8 	bl	c14f8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bdb28:	462a      	mov	r2, r5
   bdb2a:	4641      	mov	r1, r8
   bdb2c:	4630      	mov	r0, r6
   bdb2e:	f003 fcd5 	bl	c14dc <memcpy>
    size_ += n;
   bdb32:	6863      	ldr	r3, [r4, #4]
   bdb34:	442b      	add	r3, r5
   bdb36:	6063      	str	r3, [r4, #4]
    return true;
   bdb38:	2001      	movs	r0, #1
}
   bdb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bdb3e:	f7ff ffc7 	bl	bdad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bdb42:	2800      	cmp	r0, #0
   bdb44:	d1e8      	bne.n	bdb18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bdb46:	e7f8      	b.n	bdb3a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bdb48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bdb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdb4a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdb4c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bdb50:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bdb52:	4604      	mov	r4, r0
   bdb54:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdb56:	da0b      	bge.n	bdb70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bdb58:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdb5a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bdb5c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdb5e:	1b52      	subs	r2, r2, r5
   bdb60:	1c48      	adds	r0, r1, #1
   bdb62:	f003 fcc9 	bl	c14f8 <memmove>
    new(p) T(std::move(value));
   bdb66:	557e      	strb	r6, [r7, r5]
    ++size_;
   bdb68:	6863      	ldr	r3, [r4, #4]
   bdb6a:	3301      	adds	r3, #1
   bdb6c:	6063      	str	r3, [r4, #4]
}
   bdb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdb70:	3101      	adds	r1, #1
   bdb72:	f7ff ffad 	bl	bdad0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bdb76:	2800      	cmp	r0, #0
   bdb78:	d1ee      	bne.n	bdb58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bdb7a:	e7f8      	b.n	bdb6e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bdb7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bdb7c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bdb7e:	6841      	ldr	r1, [r0, #4]
   bdb80:	f7ff bfe2 	b.w	bdb48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bdb84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bdb84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdb88:	4604      	mov	r4, r0
   bdb8a:	461d      	mov	r5, r3
   bdb8c:	460f      	mov	r7, r1
   bdb8e:	ab01      	add	r3, sp, #4
   bdb90:	4690      	mov	r8, r2
   bdb92:	460a      	mov	r2, r1
   bdb94:	e9d0 0100 	ldrd	r0, r1, [r0]
   bdb98:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bdb9c:	f7ff fb18 	bl	bd1d0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bdba0:	1cae      	adds	r6, r5, #2
   bdba2:	6863      	ldr	r3, [r4, #4]
   bdba4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bdba6:	f1b9 0f00 	cmp.w	r9, #0
   bdbaa:	d126      	bne.n	bdbfa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bdbac:	b328      	cbz	r0, bdbfa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bdbae:	4433      	add	r3, r6
   bdbb0:	1a1b      	subs	r3, r3, r0
   bdbb2:	2bff      	cmp	r3, #255	; 0xff
   bdbb4:	d809      	bhi.n	bdbca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bdbb6:	9901      	ldr	r1, [sp, #4]
   bdbb8:	4620      	mov	r0, r4
   bdbba:	f7ff fe7a 	bl	bd8b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bdbbe:	6861      	ldr	r1, [r4, #4]
   bdbc0:	4620      	mov	r0, r4
   bdbc2:	4431      	add	r1, r6
   bdbc4:	f7ff ff94 	bl	bdaf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bdbc8:	b918      	cbnz	r0, bdbd2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bdbca:	6860      	ldr	r0, [r4, #4]
}
   bdbcc:	b003      	add	sp, #12
   bdbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bdbd2:	1c6a      	adds	r2, r5, #1
   bdbd4:	9901      	ldr	r1, [sp, #4]
   bdbd6:	b2d2      	uxtb	r2, r2
   bdbd8:	4620      	mov	r0, r4
   bdbda:	f7ff ffb5 	bl	bdb48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bdbde:	9901      	ldr	r1, [sp, #4]
   bdbe0:	463a      	mov	r2, r7
   bdbe2:	3101      	adds	r1, #1
   bdbe4:	4620      	mov	r0, r4
   bdbe6:	f7ff ffaf 	bl	bdb48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bdbea:	9901      	ldr	r1, [sp, #4]
   bdbec:	462b      	mov	r3, r5
   bdbee:	4642      	mov	r2, r8
   bdbf0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bdbf2:	4620      	mov	r0, r4
   bdbf4:	f7ff ff85 	bl	bdb02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bdbf8:	e7e7      	b.n	bdbca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bdbfa:	18f1      	adds	r1, r6, r3
   bdbfc:	29ff      	cmp	r1, #255	; 0xff
   bdbfe:	d8e4      	bhi.n	bdbca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bdc00:	4620      	mov	r0, r4
   bdc02:	f7ff ff75 	bl	bdaf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bdc06:	2800      	cmp	r0, #0
   bdc08:	d0df      	beq.n	bdbca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bdc0a:	1c69      	adds	r1, r5, #1
   bdc0c:	b2c9      	uxtb	r1, r1
   bdc0e:	4620      	mov	r0, r4
   bdc10:	f7ff ffb4 	bl	bdb7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bdc14:	4639      	mov	r1, r7
   bdc16:	4620      	mov	r0, r4
   bdc18:	f7ff ffb0 	bl	bdb7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bdc1c:	6861      	ldr	r1, [r4, #4]
   bdc1e:	462b      	mov	r3, r5
   bdc20:	4642      	mov	r2, r8
   bdc22:	e7e6      	b.n	bdbf2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bdc24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bdc24:	b430      	push	{r4, r5}
   bdc26:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bdc2a:	b11a      	cbz	r2, bdc34 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bdc2c:	9502      	str	r5, [sp, #8]
}
   bdc2e:	bc30      	pop	{r4, r5}
   bdc30:	f7ff bfa8 	b.w	bdb84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bdc34:	6840      	ldr	r0, [r0, #4]
}
   bdc36:	bc30      	pop	{r4, r5}
   bdc38:	4770      	bx	lr

000bdc3a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bdc3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bdc3c:	2300      	movs	r3, #0
   bdc3e:	e9c0 3300 	strd	r3, r3, [r0]
   bdc42:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bdc44:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bdc46:	9300      	str	r3, [sp, #0]
   bdc48:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bdc4a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bdc4e:	4619      	mov	r1, r3
   bdc50:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bdc54:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bdc56:	f7ff ffe5 	bl	bdc24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bdc5a:	4620      	mov	r0, r4
   bdc5c:	b004      	add	sp, #16
   bdc5e:	bd10      	pop	{r4, pc}

000bdc60 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bdc60:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bdc62:	9300      	str	r3, [sp, #0]
   bdc64:	4613      	mov	r3, r2
   bdc66:	460a      	mov	r2, r1
   bdc68:	21ff      	movs	r1, #255	; 0xff
   bdc6a:	f7ff ffdb 	bl	bdc24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bdc6e:	b003      	add	sp, #12
   bdc70:	f85d fb04 	ldr.w	pc, [sp], #4

000bdc74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bdc74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bdc76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdc78:	4604      	mov	r4, r0
   bdc7a:	460d      	mov	r5, r1
   bdc7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bdc7e:	d914      	bls.n	bdcaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bdc80:	4290      	cmp	r0, r2
   bdc82:	d213      	bcs.n	bdcac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bdc84:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bdc88:	1a75      	subs	r5, r6, r1
   bdc8a:	f1a1 0708 	sub.w	r7, r1, #8
   bdc8e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bdc90:	42b7      	cmp	r7, r6
   bdc92:	d018      	beq.n	bdcc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bdc94:	b11c      	cbz	r4, bdc9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bdc96:	4631      	mov	r1, r6
   bdc98:	4620      	mov	r0, r4
   bdc9a:	f7ff fe8e 	bl	bd9ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bdc9e:	1d30      	adds	r0, r6, #4
   bdca0:	f7f7 fa58 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bdca4:	3e08      	subs	r6, #8
   bdca6:	3c08      	subs	r4, #8
   bdca8:	e7f2      	b.n	bdc90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bdcaa:	d00c      	beq.n	bdcc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bdcac:	42b5      	cmp	r5, r6
   bdcae:	d00a      	beq.n	bdcc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bdcb0:	b11c      	cbz	r4, bdcba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bdcb2:	4629      	mov	r1, r5
   bdcb4:	4620      	mov	r0, r4
   bdcb6:	f7ff fe80 	bl	bd9ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bdcba:	1d28      	adds	r0, r5, #4
   bdcbc:	f7f7 fa4a 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bdcc0:	3508      	adds	r5, #8
   bdcc2:	3408      	adds	r4, #8
   bdcc4:	e7f2      	b.n	bdcac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bdcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdcc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bdcc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bdcca:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bdccc:	6846      	ldr	r6, [r0, #4]
   bdcce:	4668      	mov	r0, sp
   bdcd0:	f7ff fe73 	bl	bd9ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bdcd4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bdcd8:	429f      	cmp	r7, r3
   bdcda:	db12      	blt.n	bdd02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bdcdc:	3701      	adds	r7, #1
        if (n > 0) {
   bdcde:	2f00      	cmp	r7, #0
   bdce0:	dd29      	ble.n	bdd36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bdce2:	00f8      	lsls	r0, r7, #3
   bdce4:	f7fe fee2 	bl	bcaac <malloc>
            if (!d) {
   bdce8:	4605      	mov	r5, r0
   bdcea:	b1f0      	cbz	r0, bdd2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bdcec:	e9d4 1200 	ldrd	r1, r2, [r4]
   bdcf0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bdcf4:	f7ff ffbe 	bl	bdc74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bdcf8:	6820      	ldr	r0, [r4, #0]
   bdcfa:	f7fe fedf 	bl	bcabc <free>
        data_ = d;
   bdcfe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bdd00:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bdd02:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bdd04:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bdd06:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bdd0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bdd0e:	4631      	mov	r1, r6
   bdd10:	f106 0008 	add.w	r0, r6, #8
   bdd14:	f7ff ffae 	bl	bdc74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bdd18:	b11e      	cbz	r6, bdd22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bdd1a:	4669      	mov	r1, sp
   bdd1c:	4630      	mov	r0, r6
   bdd1e:	f7ff fe4c 	bl	bd9ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bdd22:	6863      	ldr	r3, [r4, #4]
   bdd24:	3301      	adds	r3, #1
   bdd26:	6063      	str	r3, [r4, #4]
    return true;
   bdd28:	2501      	movs	r5, #1
   bdd2a:	a801      	add	r0, sp, #4
   bdd2c:	f7f7 fa12 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bdd30:	4628      	mov	r0, r5
   bdd32:	b003      	add	sp, #12
   bdd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bdd36:	2500      	movs	r5, #0
   bdd38:	e7de      	b.n	bdcf8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bdd3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bdd3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bdd3c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bdd40:	4605      	mov	r5, r0
   bdd42:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bdd44:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bdd48:	42a6      	cmp	r6, r4
   bdd4a:	d005      	beq.n	bdd58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bdd4c:	4639      	mov	r1, r7
   bdd4e:	4620      	mov	r0, r4
   bdd50:	f7ff fce1 	bl	bd716 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bdd54:	b108      	cbz	r0, bdd5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bdd56:	b914      	cbnz	r4, bdd5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bdd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bdd5a:	3408      	adds	r4, #8
   bdd5c:	e7f4      	b.n	bdd48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bdd5e:	1d20      	adds	r0, r4, #4
   bdd60:	f7f7 f9f8 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bdd64:	e9d5 3200 	ldrd	r3, r2, [r5]
   bdd68:	f104 0108 	add.w	r1, r4, #8
   bdd6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bdd70:	4620      	mov	r0, r4
   bdd72:	f7ff ff7f 	bl	bdc74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bdd76:	686b      	ldr	r3, [r5, #4]
   bdd78:	3b01      	subs	r3, #1
   bdd7a:	606b      	str	r3, [r5, #4]
    return true;
   bdd7c:	e7ec      	b.n	bdd58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bdd80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bdd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdd84:	4605      	mov	r5, r0
   bdd86:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bdd88:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bdd8a:	460c      	mov	r4, r1
        WiringBleLock lk;
   bdd8c:	f7ff faa0 	bl	bd2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bdd90:	682e      	ldr	r6, [r5, #0]
   bdd92:	1ef3      	subs	r3, r6, #3
   bdd94:	2b0d      	cmp	r3, #13
   bdd96:	d83c      	bhi.n	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bdd98:	e8df f013 	tbh	[pc, r3, lsl #1]
   bdd9c:	0053000e 	.word	0x0053000e
   bdda0:	00d1003b 	.word	0x00d1003b
   bdda4:	003b003b 	.word	0x003b003b
   bdda8:	003b003b 	.word	0x003b003b
   bddac:	009b003b 	.word	0x009b003b
   bddb0:	009b009b 	.word	0x009b009b
   bddb4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bddb8:	a804      	add	r0, sp, #16
   bddba:	f7ff fc77 	bl	bd6ac <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bddbe:	9b04      	ldr	r3, [sp, #16]
   bddc0:	89aa      	ldrh	r2, [r5, #12]
   bddc2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bddc4:	6869      	ldr	r1, [r5, #4]
   bddc6:	9804      	ldr	r0, [sp, #16]
   bddc8:	3108      	adds	r1, #8
   bddca:	3002      	adds	r0, #2
   bddcc:	f7ff fa9a 	bl	bd304 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bddd0:	a904      	add	r1, sp, #16
   bddd2:	a806      	add	r0, sp, #24
   bddd4:	f7ff fdf1 	bl	bd9ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bddd8:	a906      	add	r1, sp, #24
   bddda:	f104 0018 	add.w	r0, r4, #24
   bddde:	f7ff ff73 	bl	bdcc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bdde2:	4605      	mov	r5, r0
   bdde4:	a807      	add	r0, sp, #28
   bdde6:	f7f7 f9b5 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bddea:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bddec:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bddee:	b9b5      	cbnz	r5, bde1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bddf0:	4b5d      	ldr	r3, [pc, #372]	; (bdf68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bddf2:	495e      	ldr	r1, [pc, #376]	; (bdf6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bddf4:	9300      	str	r3, [sp, #0]
   bddf6:	2032      	movs	r0, #50	; 0x32
   bddf8:	462b      	mov	r3, r5
   bddfa:	aa06      	add	r2, sp, #24
   bddfc:	9507      	str	r5, [sp, #28]
   bddfe:	f7fe fd57 	bl	bc8b0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bde02:	9b04      	ldr	r3, [sp, #16]
   bde04:	4629      	mov	r1, r5
   bde06:	8818      	ldrh	r0, [r3, #0]
   bde08:	f7fe fb28 	bl	bc45c <hal_ble_gap_disconnect>
   bde0c:	a805      	add	r0, sp, #20
   bde0e:	f7f7 f9a1 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bde12:	a803      	add	r0, sp, #12
   bde14:	f7ff fa6a 	bl	bd2ec <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bde18:	b00e      	add	sp, #56	; 0x38
   bde1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bde1e:	4a54      	ldr	r2, [pc, #336]	; (bdf70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bde20:	9200      	str	r2, [sp, #0]
   bde22:	2300      	movs	r3, #0
   bde24:	4951      	ldr	r1, [pc, #324]	; (bdf6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bde26:	9307      	str	r3, [sp, #28]
   bde28:	aa06      	add	r2, sp, #24
   bde2a:	2001      	movs	r0, #1
   bde2c:	f7fe fd40 	bl	bc8b0 <log_message>
                if (impl->connectedCallback_) {
   bde30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bde32:	2b00      	cmp	r3, #0
   bde34:	d0ea      	beq.n	bde0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bde36:	a904      	add	r1, sp, #16
   bde38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bde3c:	f7ff fe3f 	bl	bdabe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bde40:	e7e4      	b.n	bde0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bde42:	89a9      	ldrh	r1, [r5, #12]
   bde44:	4620      	mov	r0, r4
   bde46:	f7ff fb9b 	bl	bd580 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bde4a:	4606      	mov	r6, r0
   bde4c:	2800      	cmp	r0, #0
   bde4e:	d0e0      	beq.n	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bde50:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bde52:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bde56:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bde5a:	8029      	strh	r1, [r5, #0]
   bde5c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bde60:	429a      	cmp	r2, r3
   bde62:	d003      	beq.n	bde6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bde64:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bde68:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bde6a:	e7f9      	b.n	bde60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bde6c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bde70:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bde74:	45b8      	cmp	r8, r7
   bde76:	d004      	beq.n	bde82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bde78:	1d38      	adds	r0, r7, #4
   bde7a:	f7f7 f96b 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bde7e:	3708      	adds	r7, #8
   bde80:	e7f8      	b.n	bde74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bde82:	2300      	movs	r3, #0
   bde84:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bde86:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bde8a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bde8e:	45b8      	cmp	r8, r7
   bde90:	d004      	beq.n	bde9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bde92:	1d38      	adds	r0, r7, #4
   bde94:	f7f7 f95e 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bde98:	3708      	adds	r7, #8
   bde9a:	e7f8      	b.n	bde8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bde9c:	2300      	movs	r3, #0
   bde9e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bdea0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bdea2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bdea4:	b123      	cbz	r3, bdeb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bdea6:	4631      	mov	r1, r6
   bdea8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bdeac:	f7ff fe07 	bl	bdabe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bdeb0:	2300      	movs	r3, #0
   bdeb2:	2220      	movs	r2, #32
   bdeb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bdeb8:	4a2e      	ldr	r2, [pc, #184]	; (bdf74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bdeba:	9200      	str	r2, [sp, #0]
   bdebc:	492b      	ldr	r1, [pc, #172]	; (bdf6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bdebe:	aa06      	add	r2, sp, #24
   bdec0:	2001      	movs	r0, #1
   bdec2:	f7fe fcf5 	bl	bc8b0 <log_message>
                    impl->peers_.removeOne(*peer);
   bdec6:	4631      	mov	r1, r6
   bdec8:	f104 0018 	add.w	r0, r4, #24
   bdecc:	f7ff ff35 	bl	bdd3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bded0:	e79f      	b.n	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bded2:	89a9      	ldrh	r1, [r5, #12]
   bded4:	4620      	mov	r0, r4
   bded6:	f7ff fb53 	bl	bd580 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bdeda:	2800      	cmp	r0, #0
   bdedc:	d099      	beq.n	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bdede:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bdee0:	2b00      	cmp	r3, #0
   bdee2:	d096      	beq.n	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bdee4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bdee6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bdee8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bdeec:	d001      	beq.n	bdef2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bdeee:	2e10      	cmp	r6, #16
   bdef0:	d117      	bne.n	bdf22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bdef2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bdef4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bdef6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bdef8:	2506      	movs	r5, #6
                        };
   bdefa:	f88d 3015 	strb.w	r3, [sp, #21]
   bdefe:	9104      	str	r1, [sp, #16]
   bdf00:	f88d 2014 	strb.w	r2, [sp, #20]
   bdf04:	9006      	str	r0, [sp, #24]
   bdf06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bdf0a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bdf0c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bdf10:	9508      	str	r5, [sp, #32]
   bdf12:	e883 0003 	stmia.w	r3, {r0, r1}
   bdf16:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bdf18:	a906      	add	r1, sp, #24
   bdf1a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bdf1e:	4798      	blx	r3
   bdf20:	e777      	b.n	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bdf22:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bdf24:	bf01      	itttt	eq
   bdf26:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bdf28:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bdf2a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bdf2e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bdf30:	bf0f      	iteee	eq
   bdf32:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bdf36:	461a      	movne	r2, r3
   bdf38:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bdf3a:	461d      	movne	r5, r3
   bdf3c:	e7dd      	b.n	bdefa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bdf3e:	89a9      	ldrh	r1, [r5, #12]
   bdf40:	4620      	mov	r0, r4
   bdf42:	f7ff fb1d 	bl	bd580 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bdf46:	4601      	mov	r1, r0
   bdf48:	2800      	cmp	r0, #0
   bdf4a:	f43f af62 	beq.w	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bdf4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bdf50:	2b00      	cmp	r3, #0
   bdf52:	f43f af5e 	beq.w	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bdf56:	686b      	ldr	r3, [r5, #4]
   bdf58:	9306      	str	r3, [sp, #24]
   bdf5a:	aa06      	add	r2, sp, #24
   bdf5c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bdf5e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bdf62:	4798      	blx	r3
   bdf64:	e755      	b.n	bde12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bdf66:	bf00      	nop
   bdf68:	000c4aec 	.word	0x000c4aec
   bdf6c:	000c4a6b 	.word	0x000c4a6b
   bdf70:	000c4b12 	.word	0x000c4b12
   bdf74:	000c4b2f 	.word	0x000c4b2f

000bdf78 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bdf78:	b513      	push	{r0, r1, r4, lr}
   bdf7a:	460b      	mov	r3, r1
   bdf7c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdf7e:	e9d0 0100 	ldrd	r0, r1, [r0]
   bdf82:	466c      	mov	r4, sp
   bdf84:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bdf88:	e893 0003 	ldmia.w	r3, {r0, r1}
   bdf8c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bdf90:	e894 0003 	ldmia.w	r4, {r0, r1}
   bdf94:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bdf98:	b002      	add	sp, #8
   bdf9a:	bd10      	pop	{r4, pc}

000bdf9c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bdf9c:	b538      	push	{r3, r4, r5, lr}
   bdf9e:	4605      	mov	r5, r0
   bdfa0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bdfa2:	f7ff ffe9 	bl	bdf78 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdfa6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bdfa8:	68a2      	ldr	r2, [r4, #8]
   bdfaa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdfac:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdfae:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bdfb0:	68e2      	ldr	r2, [r4, #12]
   bdfb2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bdfb4:	60e3      	str	r3, [r4, #12]
      }
   bdfb6:	bd38      	pop	{r3, r4, r5, pc}

000bdfb8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bdfb8:	b570      	push	{r4, r5, r6, lr}
   bdfba:	4604      	mov	r4, r0
   bdfbc:	b08c      	sub	sp, #48	; 0x30
   bdfbe:	460e      	mov	r6, r1
   bdfc0:	9201      	str	r2, [sp, #4]
   bdfc2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bdfc4:	f7ff fabc 	bl	bd540 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bdfc8:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bdfca:	9901      	ldr	r1, [sp, #4]
   bdfcc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bdfd0:	f7ff f86b 	bl	bd0aa <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bdfd4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bdfd8:	b1cd      	cbz	r5, be00e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bdfda:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bdfdc:	9502      	str	r5, [sp, #8]
   bdfde:	a902      	add	r1, sp, #8
   bdfe0:	a804      	add	r0, sp, #16
   bdfe2:	9303      	str	r3, [sp, #12]
   bdfe4:	f7ff fcb2 	bl	bd94c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bdfe8:	2300      	movs	r3, #0
	__x.swap(*this);
   bdfea:	a908      	add	r1, sp, #32
   bdfec:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bdfee:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bdff0:	f7ff ffd4 	bl	bdf9c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bdff4:	4631      	mov	r1, r6
   bdff6:	a808      	add	r0, sp, #32
   bdff8:	f7ff ffd0 	bl	bdf9c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bdffc:	a808      	add	r0, sp, #32
   bdffe:	f7f6 f9b9 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
   be002:	a804      	add	r0, sp, #16
   be004:	f7f6 f9b6 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
    }
   be008:	4620      	mov	r0, r4
   be00a:	b00c      	add	sp, #48	; 0x30
   be00c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   be00e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   be010:	e7ea      	b.n	bdfe8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000be014 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   be014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be018:	b087      	sub	sp, #28
   be01a:	461d      	mov	r5, r3
   be01c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   be020:	4680      	mov	r8, r0
   be022:	468b      	mov	fp, r1
   be024:	4692      	mov	sl, r2
   be026:	9912      	ldr	r1, [sp, #72]	; 0x48
   be028:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be02a:	2200      	movs	r2, #0
   be02c:	2068      	movs	r0, #104	; 0x68
   be02e:	9102      	str	r1, [sp, #8]
   be030:	9204      	str	r2, [sp, #16]
   be032:	f7f6 f830 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be036:	1e06      	subs	r6, r0, #0
   be038:	f106 090c 	add.w	r9, r6, #12
   be03c:	d018      	beq.n	be070 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   be03e:	2201      	movs	r2, #1
	: _M_impl(__a)
   be040:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   be042:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   be046:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   be048:	4a15      	ldr	r2, [pc, #84]	; (be0a0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   be04a:	f847 2b20 	str.w	r2, [r7], #32
   be04e:	9b03      	ldr	r3, [sp, #12]
   be050:	9100      	str	r1, [sp, #0]
   be052:	465a      	mov	r2, fp
   be054:	4651      	mov	r1, sl
   be056:	4648      	mov	r0, r9
   be058:	f7ff ffae 	bl	bdfb8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   be05c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be05e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   be060:	682b      	ldr	r3, [r5, #0]
   be062:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   be064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be066:	f106 0534 	add.w	r5, r6, #52	; 0x34
   be06a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be06c:	6823      	ldr	r3, [r4, #0]
   be06e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   be070:	a904      	add	r1, sp, #16
   be072:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   be074:	e9cd 9604 	strd	r9, r6, [sp, #16]
   be078:	f7ff fd10 	bl	bda9c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   be07c:	a805      	add	r0, sp, #20
   be07e:	f7f7 f869 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   be082:	f8d8 3000 	ldr.w	r3, [r8]
   be086:	b93b      	cbnz	r3, be098 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   be088:	4a06      	ldr	r2, [pc, #24]	; (be0a4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   be08a:	4907      	ldr	r1, [pc, #28]	; (be0a8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   be08c:	200a      	movs	r0, #10
}
   be08e:	b007      	add	sp, #28
   be090:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   be094:	f7fe bc04 	b.w	bc8a0 <panic_>
}
   be098:	b007      	add	sp, #28
   be09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be09e:	bf00      	nop
   be0a0:	000c4ba8 	.word	0x000c4ba8
   be0a4:	000bc3bd 	.word	0x000bc3bd
   be0a8:	000c4a54 	.word	0x000c4a54

000be0ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be0ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be0b0:	4604      	mov	r4, r0
   be0b2:	460d      	mov	r5, r1
   be0b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be0b6:	d914      	bls.n	be0e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be0b8:	4290      	cmp	r0, r2
   be0ba:	d213      	bcs.n	be0e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be0bc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be0c0:	1a75      	subs	r5, r6, r1
   be0c2:	f1a1 0708 	sub.w	r7, r1, #8
   be0c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be0c8:	42b7      	cmp	r7, r6
   be0ca:	d018      	beq.n	be0fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be0cc:	b11c      	cbz	r4, be0d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be0ce:	4631      	mov	r1, r6
   be0d0:	4620      	mov	r0, r4
   be0d2:	f7ff fc68 	bl	bd9a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be0d6:	1d30      	adds	r0, r6, #4
   be0d8:	f7f7 f83c 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be0dc:	3e08      	subs	r6, #8
   be0de:	3c08      	subs	r4, #8
   be0e0:	e7f2      	b.n	be0c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be0e2:	d00c      	beq.n	be0fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be0e4:	42b5      	cmp	r5, r6
   be0e6:	d00a      	beq.n	be0fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be0e8:	b11c      	cbz	r4, be0f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be0ea:	4629      	mov	r1, r5
   be0ec:	4620      	mov	r0, r4
   be0ee:	f7ff fc5a 	bl	bd9a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be0f2:	1d28      	adds	r0, r5, #4
   be0f4:	f7f7 f82e 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be0f8:	3508      	adds	r5, #8
   be0fa:	3408      	adds	r4, #8
   be0fc:	e7f2      	b.n	be0e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be100 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be100:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be102:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be104:	4605      	mov	r5, r0
        if (n > 0) {
   be106:	dd11      	ble.n	be12c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be108:	00f0      	lsls	r0, r6, #3
   be10a:	f7fe fccf 	bl	bcaac <malloc>
            if (!d) {
   be10e:	4604      	mov	r4, r0
   be110:	b158      	cbz	r0, be12a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be112:	e9d5 1200 	ldrd	r1, r2, [r5]
   be116:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be11a:	f7ff ffc7 	bl	be0ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be11e:	6828      	ldr	r0, [r5, #0]
   be120:	f7fe fccc 	bl	bcabc <free>
        data_ = d;
   be124:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be126:	60ae      	str	r6, [r5, #8]
        return true;
   be128:	2001      	movs	r0, #1
    }
   be12a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be12c:	2400      	movs	r4, #0
   be12e:	e7f6      	b.n	be11e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be130 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be130:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be132:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be134:	6845      	ldr	r5, [r0, #4]
   be136:	4668      	mov	r0, sp
   be138:	f7ff fc35 	bl	bd9a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be13c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be140:	4299      	cmp	r1, r3
   be142:	da10      	bge.n	be166 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be144:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be146:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be148:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be14c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be150:	4629      	mov	r1, r5
   be152:	f105 0008 	add.w	r0, r5, #8
   be156:	f7ff ffa9 	bl	be0ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be15a:	b98d      	cbnz	r5, be180 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be15c:	6863      	ldr	r3, [r4, #4]
   be15e:	3301      	adds	r3, #1
   be160:	6063      	str	r3, [r4, #4]
    return true;
   be162:	2601      	movs	r6, #1
   be164:	e006      	b.n	be174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be166:	3101      	adds	r1, #1
   be168:	4620      	mov	r0, r4
   be16a:	f7ff ffc9 	bl	be100 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be16e:	4606      	mov	r6, r0
   be170:	2800      	cmp	r0, #0
   be172:	d1e7      	bne.n	be144 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   be174:	a801      	add	r0, sp, #4
   be176:	f7f6 ffed 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be17a:	4630      	mov	r0, r6
   be17c:	b002      	add	sp, #8
   be17e:	bd70      	pop	{r4, r5, r6, pc}
   be180:	4669      	mov	r1, sp
   be182:	4628      	mov	r0, r5
   be184:	f7ff fc0f 	bl	bd9a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be188:	e7e8      	b.n	be15c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be18a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be18a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be18e:	4604      	mov	r4, r0
   be190:	460d      	mov	r5, r1
   be192:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be194:	d914      	bls.n	be1c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be196:	4290      	cmp	r0, r2
   be198:	d213      	bcs.n	be1c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be19a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be19e:	1a75      	subs	r5, r6, r1
   be1a0:	f1a1 0708 	sub.w	r7, r1, #8
   be1a4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be1a6:	42b7      	cmp	r7, r6
   be1a8:	d018      	beq.n	be1dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be1aa:	b11c      	cbz	r4, be1b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   be1ac:	4631      	mov	r1, r6
   be1ae:	4620      	mov	r0, r4
   be1b0:	f7ff fbeb 	bl	bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be1b4:	1d30      	adds	r0, r6, #4
   be1b6:	f7f6 ffcd 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be1ba:	3e08      	subs	r6, #8
   be1bc:	3c08      	subs	r4, #8
   be1be:	e7f2      	b.n	be1a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be1c0:	d00c      	beq.n	be1dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be1c2:	42b5      	cmp	r5, r6
   be1c4:	d00a      	beq.n	be1dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be1c6:	b11c      	cbz	r4, be1d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be1c8:	4629      	mov	r1, r5
   be1ca:	4620      	mov	r0, r4
   be1cc:	f7ff fbdd 	bl	bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be1d0:	1d28      	adds	r0, r5, #4
   be1d2:	f7f6 ffbf 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be1d6:	3508      	adds	r5, #8
   be1d8:	3408      	adds	r4, #8
   be1da:	e7f2      	b.n	be1c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be1de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be1de:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be1e0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be1e2:	4605      	mov	r5, r0
        if (n > 0) {
   be1e4:	dd11      	ble.n	be20a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be1e6:	00f0      	lsls	r0, r6, #3
   be1e8:	f7fe fc60 	bl	bcaac <malloc>
            if (!d) {
   be1ec:	4604      	mov	r4, r0
   be1ee:	b158      	cbz	r0, be208 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be1f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   be1f4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be1f8:	f7ff ffc7 	bl	be18a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be1fc:	6828      	ldr	r0, [r5, #0]
   be1fe:	f7fe fc5d 	bl	bcabc <free>
        data_ = d;
   be202:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be204:	60ae      	str	r6, [r5, #8]
        return true;
   be206:	2001      	movs	r0, #1
    }
   be208:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be20a:	2400      	movs	r4, #0
   be20c:	e7f6      	b.n	be1fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be20e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be210:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be212:	6845      	ldr	r5, [r0, #4]
   be214:	4668      	mov	r0, sp
   be216:	f7ff fbb8 	bl	bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be21a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be21e:	4299      	cmp	r1, r3
   be220:	da10      	bge.n	be244 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be222:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be224:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be226:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be22a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be22e:	4629      	mov	r1, r5
   be230:	f105 0008 	add.w	r0, r5, #8
   be234:	f7ff ffa9 	bl	be18a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be238:	b98d      	cbnz	r5, be25e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be23a:	6863      	ldr	r3, [r4, #4]
   be23c:	3301      	adds	r3, #1
   be23e:	6063      	str	r3, [r4, #4]
    return true;
   be240:	2601      	movs	r6, #1
   be242:	e006      	b.n	be252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be244:	3101      	adds	r1, #1
   be246:	4620      	mov	r0, r4
   be248:	f7ff ffc9 	bl	be1de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be24c:	4606      	mov	r6, r0
   be24e:	2800      	cmp	r0, #0
   be250:	d1e7      	bne.n	be222 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   be252:	a801      	add	r0, sp, #4
   be254:	f7f6 ff7e 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be258:	4630      	mov	r0, r6
   be25a:	b002      	add	sp, #8
   be25c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   be25e:	4669      	mov	r1, sp
   be260:	4628      	mov	r0, r5
   be262:	f7ff fb92 	bl	bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be266:	e7e8      	b.n	be23a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be268 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be26c:	4617      	mov	r7, r2
   be26e:	b0a1      	sub	sp, #132	; 0x84
   be270:	4680      	mov	r8, r0
    WiringBleLock lk;
   be272:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be274:	460e      	mov	r6, r1
    WiringBleLock lk;
   be276:	f7ff f82b 	bl	bd2d0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be27a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   be27c:	7923      	ldrb	r3, [r4, #4]
   be27e:	b953      	cbnz	r3, be296 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   be280:	4639      	mov	r1, r7
   be282:	4640      	mov	r0, r8
   be284:	f7ff fb81 	bl	bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   be288:	a80a      	add	r0, sp, #40	; 0x28
   be28a:	f7ff f82f 	bl	bd2ec <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   be28e:	4640      	mov	r0, r8
   be290:	b021      	add	sp, #132	; 0x84
   be292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   be296:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   be298:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   be29c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   be2a0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   be2a2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   be2a6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   be2aa:	9b03      	ldr	r3, [sp, #12]
   be2ac:	429d      	cmp	r5, r3
   be2ae:	d021      	beq.n	be2f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   be2b0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   be2b4:	4658      	mov	r0, fp
   be2b6:	f109 0114 	add.w	r1, r9, #20
   be2ba:	f7ff f8b6 	bl	bd42a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   be2be:	b1b8      	cbz	r0, be2f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   be2c0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   be2c4:	4650      	mov	r0, sl
   be2c6:	f7ff f8b0 	bl	bd42a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   be2ca:	b188      	cbz	r0, be2f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   be2cc:	6823      	ldr	r3, [r4, #0]
   be2ce:	f8d9 2000 	ldr.w	r2, [r9]
   be2d2:	4053      	eors	r3, r2
   be2d4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   be2d8:	d10a      	bne.n	be2f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   be2da:	2220      	movs	r2, #32
   be2dc:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   be2e0:	4a5e      	ldr	r2, [pc, #376]	; (be45c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   be2e2:	9200      	str	r2, [sp, #0]
   be2e4:	aa15      	add	r2, sp, #84	; 0x54
   be2e6:	495e      	ldr	r1, [pc, #376]	; (be460 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   be2e8:	2032      	movs	r0, #50	; 0x32
   be2ea:	f7fe fae1 	bl	bc8b0 <log_message>
   be2ee:	e7c7      	b.n	be280 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   be2f0:	3508      	adds	r5, #8
   be2f2:	e7da      	b.n	be2aa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   be2f4:	4650      	mov	r0, sl
   be2f6:	f7ff f869 	bl	bd3cc <_ZNK8particle7BleUuid7isValidEv>
   be2fa:	b960      	cbnz	r0, be316 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   be2fc:	4959      	ldr	r1, [pc, #356]	; (be464 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   be2fe:	2201      	movs	r2, #1
   be300:	a815      	add	r0, sp, #84	; 0x54
   be302:	ad15      	add	r5, sp, #84	; 0x54
   be304:	f7ff f83a 	bl	bd37c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   be308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be30a:	46d4      	mov	ip, sl
   be30c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   be310:	682b      	ldr	r3, [r5, #0]
   be312:	f8cc 3000 	str.w	r3, [ip]
   be316:	6833      	ldr	r3, [r6, #0]
   be318:	e9d3 5300 	ldrd	r5, r3, [r3]
   be31c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   be320:	455d      	cmp	r5, fp
   be322:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   be324:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   be326:	d06e      	beq.n	be406 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   be328:	f855 0b08 	ldr.w	r0, [r5], #8
   be32c:	f7ff f87d 	bl	bd42a <_ZNK8particle7BleUuideqERKS0_>
   be330:	2800      	cmp	r0, #0
   be332:	d0f5      	beq.n	be320 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   be334:	f104 0a14 	add.w	sl, r4, #20
   be338:	4650      	mov	r0, sl
   be33a:	f7ff f847 	bl	bd3cc <_ZNK8particle7BleUuid7isValidEv>
   be33e:	b988      	cbnz	r0, be364 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   be340:	4b49      	ldr	r3, [pc, #292]	; (be468 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be342:	4948      	ldr	r1, [pc, #288]	; (be464 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   be344:	881a      	ldrh	r2, [r3, #0]
   be346:	3201      	adds	r2, #1
   be348:	b292      	uxth	r2, r2
   be34a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be34c:	a815      	add	r0, sp, #84	; 0x54
   be34e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   be350:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be352:	f7ff f832 	bl	bd3ba <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   be356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be358:	46d4      	mov	ip, sl
   be35a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   be35e:	682b      	ldr	r3, [r5, #0]
   be360:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   be364:	4b41      	ldr	r3, [pc, #260]	; (be46c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   be366:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   be368:	2228      	movs	r2, #40	; 0x28
   be36a:	2100      	movs	r1, #0
   be36c:	a816      	add	r0, sp, #88	; 0x58
   be36e:	f003 f8dd 	bl	c152c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   be372:	4651      	mov	r1, sl
   be374:	a804      	add	r0, sp, #16
   be376:	f7ff f83b 	bl	bd3f0 <_ZN8particle7BleUuid7halUUIDEv>
   be37a:	ab04      	add	r3, sp, #16
   be37c:	aa18      	add	r2, sp, #96	; 0x60
   be37e:	f10d 0c20 	add.w	ip, sp, #32
   be382:	6818      	ldr	r0, [r3, #0]
   be384:	6859      	ldr	r1, [r3, #4]
   be386:	4615      	mov	r5, r2
   be388:	c503      	stmia	r5!, {r0, r1}
   be38a:	3308      	adds	r3, #8
   be38c:	4563      	cmp	r3, ip
   be38e:	462a      	mov	r2, r5
   be390:	d1f7      	bne.n	be382 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   be392:	6818      	ldr	r0, [r3, #0]
   be394:	6028      	str	r0, [r5, #0]
    return value_;
   be396:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   be398:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   be39c:	f8d9 3000 	ldr.w	r3, [r9]
   be3a0:	8a9b      	ldrh	r3, [r3, #20]
   be3a2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   be3a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be3a8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   be3aa:	4b31      	ldr	r3, [pc, #196]	; (be470 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   be3ac:	2200      	movs	r2, #0
   be3ae:	1da1      	adds	r1, r4, #6
   be3b0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   be3b2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   be3b6:	f7fe f883 	bl	bc4c0 <hal_ble_gatt_server_add_characteristic>
   be3ba:	2800      	cmp	r0, #0
   be3bc:	f47f af60 	bne.w	be280 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   be3c0:	2301      	movs	r3, #1
   be3c2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   be3c4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   be3c6:	4639      	mov	r1, r7
        return characteristics_;
   be3c8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   be3ca:	a80d      	add	r0, sp, #52	; 0x34
   be3cc:	f7ff fadd 	bl	bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be3d0:	4620      	mov	r0, r4
   be3d2:	a90d      	add	r1, sp, #52	; 0x34
   be3d4:	f7ff ff1b 	bl	be20e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   be3d8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be3da:	a80e      	add	r0, sp, #56	; 0x38
   be3dc:	f7f6 feba 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be3e0:	2c00      	cmp	r4, #0
   be3e2:	f47f af4d 	bne.w	be280 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   be3e6:	2320      	movs	r3, #32
   be3e8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   be3ec:	4b21      	ldr	r3, [pc, #132]	; (be474 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   be3ee:	9300      	str	r3, [sp, #0]
   be3f0:	aa0d      	add	r2, sp, #52	; 0x34
   be3f2:	4623      	mov	r3, r4
   be3f4:	e777      	b.n	be2e6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   be3f6:	4639      	mov	r1, r7
   be3f8:	4640      	mov	r0, r8
   be3fa:	f7ff fac6 	bl	bd98a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be3fe:	a80c      	add	r0, sp, #48	; 0x30
   be400:	f7f6 fea8 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be404:	e740      	b.n	be288 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   be406:	a80b      	add	r0, sp, #44	; 0x2c
   be408:	f7ff f92c 	bl	bd664 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   be40c:	4651      	mov	r1, sl
   be40e:	a815      	add	r0, sp, #84	; 0x54
   be410:	f7fe ffee 	bl	bd3f0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   be414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   be416:	2300      	movs	r3, #0
   be418:	3214      	adds	r2, #20
   be41a:	a915      	add	r1, sp, #84	; 0x54
   be41c:	2001      	movs	r0, #1
   be41e:	f7fe f827 	bl	bc470 <hal_ble_gatt_server_add_service>
   be422:	2800      	cmp	r0, #0
   be424:	d1e7      	bne.n	be3f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   be426:	6835      	ldr	r5, [r6, #0]
   be428:	a90b      	add	r1, sp, #44	; 0x2c
   be42a:	a80d      	add	r0, sp, #52	; 0x34
   be42c:	f7ff fabb 	bl	bd9a6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   be430:	4628      	mov	r0, r5
   be432:	a90d      	add	r1, sp, #52	; 0x34
   be434:	f7ff fe7c 	bl	be130 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   be438:	4605      	mov	r5, r0
   be43a:	a80e      	add	r0, sp, #56	; 0x38
   be43c:	f7f6 fe8a 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be440:	2d00      	cmp	r5, #0
   be442:	d0d8      	beq.n	be3f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   be444:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   be446:	6853      	ldr	r3, [r2, #4]
   be448:	6812      	ldr	r2, [r2, #0]
   be44a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   be44e:	3b01      	subs	r3, #1
   be450:	a80c      	add	r0, sp, #48	; 0x30
   be452:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   be456:	f7f6 fe7d 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be45a:	e76b      	b.n	be334 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   be45c:	000c4b4e 	.word	0x000c4b4e
   be460:	000c4a6b 	.word	0x000c4a6b
   be464:	000c4c12 	.word	0x000c4c12
   be468:	2003e63c 	.word	0x2003e63c
   be46c:	002c0003 	.word	0x002c0003
   be470:	000bd7fd 	.word	0x000bd7fd
   be474:	000c4b79 	.word	0x000c4b79

000be478 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   be478:	4802      	ldr	r0, [pc, #8]	; (be484 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   be47a:	2300      	movs	r3, #0
   be47c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   be47e:	f7fe b877 	b.w	bc570 <os_mutex_recursive_create>
   be482:	bf00      	nop
   be484:	2003e640 	.word	0x2003e640

000be488 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   be488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be48a:	4606      	mov	r6, r0
   be48c:	460d      	mov	r5, r1
  size_t n = 0;
   be48e:	188f      	adds	r7, r1, r2
   be490:	2400      	movs	r4, #0
  while (size--) {
   be492:	42bd      	cmp	r5, r7
   be494:	d00c      	beq.n	be4b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   be496:	6833      	ldr	r3, [r6, #0]
   be498:	f815 1b01 	ldrb.w	r1, [r5], #1
   be49c:	689b      	ldr	r3, [r3, #8]
   be49e:	4630      	mov	r0, r6
   be4a0:	4798      	blx	r3
     if (chunk>=0)
   be4a2:	1e03      	subs	r3, r0, #0
   be4a4:	db01      	blt.n	be4aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   be4a6:	441c      	add	r4, r3
  while (size--) {
   be4a8:	e7f3      	b.n	be492 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   be4aa:	2c00      	cmp	r4, #0
   be4ac:	bf08      	it	eq
   be4ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   be4b0:	4620      	mov	r0, r4
   be4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be4b4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   be4b4:	b508      	push	{r3, lr}
  return write(str);
   be4b6:	f7f8 fb3b 	bl	b6b30 <_ZN5Print5writeEPKc>
}
   be4ba:	bd08      	pop	{r3, pc}

000be4bc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   be4bc:	6803      	ldr	r3, [r0, #0]
   be4be:	689b      	ldr	r3, [r3, #8]
   be4c0:	4718      	bx	r3

000be4c2 <_ZN5Print5printEPK19__FlashStringHelper>:
   be4c2:	b508      	push	{r3, lr}
   be4c4:	f7f8 fb34 	bl	b6b30 <_ZN5Print5writeEPKc>
   be4c8:	bd08      	pop	{r3, pc}

000be4ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   be4ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   be4cc:	210d      	movs	r1, #13
{
   be4ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   be4d0:	f7ff fff4 	bl	be4bc <_ZN5Print5printEc>
  n += print('\n');
   be4d4:	210a      	movs	r1, #10
  size_t n = print('\r');
   be4d6:	4604      	mov	r4, r0
  n += print('\n');
   be4d8:	4628      	mov	r0, r5
   be4da:	f7ff ffef 	bl	be4bc <_ZN5Print5printEc>
  return n;
}
   be4de:	4420      	add	r0, r4
   be4e0:	bd38      	pop	{r3, r4, r5, pc}

000be4e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   be4e2:	b538      	push	{r3, r4, r5, lr}
   be4e4:	4605      	mov	r5, r0
  return write(str);
   be4e6:	f7f8 fb23 	bl	b6b30 <_ZN5Print5writeEPKc>
   be4ea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   be4ec:	4628      	mov	r0, r5
   be4ee:	f7ff ffec 	bl	be4ca <_ZN5Print7printlnEv>
  return n;
}
   be4f2:	4420      	add	r0, r4
   be4f4:	bd38      	pop	{r3, r4, r5, pc}

000be4f6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   be4f6:	f7ff bff4 	b.w	be4e2 <_ZN5Print7printlnEPKc>

000be4fa <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   be4fa:	b530      	push	{r4, r5, lr}
   be4fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   be4fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   be500:	2a01      	cmp	r2, #1
  *str = '\0';
   be502:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   be506:	bf98      	it	ls
   be508:	220a      	movls	r2, #10
   be50a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   be50c:	460d      	mov	r5, r1
   be50e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   be512:	fb01 5312 	mls	r3, r1, r2, r5
   be516:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be51a:	2b09      	cmp	r3, #9
   be51c:	bf94      	ite	ls
   be51e:	3330      	addls	r3, #48	; 0x30
   be520:	3337      	addhi	r3, #55	; 0x37
   be522:	b2db      	uxtb	r3, r3
  } while(n);
   be524:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   be526:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   be52a:	d9ef      	bls.n	be50c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   be52c:	4621      	mov	r1, r4
   be52e:	f7f8 faff 	bl	b6b30 <_ZN5Print5writeEPKc>
}
   be532:	b00b      	add	sp, #44	; 0x2c
   be534:	bd30      	pop	{r4, r5, pc}

000be536 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   be536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be53a:	b086      	sub	sp, #24
   be53c:	af00      	add	r7, sp, #0
   be53e:	4605      	mov	r5, r0
   be540:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   be542:	1d38      	adds	r0, r7, #4
   be544:	2114      	movs	r1, #20
{
   be546:	4614      	mov	r4, r2
    va_copy(args2, args);
   be548:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   be54a:	f7fe fad7 	bl	bcafc <vsnprintf>

    if (n<bufsize)
   be54e:	2813      	cmp	r0, #19
   be550:	d80e      	bhi.n	be570 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   be552:	1d39      	adds	r1, r7, #4
   be554:	4628      	mov	r0, r5
   be556:	f7f8 faeb 	bl	b6b30 <_ZN5Print5writeEPKc>
   be55a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   be55c:	b11e      	cbz	r6, be566 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   be55e:	4628      	mov	r0, r5
   be560:	f7ff ffb3 	bl	be4ca <_ZN5Print7printlnEv>
   be564:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   be566:	4620      	mov	r0, r4
   be568:	3718      	adds	r7, #24
   be56a:	46bd      	mov	sp, r7
   be56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   be570:	f100 0308 	add.w	r3, r0, #8
   be574:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   be578:	46e8      	mov	r8, sp
        char bigger[n+1];
   be57a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   be57e:	4622      	mov	r2, r4
   be580:	1c41      	adds	r1, r0, #1
   be582:	683b      	ldr	r3, [r7, #0]
   be584:	4668      	mov	r0, sp
   be586:	f7fe fab9 	bl	bcafc <vsnprintf>
  return write(str);
   be58a:	4669      	mov	r1, sp
   be58c:	4628      	mov	r0, r5
   be58e:	f7f8 facf 	bl	b6b30 <_ZN5Print5writeEPKc>
   be592:	4604      	mov	r4, r0
   be594:	46c5      	mov	sp, r8
   be596:	e7e1      	b.n	be55c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000be598 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   be598:	b510      	push	{r4, lr}
   be59a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   be59c:	f7fd ff1e 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   be5a0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   be5a2:	6823      	ldr	r3, [r4, #0]
   be5a4:	4620      	mov	r0, r4
   be5a6:	695b      	ldr	r3, [r3, #20]
   be5a8:	4798      	blx	r3
    if (c >= 0) return c;
   be5aa:	2800      	cmp	r0, #0
   be5ac:	da08      	bge.n	be5c0 <_ZN6Stream9timedReadEv+0x28>
   be5ae:	f7fd ff15 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   be5b2:	68e3      	ldr	r3, [r4, #12]
   be5b4:	1ac0      	subs	r0, r0, r3
   be5b6:	68a3      	ldr	r3, [r4, #8]
   be5b8:	4298      	cmp	r0, r3
   be5ba:	d3f2      	bcc.n	be5a2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   be5bc:	f04f 30ff 	mov.w	r0, #4294967295
}
   be5c0:	bd10      	pop	{r4, pc}

000be5c2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   be5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be5c6:	4607      	mov	r7, r0
   be5c8:	4688      	mov	r8, r1
   be5ca:	4616      	mov	r6, r2
  if (length < 1) return 0;
   be5cc:	461d      	mov	r5, r3
   be5ce:	b173      	cbz	r3, be5ee <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   be5d0:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   be5d2:	4638      	mov	r0, r7
   be5d4:	f7ff ffe0 	bl	be598 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   be5d8:	1e03      	subs	r3, r0, #0
   be5da:	db05      	blt.n	be5e8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   be5dc:	4543      	cmp	r3, r8
   be5de:	d003      	beq.n	be5e8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   be5e0:	5533      	strb	r3, [r6, r4]
    index++;
   be5e2:	3401      	adds	r4, #1
  while (index < length) {
   be5e4:	42a5      	cmp	r5, r4
   be5e6:	d1f4      	bne.n	be5d2 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   be5e8:	4620      	mov	r0, r4
   be5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   be5ee:	461c      	mov	r4, r3
   be5f0:	e7fa      	b.n	be5e8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
	...

000be5f4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   be5f4:	b570      	push	{r4, r5, r6, lr}
   be5f6:	460d      	mov	r5, r1
  String ret;
   be5f8:	4909      	ldr	r1, [pc, #36]	; (be620 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   be5fa:	4604      	mov	r4, r0
   be5fc:	4616      	mov	r6, r2
  String ret;
   be5fe:	f7fe fcfe 	bl	bcffe <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   be602:	4628      	mov	r0, r5
   be604:	f7ff ffc8 	bl	be598 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   be608:	2800      	cmp	r0, #0
   be60a:	db06      	blt.n	be61a <_ZN6Stream15readStringUntilEc+0x26>
   be60c:	4286      	cmp	r6, r0
   be60e:	d004      	beq.n	be61a <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   be610:	b2c1      	uxtb	r1, r0
   be612:	4620      	mov	r0, r4
   be614:	f7fe fd72 	bl	bd0fc <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   be618:	e7f3      	b.n	be602 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   be61a:	4620      	mov	r0, r4
   be61c:	bd70      	pop	{r4, r5, r6, pc}
   be61e:	bf00      	nop
   be620:	000c4c8c 	.word	0x000c4c8c

000be624 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   be624:	6880      	ldr	r0, [r0, #8]
   be626:	6803      	ldr	r3, [r0, #0]
   be628:	68db      	ldr	r3, [r3, #12]
   be62a:	4718      	bx	r3

000be62c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   be62c:	4770      	bx	lr

000be62e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   be62e:	4608      	mov	r0, r1
   be630:	b111      	cbz	r1, be638 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   be632:	680b      	ldr	r3, [r1, #0]
   be634:	685b      	ldr	r3, [r3, #4]
   be636:	4718      	bx	r3
}
   be638:	4770      	bx	lr

000be63a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   be63a:	4770      	bx	lr

000be63c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be63c:	4770      	bx	lr

000be63e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   be63e:	4770      	bx	lr

000be640 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   be640:	4770      	bx	lr

000be642 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   be642:	b538      	push	{r3, r4, r5, lr}
   be644:	4604      	mov	r4, r0
   be646:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   be648:	6800      	ldr	r0, [r0, #0]
   be64a:	212e      	movs	r1, #46	; 0x2e
   be64c:	f002 ffc0 	bl	c15d0 <strchrnul>
    size = s - category;
   be650:	6823      	ldr	r3, [r4, #0]
   be652:	1ac3      	subs	r3, r0, r3
   be654:	602b      	str	r3, [r5, #0]
    if (size) {
   be656:	b123      	cbz	r3, be662 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   be658:	7803      	ldrb	r3, [r0, #0]
   be65a:	b103      	cbz	r3, be65e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   be65c:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   be65e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be660:	6020      	str	r0, [r4, #0]
}
   be662:	4618      	mov	r0, r3
   be664:	bd38      	pop	{r3, r4, r5, pc}

000be666 <_ZN5spark16JSONStreamWriterD0Ev>:
   be666:	b510      	push	{r4, lr}
   be668:	210c      	movs	r1, #12
   be66a:	4604      	mov	r4, r0
   be66c:	f7f5 fd19 	bl	b40a2 <_ZdlPvj>
   be670:	4620      	mov	r0, r4
   be672:	bd10      	pop	{r4, pc}

000be674 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   be674:	b510      	push	{r4, lr}
   be676:	2104      	movs	r1, #4
   be678:	4604      	mov	r4, r0
   be67a:	f7f5 fd12 	bl	b40a2 <_ZdlPvj>
   be67e:	4620      	mov	r0, r4
   be680:	bd10      	pop	{r4, pc}

000be682 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be682:	b510      	push	{r4, lr}
   be684:	2104      	movs	r1, #4
   be686:	4604      	mov	r4, r0
   be688:	f7f5 fd0b 	bl	b40a2 <_ZdlPvj>
   be68c:	4620      	mov	r0, r4
   be68e:	bd10      	pop	{r4, pc}

000be690 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   be690:	f7fd bf7e 	b.w	bc590 <os_mutex_recursive_lock>

000be694 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   be694:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   be696:	f002 ffa5 	bl	c15e4 <strcmp>
}
   be69a:	fab0 f080 	clz	r0, r0
   be69e:	0940      	lsrs	r0, r0, #5
   be6a0:	bd08      	pop	{r3, pc}

000be6a2 <__tcf_1>:
   be6a2:	4770      	bx	lr

000be6a4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   be6a4:	b510      	push	{r4, lr}
   be6a6:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   be6a8:	f001 fc1e 	bl	bfee8 <_Z16_fetch_usbserialv>
   be6ac:	4284      	cmp	r4, r0
   be6ae:	d010      	beq.n	be6d2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   be6b0:	f002 f890 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   be6b4:	4284      	cmp	r4, r0
   be6b6:	d105      	bne.n	be6c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   be6b8:	f002 f88c 	bl	c07d4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   be6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   be6c0:	f001 bce1 	b.w	c0086 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   be6c4:	b12c      	cbz	r4, be6d2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   be6c6:	6823      	ldr	r3, [r4, #0]
   be6c8:	4620      	mov	r0, r4
   be6ca:	685b      	ldr	r3, [r3, #4]
}
   be6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be6d0:	4718      	bx	r3
   be6d2:	bd10      	pop	{r4, pc}

000be6d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   be6d4:	680b      	ldr	r3, [r1, #0]
   be6d6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   be6d8:	684b      	ldr	r3, [r1, #4]
   be6da:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   be6dc:	b113      	cbz	r3, be6e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   be6de:	685a      	ldr	r2, [r3, #4]
   be6e0:	3201      	adds	r2, #1
   be6e2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   be6e4:	4770      	bx	lr

000be6e6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   be6e6:	b513      	push	{r0, r1, r4, lr}
   be6e8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   be6ea:	4608      	mov	r0, r1
   be6ec:	9101      	str	r1, [sp, #4]
   be6ee:	f002 ffa8 	bl	c1642 <strlen>
   be6f2:	9901      	ldr	r1, [sp, #4]
   be6f4:	4602      	mov	r2, r0
   be6f6:	4620      	mov	r0, r4
}
   be6f8:	b002      	add	sp, #8
   be6fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   be6fe:	f001 bfd5 	b.w	c06ac <_ZN5spark10JSONWriter5valueEPKcj>

000be702 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   be702:	b513      	push	{r0, r1, r4, lr}
   be704:	4604      	mov	r4, r0
    write(str, strlen(str));
   be706:	4608      	mov	r0, r1
   be708:	9101      	str	r1, [sp, #4]
   be70a:	f002 ff9a 	bl	c1642 <strlen>
   be70e:	6823      	ldr	r3, [r4, #0]
   be710:	9901      	ldr	r1, [sp, #4]
   be712:	68db      	ldr	r3, [r3, #12]
   be714:	4602      	mov	r2, r0
   be716:	4620      	mov	r0, r4
}
   be718:	b002      	add	sp, #8
   be71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   be71e:	4718      	bx	r3

000be720 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   be720:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be722:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   be724:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be728:	68db      	ldr	r3, [r3, #12]
   be72a:	2201      	movs	r2, #1
   be72c:	f10d 0107 	add.w	r1, sp, #7
   be730:	4798      	blx	r3
}
   be732:	b003      	add	sp, #12
   be734:	f85d fb04 	ldr.w	pc, [sp], #4

000be738 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be738:	b40e      	push	{r1, r2, r3}
   be73a:	b503      	push	{r0, r1, lr}
   be73c:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   be73e:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be740:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   be744:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   be746:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   be748:	f7ff fef5 	bl	be536 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   be74c:	b002      	add	sp, #8
   be74e:	f85d eb04 	ldr.w	lr, [sp], #4
   be752:	b003      	add	sp, #12
   be754:	4770      	bx	lr

000be756 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   be756:	680a      	ldr	r2, [r1, #0]
   be758:	6002      	str	r2, [r0, #0]
   be75a:	684a      	ldr	r2, [r1, #4]
   be75c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   be75e:	2200      	movs	r2, #0
   be760:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be764:	b510      	push	{r4, lr}
   be766:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   be768:	688c      	ldr	r4, [r1, #8]
   be76a:	6084      	str	r4, [r0, #8]
   be76c:	68cc      	ldr	r4, [r1, #12]
   be76e:	60c4      	str	r4, [r0, #12]
   be770:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be772:	608a      	str	r2, [r1, #8]
   be774:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   be776:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be778:	610a      	str	r2, [r1, #16]
   be77a:	bd10      	pop	{r4, pc}

000be77c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   be780:	e9d0 8400 	ldrd	r8, r4, [r0]
   be784:	f04f 0a14 	mov.w	sl, #20
   be788:	9300      	str	r3, [sp, #0]
   be78a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   be78e:	4b18      	ldr	r3, [pc, #96]	; (be7f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be790:	10a4      	asrs	r4, r4, #2
   be792:	4617      	mov	r7, r2
   be794:	435c      	muls	r4, r3
   be796:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   be798:	2c00      	cmp	r4, #0
   be79a:	dd21      	ble.n	be7e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   be79c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   be79e:	fb0a f006 	mul.w	r0, sl, r6
   be7a2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   be7a6:	463a      	mov	r2, r7
   be7a8:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   be7ac:	5828      	ldr	r0, [r5, r0]
   be7ae:	9101      	str	r1, [sp, #4]
   be7b0:	455f      	cmp	r7, fp
   be7b2:	bf28      	it	cs
   be7b4:	465a      	movcs	r2, fp
   be7b6:	f002 ff5f 	bl	c1678 <strncmp>
                if (cmp == 0) {
   be7ba:	2800      	cmp	r0, #0
   be7bc:	9901      	ldr	r1, [sp, #4]
   be7be:	f04f 0301 	mov.w	r3, #1
   be7c2:	d10b      	bne.n	be7dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   be7c4:	455f      	cmp	r7, fp
   be7c6:	d103      	bne.n	be7d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   be7c8:	9a00      	ldr	r2, [sp, #0]
   be7ca:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be7cc:	4634      	mov	r4, r6
   be7ce:	e7e3      	b.n	be798 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   be7d0:	d9fc      	bls.n	be7cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   be7d2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   be7d4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   be7d8:	3e01      	subs	r6, #1
   be7da:	e7f7      	b.n	be7cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   be7dc:	dbf9      	blt.n	be7d2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   be7de:	e7f5      	b.n	be7cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   be7e0:	eba5 0508 	sub.w	r5, r5, r8
}
   be7e4:	4802      	ldr	r0, [pc, #8]	; (be7f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be7e6:	10ad      	asrs	r5, r5, #2
   be7e8:	4368      	muls	r0, r5
   be7ea:	b003      	add	sp, #12
   be7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be7f0:	cccccccd 	.word	0xcccccccd

000be7f4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be7f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   be7f6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   be7f8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be7fa:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   be7fc:	b303      	cbz	r3, be840 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   be7fe:	b1f9      	cbz	r1, be840 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   be800:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   be802:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   be806:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   be808:	a903      	add	r1, sp, #12
   be80a:	a801      	add	r0, sp, #4
   be80c:	f7ff ff19 	bl	be642 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be810:	4601      	mov	r1, r0
   be812:	b1a8      	cbz	r0, be840 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   be814:	f10d 030b 	add.w	r3, sp, #11
   be818:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   be81a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   be81e:	4620      	mov	r0, r4
   be820:	f7ff ffac 	bl	be77c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   be824:	f89d 300b 	ldrb.w	r3, [sp, #11]
   be828:	b153      	cbz	r3, be840 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   be82a:	6823      	ldr	r3, [r4, #0]
   be82c:	2414      	movs	r4, #20
   be82e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   be832:	3408      	adds	r4, #8
            if (node.level >= 0) {
   be834:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   be838:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   be83a:	bfa8      	it	ge
   be83c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   be83e:	e7e3      	b.n	be808 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   be840:	4628      	mov	r0, r5
   be842:	b004      	add	sp, #16
   be844:	bd70      	pop	{r4, r5, r6, pc}
	...

000be848 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   be848:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   be84a:	4c09      	ldr	r4, [pc, #36]	; (be870 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   be84c:	7823      	ldrb	r3, [r4, #0]
   be84e:	f3bf 8f5b 	dmb	ish
   be852:	07db      	lsls	r3, r3, #31
   be854:	d409      	bmi.n	be86a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be856:	4620      	mov	r0, r4
   be858:	f7f5 fc32 	bl	b40c0 <__cxa_guard_acquire>
   be85c:	b128      	cbz	r0, be86a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be85e:	4620      	mov	r0, r4
   be860:	f7f5 fc33 	bl	b40ca <__cxa_guard_release>
   be864:	4803      	ldr	r0, [pc, #12]	; (be874 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   be866:	f002 fe13 	bl	c1490 <atexit>
}
   be86a:	4803      	ldr	r0, [pc, #12]	; (be878 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   be86c:	bd10      	pop	{r4, pc}
   be86e:	bf00      	nop
   be870:	2003e64c 	.word	0x2003e64c
   be874:	000be63b 	.word	0x000be63b
   be878:	2003dbe4 	.word	0x2003dbe4

000be87c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   be87c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   be87e:	4c09      	ldr	r4, [pc, #36]	; (be8a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   be880:	7823      	ldrb	r3, [r4, #0]
   be882:	f3bf 8f5b 	dmb	ish
   be886:	07db      	lsls	r3, r3, #31
   be888:	d409      	bmi.n	be89e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be88a:	4620      	mov	r0, r4
   be88c:	f7f5 fc18 	bl	b40c0 <__cxa_guard_acquire>
   be890:	b128      	cbz	r0, be89e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be892:	4620      	mov	r0, r4
   be894:	f7f5 fc19 	bl	b40ca <__cxa_guard_release>
   be898:	4803      	ldr	r0, [pc, #12]	; (be8a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   be89a:	f002 fdf9 	bl	c1490 <atexit>
    return &factory;
}
   be89e:	4803      	ldr	r0, [pc, #12]	; (be8ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   be8a0:	bd10      	pop	{r4, pc}
   be8a2:	bf00      	nop
   be8a4:	2003e650 	.word	0x2003e650
   be8a8:	000be6a3 	.word	0x000be6a3
   be8ac:	2003dbe8 	.word	0x2003dbe8

000be8b0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   be8b0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   be8b2:	2500      	movs	r5, #0
   be8b4:	4604      	mov	r4, r0
   be8b6:	e9c0 5500 	strd	r5, r5, [r0]
   be8ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be8be:	6085      	str	r5, [r0, #8]
   be8c0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   be8c2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   be8c6:	f7fd fe53 	bl	bc570 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   be8ca:	f7ff ffbd 	bl	be848 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   be8ce:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be8d0:	f7ff ffd4 	bl	be87c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   be8d4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be8d6:	6220      	str	r0, [r4, #32]
}
   be8d8:	4620      	mov	r0, r4
   be8da:	bd38      	pop	{r3, r4, r5, pc}

000be8dc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   be8dc:	b510      	push	{r4, lr}
    static LogManager mgr;
   be8de:	4c0a      	ldr	r4, [pc, #40]	; (be908 <_ZN5spark10LogManager8instanceEv+0x2c>)
   be8e0:	7823      	ldrb	r3, [r4, #0]
   be8e2:	f3bf 8f5b 	dmb	ish
   be8e6:	07db      	lsls	r3, r3, #31
   be8e8:	d40c      	bmi.n	be904 <_ZN5spark10LogManager8instanceEv+0x28>
   be8ea:	4620      	mov	r0, r4
   be8ec:	f7f5 fbe8 	bl	b40c0 <__cxa_guard_acquire>
   be8f0:	b140      	cbz	r0, be904 <_ZN5spark10LogManager8instanceEv+0x28>
   be8f2:	4806      	ldr	r0, [pc, #24]	; (be90c <_ZN5spark10LogManager8instanceEv+0x30>)
   be8f4:	f7ff ffdc 	bl	be8b0 <_ZN5spark10LogManagerC1Ev>
   be8f8:	4620      	mov	r0, r4
   be8fa:	f7f5 fbe6 	bl	b40ca <__cxa_guard_release>
   be8fe:	4804      	ldr	r0, [pc, #16]	; (be910 <_ZN5spark10LogManager8instanceEv+0x34>)
   be900:	f002 fdc6 	bl	c1490 <atexit>
    return &mgr;
}
   be904:	4801      	ldr	r0, [pc, #4]	; (be90c <_ZN5spark10LogManager8instanceEv+0x30>)
   be906:	bd10      	pop	{r4, pc}
   be908:	2003e648 	.word	0x2003e648
   be90c:	2003e658 	.word	0x2003e658
   be910:	000bee31 	.word	0x000bee31

000be914 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   be914:	4a02      	ldr	r2, [pc, #8]	; (be920 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   be916:	4903      	ldr	r1, [pc, #12]	; (be924 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   be918:	4803      	ldr	r0, [pc, #12]	; (be928 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   be91a:	2300      	movs	r3, #0
   be91c:	f7fd bfd8 	b.w	bc8d0 <log_set_callbacks>
   be920:	000bec15 	.word	0x000bec15
   be924:	000beba1 	.word	0x000beba1
   be928:	000beb21 	.word	0x000beb21

000be92c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   be92c:	2300      	movs	r3, #0
   be92e:	461a      	mov	r2, r3
   be930:	4619      	mov	r1, r3
   be932:	4618      	mov	r0, r3
   be934:	f7fd bfcc 	b.w	bc8d0 <log_set_callbacks>

000be938 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   be938:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   be93a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   be93c:	4604      	mov	r4, r0
   be93e:	4668      	mov	r0, sp
   be940:	f7ff fec8 	bl	be6d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   be944:	466a      	mov	r2, sp
   be946:	4629      	mov	r1, r5
   be948:	4620      	mov	r0, r4
   be94a:	f001 fdcf 	bl	c04ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   be94e:	a801      	add	r0, sp, #4
   be950:	f7f6 fc00 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be954:	4620      	mov	r0, r4
   be956:	b003      	add	sp, #12
   be958:	bd30      	pop	{r4, r5, pc}

000be95a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   be95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   be95c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   be95e:	4604      	mov	r4, r0
   be960:	4668      	mov	r0, sp
   be962:	f7ff feb7 	bl	be6d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   be966:	466a      	mov	r2, sp
   be968:	4629      	mov	r1, r5
   be96a:	4620      	mov	r0, r4
   be96c:	f001 fd9a 	bl	c04a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   be970:	a801      	add	r0, sp, #4
   be972:	f7f6 fbef 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be976:	4620      	mov	r0, r4
   be978:	b003      	add	sp, #12
   be97a:	bd30      	pop	{r4, r5, pc}

000be97c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   be97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   be97e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   be980:	4604      	mov	r4, r0
   be982:	4668      	mov	r0, sp
   be984:	f7ff fea6 	bl	be6d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   be988:	466a      	mov	r2, sp
   be98a:	4629      	mov	r1, r5
   be98c:	4620      	mov	r0, r4
   be98e:	f001 fd32 	bl	c03f6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   be992:	a801      	add	r0, sp, #4
   be994:	f7f6 fbde 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be998:	4620      	mov	r0, r4
   be99a:	b003      	add	sp, #12
   be99c:	bd30      	pop	{r4, r5, pc}
	...

000be9a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   be9a0:	b570      	push	{r4, r5, r6, lr}
   be9a2:	b08a      	sub	sp, #40	; 0x28
   be9a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   be9a6:	4601      	mov	r1, r0
   be9a8:	a804      	add	r0, sp, #16
   be9aa:	f7ff ffc5 	bl	be938 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   be9ae:	4e14      	ldr	r6, [pc, #80]	; (bea00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   be9b0:	a804      	add	r0, sp, #16
   be9b2:	f001 fdb3 	bl	c051c <_ZN5spark18JSONObjectIterator4nextEv>
   be9b6:	b1e8      	cbz	r0, be9f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   be9b8:	a904      	add	r1, sp, #16
   be9ba:	4668      	mov	r0, sp
   be9bc:	f7ff ffcd 	bl	be95a <_ZNK5spark18JSONObjectIterator4nameEv>
   be9c0:	9802      	ldr	r0, [sp, #8]
   be9c2:	4631      	mov	r1, r6
   be9c4:	f7ff fe66 	bl	be694 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   be9c8:	4604      	mov	r4, r0
   be9ca:	b110      	cbz	r0, be9d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   be9cc:	1e2c      	subs	r4, r5, #0
   be9ce:	bf18      	it	ne
   be9d0:	2401      	movne	r4, #1
   be9d2:	a801      	add	r0, sp, #4
   be9d4:	f7f6 fbbe 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be9d8:	2c00      	cmp	r4, #0
   be9da:	d0e9      	beq.n	be9b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   be9dc:	a904      	add	r1, sp, #16
   be9de:	4668      	mov	r0, sp
   be9e0:	f7ff ffcc 	bl	be97c <_ZNK5spark18JSONObjectIterator5valueEv>
   be9e4:	4668      	mov	r0, sp
   be9e6:	f001 fd3c 	bl	c0462 <_ZNK5spark9JSONValue5toIntEv>
   be9ea:	6028      	str	r0, [r5, #0]
   be9ec:	a801      	add	r0, sp, #4
   be9ee:	f7f6 fbb1 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be9f2:	e7dd      	b.n	be9b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   be9f4:	a805      	add	r0, sp, #20
   be9f6:	f7f6 fbad 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be9fa:	b00a      	add	sp, #40	; 0x28
   be9fc:	bd70      	pop	{r4, r5, r6, pc}
   be9fe:	bf00      	nop
   bea00:	000c4c32 	.word	0x000c4c32

000bea04 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bea04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bea06:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bea08:	4620      	mov	r0, r4
   bea0a:	4913      	ldr	r1, [pc, #76]	; (bea58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bea0c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bea0e:	f002 fde9 	bl	c15e4 <strcmp>
   bea12:	b950      	cbnz	r0, bea2a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bea14:	f001 fa68 	bl	bfee8 <_Z16_fetch_usbserialv>
   bea18:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bea1c:	f001 fa54 	bl	bfec8 <_ZN9USBSerial5beginEl>
}
   bea20:	b003      	add	sp, #12
   bea22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bea26:	f001 ba5f 	b.w	bfee8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bea2a:	490c      	ldr	r1, [pc, #48]	; (bea5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bea2c:	4620      	mov	r0, r4
   bea2e:	f002 fdd9 	bl	c15e4 <strcmp>
   bea32:	b978      	cbnz	r0, bea54 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bea34:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bea38:	a901      	add	r1, sp, #4
   bea3a:	4628      	mov	r0, r5
        int baud = 9600;
   bea3c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bea3e:	f7ff ffaf 	bl	be9a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bea42:	f001 fec7 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   bea46:	9901      	ldr	r1, [sp, #4]
   bea48:	f001 fb1a 	bl	c0080 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bea4c:	f001 fec2 	bl	c07d4 <_Z22__fetch_global_Serial1v>
}
   bea50:	b003      	add	sp, #12
   bea52:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bea54:	2000      	movs	r0, #0
   bea56:	e7fb      	b.n	bea50 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bea58:	000c4c37 	.word	0x000c4c37
   bea5c:	000c4c3e 	.word	0x000c4c3e

000bea60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bea60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bea62:	e9d0 5300 	ldrd	r5, r3, [r0]
   bea66:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bea68:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bea6a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bea6e:	42ae      	cmp	r6, r5
   bea70:	d005      	beq.n	bea7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bea72:	f105 0008 	add.w	r0, r5, #8
   bea76:	f7ff fff3 	bl	bea60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bea7a:	3514      	adds	r5, #20
   bea7c:	e7f7      	b.n	bea6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bea7e:	6820      	ldr	r0, [r4, #0]
   bea80:	f7fe f81c 	bl	bcabc <free>
}
   bea84:	4620      	mov	r0, r4
   bea86:	bd70      	pop	{r4, r5, r6, pc}

000bea88 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bea88:	b510      	push	{r4, lr}
   bea8a:	4604      	mov	r4, r0
   bea8c:	300c      	adds	r0, #12
   bea8e:	f7ff ffe7 	bl	bea60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bea92:	4620      	mov	r0, r4
   bea94:	f7fe fefb 	bl	bd88e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bea98:	4620      	mov	r0, r4
   bea9a:	bd10      	pop	{r4, pc}

000bea9c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bea9c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bea9e:	4b04      	ldr	r3, [pc, #16]	; (beab0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   beaa0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   beaa2:	f840 3b04 	str.w	r3, [r0], #4
   beaa6:	f7ff ffef 	bl	bea88 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   beaaa:	4620      	mov	r0, r4
   beaac:	bd10      	pop	{r4, pc}
   beaae:	bf00      	nop
   beab0:	000c3bb8 	.word	0x000c3bb8

000beab4 <_ZN5spark16StreamLogHandlerD0Ev>:
   beab4:	b510      	push	{r4, lr}
   beab6:	4604      	mov	r4, r0
   beab8:	f7ff fff0 	bl	bea9c <_ZN5spark16StreamLogHandlerD1Ev>
   beabc:	4620      	mov	r0, r4
   beabe:	2124      	movs	r1, #36	; 0x24
   beac0:	f7f5 faef 	bl	b40a2 <_ZdlPvj>
   beac4:	4620      	mov	r0, r4
   beac6:	bd10      	pop	{r4, pc}

000beac8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   beac8:	b510      	push	{r4, lr}
   beaca:	4b03      	ldr	r3, [pc, #12]	; (bead8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   beacc:	6003      	str	r3, [r0, #0]
   beace:	4604      	mov	r4, r0
   bead0:	f7ff ffe4 	bl	bea9c <_ZN5spark16StreamLogHandlerD1Ev>
   bead4:	4620      	mov	r0, r4
   bead6:	bd10      	pop	{r4, pc}
   bead8:	000c4cdc 	.word	0x000c4cdc

000beadc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   beadc:	b510      	push	{r4, lr}
   beade:	4604      	mov	r4, r0
   beae0:	f7ff fff2 	bl	beac8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   beae4:	4620      	mov	r0, r4
   beae6:	2124      	movs	r1, #36	; 0x24
   beae8:	f7f5 fadb 	bl	b40a2 <_ZdlPvj>
   beaec:	4620      	mov	r0, r4
   beaee:	bd10      	pop	{r4, pc}

000beaf0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   beaf0:	2200      	movs	r2, #0
   beaf2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   beaf6:	b510      	push	{r4, lr}
        capacity_(0) {
   beaf8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   beafa:	680c      	ldr	r4, [r1, #0]
   beafc:	6004      	str	r4, [r0, #0]
   beafe:	684c      	ldr	r4, [r1, #4]
   beb00:	6044      	str	r4, [r0, #4]
   beb02:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   beb04:	600a      	str	r2, [r1, #0]
   beb06:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   beb08:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   beb0a:	608a      	str	r2, [r1, #8]
}
   beb0c:	bd10      	pop	{r4, pc}

000beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   beb0e:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   beb10:	6803      	ldr	r3, [r0, #0]
   beb12:	4604      	mov	r4, r0
   beb14:	6818      	ldr	r0, [r3, #0]
   beb16:	f7fd fd43 	bl	bc5a0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   beb1a:	4620      	mov	r0, r4
   beb1c:	bd10      	pop	{r4, pc}
	...

000beb20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   beb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beb24:	b087      	sub	sp, #28
   beb26:	4680      	mov	r8, r0
   beb28:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   beb2a:	4b1c      	ldr	r3, [pc, #112]	; (beb9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   beb2c:	685b      	ldr	r3, [r3, #4]
   beb2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   beb32:	4689      	mov	r9, r1
   beb34:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   beb36:	b96b      	cbnz	r3, beb54 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   beb38:	f7ff fed0 	bl	be8dc <_ZN5spark10LogManager8instanceEv>
   beb3c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   beb3e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   beb42:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   beb44:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   beb46:	f7ff fda3 	bl	be690 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   beb4a:	7b23      	ldrb	r3, [r4, #12]
   beb4c:	b12b      	cbz	r3, beb5a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   beb4e:	a805      	add	r0, sp, #20
   beb50:	f7ff ffdd 	bl	beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   beb54:	b007      	add	sp, #28
   beb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   beb5a:	2301      	movs	r3, #1
   beb5c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   beb5e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   beb62:	fa5f f989 	uxtb.w	r9, r9
   beb66:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   beb6a:	45aa      	cmp	sl, r5
   beb6c:	d012      	beq.n	beb94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   beb6e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   beb72:	4631      	mov	r1, r6
   beb74:	1d38      	adds	r0, r7, #4
   beb76:	f7ff fe3d 	bl	be7f4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   beb7a:	4581      	cmp	r9, r0
   beb7c:	d3f5      	bcc.n	beb6a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   beb7e:	683b      	ldr	r3, [r7, #0]
   beb80:	9a03      	ldr	r2, [sp, #12]
   beb82:	9200      	str	r2, [sp, #0]
   beb84:	f8d3 b008 	ldr.w	fp, [r3, #8]
   beb88:	464a      	mov	r2, r9
   beb8a:	4633      	mov	r3, r6
   beb8c:	4641      	mov	r1, r8
   beb8e:	4638      	mov	r0, r7
   beb90:	47d8      	blx	fp
   beb92:	e7ea      	b.n	beb6a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   beb94:	2300      	movs	r3, #0
   beb96:	7323      	strb	r3, [r4, #12]
   beb98:	e7d9      	b.n	beb4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   beb9a:	bf00      	nop
   beb9c:	e000ed00 	.word	0xe000ed00

000beba0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   beba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   beba4:	469b      	mov	fp, r3
   beba6:	4b1a      	ldr	r3, [pc, #104]	; (bec10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   beba8:	685b      	ldr	r3, [r3, #4]
   bebaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bebae:	4680      	mov	r8, r0
   bebb0:	4689      	mov	r9, r1
   bebb2:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bebb4:	b96b      	cbnz	r3, bebd2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bebb6:	f7ff fe91 	bl	be8dc <_ZN5spark10LogManager8instanceEv>
   bebba:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bebbc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bebc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bebc2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bebc4:	f7ff fd64 	bl	be690 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bebc8:	7b23      	ldrb	r3, [r4, #12]
   bebca:	b12b      	cbz	r3, bebd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bebcc:	a801      	add	r0, sp, #4
   bebce:	f7ff ff9e 	bl	beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bebd2:	b003      	add	sp, #12
   bebd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bebd8:	2301      	movs	r3, #1
   bebda:	7323      	strb	r3, [r4, #12]
   bebdc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bebe0:	b2f6      	uxtb	r6, r6
   bebe2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bebe6:	4555      	cmp	r5, sl
   bebe8:	d00e      	beq.n	bec08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bebea:	f855 7b04 	ldr.w	r7, [r5], #4
   bebee:	4659      	mov	r1, fp
   bebf0:	1d38      	adds	r0, r7, #4
   bebf2:	f7ff fdff 	bl	be7f4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bebf6:	4286      	cmp	r6, r0
   bebf8:	d3f5      	bcc.n	bebe6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bebfa:	683b      	ldr	r3, [r7, #0]
   bebfc:	464a      	mov	r2, r9
   bebfe:	68db      	ldr	r3, [r3, #12]
   bec00:	4641      	mov	r1, r8
   bec02:	4638      	mov	r0, r7
   bec04:	4798      	blx	r3
   bec06:	e7ee      	b.n	bebe6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bec08:	2300      	movs	r3, #0
   bec0a:	7323      	strb	r3, [r4, #12]
   bec0c:	e7de      	b.n	bebcc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bec0e:	bf00      	nop
   bec10:	e000ed00 	.word	0xe000ed00

000bec14 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bec14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bec18:	4b16      	ldr	r3, [pc, #88]	; (bec74 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bec1a:	685b      	ldr	r3, [r3, #4]
   bec1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bec20:	4605      	mov	r5, r0
   bec22:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bec24:	bb1b      	cbnz	r3, bec6e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bec26:	f7ff fe59 	bl	be8dc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bec2a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bec2e:	4604      	mov	r4, r0
   bec30:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bec32:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bec34:	f7ff fd2c 	bl	be690 <_ZN14RecursiveMutex4lockEv.isra.0>
   bec38:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bec3c:	2446      	movs	r4, #70	; 0x46
   bec3e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bec42:	45b0      	cmp	r8, r6
   bec44:	d109      	bne.n	bec5a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bec46:	a801      	add	r0, sp, #4
   bec48:	f7ff ff61 	bl	beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bec4c:	42a5      	cmp	r5, r4
   bec4e:	bfb4      	ite	lt
   bec50:	2000      	movlt	r0, #0
   bec52:	2001      	movge	r0, #1
}
   bec54:	b002      	add	sp, #8
   bec56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bec5a:	f856 0b04 	ldr.w	r0, [r6], #4
   bec5e:	4639      	mov	r1, r7
   bec60:	3004      	adds	r0, #4
   bec62:	f7ff fdc7 	bl	be7f4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bec66:	4284      	cmp	r4, r0
   bec68:	bfa8      	it	ge
   bec6a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bec6c:	e7e9      	b.n	bec42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bec6e:	2000      	movs	r0, #0
   bec70:	e7f0      	b.n	bec54 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bec72:	bf00      	nop
   bec74:	e000ed00 	.word	0xe000ed00

000bec78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bec78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec7a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bec7e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bec80:	4604      	mov	r4, r0
   bec82:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec84:	db0d      	blt.n	beca2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bec86:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bec88:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bec8a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bec8c:	dd04      	ble.n	bec98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bec8e:	00b9      	lsls	r1, r7, #2
   bec90:	f7fd ff1c 	bl	bcacc <realloc>
            if (!d) {
   bec94:	b918      	cbnz	r0, bec9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bec96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bec98:	f7fd ff10 	bl	bcabc <free>
        T* d = nullptr;
   bec9c:	2000      	movs	r0, #0
        data_ = d;
   bec9e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   beca0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   beca2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   beca4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   beca6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   becaa:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   becac:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   becb0:	1d08      	adds	r0, r1, #4
   becb2:	f002 fc21 	bl	c14f8 <memmove>
    new(p) T(std::move(value));
   becb6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   becba:	6863      	ldr	r3, [r4, #4]
   becbc:	3301      	adds	r3, #1
   becbe:	6063      	str	r3, [r4, #4]
    return true;
   becc0:	2001      	movs	r0, #1
   becc2:	e7e8      	b.n	bec96 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000becc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   becc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   becc6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   becca:	4604      	mov	r4, r0
   beccc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   becce:	9301      	str	r3, [sp, #4]
   becd0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   becd2:	f7ff fcdd 	bl	be690 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   becd6:	e9d4 3200 	ldrd	r3, r2, [r4]
   becda:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   becde:	4293      	cmp	r3, r2
   bece0:	4619      	mov	r1, r3
   bece2:	d00b      	beq.n	becfc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bece4:	6809      	ldr	r1, [r1, #0]
   bece6:	42a9      	cmp	r1, r5
   bece8:	f103 0304 	add.w	r3, r3, #4
   becec:	d1f7      	bne.n	becde <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   becee:	a801      	add	r0, sp, #4
   becf0:	f7ff ff0d 	bl	beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   becf4:	2500      	movs	r5, #0
}
   becf6:	4628      	mov	r0, r5
   becf8:	b003      	add	sp, #12
   becfa:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   becfc:	4629      	mov	r1, r5
   becfe:	4620      	mov	r0, r4
   bed00:	f7ff ffba 	bl	bec78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bed04:	4605      	mov	r5, r0
   bed06:	2800      	cmp	r0, #0
   bed08:	d0f1      	beq.n	becee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bed0a:	6863      	ldr	r3, [r4, #4]
   bed0c:	2b01      	cmp	r3, #1
   bed0e:	d101      	bne.n	bed14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bed10:	f7ff fe00 	bl	be914 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bed14:	a801      	add	r0, sp, #4
   bed16:	f7ff fefa 	bl	beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bed1a:	e7ec      	b.n	becf6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bed1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bed1c:	b570      	push	{r4, r5, r6, lr}
   bed1e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bed20:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bed24:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bed26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bed2a:	4282      	cmp	r2, r0
   bed2c:	d00f      	beq.n	bed4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bed2e:	4601      	mov	r1, r0
            if (*p == value) {
   bed30:	681d      	ldr	r5, [r3, #0]
   bed32:	f851 6b04 	ldr.w	r6, [r1], #4
   bed36:	42ae      	cmp	r6, r5
   bed38:	d107      	bne.n	bed4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bed3a:	1a52      	subs	r2, r2, r1
   bed3c:	f002 fbdc 	bl	c14f8 <memmove>
    --size_;
   bed40:	6863      	ldr	r3, [r4, #4]
   bed42:	3b01      	subs	r3, #1
   bed44:	6063      	str	r3, [r4, #4]
    return true;
   bed46:	2001      	movs	r0, #1
}
   bed48:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bed4a:	4608      	mov	r0, r1
   bed4c:	e7ed      	b.n	bed2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bed4e:	2000      	movs	r0, #0
   bed50:	e7fa      	b.n	bed48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bed52 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bed52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bed54:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bed58:	4604      	mov	r4, r0
   bed5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bed5c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bed5e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bed60:	f7ff fc96 	bl	be690 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bed64:	a901      	add	r1, sp, #4
   bed66:	4620      	mov	r0, r4
   bed68:	f7ff ffd8 	bl	bed1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bed6c:	b118      	cbz	r0, bed76 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bed6e:	6863      	ldr	r3, [r4, #4]
   bed70:	b90b      	cbnz	r3, bed76 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bed72:	f7ff fddb 	bl	be92c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bed76:	a803      	add	r0, sp, #12
   bed78:	f7ff fec9 	bl	beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bed7c:	b004      	add	sp, #16
   bed7e:	bd10      	pop	{r4, pc}

000bed80 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bed80:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bed82:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bed86:	2318      	movs	r3, #24
   bed88:	4604      	mov	r4, r0
   bed8a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bed8e:	42ae      	cmp	r6, r5
   bed90:	d015      	beq.n	bedbe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bed92:	f105 0110 	add.w	r1, r5, #16
   bed96:	4620      	mov	r0, r4
   bed98:	f7ff ffc0 	bl	bed1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bed9c:	6863      	ldr	r3, [r4, #4]
   bed9e:	b90b      	cbnz	r3, beda4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   beda0:	f7ff fdc4 	bl	be92c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   beda4:	69e0      	ldr	r0, [r4, #28]
   beda6:	6929      	ldr	r1, [r5, #16]
   beda8:	6803      	ldr	r3, [r0, #0]
   bedaa:	68db      	ldr	r3, [r3, #12]
   bedac:	4798      	blx	r3
        if (h.stream) {
   bedae:	6969      	ldr	r1, [r5, #20]
   bedb0:	b119      	cbz	r1, bedba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bedb2:	6a20      	ldr	r0, [r4, #32]
   bedb4:	6803      	ldr	r3, [r0, #0]
   bedb6:	68db      	ldr	r3, [r3, #12]
   bedb8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bedba:	3518      	adds	r5, #24
   bedbc:	e7e7      	b.n	bed8e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bedbe:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bedc2:	2618      	movs	r6, #24
   bedc4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bedc8:	42ae      	cmp	r6, r5
   bedca:	d004      	beq.n	bedd6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bedcc:	4628      	mov	r0, r5
   bedce:	f7fe f8cb 	bl	bcf68 <_ZN6StringD1Ev>
   bedd2:	3518      	adds	r5, #24
   bedd4:	e7f8      	b.n	bedc8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bedd6:	2300      	movs	r3, #0
   bedd8:	6163      	str	r3, [r4, #20]
}
   bedda:	bd70      	pop	{r4, r5, r6, pc}

000beddc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   beddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bedde:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bede0:	f7ff fda4 	bl	be92c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bede4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bede8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bedea:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bedec:	f7ff fc50 	bl	be690 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bedf0:	4620      	mov	r0, r4
   bedf2:	f7ff ffc5 	bl	bed80 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bedf6:	a801      	add	r0, sp, #4
   bedf8:	f7ff fe89 	bl	beb0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bedfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bedfe:	b108      	cbz	r0, bee04 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bee00:	f7fd fbbe 	bl	bc580 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bee04:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bee08:	2618      	movs	r6, #24
   bee0a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bee0e:	42ae      	cmp	r6, r5
   bee10:	d004      	beq.n	bee1c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bee12:	4628      	mov	r0, r5
   bee14:	f7fe f8a8 	bl	bcf68 <_ZN6StringD1Ev>
   bee18:	3518      	adds	r5, #24
   bee1a:	e7f8      	b.n	bee0e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bee1c:	6920      	ldr	r0, [r4, #16]
   bee1e:	f7fd fe4d 	bl	bcabc <free>
   bee22:	6820      	ldr	r0, [r4, #0]
   bee24:	f7fd fe4a 	bl	bcabc <free>
}
   bee28:	4620      	mov	r0, r4
   bee2a:	b002      	add	sp, #8
   bee2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bee30 <__tcf_2>:
    static LogManager mgr;
   bee30:	4801      	ldr	r0, [pc, #4]	; (bee38 <__tcf_2+0x8>)
   bee32:	f7ff bfd3 	b.w	beddc <_ZN5spark10LogManagerD1Ev>
   bee36:	bf00      	nop
   bee38:	2003e658 	.word	0x2003e658

000bee3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bee3c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bee3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bee40:	4604      	mov	r4, r0
   bee42:	460d      	mov	r5, r1
   bee44:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bee46:	d915      	bls.n	bee74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bee48:	4290      	cmp	r0, r2
   bee4a:	d214      	bcs.n	bee76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bee4c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bee50:	1a75      	subs	r5, r6, r1
   bee52:	f1a1 0714 	sub.w	r7, r1, #20
   bee56:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bee58:	42b7      	cmp	r7, r6
   bee5a:	d01a      	beq.n	bee92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bee5c:	b11c      	cbz	r4, bee66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bee5e:	4631      	mov	r1, r6
   bee60:	4620      	mov	r0, r4
   bee62:	f7ff fc78 	bl	be756 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bee66:	f106 0008 	add.w	r0, r6, #8
   bee6a:	f7ff fdf9 	bl	bea60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bee6e:	3e14      	subs	r6, #20
   bee70:	3c14      	subs	r4, #20
   bee72:	e7f1      	b.n	bee58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bee74:	d00d      	beq.n	bee92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bee76:	42b5      	cmp	r5, r6
   bee78:	d00b      	beq.n	bee92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bee7a:	b11c      	cbz	r4, bee84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bee7c:	4629      	mov	r1, r5
   bee7e:	4620      	mov	r0, r4
   bee80:	f7ff fc69 	bl	be756 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bee84:	f105 0008 	add.w	r0, r5, #8
   bee88:	f7ff fdea 	bl	bea60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bee8c:	3514      	adds	r5, #20
   bee8e:	3414      	adds	r4, #20
   bee90:	e7f1      	b.n	bee76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bee92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bee94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bee94:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bee96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bee98:	4604      	mov	r4, r0
   bee9a:	460d      	mov	r5, r1
   bee9c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bee9e:	d914      	bls.n	beeca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   beea0:	4290      	cmp	r0, r2
   beea2:	d213      	bcs.n	beecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   beea4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   beea8:	1a75      	subs	r5, r6, r1
   beeaa:	f1a1 0710 	sub.w	r7, r1, #16
   beeae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   beeb0:	42b7      	cmp	r7, r6
   beeb2:	d018      	beq.n	beee6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   beeb4:	b11c      	cbz	r4, beebe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   beeb6:	4631      	mov	r1, r6
   beeb8:	4620      	mov	r0, r4
   beeba:	f7fe f8d1 	bl	bd060 <_ZN6StringC1EOS_>
                end->~T();
   beebe:	4630      	mov	r0, r6
   beec0:	f7fe f852 	bl	bcf68 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   beec4:	3e10      	subs	r6, #16
   beec6:	3c10      	subs	r4, #16
   beec8:	e7f2      	b.n	beeb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   beeca:	d00c      	beq.n	beee6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   beecc:	42b5      	cmp	r5, r6
   beece:	d00a      	beq.n	beee6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   beed0:	b11c      	cbz	r4, beeda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   beed2:	4629      	mov	r1, r5
   beed4:	4620      	mov	r0, r4
   beed6:	f7fe f8c3 	bl	bd060 <_ZN6StringC1EOS_>
                p->~T();
   beeda:	4628      	mov	r0, r5
   beedc:	f7fe f844 	bl	bcf68 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   beee0:	3510      	adds	r5, #16
   beee2:	3410      	adds	r4, #16
   beee4:	e7f2      	b.n	beecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   beee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000beee8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   beee8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   beeea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   beeec:	4605      	mov	r5, r0
        if (n > 0) {
   beeee:	dd11      	ble.n	bef14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   beef0:	0130      	lsls	r0, r6, #4
   beef2:	f7fd fddb 	bl	bcaac <malloc>
            if (!d) {
   beef6:	4604      	mov	r4, r0
   beef8:	b158      	cbz	r0, bef12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   beefa:	e9d5 1200 	ldrd	r1, r2, [r5]
   beefe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bef02:	f7ff ffc7 	bl	bee94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bef06:	6828      	ldr	r0, [r5, #0]
   bef08:	f7fd fdd8 	bl	bcabc <free>
        data_ = d;
   bef0c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bef0e:	60ae      	str	r6, [r5, #8]
        return true;
   bef10:	2001      	movs	r0, #1
    }
   bef12:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bef14:	2400      	movs	r4, #0
   bef16:	e7f6      	b.n	bef06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bef18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bef1c:	4690      	mov	r8, r2
   bef1e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bef20:	2300      	movs	r3, #0
   bef22:	9103      	str	r1, [sp, #12]
    return size_;
   bef24:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bef28:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bef2a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bef2c:	4299      	cmp	r1, r3
        capacity_(0) {
   bef2e:	e9c0 3300 	strd	r3, r3, [r0]
   bef32:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bef36:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bef3a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bef3e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bef40:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bef42:	dc23      	bgt.n	bef8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bef44:	e9d8 5700 	ldrd	r5, r7, [r8]
   bef48:	2314      	movs	r3, #20
   bef4a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bef4e:	42af      	cmp	r7, r5
   bef50:	d03b      	beq.n	befca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bef52:	4629      	mov	r1, r5
   bef54:	a80b      	add	r0, sp, #44	; 0x2c
   bef56:	f7fe f883 	bl	bd060 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bef5a:	a90b      	add	r1, sp, #44	; 0x2c
   bef5c:	a80f      	add	r0, sp, #60	; 0x3c
   bef5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bef60:	f7fe f87e 	bl	bd060 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bef64:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bef68:	4299      	cmp	r1, r3
   bef6a:	da1b      	bge.n	befa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bef6c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bef6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bef70:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bef74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bef78:	4631      	mov	r1, r6
   bef7a:	f106 0010 	add.w	r0, r6, #16
   bef7e:	f7ff ff89 	bl	bee94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bef82:	b9ee      	cbnz	r6, befc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bef84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bef86:	3301      	adds	r3, #1
   bef88:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bef8a:	e011      	b.n	befb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bef8c:	a808      	add	r0, sp, #32
   bef8e:	f7ff ffab 	bl	beee8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bef92:	2800      	cmp	r0, #0
   bef94:	d1d6      	bne.n	bef44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bef96:	a808      	add	r0, sp, #32
   bef98:	f7fe fc79 	bl	bd88e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bef9c:	4620      	mov	r0, r4
   bef9e:	b015      	add	sp, #84	; 0x54
   befa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   befa4:	3101      	adds	r1, #1
   befa6:	a808      	add	r0, sp, #32
   befa8:	f7ff ff9e 	bl	beee8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   befac:	2800      	cmp	r0, #0
   befae:	d1dd      	bne.n	bef6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   befb0:	a80f      	add	r0, sp, #60	; 0x3c
   befb2:	f7fd ffd9 	bl	bcf68 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   befb6:	a80b      	add	r0, sp, #44	; 0x2c
   befb8:	f7fd ffd6 	bl	bcf68 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   befbc:	3514      	adds	r5, #20
   befbe:	e7c6      	b.n	bef4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   befc0:	a90f      	add	r1, sp, #60	; 0x3c
   befc2:	4630      	mov	r0, r6
   befc4:	f7fe f84c 	bl	bd060 <_ZN6StringC1EOS_>
   befc8:	e7dc      	b.n	bef84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   befca:	2600      	movs	r6, #0
   befcc:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   befd0:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   befd2:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   befd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   befda:	429e      	cmp	r6, r3
   befdc:	da7c      	bge.n	bf0d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   befde:	0133      	lsls	r3, r6, #4
   befe0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   befe2:	9306      	str	r3, [sp, #24]
        if (!category) {
   befe4:	b90b      	cbnz	r3, befea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   befe6:	3601      	adds	r6, #1
   befe8:	e7f5      	b.n	befd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   befea:	2300      	movs	r3, #0
   befec:	9307      	str	r3, [sp, #28]
   befee:	fb09 f306 	mul.w	r3, r9, r6
   beff2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   beff4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   beff6:	a907      	add	r1, sp, #28
   beff8:	a806      	add	r0, sp, #24
   beffa:	f7ff fb22 	bl	be642 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   beffe:	4682      	mov	sl, r0
   bf000:	2800      	cmp	r0, #0
   bf002:	d0f0      	beq.n	befe6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bf004:	f04f 0300 	mov.w	r3, #0
   bf008:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bf00c:	4601      	mov	r1, r0
   bf00e:	9a07      	ldr	r2, [sp, #28]
   bf010:	f10d 0317 	add.w	r3, sp, #23
   bf014:	4628      	mov	r0, r5
   bf016:	f7ff fbb1 	bl	be77c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bf01a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bf01e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bf020:	2f00      	cmp	r7, #0
   bf022:	d14a      	bne.n	bf0ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bf024:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bf028:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bf02c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bf030:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bf034:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bf038:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bf03c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf03e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bf042:	4293      	cmp	r3, r2
   bf044:	db17      	blt.n	bf076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bf046:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bf04a:	f1ba 0f00 	cmp.w	sl, #0
   bf04e:	dd30      	ble.n	bf0b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bf050:	fb09 f00a 	mul.w	r0, r9, sl
   bf054:	f7fd fd2a 	bl	bcaac <malloc>
            if (!d) {
   bf058:	4683      	mov	fp, r0
   bf05a:	b360      	cbz	r0, bf0b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bf05c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf060:	fb09 1202 	mla	r2, r9, r2, r1
   bf064:	f7ff feea 	bl	bee3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bf068:	6828      	ldr	r0, [r5, #0]
   bf06a:	f7fd fd27 	bl	bcabc <free>
        data_ = d;
   bf06e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bf072:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bf076:	682b      	ldr	r3, [r5, #0]
   bf078:	9a01      	ldr	r2, [sp, #4]
   bf07a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bf07e:	686a      	ldr	r2, [r5, #4]
   bf080:	4651      	mov	r1, sl
   bf082:	fb09 3202 	mla	r2, r9, r2, r3
   bf086:	f10a 0014 	add.w	r0, sl, #20
   bf08a:	f7ff fed7 	bl	bee3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bf08e:	f1ba 0f00 	cmp.w	sl, #0
   bf092:	d003      	beq.n	bf09c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bf094:	a90f      	add	r1, sp, #60	; 0x3c
   bf096:	4650      	mov	r0, sl
   bf098:	f7ff fb5d 	bl	be756 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bf09c:	686b      	ldr	r3, [r5, #4]
   bf09e:	3301      	adds	r3, #1
   bf0a0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bf0a2:	a811      	add	r0, sp, #68	; 0x44
   bf0a4:	f7ff fcdc 	bl	bea60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bf0a8:	b13f      	cbz	r7, bf0ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bf0aa:	a80b      	add	r0, sp, #44	; 0x2c
   bf0ac:	f7ff fcd8 	bl	bea60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bf0b0:	e771      	b.n	bef96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   bf0b2:	46bb      	mov	fp, r7
   bf0b4:	e7d8      	b.n	bf068 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bf0b6:	2701      	movs	r7, #1
   bf0b8:	e7f3      	b.n	bf0a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bf0ba:	9b01      	ldr	r3, [sp, #4]
   bf0bc:	682d      	ldr	r5, [r5, #0]
   bf0be:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bf0c2:	9b06      	ldr	r3, [sp, #24]
   bf0c4:	781b      	ldrb	r3, [r3, #0]
   bf0c6:	b92b      	cbnz	r3, bf0d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bf0c8:	f8d8 3000 	ldr.w	r3, [r8]
   bf0cc:	9a02      	ldr	r2, [sp, #8]
   bf0ce:	4413      	add	r3, r2
   bf0d0:	7c1b      	ldrb	r3, [r3, #16]
   bf0d2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bf0d4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bf0d6:	e78e      	b.n	beff6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0d8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bf0da:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0dc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf0de:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0e0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf0e2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bf0e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bf0e6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0e8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf0ea:	60a2      	str	r2, [r4, #8]
   bf0ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bf0ee:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0f0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf0f2:	60e2      	str	r2, [r4, #12]
   bf0f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bf0f6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0f8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf0fa:	6122      	str	r2, [r4, #16]
   bf0fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bf0fe:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bf100:	9b03      	ldr	r3, [sp, #12]
   bf102:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bf104:	6162      	str	r2, [r4, #20]
   bf106:	7623      	strb	r3, [r4, #24]
   bf108:	e7cf      	b.n	bf0aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bf10c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bf10c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf10e:	4604      	mov	r4, r0
   bf110:	b087      	sub	sp, #28
   bf112:	460d      	mov	r5, r1
        filter_(level, filters) {
   bf114:	4626      	mov	r6, r4
        stream_(&stream) {
   bf116:	4619      	mov	r1, r3
   bf118:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bf11a:	4617      	mov	r7, r2
        stream_(&stream) {
   bf11c:	f7f6 fc34 	bl	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bf120:	4b0b      	ldr	r3, [pc, #44]	; (bf150 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bf122:	f846 3b04 	str.w	r3, [r6], #4
   bf126:	4669      	mov	r1, sp
   bf128:	a803      	add	r0, sp, #12
   bf12a:	f7f6 fc2d 	bl	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bf12e:	aa03      	add	r2, sp, #12
   bf130:	4639      	mov	r1, r7
   bf132:	4630      	mov	r0, r6
   bf134:	f7ff fef0 	bl	bef18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf138:	a803      	add	r0, sp, #12
   bf13a:	f7f6 f9d3 	bl	b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bf13e:	4668      	mov	r0, sp
   bf140:	f7f6 f9d0 	bl	b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bf144:	4b03      	ldr	r3, [pc, #12]	; (bf154 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bf146:	6023      	str	r3, [r4, #0]
}
   bf148:	4620      	mov	r0, r4
        stream_(&stream) {
   bf14a:	6225      	str	r5, [r4, #32]
}
   bf14c:	b007      	add	sp, #28
   bf14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf150:	000c3bb8 	.word	0x000c3bb8
   bf154:	000c4cc4 	.word	0x000c4cc4

000bf158 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bf158:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf15a:	460f      	mov	r7, r1
   bf15c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bf15e:	491d      	ldr	r1, [pc, #116]	; (bf1d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bf160:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bf162:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bf164:	4616      	mov	r6, r2
   bf166:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bf168:	f002 fa3c 	bl	c15e4 <strcmp>
   bf16c:	b9c0      	cbnz	r0, bf1a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bf16e:	b1a4      	cbz	r4, bf19a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bf170:	4629      	mov	r1, r5
   bf172:	a801      	add	r0, sp, #4
   bf174:	f7ff fcbc 	bl	beaf0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bf178:	4917      	ldr	r1, [pc, #92]	; (bf1d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bf17a:	2024      	movs	r0, #36	; 0x24
   bf17c:	f001 fb8a 	bl	c0894 <_ZnwjRKSt9nothrow_t>
   bf180:	4605      	mov	r5, r0
   bf182:	b130      	cbz	r0, bf192 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bf184:	ab01      	add	r3, sp, #4
   bf186:	4632      	mov	r2, r6
   bf188:	4621      	mov	r1, r4
   bf18a:	f7ff ffbf 	bl	bf10c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf18e:	4b13      	ldr	r3, [pc, #76]	; (bf1dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bf190:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bf192:	a801      	add	r0, sp, #4
   bf194:	f7f6 f9a6 	bl	b54e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bf198:	462c      	mov	r4, r5
}
   bf19a:	4620      	mov	r0, r4
   bf19c:	b005      	add	sp, #20
   bf19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bf1a0:	490f      	ldr	r1, [pc, #60]	; (bf1e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bf1a2:	4638      	mov	r0, r7
   bf1a4:	f002 fa1e 	bl	c15e4 <strcmp>
   bf1a8:	b990      	cbnz	r0, bf1d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bf1aa:	2c00      	cmp	r4, #0
   bf1ac:	d0f5      	beq.n	bf19a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bf1ae:	4629      	mov	r1, r5
   bf1b0:	a801      	add	r0, sp, #4
   bf1b2:	f7ff fc9d 	bl	beaf0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bf1b6:	4908      	ldr	r1, [pc, #32]	; (bf1d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bf1b8:	2024      	movs	r0, #36	; 0x24
   bf1ba:	f001 fb6b 	bl	c0894 <_ZnwjRKSt9nothrow_t>
   bf1be:	4605      	mov	r5, r0
   bf1c0:	2800      	cmp	r0, #0
   bf1c2:	d0e6      	beq.n	bf192 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   bf1c4:	ab01      	add	r3, sp, #4
   bf1c6:	4632      	mov	r2, r6
   bf1c8:	4621      	mov	r1, r4
   bf1ca:	f7ff ff9f 	bl	bf10c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bf1ce:	e7e0      	b.n	bf192 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   bf1d0:	2400      	movs	r4, #0
   bf1d2:	e7e2      	b.n	bf19a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   bf1d4:	000c4c46 	.word	0x000c4c46
   bf1d8:	000c4e71 	.word	0x000c4e71
   bf1dc:	000c4cdc 	.word	0x000c4cdc
   bf1e0:	000c4c4a 	.word	0x000c4c4a

000bf1e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   bf1e4:	4b01      	ldr	r3, [pc, #4]	; (bf1ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bf1e6:	4a02      	ldr	r2, [pc, #8]	; (bf1f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bf1e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bf1ea:	4770      	bx	lr
   bf1ec:	2003e654 	.word	0x2003e654
   bf1f0:	000c4c5b 	.word	0x000c4c5b

000bf1f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf1f8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   bf1fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf1fe:	4604      	mov	r4, r0
   bf200:	460e      	mov	r6, r1
   bf202:	4617      	mov	r7, r2
   bf204:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   bf206:	f000 fe6f 	bl	bfee8 <_Z16_fetch_usbserialv>
   bf20a:	4581      	cmp	r9, r0
   bf20c:	d04c      	beq.n	bf2a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bf20e:	792b      	ldrb	r3, [r5, #4]
   bf210:	0719      	lsls	r1, r3, #28
   bf212:	d504      	bpl.n	bf21e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bf214:	696a      	ldr	r2, [r5, #20]
   bf216:	4954      	ldr	r1, [pc, #336]	; (bf368 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bf218:	4620      	mov	r0, r4
   bf21a:	f7ff fa8d 	bl	be738 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bf21e:	f1b8 0f00 	cmp.w	r8, #0
   bf222:	d00d      	beq.n	bf240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bf224:	215b      	movs	r1, #91	; 0x5b
   bf226:	4620      	mov	r0, r4
   bf228:	f7ff fa7a 	bl	be720 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bf22c:	4641      	mov	r1, r8
   bf22e:	4620      	mov	r0, r4
   bf230:	f7ff fa67 	bl	be702 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bf234:	6823      	ldr	r3, [r4, #0]
   bf236:	494d      	ldr	r1, [pc, #308]	; (bf36c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bf238:	68db      	ldr	r3, [r3, #12]
   bf23a:	2202      	movs	r2, #2
   bf23c:	4620      	mov	r0, r4
   bf23e:	4798      	blx	r3
    if (attr.has_file) {
   bf240:	792b      	ldrb	r3, [r5, #4]
   bf242:	07da      	lsls	r2, r3, #31
   bf244:	d523      	bpl.n	bf28e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bf246:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bf24a:	212f      	movs	r1, #47	; 0x2f
   bf24c:	4640      	mov	r0, r8
   bf24e:	f002 fa33 	bl	c16b8 <strrchr>
    if (s1) {
   bf252:	b108      	cbz	r0, bf258 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bf254:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bf258:	4641      	mov	r1, r8
   bf25a:	4620      	mov	r0, r4
   bf25c:	f7ff fa51 	bl	be702 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bf260:	792b      	ldrb	r3, [r5, #4]
   bf262:	079b      	lsls	r3, r3, #30
   bf264:	d508      	bpl.n	bf278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bf266:	213a      	movs	r1, #58	; 0x3a
   bf268:	4620      	mov	r0, r4
   bf26a:	f7ff fa59 	bl	be720 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bf26e:	68ea      	ldr	r2, [r5, #12]
   bf270:	493f      	ldr	r1, [pc, #252]	; (bf370 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bf272:	4620      	mov	r0, r4
   bf274:	f7ff fa60 	bl	be738 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bf278:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bf27a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bf27c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bf280:	68db      	ldr	r3, [r3, #12]
   bf282:	bf14      	ite	ne
   bf284:	493b      	ldrne	r1, [pc, #236]	; (bf374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bf286:	493c      	ldreq	r1, [pc, #240]	; (bf378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bf288:	2202      	movs	r2, #2
            write(": ", 2);
   bf28a:	4620      	mov	r0, r4
   bf28c:	4798      	blx	r3
    if (attr.has_function) {
   bf28e:	792b      	ldrb	r3, [r5, #4]
   bf290:	0758      	lsls	r0, r3, #29
   bf292:	d51d      	bpl.n	bf2d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf294:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf296:	460b      	mov	r3, r1
   bf298:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bf29a:	f813 0b01 	ldrb.w	r0, [r3], #1
   bf29e:	b160      	cbz	r0, bf2ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bf2a0:	2820      	cmp	r0, #32
   bf2a2:	d108      	bne.n	bf2b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bf2a4:	4619      	mov	r1, r3
   bf2a6:	e7f7      	b.n	bf298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bf2a8:	4834      	ldr	r0, [pc, #208]	; (bf37c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bf2aa:	f000 ffbc 	bl	c0226 <_ZN5spark12NetworkClass9listeningEv>
   bf2ae:	2800      	cmp	r0, #0
   bf2b0:	d0ad      	beq.n	bf20e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   bf2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   bf2b6:	2828      	cmp	r0, #40	; 0x28
   bf2b8:	d1ee      	bne.n	bf298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   bf2ba:	6823      	ldr	r3, [r4, #0]
   bf2bc:	1a52      	subs	r2, r2, r1
   bf2be:	68db      	ldr	r3, [r3, #12]
   bf2c0:	4620      	mov	r0, r4
   bf2c2:	4798      	blx	r3
        write("(): ", 4);
   bf2c4:	6823      	ldr	r3, [r4, #0]
   bf2c6:	492e      	ldr	r1, [pc, #184]	; (bf380 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   bf2c8:	68db      	ldr	r3, [r3, #12]
   bf2ca:	2204      	movs	r2, #4
   bf2cc:	4620      	mov	r0, r4
   bf2ce:	4798      	blx	r3
    return log_level_name(level, nullptr);
   bf2d0:	2100      	movs	r1, #0
   bf2d2:	4638      	mov	r0, r7
   bf2d4:	f7fd faf4 	bl	bc8c0 <log_level_name>
   bf2d8:	4601      	mov	r1, r0
    write(s);
   bf2da:	4620      	mov	r0, r4
   bf2dc:	f7ff fa11 	bl	be702 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   bf2e0:	6823      	ldr	r3, [r4, #0]
   bf2e2:	4925      	ldr	r1, [pc, #148]	; (bf378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   bf2e4:	68db      	ldr	r3, [r3, #12]
   bf2e6:	2202      	movs	r2, #2
   bf2e8:	4620      	mov	r0, r4
   bf2ea:	4798      	blx	r3
    if (msg) {
   bf2ec:	b11e      	cbz	r6, bf2f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   bf2ee:	4631      	mov	r1, r6
   bf2f0:	4620      	mov	r0, r4
   bf2f2:	f7ff fa06 	bl	be702 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   bf2f6:	792b      	ldrb	r3, [r5, #4]
   bf2f8:	f013 0f30 	tst.w	r3, #48	; 0x30
   bf2fc:	d02c      	beq.n	bf358 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   bf2fe:	6823      	ldr	r3, [r4, #0]
   bf300:	4920      	ldr	r1, [pc, #128]	; (bf384 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   bf302:	68db      	ldr	r3, [r3, #12]
   bf304:	2202      	movs	r2, #2
   bf306:	4620      	mov	r0, r4
   bf308:	4798      	blx	r3
        if (attr.has_code) {
   bf30a:	792b      	ldrb	r3, [r5, #4]
   bf30c:	06d9      	lsls	r1, r3, #27
   bf30e:	d50a      	bpl.n	bf326 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bf310:	6823      	ldr	r3, [r4, #0]
   bf312:	491d      	ldr	r1, [pc, #116]	; (bf388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bf314:	68db      	ldr	r3, [r3, #12]
   bf316:	2207      	movs	r2, #7
   bf318:	4620      	mov	r0, r4
   bf31a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bf31c:	69aa      	ldr	r2, [r5, #24]
   bf31e:	491b      	ldr	r1, [pc, #108]	; (bf38c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bf320:	4620      	mov	r0, r4
   bf322:	f7ff fa09 	bl	be738 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bf326:	792b      	ldrb	r3, [r5, #4]
   bf328:	069a      	lsls	r2, r3, #26
   bf32a:	d511      	bpl.n	bf350 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bf32c:	06db      	lsls	r3, r3, #27
   bf32e:	d505      	bpl.n	bf33c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bf330:	6823      	ldr	r3, [r4, #0]
   bf332:	4910      	ldr	r1, [pc, #64]	; (bf374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bf334:	68db      	ldr	r3, [r3, #12]
   bf336:	2202      	movs	r2, #2
   bf338:	4620      	mov	r0, r4
   bf33a:	4798      	blx	r3
            write("details = ", 10);
   bf33c:	6823      	ldr	r3, [r4, #0]
   bf33e:	4914      	ldr	r1, [pc, #80]	; (bf390 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bf340:	68db      	ldr	r3, [r3, #12]
   bf342:	4620      	mov	r0, r4
   bf344:	220a      	movs	r2, #10
   bf346:	4798      	blx	r3
            write(attr.details);
   bf348:	69e9      	ldr	r1, [r5, #28]
   bf34a:	4620      	mov	r0, r4
   bf34c:	f7ff f9d9 	bl	be702 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bf350:	215d      	movs	r1, #93	; 0x5d
   bf352:	4620      	mov	r0, r4
   bf354:	f7ff f9e4 	bl	be720 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bf358:	6823      	ldr	r3, [r4, #0]
   bf35a:	490e      	ldr	r1, [pc, #56]	; (bf394 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bf35c:	68db      	ldr	r3, [r3, #12]
   bf35e:	4620      	mov	r0, r4
   bf360:	2202      	movs	r2, #2
}
   bf362:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bf366:	4718      	bx	r3
   bf368:	000c4c5f 	.word	0x000c4c5f
   bf36c:	000c4c66 	.word	0x000c4c66
   bf370:	000c37b4 	.word	0x000c37b4
   bf374:	000c4c69 	.word	0x000c4c69
   bf378:	000c4c6e 	.word	0x000c4c6e
   bf37c:	2003e720 	.word	0x2003e720
   bf380:	000c4c6c 	.word	0x000c4c6c
   bf384:	000c4c71 	.word	0x000c4c71
   bf388:	000c4c74 	.word	0x000c4c74
   bf38c:	000c4c7c 	.word	0x000c4c7c
   bf390:	000c4c7f 	.word	0x000c4c7f
   bf394:	000c4c8a 	.word	0x000c4c8a

000bf398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf39c:	b085      	sub	sp, #20
    return stream_;
   bf39e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bf3a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bf3a4:	4605      	mov	r5, r0
   bf3a6:	460f      	mov	r7, r1
   bf3a8:	4690      	mov	r8, r2
   bf3aa:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bf3ac:	f000 fd9c 	bl	bfee8 <_Z16_fetch_usbserialv>
   bf3b0:	4581      	cmp	r9, r0
   bf3b2:	d105      	bne.n	bf3c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bf3b4:	4849      	ldr	r0, [pc, #292]	; (bf4dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bf3b6:	f000 ff36 	bl	c0226 <_ZN5spark12NetworkClass9listeningEv>
   bf3ba:	2800      	cmp	r0, #0
   bf3bc:	f040 808a 	bne.w	bf4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bf3c0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bf3c2:	4a47      	ldr	r2, [pc, #284]	; (bf4e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bf3c4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bf3c6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bf3ca:	a801      	add	r0, sp, #4
        strm_(stream) {
   bf3cc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bf3ce:	f88d 9008 	strb.w	r9, [sp, #8]
   bf3d2:	f001 f8cc 	bl	c056e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bf3d6:	4649      	mov	r1, r9
   bf3d8:	4640      	mov	r0, r8
   bf3da:	f7fd fa71 	bl	bc8c0 <log_level_name>
    json.name("l", 1).value(s);
   bf3de:	4941      	ldr	r1, [pc, #260]	; (bf4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bf3e0:	4680      	mov	r8, r0
   bf3e2:	2201      	movs	r2, #1
   bf3e4:	a801      	add	r0, sp, #4
   bf3e6:	f001 f951 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf3ea:	4641      	mov	r1, r8
   bf3ec:	f7ff f97b 	bl	be6e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bf3f0:	b13f      	cbz	r7, bf402 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bf3f2:	493d      	ldr	r1, [pc, #244]	; (bf4e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bf3f4:	2201      	movs	r2, #1
   bf3f6:	a801      	add	r0, sp, #4
   bf3f8:	f001 f948 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf3fc:	4639      	mov	r1, r7
   bf3fe:	f7ff f972 	bl	be6e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bf402:	b13e      	cbz	r6, bf414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bf404:	4939      	ldr	r1, [pc, #228]	; (bf4ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bf406:	2201      	movs	r2, #1
   bf408:	a801      	add	r0, sp, #4
   bf40a:	f001 f93f 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf40e:	4631      	mov	r1, r6
   bf410:	f7ff f969 	bl	be6e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bf414:	7923      	ldrb	r3, [r4, #4]
   bf416:	07df      	lsls	r7, r3, #31
   bf418:	d50e      	bpl.n	bf438 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bf41a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bf41c:	212f      	movs	r1, #47	; 0x2f
   bf41e:	4630      	mov	r0, r6
   bf420:	f002 f94a 	bl	c16b8 <strrchr>
    if (s1) {
   bf424:	b100      	cbz	r0, bf428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bf426:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bf428:	4931      	ldr	r1, [pc, #196]	; (bf4f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bf42a:	2201      	movs	r2, #1
   bf42c:	a801      	add	r0, sp, #4
   bf42e:	f001 f92d 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf432:	4631      	mov	r1, r6
   bf434:	f7ff f957 	bl	be6e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bf438:	7923      	ldrb	r3, [r4, #4]
   bf43a:	079e      	lsls	r6, r3, #30
   bf43c:	d507      	bpl.n	bf44e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bf43e:	492d      	ldr	r1, [pc, #180]	; (bf4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bf440:	2202      	movs	r2, #2
   bf442:	a801      	add	r0, sp, #4
   bf444:	f001 f922 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf448:	68e1      	ldr	r1, [r4, #12]
   bf44a:	f001 f89d 	bl	c0588 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bf44e:	7923      	ldrb	r3, [r4, #4]
   bf450:	0758      	lsls	r0, r3, #29
   bf452:	d514      	bpl.n	bf47e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf454:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf456:	4633      	mov	r3, r6
   bf458:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bf45a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf45e:	b12a      	cbz	r2, bf46c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bf460:	2a20      	cmp	r2, #32
   bf462:	d101      	bne.n	bf468 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bf464:	461e      	mov	r6, r3
   bf466:	e7f7      	b.n	bf458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bf468:	2a28      	cmp	r2, #40	; 0x28
   bf46a:	d1f5      	bne.n	bf458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bf46c:	4922      	ldr	r1, [pc, #136]	; (bf4f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bf46e:	2202      	movs	r2, #2
   bf470:	a801      	add	r0, sp, #4
   bf472:	f001 f90b 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf476:	1bba      	subs	r2, r7, r6
   bf478:	4631      	mov	r1, r6
   bf47a:	f001 f917 	bl	c06ac <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bf47e:	7923      	ldrb	r3, [r4, #4]
   bf480:	0719      	lsls	r1, r3, #28
   bf482:	d507      	bpl.n	bf494 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bf484:	491d      	ldr	r1, [pc, #116]	; (bf4fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bf486:	2201      	movs	r2, #1
   bf488:	a801      	add	r0, sp, #4
   bf48a:	f001 f8ff 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf48e:	6961      	ldr	r1, [r4, #20]
   bf490:	f001 f88c 	bl	c05ac <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bf494:	7923      	ldrb	r3, [r4, #4]
   bf496:	06da      	lsls	r2, r3, #27
   bf498:	d508      	bpl.n	bf4ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bf49a:	2204      	movs	r2, #4
   bf49c:	4918      	ldr	r1, [pc, #96]	; (bf500 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bf49e:	eb0d 0002 	add.w	r0, sp, r2
   bf4a2:	f001 f8f3 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf4a6:	69a1      	ldr	r1, [r4, #24]
   bf4a8:	f001 f86e 	bl	c0588 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bf4ac:	7923      	ldrb	r3, [r4, #4]
   bf4ae:	069b      	lsls	r3, r3, #26
   bf4b0:	d507      	bpl.n	bf4c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bf4b2:	4914      	ldr	r1, [pc, #80]	; (bf504 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bf4b4:	2206      	movs	r2, #6
   bf4b6:	a801      	add	r0, sp, #4
   bf4b8:	f001 f8e8 	bl	c068c <_ZN5spark10JSONWriter4nameEPKcj>
   bf4bc:	69e1      	ldr	r1, [r4, #28]
   bf4be:	f7ff f912 	bl	be6e6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bf4c2:	a801      	add	r0, sp, #4
   bf4c4:	f001 f83d 	bl	c0542 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bf4c8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bf4ca:	490f      	ldr	r1, [pc, #60]	; (bf508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bf4cc:	6803      	ldr	r3, [r0, #0]
   bf4ce:	2202      	movs	r2, #2
   bf4d0:	68db      	ldr	r3, [r3, #12]
   bf4d2:	4798      	blx	r3
}
   bf4d4:	b005      	add	sp, #20
   bf4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf4da:	bf00      	nop
   bf4dc:	2003e720 	.word	0x2003e720
   bf4e0:	000c4cac 	.word	0x000c4cac
   bf4e4:	000c4c3c 	.word	0x000c4c3c
   bf4e8:	000c4c8d 	.word	0x000c4c8d
   bf4ec:	000c527e 	.word	0x000c527e
   bf4f0:	000c3918 	.word	0x000c3918
   bf4f4:	000c4c8f 	.word	0x000c4c8f
   bf4f8:	000c4c92 	.word	0x000c4c92
   bf4fc:	000c3a5f 	.word	0x000c3a5f
   bf500:	000c4c95 	.word	0x000c4c95
   bf504:	000c4c9a 	.word	0x000c4c9a
   bf508:	000c4c8a 	.word	0x000c4c8a

000bf50c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bf50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bf510:	4a15      	ldr	r2, [pc, #84]	; (bf568 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bf512:	f8df 8060 	ldr.w	r8, [pc, #96]	; bf574 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bf516:	e9d2 6300 	ldrd	r6, r3, [r2]
   bf51a:	1980      	adds	r0, r0, r6
   bf51c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bf520:	4b12      	ldr	r3, [pc, #72]	; (bf56c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bf522:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bf526:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bf52a:	1986      	adds	r6, r0, r6
   bf52c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bf530:	42bb      	cmp	r3, r7
   bf532:	bf08      	it	eq
   bf534:	42b2      	cmpeq	r2, r6
{
   bf536:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bf538:	d013      	beq.n	bf562 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bf53a:	a903      	add	r1, sp, #12
   bf53c:	4668      	mov	r0, sp
   bf53e:	e9cd 6700 	strd	r6, r7, [sp]
   bf542:	f7fd fb0b 	bl	bcb5c <localtime_r>
	calendar_time.tm_year += 1900;
   bf546:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf548:	4d09      	ldr	r5, [pc, #36]	; (bf570 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bf54a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf54e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bf550:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bf55a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bf55e:	6823      	ldr	r3, [r4, #0]
   bf560:	602b      	str	r3, [r5, #0]
    }
}
   bf562:	b00c      	add	sp, #48	; 0x30
   bf564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bf568:	2003e6b0 	.word	0x2003e6b0
   bf56c:	2003e6a8 	.word	0x2003e6a8
   bf570:	2003e684 	.word	0x2003e684
   bf574:	2003e6b8 	.word	0x2003e6b8

000bf578 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bf578:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf57a:	2000      	movs	r0, #0
   bf57c:	f7fd fa86 	bl	bca8c <spark_sync_time_pending>
   bf580:	b128      	cbz	r0, bf58e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bf582:	f7fd fa6b 	bl	bca5c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf586:	f080 0001 	eor.w	r0, r0, #1
   bf58a:	b2c0      	uxtb	r0, r0
    }
   bf58c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bf58e:	2001      	movs	r0, #1
   bf590:	e7fc      	b.n	bf58c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bf594 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bf594:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bf596:	f7ff ffb9 	bl	bf50c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bf59a:	4b02      	ldr	r3, [pc, #8]	; (bf5a4 <_ZN9TimeClass5monthEx+0x10>)
   bf59c:	6918      	ldr	r0, [r3, #16]
}
   bf59e:	3001      	adds	r0, #1
   bf5a0:	bd08      	pop	{r3, pc}
   bf5a2:	bf00      	nop
   bf5a4:	2003e684 	.word	0x2003e684

000bf5a8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bf5a8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bf5aa:	2000      	movs	r0, #0
   bf5ac:	f7fc ff1e 	bl	bc3ec <hal_rtc_time_is_valid>
    if (rtcstate)
   bf5b0:	4604      	mov	r4, r0
   bf5b2:	b9a0      	cbnz	r0, bf5de <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bf5b4:	f7fd f99e 	bl	bc8f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bf5b8:	2801      	cmp	r0, #1
   bf5ba:	d110      	bne.n	bf5de <_ZN9TimeClass7isValidEv+0x36>
   bf5bc:	4620      	mov	r0, r4
   bf5be:	f7fd f9c1 	bl	bc944 <system_thread_get_state>
   bf5c2:	b960      	cbnz	r0, bf5de <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bf5c4:	f7ff ffd8 	bl	bf578 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bf5c8:	b910      	cbnz	r0, bf5d0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bf5ca:	f7fd fa3f 	bl	bca4c <spark_process>
        while (_while() && !_condition()) {
   bf5ce:	e7f9      	b.n	bf5c4 <_ZN9TimeClass7isValidEv+0x1c>
   bf5d0:	f7ff ffd2 	bl	bf578 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bf5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bf5d8:	2000      	movs	r0, #0
   bf5da:	f7fc bf07 	b.w	bc3ec <hal_rtc_time_is_valid>
}
   bf5de:	4620      	mov	r0, r4
   bf5e0:	bd10      	pop	{r4, pc}

000bf5e2 <_ZN9TimeClass3nowEv>:
{
   bf5e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bf5e4:	f7ff ffe0 	bl	bf5a8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bf5e8:	2210      	movs	r2, #16
   bf5ea:	2100      	movs	r1, #0
   bf5ec:	4668      	mov	r0, sp
   bf5ee:	f001 ff9d 	bl	c152c <memset>
    hal_rtc_get_time(&tv, nullptr);
   bf5f2:	2100      	movs	r1, #0
   bf5f4:	4668      	mov	r0, sp
   bf5f6:	f7fc ff01 	bl	bc3fc <hal_rtc_get_time>
}
   bf5fa:	9800      	ldr	r0, [sp, #0]
   bf5fc:	b005      	add	sp, #20
   bf5fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf604 <_ZN9TimeClass4hourEv>:
{
   bf604:	b508      	push	{r3, lr}
	return hour(now());
   bf606:	f7ff ffec 	bl	bf5e2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf60a:	17c1      	asrs	r1, r0, #31
   bf60c:	f7ff ff7e 	bl	bf50c <_ZL22Refresh_UnixTime_Cachex>
}
   bf610:	4b01      	ldr	r3, [pc, #4]	; (bf618 <_ZN9TimeClass4hourEv+0x14>)
   bf612:	6898      	ldr	r0, [r3, #8]
   bf614:	bd08      	pop	{r3, pc}
   bf616:	bf00      	nop
   bf618:	2003e684 	.word	0x2003e684

000bf61c <_ZN9TimeClass6minuteEv>:
{
   bf61c:	b508      	push	{r3, lr}
	return minute(now());
   bf61e:	f7ff ffe0 	bl	bf5e2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf622:	17c1      	asrs	r1, r0, #31
   bf624:	f7ff ff72 	bl	bf50c <_ZL22Refresh_UnixTime_Cachex>
}
   bf628:	4b01      	ldr	r3, [pc, #4]	; (bf630 <_ZN9TimeClass6minuteEv+0x14>)
   bf62a:	6858      	ldr	r0, [r3, #4]
   bf62c:	bd08      	pop	{r3, pc}
   bf62e:	bf00      	nop
   bf630:	2003e684 	.word	0x2003e684

000bf634 <_ZN9TimeClass6secondEv>:
{
   bf634:	b508      	push	{r3, lr}
	return second(now());
   bf636:	f7ff ffd4 	bl	bf5e2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf63a:	17c1      	asrs	r1, r0, #31
   bf63c:	f7ff ff66 	bl	bf50c <_ZL22Refresh_UnixTime_Cachex>
}
   bf640:	4b01      	ldr	r3, [pc, #4]	; (bf648 <_ZN9TimeClass6secondEv+0x14>)
   bf642:	6818      	ldr	r0, [r3, #0]
   bf644:	bd08      	pop	{r3, pc}
   bf646:	bf00      	nop
   bf648:	2003e684 	.word	0x2003e684

000bf64c <_ZN9TimeClass3dayEv>:
{
   bf64c:	b508      	push	{r3, lr}
	return day(now());
   bf64e:	f7ff ffc8 	bl	bf5e2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf652:	17c1      	asrs	r1, r0, #31
   bf654:	f7ff ff5a 	bl	bf50c <_ZL22Refresh_UnixTime_Cachex>
}
   bf658:	4b01      	ldr	r3, [pc, #4]	; (bf660 <_ZN9TimeClass3dayEv+0x14>)
   bf65a:	68d8      	ldr	r0, [r3, #12]
   bf65c:	bd08      	pop	{r3, pc}
   bf65e:	bf00      	nop
   bf660:	2003e684 	.word	0x2003e684

000bf664 <_ZN9TimeClass5monthEv>:
{
   bf664:	b508      	push	{r3, lr}
	return month(now());
   bf666:	f7ff ffbc 	bl	bf5e2 <_ZN9TimeClass3nowEv>
}
   bf66a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bf66e:	17c1      	asrs	r1, r0, #31
   bf670:	f7ff bf90 	b.w	bf594 <_ZN9TimeClass5monthEx>

000bf674 <_ZN9TimeClass4yearEv>:
{
   bf674:	b508      	push	{r3, lr}
	return year(now());
   bf676:	f7ff ffb4 	bl	bf5e2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bf67a:	17c1      	asrs	r1, r0, #31
   bf67c:	f7ff ff46 	bl	bf50c <_ZL22Refresh_UnixTime_Cachex>
}
   bf680:	4b01      	ldr	r3, [pc, #4]	; (bf688 <_ZN9TimeClass4yearEv+0x14>)
   bf682:	6958      	ldr	r0, [r3, #20]
   bf684:	bd08      	pop	{r3, pc}
   bf686:	bf00      	nop
   bf688:	2003e684 	.word	0x2003e684

000bf68c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bf68c:	4b02      	ldr	r3, [pc, #8]	; (bf698 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bf68e:	681a      	ldr	r2, [r3, #0]
   bf690:	4b02      	ldr	r3, [pc, #8]	; (bf69c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bf692:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bf694:	4770      	bx	lr
   bf696:	bf00      	nop
   bf698:	2003dbec 	.word	0x2003dbec
   bf69c:	2003e680 	.word	0x2003e680

000bf6a0 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bf6a0:	428a      	cmp	r2, r1
{
   bf6a2:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bf6a4:	d007      	beq.n	bf6b6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bf6a6:	1a44      	subs	r4, r0, r1
   bf6a8:	9802      	ldr	r0, [sp, #8]
   bf6aa:	1ac0      	subs	r0, r0, r3
   bf6ac:	4344      	muls	r4, r0
   bf6ae:	1a50      	subs	r0, r2, r1
   bf6b0:	fb94 f0f0 	sdiv	r0, r4, r0
   bf6b4:	4418      	add	r0, r3
}
   bf6b6:	bd10      	pop	{r4, pc}

000bf6b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bf6b8:	2100      	movs	r1, #0
   bf6ba:	f7fd b92b 	b.w	bc914 <system_delay_ms>
	...

000bf6c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bf6c0:	4b01      	ldr	r3, [pc, #4]	; (bf6c8 <_GLOBAL__sub_I_RGB+0x8>)
   bf6c2:	2200      	movs	r2, #0
   bf6c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bf6c6:	4770      	bx	lr
   bf6c8:	2003e6c0 	.word	0x2003e6c0

000bf6cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bf6cc:	4b01      	ldr	r3, [pc, #4]	; (bf6d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bf6ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bf6d0:	4770      	bx	lr
   bf6d2:	bf00      	nop
   bf6d4:	2003dbf0 	.word	0x2003dbf0

000bf6d8 <serialEventRun>:
{
   bf6d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bf6da:	4b0b      	ldr	r3, [pc, #44]	; (bf708 <serialEventRun+0x30>)
   bf6dc:	b143      	cbz	r3, bf6f0 <serialEventRun+0x18>
   bf6de:	f000 fc03 	bl	bfee8 <_Z16_fetch_usbserialv>
   bf6e2:	6803      	ldr	r3, [r0, #0]
   bf6e4:	691b      	ldr	r3, [r3, #16]
   bf6e6:	4798      	blx	r3
   bf6e8:	2800      	cmp	r0, #0
   bf6ea:	dd01      	ble.n	bf6f0 <serialEventRun+0x18>
        serialEvent();
   bf6ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bf6f0:	4b06      	ldr	r3, [pc, #24]	; (bf70c <serialEventRun+0x34>)
   bf6f2:	b143      	cbz	r3, bf706 <serialEventRun+0x2e>
   bf6f4:	f001 f86e 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   bf6f8:	6803      	ldr	r3, [r0, #0]
   bf6fa:	691b      	ldr	r3, [r3, #16]
   bf6fc:	4798      	blx	r3
   bf6fe:	2800      	cmp	r0, #0
   bf700:	dd01      	ble.n	bf706 <serialEventRun+0x2e>
        serialEvent1();
   bf702:	f3af 8000 	nop.w
}
   bf706:	bd08      	pop	{r3, pc}
	...

000bf710 <_post_loop>:
{
   bf710:	b508      	push	{r3, lr}
	serialEventRun();
   bf712:	f7ff ffe1 	bl	bf6d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bf716:	f7fc fe61 	bl	bc3dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bf71a:	4b01      	ldr	r3, [pc, #4]	; (bf720 <_post_loop+0x10>)
   bf71c:	6018      	str	r0, [r3, #0]
}
   bf71e:	bd08      	pop	{r3, pc}
   bf720:	2003e740 	.word	0x2003e740

000bf724 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf724:	4805      	ldr	r0, [pc, #20]	; (bf73c <_Z33system_initialize_user_backup_ramv+0x18>)
   bf726:	4a06      	ldr	r2, [pc, #24]	; (bf740 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bf728:	4906      	ldr	r1, [pc, #24]	; (bf744 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bf72a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bf72c:	1a12      	subs	r2, r2, r0
   bf72e:	f001 fed5 	bl	c14dc <memcpy>
    __backup_sram_signature = signature;
   bf732:	4b05      	ldr	r3, [pc, #20]	; (bf748 <_Z33system_initialize_user_backup_ramv+0x24>)
   bf734:	4a05      	ldr	r2, [pc, #20]	; (bf74c <_Z33system_initialize_user_backup_ramv+0x28>)
   bf736:	601a      	str	r2, [r3, #0]
}
   bf738:	bd08      	pop	{r3, pc}
   bf73a:	bf00      	nop
   bf73c:	2003f400 	.word	0x2003f400
   bf740:	2003f404 	.word	0x2003f404
   bf744:	000c53c4 	.word	0x000c53c4
   bf748:	2003f400 	.word	0x2003f400
   bf74c:	9a271c1e 	.word	0x9a271c1e

000bf750 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bf750:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf752:	2300      	movs	r3, #0
   bf754:	9300      	str	r3, [sp, #0]
   bf756:	461a      	mov	r2, r3
   bf758:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf75c:	f7fd f90c 	bl	bc978 <system_ctrl_set_result>
}
   bf760:	b003      	add	sp, #12
   bf762:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bf768 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bf768:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bf76a:	8843      	ldrh	r3, [r0, #2]
   bf76c:	2b0a      	cmp	r3, #10
   bf76e:	d008      	beq.n	bf782 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bf770:	2b50      	cmp	r3, #80	; 0x50
   bf772:	d10b      	bne.n	bf78c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bf774:	4b09      	ldr	r3, [pc, #36]	; (bf79c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bf776:	681b      	ldr	r3, [r3, #0]
   bf778:	b14b      	cbz	r3, bf78e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bf77a:	b003      	add	sp, #12
   bf77c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bf780:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bf782:	f7ff ffe5 	bl	bf750 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bf786:	b003      	add	sp, #12
   bf788:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bf78c:	2300      	movs	r3, #0
   bf78e:	9300      	str	r3, [sp, #0]
   bf790:	461a      	mov	r2, r3
   bf792:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bf796:	f7fd f8ef 	bl	bc978 <system_ctrl_set_result>
}
   bf79a:	e7f4      	b.n	bf786 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bf79c:	2003e6d4 	.word	0x2003e6d4

000bf7a0 <module_user_init_hook>:
{
   bf7a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bf7a2:	4812      	ldr	r0, [pc, #72]	; (bf7ec <module_user_init_hook+0x4c>)
   bf7a4:	2100      	movs	r1, #0
   bf7a6:	f7fd f9d1 	bl	bcb4c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bf7aa:	4b11      	ldr	r3, [pc, #68]	; (bf7f0 <module_user_init_hook+0x50>)
   bf7ac:	681a      	ldr	r2, [r3, #0]
   bf7ae:	4b11      	ldr	r3, [pc, #68]	; (bf7f4 <module_user_init_hook+0x54>)
   bf7b0:	429a      	cmp	r2, r3
   bf7b2:	4b11      	ldr	r3, [pc, #68]	; (bf7f8 <module_user_init_hook+0x58>)
   bf7b4:	bf0c      	ite	eq
   bf7b6:	2201      	moveq	r2, #1
   bf7b8:	2200      	movne	r2, #0
   bf7ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bf7bc:	d001      	beq.n	bf7c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bf7be:	f7ff ffb1 	bl	bf724 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bf7c2:	f7fc fdf3 	bl	bc3ac <HAL_RNG_GetRandomNumber>
   bf7c6:	4604      	mov	r4, r0
    srand(seed);
   bf7c8:	f001 feb8 	bl	c153c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bf7cc:	4b0b      	ldr	r3, [pc, #44]	; (bf7fc <module_user_init_hook+0x5c>)
   bf7ce:	b113      	cbz	r3, bf7d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bf7d0:	4620      	mov	r0, r4
   bf7d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bf7d6:	2100      	movs	r1, #0
   bf7d8:	4808      	ldr	r0, [pc, #32]	; (bf7fc <module_user_init_hook+0x5c>)
   bf7da:	f7fd f95f 	bl	bca9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bf7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bf7e2:	4807      	ldr	r0, [pc, #28]	; (bf800 <module_user_init_hook+0x60>)
   bf7e4:	2100      	movs	r1, #0
   bf7e6:	f7fd b8bd 	b.w	bc964 <system_ctrl_set_app_request_handler>
   bf7ea:	bf00      	nop
   bf7ec:	000bf6cd 	.word	0x000bf6cd
   bf7f0:	2003f400 	.word	0x2003f400
   bf7f4:	9a271c1e 	.word	0x9a271c1e
   bf7f8:	2003e6d0 	.word	0x2003e6d0
   bf7fc:	00000000 	.word	0x00000000
   bf800:	000bf769 	.word	0x000bf769

000bf804 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf804:	4770      	bx	lr

000bf806 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bf806:	2000      	movs	r0, #0
   bf808:	4770      	bx	lr

000bf80a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf80a:	b510      	push	{r4, lr}
   bf80c:	2110      	movs	r1, #16
   bf80e:	4604      	mov	r4, r0
   bf810:	f7f4 fc47 	bl	b40a2 <_ZdlPvj>
   bf814:	4620      	mov	r0, r4
   bf816:	bd10      	pop	{r4, pc}

000bf818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bf818:	b508      	push	{r3, lr}
      { delete this; }
   bf81a:	f7ff fff6 	bl	bf80a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bf81e:	bd08      	pop	{r3, pc}

000bf820 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bf820:	b530      	push	{r4, r5, lr}
        type_(type) {
   bf822:	2200      	movs	r2, #0
   bf824:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bf828:	6002      	str	r2, [r0, #0]
   bf82a:	8084      	strh	r4, [r0, #4]
   bf82c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bf82e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf830:	680c      	ldr	r4, [r1, #0]
   bf832:	8085      	strh	r5, [r0, #4]
   bf834:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf836:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bf838:	bd30      	pop	{r4, r5, pc}

000bf83a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bf83a:	b510      	push	{r4, lr}
   bf83c:	4604      	mov	r4, r0
    free((void*)msg_);
   bf83e:	6800      	ldr	r0, [r0, #0]
   bf840:	f7fd f93c 	bl	bcabc <free>
}
   bf844:	4620      	mov	r0, r4
   bf846:	bd10      	pop	{r4, pc}

000bf848 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf848:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bf84a:	68c4      	ldr	r4, [r0, #12]
   bf84c:	b1f4      	cbz	r4, bf88c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bf84e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bf850:	2b02      	cmp	r3, #2
   bf852:	d103      	bne.n	bf85c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bf854:	f104 000c 	add.w	r0, r4, #12
   bf858:	f7ff ffef 	bl	bf83a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bf85c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bf85e:	b135      	cbz	r5, bf86e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bf860:	4628      	mov	r0, r5
   bf862:	f7f4 fd87 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
   bf866:	2110      	movs	r1, #16
   bf868:	4628      	mov	r0, r5
   bf86a:	f7f4 fc1a 	bl	b40a2 <_ZdlPvj>
   bf86e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bf870:	b135      	cbz	r5, bf880 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bf872:	4628      	mov	r0, r5
   bf874:	f7f4 fd7e 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
   bf878:	2110      	movs	r1, #16
   bf87a:	4628      	mov	r0, r5
   bf87c:	f7f4 fc11 	bl	b40a2 <_ZdlPvj>
   bf880:	4620      	mov	r0, r4
   bf882:	2114      	movs	r1, #20
   bf884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf888:	f7f4 bc0b 	b.w	b40a2 <_ZdlPvj>
   bf88c:	bd38      	pop	{r3, r4, r5, pc}

000bf88e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf88e:	680b      	ldr	r3, [r1, #0]
   bf890:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf892:	684b      	ldr	r3, [r1, #4]
   bf894:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf896:	b113      	cbz	r3, bf89e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bf898:	685a      	ldr	r2, [r3, #4]
   bf89a:	3201      	adds	r2, #1
   bf89c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf89e:	4770      	bx	lr

000bf8a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bf8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf8a2:	4604      	mov	r4, r0
   bf8a4:	4668      	mov	r0, sp
   bf8a6:	460d      	mov	r5, r1
   bf8a8:	f7ff fff1 	bl	bf88e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf8ac:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf8ae:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf8b0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bf8b2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bf8b4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf8b6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bf8b8:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bf8ba:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bf8bc:	f7f5 fc4a 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bf8c0:	b135      	cbz	r5, bf8d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bf8c2:	1d28      	adds	r0, r5, #4
   bf8c4:	f7f5 fc46 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf8c8:	2108      	movs	r1, #8
   bf8ca:	4628      	mov	r0, r5
   bf8cc:	f7f4 fbe9 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bf8d0:	4620      	mov	r0, r4
   bf8d2:	b003      	add	sp, #12
   bf8d4:	bd30      	pop	{r4, r5, pc}

000bf8d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bf8d6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf8d8:	b510      	push	{r4, lr}
      if (_M_empty())
   bf8da:	b90a      	cbnz	r2, bf8e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bf8dc:	f000 ffde 	bl	c089c <_ZSt25__throw_bad_function_callv>
    }
   bf8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf8e4:	68c3      	ldr	r3, [r0, #12]
   bf8e6:	4718      	bx	r3

000bf8e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf8e8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf8ea:	6800      	ldr	r0, [r0, #0]
   bf8ec:	f100 0110 	add.w	r1, r0, #16
   bf8f0:	f7ff fff1 	bl	bf8d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bf8f4:	bd08      	pop	{r3, pc}

000bf8f6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bf8f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf8f8:	b510      	push	{r4, lr}
      if (_M_empty())
   bf8fa:	b90a      	cbnz	r2, bf900 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bf8fc:	f000 ffce 	bl	c089c <_ZSt25__throw_bad_function_callv>
    }
   bf900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf904:	68c3      	ldr	r3, [r0, #12]
   bf906:	4718      	bx	r3

000bf908 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf908:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf90a:	6800      	ldr	r0, [r0, #0]
   bf90c:	f100 0110 	add.w	r1, r0, #16
   bf910:	f7ff fff1 	bl	bf8f6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bf914:	bd08      	pop	{r3, pc}
	...

000bf918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bf918:	b538      	push	{r3, r4, r5, lr}
   bf91a:	2300      	movs	r3, #0
   bf91c:	4604      	mov	r4, r0
   bf91e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf920:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bf922:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf924:	f7f4 fbb7 	bl	b4096 <_Znwj>
   bf928:	b128      	cbz	r0, bf936 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bf92a:	2301      	movs	r3, #1
   bf92c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bf930:	4b02      	ldr	r3, [pc, #8]	; (bf93c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bf932:	6003      	str	r3, [r0, #0]
   bf934:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf936:	6020      	str	r0, [r4, #0]
	}
   bf938:	4620      	mov	r0, r4
   bf93a:	bd38      	pop	{r3, r4, r5, pc}
   bf93c:	000c4d40 	.word	0x000c4d40

000bf940 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bf940:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf942:	2300      	movs	r3, #0
   bf944:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf946:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf948:	4604      	mov	r4, r0
   bf94a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf94c:	b12b      	cbz	r3, bf95a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf94e:	2202      	movs	r2, #2
   bf950:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf952:	68eb      	ldr	r3, [r5, #12]
   bf954:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf956:	68ab      	ldr	r3, [r5, #8]
   bf958:	60a3      	str	r3, [r4, #8]
    }
   bf95a:	4620      	mov	r0, r4
   bf95c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bf960:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf962:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bf964:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bf966:	4668      	mov	r0, sp
   bf968:	f7ff ff5a 	bl	bf820 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf96c:	f04f 0302 	mov.w	r3, #2
   bf970:	e8d4 2f4f 	ldrexb	r2, [r4]
   bf974:	2a00      	cmp	r2, #0
   bf976:	d103      	bne.n	bf980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bf978:	e8c4 3f41 	strexb	r1, r3, [r4]
   bf97c:	2900      	cmp	r1, #0
   bf97e:	d1f7      	bne.n	bf970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bf980:	d125      	bne.n	bf9ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bf982:	f104 050c 	add.w	r5, r4, #12
   bf986:	4669      	mov	r1, sp
   bf988:	4628      	mov	r0, r5
   bf98a:	f7ff ff49 	bl	bf820 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bf98e:	f3bf 8f5b 	dmb	ish
   bf992:	2301      	movs	r3, #1
   bf994:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf996:	2000      	movs	r0, #0
   bf998:	f104 0308 	add.w	r3, r4, #8
   bf99c:	f3bf 8f5b 	dmb	ish
   bf9a0:	e853 6f00 	ldrex	r6, [r3]
   bf9a4:	e843 0200 	strex	r2, r0, [r3]
   bf9a8:	2a00      	cmp	r2, #0
   bf9aa:	d1f9      	bne.n	bf9a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bf9ac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf9b0:	b16e      	cbz	r6, bf9ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bf9b2:	f7fc ffb7 	bl	bc924 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf9b6:	b178      	cbz	r0, bf9d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf9b8:	4629      	mov	r1, r5
   bf9ba:	4630      	mov	r0, r6
   bf9bc:	f7ff ff8b 	bl	bf8d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bf9c0:	4630      	mov	r0, r6
   bf9c2:	f7f4 fcd7 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf9c6:	2110      	movs	r1, #16
   bf9c8:	4630      	mov	r0, r6
   bf9ca:	f7f4 fb6a 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bf9ce:	4668      	mov	r0, sp
   bf9d0:	f7ff ff33 	bl	bf83a <_ZN8particle5ErrorD1Ev>
    }
   bf9d4:	b009      	add	sp, #36	; 0x24
   bf9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf9d8:	4631      	mov	r1, r6
   bf9da:	a802      	add	r0, sp, #8
   bf9dc:	f7ff ffb0 	bl	bf940 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf9e0:	68e0      	ldr	r0, [r4, #12]
   bf9e2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf9e6:	b108      	cbz	r0, bf9ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bf9e8:	f001 fe0e 	bl	c1608 <strdup>
        type_(type) {
   bf9ec:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf9ee:	2010      	movs	r0, #16
   bf9f0:	f8ad 501c 	strh.w	r5, [sp, #28]
   bf9f4:	f7f4 fb4f 	bl	b4096 <_Znwj>
   bf9f8:	4605      	mov	r5, r0
   bf9fa:	b1e8      	cbz	r0, bfa38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bf9fc:	2700      	movs	r7, #0
   bf9fe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfa00:	2018      	movs	r0, #24
   bfa02:	f7f4 fb48 	bl	b4096 <_Znwj>
   bfa06:	4604      	mov	r4, r0
   bfa08:	b188      	cbz	r0, bfa2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bfa0a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bfa0c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfa0e:	a802      	add	r0, sp, #8
   bfa10:	f7fe fab2 	bl	bdf78 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfa14:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfa16:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfa18:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfa1a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfa1c:	9204      	str	r2, [sp, #16]
   bfa1e:	a906      	add	r1, sp, #24
   bfa20:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfa22:	60e3      	str	r3, [r4, #12]
   bfa24:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bfa28:	9205      	str	r2, [sp, #20]
   bfa2a:	f7ff fef9 	bl	bf820 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bfa2e:	4b08      	ldr	r3, [pc, #32]	; (bfa50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bfa30:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfa32:	4b08      	ldr	r3, [pc, #32]	; (bfa54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfa34:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfa36:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bfa38:	a806      	add	r0, sp, #24
   bfa3a:	f7ff fefe 	bl	bf83a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfa3e:	a802      	add	r0, sp, #8
   bfa40:	f7f4 fc98 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfa44:	2200      	movs	r2, #0
   bfa46:	4629      	mov	r1, r5
   bfa48:	4803      	ldr	r0, [pc, #12]	; (bfa58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bfa4a:	f7fc ff73 	bl	bc934 <application_thread_invoke>
   bfa4e:	e7b7      	b.n	bf9c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bfa50:	000bf8e9 	.word	0x000bf8e9
   bfa54:	000bfb6d 	.word	0x000bfb6d
   bfa58:	000c008d 	.word	0x000c008d

000bfa5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bfa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfa60:	b08b      	sub	sp, #44	; 0x2c
   bfa62:	4605      	mov	r5, r0
   bfa64:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bfa68:	460f      	mov	r7, r1
   bfa6a:	4690      	mov	r8, r2
   bfa6c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfa6e:	f7fc fff5 	bl	bca5c <spark_cloud_flag_connected>
   bfa72:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bfa74:	4683      	mov	fp, r0
   bfa76:	bb38      	cbnz	r0, bfac8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bfa78:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bfa7c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfa7e:	a905      	add	r1, sp, #20
   bfa80:	4630      	mov	r0, r6
   bfa82:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfa86:	f7ff fecb 	bl	bf820 <_ZN8particle5ErrorC1EOS0_>
   bfa8a:	2014      	movs	r0, #20
   bfa8c:	f7f4 fb03 	bl	b4096 <_Znwj>
   bfa90:	4604      	mov	r4, r0
   bfa92:	b148      	cbz	r0, bfaa8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bfa94:	2302      	movs	r3, #2
   bfa96:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfa98:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfa9a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfa9e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bfaa0:	4631      	mov	r1, r6
   bfaa2:	300c      	adds	r0, #12
   bfaa4:	f7ff febc 	bl	bf820 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfaa8:	4628      	mov	r0, r5
	: __shared_count(__p)
   bfaaa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfaac:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bfab0:	f7ff ff32 	bl	bf918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfab4:	4630      	mov	r0, r6
   bfab6:	f7ff fec0 	bl	bf83a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bfaba:	a805      	add	r0, sp, #20
   bfabc:	f7ff febd 	bl	bf83a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bfac0:	4628      	mov	r0, r5
   bfac2:	b00b      	add	sp, #44	; 0x2c
   bfac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bfac8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bfaca:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bfacc:	2014      	movs	r0, #20
   bface:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bfad2:	9307      	str	r3, [sp, #28]
   bfad4:	f7f4 fadf 	bl	b4096 <_Znwj>
   bfad8:	4601      	mov	r1, r0
   bfada:	b118      	cbz	r0, bfae4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfadc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfae0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfae2:	7044      	strb	r4, [r0, #1]
   bfae4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfae6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bfae8:	f7ff ff16 	bl	bf918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bfaec:	4b1e      	ldr	r3, [pc, #120]	; (bfb68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bfaee:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bfaf0:	2008      	movs	r0, #8
   bfaf2:	f7f4 fad0 	bl	b4096 <_Znwj>
   bfaf6:	4604      	mov	r4, r0
   bfaf8:	b110      	cbz	r0, bfb00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bfafa:	a903      	add	r1, sp, #12
   bfafc:	f7ff fec7 	bl	bf88e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfb00:	9600      	str	r6, [sp, #0]
   bfb02:	fa5f f38a 	uxtb.w	r3, sl
   bfb06:	464a      	mov	r2, r9
   bfb08:	4641      	mov	r1, r8
   bfb0a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bfb0c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfb0e:	f7fc ffad 	bl	bca6c <spark_send_event>
   bfb12:	b9b8      	cbnz	r0, bfb44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bfb14:	9b03      	ldr	r3, [sp, #12]
   bfb16:	785b      	ldrb	r3, [r3, #1]
   bfb18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bfb1c:	b993      	cbnz	r3, bfb44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bfb1e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bfb22:	a905      	add	r1, sp, #20
   bfb24:	a803      	add	r0, sp, #12
   bfb26:	9205      	str	r2, [sp, #20]
   bfb28:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfb2c:	f7ff ff18 	bl	bf960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfb30:	a805      	add	r0, sp, #20
   bfb32:	f7ff fe82 	bl	bf83a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bfb36:	a805      	add	r0, sp, #20
   bfb38:	9909      	ldr	r1, [sp, #36]	; 0x24
   bfb3a:	f7ff feb1 	bl	bf8a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bfb3e:	a806      	add	r0, sp, #24
   bfb40:	f7f5 fb08 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb44:	a903      	add	r1, sp, #12
   bfb46:	a805      	add	r0, sp, #20
   bfb48:	f7ff fea1 	bl	bf88e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfb4c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bfb4e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfb50:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bfb52:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bfb54:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bfb56:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bfb58:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bfb5a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bfb5c:	f7f5 fafa 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb60:	a804      	add	r0, sp, #16
   bfb62:	f7f5 faf7 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bfb66:	e7ab      	b.n	bfac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bfb68:	000bfbe9 	.word	0x000bfbe9

000bfb6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bfb6c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfb6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfb70:	4605      	mov	r5, r0
	switch (__op)
   bfb72:	d103      	bne.n	bfb7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfb74:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfb76:	6003      	str	r3, [r0, #0]
      }
   bfb78:	2000      	movs	r0, #0
   bfb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bfb7c:	2a02      	cmp	r2, #2
   bfb7e:	d010      	beq.n	bfba2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bfb80:	2a03      	cmp	r2, #3
   bfb82:	d1f9      	bne.n	bfb78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfb84:	6804      	ldr	r4, [r0, #0]
   bfb86:	2c00      	cmp	r4, #0
   bfb88:	d0f6      	beq.n	bfb78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bfb8a:	f104 0010 	add.w	r0, r4, #16
   bfb8e:	f7ff fe54 	bl	bf83a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfb92:	4620      	mov	r0, r4
   bfb94:	f7f4 fbee 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfb98:	2118      	movs	r1, #24
   bfb9a:	4620      	mov	r0, r4
   bfb9c:	f7f4 fa81 	bl	b40a2 <_ZdlPvj>
   bfba0:	e7ea      	b.n	bfb78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfba2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bfba4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfba6:	f7f4 fa76 	bl	b4096 <_Znwj>
   bfbaa:	4604      	mov	r4, r0
   bfbac:	b150      	cbz	r0, bfbc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bfbae:	4631      	mov	r1, r6
   bfbb0:	f7ff fec6 	bl	bf940 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bfbb4:	6930      	ldr	r0, [r6, #16]
   bfbb6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfbba:	b108      	cbz	r0, bfbc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bfbbc:	f001 fd24 	bl	c1608 <strdup>
        type_(type) {
   bfbc0:	6120      	str	r0, [r4, #16]
   bfbc2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bfbc4:	602c      	str	r4, [r5, #0]
	}
   bfbc6:	e7d7      	b.n	bfb78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bfbc8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bfbc8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bfbca:	2300      	movs	r3, #0
   bfbcc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bfbce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bfbd0:	4604      	mov	r4, r0
   bfbd2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bfbd4:	b12b      	cbz	r3, bfbe2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bfbd6:	2202      	movs	r2, #2
   bfbd8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bfbda:	68eb      	ldr	r3, [r5, #12]
   bfbdc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bfbde:	68ab      	ldr	r3, [r5, #8]
   bfbe0:	60a3      	str	r3, [r4, #8]
    }
   bfbe2:	4620      	mov	r0, r4
   bfbe4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bfbe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bfbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfbea:	b089      	sub	sp, #36	; 0x24
   bfbec:	4604      	mov	r4, r0
   bfbee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bfbf0:	a801      	add	r0, sp, #4
   bfbf2:	4611      	mov	r1, r2
   bfbf4:	f7ff fe54 	bl	bf8a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bfbf8:	b1a4      	cbz	r4, bfc24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bfbfa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfbfc:	b11d      	cbz	r5, bfc06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bfbfe:	4628      	mov	r0, r5
   bfc00:	f001 fd02 	bl	c1608 <strdup>
   bfc04:	4605      	mov	r5, r0
   bfc06:	a801      	add	r0, sp, #4
   bfc08:	a903      	add	r1, sp, #12
        type_(type) {
   bfc0a:	9503      	str	r5, [sp, #12]
   bfc0c:	f8ad 4010 	strh.w	r4, [sp, #16]
   bfc10:	f7ff fea6 	bl	bf960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfc14:	a803      	add	r0, sp, #12
   bfc16:	f7ff fe10 	bl	bf83a <_ZN8particle5ErrorD1Ev>
   bfc1a:	a802      	add	r0, sp, #8
   bfc1c:	f7f5 fa9a 	bl	b5154 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfc20:	b009      	add	sp, #36	; 0x24
   bfc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bfc24:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bfc26:	2301      	movs	r3, #1
   bfc28:	e8d5 2f4f 	ldrexb	r2, [r5]
   bfc2c:	2a00      	cmp	r2, #0
   bfc2e:	d103      	bne.n	bfc38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bfc30:	e8c5 3f41 	strexb	r1, r3, [r5]
   bfc34:	2900      	cmp	r1, #0
   bfc36:	d1f7      	bne.n	bfc28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bfc38:	d1ef      	bne.n	bfc1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bfc3a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bfc3c:	f3bf 8f5b 	dmb	ish
   bfc40:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bfc42:	1d2b      	adds	r3, r5, #4
   bfc44:	f3bf 8f5b 	dmb	ish
   bfc48:	e853 6f00 	ldrex	r6, [r3]
   bfc4c:	e843 4200 	strex	r2, r4, [r3]
   bfc50:	2a00      	cmp	r2, #0
   bfc52:	d1f9      	bne.n	bfc48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bfc54:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bfc58:	2e00      	cmp	r6, #0
   bfc5a:	d0de      	beq.n	bfc1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bfc5c:	4620      	mov	r0, r4
   bfc5e:	f7fc fe61 	bl	bc924 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bfc62:	4607      	mov	r7, r0
   bfc64:	b160      	cbz	r0, bfc80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bfc66:	f105 010c 	add.w	r1, r5, #12
   bfc6a:	4630      	mov	r0, r6
   bfc6c:	f7ff fe43 	bl	bf8f6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bfc70:	4630      	mov	r0, r6
   bfc72:	f7f4 fb7f 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bfc76:	2110      	movs	r1, #16
   bfc78:	4630      	mov	r0, r6
   bfc7a:	f7f4 fa12 	bl	b40a2 <_ZdlPvj>
   bfc7e:	e7cc      	b.n	bfc1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bfc80:	4631      	mov	r1, r6
   bfc82:	a803      	add	r0, sp, #12
   bfc84:	f7ff ffa0 	bl	bfbc8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bfc88:	7b2b      	ldrb	r3, [r5, #12]
   bfc8a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bfc8e:	2010      	movs	r0, #16
   bfc90:	f7f4 fa01 	bl	b4096 <_Znwj>
   bfc94:	4605      	mov	r5, r0
   bfc96:	b1d0      	cbz	r0, bfcce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bfc98:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfc9a:	2014      	movs	r0, #20
   bfc9c:	f7f4 f9fb 	bl	b4096 <_Znwj>
   bfca0:	4604      	mov	r4, r0
   bfca2:	b178      	cbz	r0, bfcc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bfca4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfca6:	4601      	mov	r1, r0
   bfca8:	a803      	add	r0, sp, #12
   bfcaa:	f7fe f965 	bl	bdf78 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfcae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfcb0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfcb2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfcb4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bfcb6:	9205      	str	r2, [sp, #20]
   bfcb8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfcba:	60e3      	str	r3, [r4, #12]
   bfcbc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bfcc0:	9206      	str	r2, [sp, #24]
   bfcc2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bfcc4:	4b06      	ldr	r3, [pc, #24]	; (bfce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bfcc6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfcc8:	4b06      	ldr	r3, [pc, #24]	; (bfce4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfcca:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfccc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bfcce:	a803      	add	r0, sp, #12
   bfcd0:	f7f4 fb50 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfcd4:	2200      	movs	r2, #0
   bfcd6:	4629      	mov	r1, r5
   bfcd8:	4803      	ldr	r0, [pc, #12]	; (bfce8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bfcda:	f7fc fe2b 	bl	bc934 <application_thread_invoke>
   bfcde:	e7c7      	b.n	bfc70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bfce0:	000bf909 	.word	0x000bf909
   bfce4:	000bfced 	.word	0x000bfced
   bfce8:	000c008d 	.word	0x000c008d

000bfcec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bfcec:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfcee:	b570      	push	{r4, r5, r6, lr}
   bfcf0:	4604      	mov	r4, r0
	switch (__op)
   bfcf2:	d103      	bne.n	bfcfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfcf4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfcf6:	6003      	str	r3, [r0, #0]
      }
   bfcf8:	2000      	movs	r0, #0
   bfcfa:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bfcfc:	2a02      	cmp	r2, #2
   bfcfe:	d00c      	beq.n	bfd1a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bfd00:	2a03      	cmp	r2, #3
   bfd02:	d1f9      	bne.n	bfcf8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfd04:	6804      	ldr	r4, [r0, #0]
   bfd06:	2c00      	cmp	r4, #0
   bfd08:	d0f6      	beq.n	bfcf8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bfd0a:	4620      	mov	r0, r4
   bfd0c:	f7f4 fb32 	bl	b4374 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfd10:	2114      	movs	r1, #20
   bfd12:	4620      	mov	r0, r4
   bfd14:	f7f4 f9c5 	bl	b40a2 <_ZdlPvj>
   bfd18:	e7ee      	b.n	bfcf8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfd1a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bfd1c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfd1e:	f7f4 f9ba 	bl	b4096 <_Znwj>
   bfd22:	4605      	mov	r5, r0
   bfd24:	b120      	cbz	r0, bfd30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bfd26:	4631      	mov	r1, r6
   bfd28:	f7ff ff4e 	bl	bfbc8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bfd2c:	7c33      	ldrb	r3, [r6, #16]
   bfd2e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bfd30:	6025      	str	r5, [r4, #0]
	}
   bfd32:	e7e1      	b.n	bfcf8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bfd34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bfd34:	4770      	bx	lr

000bfd36 <_ZN9IPAddressD0Ev>:
   bfd36:	b510      	push	{r4, lr}
   bfd38:	2118      	movs	r1, #24
   bfd3a:	4604      	mov	r4, r0
   bfd3c:	f7f4 f9b1 	bl	b40a2 <_ZdlPvj>
   bfd40:	4620      	mov	r0, r4
   bfd42:	bd10      	pop	{r4, pc}

000bfd44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bfd44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bfd46:	7d03      	ldrb	r3, [r0, #20]
   bfd48:	2b06      	cmp	r3, #6
{
   bfd4a:	b08d      	sub	sp, #52	; 0x34
   bfd4c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfd4e:	f100 0704 	add.w	r7, r0, #4
   bfd52:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bfd56:	d012      	beq.n	bfd7e <_ZNK9IPAddress7printToER5Print+0x3a>
   bfd58:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bfd5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bfd60:	220a      	movs	r2, #10
   bfd62:	4630      	mov	r0, r6
   bfd64:	f7fe fbc9 	bl	be4fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bfd68:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bfd6a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bfd6c:	d019      	beq.n	bfda2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bfd6e:	2c00      	cmp	r4, #0
   bfd70:	d0f4      	beq.n	bfd5c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bfd72:	212e      	movs	r1, #46	; 0x2e
   bfd74:	4630      	mov	r0, r6
   bfd76:	f7fe fba1 	bl	be4bc <_ZN5Print5printEc>
   bfd7a:	4404      	add	r4, r0
   bfd7c:	e7ee      	b.n	bfd5c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfd7e:	232f      	movs	r3, #47	; 0x2f
   bfd80:	466a      	mov	r2, sp
   bfd82:	4639      	mov	r1, r7
   bfd84:	200a      	movs	r0, #10
		buf[0] = 0;
   bfd86:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bfd8a:	f7fc fc19 	bl	bc5c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bfd8e:	4668      	mov	r0, sp
   bfd90:	f001 fc57 	bl	c1642 <strlen>
   bfd94:	6833      	ldr	r3, [r6, #0]
   bfd96:	4602      	mov	r2, r0
   bfd98:	68db      	ldr	r3, [r3, #12]
   bfd9a:	4669      	mov	r1, sp
   bfd9c:	4630      	mov	r0, r6
   bfd9e:	4798      	blx	r3
   bfda0:	4604      	mov	r4, r0
    }
    return n;
}
   bfda2:	4620      	mov	r0, r4
   bfda4:	b00d      	add	sp, #52	; 0x34
   bfda6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bfda8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bfda8:	b510      	push	{r4, lr}
   bfdaa:	4b05      	ldr	r3, [pc, #20]	; (bfdc0 <_ZN9IPAddressC1Ev+0x18>)
   bfdac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bfdae:	2211      	movs	r2, #17
   bfdb0:	f840 3b04 	str.w	r3, [r0], #4
   bfdb4:	2100      	movs	r1, #0
   bfdb6:	f001 fbb9 	bl	c152c <memset>
}
   bfdba:	4620      	mov	r0, r4
   bfdbc:	bd10      	pop	{r4, pc}
   bfdbe:	bf00      	nop
   bfdc0:	000c4d5c 	.word	0x000c4d5c

000bfdc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bfdc4:	4603      	mov	r3, r0
   bfdc6:	4a07      	ldr	r2, [pc, #28]	; (bfde4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bfdc8:	b510      	push	{r4, lr}
   bfdca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bfdce:	f101 0210 	add.w	r2, r1, #16
   bfdd2:	f851 4b04 	ldr.w	r4, [r1], #4
   bfdd6:	f843 4b04 	str.w	r4, [r3], #4
   bfdda:	4291      	cmp	r1, r2
   bfddc:	d1f9      	bne.n	bfdd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bfdde:	780a      	ldrb	r2, [r1, #0]
   bfde0:	701a      	strb	r2, [r3, #0]
}
   bfde2:	bd10      	pop	{r4, pc}
   bfde4:	000c4d5c 	.word	0x000c4d5c

000bfde8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bfde8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bfdea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bfdee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bfdf2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bfdf6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bfdfa:	2304      	movs	r3, #4
   bfdfc:	6041      	str	r1, [r0, #4]
   bfdfe:	7503      	strb	r3, [r0, #20]
}
   bfe00:	bd10      	pop	{r4, pc}
	...

000bfe04 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bfe04:	b507      	push	{r0, r1, r2, lr}
   bfe06:	4b06      	ldr	r3, [pc, #24]	; (bfe20 <_ZN9IPAddressC1EPKh+0x1c>)
   bfe08:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bfe0a:	78cb      	ldrb	r3, [r1, #3]
   bfe0c:	9300      	str	r3, [sp, #0]
   bfe0e:	788b      	ldrb	r3, [r1, #2]
   bfe10:	784a      	ldrb	r2, [r1, #1]
   bfe12:	7809      	ldrb	r1, [r1, #0]
   bfe14:	f7ff ffe8 	bl	bfde8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bfe18:	b003      	add	sp, #12
   bfe1a:	f85d fb04 	ldr.w	pc, [sp], #4
   bfe1e:	bf00      	nop
   bfe20:	000c4d5c 	.word	0x000c4d5c

000bfe24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bfe24:	7441      	strb	r1, [r0, #17]
}
   bfe26:	4770      	bx	lr

000bfe28 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bfe28:	4770      	bx	lr

000bfe2a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bfe2a:	4770      	bx	lr

000bfe2c <_ZN9USBSerial4readEv>:
{
   bfe2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bfe2e:	2100      	movs	r1, #0
   bfe30:	7c00      	ldrb	r0, [r0, #16]
   bfe32:	f7fc fd1d 	bl	bc870 <HAL_USB_USART_Receive_Data>
}
   bfe36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bfe3a:	bd08      	pop	{r3, pc}

000bfe3c <_ZN9USBSerial4peekEv>:
{
   bfe3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bfe3e:	2101      	movs	r1, #1
   bfe40:	7c00      	ldrb	r0, [r0, #16]
   bfe42:	f7fc fd15 	bl	bc870 <HAL_USB_USART_Receive_Data>
}
   bfe46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bfe4a:	bd08      	pop	{r3, pc}

000bfe4c <_ZN9USBSerial17availableForWriteEv>:
{
   bfe4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bfe4e:	7c00      	ldrb	r0, [r0, #16]
   bfe50:	f7fc fd06 	bl	bc860 <HAL_USB_USART_Available_Data_For_Write>
}
   bfe54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfe58:	bd08      	pop	{r3, pc}

000bfe5a <_ZN9USBSerial9availableEv>:
{
   bfe5a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bfe5c:	7c00      	ldrb	r0, [r0, #16]
   bfe5e:	f7fc fcf7 	bl	bc850 <HAL_USB_USART_Available_Data>
}
   bfe62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfe66:	bd08      	pop	{r3, pc}

000bfe68 <_ZN9USBSerial5writeEh>:
{
   bfe68:	b513      	push	{r0, r1, r4, lr}
   bfe6a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bfe6c:	7c00      	ldrb	r0, [r0, #16]
{
   bfe6e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bfe70:	f7fc fcf6 	bl	bc860 <HAL_USB_USART_Available_Data_For_Write>
   bfe74:	2800      	cmp	r0, #0
   bfe76:	9901      	ldr	r1, [sp, #4]
   bfe78:	dc01      	bgt.n	bfe7e <_ZN9USBSerial5writeEh+0x16>
   bfe7a:	7c60      	ldrb	r0, [r4, #17]
   bfe7c:	b120      	cbz	r0, bfe88 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bfe7e:	7c20      	ldrb	r0, [r4, #16]
   bfe80:	f7fc fcfe 	bl	bc880 <HAL_USB_USART_Send_Data>
   bfe84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bfe88:	b002      	add	sp, #8
   bfe8a:	bd10      	pop	{r4, pc}

000bfe8c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bfe8c:	7c00      	ldrb	r0, [r0, #16]
   bfe8e:	f7fc bcff 	b.w	bc890 <HAL_USB_USART_Flush_Data>

000bfe92 <_ZN9USBSerialD0Ev>:
   bfe92:	b510      	push	{r4, lr}
   bfe94:	2114      	movs	r1, #20
   bfe96:	4604      	mov	r4, r0
   bfe98:	f7f4 f903 	bl	b40a2 <_ZdlPvj>
   bfe9c:	4620      	mov	r0, r4
   bfe9e:	bd10      	pop	{r4, pc}

000bfea0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bfea0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bfea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bfea6:	4604      	mov	r4, r0
   bfea8:	4608      	mov	r0, r1
   bfeaa:	2100      	movs	r1, #0
   bfeac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bfeb0:	4b04      	ldr	r3, [pc, #16]	; (bfec4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bfeb2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bfeb4:	2301      	movs	r3, #1
  _serial = serial;
   bfeb6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bfeb8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bfeba:	4611      	mov	r1, r2
   bfebc:	f7fc fcb0 	bl	bc820 <HAL_USB_USART_Init>
}
   bfec0:	4620      	mov	r0, r4
   bfec2:	bd10      	pop	{r4, pc}
   bfec4:	000c4d70 	.word	0x000c4d70

000bfec8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bfec8:	7c00      	ldrb	r0, [r0, #16]
   bfeca:	2200      	movs	r2, #0
   bfecc:	f7fc bcb0 	b.w	bc830 <HAL_USB_USART_Begin>

000bfed0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bfed0:	7c00      	ldrb	r0, [r0, #16]
   bfed2:	f7fc bcb5 	b.w	bc840 <HAL_USB_USART_End>

000bfed6 <_Z19acquireSerialBufferv>:
{
   bfed6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bfed8:	2214      	movs	r2, #20
{
   bfeda:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bfedc:	2100      	movs	r1, #0
   bfede:	f001 fb25 	bl	c152c <memset>
}
   bfee2:	4620      	mov	r0, r4
   bfee4:	bd10      	pop	{r4, pc}
	...

000bfee8 <_Z16_fetch_usbserialv>:
{
   bfee8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bfeea:	4c0f      	ldr	r4, [pc, #60]	; (bff28 <_Z16_fetch_usbserialv+0x40>)
{
   bfeec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bfeee:	a803      	add	r0, sp, #12
   bfef0:	f7ff fff1 	bl	bfed6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bfef4:	7821      	ldrb	r1, [r4, #0]
   bfef6:	f3bf 8f5b 	dmb	ish
   bfefa:	f011 0101 	ands.w	r1, r1, #1
   bfefe:	d10f      	bne.n	bff20 <_Z16_fetch_usbserialv+0x38>
   bff00:	4620      	mov	r0, r4
   bff02:	9101      	str	r1, [sp, #4]
   bff04:	f7f4 f8dc 	bl	b40c0 <__cxa_guard_acquire>
   bff08:	9901      	ldr	r1, [sp, #4]
   bff0a:	b148      	cbz	r0, bff20 <_Z16_fetch_usbserialv+0x38>
   bff0c:	aa03      	add	r2, sp, #12
   bff0e:	4807      	ldr	r0, [pc, #28]	; (bff2c <_Z16_fetch_usbserialv+0x44>)
   bff10:	f7ff ffc6 	bl	bfea0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bff14:	4620      	mov	r0, r4
   bff16:	f7f4 f8d8 	bl	b40ca <__cxa_guard_release>
   bff1a:	4805      	ldr	r0, [pc, #20]	; (bff30 <_Z16_fetch_usbserialv+0x48>)
   bff1c:	f001 fab8 	bl	c1490 <atexit>
	return _usbserial;
}
   bff20:	4802      	ldr	r0, [pc, #8]	; (bff2c <_Z16_fetch_usbserialv+0x44>)
   bff22:	b008      	add	sp, #32
   bff24:	bd10      	pop	{r4, pc}
   bff26:	bf00      	nop
   bff28:	2003e6d8 	.word	0x2003e6d8
   bff2c:	2003e6dc 	.word	0x2003e6dc
   bff30:	000bfe29 	.word	0x000bfe29

000bff34 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bff34:	f7fc ba32 	b.w	bc39c <HAL_Interrupts_Disable_All>

000bff38 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bff38:	f7fc ba28 	b.w	bc38c <HAL_Interrupts_Enable_All>

000bff3c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bff3c:	2200      	movs	r2, #0
   bff3e:	6840      	ldr	r0, [r0, #4]
   bff40:	4611      	mov	r1, r2
   bff42:	f7fc bd3b 	b.w	bc9bc <network_ready>

000bff46 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bff46:	2200      	movs	r2, #0
   bff48:	6840      	ldr	r0, [r0, #4]
   bff4a:	4611      	mov	r1, r2
   bff4c:	f7fc bd56 	b.w	bc9fc <network_listening>

000bff50 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bff50:	2200      	movs	r2, #0
   bff52:	6840      	ldr	r0, [r0, #4]
   bff54:	4611      	mov	r1, r2
   bff56:	f7fc bd61 	b.w	bca1c <network_get_listen_timeout>

000bff5a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bff5a:	6840      	ldr	r0, [r0, #4]
   bff5c:	2200      	movs	r2, #0
   bff5e:	f7fc bd55 	b.w	bca0c <network_set_listen_timeout>

000bff62 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bff62:	6840      	ldr	r0, [r0, #4]
   bff64:	2200      	movs	r2, #0
   bff66:	f081 0101 	eor.w	r1, r1, #1
   bff6a:	f7fc bd3f 	b.w	bc9ec <network_listen>

000bff6e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bff6e:	2300      	movs	r3, #0
   bff70:	6840      	ldr	r0, [r0, #4]
   bff72:	461a      	mov	r2, r3
   bff74:	4619      	mov	r1, r3
   bff76:	f7fc bd31 	b.w	bc9dc <network_off>

000bff7a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bff7a:	2300      	movs	r3, #0
   bff7c:	6840      	ldr	r0, [r0, #4]
   bff7e:	461a      	mov	r2, r3
   bff80:	4619      	mov	r1, r3
   bff82:	f7fc bd23 	b.w	bc9cc <network_on>

000bff86 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bff86:	2200      	movs	r2, #0
   bff88:	6840      	ldr	r0, [r0, #4]
   bff8a:	4611      	mov	r1, r2
   bff8c:	f7fc bd06 	b.w	bc99c <network_connecting>

000bff90 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bff90:	6840      	ldr	r0, [r0, #4]
   bff92:	2200      	movs	r2, #0
   bff94:	2102      	movs	r1, #2
   bff96:	f7fc bd09 	b.w	bc9ac <network_disconnect>

000bff9a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bff9a:	2300      	movs	r3, #0
   bff9c:	6840      	ldr	r0, [r0, #4]
   bff9e:	461a      	mov	r2, r3
   bffa0:	f7fc bcf4 	b.w	bc98c <network_connect>

000bffa4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bffa4:	4b08      	ldr	r3, [pc, #32]	; (bffc8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bffa6:	b510      	push	{r4, lr}
   bffa8:	2428      	movs	r4, #40	; 0x28
   bffaa:	4622      	mov	r2, r4
   bffac:	4618      	mov	r0, r3
   bffae:	2100      	movs	r1, #0
   bffb0:	f001 fabc 	bl	c152c <memset>
   bffb4:	4b05      	ldr	r3, [pc, #20]	; (bffcc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bffb6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bffb8:	f04f 32ff 	mov.w	r2, #4294967295
   bffbc:	6042      	str	r2, [r0, #4]
   bffbe:	2204      	movs	r2, #4
   bffc0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bffc2:	4a03      	ldr	r2, [pc, #12]	; (bffd0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bffc4:	601a      	str	r2, [r3, #0]
   bffc6:	bd10      	pop	{r4, pc}
   bffc8:	2003e6f8 	.word	0x2003e6f8
   bffcc:	2003e6f0 	.word	0x2003e6f0
   bffd0:	000c4da0 	.word	0x000c4da0

000bffd4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bffd4:	4770      	bx	lr

000bffd6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bffd6:	7441      	strb	r1, [r0, #17]
}
   bffd8:	4770      	bx	lr

000bffda <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bffda:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bffdc:	7c00      	ldrb	r0, [r0, #16]
   bffde:	f7fc fb2f 	bl	bc640 <hal_usart_available_data_for_write>
}
   bffe2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bffe6:	bd08      	pop	{r3, pc}

000bffe8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bffe8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bffea:	7c00      	ldrb	r0, [r0, #16]
   bffec:	f7fc fb00 	bl	bc5f0 <hal_usart_available>
}
   bfff0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bfff4:	bd08      	pop	{r3, pc}

000bfff6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bfff6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bfff8:	7c00      	ldrb	r0, [r0, #16]
   bfffa:	f7fc fb09 	bl	bc610 <hal_usart_peek>
}
   bfffe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0002:	bd08      	pop	{r3, pc}

000c0004 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c0004:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c0006:	7c00      	ldrb	r0, [r0, #16]
   c0008:	f7fc fafa 	bl	bc600 <hal_usart_read>
}
   c000c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c0010:	bd08      	pop	{r3, pc}

000c0012 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c0012:	7c00      	ldrb	r0, [r0, #16]
   c0014:	f7fc bb04 	b.w	bc620 <hal_usart_flush>

000c0018 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c0018:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c001a:	7c45      	ldrb	r5, [r0, #17]
{
   c001c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c001e:	b12d      	cbz	r5, c002c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c0020:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c0022:	b003      	add	sp, #12
   c0024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c0028:	f7fc bada 	b.w	bc5e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c002c:	7c00      	ldrb	r0, [r0, #16]
   c002e:	9101      	str	r1, [sp, #4]
   c0030:	f7fc fb06 	bl	bc640 <hal_usart_available_data_for_write>
   c0034:	2800      	cmp	r0, #0
   c0036:	9901      	ldr	r1, [sp, #4]
   c0038:	dcf2      	bgt.n	c0020 <_ZN11USARTSerial5writeEh+0x8>
}
   c003a:	4628      	mov	r0, r5
   c003c:	b003      	add	sp, #12
   c003e:	bd30      	pop	{r4, r5, pc}

000c0040 <_ZN11USARTSerialD0Ev>:
   c0040:	b510      	push	{r4, lr}
   c0042:	2114      	movs	r1, #20
   c0044:	4604      	mov	r4, r0
   c0046:	f7f4 f82c 	bl	b40a2 <_ZdlPvj>
   c004a:	4620      	mov	r0, r4
   c004c:	bd10      	pop	{r4, pc}
	...

000c0050 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c0050:	b510      	push	{r4, lr}
   c0052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c0056:	4604      	mov	r4, r0
   c0058:	4608      	mov	r0, r1
   c005a:	4611      	mov	r1, r2
   c005c:	2200      	movs	r2, #0
   c005e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c0062:	4b04      	ldr	r3, [pc, #16]	; (c0074 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c0064:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0066:	2301      	movs	r3, #1
  _serial = serial;
   c0068:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c006a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c006c:	f7fc faf8 	bl	bc660 <hal_usart_init_ex>
}
   c0070:	4620      	mov	r0, r4
   c0072:	bd10      	pop	{r4, pc}
   c0074:	000c4ddc 	.word	0x000c4ddc

000c0078 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c0078:	7c00      	ldrb	r0, [r0, #16]
   c007a:	2300      	movs	r3, #0
   c007c:	f7fc bae8 	b.w	bc650 <hal_usart_begin_config>

000c0080 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c0080:	2200      	movs	r2, #0
   c0082:	f7ff bff9 	b.w	c0078 <_ZN11USARTSerial5beginEmm>

000c0086 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c0086:	7c00      	ldrb	r0, [r0, #16]
   c0088:	f7fc baa2 	b.w	bc5d0 <hal_usart_end>

000c008c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   c008c:	b510      	push	{r4, lr}
      if (_M_empty())
   c008e:	6883      	ldr	r3, [r0, #8]
   c0090:	4604      	mov	r4, r0
   c0092:	b90b      	cbnz	r3, c0098 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   c0094:	f000 fc02 	bl	c089c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c0098:	68c3      	ldr	r3, [r0, #12]
   c009a:	4798      	blx	r3
      if (_M_manager)
   c009c:	68a3      	ldr	r3, [r4, #8]
   c009e:	b11b      	cbz	r3, c00a8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c00a0:	2203      	movs	r2, #3
   c00a2:	4621      	mov	r1, r4
   c00a4:	4620      	mov	r0, r4
   c00a6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   c00a8:	4620      	mov	r0, r4
   c00aa:	2110      	movs	r1, #16
}
   c00ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   c00b0:	f7f3 bff7 	b.w	b40a2 <_ZdlPvj>

000c00b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   c00b4:	4770      	bx	lr

000c00b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   c00b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c00b8:	4606      	mov	r6, r0
   c00ba:	4615      	mov	r5, r2
   c00bc:	460c      	mov	r4, r1
   c00be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   c00c0:	42bc      	cmp	r4, r7
   c00c2:	d006      	beq.n	c00d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   c00c4:	6833      	ldr	r3, [r6, #0]
   c00c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   c00ca:	689b      	ldr	r3, [r3, #8]
   c00cc:	4630      	mov	r0, r6
   c00ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   c00d0:	e7f6      	b.n	c00c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   c00d2:	4628      	mov	r0, r5
   c00d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c00d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   c00d6:	7c00      	ldrb	r0, [r0, #16]
   c00d8:	2200      	movs	r2, #0
   c00da:	f7fc bae9 	b.w	bc6b0 <hal_i2c_write>

000c00de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   c00de:	7c00      	ldrb	r0, [r0, #16]
   c00e0:	2100      	movs	r1, #0
   c00e2:	f7fc baed 	b.w	bc6c0 <hal_i2c_available>

000c00e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   c00e6:	7c00      	ldrb	r0, [r0, #16]
   c00e8:	2100      	movs	r1, #0
   c00ea:	f7fc baf1 	b.w	bc6d0 <hal_i2c_read>

000c00ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   c00ee:	7c00      	ldrb	r0, [r0, #16]
   c00f0:	2100      	movs	r1, #0
   c00f2:	f7fc baf5 	b.w	bc6e0 <hal_i2c_peek>

000c00f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   c00f6:	7c00      	ldrb	r0, [r0, #16]
   c00f8:	2100      	movs	r1, #0
   c00fa:	f7fc baf9 	b.w	bc6f0 <hal_i2c_flush>

000c00fe <_ZN7TwoWireD0Ev>:
   c00fe:	b510      	push	{r4, lr}
   c0100:	2114      	movs	r1, #20
   c0102:	4604      	mov	r4, r0
   c0104:	f7f3 ffcd 	bl	b40a2 <_ZdlPvj>
   c0108:	4620      	mov	r0, r4
   c010a:	bd10      	pop	{r4, pc}

000c010c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c010c:	b510      	push	{r4, lr}
   c010e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c0112:	4604      	mov	r4, r0
   c0114:	4608      	mov	r0, r1
   c0116:	2100      	movs	r1, #0
   c0118:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c011c:	4b03      	ldr	r3, [pc, #12]	; (c012c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   c011e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   c0120:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   c0122:	4611      	mov	r1, r2
   c0124:	f7fc faf4 	bl	bc710 <hal_i2c_init>
}
   c0128:	4620      	mov	r0, r4
   c012a:	bd10      	pop	{r4, pc}
   c012c:	000c4e0c 	.word	0x000c4e0c

000c0130 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   c0130:	7c00      	ldrb	r0, [r0, #16]
   c0132:	2200      	movs	r2, #0
   c0134:	f7fc ba9c 	b.w	bc670 <hal_i2c_set_speed>

000c0138 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   c0138:	2300      	movs	r3, #0
   c013a:	7c00      	ldrb	r0, [r0, #16]
   c013c:	461a      	mov	r2, r3
   c013e:	4619      	mov	r1, r3
   c0140:	f7fc ba9e 	b.w	bc680 <hal_i2c_begin>

000c0144 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   c0144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c0146:	2200      	movs	r2, #0
   c0148:	2314      	movs	r3, #20
   c014a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   c014e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   c0152:	780b      	ldrb	r3, [r1, #0]
   c0154:	f88d 3008 	strb.w	r3, [sp, #8]
   c0158:	684b      	ldr	r3, [r1, #4]
   c015a:	9303      	str	r3, [sp, #12]
   c015c:	68cb      	ldr	r3, [r1, #12]
   c015e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   c0160:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   c0162:	7a0b      	ldrb	r3, [r1, #8]
   c0164:	9305      	str	r3, [sp, #20]
   c0166:	a901      	add	r1, sp, #4
   c0168:	f7fc fada 	bl	bc720 <hal_i2c_request_ex>
}
   c016c:	b007      	add	sp, #28
   c016e:	f85d fb04 	ldr.w	pc, [sp], #4

000c0172 <_ZN7TwoWire11requestFromEhjh>:
{
   c0172:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   c0174:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c0176:	f88d 1000 	strb.w	r1, [sp]
   c017a:	f04f 0164 	mov.w	r1, #100	; 0x64
   c017e:	9103      	str	r1, [sp, #12]
   c0180:	bf18      	it	ne
   c0182:	2301      	movne	r3, #1
   c0184:	4669      	mov	r1, sp
    size_ = size;
   c0186:	9201      	str	r2, [sp, #4]
   c0188:	f88d 3008 	strb.w	r3, [sp, #8]
   c018c:	f7ff ffda 	bl	c0144 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   c0190:	b005      	add	sp, #20
   c0192:	f85d fb04 	ldr.w	pc, [sp], #4

000c0196 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   c0196:	2301      	movs	r3, #1
   c0198:	f7ff bfeb 	b.w	c0172 <_ZN7TwoWire11requestFromEhjh>

000c019c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   c019c:	7c00      	ldrb	r0, [r0, #16]
   c019e:	2200      	movs	r2, #0
   c01a0:	f7fc ba76 	b.w	bc690 <hal_i2c_begin_transmission>

000c01a4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   c01a4:	b2c9      	uxtb	r1, r1
   c01a6:	f7ff bff9 	b.w	c019c <_ZN7TwoWire17beginTransmissionEh>

000c01aa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   c01aa:	7c00      	ldrb	r0, [r0, #16]
   c01ac:	2200      	movs	r2, #0
   c01ae:	f7fc ba77 	b.w	bc6a0 <hal_i2c_end_transmission>

000c01b2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   c01b2:	2101      	movs	r1, #1
   c01b4:	f7ff bff9 	b.w	c01aa <_ZN7TwoWire15endTransmissionEh>

000c01b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c01b8:	2300      	movs	r3, #0
   c01ba:	6840      	ldr	r0, [r0, #4]
   c01bc:	461a      	mov	r2, r3
   c01be:	f7fc bbe5 	b.w	bc98c <network_connect>

000c01c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c01c2:	6840      	ldr	r0, [r0, #4]
   c01c4:	2200      	movs	r2, #0
   c01c6:	2102      	movs	r1, #2
   c01c8:	f7fc bbf0 	b.w	bc9ac <network_disconnect>

000c01cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c01cc:	2200      	movs	r2, #0
   c01ce:	6840      	ldr	r0, [r0, #4]
   c01d0:	4611      	mov	r1, r2
   c01d2:	f7fc bbe3 	b.w	bc99c <network_connecting>

000c01d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c01d6:	2200      	movs	r2, #0
   c01d8:	6840      	ldr	r0, [r0, #4]
   c01da:	4611      	mov	r1, r2
   c01dc:	f7fc bbee 	b.w	bc9bc <network_ready>

000c01e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c01e0:	2300      	movs	r3, #0
   c01e2:	6840      	ldr	r0, [r0, #4]
   c01e4:	461a      	mov	r2, r3
   c01e6:	4619      	mov	r1, r3
   c01e8:	f7fc bbf0 	b.w	bc9cc <network_on>

000c01ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c01ec:	2300      	movs	r3, #0
   c01ee:	6840      	ldr	r0, [r0, #4]
   c01f0:	461a      	mov	r2, r3
   c01f2:	4619      	mov	r1, r3
   c01f4:	f7fc bbf2 	b.w	bc9dc <network_off>

000c01f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c01f8:	6840      	ldr	r0, [r0, #4]
   c01fa:	2100      	movs	r1, #0
   c01fc:	f7fc bc16 	b.w	bca2c <network_is_on>

000c0200 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c0200:	6840      	ldr	r0, [r0, #4]
   c0202:	2100      	movs	r1, #0
   c0204:	f7fc bc1a 	b.w	bca3c <network_is_off>

000c0208 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c0208:	6840      	ldr	r0, [r0, #4]
   c020a:	2200      	movs	r2, #0
   c020c:	f081 0101 	eor.w	r1, r1, #1
   c0210:	f7fc bbec 	b.w	bc9ec <network_listen>

000c0214 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c0214:	6840      	ldr	r0, [r0, #4]
   c0216:	2200      	movs	r2, #0
   c0218:	f7fc bbf8 	b.w	bca0c <network_set_listen_timeout>

000c021c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c021c:	2200      	movs	r2, #0
   c021e:	6840      	ldr	r0, [r0, #4]
   c0220:	4611      	mov	r1, r2
   c0222:	f7fc bbfb 	b.w	bca1c <network_get_listen_timeout>

000c0226 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c0226:	2200      	movs	r2, #0
   c0228:	6840      	ldr	r0, [r0, #4]
   c022a:	4611      	mov	r1, r2
   c022c:	f7fc bbe6 	b.w	bc9fc <network_listening>

000c0230 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0234:	b095      	sub	sp, #84	; 0x54
   c0236:	4614      	mov	r4, r2
   c0238:	460d      	mov	r5, r1
   c023a:	4607      	mov	r7, r0
    IPAddress addr;
   c023c:	f7ff fdb4 	bl	bfda8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0240:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c0242:	221c      	movs	r2, #28
   c0244:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c0246:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c0248:	f001 f970 	bl	c152c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c024c:	2340      	movs	r3, #64	; 0x40
   c024e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0250:	4620      	mov	r0, r4
   c0252:	466b      	mov	r3, sp
   c0254:	aa0c      	add	r2, sp, #48	; 0x30
   c0256:	2100      	movs	r1, #0
   c0258:	f7fc f870 	bl	bc33c <netdb_getaddrinfo>
    if (!r) {
   c025c:	4604      	mov	r4, r0
   c025e:	2800      	cmp	r0, #0
   c0260:	d14b      	bne.n	c02fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0262:	4602      	mov	r2, r0
   c0264:	2101      	movs	r1, #1
   c0266:	6868      	ldr	r0, [r5, #4]
   c0268:	f7fc fba8 	bl	bc9bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c026c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c026e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0270:	4622      	mov	r2, r4
   c0272:	6868      	ldr	r0, [r5, #4]
   c0274:	f7fc fba2 	bl	bc9bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0278:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c027a:	4681      	mov	r9, r0
        bool ok = false;
   c027c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c027e:	2e00      	cmp	r6, #0
   c0280:	d03b      	beq.n	c02fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c0282:	2900      	cmp	r1, #0
   c0284:	d139      	bne.n	c02fa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c0286:	6873      	ldr	r3, [r6, #4]
   c0288:	2b02      	cmp	r3, #2
   c028a:	d003      	beq.n	c0294 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c028c:	2b0a      	cmp	r3, #10
   c028e:	d011      	beq.n	c02b4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0290:	69f6      	ldr	r6, [r6, #28]
   c0292:	e7f4      	b.n	c027e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c0294:	f1b8 0f00 	cmp.w	r8, #0
   c0298:	d0fa      	beq.n	c0290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c029a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c029c:	a806      	add	r0, sp, #24
   c029e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c02a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c02a2:	f7ff fdaf 	bl	bfe04 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c02a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c02a8:	1d3c      	adds	r4, r7, #4
   c02aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c02ac:	682b      	ldr	r3, [r5, #0]
   c02ae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c02b0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c02b2:	e7ed      	b.n	c0290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c02b4:	f1b9 0f00 	cmp.w	r9, #0
   c02b8:	d0ea      	beq.n	c0290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c02ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c02bc:	2210      	movs	r2, #16
   c02be:	a801      	add	r0, sp, #4
   c02c0:	f001 f934 	bl	c152c <memset>
                    a.v = 6;
   c02c4:	2306      	movs	r3, #6
   c02c6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c02ca:	ad01      	add	r5, sp, #4
   c02cc:	f104 0308 	add.w	r3, r4, #8
   c02d0:	3418      	adds	r4, #24
   c02d2:	6818      	ldr	r0, [r3, #0]
   c02d4:	6859      	ldr	r1, [r3, #4]
   c02d6:	462a      	mov	r2, r5
   c02d8:	c203      	stmia	r2!, {r0, r1}
   c02da:	3308      	adds	r3, #8
   c02dc:	42a3      	cmp	r3, r4
   c02de:	4615      	mov	r5, r2
   c02e0:	d1f7      	bne.n	c02d2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c02e2:	a901      	add	r1, sp, #4
   c02e4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c02e6:	ad07      	add	r5, sp, #28
   c02e8:	f7ff fd6c 	bl	bfdc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c02ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c02ee:	1d3c      	adds	r4, r7, #4
   c02f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c02f2:	682b      	ldr	r3, [r5, #0]
   c02f4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c02f6:	4649      	mov	r1, r9
   c02f8:	e7ca      	b.n	c0290 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c02fa:	9800      	ldr	r0, [sp, #0]
   c02fc:	f7fc f816 	bl	bc32c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c0300:	4638      	mov	r0, r7
   c0302:	b015      	add	sp, #84	; 0x54
   c0304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c0308 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c0308:	4b02      	ldr	r3, [pc, #8]	; (c0314 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c030a:	4a03      	ldr	r2, [pc, #12]	; (c0318 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c030c:	601a      	str	r2, [r3, #0]
   c030e:	2200      	movs	r2, #0
   c0310:	605a      	str	r2, [r3, #4]

} // spark
   c0312:	4770      	bx	lr
   c0314:	2003e720 	.word	0x2003e720
   c0318:	000c4e34 	.word	0x000c4e34

000c031c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c031c:	f100 0310 	add.w	r3, r0, #16
   c0320:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c0322:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c0326:	2901      	cmp	r1, #1
   c0328:	4618      	mov	r0, r3
   c032a:	d108      	bne.n	c033e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c032c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c0330:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c0334:	3a01      	subs	r2, #1
   c0336:	f103 0310 	add.w	r3, r3, #16
   c033a:	d1f2      	bne.n	c0322 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c033c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c033e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c0340:	bf04      	itt	eq
   c0342:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c0346:	1852      	addeq	r2, r2, r1
   c0348:	e7f4      	b.n	c0334 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c034a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c034a:	b40e      	push	{r1, r2, r3}
   c034c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c034e:	b088      	sub	sp, #32
   c0350:	af00      	add	r7, sp, #0
   c0352:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0356:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c0358:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c035c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c035e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0360:	462b      	mov	r3, r5
   c0362:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c0364:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0366:	f7fc fbc9 	bl	bcafc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c036a:	280f      	cmp	r0, #15
   c036c:	687a      	ldr	r2, [r7, #4]
   c036e:	d91a      	bls.n	c03a6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c0370:	f100 0308 	add.w	r3, r0, #8
   c0374:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c0378:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c037a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c037e:	1c41      	adds	r1, r0, #1
   c0380:	462b      	mov	r3, r5
   c0382:	4668      	mov	r0, sp
        va_start(args, fmt);
   c0384:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0386:	f7fc fbb9 	bl	bcafc <vsnprintf>
        if (n > 0) {
   c038a:	1e02      	subs	r2, r0, #0
   c038c:	dd04      	ble.n	c0398 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c038e:	6823      	ldr	r3, [r4, #0]
   c0390:	4669      	mov	r1, sp
   c0392:	689b      	ldr	r3, [r3, #8]
   c0394:	4620      	mov	r0, r4
   c0396:	4798      	blx	r3
   c0398:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c039a:	3720      	adds	r7, #32
   c039c:	46bd      	mov	sp, r7
   c039e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c03a2:	b003      	add	sp, #12
   c03a4:	4770      	bx	lr
    } else if (n > 0) {
   c03a6:	2800      	cmp	r0, #0
   c03a8:	d0f7      	beq.n	c039a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c03aa:	6823      	ldr	r3, [r4, #0]
   c03ac:	4602      	mov	r2, r0
   c03ae:	689b      	ldr	r3, [r3, #8]
   c03b0:	f107 0110 	add.w	r1, r7, #16
   c03b4:	4620      	mov	r0, r4
   c03b6:	4798      	blx	r3
}
   c03b8:	e7ef      	b.n	c039a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c03ba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c03ba:	b538      	push	{r3, r4, r5, lr}
   c03bc:	680b      	ldr	r3, [r1, #0]
   c03be:	6003      	str	r3, [r0, #0]
   c03c0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c03c2:	6843      	ldr	r3, [r0, #4]
   c03c4:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c03c6:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c03c8:	d008      	beq.n	c03dc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c03ca:	b115      	cbz	r5, c03d2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c03cc:	686b      	ldr	r3, [r5, #4]
   c03ce:	3301      	adds	r3, #1
   c03d0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c03d2:	6860      	ldr	r0, [r4, #4]
   c03d4:	b108      	cbz	r0, c03da <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c03d6:	f7fc ff52 	bl	bd27e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c03da:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c03dc:	bd38      	pop	{r3, r4, r5, pc}

000c03de <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   c03de:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c03e0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c03e2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c03e6:	689b      	ldr	r3, [r3, #8]
   c03e8:	2201      	movs	r2, #1
   c03ea:	f10d 0107 	add.w	r1, sp, #7
   c03ee:	4798      	blx	r3
}
   c03f0:	b003      	add	sp, #12
   c03f2:	f85d fb04 	ldr.w	pc, [sp], #4

000c03f6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c03f6:	460b      	mov	r3, r1
   c03f8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c03fa:	2200      	movs	r2, #0
   c03fc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c03fe:	e9c0 2200 	strd	r2, r2, [r0]
   c0402:	4604      	mov	r4, r0
        t_ = t;
   c0404:	6083      	str	r3, [r0, #8]
    if (t) {
   c0406:	b90b      	cbnz	r3, c040c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c0408:	4620      	mov	r0, r4
   c040a:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c040c:	f7ff ffd5 	bl	c03ba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c0410:	e7fa      	b.n	c0408 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c0412 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c0412:	6883      	ldr	r3, [r0, #8]
   c0414:	b1eb      	cbz	r3, c0452 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c0416:	781a      	ldrb	r2, [r3, #0]
   c0418:	2a03      	cmp	r2, #3
   c041a:	d81a      	bhi.n	c0452 <_ZNK5spark9JSONValue4typeEv+0x40>
   c041c:	e8df f002 	tbb	[pc, r2]
   c0420:	1b021704 	.word	0x1b021704
   c0424:	2005      	movs	r0, #5
   c0426:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c0428:	6802      	ldr	r2, [r0, #0]
   c042a:	685b      	ldr	r3, [r3, #4]
   c042c:	6852      	ldr	r2, [r2, #4]
   c042e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c0430:	282d      	cmp	r0, #45	; 0x2d
   c0432:	d012      	beq.n	c045a <_ZNK5spark9JSONValue4typeEv+0x48>
   c0434:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c0438:	2b09      	cmp	r3, #9
   c043a:	d90e      	bls.n	c045a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c043c:	2874      	cmp	r0, #116	; 0x74
   c043e:	d00e      	beq.n	c045e <_ZNK5spark9JSONValue4typeEv+0x4c>
   c0440:	2866      	cmp	r0, #102	; 0x66
   c0442:	d00c      	beq.n	c045e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c0444:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c0448:	4258      	negs	r0, r3
   c044a:	4158      	adcs	r0, r3
   c044c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c044e:	2006      	movs	r0, #6
   c0450:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c0452:	2000      	movs	r0, #0
   c0454:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c0456:	2004      	movs	r0, #4
   c0458:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c045a:	2003      	movs	r0, #3
   c045c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c045e:	2002      	movs	r0, #2
}
   c0460:	4770      	bx	lr

000c0462 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c0462:	b510      	push	{r4, lr}
   c0464:	4604      	mov	r4, r0
    switch (type()) {
   c0466:	f7ff ffd4 	bl	c0412 <_ZNK5spark9JSONValue4typeEv>
   c046a:	2802      	cmp	r0, #2
   c046c:	d00e      	beq.n	c048c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c046e:	1ec3      	subs	r3, r0, #3
   c0470:	b2db      	uxtb	r3, r3
   c0472:	2b01      	cmp	r3, #1
   c0474:	d814      	bhi.n	c04a0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c0476:	6822      	ldr	r2, [r4, #0]
   c0478:	68a3      	ldr	r3, [r4, #8]
   c047a:	6850      	ldr	r0, [r2, #4]
   c047c:	685b      	ldr	r3, [r3, #4]
}
   c047e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c0482:	220a      	movs	r2, #10
   c0484:	2100      	movs	r1, #0
   c0486:	4418      	add	r0, r3
   c0488:	f001 bff2 	b.w	c2470 <strtol>
        const char* const s = d_->json + t_->start;
   c048c:	6822      	ldr	r2, [r4, #0]
   c048e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c0490:	6852      	ldr	r2, [r2, #4]
   c0492:	685b      	ldr	r3, [r3, #4]
   c0494:	5cd0      	ldrb	r0, [r2, r3]
   c0496:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c049a:	4258      	negs	r0, r3
   c049c:	4158      	adcs	r0, r3
}
   c049e:	bd10      	pop	{r4, pc}
    switch (type()) {
   c04a0:	2000      	movs	r0, #0
   c04a2:	e7fc      	b.n	c049e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c04a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c04a4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c04a6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c04a8:	e9c0 3300 	strd	r3, r3, [r0]
   c04ac:	4604      	mov	r4, r0
        n_(0) {
   c04ae:	480e      	ldr	r0, [pc, #56]	; (c04e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c04b0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c04b4:	b1a9      	cbz	r1, c04e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c04b6:	780b      	ldrb	r3, [r1, #0]
   c04b8:	2b03      	cmp	r3, #3
   c04ba:	d006      	beq.n	c04ca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c04bc:	b98b      	cbnz	r3, c04e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c04be:	6813      	ldr	r3, [r2, #0]
   c04c0:	6858      	ldr	r0, [r3, #4]
   c04c2:	684b      	ldr	r3, [r1, #4]
   c04c4:	5cc3      	ldrb	r3, [r0, r3]
   c04c6:	2b6e      	cmp	r3, #110	; 0x6e
   c04c8:	d007      	beq.n	c04da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c04ca:	6813      	ldr	r3, [r2, #0]
   c04cc:	684d      	ldr	r5, [r1, #4]
   c04ce:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c04d0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c04d2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c04d4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c04d6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c04d8:	60e3      	str	r3, [r4, #12]
   c04da:	4611      	mov	r1, r2
   c04dc:	4620      	mov	r0, r4
   c04de:	f7ff ff6c 	bl	c03ba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c04e2:	4620      	mov	r0, r4
   c04e4:	bd38      	pop	{r3, r4, r5, pc}
   c04e6:	bf00      	nop
   c04e8:	000c4c8c 	.word	0x000c4c8c

000c04ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c04ec:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c04ee:	2500      	movs	r5, #0
   c04f0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c04f2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c04f6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c04fa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c04fe:	4604      	mov	r4, r0
   c0500:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c0502:	b14b      	cbz	r3, c0518 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c0504:	781a      	ldrb	r2, [r3, #0]
   c0506:	2a01      	cmp	r2, #1
   c0508:	d106      	bne.n	c0518 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c050a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c050e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c0510:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c0512:	6143      	str	r3, [r0, #20]
   c0514:	f7ff ff51 	bl	c03ba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c0518:	4620      	mov	r0, r4
   c051a:	bd38      	pop	{r3, r4, r5, pc}

000c051c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c051c:	b510      	push	{r4, lr}
    if (!n_) {
   c051e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c0520:	4604      	mov	r4, r0
    if (!n_) {
   c0522:	b163      	cbz	r3, c053e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c0524:	6880      	ldr	r0, [r0, #8]
   c0526:	60e0      	str	r0, [r4, #12]
    --n_;
   c0528:	3b01      	subs	r3, #1
    ++t_;
   c052a:	3010      	adds	r0, #16
   c052c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c052e:	6120      	str	r0, [r4, #16]
    --n_;
   c0530:	6163      	str	r3, [r4, #20]
    if (n_) {
   c0532:	b113      	cbz	r3, c053a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c0534:	f7ff fef2 	bl	c031c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c0538:	60a0      	str	r0, [r4, #8]
    return true;
   c053a:	2001      	movs	r0, #1
   c053c:	e000      	b.n	c0540 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c053e:	4618      	mov	r0, r3
}
   c0540:	bd10      	pop	{r4, pc}

000c0542 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c0542:	b510      	push	{r4, lr}
    write('}');
   c0544:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c0546:	4604      	mov	r4, r0
    write('}');
   c0548:	f7ff ff49 	bl	c03de <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c054c:	2301      	movs	r3, #1
   c054e:	7123      	strb	r3, [r4, #4]
}
   c0550:	4620      	mov	r0, r4
   c0552:	bd10      	pop	{r4, pc}

000c0554 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c0554:	b508      	push	{r3, lr}
    switch (state_) {
   c0556:	7903      	ldrb	r3, [r0, #4]
   c0558:	2b01      	cmp	r3, #1
   c055a:	d002      	beq.n	c0562 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c055c:	2b02      	cmp	r3, #2
   c055e:	d004      	beq.n	c056a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c0560:	bd08      	pop	{r3, pc}
        write(',');
   c0562:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c0564:	f7ff ff3b 	bl	c03de <_ZN5spark10JSONWriter5writeEc>
}
   c0568:	e7fa      	b.n	c0560 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c056a:	213a      	movs	r1, #58	; 0x3a
   c056c:	e7fa      	b.n	c0564 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c056e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c056e:	b510      	push	{r4, lr}
   c0570:	4604      	mov	r4, r0
    writeSeparator();
   c0572:	f7ff ffef 	bl	c0554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c0576:	4620      	mov	r0, r4
   c0578:	217b      	movs	r1, #123	; 0x7b
   c057a:	f7ff ff30 	bl	c03de <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c057e:	2300      	movs	r3, #0
   c0580:	7123      	strb	r3, [r4, #4]
}
   c0582:	4620      	mov	r0, r4
   c0584:	bd10      	pop	{r4, pc}
	...

000c0588 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c0588:	b513      	push	{r0, r1, r4, lr}
   c058a:	4604      	mov	r4, r0
   c058c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c058e:	f7ff ffe1 	bl	c0554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c0592:	6823      	ldr	r3, [r4, #0]
   c0594:	9a01      	ldr	r2, [sp, #4]
   c0596:	68db      	ldr	r3, [r3, #12]
   c0598:	4903      	ldr	r1, [pc, #12]	; (c05a8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c059a:	4620      	mov	r0, r4
   c059c:	4798      	blx	r3
    state_ = NEXT;
   c059e:	2301      	movs	r3, #1
}
   c05a0:	4620      	mov	r0, r4
    state_ = NEXT;
   c05a2:	7123      	strb	r3, [r4, #4]
}
   c05a4:	b002      	add	sp, #8
   c05a6:	bd10      	pop	{r4, pc}
   c05a8:	000c37b4 	.word	0x000c37b4

000c05ac <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c05ac:	b513      	push	{r0, r1, r4, lr}
   c05ae:	4604      	mov	r4, r0
   c05b0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c05b2:	f7ff ffcf 	bl	c0554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c05b6:	6823      	ldr	r3, [r4, #0]
   c05b8:	9a01      	ldr	r2, [sp, #4]
   c05ba:	68db      	ldr	r3, [r3, #12]
   c05bc:	4903      	ldr	r1, [pc, #12]	; (c05cc <_ZN5spark10JSONWriter5valueEj+0x20>)
   c05be:	4620      	mov	r0, r4
   c05c0:	4798      	blx	r3
    state_ = NEXT;
   c05c2:	2301      	movs	r3, #1
}
   c05c4:	4620      	mov	r0, r4
    state_ = NEXT;
   c05c6:	7123      	strb	r3, [r4, #4]
}
   c05c8:	b002      	add	sp, #8
   c05ca:	bd10      	pop	{r4, pc}
   c05cc:	000c4e68 	.word	0x000c4e68

000c05d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c05d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c05d4:	460d      	mov	r5, r1
    write('"');
   c05d6:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c05d8:	4690      	mov	r8, r2
   c05da:	4604      	mov	r4, r0
    write('"');
   c05dc:	f7ff feff 	bl	c03de <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c05e0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c0688 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c05e4:	44a8      	add	r8, r5
    const char *s = str;
   c05e6:	462f      	mov	r7, r5
    while (s != end) {
   c05e8:	4547      	cmp	r7, r8
   c05ea:	46ba      	mov	sl, r7
   c05ec:	d03d      	beq.n	c066a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c05ee:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c05f2:	2e22      	cmp	r6, #34	; 0x22
   c05f4:	d006      	beq.n	c0604 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c05f6:	2e5c      	cmp	r6, #92	; 0x5c
   c05f8:	d004      	beq.n	c0604 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c05fa:	4630      	mov	r0, r6
   c05fc:	f000 ff56 	bl	c14ac <isprint>
   c0600:	2800      	cmp	r0, #0
   c0602:	d1f1      	bne.n	c05e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c0604:	6823      	ldr	r3, [r4, #0]
   c0606:	ebaa 0205 	sub.w	r2, sl, r5
   c060a:	689b      	ldr	r3, [r3, #8]
   c060c:	4629      	mov	r1, r5
   c060e:	4620      	mov	r0, r4
   c0610:	4798      	blx	r3
            write('\\');
   c0612:	215c      	movs	r1, #92	; 0x5c
   c0614:	4620      	mov	r0, r4
   c0616:	f7ff fee2 	bl	c03de <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c061a:	2e0d      	cmp	r6, #13
   c061c:	d80a      	bhi.n	c0634 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c061e:	2e07      	cmp	r6, #7
   c0620:	d91c      	bls.n	c065c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c0622:	f1a6 0308 	sub.w	r3, r6, #8
   c0626:	2b05      	cmp	r3, #5
   c0628:	d818      	bhi.n	c065c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c062a:	e8df f003 	tbb	[pc, r3]
   c062e:	0f0d      	.short	0x0f0d
   c0630:	15131711 	.word	0x15131711
   c0634:	2e22      	cmp	r6, #34	; 0x22
   c0636:	d001      	beq.n	c063c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c0638:	2e5c      	cmp	r6, #92	; 0x5c
   c063a:	d10f      	bne.n	c065c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c063c:	4631      	mov	r1, r6
                write('b');
   c063e:	4620      	mov	r0, r4
   c0640:	f7ff fecd 	bl	c03de <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c0644:	463d      	mov	r5, r7
    while (s != end) {
   c0646:	e7cf      	b.n	c05e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c0648:	2162      	movs	r1, #98	; 0x62
   c064a:	e7f8      	b.n	c063e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c064c:	2174      	movs	r1, #116	; 0x74
   c064e:	e7f6      	b.n	c063e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c0650:	216e      	movs	r1, #110	; 0x6e
   c0652:	e7f4      	b.n	c063e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c0654:	2166      	movs	r1, #102	; 0x66
   c0656:	e7f2      	b.n	c063e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c0658:	2172      	movs	r1, #114	; 0x72
   c065a:	e7f0      	b.n	c063e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c065c:	6823      	ldr	r3, [r4, #0]
   c065e:	4632      	mov	r2, r6
   c0660:	68db      	ldr	r3, [r3, #12]
   c0662:	4649      	mov	r1, r9
   c0664:	4620      	mov	r0, r4
   c0666:	4798      	blx	r3
                break;
   c0668:	e7ec      	b.n	c0644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c066a:	42bd      	cmp	r5, r7
   c066c:	d005      	beq.n	c067a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c066e:	6823      	ldr	r3, [r4, #0]
   c0670:	1b7a      	subs	r2, r7, r5
   c0672:	689b      	ldr	r3, [r3, #8]
   c0674:	4629      	mov	r1, r5
   c0676:	4620      	mov	r0, r4
   c0678:	4798      	blx	r3
    }
    write('"');
   c067a:	2122      	movs	r1, #34	; 0x22
   c067c:	4620      	mov	r0, r4
   c067e:	f7ff feae 	bl	c03de <_ZN5spark10JSONWriter5writeEc>
}
   c0682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c0686:	bf00      	nop
   c0688:	000c4e6b 	.word	0x000c4e6b

000c068c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c068c:	b513      	push	{r0, r1, r4, lr}
   c068e:	4604      	mov	r4, r0
   c0690:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0694:	f7ff ff5e 	bl	c0554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c0698:	4620      	mov	r0, r4
   c069a:	e9dd 2100 	ldrd	r2, r1, [sp]
   c069e:	f7ff ff97 	bl	c05d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c06a2:	2302      	movs	r3, #2
}
   c06a4:	4620      	mov	r0, r4
    state_ = VALUE;
   c06a6:	7123      	strb	r3, [r4, #4]
}
   c06a8:	b002      	add	sp, #8
   c06aa:	bd10      	pop	{r4, pc}

000c06ac <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c06ac:	b513      	push	{r0, r1, r4, lr}
   c06ae:	4604      	mov	r4, r0
   c06b0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c06b4:	f7ff ff4e 	bl	c0554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c06b8:	4620      	mov	r0, r4
   c06ba:	e9dd 2100 	ldrd	r2, r1, [sp]
   c06be:	f7ff ff87 	bl	c05d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c06c2:	2301      	movs	r3, #1
}
   c06c4:	4620      	mov	r0, r4
    state_ = NEXT;
   c06c6:	7123      	strb	r3, [r4, #4]
}
   c06c8:	b002      	add	sp, #8
   c06ca:	bd10      	pop	{r4, pc}

000c06cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c06cc:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c06ce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c06d0:	d902      	bls.n	c06d8 <pinAvailable+0xc>
    return false;
   c06d2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c06d4:	b002      	add	sp, #8
   c06d6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c06d8:	f1a0 030b 	sub.w	r3, r0, #11
   c06dc:	2b02      	cmp	r3, #2
   c06de:	d81a      	bhi.n	c0716 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c06e0:	4c17      	ldr	r4, [pc, #92]	; (c0740 <pinAvailable+0x74>)
   c06e2:	7821      	ldrb	r1, [r4, #0]
   c06e4:	f3bf 8f5b 	dmb	ish
   c06e8:	f011 0101 	ands.w	r1, r1, #1
   c06ec:	d10b      	bne.n	c0706 <pinAvailable+0x3a>
   c06ee:	4620      	mov	r0, r4
   c06f0:	9101      	str	r1, [sp, #4]
   c06f2:	f7f3 fce5 	bl	b40c0 <__cxa_guard_acquire>
   c06f6:	9901      	ldr	r1, [sp, #4]
   c06f8:	b128      	cbz	r0, c0706 <pinAvailable+0x3a>
   c06fa:	4812      	ldr	r0, [pc, #72]	; (c0744 <pinAvailable+0x78>)
   c06fc:	f7fc faa2 	bl	bcc44 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c0700:	4620      	mov	r0, r4
   c0702:	f7f3 fce2 	bl	b40ca <__cxa_guard_release>
   c0706:	4b0f      	ldr	r3, [pc, #60]	; (c0744 <pinAvailable+0x78>)
   c0708:	7818      	ldrb	r0, [r3, #0]
   c070a:	f7fc f831 	bl	bc770 <hal_spi_is_enabled>
   c070e:	2800      	cmp	r0, #0
   c0710:	d1df      	bne.n	c06d2 <pinAvailable+0x6>
  return true; // 'pin' is available
   c0712:	2001      	movs	r0, #1
   c0714:	e7de      	b.n	c06d4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c0716:	2801      	cmp	r0, #1
   c0718:	d809      	bhi.n	c072e <pinAvailable+0x62>
   c071a:	f000 f897 	bl	c084c <_Z19__fetch_global_Wirev>
   c071e:	2100      	movs	r1, #0
   c0720:	7c00      	ldrb	r0, [r0, #16]
   c0722:	f7fb ffed 	bl	bc700 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c0726:	f080 0001 	eor.w	r0, r0, #1
   c072a:	b2c0      	uxtb	r0, r0
   c072c:	e7d2      	b.n	c06d4 <pinAvailable+0x8>
   c072e:	3809      	subs	r0, #9
   c0730:	2801      	cmp	r0, #1
   c0732:	d8ee      	bhi.n	c0712 <pinAvailable+0x46>
   c0734:	f000 f84e 	bl	c07d4 <_Z22__fetch_global_Serial1v>
   c0738:	7c00      	ldrb	r0, [r0, #16]
   c073a:	f7fb ff79 	bl	bc630 <hal_usart_is_enabled>
   c073e:	e7f2      	b.n	c0726 <pinAvailable+0x5a>
   c0740:	2003ddc8 	.word	0x2003ddc8
   c0744:	2003ddcc 	.word	0x2003ddcc

000c0748 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c0748:	2825      	cmp	r0, #37	; 0x25
{
   c074a:	b538      	push	{r3, r4, r5, lr}
   c074c:	4604      	mov	r4, r0
   c074e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c0750:	d80a      	bhi.n	c0768 <pinMode+0x20>
   c0752:	29ff      	cmp	r1, #255	; 0xff
   c0754:	d008      	beq.n	c0768 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c0756:	f7ff ffb9 	bl	c06cc <pinAvailable>
   c075a:	b128      	cbz	r0, c0768 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c075c:	4629      	mov	r1, r5
   c075e:	4620      	mov	r0, r4
}
   c0760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c0764:	f7fb bdfa 	b.w	bc35c <HAL_Pin_Mode>
}
   c0768:	bd38      	pop	{r3, r4, r5, pc}

000c076a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c076a:	b538      	push	{r3, r4, r5, lr}
   c076c:	4604      	mov	r4, r0
   c076e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c0770:	f7fb fdfc 	bl	bc36c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c0774:	28ff      	cmp	r0, #255	; 0xff
   c0776:	d010      	beq.n	c079a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c0778:	2806      	cmp	r0, #6
   c077a:	d804      	bhi.n	c0786 <digitalWrite+0x1c>
   c077c:	234d      	movs	r3, #77	; 0x4d
   c077e:	fa23 f000 	lsr.w	r0, r3, r0
   c0782:	07c3      	lsls	r3, r0, #31
   c0784:	d409      	bmi.n	c079a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c0786:	4620      	mov	r0, r4
   c0788:	f7ff ffa0 	bl	c06cc <pinAvailable>
   c078c:	b128      	cbz	r0, c079a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c078e:	4629      	mov	r1, r5
   c0790:	4620      	mov	r0, r4
}
   c0792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c0796:	f7fb bdf1 	b.w	bc37c <HAL_GPIO_Write>
}
   c079a:	bd38      	pop	{r3, r4, r5, pc}

000c079c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c079c:	4770      	bx	lr
	...

000c07a0 <_Z20acquireSerial1Bufferv>:
{
   c07a0:	b538      	push	{r3, r4, r5, lr}
   c07a2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c07a4:	2514      	movs	r5, #20
   c07a6:	462a      	mov	r2, r5
   c07a8:	2100      	movs	r1, #0
   c07aa:	f000 febf 	bl	c152c <memset>
   c07ae:	8025      	strh	r5, [r4, #0]
   c07b0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c07b2:	4907      	ldr	r1, [pc, #28]	; (c07d0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c07b4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c07b6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c07b8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c07ba:	f000 f86d 	bl	c0898 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c07be:	4904      	ldr	r1, [pc, #16]	; (c07d0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c07c0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c07c2:	4628      	mov	r0, r5
   c07c4:	f000 f868 	bl	c0898 <_ZnajRKSt9nothrow_t>
    };
   c07c8:	60e0      	str	r0, [r4, #12]
}
   c07ca:	4620      	mov	r0, r4
   c07cc:	bd38      	pop	{r3, r4, r5, pc}
   c07ce:	bf00      	nop
   c07d0:	000c4e71 	.word	0x000c4e71

000c07d4 <_Z22__fetch_global_Serial1v>:
{
   c07d4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c07d6:	4d0e      	ldr	r5, [pc, #56]	; (c0810 <_Z22__fetch_global_Serial1v+0x3c>)
   c07d8:	7829      	ldrb	r1, [r5, #0]
   c07da:	f3bf 8f5b 	dmb	ish
   c07de:	f011 0401 	ands.w	r4, r1, #1
{
   c07e2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c07e4:	d111      	bne.n	c080a <_Z22__fetch_global_Serial1v+0x36>
   c07e6:	4628      	mov	r0, r5
   c07e8:	f7f3 fc6a 	bl	b40c0 <__cxa_guard_acquire>
   c07ec:	b168      	cbz	r0, c080a <_Z22__fetch_global_Serial1v+0x36>
   c07ee:	a801      	add	r0, sp, #4
   c07f0:	f7ff ffd6 	bl	c07a0 <_Z20acquireSerial1Bufferv>
   c07f4:	aa01      	add	r2, sp, #4
   c07f6:	4621      	mov	r1, r4
   c07f8:	4806      	ldr	r0, [pc, #24]	; (c0814 <_Z22__fetch_global_Serial1v+0x40>)
   c07fa:	f7ff fc29 	bl	c0050 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c07fe:	4628      	mov	r0, r5
   c0800:	f7f3 fc63 	bl	b40ca <__cxa_guard_release>
   c0804:	4804      	ldr	r0, [pc, #16]	; (c0818 <_Z22__fetch_global_Serial1v+0x44>)
   c0806:	f000 fe43 	bl	c1490 <atexit>
    return serial1;
}
   c080a:	4802      	ldr	r0, [pc, #8]	; (c0814 <_Z22__fetch_global_Serial1v+0x40>)
   c080c:	b007      	add	sp, #28
   c080e:	bd30      	pop	{r4, r5, pc}
   c0810:	2003e728 	.word	0x2003e728
   c0814:	2003e72c 	.word	0x2003e72c
   c0818:	000c079d 	.word	0x000c079d

000c081c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c081c:	4770      	bx	lr
	...

000c0820 <_Z17acquireWireBufferv>:
{
   c0820:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c0822:	2520      	movs	r5, #32
   c0824:	2314      	movs	r3, #20
{
   c0826:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c0828:	6003      	str	r3, [r0, #0]
   c082a:	6085      	str	r5, [r0, #8]
   c082c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c082e:	4906      	ldr	r1, [pc, #24]	; (c0848 <_Z17acquireWireBufferv+0x28>)
   c0830:	4628      	mov	r0, r5
   c0832:	f000 f831 	bl	c0898 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c0836:	4904      	ldr	r1, [pc, #16]	; (c0848 <_Z17acquireWireBufferv+0x28>)
	};
   c0838:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c083a:	4628      	mov	r0, r5
   c083c:	f000 f82c 	bl	c0898 <_ZnajRKSt9nothrow_t>
	};
   c0840:	60e0      	str	r0, [r4, #12]
}
   c0842:	4620      	mov	r0, r4
   c0844:	bd38      	pop	{r3, r4, r5, pc}
   c0846:	bf00      	nop
   c0848:	000c4e71 	.word	0x000c4e71

000c084c <_Z19__fetch_global_Wirev>:
{
   c084c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c084e:	4d0e      	ldr	r5, [pc, #56]	; (c0888 <_Z19__fetch_global_Wirev+0x3c>)
   c0850:	7829      	ldrb	r1, [r5, #0]
   c0852:	f3bf 8f5b 	dmb	ish
   c0856:	f011 0401 	ands.w	r4, r1, #1
{
   c085a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c085c:	d111      	bne.n	c0882 <_Z19__fetch_global_Wirev+0x36>
   c085e:	4628      	mov	r0, r5
   c0860:	f7f3 fc2e 	bl	b40c0 <__cxa_guard_acquire>
   c0864:	b168      	cbz	r0, c0882 <_Z19__fetch_global_Wirev+0x36>
   c0866:	a801      	add	r0, sp, #4
   c0868:	f7ff ffda 	bl	c0820 <_Z17acquireWireBufferv>
   c086c:	aa01      	add	r2, sp, #4
   c086e:	4621      	mov	r1, r4
   c0870:	4806      	ldr	r0, [pc, #24]	; (c088c <_Z19__fetch_global_Wirev+0x40>)
   c0872:	f7ff fc4b 	bl	c010c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c0876:	4628      	mov	r0, r5
   c0878:	f7f3 fc27 	bl	b40ca <__cxa_guard_release>
   c087c:	4804      	ldr	r0, [pc, #16]	; (c0890 <_Z19__fetch_global_Wirev+0x44>)
   c087e:	f000 fe07 	bl	c1490 <atexit>
	return wire;
}
   c0882:	4802      	ldr	r0, [pc, #8]	; (c088c <_Z19__fetch_global_Wirev+0x40>)
   c0884:	b007      	add	sp, #28
   c0886:	bd30      	pop	{r4, r5, pc}
   c0888:	2003e744 	.word	0x2003e744
   c088c:	2003e748 	.word	0x2003e748
   c0890:	000c081d 	.word	0x000c081d

000c0894 <_ZnwjRKSt9nothrow_t>:
   c0894:	f7f3 bbff 	b.w	b4096 <_Znwj>

000c0898 <_ZnajRKSt9nothrow_t>:
   c0898:	f7f3 bbff 	b.w	b409a <_Znaj>

000c089c <_ZSt25__throw_bad_function_callv>:
   c089c:	b508      	push	{r3, lr}
   c089e:	f7fc f935 	bl	bcb0c <abort>
	...

000c08a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c08a4:	4901      	ldr	r1, [pc, #4]	; (c08ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c08a6:	f000 b8f9 	b.w	c0a9c <_ZNKSt9type_infoeqERKS_>
   c08aa:	bf00      	nop
   c08ac:	000c4e8c 	.word	0x000c4e8c

000c08b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c08b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c08b2:	2400      	movs	r4, #0
   c08b4:	2310      	movs	r3, #16
   c08b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c08ba:	6803      	ldr	r3, [r0, #0]
   c08bc:	4615      	mov	r5, r2
   c08be:	699e      	ldr	r6, [r3, #24]
   c08c0:	6812      	ldr	r2, [r2, #0]
   c08c2:	466b      	mov	r3, sp
   c08c4:	e9cd 4400 	strd	r4, r4, [sp]
   c08c8:	47b0      	blx	r6
   c08ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c08ce:	f003 0306 	and.w	r3, r3, #6
   c08d2:	2b06      	cmp	r3, #6
   c08d4:	bf03      	ittte	eq
   c08d6:	9b00      	ldreq	r3, [sp, #0]
   c08d8:	602b      	streq	r3, [r5, #0]
   c08da:	2001      	moveq	r0, #1
   c08dc:	4620      	movne	r0, r4
   c08de:	b004      	add	sp, #16
   c08e0:	bd70      	pop	{r4, r5, r6, pc}

000c08e2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c08e2:	9800      	ldr	r0, [sp, #0]
   c08e4:	4290      	cmp	r0, r2
   c08e6:	bf14      	ite	ne
   c08e8:	2001      	movne	r0, #1
   c08ea:	2006      	moveq	r0, #6
   c08ec:	4770      	bx	lr
	...

000c08f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c08f0:	b510      	push	{r4, lr}
   c08f2:	4b03      	ldr	r3, [pc, #12]	; (c0900 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c08f4:	6003      	str	r3, [r0, #0]
   c08f6:	4604      	mov	r4, r0
   c08f8:	f000 f8cd 	bl	c0a96 <_ZNSt9type_infoD1Ev>
   c08fc:	4620      	mov	r0, r4
   c08fe:	bd10      	pop	{r4, pc}
   c0900:	000c4ecc 	.word	0x000c4ecc

000c0904 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c0904:	b510      	push	{r4, lr}
   c0906:	4604      	mov	r4, r0
   c0908:	f7ff fff2 	bl	c08f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c090c:	4620      	mov	r0, r4
   c090e:	2108      	movs	r1, #8
   c0910:	f7f3 fbc7 	bl	b40a2 <_ZdlPvj>
   c0914:	4620      	mov	r0, r4
   c0916:	bd10      	pop	{r4, pc}

000c0918 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c0918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c091c:	461f      	mov	r7, r3
   c091e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c0922:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c0926:	4598      	cmp	r8, r3
   c0928:	4606      	mov	r6, r0
   c092a:	4615      	mov	r5, r2
   c092c:	d107      	bne.n	c093e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c092e:	9907      	ldr	r1, [sp, #28]
   c0930:	f000 f8b4 	bl	c0a9c <_ZNKSt9type_infoeqERKS_>
   c0934:	b118      	cbz	r0, c093e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c0936:	7165      	strb	r5, [r4, #5]
   c0938:	2000      	movs	r0, #0
   c093a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c093e:	4639      	mov	r1, r7
   c0940:	4630      	mov	r0, r6
   c0942:	f000 f8ab 	bl	c0a9c <_ZNKSt9type_infoeqERKS_>
   c0946:	2800      	cmp	r0, #0
   c0948:	d0f6      	beq.n	c0938 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c094a:	2301      	movs	r3, #1
   c094c:	f8c4 8000 	str.w	r8, [r4]
   c0950:	7125      	strb	r5, [r4, #4]
   c0952:	71a3      	strb	r3, [r4, #6]
   c0954:	e7f0      	b.n	c0938 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c0956 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c0956:	b538      	push	{r3, r4, r5, lr}
   c0958:	4615      	mov	r5, r2
   c095a:	461c      	mov	r4, r3
   c095c:	f000 f89e 	bl	c0a9c <_ZNKSt9type_infoeqERKS_>
   c0960:	b120      	cbz	r0, c096c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c0962:	2308      	movs	r3, #8
   c0964:	60e3      	str	r3, [r4, #12]
   c0966:	2306      	movs	r3, #6
   c0968:	6025      	str	r5, [r4, #0]
   c096a:	7123      	strb	r3, [r4, #4]
   c096c:	bd38      	pop	{r3, r4, r5, pc}

000c096e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c096e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0970:	4605      	mov	r5, r0
   c0972:	460c      	mov	r4, r1
   c0974:	9201      	str	r2, [sp, #4]
   c0976:	461e      	mov	r6, r3
   c0978:	f000 f890 	bl	c0a9c <_ZNKSt9type_infoeqERKS_>
   c097c:	b950      	cbnz	r0, c0994 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c097e:	2e03      	cmp	r6, #3
   c0980:	d808      	bhi.n	c0994 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c0982:	6823      	ldr	r3, [r4, #0]
   c0984:	9a01      	ldr	r2, [sp, #4]
   c0986:	695b      	ldr	r3, [r3, #20]
   c0988:	4629      	mov	r1, r5
   c098a:	4620      	mov	r0, r4
   c098c:	b002      	add	sp, #8
   c098e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c0992:	4718      	bx	r3
   c0994:	b002      	add	sp, #8
   c0996:	bd70      	pop	{r4, r5, r6, pc}

000c0998 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c0998:	b510      	push	{r4, lr}
   c099a:	4b03      	ldr	r3, [pc, #12]	; (c09a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c099c:	6003      	str	r3, [r0, #0]
   c099e:	4604      	mov	r4, r0
   c09a0:	f7ff ffa6 	bl	c08f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c09a4:	4620      	mov	r0, r4
   c09a6:	bd10      	pop	{r4, pc}
   c09a8:	000c4f2c 	.word	0x000c4f2c

000c09ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c09ac:	b510      	push	{r4, lr}
   c09ae:	4604      	mov	r4, r0
   c09b0:	f7ff fff2 	bl	c0998 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c09b4:	4620      	mov	r0, r4
   c09b6:	210c      	movs	r1, #12
   c09b8:	f7f3 fb73 	bl	b40a2 <_ZdlPvj>
   c09bc:	4620      	mov	r0, r4
   c09be:	bd10      	pop	{r4, pc}

000c09c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c09c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c09c2:	9f08      	ldr	r7, [sp, #32]
   c09c4:	4297      	cmp	r7, r2
   c09c6:	4605      	mov	r5, r0
   c09c8:	460e      	mov	r6, r1
   c09ca:	4614      	mov	r4, r2
   c09cc:	d00a      	beq.n	c09e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c09ce:	68a8      	ldr	r0, [r5, #8]
   c09d0:	6802      	ldr	r2, [r0, #0]
   c09d2:	9708      	str	r7, [sp, #32]
   c09d4:	6a15      	ldr	r5, [r2, #32]
   c09d6:	4631      	mov	r1, r6
   c09d8:	4622      	mov	r2, r4
   c09da:	46ac      	mov	ip, r5
   c09dc:	b003      	add	sp, #12
   c09de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c09e2:	4760      	bx	ip
   c09e4:	4619      	mov	r1, r3
   c09e6:	9301      	str	r3, [sp, #4]
   c09e8:	f000 f858 	bl	c0a9c <_ZNKSt9type_infoeqERKS_>
   c09ec:	9b01      	ldr	r3, [sp, #4]
   c09ee:	2800      	cmp	r0, #0
   c09f0:	d0ed      	beq.n	c09ce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c09f2:	2006      	movs	r0, #6
   c09f4:	b003      	add	sp, #12
   c09f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c09f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c09f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c09fc:	460d      	mov	r5, r1
   c09fe:	4619      	mov	r1, r3
   c0a00:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c0a04:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c0a08:	4681      	mov	r9, r0
   c0a0a:	4617      	mov	r7, r2
   c0a0c:	4698      	mov	r8, r3
   c0a0e:	f000 f845 	bl	c0a9c <_ZNKSt9type_infoeqERKS_>
   c0a12:	b190      	cbz	r0, c0a3a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c0a14:	2d00      	cmp	r5, #0
   c0a16:	6034      	str	r4, [r6, #0]
   c0a18:	7137      	strb	r7, [r6, #4]
   c0a1a:	db09      	blt.n	c0a30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c0a1c:	1961      	adds	r1, r4, r5
   c0a1e:	458a      	cmp	sl, r1
   c0a20:	bf0c      	ite	eq
   c0a22:	2106      	moveq	r1, #6
   c0a24:	2101      	movne	r1, #1
   c0a26:	71b1      	strb	r1, [r6, #6]
   c0a28:	2000      	movs	r0, #0
   c0a2a:	b001      	add	sp, #4
   c0a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c0a30:	3502      	adds	r5, #2
   c0a32:	d1f9      	bne.n	c0a28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c0a34:	2301      	movs	r3, #1
   c0a36:	71b3      	strb	r3, [r6, #6]
   c0a38:	e7f6      	b.n	c0a28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c0a3a:	4554      	cmp	r4, sl
   c0a3c:	d106      	bne.n	c0a4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c0a3e:	4659      	mov	r1, fp
   c0a40:	4648      	mov	r0, r9
   c0a42:	f000 f82b 	bl	c0a9c <_ZNKSt9type_infoeqERKS_>
   c0a46:	b108      	cbz	r0, c0a4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c0a48:	7177      	strb	r7, [r6, #5]
   c0a4a:	e7ed      	b.n	c0a28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c0a4c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c0a50:	6803      	ldr	r3, [r0, #0]
   c0a52:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c0a56:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c0a5a:	69dc      	ldr	r4, [r3, #28]
   c0a5c:	463a      	mov	r2, r7
   c0a5e:	4643      	mov	r3, r8
   c0a60:	4629      	mov	r1, r5
   c0a62:	46a4      	mov	ip, r4
   c0a64:	b001      	add	sp, #4
   c0a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0a6a:	4760      	bx	ip

000c0a6c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c0a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0a70:	4607      	mov	r7, r0
   c0a72:	460c      	mov	r4, r1
   c0a74:	4615      	mov	r5, r2
   c0a76:	461e      	mov	r6, r3
   c0a78:	f7ff ff6d 	bl	c0956 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c0a7c:	b948      	cbnz	r0, c0a92 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c0a7e:	68b8      	ldr	r0, [r7, #8]
   c0a80:	6803      	ldr	r3, [r0, #0]
   c0a82:	699f      	ldr	r7, [r3, #24]
   c0a84:	462a      	mov	r2, r5
   c0a86:	4633      	mov	r3, r6
   c0a88:	4621      	mov	r1, r4
   c0a8a:	46bc      	mov	ip, r7
   c0a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c0a90:	4760      	bx	ip
   c0a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0a96 <_ZNSt9type_infoD1Ev>:
   c0a96:	4770      	bx	lr

000c0a98 <_ZNKSt9type_info14__is_pointer_pEv>:
   c0a98:	2000      	movs	r0, #0
   c0a9a:	4770      	bx	lr

000c0a9c <_ZNKSt9type_infoeqERKS_>:
   c0a9c:	4281      	cmp	r1, r0
   c0a9e:	b508      	push	{r3, lr}
   c0aa0:	d00e      	beq.n	c0ac0 <_ZNKSt9type_infoeqERKS_+0x24>
   c0aa2:	6840      	ldr	r0, [r0, #4]
   c0aa4:	7803      	ldrb	r3, [r0, #0]
   c0aa6:	2b2a      	cmp	r3, #42	; 0x2a
   c0aa8:	d00c      	beq.n	c0ac4 <_ZNKSt9type_infoeqERKS_+0x28>
   c0aaa:	6849      	ldr	r1, [r1, #4]
   c0aac:	780b      	ldrb	r3, [r1, #0]
   c0aae:	2b2a      	cmp	r3, #42	; 0x2a
   c0ab0:	bf08      	it	eq
   c0ab2:	3101      	addeq	r1, #1
   c0ab4:	f000 fd96 	bl	c15e4 <strcmp>
   c0ab8:	fab0 f080 	clz	r0, r0
   c0abc:	0940      	lsrs	r0, r0, #5
   c0abe:	bd08      	pop	{r3, pc}
   c0ac0:	2001      	movs	r0, #1
   c0ac2:	e7fc      	b.n	c0abe <_ZNKSt9type_infoeqERKS_+0x22>
   c0ac4:	2000      	movs	r0, #0
   c0ac6:	e7fa      	b.n	c0abe <_ZNKSt9type_infoeqERKS_+0x22>

000c0ac8 <__aeabi_drsub>:
   c0ac8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c0acc:	e002      	b.n	c0ad4 <__adddf3>
   c0ace:	bf00      	nop

000c0ad0 <__aeabi_dsub>:
   c0ad0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c0ad4 <__adddf3>:
   c0ad4:	b530      	push	{r4, r5, lr}
   c0ad6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c0ada:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c0ade:	ea94 0f05 	teq	r4, r5
   c0ae2:	bf08      	it	eq
   c0ae4:	ea90 0f02 	teqeq	r0, r2
   c0ae8:	bf1f      	itttt	ne
   c0aea:	ea54 0c00 	orrsne.w	ip, r4, r0
   c0aee:	ea55 0c02 	orrsne.w	ip, r5, r2
   c0af2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c0af6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c0afa:	f000 80e2 	beq.w	c0cc2 <__adddf3+0x1ee>
   c0afe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c0b02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c0b06:	bfb8      	it	lt
   c0b08:	426d      	neglt	r5, r5
   c0b0a:	dd0c      	ble.n	c0b26 <__adddf3+0x52>
   c0b0c:	442c      	add	r4, r5
   c0b0e:	ea80 0202 	eor.w	r2, r0, r2
   c0b12:	ea81 0303 	eor.w	r3, r1, r3
   c0b16:	ea82 0000 	eor.w	r0, r2, r0
   c0b1a:	ea83 0101 	eor.w	r1, r3, r1
   c0b1e:	ea80 0202 	eor.w	r2, r0, r2
   c0b22:	ea81 0303 	eor.w	r3, r1, r3
   c0b26:	2d36      	cmp	r5, #54	; 0x36
   c0b28:	bf88      	it	hi
   c0b2a:	bd30      	pophi	{r4, r5, pc}
   c0b2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0b30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0b34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c0b38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c0b3c:	d002      	beq.n	c0b44 <__adddf3+0x70>
   c0b3e:	4240      	negs	r0, r0
   c0b40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0b44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c0b48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c0b4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c0b50:	d002      	beq.n	c0b58 <__adddf3+0x84>
   c0b52:	4252      	negs	r2, r2
   c0b54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c0b58:	ea94 0f05 	teq	r4, r5
   c0b5c:	f000 80a7 	beq.w	c0cae <__adddf3+0x1da>
   c0b60:	f1a4 0401 	sub.w	r4, r4, #1
   c0b64:	f1d5 0e20 	rsbs	lr, r5, #32
   c0b68:	db0d      	blt.n	c0b86 <__adddf3+0xb2>
   c0b6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c0b6e:	fa22 f205 	lsr.w	r2, r2, r5
   c0b72:	1880      	adds	r0, r0, r2
   c0b74:	f141 0100 	adc.w	r1, r1, #0
   c0b78:	fa03 f20e 	lsl.w	r2, r3, lr
   c0b7c:	1880      	adds	r0, r0, r2
   c0b7e:	fa43 f305 	asr.w	r3, r3, r5
   c0b82:	4159      	adcs	r1, r3
   c0b84:	e00e      	b.n	c0ba4 <__adddf3+0xd0>
   c0b86:	f1a5 0520 	sub.w	r5, r5, #32
   c0b8a:	f10e 0e20 	add.w	lr, lr, #32
   c0b8e:	2a01      	cmp	r2, #1
   c0b90:	fa03 fc0e 	lsl.w	ip, r3, lr
   c0b94:	bf28      	it	cs
   c0b96:	f04c 0c02 	orrcs.w	ip, ip, #2
   c0b9a:	fa43 f305 	asr.w	r3, r3, r5
   c0b9e:	18c0      	adds	r0, r0, r3
   c0ba0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c0ba4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0ba8:	d507      	bpl.n	c0bba <__adddf3+0xe6>
   c0baa:	f04f 0e00 	mov.w	lr, #0
   c0bae:	f1dc 0c00 	rsbs	ip, ip, #0
   c0bb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   c0bb6:	eb6e 0101 	sbc.w	r1, lr, r1
   c0bba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c0bbe:	d31b      	bcc.n	c0bf8 <__adddf3+0x124>
   c0bc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c0bc4:	d30c      	bcc.n	c0be0 <__adddf3+0x10c>
   c0bc6:	0849      	lsrs	r1, r1, #1
   c0bc8:	ea5f 0030 	movs.w	r0, r0, rrx
   c0bcc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c0bd0:	f104 0401 	add.w	r4, r4, #1
   c0bd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c0bd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c0bdc:	f080 809a 	bcs.w	c0d14 <__adddf3+0x240>
   c0be0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c0be4:	bf08      	it	eq
   c0be6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0bea:	f150 0000 	adcs.w	r0, r0, #0
   c0bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0bf2:	ea41 0105 	orr.w	r1, r1, r5
   c0bf6:	bd30      	pop	{r4, r5, pc}
   c0bf8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c0bfc:	4140      	adcs	r0, r0
   c0bfe:	eb41 0101 	adc.w	r1, r1, r1
   c0c02:	3c01      	subs	r4, #1
   c0c04:	bf28      	it	cs
   c0c06:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c0c0a:	d2e9      	bcs.n	c0be0 <__adddf3+0x10c>
   c0c0c:	f091 0f00 	teq	r1, #0
   c0c10:	bf04      	itt	eq
   c0c12:	4601      	moveq	r1, r0
   c0c14:	2000      	moveq	r0, #0
   c0c16:	fab1 f381 	clz	r3, r1
   c0c1a:	bf08      	it	eq
   c0c1c:	3320      	addeq	r3, #32
   c0c1e:	f1a3 030b 	sub.w	r3, r3, #11
   c0c22:	f1b3 0220 	subs.w	r2, r3, #32
   c0c26:	da0c      	bge.n	c0c42 <__adddf3+0x16e>
   c0c28:	320c      	adds	r2, #12
   c0c2a:	dd08      	ble.n	c0c3e <__adddf3+0x16a>
   c0c2c:	f102 0c14 	add.w	ip, r2, #20
   c0c30:	f1c2 020c 	rsb	r2, r2, #12
   c0c34:	fa01 f00c 	lsl.w	r0, r1, ip
   c0c38:	fa21 f102 	lsr.w	r1, r1, r2
   c0c3c:	e00c      	b.n	c0c58 <__adddf3+0x184>
   c0c3e:	f102 0214 	add.w	r2, r2, #20
   c0c42:	bfd8      	it	le
   c0c44:	f1c2 0c20 	rsble	ip, r2, #32
   c0c48:	fa01 f102 	lsl.w	r1, r1, r2
   c0c4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c0c50:	bfdc      	itt	le
   c0c52:	ea41 010c 	orrle.w	r1, r1, ip
   c0c56:	4090      	lslle	r0, r2
   c0c58:	1ae4      	subs	r4, r4, r3
   c0c5a:	bfa2      	ittt	ge
   c0c5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c0c60:	4329      	orrge	r1, r5
   c0c62:	bd30      	popge	{r4, r5, pc}
   c0c64:	ea6f 0404 	mvn.w	r4, r4
   c0c68:	3c1f      	subs	r4, #31
   c0c6a:	da1c      	bge.n	c0ca6 <__adddf3+0x1d2>
   c0c6c:	340c      	adds	r4, #12
   c0c6e:	dc0e      	bgt.n	c0c8e <__adddf3+0x1ba>
   c0c70:	f104 0414 	add.w	r4, r4, #20
   c0c74:	f1c4 0220 	rsb	r2, r4, #32
   c0c78:	fa20 f004 	lsr.w	r0, r0, r4
   c0c7c:	fa01 f302 	lsl.w	r3, r1, r2
   c0c80:	ea40 0003 	orr.w	r0, r0, r3
   c0c84:	fa21 f304 	lsr.w	r3, r1, r4
   c0c88:	ea45 0103 	orr.w	r1, r5, r3
   c0c8c:	bd30      	pop	{r4, r5, pc}
   c0c8e:	f1c4 040c 	rsb	r4, r4, #12
   c0c92:	f1c4 0220 	rsb	r2, r4, #32
   c0c96:	fa20 f002 	lsr.w	r0, r0, r2
   c0c9a:	fa01 f304 	lsl.w	r3, r1, r4
   c0c9e:	ea40 0003 	orr.w	r0, r0, r3
   c0ca2:	4629      	mov	r1, r5
   c0ca4:	bd30      	pop	{r4, r5, pc}
   c0ca6:	fa21 f004 	lsr.w	r0, r1, r4
   c0caa:	4629      	mov	r1, r5
   c0cac:	bd30      	pop	{r4, r5, pc}
   c0cae:	f094 0f00 	teq	r4, #0
   c0cb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c0cb6:	bf06      	itte	eq
   c0cb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c0cbc:	3401      	addeq	r4, #1
   c0cbe:	3d01      	subne	r5, #1
   c0cc0:	e74e      	b.n	c0b60 <__adddf3+0x8c>
   c0cc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0cc6:	bf18      	it	ne
   c0cc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c0ccc:	d029      	beq.n	c0d22 <__adddf3+0x24e>
   c0cce:	ea94 0f05 	teq	r4, r5
   c0cd2:	bf08      	it	eq
   c0cd4:	ea90 0f02 	teqeq	r0, r2
   c0cd8:	d005      	beq.n	c0ce6 <__adddf3+0x212>
   c0cda:	ea54 0c00 	orrs.w	ip, r4, r0
   c0cde:	bf04      	itt	eq
   c0ce0:	4619      	moveq	r1, r3
   c0ce2:	4610      	moveq	r0, r2
   c0ce4:	bd30      	pop	{r4, r5, pc}
   c0ce6:	ea91 0f03 	teq	r1, r3
   c0cea:	bf1e      	ittt	ne
   c0cec:	2100      	movne	r1, #0
   c0cee:	2000      	movne	r0, #0
   c0cf0:	bd30      	popne	{r4, r5, pc}
   c0cf2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c0cf6:	d105      	bne.n	c0d04 <__adddf3+0x230>
   c0cf8:	0040      	lsls	r0, r0, #1
   c0cfa:	4149      	adcs	r1, r1
   c0cfc:	bf28      	it	cs
   c0cfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c0d02:	bd30      	pop	{r4, r5, pc}
   c0d04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c0d08:	bf3c      	itt	cc
   c0d0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c0d0e:	bd30      	popcc	{r4, r5, pc}
   c0d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0d14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c0d18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0d1c:	f04f 0000 	mov.w	r0, #0
   c0d20:	bd30      	pop	{r4, r5, pc}
   c0d22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c0d26:	bf1a      	itte	ne
   c0d28:	4619      	movne	r1, r3
   c0d2a:	4610      	movne	r0, r2
   c0d2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c0d30:	bf1c      	itt	ne
   c0d32:	460b      	movne	r3, r1
   c0d34:	4602      	movne	r2, r0
   c0d36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0d3a:	bf06      	itte	eq
   c0d3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c0d40:	ea91 0f03 	teqeq	r1, r3
   c0d44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c0d48:	bd30      	pop	{r4, r5, pc}
   c0d4a:	bf00      	nop

000c0d4c <__aeabi_ui2d>:
   c0d4c:	f090 0f00 	teq	r0, #0
   c0d50:	bf04      	itt	eq
   c0d52:	2100      	moveq	r1, #0
   c0d54:	4770      	bxeq	lr
   c0d56:	b530      	push	{r4, r5, lr}
   c0d58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0d5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0d60:	f04f 0500 	mov.w	r5, #0
   c0d64:	f04f 0100 	mov.w	r1, #0
   c0d68:	e750      	b.n	c0c0c <__adddf3+0x138>
   c0d6a:	bf00      	nop

000c0d6c <__aeabi_i2d>:
   c0d6c:	f090 0f00 	teq	r0, #0
   c0d70:	bf04      	itt	eq
   c0d72:	2100      	moveq	r1, #0
   c0d74:	4770      	bxeq	lr
   c0d76:	b530      	push	{r4, r5, lr}
   c0d78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0d7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0d80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c0d84:	bf48      	it	mi
   c0d86:	4240      	negmi	r0, r0
   c0d88:	f04f 0100 	mov.w	r1, #0
   c0d8c:	e73e      	b.n	c0c0c <__adddf3+0x138>
   c0d8e:	bf00      	nop

000c0d90 <__aeabi_f2d>:
   c0d90:	0042      	lsls	r2, r0, #1
   c0d92:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c0d96:	ea4f 0131 	mov.w	r1, r1, rrx
   c0d9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c0d9e:	bf1f      	itttt	ne
   c0da0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c0da4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c0da8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c0dac:	4770      	bxne	lr
   c0dae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c0db2:	bf08      	it	eq
   c0db4:	4770      	bxeq	lr
   c0db6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c0dba:	bf04      	itt	eq
   c0dbc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c0dc0:	4770      	bxeq	lr
   c0dc2:	b530      	push	{r4, r5, lr}
   c0dc4:	f44f 7460 	mov.w	r4, #896	; 0x380
   c0dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0dd0:	e71c      	b.n	c0c0c <__adddf3+0x138>
   c0dd2:	bf00      	nop

000c0dd4 <__aeabi_ul2d>:
   c0dd4:	ea50 0201 	orrs.w	r2, r0, r1
   c0dd8:	bf08      	it	eq
   c0dda:	4770      	bxeq	lr
   c0ddc:	b530      	push	{r4, r5, lr}
   c0dde:	f04f 0500 	mov.w	r5, #0
   c0de2:	e00a      	b.n	c0dfa <__aeabi_l2d+0x16>

000c0de4 <__aeabi_l2d>:
   c0de4:	ea50 0201 	orrs.w	r2, r0, r1
   c0de8:	bf08      	it	eq
   c0dea:	4770      	bxeq	lr
   c0dec:	b530      	push	{r4, r5, lr}
   c0dee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c0df2:	d502      	bpl.n	c0dfa <__aeabi_l2d+0x16>
   c0df4:	4240      	negs	r0, r0
   c0df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0dfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0dfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0e02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c0e06:	f43f aed8 	beq.w	c0bba <__adddf3+0xe6>
   c0e0a:	f04f 0203 	mov.w	r2, #3
   c0e0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0e12:	bf18      	it	ne
   c0e14:	3203      	addne	r2, #3
   c0e16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0e1a:	bf18      	it	ne
   c0e1c:	3203      	addne	r2, #3
   c0e1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c0e22:	f1c2 0320 	rsb	r3, r2, #32
   c0e26:	fa00 fc03 	lsl.w	ip, r0, r3
   c0e2a:	fa20 f002 	lsr.w	r0, r0, r2
   c0e2e:	fa01 fe03 	lsl.w	lr, r1, r3
   c0e32:	ea40 000e 	orr.w	r0, r0, lr
   c0e36:	fa21 f102 	lsr.w	r1, r1, r2
   c0e3a:	4414      	add	r4, r2
   c0e3c:	e6bd      	b.n	c0bba <__adddf3+0xe6>
   c0e3e:	bf00      	nop

000c0e40 <__aeabi_dmul>:
   c0e40:	b570      	push	{r4, r5, r6, lr}
   c0e42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0e46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0e4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0e4e:	bf1d      	ittte	ne
   c0e50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0e54:	ea94 0f0c 	teqne	r4, ip
   c0e58:	ea95 0f0c 	teqne	r5, ip
   c0e5c:	f000 f8de 	bleq	c101c <__aeabi_dmul+0x1dc>
   c0e60:	442c      	add	r4, r5
   c0e62:	ea81 0603 	eor.w	r6, r1, r3
   c0e66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c0e6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c0e6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c0e72:	bf18      	it	ne
   c0e74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c0e78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0e80:	d038      	beq.n	c0ef4 <__aeabi_dmul+0xb4>
   c0e82:	fba0 ce02 	umull	ip, lr, r0, r2
   c0e86:	f04f 0500 	mov.w	r5, #0
   c0e8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   c0e8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c0e92:	fbe0 e503 	umlal	lr, r5, r0, r3
   c0e96:	f04f 0600 	mov.w	r6, #0
   c0e9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c0e9e:	f09c 0f00 	teq	ip, #0
   c0ea2:	bf18      	it	ne
   c0ea4:	f04e 0e01 	orrne.w	lr, lr, #1
   c0ea8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c0eac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c0eb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c0eb4:	d204      	bcs.n	c0ec0 <__aeabi_dmul+0x80>
   c0eb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c0eba:	416d      	adcs	r5, r5
   c0ebc:	eb46 0606 	adc.w	r6, r6, r6
   c0ec0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c0ec4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c0ec8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c0ecc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c0ed0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c0ed4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0ed8:	bf88      	it	hi
   c0eda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0ede:	d81e      	bhi.n	c0f1e <__aeabi_dmul+0xde>
   c0ee0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c0ee4:	bf08      	it	eq
   c0ee6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c0eea:	f150 0000 	adcs.w	r0, r0, #0
   c0eee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0ef2:	bd70      	pop	{r4, r5, r6, pc}
   c0ef4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c0ef8:	ea46 0101 	orr.w	r1, r6, r1
   c0efc:	ea40 0002 	orr.w	r0, r0, r2
   c0f00:	ea81 0103 	eor.w	r1, r1, r3
   c0f04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c0f08:	bfc2      	ittt	gt
   c0f0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0f0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0f12:	bd70      	popgt	{r4, r5, r6, pc}
   c0f14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0f18:	f04f 0e00 	mov.w	lr, #0
   c0f1c:	3c01      	subs	r4, #1
   c0f1e:	f300 80ab 	bgt.w	c1078 <__aeabi_dmul+0x238>
   c0f22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c0f26:	bfde      	ittt	le
   c0f28:	2000      	movle	r0, #0
   c0f2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c0f2e:	bd70      	pople	{r4, r5, r6, pc}
   c0f30:	f1c4 0400 	rsb	r4, r4, #0
   c0f34:	3c20      	subs	r4, #32
   c0f36:	da35      	bge.n	c0fa4 <__aeabi_dmul+0x164>
   c0f38:	340c      	adds	r4, #12
   c0f3a:	dc1b      	bgt.n	c0f74 <__aeabi_dmul+0x134>
   c0f3c:	f104 0414 	add.w	r4, r4, #20
   c0f40:	f1c4 0520 	rsb	r5, r4, #32
   c0f44:	fa00 f305 	lsl.w	r3, r0, r5
   c0f48:	fa20 f004 	lsr.w	r0, r0, r4
   c0f4c:	fa01 f205 	lsl.w	r2, r1, r5
   c0f50:	ea40 0002 	orr.w	r0, r0, r2
   c0f54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c0f58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0f60:	fa21 f604 	lsr.w	r6, r1, r4
   c0f64:	eb42 0106 	adc.w	r1, r2, r6
   c0f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0f6c:	bf08      	it	eq
   c0f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0f72:	bd70      	pop	{r4, r5, r6, pc}
   c0f74:	f1c4 040c 	rsb	r4, r4, #12
   c0f78:	f1c4 0520 	rsb	r5, r4, #32
   c0f7c:	fa00 f304 	lsl.w	r3, r0, r4
   c0f80:	fa20 f005 	lsr.w	r0, r0, r5
   c0f84:	fa01 f204 	lsl.w	r2, r1, r4
   c0f88:	ea40 0002 	orr.w	r0, r0, r2
   c0f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0f90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0f94:	f141 0100 	adc.w	r1, r1, #0
   c0f98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0f9c:	bf08      	it	eq
   c0f9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0fa2:	bd70      	pop	{r4, r5, r6, pc}
   c0fa4:	f1c4 0520 	rsb	r5, r4, #32
   c0fa8:	fa00 f205 	lsl.w	r2, r0, r5
   c0fac:	ea4e 0e02 	orr.w	lr, lr, r2
   c0fb0:	fa20 f304 	lsr.w	r3, r0, r4
   c0fb4:	fa01 f205 	lsl.w	r2, r1, r5
   c0fb8:	ea43 0302 	orr.w	r3, r3, r2
   c0fbc:	fa21 f004 	lsr.w	r0, r1, r4
   c0fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0fc4:	fa21 f204 	lsr.w	r2, r1, r4
   c0fc8:	ea20 0002 	bic.w	r0, r0, r2
   c0fcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c0fd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0fd4:	bf08      	it	eq
   c0fd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0fda:	bd70      	pop	{r4, r5, r6, pc}
   c0fdc:	f094 0f00 	teq	r4, #0
   c0fe0:	d10f      	bne.n	c1002 <__aeabi_dmul+0x1c2>
   c0fe2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c0fe6:	0040      	lsls	r0, r0, #1
   c0fe8:	eb41 0101 	adc.w	r1, r1, r1
   c0fec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0ff0:	bf08      	it	eq
   c0ff2:	3c01      	subeq	r4, #1
   c0ff4:	d0f7      	beq.n	c0fe6 <__aeabi_dmul+0x1a6>
   c0ff6:	ea41 0106 	orr.w	r1, r1, r6
   c0ffa:	f095 0f00 	teq	r5, #0
   c0ffe:	bf18      	it	ne
   c1000:	4770      	bxne	lr
   c1002:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c1006:	0052      	lsls	r2, r2, #1
   c1008:	eb43 0303 	adc.w	r3, r3, r3
   c100c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c1010:	bf08      	it	eq
   c1012:	3d01      	subeq	r5, #1
   c1014:	d0f7      	beq.n	c1006 <__aeabi_dmul+0x1c6>
   c1016:	ea43 0306 	orr.w	r3, r3, r6
   c101a:	4770      	bx	lr
   c101c:	ea94 0f0c 	teq	r4, ip
   c1020:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c1024:	bf18      	it	ne
   c1026:	ea95 0f0c 	teqne	r5, ip
   c102a:	d00c      	beq.n	c1046 <__aeabi_dmul+0x206>
   c102c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1030:	bf18      	it	ne
   c1032:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1036:	d1d1      	bne.n	c0fdc <__aeabi_dmul+0x19c>
   c1038:	ea81 0103 	eor.w	r1, r1, r3
   c103c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1040:	f04f 0000 	mov.w	r0, #0
   c1044:	bd70      	pop	{r4, r5, r6, pc}
   c1046:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c104a:	bf06      	itte	eq
   c104c:	4610      	moveq	r0, r2
   c104e:	4619      	moveq	r1, r3
   c1050:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1054:	d019      	beq.n	c108a <__aeabi_dmul+0x24a>
   c1056:	ea94 0f0c 	teq	r4, ip
   c105a:	d102      	bne.n	c1062 <__aeabi_dmul+0x222>
   c105c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c1060:	d113      	bne.n	c108a <__aeabi_dmul+0x24a>
   c1062:	ea95 0f0c 	teq	r5, ip
   c1066:	d105      	bne.n	c1074 <__aeabi_dmul+0x234>
   c1068:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c106c:	bf1c      	itt	ne
   c106e:	4610      	movne	r0, r2
   c1070:	4619      	movne	r1, r3
   c1072:	d10a      	bne.n	c108a <__aeabi_dmul+0x24a>
   c1074:	ea81 0103 	eor.w	r1, r1, r3
   c1078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c107c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c1080:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1084:	f04f 0000 	mov.w	r0, #0
   c1088:	bd70      	pop	{r4, r5, r6, pc}
   c108a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c108e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c1092:	bd70      	pop	{r4, r5, r6, pc}

000c1094 <__aeabi_ddiv>:
   c1094:	b570      	push	{r4, r5, r6, lr}
   c1096:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c109a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c109e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c10a2:	bf1d      	ittte	ne
   c10a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c10a8:	ea94 0f0c 	teqne	r4, ip
   c10ac:	ea95 0f0c 	teqne	r5, ip
   c10b0:	f000 f8a7 	bleq	c1202 <__aeabi_ddiv+0x16e>
   c10b4:	eba4 0405 	sub.w	r4, r4, r5
   c10b8:	ea81 0e03 	eor.w	lr, r1, r3
   c10bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c10c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c10c4:	f000 8088 	beq.w	c11d8 <__aeabi_ddiv+0x144>
   c10c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c10cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c10d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c10d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c10d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c10dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c10e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c10e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c10e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c10ec:	429d      	cmp	r5, r3
   c10ee:	bf08      	it	eq
   c10f0:	4296      	cmpeq	r6, r2
   c10f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c10f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c10fa:	d202      	bcs.n	c1102 <__aeabi_ddiv+0x6e>
   c10fc:	085b      	lsrs	r3, r3, #1
   c10fe:	ea4f 0232 	mov.w	r2, r2, rrx
   c1102:	1ab6      	subs	r6, r6, r2
   c1104:	eb65 0503 	sbc.w	r5, r5, r3
   c1108:	085b      	lsrs	r3, r3, #1
   c110a:	ea4f 0232 	mov.w	r2, r2, rrx
   c110e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c1112:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c1116:	ebb6 0e02 	subs.w	lr, r6, r2
   c111a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c111e:	bf22      	ittt	cs
   c1120:	1ab6      	subcs	r6, r6, r2
   c1122:	4675      	movcs	r5, lr
   c1124:	ea40 000c 	orrcs.w	r0, r0, ip
   c1128:	085b      	lsrs	r3, r3, #1
   c112a:	ea4f 0232 	mov.w	r2, r2, rrx
   c112e:	ebb6 0e02 	subs.w	lr, r6, r2
   c1132:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1136:	bf22      	ittt	cs
   c1138:	1ab6      	subcs	r6, r6, r2
   c113a:	4675      	movcs	r5, lr
   c113c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c1140:	085b      	lsrs	r3, r3, #1
   c1142:	ea4f 0232 	mov.w	r2, r2, rrx
   c1146:	ebb6 0e02 	subs.w	lr, r6, r2
   c114a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c114e:	bf22      	ittt	cs
   c1150:	1ab6      	subcs	r6, r6, r2
   c1152:	4675      	movcs	r5, lr
   c1154:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c1158:	085b      	lsrs	r3, r3, #1
   c115a:	ea4f 0232 	mov.w	r2, r2, rrx
   c115e:	ebb6 0e02 	subs.w	lr, r6, r2
   c1162:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1166:	bf22      	ittt	cs
   c1168:	1ab6      	subcs	r6, r6, r2
   c116a:	4675      	movcs	r5, lr
   c116c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c1170:	ea55 0e06 	orrs.w	lr, r5, r6
   c1174:	d018      	beq.n	c11a8 <__aeabi_ddiv+0x114>
   c1176:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c117a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c117e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c1182:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c1186:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c118a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c118e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c1192:	d1c0      	bne.n	c1116 <__aeabi_ddiv+0x82>
   c1194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1198:	d10b      	bne.n	c11b2 <__aeabi_ddiv+0x11e>
   c119a:	ea41 0100 	orr.w	r1, r1, r0
   c119e:	f04f 0000 	mov.w	r0, #0
   c11a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c11a6:	e7b6      	b.n	c1116 <__aeabi_ddiv+0x82>
   c11a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c11ac:	bf04      	itt	eq
   c11ae:	4301      	orreq	r1, r0
   c11b0:	2000      	moveq	r0, #0
   c11b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c11b6:	bf88      	it	hi
   c11b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c11bc:	f63f aeaf 	bhi.w	c0f1e <__aeabi_dmul+0xde>
   c11c0:	ebb5 0c03 	subs.w	ip, r5, r3
   c11c4:	bf04      	itt	eq
   c11c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   c11ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c11ce:	f150 0000 	adcs.w	r0, r0, #0
   c11d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c11d6:	bd70      	pop	{r4, r5, r6, pc}
   c11d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c11dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c11e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c11e4:	bfc2      	ittt	gt
   c11e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   c11ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c11ee:	bd70      	popgt	{r4, r5, r6, pc}
   c11f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c11f4:	f04f 0e00 	mov.w	lr, #0
   c11f8:	3c01      	subs	r4, #1
   c11fa:	e690      	b.n	c0f1e <__aeabi_dmul+0xde>
   c11fc:	ea45 0e06 	orr.w	lr, r5, r6
   c1200:	e68d      	b.n	c0f1e <__aeabi_dmul+0xde>
   c1202:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c1206:	ea94 0f0c 	teq	r4, ip
   c120a:	bf08      	it	eq
   c120c:	ea95 0f0c 	teqeq	r5, ip
   c1210:	f43f af3b 	beq.w	c108a <__aeabi_dmul+0x24a>
   c1214:	ea94 0f0c 	teq	r4, ip
   c1218:	d10a      	bne.n	c1230 <__aeabi_ddiv+0x19c>
   c121a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c121e:	f47f af34 	bne.w	c108a <__aeabi_dmul+0x24a>
   c1222:	ea95 0f0c 	teq	r5, ip
   c1226:	f47f af25 	bne.w	c1074 <__aeabi_dmul+0x234>
   c122a:	4610      	mov	r0, r2
   c122c:	4619      	mov	r1, r3
   c122e:	e72c      	b.n	c108a <__aeabi_dmul+0x24a>
   c1230:	ea95 0f0c 	teq	r5, ip
   c1234:	d106      	bne.n	c1244 <__aeabi_ddiv+0x1b0>
   c1236:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c123a:	f43f aefd 	beq.w	c1038 <__aeabi_dmul+0x1f8>
   c123e:	4610      	mov	r0, r2
   c1240:	4619      	mov	r1, r3
   c1242:	e722      	b.n	c108a <__aeabi_dmul+0x24a>
   c1244:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1248:	bf18      	it	ne
   c124a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c124e:	f47f aec5 	bne.w	c0fdc <__aeabi_dmul+0x19c>
   c1252:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c1256:	f47f af0d 	bne.w	c1074 <__aeabi_dmul+0x234>
   c125a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c125e:	f47f aeeb 	bne.w	c1038 <__aeabi_dmul+0x1f8>
   c1262:	e712      	b.n	c108a <__aeabi_dmul+0x24a>

000c1264 <__gedf2>:
   c1264:	f04f 3cff 	mov.w	ip, #4294967295
   c1268:	e006      	b.n	c1278 <__cmpdf2+0x4>
   c126a:	bf00      	nop

000c126c <__ledf2>:
   c126c:	f04f 0c01 	mov.w	ip, #1
   c1270:	e002      	b.n	c1278 <__cmpdf2+0x4>
   c1272:	bf00      	nop

000c1274 <__cmpdf2>:
   c1274:	f04f 0c01 	mov.w	ip, #1
   c1278:	f84d cd04 	str.w	ip, [sp, #-4]!
   c127c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1288:	bf18      	it	ne
   c128a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c128e:	d01b      	beq.n	c12c8 <__cmpdf2+0x54>
   c1290:	b001      	add	sp, #4
   c1292:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c1296:	bf0c      	ite	eq
   c1298:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c129c:	ea91 0f03 	teqne	r1, r3
   c12a0:	bf02      	ittt	eq
   c12a2:	ea90 0f02 	teqeq	r0, r2
   c12a6:	2000      	moveq	r0, #0
   c12a8:	4770      	bxeq	lr
   c12aa:	f110 0f00 	cmn.w	r0, #0
   c12ae:	ea91 0f03 	teq	r1, r3
   c12b2:	bf58      	it	pl
   c12b4:	4299      	cmppl	r1, r3
   c12b6:	bf08      	it	eq
   c12b8:	4290      	cmpeq	r0, r2
   c12ba:	bf2c      	ite	cs
   c12bc:	17d8      	asrcs	r0, r3, #31
   c12be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c12c2:	f040 0001 	orr.w	r0, r0, #1
   c12c6:	4770      	bx	lr
   c12c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c12cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c12d0:	d102      	bne.n	c12d8 <__cmpdf2+0x64>
   c12d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c12d6:	d107      	bne.n	c12e8 <__cmpdf2+0x74>
   c12d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c12dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c12e0:	d1d6      	bne.n	c1290 <__cmpdf2+0x1c>
   c12e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c12e6:	d0d3      	beq.n	c1290 <__cmpdf2+0x1c>
   c12e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   c12ec:	4770      	bx	lr
   c12ee:	bf00      	nop

000c12f0 <__aeabi_cdrcmple>:
   c12f0:	4684      	mov	ip, r0
   c12f2:	4610      	mov	r0, r2
   c12f4:	4662      	mov	r2, ip
   c12f6:	468c      	mov	ip, r1
   c12f8:	4619      	mov	r1, r3
   c12fa:	4663      	mov	r3, ip
   c12fc:	e000      	b.n	c1300 <__aeabi_cdcmpeq>
   c12fe:	bf00      	nop

000c1300 <__aeabi_cdcmpeq>:
   c1300:	b501      	push	{r0, lr}
   c1302:	f7ff ffb7 	bl	c1274 <__cmpdf2>
   c1306:	2800      	cmp	r0, #0
   c1308:	bf48      	it	mi
   c130a:	f110 0f00 	cmnmi.w	r0, #0
   c130e:	bd01      	pop	{r0, pc}

000c1310 <__aeabi_dcmpeq>:
   c1310:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1314:	f7ff fff4 	bl	c1300 <__aeabi_cdcmpeq>
   c1318:	bf0c      	ite	eq
   c131a:	2001      	moveq	r0, #1
   c131c:	2000      	movne	r0, #0
   c131e:	f85d fb08 	ldr.w	pc, [sp], #8
   c1322:	bf00      	nop

000c1324 <__aeabi_dcmplt>:
   c1324:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1328:	f7ff ffea 	bl	c1300 <__aeabi_cdcmpeq>
   c132c:	bf34      	ite	cc
   c132e:	2001      	movcc	r0, #1
   c1330:	2000      	movcs	r0, #0
   c1332:	f85d fb08 	ldr.w	pc, [sp], #8
   c1336:	bf00      	nop

000c1338 <__aeabi_dcmple>:
   c1338:	f84d ed08 	str.w	lr, [sp, #-8]!
   c133c:	f7ff ffe0 	bl	c1300 <__aeabi_cdcmpeq>
   c1340:	bf94      	ite	ls
   c1342:	2001      	movls	r0, #1
   c1344:	2000      	movhi	r0, #0
   c1346:	f85d fb08 	ldr.w	pc, [sp], #8
   c134a:	bf00      	nop

000c134c <__aeabi_dcmpge>:
   c134c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1350:	f7ff ffce 	bl	c12f0 <__aeabi_cdrcmple>
   c1354:	bf94      	ite	ls
   c1356:	2001      	movls	r0, #1
   c1358:	2000      	movhi	r0, #0
   c135a:	f85d fb08 	ldr.w	pc, [sp], #8
   c135e:	bf00      	nop

000c1360 <__aeabi_dcmpgt>:
   c1360:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1364:	f7ff ffc4 	bl	c12f0 <__aeabi_cdrcmple>
   c1368:	bf34      	ite	cc
   c136a:	2001      	movcc	r0, #1
   c136c:	2000      	movcs	r0, #0
   c136e:	f85d fb08 	ldr.w	pc, [sp], #8
   c1372:	bf00      	nop

000c1374 <__aeabi_d2uiz>:
   c1374:	004a      	lsls	r2, r1, #1
   c1376:	d211      	bcs.n	c139c <__aeabi_d2uiz+0x28>
   c1378:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c137c:	d211      	bcs.n	c13a2 <__aeabi_d2uiz+0x2e>
   c137e:	d50d      	bpl.n	c139c <__aeabi_d2uiz+0x28>
   c1380:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1384:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c1388:	d40e      	bmi.n	c13a8 <__aeabi_d2uiz+0x34>
   c138a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c1392:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c1396:	fa23 f002 	lsr.w	r0, r3, r2
   c139a:	4770      	bx	lr
   c139c:	f04f 0000 	mov.w	r0, #0
   c13a0:	4770      	bx	lr
   c13a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c13a6:	d102      	bne.n	c13ae <__aeabi_d2uiz+0x3a>
   c13a8:	f04f 30ff 	mov.w	r0, #4294967295
   c13ac:	4770      	bx	lr
   c13ae:	f04f 0000 	mov.w	r0, #0
   c13b2:	4770      	bx	lr

000c13b4 <__aeabi_d2f>:
   c13b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c13b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c13bc:	bf24      	itt	cs
   c13be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c13c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c13c6:	d90d      	bls.n	c13e4 <__aeabi_d2f+0x30>
   c13c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c13cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c13d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c13d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c13d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c13dc:	bf08      	it	eq
   c13de:	f020 0001 	biceq.w	r0, r0, #1
   c13e2:	4770      	bx	lr
   c13e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c13e8:	d121      	bne.n	c142e <__aeabi_d2f+0x7a>
   c13ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c13ee:	bfbc      	itt	lt
   c13f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c13f4:	4770      	bxlt	lr
   c13f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c13fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c13fe:	f1c2 0218 	rsb	r2, r2, #24
   c1402:	f1c2 0c20 	rsb	ip, r2, #32
   c1406:	fa10 f30c 	lsls.w	r3, r0, ip
   c140a:	fa20 f002 	lsr.w	r0, r0, r2
   c140e:	bf18      	it	ne
   c1410:	f040 0001 	orrne.w	r0, r0, #1
   c1414:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c1418:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c141c:	fa03 fc0c 	lsl.w	ip, r3, ip
   c1420:	ea40 000c 	orr.w	r0, r0, ip
   c1424:	fa23 f302 	lsr.w	r3, r3, r2
   c1428:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c142c:	e7cc      	b.n	c13c8 <__aeabi_d2f+0x14>
   c142e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c1432:	d107      	bne.n	c1444 <__aeabi_d2f+0x90>
   c1434:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c1438:	bf1e      	ittt	ne
   c143a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c143e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c1442:	4770      	bxne	lr
   c1444:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c1448:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c144c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c1450:	4770      	bx	lr
   c1452:	bf00      	nop

000c1454 <__aeabi_d2ulz>:
   c1454:	b5d0      	push	{r4, r6, r7, lr}
   c1456:	4b0c      	ldr	r3, [pc, #48]	; (c1488 <__aeabi_d2ulz+0x34>)
   c1458:	2200      	movs	r2, #0
   c145a:	4606      	mov	r6, r0
   c145c:	460f      	mov	r7, r1
   c145e:	f7ff fcef 	bl	c0e40 <__aeabi_dmul>
   c1462:	f7ff ff87 	bl	c1374 <__aeabi_d2uiz>
   c1466:	4604      	mov	r4, r0
   c1468:	f7ff fc70 	bl	c0d4c <__aeabi_ui2d>
   c146c:	4b07      	ldr	r3, [pc, #28]	; (c148c <__aeabi_d2ulz+0x38>)
   c146e:	2200      	movs	r2, #0
   c1470:	f7ff fce6 	bl	c0e40 <__aeabi_dmul>
   c1474:	4602      	mov	r2, r0
   c1476:	460b      	mov	r3, r1
   c1478:	4630      	mov	r0, r6
   c147a:	4639      	mov	r1, r7
   c147c:	f7ff fb28 	bl	c0ad0 <__aeabi_dsub>
   c1480:	f7ff ff78 	bl	c1374 <__aeabi_d2uiz>
   c1484:	4621      	mov	r1, r4
   c1486:	bdd0      	pop	{r4, r6, r7, pc}
   c1488:	3df00000 	.word	0x3df00000
   c148c:	41f00000 	.word	0x41f00000

000c1490 <atexit>:
   c1490:	2300      	movs	r3, #0
   c1492:	4601      	mov	r1, r0
   c1494:	461a      	mov	r2, r3
   c1496:	4618      	mov	r0, r3
   c1498:	f000 bff4 	b.w	c2484 <__register_exitproc>

000c149c <atof>:
   c149c:	2100      	movs	r1, #0
   c149e:	f000 bf59 	b.w	c2354 <strtod>

000c14a2 <atoi>:
   c14a2:	220a      	movs	r2, #10
   c14a4:	2100      	movs	r1, #0
   c14a6:	f000 bfe3 	b.w	c2470 <strtol>
	...

000c14ac <isprint>:
   c14ac:	4b02      	ldr	r3, [pc, #8]	; (c14b8 <isprint+0xc>)
   c14ae:	4418      	add	r0, r3
   c14b0:	7840      	ldrb	r0, [r0, #1]
   c14b2:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c14b6:	4770      	bx	lr
   c14b8:	000c5058 	.word	0x000c5058

000c14bc <memcmp>:
   c14bc:	b510      	push	{r4, lr}
   c14be:	3901      	subs	r1, #1
   c14c0:	4402      	add	r2, r0
   c14c2:	4290      	cmp	r0, r2
   c14c4:	d101      	bne.n	c14ca <memcmp+0xe>
   c14c6:	2000      	movs	r0, #0
   c14c8:	e005      	b.n	c14d6 <memcmp+0x1a>
   c14ca:	7803      	ldrb	r3, [r0, #0]
   c14cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c14d0:	42a3      	cmp	r3, r4
   c14d2:	d001      	beq.n	c14d8 <memcmp+0x1c>
   c14d4:	1b18      	subs	r0, r3, r4
   c14d6:	bd10      	pop	{r4, pc}
   c14d8:	3001      	adds	r0, #1
   c14da:	e7f2      	b.n	c14c2 <memcmp+0x6>

000c14dc <memcpy>:
   c14dc:	440a      	add	r2, r1
   c14de:	4291      	cmp	r1, r2
   c14e0:	f100 33ff 	add.w	r3, r0, #4294967295
   c14e4:	d100      	bne.n	c14e8 <memcpy+0xc>
   c14e6:	4770      	bx	lr
   c14e8:	b510      	push	{r4, lr}
   c14ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   c14ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   c14f2:	4291      	cmp	r1, r2
   c14f4:	d1f9      	bne.n	c14ea <memcpy+0xe>
   c14f6:	bd10      	pop	{r4, pc}

000c14f8 <memmove>:
   c14f8:	4288      	cmp	r0, r1
   c14fa:	b510      	push	{r4, lr}
   c14fc:	eb01 0402 	add.w	r4, r1, r2
   c1500:	d902      	bls.n	c1508 <memmove+0x10>
   c1502:	4284      	cmp	r4, r0
   c1504:	4623      	mov	r3, r4
   c1506:	d807      	bhi.n	c1518 <memmove+0x20>
   c1508:	1e43      	subs	r3, r0, #1
   c150a:	42a1      	cmp	r1, r4
   c150c:	d008      	beq.n	c1520 <memmove+0x28>
   c150e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c1512:	f803 2f01 	strb.w	r2, [r3, #1]!
   c1516:	e7f8      	b.n	c150a <memmove+0x12>
   c1518:	4402      	add	r2, r0
   c151a:	4601      	mov	r1, r0
   c151c:	428a      	cmp	r2, r1
   c151e:	d100      	bne.n	c1522 <memmove+0x2a>
   c1520:	bd10      	pop	{r4, pc}
   c1522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c1526:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c152a:	e7f7      	b.n	c151c <memmove+0x24>

000c152c <memset>:
   c152c:	4402      	add	r2, r0
   c152e:	4603      	mov	r3, r0
   c1530:	4293      	cmp	r3, r2
   c1532:	d100      	bne.n	c1536 <memset+0xa>
   c1534:	4770      	bx	lr
   c1536:	f803 1b01 	strb.w	r1, [r3], #1
   c153a:	e7f9      	b.n	c1530 <memset+0x4>

000c153c <srand>:
   c153c:	b538      	push	{r3, r4, r5, lr}
   c153e:	4b10      	ldr	r3, [pc, #64]	; (c1580 <srand+0x44>)
   c1540:	681d      	ldr	r5, [r3, #0]
   c1542:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c1544:	4604      	mov	r4, r0
   c1546:	b9b3      	cbnz	r3, c1576 <srand+0x3a>
   c1548:	2018      	movs	r0, #24
   c154a:	f7fb faaf 	bl	bcaac <malloc>
   c154e:	4602      	mov	r2, r0
   c1550:	63a8      	str	r0, [r5, #56]	; 0x38
   c1552:	b920      	cbnz	r0, c155e <srand+0x22>
   c1554:	4b0b      	ldr	r3, [pc, #44]	; (c1584 <srand+0x48>)
   c1556:	480c      	ldr	r0, [pc, #48]	; (c1588 <srand+0x4c>)
   c1558:	2142      	movs	r1, #66	; 0x42
   c155a:	f7fb faef 	bl	bcb3c <__assert_func>
   c155e:	490b      	ldr	r1, [pc, #44]	; (c158c <srand+0x50>)
   c1560:	4b0b      	ldr	r3, [pc, #44]	; (c1590 <srand+0x54>)
   c1562:	e9c0 1300 	strd	r1, r3, [r0]
   c1566:	4b0b      	ldr	r3, [pc, #44]	; (c1594 <srand+0x58>)
   c1568:	6083      	str	r3, [r0, #8]
   c156a:	230b      	movs	r3, #11
   c156c:	8183      	strh	r3, [r0, #12]
   c156e:	2100      	movs	r1, #0
   c1570:	2001      	movs	r0, #1
   c1572:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c1576:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c1578:	2200      	movs	r2, #0
   c157a:	611c      	str	r4, [r3, #16]
   c157c:	615a      	str	r2, [r3, #20]
   c157e:	bd38      	pop	{r3, r4, r5, pc}
   c1580:	2003dbf0 	.word	0x2003dbf0
   c1584:	000c4f65 	.word	0x000c4f65
   c1588:	000c4f7c 	.word	0x000c4f7c
   c158c:	abcd330e 	.word	0xabcd330e
   c1590:	e66d1234 	.word	0xe66d1234
   c1594:	0005deec 	.word	0x0005deec

000c1598 <strcat>:
   c1598:	b510      	push	{r4, lr}
   c159a:	4602      	mov	r2, r0
   c159c:	7814      	ldrb	r4, [r2, #0]
   c159e:	4613      	mov	r3, r2
   c15a0:	3201      	adds	r2, #1
   c15a2:	2c00      	cmp	r4, #0
   c15a4:	d1fa      	bne.n	c159c <strcat+0x4>
   c15a6:	3b01      	subs	r3, #1
   c15a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   c15ac:	f803 2f01 	strb.w	r2, [r3, #1]!
   c15b0:	2a00      	cmp	r2, #0
   c15b2:	d1f9      	bne.n	c15a8 <strcat+0x10>
   c15b4:	bd10      	pop	{r4, pc}

000c15b6 <strchr>:
   c15b6:	b2c9      	uxtb	r1, r1
   c15b8:	4603      	mov	r3, r0
   c15ba:	f810 2b01 	ldrb.w	r2, [r0], #1
   c15be:	b11a      	cbz	r2, c15c8 <strchr+0x12>
   c15c0:	428a      	cmp	r2, r1
   c15c2:	d1f9      	bne.n	c15b8 <strchr+0x2>
   c15c4:	4618      	mov	r0, r3
   c15c6:	4770      	bx	lr
   c15c8:	2900      	cmp	r1, #0
   c15ca:	bf18      	it	ne
   c15cc:	2300      	movne	r3, #0
   c15ce:	e7f9      	b.n	c15c4 <strchr+0xe>

000c15d0 <strchrnul>:
   c15d0:	b510      	push	{r4, lr}
   c15d2:	4604      	mov	r4, r0
   c15d4:	f7ff ffef 	bl	c15b6 <strchr>
   c15d8:	b918      	cbnz	r0, c15e2 <strchrnul+0x12>
   c15da:	4620      	mov	r0, r4
   c15dc:	f000 f831 	bl	c1642 <strlen>
   c15e0:	4420      	add	r0, r4
   c15e2:	bd10      	pop	{r4, pc}

000c15e4 <strcmp>:
   c15e4:	f810 2b01 	ldrb.w	r2, [r0], #1
   c15e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   c15ec:	2a01      	cmp	r2, #1
   c15ee:	bf28      	it	cs
   c15f0:	429a      	cmpcs	r2, r3
   c15f2:	d0f7      	beq.n	c15e4 <strcmp>
   c15f4:	1ad0      	subs	r0, r2, r3
   c15f6:	4770      	bx	lr

000c15f8 <strcpy>:
   c15f8:	4603      	mov	r3, r0
   c15fa:	f811 2b01 	ldrb.w	r2, [r1], #1
   c15fe:	f803 2b01 	strb.w	r2, [r3], #1
   c1602:	2a00      	cmp	r2, #0
   c1604:	d1f9      	bne.n	c15fa <strcpy+0x2>
   c1606:	4770      	bx	lr

000c1608 <strdup>:
   c1608:	4b02      	ldr	r3, [pc, #8]	; (c1614 <strdup+0xc>)
   c160a:	4601      	mov	r1, r0
   c160c:	6818      	ldr	r0, [r3, #0]
   c160e:	f000 b803 	b.w	c1618 <_strdup_r>
   c1612:	bf00      	nop
   c1614:	2003dbf0 	.word	0x2003dbf0

000c1618 <_strdup_r>:
   c1618:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c161a:	4604      	mov	r4, r0
   c161c:	4608      	mov	r0, r1
   c161e:	460d      	mov	r5, r1
   c1620:	f000 f80f 	bl	c1642 <strlen>
   c1624:	1c42      	adds	r2, r0, #1
   c1626:	4611      	mov	r1, r2
   c1628:	4620      	mov	r0, r4
   c162a:	9201      	str	r2, [sp, #4]
   c162c:	f7fb fa76 	bl	bcb1c <_malloc_r>
   c1630:	4604      	mov	r4, r0
   c1632:	b118      	cbz	r0, c163c <_strdup_r+0x24>
   c1634:	9a01      	ldr	r2, [sp, #4]
   c1636:	4629      	mov	r1, r5
   c1638:	f7ff ff50 	bl	c14dc <memcpy>
   c163c:	4620      	mov	r0, r4
   c163e:	b003      	add	sp, #12
   c1640:	bd30      	pop	{r4, r5, pc}

000c1642 <strlen>:
   c1642:	4603      	mov	r3, r0
   c1644:	f813 2b01 	ldrb.w	r2, [r3], #1
   c1648:	2a00      	cmp	r2, #0
   c164a:	d1fb      	bne.n	c1644 <strlen+0x2>
   c164c:	1a18      	subs	r0, r3, r0
   c164e:	3801      	subs	r0, #1
   c1650:	4770      	bx	lr
	...

000c1654 <strlwr>:
   c1654:	b510      	push	{r4, lr}
   c1656:	4c07      	ldr	r4, [pc, #28]	; (c1674 <strlwr+0x20>)
   c1658:	1e42      	subs	r2, r0, #1
   c165a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c165e:	b903      	cbnz	r3, c1662 <strlwr+0xe>
   c1660:	bd10      	pop	{r4, pc}
   c1662:	5ce1      	ldrb	r1, [r4, r3]
   c1664:	f001 0103 	and.w	r1, r1, #3
   c1668:	2901      	cmp	r1, #1
   c166a:	bf08      	it	eq
   c166c:	3320      	addeq	r3, #32
   c166e:	7013      	strb	r3, [r2, #0]
   c1670:	e7f3      	b.n	c165a <strlwr+0x6>
   c1672:	bf00      	nop
   c1674:	000c5059 	.word	0x000c5059

000c1678 <strncmp>:
   c1678:	b510      	push	{r4, lr}
   c167a:	b17a      	cbz	r2, c169c <strncmp+0x24>
   c167c:	4603      	mov	r3, r0
   c167e:	3901      	subs	r1, #1
   c1680:	1884      	adds	r4, r0, r2
   c1682:	f813 0b01 	ldrb.w	r0, [r3], #1
   c1686:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c168a:	4290      	cmp	r0, r2
   c168c:	d101      	bne.n	c1692 <strncmp+0x1a>
   c168e:	42a3      	cmp	r3, r4
   c1690:	d101      	bne.n	c1696 <strncmp+0x1e>
   c1692:	1a80      	subs	r0, r0, r2
   c1694:	bd10      	pop	{r4, pc}
   c1696:	2800      	cmp	r0, #0
   c1698:	d1f3      	bne.n	c1682 <strncmp+0xa>
   c169a:	e7fa      	b.n	c1692 <strncmp+0x1a>
   c169c:	4610      	mov	r0, r2
   c169e:	e7f9      	b.n	c1694 <strncmp+0x1c>

000c16a0 <strnlen>:
   c16a0:	b510      	push	{r4, lr}
   c16a2:	4602      	mov	r2, r0
   c16a4:	4401      	add	r1, r0
   c16a6:	428a      	cmp	r2, r1
   c16a8:	4613      	mov	r3, r2
   c16aa:	d003      	beq.n	c16b4 <strnlen+0x14>
   c16ac:	781c      	ldrb	r4, [r3, #0]
   c16ae:	3201      	adds	r2, #1
   c16b0:	2c00      	cmp	r4, #0
   c16b2:	d1f8      	bne.n	c16a6 <strnlen+0x6>
   c16b4:	1a18      	subs	r0, r3, r0
   c16b6:	bd10      	pop	{r4, pc}

000c16b8 <strrchr>:
   c16b8:	b538      	push	{r3, r4, r5, lr}
   c16ba:	4603      	mov	r3, r0
   c16bc:	460c      	mov	r4, r1
   c16be:	b969      	cbnz	r1, c16dc <strrchr+0x24>
   c16c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c16c4:	f7ff bf77 	b.w	c15b6 <strchr>
   c16c8:	1c43      	adds	r3, r0, #1
   c16ca:	4605      	mov	r5, r0
   c16cc:	4621      	mov	r1, r4
   c16ce:	4618      	mov	r0, r3
   c16d0:	f7ff ff71 	bl	c15b6 <strchr>
   c16d4:	2800      	cmp	r0, #0
   c16d6:	d1f7      	bne.n	c16c8 <strrchr+0x10>
   c16d8:	4628      	mov	r0, r5
   c16da:	bd38      	pop	{r3, r4, r5, pc}
   c16dc:	2500      	movs	r5, #0
   c16de:	e7f5      	b.n	c16cc <strrchr+0x14>

000c16e0 <strstr>:
   c16e0:	780a      	ldrb	r2, [r1, #0]
   c16e2:	b570      	push	{r4, r5, r6, lr}
   c16e4:	b96a      	cbnz	r2, c1702 <strstr+0x22>
   c16e6:	bd70      	pop	{r4, r5, r6, pc}
   c16e8:	429a      	cmp	r2, r3
   c16ea:	d109      	bne.n	c1700 <strstr+0x20>
   c16ec:	460c      	mov	r4, r1
   c16ee:	4605      	mov	r5, r0
   c16f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c16f4:	2b00      	cmp	r3, #0
   c16f6:	d0f6      	beq.n	c16e6 <strstr+0x6>
   c16f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c16fc:	429e      	cmp	r6, r3
   c16fe:	d0f7      	beq.n	c16f0 <strstr+0x10>
   c1700:	3001      	adds	r0, #1
   c1702:	7803      	ldrb	r3, [r0, #0]
   c1704:	2b00      	cmp	r3, #0
   c1706:	d1ef      	bne.n	c16e8 <strstr+0x8>
   c1708:	4618      	mov	r0, r3
   c170a:	e7ec      	b.n	c16e6 <strstr+0x6>

000c170c <sulp>:
   c170c:	b570      	push	{r4, r5, r6, lr}
   c170e:	4604      	mov	r4, r0
   c1710:	460d      	mov	r5, r1
   c1712:	ec45 4b10 	vmov	d0, r4, r5
   c1716:	4616      	mov	r6, r2
   c1718:	f001 fe0e 	bl	c3338 <__ulp>
   c171c:	ec51 0b10 	vmov	r0, r1, d0
   c1720:	b17e      	cbz	r6, c1742 <sulp+0x36>
   c1722:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c1726:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c172a:	2b00      	cmp	r3, #0
   c172c:	dd09      	ble.n	c1742 <sulp+0x36>
   c172e:	051b      	lsls	r3, r3, #20
   c1730:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c1734:	2400      	movs	r4, #0
   c1736:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c173a:	4622      	mov	r2, r4
   c173c:	462b      	mov	r3, r5
   c173e:	f7ff fb7f 	bl	c0e40 <__aeabi_dmul>
   c1742:	bd70      	pop	{r4, r5, r6, pc}
   c1744:	0000      	movs	r0, r0
	...

000c1748 <_strtod_l>:
   c1748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c174c:	ed2d 8b02 	vpush	{d8}
   c1750:	b09d      	sub	sp, #116	; 0x74
   c1752:	461f      	mov	r7, r3
   c1754:	2300      	movs	r3, #0
   c1756:	9318      	str	r3, [sp, #96]	; 0x60
   c1758:	4ba2      	ldr	r3, [pc, #648]	; (c19e4 <_strtod_l+0x29c>)
   c175a:	9213      	str	r2, [sp, #76]	; 0x4c
   c175c:	681b      	ldr	r3, [r3, #0]
   c175e:	9305      	str	r3, [sp, #20]
   c1760:	4604      	mov	r4, r0
   c1762:	4618      	mov	r0, r3
   c1764:	4688      	mov	r8, r1
   c1766:	f7ff ff6c 	bl	c1642 <strlen>
   c176a:	f04f 0a00 	mov.w	sl, #0
   c176e:	4605      	mov	r5, r0
   c1770:	f04f 0b00 	mov.w	fp, #0
   c1774:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c177a:	781a      	ldrb	r2, [r3, #0]
   c177c:	2a2b      	cmp	r2, #43	; 0x2b
   c177e:	d04e      	beq.n	c181e <_strtod_l+0xd6>
   c1780:	d83b      	bhi.n	c17fa <_strtod_l+0xb2>
   c1782:	2a0d      	cmp	r2, #13
   c1784:	d834      	bhi.n	c17f0 <_strtod_l+0xa8>
   c1786:	2a08      	cmp	r2, #8
   c1788:	d834      	bhi.n	c17f4 <_strtod_l+0xac>
   c178a:	2a00      	cmp	r2, #0
   c178c:	d03e      	beq.n	c180c <_strtod_l+0xc4>
   c178e:	2300      	movs	r3, #0
   c1790:	930a      	str	r3, [sp, #40]	; 0x28
   c1792:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c1794:	7833      	ldrb	r3, [r6, #0]
   c1796:	2b30      	cmp	r3, #48	; 0x30
   c1798:	f040 80b0 	bne.w	c18fc <_strtod_l+0x1b4>
   c179c:	7873      	ldrb	r3, [r6, #1]
   c179e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c17a2:	2b58      	cmp	r3, #88	; 0x58
   c17a4:	d168      	bne.n	c1878 <_strtod_l+0x130>
   c17a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c17a8:	9301      	str	r3, [sp, #4]
   c17aa:	ab18      	add	r3, sp, #96	; 0x60
   c17ac:	9702      	str	r7, [sp, #8]
   c17ae:	9300      	str	r3, [sp, #0]
   c17b0:	4a8d      	ldr	r2, [pc, #564]	; (c19e8 <_strtod_l+0x2a0>)
   c17b2:	ab19      	add	r3, sp, #100	; 0x64
   c17b4:	a917      	add	r1, sp, #92	; 0x5c
   c17b6:	4620      	mov	r0, r4
   c17b8:	f000 ff2e 	bl	c2618 <__gethex>
   c17bc:	f010 0707 	ands.w	r7, r0, #7
   c17c0:	4605      	mov	r5, r0
   c17c2:	d005      	beq.n	c17d0 <_strtod_l+0x88>
   c17c4:	2f06      	cmp	r7, #6
   c17c6:	d12c      	bne.n	c1822 <_strtod_l+0xda>
   c17c8:	3601      	adds	r6, #1
   c17ca:	2300      	movs	r3, #0
   c17cc:	9617      	str	r6, [sp, #92]	; 0x5c
   c17ce:	930a      	str	r3, [sp, #40]	; 0x28
   c17d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c17d2:	2b00      	cmp	r3, #0
   c17d4:	f040 8590 	bne.w	c22f8 <_strtod_l+0xbb0>
   c17d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c17da:	b1eb      	cbz	r3, c1818 <_strtod_l+0xd0>
   c17dc:	4652      	mov	r2, sl
   c17de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c17e2:	ec43 2b10 	vmov	d0, r2, r3
   c17e6:	b01d      	add	sp, #116	; 0x74
   c17e8:	ecbd 8b02 	vpop	{d8}
   c17ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c17f0:	2a20      	cmp	r2, #32
   c17f2:	d1cc      	bne.n	c178e <_strtod_l+0x46>
   c17f4:	3301      	adds	r3, #1
   c17f6:	9317      	str	r3, [sp, #92]	; 0x5c
   c17f8:	e7be      	b.n	c1778 <_strtod_l+0x30>
   c17fa:	2a2d      	cmp	r2, #45	; 0x2d
   c17fc:	d1c7      	bne.n	c178e <_strtod_l+0x46>
   c17fe:	2201      	movs	r2, #1
   c1800:	920a      	str	r2, [sp, #40]	; 0x28
   c1802:	1c5a      	adds	r2, r3, #1
   c1804:	9217      	str	r2, [sp, #92]	; 0x5c
   c1806:	785b      	ldrb	r3, [r3, #1]
   c1808:	2b00      	cmp	r3, #0
   c180a:	d1c2      	bne.n	c1792 <_strtod_l+0x4a>
   c180c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c180e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1812:	2b00      	cmp	r3, #0
   c1814:	f040 856e 	bne.w	c22f4 <_strtod_l+0xbac>
   c1818:	4652      	mov	r2, sl
   c181a:	465b      	mov	r3, fp
   c181c:	e7e1      	b.n	c17e2 <_strtod_l+0x9a>
   c181e:	2200      	movs	r2, #0
   c1820:	e7ee      	b.n	c1800 <_strtod_l+0xb8>
   c1822:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1824:	b13a      	cbz	r2, c1836 <_strtod_l+0xee>
   c1826:	2135      	movs	r1, #53	; 0x35
   c1828:	a81a      	add	r0, sp, #104	; 0x68
   c182a:	f001 fe90 	bl	c354e <__copybits>
   c182e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1830:	4620      	mov	r0, r4
   c1832:	f001 fa4f 	bl	c2cd4 <_Bfree>
   c1836:	3f01      	subs	r7, #1
   c1838:	2f04      	cmp	r7, #4
   c183a:	d806      	bhi.n	c184a <_strtod_l+0x102>
   c183c:	e8df f007 	tbb	[pc, r7]
   c1840:	1714030a 	.word	0x1714030a
   c1844:	0a          	.byte	0x0a
   c1845:	00          	.byte	0x00
   c1846:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c184a:	0728      	lsls	r0, r5, #28
   c184c:	d5c0      	bpl.n	c17d0 <_strtod_l+0x88>
   c184e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c1852:	e7bd      	b.n	c17d0 <_strtod_l+0x88>
   c1854:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c1858:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c185a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c185e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c1862:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c1866:	e7f0      	b.n	c184a <_strtod_l+0x102>
   c1868:	f8df b180 	ldr.w	fp, [pc, #384]	; c19ec <_strtod_l+0x2a4>
   c186c:	e7ed      	b.n	c184a <_strtod_l+0x102>
   c186e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c1872:	f04f 3aff 	mov.w	sl, #4294967295
   c1876:	e7e8      	b.n	c184a <_strtod_l+0x102>
   c1878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c187a:	1c5a      	adds	r2, r3, #1
   c187c:	9217      	str	r2, [sp, #92]	; 0x5c
   c187e:	785b      	ldrb	r3, [r3, #1]
   c1880:	2b30      	cmp	r3, #48	; 0x30
   c1882:	d0f9      	beq.n	c1878 <_strtod_l+0x130>
   c1884:	2b00      	cmp	r3, #0
   c1886:	d0a3      	beq.n	c17d0 <_strtod_l+0x88>
   c1888:	2301      	movs	r3, #1
   c188a:	f04f 0900 	mov.w	r9, #0
   c188e:	9304      	str	r3, [sp, #16]
   c1890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1892:	9308      	str	r3, [sp, #32]
   c1894:	f8cd 901c 	str.w	r9, [sp, #28]
   c1898:	464f      	mov	r7, r9
   c189a:	220a      	movs	r2, #10
   c189c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c189e:	7806      	ldrb	r6, [r0, #0]
   c18a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c18a4:	b2d9      	uxtb	r1, r3
   c18a6:	2909      	cmp	r1, #9
   c18a8:	d92a      	bls.n	c1900 <_strtod_l+0x1b8>
   c18aa:	9905      	ldr	r1, [sp, #20]
   c18ac:	462a      	mov	r2, r5
   c18ae:	f7ff fee3 	bl	c1678 <strncmp>
   c18b2:	b398      	cbz	r0, c191c <_strtod_l+0x1d4>
   c18b4:	2000      	movs	r0, #0
   c18b6:	4632      	mov	r2, r6
   c18b8:	463d      	mov	r5, r7
   c18ba:	9005      	str	r0, [sp, #20]
   c18bc:	4603      	mov	r3, r0
   c18be:	2a65      	cmp	r2, #101	; 0x65
   c18c0:	d001      	beq.n	c18c6 <_strtod_l+0x17e>
   c18c2:	2a45      	cmp	r2, #69	; 0x45
   c18c4:	d118      	bne.n	c18f8 <_strtod_l+0x1b0>
   c18c6:	b91d      	cbnz	r5, c18d0 <_strtod_l+0x188>
   c18c8:	9a04      	ldr	r2, [sp, #16]
   c18ca:	4302      	orrs	r2, r0
   c18cc:	d09e      	beq.n	c180c <_strtod_l+0xc4>
   c18ce:	2500      	movs	r5, #0
   c18d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c18d4:	f108 0201 	add.w	r2, r8, #1
   c18d8:	9217      	str	r2, [sp, #92]	; 0x5c
   c18da:	f898 2001 	ldrb.w	r2, [r8, #1]
   c18de:	2a2b      	cmp	r2, #43	; 0x2b
   c18e0:	d075      	beq.n	c19ce <_strtod_l+0x286>
   c18e2:	2a2d      	cmp	r2, #45	; 0x2d
   c18e4:	d07b      	beq.n	c19de <_strtod_l+0x296>
   c18e6:	f04f 0c00 	mov.w	ip, #0
   c18ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c18ee:	2909      	cmp	r1, #9
   c18f0:	f240 8082 	bls.w	c19f8 <_strtod_l+0x2b0>
   c18f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c18f8:	2600      	movs	r6, #0
   c18fa:	e09d      	b.n	c1a38 <_strtod_l+0x2f0>
   c18fc:	2300      	movs	r3, #0
   c18fe:	e7c4      	b.n	c188a <_strtod_l+0x142>
   c1900:	2f08      	cmp	r7, #8
   c1902:	bfd8      	it	le
   c1904:	9907      	ldrle	r1, [sp, #28]
   c1906:	f100 0001 	add.w	r0, r0, #1
   c190a:	bfda      	itte	le
   c190c:	fb02 3301 	mlale	r3, r2, r1, r3
   c1910:	9307      	strle	r3, [sp, #28]
   c1912:	fb02 3909 	mlagt	r9, r2, r9, r3
   c1916:	3701      	adds	r7, #1
   c1918:	9017      	str	r0, [sp, #92]	; 0x5c
   c191a:	e7bf      	b.n	c189c <_strtod_l+0x154>
   c191c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c191e:	195a      	adds	r2, r3, r5
   c1920:	9217      	str	r2, [sp, #92]	; 0x5c
   c1922:	5d5a      	ldrb	r2, [r3, r5]
   c1924:	2f00      	cmp	r7, #0
   c1926:	d037      	beq.n	c1998 <_strtod_l+0x250>
   c1928:	9005      	str	r0, [sp, #20]
   c192a:	463d      	mov	r5, r7
   c192c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c1930:	2b09      	cmp	r3, #9
   c1932:	d912      	bls.n	c195a <_strtod_l+0x212>
   c1934:	2301      	movs	r3, #1
   c1936:	e7c2      	b.n	c18be <_strtod_l+0x176>
   c1938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c193a:	1c5a      	adds	r2, r3, #1
   c193c:	9217      	str	r2, [sp, #92]	; 0x5c
   c193e:	785a      	ldrb	r2, [r3, #1]
   c1940:	3001      	adds	r0, #1
   c1942:	2a30      	cmp	r2, #48	; 0x30
   c1944:	d0f8      	beq.n	c1938 <_strtod_l+0x1f0>
   c1946:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c194a:	2b08      	cmp	r3, #8
   c194c:	f200 84d9 	bhi.w	c2302 <_strtod_l+0xbba>
   c1950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1952:	9005      	str	r0, [sp, #20]
   c1954:	2000      	movs	r0, #0
   c1956:	9308      	str	r3, [sp, #32]
   c1958:	4605      	mov	r5, r0
   c195a:	3a30      	subs	r2, #48	; 0x30
   c195c:	f100 0301 	add.w	r3, r0, #1
   c1960:	d014      	beq.n	c198c <_strtod_l+0x244>
   c1962:	9905      	ldr	r1, [sp, #20]
   c1964:	4419      	add	r1, r3
   c1966:	9105      	str	r1, [sp, #20]
   c1968:	462b      	mov	r3, r5
   c196a:	eb00 0e05 	add.w	lr, r0, r5
   c196e:	210a      	movs	r1, #10
   c1970:	4573      	cmp	r3, lr
   c1972:	d113      	bne.n	c199c <_strtod_l+0x254>
   c1974:	182b      	adds	r3, r5, r0
   c1976:	2b08      	cmp	r3, #8
   c1978:	f105 0501 	add.w	r5, r5, #1
   c197c:	4405      	add	r5, r0
   c197e:	dc1c      	bgt.n	c19ba <_strtod_l+0x272>
   c1980:	9907      	ldr	r1, [sp, #28]
   c1982:	230a      	movs	r3, #10
   c1984:	fb03 2301 	mla	r3, r3, r1, r2
   c1988:	9307      	str	r3, [sp, #28]
   c198a:	2300      	movs	r3, #0
   c198c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c198e:	1c51      	adds	r1, r2, #1
   c1990:	9117      	str	r1, [sp, #92]	; 0x5c
   c1992:	7852      	ldrb	r2, [r2, #1]
   c1994:	4618      	mov	r0, r3
   c1996:	e7c9      	b.n	c192c <_strtod_l+0x1e4>
   c1998:	4638      	mov	r0, r7
   c199a:	e7d2      	b.n	c1942 <_strtod_l+0x1fa>
   c199c:	2b08      	cmp	r3, #8
   c199e:	dc04      	bgt.n	c19aa <_strtod_l+0x262>
   c19a0:	9e07      	ldr	r6, [sp, #28]
   c19a2:	434e      	muls	r6, r1
   c19a4:	9607      	str	r6, [sp, #28]
   c19a6:	3301      	adds	r3, #1
   c19a8:	e7e2      	b.n	c1970 <_strtod_l+0x228>
   c19aa:	f103 0c01 	add.w	ip, r3, #1
   c19ae:	f1bc 0f10 	cmp.w	ip, #16
   c19b2:	bfd8      	it	le
   c19b4:	fb01 f909 	mulle.w	r9, r1, r9
   c19b8:	e7f5      	b.n	c19a6 <_strtod_l+0x25e>
   c19ba:	2d10      	cmp	r5, #16
   c19bc:	bfdc      	itt	le
   c19be:	230a      	movle	r3, #10
   c19c0:	fb03 2909 	mlale	r9, r3, r9, r2
   c19c4:	e7e1      	b.n	c198a <_strtod_l+0x242>
   c19c6:	2300      	movs	r3, #0
   c19c8:	9305      	str	r3, [sp, #20]
   c19ca:	2301      	movs	r3, #1
   c19cc:	e77c      	b.n	c18c8 <_strtod_l+0x180>
   c19ce:	f04f 0c00 	mov.w	ip, #0
   c19d2:	f108 0202 	add.w	r2, r8, #2
   c19d6:	9217      	str	r2, [sp, #92]	; 0x5c
   c19d8:	f898 2002 	ldrb.w	r2, [r8, #2]
   c19dc:	e785      	b.n	c18ea <_strtod_l+0x1a2>
   c19de:	f04f 0c01 	mov.w	ip, #1
   c19e2:	e7f6      	b.n	c19d2 <_strtod_l+0x28a>
   c19e4:	000c51f0 	.word	0x000c51f0
   c19e8:	000c5008 	.word	0x000c5008
   c19ec:	7ff00000 	.word	0x7ff00000
   c19f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c19f2:	1c51      	adds	r1, r2, #1
   c19f4:	9117      	str	r1, [sp, #92]	; 0x5c
   c19f6:	7852      	ldrb	r2, [r2, #1]
   c19f8:	2a30      	cmp	r2, #48	; 0x30
   c19fa:	d0f9      	beq.n	c19f0 <_strtod_l+0x2a8>
   c19fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c1a00:	2908      	cmp	r1, #8
   c1a02:	f63f af79 	bhi.w	c18f8 <_strtod_l+0x1b0>
   c1a06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c1a0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1a0c:	9206      	str	r2, [sp, #24]
   c1a0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1a10:	1c51      	adds	r1, r2, #1
   c1a12:	9117      	str	r1, [sp, #92]	; 0x5c
   c1a14:	7852      	ldrb	r2, [r2, #1]
   c1a16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c1a1a:	2e09      	cmp	r6, #9
   c1a1c:	d937      	bls.n	c1a8e <_strtod_l+0x346>
   c1a1e:	9e06      	ldr	r6, [sp, #24]
   c1a20:	1b89      	subs	r1, r1, r6
   c1a22:	2908      	cmp	r1, #8
   c1a24:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c1a28:	dc02      	bgt.n	c1a30 <_strtod_l+0x2e8>
   c1a2a:	4576      	cmp	r6, lr
   c1a2c:	bfa8      	it	ge
   c1a2e:	4676      	movge	r6, lr
   c1a30:	f1bc 0f00 	cmp.w	ip, #0
   c1a34:	d000      	beq.n	c1a38 <_strtod_l+0x2f0>
   c1a36:	4276      	negs	r6, r6
   c1a38:	2d00      	cmp	r5, #0
   c1a3a:	d14d      	bne.n	c1ad8 <_strtod_l+0x390>
   c1a3c:	9904      	ldr	r1, [sp, #16]
   c1a3e:	4301      	orrs	r1, r0
   c1a40:	f47f aec6 	bne.w	c17d0 <_strtod_l+0x88>
   c1a44:	2b00      	cmp	r3, #0
   c1a46:	f47f aee1 	bne.w	c180c <_strtod_l+0xc4>
   c1a4a:	2a69      	cmp	r2, #105	; 0x69
   c1a4c:	d027      	beq.n	c1a9e <_strtod_l+0x356>
   c1a4e:	dc24      	bgt.n	c1a9a <_strtod_l+0x352>
   c1a50:	2a49      	cmp	r2, #73	; 0x49
   c1a52:	d024      	beq.n	c1a9e <_strtod_l+0x356>
   c1a54:	2a4e      	cmp	r2, #78	; 0x4e
   c1a56:	f47f aed9 	bne.w	c180c <_strtod_l+0xc4>
   c1a5a:	499f      	ldr	r1, [pc, #636]	; (c1cd8 <_strtod_l+0x590>)
   c1a5c:	a817      	add	r0, sp, #92	; 0x5c
   c1a5e:	f001 f833 	bl	c2ac8 <__match>
   c1a62:	2800      	cmp	r0, #0
   c1a64:	f43f aed2 	beq.w	c180c <_strtod_l+0xc4>
   c1a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1a6a:	781b      	ldrb	r3, [r3, #0]
   c1a6c:	2b28      	cmp	r3, #40	; 0x28
   c1a6e:	d12d      	bne.n	c1acc <_strtod_l+0x384>
   c1a70:	499a      	ldr	r1, [pc, #616]	; (c1cdc <_strtod_l+0x594>)
   c1a72:	aa1a      	add	r2, sp, #104	; 0x68
   c1a74:	a817      	add	r0, sp, #92	; 0x5c
   c1a76:	f001 f83b 	bl	c2af0 <__hexnan>
   c1a7a:	2805      	cmp	r0, #5
   c1a7c:	d126      	bne.n	c1acc <_strtod_l+0x384>
   c1a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c1a80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c1a84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c1a88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c1a8c:	e6a0      	b.n	c17d0 <_strtod_l+0x88>
   c1a8e:	210a      	movs	r1, #10
   c1a90:	fb01 2e0e 	mla	lr, r1, lr, r2
   c1a94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c1a98:	e7b9      	b.n	c1a0e <_strtod_l+0x2c6>
   c1a9a:	2a6e      	cmp	r2, #110	; 0x6e
   c1a9c:	e7db      	b.n	c1a56 <_strtod_l+0x30e>
   c1a9e:	4990      	ldr	r1, [pc, #576]	; (c1ce0 <_strtod_l+0x598>)
   c1aa0:	a817      	add	r0, sp, #92	; 0x5c
   c1aa2:	f001 f811 	bl	c2ac8 <__match>
   c1aa6:	2800      	cmp	r0, #0
   c1aa8:	f43f aeb0 	beq.w	c180c <_strtod_l+0xc4>
   c1aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1aae:	498d      	ldr	r1, [pc, #564]	; (c1ce4 <_strtod_l+0x59c>)
   c1ab0:	3b01      	subs	r3, #1
   c1ab2:	a817      	add	r0, sp, #92	; 0x5c
   c1ab4:	9317      	str	r3, [sp, #92]	; 0x5c
   c1ab6:	f001 f807 	bl	c2ac8 <__match>
   c1aba:	b910      	cbnz	r0, c1ac2 <_strtod_l+0x37a>
   c1abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1abe:	3301      	adds	r3, #1
   c1ac0:	9317      	str	r3, [sp, #92]	; 0x5c
   c1ac2:	f8df b230 	ldr.w	fp, [pc, #560]	; c1cf4 <_strtod_l+0x5ac>
   c1ac6:	f04f 0a00 	mov.w	sl, #0
   c1aca:	e681      	b.n	c17d0 <_strtod_l+0x88>
   c1acc:	4886      	ldr	r0, [pc, #536]	; (c1ce8 <_strtod_l+0x5a0>)
   c1ace:	f001 fd93 	bl	c35f8 <nan>
   c1ad2:	ec5b ab10 	vmov	sl, fp, d0
   c1ad6:	e67b      	b.n	c17d0 <_strtod_l+0x88>
   c1ad8:	9b05      	ldr	r3, [sp, #20]
   c1ada:	9807      	ldr	r0, [sp, #28]
   c1adc:	1af3      	subs	r3, r6, r3
   c1ade:	2f00      	cmp	r7, #0
   c1ae0:	bf08      	it	eq
   c1ae2:	462f      	moveq	r7, r5
   c1ae4:	2d10      	cmp	r5, #16
   c1ae6:	9306      	str	r3, [sp, #24]
   c1ae8:	46a8      	mov	r8, r5
   c1aea:	bfa8      	it	ge
   c1aec:	f04f 0810 	movge.w	r8, #16
   c1af0:	f7ff f92c 	bl	c0d4c <__aeabi_ui2d>
   c1af4:	2d09      	cmp	r5, #9
   c1af6:	4682      	mov	sl, r0
   c1af8:	468b      	mov	fp, r1
   c1afa:	dd13      	ble.n	c1b24 <_strtod_l+0x3dc>
   c1afc:	4b7b      	ldr	r3, [pc, #492]	; (c1cec <_strtod_l+0x5a4>)
   c1afe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c1b02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c1b06:	f7ff f99b 	bl	c0e40 <__aeabi_dmul>
   c1b0a:	4682      	mov	sl, r0
   c1b0c:	4648      	mov	r0, r9
   c1b0e:	468b      	mov	fp, r1
   c1b10:	f7ff f91c 	bl	c0d4c <__aeabi_ui2d>
   c1b14:	4602      	mov	r2, r0
   c1b16:	460b      	mov	r3, r1
   c1b18:	4650      	mov	r0, sl
   c1b1a:	4659      	mov	r1, fp
   c1b1c:	f7fe ffda 	bl	c0ad4 <__adddf3>
   c1b20:	4682      	mov	sl, r0
   c1b22:	468b      	mov	fp, r1
   c1b24:	2d0f      	cmp	r5, #15
   c1b26:	dc38      	bgt.n	c1b9a <_strtod_l+0x452>
   c1b28:	9b06      	ldr	r3, [sp, #24]
   c1b2a:	2b00      	cmp	r3, #0
   c1b2c:	f43f ae50 	beq.w	c17d0 <_strtod_l+0x88>
   c1b30:	dd24      	ble.n	c1b7c <_strtod_l+0x434>
   c1b32:	2b16      	cmp	r3, #22
   c1b34:	dc0b      	bgt.n	c1b4e <_strtod_l+0x406>
   c1b36:	496d      	ldr	r1, [pc, #436]	; (c1cec <_strtod_l+0x5a4>)
   c1b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c1b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1b40:	4652      	mov	r2, sl
   c1b42:	465b      	mov	r3, fp
   c1b44:	f7ff f97c 	bl	c0e40 <__aeabi_dmul>
   c1b48:	4682      	mov	sl, r0
   c1b4a:	468b      	mov	fp, r1
   c1b4c:	e640      	b.n	c17d0 <_strtod_l+0x88>
   c1b4e:	9a06      	ldr	r2, [sp, #24]
   c1b50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c1b54:	4293      	cmp	r3, r2
   c1b56:	db20      	blt.n	c1b9a <_strtod_l+0x452>
   c1b58:	4c64      	ldr	r4, [pc, #400]	; (c1cec <_strtod_l+0x5a4>)
   c1b5a:	f1c5 050f 	rsb	r5, r5, #15
   c1b5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c1b62:	4652      	mov	r2, sl
   c1b64:	465b      	mov	r3, fp
   c1b66:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1b6a:	f7ff f969 	bl	c0e40 <__aeabi_dmul>
   c1b6e:	9b06      	ldr	r3, [sp, #24]
   c1b70:	1b5d      	subs	r5, r3, r5
   c1b72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c1b76:	e9d4 2300 	ldrd	r2, r3, [r4]
   c1b7a:	e7e3      	b.n	c1b44 <_strtod_l+0x3fc>
   c1b7c:	9b06      	ldr	r3, [sp, #24]
   c1b7e:	3316      	adds	r3, #22
   c1b80:	db0b      	blt.n	c1b9a <_strtod_l+0x452>
   c1b82:	9b05      	ldr	r3, [sp, #20]
   c1b84:	1b9e      	subs	r6, r3, r6
   c1b86:	4b59      	ldr	r3, [pc, #356]	; (c1cec <_strtod_l+0x5a4>)
   c1b88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c1b8c:	e9d6 2300 	ldrd	r2, r3, [r6]
   c1b90:	4650      	mov	r0, sl
   c1b92:	4659      	mov	r1, fp
   c1b94:	f7ff fa7e 	bl	c1094 <__aeabi_ddiv>
   c1b98:	e7d6      	b.n	c1b48 <_strtod_l+0x400>
   c1b9a:	9b06      	ldr	r3, [sp, #24]
   c1b9c:	eba5 0808 	sub.w	r8, r5, r8
   c1ba0:	4498      	add	r8, r3
   c1ba2:	f1b8 0f00 	cmp.w	r8, #0
   c1ba6:	dd74      	ble.n	c1c92 <_strtod_l+0x54a>
   c1ba8:	f018 030f 	ands.w	r3, r8, #15
   c1bac:	d00a      	beq.n	c1bc4 <_strtod_l+0x47c>
   c1bae:	494f      	ldr	r1, [pc, #316]	; (c1cec <_strtod_l+0x5a4>)
   c1bb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c1bb4:	4652      	mov	r2, sl
   c1bb6:	465b      	mov	r3, fp
   c1bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1bbc:	f7ff f940 	bl	c0e40 <__aeabi_dmul>
   c1bc0:	4682      	mov	sl, r0
   c1bc2:	468b      	mov	fp, r1
   c1bc4:	f038 080f 	bics.w	r8, r8, #15
   c1bc8:	d04f      	beq.n	c1c6a <_strtod_l+0x522>
   c1bca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c1bce:	dd22      	ble.n	c1c16 <_strtod_l+0x4ce>
   c1bd0:	2500      	movs	r5, #0
   c1bd2:	462e      	mov	r6, r5
   c1bd4:	9507      	str	r5, [sp, #28]
   c1bd6:	9505      	str	r5, [sp, #20]
   c1bd8:	2322      	movs	r3, #34	; 0x22
   c1bda:	f8df b118 	ldr.w	fp, [pc, #280]	; c1cf4 <_strtod_l+0x5ac>
   c1bde:	6023      	str	r3, [r4, #0]
   c1be0:	f04f 0a00 	mov.w	sl, #0
   c1be4:	9b07      	ldr	r3, [sp, #28]
   c1be6:	2b00      	cmp	r3, #0
   c1be8:	f43f adf2 	beq.w	c17d0 <_strtod_l+0x88>
   c1bec:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1bee:	4620      	mov	r0, r4
   c1bf0:	f001 f870 	bl	c2cd4 <_Bfree>
   c1bf4:	9905      	ldr	r1, [sp, #20]
   c1bf6:	4620      	mov	r0, r4
   c1bf8:	f001 f86c 	bl	c2cd4 <_Bfree>
   c1bfc:	4631      	mov	r1, r6
   c1bfe:	4620      	mov	r0, r4
   c1c00:	f001 f868 	bl	c2cd4 <_Bfree>
   c1c04:	9907      	ldr	r1, [sp, #28]
   c1c06:	4620      	mov	r0, r4
   c1c08:	f001 f864 	bl	c2cd4 <_Bfree>
   c1c0c:	4629      	mov	r1, r5
   c1c0e:	4620      	mov	r0, r4
   c1c10:	f001 f860 	bl	c2cd4 <_Bfree>
   c1c14:	e5dc      	b.n	c17d0 <_strtod_l+0x88>
   c1c16:	4b36      	ldr	r3, [pc, #216]	; (c1cf0 <_strtod_l+0x5a8>)
   c1c18:	9304      	str	r3, [sp, #16]
   c1c1a:	2300      	movs	r3, #0
   c1c1c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c1c20:	4650      	mov	r0, sl
   c1c22:	4659      	mov	r1, fp
   c1c24:	4699      	mov	r9, r3
   c1c26:	f1b8 0f01 	cmp.w	r8, #1
   c1c2a:	dc21      	bgt.n	c1c70 <_strtod_l+0x528>
   c1c2c:	b10b      	cbz	r3, c1c32 <_strtod_l+0x4ea>
   c1c2e:	4682      	mov	sl, r0
   c1c30:	468b      	mov	fp, r1
   c1c32:	4b2f      	ldr	r3, [pc, #188]	; (c1cf0 <_strtod_l+0x5a8>)
   c1c34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c1c38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c1c3c:	4652      	mov	r2, sl
   c1c3e:	465b      	mov	r3, fp
   c1c40:	e9d9 0100 	ldrd	r0, r1, [r9]
   c1c44:	f7ff f8fc 	bl	c0e40 <__aeabi_dmul>
   c1c48:	4b2a      	ldr	r3, [pc, #168]	; (c1cf4 <_strtod_l+0x5ac>)
   c1c4a:	460a      	mov	r2, r1
   c1c4c:	400b      	ands	r3, r1
   c1c4e:	492a      	ldr	r1, [pc, #168]	; (c1cf8 <_strtod_l+0x5b0>)
   c1c50:	428b      	cmp	r3, r1
   c1c52:	4682      	mov	sl, r0
   c1c54:	d8bc      	bhi.n	c1bd0 <_strtod_l+0x488>
   c1c56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c1c5a:	428b      	cmp	r3, r1
   c1c5c:	bf86      	itte	hi
   c1c5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c1cfc <_strtod_l+0x5b4>
   c1c62:	f04f 3aff 	movhi.w	sl, #4294967295
   c1c66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c1c6a:	2300      	movs	r3, #0
   c1c6c:	9304      	str	r3, [sp, #16]
   c1c6e:	e084      	b.n	c1d7a <_strtod_l+0x632>
   c1c70:	f018 0f01 	tst.w	r8, #1
   c1c74:	d005      	beq.n	c1c82 <_strtod_l+0x53a>
   c1c76:	9b04      	ldr	r3, [sp, #16]
   c1c78:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1c7c:	f7ff f8e0 	bl	c0e40 <__aeabi_dmul>
   c1c80:	2301      	movs	r3, #1
   c1c82:	9a04      	ldr	r2, [sp, #16]
   c1c84:	3208      	adds	r2, #8
   c1c86:	f109 0901 	add.w	r9, r9, #1
   c1c8a:	ea4f 0868 	mov.w	r8, r8, asr #1
   c1c8e:	9204      	str	r2, [sp, #16]
   c1c90:	e7c9      	b.n	c1c26 <_strtod_l+0x4de>
   c1c92:	d0ea      	beq.n	c1c6a <_strtod_l+0x522>
   c1c94:	f1c8 0800 	rsb	r8, r8, #0
   c1c98:	f018 020f 	ands.w	r2, r8, #15
   c1c9c:	d00a      	beq.n	c1cb4 <_strtod_l+0x56c>
   c1c9e:	4b13      	ldr	r3, [pc, #76]	; (c1cec <_strtod_l+0x5a4>)
   c1ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c1ca4:	4650      	mov	r0, sl
   c1ca6:	4659      	mov	r1, fp
   c1ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1cac:	f7ff f9f2 	bl	c1094 <__aeabi_ddiv>
   c1cb0:	4682      	mov	sl, r0
   c1cb2:	468b      	mov	fp, r1
   c1cb4:	ea5f 1828 	movs.w	r8, r8, asr #4
   c1cb8:	d0d7      	beq.n	c1c6a <_strtod_l+0x522>
   c1cba:	f1b8 0f1f 	cmp.w	r8, #31
   c1cbe:	dd1f      	ble.n	c1d00 <_strtod_l+0x5b8>
   c1cc0:	2500      	movs	r5, #0
   c1cc2:	462e      	mov	r6, r5
   c1cc4:	9507      	str	r5, [sp, #28]
   c1cc6:	9505      	str	r5, [sp, #20]
   c1cc8:	2322      	movs	r3, #34	; 0x22
   c1cca:	f04f 0a00 	mov.w	sl, #0
   c1cce:	f04f 0b00 	mov.w	fp, #0
   c1cd2:	6023      	str	r3, [r4, #0]
   c1cd4:	e786      	b.n	c1be4 <_strtod_l+0x49c>
   c1cd6:	bf00      	nop
   c1cd8:	000c5002 	.word	0x000c5002
   c1cdc:	000c501c 	.word	0x000c501c
   c1ce0:	000c4ff9 	.word	0x000c4ff9
   c1ce4:	000c4ffc 	.word	0x000c4ffc
   c1ce8:	000c4c8c 	.word	0x000c4c8c
   c1cec:	000c52a8 	.word	0x000c52a8
   c1cf0:	000c5280 	.word	0x000c5280
   c1cf4:	7ff00000 	.word	0x7ff00000
   c1cf8:	7ca00000 	.word	0x7ca00000
   c1cfc:	7fefffff 	.word	0x7fefffff
   c1d00:	f018 0310 	ands.w	r3, r8, #16
   c1d04:	bf18      	it	ne
   c1d06:	236a      	movne	r3, #106	; 0x6a
   c1d08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c20b8 <_strtod_l+0x970>
   c1d0c:	9304      	str	r3, [sp, #16]
   c1d0e:	4650      	mov	r0, sl
   c1d10:	4659      	mov	r1, fp
   c1d12:	2300      	movs	r3, #0
   c1d14:	f018 0f01 	tst.w	r8, #1
   c1d18:	d004      	beq.n	c1d24 <_strtod_l+0x5dc>
   c1d1a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c1d1e:	f7ff f88f 	bl	c0e40 <__aeabi_dmul>
   c1d22:	2301      	movs	r3, #1
   c1d24:	ea5f 0868 	movs.w	r8, r8, asr #1
   c1d28:	f109 0908 	add.w	r9, r9, #8
   c1d2c:	d1f2      	bne.n	c1d14 <_strtod_l+0x5cc>
   c1d2e:	b10b      	cbz	r3, c1d34 <_strtod_l+0x5ec>
   c1d30:	4682      	mov	sl, r0
   c1d32:	468b      	mov	fp, r1
   c1d34:	9b04      	ldr	r3, [sp, #16]
   c1d36:	b1c3      	cbz	r3, c1d6a <_strtod_l+0x622>
   c1d38:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c1d3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c1d40:	2b00      	cmp	r3, #0
   c1d42:	4659      	mov	r1, fp
   c1d44:	dd11      	ble.n	c1d6a <_strtod_l+0x622>
   c1d46:	2b1f      	cmp	r3, #31
   c1d48:	f340 8124 	ble.w	c1f94 <_strtod_l+0x84c>
   c1d4c:	2b34      	cmp	r3, #52	; 0x34
   c1d4e:	bfde      	ittt	le
   c1d50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c1d54:	f04f 33ff 	movle.w	r3, #4294967295
   c1d58:	fa03 f202 	lslle.w	r2, r3, r2
   c1d5c:	f04f 0a00 	mov.w	sl, #0
   c1d60:	bfcc      	ite	gt
   c1d62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c1d66:	ea02 0b01 	andle.w	fp, r2, r1
   c1d6a:	2200      	movs	r2, #0
   c1d6c:	2300      	movs	r3, #0
   c1d6e:	4650      	mov	r0, sl
   c1d70:	4659      	mov	r1, fp
   c1d72:	f7ff facd 	bl	c1310 <__aeabi_dcmpeq>
   c1d76:	2800      	cmp	r0, #0
   c1d78:	d1a2      	bne.n	c1cc0 <_strtod_l+0x578>
   c1d7a:	9b07      	ldr	r3, [sp, #28]
   c1d7c:	9300      	str	r3, [sp, #0]
   c1d7e:	9908      	ldr	r1, [sp, #32]
   c1d80:	462b      	mov	r3, r5
   c1d82:	463a      	mov	r2, r7
   c1d84:	4620      	mov	r0, r4
   c1d86:	f001 f80d 	bl	c2da4 <__s2b>
   c1d8a:	9007      	str	r0, [sp, #28]
   c1d8c:	2800      	cmp	r0, #0
   c1d8e:	f43f af1f 	beq.w	c1bd0 <_strtod_l+0x488>
   c1d92:	9b05      	ldr	r3, [sp, #20]
   c1d94:	1b9e      	subs	r6, r3, r6
   c1d96:	9b06      	ldr	r3, [sp, #24]
   c1d98:	2b00      	cmp	r3, #0
   c1d9a:	bfb4      	ite	lt
   c1d9c:	4633      	movlt	r3, r6
   c1d9e:	2300      	movge	r3, #0
   c1da0:	930c      	str	r3, [sp, #48]	; 0x30
   c1da2:	9b06      	ldr	r3, [sp, #24]
   c1da4:	2500      	movs	r5, #0
   c1da6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c1daa:	9312      	str	r3, [sp, #72]	; 0x48
   c1dac:	462e      	mov	r6, r5
   c1dae:	9b07      	ldr	r3, [sp, #28]
   c1db0:	4620      	mov	r0, r4
   c1db2:	6859      	ldr	r1, [r3, #4]
   c1db4:	f000 ff4e 	bl	c2c54 <_Balloc>
   c1db8:	9005      	str	r0, [sp, #20]
   c1dba:	2800      	cmp	r0, #0
   c1dbc:	f43f af0c 	beq.w	c1bd8 <_strtod_l+0x490>
   c1dc0:	9b07      	ldr	r3, [sp, #28]
   c1dc2:	691a      	ldr	r2, [r3, #16]
   c1dc4:	3202      	adds	r2, #2
   c1dc6:	f103 010c 	add.w	r1, r3, #12
   c1dca:	0092      	lsls	r2, r2, #2
   c1dcc:	300c      	adds	r0, #12
   c1dce:	f7ff fb85 	bl	c14dc <memcpy>
   c1dd2:	ec4b ab10 	vmov	d0, sl, fp
   c1dd6:	aa1a      	add	r2, sp, #104	; 0x68
   c1dd8:	a919      	add	r1, sp, #100	; 0x64
   c1dda:	4620      	mov	r0, r4
   c1ddc:	f001 fb28 	bl	c3430 <__d2b>
   c1de0:	ec4b ab18 	vmov	d8, sl, fp
   c1de4:	9018      	str	r0, [sp, #96]	; 0x60
   c1de6:	2800      	cmp	r0, #0
   c1de8:	f43f aef6 	beq.w	c1bd8 <_strtod_l+0x490>
   c1dec:	2101      	movs	r1, #1
   c1dee:	4620      	mov	r0, r4
   c1df0:	f001 f872 	bl	c2ed8 <__i2b>
   c1df4:	4606      	mov	r6, r0
   c1df6:	2800      	cmp	r0, #0
   c1df8:	f43f aeee 	beq.w	c1bd8 <_strtod_l+0x490>
   c1dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c1dfe:	9904      	ldr	r1, [sp, #16]
   c1e00:	2b00      	cmp	r3, #0
   c1e02:	bfab      	itete	ge
   c1e04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c1e06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c1e08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c1e0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c1e0e:	bfac      	ite	ge
   c1e10:	eb03 0902 	addge.w	r9, r3, r2
   c1e14:	1ad7      	sublt	r7, r2, r3
   c1e16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c1e18:	eba3 0801 	sub.w	r8, r3, r1
   c1e1c:	4490      	add	r8, r2
   c1e1e:	4ba1      	ldr	r3, [pc, #644]	; (c20a4 <_strtod_l+0x95c>)
   c1e20:	f108 38ff 	add.w	r8, r8, #4294967295
   c1e24:	4598      	cmp	r8, r3
   c1e26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c1e2a:	f280 80c7 	bge.w	c1fbc <_strtod_l+0x874>
   c1e2e:	eba3 0308 	sub.w	r3, r3, r8
   c1e32:	2b1f      	cmp	r3, #31
   c1e34:	eba2 0203 	sub.w	r2, r2, r3
   c1e38:	f04f 0101 	mov.w	r1, #1
   c1e3c:	f300 80b1 	bgt.w	c1fa2 <_strtod_l+0x85a>
   c1e40:	fa01 f303 	lsl.w	r3, r1, r3
   c1e44:	930d      	str	r3, [sp, #52]	; 0x34
   c1e46:	2300      	movs	r3, #0
   c1e48:	9308      	str	r3, [sp, #32]
   c1e4a:	eb09 0802 	add.w	r8, r9, r2
   c1e4e:	9b04      	ldr	r3, [sp, #16]
   c1e50:	45c1      	cmp	r9, r8
   c1e52:	4417      	add	r7, r2
   c1e54:	441f      	add	r7, r3
   c1e56:	464b      	mov	r3, r9
   c1e58:	bfa8      	it	ge
   c1e5a:	4643      	movge	r3, r8
   c1e5c:	42bb      	cmp	r3, r7
   c1e5e:	bfa8      	it	ge
   c1e60:	463b      	movge	r3, r7
   c1e62:	2b00      	cmp	r3, #0
   c1e64:	bfc2      	ittt	gt
   c1e66:	eba8 0803 	subgt.w	r8, r8, r3
   c1e6a:	1aff      	subgt	r7, r7, r3
   c1e6c:	eba9 0903 	subgt.w	r9, r9, r3
   c1e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c1e72:	2b00      	cmp	r3, #0
   c1e74:	dd17      	ble.n	c1ea6 <_strtod_l+0x75e>
   c1e76:	4631      	mov	r1, r6
   c1e78:	461a      	mov	r2, r3
   c1e7a:	4620      	mov	r0, r4
   c1e7c:	f001 f8ec 	bl	c3058 <__pow5mult>
   c1e80:	4606      	mov	r6, r0
   c1e82:	2800      	cmp	r0, #0
   c1e84:	f43f aea8 	beq.w	c1bd8 <_strtod_l+0x490>
   c1e88:	4601      	mov	r1, r0
   c1e8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1e8c:	4620      	mov	r0, r4
   c1e8e:	f001 f839 	bl	c2f04 <__multiply>
   c1e92:	900b      	str	r0, [sp, #44]	; 0x2c
   c1e94:	2800      	cmp	r0, #0
   c1e96:	f43f ae9f 	beq.w	c1bd8 <_strtod_l+0x490>
   c1e9a:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1e9c:	4620      	mov	r0, r4
   c1e9e:	f000 ff19 	bl	c2cd4 <_Bfree>
   c1ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1ea4:	9318      	str	r3, [sp, #96]	; 0x60
   c1ea6:	f1b8 0f00 	cmp.w	r8, #0
   c1eaa:	f300 808c 	bgt.w	c1fc6 <_strtod_l+0x87e>
   c1eae:	9b06      	ldr	r3, [sp, #24]
   c1eb0:	2b00      	cmp	r3, #0
   c1eb2:	dd08      	ble.n	c1ec6 <_strtod_l+0x77e>
   c1eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c1eb6:	9905      	ldr	r1, [sp, #20]
   c1eb8:	4620      	mov	r0, r4
   c1eba:	f001 f8cd 	bl	c3058 <__pow5mult>
   c1ebe:	9005      	str	r0, [sp, #20]
   c1ec0:	2800      	cmp	r0, #0
   c1ec2:	f43f ae89 	beq.w	c1bd8 <_strtod_l+0x490>
   c1ec6:	2f00      	cmp	r7, #0
   c1ec8:	dd08      	ble.n	c1edc <_strtod_l+0x794>
   c1eca:	9905      	ldr	r1, [sp, #20]
   c1ecc:	463a      	mov	r2, r7
   c1ece:	4620      	mov	r0, r4
   c1ed0:	f001 f91c 	bl	c310c <__lshift>
   c1ed4:	9005      	str	r0, [sp, #20]
   c1ed6:	2800      	cmp	r0, #0
   c1ed8:	f43f ae7e 	beq.w	c1bd8 <_strtod_l+0x490>
   c1edc:	f1b9 0f00 	cmp.w	r9, #0
   c1ee0:	dd08      	ble.n	c1ef4 <_strtod_l+0x7ac>
   c1ee2:	4631      	mov	r1, r6
   c1ee4:	464a      	mov	r2, r9
   c1ee6:	4620      	mov	r0, r4
   c1ee8:	f001 f910 	bl	c310c <__lshift>
   c1eec:	4606      	mov	r6, r0
   c1eee:	2800      	cmp	r0, #0
   c1ef0:	f43f ae72 	beq.w	c1bd8 <_strtod_l+0x490>
   c1ef4:	9a05      	ldr	r2, [sp, #20]
   c1ef6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1ef8:	4620      	mov	r0, r4
   c1efa:	f001 f993 	bl	c3224 <__mdiff>
   c1efe:	4605      	mov	r5, r0
   c1f00:	2800      	cmp	r0, #0
   c1f02:	f43f ae69 	beq.w	c1bd8 <_strtod_l+0x490>
   c1f06:	68c3      	ldr	r3, [r0, #12]
   c1f08:	930b      	str	r3, [sp, #44]	; 0x2c
   c1f0a:	2300      	movs	r3, #0
   c1f0c:	60c3      	str	r3, [r0, #12]
   c1f0e:	4631      	mov	r1, r6
   c1f10:	f001 f96c 	bl	c31ec <__mcmp>
   c1f14:	2800      	cmp	r0, #0
   c1f16:	da60      	bge.n	c1fda <_strtod_l+0x892>
   c1f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1f1a:	ea53 030a 	orrs.w	r3, r3, sl
   c1f1e:	f040 8082 	bne.w	c2026 <_strtod_l+0x8de>
   c1f22:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1f26:	2b00      	cmp	r3, #0
   c1f28:	d17d      	bne.n	c2026 <_strtod_l+0x8de>
   c1f2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1f2e:	0d1b      	lsrs	r3, r3, #20
   c1f30:	051b      	lsls	r3, r3, #20
   c1f32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c1f36:	d976      	bls.n	c2026 <_strtod_l+0x8de>
   c1f38:	696b      	ldr	r3, [r5, #20]
   c1f3a:	b913      	cbnz	r3, c1f42 <_strtod_l+0x7fa>
   c1f3c:	692b      	ldr	r3, [r5, #16]
   c1f3e:	2b01      	cmp	r3, #1
   c1f40:	dd71      	ble.n	c2026 <_strtod_l+0x8de>
   c1f42:	4629      	mov	r1, r5
   c1f44:	2201      	movs	r2, #1
   c1f46:	4620      	mov	r0, r4
   c1f48:	f001 f8e0 	bl	c310c <__lshift>
   c1f4c:	4631      	mov	r1, r6
   c1f4e:	4605      	mov	r5, r0
   c1f50:	f001 f94c 	bl	c31ec <__mcmp>
   c1f54:	2800      	cmp	r0, #0
   c1f56:	dd66      	ble.n	c2026 <_strtod_l+0x8de>
   c1f58:	9904      	ldr	r1, [sp, #16]
   c1f5a:	4a53      	ldr	r2, [pc, #332]	; (c20a8 <_strtod_l+0x960>)
   c1f5c:	465b      	mov	r3, fp
   c1f5e:	2900      	cmp	r1, #0
   c1f60:	f000 8081 	beq.w	c2066 <_strtod_l+0x91e>
   c1f64:	ea02 010b 	and.w	r1, r2, fp
   c1f68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c1f6c:	dc7b      	bgt.n	c2066 <_strtod_l+0x91e>
   c1f6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c1f72:	f77f aea9 	ble.w	c1cc8 <_strtod_l+0x580>
   c1f76:	4b4d      	ldr	r3, [pc, #308]	; (c20ac <_strtod_l+0x964>)
   c1f78:	4650      	mov	r0, sl
   c1f7a:	4659      	mov	r1, fp
   c1f7c:	2200      	movs	r2, #0
   c1f7e:	f7fe ff5f 	bl	c0e40 <__aeabi_dmul>
   c1f82:	460b      	mov	r3, r1
   c1f84:	4303      	orrs	r3, r0
   c1f86:	bf08      	it	eq
   c1f88:	2322      	moveq	r3, #34	; 0x22
   c1f8a:	4682      	mov	sl, r0
   c1f8c:	468b      	mov	fp, r1
   c1f8e:	bf08      	it	eq
   c1f90:	6023      	streq	r3, [r4, #0]
   c1f92:	e62b      	b.n	c1bec <_strtod_l+0x4a4>
   c1f94:	f04f 32ff 	mov.w	r2, #4294967295
   c1f98:	fa02 f303 	lsl.w	r3, r2, r3
   c1f9c:	ea03 0a0a 	and.w	sl, r3, sl
   c1fa0:	e6e3      	b.n	c1d6a <_strtod_l+0x622>
   c1fa2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c1fa6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c1faa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c1fae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c1fb2:	fa01 f308 	lsl.w	r3, r1, r8
   c1fb6:	9308      	str	r3, [sp, #32]
   c1fb8:	910d      	str	r1, [sp, #52]	; 0x34
   c1fba:	e746      	b.n	c1e4a <_strtod_l+0x702>
   c1fbc:	2300      	movs	r3, #0
   c1fbe:	9308      	str	r3, [sp, #32]
   c1fc0:	2301      	movs	r3, #1
   c1fc2:	930d      	str	r3, [sp, #52]	; 0x34
   c1fc4:	e741      	b.n	c1e4a <_strtod_l+0x702>
   c1fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1fc8:	4642      	mov	r2, r8
   c1fca:	4620      	mov	r0, r4
   c1fcc:	f001 f89e 	bl	c310c <__lshift>
   c1fd0:	9018      	str	r0, [sp, #96]	; 0x60
   c1fd2:	2800      	cmp	r0, #0
   c1fd4:	f47f af6b 	bne.w	c1eae <_strtod_l+0x766>
   c1fd8:	e5fe      	b.n	c1bd8 <_strtod_l+0x490>
   c1fda:	465f      	mov	r7, fp
   c1fdc:	d16e      	bne.n	c20bc <_strtod_l+0x974>
   c1fde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1fe0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1fe4:	b342      	cbz	r2, c2038 <_strtod_l+0x8f0>
   c1fe6:	4a32      	ldr	r2, [pc, #200]	; (c20b0 <_strtod_l+0x968>)
   c1fe8:	4293      	cmp	r3, r2
   c1fea:	d128      	bne.n	c203e <_strtod_l+0x8f6>
   c1fec:	9b04      	ldr	r3, [sp, #16]
   c1fee:	4651      	mov	r1, sl
   c1ff0:	b1eb      	cbz	r3, c202e <_strtod_l+0x8e6>
   c1ff2:	4b2d      	ldr	r3, [pc, #180]	; (c20a8 <_strtod_l+0x960>)
   c1ff4:	403b      	ands	r3, r7
   c1ff6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1ffa:	f04f 32ff 	mov.w	r2, #4294967295
   c1ffe:	d819      	bhi.n	c2034 <_strtod_l+0x8ec>
   c2000:	0d1b      	lsrs	r3, r3, #20
   c2002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c2006:	fa02 f303 	lsl.w	r3, r2, r3
   c200a:	4299      	cmp	r1, r3
   c200c:	d117      	bne.n	c203e <_strtod_l+0x8f6>
   c200e:	4b29      	ldr	r3, [pc, #164]	; (c20b4 <_strtod_l+0x96c>)
   c2010:	429f      	cmp	r7, r3
   c2012:	d102      	bne.n	c201a <_strtod_l+0x8d2>
   c2014:	3101      	adds	r1, #1
   c2016:	f43f addf 	beq.w	c1bd8 <_strtod_l+0x490>
   c201a:	4b23      	ldr	r3, [pc, #140]	; (c20a8 <_strtod_l+0x960>)
   c201c:	403b      	ands	r3, r7
   c201e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c2022:	f04f 0a00 	mov.w	sl, #0
   c2026:	9b04      	ldr	r3, [sp, #16]
   c2028:	2b00      	cmp	r3, #0
   c202a:	d1a4      	bne.n	c1f76 <_strtod_l+0x82e>
   c202c:	e5de      	b.n	c1bec <_strtod_l+0x4a4>
   c202e:	f04f 33ff 	mov.w	r3, #4294967295
   c2032:	e7ea      	b.n	c200a <_strtod_l+0x8c2>
   c2034:	4613      	mov	r3, r2
   c2036:	e7e8      	b.n	c200a <_strtod_l+0x8c2>
   c2038:	ea53 030a 	orrs.w	r3, r3, sl
   c203c:	d08c      	beq.n	c1f58 <_strtod_l+0x810>
   c203e:	9b08      	ldr	r3, [sp, #32]
   c2040:	b1db      	cbz	r3, c207a <_strtod_l+0x932>
   c2042:	423b      	tst	r3, r7
   c2044:	d0ef      	beq.n	c2026 <_strtod_l+0x8de>
   c2046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2048:	9a04      	ldr	r2, [sp, #16]
   c204a:	4650      	mov	r0, sl
   c204c:	4659      	mov	r1, fp
   c204e:	b1c3      	cbz	r3, c2082 <_strtod_l+0x93a>
   c2050:	f7ff fb5c 	bl	c170c <sulp>
   c2054:	4602      	mov	r2, r0
   c2056:	460b      	mov	r3, r1
   c2058:	ec51 0b18 	vmov	r0, r1, d8
   c205c:	f7fe fd3a 	bl	c0ad4 <__adddf3>
   c2060:	4682      	mov	sl, r0
   c2062:	468b      	mov	fp, r1
   c2064:	e7df      	b.n	c2026 <_strtod_l+0x8de>
   c2066:	4013      	ands	r3, r2
   c2068:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c206c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c2070:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c2074:	f04f 3aff 	mov.w	sl, #4294967295
   c2078:	e7d5      	b.n	c2026 <_strtod_l+0x8de>
   c207a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c207c:	ea13 0f0a 	tst.w	r3, sl
   c2080:	e7e0      	b.n	c2044 <_strtod_l+0x8fc>
   c2082:	f7ff fb43 	bl	c170c <sulp>
   c2086:	4602      	mov	r2, r0
   c2088:	460b      	mov	r3, r1
   c208a:	ec51 0b18 	vmov	r0, r1, d8
   c208e:	f7fe fd1f 	bl	c0ad0 <__aeabi_dsub>
   c2092:	2200      	movs	r2, #0
   c2094:	2300      	movs	r3, #0
   c2096:	4682      	mov	sl, r0
   c2098:	468b      	mov	fp, r1
   c209a:	f7ff f939 	bl	c1310 <__aeabi_dcmpeq>
   c209e:	2800      	cmp	r0, #0
   c20a0:	d0c1      	beq.n	c2026 <_strtod_l+0x8de>
   c20a2:	e611      	b.n	c1cc8 <_strtod_l+0x580>
   c20a4:	fffffc02 	.word	0xfffffc02
   c20a8:	7ff00000 	.word	0x7ff00000
   c20ac:	39500000 	.word	0x39500000
   c20b0:	000fffff 	.word	0x000fffff
   c20b4:	7fefffff 	.word	0x7fefffff
   c20b8:	000c5030 	.word	0x000c5030
   c20bc:	4631      	mov	r1, r6
   c20be:	4628      	mov	r0, r5
   c20c0:	f001 fa12 	bl	c34e8 <__ratio>
   c20c4:	ec59 8b10 	vmov	r8, r9, d0
   c20c8:	ee10 0a10 	vmov	r0, s0
   c20cc:	2200      	movs	r2, #0
   c20ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c20d2:	4649      	mov	r1, r9
   c20d4:	f7ff f930 	bl	c1338 <__aeabi_dcmple>
   c20d8:	2800      	cmp	r0, #0
   c20da:	d07a      	beq.n	c21d2 <_strtod_l+0xa8a>
   c20dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c20de:	2b00      	cmp	r3, #0
   c20e0:	d04a      	beq.n	c2178 <_strtod_l+0xa30>
   c20e2:	4b95      	ldr	r3, [pc, #596]	; (c2338 <_strtod_l+0xbf0>)
   c20e4:	2200      	movs	r2, #0
   c20e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c20ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; c2338 <_strtod_l+0xbf0>
   c20ee:	f04f 0800 	mov.w	r8, #0
   c20f2:	4b92      	ldr	r3, [pc, #584]	; (c233c <_strtod_l+0xbf4>)
   c20f4:	403b      	ands	r3, r7
   c20f6:	930d      	str	r3, [sp, #52]	; 0x34
   c20f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c20fa:	4b91      	ldr	r3, [pc, #580]	; (c2340 <_strtod_l+0xbf8>)
   c20fc:	429a      	cmp	r2, r3
   c20fe:	f040 80b0 	bne.w	c2262 <_strtod_l+0xb1a>
   c2102:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2106:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c210a:	ec4b ab10 	vmov	d0, sl, fp
   c210e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c2112:	f001 f911 	bl	c3338 <__ulp>
   c2116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c211a:	ec53 2b10 	vmov	r2, r3, d0
   c211e:	f7fe fe8f 	bl	c0e40 <__aeabi_dmul>
   c2122:	4652      	mov	r2, sl
   c2124:	465b      	mov	r3, fp
   c2126:	f7fe fcd5 	bl	c0ad4 <__adddf3>
   c212a:	460b      	mov	r3, r1
   c212c:	4983      	ldr	r1, [pc, #524]	; (c233c <_strtod_l+0xbf4>)
   c212e:	4a85      	ldr	r2, [pc, #532]	; (c2344 <_strtod_l+0xbfc>)
   c2130:	4019      	ands	r1, r3
   c2132:	4291      	cmp	r1, r2
   c2134:	4682      	mov	sl, r0
   c2136:	d960      	bls.n	c21fa <_strtod_l+0xab2>
   c2138:	ee18 3a90 	vmov	r3, s17
   c213c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c2140:	4293      	cmp	r3, r2
   c2142:	d104      	bne.n	c214e <_strtod_l+0xa06>
   c2144:	ee18 3a10 	vmov	r3, s16
   c2148:	3301      	adds	r3, #1
   c214a:	f43f ad45 	beq.w	c1bd8 <_strtod_l+0x490>
   c214e:	f8df b200 	ldr.w	fp, [pc, #512]	; c2350 <_strtod_l+0xc08>
   c2152:	f04f 3aff 	mov.w	sl, #4294967295
   c2156:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2158:	4620      	mov	r0, r4
   c215a:	f000 fdbb 	bl	c2cd4 <_Bfree>
   c215e:	9905      	ldr	r1, [sp, #20]
   c2160:	4620      	mov	r0, r4
   c2162:	f000 fdb7 	bl	c2cd4 <_Bfree>
   c2166:	4631      	mov	r1, r6
   c2168:	4620      	mov	r0, r4
   c216a:	f000 fdb3 	bl	c2cd4 <_Bfree>
   c216e:	4629      	mov	r1, r5
   c2170:	4620      	mov	r0, r4
   c2172:	f000 fdaf 	bl	c2cd4 <_Bfree>
   c2176:	e61a      	b.n	c1dae <_strtod_l+0x666>
   c2178:	f1ba 0f00 	cmp.w	sl, #0
   c217c:	d11b      	bne.n	c21b6 <_strtod_l+0xa6e>
   c217e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2182:	b9f3      	cbnz	r3, c21c2 <_strtod_l+0xa7a>
   c2184:	4b6c      	ldr	r3, [pc, #432]	; (c2338 <_strtod_l+0xbf0>)
   c2186:	2200      	movs	r2, #0
   c2188:	4640      	mov	r0, r8
   c218a:	4649      	mov	r1, r9
   c218c:	f7ff f8ca 	bl	c1324 <__aeabi_dcmplt>
   c2190:	b9d0      	cbnz	r0, c21c8 <_strtod_l+0xa80>
   c2192:	4640      	mov	r0, r8
   c2194:	4649      	mov	r1, r9
   c2196:	4b6c      	ldr	r3, [pc, #432]	; (c2348 <_strtod_l+0xc00>)
   c2198:	2200      	movs	r2, #0
   c219a:	f7fe fe51 	bl	c0e40 <__aeabi_dmul>
   c219e:	4680      	mov	r8, r0
   c21a0:	4689      	mov	r9, r1
   c21a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c21a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c21aa:	9315      	str	r3, [sp, #84]	; 0x54
   c21ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c21b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c21b4:	e79d      	b.n	c20f2 <_strtod_l+0x9aa>
   c21b6:	f1ba 0f01 	cmp.w	sl, #1
   c21ba:	d102      	bne.n	c21c2 <_strtod_l+0xa7a>
   c21bc:	2f00      	cmp	r7, #0
   c21be:	f43f ad83 	beq.w	c1cc8 <_strtod_l+0x580>
   c21c2:	4b62      	ldr	r3, [pc, #392]	; (c234c <_strtod_l+0xc04>)
   c21c4:	2200      	movs	r2, #0
   c21c6:	e78e      	b.n	c20e6 <_strtod_l+0x99e>
   c21c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; c2348 <_strtod_l+0xc00>
   c21cc:	f04f 0800 	mov.w	r8, #0
   c21d0:	e7e7      	b.n	c21a2 <_strtod_l+0xa5a>
   c21d2:	4b5d      	ldr	r3, [pc, #372]	; (c2348 <_strtod_l+0xc00>)
   c21d4:	4640      	mov	r0, r8
   c21d6:	4649      	mov	r1, r9
   c21d8:	2200      	movs	r2, #0
   c21da:	f7fe fe31 	bl	c0e40 <__aeabi_dmul>
   c21de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c21e0:	4680      	mov	r8, r0
   c21e2:	4689      	mov	r9, r1
   c21e4:	b933      	cbnz	r3, c21f4 <_strtod_l+0xaac>
   c21e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c21ea:	900e      	str	r0, [sp, #56]	; 0x38
   c21ec:	930f      	str	r3, [sp, #60]	; 0x3c
   c21ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c21f2:	e7dd      	b.n	c21b0 <_strtod_l+0xa68>
   c21f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c21f8:	e7f9      	b.n	c21ee <_strtod_l+0xaa6>
   c21fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c21fe:	9b04      	ldr	r3, [sp, #16]
   c2200:	2b00      	cmp	r3, #0
   c2202:	d1a8      	bne.n	c2156 <_strtod_l+0xa0e>
   c2204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c2208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c220a:	0d1b      	lsrs	r3, r3, #20
   c220c:	051b      	lsls	r3, r3, #20
   c220e:	429a      	cmp	r2, r3
   c2210:	d1a1      	bne.n	c2156 <_strtod_l+0xa0e>
   c2212:	4640      	mov	r0, r8
   c2214:	4649      	mov	r1, r9
   c2216:	f001 fa05 	bl	c3624 <__aeabi_d2lz>
   c221a:	f7fe fde3 	bl	c0de4 <__aeabi_l2d>
   c221e:	4602      	mov	r2, r0
   c2220:	460b      	mov	r3, r1
   c2222:	4640      	mov	r0, r8
   c2224:	4649      	mov	r1, r9
   c2226:	f7fe fc53 	bl	c0ad0 <__aeabi_dsub>
   c222a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c222c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2230:	ea43 030a 	orr.w	r3, r3, sl
   c2234:	4313      	orrs	r3, r2
   c2236:	4680      	mov	r8, r0
   c2238:	4689      	mov	r9, r1
   c223a:	d055      	beq.n	c22e8 <_strtod_l+0xba0>
   c223c:	a336      	add	r3, pc, #216	; (adr r3, c2318 <_strtod_l+0xbd0>)
   c223e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2242:	f7ff f86f 	bl	c1324 <__aeabi_dcmplt>
   c2246:	2800      	cmp	r0, #0
   c2248:	f47f acd0 	bne.w	c1bec <_strtod_l+0x4a4>
   c224c:	a334      	add	r3, pc, #208	; (adr r3, c2320 <_strtod_l+0xbd8>)
   c224e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2252:	4640      	mov	r0, r8
   c2254:	4649      	mov	r1, r9
   c2256:	f7ff f883 	bl	c1360 <__aeabi_dcmpgt>
   c225a:	2800      	cmp	r0, #0
   c225c:	f43f af7b 	beq.w	c2156 <_strtod_l+0xa0e>
   c2260:	e4c4      	b.n	c1bec <_strtod_l+0x4a4>
   c2262:	9b04      	ldr	r3, [sp, #16]
   c2264:	b333      	cbz	r3, c22b4 <_strtod_l+0xb6c>
   c2266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2268:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c226c:	d822      	bhi.n	c22b4 <_strtod_l+0xb6c>
   c226e:	a32e      	add	r3, pc, #184	; (adr r3, c2328 <_strtod_l+0xbe0>)
   c2270:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2274:	4640      	mov	r0, r8
   c2276:	4649      	mov	r1, r9
   c2278:	f7ff f85e 	bl	c1338 <__aeabi_dcmple>
   c227c:	b1a0      	cbz	r0, c22a8 <_strtod_l+0xb60>
   c227e:	4649      	mov	r1, r9
   c2280:	4640      	mov	r0, r8
   c2282:	f7ff f877 	bl	c1374 <__aeabi_d2uiz>
   c2286:	2801      	cmp	r0, #1
   c2288:	bf38      	it	cc
   c228a:	2001      	movcc	r0, #1
   c228c:	f7fe fd5e 	bl	c0d4c <__aeabi_ui2d>
   c2290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2292:	4680      	mov	r8, r0
   c2294:	4689      	mov	r9, r1
   c2296:	bb23      	cbnz	r3, c22e2 <_strtod_l+0xb9a>
   c2298:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c229c:	9010      	str	r0, [sp, #64]	; 0x40
   c229e:	9311      	str	r3, [sp, #68]	; 0x44
   c22a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c22a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c22a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c22aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c22ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c22b0:	1a9b      	subs	r3, r3, r2
   c22b2:	9309      	str	r3, [sp, #36]	; 0x24
   c22b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c22b8:	eeb0 0a48 	vmov.f32	s0, s16
   c22bc:	eef0 0a68 	vmov.f32	s1, s17
   c22c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c22c4:	f001 f838 	bl	c3338 <__ulp>
   c22c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c22cc:	ec53 2b10 	vmov	r2, r3, d0
   c22d0:	f7fe fdb6 	bl	c0e40 <__aeabi_dmul>
   c22d4:	ec53 2b18 	vmov	r2, r3, d8
   c22d8:	f7fe fbfc 	bl	c0ad4 <__adddf3>
   c22dc:	4682      	mov	sl, r0
   c22de:	468b      	mov	fp, r1
   c22e0:	e78d      	b.n	c21fe <_strtod_l+0xab6>
   c22e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c22e6:	e7db      	b.n	c22a0 <_strtod_l+0xb58>
   c22e8:	a311      	add	r3, pc, #68	; (adr r3, c2330 <_strtod_l+0xbe8>)
   c22ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   c22ee:	f7ff f819 	bl	c1324 <__aeabi_dcmplt>
   c22f2:	e7b2      	b.n	c225a <_strtod_l+0xb12>
   c22f4:	2300      	movs	r3, #0
   c22f6:	930a      	str	r3, [sp, #40]	; 0x28
   c22f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c22fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c22fc:	6013      	str	r3, [r2, #0]
   c22fe:	f7ff ba6b 	b.w	c17d8 <_strtod_l+0x90>
   c2302:	2a65      	cmp	r2, #101	; 0x65
   c2304:	f43f ab5f 	beq.w	c19c6 <_strtod_l+0x27e>
   c2308:	2a45      	cmp	r2, #69	; 0x45
   c230a:	f43f ab5c 	beq.w	c19c6 <_strtod_l+0x27e>
   c230e:	2301      	movs	r3, #1
   c2310:	f7ff bb94 	b.w	c1a3c <_strtod_l+0x2f4>
   c2314:	f3af 8000 	nop.w
   c2318:	94a03595 	.word	0x94a03595
   c231c:	3fdfffff 	.word	0x3fdfffff
   c2320:	35afe535 	.word	0x35afe535
   c2324:	3fe00000 	.word	0x3fe00000
   c2328:	ffc00000 	.word	0xffc00000
   c232c:	41dfffff 	.word	0x41dfffff
   c2330:	94a03595 	.word	0x94a03595
   c2334:	3fcfffff 	.word	0x3fcfffff
   c2338:	3ff00000 	.word	0x3ff00000
   c233c:	7ff00000 	.word	0x7ff00000
   c2340:	7fe00000 	.word	0x7fe00000
   c2344:	7c9fffff 	.word	0x7c9fffff
   c2348:	3fe00000 	.word	0x3fe00000
   c234c:	bff00000 	.word	0xbff00000
   c2350:	7fefffff 	.word	0x7fefffff

000c2354 <strtod>:
   c2354:	460a      	mov	r2, r1
   c2356:	4601      	mov	r1, r0
   c2358:	4802      	ldr	r0, [pc, #8]	; (c2364 <strtod+0x10>)
   c235a:	4b03      	ldr	r3, [pc, #12]	; (c2368 <strtod+0x14>)
   c235c:	6800      	ldr	r0, [r0, #0]
   c235e:	f7ff b9f3 	b.w	c1748 <_strtod_l>
   c2362:	bf00      	nop
   c2364:	2003dbf0 	.word	0x2003dbf0
   c2368:	2003dc5c 	.word	0x2003dc5c

000c236c <_strtol_l.constprop.0>:
   c236c:	2b01      	cmp	r3, #1
   c236e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2372:	d001      	beq.n	c2378 <_strtol_l.constprop.0+0xc>
   c2374:	2b24      	cmp	r3, #36	; 0x24
   c2376:	d906      	bls.n	c2386 <_strtol_l.constprop.0+0x1a>
   c2378:	f7fa fbd8 	bl	bcb2c <__errno>
   c237c:	2316      	movs	r3, #22
   c237e:	6003      	str	r3, [r0, #0]
   c2380:	2000      	movs	r0, #0
   c2382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c2386:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c246c <_strtol_l.constprop.0+0x100>
   c238a:	460d      	mov	r5, r1
   c238c:	462e      	mov	r6, r5
   c238e:	f815 4b01 	ldrb.w	r4, [r5], #1
   c2392:	f814 700c 	ldrb.w	r7, [r4, ip]
   c2396:	f017 0708 	ands.w	r7, r7, #8
   c239a:	d1f7      	bne.n	c238c <_strtol_l.constprop.0+0x20>
   c239c:	2c2d      	cmp	r4, #45	; 0x2d
   c239e:	d132      	bne.n	c2406 <_strtol_l.constprop.0+0x9a>
   c23a0:	782c      	ldrb	r4, [r5, #0]
   c23a2:	2701      	movs	r7, #1
   c23a4:	1cb5      	adds	r5, r6, #2
   c23a6:	2b00      	cmp	r3, #0
   c23a8:	d05b      	beq.n	c2462 <_strtol_l.constprop.0+0xf6>
   c23aa:	2b10      	cmp	r3, #16
   c23ac:	d109      	bne.n	c23c2 <_strtol_l.constprop.0+0x56>
   c23ae:	2c30      	cmp	r4, #48	; 0x30
   c23b0:	d107      	bne.n	c23c2 <_strtol_l.constprop.0+0x56>
   c23b2:	782c      	ldrb	r4, [r5, #0]
   c23b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c23b8:	2c58      	cmp	r4, #88	; 0x58
   c23ba:	d14d      	bne.n	c2458 <_strtol_l.constprop.0+0xec>
   c23bc:	786c      	ldrb	r4, [r5, #1]
   c23be:	2310      	movs	r3, #16
   c23c0:	3502      	adds	r5, #2
   c23c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c23c6:	f108 38ff 	add.w	r8, r8, #4294967295
   c23ca:	f04f 0c00 	mov.w	ip, #0
   c23ce:	fbb8 f9f3 	udiv	r9, r8, r3
   c23d2:	4666      	mov	r6, ip
   c23d4:	fb03 8a19 	mls	sl, r3, r9, r8
   c23d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c23dc:	f1be 0f09 	cmp.w	lr, #9
   c23e0:	d816      	bhi.n	c2410 <_strtol_l.constprop.0+0xa4>
   c23e2:	4674      	mov	r4, lr
   c23e4:	42a3      	cmp	r3, r4
   c23e6:	dd24      	ble.n	c2432 <_strtol_l.constprop.0+0xc6>
   c23e8:	f1bc 0f00 	cmp.w	ip, #0
   c23ec:	db1e      	blt.n	c242c <_strtol_l.constprop.0+0xc0>
   c23ee:	45b1      	cmp	r9, r6
   c23f0:	d31c      	bcc.n	c242c <_strtol_l.constprop.0+0xc0>
   c23f2:	d101      	bne.n	c23f8 <_strtol_l.constprop.0+0x8c>
   c23f4:	45a2      	cmp	sl, r4
   c23f6:	db19      	blt.n	c242c <_strtol_l.constprop.0+0xc0>
   c23f8:	fb06 4603 	mla	r6, r6, r3, r4
   c23fc:	f04f 0c01 	mov.w	ip, #1
   c2400:	f815 4b01 	ldrb.w	r4, [r5], #1
   c2404:	e7e8      	b.n	c23d8 <_strtol_l.constprop.0+0x6c>
   c2406:	2c2b      	cmp	r4, #43	; 0x2b
   c2408:	bf04      	itt	eq
   c240a:	782c      	ldrbeq	r4, [r5, #0]
   c240c:	1cb5      	addeq	r5, r6, #2
   c240e:	e7ca      	b.n	c23a6 <_strtol_l.constprop.0+0x3a>
   c2410:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c2414:	f1be 0f19 	cmp.w	lr, #25
   c2418:	d801      	bhi.n	c241e <_strtol_l.constprop.0+0xb2>
   c241a:	3c37      	subs	r4, #55	; 0x37
   c241c:	e7e2      	b.n	c23e4 <_strtol_l.constprop.0+0x78>
   c241e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c2422:	f1be 0f19 	cmp.w	lr, #25
   c2426:	d804      	bhi.n	c2432 <_strtol_l.constprop.0+0xc6>
   c2428:	3c57      	subs	r4, #87	; 0x57
   c242a:	e7db      	b.n	c23e4 <_strtol_l.constprop.0+0x78>
   c242c:	f04f 3cff 	mov.w	ip, #4294967295
   c2430:	e7e6      	b.n	c2400 <_strtol_l.constprop.0+0x94>
   c2432:	f1bc 0f00 	cmp.w	ip, #0
   c2436:	da05      	bge.n	c2444 <_strtol_l.constprop.0+0xd8>
   c2438:	2322      	movs	r3, #34	; 0x22
   c243a:	6003      	str	r3, [r0, #0]
   c243c:	4646      	mov	r6, r8
   c243e:	b942      	cbnz	r2, c2452 <_strtol_l.constprop.0+0xe6>
   c2440:	4630      	mov	r0, r6
   c2442:	e79e      	b.n	c2382 <_strtol_l.constprop.0+0x16>
   c2444:	b107      	cbz	r7, c2448 <_strtol_l.constprop.0+0xdc>
   c2446:	4276      	negs	r6, r6
   c2448:	2a00      	cmp	r2, #0
   c244a:	d0f9      	beq.n	c2440 <_strtol_l.constprop.0+0xd4>
   c244c:	f1bc 0f00 	cmp.w	ip, #0
   c2450:	d000      	beq.n	c2454 <_strtol_l.constprop.0+0xe8>
   c2452:	1e69      	subs	r1, r5, #1
   c2454:	6011      	str	r1, [r2, #0]
   c2456:	e7f3      	b.n	c2440 <_strtol_l.constprop.0+0xd4>
   c2458:	2430      	movs	r4, #48	; 0x30
   c245a:	2b00      	cmp	r3, #0
   c245c:	d1b1      	bne.n	c23c2 <_strtol_l.constprop.0+0x56>
   c245e:	2308      	movs	r3, #8
   c2460:	e7af      	b.n	c23c2 <_strtol_l.constprop.0+0x56>
   c2462:	2c30      	cmp	r4, #48	; 0x30
   c2464:	d0a5      	beq.n	c23b2 <_strtol_l.constprop.0+0x46>
   c2466:	230a      	movs	r3, #10
   c2468:	e7ab      	b.n	c23c2 <_strtol_l.constprop.0+0x56>
   c246a:	bf00      	nop
   c246c:	000c5059 	.word	0x000c5059

000c2470 <strtol>:
   c2470:	4613      	mov	r3, r2
   c2472:	460a      	mov	r2, r1
   c2474:	4601      	mov	r1, r0
   c2476:	4802      	ldr	r0, [pc, #8]	; (c2480 <strtol+0x10>)
   c2478:	6800      	ldr	r0, [r0, #0]
   c247a:	f7ff bf77 	b.w	c236c <_strtol_l.constprop.0>
   c247e:	bf00      	nop
   c2480:	2003dbf0 	.word	0x2003dbf0

000c2484 <__register_exitproc>:
   c2484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2488:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c2544 <__register_exitproc+0xc0>
   c248c:	4606      	mov	r6, r0
   c248e:	f8d8 0000 	ldr.w	r0, [r8]
   c2492:	461f      	mov	r7, r3
   c2494:	460d      	mov	r5, r1
   c2496:	4691      	mov	r9, r2
   c2498:	f000 fbc6 	bl	c2c28 <__retarget_lock_acquire_recursive>
   c249c:	4b25      	ldr	r3, [pc, #148]	; (c2534 <__register_exitproc+0xb0>)
   c249e:	681c      	ldr	r4, [r3, #0]
   c24a0:	b934      	cbnz	r4, c24b0 <__register_exitproc+0x2c>
   c24a2:	4c25      	ldr	r4, [pc, #148]	; (c2538 <__register_exitproc+0xb4>)
   c24a4:	601c      	str	r4, [r3, #0]
   c24a6:	4b25      	ldr	r3, [pc, #148]	; (c253c <__register_exitproc+0xb8>)
   c24a8:	b113      	cbz	r3, c24b0 <__register_exitproc+0x2c>
   c24aa:	681b      	ldr	r3, [r3, #0]
   c24ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c24b0:	6863      	ldr	r3, [r4, #4]
   c24b2:	2b1f      	cmp	r3, #31
   c24b4:	dd07      	ble.n	c24c6 <__register_exitproc+0x42>
   c24b6:	f8d8 0000 	ldr.w	r0, [r8]
   c24ba:	f000 fbb7 	bl	c2c2c <__retarget_lock_release_recursive>
   c24be:	f04f 30ff 	mov.w	r0, #4294967295
   c24c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c24c6:	b34e      	cbz	r6, c251c <__register_exitproc+0x98>
   c24c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c24cc:	b988      	cbnz	r0, c24f2 <__register_exitproc+0x6e>
   c24ce:	4b1c      	ldr	r3, [pc, #112]	; (c2540 <__register_exitproc+0xbc>)
   c24d0:	b923      	cbnz	r3, c24dc <__register_exitproc+0x58>
   c24d2:	f8d8 0000 	ldr.w	r0, [r8]
   c24d6:	f000 fba8 	bl	c2c2a <__retarget_lock_release>
   c24da:	e7f0      	b.n	c24be <__register_exitproc+0x3a>
   c24dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   c24e0:	f7fa fae4 	bl	bcaac <malloc>
   c24e4:	2800      	cmp	r0, #0
   c24e6:	d0f4      	beq.n	c24d2 <__register_exitproc+0x4e>
   c24e8:	2300      	movs	r3, #0
   c24ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c24ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c24f2:	6863      	ldr	r3, [r4, #4]
   c24f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c24f8:	2201      	movs	r2, #1
   c24fa:	409a      	lsls	r2, r3
   c24fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c2500:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c2504:	4313      	orrs	r3, r2
   c2506:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c250a:	2e02      	cmp	r6, #2
   c250c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c2510:	bf02      	ittt	eq
   c2512:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c2516:	4313      	orreq	r3, r2
   c2518:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c251c:	6863      	ldr	r3, [r4, #4]
   c251e:	f8d8 0000 	ldr.w	r0, [r8]
   c2522:	1c5a      	adds	r2, r3, #1
   c2524:	3302      	adds	r3, #2
   c2526:	6062      	str	r2, [r4, #4]
   c2528:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c252c:	f000 fb7e 	bl	c2c2c <__retarget_lock_release_recursive>
   c2530:	2000      	movs	r0, #0
   c2532:	e7c6      	b.n	c24c2 <__register_exitproc+0x3e>
   c2534:	2003e7e8 	.word	0x2003e7e8
   c2538:	2003e75c 	.word	0x2003e75c
   c253c:	00000000 	.word	0x00000000
   c2540:	000bcaad 	.word	0x000bcaad
   c2544:	2003dc54 	.word	0x2003dc54

000c2548 <rshift>:
   c2548:	6903      	ldr	r3, [r0, #16]
   c254a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c254e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c2552:	ea4f 1261 	mov.w	r2, r1, asr #5
   c2556:	f100 0414 	add.w	r4, r0, #20
   c255a:	dd45      	ble.n	c25e8 <rshift+0xa0>
   c255c:	f011 011f 	ands.w	r1, r1, #31
   c2560:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c2564:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c2568:	d10c      	bne.n	c2584 <rshift+0x3c>
   c256a:	f100 0710 	add.w	r7, r0, #16
   c256e:	4629      	mov	r1, r5
   c2570:	42b1      	cmp	r1, r6
   c2572:	d334      	bcc.n	c25de <rshift+0x96>
   c2574:	1a9b      	subs	r3, r3, r2
   c2576:	009b      	lsls	r3, r3, #2
   c2578:	1eea      	subs	r2, r5, #3
   c257a:	4296      	cmp	r6, r2
   c257c:	bf38      	it	cc
   c257e:	2300      	movcc	r3, #0
   c2580:	4423      	add	r3, r4
   c2582:	e015      	b.n	c25b0 <rshift+0x68>
   c2584:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c2588:	f1c1 0820 	rsb	r8, r1, #32
   c258c:	40cf      	lsrs	r7, r1
   c258e:	f105 0e04 	add.w	lr, r5, #4
   c2592:	46a1      	mov	r9, r4
   c2594:	4576      	cmp	r6, lr
   c2596:	46f4      	mov	ip, lr
   c2598:	d815      	bhi.n	c25c6 <rshift+0x7e>
   c259a:	1a9a      	subs	r2, r3, r2
   c259c:	0092      	lsls	r2, r2, #2
   c259e:	3a04      	subs	r2, #4
   c25a0:	3501      	adds	r5, #1
   c25a2:	42ae      	cmp	r6, r5
   c25a4:	bf38      	it	cc
   c25a6:	2200      	movcc	r2, #0
   c25a8:	18a3      	adds	r3, r4, r2
   c25aa:	50a7      	str	r7, [r4, r2]
   c25ac:	b107      	cbz	r7, c25b0 <rshift+0x68>
   c25ae:	3304      	adds	r3, #4
   c25b0:	1b1a      	subs	r2, r3, r4
   c25b2:	42a3      	cmp	r3, r4
   c25b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c25b8:	bf08      	it	eq
   c25ba:	2300      	moveq	r3, #0
   c25bc:	6102      	str	r2, [r0, #16]
   c25be:	bf08      	it	eq
   c25c0:	6143      	streq	r3, [r0, #20]
   c25c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c25c6:	f8dc c000 	ldr.w	ip, [ip]
   c25ca:	fa0c fc08 	lsl.w	ip, ip, r8
   c25ce:	ea4c 0707 	orr.w	r7, ip, r7
   c25d2:	f849 7b04 	str.w	r7, [r9], #4
   c25d6:	f85e 7b04 	ldr.w	r7, [lr], #4
   c25da:	40cf      	lsrs	r7, r1
   c25dc:	e7da      	b.n	c2594 <rshift+0x4c>
   c25de:	f851 cb04 	ldr.w	ip, [r1], #4
   c25e2:	f847 cf04 	str.w	ip, [r7, #4]!
   c25e6:	e7c3      	b.n	c2570 <rshift+0x28>
   c25e8:	4623      	mov	r3, r4
   c25ea:	e7e1      	b.n	c25b0 <rshift+0x68>

000c25ec <__hexdig_fun>:
   c25ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c25f0:	2b09      	cmp	r3, #9
   c25f2:	d802      	bhi.n	c25fa <__hexdig_fun+0xe>
   c25f4:	3820      	subs	r0, #32
   c25f6:	b2c0      	uxtb	r0, r0
   c25f8:	4770      	bx	lr
   c25fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c25fe:	2b05      	cmp	r3, #5
   c2600:	d801      	bhi.n	c2606 <__hexdig_fun+0x1a>
   c2602:	3847      	subs	r0, #71	; 0x47
   c2604:	e7f7      	b.n	c25f6 <__hexdig_fun+0xa>
   c2606:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c260a:	2b05      	cmp	r3, #5
   c260c:	d801      	bhi.n	c2612 <__hexdig_fun+0x26>
   c260e:	3827      	subs	r0, #39	; 0x27
   c2610:	e7f1      	b.n	c25f6 <__hexdig_fun+0xa>
   c2612:	2000      	movs	r0, #0
   c2614:	4770      	bx	lr
	...

000c2618 <__gethex>:
   c2618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c261c:	ed2d 8b02 	vpush	{d8}
   c2620:	b089      	sub	sp, #36	; 0x24
   c2622:	ee08 0a10 	vmov	s16, r0
   c2626:	9304      	str	r3, [sp, #16]
   c2628:	4bb4      	ldr	r3, [pc, #720]	; (c28fc <__gethex+0x2e4>)
   c262a:	681b      	ldr	r3, [r3, #0]
   c262c:	9301      	str	r3, [sp, #4]
   c262e:	4618      	mov	r0, r3
   c2630:	468b      	mov	fp, r1
   c2632:	4690      	mov	r8, r2
   c2634:	f7ff f805 	bl	c1642 <strlen>
   c2638:	9b01      	ldr	r3, [sp, #4]
   c263a:	f8db 2000 	ldr.w	r2, [fp]
   c263e:	4403      	add	r3, r0
   c2640:	4682      	mov	sl, r0
   c2642:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c2646:	9305      	str	r3, [sp, #20]
   c2648:	1c93      	adds	r3, r2, #2
   c264a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c264e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c2652:	32fe      	adds	r2, #254	; 0xfe
   c2654:	18d1      	adds	r1, r2, r3
   c2656:	461f      	mov	r7, r3
   c2658:	f813 0b01 	ldrb.w	r0, [r3], #1
   c265c:	9100      	str	r1, [sp, #0]
   c265e:	2830      	cmp	r0, #48	; 0x30
   c2660:	d0f8      	beq.n	c2654 <__gethex+0x3c>
   c2662:	f7ff ffc3 	bl	c25ec <__hexdig_fun>
   c2666:	4604      	mov	r4, r0
   c2668:	2800      	cmp	r0, #0
   c266a:	d13a      	bne.n	c26e2 <__gethex+0xca>
   c266c:	9901      	ldr	r1, [sp, #4]
   c266e:	4652      	mov	r2, sl
   c2670:	4638      	mov	r0, r7
   c2672:	f7ff f801 	bl	c1678 <strncmp>
   c2676:	4605      	mov	r5, r0
   c2678:	2800      	cmp	r0, #0
   c267a:	d168      	bne.n	c274e <__gethex+0x136>
   c267c:	f817 000a 	ldrb.w	r0, [r7, sl]
   c2680:	eb07 060a 	add.w	r6, r7, sl
   c2684:	f7ff ffb2 	bl	c25ec <__hexdig_fun>
   c2688:	2800      	cmp	r0, #0
   c268a:	d062      	beq.n	c2752 <__gethex+0x13a>
   c268c:	4633      	mov	r3, r6
   c268e:	7818      	ldrb	r0, [r3, #0]
   c2690:	2830      	cmp	r0, #48	; 0x30
   c2692:	461f      	mov	r7, r3
   c2694:	f103 0301 	add.w	r3, r3, #1
   c2698:	d0f9      	beq.n	c268e <__gethex+0x76>
   c269a:	f7ff ffa7 	bl	c25ec <__hexdig_fun>
   c269e:	2301      	movs	r3, #1
   c26a0:	fab0 f480 	clz	r4, r0
   c26a4:	0964      	lsrs	r4, r4, #5
   c26a6:	4635      	mov	r5, r6
   c26a8:	9300      	str	r3, [sp, #0]
   c26aa:	463a      	mov	r2, r7
   c26ac:	4616      	mov	r6, r2
   c26ae:	3201      	adds	r2, #1
   c26b0:	7830      	ldrb	r0, [r6, #0]
   c26b2:	f7ff ff9b 	bl	c25ec <__hexdig_fun>
   c26b6:	2800      	cmp	r0, #0
   c26b8:	d1f8      	bne.n	c26ac <__gethex+0x94>
   c26ba:	9901      	ldr	r1, [sp, #4]
   c26bc:	4652      	mov	r2, sl
   c26be:	4630      	mov	r0, r6
   c26c0:	f7fe ffda 	bl	c1678 <strncmp>
   c26c4:	b980      	cbnz	r0, c26e8 <__gethex+0xd0>
   c26c6:	b94d      	cbnz	r5, c26dc <__gethex+0xc4>
   c26c8:	eb06 050a 	add.w	r5, r6, sl
   c26cc:	462a      	mov	r2, r5
   c26ce:	4616      	mov	r6, r2
   c26d0:	3201      	adds	r2, #1
   c26d2:	7830      	ldrb	r0, [r6, #0]
   c26d4:	f7ff ff8a 	bl	c25ec <__hexdig_fun>
   c26d8:	2800      	cmp	r0, #0
   c26da:	d1f8      	bne.n	c26ce <__gethex+0xb6>
   c26dc:	1bad      	subs	r5, r5, r6
   c26de:	00ad      	lsls	r5, r5, #2
   c26e0:	e004      	b.n	c26ec <__gethex+0xd4>
   c26e2:	2400      	movs	r4, #0
   c26e4:	4625      	mov	r5, r4
   c26e6:	e7e0      	b.n	c26aa <__gethex+0x92>
   c26e8:	2d00      	cmp	r5, #0
   c26ea:	d1f7      	bne.n	c26dc <__gethex+0xc4>
   c26ec:	7833      	ldrb	r3, [r6, #0]
   c26ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c26f2:	2b50      	cmp	r3, #80	; 0x50
   c26f4:	d13b      	bne.n	c276e <__gethex+0x156>
   c26f6:	7873      	ldrb	r3, [r6, #1]
   c26f8:	2b2b      	cmp	r3, #43	; 0x2b
   c26fa:	d02c      	beq.n	c2756 <__gethex+0x13e>
   c26fc:	2b2d      	cmp	r3, #45	; 0x2d
   c26fe:	d02e      	beq.n	c275e <__gethex+0x146>
   c2700:	1c71      	adds	r1, r6, #1
   c2702:	f04f 0900 	mov.w	r9, #0
   c2706:	7808      	ldrb	r0, [r1, #0]
   c2708:	f7ff ff70 	bl	c25ec <__hexdig_fun>
   c270c:	1e43      	subs	r3, r0, #1
   c270e:	b2db      	uxtb	r3, r3
   c2710:	2b18      	cmp	r3, #24
   c2712:	d82c      	bhi.n	c276e <__gethex+0x156>
   c2714:	f1a0 0210 	sub.w	r2, r0, #16
   c2718:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c271c:	f7ff ff66 	bl	c25ec <__hexdig_fun>
   c2720:	1e43      	subs	r3, r0, #1
   c2722:	b2db      	uxtb	r3, r3
   c2724:	2b18      	cmp	r3, #24
   c2726:	d91d      	bls.n	c2764 <__gethex+0x14c>
   c2728:	f1b9 0f00 	cmp.w	r9, #0
   c272c:	d000      	beq.n	c2730 <__gethex+0x118>
   c272e:	4252      	negs	r2, r2
   c2730:	4415      	add	r5, r2
   c2732:	f8cb 1000 	str.w	r1, [fp]
   c2736:	b1e4      	cbz	r4, c2772 <__gethex+0x15a>
   c2738:	9b00      	ldr	r3, [sp, #0]
   c273a:	2b00      	cmp	r3, #0
   c273c:	bf14      	ite	ne
   c273e:	2700      	movne	r7, #0
   c2740:	2706      	moveq	r7, #6
   c2742:	4638      	mov	r0, r7
   c2744:	b009      	add	sp, #36	; 0x24
   c2746:	ecbd 8b02 	vpop	{d8}
   c274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c274e:	463e      	mov	r6, r7
   c2750:	4625      	mov	r5, r4
   c2752:	2401      	movs	r4, #1
   c2754:	e7ca      	b.n	c26ec <__gethex+0xd4>
   c2756:	f04f 0900 	mov.w	r9, #0
   c275a:	1cb1      	adds	r1, r6, #2
   c275c:	e7d3      	b.n	c2706 <__gethex+0xee>
   c275e:	f04f 0901 	mov.w	r9, #1
   c2762:	e7fa      	b.n	c275a <__gethex+0x142>
   c2764:	230a      	movs	r3, #10
   c2766:	fb03 0202 	mla	r2, r3, r2, r0
   c276a:	3a10      	subs	r2, #16
   c276c:	e7d4      	b.n	c2718 <__gethex+0x100>
   c276e:	4631      	mov	r1, r6
   c2770:	e7df      	b.n	c2732 <__gethex+0x11a>
   c2772:	1bf3      	subs	r3, r6, r7
   c2774:	3b01      	subs	r3, #1
   c2776:	4621      	mov	r1, r4
   c2778:	2b07      	cmp	r3, #7
   c277a:	dc0b      	bgt.n	c2794 <__gethex+0x17c>
   c277c:	ee18 0a10 	vmov	r0, s16
   c2780:	f000 fa68 	bl	c2c54 <_Balloc>
   c2784:	4604      	mov	r4, r0
   c2786:	b940      	cbnz	r0, c279a <__gethex+0x182>
   c2788:	4b5d      	ldr	r3, [pc, #372]	; (c2900 <__gethex+0x2e8>)
   c278a:	4602      	mov	r2, r0
   c278c:	21de      	movs	r1, #222	; 0xde
   c278e:	485d      	ldr	r0, [pc, #372]	; (c2904 <__gethex+0x2ec>)
   c2790:	f7fa f9d4 	bl	bcb3c <__assert_func>
   c2794:	3101      	adds	r1, #1
   c2796:	105b      	asrs	r3, r3, #1
   c2798:	e7ee      	b.n	c2778 <__gethex+0x160>
   c279a:	f100 0914 	add.w	r9, r0, #20
   c279e:	f04f 0b00 	mov.w	fp, #0
   c27a2:	f1ca 0301 	rsb	r3, sl, #1
   c27a6:	f8cd 9008 	str.w	r9, [sp, #8]
   c27aa:	f8cd b000 	str.w	fp, [sp]
   c27ae:	9306      	str	r3, [sp, #24]
   c27b0:	42b7      	cmp	r7, r6
   c27b2:	d340      	bcc.n	c2836 <__gethex+0x21e>
   c27b4:	9802      	ldr	r0, [sp, #8]
   c27b6:	9b00      	ldr	r3, [sp, #0]
   c27b8:	f840 3b04 	str.w	r3, [r0], #4
   c27bc:	eba0 0009 	sub.w	r0, r0, r9
   c27c0:	1080      	asrs	r0, r0, #2
   c27c2:	0146      	lsls	r6, r0, #5
   c27c4:	6120      	str	r0, [r4, #16]
   c27c6:	4618      	mov	r0, r3
   c27c8:	f000 fb36 	bl	c2e38 <__hi0bits>
   c27cc:	1a30      	subs	r0, r6, r0
   c27ce:	f8d8 6000 	ldr.w	r6, [r8]
   c27d2:	42b0      	cmp	r0, r6
   c27d4:	dd63      	ble.n	c289e <__gethex+0x286>
   c27d6:	1b87      	subs	r7, r0, r6
   c27d8:	4639      	mov	r1, r7
   c27da:	4620      	mov	r0, r4
   c27dc:	f000 feda 	bl	c3594 <__any_on>
   c27e0:	4682      	mov	sl, r0
   c27e2:	b1a8      	cbz	r0, c2810 <__gethex+0x1f8>
   c27e4:	1e7b      	subs	r3, r7, #1
   c27e6:	1159      	asrs	r1, r3, #5
   c27e8:	f003 021f 	and.w	r2, r3, #31
   c27ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c27f0:	f04f 0a01 	mov.w	sl, #1
   c27f4:	fa0a f202 	lsl.w	r2, sl, r2
   c27f8:	420a      	tst	r2, r1
   c27fa:	d009      	beq.n	c2810 <__gethex+0x1f8>
   c27fc:	4553      	cmp	r3, sl
   c27fe:	dd05      	ble.n	c280c <__gethex+0x1f4>
   c2800:	1eb9      	subs	r1, r7, #2
   c2802:	4620      	mov	r0, r4
   c2804:	f000 fec6 	bl	c3594 <__any_on>
   c2808:	2800      	cmp	r0, #0
   c280a:	d145      	bne.n	c2898 <__gethex+0x280>
   c280c:	f04f 0a02 	mov.w	sl, #2
   c2810:	4639      	mov	r1, r7
   c2812:	4620      	mov	r0, r4
   c2814:	f7ff fe98 	bl	c2548 <rshift>
   c2818:	443d      	add	r5, r7
   c281a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c281e:	42ab      	cmp	r3, r5
   c2820:	da4c      	bge.n	c28bc <__gethex+0x2a4>
   c2822:	ee18 0a10 	vmov	r0, s16
   c2826:	4621      	mov	r1, r4
   c2828:	f000 fa54 	bl	c2cd4 <_Bfree>
   c282c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c282e:	2300      	movs	r3, #0
   c2830:	6013      	str	r3, [r2, #0]
   c2832:	27a3      	movs	r7, #163	; 0xa3
   c2834:	e785      	b.n	c2742 <__gethex+0x12a>
   c2836:	1e73      	subs	r3, r6, #1
   c2838:	9a05      	ldr	r2, [sp, #20]
   c283a:	9303      	str	r3, [sp, #12]
   c283c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c2840:	4293      	cmp	r3, r2
   c2842:	d019      	beq.n	c2878 <__gethex+0x260>
   c2844:	f1bb 0f20 	cmp.w	fp, #32
   c2848:	d107      	bne.n	c285a <__gethex+0x242>
   c284a:	9b02      	ldr	r3, [sp, #8]
   c284c:	9a00      	ldr	r2, [sp, #0]
   c284e:	f843 2b04 	str.w	r2, [r3], #4
   c2852:	9302      	str	r3, [sp, #8]
   c2854:	2300      	movs	r3, #0
   c2856:	9300      	str	r3, [sp, #0]
   c2858:	469b      	mov	fp, r3
   c285a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c285e:	f7ff fec5 	bl	c25ec <__hexdig_fun>
   c2862:	9b00      	ldr	r3, [sp, #0]
   c2864:	f000 000f 	and.w	r0, r0, #15
   c2868:	fa00 f00b 	lsl.w	r0, r0, fp
   c286c:	4303      	orrs	r3, r0
   c286e:	9300      	str	r3, [sp, #0]
   c2870:	f10b 0b04 	add.w	fp, fp, #4
   c2874:	9b03      	ldr	r3, [sp, #12]
   c2876:	e00d      	b.n	c2894 <__gethex+0x27c>
   c2878:	9b03      	ldr	r3, [sp, #12]
   c287a:	9a06      	ldr	r2, [sp, #24]
   c287c:	4413      	add	r3, r2
   c287e:	42bb      	cmp	r3, r7
   c2880:	d3e0      	bcc.n	c2844 <__gethex+0x22c>
   c2882:	4618      	mov	r0, r3
   c2884:	9901      	ldr	r1, [sp, #4]
   c2886:	9307      	str	r3, [sp, #28]
   c2888:	4652      	mov	r2, sl
   c288a:	f7fe fef5 	bl	c1678 <strncmp>
   c288e:	9b07      	ldr	r3, [sp, #28]
   c2890:	2800      	cmp	r0, #0
   c2892:	d1d7      	bne.n	c2844 <__gethex+0x22c>
   c2894:	461e      	mov	r6, r3
   c2896:	e78b      	b.n	c27b0 <__gethex+0x198>
   c2898:	f04f 0a03 	mov.w	sl, #3
   c289c:	e7b8      	b.n	c2810 <__gethex+0x1f8>
   c289e:	da0a      	bge.n	c28b6 <__gethex+0x29e>
   c28a0:	1a37      	subs	r7, r6, r0
   c28a2:	4621      	mov	r1, r4
   c28a4:	ee18 0a10 	vmov	r0, s16
   c28a8:	463a      	mov	r2, r7
   c28aa:	f000 fc2f 	bl	c310c <__lshift>
   c28ae:	1bed      	subs	r5, r5, r7
   c28b0:	4604      	mov	r4, r0
   c28b2:	f100 0914 	add.w	r9, r0, #20
   c28b6:	f04f 0a00 	mov.w	sl, #0
   c28ba:	e7ae      	b.n	c281a <__gethex+0x202>
   c28bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c28c0:	42a8      	cmp	r0, r5
   c28c2:	dd72      	ble.n	c29aa <__gethex+0x392>
   c28c4:	1b45      	subs	r5, r0, r5
   c28c6:	42ae      	cmp	r6, r5
   c28c8:	dc36      	bgt.n	c2938 <__gethex+0x320>
   c28ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c28ce:	2b02      	cmp	r3, #2
   c28d0:	d02a      	beq.n	c2928 <__gethex+0x310>
   c28d2:	2b03      	cmp	r3, #3
   c28d4:	d02c      	beq.n	c2930 <__gethex+0x318>
   c28d6:	2b01      	cmp	r3, #1
   c28d8:	d11c      	bne.n	c2914 <__gethex+0x2fc>
   c28da:	42ae      	cmp	r6, r5
   c28dc:	d11a      	bne.n	c2914 <__gethex+0x2fc>
   c28de:	2e01      	cmp	r6, #1
   c28e0:	d112      	bne.n	c2908 <__gethex+0x2f0>
   c28e2:	9a04      	ldr	r2, [sp, #16]
   c28e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c28e8:	6013      	str	r3, [r2, #0]
   c28ea:	2301      	movs	r3, #1
   c28ec:	6123      	str	r3, [r4, #16]
   c28ee:	f8c9 3000 	str.w	r3, [r9]
   c28f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c28f4:	2762      	movs	r7, #98	; 0x62
   c28f6:	601c      	str	r4, [r3, #0]
   c28f8:	e723      	b.n	c2742 <__gethex+0x12a>
   c28fa:	bf00      	nop
   c28fc:	000c51f0 	.word	0x000c51f0
   c2900:	000c5159 	.word	0x000c5159
   c2904:	000c516a 	.word	0x000c516a
   c2908:	1e71      	subs	r1, r6, #1
   c290a:	4620      	mov	r0, r4
   c290c:	f000 fe42 	bl	c3594 <__any_on>
   c2910:	2800      	cmp	r0, #0
   c2912:	d1e6      	bne.n	c28e2 <__gethex+0x2ca>
   c2914:	ee18 0a10 	vmov	r0, s16
   c2918:	4621      	mov	r1, r4
   c291a:	f000 f9db 	bl	c2cd4 <_Bfree>
   c291e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c2920:	2300      	movs	r3, #0
   c2922:	6013      	str	r3, [r2, #0]
   c2924:	2750      	movs	r7, #80	; 0x50
   c2926:	e70c      	b.n	c2742 <__gethex+0x12a>
   c2928:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c292a:	2b00      	cmp	r3, #0
   c292c:	d1f2      	bne.n	c2914 <__gethex+0x2fc>
   c292e:	e7d8      	b.n	c28e2 <__gethex+0x2ca>
   c2930:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2932:	2b00      	cmp	r3, #0
   c2934:	d1d5      	bne.n	c28e2 <__gethex+0x2ca>
   c2936:	e7ed      	b.n	c2914 <__gethex+0x2fc>
   c2938:	1e6f      	subs	r7, r5, #1
   c293a:	f1ba 0f00 	cmp.w	sl, #0
   c293e:	d131      	bne.n	c29a4 <__gethex+0x38c>
   c2940:	b127      	cbz	r7, c294c <__gethex+0x334>
   c2942:	4639      	mov	r1, r7
   c2944:	4620      	mov	r0, r4
   c2946:	f000 fe25 	bl	c3594 <__any_on>
   c294a:	4682      	mov	sl, r0
   c294c:	117b      	asrs	r3, r7, #5
   c294e:	2101      	movs	r1, #1
   c2950:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c2954:	f007 071f 	and.w	r7, r7, #31
   c2958:	fa01 f707 	lsl.w	r7, r1, r7
   c295c:	421f      	tst	r7, r3
   c295e:	4629      	mov	r1, r5
   c2960:	4620      	mov	r0, r4
   c2962:	bf18      	it	ne
   c2964:	f04a 0a02 	orrne.w	sl, sl, #2
   c2968:	1b76      	subs	r6, r6, r5
   c296a:	f7ff fded 	bl	c2548 <rshift>
   c296e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c2972:	2702      	movs	r7, #2
   c2974:	f1ba 0f00 	cmp.w	sl, #0
   c2978:	d048      	beq.n	c2a0c <__gethex+0x3f4>
   c297a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c297e:	2b02      	cmp	r3, #2
   c2980:	d015      	beq.n	c29ae <__gethex+0x396>
   c2982:	2b03      	cmp	r3, #3
   c2984:	d017      	beq.n	c29b6 <__gethex+0x39e>
   c2986:	2b01      	cmp	r3, #1
   c2988:	d109      	bne.n	c299e <__gethex+0x386>
   c298a:	f01a 0f02 	tst.w	sl, #2
   c298e:	d006      	beq.n	c299e <__gethex+0x386>
   c2990:	f8d9 0000 	ldr.w	r0, [r9]
   c2994:	ea4a 0a00 	orr.w	sl, sl, r0
   c2998:	f01a 0f01 	tst.w	sl, #1
   c299c:	d10e      	bne.n	c29bc <__gethex+0x3a4>
   c299e:	f047 0710 	orr.w	r7, r7, #16
   c29a2:	e033      	b.n	c2a0c <__gethex+0x3f4>
   c29a4:	f04f 0a01 	mov.w	sl, #1
   c29a8:	e7d0      	b.n	c294c <__gethex+0x334>
   c29aa:	2701      	movs	r7, #1
   c29ac:	e7e2      	b.n	c2974 <__gethex+0x35c>
   c29ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c29b0:	f1c3 0301 	rsb	r3, r3, #1
   c29b4:	9315      	str	r3, [sp, #84]	; 0x54
   c29b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c29b8:	2b00      	cmp	r3, #0
   c29ba:	d0f0      	beq.n	c299e <__gethex+0x386>
   c29bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c29c0:	f104 0314 	add.w	r3, r4, #20
   c29c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c29c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c29cc:	f04f 0c00 	mov.w	ip, #0
   c29d0:	4618      	mov	r0, r3
   c29d2:	f853 2b04 	ldr.w	r2, [r3], #4
   c29d6:	f1b2 3fff 	cmp.w	r2, #4294967295
   c29da:	d01c      	beq.n	c2a16 <__gethex+0x3fe>
   c29dc:	3201      	adds	r2, #1
   c29de:	6002      	str	r2, [r0, #0]
   c29e0:	2f02      	cmp	r7, #2
   c29e2:	f104 0314 	add.w	r3, r4, #20
   c29e6:	d13f      	bne.n	c2a68 <__gethex+0x450>
   c29e8:	f8d8 2000 	ldr.w	r2, [r8]
   c29ec:	3a01      	subs	r2, #1
   c29ee:	42b2      	cmp	r2, r6
   c29f0:	d10a      	bne.n	c2a08 <__gethex+0x3f0>
   c29f2:	1171      	asrs	r1, r6, #5
   c29f4:	2201      	movs	r2, #1
   c29f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c29fa:	f006 061f 	and.w	r6, r6, #31
   c29fe:	fa02 f606 	lsl.w	r6, r2, r6
   c2a02:	421e      	tst	r6, r3
   c2a04:	bf18      	it	ne
   c2a06:	4617      	movne	r7, r2
   c2a08:	f047 0720 	orr.w	r7, r7, #32
   c2a0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2a0e:	601c      	str	r4, [r3, #0]
   c2a10:	9b04      	ldr	r3, [sp, #16]
   c2a12:	601d      	str	r5, [r3, #0]
   c2a14:	e695      	b.n	c2742 <__gethex+0x12a>
   c2a16:	4299      	cmp	r1, r3
   c2a18:	f843 cc04 	str.w	ip, [r3, #-4]
   c2a1c:	d8d8      	bhi.n	c29d0 <__gethex+0x3b8>
   c2a1e:	68a3      	ldr	r3, [r4, #8]
   c2a20:	459b      	cmp	fp, r3
   c2a22:	db19      	blt.n	c2a58 <__gethex+0x440>
   c2a24:	6861      	ldr	r1, [r4, #4]
   c2a26:	ee18 0a10 	vmov	r0, s16
   c2a2a:	3101      	adds	r1, #1
   c2a2c:	f000 f912 	bl	c2c54 <_Balloc>
   c2a30:	4681      	mov	r9, r0
   c2a32:	b918      	cbnz	r0, c2a3c <__gethex+0x424>
   c2a34:	4b1a      	ldr	r3, [pc, #104]	; (c2aa0 <__gethex+0x488>)
   c2a36:	4602      	mov	r2, r0
   c2a38:	2184      	movs	r1, #132	; 0x84
   c2a3a:	e6a8      	b.n	c278e <__gethex+0x176>
   c2a3c:	6922      	ldr	r2, [r4, #16]
   c2a3e:	3202      	adds	r2, #2
   c2a40:	f104 010c 	add.w	r1, r4, #12
   c2a44:	0092      	lsls	r2, r2, #2
   c2a46:	300c      	adds	r0, #12
   c2a48:	f7fe fd48 	bl	c14dc <memcpy>
   c2a4c:	4621      	mov	r1, r4
   c2a4e:	ee18 0a10 	vmov	r0, s16
   c2a52:	f000 f93f 	bl	c2cd4 <_Bfree>
   c2a56:	464c      	mov	r4, r9
   c2a58:	6923      	ldr	r3, [r4, #16]
   c2a5a:	1c5a      	adds	r2, r3, #1
   c2a5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c2a60:	6122      	str	r2, [r4, #16]
   c2a62:	2201      	movs	r2, #1
   c2a64:	615a      	str	r2, [r3, #20]
   c2a66:	e7bb      	b.n	c29e0 <__gethex+0x3c8>
   c2a68:	6922      	ldr	r2, [r4, #16]
   c2a6a:	455a      	cmp	r2, fp
   c2a6c:	dd0b      	ble.n	c2a86 <__gethex+0x46e>
   c2a6e:	2101      	movs	r1, #1
   c2a70:	4620      	mov	r0, r4
   c2a72:	f7ff fd69 	bl	c2548 <rshift>
   c2a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c2a7a:	3501      	adds	r5, #1
   c2a7c:	42ab      	cmp	r3, r5
   c2a7e:	f6ff aed0 	blt.w	c2822 <__gethex+0x20a>
   c2a82:	2701      	movs	r7, #1
   c2a84:	e7c0      	b.n	c2a08 <__gethex+0x3f0>
   c2a86:	f016 061f 	ands.w	r6, r6, #31
   c2a8a:	d0fa      	beq.n	c2a82 <__gethex+0x46a>
   c2a8c:	4453      	add	r3, sl
   c2a8e:	f1c6 0620 	rsb	r6, r6, #32
   c2a92:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c2a96:	f000 f9cf 	bl	c2e38 <__hi0bits>
   c2a9a:	42b0      	cmp	r0, r6
   c2a9c:	dbe7      	blt.n	c2a6e <__gethex+0x456>
   c2a9e:	e7f0      	b.n	c2a82 <__gethex+0x46a>
   c2aa0:	000c5159 	.word	0x000c5159

000c2aa4 <L_shift>:
   c2aa4:	f1c2 0208 	rsb	r2, r2, #8
   c2aa8:	0092      	lsls	r2, r2, #2
   c2aaa:	b570      	push	{r4, r5, r6, lr}
   c2aac:	f1c2 0620 	rsb	r6, r2, #32
   c2ab0:	6843      	ldr	r3, [r0, #4]
   c2ab2:	6804      	ldr	r4, [r0, #0]
   c2ab4:	fa03 f506 	lsl.w	r5, r3, r6
   c2ab8:	432c      	orrs	r4, r5
   c2aba:	40d3      	lsrs	r3, r2
   c2abc:	6004      	str	r4, [r0, #0]
   c2abe:	f840 3f04 	str.w	r3, [r0, #4]!
   c2ac2:	4288      	cmp	r0, r1
   c2ac4:	d3f4      	bcc.n	c2ab0 <L_shift+0xc>
   c2ac6:	bd70      	pop	{r4, r5, r6, pc}

000c2ac8 <__match>:
   c2ac8:	b530      	push	{r4, r5, lr}
   c2aca:	6803      	ldr	r3, [r0, #0]
   c2acc:	3301      	adds	r3, #1
   c2ace:	f811 4b01 	ldrb.w	r4, [r1], #1
   c2ad2:	b914      	cbnz	r4, c2ada <__match+0x12>
   c2ad4:	6003      	str	r3, [r0, #0]
   c2ad6:	2001      	movs	r0, #1
   c2ad8:	bd30      	pop	{r4, r5, pc}
   c2ada:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2ade:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c2ae2:	2d19      	cmp	r5, #25
   c2ae4:	bf98      	it	ls
   c2ae6:	3220      	addls	r2, #32
   c2ae8:	42a2      	cmp	r2, r4
   c2aea:	d0f0      	beq.n	c2ace <__match+0x6>
   c2aec:	2000      	movs	r0, #0
   c2aee:	e7f3      	b.n	c2ad8 <__match+0x10>

000c2af0 <__hexnan>:
   c2af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2af4:	680b      	ldr	r3, [r1, #0]
   c2af6:	115e      	asrs	r6, r3, #5
   c2af8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c2afc:	f013 031f 	ands.w	r3, r3, #31
   c2b00:	b087      	sub	sp, #28
   c2b02:	bf18      	it	ne
   c2b04:	3604      	addne	r6, #4
   c2b06:	2500      	movs	r5, #0
   c2b08:	1f37      	subs	r7, r6, #4
   c2b0a:	4690      	mov	r8, r2
   c2b0c:	6802      	ldr	r2, [r0, #0]
   c2b0e:	9301      	str	r3, [sp, #4]
   c2b10:	4682      	mov	sl, r0
   c2b12:	f846 5c04 	str.w	r5, [r6, #-4]
   c2b16:	46b9      	mov	r9, r7
   c2b18:	463c      	mov	r4, r7
   c2b1a:	9502      	str	r5, [sp, #8]
   c2b1c:	46ab      	mov	fp, r5
   c2b1e:	7851      	ldrb	r1, [r2, #1]
   c2b20:	1c53      	adds	r3, r2, #1
   c2b22:	9303      	str	r3, [sp, #12]
   c2b24:	b341      	cbz	r1, c2b78 <__hexnan+0x88>
   c2b26:	4608      	mov	r0, r1
   c2b28:	9205      	str	r2, [sp, #20]
   c2b2a:	9104      	str	r1, [sp, #16]
   c2b2c:	f7ff fd5e 	bl	c25ec <__hexdig_fun>
   c2b30:	2800      	cmp	r0, #0
   c2b32:	d14f      	bne.n	c2bd4 <__hexnan+0xe4>
   c2b34:	9904      	ldr	r1, [sp, #16]
   c2b36:	9a05      	ldr	r2, [sp, #20]
   c2b38:	2920      	cmp	r1, #32
   c2b3a:	d818      	bhi.n	c2b6e <__hexnan+0x7e>
   c2b3c:	9b02      	ldr	r3, [sp, #8]
   c2b3e:	459b      	cmp	fp, r3
   c2b40:	dd13      	ble.n	c2b6a <__hexnan+0x7a>
   c2b42:	454c      	cmp	r4, r9
   c2b44:	d206      	bcs.n	c2b54 <__hexnan+0x64>
   c2b46:	2d07      	cmp	r5, #7
   c2b48:	dc04      	bgt.n	c2b54 <__hexnan+0x64>
   c2b4a:	462a      	mov	r2, r5
   c2b4c:	4649      	mov	r1, r9
   c2b4e:	4620      	mov	r0, r4
   c2b50:	f7ff ffa8 	bl	c2aa4 <L_shift>
   c2b54:	4544      	cmp	r4, r8
   c2b56:	d950      	bls.n	c2bfa <__hexnan+0x10a>
   c2b58:	2300      	movs	r3, #0
   c2b5a:	f1a4 0904 	sub.w	r9, r4, #4
   c2b5e:	f844 3c04 	str.w	r3, [r4, #-4]
   c2b62:	f8cd b008 	str.w	fp, [sp, #8]
   c2b66:	464c      	mov	r4, r9
   c2b68:	461d      	mov	r5, r3
   c2b6a:	9a03      	ldr	r2, [sp, #12]
   c2b6c:	e7d7      	b.n	c2b1e <__hexnan+0x2e>
   c2b6e:	2929      	cmp	r1, #41	; 0x29
   c2b70:	d156      	bne.n	c2c20 <__hexnan+0x130>
   c2b72:	3202      	adds	r2, #2
   c2b74:	f8ca 2000 	str.w	r2, [sl]
   c2b78:	f1bb 0f00 	cmp.w	fp, #0
   c2b7c:	d050      	beq.n	c2c20 <__hexnan+0x130>
   c2b7e:	454c      	cmp	r4, r9
   c2b80:	d206      	bcs.n	c2b90 <__hexnan+0xa0>
   c2b82:	2d07      	cmp	r5, #7
   c2b84:	dc04      	bgt.n	c2b90 <__hexnan+0xa0>
   c2b86:	462a      	mov	r2, r5
   c2b88:	4649      	mov	r1, r9
   c2b8a:	4620      	mov	r0, r4
   c2b8c:	f7ff ff8a 	bl	c2aa4 <L_shift>
   c2b90:	4544      	cmp	r4, r8
   c2b92:	d934      	bls.n	c2bfe <__hexnan+0x10e>
   c2b94:	f1a8 0204 	sub.w	r2, r8, #4
   c2b98:	4623      	mov	r3, r4
   c2b9a:	f853 1b04 	ldr.w	r1, [r3], #4
   c2b9e:	f842 1f04 	str.w	r1, [r2, #4]!
   c2ba2:	429f      	cmp	r7, r3
   c2ba4:	d2f9      	bcs.n	c2b9a <__hexnan+0xaa>
   c2ba6:	1b3b      	subs	r3, r7, r4
   c2ba8:	f023 0303 	bic.w	r3, r3, #3
   c2bac:	3304      	adds	r3, #4
   c2bae:	3401      	adds	r4, #1
   c2bb0:	3e03      	subs	r6, #3
   c2bb2:	42b4      	cmp	r4, r6
   c2bb4:	bf88      	it	hi
   c2bb6:	2304      	movhi	r3, #4
   c2bb8:	4443      	add	r3, r8
   c2bba:	2200      	movs	r2, #0
   c2bbc:	f843 2b04 	str.w	r2, [r3], #4
   c2bc0:	429f      	cmp	r7, r3
   c2bc2:	d2fb      	bcs.n	c2bbc <__hexnan+0xcc>
   c2bc4:	683b      	ldr	r3, [r7, #0]
   c2bc6:	b91b      	cbnz	r3, c2bd0 <__hexnan+0xe0>
   c2bc8:	4547      	cmp	r7, r8
   c2bca:	d127      	bne.n	c2c1c <__hexnan+0x12c>
   c2bcc:	2301      	movs	r3, #1
   c2bce:	603b      	str	r3, [r7, #0]
   c2bd0:	2005      	movs	r0, #5
   c2bd2:	e026      	b.n	c2c22 <__hexnan+0x132>
   c2bd4:	3501      	adds	r5, #1
   c2bd6:	2d08      	cmp	r5, #8
   c2bd8:	f10b 0b01 	add.w	fp, fp, #1
   c2bdc:	dd06      	ble.n	c2bec <__hexnan+0xfc>
   c2bde:	4544      	cmp	r4, r8
   c2be0:	d9c3      	bls.n	c2b6a <__hexnan+0x7a>
   c2be2:	2300      	movs	r3, #0
   c2be4:	f844 3c04 	str.w	r3, [r4, #-4]
   c2be8:	2501      	movs	r5, #1
   c2bea:	3c04      	subs	r4, #4
   c2bec:	6822      	ldr	r2, [r4, #0]
   c2bee:	f000 000f 	and.w	r0, r0, #15
   c2bf2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c2bf6:	6022      	str	r2, [r4, #0]
   c2bf8:	e7b7      	b.n	c2b6a <__hexnan+0x7a>
   c2bfa:	2508      	movs	r5, #8
   c2bfc:	e7b5      	b.n	c2b6a <__hexnan+0x7a>
   c2bfe:	9b01      	ldr	r3, [sp, #4]
   c2c00:	2b00      	cmp	r3, #0
   c2c02:	d0df      	beq.n	c2bc4 <__hexnan+0xd4>
   c2c04:	f04f 32ff 	mov.w	r2, #4294967295
   c2c08:	f1c3 0320 	rsb	r3, r3, #32
   c2c0c:	fa22 f303 	lsr.w	r3, r2, r3
   c2c10:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c2c14:	401a      	ands	r2, r3
   c2c16:	f846 2c04 	str.w	r2, [r6, #-4]
   c2c1a:	e7d3      	b.n	c2bc4 <__hexnan+0xd4>
   c2c1c:	3f04      	subs	r7, #4
   c2c1e:	e7d1      	b.n	c2bc4 <__hexnan+0xd4>
   c2c20:	2004      	movs	r0, #4
   c2c22:	b007      	add	sp, #28
   c2c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c2c28 <__retarget_lock_acquire_recursive>:
   c2c28:	4770      	bx	lr

000c2c2a <__retarget_lock_release>:
   c2c2a:	4770      	bx	lr

000c2c2c <__retarget_lock_release_recursive>:
   c2c2c:	4770      	bx	lr

000c2c2e <__ascii_mbtowc>:
   c2c2e:	b082      	sub	sp, #8
   c2c30:	b901      	cbnz	r1, c2c34 <__ascii_mbtowc+0x6>
   c2c32:	a901      	add	r1, sp, #4
   c2c34:	b142      	cbz	r2, c2c48 <__ascii_mbtowc+0x1a>
   c2c36:	b14b      	cbz	r3, c2c4c <__ascii_mbtowc+0x1e>
   c2c38:	7813      	ldrb	r3, [r2, #0]
   c2c3a:	600b      	str	r3, [r1, #0]
   c2c3c:	7812      	ldrb	r2, [r2, #0]
   c2c3e:	1e10      	subs	r0, r2, #0
   c2c40:	bf18      	it	ne
   c2c42:	2001      	movne	r0, #1
   c2c44:	b002      	add	sp, #8
   c2c46:	4770      	bx	lr
   c2c48:	4610      	mov	r0, r2
   c2c4a:	e7fb      	b.n	c2c44 <__ascii_mbtowc+0x16>
   c2c4c:	f06f 0001 	mvn.w	r0, #1
   c2c50:	e7f8      	b.n	c2c44 <__ascii_mbtowc+0x16>
	...

000c2c54 <_Balloc>:
   c2c54:	b570      	push	{r4, r5, r6, lr}
   c2c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2c58:	4604      	mov	r4, r0
   c2c5a:	460d      	mov	r5, r1
   c2c5c:	b976      	cbnz	r6, c2c7c <_Balloc+0x28>
   c2c5e:	2010      	movs	r0, #16
   c2c60:	f7f9 ff24 	bl	bcaac <malloc>
   c2c64:	4602      	mov	r2, r0
   c2c66:	6260      	str	r0, [r4, #36]	; 0x24
   c2c68:	b920      	cbnz	r0, c2c74 <_Balloc+0x20>
   c2c6a:	4b18      	ldr	r3, [pc, #96]	; (c2ccc <_Balloc+0x78>)
   c2c6c:	4818      	ldr	r0, [pc, #96]	; (c2cd0 <_Balloc+0x7c>)
   c2c6e:	2166      	movs	r1, #102	; 0x66
   c2c70:	f7f9 ff64 	bl	bcb3c <__assert_func>
   c2c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2c78:	6006      	str	r6, [r0, #0]
   c2c7a:	60c6      	str	r6, [r0, #12]
   c2c7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c2c7e:	68f3      	ldr	r3, [r6, #12]
   c2c80:	b183      	cbz	r3, c2ca4 <_Balloc+0x50>
   c2c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2c84:	68db      	ldr	r3, [r3, #12]
   c2c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c2c8a:	b9b8      	cbnz	r0, c2cbc <_Balloc+0x68>
   c2c8c:	2101      	movs	r1, #1
   c2c8e:	fa01 f605 	lsl.w	r6, r1, r5
   c2c92:	1d72      	adds	r2, r6, #5
   c2c94:	0092      	lsls	r2, r2, #2
   c2c96:	4620      	mov	r0, r4
   c2c98:	f000 fc9d 	bl	c35d6 <_calloc_r>
   c2c9c:	b160      	cbz	r0, c2cb8 <_Balloc+0x64>
   c2c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c2ca2:	e00e      	b.n	c2cc2 <_Balloc+0x6e>
   c2ca4:	2221      	movs	r2, #33	; 0x21
   c2ca6:	2104      	movs	r1, #4
   c2ca8:	4620      	mov	r0, r4
   c2caa:	f000 fc94 	bl	c35d6 <_calloc_r>
   c2cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2cb0:	60f0      	str	r0, [r6, #12]
   c2cb2:	68db      	ldr	r3, [r3, #12]
   c2cb4:	2b00      	cmp	r3, #0
   c2cb6:	d1e4      	bne.n	c2c82 <_Balloc+0x2e>
   c2cb8:	2000      	movs	r0, #0
   c2cba:	bd70      	pop	{r4, r5, r6, pc}
   c2cbc:	6802      	ldr	r2, [r0, #0]
   c2cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c2cc2:	2300      	movs	r3, #0
   c2cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c2cc8:	e7f7      	b.n	c2cba <_Balloc+0x66>
   c2cca:	bf00      	nop
   c2ccc:	000c4f65 	.word	0x000c4f65
   c2cd0:	000c5202 	.word	0x000c5202

000c2cd4 <_Bfree>:
   c2cd4:	b570      	push	{r4, r5, r6, lr}
   c2cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2cd8:	4605      	mov	r5, r0
   c2cda:	460c      	mov	r4, r1
   c2cdc:	b976      	cbnz	r6, c2cfc <_Bfree+0x28>
   c2cde:	2010      	movs	r0, #16
   c2ce0:	f7f9 fee4 	bl	bcaac <malloc>
   c2ce4:	4602      	mov	r2, r0
   c2ce6:	6268      	str	r0, [r5, #36]	; 0x24
   c2ce8:	b920      	cbnz	r0, c2cf4 <_Bfree+0x20>
   c2cea:	4b09      	ldr	r3, [pc, #36]	; (c2d10 <_Bfree+0x3c>)
   c2cec:	4809      	ldr	r0, [pc, #36]	; (c2d14 <_Bfree+0x40>)
   c2cee:	218a      	movs	r1, #138	; 0x8a
   c2cf0:	f7f9 ff24 	bl	bcb3c <__assert_func>
   c2cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2cf8:	6006      	str	r6, [r0, #0]
   c2cfa:	60c6      	str	r6, [r0, #12]
   c2cfc:	b13c      	cbz	r4, c2d0e <_Bfree+0x3a>
   c2cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c2d00:	6862      	ldr	r2, [r4, #4]
   c2d02:	68db      	ldr	r3, [r3, #12]
   c2d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c2d08:	6021      	str	r1, [r4, #0]
   c2d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c2d0e:	bd70      	pop	{r4, r5, r6, pc}
   c2d10:	000c4f65 	.word	0x000c4f65
   c2d14:	000c5202 	.word	0x000c5202

000c2d18 <__multadd>:
   c2d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2d1c:	690d      	ldr	r5, [r1, #16]
   c2d1e:	4607      	mov	r7, r0
   c2d20:	460c      	mov	r4, r1
   c2d22:	461e      	mov	r6, r3
   c2d24:	f101 0c14 	add.w	ip, r1, #20
   c2d28:	2000      	movs	r0, #0
   c2d2a:	f8dc 3000 	ldr.w	r3, [ip]
   c2d2e:	b299      	uxth	r1, r3
   c2d30:	fb02 6101 	mla	r1, r2, r1, r6
   c2d34:	0c1e      	lsrs	r6, r3, #16
   c2d36:	0c0b      	lsrs	r3, r1, #16
   c2d38:	fb02 3306 	mla	r3, r2, r6, r3
   c2d3c:	b289      	uxth	r1, r1
   c2d3e:	3001      	adds	r0, #1
   c2d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c2d44:	4285      	cmp	r5, r0
   c2d46:	f84c 1b04 	str.w	r1, [ip], #4
   c2d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c2d4e:	dcec      	bgt.n	c2d2a <__multadd+0x12>
   c2d50:	b30e      	cbz	r6, c2d96 <__multadd+0x7e>
   c2d52:	68a3      	ldr	r3, [r4, #8]
   c2d54:	42ab      	cmp	r3, r5
   c2d56:	dc19      	bgt.n	c2d8c <__multadd+0x74>
   c2d58:	6861      	ldr	r1, [r4, #4]
   c2d5a:	4638      	mov	r0, r7
   c2d5c:	3101      	adds	r1, #1
   c2d5e:	f7ff ff79 	bl	c2c54 <_Balloc>
   c2d62:	4680      	mov	r8, r0
   c2d64:	b928      	cbnz	r0, c2d72 <__multadd+0x5a>
   c2d66:	4602      	mov	r2, r0
   c2d68:	4b0c      	ldr	r3, [pc, #48]	; (c2d9c <__multadd+0x84>)
   c2d6a:	480d      	ldr	r0, [pc, #52]	; (c2da0 <__multadd+0x88>)
   c2d6c:	21b5      	movs	r1, #181	; 0xb5
   c2d6e:	f7f9 fee5 	bl	bcb3c <__assert_func>
   c2d72:	6922      	ldr	r2, [r4, #16]
   c2d74:	3202      	adds	r2, #2
   c2d76:	f104 010c 	add.w	r1, r4, #12
   c2d7a:	0092      	lsls	r2, r2, #2
   c2d7c:	300c      	adds	r0, #12
   c2d7e:	f7fe fbad 	bl	c14dc <memcpy>
   c2d82:	4621      	mov	r1, r4
   c2d84:	4638      	mov	r0, r7
   c2d86:	f7ff ffa5 	bl	c2cd4 <_Bfree>
   c2d8a:	4644      	mov	r4, r8
   c2d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c2d90:	3501      	adds	r5, #1
   c2d92:	615e      	str	r6, [r3, #20]
   c2d94:	6125      	str	r5, [r4, #16]
   c2d96:	4620      	mov	r0, r4
   c2d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2d9c:	000c5159 	.word	0x000c5159
   c2da0:	000c5202 	.word	0x000c5202

000c2da4 <__s2b>:
   c2da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2da8:	460c      	mov	r4, r1
   c2daa:	4615      	mov	r5, r2
   c2dac:	461f      	mov	r7, r3
   c2dae:	2209      	movs	r2, #9
   c2db0:	3308      	adds	r3, #8
   c2db2:	4606      	mov	r6, r0
   c2db4:	fb93 f3f2 	sdiv	r3, r3, r2
   c2db8:	2100      	movs	r1, #0
   c2dba:	2201      	movs	r2, #1
   c2dbc:	429a      	cmp	r2, r3
   c2dbe:	db09      	blt.n	c2dd4 <__s2b+0x30>
   c2dc0:	4630      	mov	r0, r6
   c2dc2:	f7ff ff47 	bl	c2c54 <_Balloc>
   c2dc6:	b940      	cbnz	r0, c2dda <__s2b+0x36>
   c2dc8:	4602      	mov	r2, r0
   c2dca:	4b19      	ldr	r3, [pc, #100]	; (c2e30 <__s2b+0x8c>)
   c2dcc:	4819      	ldr	r0, [pc, #100]	; (c2e34 <__s2b+0x90>)
   c2dce:	21ce      	movs	r1, #206	; 0xce
   c2dd0:	f7f9 feb4 	bl	bcb3c <__assert_func>
   c2dd4:	0052      	lsls	r2, r2, #1
   c2dd6:	3101      	adds	r1, #1
   c2dd8:	e7f0      	b.n	c2dbc <__s2b+0x18>
   c2dda:	9b08      	ldr	r3, [sp, #32]
   c2ddc:	6143      	str	r3, [r0, #20]
   c2dde:	2d09      	cmp	r5, #9
   c2de0:	f04f 0301 	mov.w	r3, #1
   c2de4:	6103      	str	r3, [r0, #16]
   c2de6:	dd16      	ble.n	c2e16 <__s2b+0x72>
   c2de8:	f104 0909 	add.w	r9, r4, #9
   c2dec:	46c8      	mov	r8, r9
   c2dee:	442c      	add	r4, r5
   c2df0:	f818 3b01 	ldrb.w	r3, [r8], #1
   c2df4:	4601      	mov	r1, r0
   c2df6:	3b30      	subs	r3, #48	; 0x30
   c2df8:	220a      	movs	r2, #10
   c2dfa:	4630      	mov	r0, r6
   c2dfc:	f7ff ff8c 	bl	c2d18 <__multadd>
   c2e00:	45a0      	cmp	r8, r4
   c2e02:	d1f5      	bne.n	c2df0 <__s2b+0x4c>
   c2e04:	f1a5 0408 	sub.w	r4, r5, #8
   c2e08:	444c      	add	r4, r9
   c2e0a:	1b2d      	subs	r5, r5, r4
   c2e0c:	1963      	adds	r3, r4, r5
   c2e0e:	42bb      	cmp	r3, r7
   c2e10:	db04      	blt.n	c2e1c <__s2b+0x78>
   c2e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2e16:	340a      	adds	r4, #10
   c2e18:	2509      	movs	r5, #9
   c2e1a:	e7f6      	b.n	c2e0a <__s2b+0x66>
   c2e1c:	f814 3b01 	ldrb.w	r3, [r4], #1
   c2e20:	4601      	mov	r1, r0
   c2e22:	3b30      	subs	r3, #48	; 0x30
   c2e24:	220a      	movs	r2, #10
   c2e26:	4630      	mov	r0, r6
   c2e28:	f7ff ff76 	bl	c2d18 <__multadd>
   c2e2c:	e7ee      	b.n	c2e0c <__s2b+0x68>
   c2e2e:	bf00      	nop
   c2e30:	000c5159 	.word	0x000c5159
   c2e34:	000c5202 	.word	0x000c5202

000c2e38 <__hi0bits>:
   c2e38:	0c03      	lsrs	r3, r0, #16
   c2e3a:	041b      	lsls	r3, r3, #16
   c2e3c:	b9d3      	cbnz	r3, c2e74 <__hi0bits+0x3c>
   c2e3e:	0400      	lsls	r0, r0, #16
   c2e40:	2310      	movs	r3, #16
   c2e42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c2e46:	bf04      	itt	eq
   c2e48:	0200      	lsleq	r0, r0, #8
   c2e4a:	3308      	addeq	r3, #8
   c2e4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c2e50:	bf04      	itt	eq
   c2e52:	0100      	lsleq	r0, r0, #4
   c2e54:	3304      	addeq	r3, #4
   c2e56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c2e5a:	bf04      	itt	eq
   c2e5c:	0080      	lsleq	r0, r0, #2
   c2e5e:	3302      	addeq	r3, #2
   c2e60:	2800      	cmp	r0, #0
   c2e62:	db05      	blt.n	c2e70 <__hi0bits+0x38>
   c2e64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c2e68:	f103 0301 	add.w	r3, r3, #1
   c2e6c:	bf08      	it	eq
   c2e6e:	2320      	moveq	r3, #32
   c2e70:	4618      	mov	r0, r3
   c2e72:	4770      	bx	lr
   c2e74:	2300      	movs	r3, #0
   c2e76:	e7e4      	b.n	c2e42 <__hi0bits+0xa>

000c2e78 <__lo0bits>:
   c2e78:	6803      	ldr	r3, [r0, #0]
   c2e7a:	f013 0207 	ands.w	r2, r3, #7
   c2e7e:	4601      	mov	r1, r0
   c2e80:	d00b      	beq.n	c2e9a <__lo0bits+0x22>
   c2e82:	07da      	lsls	r2, r3, #31
   c2e84:	d423      	bmi.n	c2ece <__lo0bits+0x56>
   c2e86:	0798      	lsls	r0, r3, #30
   c2e88:	bf49      	itett	mi
   c2e8a:	085b      	lsrmi	r3, r3, #1
   c2e8c:	089b      	lsrpl	r3, r3, #2
   c2e8e:	2001      	movmi	r0, #1
   c2e90:	600b      	strmi	r3, [r1, #0]
   c2e92:	bf5c      	itt	pl
   c2e94:	600b      	strpl	r3, [r1, #0]
   c2e96:	2002      	movpl	r0, #2
   c2e98:	4770      	bx	lr
   c2e9a:	b298      	uxth	r0, r3
   c2e9c:	b9a8      	cbnz	r0, c2eca <__lo0bits+0x52>
   c2e9e:	0c1b      	lsrs	r3, r3, #16
   c2ea0:	2010      	movs	r0, #16
   c2ea2:	b2da      	uxtb	r2, r3
   c2ea4:	b90a      	cbnz	r2, c2eaa <__lo0bits+0x32>
   c2ea6:	3008      	adds	r0, #8
   c2ea8:	0a1b      	lsrs	r3, r3, #8
   c2eaa:	071a      	lsls	r2, r3, #28
   c2eac:	bf04      	itt	eq
   c2eae:	091b      	lsreq	r3, r3, #4
   c2eb0:	3004      	addeq	r0, #4
   c2eb2:	079a      	lsls	r2, r3, #30
   c2eb4:	bf04      	itt	eq
   c2eb6:	089b      	lsreq	r3, r3, #2
   c2eb8:	3002      	addeq	r0, #2
   c2eba:	07da      	lsls	r2, r3, #31
   c2ebc:	d403      	bmi.n	c2ec6 <__lo0bits+0x4e>
   c2ebe:	085b      	lsrs	r3, r3, #1
   c2ec0:	f100 0001 	add.w	r0, r0, #1
   c2ec4:	d005      	beq.n	c2ed2 <__lo0bits+0x5a>
   c2ec6:	600b      	str	r3, [r1, #0]
   c2ec8:	4770      	bx	lr
   c2eca:	4610      	mov	r0, r2
   c2ecc:	e7e9      	b.n	c2ea2 <__lo0bits+0x2a>
   c2ece:	2000      	movs	r0, #0
   c2ed0:	4770      	bx	lr
   c2ed2:	2020      	movs	r0, #32
   c2ed4:	4770      	bx	lr
	...

000c2ed8 <__i2b>:
   c2ed8:	b510      	push	{r4, lr}
   c2eda:	460c      	mov	r4, r1
   c2edc:	2101      	movs	r1, #1
   c2ede:	f7ff feb9 	bl	c2c54 <_Balloc>
   c2ee2:	4602      	mov	r2, r0
   c2ee4:	b928      	cbnz	r0, c2ef2 <__i2b+0x1a>
   c2ee6:	4b05      	ldr	r3, [pc, #20]	; (c2efc <__i2b+0x24>)
   c2ee8:	4805      	ldr	r0, [pc, #20]	; (c2f00 <__i2b+0x28>)
   c2eea:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c2eee:	f7f9 fe25 	bl	bcb3c <__assert_func>
   c2ef2:	2301      	movs	r3, #1
   c2ef4:	6144      	str	r4, [r0, #20]
   c2ef6:	6103      	str	r3, [r0, #16]
   c2ef8:	bd10      	pop	{r4, pc}
   c2efa:	bf00      	nop
   c2efc:	000c5159 	.word	0x000c5159
   c2f00:	000c5202 	.word	0x000c5202

000c2f04 <__multiply>:
   c2f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2f08:	4691      	mov	r9, r2
   c2f0a:	690a      	ldr	r2, [r1, #16]
   c2f0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c2f10:	429a      	cmp	r2, r3
   c2f12:	bfb8      	it	lt
   c2f14:	460b      	movlt	r3, r1
   c2f16:	460c      	mov	r4, r1
   c2f18:	bfbc      	itt	lt
   c2f1a:	464c      	movlt	r4, r9
   c2f1c:	4699      	movlt	r9, r3
   c2f1e:	6927      	ldr	r7, [r4, #16]
   c2f20:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c2f24:	68a3      	ldr	r3, [r4, #8]
   c2f26:	6861      	ldr	r1, [r4, #4]
   c2f28:	eb07 060a 	add.w	r6, r7, sl
   c2f2c:	42b3      	cmp	r3, r6
   c2f2e:	b085      	sub	sp, #20
   c2f30:	bfb8      	it	lt
   c2f32:	3101      	addlt	r1, #1
   c2f34:	f7ff fe8e 	bl	c2c54 <_Balloc>
   c2f38:	b930      	cbnz	r0, c2f48 <__multiply+0x44>
   c2f3a:	4602      	mov	r2, r0
   c2f3c:	4b44      	ldr	r3, [pc, #272]	; (c3050 <__multiply+0x14c>)
   c2f3e:	4845      	ldr	r0, [pc, #276]	; (c3054 <__multiply+0x150>)
   c2f40:	f240 115d 	movw	r1, #349	; 0x15d
   c2f44:	f7f9 fdfa 	bl	bcb3c <__assert_func>
   c2f48:	f100 0514 	add.w	r5, r0, #20
   c2f4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c2f50:	462b      	mov	r3, r5
   c2f52:	2200      	movs	r2, #0
   c2f54:	4543      	cmp	r3, r8
   c2f56:	d321      	bcc.n	c2f9c <__multiply+0x98>
   c2f58:	f104 0314 	add.w	r3, r4, #20
   c2f5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c2f60:	f109 0314 	add.w	r3, r9, #20
   c2f64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c2f68:	9202      	str	r2, [sp, #8]
   c2f6a:	1b3a      	subs	r2, r7, r4
   c2f6c:	3a15      	subs	r2, #21
   c2f6e:	f022 0203 	bic.w	r2, r2, #3
   c2f72:	3204      	adds	r2, #4
   c2f74:	f104 0115 	add.w	r1, r4, #21
   c2f78:	428f      	cmp	r7, r1
   c2f7a:	bf38      	it	cc
   c2f7c:	2204      	movcc	r2, #4
   c2f7e:	9201      	str	r2, [sp, #4]
   c2f80:	9a02      	ldr	r2, [sp, #8]
   c2f82:	9303      	str	r3, [sp, #12]
   c2f84:	429a      	cmp	r2, r3
   c2f86:	d80c      	bhi.n	c2fa2 <__multiply+0x9e>
   c2f88:	2e00      	cmp	r6, #0
   c2f8a:	dd03      	ble.n	c2f94 <__multiply+0x90>
   c2f8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c2f90:	2b00      	cmp	r3, #0
   c2f92:	d05a      	beq.n	c304a <__multiply+0x146>
   c2f94:	6106      	str	r6, [r0, #16]
   c2f96:	b005      	add	sp, #20
   c2f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2f9c:	f843 2b04 	str.w	r2, [r3], #4
   c2fa0:	e7d8      	b.n	c2f54 <__multiply+0x50>
   c2fa2:	f8b3 a000 	ldrh.w	sl, [r3]
   c2fa6:	f1ba 0f00 	cmp.w	sl, #0
   c2faa:	d024      	beq.n	c2ff6 <__multiply+0xf2>
   c2fac:	f104 0e14 	add.w	lr, r4, #20
   c2fb0:	46a9      	mov	r9, r5
   c2fb2:	f04f 0c00 	mov.w	ip, #0
   c2fb6:	f85e 2b04 	ldr.w	r2, [lr], #4
   c2fba:	f8d9 1000 	ldr.w	r1, [r9]
   c2fbe:	fa1f fb82 	uxth.w	fp, r2
   c2fc2:	b289      	uxth	r1, r1
   c2fc4:	fb0a 110b 	mla	r1, sl, fp, r1
   c2fc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c2fcc:	f8d9 2000 	ldr.w	r2, [r9]
   c2fd0:	4461      	add	r1, ip
   c2fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2fd6:	fb0a c20b 	mla	r2, sl, fp, ip
   c2fda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c2fde:	b289      	uxth	r1, r1
   c2fe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c2fe4:	4577      	cmp	r7, lr
   c2fe6:	f849 1b04 	str.w	r1, [r9], #4
   c2fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2fee:	d8e2      	bhi.n	c2fb6 <__multiply+0xb2>
   c2ff0:	9a01      	ldr	r2, [sp, #4]
   c2ff2:	f845 c002 	str.w	ip, [r5, r2]
   c2ff6:	9a03      	ldr	r2, [sp, #12]
   c2ff8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c2ffc:	3304      	adds	r3, #4
   c2ffe:	f1b9 0f00 	cmp.w	r9, #0
   c3002:	d020      	beq.n	c3046 <__multiply+0x142>
   c3004:	6829      	ldr	r1, [r5, #0]
   c3006:	f104 0c14 	add.w	ip, r4, #20
   c300a:	46ae      	mov	lr, r5
   c300c:	f04f 0a00 	mov.w	sl, #0
   c3010:	f8bc b000 	ldrh.w	fp, [ip]
   c3014:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c3018:	fb09 220b 	mla	r2, r9, fp, r2
   c301c:	4492      	add	sl, r2
   c301e:	b289      	uxth	r1, r1
   c3020:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c3024:	f84e 1b04 	str.w	r1, [lr], #4
   c3028:	f85c 2b04 	ldr.w	r2, [ip], #4
   c302c:	f8be 1000 	ldrh.w	r1, [lr]
   c3030:	0c12      	lsrs	r2, r2, #16
   c3032:	fb09 1102 	mla	r1, r9, r2, r1
   c3036:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c303a:	4567      	cmp	r7, ip
   c303c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c3040:	d8e6      	bhi.n	c3010 <__multiply+0x10c>
   c3042:	9a01      	ldr	r2, [sp, #4]
   c3044:	50a9      	str	r1, [r5, r2]
   c3046:	3504      	adds	r5, #4
   c3048:	e79a      	b.n	c2f80 <__multiply+0x7c>
   c304a:	3e01      	subs	r6, #1
   c304c:	e79c      	b.n	c2f88 <__multiply+0x84>
   c304e:	bf00      	nop
   c3050:	000c5159 	.word	0x000c5159
   c3054:	000c5202 	.word	0x000c5202

000c3058 <__pow5mult>:
   c3058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c305c:	4615      	mov	r5, r2
   c305e:	f012 0203 	ands.w	r2, r2, #3
   c3062:	4606      	mov	r6, r0
   c3064:	460f      	mov	r7, r1
   c3066:	d007      	beq.n	c3078 <__pow5mult+0x20>
   c3068:	4c25      	ldr	r4, [pc, #148]	; (c3100 <__pow5mult+0xa8>)
   c306a:	3a01      	subs	r2, #1
   c306c:	2300      	movs	r3, #0
   c306e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c3072:	f7ff fe51 	bl	c2d18 <__multadd>
   c3076:	4607      	mov	r7, r0
   c3078:	10ad      	asrs	r5, r5, #2
   c307a:	d03d      	beq.n	c30f8 <__pow5mult+0xa0>
   c307c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c307e:	b97c      	cbnz	r4, c30a0 <__pow5mult+0x48>
   c3080:	2010      	movs	r0, #16
   c3082:	f7f9 fd13 	bl	bcaac <malloc>
   c3086:	4602      	mov	r2, r0
   c3088:	6270      	str	r0, [r6, #36]	; 0x24
   c308a:	b928      	cbnz	r0, c3098 <__pow5mult+0x40>
   c308c:	4b1d      	ldr	r3, [pc, #116]	; (c3104 <__pow5mult+0xac>)
   c308e:	481e      	ldr	r0, [pc, #120]	; (c3108 <__pow5mult+0xb0>)
   c3090:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c3094:	f7f9 fd52 	bl	bcb3c <__assert_func>
   c3098:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c309c:	6004      	str	r4, [r0, #0]
   c309e:	60c4      	str	r4, [r0, #12]
   c30a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c30a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c30a8:	b94c      	cbnz	r4, c30be <__pow5mult+0x66>
   c30aa:	f240 2171 	movw	r1, #625	; 0x271
   c30ae:	4630      	mov	r0, r6
   c30b0:	f7ff ff12 	bl	c2ed8 <__i2b>
   c30b4:	2300      	movs	r3, #0
   c30b6:	f8c8 0008 	str.w	r0, [r8, #8]
   c30ba:	4604      	mov	r4, r0
   c30bc:	6003      	str	r3, [r0, #0]
   c30be:	f04f 0900 	mov.w	r9, #0
   c30c2:	07eb      	lsls	r3, r5, #31
   c30c4:	d50a      	bpl.n	c30dc <__pow5mult+0x84>
   c30c6:	4639      	mov	r1, r7
   c30c8:	4622      	mov	r2, r4
   c30ca:	4630      	mov	r0, r6
   c30cc:	f7ff ff1a 	bl	c2f04 <__multiply>
   c30d0:	4639      	mov	r1, r7
   c30d2:	4680      	mov	r8, r0
   c30d4:	4630      	mov	r0, r6
   c30d6:	f7ff fdfd 	bl	c2cd4 <_Bfree>
   c30da:	4647      	mov	r7, r8
   c30dc:	106d      	asrs	r5, r5, #1
   c30de:	d00b      	beq.n	c30f8 <__pow5mult+0xa0>
   c30e0:	6820      	ldr	r0, [r4, #0]
   c30e2:	b938      	cbnz	r0, c30f4 <__pow5mult+0x9c>
   c30e4:	4622      	mov	r2, r4
   c30e6:	4621      	mov	r1, r4
   c30e8:	4630      	mov	r0, r6
   c30ea:	f7ff ff0b 	bl	c2f04 <__multiply>
   c30ee:	6020      	str	r0, [r4, #0]
   c30f0:	f8c0 9000 	str.w	r9, [r0]
   c30f4:	4604      	mov	r4, r0
   c30f6:	e7e4      	b.n	c30c2 <__pow5mult+0x6a>
   c30f8:	4638      	mov	r0, r7
   c30fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c30fe:	bf00      	nop
   c3100:	000c5370 	.word	0x000c5370
   c3104:	000c4f65 	.word	0x000c4f65
   c3108:	000c5202 	.word	0x000c5202

000c310c <__lshift>:
   c310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3110:	460c      	mov	r4, r1
   c3112:	6849      	ldr	r1, [r1, #4]
   c3114:	6923      	ldr	r3, [r4, #16]
   c3116:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c311a:	68a3      	ldr	r3, [r4, #8]
   c311c:	4607      	mov	r7, r0
   c311e:	4691      	mov	r9, r2
   c3120:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c3124:	f108 0601 	add.w	r6, r8, #1
   c3128:	42b3      	cmp	r3, r6
   c312a:	db0b      	blt.n	c3144 <__lshift+0x38>
   c312c:	4638      	mov	r0, r7
   c312e:	f7ff fd91 	bl	c2c54 <_Balloc>
   c3132:	4605      	mov	r5, r0
   c3134:	b948      	cbnz	r0, c314a <__lshift+0x3e>
   c3136:	4602      	mov	r2, r0
   c3138:	4b2a      	ldr	r3, [pc, #168]	; (c31e4 <__lshift+0xd8>)
   c313a:	482b      	ldr	r0, [pc, #172]	; (c31e8 <__lshift+0xdc>)
   c313c:	f240 11d9 	movw	r1, #473	; 0x1d9
   c3140:	f7f9 fcfc 	bl	bcb3c <__assert_func>
   c3144:	3101      	adds	r1, #1
   c3146:	005b      	lsls	r3, r3, #1
   c3148:	e7ee      	b.n	c3128 <__lshift+0x1c>
   c314a:	2300      	movs	r3, #0
   c314c:	f100 0114 	add.w	r1, r0, #20
   c3150:	f100 0210 	add.w	r2, r0, #16
   c3154:	4618      	mov	r0, r3
   c3156:	4553      	cmp	r3, sl
   c3158:	db37      	blt.n	c31ca <__lshift+0xbe>
   c315a:	6920      	ldr	r0, [r4, #16]
   c315c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c3160:	f104 0314 	add.w	r3, r4, #20
   c3164:	f019 091f 	ands.w	r9, r9, #31
   c3168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c316c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c3170:	d02f      	beq.n	c31d2 <__lshift+0xc6>
   c3172:	f1c9 0e20 	rsb	lr, r9, #32
   c3176:	468a      	mov	sl, r1
   c3178:	f04f 0c00 	mov.w	ip, #0
   c317c:	681a      	ldr	r2, [r3, #0]
   c317e:	fa02 f209 	lsl.w	r2, r2, r9
   c3182:	ea42 020c 	orr.w	r2, r2, ip
   c3186:	f84a 2b04 	str.w	r2, [sl], #4
   c318a:	f853 2b04 	ldr.w	r2, [r3], #4
   c318e:	4298      	cmp	r0, r3
   c3190:	fa22 fc0e 	lsr.w	ip, r2, lr
   c3194:	d8f2      	bhi.n	c317c <__lshift+0x70>
   c3196:	1b03      	subs	r3, r0, r4
   c3198:	3b15      	subs	r3, #21
   c319a:	f023 0303 	bic.w	r3, r3, #3
   c319e:	3304      	adds	r3, #4
   c31a0:	f104 0215 	add.w	r2, r4, #21
   c31a4:	4290      	cmp	r0, r2
   c31a6:	bf38      	it	cc
   c31a8:	2304      	movcc	r3, #4
   c31aa:	f841 c003 	str.w	ip, [r1, r3]
   c31ae:	f1bc 0f00 	cmp.w	ip, #0
   c31b2:	d001      	beq.n	c31b8 <__lshift+0xac>
   c31b4:	f108 0602 	add.w	r6, r8, #2
   c31b8:	3e01      	subs	r6, #1
   c31ba:	4638      	mov	r0, r7
   c31bc:	612e      	str	r6, [r5, #16]
   c31be:	4621      	mov	r1, r4
   c31c0:	f7ff fd88 	bl	c2cd4 <_Bfree>
   c31c4:	4628      	mov	r0, r5
   c31c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c31ca:	f842 0f04 	str.w	r0, [r2, #4]!
   c31ce:	3301      	adds	r3, #1
   c31d0:	e7c1      	b.n	c3156 <__lshift+0x4a>
   c31d2:	3904      	subs	r1, #4
   c31d4:	f853 2b04 	ldr.w	r2, [r3], #4
   c31d8:	f841 2f04 	str.w	r2, [r1, #4]!
   c31dc:	4298      	cmp	r0, r3
   c31de:	d8f9      	bhi.n	c31d4 <__lshift+0xc8>
   c31e0:	e7ea      	b.n	c31b8 <__lshift+0xac>
   c31e2:	bf00      	nop
   c31e4:	000c5159 	.word	0x000c5159
   c31e8:	000c5202 	.word	0x000c5202

000c31ec <__mcmp>:
   c31ec:	b530      	push	{r4, r5, lr}
   c31ee:	6902      	ldr	r2, [r0, #16]
   c31f0:	690c      	ldr	r4, [r1, #16]
   c31f2:	1b12      	subs	r2, r2, r4
   c31f4:	d10e      	bne.n	c3214 <__mcmp+0x28>
   c31f6:	f100 0314 	add.w	r3, r0, #20
   c31fa:	3114      	adds	r1, #20
   c31fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c3200:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c3204:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c3208:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c320c:	42a5      	cmp	r5, r4
   c320e:	d003      	beq.n	c3218 <__mcmp+0x2c>
   c3210:	d305      	bcc.n	c321e <__mcmp+0x32>
   c3212:	2201      	movs	r2, #1
   c3214:	4610      	mov	r0, r2
   c3216:	bd30      	pop	{r4, r5, pc}
   c3218:	4283      	cmp	r3, r0
   c321a:	d3f3      	bcc.n	c3204 <__mcmp+0x18>
   c321c:	e7fa      	b.n	c3214 <__mcmp+0x28>
   c321e:	f04f 32ff 	mov.w	r2, #4294967295
   c3222:	e7f7      	b.n	c3214 <__mcmp+0x28>

000c3224 <__mdiff>:
   c3224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3228:	460c      	mov	r4, r1
   c322a:	4606      	mov	r6, r0
   c322c:	4611      	mov	r1, r2
   c322e:	4620      	mov	r0, r4
   c3230:	4690      	mov	r8, r2
   c3232:	f7ff ffdb 	bl	c31ec <__mcmp>
   c3236:	1e05      	subs	r5, r0, #0
   c3238:	d110      	bne.n	c325c <__mdiff+0x38>
   c323a:	4629      	mov	r1, r5
   c323c:	4630      	mov	r0, r6
   c323e:	f7ff fd09 	bl	c2c54 <_Balloc>
   c3242:	b930      	cbnz	r0, c3252 <__mdiff+0x2e>
   c3244:	4b3a      	ldr	r3, [pc, #232]	; (c3330 <__mdiff+0x10c>)
   c3246:	4602      	mov	r2, r0
   c3248:	f240 2132 	movw	r1, #562	; 0x232
   c324c:	4839      	ldr	r0, [pc, #228]	; (c3334 <__mdiff+0x110>)
   c324e:	f7f9 fc75 	bl	bcb3c <__assert_func>
   c3252:	2301      	movs	r3, #1
   c3254:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c3258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c325c:	bfa4      	itt	ge
   c325e:	4643      	movge	r3, r8
   c3260:	46a0      	movge	r8, r4
   c3262:	4630      	mov	r0, r6
   c3264:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c3268:	bfa6      	itte	ge
   c326a:	461c      	movge	r4, r3
   c326c:	2500      	movge	r5, #0
   c326e:	2501      	movlt	r5, #1
   c3270:	f7ff fcf0 	bl	c2c54 <_Balloc>
   c3274:	b920      	cbnz	r0, c3280 <__mdiff+0x5c>
   c3276:	4b2e      	ldr	r3, [pc, #184]	; (c3330 <__mdiff+0x10c>)
   c3278:	4602      	mov	r2, r0
   c327a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c327e:	e7e5      	b.n	c324c <__mdiff+0x28>
   c3280:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c3284:	6926      	ldr	r6, [r4, #16]
   c3286:	60c5      	str	r5, [r0, #12]
   c3288:	f104 0914 	add.w	r9, r4, #20
   c328c:	f108 0514 	add.w	r5, r8, #20
   c3290:	f100 0e14 	add.w	lr, r0, #20
   c3294:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c3298:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c329c:	f108 0210 	add.w	r2, r8, #16
   c32a0:	46f2      	mov	sl, lr
   c32a2:	2100      	movs	r1, #0
   c32a4:	f859 3b04 	ldr.w	r3, [r9], #4
   c32a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c32ac:	fa1f f883 	uxth.w	r8, r3
   c32b0:	fa11 f18b 	uxtah	r1, r1, fp
   c32b4:	0c1b      	lsrs	r3, r3, #16
   c32b6:	eba1 0808 	sub.w	r8, r1, r8
   c32ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c32be:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c32c2:	fa1f f888 	uxth.w	r8, r8
   c32c6:	1419      	asrs	r1, r3, #16
   c32c8:	454e      	cmp	r6, r9
   c32ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c32ce:	f84a 3b04 	str.w	r3, [sl], #4
   c32d2:	d8e7      	bhi.n	c32a4 <__mdiff+0x80>
   c32d4:	1b33      	subs	r3, r6, r4
   c32d6:	3b15      	subs	r3, #21
   c32d8:	f023 0303 	bic.w	r3, r3, #3
   c32dc:	3304      	adds	r3, #4
   c32de:	3415      	adds	r4, #21
   c32e0:	42a6      	cmp	r6, r4
   c32e2:	bf38      	it	cc
   c32e4:	2304      	movcc	r3, #4
   c32e6:	441d      	add	r5, r3
   c32e8:	4473      	add	r3, lr
   c32ea:	469e      	mov	lr, r3
   c32ec:	462e      	mov	r6, r5
   c32ee:	4566      	cmp	r6, ip
   c32f0:	d30e      	bcc.n	c3310 <__mdiff+0xec>
   c32f2:	f10c 0203 	add.w	r2, ip, #3
   c32f6:	1b52      	subs	r2, r2, r5
   c32f8:	f022 0203 	bic.w	r2, r2, #3
   c32fc:	3d03      	subs	r5, #3
   c32fe:	45ac      	cmp	ip, r5
   c3300:	bf38      	it	cc
   c3302:	2200      	movcc	r2, #0
   c3304:	441a      	add	r2, r3
   c3306:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c330a:	b17b      	cbz	r3, c332c <__mdiff+0x108>
   c330c:	6107      	str	r7, [r0, #16]
   c330e:	e7a3      	b.n	c3258 <__mdiff+0x34>
   c3310:	f856 8b04 	ldr.w	r8, [r6], #4
   c3314:	fa11 f288 	uxtah	r2, r1, r8
   c3318:	1414      	asrs	r4, r2, #16
   c331a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c331e:	b292      	uxth	r2, r2
   c3320:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c3324:	f84e 2b04 	str.w	r2, [lr], #4
   c3328:	1421      	asrs	r1, r4, #16
   c332a:	e7e0      	b.n	c32ee <__mdiff+0xca>
   c332c:	3f01      	subs	r7, #1
   c332e:	e7ea      	b.n	c3306 <__mdiff+0xe2>
   c3330:	000c5159 	.word	0x000c5159
   c3334:	000c5202 	.word	0x000c5202

000c3338 <__ulp>:
   c3338:	b082      	sub	sp, #8
   c333a:	ed8d 0b00 	vstr	d0, [sp]
   c333e:	9b01      	ldr	r3, [sp, #4]
   c3340:	4912      	ldr	r1, [pc, #72]	; (c338c <__ulp+0x54>)
   c3342:	4019      	ands	r1, r3
   c3344:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c3348:	2900      	cmp	r1, #0
   c334a:	dd05      	ble.n	c3358 <__ulp+0x20>
   c334c:	2200      	movs	r2, #0
   c334e:	460b      	mov	r3, r1
   c3350:	ec43 2b10 	vmov	d0, r2, r3
   c3354:	b002      	add	sp, #8
   c3356:	4770      	bx	lr
   c3358:	4249      	negs	r1, r1
   c335a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c335e:	ea4f 5021 	mov.w	r0, r1, asr #20
   c3362:	f04f 0200 	mov.w	r2, #0
   c3366:	f04f 0300 	mov.w	r3, #0
   c336a:	da04      	bge.n	c3376 <__ulp+0x3e>
   c336c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c3370:	fa41 f300 	asr.w	r3, r1, r0
   c3374:	e7ec      	b.n	c3350 <__ulp+0x18>
   c3376:	f1a0 0114 	sub.w	r1, r0, #20
   c337a:	291e      	cmp	r1, #30
   c337c:	bfda      	itte	le
   c337e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c3382:	fa20 f101 	lsrle.w	r1, r0, r1
   c3386:	2101      	movgt	r1, #1
   c3388:	460a      	mov	r2, r1
   c338a:	e7e1      	b.n	c3350 <__ulp+0x18>
   c338c:	7ff00000 	.word	0x7ff00000

000c3390 <__b2d>:
   c3390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3392:	6905      	ldr	r5, [r0, #16]
   c3394:	f100 0714 	add.w	r7, r0, #20
   c3398:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c339c:	1f2e      	subs	r6, r5, #4
   c339e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c33a2:	4620      	mov	r0, r4
   c33a4:	f7ff fd48 	bl	c2e38 <__hi0bits>
   c33a8:	f1c0 0320 	rsb	r3, r0, #32
   c33ac:	280a      	cmp	r0, #10
   c33ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; c342c <__b2d+0x9c>
   c33b2:	600b      	str	r3, [r1, #0]
   c33b4:	dc14      	bgt.n	c33e0 <__b2d+0x50>
   c33b6:	f1c0 0e0b 	rsb	lr, r0, #11
   c33ba:	fa24 f10e 	lsr.w	r1, r4, lr
   c33be:	42b7      	cmp	r7, r6
   c33c0:	ea41 030c 	orr.w	r3, r1, ip
   c33c4:	bf34      	ite	cc
   c33c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c33ca:	2100      	movcs	r1, #0
   c33cc:	3015      	adds	r0, #21
   c33ce:	fa04 f000 	lsl.w	r0, r4, r0
   c33d2:	fa21 f10e 	lsr.w	r1, r1, lr
   c33d6:	ea40 0201 	orr.w	r2, r0, r1
   c33da:	ec43 2b10 	vmov	d0, r2, r3
   c33de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c33e0:	42b7      	cmp	r7, r6
   c33e2:	bf3a      	itte	cc
   c33e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c33e8:	f1a5 0608 	subcc.w	r6, r5, #8
   c33ec:	2100      	movcs	r1, #0
   c33ee:	380b      	subs	r0, #11
   c33f0:	d017      	beq.n	c3422 <__b2d+0x92>
   c33f2:	f1c0 0c20 	rsb	ip, r0, #32
   c33f6:	fa04 f500 	lsl.w	r5, r4, r0
   c33fa:	42be      	cmp	r6, r7
   c33fc:	fa21 f40c 	lsr.w	r4, r1, ip
   c3400:	ea45 0504 	orr.w	r5, r5, r4
   c3404:	bf8c      	ite	hi
   c3406:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c340a:	2400      	movls	r4, #0
   c340c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c3410:	fa01 f000 	lsl.w	r0, r1, r0
   c3414:	fa24 f40c 	lsr.w	r4, r4, ip
   c3418:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c341c:	ea40 0204 	orr.w	r2, r0, r4
   c3420:	e7db      	b.n	c33da <__b2d+0x4a>
   c3422:	ea44 030c 	orr.w	r3, r4, ip
   c3426:	460a      	mov	r2, r1
   c3428:	e7d7      	b.n	c33da <__b2d+0x4a>
   c342a:	bf00      	nop
   c342c:	3ff00000 	.word	0x3ff00000

000c3430 <__d2b>:
   c3430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c3434:	4689      	mov	r9, r1
   c3436:	2101      	movs	r1, #1
   c3438:	ec57 6b10 	vmov	r6, r7, d0
   c343c:	4690      	mov	r8, r2
   c343e:	f7ff fc09 	bl	c2c54 <_Balloc>
   c3442:	4604      	mov	r4, r0
   c3444:	b930      	cbnz	r0, c3454 <__d2b+0x24>
   c3446:	4602      	mov	r2, r0
   c3448:	4b25      	ldr	r3, [pc, #148]	; (c34e0 <__d2b+0xb0>)
   c344a:	4826      	ldr	r0, [pc, #152]	; (c34e4 <__d2b+0xb4>)
   c344c:	f240 310a 	movw	r1, #778	; 0x30a
   c3450:	f7f9 fb74 	bl	bcb3c <__assert_func>
   c3454:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c3458:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c345c:	bb35      	cbnz	r5, c34ac <__d2b+0x7c>
   c345e:	2e00      	cmp	r6, #0
   c3460:	9301      	str	r3, [sp, #4]
   c3462:	d028      	beq.n	c34b6 <__d2b+0x86>
   c3464:	4668      	mov	r0, sp
   c3466:	9600      	str	r6, [sp, #0]
   c3468:	f7ff fd06 	bl	c2e78 <__lo0bits>
   c346c:	9900      	ldr	r1, [sp, #0]
   c346e:	b300      	cbz	r0, c34b2 <__d2b+0x82>
   c3470:	9a01      	ldr	r2, [sp, #4]
   c3472:	f1c0 0320 	rsb	r3, r0, #32
   c3476:	fa02 f303 	lsl.w	r3, r2, r3
   c347a:	430b      	orrs	r3, r1
   c347c:	40c2      	lsrs	r2, r0
   c347e:	6163      	str	r3, [r4, #20]
   c3480:	9201      	str	r2, [sp, #4]
   c3482:	9b01      	ldr	r3, [sp, #4]
   c3484:	61a3      	str	r3, [r4, #24]
   c3486:	2b00      	cmp	r3, #0
   c3488:	bf14      	ite	ne
   c348a:	2202      	movne	r2, #2
   c348c:	2201      	moveq	r2, #1
   c348e:	6122      	str	r2, [r4, #16]
   c3490:	b1d5      	cbz	r5, c34c8 <__d2b+0x98>
   c3492:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c3496:	4405      	add	r5, r0
   c3498:	f8c9 5000 	str.w	r5, [r9]
   c349c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c34a0:	f8c8 0000 	str.w	r0, [r8]
   c34a4:	4620      	mov	r0, r4
   c34a6:	b003      	add	sp, #12
   c34a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c34ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c34b0:	e7d5      	b.n	c345e <__d2b+0x2e>
   c34b2:	6161      	str	r1, [r4, #20]
   c34b4:	e7e5      	b.n	c3482 <__d2b+0x52>
   c34b6:	a801      	add	r0, sp, #4
   c34b8:	f7ff fcde 	bl	c2e78 <__lo0bits>
   c34bc:	9b01      	ldr	r3, [sp, #4]
   c34be:	6163      	str	r3, [r4, #20]
   c34c0:	2201      	movs	r2, #1
   c34c2:	6122      	str	r2, [r4, #16]
   c34c4:	3020      	adds	r0, #32
   c34c6:	e7e3      	b.n	c3490 <__d2b+0x60>
   c34c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c34cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c34d0:	f8c9 0000 	str.w	r0, [r9]
   c34d4:	6918      	ldr	r0, [r3, #16]
   c34d6:	f7ff fcaf 	bl	c2e38 <__hi0bits>
   c34da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c34de:	e7df      	b.n	c34a0 <__d2b+0x70>
   c34e0:	000c5159 	.word	0x000c5159
   c34e4:	000c5202 	.word	0x000c5202

000c34e8 <__ratio>:
   c34e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c34ec:	4688      	mov	r8, r1
   c34ee:	4669      	mov	r1, sp
   c34f0:	4681      	mov	r9, r0
   c34f2:	f7ff ff4d 	bl	c3390 <__b2d>
   c34f6:	a901      	add	r1, sp, #4
   c34f8:	4640      	mov	r0, r8
   c34fa:	ec55 4b10 	vmov	r4, r5, d0
   c34fe:	f7ff ff47 	bl	c3390 <__b2d>
   c3502:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c3506:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c350a:	eba3 0c02 	sub.w	ip, r3, r2
   c350e:	e9dd 3200 	ldrd	r3, r2, [sp]
   c3512:	1a9b      	subs	r3, r3, r2
   c3514:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c3518:	ec51 0b10 	vmov	r0, r1, d0
   c351c:	2b00      	cmp	r3, #0
   c351e:	bfd6      	itet	le
   c3520:	460a      	movle	r2, r1
   c3522:	462a      	movgt	r2, r5
   c3524:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c3528:	468b      	mov	fp, r1
   c352a:	462f      	mov	r7, r5
   c352c:	bfd4      	ite	le
   c352e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c3532:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c3536:	4620      	mov	r0, r4
   c3538:	ee10 2a10 	vmov	r2, s0
   c353c:	465b      	mov	r3, fp
   c353e:	4639      	mov	r1, r7
   c3540:	f7fd fda8 	bl	c1094 <__aeabi_ddiv>
   c3544:	ec41 0b10 	vmov	d0, r0, r1
   c3548:	b003      	add	sp, #12
   c354a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c354e <__copybits>:
   c354e:	3901      	subs	r1, #1
   c3550:	b570      	push	{r4, r5, r6, lr}
   c3552:	1149      	asrs	r1, r1, #5
   c3554:	6914      	ldr	r4, [r2, #16]
   c3556:	3101      	adds	r1, #1
   c3558:	f102 0314 	add.w	r3, r2, #20
   c355c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c3560:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c3564:	1f05      	subs	r5, r0, #4
   c3566:	42a3      	cmp	r3, r4
   c3568:	d30c      	bcc.n	c3584 <__copybits+0x36>
   c356a:	1aa3      	subs	r3, r4, r2
   c356c:	3b11      	subs	r3, #17
   c356e:	f023 0303 	bic.w	r3, r3, #3
   c3572:	3211      	adds	r2, #17
   c3574:	42a2      	cmp	r2, r4
   c3576:	bf88      	it	hi
   c3578:	2300      	movhi	r3, #0
   c357a:	4418      	add	r0, r3
   c357c:	2300      	movs	r3, #0
   c357e:	4288      	cmp	r0, r1
   c3580:	d305      	bcc.n	c358e <__copybits+0x40>
   c3582:	bd70      	pop	{r4, r5, r6, pc}
   c3584:	f853 6b04 	ldr.w	r6, [r3], #4
   c3588:	f845 6f04 	str.w	r6, [r5, #4]!
   c358c:	e7eb      	b.n	c3566 <__copybits+0x18>
   c358e:	f840 3b04 	str.w	r3, [r0], #4
   c3592:	e7f4      	b.n	c357e <__copybits+0x30>

000c3594 <__any_on>:
   c3594:	f100 0214 	add.w	r2, r0, #20
   c3598:	6900      	ldr	r0, [r0, #16]
   c359a:	114b      	asrs	r3, r1, #5
   c359c:	4298      	cmp	r0, r3
   c359e:	b510      	push	{r4, lr}
   c35a0:	db11      	blt.n	c35c6 <__any_on+0x32>
   c35a2:	dd0a      	ble.n	c35ba <__any_on+0x26>
   c35a4:	f011 011f 	ands.w	r1, r1, #31
   c35a8:	d007      	beq.n	c35ba <__any_on+0x26>
   c35aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c35ae:	fa24 f001 	lsr.w	r0, r4, r1
   c35b2:	fa00 f101 	lsl.w	r1, r0, r1
   c35b6:	428c      	cmp	r4, r1
   c35b8:	d10b      	bne.n	c35d2 <__any_on+0x3e>
   c35ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c35be:	4293      	cmp	r3, r2
   c35c0:	d803      	bhi.n	c35ca <__any_on+0x36>
   c35c2:	2000      	movs	r0, #0
   c35c4:	bd10      	pop	{r4, pc}
   c35c6:	4603      	mov	r3, r0
   c35c8:	e7f7      	b.n	c35ba <__any_on+0x26>
   c35ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c35ce:	2900      	cmp	r1, #0
   c35d0:	d0f5      	beq.n	c35be <__any_on+0x2a>
   c35d2:	2001      	movs	r0, #1
   c35d4:	e7f6      	b.n	c35c4 <__any_on+0x30>

000c35d6 <_calloc_r>:
   c35d6:	b513      	push	{r0, r1, r4, lr}
   c35d8:	434a      	muls	r2, r1
   c35da:	4611      	mov	r1, r2
   c35dc:	9201      	str	r2, [sp, #4]
   c35de:	f7f9 fa9d 	bl	bcb1c <_malloc_r>
   c35e2:	4604      	mov	r4, r0
   c35e4:	b118      	cbz	r0, c35ee <_calloc_r+0x18>
   c35e6:	9a01      	ldr	r2, [sp, #4]
   c35e8:	2100      	movs	r1, #0
   c35ea:	f7fd ff9f 	bl	c152c <memset>
   c35ee:	4620      	mov	r0, r4
   c35f0:	b002      	add	sp, #8
   c35f2:	bd10      	pop	{r4, pc}
   c35f4:	0000      	movs	r0, r0
	...

000c35f8 <nan>:
   c35f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; c3600 <nan+0x8>
   c35fc:	4770      	bx	lr
   c35fe:	bf00      	nop
   c3600:	00000000 	.word	0x00000000
   c3604:	7ff80000 	.word	0x7ff80000

000c3608 <__ascii_wctomb>:
   c3608:	b149      	cbz	r1, c361e <__ascii_wctomb+0x16>
   c360a:	2aff      	cmp	r2, #255	; 0xff
   c360c:	bf85      	ittet	hi
   c360e:	238a      	movhi	r3, #138	; 0x8a
   c3610:	6003      	strhi	r3, [r0, #0]
   c3612:	700a      	strbls	r2, [r1, #0]
   c3614:	f04f 30ff 	movhi.w	r0, #4294967295
   c3618:	bf98      	it	ls
   c361a:	2001      	movls	r0, #1
   c361c:	4770      	bx	lr
   c361e:	4608      	mov	r0, r1
   c3620:	4770      	bx	lr
	...

000c3624 <__aeabi_d2lz>:
   c3624:	b538      	push	{r3, r4, r5, lr}
   c3626:	2200      	movs	r2, #0
   c3628:	2300      	movs	r3, #0
   c362a:	4604      	mov	r4, r0
   c362c:	460d      	mov	r5, r1
   c362e:	f7fd fe79 	bl	c1324 <__aeabi_dcmplt>
   c3632:	b928      	cbnz	r0, c3640 <__aeabi_d2lz+0x1c>
   c3634:	4620      	mov	r0, r4
   c3636:	4629      	mov	r1, r5
   c3638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c363c:	f7fd bf0a 	b.w	c1454 <__aeabi_d2ulz>
   c3640:	4620      	mov	r0, r4
   c3642:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c3646:	f7fd ff05 	bl	c1454 <__aeabi_d2ulz>
   c364a:	4240      	negs	r0, r0
   c364c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3650:	bd38      	pop	{r3, r4, r5, pc}
   c3652:	bf00      	nop

000c3654 <dynalib_user>:
   c3654:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c3664:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c3674:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c3684:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c3694:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c36a4:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c36b4:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c36c4:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c36d4:	4544 7525 003e 7453 7461 7375 203a 6425     DE%u>.Status: %d
   c36e4:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c36f4:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c3704:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c3714:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c3724:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c3734:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c3744:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c3754:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c3764:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c3774:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c3784:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c3794:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   c37a4:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   c37b4:	6425 5b00 4157 4e52 205d 654d 7373 6761     %d.[WARN] Messag
   c37c4:	2065 6843 6365 736b 6d75 4420 656f 2073     e Checksum Does 
   c37d4:	6f4e 2074 614d 6374 2168 203a 7325 5700     Not Match!: %s.W
   c37e4:	7261 696e 676e 202c 6863 6365 736b 6d75     arning, checksum
   c37f4:	6420 656f 2073 6f6e 2074 616d 6374 0068      does not match.
   c3804:	6361 006b 746d 0072 6552 6563 7669 6465     ack.mtr.Received
   c3814:	4d20 746f 726f 4320 6d6f 616d 646e 203a      Motor Command: 
   c3824:	534c 6570 6465 253d 2c64 5352 6570 6465     LSpeed=%d,RSpeed
   c3834:	253d 0064 6572 0071 7470 0073 505b 5455     =%d.req.pts.[PUT
   c3844:	5d53 5220 6365 6965 6576 2064 7453 6972     S] Received Stri
   c3854:	676e 4320 6d6f 616d 646e 203a 7325 7300     ng Command: %s.s
   c3864:	6370 6800 6177 6100 7475 6400 706d 5b00     pc.hwa.aut.dmp.[
   c3874:	4e49 4f46 205d 6552 6563 7669 6465 4c20     INFO] Received L
   c3884:	4554 4d20 7365 6173 6567 203a 7325 4e00     TE Message: %s.N
   c3894:	7765 4220 2054 6f43 6d6d 6e61 3a64 5b00     ew BT Command:.[
   c38a4:	4e49 4f46 205d 6552 6563 7669 6465 4220     INFO] Received B
   c38b4:	454c 4d20 7365 6173 6567 203a 7325 4300     LE Message: %s.C
   c38c4:	4843 6275 4500 7272 726f 202c 6f43 6c75     CHub.Error, Coul
   c38d4:	2064 6f6e 2074 6e69 7469 6169 696c 657a     d not initialize
   c38e4:	4720 5350 2500 3230 2564 3230 2564 3430      GPS.%02d%02d%04
   c38f4:	2564 3230 2564 3230 2564 3230 0064 7325     d%02d%02d%02d.%s
   c3904:	252c 2c66 6625 252c 2c66 6625 252c 2c66     ,%f,%f,%f,%f,%f,
   c3914:	6625 252c 0066 654e 2077 4258 6565 4320     %f,%f.New XBee C
   c3924:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   c3934:	6365 6965 6576 2064 4258 6565 4d20 7365     eceived XBee Mes
   c3944:	6173 6567 203a 7325 4500 746e 7265 6e69     sage: %s.Enterin
   c3954:	2067 6144 6174 4f20 6666 6f6c 6461 7265     g Data Offloader
   c3964:	4d20 646f 0065 002f 7245 6f72 2c72 6320      Mode./.Error, c
   c3974:	756f 646c 6e20 746f 6f20 6570 206e 6f72     ould not open ro
   c3984:	746f 5320 2044 6163 6472 6420 7269 6365     ot SD card direc
   c3994:	6f74 7972 5700 6961 6974 676e 6620 726f     tory.Waiting for
   c39a4:	4320 4843 6275 6320 6e6f 656e 7463 6f69      CCHub connectio
   c39b4:	2e6e 2e2e 5300 6174 7472 6e69 2067 7274     n....Starting tr
   c39c4:	6e61 6673 7265 2e2e 002e 6843 6365 696b     ansfer....Checki
   c39d4:	676e 6920 2066 6966 656c 2520 2073 7369     ng if file %s is
   c39e4:	6120 2e20 7363 2076 726f 2e20 7874 2e74      a .csv or .txt.
   c39f4:	2e2e 2e00 7363 0076 6966 656c 6f64 656e     ....csv.filedone
   c3a04:	6600 6c69 6e65 6d61 0065 6553 646e 6e69     .filename.Sendin
   c3a14:	2067 6f63 6d6d 6e61 2064 7325 4600 6c69     g command %s.Fil
   c3a24:	2065 7325 6920 2073 2061 632e 7673 6f20     e %s is a .csv o
   c3a34:	2072 742e 7478 7020 6972 746e 6e69 2067     r .txt printing 
   c3a44:	6164 6174 6600 6c69 6365 6d6f 0070 7325     data.filecomp.%s
   c3a54:	3025 7832 4200 746f 6431 7461 4200 6425     %02x.Bot1dat.B%d
   c3a64:	4343 6e73 2573 2e30 6636 2520 2e30 6636     CCsns%0.6f %0.6f
   c3a74:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
   c3a84:	4200 6425 4241 7573 2570 2064 6425 2520     .B%dABsup%d %d %
   c3a94:	362e 2066 2e25 6636 0020 3142 4343 7470     .6f %.6f .B1CCpt
   c3aa4:	6273 6769 6f62 0074 5047 2053 6144 6174     sbigbot.GPS Data
   c3ab4:	203a 614c 3a74 3025 362e 2066 6f4c 3a6e     : Lat:%0.6f Lon:
   c3ac4:	3025 362e 0a66 5700 7461 7265 6f42 0074     %0.6f..WaterBot.
   c3ad4:	4c5f 474f 742e 7478 4500 7272 726f 203a     _LOG.txt.Error: 
   c3ae4:	6f63 6c75 2064 6f6e 2074 6f63 6e6e 6365     could not connec
   c3af4:	2074 6f74 5320 2044 6163 6472 0021 6954     t to SD card!.Ti
   c3b04:	656d 4c2c 7461 7469 6475 2c65 6f4c 676e     me,Latitude,Long
   c3b14:	7469 6475 2c65 6554 706d 7265 7461 7275     itude,Temperatur
   c3b24:	2c65 4870 442c 7369 6f73 766c 6465 4f20     e,pH,Dissolved O
   c3b34:	2c32 6f43 646e 6375 6974 6976 7974 3020     2,Conductivity 0
   c3b44:	312e 2c4b 6f43 646e 6375 6974 6976 7974     .1K,Conductivity
   c3b54:	3120 004b 495b 464e 5d4f 5720 7461 7265      1K.[INFO] Water
   c3b64:	6f42 2074 6425 203a 7453 7261 6574 2064     Bot %d: Started 
   c3b74:	6f4c 6767 6e69 2167 7400 0078 7872 6f00     Logging!.tx.rx.o
   c3b84:	6666 0000                                   ff..

000c3b88 <_ZTVN8particle11SPISettingsE>:
	...
   c3b90:	4305 000b 40d1 000b 4175 000b               .C...@..uA..

000c3b9c <_ZTV5Timer>:
	...
   c3ba4:	4389 000b 43dd 000b 41db 000b               .C...C...A..

000c3bb0 <_ZTVN5spark10LogHandlerE>:
	...
   c3bc0:	40a9 000b 40d3 000b                         .@...@..

000c3bc8 <_ZTVN8particle9LEDStatusE>:
	...
   c3bd0:	4241 000b 425d 000b 40dd 000b               AB..]B...@..

000c3bdc <_ZTVN5spark16SerialLogHandlerE>:
	...
   c3be4:	4271 000b 42a5 000b f1f5 000b 40d5 000b     qB...B.......@..

000c3bf4 <_ZTV4File>:
	...
   c3bfc:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c3c0c:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c3c1c:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c3c2c:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c3c3c:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   c3c4c:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c3c5c:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c3c6c:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   c3c7c:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c3c8c:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   c3c9c:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c3cac:	6232 0030                                   2b0.

000c3cb0 <CSWTCH.267>:
   c3cb0:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c3cc0:	ffff 00ff ff00 00ff ffff 0000 6573 5074     ............setP
   c3cd0:	6361 656b 4374 6766 6150 6c79 616f 5364     acketCfgPayloadS
   c3ce0:	7a69 3a65 5a20 7265 206f 6170 6c79 616f     ize: Zero payloa
   c3cf0:	5364 7a69 2165 7300 7465 6150 6b63 7465     dSize!.setPacket
   c3d00:	6643 5067 7961 6f6c 6461 6953 657a 203a     CfgPayloadSize: 
   c3d10:	4152 204d 6c61 6f6c 2063 6166 6c69 6465     RAM alloc failed
   c3d20:	0021 6573 5074 6361 656b 4374 6766 6150     !.setPacketCfgPa
   c3d30:	6c79 616f 5364 7a69 3a65 5220 4d41 7220     yloadSize: RAM r
   c3d40:	7365 7a69 2065 6166 6c69 6465 0021 4e47     esize failed!.GN
   c3d50:	4747 0041 5047 5456 0047 4e47 5456 0047     GGA.GPVTG.GNVTG.
   c3d60:	5047 4d52 0043 4e47 4d52 0043 5047 445a     GPRMC.GNRMC.GPZD
   c3d70:	0041 4e47 445a 0041 5047 4747 0041 6573     A.GNZDA.GPGGA.se
   c3d80:	646e 7053 4369 6d6f 616d 646e 203a 6f6e     ndSpiCommand: no
   c3d90:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   c3da0:	6e6f 6620 726f 5320 4950 4220 6675 6566     on for SPI Buffe
   c3db0:	2172 7300 6e65 5364 6970 6f43 6d6d 6e61     r!.sendSpiComman
   c3dc0:	3a64 0020 4c43 3a53 4e00 5641 4100 4b43     d: .CLS:.NAV.ACK
   c3dd0:	4300 4746 4d00 4e4f 2000 4449 003a 5650     .CFG.MON. ID:.PV
   c3de0:	0054 4152 4554 5300 5641 0045 4c20 6e65     T.RATE.SAVE. Len
   c3df0:	203a 7830 2000 6150 6c79 616f 3a64 2000     : 0x. Payload:. 
   c3e00:	6150 6c79 616f 3a64 4920 4e47 524f 4445     Payload: IGNORED
   c3e10:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c3e20:	3a72 5720 7261 696e 676e 202e 6966 656c     r: Warning. file
   c3e30:	7542 6666 7265 6953 657a 6920 2073 657a     BufferSize is ze
   c3e40:	6f72 202e 6144 6174 6c20 676f 6967 676e     ro. Data logging
   c3e50:	6920 2073 6f6e 2074 6f70 7373 6269 656c      is not possible
   c3e60:	002e 7263 6165 6574 6946 656c 7542 6666     ..createFileBuff
   c3e70:	7265 203a 6157 6e72 6e69 2e67 4620 6c69     er: Warning. Fil
   c3e80:	2065 7562 6666 7265 6120 726c 6165 7964     e buffer already
   c3e90:	6520 6978 7473 2e73 5320 696b 7070 6e69      exists. Skippin
   c3ea0:	2e67 2e2e 6300 6572 7461 4665 6c69 4265     g....createFileB
   c3eb0:	6675 6566 3a72 5220 4d41 6120 6c6c 636f     uffer: RAM alloc
   c3ec0:	6620 6961 656c 2164 6300 6572 7461 4665      failed!.createF
   c3ed0:	6c69 4265 6675 6566 3a72 6620 6c69 4265     ileBuffer: fileB
   c3ee0:	6675 6566 5372 7a69 2065 7369 203a 7300     ufferSize is: .s
   c3ef0:	6f74 6572 6150 6b63 7465 203a 6966 656c     torePacket: file
   c3f00:	6220 6675 6566 2072 6f6e 2074 7661 6961      buffer not avai
   c3f10:	616c 6c62 2165 7300 6f74 6572 6150 6b63     lable!.storePack
   c3f20:	7465 203a 6e69 7573 6666 6369 6569 746e     et: insufficient
   c3f30:	7320 6170 6563 6120 6176 6c69 6261 656c      space available
   c3f40:	2021 6144 6174 7720 6c69 206c 6562 6c20     ! Data will be l
   c3f50:	736f 2174 7000 6f72 6563 7373 4255 7058     ost!.processUBXp
   c3f60:	6361 656b 3a74 7020 6361 656b 5574 5842     acket: packetUBX
   c3f70:	474d 4141 4b43 6920 2073 7566 6c6c 202e     MGAACK is full. 
   c3f80:	4341 204b 6977 6c6c 6220 2065 6f6c 7473     ACK will be lost
   c3f90:	0021 7270 636f 7365 5573 5842 6170 6b63     !.processUBXpack
   c3fa0:	7465 203a 6170 6b63 7465 4255 4d58 4147     et: packetUBXMGA
   c3fb0:	4244 2044 7369 6620 6c75 2e6c 4420 4442     DBD is full. DBD
   c3fc0:	6420 7461 2061 6977 6c6c 6220 2065 6f6c      data will be lo
   c3fd0:	7473 0021 7270 636f 7365 5573 5842 203a     st!.processUBX: 
   c3fe0:	6567 4d74 7861 6150 6c79 616f 5364 7a69     getMaxPayloadSiz
   c3ff0:	2065 6572 7574 6e72 6465 5a20 5245 214f     e returned ZERO!
   c4000:	2021 6c43 7361 3a73 3020 0078 7270 636f     ! Class: 0x.proc
   c4010:	7365 5573 5842 203a 414e 4b43 7220 6365     essUBX: NACK rec
   c4020:	6965 6576 3a64 5220 7165 6575 7473 6465     eived: Requested
   c4030:	4320 616c 7373 203a 7830 2000 6552 7571      Class: 0x. Requ
   c4040:	7365 6574 2064 4449 203a 7830 7000 6f72     ested ID: 0x.pro
   c4050:	6563 7373 4255 3a58 6920 636e 6d6f 6e69     cessUBX: incomin
   c4060:	2067 6122 7475 6d6f 7461 6369 2022 656d     g "automatic" me
   c4070:	7373 6761 3a65 4320 616c 7373 203a 7830     ssage: Class: 0x
   c4080:	4900 636e 6d6f 6e69 3a67 5320 7a69 3a65     .Incoming: Size:
   c4090:	0020 5220 6365 6965 6576 3a64 0020 6170      . Received: .pa
   c40a0:	6b63 7465 6643 2067 6f6e 2077 6176 696c     cketCfg now vali
   c40b0:	0064 6170 6b63 7465 6341 206b 6f6e 2077     d.packetAck now 
   c40c0:	6176 696c 0064 6170 6b63 7465 6643 2067     valid.packetCfg 
   c40d0:	6c63 7361 4173 646e 4449 616d 6374 0068     classAndIDmatch.
   c40e0:	6170 6b63 7465 6341 206b 6c63 7361 4173     packetAck classA
   c40f0:	646e 4449 616d 6374 0068 6843 6365 736b     ndIDmatch.Checks
   c4100:	6d75 6620 6961 656c 3a64 2000 6863 6365     um failed:. chec
   c4110:	736b 6d75 3a41 0020 6320 6568 6b63 7573     ksumA: . checksu
   c4120:	426d 203a 2000 6f72 6c6c 6e69 4367 6568     mB: . rollingChe
   c4130:	6b63 7573 416d 203a 2000 6f72 6c6c 6e69     cksumA: . rollin
   c4140:	4367 6568 6b63 7573 426d 203a 7000 6f72     gChecksumB: .pro
   c4150:	6563 7373 4255 3a58 6220 6675 6566 2072     cessUBX: buffer 
   c4160:	766f 7265 7572 206e 6564 6574 7463 6465     overrun detected
   c4170:	0021 7270 636f 7365 5573 5842 203a 6f63     !.processUBX: co
   c4180:	6e75 6574 2072 6968 2074 616d 6978 756d     unter hit maximu
   c4190:	5f6d 6170 6c79 616f 5f64 6973 657a 2b20     m_payload_size +
   c41a0:	3620 0021 6120 7463 7669 5065 6361 656b      6!. activePacke
   c41b0:	4274 6675 6566 3a72 0020 6d20 7861 6d69     tBuffer: . maxim
   c41c0:	6d75 705f 7961 6f6c 6461 735f 7a69 3a65     um_payload_size:
   c41d0:	0020 7473 726f 4665 6c69 4265 7479 7365      .storeFileBytes
   c41e0:	203a 6966 656c 6220 6675 6566 2072 6f6e     : file buffer no
   c41f0:	2074 7661 6961 616c 6c62 2165 7300 6f74     t available!.sto
   c4200:	6572 6946 656c 7942 6574 3a73 6920 736e     reFileBytes: ins
   c4210:	6675 6966 6963 6e65 2074 7073 6361 2065     ufficient space 
   c4220:	7661 6961 616c 6c62 2165 4420 7461 2061     available! Data 
   c4230:	6977 6c6c 6220 2065 6f6c 7473 0021 7270     will be lost!.pr
   c4240:	636f 7365 3a73 6720 7465 614d 5078 7961     ocess: getMaxPay
   c4250:	6f6c 6461 6953 657a 7220 7465 7275 656e     loadSize returne
   c4260:	2064 455a 4f52 2121 4320 616c 7373 203a     d ZERO!! Class: 
   c4270:	7830 7000 6f72 6563 7373 203a 656d 6f6d     0x.process: memo
   c4280:	7972 6920 2073 6c61 6572 6461 2079 6c61     ry is already al
   c4290:	6f6c 6163 6574 2064 6f66 2072 6170 6c79     located for payl
   c42a0:	616f 4164 7475 216f 4420 6c65 7465 6e69     oadAuto! Deletin
   c42b0:	2e67 2e2e 7000 6f72 6563 7373 203a 656d     g....process: me
   c42c0:	6f6d 7972 6120 6c6c 636f 7461 6f69 206e     mory allocation 
   c42d0:	6166 6c69 6465 6620 726f 2220 7561 6f74     failed for "auto
   c42e0:	616d 6974 2263 6d20 7365 6173 6567 203a     matic" message: 
   c42f0:	6c43 7361 3a73 3020 0078 7270 636f 7365     Class: 0x.proces
   c4300:	3a73 2220 7561 6f74 616d 6974 2263 6d20     s: "automatic" m
   c4310:	7365 6173 6567 6320 756f 646c 6f20 6576     essage could ove
   c4320:	7772 6972 6574 6420 7461 0061 7270 636f     rwrite data.proc
   c4330:	7365 3a73 6920 636e 6d6f 6e69 2067 6122     ess: incoming "a
   c4340:	7475 6d6f 7461 6369 2022 656d 7373 6761     utomatic" messag
   c4350:	3a65 4320 616c 7373 203a 7830 7000 6f72     e: Class: 0x.pro
   c4360:	6563 7373 203a 455a 4f52 4c20 4e45 5447     cess: ZERO LENGT
   c4370:	2048 6170 6b63 7465 7220 6365 6965 6576     H packet receive
   c4380:	3a64 4320 616c 7373 203a 7830 7000 6f72     d: Class: 0x.pro
   c4390:	6563 7373 203a 4341 204b 6572 6563 7669     cess: ACK receiv
   c43a0:	6465 7720 7469 2068 6c2e 6e65 2120 203d     ed with .len != 
   c43b0:	3a32 4320 616c 7373 203a 7830 2000 656c     2: Class: 0x. le
   c43c0:	3a6e 0020 7270 636f 7365 3a73 4e20 454d     n: .process: NME
   c43d0:	2041 7562 6666 7265 6920 2073 7566 6c6c     A buffer is full
   c43e0:	0021 7270 636f 7365 3a73 4e20 454d 2041     !.process: NMEA 
   c43f0:	6863 6365 736b 6d75 6620 6961 206c 3228     checksum fail (2
   c4400:	2129 4520 7078 6365 6574 2064 2000 6f47     )! Expected . Go
   c4410:	2074 7000 6f72 6563 7373 203a 4d4e 4145     t .process: NMEA
   c4420:	6320 6568 6b63 7573 206d 6166 6c69 2820      checksum fail (
   c4430:	2931 0021 6863 6365 556b 6c62 786f 3249     1)!.checkUbloxI2
   c4440:	3a43 4920 4332 6520 7272 726f 203a 6e65     C: I2C error: en
   c4450:	5464 6172 736e 696d 7373 6f69 206e 6572     dTransmission re
   c4460:	7574 6e72 6465 0020 6863 6365 556b 6c62     turned .checkUbl
   c4470:	786f 3249 3a43 4920 4332 6520 7272 726f     oxI2C: I2C error
   c4480:	203a 6572 7571 7365 4674 6f72 206d 7830     : requestFrom 0x
   c4490:	4446 7220 7465 7275 656e 2064 6300 6568     FD returned .che
   c44a0:	6b63 6255 6f6c 4978 4332 203a 4b4f 202c     ckUbloxI2C: OK, 
   c44b0:	657a 6f72 6220 7479 7365 6120 6176 6c69     zero bytes avail
   c44c0:	6261 656c 6300 6568 6b63 6255 6f6c 4978     able.checkUbloxI
   c44d0:	4332 203a 614c 6772 2065 6170 6b63 7465     2C: Large packet
   c44e0:	6f20 2066 2000 7962 6574 2073 6572 6563      of . bytes rece
   c44f0:	7669 6465 6300 6568 6b63 6255 6f6c 4978     ived.checkUbloxI
   c4500:	4332 203a 6552 6461 6e69 2067 2000 7962     2C: Reading . by
   c4510:	6574 0073 6177 7469 6f46 4172 4b43 6552     tes.waitForACKRe
   c4520:	7073 6e6f 6573 203a 6176 696c 2064 6164     sponse: valid da
   c4530:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c4540:	7220 6365 6965 6576 2064 6661 6574 2072      received after 
   c4550:	2000 736d 6365 7700 6961 4674 726f 4341     . msec.waitForAC
   c4560:	524b 7365 6f70 736e 3a65 6e20 206f 6164     KResponse: no da
   c4570:	6174 6120 646e 7620 6c61 6469 4120 4b43     ta and valid ACK
   c4580:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c4590:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c45a0:	6220 6965 676e 4f20 4556 5752 4952 5454      being OVERWRITT
   c45b0:	4e45 6120 7466 7265 0020 6177 7469 6f46     EN after .waitFo
   c45c0:	4172 4b43 6552 7073 6e6f 6573 203a 5243     rACKResponse: CR
   c45d0:	2043 6166 6c69 6465 6120 7466 7265 0020     C failed after .
   c45e0:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c45f0:	6573 203a 6164 6174 7720 7361 4e20 544f     se: data was NOT
   c4600:	4341 4e4b 574f 454c 4744 4445 2820 414e     ACKNOWLEDGED (NA
   c4610:	4b43 2029 6661 6574 2072 7700 6961 4674     CK) after .waitF
   c4620:	726f 4341 524b 7365 6f70 736e 3a65 5620     orACKResponse: V
   c4630:	4c41 4449 6420 7461 2061 6e61 2064 4e49     ALID data and IN
   c4640:	4156 494c 2044 4341 204b 6572 6563 7669     VALID ACK receiv
   c4650:	6465 6120 7466 7265 0020 6177 7469 6f46     ed after .waitFo
   c4660:	4172 4b43 6552 7073 6e6f 6573 203a 4e49     rACKResponse: IN
   c4670:	4156 494c 2044 6164 6174 6120 646e 4920     VALID data and I
   c4680:	564e 4c41 4449 4120 4b43 7220 6365 6965     NVALID ACK recei
   c4690:	6576 2064 6661 6574 2072 7700 6961 4674     ved after .waitF
   c46a0:	726f 4341 524b 7365 6f70 736e 3a65 5420     orACKResponse: T
   c46b0:	4d49 4f45 5455 7720 7469 2068 6176 696c     IMEOUT with vali
   c46c0:	2064 6164 6174 6120 7466 7265 0020 6d20     d data after . m
   c46d0:	6573 2e63 0020 6177 7469 6f46 4172 4b43     sec. .waitForACK
   c46e0:	6552 7073 6e6f 6573 203a 4954 454d 554f     Response: TIMEOU
   c46f0:	2054 6661 6574 2072 2000 736d 6365 002e     T after . msec..
   c4700:	6177 7469 6f46 4e72 416f 4b43 6552 7073     waitForNoACKResp
   c4710:	6e6f 6573 203a 6176 696c 2064 6164 6174     onse: valid data
   c4720:	7720 7469 2068 4c43 2f53 4449 6d20 7461      with CLS/ID mat
   c4730:	6863 6120 7466 7265 0020 6177 7469 6f46     ch after .waitFo
   c4740:	4e72 416f 4b43 6552 7073 6e6f 6573 203a     rNoACKResponse: 
   c4750:	6164 6174 6220 6965 676e 4f20 4556 5752     data being OVERW
   c4760:	4952 5454 4e45 6120 7466 7265 0020 6177     RITTEN after .wa
   c4770:	7469 6f46 4e72 416f 4b43 6552 7073 6e6f     itForNoACKRespon
   c4780:	6573 203a 4c43 2f53 4449 6d20 7461 6863     se: CLS/ID match
   c4790:	6220 7475 6620 6961 656c 2064 5243 2043      but failed CRC 
   c47a0:	6661 6574 2072 7700 6961 4674 726f 6f4e     after .waitForNo
   c47b0:	4341 524b 7365 6f70 736e 3a65 5420 4d49     ACKResponse: TIM
   c47c0:	4f45 5455 6120 7466 7265 0020 6d20 6573     EOUT after . mse
   c47d0:	2e63 4e20 206f 6170 6b63 7465 7220 6365     c. No packet rec
   c47e0:	6965 6576 2e64 0a00 6553 646e 6e69 3a67     eived...Sending:
   c47f0:	0020 6553 646e 4920 4332 4320 6d6f 616d      .Send I2C Comma
   c4800:	646e 6620 6961 656c 0064 6573 646e 6f43     nd failed.sendCo
   c4810:	6d6d 6e61 3a64 5720 6961 6974 676e 6620     mmand: Waiting f
   c4820:	726f 4120 4b43 7220 7365 6f70 736e 0065     or ACK response.
   c4830:	6573 646e 6f43 6d6d 6e61 3a64 5720 6961     sendCommand: Wai
   c4840:	6974 676e 6620 726f 4e20 206f 4341 204b     ting for No ACK 
   c4850:	6572 7073 6e6f 6573 6900 696e 5074 6361     response.initPac
   c4860:	656b 5574 5842 414e 5056 5456 203a 4152     ketUBXNAVPVT: RA
   c4870:	204d 6c61 6f6c 2063 6166 6c69 6465 0021     M alloc failed!.
   c4880:	6e69 7469 6150 6b63 7465 4255 4358 4746     initPacketUBXCFG
   c4890:	5250 3a54 5220 4d41 6120 6c6c 636f 6620     PRT: RAM alloc f
   c48a0:	6961 656c 2164 6200 6765 6e69 203a 7369     ailed!.begin: is
   c48b0:	6f43 6e6e 6365 6574 2064 202d 6573 6f63     Connected - seco
   c48c0:	646e 6120 7474 6d65 7470 6200 6765 6e69     nd attempt.begin
   c48d0:	203a 7369 6f43 6e6e 6365 6574 2064 202d     : isConnected - 
   c48e0:	6874 7269 2064 7461 6574 706d 0074 6562     third attempt.be
   c48f0:	6967 3a6e 7420 6968 6472 6120 7474 6d65     gin: third attem
   c4900:	7470 6620 6961 656c 2e64 4120 7373 6d75     pt failed. Assum
   c4910:	6e69 2067 7573 6363 7365 2e73 2e2e 0000     ing success.....

000c4920 <CSWTCH.334>:
   c4920:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c4930:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c4940:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c4960:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c4988:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c49dc:	0000 0010 0004                              ......

000c49e2 <CSWTCH.335>:
   c49e2:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c49fe:	002c 0000 0000 0000 0010 0024               ,.........$.

000c4a0a <CSWTCH.336>:
   c4a0a:	2048 0024 0000                              H $...

000c4a10 <_ZTVN5spark13EthernetClassE>:
	...
   c4a18:	cbcb 000b cbc1 000b cbb7 000b cbad 000b     ................
   c4a28:	cba1 000b cb95 000b 01f9 000c 0201 000c     ................
   c4a38:	cb89 000b cb81 000b cb77 000b cb6d 000b     ........w...m...
   c4a48:	0231 000c                                   1...

000c4a4c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c4a4c:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c4a5c:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c4a6c:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c4a7c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c4a8c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c4a9c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c4aac:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c4abc:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c4acc:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c4adc:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c4aec:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   c4afc:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   c4b0c:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   c4b1c:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   c4b2c:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   c4b3c:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   c4b4c:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   c4b5c:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   c4b6c:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   c4b7c:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   c4b8c:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   c4b9c:	6369 002e                                   ic..

000c4ba0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c4ba8:	d133 000b d195 000b d269 000b d1bf 000b     3.......i.......
   c4bb8:	d135 000b                                   5...

000c4bbc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c4bc4:	d12f 000b d1a3 000b d131 000b d1c5 000b     /.......1.......
   c4bd4:	d155 000b                                   U...

000c4bd8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c4be0:	d12d 000b d1b1 000b da25 000b d1cb 000b     -.......%.......
   c4bf0:	d175 000b                                   u...

000c4bf4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c4c00:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c4c12 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c4c12:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c4c22 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c4c22:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   c4c32:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   c4c42:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   c4c52:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   c4c62:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   c4c72:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   c4c82:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   c4c92:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..
	...

000c4ca4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c4cac:	e641 000b e667 000b e625 000b 034b 000c     A...g...%...K...

000c4cbc <_ZTVN5spark16StreamLogHandlerE>:
	...
   c4cc4:	ea9d 000b eab5 000b f1f5 000b 40d5 000b     .............@..

000c4cd4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c4cdc:	eac9 000b eadd 000b f399 000b e62d 000b     ............-...

000c4cec <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c4cf4:	e63f 000b e675 000b f159 000b e62f 000b     ?...u...Y.../...

000c4d04 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c4d0c:	e63d 000b e683 000b ea05 000b e6a5 000b     =...............
   c4d1c:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   c4d2c:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000c4d38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c4d40:	f805 000b f80b 000b f849 000b f819 000b     ........I.......
   c4d50:	f807 000b                                   ....

000c4d54 <_ZTV9IPAddress>:
	...
   c4d5c:	fd45 000b fd35 000b fd37 000b               E...5...7...

000c4d68 <_ZTV9USBSerial>:
	...
   c4d70:	fe2b 000b fe93 000b fe69 000b e489 000b     +.......i.......
   c4d80:	fe5b 000b fe2d 000b fe3d 000b fe8d 000b     [...-...=.......
   c4d90:	fe4d 000b fe25 000b                         M...%...

000c4d98 <_ZTVN5spark13CellularClassE>:
	...
   c4da0:	ff9b 000b ff91 000b ff87 000b ff3d 000b     ............=...
   c4db0:	ff7b 000b ff6f 000b 01f9 000c 0201 000c     {...o...........
   c4dc0:	ff63 000b ff5b 000b ff51 000b ff47 000b     c...[...Q...G...
   c4dd0:	0231 000c                                   1...

000c4dd4 <_ZTV11USARTSerial>:
	...
   c4ddc:	ffd5 000b 0041 000c 0019 000c e489 000b     ....A...........
   c4dec:	ffe9 000b 0005 000c fff7 000b 0013 000c     ................
   c4dfc:	ffd7 000b ffdb 000b                         ........

000c4e04 <_ZTV7TwoWire>:
	...
   c4e0c:	00b5 000c 00ff 000c 00d7 000c 00b7 000c     ................
   c4e1c:	00df 000c 00e7 000c 00ef 000c 00f7 000c     ................

000c4e2c <_ZTVN5spark12NetworkClassE>:
	...
   c4e34:	01b9 000c 01c3 000c 01cd 000c 01d7 000c     ................
   c4e44:	01e1 000c 01ed 000c 01f9 000c 0201 000c     ................
   c4e54:	0209 000c 0215 000c 021d 000c 0227 000c     ............'...
   c4e64:	0231 000c 7525 7500 3025 7834                1...%u.u%04x.

000c4e71 <_ZSt7nothrow>:
	...

000c4e72 <_ZTSSt19_Sp_make_shared_tag>:
   c4e72:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c4e82:	6572 5f64 6174 0067 0000                    red_tag...

000c4e8c <_ZTISt19_Sp_make_shared_tag>:
   c4e8c:	4ecc 000c 4e72 000c                         .N..rN..

000c4e94 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c4e94:	4f2c 000c 4ea0 000c 4f50 000c               ,O...N..PO..

000c4ea0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c4ea0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c4eb0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c4ec0:	0045 0000                                   E...

000c4ec4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c4ec4:	0000 0000 4e94 000c 08f1 000c 0905 000c     .....N..........
   c4ed4:	0a99 000c 0a99 000c 096f 000c 08b1 000c     ........o.......
   c4ee4:	0957 000c 0919 000c 08e3 000c               W...........

000c4ef0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c4ef0:	4f2c 000c 4efc 000c 4e94 000c               ,O...N...N..

000c4efc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c4efc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c4f0c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c4f1c:	666e 456f 0000 0000                         nfoE....

000c4f24 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c4f24:	0000 0000 4ef0 000c 0999 000c 09ad 000c     .....N..........
   c4f34:	0a99 000c 0a99 000c 096f 000c 08b1 000c     ........o.......
   c4f44:	0a6d 000c 09f9 000c 09c1 000c               m...........

000c4f50 <_ZTISt9type_info>:
   c4f50:	4ecc 000c 4f58 000c                         .N..XO..

000c4f58 <_ZTSSt9type_info>:
   c4f58:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c4f68:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c4f78:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   c4f88:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c4f98:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c4fa8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c4fb8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c4fc8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c4fd8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c4fe8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   c4ff8:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000c5008 <fpi.1>:
   c5008:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c5018:	0000 0000                                   ....

000c501c <fpinan.0>:
   c501c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c502c:	0000 0000                                   ....

000c5030 <tinytens>:
   c5030:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c5040:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c5050:	6f43 64ac 0628 1168                         Co.d(.h.

000c5058 <_ctype_>:
   c5058:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c5068:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c5078:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c5088:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c5098:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c50a8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c50b8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c50c8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c50d8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c5158:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c5168:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c5178:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c5188:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c5198:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c51a8:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c51b8:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c51c8:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c51d8:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c51e8:	6874 7865 632e 0000                         thex.c..

000c51f0 <_C_numeric_locale>:
   c51f0:	3ea3 000c 4c8c 000c dc58 2003 4f50 4953     .>...L..X.. POSI
   c5200:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
   c5210:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c5220:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c5230:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c5240:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c5250:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c5260:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c5270:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.

000c5280 <__mprec_bigtens>:
   c5280:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c5290:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c52a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c52a8 <__mprec_tens>:
   c52a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c52b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c52c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c52d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c52e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c52f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c5308:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c5318:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c5328:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c5338:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c5348:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c5358:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c5368:	9db4 79d9 7843 44ea                         ...yCx.D

000c5370 <p05.0>:
   c5370:	0005 0000 0019 0000 007d 0000               ........}...

000c537c <link_const_variable_data_end>:
   c537c:	000b59ed 	.word	0x000b59ed
   c5380:	000bcbd5 	.word	0x000bcbd5
   c5384:	000bcf45 	.word	0x000bcf45
   c5388:	000be479 	.word	0x000be479
   c538c:	000bf1e5 	.word	0x000bf1e5
   c5390:	000bf68d 	.word	0x000bf68d
   c5394:	000bf6c1 	.word	0x000bf6c1
   c5398:	000bffa5 	.word	0x000bffa5
   c539c:	000c0309 	.word	0x000c0309
