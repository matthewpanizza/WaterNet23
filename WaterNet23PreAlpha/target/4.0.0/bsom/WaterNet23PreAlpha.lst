
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000120c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c60e0  000c60e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c6104  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dbac  000c6108  0002dbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a50  2003dda0  2003dda0  0003dda0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c62fc  000c62fc  000362fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c6324  000c6324  00036324  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022cd1f  00000000  00000000  00036328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f16  00000000  00000000  00263047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000707c1  00000000  00000000  00283f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f50  00000000  00000000  002f471e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000112f8  00000000  00000000  002f966e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004fefb  00000000  00000000  0030a966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00087148  00000000  00000000  0035a861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bce6  00000000  00000000  003e19a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f870  00000000  00000000  0053d690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00e f8cb 	bl	c21cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00e f8ed 	bl	c221c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dbac 	.word	0x2003dbac
   b404c:	000c6108 	.word	0x000c6108
   b4050:	2003dda0 	.word	0x2003dda0
   b4054:	2003dda0 	.word	0x2003dda0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d f93b 	bl	c12dc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c60bc 	.word	0x000c60bc
   b4080:	000c60e0 	.word	0x000c60e0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 baf2 	b.w	b566c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f9c7 	bl	b541c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d b8db 	b.w	c124c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 ba6b 	b.w	bd570 <malloc>

000b409a <_Znaj>:
   b409a:	f009 ba69 	b.w	bd570 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 ba6f 	b.w	bd580 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f009 ba6d 	b.w	bd580 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 f958 	bl	bd364 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bcfb5 	.word	0x000bcfb5
   b40bc:	000c4380 	.word	0x000c4380

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00d f83e 	bl	c11bc <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00c bab8 	b.w	c06ba <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003ddec 	.word	0x2003ddec
   b4150:	2003ddac 	.word	0x2003ddac
   b4154:	2003dddc 	.word	0x2003dddc
   b4158:	2003e0ec 	.word	0x2003e0ec
   b415c:	2003de0d 	.word	0x2003de0d
   b4160:	2003df34 	.word	0x2003df34
   b4164:	2003df29 	.word	0x2003df29
   b4168:	2003e5b4 	.word	0x2003e5b4
   b416c:	2003e5d4 	.word	0x2003e5d4
   b4170:	000c4395 	.word	0x000c4395

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f002 b903 	b.w	b639c <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f002 f8fa 	bl	b639c <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 b86a 	b.w	b6288 <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f001 bf4b 	b.w	b6050 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f001 fe96 	bl	b5ef4 <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f008 fe89 	bl	bcf04 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f008 fe9b 	bl	bcf34 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f008 fe7b 	bl	bcf04 <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZN5Print5printIsLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4220:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4222:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4224:	4606      	mov	r6, r0
   b4226:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4228:	da0b      	bge.n	b4242 <_ZN5Print5printIsLi0EEEjT_i.part.0.isra.0+0x22>
   b422a:	2a0a      	cmp	r2, #10
   b422c:	d109      	bne.n	b4242 <_ZN5Print5printIsLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b422e:	212d      	movs	r1, #45	; 0x2d
   b4230:	f00c fa30 	bl	c0694 <_ZN5Print5printEc>
            val = -n;
   b4234:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4236:	b2ea      	uxtb	r2, r5
   b4238:	4630      	mov	r0, r6
    }
}
   b423a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b423e:	f00c ba48 	b.w	c06d2 <_ZN5Print11printNumberEmh>
            val = n;
   b4242:	4621      	mov	r1, r4
   b4244:	e7f7      	b.n	b4236 <_ZN5Print5printIsLi0EEEjT_i.part.0.isra.0+0x16>

000b4246 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4246:	2a01      	cmp	r2, #1
   b4248:	d102      	bne.n	b4250 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b424a:	6001      	str	r1, [r0, #0]
      }
   b424c:	2000      	movs	r0, #0
   b424e:	4770      	bx	lr
	  switch (__op)
   b4250:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4252:	bf04      	itt	eq
   b4254:	680b      	ldreq	r3, [r1, #0]
   b4256:	6003      	streq	r3, [r0, #0]
	      break;
   b4258:	e7f8      	b.n	b424c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b425a <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b425a:	6803      	ldr	r3, [r0, #0]
   b425c:	4718      	bx	r3

000b425e <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	b2c9      	uxtb	r1, r1
   b4262:	689b      	ldr	r3, [r3, #8]
   b4264:	4718      	bx	r3
	...

000b4268 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4268:	b510      	push	{r4, lr}
   b426a:	4b05      	ldr	r3, [pc, #20]	; (b4280 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b426c:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b426e:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4270:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4272:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4276:	f009 f895 	bl	bd3a4 <led_set_status_active>
}
   b427a:	4620      	mov	r0, r4
   b427c:	bd10      	pop	{r4, pc}
   b427e:	bf00      	nop
   b4280:	000c4944 	.word	0x000c4944

000b4284 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4284:	b510      	push	{r4, lr}
   b4286:	4604      	mov	r4, r0
}
   b4288:	f7ff ffee 	bl	b4268 <_ZN8particle9LEDStatusD1Ev>
   b428c:	4620      	mov	r0, r4
   b428e:	2120      	movs	r1, #32
   b4290:	f7ff ff07 	bl	b40a2 <_ZdlPvj>
   b4294:	4620      	mov	r0, r4
   b4296:	bd10      	pop	{r4, pc}

000b4298 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4298:	4b0a      	ldr	r3, [pc, #40]	; (b42c4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b429a:	b510      	push	{r4, lr}
   b429c:	4604      	mov	r4, r0
   b429e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42a0:	f00b fb14 	bl	bf8cc <_ZN5spark10LogManager8instanceEv>
   b42a4:	4621      	mov	r1, r4
   b42a6:	f00b fd4c 	bl	bfd42 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b42aa:	f00c ff87 	bl	c11bc <_Z16_fetch_usbserialv>
   b42ae:	f00c ff79 	bl	c11a4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b42b2:	4620      	mov	r0, r4
   b42b4:	4b04      	ldr	r3, [pc, #16]	; (b42c8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b42b6:	f840 3b04 	str.w	r3, [r0], #4
   b42ba:	f00b fbdd 	bl	bfa78 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42be:	4620      	mov	r0, r4
   b42c0:	bd10      	pop	{r4, pc}
   b42c2:	bf00      	nop
   b42c4:	000c4958 	.word	0x000c4958
   b42c8:	000c492c 	.word	0x000c492c

000b42cc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42cc:	b510      	push	{r4, lr}
   b42ce:	4604      	mov	r4, r0
    }
   b42d0:	f7ff ffe2 	bl	b4298 <_ZN5spark16SerialLogHandlerD1Ev>
   b42d4:	4620      	mov	r0, r4
   b42d6:	2124      	movs	r1, #36	; 0x24
   b42d8:	f7ff fee3 	bl	b40a2 <_ZdlPvj>
   b42dc:	4620      	mov	r0, r4
   b42de:	bd10      	pop	{r4, pc}

000b42e0 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42e2:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42e4:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e6:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42e8:	b130      	cbz	r0, b42f8 <_ZN5Timer5startEj.isra.0+0x18>
   b42ea:	2300      	movs	r3, #0
   b42ec:	e9cd 3300 	strd	r3, r3, [sp]
   b42f0:	461a      	mov	r2, r3
   b42f2:	2102      	movs	r1, #2
   b42f4:	f008 fe26 	bl	bcf44 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42f8:	68a0      	ldr	r0, [r4, #8]
   b42fa:	b130      	cbz	r0, b430a <_ZN5Timer5startEj.isra.0+0x2a>
   b42fc:	2300      	movs	r3, #0
   b42fe:	e9cd 5300 	strd	r5, r3, [sp]
   b4302:	461a      	mov	r2, r3
   b4304:	4619      	mov	r1, r3
   b4306:	f008 fe1d 	bl	bcf44 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b430a:	b003      	add	sp, #12
   b430c:	bd30      	pop	{r4, r5, pc}

000b430e <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b430e:	b40e      	push	{r1, r2, r3}
   b4310:	b503      	push	{r0, r1, lr}
   b4312:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4314:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4316:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b431a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b431c:	f00c facf 	bl	c08be <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4320:	b002      	add	sp, #8
   b4322:	f85d eb04 	ldr.w	lr, [sp], #4
   b4326:	b003      	add	sp, #12
   b4328:	4770      	bx	lr
	...

000b432c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b432c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b432e:	4604      	mov	r4, r0
   b4330:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4332:	7922      	ldrb	r2, [r4, #4]
   b4334:	68a3      	ldr	r3, [r4, #8]
   b4336:	b132      	cbz	r2, b4346 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4338:	b9a3      	cbnz	r3, b4364 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b433a:	490b      	ldr	r1, [pc, #44]	; (b4368 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b433c:	b002      	add	sp, #8
   b433e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4342:	f00c b9a3 	b.w	c068c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4346:	4a09      	ldr	r2, [pc, #36]	; (b436c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4348:	7b26      	ldrb	r6, [r4, #12]
   b434a:	4d09      	ldr	r5, [pc, #36]	; (b4370 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b434c:	4909      	ldr	r1, [pc, #36]	; (b4374 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b434e:	7b64      	ldrb	r4, [r4, #13]
   b4350:	2e01      	cmp	r6, #1
   b4352:	bf18      	it	ne
   b4354:	4629      	movne	r1, r5
   b4356:	e9cd 1400 	strd	r1, r4, [sp]
   b435a:	4907      	ldr	r1, [pc, #28]	; (b4378 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b435c:	f7ff ffd7 	bl	b430e <_ZN5Print6printfEPKcz>
  }
   b4360:	b002      	add	sp, #8
   b4362:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4364:	4a05      	ldr	r2, [pc, #20]	; (b437c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4366:	e7ef      	b.n	b4348 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4368:	000c43bf 	.word	0x000c43bf
   b436c:	000c5acb 	.word	0x000c5acb
   b4370:	000c43bb 	.word	0x000c43bb
   b4374:	000c43b7 	.word	0x000c43b7
   b4378:	000c43d5 	.word	0x000c43d5
   b437c:	000c43ae 	.word	0x000c43ae

000b4380 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4380:	b40e      	push	{r1, r2, r3}
   b4382:	b503      	push	{r0, r1, lr}
   b4384:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4386:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4388:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b438c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b438e:	f00c fa96 	bl	c08be <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4392:	b002      	add	sp, #8
   b4394:	f85d eb04 	ldr.w	lr, [sp], #4
   b4398:	b003      	add	sp, #12
   b439a:	4770      	bx	lr

000b439c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b439c:	b510      	push	{r4, lr}
      if (_M_manager)
   b439e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43a0:	4604      	mov	r4, r0
      if (_M_manager)
   b43a2:	b113      	cbz	r3, b43aa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43a4:	2203      	movs	r2, #3
   b43a6:	4601      	mov	r1, r0
   b43a8:	4798      	blx	r3
    }
   b43aa:	4620      	mov	r0, r4
   b43ac:	bd10      	pop	{r4, pc}
	...

000b43b0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43b2:	4b13      	ldr	r3, [pc, #76]	; (b4400 <_ZN5TimerD1Ev+0x50>)
   b43b4:	6003      	str	r3, [r0, #0]
   b43b6:	4604      	mov	r4, r0
        if (handle) {
   b43b8:	6880      	ldr	r0, [r0, #8]
   b43ba:	b1c8      	cbz	r0, b43f0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b43bc:	2500      	movs	r5, #0
   b43be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b43c2:	e9cd 3500 	strd	r3, r5, [sp]
   b43c6:	2102      	movs	r1, #2
   b43c8:	462b      	mov	r3, r5
   b43ca:	462a      	mov	r2, r5
   b43cc:	f008 fdba 	bl	bcf44 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b43d0:	68a0      	ldr	r0, [r4, #8]
   b43d2:	4629      	mov	r1, r5
   b43d4:	f008 fdde 	bl	bcf94 <os_timer_set_id>
            while (running) {
   b43d8:	7923      	ldrb	r3, [r4, #4]
   b43da:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b43de:	b113      	cbz	r3, b43e6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b43e0:	f008 fd88 	bl	bcef4 <os_thread_yield>
            while (running) {
   b43e4:	e7f8      	b.n	b43d8 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b43e6:	68a0      	ldr	r0, [r4, #8]
   b43e8:	4629      	mov	r1, r5
   b43ea:	f008 fd9b 	bl	bcf24 <os_timer_destroy>
            handle = nullptr;
   b43ee:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b43f0:	f104 000c 	add.w	r0, r4, #12
   b43f4:	f7ff ffd2 	bl	b439c <_ZNSt14_Function_baseD1Ev>
    }
   b43f8:	4620      	mov	r0, r4
   b43fa:	b003      	add	sp, #12
   b43fc:	bd30      	pop	{r4, r5, pc}
   b43fe:	bf00      	nop
   b4400:	000c4918 	.word	0x000c4918

000b4404 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4404:	b510      	push	{r4, lr}
   b4406:	4604      	mov	r4, r0
    }
   b4408:	f7ff ffd2 	bl	b43b0 <_ZN5TimerD1Ev>
   b440c:	4620      	mov	r0, r4
   b440e:	211c      	movs	r1, #28
   b4410:	f7ff fe47 	bl	b40a2 <_ZdlPvj>
   b4414:	4620      	mov	r0, r4
   b4416:	bd10      	pop	{r4, pc}

000b4418 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4418:	b5f0      	push	{r4, r5, r6, r7, lr}
   b441a:	468c      	mov	ip, r1
   b441c:	2500      	movs	r5, #0
   b441e:	4914      	ldr	r1, [pc, #80]	; (b4470 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4420:	7105      	strb	r5, [r0, #4]
   b4422:	4604      	mov	r4, r0
   b4424:	6085      	str	r5, [r0, #8]
   b4426:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4428:	e892 0003 	ldmia.w	r2, {r0, r1}
   b442c:	b085      	sub	sp, #20
   b442e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4430:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4434:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4438:	e896 0003 	ldmia.w	r6, {r0, r1}
   b443c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4440:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4444:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4448:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b444a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b444c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b444e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4450:	6095      	str	r5, [r2, #8]
   b4452:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4454:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4456:	e9cd 3500 	strd	r3, r5, [sp]
   b445a:	4a06      	ldr	r2, [pc, #24]	; (b4474 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b445c:	4623      	mov	r3, r4
   b445e:	4661      	mov	r1, ip
   b4460:	f104 0008 	add.w	r0, r4, #8
   b4464:	f008 fd56 	bl	bcf14 <os_timer_create>
    }
   b4468:	4620      	mov	r0, r4
   b446a:	b005      	add	sp, #20
   b446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b446e:	bf00      	nop
   b4470:	000c4918 	.word	0x000c4918
   b4474:	000b41e7 	.word	0x000b41e7

000b4478 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b4478:	b510      	push	{r4, lr}
   b447a:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b447c:	2200      	movs	r2, #0
   b447e:	7c40      	ldrb	r0, [r0, #17]
   b4480:	f008 ffca 	bl	bd418 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b4484:	7c63      	ldrb	r3, [r4, #17]
   b4486:	2b0f      	cmp	r3, #15
        d_.period = period;
   b4488:	bf18      	it	ne
   b448a:	8320      	strhne	r0, [r4, #24]
}
   b448c:	bd10      	pop	{r4, pc}
	...

000b4490 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b4490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   b4492:	4b24      	ldr	r3, [pc, #144]	; (b4524 <_Z10LEDHandlerv+0x94>)
   b4494:	4d24      	ldr	r5, [pc, #144]	; (b4528 <_Z10LEDHandlerv+0x98>)
   b4496:	781b      	ldrb	r3, [r3, #0]
   b4498:	b15b      	cbz	r3, b44b2 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b449a:	7c6b      	ldrb	r3, [r5, #17]
   b449c:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b449e:	bf1c      	itt	ne
   b44a0:	2302      	movne	r3, #2
   b44a2:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b44a4:	23ff      	movs	r3, #255	; 0xff
   b44a6:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b44a8:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b44aa:	481f      	ldr	r0, [pc, #124]	; (b4528 <_Z10LEDHandlerv+0x98>)
   b44ac:	f7ff ffe4 	bl	b4478 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b44b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lowBattery){
   b44b2:	4b1e      	ldr	r3, [pc, #120]	; (b452c <_Z10LEDHandlerv+0x9c>)
   b44b4:	781b      	ldrb	r3, [r3, #0]
   b44b6:	2b00      	cmp	r3, #0
   b44b8:	d12d      	bne.n	b4516 <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b44ba:	4b1d      	ldr	r3, [pc, #116]	; (b4530 <_Z10LEDHandlerv+0xa0>)
   b44bc:	781b      	ldrb	r3, [r3, #0]
   b44be:	2b00      	cmp	r3, #0
   b44c0:	d12c      	bne.n	b451c <_Z10LEDHandlerv+0x8c>
    else if(driveMode == 0){
   b44c2:	4b1c      	ldr	r3, [pc, #112]	; (b4534 <_Z10LEDHandlerv+0xa4>)
   b44c4:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b44c6:	2b00      	cmp	r3, #0
   b44c8:	bf0b      	itete	eq
   b44ca:	260a      	moveq	r6, #10
   b44cc:	2614      	movne	r6, #20
   b44ce:	2702      	moveq	r7, #2
   b44d0:	2703      	movne	r7, #3
    statusMode |= XBeeAvail << 1;
   b44d2:	4b19      	ldr	r3, [pc, #100]	; (b4538 <_Z10LEDHandlerv+0xa8>)
   b44d4:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b44d6:	4b19      	ldr	r3, [pc, #100]	; (b453c <_Z10LEDHandlerv+0xac>)
   b44d8:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b44da:	4b19      	ldr	r3, [pc, #100]	; (b4540 <_Z10LEDHandlerv+0xb0>)
    statusMode |= BLEAvail << 2;
   b44dc:	00a4      	lsls	r4, r4, #2
   b44de:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b44e2:	781a      	ldrb	r2, [r3, #0]
   b44e4:	4314      	orrs	r4, r2
   b44e6:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b44e8:	f00c fe68 	bl	c11bc <_Z16_fetch_usbserialv>
   b44ec:	4622      	mov	r2, r4
   b44ee:	3c01      	subs	r4, #1
   b44f0:	4914      	ldr	r1, [pc, #80]	; (b4544 <_Z10LEDHandlerv+0xb4>)
   b44f2:	b2e4      	uxtb	r4, r4
   b44f4:	f7ff ff44 	bl	b4380 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b44f8:	2c06      	cmp	r4, #6
   b44fa:	bf98      	it	ls
   b44fc:	4b12      	ldrls	r3, [pc, #72]	; (b4548 <_Z10LEDHandlerv+0xb8>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44fe:	7c6a      	ldrb	r2, [r5, #17]
   b4500:	bf94      	ite	ls
   b4502:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b4506:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b450a:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b450c:	bf18      	it	ne
   b450e:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b4510:	4631      	mov	r1, r6
    d_.color = color;
   b4512:	616b      	str	r3, [r5, #20]
   b4514:	e7c9      	b.n	b44aa <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b4516:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b4518:	2702      	movs	r7, #2
   b451a:	e7da      	b.n	b44d2 <_Z10LEDHandlerv+0x42>
        SetSpeed = LED_SPEED_NORMAL;
   b451c:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b451e:	2701      	movs	r7, #1
   b4520:	e7d7      	b.n	b44d2 <_Z10LEDHandlerv+0x42>
   b4522:	bf00      	nop
   b4524:	2003e0ec 	.word	0x2003e0ec
   b4528:	2003e594 	.word	0x2003e594
   b452c:	2003df34 	.word	0x2003df34
   b4530:	2003df29 	.word	0x2003df29
   b4534:	2003de0d 	.word	0x2003de0d
   b4538:	2003ddec 	.word	0x2003ddec
   b453c:	2003ddac 	.word	0x2003ddac
   b4540:	2003dddc 	.word	0x2003dddc
   b4544:	000c43f2 	.word	0x000c43f2
   b4548:	000c4a24 	.word	0x000c4a24

000b454c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b454c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b454e:	460a      	mov	r2, r1
   b4550:	4901      	ldr	r1, [pc, #4]	; (b4558 <_ZN7FatFile4openEPKci+0xc>)
   b4552:	6809      	ldr	r1, [r1, #0]
   b4554:	f001 bed5 	b.w	b6302 <_ZN7FatFile4openEPS_PKci>
   b4558:	2003e614 	.word	0x2003e614

000b455c <_Z11wdogHandlerv>:
void wdogHandler(){
   b455c:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b455e:	f008 ff7f 	bl	bd460 <spark_cloud_flag_connected>
   b4562:	4c2b      	ldr	r4, [pc, #172]	; (b4610 <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b4564:	b1e0      	cbz	r0, b45a0 <_Z11wdogHandlerv+0x44>
   b4566:	2301      	movs	r3, #1
        LTEAvail = false;
   b4568:	7023      	strb	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b456a:	f008 fd33 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b456e:	4b29      	ldr	r3, [pc, #164]	; (b4614 <_Z11wdogHandlerv+0xb8>)
   b4570:	4c29      	ldr	r4, [pc, #164]	; (b4618 <_Z11wdogHandlerv+0xbc>)
   b4572:	681b      	ldr	r3, [r3, #0]
   b4574:	f247 5230 	movw	r2, #30000	; 0x7530
   b4578:	1ac0      	subs	r0, r0, r3
   b457a:	4290      	cmp	r0, r2
   b457c:	d823      	bhi.n	b45c6 <_Z11wdogHandlerv+0x6a>
   b457e:	b313      	cbz	r3, b45c6 <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b4580:	2301      	movs	r3, #1
        XBeeAvail = false;
   b4582:	7023      	strb	r3, [r4, #0]
   b4584:	f008 fd26 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b4588:	4b24      	ldr	r3, [pc, #144]	; (b461c <_Z11wdogHandlerv+0xc0>)
   b458a:	4c25      	ldr	r4, [pc, #148]	; (b4620 <_Z11wdogHandlerv+0xc4>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	f247 5230 	movw	r2, #30000	; 0x7530
   b4592:	1ac0      	subs	r0, r0, r3
   b4594:	4290      	cmp	r0, r2
   b4596:	d828      	bhi.n	b45ea <_Z11wdogHandlerv+0x8e>
   b4598:	b33b      	cbz	r3, b45ea <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b459a:	2301      	movs	r3, #1
        BLEAvail = false;
   b459c:	7023      	strb	r3, [r4, #0]
}
   b459e:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b45a0:	7823      	ldrb	r3, [r4, #0]
   b45a2:	2b00      	cmp	r3, #0
   b45a4:	d0e1      	beq.n	b456a <_Z11wdogHandlerv+0xe>
    return m_attr;
   b45a6:	481f      	ldr	r0, [pc, #124]	; (b4624 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45a8:	7c03      	ldrb	r3, [r0, #16]
   b45aa:	b92b      	cbnz	r3, b45b8 <_Z11wdogHandlerv+0x5c>
   b45ac:	491e      	ldr	r1, [pc, #120]	; (b4628 <_Z11wdogHandlerv+0xcc>)
   b45ae:	f244 2202 	movw	r2, #16898	; 0x4202
   b45b2:	3010      	adds	r0, #16
   b45b4:	f7ff ffca 	bl	b454c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b45b8:	491c      	ldr	r1, [pc, #112]	; (b462c <_Z11wdogHandlerv+0xd0>)
   b45ba:	481a      	ldr	r0, [pc, #104]	; (b4624 <_Z11wdogHandlerv+0xc8>)
   b45bc:	221e      	movs	r2, #30
   b45be:	f7ff fedf 	bl	b4380 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b45c2:	2300      	movs	r3, #0
   b45c4:	e7d0      	b.n	b4568 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b45c6:	7823      	ldrb	r3, [r4, #0]
   b45c8:	b16b      	cbz	r3, b45e6 <_Z11wdogHandlerv+0x8a>
   b45ca:	4816      	ldr	r0, [pc, #88]	; (b4624 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45cc:	7c03      	ldrb	r3, [r0, #16]
   b45ce:	b92b      	cbnz	r3, b45dc <_Z11wdogHandlerv+0x80>
   b45d0:	4915      	ldr	r1, [pc, #84]	; (b4628 <_Z11wdogHandlerv+0xcc>)
   b45d2:	f244 2202 	movw	r2, #16898	; 0x4202
   b45d6:	3010      	adds	r0, #16
   b45d8:	f7ff ffb8 	bl	b454c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b45dc:	4913      	ldr	r1, [pc, #76]	; (b462c <_Z11wdogHandlerv+0xd0>)
   b45de:	4811      	ldr	r0, [pc, #68]	; (b4624 <_Z11wdogHandlerv+0xc8>)
   b45e0:	221e      	movs	r2, #30
   b45e2:	f7ff fecd 	bl	b4380 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b45e6:	2300      	movs	r3, #0
   b45e8:	e7cb      	b.n	b4582 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b45ea:	7822      	ldrb	r2, [r4, #0]
   b45ec:	b172      	cbz	r2, b460c <_Z11wdogHandlerv+0xb0>
   b45ee:	b16b      	cbz	r3, b460c <_Z11wdogHandlerv+0xb0>
   b45f0:	480c      	ldr	r0, [pc, #48]	; (b4624 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45f2:	7c03      	ldrb	r3, [r0, #16]
   b45f4:	b92b      	cbnz	r3, b4602 <_Z11wdogHandlerv+0xa6>
   b45f6:	490c      	ldr	r1, [pc, #48]	; (b4628 <_Z11wdogHandlerv+0xcc>)
   b45f8:	f244 2202 	movw	r2, #16898	; 0x4202
   b45fc:	3010      	adds	r0, #16
   b45fe:	f7ff ffa5 	bl	b454c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b4602:	490b      	ldr	r1, [pc, #44]	; (b4630 <_Z11wdogHandlerv+0xd4>)
   b4604:	4807      	ldr	r0, [pc, #28]	; (b4624 <_Z11wdogHandlerv+0xc8>)
   b4606:	221e      	movs	r2, #30
   b4608:	f7ff feba 	bl	b4380 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b460c:	2300      	movs	r3, #0
   b460e:	e7c5      	b.n	b459c <_Z11wdogHandlerv+0x40>
   b4610:	2003dddc 	.word	0x2003dddc
   b4614:	2003ddf0 	.word	0x2003ddf0
   b4618:	2003ddec 	.word	0x2003ddec
   b461c:	2003ddb8 	.word	0x2003ddb8
   b4620:	2003ddac 	.word	0x2003ddac
   b4624:	2003ded0 	.word	0x2003ded0
   b4628:	2003de2c 	.word	0x2003de2c
   b462c:	000c43fd 	.word	0x000c43fd
   b4630:	000c444e 	.word	0x000c444e

000b4634 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4634:	b530      	push	{r4, r5, lr}
   b4636:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4638:	4b1b      	ldr	r3, [pc, #108]	; (b46a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b463a:	9300      	str	r3, [sp, #0]
   b463c:	7913      	ldrb	r3, [r2, #4]
   b463e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4642:	6893      	ldr	r3, [r2, #8]
   b4644:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4646:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b464a:	8993      	ldrh	r3, [r2, #12]
   b464c:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4650:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4652:	460a      	mov	r2, r1
   b4654:	466b      	mov	r3, sp
   b4656:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b465a:	4628      	mov	r0, r5
   b465c:	f002 fd82 	bl	b7164 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4660:	b910      	cbnz	r0, b4668 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4662:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4664:	b005      	add	sp, #20
   b4666:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4668:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b466a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b466e:	4628      	mov	r0, r5
   b4670:	f001 fe40 	bl	b62f4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4674:	2101      	movs	r1, #1
   b4676:	4620      	mov	r0, r4
   b4678:	f002 fc1f 	bl	b6eba <_ZN9FatVolume4initEh>
   b467c:	4601      	mov	r1, r0
   b467e:	b168      	cbz	r0, b469c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4680:	4621      	mov	r1, r4
   b4682:	4628      	mov	r0, r5
   b4684:	f001 fc30 	bl	b5ee8 <_ZN7FatFile8openRootEP9FatVolume>
   b4688:	2800      	cmp	r0, #0
   b468a:	d0ea      	beq.n	b4662 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b468c:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4690:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4694:	d0e5      	beq.n	b4662 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4696:	4b05      	ldr	r3, [pc, #20]	; (b46ac <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4698:	601d      	str	r5, [r3, #0]
    return true;
   b469a:	e7e3      	b.n	b4664 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b469c:	4620      	mov	r0, r4
   b469e:	f002 fc0c 	bl	b6eba <_ZN9FatVolume4initEh>
   b46a2:	2800      	cmp	r0, #0
   b46a4:	d1ec      	bne.n	b4680 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b46a6:	e7dc      	b.n	b4662 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b46a8:	000c4904 	.word	0x000c4904
   b46ac:	2003e614 	.word	0x2003e614

000b46b0 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b46b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46b4:	b084      	sub	sp, #16
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b46b6:	7883      	ldrb	r3, [r0, #2]
   b46b8:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b46ba:	af00      	add	r7, sp, #0
   b46bc:	4604      	mov	r4, r0
   b46be:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b46c0:	d14b      	bne.n	b475a <_Z14processCommandPKchb+0xaa>
   b46c2:	78c3      	ldrb	r3, [r0, #3]
   b46c4:	2b42      	cmp	r3, #66	; 0x42
   b46c6:	d174      	bne.n	b47b2 <_Z14processCommandPKchb+0x102>
        char dataStr[strlen(command)-8];
   b46c8:	4620      	mov	r0, r4
   b46ca:	f00d fe32 	bl	c2332 <strlen>
   b46ce:	3801      	subs	r0, #1
   b46d0:	f020 0007 	bic.w	r0, r0, #7
        }
   b46d4:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b46d6:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b46da:	4620      	mov	r0, r4
   b46dc:	f00d fe29 	bl	c2332 <strlen>
   b46e0:	4468      	add	r0, sp
   b46e2:	2600      	movs	r6, #0
   b46e4:	f800 6c09 	strb.w	r6, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b46e8:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b46ea:	73fe      	strb	r6, [r7, #15]
        checkStr[0] = command[strlen(command)-2];
   b46ec:	f00d fe21 	bl	c2332 <strlen>
   b46f0:	4420      	add	r0, r4
        char dataStr[strlen(command)-8];
   b46f2:	466d      	mov	r5, sp
        checkStr[0] = command[strlen(command)-2];
   b46f4:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b46f8:	703b      	strb	r3, [r7, #0]
        checkStr[1] = command[strlen(command)-1];
   b46fa:	4620      	mov	r0, r4
   b46fc:	f00d fe19 	bl	c2332 <strlen>
   b4700:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4702:	4631      	mov	r1, r6
        checkStr[1] = command[strlen(command)-1];
   b4704:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4708:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b470a:	2210      	movs	r2, #16
   b470c:	4638      	mov	r0, r7
        checkStr[2] = '\0';
   b470e:	70be      	strb	r6, [r7, #2]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4710:	f00e fd3a 	bl	c3188 <strtol>
   b4714:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4716:	fa5f f888 	uxtb.w	r8, r8
   b471a:	f00c fd4f 	bl	c11bc <_Z16_fetch_usbserialv>
   b471e:	4978      	ldr	r1, [pc, #480]	; (b4900 <_Z14processCommandPKchb+0x250>)
   b4720:	4643      	mov	r3, r8
   b4722:	4642      	mov	r2, r8
   b4724:	f7ff fe2c 	bl	b4380 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4728:	2604      	movs	r6, #4
   b472a:	4620      	mov	r0, r4
   b472c:	f00d fe01 	bl	c2332 <strlen>
   b4730:	3802      	subs	r0, #2
   b4732:	4286      	cmp	r6, r0
   b4734:	d216      	bcs.n	b4764 <_Z14processCommandPKchb+0xb4>
            if(i < 7) cmdStr[i-4] = command[i];
   b4736:	2e06      	cmp	r6, #6
   b4738:	bf9b      	ittet	ls
   b473a:	f107 0310 	addls.w	r3, r7, #16
   b473e:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4740:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b4742:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b4744:	bf8c      	ite	hi
   b4746:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b4748:	f803 2c08 	strbls.w	r2, [r3, #-8]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b474c:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4750:	bf88      	it	hi
   b4752:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4756:	b2f6      	uxtb	r6, r6
   b4758:	e7e7      	b.n	b472a <_Z14processCommandPKchb+0x7a>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b475a:	2b42      	cmp	r3, #66	; 0x42
   b475c:	d129      	bne.n	b47b2 <_Z14processCommandPKchb+0x102>
   b475e:	78c3      	ldrb	r3, [r0, #3]
   b4760:	2b31      	cmp	r3, #49	; 0x31
   b4762:	e7b0      	b.n	b46c6 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b4764:	4540      	cmp	r0, r8
   b4766:	d02e      	beq.n	b47c6 <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b4768:	f00c fd28 	bl	c11bc <_Z16_fetch_usbserialv>
   b476c:	4605      	mov	r5, r0
   b476e:	4620      	mov	r0, r4
   b4770:	f00d fddf 	bl	c2332 <strlen>
   b4774:	1e82      	subs	r2, r0, #2
   b4776:	4628      	mov	r0, r5
    return m_attr;
   b4778:	4d62      	ldr	r5, [pc, #392]	; (b4904 <_Z14processCommandPKchb+0x254>)
   b477a:	4963      	ldr	r1, [pc, #396]	; (b4908 <_Z14processCommandPKchb+0x258>)
   b477c:	4643      	mov	r3, r8
   b477e:	f7ff fdff 	bl	b4380 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4782:	7c2b      	ldrb	r3, [r5, #16]
   b4784:	b9cb      	cbnz	r3, b47ba <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4786:	4961      	ldr	r1, [pc, #388]	; (b490c <_Z14processCommandPKchb+0x25c>)
   b4788:	f244 2202 	movw	r2, #16898	; 0x4202
   b478c:	f105 0010 	add.w	r0, r5, #16
   b4790:	f7ff fedc 	bl	b454c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4794:	495e      	ldr	r1, [pc, #376]	; (b4910 <_Z14processCommandPKchb+0x260>)
   b4796:	4622      	mov	r2, r4
   b4798:	4628      	mov	r0, r5
   b479a:	f7ff fdf1 	bl	b4380 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b479e:	f105 0010 	add.w	r0, r5, #16
   b47a2:	f001 fda7 	bl	b62f4 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b47a6:	f00c fd09 	bl	c11bc <_Z16_fetch_usbserialv>
   b47aa:	495a      	ldr	r1, [pc, #360]	; (b4914 <_Z14processCommandPKchb+0x264>)
   b47ac:	f00b ff85 	bl	c06ba <_ZN5Print7printlnEPKc>
            return;
   b47b0:	46cd      	mov	sp, r9
}
   b47b2:	3710      	adds	r7, #16
   b47b4:	46bd      	mov	sp, r7
   b47b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47ba:	4955      	ldr	r1, [pc, #340]	; (b4910 <_Z14processCommandPKchb+0x260>)
   b47bc:	4622      	mov	r2, r4
   b47be:	4628      	mov	r0, r5
   b47c0:	f7ff fdde 	bl	b4380 <_ZN5Print8printlnfEPKcz>
   b47c4:	e7ef      	b.n	b47a6 <_Z14processCommandPKchb+0xf6>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b47c6:	4954      	ldr	r1, [pc, #336]	; (b4918 <_Z14processCommandPKchb+0x268>)
   b47c8:	f107 000c 	add.w	r0, r7, #12
   b47cc:	f00d fd82 	bl	c22d4 <strcmp>
   b47d0:	2800      	cmp	r0, #0
   b47d2:	d0ed      	beq.n	b47b0 <_Z14processCommandPKchb+0x100>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b47d4:	4951      	ldr	r1, [pc, #324]	; (b491c <_Z14processCommandPKchb+0x26c>)
   b47d6:	f107 000c 	add.w	r0, r7, #12
   b47da:	f00d fd7b 	bl	c22d4 <strcmp>
   b47de:	4604      	mov	r4, r0
   b47e0:	bb58      	cbnz	r0, b483a <_Z14processCommandPKchb+0x18a>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b47e2:	782b      	ldrb	r3, [r5, #0]
   b47e4:	713b      	strb	r3, [r7, #4]
   b47e6:	786b      	ldrb	r3, [r5, #1]
   b47e8:	717b      	strb	r3, [r7, #5]
   b47ea:	78ab      	ldrb	r3, [r5, #2]
   b47ec:	71bb      	strb	r3, [r7, #6]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47ee:	78eb      	ldrb	r3, [r5, #3]
   b47f0:	723b      	strb	r3, [r7, #8]
   b47f2:	792b      	ldrb	r3, [r5, #4]
   b47f4:	727b      	strb	r3, [r7, #9]
            setLSpeed = atoi(lSpd);
   b47f6:	1d38      	adds	r0, r7, #4
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47f8:	796b      	ldrb	r3, [r5, #5]
   b47fa:	72bb      	strb	r3, [r7, #10]
            setLSpeed = atoi(lSpd);
   b47fc:	f00d fcc9 	bl	c2192 <atoi>
   b4800:	4e47      	ldr	r6, [pc, #284]	; (b4920 <_Z14processCommandPKchb+0x270>)
            setRSpeed = atoi(rSpd);
   b4802:	4d48      	ldr	r5, [pc, #288]	; (b4924 <_Z14processCommandPKchb+0x274>)
            setLSpeed = atoi(lSpd);
   b4804:	7030      	strb	r0, [r6, #0]
            setRSpeed = atoi(rSpd);
   b4806:	f107 0008 	add.w	r0, r7, #8
   b480a:	f00d fcc2 	bl	c2192 <atoi>
   b480e:	7028      	strb	r0, [r5, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4810:	f00c fcd4 	bl	c11bc <_Z16_fetch_usbserialv>
   b4814:	782b      	ldrb	r3, [r5, #0]
   b4816:	7832      	ldrb	r2, [r6, #0]
   b4818:	4943      	ldr	r1, [pc, #268]	; (b4928 <_Z14processCommandPKchb+0x278>)
   b481a:	f7ff fdb1 	bl	b4380 <_ZN5Print8printlnfEPKcz>
            ESCL.write(setLSpeed);
   b481e:	7831      	ldrb	r1, [r6, #0]
   b4820:	4842      	ldr	r0, [pc, #264]	; (b492c <_Z14processCommandPKchb+0x27c>)
   b4822:	f00c f894 	bl	c094e <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b4826:	7829      	ldrb	r1, [r5, #0]
   b4828:	4841      	ldr	r0, [pc, #260]	; (b4930 <_Z14processCommandPKchb+0x280>)
   b482a:	f00c f890 	bl	c094e <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b482e:	4b41      	ldr	r3, [pc, #260]	; (b4934 <_Z14processCommandPKchb+0x284>)
   b4830:	2201      	movs	r2, #1
   b4832:	701a      	strb	r2, [r3, #0]
            driveMode = 0;
   b4834:	4b40      	ldr	r3, [pc, #256]	; (b4938 <_Z14processCommandPKchb+0x288>)
   b4836:	701c      	strb	r4, [r3, #0]
   b4838:	e7ba      	b.n	b47b0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b483a:	4940      	ldr	r1, [pc, #256]	; (b493c <_Z14processCommandPKchb+0x28c>)
   b483c:	f107 000c 	add.w	r0, r7, #12
   b4840:	f00d fd48 	bl	c22d4 <strcmp>
   b4844:	b918      	cbnz	r0, b484e <_Z14processCommandPKchb+0x19e>
            requestActive = mode;
   b4846:	4b3e      	ldr	r3, [pc, #248]	; (b4940 <_Z14processCommandPKchb+0x290>)
   b4848:	f883 a000 	strb.w	sl, [r3]
   b484c:	e7b0      	b.n	b47b0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"pts")){
   b484e:	493d      	ldr	r1, [pc, #244]	; (b4944 <_Z14processCommandPKchb+0x294>)
   b4850:	f107 000c 	add.w	r0, r7, #12
   b4854:	f00d fd3e 	bl	c22d4 <strcmp>
   b4858:	b9f0      	cbnz	r0, b4898 <_Z14processCommandPKchb+0x1e8>
   b485a:	4c2a      	ldr	r4, [pc, #168]	; (b4904 <_Z14processCommandPKchb+0x254>)
            Serial.println(dataStr);
   b485c:	f00c fcae 	bl	c11bc <_Z16_fetch_usbserialv>
   b4860:	4629      	mov	r1, r5
   b4862:	f00b ff2a 	bl	c06ba <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b4866:	7c23      	ldrb	r3, [r4, #16]
   b4868:	b983      	cbnz	r3, b488c <_Z14processCommandPKchb+0x1dc>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b486a:	4928      	ldr	r1, [pc, #160]	; (b490c <_Z14processCommandPKchb+0x25c>)
   b486c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4870:	f104 0010 	add.w	r0, r4, #16
   b4874:	f7ff fe6a 	bl	b454c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4878:	4933      	ldr	r1, [pc, #204]	; (b4948 <_Z14processCommandPKchb+0x298>)
   b487a:	462a      	mov	r2, r5
   b487c:	4620      	mov	r0, r4
   b487e:	f7ff fd7f 	bl	b4380 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4882:	f104 0010 	add.w	r0, r4, #16
   b4886:	f001 fd35 	bl	b62f4 <_ZN7FatFile5closeEv>
   b488a:	e791      	b.n	b47b0 <_Z14processCommandPKchb+0x100>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b488c:	492e      	ldr	r1, [pc, #184]	; (b4948 <_Z14processCommandPKchb+0x298>)
   b488e:	462a      	mov	r2, r5
   b4890:	4620      	mov	r0, r4
   b4892:	f7ff fd75 	bl	b4380 <_ZN5Print8printlnfEPKcz>
   b4896:	e78b      	b.n	b47b0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4898:	492c      	ldr	r1, [pc, #176]	; (b494c <_Z14processCommandPKchb+0x29c>)
   b489a:	f107 000c 	add.w	r0, r7, #12
   b489e:	f00d fd19 	bl	c22d4 <strcmp>
   b48a2:	b920      	cbnz	r0, b48ae <_Z14processCommandPKchb+0x1fe>
   b48a4:	f008 fb96 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b48a8:	4b29      	ldr	r3, [pc, #164]	; (b4950 <_Z14processCommandPKchb+0x2a0>)
   b48aa:	6018      	str	r0, [r3, #0]
   b48ac:	e780      	b.n	b47b0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"hwa")){
   b48ae:	4929      	ldr	r1, [pc, #164]	; (b4954 <_Z14processCommandPKchb+0x2a4>)
   b48b0:	f107 000c 	add.w	r0, r7, #12
   b48b4:	f00d fd0e 	bl	c22d4 <strcmp>
   b48b8:	b910      	cbnz	r0, b48c0 <_Z14processCommandPKchb+0x210>
            waitForConnection = false;
   b48ba:	4b27      	ldr	r3, [pc, #156]	; (b4958 <_Z14processCommandPKchb+0x2a8>)
   b48bc:	7018      	strb	r0, [r3, #0]
   b48be:	e777      	b.n	b47b0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b48c0:	4926      	ldr	r1, [pc, #152]	; (b495c <_Z14processCommandPKchb+0x2ac>)
   b48c2:	f107 000c 	add.w	r0, r7, #12
   b48c6:	f00d fd05 	bl	c22d4 <strcmp>
   b48ca:	2800      	cmp	r0, #0
   b48cc:	f43f af70 	beq.w	b47b0 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b48d0:	4923      	ldr	r1, [pc, #140]	; (b4960 <_Z14processCommandPKchb+0x2b0>)
   b48d2:	f107 000c 	add.w	r0, r7, #12
   b48d6:	f00d fcfd 	bl	c22d4 <strcmp>
   b48da:	2800      	cmp	r0, #0
   b48dc:	f47f af68 	bne.w	b47b0 <_Z14processCommandPKchb+0x100>
            offloadMode = true;
   b48e0:	4b20      	ldr	r3, [pc, #128]	; (b4964 <_Z14processCommandPKchb+0x2b4>)
            status.setSpeed(LED_SPEED_FAST);
   b48e2:	4821      	ldr	r0, [pc, #132]	; (b4968 <_Z14processCommandPKchb+0x2b8>)
            offloadMode = true;
   b48e4:	2201      	movs	r2, #1
   b48e6:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b48e8:	4b1f      	ldr	r3, [pc, #124]	; (b4968 <_Z14processCommandPKchb+0x2b8>)
   b48ea:	7c5a      	ldrb	r2, [r3, #17]
   b48ec:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b48ee:	bf1c      	itt	ne
   b48f0:	2202      	movne	r2, #2
   b48f2:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b48f4:	211e      	movs	r1, #30
    d_.color = color;
   b48f6:	22ff      	movs	r2, #255	; 0xff
   b48f8:	615a      	str	r2, [r3, #20]
   b48fa:	f7ff fdbd 	bl	b4478 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b48fe:	e757      	b.n	b47b0 <_Z14processCommandPKchb+0x100>
   b4900:	000c449d 	.word	0x000c449d
   b4904:	2003ded0 	.word	0x2003ded0
   b4908:	000c44b2 	.word	0x000c44b2
   b490c:	2003de2c 	.word	0x2003de2c
   b4910:	000c44cf 	.word	0x000c44cf
   b4914:	000c44fb 	.word	0x000c44fb
   b4918:	000c451c 	.word	0x000c451c
   b491c:	000c4520 	.word	0x000c4520
   b4920:	2003e590 	.word	0x2003e590
   b4924:	2003e591 	.word	0x2003e591
   b4928:	000c4524 	.word	0x000c4524
   b492c:	2003ddbc 	.word	0x2003ddbc
   b4930:	2003ddcc 	.word	0x2003ddcc
   b4934:	2003e5e0 	.word	0x2003e5e0
   b4938:	2003de0d 	.word	0x2003de0d
   b493c:	000c4550 	.word	0x000c4550
   b4940:	2003e0ed 	.word	0x2003e0ed
   b4944:	000c4554 	.word	0x000c4554
   b4948:	000c4558 	.word	0x000c4558
   b494c:	000c457b 	.word	0x000c457b
   b4950:	2003de4c 	.word	0x2003de4c
   b4954:	000c457f 	.word	0x000c457f
   b4958:	2003e5e1 	.word	0x2003e5e1
   b495c:	000c4583 	.word	0x000c4583
   b4960:	000c4587 	.word	0x000c4587
   b4964:	2003e0ec 	.word	0x2003e0ec
   b4968:	2003e594 	.word	0x2003e594

000b496c <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b496c:	b510      	push	{r4, lr}
   b496e:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4970:	2200      	movs	r2, #0
   b4972:	2104      	movs	r1, #4
   b4974:	4620      	mov	r0, r4
   b4976:	f7ff fe9b 	bl	b46b0 <_Z14processCommandPKchb>
    if(logMessages){
   b497a:	4b0b      	ldr	r3, [pc, #44]	; (b49a8 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b497c:	781b      	ldrb	r3, [r3, #0]
   b497e:	b193      	cbz	r3, b49a6 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4980:	480a      	ldr	r0, [pc, #40]	; (b49ac <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4982:	7c03      	ldrb	r3, [r0, #16]
   b4984:	b92b      	cbnz	r3, b4992 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4986:	490a      	ldr	r1, [pc, #40]	; (b49b0 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4988:	f244 2202 	movw	r2, #16898	; 0x4202
   b498c:	3010      	adds	r0, #16
   b498e:	f7ff fddd 	bl	b454c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4992:	4622      	mov	r2, r4
   b4994:	4907      	ldr	r1, [pc, #28]	; (b49b4 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4996:	4805      	ldr	r0, [pc, #20]	; (b49ac <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4998:	f7ff fcf2 	bl	b4380 <_ZN5Print8printlnfEPKcz>
}
   b499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b49a0:	4805      	ldr	r0, [pc, #20]	; (b49b8 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b49a2:	f001 bca7 	b.w	b62f4 <_ZN7FatFile5closeEv>
}
   b49a6:	bd10      	pop	{r4, pc}
   b49a8:	2003df28 	.word	0x2003df28
   b49ac:	2003ded0 	.word	0x2003ded0
   b49b0:	2003de2c 	.word	0x2003de2c
   b49b4:	000c458b 	.word	0x000c458b
   b49b8:	2003dee0 	.word	0x2003dee0

000b49bc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b49bc:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b49be:	f101 0308 	add.w	r3, r1, #8
   b49c2:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b49c6:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b49c8:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b49cc:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b49ce:	460a      	mov	r2, r1
   b49d0:	4601      	mov	r1, r0
   b49d2:	4668      	mov	r0, sp
   b49d4:	f00d fbfa 	bl	c21cc <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49d8:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b49dc:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b49e2:	b113      	cbz	r3, b49ea <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b49e4:	2300      	movs	r3, #0
   b49e6:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b49ea:	f00c fbe7 	bl	c11bc <_Z16_fetch_usbserialv>
   b49ee:	4916      	ldr	r1, [pc, #88]	; (b4a48 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b49f0:	f00b fe63 	bl	c06ba <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b49f4:	f00c fbe2 	bl	c11bc <_Z16_fetch_usbserialv>
   b49f8:	4629      	mov	r1, r5
   b49fa:	f00b fe5e 	bl	c06ba <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b49fe:	2201      	movs	r2, #1
   b4a00:	4611      	mov	r1, r2
   b4a02:	4628      	mov	r0, r5
   b4a04:	f7ff fe54 	bl	b46b0 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4a08:	782b      	ldrb	r3, [r5, #0]
   b4a0a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4a0e:	2b41      	cmp	r3, #65	; 0x41
   b4a10:	d103      	bne.n	b4a1a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4a12:	f008 fadf 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   b4a16:	4b0d      	ldr	r3, [pc, #52]	; (b4a4c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4a18:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4a1a:	4b0d      	ldr	r3, [pc, #52]	; (b4a50 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4a1c:	781b      	ldrb	r3, [r3, #0]
   b4a1e:	b183      	cbz	r3, b4a42 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4a20:	480c      	ldr	r0, [pc, #48]	; (b4a54 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a22:	7c03      	ldrb	r3, [r0, #16]
   b4a24:	b92b      	cbnz	r3, b4a32 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4a26:	490c      	ldr	r1, [pc, #48]	; (b4a58 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4a28:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a2c:	3010      	adds	r0, #16
   b4a2e:	f7ff fd8d 	bl	b454c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4a32:	490a      	ldr	r1, [pc, #40]	; (b4a5c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4a34:	4807      	ldr	r0, [pc, #28]	; (b4a54 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4a36:	462a      	mov	r2, r5
   b4a38:	f7ff fca2 	bl	b4380 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4a3c:	4808      	ldr	r0, [pc, #32]	; (b4a60 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4a3e:	f001 fc59 	bl	b62f4 <_ZN7FatFile5closeEv>
}
   b4a42:	46bd      	mov	sp, r7
   b4a44:	bdb0      	pop	{r4, r5, r7, pc}
   b4a46:	bf00      	nop
   b4a48:	000c45ab 	.word	0x000c45ab
   b4a4c:	2003ddb8 	.word	0x2003ddb8
   b4a50:	2003df28 	.word	0x2003df28
   b4a54:	2003ded0 	.word	0x2003ded0
   b4a58:	2003de2c 	.word	0x2003de2c
   b4a5c:	000c45bb 	.word	0x000c45bb
   b4a60:	2003dee0 	.word	0x2003dee0

000b4a64 <_Z8setupLTEv>:
void setupLTE(){
   b4a64:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4a66:	2400      	movs	r4, #0
   b4a68:	e9cd 4400 	strd	r4, r4, [sp]
   b4a6c:	4904      	ldr	r1, [pc, #16]	; (b4a80 <_Z8setupLTEv+0x1c>)
   b4a6e:	4805      	ldr	r0, [pc, #20]	; (b4a84 <_Z8setupLTEv+0x20>)
   b4a70:	2301      	movs	r3, #1
   b4a72:	4622      	mov	r2, r4
   b4a74:	f008 fd04 	bl	bd480 <spark_subscribe>
    LTEAvail = false;
   b4a78:	4b03      	ldr	r3, [pc, #12]	; (b4a88 <_Z8setupLTEv+0x24>)
   b4a7a:	701c      	strb	r4, [r3, #0]
}
   b4a7c:	b002      	add	sp, #8
   b4a7e:	bd10      	pop	{r4, pc}
   b4a80:	000b496d 	.word	0x000b496d
   b4a84:	000c45db 	.word	0x000c45db
   b4a88:	2003dddc 	.word	0x2003dddc

000b4a8c <_Z9setupXBeev>:
void setupXBee(){
   b4a8c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4a8e:	f00c fd17 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   b4a92:	4908      	ldr	r1, [pc, #32]	; (b4ab4 <_Z9setupXBeev+0x28>)
   b4a94:	f7ff fc3b 	bl	b430e <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4a98:	2014      	movs	r0, #20
   b4a9a:	f008 fdd5 	bl	bd648 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4a9e:	f00c fd0f 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   b4aa2:	4905      	ldr	r1, [pc, #20]	; (b4ab8 <_Z9setupXBeev+0x2c>)
   b4aa4:	f7ff fc33 	bl	b430e <_ZN5Print6printfEPKcz>
}
   b4aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4aac:	2014      	movs	r0, #20
   b4aae:	f008 bdcb 	b.w	bd648 <delay>
   b4ab2:	bf00      	nop
   b4ab4:	000c5aca 	.word	0x000c5aca
   b4ab8:	000c43bd 	.word	0x000c43bd

000b4abc <_Z8setupGPSv>:
void setupGPS(){
   b4abc:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4abe:	f00c fcbf 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4ac2:	2300      	movs	r3, #0
   b4ac4:	4601      	mov	r1, r0
   b4ac6:	9300      	str	r3, [sp, #0]
   b4ac8:	4812      	ldr	r0, [pc, #72]	; (b4b14 <_Z8setupGPSv+0x58>)
   b4aca:	f240 434c 	movw	r3, #1100	; 0x44c
   b4ace:	2242      	movs	r2, #66	; 0x42
   b4ad0:	f007 fe1a 	bl	bc708 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4ad4:	b940      	cbnz	r0, b4ae8 <_Z8setupGPSv+0x2c>
        delay(1000);
   b4ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4ada:	f008 fdb5 	bl	bd648 <delay>
        Serial.println("Error, Could not initialize GPS");
   b4ade:	f00c fb6d 	bl	c11bc <_Z16_fetch_usbserialv>
   b4ae2:	490d      	ldr	r1, [pc, #52]	; (b4b18 <_Z8setupGPSv+0x5c>)
   b4ae4:	f00b fde9 	bl	c06ba <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4ae8:	f240 424c 	movw	r2, #1100	; 0x44c
   b4aec:	2101      	movs	r1, #1
   b4aee:	4809      	ldr	r0, [pc, #36]	; (b4b14 <_Z8setupGPSv+0x58>)
   b4af0:	f007 fd3e 	bl	bc570 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4af4:	f240 434c 	movw	r3, #1100	; 0x44c
   b4af8:	2201      	movs	r2, #1
   b4afa:	2100      	movs	r1, #0
   b4afc:	4805      	ldr	r0, [pc, #20]	; (b4b14 <_Z8setupGPSv+0x58>)
   b4afe:	f007 fd17 	bl	bc530 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4b02:	f00c fc9d 	bl	c1440 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4b06:	4905      	ldr	r1, [pc, #20]	; (b4b1c <_Z8setupGPSv+0x60>)
}
   b4b08:	b003      	add	sp, #12
   b4b0a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b0e:	f00a bac1 	b.w	bf094 <_ZN7TwoWire8setSpeedEm>
   b4b12:	bf00      	nop
   b4b14:	2003df6c 	.word	0x2003df6c
   b4b18:	000c45e1 	.word	0x000c45e1
   b4b1c:	00061a80 	.word	0x00061a80

000b4b20 <_Z12getGPSLatLonv>:
bool getGPSLatLon(){
   b4b20:	b510      	push	{r4, lr}
    latitude_mdeg= myGPS.getLatitude();
   b4b22:	4c08      	ldr	r4, [pc, #32]	; (b4b44 <_Z12getGPSLatLonv+0x24>)
   b4b24:	f240 414c 	movw	r1, #1100	; 0x44c
   b4b28:	4620      	mov	r0, r4
   b4b2a:	f007 fe6c 	bl	bc806 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b4b2e:	4b06      	ldr	r3, [pc, #24]	; (b4b48 <_Z12getGPSLatLonv+0x28>)
    longitude_mdeg = myGPS.getLongitude();
   b4b30:	f240 414c 	movw	r1, #1100	; 0x44c
    latitude_mdeg= myGPS.getLatitude();
   b4b34:	6018      	str	r0, [r3, #0]
    longitude_mdeg = myGPS.getLongitude();
   b4b36:	4620      	mov	r0, r4
   b4b38:	f007 fe42 	bl	bc7c0 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b4b3c:	4b03      	ldr	r3, [pc, #12]	; (b4b4c <_Z12getGPSLatLonv+0x2c>)
   b4b3e:	6018      	str	r0, [r3, #0]
}
   b4b40:	2001      	movs	r0, #1
   b4b42:	bd10      	pop	{r4, pc}
   b4b44:	2003df6c 	.word	0x2003df6c
   b4b48:	2003de54 	.word	0x2003de54
   b4b4c:	2003df30 	.word	0x2003df30

000b4b50 <_Z12updateMotorsv>:
void updateMotors(){
   b4b50:	b510      	push	{r4, lr}
    if(updateMotorControl){
   b4b52:	4c08      	ldr	r4, [pc, #32]	; (b4b74 <_Z12updateMotorsv+0x24>)
   b4b54:	7823      	ldrb	r3, [r4, #0]
   b4b56:	b15b      	cbz	r3, b4b70 <_Z12updateMotorsv+0x20>
        ESCL.write(setLSpeed);
   b4b58:	4b07      	ldr	r3, [pc, #28]	; (b4b78 <_Z12updateMotorsv+0x28>)
   b4b5a:	4808      	ldr	r0, [pc, #32]	; (b4b7c <_Z12updateMotorsv+0x2c>)
   b4b5c:	7819      	ldrb	r1, [r3, #0]
   b4b5e:	f00b fef6 	bl	c094e <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4b62:	4b07      	ldr	r3, [pc, #28]	; (b4b80 <_Z12updateMotorsv+0x30>)
   b4b64:	4807      	ldr	r0, [pc, #28]	; (b4b84 <_Z12updateMotorsv+0x34>)
   b4b66:	7819      	ldrb	r1, [r3, #0]
   b4b68:	f00b fef1 	bl	c094e <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4b6c:	2300      	movs	r3, #0
   b4b6e:	7023      	strb	r3, [r4, #0]
}
   b4b70:	bd10      	pop	{r4, pc}
   b4b72:	bf00      	nop
   b4b74:	2003e5e0 	.word	0x2003e5e0
   b4b78:	2003e590 	.word	0x2003e590
   b4b7c:	2003ddbc 	.word	0x2003ddbc
   b4b80:	2003e591 	.word	0x2003e591
   b4b84:	2003ddcc 	.word	0x2003ddcc

000b4b88 <_Z13sensorHandlerv>:
void sensorHandler(){
   b4b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4b8c:	4db2      	ldr	r5, [pc, #712]	; (b4e58 <_Z13sensorHandlerv+0x2d0>)
void sensorHandler(){
   b4b8e:	b0ab      	sub	sp, #172	; 0xac
   b4b90:	f008 fa20 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4b94:	682b      	ldr	r3, [r5, #0]
   b4b96:	4283      	cmp	r3, r0
   b4b98:	f080 8109 	bcs.w	b4dae <_Z13sensorHandlerv+0x226>
   b4b9c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; b4e88 <_Z13sensorHandlerv+0x300>
   b4ba0:	f89b 3000 	ldrb.w	r3, [fp]
   b4ba4:	2b00      	cmp	r3, #0
   b4ba6:	f000 8102 	beq.w	b4dae <_Z13sensorHandlerv+0x226>
        Wire.requestFrom(PHADDR, 20, 1);
   b4baa:	f00c fc49 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4bae:	2301      	movs	r3, #1
   b4bb0:	2214      	movs	r2, #20
   b4bb2:	2163      	movs	r1, #99	; 0x63
   b4bb4:	f00a fa8f 	bl	bf0d6 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4bb8:	f00c fc42 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4bbc:	6803      	ldr	r3, [r0, #0]
   b4bbe:	695b      	ldr	r3, [r3, #20]
   b4bc0:	4798      	blx	r3
        int c = 0;
   b4bc2:	ac16      	add	r4, sp, #88	; 0x58
   b4bc4:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4bc6:	f00c fc3b 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4bca:	6803      	ldr	r3, [r0, #0]
   b4bcc:	691b      	ldr	r3, [r3, #16]
   b4bce:	4798      	blx	r3
   b4bd0:	b138      	cbz	r0, b4be2 <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b4bd2:	f00c fc35 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4bd6:	6803      	ldr	r3, [r0, #0]
   b4bd8:	695b      	ldr	r3, [r3, #20]
   b4bda:	4798      	blx	r3
   b4bdc:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4be0:	e7f1      	b.n	b4bc6 <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b4be2:	4630      	mov	r0, r6
   b4be4:	f00d fad2 	bl	c218c <atof>
   b4be8:	ec51 0b10 	vmov	r0, r1, d0
   b4bec:	f00d fa5a 	bl	c20a4 <__aeabi_d2f>
   b4bf0:	f8df a298 	ldr.w	sl, [pc, #664]	; b4e8c <_Z13sensorHandlerv+0x304>
   b4bf4:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b4bf8:	f00c fc22 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4bfc:	2301      	movs	r3, #1
   b4bfe:	2214      	movs	r2, #20
   b4c00:	2164      	movs	r1, #100	; 0x64
   b4c02:	f00a fa68 	bl	bf0d6 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4c06:	f00c fc1b 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c0a:	6803      	ldr	r3, [r0, #0]
   b4c0c:	695b      	ldr	r3, [r3, #20]
   b4c0e:	4798      	blx	r3
        c = 0;
   b4c10:	ac1b      	add	r4, sp, #108	; 0x6c
   b4c12:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4c14:	f00c fc14 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c18:	6803      	ldr	r3, [r0, #0]
   b4c1a:	691b      	ldr	r3, [r3, #16]
   b4c1c:	4798      	blx	r3
   b4c1e:	b138      	cbz	r0, b4c30 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b4c20:	f00c fc0e 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c24:	6803      	ldr	r3, [r0, #0]
   b4c26:	695b      	ldr	r3, [r3, #20]
   b4c28:	4798      	blx	r3
   b4c2a:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4c2e:	e7f1      	b.n	b4c14 <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b4c30:	4630      	mov	r0, r6
   b4c32:	f00d faab 	bl	c218c <atof>
        Wire.requestFrom(COND, 20, 1);
   b4c36:	f00c fc03 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c3a:	2301      	movs	r3, #1
   b4c3c:	2214      	movs	r2, #20
   b4c3e:	2165      	movs	r1, #101	; 0x65
   b4c40:	f00a fa49 	bl	bf0d6 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4c44:	f00c fbfc 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c48:	6803      	ldr	r3, [r0, #0]
   b4c4a:	695b      	ldr	r3, [r3, #20]
   b4c4c:	4798      	blx	r3
        c = 0;
   b4c4e:	ac20      	add	r4, sp, #128	; 0x80
   b4c50:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4c52:	f00c fbf5 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c56:	6803      	ldr	r3, [r0, #0]
   b4c58:	691b      	ldr	r3, [r3, #16]
   b4c5a:	4798      	blx	r3
   b4c5c:	b138      	cbz	r0, b4c6e <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b4c5e:	f00c fbef 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c62:	6803      	ldr	r3, [r0, #0]
   b4c64:	695b      	ldr	r3, [r3, #20]
   b4c66:	4798      	blx	r3
   b4c68:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4c6c:	e7f1      	b.n	b4c52 <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b4c6e:	4630      	mov	r0, r6
   b4c70:	f00d fa8c 	bl	c218c <atof>
   b4c74:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b4c78:	f00c fbe2 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c7c:	2301      	movs	r3, #1
   b4c7e:	2214      	movs	r2, #20
   b4c80:	2166      	movs	r1, #102	; 0x66
   b4c82:	f00a fa28 	bl	bf0d6 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4c86:	f00c fbdb 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c8a:	6803      	ldr	r3, [r0, #0]
   b4c8c:	695b      	ldr	r3, [r3, #20]
   b4c8e:	4798      	blx	r3
        c = 0;
   b4c90:	af25      	add	r7, sp, #148	; 0x94
   b4c92:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b4c94:	f00c fbd4 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4c98:	6803      	ldr	r3, [r0, #0]
   b4c9a:	691b      	ldr	r3, [r3, #16]
   b4c9c:	4798      	blx	r3
   b4c9e:	4604      	mov	r4, r0
   b4ca0:	b138      	cbz	r0, b4cb2 <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b4ca2:	f00c fbcd 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4ca6:	6803      	ldr	r3, [r0, #0]
   b4ca8:	695b      	ldr	r3, [r3, #20]
   b4caa:	4798      	blx	r3
   b4cac:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b4cb0:	e7f0      	b.n	b4c94 <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b4cb2:	4630      	mov	r0, r6
   b4cb4:	f00d fa6a 	bl	c218c <atof>
        if(logSensors){
   b4cb8:	4b68      	ldr	r3, [pc, #416]	; (b4e5c <_Z13sensorHandlerv+0x2d4>)
        dataWait = false;
   b4cba:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b4cbe:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b4cc0:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b4cc4:	2b00      	cmp	r3, #0
   b4cc6:	d072      	beq.n	b4dae <_Z13sensorHandlerv+0x226>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b4cc8:	f00c f99c 	bl	c1004 <_ZN9TimeClass5monthEv>
   b4ccc:	9011      	str	r0, [sp, #68]	; 0x44
   b4cce:	f00c f98d 	bl	c0fec <_ZN9TimeClass3dayEv>
   b4cd2:	4604      	mov	r4, r0
   b4cd4:	f00c f99e 	bl	c1014 <_ZN9TimeClass4yearEv>
   b4cd8:	4683      	mov	fp, r0
   b4cda:	f00c f963 	bl	c0fa4 <_ZN9TimeClass4hourEv>
   b4cde:	9010      	str	r0, [sp, #64]	; 0x40
   b4ce0:	f00c f96c 	bl	c0fbc <_ZN9TimeClass6minuteEv>
   b4ce4:	900f      	str	r0, [sp, #60]	; 0x3c
   b4ce6:	f00c f975 	bl	c0fd4 <_ZN9TimeClass6secondEv>
   b4cea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4cec:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b4cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b4cf0:	9004      	str	r0, [sp, #16]
   b4cf2:	e9cd b201 	strd	fp, r2, [sp, #4]
   b4cf6:	9103      	str	r1, [sp, #12]
   b4cf8:	4a59      	ldr	r2, [pc, #356]	; (b4e60 <_Z13sensorHandlerv+0x2d8>)
   b4cfa:	9400      	str	r4, [sp, #0]
   b4cfc:	2110      	movs	r1, #16
   b4cfe:	a812      	add	r0, sp, #72	; 0x48
   b4d00:	f008 fc56 	bl	bd5b0 <snprintf>
   b4d04:	4857      	ldr	r0, [pc, #348]	; (b4e64 <_Z13sensorHandlerv+0x2dc>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b4d06:	7c03      	ldrb	r3, [r0, #16]
   b4d08:	b92b      	cbnz	r3, b4d16 <_Z13sensorHandlerv+0x18e>
   b4d0a:	4957      	ldr	r1, [pc, #348]	; (b4e68 <_Z13sensorHandlerv+0x2e0>)
   b4d0c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d10:	3010      	adds	r0, #16
   b4d12:	f7ff fc1b 	bl	b454c <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b4d16:	4649      	mov	r1, r9
   b4d18:	4640      	mov	r0, r8
   b4d1a:	f00d f9c3 	bl	c20a4 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4d1e:	f00c fe71 	bl	c1a04 <__aeabi_f2d>
   b4d22:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b4d26:	4b51      	ldr	r3, [pc, #324]	; (b4e6c <_Z13sensorHandlerv+0x2e4>)
   b4d28:	6818      	ldr	r0, [r3, #0]
   b4d2a:	f00c fe6b 	bl	c1a04 <__aeabi_f2d>
   b4d2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b4d32:	4b4f      	ldr	r3, [pc, #316]	; (b4e70 <_Z13sensorHandlerv+0x2e8>)
   b4d34:	6818      	ldr	r0, [r3, #0]
   b4d36:	f00c fe65 	bl	c1a04 <__aeabi_f2d>
   b4d3a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4d3e:	f8da 0000 	ldr.w	r0, [sl]
   b4d42:	f00c fe5f 	bl	c1a04 <__aeabi_f2d>
   b4d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b4d4a:	4639      	mov	r1, r7
   b4d4c:	4630      	mov	r0, r6
   b4d4e:	f00d f9a9 	bl	c20a4 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4d52:	f00c fe57 	bl	c1a04 <__aeabi_f2d>
   b4d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4d5a:	4b46      	ldr	r3, [pc, #280]	; (b4e74 <_Z13sensorHandlerv+0x2ec>)
   b4d5c:	6818      	ldr	r0, [r3, #0]
   b4d5e:	ee07 0a90 	vmov	s15, r0
   b4d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d66:	ee17 0a90 	vmov	r0, s15
   b4d6a:	f00c fe4b 	bl	c1a04 <__aeabi_f2d>
   b4d6e:	a338      	add	r3, pc, #224	; (adr r3, b4e50 <_Z13sensorHandlerv+0x2c8>)
   b4d70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d74:	f00c ffc8 	bl	c1d08 <__aeabi_ddiv>
   b4d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4d7c:	4b3e      	ldr	r3, [pc, #248]	; (b4e78 <_Z13sensorHandlerv+0x2f0>)
   b4d7e:	6818      	ldr	r0, [r3, #0]
   b4d80:	ee07 0a90 	vmov	s15, r0
   b4d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d88:	ee17 0a90 	vmov	r0, s15
   b4d8c:	f00c fe3a 	bl	c1a04 <__aeabi_f2d>
   b4d90:	a32f      	add	r3, pc, #188	; (adr r3, b4e50 <_Z13sensorHandlerv+0x2c8>)
   b4d92:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d96:	f00c ffb7 	bl	c1d08 <__aeabi_ddiv>
   b4d9a:	aa12      	add	r2, sp, #72	; 0x48
   b4d9c:	e9cd 0100 	strd	r0, r1, [sp]
   b4da0:	4936      	ldr	r1, [pc, #216]	; (b4e7c <_Z13sensorHandlerv+0x2f4>)
   b4da2:	4830      	ldr	r0, [pc, #192]	; (b4e64 <_Z13sensorHandlerv+0x2dc>)
   b4da4:	f7ff faec 	bl	b4380 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b4da8:	4835      	ldr	r0, [pc, #212]	; (b4e80 <_Z13sensorHandlerv+0x2f8>)
   b4daa:	f001 faa3 	bl	b62f4 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b4dae:	4c35      	ldr	r4, [pc, #212]	; (b4e84 <_Z13sensorHandlerv+0x2fc>)
   b4db0:	f008 f910 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   b4db4:	6823      	ldr	r3, [r4, #0]
   b4db6:	4283      	cmp	r3, r0
   b4db8:	d244      	bcs.n	b4e44 <_Z13sensorHandlerv+0x2bc>
   b4dba:	f008 f90b 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b4dbe:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b4dc2:	6020      	str	r0, [r4, #0]
   b4dc4:	f008 f906 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b4dc8:	f200 3039 	addw	r0, r0, #825	; 0x339
   b4dcc:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b4dce:	f00c fb37 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4dd2:	2163      	movs	r1, #99	; 0x63
   b4dd4:	f00a f998 	bl	bf108 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4dd8:	f00c fb32 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4ddc:	2172      	movs	r1, #114	; 0x72
   b4dde:	f7ff fa3e 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4de2:	f00c fb2d 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4de6:	f00a f996 	bl	bf116 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b4dea:	f00c fb29 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4dee:	2164      	movs	r1, #100	; 0x64
   b4df0:	f00a f98a 	bl	bf108 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4df4:	f00c fb24 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4df8:	2172      	movs	r1, #114	; 0x72
   b4dfa:	f7ff fa30 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4dfe:	f00c fb1f 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4e02:	f00a f988 	bl	bf116 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b4e06:	f00c fb1b 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4e0a:	2165      	movs	r1, #101	; 0x65
   b4e0c:	f00a f97c 	bl	bf108 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4e10:	f00c fb16 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4e14:	2172      	movs	r1, #114	; 0x72
   b4e16:	f7ff fa22 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4e1a:	f00c fb11 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4e1e:	f00a f97a 	bl	bf116 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b4e22:	f00c fb0d 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4e26:	2166      	movs	r1, #102	; 0x66
   b4e28:	f00a f96e 	bl	bf108 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4e2c:	f00c fb08 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4e30:	2172      	movs	r1, #114	; 0x72
   b4e32:	f7ff fa14 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4e36:	f00c fb03 	bl	c1440 <_Z19__fetch_global_Wirev>
   b4e3a:	f00a f96c 	bl	bf116 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b4e3e:	4b12      	ldr	r3, [pc, #72]	; (b4e88 <_Z13sensorHandlerv+0x300>)
   b4e40:	2201      	movs	r2, #1
   b4e42:	701a      	strb	r2, [r3, #0]
}
   b4e44:	b02b      	add	sp, #172	; 0xac
   b4e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4e4a:	bf00      	nop
   b4e4c:	f3af 8000 	nop.w
   b4e50:	00000000 	.word	0x00000000
   b4e54:	412e8480 	.word	0x412e8480
   b4e58:	2003de08 	.word	0x2003de08
   b4e5c:	2003df29 	.word	0x2003df29
   b4e60:	000c4601 	.word	0x000c4601
   b4e64:	2003df38 	.word	0x2003df38
   b4e68:	2003de0e 	.word	0x2003de0e
   b4e6c:	2003e584 	.word	0x2003e584
   b4e70:	2003e580 	.word	0x2003e580
   b4e74:	2003df30 	.word	0x2003df30
   b4e78:	2003de54 	.word	0x2003de54
   b4e7c:	000c461a 	.word	0x000c461a
   b4e80:	2003df48 	.word	0x2003df48
   b4e84:	2003e58c 	.word	0x2003e58c
   b4e88:	2003de0c 	.word	0x2003de0c
   b4e8c:	2003e588 	.word	0x2003e588

000b4e90 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4e94:	4e3c      	ldr	r6, [pc, #240]	; (b4f88 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4e96:	f8df 8104 	ldr.w	r8, [pc, #260]	; b4f9c <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b4e9a:	f8df 9104 	ldr.w	r9, [pc, #260]	; b4fa0 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b4e9e:	b089      	sub	sp, #36	; 0x24
   b4ea0:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4ea2:	f00c fb0d 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   b4ea6:	6803      	ldr	r3, [r0, #0]
   b4ea8:	691b      	ldr	r3, [r3, #16]
   b4eaa:	4798      	blx	r3
   b4eac:	2800      	cmp	r0, #0
   b4eae:	d066      	beq.n	b4f7e <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b4eb0:	f00c fb06 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   b4eb4:	220a      	movs	r2, #10
   b4eb6:	4601      	mov	r1, r0
   b4eb8:	4638      	mov	r0, r7
   b4eba:	f00b feeb 	bl	c0c94 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4ebe:	68bb      	ldr	r3, [r7, #8]
   b4ec0:	3307      	adds	r3, #7
   b4ec2:	f023 0307 	bic.w	r3, r3, #7
    }
   b4ec6:	466d      	mov	r5, sp
        char buffer[data.length()];
   b4ec8:	ebad 0d03 	sub.w	sp, sp, r3
   b4ecc:	46ea      	mov	sl, sp
   b4ece:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4ed0:	68b9      	ldr	r1, [r7, #8]
   b4ed2:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4ed6:	458b      	cmp	fp, r1
   b4ed8:	f103 0401 	add.w	r4, r3, #1
   b4edc:	d207      	bcs.n	b4eee <_Z11XBeeHandlerv+0x5e>
   b4ede:	4659      	mov	r1, fp
   b4ee0:	4638      	mov	r0, r7
   b4ee2:	f00b ffcf 	bl	c0e84 <_ZNK6String6charAtEj>
   b4ee6:	4623      	mov	r3, r4
   b4ee8:	f80a 000b 	strb.w	r0, [sl, fp]
   b4eec:	e7f0      	b.n	b4ed0 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4eee:	2901      	cmp	r1, #1
   b4ef0:	d90a      	bls.n	b4f08 <_Z11XBeeHandlerv+0x78>
   b4ef2:	3901      	subs	r1, #1
   b4ef4:	4638      	mov	r0, r7
   b4ef6:	f00b ffc5 	bl	c0e84 <_ZNK6String6charAtEj>
   b4efa:	280d      	cmp	r0, #13
   b4efc:	bf01      	itttt	eq
   b4efe:	68bb      	ldreq	r3, [r7, #8]
   b4f00:	4453      	addeq	r3, sl
   b4f02:	2200      	moveq	r2, #0
   b4f04:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4f08:	2201      	movs	r2, #1
   b4f0a:	2102      	movs	r1, #2
   b4f0c:	4650      	mov	r0, sl
   b4f0e:	f7ff fbcf 	bl	b46b0 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4f12:	f00c f953 	bl	c11bc <_Z16_fetch_usbserialv>
   b4f16:	4631      	mov	r1, r6
   b4f18:	f00b fbcf 	bl	c06ba <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4f1c:	f00c f94e 	bl	c11bc <_Z16_fetch_usbserialv>
   b4f20:	6839      	ldr	r1, [r7, #0]
   b4f22:	f00b fbca 	bl	c06ba <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4f26:	f89a 3000 	ldrb.w	r3, [sl]
   b4f2a:	3b42      	subs	r3, #66	; 0x42
   b4f2c:	2b01      	cmp	r3, #1
   b4f2e:	d803      	bhi.n	b4f38 <_Z11XBeeHandlerv+0xa8>
   b4f30:	f008 f850 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   b4f34:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b4f38:	f899 3000 	ldrb.w	r3, [r9]
   b4f3c:	b1d3      	cbz	r3, b4f74 <_Z11XBeeHandlerv+0xe4>
   b4f3e:	4813      	ldr	r0, [pc, #76]	; (b4f8c <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4f40:	7c03      	ldrb	r3, [r0, #16]
   b4f42:	b92b      	cbnz	r3, b4f50 <_Z11XBeeHandlerv+0xc0>
   b4f44:	4912      	ldr	r1, [pc, #72]	; (b4f90 <_Z11XBeeHandlerv+0x100>)
   b4f46:	f244 2202 	movw	r2, #16898	; 0x4202
   b4f4a:	3010      	adds	r0, #16
   b4f4c:	f7ff fafe 	bl	b454c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4f50:	4639      	mov	r1, r7
   b4f52:	f107 0010 	add.w	r0, r7, #16
   b4f56:	f00b ff4b 	bl	c0df0 <_ZN6StringC1ERKS_>
   b4f5a:	490e      	ldr	r1, [pc, #56]	; (b4f94 <_Z11XBeeHandlerv+0x104>)
   b4f5c:	480b      	ldr	r0, [pc, #44]	; (b4f8c <_Z11XBeeHandlerv+0xfc>)
   b4f5e:	f107 0210 	add.w	r2, r7, #16
   b4f62:	f7ff fa0d 	bl	b4380 <_ZN5Print8printlnfEPKcz>
   b4f66:	f107 0010 	add.w	r0, r7, #16
   b4f6a:	f00b feab 	bl	c0cc4 <_ZN6StringD1Ev>
            logFile.close();
   b4f6e:	480a      	ldr	r0, [pc, #40]	; (b4f98 <_Z11XBeeHandlerv+0x108>)
   b4f70:	f001 f9c0 	bl	b62f4 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4f74:	4638      	mov	r0, r7
   b4f76:	f00b fea5 	bl	c0cc4 <_ZN6StringD1Ev>
   b4f7a:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b4f7c:	e791      	b.n	b4ea2 <_Z11XBeeHandlerv+0x12>
}
   b4f7e:	3724      	adds	r7, #36	; 0x24
   b4f80:	46bd      	mov	sp, r7
   b4f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f86:	bf00      	nop
   b4f88:	000c4632 	.word	0x000c4632
   b4f8c:	2003ded0 	.word	0x2003ded0
   b4f90:	2003de2c 	.word	0x2003de2c
   b4f94:	000c4644 	.word	0x000c4644
   b4f98:	2003dee0 	.word	0x2003dee0
   b4f9c:	2003ddf0 	.word	0x2003ddf0
   b4fa0:	2003df28 	.word	0x2003df28

000b4fa4 <_Z13dataOffloaderv>:
void dataOffloader(){
   b4fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4fa8:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b4faa:	f00c f907 	bl	c11bc <_Z16_fetch_usbserialv>
   b4fae:	4961      	ldr	r1, [pc, #388]	; (b5134 <_Z13dataOffloaderv+0x190>)
   b4fb0:	f00b fb83 	bl	c06ba <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b4fb4:	4960      	ldr	r1, [pc, #384]	; (b5138 <_Z13dataOffloaderv+0x194>)
   b4fb6:	4861      	ldr	r0, [pc, #388]	; (b513c <_Z13dataOffloaderv+0x198>)
   b4fb8:	2200      	movs	r2, #0
   b4fba:	f7ff fac7 	bl	b454c <_ZN7FatFile4openEPKci>
   b4fbe:	b948      	cbnz	r0, b4fd4 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b4fc0:	4b5f      	ldr	r3, [pc, #380]	; (b5140 <_Z13dataOffloaderv+0x19c>)
   b4fc2:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b4fc4:	f00c f8fa 	bl	c11bc <_Z16_fetch_usbserialv>
   b4fc8:	495e      	ldr	r1, [pc, #376]	; (b5144 <_Z13dataOffloaderv+0x1a0>)
}
   b4fca:	b02d      	add	sp, #180	; 0xb4
   b4fcc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b4fd0:	f00b bb73 	b.w	c06ba <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b4fd4:	f00c f8f2 	bl	c11bc <_Z16_fetch_usbserialv>
   b4fd8:	495b      	ldr	r1, [pc, #364]	; (b5148 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b4fda:	4d5c      	ldr	r5, [pc, #368]	; (b514c <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b4fdc:	f00b fb6d 	bl	c06ba <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b4fe0:	f008 fe96 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fe4:	f008 fef2 	bl	bddcc <_ZNK8particle14BleLocalDevice9connectedEv>
   b4fe8:	4604      	mov	r4, r0
   b4fea:	b948      	cbnz	r0, b5000 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b4fec:	f008 fe90 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ff0:	4622      	mov	r2, r4
   b4ff2:	4629      	mov	r1, r5
   b4ff4:	f008 ff3d 	bl	bde72 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b4ff8:	200a      	movs	r0, #10
   b4ffa:	f008 fb25 	bl	bd648 <delay>
    while(!BLE.connected()){
   b4ffe:	e7ef      	b.n	b4fe0 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b5000:	f00c f8dc 	bl	c11bc <_Z16_fetch_usbserialv>
   b5004:	4952      	ldr	r1, [pc, #328]	; (b5150 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5006:	4f4d      	ldr	r7, [pc, #308]	; (b513c <_Z13dataOffloaderv+0x198>)
   b5008:	4d52      	ldr	r5, [pc, #328]	; (b5154 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b500a:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5178 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b500e:	f00b fb54 	bl	c06ba <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5012:	2200      	movs	r2, #0
   b5014:	4639      	mov	r1, r7
   b5016:	4628      	mov	r0, r5
   b5018:	f001 f8f9 	bl	b620e <_ZN7FatFile8openNextEPS_i>
   b501c:	b1f8      	cbz	r0, b505e <_Z13dataOffloaderv+0xba>
   b501e:	f008 fe77 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5022:	f008 fed3 	bl	bddcc <_ZNK8particle14BleLocalDevice9connectedEv>
   b5026:	b1d0      	cbz	r0, b505e <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5028:	221e      	movs	r2, #30
   b502a:	a901      	add	r1, sp, #4
   b502c:	4628      	mov	r0, r5
   b502e:	f001 fab5 	bl	b659c <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5032:	f00c f8c3 	bl	c11bc <_Z16_fetch_usbserialv>
   b5036:	4641      	mov	r1, r8
   b5038:	aa01      	add	r2, sp, #4
   b503a:	f7ff f9a1 	bl	b4380 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b503e:	a801      	add	r0, sp, #4
   b5040:	f00d f977 	bl	c2332 <strlen>
   b5044:	ab01      	add	r3, sp, #4
   b5046:	3804      	subs	r0, #4
   b5048:	4418      	add	r0, r3
   b504a:	f00d f97b 	bl	c2344 <strlwr>
   b504e:	4942      	ldr	r1, [pc, #264]	; (b5158 <_Z13dataOffloaderv+0x1b4>)
   b5050:	f00d f9d1 	bl	c23f6 <strstr>
   b5054:	b9d8      	cbnz	r0, b508e <_Z13dataOffloaderv+0xea>
            myFile.close();
   b5056:	4628      	mov	r0, r5
   b5058:	f001 f94c 	bl	b62f4 <_ZN7FatFile5closeEv>
   b505c:	e7d9      	b.n	b5012 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b505e:	4837      	ldr	r0, [pc, #220]	; (b513c <_Z13dataOffloaderv+0x198>)
   b5060:	f001 f948 	bl	b62f4 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5064:	2226      	movs	r2, #38	; 0x26
   b5066:	2100      	movs	r1, #0
   b5068:	a809      	add	r0, sp, #36	; 0x24
   b506a:	f00d f8d7 	bl	c221c <memset>
    strcpy(fileCode,"filedone");
   b506e:	493b      	ldr	r1, [pc, #236]	; (b515c <_Z13dataOffloaderv+0x1b8>)
   b5070:	a809      	add	r0, sp, #36	; 0x24
   b5072:	f00d f939 	bl	c22e8 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5076:	2300      	movs	r3, #0
   b5078:	2226      	movs	r2, #38	; 0x26
   b507a:	a909      	add	r1, sp, #36	; 0x24
   b507c:	4838      	ldr	r0, [pc, #224]	; (b5160 <_Z13dataOffloaderv+0x1bc>)
   b507e:	f008 fd37 	bl	bdaf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5082:	4b2f      	ldr	r3, [pc, #188]	; (b5140 <_Z13dataOffloaderv+0x19c>)
   b5084:	2200      	movs	r2, #0
   b5086:	701a      	strb	r2, [r3, #0]
}
   b5088:	b02d      	add	sp, #180	; 0xb4
   b508a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b508e:	2226      	movs	r2, #38	; 0x26
   b5090:	2100      	movs	r1, #0
   b5092:	a809      	add	r0, sp, #36	; 0x24
   b5094:	f00d f8c2 	bl	c221c <memset>
            strcpy(fileCode,"filename");
   b5098:	4932      	ldr	r1, [pc, #200]	; (b5164 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b509a:	4e33      	ldr	r6, [pc, #204]	; (b5168 <_Z13dataOffloaderv+0x1c4>)
   b509c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b5160 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b50a0:	a809      	add	r0, sp, #36	; 0x24
   b50a2:	f00d f921 	bl	c22e8 <strcpy>
            strcat(fileCode,namebuf);
   b50a6:	a901      	add	r1, sp, #4
   b50a8:	a809      	add	r0, sp, #36	; 0x24
   b50aa:	f00d f8ed 	bl	c2288 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b50ae:	f00c f885 	bl	c11bc <_Z16_fetch_usbserialv>
   b50b2:	492e      	ldr	r1, [pc, #184]	; (b516c <_Z13dataOffloaderv+0x1c8>)
   b50b4:	aa09      	add	r2, sp, #36	; 0x24
   b50b6:	f7ff f963 	bl	b4380 <_ZN5Print8printlnfEPKcz>
   b50ba:	2300      	movs	r3, #0
   b50bc:	2226      	movs	r2, #38	; 0x26
   b50be:	a909      	add	r1, sp, #36	; 0x24
   b50c0:	4827      	ldr	r0, [pc, #156]	; (b5160 <_Z13dataOffloaderv+0x1bc>)
   b50c2:	f008 fd15 	bl	bdaf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b50c6:	f00c f879 	bl	c11bc <_Z16_fetch_usbserialv>
   b50ca:	4929      	ldr	r1, [pc, #164]	; (b5170 <_Z13dataOffloaderv+0x1cc>)
   b50cc:	aa01      	add	r2, sp, #4
   b50ce:	f7ff f957 	bl	b4380 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b50d2:	2096      	movs	r0, #150	; 0x96
   b50d4:	f008 fab8 	bl	bd648 <delay>
            noInterrupts();
   b50d8:	f00a f820 	bl	bf11c <_Z12noInterruptsv>
            while(myFile.available()){
   b50dc:	4630      	mov	r0, r6
   b50de:	f7fe fffe 	bl	b40de <_ZN4File9availableEv>
   b50e2:	4604      	mov	r4, r0
   b50e4:	b188      	cbz	r0, b510a <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b50e6:	2264      	movs	r2, #100	; 0x64
   b50e8:	2100      	movs	r1, #0
   b50ea:	a813      	add	r0, sp, #76	; 0x4c
   b50ec:	f00d f896 	bl	c221c <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b50f0:	aa13      	add	r2, sp, #76	; 0x4c
   b50f2:	2364      	movs	r3, #100	; 0x64
   b50f4:	210d      	movs	r1, #13
   b50f6:	4630      	mov	r0, r6
   b50f8:	f00b fdb4 	bl	c0c64 <_ZN6Stream14readBytesUntilEcPcj>
   b50fc:	2300      	movs	r3, #0
   b50fe:	2264      	movs	r2, #100	; 0x64
   b5100:	a913      	add	r1, sp, #76	; 0x4c
   b5102:	4648      	mov	r0, r9
   b5104:	f008 fcf4 	bl	bdaf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5108:	e7e8      	b.n	b50dc <_Z13dataOffloaderv+0x138>
            interrupts();
   b510a:	f00a f809 	bl	bf120 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b510e:	2226      	movs	r2, #38	; 0x26
   b5110:	4621      	mov	r1, r4
   b5112:	a809      	add	r0, sp, #36	; 0x24
   b5114:	f00d f882 	bl	c221c <memset>
            strcpy(fileCode,"filecomp");
   b5118:	4916      	ldr	r1, [pc, #88]	; (b5174 <_Z13dataOffloaderv+0x1d0>)
   b511a:	a809      	add	r0, sp, #36	; 0x24
   b511c:	f00d f8e4 	bl	c22e8 <strcpy>
   b5120:	4623      	mov	r3, r4
   b5122:	2226      	movs	r2, #38	; 0x26
   b5124:	a909      	add	r1, sp, #36	; 0x24
   b5126:	480e      	ldr	r0, [pc, #56]	; (b5160 <_Z13dataOffloaderv+0x1bc>)
   b5128:	f008 fce2 	bl	bdaf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b512c:	2096      	movs	r0, #150	; 0x96
   b512e:	f008 fa8b 	bl	bd648 <delay>
   b5132:	e790      	b.n	b5056 <_Z13dataOffloaderv+0xb2>
   b5134:	000c4665 	.word	0x000c4665
   b5138:	000c4682 	.word	0x000c4682
   b513c:	2003deac 	.word	0x2003deac
   b5140:	2003e0ec 	.word	0x2003e0ec
   b5144:	000c4684 	.word	0x000c4684
   b5148:	000c46b1 	.word	0x000c46b1
   b514c:	2003ddf8 	.word	0x2003ddf8
   b5150:	000c46d1 	.word	0x000c46d1
   b5154:	2003df48 	.word	0x2003df48
   b5158:	000c470f 	.word	0x000c470f
   b515c:	000c4714 	.word	0x000c4714
   b5160:	2003e0e4 	.word	0x2003e0e4
   b5164:	000c471d 	.word	0x000c471d
   b5168:	2003df38 	.word	0x2003df38
   b516c:	000c4726 	.word	0x000c4726
   b5170:	000c4739 	.word	0x000c4739
   b5174:	000c4761 	.word	0x000c4761
   b5178:	000c46e6 	.word	0x000c46e6

000b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b517c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b517e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5180:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5182:	b17c      	cbz	r4, b51a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5184:	6863      	ldr	r3, [r4, #4]
   b5186:	3b01      	subs	r3, #1
   b5188:	6063      	str	r3, [r4, #4]
   b518a:	b95b      	cbnz	r3, b51a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b518c:	6823      	ldr	r3, [r4, #0]
   b518e:	4620      	mov	r0, r4
   b5190:	689b      	ldr	r3, [r3, #8]
   b5192:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5194:	68a3      	ldr	r3, [r4, #8]
   b5196:	3b01      	subs	r3, #1
   b5198:	60a3      	str	r3, [r4, #8]
   b519a:	b91b      	cbnz	r3, b51a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b519c:	6823      	ldr	r3, [r4, #0]
   b519e:	4620      	mov	r0, r4
   b51a0:	68db      	ldr	r3, [r3, #12]
   b51a2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b51a4:	4628      	mov	r0, r5
   b51a6:	bd38      	pop	{r3, r4, r5, pc}

000b51a8 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b51a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b51ac:	b084      	sub	sp, #16
   b51ae:	af02      	add	r7, sp, #8
   b51b0:	4680      	mov	r8, r0
   b51b2:	4691      	mov	r9, r2
   b51b4:	461e      	mov	r6, r3
   b51b6:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b51b8:	f00d f8bb 	bl	c2332 <strlen>
   b51bc:	3009      	adds	r0, #9
   b51be:	f020 0107 	bic.w	r1, r0, #7
   b51c2:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b51c6:	4640      	mov	r0, r8
   b51c8:	f00d f8b3 	bl	c2332 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b51cc:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b51d0:	4925      	ldr	r1, [pc, #148]	; (b5268 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b51d2:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b51d4:	4603      	mov	r3, r0
   b51d6:	4642      	mov	r2, r8
   b51d8:	4620      	mov	r0, r4
   b51da:	f008 f9e1 	bl	bd5a0 <sprintf>
    if(sendLTE || sendMode == 4){
   b51de:	f1ba 0f00 	cmp.w	sl, #0
   b51e2:	d101      	bne.n	b51e8 <_Z8sendDataPKchbbb+0x40>
   b51e4:	2d04      	cmp	r5, #4
   b51e6:	d10c      	bne.n	b5202 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b51e8:	4b20      	ldr	r3, [pc, #128]	; (b526c <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b51ea:	4921      	ldr	r1, [pc, #132]	; (b5270 <_Z8sendDataPKchbbb+0xc8>)
   b51ec:	781b      	ldrb	r3, [r3, #0]
   b51ee:	f88d 3000 	strb.w	r3, [sp]
   b51f2:	4638      	mov	r0, r7
   b51f4:	233c      	movs	r3, #60	; 0x3c
   b51f6:	4622      	mov	r2, r4
   b51f8:	f009 fd64 	bl	becc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b51fc:	1d38      	adds	r0, r7, #4
   b51fe:	f7ff ffbd 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5202:	f1b9 0f00 	cmp.w	r9, #0
   b5206:	d101      	bne.n	b520c <_Z8sendDataPKchbbb+0x64>
   b5208:	2d01      	cmp	r5, #1
   b520a:	d121      	bne.n	b5250 <_Z8sendDataPKchbbb+0xa8>
   b520c:	f008 fd80 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5210:	f008 fddc 	bl	bddcc <_ZNK8particle14BleLocalDevice9connectedEv>
   b5214:	b1e0      	cbz	r0, b5250 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5216:	4620      	mov	r0, r4
   b5218:	f00d f88b 	bl	c2332 <strlen>
   b521c:	3007      	adds	r0, #7
   b521e:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5222:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5224:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5228:	4620      	mov	r0, r4
   b522a:	f00d f882 	bl	c2332 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b522e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5232:	4602      	mov	r2, r0
   b5234:	4621      	mov	r1, r4
   b5236:	4648      	mov	r0, r9
   b5238:	f00c ffc8 	bl	c21cc <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b523c:	4620      	mov	r0, r4
   b523e:	f00d f878 	bl	c2332 <strlen>
   b5242:	2300      	movs	r3, #0
   b5244:	4602      	mov	r2, r0
   b5246:	4649      	mov	r1, r9
   b5248:	480a      	ldr	r0, [pc, #40]	; (b5274 <_Z8sendDataPKchbbb+0xcc>)
   b524a:	f008 fc51 	bl	bdaf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b524e:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b5250:	b90e      	cbnz	r6, b5256 <_Z8sendDataPKchbbb+0xae>
   b5252:	2d02      	cmp	r5, #2
   b5254:	d104      	bne.n	b5260 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5256:	f00c f933 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   b525a:	4621      	mov	r1, r4
   b525c:	f00b fa2d 	bl	c06ba <_ZN5Print7printlnEPKc>
}
   b5260:	3708      	adds	r7, #8
   b5262:	46bd      	mov	sp, r7
   b5264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5268:	000c476a 	.word	0x000c476a
   b526c:	2003ddf4 	.word	0x2003ddf4
   b5270:	000c4771 	.word	0x000c4771
   b5274:	2003e5d8 	.word	0x2003e5d8

000b5278 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5278:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b527a:	4d27      	ldr	r5, [pc, #156]	; (b5318 <_Z16sendResponseDatav+0xa0>)
   b527c:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b527e:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b5280:	2b00      	cmp	r3, #0
   b5282:	d046      	beq.n	b5312 <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b5284:	2241      	movs	r2, #65	; 0x41
   b5286:	2100      	movs	r1, #0
   b5288:	a80b      	add	r0, sp, #44	; 0x2c
   b528a:	f00c ffc7 	bl	c221c <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b528e:	4b23      	ldr	r3, [pc, #140]	; (b531c <_Z16sendResponseDatav+0xa4>)
   b5290:	9308      	str	r3, [sp, #32]
   b5292:	4b23      	ldr	r3, [pc, #140]	; (b5320 <_Z16sendResponseDatav+0xa8>)
   b5294:	eddf 6a23 	vldr	s13, [pc, #140]	; b5324 <_Z16sendResponseDatav+0xac>
   b5298:	ed93 7a00 	vldr	s14, [r3]
   b529c:	4b22      	ldr	r3, [pc, #136]	; (b5328 <_Z16sendResponseDatav+0xb0>)
   b529e:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b52a2:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b52a4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b52a8:	ed8d 7a07 	vstr	s14, [sp, #28]
   b52ac:	ed93 7a00 	vldr	s14, [r3]
   b52b0:	4b1e      	ldr	r3, [pc, #120]	; (b532c <_Z16sendResponseDatav+0xb4>)
   b52b2:	ee27 7a26 	vmul.f32	s14, s14, s13
   b52b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b52ba:	ed8d 7a06 	vstr	s14, [sp, #24]
   b52be:	ed93 7a00 	vldr	s14, [r3]
   b52c2:	4b1b      	ldr	r3, [pc, #108]	; (b5330 <_Z16sendResponseDatav+0xb8>)
   b52c4:	ee27 7a26 	vmul.f32	s14, s14, s13
   b52c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b52cc:	ed8d 7a05 	vstr	s14, [sp, #20]
   b52d0:	edd3 7a00 	vldr	s15, [r3]
   b52d4:	4b17      	ldr	r3, [pc, #92]	; (b5334 <_Z16sendResponseDatav+0xbc>)
   b52d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b52da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b52de:	edcd 7a04 	vstr	s15, [sp, #16]
   b52e2:	6818      	ldr	r0, [r3, #0]
   b52e4:	f00c fb8e 	bl	c1a04 <__aeabi_f2d>
   b52e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b52ec:	4b12      	ldr	r3, [pc, #72]	; (b5338 <_Z16sendResponseDatav+0xc0>)
   b52ee:	6818      	ldr	r0, [r3, #0]
   b52f0:	f00c fb88 	bl	c1a04 <__aeabi_f2d>
   b52f4:	2201      	movs	r2, #1
   b52f6:	e9cd 0100 	strd	r0, r1, [sp]
   b52fa:	4910      	ldr	r1, [pc, #64]	; (b533c <_Z16sendResponseDatav+0xc4>)
   b52fc:	a80b      	add	r0, sp, #44	; 0x2c
   b52fe:	f008 f94f 	bl	bd5a0 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5302:	7829      	ldrb	r1, [r5, #0]
   b5304:	9400      	str	r4, [sp, #0]
   b5306:	4623      	mov	r3, r4
   b5308:	4622      	mov	r2, r4
   b530a:	a80b      	add	r0, sp, #44	; 0x2c
   b530c:	f7ff ff4c 	bl	b51a8 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5310:	702c      	strb	r4, [r5, #0]
}
   b5312:	b01d      	add	sp, #116	; 0x74
   b5314:	bd30      	pop	{r4, r5, pc}
   b5316:	bf00      	nop
   b5318:	2003e0ed 	.word	0x2003e0ed
   b531c:	00010d88 	.word	0x00010d88
   b5320:	2003e584 	.word	0x2003e584
   b5324:	447a0000 	.word	0x447a0000
   b5328:	2003e57c 	.word	0x2003e57c
   b532c:	2003e588 	.word	0x2003e588
   b5330:	2003e580 	.word	0x2003e580
   b5334:	2003df2c 	.word	0x2003df2c
   b5338:	2003de50 	.word	0x2003de50
   b533c:	000c4779 	.word	0x000c4779

000b5340 <_Z12statusUpdatev>:
void statusUpdate(){
   b5340:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b5342:	4e2c      	ldr	r6, [pc, #176]	; (b53f4 <_Z12statusUpdatev+0xb4>)
   b5344:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5346:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5348:	2b00      	cmp	r3, #0
   b534a:	d049      	beq.n	b53e0 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b534c:	4a2a      	ldr	r2, [pc, #168]	; (b53f8 <_Z12statusUpdatev+0xb8>)
   b534e:	4b2b      	ldr	r3, [pc, #172]	; (b53fc <_Z12statusUpdatev+0xbc>)
   b5350:	6810      	ldr	r0, [r2, #0]
   b5352:	781b      	ldrb	r3, [r3, #0]
   b5354:	9307      	str	r3, [sp, #28]
   b5356:	f00c fb55 	bl	c1a04 <__aeabi_f2d>
   b535a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b535e:	4a28      	ldr	r2, [pc, #160]	; (b5400 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b5360:	4c28      	ldr	r4, [pc, #160]	; (b5404 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5362:	6810      	ldr	r0, [r2, #0]
   b5364:	f00c fb4e 	bl	c1a04 <__aeabi_f2d>
   b5368:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b536c:	4a26      	ldr	r2, [pc, #152]	; (b5408 <_Z12statusUpdatev+0xc8>)
   b536e:	9b07      	ldr	r3, [sp, #28]
   b5370:	7812      	ldrb	r2, [r2, #0]
   b5372:	4926      	ldr	r1, [pc, #152]	; (b540c <_Z12statusUpdatev+0xcc>)
   b5374:	9200      	str	r2, [sp, #0]
   b5376:	a809      	add	r0, sp, #36	; 0x24
   b5378:	2201      	movs	r2, #1
   b537a:	f008 f911 	bl	bd5a0 <sprintf>
        Serial.println(updateStr);
   b537e:	f00b ff1d 	bl	c11bc <_Z16_fetch_usbserialv>
   b5382:	a909      	add	r1, sp, #36	; 0x24
   b5384:	f00b f999 	bl	c06ba <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5388:	f00b ff18 	bl	c11bc <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b538c:	8821      	ldrh	r1, [r4, #0]
   b538e:	4605      	mov	r5, r0
   b5390:	220a      	movs	r2, #10
   b5392:	f00b f99e 	bl	c06d2 <_ZN5Print11printNumberEmh>
        n += println();
   b5396:	4628      	mov	r0, r5
   b5398:	f00b f983 	bl	c06a2 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b539c:	4b1c      	ldr	r3, [pc, #112]	; (b5410 <_Z12statusUpdatev+0xd0>)
   b539e:	781b      	ldrb	r3, [r3, #0]
   b53a0:	bb03      	cbnz	r3, b53e4 <_Z12statusUpdatev+0xa4>
   b53a2:	4b1c      	ldr	r3, [pc, #112]	; (b5414 <_Z12statusUpdatev+0xd4>)
   b53a4:	781b      	ldrb	r3, [r3, #0]
   b53a6:	b9eb      	cbnz	r3, b53e4 <_Z12statusUpdatev+0xa4>
   b53a8:	8823      	ldrh	r3, [r4, #0]
   b53aa:	b1f3      	cbz	r3, b53ea <_Z12statusUpdatev+0xaa>
   b53ac:	f013 0303 	ands.w	r3, r3, #3
   b53b0:	d11b      	bne.n	b53ea <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b53b2:	2201      	movs	r2, #1
   b53b4:	9200      	str	r2, [sp, #0]
   b53b6:	4619      	mov	r1, r3
   b53b8:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b53ba:	a809      	add	r0, sp, #36	; 0x24
   b53bc:	f7ff fef4 	bl	b51a8 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b53c0:	8823      	ldrh	r3, [r4, #0]
   b53c2:	b10b      	cbz	r3, b53c8 <_Z12statusUpdatev+0x88>
   b53c4:	3b01      	subs	r3, #1
   b53c6:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b53c8:	2400      	movs	r4, #0
        delay(100);
   b53ca:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b53cc:	7034      	strb	r4, [r6, #0]
        delay(100);
   b53ce:	f008 f93b 	bl	bd648 <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b53d2:	4811      	ldr	r0, [pc, #68]	; (b5418 <_Z12statusUpdatev+0xd8>)
   b53d4:	9400      	str	r4, [sp, #0]
   b53d6:	4623      	mov	r3, r4
   b53d8:	2201      	movs	r2, #1
   b53da:	4621      	mov	r1, r4
   b53dc:	f7ff fee4 	bl	b51a8 <_Z8sendDataPKchbbb>
}
   b53e0:	b010      	add	sp, #64	; 0x40
   b53e2:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b53e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b53e8:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b53ea:	2100      	movs	r1, #0
   b53ec:	2301      	movs	r3, #1
   b53ee:	9100      	str	r1, [sp, #0]
   b53f0:	461a      	mov	r2, r3
   b53f2:	e7e2      	b.n	b53ba <_Z12statusUpdatev+0x7a>
   b53f4:	2003e5d4 	.word	0x2003e5d4
   b53f8:	2003df2c 	.word	0x2003df2c
   b53fc:	2003de04 	.word	0x2003de04
   b5400:	2003de50 	.word	0x2003de50
   b5404:	2003ddde 	.word	0x2003ddde
   b5408:	2003e5b4 	.word	0x2003e5b4
   b540c:	000c479d 	.word	0x000c479d
   b5410:	2003ddac 	.word	0x2003ddac
   b5414:	2003ddec 	.word	0x2003ddec
   b5418:	000c47b6 	.word	0x000c47b6

000b541c <loop>:
void loop(){
   b541c:	b530      	push	{r4, r5, lr}
   b541e:	ed2d 8b02 	vpush	{d8}
    lis3mdl.read();      // get X Y and Z data at once
   b5422:	4c53      	ldr	r4, [pc, #332]	; (b5570 <loop+0x154>)
void loop(){
   b5424:	b097      	sub	sp, #92	; 0x5c
    lis3mdl.read();      // get X Y and Z data at once
   b5426:	4620      	mov	r0, r4
   b5428:	f002 f8e6 	bl	b75f8 <_ZN16Adafruit_LIS3MDL4readEv>
    Serial.print("\nX:  "); Serial.print(lis3mdl.x); 
   b542c:	f00b fec6 	bl	c11bc <_Z16_fetch_usbserialv>
   b5430:	4950      	ldr	r1, [pc, #320]	; (b5574 <loop+0x158>)
   b5432:	f00b f92b 	bl	c068c <_ZN5Print5printEPKc>
   b5436:	f00b fec1 	bl	c11bc <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b543a:	220a      	movs	r2, #10
   b543c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b5440:	f7fe feee 	bl	b4220 <_ZN5Print5printIsLi0EEEjT_i.part.0.isra.0>
    Serial.print("  \tY:  "); Serial.print(lis3mdl.y); 
   b5444:	f00b feba 	bl	c11bc <_Z16_fetch_usbserialv>
   b5448:	494b      	ldr	r1, [pc, #300]	; (b5578 <loop+0x15c>)
   b544a:	f00b f91f 	bl	c068c <_ZN5Print5printEPKc>
   b544e:	f00b feb5 	bl	c11bc <_Z16_fetch_usbserialv>
   b5452:	220a      	movs	r2, #10
   b5454:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5458:	f7fe fee2 	bl	b4220 <_ZN5Print5printIsLi0EEEjT_i.part.0.isra.0>
    Serial.print("  \tZ:  "); Serial.println(lis3mdl.z); 
   b545c:	f00b feae 	bl	c11bc <_Z16_fetch_usbserialv>
   b5460:	4946      	ldr	r1, [pc, #280]	; (b557c <loop+0x160>)
   b5462:	f00b f913 	bl	c068c <_ZN5Print5printEPKc>
   b5466:	f00b fea9 	bl	c11bc <_Z16_fetch_usbserialv>
   b546a:	220a      	movs	r2, #10
   b546c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   b5470:	4605      	mov	r5, r0
   b5472:	f7fe fed5 	bl	b4220 <_ZN5Print5printIsLi0EEEjT_i.part.0.isra.0>
        n += println();
   b5476:	4628      	mov	r0, r5
   b5478:	f00b f913 	bl	c06a2 <_ZN5Print7printlnEv>
    lis3mdl.getEvent(&event);
   b547c:	a90d      	add	r1, sp, #52	; 0x34
   b547e:	4620      	mov	r0, r4
   b5480:	f002 f900 	bl	b7684 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
    Serial.print("\nX: "); Serial.print(event.magnetic.x);
   b5484:	f00b fe9a 	bl	c11bc <_Z16_fetch_usbserialv>
   b5488:	493d      	ldr	r1, [pc, #244]	; (b5580 <loop+0x164>)
   b548a:	f00b f8ff 	bl	c068c <_ZN5Print5printEPKc>
   b548e:	f00b fe95 	bl	c11bc <_Z16_fetch_usbserialv>
   b5492:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b5496:	2102      	movs	r1, #2
   b5498:	f00b fa02 	bl	c08a0 <_ZN5Print5printEfi>
    Serial.print(" \tY: "); Serial.print(event.magnetic.y); 
   b549c:	f00b fe8e 	bl	c11bc <_Z16_fetch_usbserialv>
   b54a0:	4938      	ldr	r1, [pc, #224]	; (b5584 <loop+0x168>)
   b54a2:	f00b f8f3 	bl	c068c <_ZN5Print5printEPKc>
   b54a6:	f00b fe89 	bl	c11bc <_Z16_fetch_usbserialv>
   b54aa:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b54ae:	2102      	movs	r1, #2
   b54b0:	f00b f9f6 	bl	c08a0 <_ZN5Print5printEfi>
    Serial.print(" \tZ: "); Serial.print(event.magnetic.z); 
   b54b4:	f00b fe82 	bl	c11bc <_Z16_fetch_usbserialv>
   b54b8:	4933      	ldr	r1, [pc, #204]	; (b5588 <loop+0x16c>)
   b54ba:	f00b f8e7 	bl	c068c <_ZN5Print5printEPKc>
   b54be:	f00b fe7d 	bl	c11bc <_Z16_fetch_usbserialv>
   b54c2:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   b54c6:	2102      	movs	r1, #2
   b54c8:	f00b f9ea 	bl	c08a0 <_ZN5Print5printEfi>
    Serial.println(" uTesla ");
   b54cc:	f00b fe76 	bl	c11bc <_Z16_fetch_usbserialv>
   b54d0:	492e      	ldr	r1, [pc, #184]	; (b558c <loop+0x170>)
   b54d2:	f00b f8f2 	bl	c06ba <_ZN5Print7printlnEPKc>
    Serial.println();
   b54d6:	f00b fe71 	bl	c11bc <_Z16_fetch_usbserialv>
   b54da:	f00b f8e2 	bl	c06a2 <_ZN5Print7printlnEv>
    if(getGPSLatLon()){
   b54de:	f7ff fb1f 	bl	b4b20 <_Z12getGPSLatLonv>
   b54e2:	b370      	cbz	r0, b5542 <loop+0x126>
        latitude = ((float)latitude_mdeg/10000000.0);
   b54e4:	4b2a      	ldr	r3, [pc, #168]	; (b5590 <loop+0x174>)
   b54e6:	eddf 6a2b 	vldr	s13, [pc, #172]	; b5594 <loop+0x178>
   b54ea:	edd3 7a00 	vldr	s15, [r3]
   b54ee:	4b2a      	ldr	r3, [pc, #168]	; (b5598 <loop+0x17c>)
   b54f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b54f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   b54f8:	ed83 7a00 	vstr	s14, [r3]
        longitude = ((float)longitude_mdeg/10000000.0);
   b54fc:	4b27      	ldr	r3, [pc, #156]	; (b559c <loop+0x180>)
   b54fe:	edd3 7a00 	vldr	s15, [r3]
   b5502:	4b27      	ldr	r3, [pc, #156]	; (b55a0 <loop+0x184>)
   b5504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
   b5508:	ee17 0a10 	vmov	r0, s14
        longitude = ((float)longitude_mdeg/10000000.0);
   b550c:	ee87 8aa6 	vdiv.f32	s16, s15, s13
   b5510:	ed83 8a00 	vstr	s16, [r3]
        sprintf(latLonBuf, "GPS Data: Lat:%0.6f Lon:%0.6f\n", latitude, longitude);
   b5514:	f00c fa76 	bl	c1a04 <__aeabi_f2d>
   b5518:	4602      	mov	r2, r0
   b551a:	460b      	mov	r3, r1
   b551c:	ee18 0a10 	vmov	r0, s16
   b5520:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b5524:	f00c fa6e 	bl	c1a04 <__aeabi_f2d>
   b5528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b552c:	e9cd 0100 	strd	r0, r1, [sp]
   b5530:	491c      	ldr	r1, [pc, #112]	; (b55a4 <loop+0x188>)
   b5532:	a805      	add	r0, sp, #20
   b5534:	f008 f834 	bl	bd5a0 <sprintf>
        Serial.println(latLonBuf);
   b5538:	f00b fe40 	bl	c11bc <_Z16_fetch_usbserialv>
   b553c:	a905      	add	r1, sp, #20
   b553e:	f00b f8bc 	bl	c06ba <_ZN5Print7printlnEPKc>
    sensorHandler();
   b5542:	f7ff fb21 	bl	b4b88 <_Z13sensorHandlerv>
    XBeeHandler();
   b5546:	f7ff fca3 	bl	b4e90 <_Z11XBeeHandlerv>
    statusUpdate();
   b554a:	f7ff fef9 	bl	b5340 <_Z12statusUpdatev>
    updateMotors();
   b554e:	f7ff faff 	bl	b4b50 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5552:	4b15      	ldr	r3, [pc, #84]	; (b55a8 <loop+0x18c>)
   b5554:	781b      	ldrb	r3, [r3, #0]
   b5556:	b10b      	cbz	r3, b555c <loop+0x140>
   b5558:	f7ff fd24 	bl	b4fa4 <_Z13dataOffloaderv>
    sendResponseData();
   b555c:	f7ff fe8c 	bl	b5278 <_Z16sendResponseDatav>
    delay(100);
   b5560:	2064      	movs	r0, #100	; 0x64
   b5562:	f008 f871 	bl	bd648 <delay>
}
   b5566:	b017      	add	sp, #92	; 0x5c
   b5568:	ecbd 8b02 	vpop	{d8}
   b556c:	bd30      	pop	{r4, r5, pc}
   b556e:	bf00      	nop
   b5570:	2003de74 	.word	0x2003de74
   b5574:	000c47c4 	.word	0x000c47c4
   b5578:	000c47ca 	.word	0x000c47ca
   b557c:	000c47d2 	.word	0x000c47d2
   b5580:	000c47da 	.word	0x000c47da
   b5584:	000c47df 	.word	0x000c47df
   b5588:	000c47e5 	.word	0x000c47e5
   b558c:	000c47eb 	.word	0x000c47eb
   b5590:	2003de54 	.word	0x2003de54
   b5594:	4b189680 	.word	0x4b189680
   b5598:	2003de50 	.word	0x2003de50
   b559c:	2003df30 	.word	0x2003df30
   b55a0:	2003df2c 	.word	0x2003df2c
   b55a4:	000c47f4 	.word	0x000c47f4
   b55a8:	2003e0ec 	.word	0x2003e0ec

000b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b55ae:	e9d0 5300 	ldrd	r5, r3, [r0]
   b55b2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55b4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b55b6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b55ba:	42ae      	cmp	r6, r5
   b55bc:	d004      	beq.n	b55c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b55be:	4628      	mov	r0, r5
   b55c0:	f00b fb80 	bl	c0cc4 <_ZN6StringD1Ev>
   b55c4:	3514      	adds	r5, #20
   b55c6:	e7f8      	b.n	b55ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b55c8:	6820      	ldr	r0, [r4, #0]
   b55ca:	f007 ffd9 	bl	bd580 <free>
    AllocatorT::free(data_);
}
   b55ce:	4620      	mov	r0, r4
   b55d0:	bd70      	pop	{r4, r5, r6, pc}

000b55d2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b55d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b55d4:	4616      	mov	r6, r2
   b55d6:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b55d8:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b55da:	e9c0 2200 	strd	r2, r2, [r0]
   b55de:	4604      	mov	r4, r0
   b55e0:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b55e2:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b55e4:	4619      	mov	r1, r3
   b55e6:	a804      	add	r0, sp, #16
   b55e8:	f008 fa44 	bl	bda74 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b55ec:	9914      	ldr	r1, [sp, #80]	; 0x50
   b55ee:	4638      	mov	r0, r7
   b55f0:	f008 fa40 	bl	bda74 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b55f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b55f6:	9302      	str	r3, [sp, #8]
   b55f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b55fa:	4620      	mov	r0, r4
   b55fc:	e9cd 7300 	strd	r7, r3, [sp]
   b5600:	4632      	mov	r2, r6
   b5602:	ab04      	add	r3, sp, #16
   b5604:	4629      	mov	r1, r5
   b5606:	f008 ffab 	bl	be560 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b560a:	4620      	mov	r0, r4
   b560c:	b00f      	add	sp, #60	; 0x3c
   b560e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5610 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5610:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5612:	4c0b      	ldr	r4, [pc, #44]	; (b5640 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5614:	7821      	ldrb	r1, [r4, #0]
   b5616:	f3bf 8f5b 	dmb	ish
   b561a:	f011 0101 	ands.w	r1, r1, #1
   b561e:	d10b      	bne.n	b5638 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5620:	4620      	mov	r0, r4
   b5622:	9101      	str	r1, [sp, #4]
   b5624:	f7fe fd4c 	bl	b40c0 <__cxa_guard_acquire>
   b5628:	9901      	ldr	r1, [sp, #4]
   b562a:	b128      	cbz	r0, b5638 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b562c:	4805      	ldr	r0, [pc, #20]	; (b5644 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b562e:	f00b f9fc 	bl	c0a2a <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5632:	4620      	mov	r0, r4
   b5634:	f7fe fd49 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b5638:	4802      	ldr	r0, [pc, #8]	; (b5644 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b563a:	b002      	add	sp, #8
   b563c:	bd10      	pop	{r4, pc}
   b563e:	bf00      	nop
   b5640:	2003dda0 	.word	0x2003dda0
   b5644:	2003dda4 	.word	0x2003dda4

000b5648 <_Z8setupSPIv>:
void setupSPI(){
   b5648:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b564a:	f7ff ffe1 	bl	b5610 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b564e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5652:	2100      	movs	r1, #0
   b5654:	f00b fa07 	bl	c0a66 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5658:	f7ff ffda 	bl	b5610 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b565c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5660:	4901      	ldr	r1, [pc, #4]	; (b5668 <_Z8setupSPIv+0x20>)
   b5662:	2201      	movs	r2, #1
   b5664:	f00b ba9e 	b.w	c0ba4 <_ZN8SPIClass13setClockSpeedEjj>
   b5668:	000f4240 	.word	0x000f4240

000b566c <setup>:
void setup(){
   b566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5670:	48bb      	ldr	r0, [pc, #748]	; (b5960 <setup+0x2f4>)
    setLSpeed = 90;
   b5672:	4ebc      	ldr	r6, [pc, #752]	; (b5964 <setup+0x2f8>)
   b5674:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b5676:	4dbc      	ldr	r5, [pc, #752]	; (b5968 <setup+0x2fc>)
   b5678:	f003 0303 	and.w	r3, r3, #3
   b567c:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5680:	b093      	sub	sp, #76	; 0x4c
   b5682:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b5684:	2200      	movs	r2, #0
   b5686:	2101      	movs	r1, #1
   b5688:	3004      	adds	r0, #4
   b568a:	f007 fe8b 	bl	bd3a4 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b568e:	2101      	movs	r1, #1
   b5690:	2002      	movs	r0, #2
   b5692:	f00b fe93 	bl	c13bc <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b5696:	2101      	movs	r1, #1
   b5698:	201c      	movs	r0, #28
   b569a:	f00b fe8f 	bl	c13bc <pinMode>
    pinMode(LEAK_DET, INPUT);
   b569e:	2100      	movs	r1, #0
   b56a0:	201d      	movs	r0, #29
   b56a2:	f00b fe8b 	bl	c13bc <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b56a6:	2100      	movs	r1, #0
   b56a8:	2002      	movs	r0, #2
   b56aa:	f00b fe98 	bl	c13de <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b56ae:	2100      	movs	r1, #0
   b56b0:	201c      	movs	r0, #28
    ESCL.attach(ESC_PWM_L,1000,2000);
   b56b2:	2400      	movs	r4, #0
    digitalWrite(PWR_EN,LOW);
   b56b4:	f00b fe93 	bl	c13de <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b56b8:	27b4      	movs	r7, #180	; 0xb4
   b56ba:	f007 fc8b 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b56be:	235a      	movs	r3, #90	; 0x5a
   b56c0:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b56c2:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b56c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b56c8:	e9cd 4700 	strd	r4, r7, [sp]
   b56cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b56d0:	2106      	movs	r1, #6
   b56d2:	48a6      	ldr	r0, [pc, #664]	; (b596c <setup+0x300>)
   b56d4:	f00b f978 	bl	c09c8 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b56d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b56dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b56e0:	e9cd 4700 	strd	r4, r7, [sp]
   b56e4:	2105      	movs	r1, #5
   b56e6:	48a2      	ldr	r0, [pc, #648]	; (b5970 <setup+0x304>)
    logSensors = true;
   b56e8:	4fa2      	ldr	r7, [pc, #648]	; (b5974 <setup+0x308>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b56ea:	f00b f96d 	bl	c09c8 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b56ee:	7831      	ldrb	r1, [r6, #0]
   b56f0:	489e      	ldr	r0, [pc, #632]	; (b596c <setup+0x300>)
    logMessages = true;
   b56f2:	4ea1      	ldr	r6, [pc, #644]	; (b5978 <setup+0x30c>)
    ESCL.write(setLSpeed);
   b56f4:	f00b f92b 	bl	c094e <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b56f8:	7829      	ldrb	r1, [r5, #0]
   b56fa:	489d      	ldr	r0, [pc, #628]	; (b5970 <setup+0x304>)
   b56fc:	f00b f927 	bl	c094e <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b5700:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5704:	f007 ffa0 	bl	bd648 <delay>
    BLE.on();
   b5708:	f008 fb02 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b570c:	f008 fb4a 	bl	bdda4 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b5710:	f008 fafe 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5714:	2108      	movs	r1, #8
   b5716:	f008 fb4c 	bl	bddb2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b571a:	f00b fd4f 	bl	c11bc <_Z16_fetch_usbserialv>
   b571e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5722:	f00b fd3b 	bl	c119c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b5726:	f00b fecb 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   b572a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b572e:	f00b fcdd 	bl	c10ec <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b5732:	f7ff ff89 	bl	b5648 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b5736:	f7ff f9a9 	bl	b4a8c <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b573a:	f7ff f9bf 	bl	b4abc <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b573e:	f7ff f991 	bl	b4a64 <_Z8setupLTEv>
   b5742:	f007 fc47 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b5746:	4b8d      	ldr	r3, [pc, #564]	; (b597c <setup+0x310>)
   b5748:	6018      	str	r0, [r3, #0]
   b574a:	f007 fc43 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b574e:	4b8c      	ldr	r3, [pc, #560]	; (b5980 <setup+0x314>)
   b5750:	6018      	str	r0, [r3, #0]
   b5752:	f007 fc3f 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b5756:	4b8b      	ldr	r3, [pc, #556]	; (b5984 <setup+0x318>)
   b5758:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b575a:	4b8b      	ldr	r3, [pc, #556]	; (b5988 <setup+0x31c>)
   b575c:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b575e:	4b8b      	ldr	r3, [pc, #556]	; (b598c <setup+0x320>)
   b5760:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b5762:	4b8b      	ldr	r3, [pc, #556]	; (b5990 <setup+0x324>)
   b5764:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b5766:	4b8b      	ldr	r3, [pc, #556]	; (b5994 <setup+0x328>)
   b5768:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b576a:	4b8b      	ldr	r3, [pc, #556]	; (b5998 <setup+0x32c>)
   b576c:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b576e:	4b8b      	ldr	r3, [pc, #556]	; (b599c <setup+0x330>)
   b5770:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b5774:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b5776:	4b8a      	ldr	r3, [pc, #552]	; (b59a0 <setup+0x334>)
    logSensors = true;
   b5778:	2501      	movs	r5, #1
    battPercent = 50;
   b577a:	2232      	movs	r2, #50	; 0x32
   b577c:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b577e:	703d      	strb	r5, [r7, #0]
    logMessages = true;
   b5780:	7035      	strb	r5, [r6, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b5782:	f008 fac5 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5786:	4a87      	ldr	r2, [pc, #540]	; (b59a4 <setup+0x338>)
   b5788:	4601      	mov	r1, r0
   b578a:	a80d      	add	r0, sp, #52	; 0x34
   b578c:	f009 f812 	bl	be7b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5790:	a80d      	add	r0, sp, #52	; 0x34
   b5792:	f008 fbc2 	bl	bdf1a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b5796:	f008 fabb 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b579a:	4a83      	ldr	r2, [pc, #524]	; (b59a8 <setup+0x33c>)
   b579c:	4601      	mov	r1, r0
   b579e:	a80d      	add	r0, sp, #52	; 0x34
   b57a0:	f009 f808 	bl	be7b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b57a4:	a80d      	add	r0, sp, #52	; 0x34
   b57a6:	f008 fbb8 	bl	bdf1a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b57aa:	f008 fab1 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57ae:	4a7f      	ldr	r2, [pc, #508]	; (b59ac <setup+0x340>)
   b57b0:	4601      	mov	r1, r0
   b57b2:	a80d      	add	r0, sp, #52	; 0x34
   b57b4:	f008 fffe 	bl	be7b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b57b8:	a80d      	add	r0, sp, #52	; 0x34
   b57ba:	f008 fbae 	bl	bdf1a <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b57be:	4b7c      	ldr	r3, [pc, #496]	; (b59b0 <setup+0x344>)
   b57c0:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b57c2:	4b7c      	ldr	r3, [pc, #496]	; (b59b4 <setup+0x348>)
        BleUuid tempUUID(uuid);
   b57c4:	a80d      	add	r0, sp, #52	; 0x34
   b57c6:	6819      	ldr	r1, [r3, #0]
   b57c8:	f008 f954 	bl	bda74 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b57cc:	a80d      	add	r0, sp, #52	; 0x34
   b57ce:	f008 f8b3 	bl	bd938 <_ZNK8particle7BleUuid4typeEv>
   b57d2:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b57d4:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b57d6:	bb95      	cbnz	r5, b583e <setup+0x1d2>
            uint16_t uuid16 = tempUUID.shorted();
   b57d8:	f008 f8ca 	bl	bd970 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b57dc:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b57de:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b57e2:	2302      	movs	r3, #2
   b57e4:	aa09      	add	r2, sp, #36	; 0x24
   b57e6:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b57e8:	4873      	ldr	r0, [pc, #460]	; (b59b8 <setup+0x34c>)
   b57ea:	f008 fcc1 	bl	be170 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b57ee:	2300      	movs	r3, #0
   b57f0:	496f      	ldr	r1, [pc, #444]	; (b59b0 <setup+0x344>)
   b57f2:	4871      	ldr	r0, [pc, #452]	; (b59b8 <setup+0x34c>)
   b57f4:	2208      	movs	r2, #8
   b57f6:	f008 fcd9 	bl	be1ac <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b57fa:	f008 fa89 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b57fe:	2200      	movs	r2, #0
   b5800:	496d      	ldr	r1, [pc, #436]	; (b59b8 <setup+0x34c>)
   b5802:	f008 fb36 	bl	bde72 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5806:	f00b fe1b 	bl	c1440 <_Z19__fetch_global_Wirev>
   b580a:	f009 fc47 	bl	bf09c <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b580e:	f00b fe17 	bl	c1440 <_Z19__fetch_global_Wirev>
   b5812:	496a      	ldr	r1, [pc, #424]	; (b59bc <setup+0x350>)
   b5814:	f009 fc3e 	bl	bf094 <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b5818:	f00b fe12 	bl	c1440 <_Z19__fetch_global_Wirev>
   b581c:	211c      	movs	r1, #28
   b581e:	4602      	mov	r2, r0
   b5820:	4867      	ldr	r0, [pc, #412]	; (b59c0 <setup+0x354>)
   b5822:	f002 f862 	bl	b78ea <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5826:	b988      	cbnz	r0, b584c <setup+0x1e0>
            Serial.println("Failed to find LIS3MDL chip");
   b5828:	4c66      	ldr	r4, [pc, #408]	; (b59c4 <setup+0x358>)
   b582a:	f00b fcc7 	bl	c11bc <_Z16_fetch_usbserialv>
   b582e:	4621      	mov	r1, r4
   b5830:	f00a ff43 	bl	c06ba <_ZN5Print7printlnEPKc>
            delay(1000); 
   b5834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5838:	f007 ff06 	bl	bd648 <delay>
        while (1) {
   b583c:	e7f5      	b.n	b582a <setup+0x1be>
   b583e:	f008 f899 	bl	bd974 <_ZNK8particle7BleUuid8rawBytesEv>
   b5842:	9400      	str	r4, [sp, #0]
   b5844:	4602      	mov	r2, r0
   b5846:	2310      	movs	r3, #16
   b5848:	2107      	movs	r1, #7
   b584a:	e7cd      	b.n	b57e8 <setup+0x17c>
    Serial.println("LIS3MDL Found!");
   b584c:	f00b fcb6 	bl	c11bc <_Z16_fetch_usbserialv>
   b5850:	495d      	ldr	r1, [pc, #372]	; (b59c8 <setup+0x35c>)
   b5852:	f00a ff32 	bl	c06ba <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b5856:	485a      	ldr	r0, [pc, #360]	; (b59c0 <setup+0x354>)
   b5858:	2101      	movs	r1, #1
   b585a:	f001 ff3f 	bl	b76dc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b585e:	4858      	ldr	r0, [pc, #352]	; (b59c0 <setup+0x354>)
   b5860:	2100      	movs	r1, #0
   b5862:	f001 ff9f 	bl	b77a4 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5866:	4856      	ldr	r0, [pc, #344]	; (b59c0 <setup+0x354>)
   b5868:	2101      	movs	r1, #1
   b586a:	f001 ff69 	bl	b7740 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_4_GAUSS);
   b586e:	4854      	ldr	r0, [pc, #336]	; (b59c0 <setup+0x354>)
   b5870:	2100      	movs	r1, #0
   b5872:	f001 ffb2 	bl	b77da <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5876:	2401      	movs	r4, #1
   b5878:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b587a:	4851      	ldr	r0, [pc, #324]	; (b59c0 <setup+0x354>)
   b587c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5880:	f002 f852 	bl	b7928 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5884:	4623      	mov	r3, r4
   b5886:	462a      	mov	r2, r5
   b5888:	4629      	mov	r1, r5
   b588a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b588e:	484c      	ldr	r0, [pc, #304]	; (b59c0 <setup+0x354>)
   b5890:	9400      	str	r4, [sp, #0]
   b5892:	f002 f861 	bl	b7958 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5896:	f00b fbb5 	bl	c1004 <_ZN9TimeClass5monthEv>
   b589a:	9007      	str	r0, [sp, #28]
   b589c:	f00b fba6 	bl	c0fec <_ZN9TimeClass3dayEv>
   b58a0:	4680      	mov	r8, r0
   b58a2:	f00b fbb7 	bl	c1014 <_ZN9TimeClass4yearEv>
   b58a6:	4681      	mov	r9, r0
   b58a8:	f00b fb7c 	bl	c0fa4 <_ZN9TimeClass4hourEv>
   b58ac:	4682      	mov	sl, r0
   b58ae:	f00b fb85 	bl	c0fbc <_ZN9TimeClass6minuteEv>
   b58b2:	4683      	mov	fp, r0
   b58b4:	f00b fb8e 	bl	c0fd4 <_ZN9TimeClass6secondEv>
   b58b8:	9b07      	ldr	r3, [sp, #28]
   b58ba:	4a44      	ldr	r2, [pc, #272]	; (b59cc <setup+0x360>)
   b58bc:	f8cd 8000 	str.w	r8, [sp]
   b58c0:	e9cd b003 	strd	fp, r0, [sp, #12]
   b58c4:	2110      	movs	r1, #16
   b58c6:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   b58ca:	a809      	add	r0, sp, #36	; 0x24
   b58cc:	f007 fe70 	bl	bd5b0 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b58d0:	493f      	ldr	r1, [pc, #252]	; (b59d0 <setup+0x364>)
   b58d2:	4840      	ldr	r0, [pc, #256]	; (b59d4 <setup+0x368>)
   b58d4:	f00c fd08 	bl	c22e8 <strcpy>
    strcat(filename,timestamp);
   b58d8:	a909      	add	r1, sp, #36	; 0x24
   b58da:	483e      	ldr	r0, [pc, #248]	; (b59d4 <setup+0x368>)
   b58dc:	f00c fcd4 	bl	c2288 <strcat>
    strcpy(filenameMessages,filename);
   b58e0:	493c      	ldr	r1, [pc, #240]	; (b59d4 <setup+0x368>)
   b58e2:	483d      	ldr	r0, [pc, #244]	; (b59d8 <setup+0x36c>)
   b58e4:	f00c fd00 	bl	c22e8 <strcpy>
    strcat(filename,".csv");
   b58e8:	493c      	ldr	r1, [pc, #240]	; (b59dc <setup+0x370>)
   b58ea:	483a      	ldr	r0, [pc, #232]	; (b59d4 <setup+0x368>)
   b58ec:	f00c fccc 	bl	c2288 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b58f0:	493b      	ldr	r1, [pc, #236]	; (b59e0 <setup+0x374>)
   b58f2:	4839      	ldr	r0, [pc, #228]	; (b59d8 <setup+0x36c>)
   b58f4:	f00c fcc8 	bl	c2288 <strcat>
    Serial.println(filename);
   b58f8:	f00b fc60 	bl	c11bc <_Z16_fetch_usbserialv>
   b58fc:	4935      	ldr	r1, [pc, #212]	; (b59d4 <setup+0x368>)
   b58fe:	f00a fedc 	bl	c06ba <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b5902:	f00b fc5b 	bl	c11bc <_Z16_fetch_usbserialv>
   b5906:	4934      	ldr	r1, [pc, #208]	; (b59d8 <setup+0x36c>)
   b5908:	f00a fed7 	bl	c06ba <_ZN5Print7printlnEPKc>
    watchdog.start();
   b590c:	4835      	ldr	r0, [pc, #212]	; (b59e4 <setup+0x378>)
   b590e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5912:	f7fe fce5 	bl	b42e0 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b5916:	4834      	ldr	r0, [pc, #208]	; (b59e8 <setup+0x37c>)
   b5918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b591c:	f7fe fce0 	bl	b42e0 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b5920:	4832      	ldr	r0, [pc, #200]	; (b59ec <setup+0x380>)
   b5922:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5926:	f7fe fcdb 	bl	b42e0 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b592a:	4b31      	ldr	r3, [pc, #196]	; (b59f0 <setup+0x384>)
   b592c:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b592e:	4831      	ldr	r0, [pc, #196]	; (b59f4 <setup+0x388>)
   b5930:	4b31      	ldr	r3, [pc, #196]	; (b59f8 <setup+0x38c>)
   b5932:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b5936:	aa0d      	add	r2, sp, #52	; 0x34
   b5938:	2108      	movs	r1, #8
   b593a:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b593e:	930f      	str	r3, [sp, #60]	; 0x3c
   b5940:	f7fe fe78 	bl	b4634 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5944:	4604      	mov	r4, r0
   b5946:	2800      	cmp	r0, #0
   b5948:	d15a      	bne.n	b5a00 <setup+0x394>
        Serial.println("Error: could not connect to SD card!");
   b594a:	f00b fc37 	bl	c11bc <_Z16_fetch_usbserialv>
   b594e:	492b      	ldr	r1, [pc, #172]	; (b59fc <setup+0x390>)
   b5950:	f00a feb3 	bl	c06ba <_ZN5Print7printlnEPKc>
        logSensors = false;
   b5954:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b5956:	7034      	strb	r4, [r6, #0]
}
   b5958:	b013      	add	sp, #76	; 0x4c
   b595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b595e:	bf00      	nop
   b5960:	2003e594 	.word	0x2003e594
   b5964:	2003e590 	.word	0x2003e590
   b5968:	2003e591 	.word	0x2003e591
   b596c:	2003ddbc 	.word	0x2003ddbc
   b5970:	2003ddcc 	.word	0x2003ddcc
   b5974:	2003df29 	.word	0x2003df29
   b5978:	2003df28 	.word	0x2003df28
   b597c:	2003e58c 	.word	0x2003e58c
   b5980:	2003de08 	.word	0x2003de08
   b5984:	2003de4c 	.word	0x2003de4c
   b5988:	2003ddf0 	.word	0x2003ddf0
   b598c:	2003ddb8 	.word	0x2003ddb8
   b5990:	2003de0c 	.word	0x2003de0c
   b5994:	2003e0ec 	.word	0x2003e0ec
   b5998:	2003e0ed 	.word	0x2003e0ed
   b599c:	2003ddde 	.word	0x2003ddde
   b59a0:	2003de04 	.word	0x2003de04
   b59a4:	2003e5d8 	.word	0x2003e5d8
   b59a8:	2003e0f0 	.word	0x2003e0f0
   b59ac:	2003e0e4 	.word	0x2003e0e4
   b59b0:	2003ddad 	.word	0x2003ddad
   b59b4:	2003dbac 	.word	0x2003dbac
   b59b8:	2003ddf8 	.word	0x2003ddf8
   b59bc:	00061a80 	.word	0x00061a80
   b59c0:	2003de74 	.word	0x2003de74
   b59c4:	000c4813 	.word	0x000c4813
   b59c8:	000c482f 	.word	0x000c482f
   b59cc:	000c4601 	.word	0x000c4601
   b59d0:	000c483e 	.word	0x000c483e
   b59d4:	2003de0e 	.word	0x2003de0e
   b59d8:	2003de2c 	.word	0x2003de2c
   b59dc:	000c470f 	.word	0x000c470f
   b59e0:	000c4847 	.word	0x000c4847
   b59e4:	2003e5e4 	.word	0x2003e5e4
   b59e8:	2003de58 	.word	0x2003de58
   b59ec:	2003e5b8 	.word	0x2003e5b8
   b59f0:	000c4904 	.word	0x000c4904
   b59f4:	2003e0f8 	.word	0x2003e0f8
   b59f8:	007a1200 	.word	0x007a1200
   b59fc:	000c4850 	.word	0x000c4850
    if(logSensors){
   b5a00:	783b      	ldrb	r3, [r7, #0]
   b5a02:	b17b      	cbz	r3, b5a24 <setup+0x3b8>
   b5a04:	4812      	ldr	r0, [pc, #72]	; (b5a50 <setup+0x3e4>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5a06:	7c03      	ldrb	r3, [r0, #16]
   b5a08:	b92b      	cbnz	r3, b5a16 <setup+0x3aa>
   b5a0a:	4912      	ldr	r1, [pc, #72]	; (b5a54 <setup+0x3e8>)
   b5a0c:	f244 2202 	movw	r2, #16898	; 0x4202
   b5a10:	3010      	adds	r0, #16
   b5a12:	f7fe fd9b 	bl	b454c <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5a16:	4910      	ldr	r1, [pc, #64]	; (b5a58 <setup+0x3ec>)
   b5a18:	480d      	ldr	r0, [pc, #52]	; (b5a50 <setup+0x3e4>)
   b5a1a:	f00a fe4e 	bl	c06ba <_ZN5Print7printlnEPKc>
        myFile.close();
   b5a1e:	480f      	ldr	r0, [pc, #60]	; (b5a5c <setup+0x3f0>)
   b5a20:	f000 fc68 	bl	b62f4 <_ZN7FatFile5closeEv>
    if(logMessages){
   b5a24:	7833      	ldrb	r3, [r6, #0]
   b5a26:	2b00      	cmp	r3, #0
   b5a28:	d096      	beq.n	b5958 <setup+0x2ec>
   b5a2a:	480d      	ldr	r0, [pc, #52]	; (b5a60 <setup+0x3f4>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5a2c:	7c03      	ldrb	r3, [r0, #16]
   b5a2e:	b92b      	cbnz	r3, b5a3c <setup+0x3d0>
   b5a30:	490c      	ldr	r1, [pc, #48]	; (b5a64 <setup+0x3f8>)
   b5a32:	f244 2202 	movw	r2, #16898	; 0x4202
   b5a36:	3010      	adds	r0, #16
   b5a38:	f7fe fd88 	bl	b454c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b5a3c:	490a      	ldr	r1, [pc, #40]	; (b5a68 <setup+0x3fc>)
   b5a3e:	4808      	ldr	r0, [pc, #32]	; (b5a60 <setup+0x3f4>)
   b5a40:	2201      	movs	r2, #1
   b5a42:	f7fe fc9d 	bl	b4380 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5a46:	4809      	ldr	r0, [pc, #36]	; (b5a6c <setup+0x400>)
   b5a48:	f000 fc54 	bl	b62f4 <_ZN7FatFile5closeEv>
}
   b5a4c:	e784      	b.n	b5958 <setup+0x2ec>
   b5a4e:	bf00      	nop
   b5a50:	2003df38 	.word	0x2003df38
   b5a54:	2003de0e 	.word	0x2003de0e
   b5a58:	000c4875 	.word	0x000c4875
   b5a5c:	2003df48 	.word	0x2003df48
   b5a60:	2003ded0 	.word	0x2003ded0
   b5a64:	2003de2c 	.word	0x2003de2c
   b5a68:	000c48cb 	.word	0x000c48cb
   b5a6c:	2003dee0 	.word	0x2003dee0

000b5a70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5a70:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a74:	4604      	mov	r4, r0
   b5a76:	460d      	mov	r5, r1
   b5a78:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5a7a:	d916      	bls.n	b5aaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5a7c:	4290      	cmp	r0, r2
   b5a7e:	d215      	bcs.n	b5aac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5a80:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5a84:	1a75      	subs	r5, r6, r1
   b5a86:	f1a1 0714 	sub.w	r7, r1, #20
   b5a8a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5a8c:	42b7      	cmp	r7, r6
   b5a8e:	d01c      	beq.n	b5aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5a90:	b12c      	cbz	r4, b5a9e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5a92:	4631      	mov	r1, r6
   b5a94:	4620      	mov	r0, r4
   b5a96:	f00b f991 	bl	c0dbc <_ZN6StringC1EOS_>
   b5a9a:	7c33      	ldrb	r3, [r6, #16]
   b5a9c:	7423      	strb	r3, [r4, #16]
   b5a9e:	4630      	mov	r0, r6
   b5aa0:	f00b f910 	bl	c0cc4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5aa4:	3e14      	subs	r6, #20
   b5aa6:	3c14      	subs	r4, #20
   b5aa8:	e7f0      	b.n	b5a8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5aaa:	d00e      	beq.n	b5aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5aac:	42b5      	cmp	r5, r6
   b5aae:	d00c      	beq.n	b5aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5ab0:	b12c      	cbz	r4, b5abe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5ab2:	4629      	mov	r1, r5
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	f00b f981 	bl	c0dbc <_ZN6StringC1EOS_>
   b5aba:	7c2b      	ldrb	r3, [r5, #16]
   b5abc:	7423      	strb	r3, [r4, #16]
   b5abe:	4628      	mov	r0, r5
   b5ac0:	f00b f900 	bl	c0cc4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5ac4:	3514      	adds	r5, #20
   b5ac6:	3414      	adds	r4, #20
   b5ac8:	e7f0      	b.n	b5aac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5ad0:	2300      	movs	r3, #0
   b5ad2:	e9c0 3300 	strd	r3, r3, [r0]
   b5ad6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5ad8:	684f      	ldr	r7, [r1, #4]
   b5ada:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5adc:	4604      	mov	r4, r0
   b5ade:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5ae0:	dd23      	ble.n	b5b2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5ae2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5ae6:	fb08 f007 	mul.w	r0, r8, r7
   b5aea:	f007 fd41 	bl	bd570 <malloc>
            if (!d) {
   b5aee:	4605      	mov	r5, r0
   b5af0:	b1d8      	cbz	r0, b5b2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5af2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5af6:	fb08 1202 	mla	r2, r8, r2, r1
   b5afa:	f7ff ffb9 	bl	b5a70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5afe:	6820      	ldr	r0, [r4, #0]
   b5b00:	f007 fd3e 	bl	bd580 <free>
        data_ = d;
   b5b04:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5b06:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5b08:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5b0c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5b10:	45b8      	cmp	r8, r7
   b5b12:	d008      	beq.n	b5b26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5b14:	4639      	mov	r1, r7
   b5b16:	4628      	mov	r0, r5
   b5b18:	f00b f96a 	bl	c0df0 <_ZN6StringC1ERKS_>
   b5b1c:	7c3b      	ldrb	r3, [r7, #16]
   b5b1e:	742b      	strb	r3, [r5, #16]
   b5b20:	3714      	adds	r7, #20
   b5b22:	3514      	adds	r5, #20
   b5b24:	e7f4      	b.n	b5b10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5b26:	6873      	ldr	r3, [r6, #4]
   b5b28:	6063      	str	r3, [r4, #4]
}
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5b30 <_GLOBAL__sub_I_SystemMode>:
   b5b30:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b5b32:	4b72      	ldr	r3, [pc, #456]	; (b5cfc <_GLOBAL__sub_I_SystemMode+0x1cc>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b5b34:	4a72      	ldr	r2, [pc, #456]	; (b5d00 <_GLOBAL__sub_I_SystemMode+0x1d0>)
  explicit SdFat(SPIClass* spiPort) {
   b5b36:	4c73      	ldr	r4, [pc, #460]	; (b5d04 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   b5b38:	2601      	movs	r6, #1
   b5b3a:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5b3c:	4b72      	ldr	r3, [pc, #456]	; (b5d08 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b5b3e:	2500      	movs	r5, #0
   b5b40:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b5b44:	609a      	str	r2, [r3, #8]
   b5b46:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5b48:	2003      	movs	r0, #3
   b5b4a:	f007 fc3d 	bl	bd3c8 <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b5b4e:	486f      	ldr	r0, [pc, #444]	; (b5d0c <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b5b50:	f001 ff5e 	bl	b7a10 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b5b54:	486e      	ldr	r0, [pc, #440]	; (b5d10 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b5b56:	f001 fd45 	bl	b75e4 <_ZN16Adafruit_LIS3MDLC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b5b5a:	f7ff fd59 	bl	b5610 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5b5e:	2364      	movs	r3, #100	; 0x64
   b5b60:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b5b64:	4b6b      	ldr	r3, [pc, #428]	; (b5d14 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b5b66:	6065      	str	r5, [r4, #4]
   b5b68:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b5b6c:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b5b70:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b5b74:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b5b78:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b5b7c:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5b80:	b908      	cbnz	r0, b5b86 <_GLOBAL__sub_I_SystemMode+0x56>
   b5b82:	f7ff fd45 	bl	b5610 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b5b86:	4b64      	ldr	r3, [pc, #400]	; (b5d18 <_GLOBAL__sub_I_SystemMode+0x1e8>)
  File() {}
   b5b88:	4a64      	ldr	r2, [pc, #400]	; (b5d1c <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5b8a:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5b8e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   b5b92:	2400      	movs	r4, #0
   b5b94:	601a      	str	r2, [r3, #0]
   b5b96:	e9c3 4601 	strd	r4, r6, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5b9a:	611c      	str	r4, [r3, #16]
   b5b9c:	4b60      	ldr	r3, [pc, #384]	; (b5d20 <_GLOBAL__sub_I_SystemMode+0x1f0>)
        capacity_(0) {
   b5b9e:	9407      	str	r4, [sp, #28]
   b5ba0:	601a      	str	r2, [r3, #0]
   b5ba2:	e9c3 4601 	strd	r4, r6, [r3, #4]
   b5ba6:	611c      	str	r4, [r3, #16]
   b5ba8:	4b5e      	ldr	r3, [pc, #376]	; (b5d24 <_GLOBAL__sub_I_SystemMode+0x1f4>)
        filter_(level, filters) {
   b5baa:	4d5f      	ldr	r5, [pc, #380]	; (b5d28 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5bac:	601a      	str	r2, [r3, #0]
   b5bae:	e9c3 4601 	strd	r4, r6, [r3, #4]
   b5bb2:	611c      	str	r4, [r3, #16]
   b5bb4:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5bb8:	f00b fb00 	bl	c11bc <_Z16_fetch_usbserialv>
   b5bbc:	a905      	add	r1, sp, #20
   b5bbe:	4607      	mov	r7, r0
   b5bc0:	a808      	add	r0, sp, #32
   b5bc2:	f7ff ff83 	bl	b5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5bc6:	a908      	add	r1, sp, #32
   b5bc8:	a80b      	add	r0, sp, #44	; 0x2c
   b5bca:	f7ff ff7f 	bl	b5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5bce:	4b57      	ldr	r3, [pc, #348]	; (b5d2c <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b5bd0:	602b      	str	r3, [r5, #0]
   b5bd2:	a90b      	add	r1, sp, #44	; 0x2c
   b5bd4:	a80e      	add	r0, sp, #56	; 0x38
   b5bd6:	f7ff ff79 	bl	b5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5bda:	aa0e      	add	r2, sp, #56	; 0x38
   b5bdc:	211e      	movs	r1, #30
   b5bde:	1d28      	adds	r0, r5, #4
   b5be0:	f00a f992 	bl	bff08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5be4:	a80e      	add	r0, sp, #56	; 0x38
   b5be6:	f7ff fce1 	bl	b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5bea:	a80b      	add	r0, sp, #44	; 0x2c
   b5bec:	f7ff fcde 	bl	b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5bf0:	4b4f      	ldr	r3, [pc, #316]	; (b5d30 <_GLOBAL__sub_I_SystemMode+0x200>)
   b5bf2:	602b      	str	r3, [r5, #0]
   b5bf4:	622f      	str	r7, [r5, #32]
   b5bf6:	a808      	add	r0, sp, #32
   b5bf8:	f7ff fcd8 	bl	b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5bfc:	4b4d      	ldr	r3, [pc, #308]	; (b5d34 <_GLOBAL__sub_I_SystemMode+0x204>)
   b5bfe:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5c00:	f00b fadc 	bl	c11bc <_Z16_fetch_usbserialv>
   b5c04:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5c08:	f00b fac8 	bl	c119c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5c0c:	f009 fe5e 	bl	bf8cc <_ZN5spark10LogManager8instanceEv>
   b5c10:	4629      	mov	r1, r5
   b5c12:	f00a f84f 	bl	bfcb4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b5c16:	a805      	add	r0, sp, #20
   b5c18:	f7ff fcc8 	bl	b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b5c1c:	4846      	ldr	r0, [pc, #280]	; (b5d38 <_GLOBAL__sub_I_SystemMode+0x208>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5c1e:	4d47      	ldr	r5, [pc, #284]	; (b5d3c <_GLOBAL__sub_I_SystemMode+0x20c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5c20:	4f47      	ldr	r7, [pc, #284]	; (b5d40 <_GLOBAL__sub_I_SystemMode+0x210>)
Servo ESCL; 
   b5c22:	f00a febd 	bl	c09a0 <_ZN5ServoC1Ev>
Servo ESCR;
   b5c26:	4847      	ldr	r0, [pc, #284]	; (b5d44 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5c28:	f00a feba 	bl	c09a0 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5c2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5c30:	682b      	ldr	r3, [r5, #0]
   b5c32:	9300      	str	r3, [sp, #0]
   b5c34:	4b44      	ldr	r3, [pc, #272]	; (b5d48 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5c36:	4945      	ldr	r1, [pc, #276]	; (b5d4c <_GLOBAL__sub_I_SystemMode+0x21c>)
   b5c38:	681b      	ldr	r3, [r3, #0]
   b5c3a:	4845      	ldr	r0, [pc, #276]	; (b5d50 <_GLOBAL__sub_I_SystemMode+0x220>)
   b5c3c:	f04f 0210 	mov.w	r2, #16
   b5c40:	f7ff fcc7 	bl	b55d2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b5c44:	4b43      	ldr	r3, [pc, #268]	; (b5d54 <_GLOBAL__sub_I_SystemMode+0x224>)
   b5c46:	9402      	str	r4, [sp, #8]
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	682b      	ldr	r3, [r5, #0]
   b5c4c:	9300      	str	r3, [sp, #0]
   b5c4e:	4b42      	ldr	r3, [pc, #264]	; (b5d58 <_GLOBAL__sub_I_SystemMode+0x228>)
   b5c50:	4942      	ldr	r1, [pc, #264]	; (b5d5c <_GLOBAL__sub_I_SystemMode+0x22c>)
   b5c52:	681b      	ldr	r3, [r3, #0]
   b5c54:	4842      	ldr	r0, [pc, #264]	; (b5d60 <_GLOBAL__sub_I_SystemMode+0x230>)
   b5c56:	f04f 0204 	mov.w	r2, #4
   b5c5a:	f7ff fcba 	bl	b55d2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b5c5e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5c62:	682b      	ldr	r3, [r5, #0]
   b5c64:	9300      	str	r3, [sp, #0]
   b5c66:	4b3f      	ldr	r3, [pc, #252]	; (b5d64 <_GLOBAL__sub_I_SystemMode+0x234>)
   b5c68:	493f      	ldr	r1, [pc, #252]	; (b5d68 <_GLOBAL__sub_I_SystemMode+0x238>)
   b5c6a:	681b      	ldr	r3, [r3, #0]
   b5c6c:	483f      	ldr	r0, [pc, #252]	; (b5d6c <_GLOBAL__sub_I_SystemMode+0x23c>)
	    _M_manager = &_My_handler::_M_manager;
   b5c6e:	4d40      	ldr	r5, [pc, #256]	; (b5d70 <_GLOBAL__sub_I_SystemMode+0x240>)
   b5c70:	f04f 0210 	mov.w	r2, #16
   b5c74:	f7ff fcad 	bl	b55d2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b5c78:	483e      	ldr	r0, [pc, #248]	; (b5d74 <_GLOBAL__sub_I_SystemMode+0x244>)
   b5c7a:	f008 fa84 	bl	be186 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5c7e:	4b3e      	ldr	r3, [pc, #248]	; (b5d78 <_GLOBAL__sub_I_SystemMode+0x248>)
   b5c80:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5c82:	aa0e      	add	r2, sp, #56	; 0x38
   b5c84:	4623      	mov	r3, r4
   b5c86:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5c8a:	483c      	ldr	r0, [pc, #240]	; (b5d7c <_GLOBAL__sub_I_SystemMode+0x24c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5c8c:	9711      	str	r7, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5c8e:	9510      	str	r5, [sp, #64]	; 0x40
   b5c90:	f7fe fbc2 	bl	b4418 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5c94:	a80e      	add	r0, sp, #56	; 0x38
   b5c96:	f7fe fb81 	bl	b439c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5c9a:	4b39      	ldr	r3, [pc, #228]	; (b5d80 <_GLOBAL__sub_I_SystemMode+0x250>)
   b5c9c:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5c9e:	aa0e      	add	r2, sp, #56	; 0x38
   b5ca0:	4623      	mov	r3, r4
   b5ca2:	4631      	mov	r1, r6
   b5ca4:	4837      	ldr	r0, [pc, #220]	; (b5d84 <_GLOBAL__sub_I_SystemMode+0x254>)
	    _M_manager = &_My_handler::_M_manager;
   b5ca6:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b5caa:	f7fe fbb5 	bl	b4418 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5cae:	a80e      	add	r0, sp, #56	; 0x38
   b5cb0:	f7fe fb74 	bl	b439c <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5cb4:	4b34      	ldr	r3, [pc, #208]	; (b5d88 <_GLOBAL__sub_I_SystemMode+0x258>)
   b5cb6:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5cb8:	aa0e      	add	r2, sp, #56	; 0x38
   b5cba:	4623      	mov	r3, r4
   b5cbc:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5cc0:	4832      	ldr	r0, [pc, #200]	; (b5d8c <_GLOBAL__sub_I_SystemMode+0x25c>)
	    _M_manager = &_My_handler::_M_manager;
   b5cc2:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b5cc6:	f7fe fba7 	bl	b4418 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5cca:	a80e      	add	r0, sp, #56	; 0x38
   b5ccc:	f7fe fb66 	bl	b439c <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5cd0:	4622      	mov	r2, r4
   b5cd2:	2114      	movs	r1, #20
   b5cd4:	2001      	movs	r0, #1
   b5cd6:	f007 fb9f 	bl	bd418 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5cda:	2201      	movs	r2, #1
   b5cdc:	2114      	movs	r1, #20
   b5cde:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5ce2:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5ce4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5ce8:	4829      	ldr	r0, [pc, #164]	; (b5d90 <_GLOBAL__sub_I_SystemMode+0x260>)
   b5cea:	f009 fc71 	bl	bf5d0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
String xbeeBuf;
   b5cee:	4929      	ldr	r1, [pc, #164]	; (b5d94 <_GLOBAL__sub_I_SystemMode+0x264>)
   b5cf0:	4829      	ldr	r0, [pc, #164]	; (b5d98 <_GLOBAL__sub_I_SystemMode+0x268>)
   b5cf2:	b013      	add	sp, #76	; 0x4c
   b5cf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String xbeeBuf;
   b5cf8:	f00b b82f 	b.w	c0d5a <_ZN6StringC1EPK19__FlashStringHelper>
   b5cfc:	2003ddf4 	.word	0x2003ddf4
   b5d00:	ffff0000 	.word	0xffff0000
   b5d04:	2003e0f8 	.word	0x2003e0f8
   b5d08:	2003dde0 	.word	0x2003dde0
   b5d0c:	2003df6c 	.word	0x2003df6c
   b5d10:	2003de74 	.word	0x2003de74
   b5d14:	000c4904 	.word	0x000c4904
   b5d18:	2003df38 	.word	0x2003df38
   b5d1c:	000c4970 	.word	0x000c4970
   b5d20:	2003ded0 	.word	0x2003ded0
   b5d24:	2003de9c 	.word	0x2003de9c
   b5d28:	2003df04 	.word	0x2003df04
   b5d2c:	000c492c 	.word	0x000c492c
   b5d30:	000c5b00 	.word	0x000c5b00
   b5d34:	000c4958 	.word	0x000c4958
   b5d38:	2003ddbc 	.word	0x2003ddbc
   b5d3c:	2003dbac 	.word	0x2003dbac
   b5d40:	000b425b 	.word	0x000b425b
   b5d44:	2003ddcc 	.word	0x2003ddcc
   b5d48:	2003dbb8 	.word	0x2003dbb8
   b5d4c:	000c48f0 	.word	0x000c48f0
   b5d50:	2003e5d8 	.word	0x2003e5d8
   b5d54:	000b49bd 	.word	0x000b49bd
   b5d58:	2003dbb4 	.word	0x2003dbb4
   b5d5c:	000c48f3 	.word	0x000c48f3
   b5d60:	2003e0f0 	.word	0x2003e0f0
   b5d64:	2003dbb0 	.word	0x2003dbb0
   b5d68:	000c48f6 	.word	0x000c48f6
   b5d6c:	2003e0e4 	.word	0x2003e0e4
   b5d70:	000b4247 	.word	0x000b4247
   b5d74:	2003ddf8 	.word	0x2003ddf8
   b5d78:	000b455d 	.word	0x000b455d
   b5d7c:	2003e5e4 	.word	0x2003e5e4
   b5d80:	000b4491 	.word	0x000b4491
   b5d84:	2003de58 	.word	0x2003de58
   b5d88:	000b40fd 	.word	0x000b40fd
   b5d8c:	2003e5b8 	.word	0x2003e5b8
   b5d90:	2003e594 	.word	0x2003e594
   b5d94:	000c5acb 	.word	0x000c5acb
   b5d98:	2003e600 	.word	0x2003e600

000b5d9c <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5d9c:	b538      	push	{r3, r4, r5, lr}
   b5d9e:	4604      	mov	r4, r0
   b5da0:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5da2:	2224      	movs	r2, #36	; 0x24
   b5da4:	2100      	movs	r1, #0
   b5da6:	f00c fa39 	bl	c221c <memset>

  m_vol = vol;
   b5daa:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b5dac:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5dae:	2b10      	cmp	r3, #16
   b5db0:	d003      	beq.n	b5dba <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5db2:	2b20      	cmp	r3, #32
   b5db4:	d006      	beq.n	b5dc4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5db6:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5db8:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5dba:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5dbc:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5dbe:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5dc0:	70a0      	strb	r0, [r4, #2]
  return true;
   b5dc2:	e7f9      	b.n	b5db8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5dc4:	2340      	movs	r3, #64	; 0x40
   b5dc6:	e7f9      	b.n	b5dbc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5dc8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5dc8:	b510      	push	{r4, lr}
   b5dca:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5dcc:	3024      	adds	r0, #36	; 0x24
   b5dce:	f000 ff66 	bl	b6c9e <_ZN8FatCache4syncEv>
   b5dd2:	b128      	cbz	r0, b5de0 <_ZN9FatVolume9cacheSyncEv+0x18>
   b5dd4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5ddc:	f000 bf5f 	b.w	b6c9e <_ZN8FatCache4syncEv>
  }
   b5de0:	bd10      	pop	{r4, pc}

000b5de2 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b5de2:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5de4:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5de6:	f043 0304 	orr.w	r3, r3, #4
   b5dea:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5dec:	f100 0210 	add.w	r2, r0, #16
   b5df0:	6880      	ldr	r0, [r0, #8]
   b5df2:	f001 b80a 	b.w	b6e0a <_ZN9FatVolume15allocateClusterEmPm>
	...

000b5df8 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5dfc:	7801      	ldrb	r1, [r0, #0]
   b5dfe:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b5e02:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b5e04:	d003      	beq.n	b5e0e <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b5e06:	2600      	movs	r6, #0
}
   b5e08:	4630      	mov	r0, r6
   b5e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5e0e:	6942      	ldr	r2, [r0, #20]
   b5e10:	4b17      	ldr	r3, [pc, #92]	; (b5e70 <_ZN7FatFile13addDirClusterEv+0x78>)
   b5e12:	429a      	cmp	r2, r3
   b5e14:	d2f7      	bcs.n	b5e06 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5e16:	f7ff ffe4 	bl	b5de2 <_ZN7FatFile10addClusterEv>
   b5e1a:	4606      	mov	r6, r0
   b5e1c:	2800      	cmp	r0, #0
   b5e1e:	d0f2      	beq.n	b5e06 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5e20:	6921      	ldr	r1, [r4, #16]
   b5e22:	68a0      	ldr	r0, [r4, #8]
   b5e24:	f000 ff86 	bl	b6d34 <_ZNK9FatVolume17clusterFirstBlockEm>
   b5e28:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b5e2a:	68a0      	ldr	r0, [r4, #8]
   b5e2c:	2205      	movs	r2, #5
   b5e2e:	4639      	mov	r1, r7
   b5e30:	3024      	adds	r0, #36	; 0x24
   b5e32:	f000 ff5c 	bl	b6cee <_ZN8FatCache4readEmh>
  if (!pc) {
   b5e36:	4680      	mov	r8, r0
   b5e38:	2800      	cmp	r0, #0
   b5e3a:	d0e4      	beq.n	b5e06 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5e3c:	4629      	mov	r1, r5
   b5e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5e42:	f00c f9eb 	bl	c221c <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5e46:	2501      	movs	r5, #1
   b5e48:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5e4a:	791a      	ldrb	r2, [r3, #4]
   b5e4c:	42aa      	cmp	r2, r5
   b5e4e:	d909      	bls.n	b5e64 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5e50:	6818      	ldr	r0, [r3, #0]
   b5e52:	4642      	mov	r2, r8
   b5e54:	19e9      	adds	r1, r5, r7
   b5e56:	f001 fab6 	bl	b73c6 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5e5a:	2800      	cmp	r0, #0
   b5e5c:	d0d3      	beq.n	b5e06 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5e5e:	3501      	adds	r5, #1
   b5e60:	b2ed      	uxtb	r5, r5
   b5e62:	e7f1      	b.n	b5e48 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5e64:	6963      	ldr	r3, [r4, #20]
   b5e66:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5e6a:	6163      	str	r3, [r4, #20]
  return true;
   b5e6c:	e7cc      	b.n	b5e08 <_ZN7FatFile13addDirClusterEv+0x10>
   b5e6e:	bf00      	nop
   b5e70:	001ffe00 	.word	0x001ffe00

000b5e74 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5e74:	b510      	push	{r4, lr}
   b5e76:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5e78:	6880      	ldr	r0, [r0, #8]
   b5e7a:	460a      	mov	r2, r1
   b5e7c:	3024      	adds	r0, #36	; 0x24
   b5e7e:	69a1      	ldr	r1, [r4, #24]
   b5e80:	f000 ff35 	bl	b6cee <_ZN8FatCache4readEmh>
  if (!pc) {
   b5e84:	b120      	cbz	r0, b5e90 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5e86:	88a3      	ldrh	r3, [r4, #4]
   b5e88:	f003 030f 	and.w	r3, r3, #15
   b5e8c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5e90:	bd10      	pop	{r4, pc}

000b5e92 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b5e92:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b5e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e96:	4604      	mov	r4, r0
   b5e98:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b5e9a:	2608      	movs	r6, #8
  uint8_t j = 0;
   b5e9c:	4618      	mov	r0, r3
      name[j++] = '.';
   b5e9e:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b5ea0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b5ea4:	2a20      	cmp	r2, #32
   b5ea6:	d018      	beq.n	b5eda <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b5ea8:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b5eaa:	bf02      	ittt	eq
   b5eac:	540f      	strbeq	r7, [r1, r0]
   b5eae:	1c42      	addeq	r2, r0, #1
   b5eb0:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b5eb2:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b5eb4:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b5eb8:	bf08      	it	eq
   b5eba:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b5ebc:	f1bc 0f19 	cmp.w	ip, #25
   b5ec0:	d806      	bhi.n	b5ed0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b5ec2:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b5ec6:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b5eca:	bf1c      	itt	ne
   b5ecc:	3220      	addne	r2, #32
   b5ece:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b5ed0:	f100 0c01 	add.w	ip, r0, #1
   b5ed4:	540a      	strb	r2, [r1, r0]
   b5ed6:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b5eda:	3301      	adds	r3, #1
   b5edc:	b2db      	uxtb	r3, r3
   b5ede:	2b0b      	cmp	r3, #11
   b5ee0:	d1de      	bne.n	b5ea0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b5ee2:	2300      	movs	r3, #0
   b5ee4:	540b      	strb	r3, [r1, r0]
}
   b5ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5ee8 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b5ee8:	7803      	ldrb	r3, [r0, #0]
   b5eea:	b90b      	cbnz	r3, b5ef0 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5eec:	f7ff bf56 	b.w	b5d9c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5ef0:	2000      	movs	r0, #0
   b5ef2:	4770      	bx	lr

000b5ef4 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b5ef8:	7803      	ldrb	r3, [r0, #0]
   b5efa:	4604      	mov	r4, r0
   b5efc:	4688      	mov	r8, r1
   b5efe:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5f00:	2b00      	cmp	r3, #0
   b5f02:	d05d      	beq.n	b5fc0 <_ZN7FatFile4readEPvj+0xcc>
   b5f04:	7882      	ldrb	r2, [r0, #2]
   b5f06:	07d1      	lsls	r1, r2, #31
   b5f08:	d55a      	bpl.n	b5fc0 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b5f0a:	071a      	lsls	r2, r3, #28
   b5f0c:	d52d      	bpl.n	b5f6a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5f0e:	69c3      	ldr	r3, [r0, #28]
   b5f10:	6942      	ldr	r2, [r0, #20]
   b5f12:	1a9b      	subs	r3, r3, r2
   b5f14:	429d      	cmp	r5, r3
   b5f16:	bf28      	it	cs
   b5f18:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b5f1a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b5f1c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5f20:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b5f24:	2e00      	cmp	r6, #0
   b5f26:	f000 808f 	beq.w	b6048 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b5f2a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b5f2c:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5f2e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b5f30:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b5f32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5f36:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b5f3a:	d51f      	bpl.n	b5f7c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5f3c:	6a00      	ldr	r0, [r0, #32]
   b5f3e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b5f40:	68a0      	ldr	r0, [r4, #8]
   b5f42:	f1ba 0f00 	cmp.w	sl, #0
   b5f46:	d142      	bne.n	b5fce <_ZN7FatFile4readEPvj+0xda>
   b5f48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5f4c:	d33f      	bcc.n	b5fce <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b5f4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5f50:	4299      	cmp	r1, r3
   b5f52:	d03c      	beq.n	b5fce <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b5f54:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5f58:	d252      	bcs.n	b6000 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b5f5a:	6800      	ldr	r0, [r0, #0]
   b5f5c:	4642      	mov	r2, r8
   b5f5e:	f001 f9a9 	bl	b72b4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b5f62:	b368      	cbz	r0, b5fc0 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b5f64:	f44f 7700 	mov.w	r7, #512	; 0x200
   b5f68:	e044      	b.n	b5ff4 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b5f6a:	069b      	lsls	r3, r3, #26
   b5f6c:	d5d5      	bpl.n	b5f1a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b5f6e:	6883      	ldr	r3, [r0, #8]
   b5f70:	891a      	ldrh	r2, [r3, #8]
   b5f72:	6943      	ldr	r3, [r0, #20]
   b5f74:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b5f78:	b29b      	uxth	r3, r3
   b5f7a:	e7cb      	b.n	b5f14 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b5f7c:	f890 9005 	ldrb.w	r9, [r0, #5]
   b5f80:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b5f84:	f1ba 0f00 	cmp.w	sl, #0
   b5f88:	d108      	bne.n	b5f9c <_ZN7FatFile4readEPvj+0xa8>
   b5f8a:	f1b9 0f00 	cmp.w	r9, #0
   b5f8e:	d105      	bne.n	b5f9c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b5f90:	b95b      	cbnz	r3, b5faa <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5f92:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b5f94:	bf4c      	ite	mi
   b5f96:	6a03      	ldrmi	r3, [r0, #32]
   b5f98:	6a23      	ldrpl	r3, [r4, #32]
   b5f9a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5f9c:	6921      	ldr	r1, [r4, #16]
   b5f9e:	68a0      	ldr	r0, [r4, #8]
   b5fa0:	f000 fec8 	bl	b6d34 <_ZNK9FatVolume17clusterFirstBlockEm>
   b5fa4:	eb09 0100 	add.w	r1, r9, r0
   b5fa8:	e7ca      	b.n	b5f40 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5faa:	6921      	ldr	r1, [r4, #16]
   b5fac:	465a      	mov	r2, fp
   b5fae:	f000 fec7 	bl	b6d40 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b5fb2:	2800      	cmp	r0, #0
   b5fb4:	db04      	blt.n	b5fc0 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b5fb6:	d1f1      	bne.n	b5f9c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b5fb8:	7823      	ldrb	r3, [r4, #0]
   b5fba:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5fbe:	d143      	bne.n	b6048 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b5fc0:	7863      	ldrb	r3, [r4, #1]
   b5fc2:	f043 0302 	orr.w	r3, r3, #2
   b5fc6:	7063      	strb	r3, [r4, #1]
  return -1;
   b5fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5fcc:	e03d      	b.n	b604a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5fce:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5fd2:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b5fd4:	f04f 0200 	mov.w	r2, #0
   b5fd8:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b5fdc:	bf28      	it	cs
   b5fde:	4637      	movcs	r7, r6
   b5fe0:	f000 fe85 	bl	b6cee <_ZN8FatCache4readEmh>
      if (!pc) {
   b5fe4:	2800      	cmp	r0, #0
   b5fe6:	d0eb      	beq.n	b5fc0 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b5fe8:	eb00 010a 	add.w	r1, r0, sl
   b5fec:	463a      	mov	r2, r7
   b5fee:	4640      	mov	r0, r8
   b5ff0:	f00c f8ec 	bl	c21cc <memcpy>
    m_curPosition += n;
   b5ff4:	6963      	ldr	r3, [r4, #20]
   b5ff6:	443b      	add	r3, r7
    dst += n;
   b5ff8:	44b8      	add	r8, r7
    m_curPosition += n;
   b5ffa:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b5ffc:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5ffe:	e791      	b.n	b5f24 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6000:	7822      	ldrb	r2, [r4, #0]
   b6002:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6004:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6008:	d406      	bmi.n	b6018 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b600a:	7902      	ldrb	r2, [r0, #4]
   b600c:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6010:	b2d2      	uxtb	r2, r2
   b6012:	4592      	cmp	sl, r2
   b6014:	bf28      	it	cs
   b6016:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6018:	4299      	cmp	r1, r3
      n = 512*nb;
   b601a:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b601e:	d208      	bcs.n	b6032 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6020:	68a0      	ldr	r0, [r4, #8]
   b6022:	4653      	mov	r3, sl
   b6024:	6800      	ldr	r0, [r0, #0]
   b6026:	4642      	mov	r2, r8
   b6028:	f001 f98c 	bl	b7344 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b602c:	2800      	cmp	r0, #0
   b602e:	d1e1      	bne.n	b5ff4 <_ZN7FatFile4readEPvj+0x100>
   b6030:	e7c6      	b.n	b5fc0 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6032:	4453      	add	r3, sl
   b6034:	428b      	cmp	r3, r1
   b6036:	d9f3      	bls.n	b6020 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6038:	3024      	adds	r0, #36	; 0x24
   b603a:	9101      	str	r1, [sp, #4]
   b603c:	f000 fe2f 	bl	b6c9e <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6040:	9901      	ldr	r1, [sp, #4]
   b6042:	2800      	cmp	r0, #0
   b6044:	d1ec      	bne.n	b6020 <_ZN7FatFile4readEPvj+0x12c>
   b6046:	e7bb      	b.n	b5fc0 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6048:	1ba8      	subs	r0, r5, r6
}
   b604a:	b003      	add	sp, #12
   b604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6050 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6050:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6052:	2201      	movs	r2, #1
   b6054:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6058:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b605c:	4604      	mov	r4, r0
   b605e:	f7ff ff49 	bl	b5ef4 <_ZN7FatFile4readEPvj>
   b6062:	2801      	cmp	r0, #1
   b6064:	bf0a      	itet	eq
   b6066:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b606a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b606e:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6072:	b002      	add	sp, #8
   b6074:	bd70      	pop	{r4, r5, r6, pc}

000b6076 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6076:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6078:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b607a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b607e:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6080:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6084:	d000      	beq.n	b6088 <_ZN7FatFile12readDirCacheEb+0x12>
   b6086:	b999      	cbnz	r1, b60b0 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6088:	2201      	movs	r2, #1
   b608a:	f10d 0107 	add.w	r1, sp, #7
   b608e:	4620      	mov	r0, r4
   b6090:	f7ff ff30 	bl	b5ef4 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6094:	b240      	sxtb	r0, r0
   b6096:	2801      	cmp	r0, #1
   b6098:	d002      	beq.n	b60a0 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b609a:	2000      	movs	r0, #0
}
   b609c:	b003      	add	sp, #12
   b609e:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b60a0:	6963      	ldr	r3, [r4, #20]
   b60a2:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b60a4:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b60a6:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b60a8:	3030      	adds	r0, #48	; 0x30
   b60aa:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b60ae:	e7f5      	b.n	b609c <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b60b0:	3320      	adds	r3, #32
   b60b2:	e7f7      	b.n	b60a4 <_ZN7FatFile12readDirCacheEb+0x2e>

000b60b4 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b60b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b60b8:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b60ba:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b60bc:	4604      	mov	r4, r0
   b60be:	460d      	mov	r5, r1
  if (!isOpen()) {
   b60c0:	b162      	cbz	r2, b60dc <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b60c2:	6940      	ldr	r0, [r0, #20]
   b60c4:	4288      	cmp	r0, r1
   b60c6:	d002      	beq.n	b60ce <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b60c8:	b919      	cbnz	r1, b60d2 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b60ca:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b60cc:	6165      	str	r5, [r4, #20]
    return true;
   b60ce:	2001      	movs	r0, #1
   b60d0:	e006      	b.n	b60e0 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b60d2:	0716      	lsls	r6, r2, #28
   b60d4:	d506      	bpl.n	b60e4 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b60d6:	69e3      	ldr	r3, [r4, #28]
   b60d8:	428b      	cmp	r3, r1
   b60da:	d20b      	bcs.n	b60f4 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b60dc:	6127      	str	r7, [r4, #16]
  return false;
   b60de:	2000      	movs	r0, #0
}
   b60e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b60e4:	0691      	lsls	r1, r2, #26
   b60e6:	d505      	bpl.n	b60f4 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b60e8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b60ea:	891b      	ldrh	r3, [r3, #8]
   b60ec:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b60f0:	d9ec      	bls.n	b60cc <_ZN7FatFile7seekSetEm+0x18>
   b60f2:	e7f3      	b.n	b60dc <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b60f4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b60f8:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b60fc:	1e43      	subs	r3, r0, #1
   b60fe:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6102:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6104:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6106:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6108:	42b3      	cmp	r3, r6
   b610a:	d800      	bhi.n	b610e <_ZN7FatFile7seekSetEm+0x5a>
   b610c:	b998      	cbnz	r0, b6136 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b610e:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6110:	bf4c      	ite	mi
   b6112:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6116:	6a23      	ldrpl	r3, [r4, #32]
   b6118:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b611a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b611e:	2e00      	cmp	r6, #0
   b6120:	d0d4      	beq.n	b60cc <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6122:	6921      	ldr	r1, [r4, #16]
   b6124:	68a0      	ldr	r0, [r4, #8]
   b6126:	4642      	mov	r2, r8
   b6128:	f000 fe0a 	bl	b6d40 <_ZN9FatVolume6fatGetEmPm>
   b612c:	2800      	cmp	r0, #0
   b612e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b6132:	dcf4      	bgt.n	b611e <_ZN7FatFile7seekSetEm+0x6a>
   b6134:	e7d2      	b.n	b60dc <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6136:	1af6      	subs	r6, r6, r3
   b6138:	e7ef      	b.n	b611a <_ZN7FatFile7seekSetEm+0x66>

000b613a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b613c:	460f      	mov	r7, r1
   b613e:	4604      	mov	r4, r0
   b6140:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6142:	2100      	movs	r1, #0
   b6144:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6146:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6148:	f00c f868 	bl	c221c <memset>
  m_vol = dirFile->m_vol;
   b614c:	68b8      	ldr	r0, [r7, #8]
   b614e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6150:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6152:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6156:	6a3b      	ldr	r3, [r7, #32]
   b6158:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b615a:	016a      	lsls	r2, r5, #5
   b615c:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6160:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6164:	071f      	lsls	r7, r3, #28
   b6166:	d444      	bmi.n	b61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6168:	f003 0317 	and.w	r3, r3, #23
   b616c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b616e:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6172:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6176:	bf04      	itt	eq
   b6178:	f043 0308 	orreq.w	r3, r3, #8
   b617c:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b617e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6182:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6184:	f006 0303 	and.w	r3, r6, #3
   b6188:	2b01      	cmp	r3, #1
   b618a:	d02c      	beq.n	b61e6 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b618c:	2b02      	cmp	r3, #2
   b618e:	d028      	beq.n	b61e2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6190:	bb7b      	cbnz	r3, b61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6192:	0571      	lsls	r1, r6, #21
   b6194:	d42d      	bmi.n	b61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6196:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6198:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b619a:	78a1      	ldrb	r1, [r4, #2]
   b619c:	078b      	lsls	r3, r1, #30
   b619e:	d504      	bpl.n	b61aa <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b61a0:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b61a2:	06df      	lsls	r7, r3, #27
   b61a4:	d425      	bmi.n	b61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b61a6:	07dd      	lsls	r5, r3, #31
   b61a8:	d423      	bmi.n	b61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b61aa:	11b3      	asrs	r3, r6, #6
   b61ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b61b0:	f006 0508 	and.w	r5, r6, #8
   b61b4:	432b      	orrs	r3, r5
   b61b6:	430b      	orrs	r3, r1
   b61b8:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b61ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b61bc:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b61be:	1883      	adds	r3, r0, r2
   b61c0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b61c4:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b61c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b61cc:	0572      	lsls	r2, r6, #21
   b61ce:	d513      	bpl.n	b61f8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b61d0:	b959      	cbnz	r1, b61ea <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b61d2:	78a3      	ldrb	r3, [r4, #2]
   b61d4:	f043 0304 	orr.w	r3, r3, #4
   b61d8:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b61da:	0473      	lsls	r3, r6, #17
   b61dc:	d410      	bmi.n	b6200 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b61de:	2001      	movs	r0, #1
}
   b61e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b61e2:	2303      	movs	r3, #3
   b61e4:	e7d8      	b.n	b6198 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b61e6:	2302      	movs	r3, #2
   b61e8:	e7d6      	b.n	b6198 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b61ea:	f000 fe49 	bl	b6e80 <_ZN9FatVolume9freeChainEm>
   b61ee:	2800      	cmp	r0, #0
   b61f0:	d1ef      	bne.n	b61d2 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b61f2:	2000      	movs	r0, #0
   b61f4:	7020      	strb	r0, [r4, #0]
  return false;
   b61f6:	e7f3      	b.n	b61e0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b61f8:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b61fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b61fc:	61e3      	str	r3, [r4, #28]
   b61fe:	e7ec      	b.n	b61da <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6200:	69e1      	ldr	r1, [r4, #28]
   b6202:	4620      	mov	r0, r4
   b6204:	f7ff ff56 	bl	b60b4 <_ZN7FatFile7seekSetEm>
   b6208:	2800      	cmp	r0, #0
   b620a:	d1e8      	bne.n	b61de <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b620c:	e7f1      	b.n	b61f2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b620e <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b620e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b6212:	7803      	ldrb	r3, [r0, #0]
   b6214:	4607      	mov	r7, r0
   b6216:	460d      	mov	r5, r1
   b6218:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b621a:	bb53      	cbnz	r3, b6272 <_ZN7FatFile8openNextEPS_i+0x64>
   b621c:	780b      	ldrb	r3, [r1, #0]
   b621e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6222:	d026      	beq.n	b6272 <_ZN7FatFile8openNextEPS_i+0x64>
   b6224:	694c      	ldr	r4, [r1, #20]
   b6226:	f014 041f 	ands.w	r4, r4, #31
   b622a:	d122      	bne.n	b6272 <_ZN7FatFile8openNextEPS_i+0x64>
   b622c:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b622e:	2100      	movs	r1, #0
   b6230:	4628      	mov	r0, r5
    return m_curPosition;
   b6232:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b6236:	f7ff ff1e 	bl	b6076 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b623a:	b1d0      	cbz	r0, b6272 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b623c:	7806      	ldrb	r6, [r0, #0]
   b623e:	b1c6      	cbz	r6, b6272 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6240:	2e2e      	cmp	r6, #46	; 0x2e
   b6242:	d010      	beq.n	b6266 <_ZN7FatFile8openNextEPS_i+0x58>
   b6244:	2ee5      	cmp	r6, #229	; 0xe5
   b6246:	d00e      	beq.n	b6266 <_ZN7FatFile8openNextEPS_i+0x58>
   b6248:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b624a:	071a      	lsls	r2, r3, #28
   b624c:	d413      	bmi.n	b6276 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b624e:	b964      	cbnz	r4, b626a <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6250:	9400      	str	r4, [sp, #0]
   b6252:	4653      	mov	r3, sl
   b6254:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6258:	4629      	mov	r1, r5
   b625a:	4638      	mov	r0, r7
   b625c:	f7ff ff6d 	bl	b613a <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6260:	b002      	add	sp, #8
   b6262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b6266:	2400      	movs	r4, #0
   b6268:	e7e1      	b.n	b622e <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b626a:	f000 f971 	bl	b6550 <_ZN7FatFile11lfnChecksumEPh>
   b626e:	4540      	cmp	r0, r8
   b6270:	d0ee      	beq.n	b6250 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6272:	2000      	movs	r0, #0
   b6274:	e7f4      	b.n	b6260 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6276:	2b0f      	cmp	r3, #15
   b6278:	d1f5      	bne.n	b6266 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b627a:	0673      	lsls	r3, r6, #25
   b627c:	d5d7      	bpl.n	b622e <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b627e:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6282:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b6286:	e7d2      	b.n	b622e <_ZN7FatFile8openNextEPS_i+0x20>

000b6288 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6288:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b628a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b628c:	4604      	mov	r4, r0
  if (!isOpen()) {
   b628e:	b90b      	cbnz	r3, b6294 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6290:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6292:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6294:	7883      	ldrb	r3, [r0, #2]
   b6296:	075a      	lsls	r2, r3, #29
   b6298:	d523      	bpl.n	b62e2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b629a:	2101      	movs	r1, #1
   b629c:	f7ff fdea 	bl	b5e74 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b62a0:	4605      	mov	r5, r0
   b62a2:	b928      	cbnz	r0, b62b0 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b62a4:	7863      	ldrb	r3, [r4, #1]
   b62a6:	f043 0301 	orr.w	r3, r3, #1
   b62aa:	7063      	strb	r3, [r4, #1]
  return false;
   b62ac:	2000      	movs	r0, #0
   b62ae:	e7f0      	b.n	b6292 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b62b0:	7803      	ldrb	r3, [r0, #0]
   b62b2:	2be5      	cmp	r3, #229	; 0xe5
   b62b4:	d0f6      	beq.n	b62a4 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b62b6:	7823      	ldrb	r3, [r4, #0]
   b62b8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b62ba:	bf44      	itt	mi
   b62bc:	69e3      	ldrmi	r3, [r4, #28]
   b62be:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b62c0:	6a23      	ldr	r3, [r4, #32]
   b62c2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b62c4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b62c6:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b62c8:	4b09      	ldr	r3, [pc, #36]	; (b62f0 <_ZN7FatFile4syncEv+0x68>)
   b62ca:	681b      	ldr	r3, [r3, #0]
   b62cc:	b12b      	cbz	r3, b62da <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b62ce:	f100 0116 	add.w	r1, r0, #22
   b62d2:	3018      	adds	r0, #24
   b62d4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b62d6:	8b2b      	ldrh	r3, [r5, #24]
   b62d8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b62da:	78a3      	ldrb	r3, [r4, #2]
   b62dc:	f023 0304 	bic.w	r3, r3, #4
   b62e0:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b62e2:	68a0      	ldr	r0, [r4, #8]
   b62e4:	f7ff fd70 	bl	b5dc8 <_ZN9FatVolume9cacheSyncEv>
   b62e8:	2800      	cmp	r0, #0
   b62ea:	d0db      	beq.n	b62a4 <_ZN7FatFile4syncEv+0x1c>
   b62ec:	e7d0      	b.n	b6290 <_ZN7FatFile4syncEv+0x8>
   b62ee:	bf00      	nop
   b62f0:	2003e610 	.word	0x2003e610

000b62f4 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b62f4:	b510      	push	{r4, lr}
   b62f6:	4604      	mov	r4, r0
  bool rtn = sync();
   b62f8:	f7ff ffc6 	bl	b6288 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b62fc:	2300      	movs	r3, #0
   b62fe:	7023      	strb	r3, [r4, #0]
}
   b6300:	bd10      	pop	{r4, pc}

000b6302 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6302:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6304:	b093      	sub	sp, #76	; 0x4c
   b6306:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6308:	2300      	movs	r3, #0
   b630a:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b630c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b630e:	9201      	str	r2, [sp, #4]
   b6310:	4606      	mov	r6, r0
   b6312:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6314:	b113      	cbz	r3, b631c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6316:	2000      	movs	r0, #0
}
   b6318:	b013      	add	sp, #76	; 0x4c
   b631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b631c:	780b      	ldrb	r3, [r1, #0]
   b631e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6322:	d0f8      	beq.n	b6316 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6324:	7813      	ldrb	r3, [r2, #0]
   b6326:	2b2f      	cmp	r3, #47	; 0x2f
   b6328:	d112      	bne.n	b6350 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b632a:	9a01      	ldr	r2, [sp, #4]
   b632c:	7813      	ldrb	r3, [r2, #0]
   b632e:	2b2f      	cmp	r3, #47	; 0x2f
   b6330:	d102      	bne.n	b6338 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6332:	3201      	adds	r2, #1
   b6334:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6336:	e7f8      	b.n	b632a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6338:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b633a:	b91b      	cbnz	r3, b6344 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b633c:	4630      	mov	r0, r6
   b633e:	f7ff fdd3 	bl	b5ee8 <_ZN7FatFile8openRootEP9FatVolume>
   b6342:	e7e9      	b.n	b6318 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6344:	a809      	add	r0, sp, #36	; 0x24
   b6346:	f7ff fd29 	bl	b5d9c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b634a:	2800      	cmp	r0, #0
   b634c:	d0e3      	beq.n	b6316 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b634e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6350:	9801      	ldr	r0, [sp, #4]
   b6352:	aa01      	add	r2, sp, #4
   b6354:	a903      	add	r1, sp, #12
   b6356:	f000 f98f 	bl	b6678 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b635a:	2800      	cmp	r0, #0
   b635c:	d0db      	beq.n	b6316 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b635e:	9b01      	ldr	r3, [sp, #4]
   b6360:	781b      	ldrb	r3, [r3, #0]
   b6362:	b19b      	cbz	r3, b638c <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6364:	2300      	movs	r3, #0
   b6366:	aa03      	add	r2, sp, #12
   b6368:	4621      	mov	r1, r4
   b636a:	4630      	mov	r0, r6
   b636c:	f000 fab6 	bl	b68dc <_ZN7FatFile4openEPS_P7fname_ti>
   b6370:	2800      	cmp	r0, #0
   b6372:	d0d0      	beq.n	b6316 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6374:	4635      	mov	r5, r6
   b6376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6378:	ac09      	add	r4, sp, #36	; 0x24
   b637a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b637c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b637e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6380:	682b      	ldr	r3, [r5, #0]
   b6382:	6023      	str	r3, [r4, #0]
    close();
   b6384:	4630      	mov	r0, r6
   b6386:	f7ff ffb5 	bl	b62f4 <_ZN7FatFile5closeEv>
  while (1) {
   b638a:	e7e0      	b.n	b634e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b638c:	463b      	mov	r3, r7
   b638e:	aa03      	add	r2, sp, #12
   b6390:	4621      	mov	r1, r4
   b6392:	4630      	mov	r0, r6
   b6394:	f000 faa2 	bl	b68dc <_ZN7FatFile4openEPS_P7fname_ti>
   b6398:	e7be      	b.n	b6318 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b639c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b63a0:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b63a2:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b63a4:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b63a6:	4604      	mov	r4, r0
   b63a8:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b63aa:	d55b      	bpl.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
   b63ac:	7883      	ldrb	r3, [r0, #2]
   b63ae:	079a      	lsls	r2, r3, #30
   b63b0:	d558      	bpl.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b63b2:	071b      	lsls	r3, r3, #28
   b63b4:	d451      	bmi.n	b645a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b63b6:	6963      	ldr	r3, [r4, #20]
   b63b8:	43db      	mvns	r3, r3
   b63ba:	42bb      	cmp	r3, r7
   b63bc:	d352      	bcc.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
   b63be:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b63c0:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b63c4:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b63c6:	f1b8 0f00 	cmp.w	r8, #0
   b63ca:	f000 8091 	beq.w	b64f0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b63ce:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b63d0:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b63d2:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b63d6:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b63da:	d10e      	bne.n	b63fa <_ZN7FatFile5writeEPKvj+0x5e>
   b63dc:	b96d      	cbnz	r5, b63fa <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b63de:	6921      	ldr	r1, [r4, #16]
   b63e0:	2900      	cmp	r1, #0
   b63e2:	d046      	beq.n	b6472 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b63e4:	4652      	mov	r2, sl
   b63e6:	f000 fcab 	bl	b6d40 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b63ea:	2800      	cmp	r0, #0
   b63ec:	db3a      	blt.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b63ee:	d104      	bne.n	b63fa <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b63f0:	4620      	mov	r0, r4
   b63f2:	f7ff fcf6 	bl	b5de2 <_ZN7FatFile10addClusterEv>
   b63f6:	2800      	cmp	r0, #0
   b63f8:	d034      	beq.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b63fa:	6921      	ldr	r1, [r4, #16]
   b63fc:	68a0      	ldr	r0, [r4, #8]
   b63fe:	f000 fc99 	bl	b6d34 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6402:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6404:	68a0      	ldr	r0, [r4, #8]
   b6406:	b915      	cbnz	r5, b640e <_ZN7FatFile5writeEPKvj+0x72>
   b6408:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b640c:	d23f      	bcs.n	b648e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b640e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6412:	4546      	cmp	r6, r8
   b6414:	bf28      	it	cs
   b6416:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6418:	2d00      	cmp	r5, #0
   b641a:	d136      	bne.n	b648a <_ZN7FatFile5writeEPKvj+0xee>
   b641c:	6962      	ldr	r2, [r4, #20]
   b641e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6420:	429a      	cmp	r2, r3
   b6422:	bf34      	ite	cc
   b6424:	2201      	movcc	r2, #1
   b6426:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6428:	3024      	adds	r0, #36	; 0x24
   b642a:	f000 fc60 	bl	b6cee <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b642e:	b1c8      	cbz	r0, b6464 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6430:	4428      	add	r0, r5
   b6432:	4632      	mov	r2, r6
   b6434:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6436:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6438:	f00b fec8 	bl	c21cc <memcpy>
      if (512 == (n + blockOffset)) {
   b643c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6440:	d104      	bne.n	b644c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6442:	68a0      	ldr	r0, [r4, #8]
   b6444:	3024      	adds	r0, #36	; 0x24
   b6446:	f000 fc2a 	bl	b6c9e <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b644a:	b158      	cbz	r0, b6464 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b644c:	6963      	ldr	r3, [r4, #20]
   b644e:	4433      	add	r3, r6
   b6450:	6163      	str	r3, [r4, #20]
    src += n;
   b6452:	44b1      	add	r9, r6
    nToWrite -= n;
   b6454:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6458:	e7b4      	b.n	b63c4 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b645a:	69c1      	ldr	r1, [r0, #28]
   b645c:	f7ff fe2a 	bl	b60b4 <_ZN7FatFile7seekSetEm>
   b6460:	2800      	cmp	r0, #0
   b6462:	d1a8      	bne.n	b63b6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6464:	7863      	ldrb	r3, [r4, #1]
   b6466:	f043 0301 	orr.w	r3, r3, #1
   b646a:	7063      	strb	r3, [r4, #1]
  return -1;
   b646c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6470:	e050      	b.n	b6514 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6472:	6a23      	ldr	r3, [r4, #32]
   b6474:	b93b      	cbnz	r3, b6486 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6476:	4620      	mov	r0, r4
   b6478:	f7ff fcb3 	bl	b5de2 <_ZN7FatFile10addClusterEv>
   b647c:	2800      	cmp	r0, #0
   b647e:	d0f1      	beq.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6480:	6923      	ldr	r3, [r4, #16]
   b6482:	6223      	str	r3, [r4, #32]
   b6484:	e7b9      	b.n	b63fa <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6486:	6123      	str	r3, [r4, #16]
   b6488:	e7b7      	b.n	b63fa <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b648a:	2201      	movs	r2, #1
   b648c:	e7cc      	b.n	b6428 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b648e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6492:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6494:	d31b      	bcc.n	b64ce <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6496:	f890 c004 	ldrb.w	ip, [r0, #4]
   b649a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b649e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b64a0:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b64a4:	4573      	cmp	r3, lr
   b64a6:	bf28      	it	cs
   b64a8:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b64aa:	4291      	cmp	r1, r2
      n = 512*nb;
   b64ac:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b64b0:	d307      	bcc.n	b64c2 <_ZN7FatFile5writeEPKvj+0x126>
   b64b2:	441a      	add	r2, r3
   b64b4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b64b6:	bf82      	ittt	hi
   b64b8:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b64bc:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b64c0:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b64c2:	68a5      	ldr	r5, [r4, #8]
   b64c4:	464a      	mov	r2, r9
   b64c6:	6828      	ldr	r0, [r5, #0]
   b64c8:	f000 fff3 	bl	b74b2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b64cc:	e7bd      	b.n	b644a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b64ce:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b64d0:	bf02      	ittt	eq
   b64d2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b64d6:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b64da:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b64dc:	68a3      	ldr	r3, [r4, #8]
   b64de:	464a      	mov	r2, r9
   b64e0:	6818      	ldr	r0, [r3, #0]
   b64e2:	f000 ff70 	bl	b73c6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b64e6:	2800      	cmp	r0, #0
   b64e8:	d0bc      	beq.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b64ea:	f44f 7600 	mov.w	r6, #512	; 0x200
   b64ee:	e7ad      	b.n	b644c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b64f0:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b64f2:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b64f4:	42b2      	cmp	r2, r6
   b64f6:	d204      	bcs.n	b6502 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b64f8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b64fa:	f043 0304 	orr.w	r3, r3, #4
   b64fe:	70a3      	strb	r3, [r4, #2]
   b6500:	e003      	b.n	b650a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6502:	4a08      	ldr	r2, [pc, #32]	; (b6524 <_ZN7FatFile5writeEPKvj+0x188>)
   b6504:	6812      	ldr	r2, [r2, #0]
   b6506:	2a00      	cmp	r2, #0
   b6508:	d1f7      	bne.n	b64fa <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b650a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b650e:	2b00      	cmp	r3, #0
   b6510:	db02      	blt.n	b6518 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6512:	4638      	mov	r0, r7
}
   b6514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6518:	4620      	mov	r0, r4
   b651a:	f7ff feb5 	bl	b6288 <_ZN7FatFile4syncEv>
   b651e:	2800      	cmp	r0, #0
   b6520:	d1f7      	bne.n	b6512 <_ZN7FatFile5writeEPKvj+0x176>
   b6522:	e79f      	b.n	b6464 <_ZN7FatFile5writeEPKvj+0xc8>
   b6524:	2003e610 	.word	0x2003e610

000b6528 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6528:	2904      	cmp	r1, #4
   b652a:	d804      	bhi.n	b6536 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b652c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6530:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6534:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6536:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6538:	bf9b      	ittet	ls
   b653a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b653e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6542:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6544:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6546:	bf84      	itt	hi
   b6548:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b654c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b654e:	4770      	bx	lr

000b6550 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6550:	1e41      	subs	r1, r0, #1
   b6552:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6556:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6558:	0842      	lsrs	r2, r0, #1
   b655a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b655e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6562:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6566:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6568:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b656a:	d1f5      	bne.n	b6558 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b656c:	4770      	bx	lr

000b656e <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b656e:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6570:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6572:	4604      	mov	r4, r0
   b6574:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6576:	b923      	cbnz	r3, b6582 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b657c:	6889      	ldr	r1, [r1, #8]
   b657e:	f7ff bcb3 	b.w	b5ee8 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6582:	2224      	movs	r2, #36	; 0x24
   b6584:	2100      	movs	r1, #0
   b6586:	f00b fe49 	bl	c221c <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b658a:	2310      	movs	r3, #16
  m_flags = F_READ;
   b658c:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b658e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6590:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6592:	68ab      	ldr	r3, [r5, #8]
   b6594:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6596:	68eb      	ldr	r3, [r5, #12]
   b6598:	6223      	str	r3, [r4, #32]
}
   b659a:	bd38      	pop	{r3, r4, r5, pc}

000b659c <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65a0:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b65a2:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b65a4:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b65a8:	4606      	mov	r6, r0
   b65aa:	460f      	mov	r7, r1
   b65ac:	4690      	mov	r8, r2
   b65ae:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b65b2:	2b00      	cmp	r3, #0
   b65b4:	d05d      	beq.n	b6672 <_ZN7FatFile7getNameEPcj+0xd6>
   b65b6:	2a0c      	cmp	r2, #12
   b65b8:	d95b      	bls.n	b6672 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b65ba:	78c3      	ldrb	r3, [r0, #3]
   b65bc:	b933      	cbnz	r3, b65cc <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b65be:	f000 fb57 	bl	b6c70 <_ZN7FatFile6getSFNEPc>
   b65c2:	4604      	mov	r4, r0
}
   b65c4:	4620      	mov	r0, r4
   b65c6:	b00d      	add	sp, #52	; 0x34
   b65c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b65cc:	4601      	mov	r1, r0
   b65ce:	a803      	add	r0, sp, #12
   b65d0:	f7ff ffcd 	bl	b656e <_ZN7FatFile11openClusterEPS_>
   b65d4:	2800      	cmp	r0, #0
   b65d6:	d04c      	beq.n	b6672 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b65d8:	eb07 0308 	add.w	r3, r7, r8
   b65dc:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b65e0:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b65e4:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b65e6:	78f3      	ldrb	r3, [r6, #3]
   b65e8:	fa5f f58b 	uxtb.w	r5, fp
   b65ec:	42ab      	cmp	r3, r5
   b65ee:	d340      	bcc.n	b6672 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b65f0:	88b1      	ldrh	r1, [r6, #4]
   b65f2:	eba1 010b 	sub.w	r1, r1, fp
   b65f6:	0149      	lsls	r1, r1, #5
   b65f8:	a803      	add	r0, sp, #12
   b65fa:	f7ff fd5b 	bl	b60b4 <_ZN7FatFile7seekSetEm>
   b65fe:	4604      	mov	r4, r0
   b6600:	2800      	cmp	r0, #0
   b6602:	d036      	beq.n	b6672 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6604:	2100      	movs	r1, #0
   b6606:	a803      	add	r0, sp, #12
   b6608:	f7ff fd35 	bl	b6076 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b660c:	4603      	mov	r3, r0
   b660e:	b380      	cbz	r0, b6672 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b6610:	7ac2      	ldrb	r2, [r0, #11]
   b6612:	2a0f      	cmp	r2, #15
   b6614:	d12d      	bne.n	b6672 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b6616:	7802      	ldrb	r2, [r0, #0]
   b6618:	f002 021f 	and.w	r2, r2, #31
   b661c:	42aa      	cmp	r2, r5
   b661e:	d128      	bne.n	b6672 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6620:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b6624:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b6628:	197a      	adds	r2, r7, r5
   b662a:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b662c:	4618      	mov	r0, r3
   b662e:	9101      	str	r1, [sp, #4]
   b6630:	f7ff ff7a 	bl	b6528 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6634:	b168      	cbz	r0, b6652 <_ZN7FatFile7getNameEPcj+0xb6>
   b6636:	45a8      	cmp	r8, r5
   b6638:	d912      	bls.n	b6660 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b663a:	9901      	ldr	r1, [sp, #4]
   b663c:	3101      	adds	r1, #1
   b663e:	287f      	cmp	r0, #127	; 0x7f
   b6640:	b2c9      	uxtb	r1, r1
   b6642:	bf28      	it	cs
   b6644:	203f      	movcs	r0, #63	; 0x3f
   b6646:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b6648:	f802 0b01 	strb.w	r0, [r2], #1
   b664c:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6650:	d1ec      	bne.n	b662c <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6652:	45a8      	cmp	r8, r5
   b6654:	d904      	bls.n	b6660 <_ZN7FatFile7getNameEPcj+0xc4>
   b6656:	781a      	ldrb	r2, [r3, #0]
   b6658:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b665a:	bf48      	it	mi
   b665c:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6660:	9a00      	ldr	r2, [sp, #0]
   b6662:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6666:	781b      	ldrb	r3, [r3, #0]
   b6668:	065b      	lsls	r3, r3, #25
   b666a:	f10b 0b01 	add.w	fp, fp, #1
   b666e:	d5ba      	bpl.n	b65e6 <_ZN7FatFile7getNameEPcj+0x4a>
   b6670:	e7a8      	b.n	b65c4 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6672:	2400      	movs	r4, #0
   b6674:	703c      	strb	r4, [r7, #0]
  return false;
   b6676:	e7a5      	b.n	b65c4 <_ZN7FatFile7getNameEPcj+0x28>

000b6678 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b667c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b667e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6682:	2b20      	cmp	r3, #32
   b6684:	d0fa      	beq.n	b667c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6686:	4d6a      	ldr	r5, [pc, #424]	; (b6830 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6688:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b668a:	2400      	movs	r4, #0
    c = path[len];
   b668c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b668e:	b1c3      	cbz	r3, b66c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6690:	2b2f      	cmp	r3, #47	; 0x2f
   b6692:	d016      	beq.n	b66c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6694:	2b5c      	cmp	r3, #92	; 0x5c
   b6696:	d102      	bne.n	b669e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6698:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b669e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b66a2:	b2c0      	uxtb	r0, r0
   b66a4:	281d      	cmp	r0, #29
   b66a6:	d803      	bhi.n	b66b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b66a8:	fa25 f000 	lsr.w	r0, r5, r0
   b66ac:	07c0      	lsls	r0, r0, #31
   b66ae:	d4f3      	bmi.n	b6698 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b66b0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b66b4:	283c      	cmp	r0, #60	; 0x3c
   b66b6:	d0ef      	beq.n	b6698 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b66b8:	3b20      	subs	r3, #32
   b66ba:	2b5e      	cmp	r3, #94	; 0x5e
   b66bc:	d8ec      	bhi.n	b6698 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b66be:	3401      	adds	r4, #1
    c = path[len];
   b66c0:	e7e4      	b.n	b668c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b66c2:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b66c4:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b66c6:	4607      	mov	r7, r0
   b66c8:	f810 5b01 	ldrb.w	r5, [r0], #1
   b66cc:	2d20      	cmp	r5, #32
   b66ce:	d0fa      	beq.n	b66c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b66d0:	2d2f      	cmp	r5, #47	; 0x2f
   b66d2:	d0f8      	beq.n	b66c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b66d4:	6017      	str	r7, [r2, #0]
  while (len) {
   b66d6:	b14c      	cbz	r4, b66ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b66d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b66dc:	2a2e      	cmp	r2, #46	; 0x2e
   b66de:	d001      	beq.n	b66e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b66e0:	2a20      	cmp	r2, #32
   b66e2:	d101      	bne.n	b66e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b66e4:	3c01      	subs	r4, #1
  while (len) {
   b66e6:	e7f6      	b.n	b66d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b66e8:	2cff      	cmp	r4, #255	; 0xff
   b66ea:	dcd5      	bgt.n	b6698 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b66ec:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b66f0:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b66f4:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b66f6:	f8c1 300d 	str.w	r3, [r1, #13]
   b66fa:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b66fc:	f04f 0800 	mov.w	r8, #0
   b6700:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6704:	2b2e      	cmp	r3, #46	; 0x2e
   b6706:	d001      	beq.n	b670c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6708:	2b20      	cmp	r3, #32
   b670a:	d102      	bne.n	b6712 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b670c:	f108 0801 	add.w	r8, r8, #1
   b6710:	e7f6      	b.n	b6700 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6712:	fab8 f088 	clz	r0, r8
   b6716:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6718:	1e65      	subs	r5, r4, #1
   b671a:	1c6b      	adds	r3, r5, #1
   b671c:	d002      	beq.n	b6724 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b671e:	5d73      	ldrb	r3, [r6, r5]
   b6720:	2b2e      	cmp	r3, #46	; 0x2e
   b6722:	d114      	bne.n	b674e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6724:	f04f 0900 	mov.w	r9, #0
   b6728:	2707      	movs	r7, #7
   b672a:	464a      	mov	r2, r9
   b672c:	46ca      	mov	sl, r9
   b672e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6732:	45a0      	cmp	r8, r4
   b6734:	da68      	bge.n	b6808 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6736:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b673a:	2b20      	cmp	r3, #32
   b673c:	d003      	beq.n	b6746 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b673e:	2b2e      	cmp	r3, #46	; 0x2e
   b6740:	d107      	bne.n	b6752 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6742:	45a8      	cmp	r8, r5
   b6744:	d012      	beq.n	b676c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6746:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6748:	f108 0801 	add.w	r8, r8, #1
   b674c:	e7f1      	b.n	b6732 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b674e:	3d01      	subs	r5, #1
   b6750:	e7e3      	b.n	b671a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6752:	2b22      	cmp	r3, #34	; 0x22
   b6754:	d008      	beq.n	b6768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6756:	2b7c      	cmp	r3, #124	; 0x7c
   b6758:	d006      	beq.n	b6768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b675a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b675e:	f1bc 0f05 	cmp.w	ip, #5
   b6762:	d80a      	bhi.n	b677a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6764:	2b2d      	cmp	r3, #45	; 0x2d
   b6766:	d012      	beq.n	b678e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6768:	45a8      	cmp	r8, r5
   b676a:	d15b      	bne.n	b6824 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b676c:	2f0a      	cmp	r7, #10
   b676e:	d04a      	beq.n	b6806 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6770:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6772:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6774:	f04f 0e10 	mov.w	lr, #16
   b6778:	e7e6      	b.n	b6748 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b677a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b677e:	f1bc 0f05 	cmp.w	ip, #5
   b6782:	d9f1      	bls.n	b6768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6784:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6788:	f1bc 0f02 	cmp.w	ip, #2
   b678c:	d9ec      	bls.n	b6768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b678e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6792:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6796:	d8e7      	bhi.n	b6768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6798:	45a8      	cmp	r8, r5
   b679a:	d0e7      	beq.n	b676c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b679c:	42ba      	cmp	r2, r7
   b679e:	d830      	bhi.n	b6802 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b67a0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b67a4:	f1bc 0f19 	cmp.w	ip, #25
   b67a8:	d81a      	bhi.n	b67e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b67aa:	3b20      	subs	r3, #32
        lc |= bit;
   b67ac:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b67b0:	b2db      	uxtb	r3, r3
        lc |= bit;
   b67b2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b67b6:	f102 0c01 	add.w	ip, r2, #1
   b67ba:	fa5f fc8c 	uxtb.w	ip, ip
   b67be:	440a      	add	r2, r1
      if (i < 7) {
   b67c0:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b67c4:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b67c6:	d801      	bhi.n	b67cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b67c8:	f881 c00c 	strb.w	ip, [r1, #12]
   b67cc:	4662      	mov	r2, ip
   b67ce:	e7bb      	b.n	b6748 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b67d0:	45a8      	cmp	r8, r5
   b67d2:	dc18      	bgt.n	b6806 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b67d4:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b67d6:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b67d8:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b67da:	f04f 0e10 	mov.w	lr, #16
   b67de:	e7b2      	b.n	b6746 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b67e0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b67e4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b67e8:	bf98      	it	ls
   b67ea:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b67ee:	e7e2      	b.n	b67b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b67f0:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b67f2:	2001      	movs	r0, #1
   b67f4:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b67f6:	4419      	add	r1, r3
   b67f8:	237e      	movs	r3, #126	; 0x7e
   b67fa:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b67fc:	2331      	movs	r3, #49	; 0x31
   b67fe:	738b      	strb	r3, [r1, #14]
   b6800:	e74b      	b.n	b669a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6802:	2f0a      	cmp	r7, #10
   b6804:	d1e4      	bne.n	b67d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6806:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6808:	7b4b      	ldrb	r3, [r1, #13]
   b680a:	2b20      	cmp	r3, #32
   b680c:	f43f af44 	beq.w	b6698 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6810:	2800      	cmp	r0, #0
   b6812:	d0ed      	beq.n	b67f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6814:	ea1a 0f09 	tst.w	sl, r9
   b6818:	bf18      	it	ne
   b681a:	f04f 0902 	movne.w	r9, #2
   b681e:	f881 9000 	strb.w	r9, [r1]
   b6822:	e73a      	b.n	b669a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6824:	42ba      	cmp	r2, r7
   b6826:	d8ec      	bhi.n	b6802 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6828:	2000      	movs	r0, #0
      c = '_';
   b682a:	235f      	movs	r3, #95	; 0x5f
   b682c:	e7c3      	b.n	b67b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b682e:	bf00      	nop
   b6830:	31000101 	.word	0x31000101

000b6834 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6838:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b683c:	4606      	mov	r6, r0
   b683e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6840:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6842:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6844:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6848:	6861      	ldr	r1, [r4, #4]
   b684a:	68a2      	ldr	r2, [r4, #8]
   b684c:	186b      	adds	r3, r5, r1
   b684e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6850:	4411      	add	r1, r2
   b6852:	4291      	cmp	r1, r2
   b6854:	d006      	beq.n	b6864 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6856:	f812 0b01 	ldrb.w	r0, [r2], #1
   b685a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b685e:	4043      	eors	r3, r0
   b6860:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6862:	e7f6      	b.n	b6852 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6864:	f1b9 0f03 	cmp.w	r9, #3
   b6868:	bf28      	it	cs
   b686a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b686e:	f109 0204 	add.w	r2, r9, #4
   b6872:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6874:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6878:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b687a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b687c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b687e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6880:	bf94      	ite	ls
   b6882:	3130      	addls	r1, #48	; 0x30
   b6884:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6886:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6888:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b688a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b688e:	d1f1      	bne.n	b6874 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6890:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6894:	2100      	movs	r1, #0
   b6896:	735f      	strb	r7, [r3, #13]
   b6898:	4630      	mov	r0, r6
   b689a:	f7ff fc0b 	bl	b60b4 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b689e:	2101      	movs	r1, #1
   b68a0:	4630      	mov	r0, r6
   b68a2:	f7ff fbe8 	bl	b6076 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b68a6:	4601      	mov	r1, r0
   b68a8:	b928      	cbnz	r0, b68b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b68aa:	7870      	ldrb	r0, [r6, #1]
   b68ac:	fab0 f080 	clz	r0, r0
   b68b0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b68b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b68b6:	7803      	ldrb	r3, [r0, #0]
   b68b8:	b16b      	cbz	r3, b68d6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b68ba:	7ac3      	ldrb	r3, [r0, #11]
   b68bc:	071b      	lsls	r3, r3, #28
   b68be:	d4ee      	bmi.n	b689e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b68c0:	220b      	movs	r2, #11
   b68c2:	4640      	mov	r0, r8
   b68c4:	f00b fc72 	bl	c21ac <memcmp>
   b68c8:	2800      	cmp	r0, #0
   b68ca:	d1e8      	bne.n	b689e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b68cc:	3501      	adds	r5, #1
   b68ce:	b2ad      	uxth	r5, r5
   b68d0:	2d64      	cmp	r5, #100	; 0x64
   b68d2:	d1b9      	bne.n	b6848 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b68d4:	e7ed      	b.n	b68b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b68d6:	2001      	movs	r0, #1
   b68d8:	e7eb      	b.n	b68b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b68dc <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b68dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68e0:	ed2d 8b02 	vpush	{d8}
   b68e4:	b08b      	sub	sp, #44	; 0x2c
   b68e6:	460d      	mov	r5, r1
   b68e8:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b68ea:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b68ec:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b68ee:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b68f2:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b68f4:	d105      	bne.n	b6902 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b68f6:	2000      	movs	r0, #0
}
   b68f8:	b00b      	add	sp, #44	; 0x2c
   b68fa:	ecbd 8b02 	vpop	{d8}
   b68fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6902:	9b07      	ldr	r3, [sp, #28]
   b6904:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6906:	2b00      	cmp	r3, #0
   b6908:	d1f5      	bne.n	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b690a:	6853      	ldr	r3, [r2, #4]
   b690c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b690e:	7813      	ldrb	r3, [r2, #0]
   b6910:	079c      	lsls	r4, r3, #30
   b6912:	bf1f      	itttt	ne
   b6914:	9b05      	ldrne	r3, [sp, #20]
   b6916:	330c      	addne	r3, #12
   b6918:	220d      	movne	r2, #13
   b691a:	fbb3 f3f2 	udivne	r3, r3, r2
   b691e:	bf1a      	itte	ne
   b6920:	3301      	addne	r3, #1
   b6922:	b2db      	uxtbne	r3, r3
   b6924:	2301      	moveq	r3, #1
    seekSet(0);
   b6926:	2100      	movs	r1, #0
   b6928:	4628      	mov	r0, r5
   b692a:	9303      	str	r3, [sp, #12]
   b692c:	f7ff fbc2 	bl	b60b4 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6930:	f107 030d 	add.w	r3, r7, #13
  }
   b6934:	f04f 0b00 	mov.w	fp, #0
   b6938:	ee08 3a10 	vmov	s16, r3
   b693c:	46da      	mov	sl, fp
   b693e:	465c      	mov	r4, fp
   b6940:	465e      	mov	r6, fp
   b6942:	f8cd b010 	str.w	fp, [sp, #16]
   b6946:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6948:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b694a:	2101      	movs	r1, #1
   b694c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b694e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6952:	f7ff fb90 	bl	b6076 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6956:	4603      	mov	r3, r0
   b6958:	2800      	cmp	r0, #0
   b695a:	d171      	bne.n	b6a40 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b695c:	786b      	ldrb	r3, [r5, #1]
   b695e:	2b00      	cmp	r3, #0
   b6960:	d1c9      	bne.n	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6962:	9b06      	ldr	r3, [sp, #24]
   b6964:	059a      	lsls	r2, r3, #22
   b6966:	d5c6      	bpl.n	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6968:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b696c:	3b01      	subs	r3, #1
   b696e:	2b01      	cmp	r3, #1
   b6970:	d8c1      	bhi.n	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6972:	9b04      	ldr	r3, [sp, #16]
   b6974:	2c00      	cmp	r4, #0
   b6976:	bf08      	it	eq
   b6978:	4643      	moveq	r3, r8
   b697a:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b697c:	9b03      	ldr	r3, [sp, #12]
   b697e:	429c      	cmp	r4, r3
   b6980:	f0c0 80f1 	bcc.w	b6b66 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6984:	f1b9 0f00 	cmp.w	r9, #0
   b6988:	f040 810a 	bne.w	b6ba0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b698c:	9b04      	ldr	r3, [sp, #16]
   b698e:	4628      	mov	r0, r5
   b6990:	0159      	lsls	r1, r3, #5
   b6992:	f7ff fb8f 	bl	b60b4 <_ZN7FatFile7seekSetEm>
   b6996:	2800      	cmp	r0, #0
   b6998:	d0ad      	beq.n	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b699a:	9b03      	ldr	r3, [sp, #12]
   b699c:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b69a0:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b69a4:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b69a6:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b69aa:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b69ae:	2e00      	cmp	r6, #0
   b69b0:	f000 810d 	beq.w	b6bce <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b69b4:	2100      	movs	r1, #0
   b69b6:	4628      	mov	r0, r5
   b69b8:	f7ff fb5d 	bl	b6076 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b69bc:	4604      	mov	r4, r0
   b69be:	2800      	cmp	r0, #0
   b69c0:	d099      	beq.n	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b69c2:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b69c4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b69c8:	454e      	cmp	r6, r9
   b69ca:	f043 0301 	orr.w	r3, r3, #1
   b69ce:	bf0c      	ite	eq
   b69d0:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b69d4:	46b3      	movne	fp, r6
   b69d6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b69da:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b69de:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b69e2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b69e6:	f107 000d 	add.w	r0, r7, #13
   b69ea:	f7ff fdb1 	bl	b6550 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b69ee:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b69f2:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b69f4:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b69f8:	f00b 031f 	and.w	r3, fp, #31
   b69fc:	220d      	movs	r2, #13
   b69fe:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6a00:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6a04:	4353      	muls	r3, r2
   b6a06:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6a08:	9905      	ldr	r1, [sp, #20]
   b6a0a:	4299      	cmp	r1, r3
   b6a0c:	f240 80d0 	bls.w	b6bb0 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6a10:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6a14:	2a04      	cmp	r2, #4
   b6a16:	fa5f fe82 	uxtb.w	lr, r2
   b6a1a:	f102 0001 	add.w	r0, r2, #1
   b6a1e:	f200 80cd 	bhi.w	b6bbc <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6a22:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6a26:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6a2a:	280d      	cmp	r0, #13
   b6a2c:	f103 0301 	add.w	r3, r3, #1
   b6a30:	4602      	mov	r2, r0
   b6a32:	d1e9      	bne.n	b6a08 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6a34:	3e01      	subs	r6, #1
   b6a36:	b2f6      	uxtb	r6, r6
   b6a38:	e7b9      	b.n	b69ae <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6a3a:	f04f 0901 	mov.w	r9, #1
   b6a3e:	e783      	b.n	b6948 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6a40:	7802      	ldrb	r2, [r0, #0]
   b6a42:	2ae5      	cmp	r2, #229	; 0xe5
   b6a44:	d000      	beq.n	b6a48 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6a46:	b97a      	cbnz	r2, b6a68 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6a48:	9904      	ldr	r1, [sp, #16]
   b6a4a:	2c00      	cmp	r4, #0
   b6a4c:	bf08      	it	eq
   b6a4e:	4641      	moveq	r1, r8
   b6a50:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6a52:	9903      	ldr	r1, [sp, #12]
   b6a54:	428c      	cmp	r4, r1
        freeFound++;
   b6a56:	bf3c      	itt	cc
   b6a58:	3401      	addcc	r4, #1
   b6a5a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6a5c:	2a00      	cmp	r2, #0
   b6a5e:	d080      	beq.n	b6962 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6a60:	2ae5      	cmp	r2, #229	; 0xe5
   b6a62:	d105      	bne.n	b6a70 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6a64:	2600      	movs	r6, #0
   b6a66:	e76f      	b.n	b6948 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6a68:	9903      	ldr	r1, [sp, #12]
   b6a6a:	428c      	cmp	r4, r1
   b6a6c:	bf38      	it	cc
   b6a6e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6a70:	2a2e      	cmp	r2, #46	; 0x2e
   b6a72:	d0f7      	beq.n	b6a64 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6a74:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6a76:	290f      	cmp	r1, #15
   b6a78:	d14a      	bne.n	b6b10 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6a7a:	bb16      	cbnz	r6, b6ac2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6a7c:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6a80:	f43f af62 	beq.w	b6948 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6a84:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6a88:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6a8c:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6a8e:	220d      	movs	r2, #13
   b6a90:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6a94:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6a98:	9a05      	ldr	r2, [sp, #20]
   b6a9a:	4542      	cmp	r2, r8
   b6a9c:	d9e2      	bls.n	b6a64 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6a9e:	eba2 0208 	sub.w	r2, r2, r8
   b6aa2:	9208      	str	r2, [sp, #32]
   b6aa4:	2200      	movs	r2, #0
   b6aa6:	eb02 0108 	add.w	r1, r2, r8
   b6aaa:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6aac:	4618      	mov	r0, r3
   b6aae:	b2d1      	uxtb	r1, r2
   b6ab0:	f7ff fd3a 	bl	b6528 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6ab4:	9908      	ldr	r1, [sp, #32]
   b6ab6:	428a      	cmp	r2, r1
   b6ab8:	d10d      	bne.n	b6ad6 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6aba:	2800      	cmp	r0, #0
   b6abc:	bf18      	it	ne
   b6abe:	2600      	movne	r6, #0
   b6ac0:	e742      	b.n	b6948 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6ac2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6ac6:	fa5f fa8a 	uxtb.w	sl, sl
   b6aca:	4552      	cmp	r2, sl
   b6acc:	d1ca      	bne.n	b6a64 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6ace:	7b5a      	ldrb	r2, [r3, #13]
   b6ad0:	455a      	cmp	r2, fp
   b6ad2:	d0dc      	beq.n	b6a8e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6ad4:	e7c6      	b.n	b6a64 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6ad6:	28ff      	cmp	r0, #255	; 0xff
   b6ad8:	d8c4      	bhi.n	b6a64 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6ada:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6ade:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6ae2:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6ae4:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6ae6:	bf9c      	itt	ls
   b6ae8:	f10e 0020 	addls.w	r0, lr, #32
   b6aec:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6af0:	4608      	mov	r0, r1
   b6af2:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6af4:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6af6:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6afa:	f1bc 0f19 	cmp.w	ip, #25
   b6afe:	bf9c      	itt	ls
   b6b00:	3120      	addls	r1, #32
   b6b02:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6b04:	4571      	cmp	r1, lr
   b6b06:	d1ad      	bne.n	b6a64 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6b08:	3201      	adds	r2, #1
   b6b0a:	2a0d      	cmp	r2, #13
   b6b0c:	d1cb      	bne.n	b6aa6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6b0e:	e71b      	b.n	b6948 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6b10:	0708      	lsls	r0, r1, #28
   b6b12:	d4a7      	bmi.n	b6a64 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6b14:	b15e      	cbz	r6, b6b2e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6b16:	f1ba 0f01 	cmp.w	sl, #1
   b6b1a:	f47f aeec 	bne.w	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6b1e:	4618      	mov	r0, r3
   b6b20:	f7ff fd16 	bl	b6550 <_ZN7FatFile11lfnChecksumEPh>
   b6b24:	4558      	cmp	r0, fp
   b6b26:	f47f aee6 	bne.w	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6b2a:	46b1      	mov	r9, r6
   b6b2c:	e00e      	b.n	b6b4c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6b2e:	ee18 1a10 	vmov	r1, s16
   b6b32:	220b      	movs	r2, #11
   b6b34:	4618      	mov	r0, r3
   b6b36:	f00b fb39 	bl	c21ac <memcmp>
   b6b3a:	2800      	cmp	r0, #0
   b6b3c:	f47f af04 	bne.w	b6948 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6b40:	f897 9000 	ldrb.w	r9, [r7]
   b6b44:	f019 0901 	ands.w	r9, r9, #1
   b6b48:	f47f af77 	bne.w	b6a3a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6b4c:	9b06      	ldr	r3, [sp, #24]
   b6b4e:	0519      	lsls	r1, r3, #20
   b6b50:	f53f aed1 	bmi.w	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6b54:	9b06      	ldr	r3, [sp, #24]
   b6b56:	9807      	ldr	r0, [sp, #28]
   b6b58:	f8cd 9000 	str.w	r9, [sp]
   b6b5c:	4642      	mov	r2, r8
   b6b5e:	4629      	mov	r1, r5
   b6b60:	f7ff faeb 	bl	b613a <_ZN7FatFile15openCachedEntryEPS_tih>
   b6b64:	e6c8      	b.n	b68f8 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6b66:	2100      	movs	r1, #0
   b6b68:	4628      	mov	r0, r5
   b6b6a:	f7ff fa84 	bl	b6076 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6b6e:	b9a0      	cbnz	r0, b6b9a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6b70:	786b      	ldrb	r3, [r5, #1]
   b6b72:	2b00      	cmp	r3, #0
   b6b74:	f47f aebf 	bne.w	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6b78:	4628      	mov	r0, r5
   b6b7a:	f7ff f93d 	bl	b5df8 <_ZN7FatFile13addDirClusterEv>
   b6b7e:	2800      	cmp	r0, #0
   b6b80:	f43f aeb9 	beq.w	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6b84:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6b86:	791b      	ldrb	r3, [r3, #4]
   b6b88:	2b01      	cmp	r3, #1
   b6b8a:	f63f aefb 	bhi.w	b6984 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6b8e:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6b90:	3410      	adds	r4, #16
   b6b92:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6b94:	42a3      	cmp	r3, r4
   b6b96:	d8ef      	bhi.n	b6b78 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6b98:	e6f4      	b.n	b6984 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6b9a:	3401      	adds	r4, #1
   b6b9c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6b9e:	e6ed      	b.n	b697c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6ba0:	4639      	mov	r1, r7
   b6ba2:	4628      	mov	r0, r5
   b6ba4:	f7ff fe46 	bl	b6834 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6ba8:	2800      	cmp	r0, #0
   b6baa:	f47f aeef 	bne.w	b698c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6bae:	e6a2      	b.n	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6bb0:	bf14      	ite	ne
   b6bb2:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6bb6:	2100      	moveq	r1, #0
   b6bb8:	b289      	uxth	r1, r1
   b6bba:	e72b      	b.n	b6a14 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6bbc:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6bc0:	bf94      	ite	ls
   b6bc2:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6bc6:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6bca:	8091      	strh	r1, [r2, #4]
   b6bcc:	e72d      	b.n	b6a2a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6bce:	4631      	mov	r1, r6
   b6bd0:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6bd2:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6bd6:	f7ff fa4e 	bl	b6076 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6bda:	4604      	mov	r4, r0
   b6bdc:	2800      	cmp	r0, #0
   b6bde:	f43f ae8a 	beq.w	b68f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6be2:	2220      	movs	r2, #32
   b6be4:	4631      	mov	r1, r6
   b6be6:	f00b fb19 	bl	c221c <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6bea:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6bee:	6023      	str	r3, [r4, #0]
   b6bf0:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6bf4:	6063      	str	r3, [r4, #4]
   b6bf6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6bfa:	8123      	strh	r3, [r4, #8]
   b6bfc:	7dfb      	ldrb	r3, [r7, #23]
   b6bfe:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6c00:	783b      	ldrb	r3, [r7, #0]
   b6c02:	f003 0318 	and.w	r3, r3, #24
   b6c06:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6c08:	4b0f      	ldr	r3, [pc, #60]	; (b6c48 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6c0a:	681b      	ldr	r3, [r3, #0]
   b6c0c:	b19b      	cbz	r3, b6c36 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6c0e:	f104 010e 	add.w	r1, r4, #14
   b6c12:	f104 0010 	add.w	r0, r4, #16
   b6c16:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6c18:	8a23      	ldrh	r3, [r4, #16]
   b6c1a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6c1c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6c1e:	89e3      	ldrh	r3, [r4, #14]
   b6c20:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6c22:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6c24:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6c28:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6c2c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6c30:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b6c34:	e78e      	b.n	b6b54 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6c36:	2321      	movs	r3, #33	; 0x21
   b6c38:	7423      	strb	r3, [r4, #16]
   b6c3a:	2328      	movs	r3, #40	; 0x28
   b6c3c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6c3e:	2308      	movs	r3, #8
   b6c40:	73a6      	strb	r6, [r4, #14]
   b6c42:	73e3      	strb	r3, [r4, #15]
   b6c44:	e7e8      	b.n	b6c18 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6c46:	bf00      	nop
   b6c48:	2003e610 	.word	0x2003e610

000b6c4c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6c4c:	b513      	push	{r0, r1, r4, lr}
   b6c4e:	4604      	mov	r4, r0
    }
   b6c50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6c52:	b159      	cbz	r1, b6c6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6c54:	9101      	str	r1, [sp, #4]
   b6c56:	f00b fb6c 	bl	c2332 <strlen>
   b6c5a:	6823      	ldr	r3, [r4, #0]
   b6c5c:	9901      	ldr	r1, [sp, #4]
   b6c5e:	68db      	ldr	r3, [r3, #12]
   b6c60:	4602      	mov	r2, r0
   b6c62:	4620      	mov	r0, r4
    }
   b6c64:	b002      	add	sp, #8
   b6c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6c6a:	4718      	bx	r3
    }
   b6c6c:	b002      	add	sp, #8
   b6c6e:	bd10      	pop	{r4, pc}

000b6c70 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b6c70:	b510      	push	{r4, lr}
   b6c72:	460c      	mov	r4, r1
    return m_attr;
   b6c74:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b6c76:	b909      	cbnz	r1, b6c7c <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b6c78:	2000      	movs	r0, #0
}
   b6c7a:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b6c7c:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b6c80:	d005      	beq.n	b6c8e <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b6c82:	232f      	movs	r3, #47	; 0x2f
   b6c84:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b6c86:	2300      	movs	r3, #0
   b6c88:	7063      	strb	r3, [r4, #1]
  return true;
   b6c8a:	2001      	movs	r0, #1
   b6c8c:	e7f5      	b.n	b6c7a <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b6c8e:	f7ff f8f1 	bl	b5e74 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6c92:	2800      	cmp	r0, #0
   b6c94:	d0f0      	beq.n	b6c78 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b6c96:	4621      	mov	r1, r4
   b6c98:	f7ff f8fb 	bl	b5e92 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b6c9c:	e7f5      	b.n	b6c8a <_ZN7FatFile6getSFNEPc+0x1a>

000b6c9e <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6c9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6ca0:	7803      	ldrb	r3, [r0, #0]
   b6ca2:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6ca4:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6ca6:	d520      	bpl.n	b6cea <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b6ca8:	6843      	ldr	r3, [r0, #4]
   b6caa:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6cac:	f100 020c 	add.w	r2, r0, #12
   b6cb0:	6818      	ldr	r0, [r3, #0]
   b6cb2:	9201      	str	r2, [sp, #4]
   b6cb4:	f000 fb87 	bl	b73c6 <_ZN9SdSpiCard10writeBlockEmPKh>
   b6cb8:	9a01      	ldr	r2, [sp, #4]
   b6cba:	4605      	mov	r5, r0
   b6cbc:	b918      	cbnz	r0, b6cc6 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6cbe:	2500      	movs	r5, #0
}
   b6cc0:	4628      	mov	r0, r5
   b6cc2:	b003      	add	sp, #12
   b6cc4:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6cc6:	7823      	ldrb	r3, [r4, #0]
   b6cc8:	079b      	lsls	r3, r3, #30
   b6cca:	d404      	bmi.n	b6cd6 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6ccc:	7823      	ldrb	r3, [r4, #0]
   b6cce:	f023 0301 	bic.w	r3, r3, #1
   b6cd2:	7023      	strb	r3, [r4, #0]
   b6cd4:	e7f4      	b.n	b6cc0 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6cd6:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6cda:	6919      	ldr	r1, [r3, #16]
   b6cdc:	4401      	add	r1, r0
   b6cde:	6818      	ldr	r0, [r3, #0]
   b6ce0:	f000 fb71 	bl	b73c6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6ce4:	2800      	cmp	r0, #0
   b6ce6:	d1f1      	bne.n	b6ccc <_ZN8FatCache4syncEv+0x2e>
   b6ce8:	e7e9      	b.n	b6cbe <_ZN8FatCache4syncEv+0x20>
  return true;
   b6cea:	2501      	movs	r5, #1
   b6cec:	e7e8      	b.n	b6cc0 <_ZN8FatCache4syncEv+0x22>

000b6cee <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6cee:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6cf0:	6883      	ldr	r3, [r0, #8]
   b6cf2:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6cf4:	4604      	mov	r4, r0
   b6cf6:	460e      	mov	r6, r1
   b6cf8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6cfa:	d009      	beq.n	b6d10 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6cfc:	f7ff ffcf 	bl	b6c9e <_ZN8FatCache4syncEv>
   b6d00:	b908      	cbnz	r0, b6d06 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6d02:	2000      	movs	r0, #0
}
   b6d04:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6d06:	076b      	lsls	r3, r5, #29
   b6d08:	d50a      	bpl.n	b6d20 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6d0a:	2300      	movs	r3, #0
   b6d0c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6d0e:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6d10:	7822      	ldrb	r2, [r4, #0]
   b6d12:	f005 0503 	and.w	r5, r5, #3
   b6d16:	4620      	mov	r0, r4
   b6d18:	4315      	orrs	r5, r2
   b6d1a:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6d1e:	e7f1      	b.n	b6d04 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6d20:	6863      	ldr	r3, [r4, #4]
   b6d22:	f104 020c 	add.w	r2, r4, #12
   b6d26:	6818      	ldr	r0, [r3, #0]
   b6d28:	4631      	mov	r1, r6
   b6d2a:	f000 fac3 	bl	b72b4 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6d2e:	2800      	cmp	r0, #0
   b6d30:	d1eb      	bne.n	b6d0a <_ZN8FatCache4readEmh+0x1c>
   b6d32:	e7e6      	b.n	b6d02 <_ZN8FatCache4readEmh+0x14>

000b6d34 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6d34:	7983      	ldrb	r3, [r0, #6]
   b6d36:	6940      	ldr	r0, [r0, #20]
   b6d38:	3902      	subs	r1, #2
   b6d3a:	4099      	lsls	r1, r3
}
   b6d3c:	4408      	add	r0, r1
   b6d3e:	4770      	bx	lr

000b6d40 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6d40:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6d42:	b570      	push	{r4, r5, r6, lr}
   b6d44:	4605      	mov	r5, r0
   b6d46:	460c      	mov	r4, r1
   b6d48:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6d4a:	d802      	bhi.n	b6d52 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6d50:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6d52:	69c3      	ldr	r3, [r0, #28]
   b6d54:	428b      	cmp	r3, r1
   b6d56:	d3f9      	bcc.n	b6d4c <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6d58:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6d5a:	2b20      	cmp	r3, #32
   b6d5c:	d116      	bne.n	b6d8c <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6d5e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6d60:	2202      	movs	r2, #2
   b6d62:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6d66:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6d6a:	f7ff ffc0 	bl	b6cee <_ZN8FatCache4readEmh>
    if (!pc) {
   b6d6e:	2800      	cmp	r0, #0
   b6d70:	d0ec      	beq.n	b6d4c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6d72:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6d76:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6d7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6d7e:	69ea      	ldr	r2, [r5, #28]
   b6d80:	429a      	cmp	r2, r3
  *value = next;
   b6d82:	bf26      	itte	cs
   b6d84:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6d86:	2001      	movcs	r0, #1
    return 0;
   b6d88:	2000      	movcc	r0, #0
   b6d8a:	e7e1      	b.n	b6d50 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6d8c:	2b10      	cmp	r3, #16
   b6d8e:	d1dd      	bne.n	b6d4c <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6d90:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6d94:	6981      	ldr	r1, [r0, #24]
   b6d96:	2202      	movs	r2, #2
   b6d98:	4419      	add	r1, r3
   b6d9a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6d9e:	f7ff ffa6 	bl	b6cee <_ZN8FatCache4readEmh>
    if (!pc) {
   b6da2:	2800      	cmp	r0, #0
   b6da4:	d0d2      	beq.n	b6d4c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6da6:	b2e4      	uxtb	r4, r4
   b6da8:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6dac:	e7e7      	b.n	b6d7e <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6dae <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6dae:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6db0:	b538      	push	{r3, r4, r5, lr}
   b6db2:	460c      	mov	r4, r1
   b6db4:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6db6:	d801      	bhi.n	b6dbc <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b6db8:	2000      	movs	r0, #0
}
   b6dba:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6dbc:	69c3      	ldr	r3, [r0, #28]
   b6dbe:	428b      	cmp	r3, r1
   b6dc0:	d3fa      	bcc.n	b6db8 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6dc2:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6dc4:	2b20      	cmp	r3, #32
   b6dc6:	d10f      	bne.n	b6de8 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b6dc8:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6dca:	2203      	movs	r2, #3
   b6dcc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6dd0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6dd4:	f7ff ff8b 	bl	b6cee <_ZN8FatCache4readEmh>
    if (!pc) {
   b6dd8:	2800      	cmp	r0, #0
   b6dda:	d0ed      	beq.n	b6db8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6ddc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6de0:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b6de4:	2001      	movs	r0, #1
   b6de6:	e7e8      	b.n	b6dba <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b6de8:	2b10      	cmp	r3, #16
   b6dea:	d1e5      	bne.n	b6db8 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6dec:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6df0:	6981      	ldr	r1, [r0, #24]
   b6df2:	2203      	movs	r2, #3
   b6df4:	4419      	add	r1, r3
   b6df6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6dfa:	f7ff ff78 	bl	b6cee <_ZN8FatCache4readEmh>
    if (!pc) {
   b6dfe:	2800      	cmp	r0, #0
   b6e00:	d0da      	beq.n	b6db8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b6e02:	b2e4      	uxtb	r4, r4
   b6e04:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b6e08:	e7ec      	b.n	b6de4 <_ZN9FatVolume6fatPutEmm+0x36>

000b6e0a <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6e0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6e0e:	68c4      	ldr	r4, [r0, #12]
   b6e10:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6e12:	4605      	mov	r5, r0
   b6e14:	460e      	mov	r6, r1
   b6e16:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6e18:	d301      	bcc.n	b6e1e <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6e1a:	2701      	movs	r7, #1
   b6e1c:	e001      	b.n	b6e22 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6e1e:	460c      	mov	r4, r1
    setStart = false;
   b6e20:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6e22:	69eb      	ldr	r3, [r5, #28]
    find++;
   b6e24:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6e26:	42a3      	cmp	r3, r4
   b6e28:	d202      	bcs.n	b6e30 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6e2a:	b9c7      	cbnz	r7, b6e5e <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6e2c:	68ec      	ldr	r4, [r5, #12]
   b6e2e:	e7f4      	b.n	b6e1a <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6e30:	42a6      	cmp	r6, r4
   b6e32:	d014      	beq.n	b6e5e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b6e34:	aa01      	add	r2, sp, #4
   b6e36:	4621      	mov	r1, r4
   b6e38:	4628      	mov	r0, r5
   b6e3a:	f7ff ff81 	bl	b6d40 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6e3e:	2800      	cmp	r0, #0
   b6e40:	db0d      	blt.n	b6e5e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6e42:	d0ee      	beq.n	b6e22 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6e44:	9b01      	ldr	r3, [sp, #4]
   b6e46:	2b00      	cmp	r3, #0
   b6e48:	d1eb      	bne.n	b6e22 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6e4a:	b107      	cbz	r7, b6e4e <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6e4c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6e4e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6e52:	4621      	mov	r1, r4
   b6e54:	4628      	mov	r0, r5
   b6e56:	f7ff ffaa 	bl	b6dae <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6e5a:	4607      	mov	r7, r0
   b6e5c:	b920      	cbnz	r0, b6e68 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6e5e:	2700      	movs	r7, #0
}
   b6e60:	4638      	mov	r0, r7
   b6e62:	b002      	add	sp, #8
   b6e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6e68:	b916      	cbnz	r6, b6e70 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6e6a:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6e6e:	e7f7      	b.n	b6e60 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6e70:	4622      	mov	r2, r4
   b6e72:	4631      	mov	r1, r6
   b6e74:	4628      	mov	r0, r5
   b6e76:	f7ff ff9a 	bl	b6dae <_ZN9FatVolume6fatPutEmm>
   b6e7a:	2800      	cmp	r0, #0
   b6e7c:	d1f5      	bne.n	b6e6a <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6e7e:	e7ee      	b.n	b6e5e <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6e80 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6e80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6e82:	4605      	mov	r5, r0
   b6e84:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6e86:	aa01      	add	r2, sp, #4
   b6e88:	4621      	mov	r1, r4
   b6e8a:	4628      	mov	r0, r5
   b6e8c:	f7ff ff58 	bl	b6d40 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6e90:	1e06      	subs	r6, r0, #0
   b6e92:	db10      	blt.n	b6eb6 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6e94:	2200      	movs	r2, #0
   b6e96:	4621      	mov	r1, r4
   b6e98:	4628      	mov	r0, r5
   b6e9a:	f7ff ff88 	bl	b6dae <_ZN9FatVolume6fatPutEmm>
   b6e9e:	b150      	cbz	r0, b6eb6 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6ea0:	68eb      	ldr	r3, [r5, #12]
   b6ea2:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6ea4:	bf24      	itt	cs
   b6ea6:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b6eaa:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6eac:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6eae:	2e00      	cmp	r6, #0
   b6eb0:	d1e9      	bne.n	b6e86 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6eb2:	b002      	add	sp, #8
   b6eb4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6eb6:	2000      	movs	r0, #0
   b6eb8:	e7fb      	b.n	b6eb2 <_ZN9FatVolume9freeChainEm+0x32>

000b6eba <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6eba:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6ebc:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6ebe:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6ec0:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b6ec6:	4604      	mov	r4, r0
  m_fatType = 0;
   b6ec8:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6eca:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6ece:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6ed0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6ed4:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b6ed6:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6eda:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6ede:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6ee2:	460d      	mov	r5, r1
   b6ee4:	b1b9      	cbz	r1, b6f16 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b6ee6:	2904      	cmp	r1, #4
   b6ee8:	d901      	bls.n	b6eee <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6eea:	2000      	movs	r0, #0
}
   b6eec:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6eee:	4611      	mov	r1, r2
   b6ef0:	4630      	mov	r0, r6
   b6ef2:	f7ff fefc 	bl	b6cee <_ZN8FatCache4readEmh>
    if (!pc) {
   b6ef6:	2800      	cmp	r0, #0
   b6ef8:	d0f7      	beq.n	b6eea <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6efa:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6efe:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6f02:	065b      	lsls	r3, r3, #25
   b6f04:	d1f1      	bne.n	b6eea <_ZN9FatVolume4initEh+0x30>
   b6f06:	f105 011b 	add.w	r1, r5, #27
   b6f0a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6f0e:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6f12:	2d00      	cmp	r5, #0
   b6f14:	d0e9      	beq.n	b6eea <_ZN9FatVolume4initEh+0x30>
   b6f16:	2200      	movs	r2, #0
   b6f18:	4629      	mov	r1, r5
   b6f1a:	4630      	mov	r0, r6
   b6f1c:	f7ff fee7 	bl	b6cee <_ZN8FatCache4readEmh>
  if (!pc) {
   b6f20:	2800      	cmp	r0, #0
   b6f22:	d0e2      	beq.n	b6eea <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b6f24:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6f2c:	d1dd      	bne.n	b6eea <_ZN9FatVolume4initEh+0x30>
   b6f2e:	7c03      	ldrb	r3, [r0, #16]
   b6f30:	2b02      	cmp	r3, #2
   b6f32:	d1da      	bne.n	b6eea <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b6f34:	89c3      	ldrh	r3, [r0, #14]
   b6f36:	2b00      	cmp	r3, #0
   b6f38:	d0d7      	beq.n	b6eea <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6f3a:	7b41      	ldrb	r1, [r0, #13]
   b6f3c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6f3e:	1e4b      	subs	r3, r1, #1
   b6f40:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6f42:	2300      	movs	r3, #0
   b6f44:	71a3      	strb	r3, [r4, #6]
   b6f46:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6f48:	2301      	movs	r3, #1
   b6f4a:	4299      	cmp	r1, r3
   b6f4c:	d007      	beq.n	b6f5e <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6f4e:	3e01      	subs	r6, #1
   b6f50:	d0cb      	beq.n	b6eea <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6f52:	79a2      	ldrb	r2, [r4, #6]
   b6f54:	005b      	lsls	r3, r3, #1
   b6f56:	3201      	adds	r2, #1
   b6f58:	b2db      	uxtb	r3, r3
   b6f5a:	71a2      	strb	r2, [r4, #6]
   b6f5c:	e7f5      	b.n	b6f4a <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6f5e:	8ac1      	ldrh	r1, [r0, #22]
   b6f60:	b901      	cbnz	r1, b6f64 <_ZN9FatVolume4initEh+0xaa>
   b6f62:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b6f64:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6f66:	89c3      	ldrh	r3, [r0, #14]
   b6f68:	442b      	add	r3, r5
   b6f6a:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6f6c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6f70:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6f72:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6f76:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6f78:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6f7c:	0149      	lsls	r1, r1, #5
   b6f7e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6f82:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6f86:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6f88:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6f8c:	b902      	cbnz	r2, b6f90 <_ZN9FatVolume4initEh+0xd6>
   b6f8e:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6f90:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6f92:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6f94:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6f96:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6f98:	1c4b      	adds	r3, r1, #1
   b6f9a:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6f9c:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6fa0:	4299      	cmp	r1, r3
   b6fa2:	d802      	bhi.n	b6faa <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b6fa4:	230c      	movs	r3, #12
   b6fa6:	71e3      	strb	r3, [r4, #7]
   b6fa8:	e79f      	b.n	b6eea <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6faa:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6fae:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6fb0:	bf85      	ittet	hi
   b6fb2:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b6fb4:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b6fb6:	2310      	movls	r3, #16
    m_fatType = 32;
   b6fb8:	2320      	movhi	r3, #32
   b6fba:	71e3      	strb	r3, [r4, #7]
  return true;
   b6fbc:	2001      	movs	r0, #1
   b6fbe:	e795      	b.n	b6eec <_ZN9FatVolume4initEh+0x32>

000b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6fc0:	f000 baca 	b.w	b7558 <_ZN14SdSpiAltDriver4sendEh>

000b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b6fc4:	f000 baad 	b.w	b7522 <_ZN14SdSpiAltDriver7receiveEv>

000b6fc8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6fc8:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6fca:	4e0e      	ldr	r6, [pc, #56]	; (b7004 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6fcc:	460d      	mov	r5, r1
   b6fce:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6fd0:	f005 fff8 	bl	bcfc4 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6fd4:	6833      	ldr	r3, [r6, #0]
   b6fd6:	1ac0      	subs	r0, r0, r3
   b6fd8:	4b0b      	ldr	r3, [pc, #44]	; (b7008 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6fda:	4298      	cmp	r0, r3
   b6fdc:	d908      	bls.n	b6ff0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6fde:	f005 fff9 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6fe2:	4b0a      	ldr	r3, [pc, #40]	; (b700c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b6fe4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b6fe6:	f006 fa33 	bl	bd450 <spark_process>
   b6fea:	f005 ffeb 	bl	bcfc4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6fee:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6ff0:	f005 fff0 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b6ff4:	b280      	uxth	r0, r0
   b6ff6:	1b40      	subs	r0, r0, r5
}
   b6ff8:	42a0      	cmp	r0, r4
   b6ffa:	bfd4      	ite	le
   b6ffc:	2000      	movle	r0, #0
   b6ffe:	2001      	movgt	r0, #1
   b7000:	bd70      	pop	{r4, r5, r6, pc}
   b7002:	bf00      	nop
   b7004:	2003e618 	.word	0x2003e618
   b7008:	000186a0 	.word	0x000186a0
   b700c:	2003e728 	.word	0x2003e728

000b7010 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7010:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7012:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7014:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7016:	b94d      	cbnz	r5, b702c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7018:	6840      	ldr	r0, [r0, #4]
   b701a:	f000 fa6b 	bl	b74f4 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b701e:	6863      	ldr	r3, [r4, #4]
   b7020:	4629      	mov	r1, r5
   b7022:	7d18      	ldrb	r0, [r3, #20]
   b7024:	f00a f9db 	bl	c13de <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7028:	2301      	movs	r3, #1
   b702a:	7223      	strb	r3, [r4, #8]
  }
}
   b702c:	bd38      	pop	{r3, r4, r5, pc}

000b702e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b702e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7030:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7032:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7034:	b16b      	cbz	r3, b7052 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7036:	6843      	ldr	r3, [r0, #4]
   b7038:	2101      	movs	r1, #1
   b703a:	7d18      	ldrb	r0, [r3, #20]
   b703c:	f00a f9cf 	bl	c13de <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7040:	6860      	ldr	r0, [r4, #4]
   b7042:	21ff      	movs	r1, #255	; 0xff
   b7044:	f7ff ffbc 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7048:	6860      	ldr	r0, [r4, #4]
   b704a:	f000 fa67 	bl	b751c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b704e:	2300      	movs	r3, #0
   b7050:	7223      	strb	r3, [r4, #8]
  }
}
   b7052:	bd10      	pop	{r4, pc}

000b7054 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7056:	4604      	mov	r4, r0
   b7058:	460d      	mov	r5, r1
   b705a:	4616      	mov	r6, r2
   b705c:	f005 ffba 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7060:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7062:	6860      	ldr	r0, [r4, #4]
   b7064:	f7ff ffae 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7068:	28ff      	cmp	r0, #255	; 0xff
   b706a:	7260      	strb	r0, [r4, #9]
   b706c:	d10e      	bne.n	b708c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b706e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7072:	4639      	mov	r1, r7
   b7074:	4620      	mov	r0, r4
   b7076:	f7ff ffa7 	bl	b6fc8 <_ZN9SdSpiCard10isTimedOutEtt>
   b707a:	2800      	cmp	r0, #0
   b707c:	d0f1      	beq.n	b7062 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b707e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7080:	4620      	mov	r0, r4
   b7082:	7023      	strb	r3, [r4, #0]
   b7084:	f7ff ffd3 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7088:	2000      	movs	r0, #0
}
   b708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b708c:	28fe      	cmp	r0, #254	; 0xfe
   b708e:	d001      	beq.n	b7094 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7090:	2350      	movs	r3, #80	; 0x50
   b7092:	e7f5      	b.n	b7080 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7094:	6860      	ldr	r0, [r4, #4]
   b7096:	4632      	mov	r2, r6
   b7098:	4629      	mov	r1, r5
   b709a:	f000 fa47 	bl	b752c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b709e:	7260      	strb	r0, [r4, #9]
   b70a0:	b108      	cbz	r0, b70a6 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b70a2:	2360      	movs	r3, #96	; 0x60
   b70a4:	e7ec      	b.n	b7080 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b70a6:	6860      	ldr	r0, [r4, #4]
   b70a8:	f7ff ff8c 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b70ac:	6860      	ldr	r0, [r4, #4]
   b70ae:	f7ff ff89 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b70b2:	2001      	movs	r0, #1
   b70b4:	e7e9      	b.n	b708a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b70b6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b70b6:	b570      	push	{r4, r5, r6, lr}
   b70b8:	4604      	mov	r4, r0
   b70ba:	460e      	mov	r6, r1
   b70bc:	f005 ff8a 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   b70c0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b70c2:	4632      	mov	r2, r6
   b70c4:	4629      	mov	r1, r5
   b70c6:	4620      	mov	r0, r4
   b70c8:	f7ff ff7e 	bl	b6fc8 <_ZN9SdSpiCard10isTimedOutEtt>
   b70cc:	b930      	cbnz	r0, b70dc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b70ce:	6860      	ldr	r0, [r4, #4]
   b70d0:	f7ff ff78 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b70d4:	28ff      	cmp	r0, #255	; 0xff
   b70d6:	d1f4      	bne.n	b70c2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b70d8:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b70da:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b70dc:	2000      	movs	r0, #0
   b70de:	e7fc      	b.n	b70da <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b70e0 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b70e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b70e2:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b70e4:	9201      	str	r2, [sp, #4]
   b70e6:	4604      	mov	r4, r0
   b70e8:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b70ea:	b90b      	cbnz	r3, b70f0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b70ec:	f7ff ff90 	bl	b7010 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b70f0:	b125      	cbz	r5, b70fc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b70f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b70f6:	4620      	mov	r0, r4
   b70f8:	f7ff ffdd 	bl	b70b6 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b70fc:	6860      	ldr	r0, [r4, #4]
   b70fe:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7102:	f7ff ff5d 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7106:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7108:	af01      	add	r7, sp, #4
   b710a:	5db9      	ldrb	r1, [r7, r6]
   b710c:	6860      	ldr	r0, [r4, #4]
   b710e:	f7ff ff57 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7112:	3e01      	subs	r6, #1
   b7114:	d2f9      	bcs.n	b710a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7116:	2d00      	cmp	r5, #0
   b7118:	6860      	ldr	r0, [r4, #4]
   b711a:	bf0c      	ite	eq
   b711c:	2195      	moveq	r1, #149	; 0x95
   b711e:	2187      	movne	r1, #135	; 0x87
   b7120:	f7ff ff4e 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7124:	6860      	ldr	r0, [r4, #4]
   b7126:	f7ff ff4d 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b712a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b712c:	6860      	ldr	r0, [r4, #4]
   b712e:	f7ff ff49 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7132:	0603      	lsls	r3, r0, #24
   b7134:	7260      	strb	r0, [r4, #9]
   b7136:	d503      	bpl.n	b7140 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7138:	3d01      	subs	r5, #1
   b713a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b713e:	d1f5      	bne.n	b712c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7140:	b003      	add	sp, #12
   b7142:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7144 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7144:	b570      	push	{r4, r5, r6, lr}
   b7146:	4604      	mov	r4, r0
   b7148:	460d      	mov	r5, r1
   b714a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b714c:	2137      	movs	r1, #55	; 0x37
   b714e:	2200      	movs	r2, #0
   b7150:	f7ff ffc6 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7154:	4632      	mov	r2, r6
   b7156:	4629      	mov	r1, r5
   b7158:	4620      	mov	r0, r4
  }
   b715a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b715e:	f7ff bfbf 	b.w	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7164 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7168:	2500      	movs	r5, #0
   b716a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b716c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b716e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7170:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7172:	4604      	mov	r4, r0
   b7174:	4690      	mov	r8, r2
   b7176:	461e      	mov	r6, r3
   b7178:	f005 ff2c 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b717c:	4641      	mov	r1, r8
   b717e:	4607      	mov	r7, r0
   b7180:	6860      	ldr	r0, [r4, #4]
   b7182:	f000 f9bb 	bl	b74fc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7186:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7188:	4a49      	ldr	r2, [pc, #292]	; (b72b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b718a:	721d      	strb	r5, [r3, #8]
   b718c:	2501      	movs	r5, #1
   b718e:	60da      	str	r2, [r3, #12]
   b7190:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7192:	4620      	mov	r0, r4
   b7194:	f7ff ff3c 	bl	b7010 <_ZN9SdSpiCard8spiStartEv>
   b7198:	6863      	ldr	r3, [r4, #4]
   b719a:	4629      	mov	r1, r5
   b719c:	7d18      	ldrb	r0, [r3, #20]
   b719e:	f00a f91e 	bl	c13de <digitalWrite>
   b71a2:	250a      	movs	r5, #10
    spiSend(0XFF);
   b71a4:	6860      	ldr	r0, [r4, #4]
   b71a6:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b71a8:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b71aa:	f7ff ff09 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b71ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b71b2:	d1f7      	bne.n	b71a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b71b4:	6863      	ldr	r3, [r4, #4]
   b71b6:	4629      	mov	r1, r5
   b71b8:	7d18      	ldrb	r0, [r3, #20]
   b71ba:	f00a f910 	bl	c13de <digitalWrite>
  }
   b71be:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b71c0:	2200      	movs	r2, #0
   b71c2:	4611      	mov	r1, r2
   b71c4:	4620      	mov	r0, r4
   b71c6:	f7ff ff8b 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b71ca:	2801      	cmp	r0, #1
   b71cc:	4680      	mov	r8, r0
   b71ce:	d018      	beq.n	b7202 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b71d0:	3d01      	subs	r5, #1
   b71d2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b71d6:	d107      	bne.n	b71e8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b71d8:	2320      	movs	r3, #32
  spiStop();
   b71da:	4620      	mov	r0, r4
   b71dc:	7023      	strb	r3, [r4, #0]
   b71de:	f7ff ff26 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b71e2:	2000      	movs	r0, #0
}
   b71e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b71e8:	6860      	ldr	r0, [r4, #4]
   b71ea:	21fd      	movs	r1, #253	; 0xfd
   b71ec:	f7ff fee8 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b71f0:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b71f4:	6860      	ldr	r0, [r4, #4]
   b71f6:	f7ff fee5 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b71fa:	f1b8 0801 	subs.w	r8, r8, #1
   b71fe:	d1f9      	bne.n	b71f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7200:	e7de      	b.n	b71c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7202:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7206:	2108      	movs	r1, #8
   b7208:	4620      	mov	r0, r4
   b720a:	f7ff ff69 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b720e:	2805      	cmp	r0, #5
   b7210:	d114      	bne.n	b723c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7212:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7216:	2500      	movs	r5, #0
   b7218:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b721a:	462a      	mov	r2, r5
   b721c:	2129      	movs	r1, #41	; 0x29
   b721e:	4620      	mov	r0, r4
   b7220:	f7ff ff90 	bl	b7144 <_ZN9SdSpiCard8cardAcmdEhm>
   b7224:	4602      	mov	r2, r0
   b7226:	b1d8      	cbz	r0, b7260 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7228:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b722c:	4639      	mov	r1, r7
   b722e:	4620      	mov	r0, r4
   b7230:	f7ff feca 	bl	b6fc8 <_ZN9SdSpiCard10isTimedOutEtt>
   b7234:	2800      	cmp	r0, #0
   b7236:	d0f0      	beq.n	b721a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7238:	2343      	movs	r3, #67	; 0x43
   b723a:	e7ce      	b.n	b71da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b723c:	2504      	movs	r5, #4
      m_status = spiReceive();
   b723e:	6860      	ldr	r0, [r4, #4]
   b7240:	f7ff fec0 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7244:	3d01      	subs	r5, #1
   b7246:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b724a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b724c:	d1f7      	bne.n	b723e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b724e:	28aa      	cmp	r0, #170	; 0xaa
   b7250:	d104      	bne.n	b725c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7252:	2302      	movs	r3, #2
   b7254:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7256:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b725a:	e7dd      	b.n	b7218 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b725c:	2325      	movs	r3, #37	; 0x25
   b725e:	e7bc      	b.n	b71da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7260:	7aa3      	ldrb	r3, [r4, #10]
   b7262:	2b02      	cmp	r3, #2
   b7264:	d118      	bne.n	b7298 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7266:	213a      	movs	r1, #58	; 0x3a
   b7268:	4620      	mov	r0, r4
   b726a:	f7ff ff39 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b726e:	b108      	cbz	r0, b7274 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7270:	2337      	movs	r3, #55	; 0x37
   b7272:	e7b2      	b.n	b71da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7274:	6860      	ldr	r0, [r4, #4]
   b7276:	f7ff fea5 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b727a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b727e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7280:	bf04      	itt	eq
   b7282:	2303      	moveq	r3, #3
   b7284:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7286:	6860      	ldr	r0, [r4, #4]
   b7288:	f7ff fe9c 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b728c:	6860      	ldr	r0, [r4, #4]
   b728e:	f7ff fe99 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7292:	6860      	ldr	r0, [r4, #4]
   b7294:	f7ff fe96 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7298:	4620      	mov	r0, r4
   b729a:	f7ff fec8 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b729e:	6863      	ldr	r3, [r4, #4]
   b72a0:	7930      	ldrb	r0, [r6, #4]
   b72a2:	68b1      	ldr	r1, [r6, #8]
   b72a4:	89b2      	ldrh	r2, [r6, #12]
   b72a6:	821a      	strh	r2, [r3, #16]
   b72a8:	7218      	strb	r0, [r3, #8]
   b72aa:	60d9      	str	r1, [r3, #12]
  return true;
   b72ac:	2001      	movs	r0, #1
   b72ae:	e799      	b.n	b71e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b72b0:	0003d090 	.word	0x0003d090

000b72b4 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b72b4:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b72b6:	7a83      	ldrb	r3, [r0, #10]
   b72b8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b72ba:	bf18      	it	ne
   b72bc:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b72be:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b72c0:	460a      	mov	r2, r1
   b72c2:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b72c4:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b72c6:	f7ff ff0b 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b72ca:	b130      	cbz	r0, b72da <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b72cc:	2330      	movs	r3, #48	; 0x30
   b72ce:	7023      	strb	r3, [r4, #0]
  spiStop();
   b72d0:	4620      	mov	r0, r4
   b72d2:	f7ff feac 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b72d6:	2500      	movs	r5, #0
   b72d8:	e00b      	b.n	b72f2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b72da:	4629      	mov	r1, r5
   b72dc:	f44f 7200 	mov.w	r2, #512	; 0x200
   b72e0:	4620      	mov	r0, r4
   b72e2:	f7ff feb7 	bl	b7054 <_ZN9SdSpiCard8readDataEPhj>
   b72e6:	4605      	mov	r5, r0
   b72e8:	2800      	cmp	r0, #0
   b72ea:	d0f1      	beq.n	b72d0 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b72ec:	4620      	mov	r0, r4
   b72ee:	f7ff fe9e 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
}
   b72f2:	4628      	mov	r0, r5
   b72f4:	bd38      	pop	{r3, r4, r5, pc}

000b72f6 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b72f6:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b72f8:	7a83      	ldrb	r3, [r0, #10]
   b72fa:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b72fc:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b72fe:	bf18      	it	ne
   b7300:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7302:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7304:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7306:	f7ff feeb 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b730a:	b130      	cbz	r0, b731a <_ZN9SdSpiCard9readStartEm+0x24>
   b730c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b730e:	4620      	mov	r0, r4
   b7310:	7023      	strb	r3, [r4, #0]
   b7312:	f7ff fe8c 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7316:	2000      	movs	r0, #0
}
   b7318:	bd10      	pop	{r4, pc}
  return true;
   b731a:	2001      	movs	r0, #1
   b731c:	e7fc      	b.n	b7318 <_ZN9SdSpiCard9readStartEm+0x22>

000b731e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b731e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7320:	2200      	movs	r2, #0
   b7322:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7324:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7326:	f7ff fedb 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b732a:	b130      	cbz	r0, b733a <_ZN9SdSpiCard8readStopEv+0x1c>
   b732c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b732e:	4620      	mov	r0, r4
   b7330:	7023      	strb	r3, [r4, #0]
   b7332:	f7ff fe7c 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7336:	2000      	movs	r0, #0
}
   b7338:	bd10      	pop	{r4, pc}
  spiStop();
   b733a:	4620      	mov	r0, r4
   b733c:	f7ff fe77 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7340:	2001      	movs	r0, #1
   b7342:	e7f9      	b.n	b7338 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7344 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7346:	4604      	mov	r4, r0
   b7348:	4616      	mov	r6, r2
   b734a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b734c:	f7ff ffd3 	bl	b72f6 <_ZN9SdSpiCard9readStartEm>
   b7350:	b168      	cbz	r0, b736e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7352:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7354:	b2ab      	uxth	r3, r5
   b7356:	429f      	cmp	r7, r3
   b7358:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b735c:	d909      	bls.n	b7372 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b735e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7362:	4620      	mov	r0, r4
   b7364:	f7ff fe76 	bl	b7054 <_ZN9SdSpiCard8readDataEPhj>
   b7368:	3501      	adds	r5, #1
   b736a:	2800      	cmp	r0, #0
   b736c:	d1f2      	bne.n	b7354 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b736e:	2000      	movs	r0, #0
   b7370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7372:	4620      	mov	r0, r4
}
   b7374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7378:	f7ff bfd1 	b.w	b731e <_ZN9SdSpiCard8readStopEv>

000b737c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b737c:	b538      	push	{r3, r4, r5, lr}
   b737e:	4604      	mov	r4, r0
   b7380:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7382:	6840      	ldr	r0, [r0, #4]
   b7384:	f7ff fe1c 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7388:	f44f 7200 	mov.w	r2, #512	; 0x200
   b738c:	6860      	ldr	r0, [r4, #4]
   b738e:	4629      	mov	r1, r5
   b7390:	f000 f8e6 	bl	b7560 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7394:	6860      	ldr	r0, [r4, #4]
   b7396:	21ff      	movs	r1, #255	; 0xff
   b7398:	f7ff fe12 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b739c:	6860      	ldr	r0, [r4, #4]
   b739e:	21ff      	movs	r1, #255	; 0xff
   b73a0:	f7ff fe0e 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b73a4:	6860      	ldr	r0, [r4, #4]
   b73a6:	f7ff fe0d 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b73aa:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b73ac:	f000 001f 	and.w	r0, r0, #31
   b73b0:	2805      	cmp	r0, #5
   b73b2:	d006      	beq.n	b73c2 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b73b4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b73b6:	4620      	mov	r0, r4
   b73b8:	7023      	strb	r3, [r4, #0]
   b73ba:	f7ff fe38 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b73be:	2000      	movs	r0, #0
}
   b73c0:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b73c2:	2001      	movs	r0, #1
   b73c4:	e7fc      	b.n	b73c0 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b73c6 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b73c6:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b73c8:	7a83      	ldrb	r3, [r0, #10]
   b73ca:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b73cc:	bf18      	it	ne
   b73ce:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b73d0:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b73d2:	460a      	mov	r2, r1
   b73d4:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b73d6:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b73d8:	f7ff fe82 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b73dc:	4606      	mov	r6, r0
   b73de:	b130      	cbz	r0, b73ee <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b73e0:	2332      	movs	r3, #50	; 0x32
   b73e2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b73e4:	4620      	mov	r0, r4
   b73e6:	f7ff fe22 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b73ea:	2500      	movs	r5, #0
   b73ec:	e01f      	b.n	b742e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b73ee:	462a      	mov	r2, r5
   b73f0:	21fe      	movs	r1, #254	; 0xfe
   b73f2:	4620      	mov	r0, r4
   b73f4:	f7ff ffc2 	bl	b737c <_ZN9SdSpiCard9writeDataEhPKh>
   b73f8:	2800      	cmp	r0, #0
   b73fa:	d0f3      	beq.n	b73e4 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b73fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7400:	4620      	mov	r0, r4
   b7402:	f7ff fe58 	bl	b70b6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7406:	4605      	mov	r5, r0
   b7408:	b908      	cbnz	r0, b740e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b740a:	235a      	movs	r3, #90	; 0x5a
   b740c:	e7e9      	b.n	b73e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b740e:	4632      	mov	r2, r6
   b7410:	210d      	movs	r1, #13
   b7412:	4620      	mov	r0, r4
   b7414:	f7ff fe64 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b7418:	b108      	cbz	r0, b741e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b741a:	2329      	movs	r3, #41	; 0x29
   b741c:	e7e1      	b.n	b73e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b741e:	6860      	ldr	r0, [r4, #4]
   b7420:	f7ff fdd0 	bl	b6fc4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7424:	2800      	cmp	r0, #0
   b7426:	d1f8      	bne.n	b741a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7428:	4620      	mov	r0, r4
   b742a:	f7ff fe00 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
}
   b742e:	4628      	mov	r0, r5
   b7430:	bd70      	pop	{r4, r5, r6, pc}

000b7432 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7432:	b513      	push	{r0, r1, r4, lr}
   b7434:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7436:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b743a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b743c:	f7ff fe3b 	bl	b70b6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7440:	9a01      	ldr	r2, [sp, #4]
   b7442:	b930      	cbnz	r0, b7452 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7444:	235b      	movs	r3, #91	; 0x5b
   b7446:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7448:	4620      	mov	r0, r4
   b744a:	f7ff fdf0 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b744e:	2000      	movs	r0, #0
   b7450:	e005      	b.n	b745e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7452:	21fc      	movs	r1, #252	; 0xfc
   b7454:	4620      	mov	r0, r4
   b7456:	f7ff ff91 	bl	b737c <_ZN9SdSpiCard9writeDataEhPKh>
   b745a:	2800      	cmp	r0, #0
   b745c:	d0f4      	beq.n	b7448 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b745e:	b002      	add	sp, #8
   b7460:	bd10      	pop	{r4, pc}

000b7462 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7462:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7464:	7a83      	ldrb	r3, [r0, #10]
   b7466:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7468:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b746a:	bf18      	it	ne
   b746c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b746e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7470:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7472:	f7ff fe35 	bl	b70e0 <_ZN9SdSpiCard11cardCommandEhm>
   b7476:	b130      	cbz	r0, b7486 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7478:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b747a:	4620      	mov	r0, r4
   b747c:	7023      	strb	r3, [r4, #0]
   b747e:	f7ff fdd6 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7482:	2000      	movs	r0, #0
}
   b7484:	bd10      	pop	{r4, pc}
  return true;
   b7486:	2001      	movs	r0, #1
   b7488:	e7fc      	b.n	b7484 <_ZN9SdSpiCard10writeStartEm+0x22>

000b748a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b748a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b748c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7490:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7492:	f7ff fe10 	bl	b70b6 <_ZN9SdSpiCard11waitNotBusyEt>
   b7496:	4605      	mov	r5, r0
   b7498:	b930      	cbnz	r0, b74a8 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b749a:	2356      	movs	r3, #86	; 0x56
   b749c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b749e:	4620      	mov	r0, r4
   b74a0:	f7ff fdc5 	bl	b702e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b74a4:	4628      	mov	r0, r5
   b74a6:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b74a8:	6860      	ldr	r0, [r4, #4]
   b74aa:	21fd      	movs	r1, #253	; 0xfd
   b74ac:	f7ff fd88 	bl	b6fc0 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b74b0:	e7f5      	b.n	b749e <_ZN9SdSpiCard9writeStopEv+0x14>

000b74b2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b74b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b74b4:	4604      	mov	r4, r0
   b74b6:	4616      	mov	r6, r2
   b74b8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b74ba:	f7ff ffd2 	bl	b7462 <_ZN9SdSpiCard10writeStartEm>
   b74be:	b170      	cbz	r0, b74de <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b74c0:	2500      	movs	r5, #0
   b74c2:	42bd      	cmp	r5, r7
   b74c4:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b74c8:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b74ca:	d004      	beq.n	b74d6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b74cc:	f7ff ffb1 	bl	b7432 <_ZN9SdSpiCard9writeDataEPKh>
   b74d0:	b128      	cbz	r0, b74de <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b74d2:	3501      	adds	r5, #1
   b74d4:	e7f5      	b.n	b74c2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b74d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b74da:	f7ff bfd6 	b.w	b748a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b74de:	4620      	mov	r0, r4
   b74e0:	f7ff fda5 	bl	b702e <_ZN9SdSpiCard7spiStopEv>
}
   b74e4:	2000      	movs	r0, #0
   b74e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b74e8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b74e8:	4b01      	ldr	r3, [pc, #4]	; (b74f0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b74ea:	2201      	movs	r2, #1
   b74ec:	701a      	strb	r2, [r3, #0]
}
   b74ee:	4770      	bx	lr
   b74f0:	2003e61c 	.word	0x2003e61c

000b74f4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b74f4:	1d01      	adds	r1, r0, #4
   b74f6:	6800      	ldr	r0, [r0, #0]
   b74f8:	f009 bae6 	b.w	c0ac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b74fc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b74fc:	b510      	push	{r4, lr}
   b74fe:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7500:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7502:	6800      	ldr	r0, [r0, #0]
   b7504:	f009 fa9b 	bl	c0a3e <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7508:	7d20      	ldrb	r0, [r4, #20]
   b750a:	2101      	movs	r1, #1
   b750c:	f009 ff56 	bl	c13bc <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7510:	7d20      	ldrb	r0, [r4, #20]
   b7512:	2101      	movs	r1, #1
}
   b7514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7518:	f009 bf61 	b.w	c13de <digitalWrite>

000b751c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b751c:	6800      	ldr	r0, [r0, #0]
   b751e:	f009 bab9 	b.w	c0a94 <_ZN8SPIClass14endTransactionEv>

000b7522 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7522:	6800      	ldr	r0, [r0, #0]
   b7524:	21ff      	movs	r1, #255	; 0xff
   b7526:	f009 bb6f 	b.w	c0c08 <_ZN8SPIClass8transferEh>
	...

000b752c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b752c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b752e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7530:	4a07      	ldr	r2, [pc, #28]	; (b7550 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7532:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7534:	2500      	movs	r5, #0
   b7536:	4c07      	ldr	r4, [pc, #28]	; (b7554 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7538:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b753a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b753c:	460a      	mov	r2, r1
   b753e:	4629      	mov	r1, r5
   b7540:	f009 fb68 	bl	c0c14 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7544:	7823      	ldrb	r3, [r4, #0]
   b7546:	2b00      	cmp	r3, #0
   b7548:	d0fc      	beq.n	b7544 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b754a:	2000      	movs	r0, #0
   b754c:	b003      	add	sp, #12
   b754e:	bd30      	pop	{r4, r5, pc}
   b7550:	000b74e9 	.word	0x000b74e9
   b7554:	2003e61c 	.word	0x2003e61c

000b7558 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7558:	6800      	ldr	r0, [r0, #0]
   b755a:	f009 bb55 	b.w	c0c08 <_ZN8SPIClass8transferEh>
	...

000b7560 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7560:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7562:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7564:	4a06      	ldr	r2, [pc, #24]	; (b7580 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7566:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7568:	2500      	movs	r5, #0
   b756a:	4c06      	ldr	r4, [pc, #24]	; (b7584 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b756c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b756e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7570:	462a      	mov	r2, r5
   b7572:	f009 fb4f 	bl	c0c14 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7576:	7823      	ldrb	r3, [r4, #0]
   b7578:	2b00      	cmp	r3, #0
   b757a:	d0fc      	beq.n	b7576 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b757c:	b003      	add	sp, #12
   b757e:	bd30      	pop	{r4, r5, pc}
   b7580:	000b74e9 	.word	0x000b74e9
   b7584:	2003e61c 	.word	0x2003e61c

000b7588 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b7588:	4770      	bx	lr

000b758a <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b758a:	4770      	bx	lr

000b758c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b758c:	b538      	push	{r3, r4, r5, lr}
   b758e:	460c      	mov	r4, r1
   b7590:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b7592:	2220      	movs	r2, #32
   b7594:	2100      	movs	r1, #0
   b7596:	f104 0008 	add.w	r0, r4, #8
   b759a:	f00a fe3f 	bl	c221c <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b759e:	4909      	ldr	r1, [pc, #36]	; (b75c4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b75a0:	220b      	movs	r2, #11
   b75a2:	4620      	mov	r0, r4
   b75a4:	f00a fef4 	bl	c2390 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b75a8:	2301      	movs	r3, #1
   b75aa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b75ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b75ae:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b75b0:	2302      	movs	r3, #2
   b75b2:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b75b4:	4b04      	ldr	r3, [pc, #16]	; (b75c8 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b75b6:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b75b8:	4b04      	ldr	r3, [pc, #16]	; (b75cc <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b75ba:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b75bc:	4b04      	ldr	r3, [pc, #16]	; (b75d0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b75be:	6223      	str	r3, [r4, #32]
}
   b75c0:	bd38      	pop	{r3, r4, r5, pc}
   b75c2:	bf00      	nop
   b75c4:	000c4a40 	.word	0x000c4a40
   b75c8:	c4c80000 	.word	0xc4c80000
   b75cc:	44c80000 	.word	0x44c80000
   b75d0:	3c75c28f 	.word	0x3c75c28f

000b75d4 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b75d4:	b510      	push	{r4, lr}
   b75d6:	2128      	movs	r1, #40	; 0x28
   b75d8:	4604      	mov	r4, r0
   b75da:	f7fc fd62 	bl	b40a2 <_ZdlPvj>
   b75de:	4620      	mov	r0, r4
   b75e0:	bd10      	pop	{r4, pc}
	...

000b75e4 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b75e4:	4a03      	ldr	r2, [pc, #12]	; (b75f4 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b75e6:	6002      	str	r2, [r0, #0]
   b75e8:	2200      	movs	r2, #0
   b75ea:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b75ee:	7602      	strb	r2, [r0, #24]
   b75f0:	4770      	bx	lr
   b75f2:	bf00      	nop
   b75f4:	000c4a60 	.word	0x000c4a60

000b75f8 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b75f8:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b75fa:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b75fc:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b75fe:	2200      	movs	r2, #0
   b7600:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7604:	2506      	movs	r5, #6
   b7606:	2228      	movs	r2, #40	; 0x28
   b7608:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b760c:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b760e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7612:	a806      	add	r0, sp, #24
   b7614:	f005 f91a 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b7618:	462a      	mov	r2, r5
   b761a:	a904      	add	r1, sp, #16
   b761c:	a806      	add	r0, sp, #24
   b761e:	f005 f993 	bl	bc948 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b7622:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b7624:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b7628:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b762c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b7630:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b7632:	2d03      	cmp	r5, #3
   b7634:	bf98      	it	ls
   b7636:	4812      	ldrls	r0, [pc, #72]	; (b7680 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b7638:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b763a:	ee07 1a10 	vmov	s14, r1
   b763e:	bf9c      	itt	ls
   b7640:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b7644:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b7648:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b764a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b764e:	bf88      	it	hi
   b7650:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b7654:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b7658:	ee07 2a10 	vmov	s14, r2
   b765c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b7660:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b7664:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b7668:	ee07 3a10 	vmov	s14, r3
   b766c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b7670:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b7674:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b7678:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b767c:	b00d      	add	sp, #52	; 0x34
   b767e:	bd30      	pop	{r4, r5, pc}
   b7680:	000c4a48 	.word	0x000c4a48

000b7684 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b7684:	b538      	push	{r3, r4, r5, lr}
   b7686:	460c      	mov	r4, r1
   b7688:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b768a:	2220      	movs	r2, #32
   b768c:	2100      	movs	r1, #0
   b768e:	1d20      	adds	r0, r4, #4
   b7690:	f00a fdc4 	bl	c221c <memset>
  event->version = sizeof(sensors_event_t);
   b7694:	2324      	movs	r3, #36	; 0x24
   b7696:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b7698:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b769a:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b769c:	2302      	movs	r3, #2
   b769e:	60a3      	str	r3, [r4, #8]
   b76a0:	f005 fc98 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b76a4:	6120      	str	r0, [r4, #16]
  read();
   b76a6:	4628      	mov	r0, r5
   b76a8:	f7ff ffa6 	bl	b75f8 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b76ac:	edd5 7a03 	vldr	s15, [r5, #12]
   b76b0:	ed9f 7a09 	vldr	s14, [pc, #36]	; b76d8 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b76b4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b76b8:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b76ba:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b76be:	edd5 7a04 	vldr	s15, [r5, #16]
   b76c2:	ee67 7a87 	vmul.f32	s15, s15, s14
   b76c6:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b76ca:	edd5 7a05 	vldr	s15, [r5, #20]
   b76ce:	ee67 7a87 	vmul.f32	s15, s15, s14
   b76d2:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b76d6:	bd38      	pop	{r3, r4, r5, pc}
   b76d8:	42c80000 	.word	0x42c80000

000b76dc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b76dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b76de:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b76e0:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b76e2:	2700      	movs	r7, #0
   b76e4:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b76e8:	2320      	movs	r3, #32
   b76ea:	9300      	str	r3, [sp, #0]
   b76ec:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b76ee:	460e      	mov	r6, r1
   b76f0:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b76f2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b76f6:	462b      	mov	r3, r5
   b76f8:	a808      	add	r0, sp, #32
   b76fa:	f005 f8a7 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b76fe:	2305      	movs	r3, #5
   b7700:	2202      	movs	r2, #2
   b7702:	a908      	add	r1, sp, #32
   b7704:	a804      	add	r0, sp, #16
   b7706:	f005 f97d 	bl	bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b770a:	4631      	mov	r1, r6
   b770c:	a804      	add	r0, sp, #16
   b770e:	f005 f98b 	bl	bca28 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b7712:	2323      	movs	r3, #35	; 0x23
   b7714:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b7718:	9300      	str	r3, [sp, #0]
   b771a:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b771e:	462b      	mov	r3, r5
   b7720:	9501      	str	r5, [sp, #4]
   b7722:	a80e      	add	r0, sp, #56	; 0x38
   b7724:	f005 f892 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b7728:	2302      	movs	r3, #2
   b772a:	461a      	mov	r2, r3
   b772c:	a90e      	add	r1, sp, #56	; 0x38
   b772e:	a806      	add	r0, sp, #24
   b7730:	f005 f968 	bl	bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b7734:	4631      	mov	r1, r6
   b7736:	a806      	add	r0, sp, #24
   b7738:	f005 f976 	bl	bca28 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b773c:	b015      	add	sp, #84	; 0x54
   b773e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7740 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7740:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7742:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7744:	b08c      	sub	sp, #48	; 0x30
   b7746:	4606      	mov	r6, r0
   b7748:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b774a:	d103      	bne.n	b7754 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b774c:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b774e:	f7ff ffc5 	bl	b76dc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b7752:	e009      	b.n	b7768 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b7754:	2903      	cmp	r1, #3
   b7756:	d003      	beq.n	b7760 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b7758:	2905      	cmp	r1, #5
   b775a:	d103      	bne.n	b7764 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b775c:	2101      	movs	r1, #1
   b775e:	e7f6      	b.n	b774e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b7760:	2102      	movs	r1, #2
   b7762:	e7f4      	b.n	b774e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b7764:	2907      	cmp	r1, #7
   b7766:	d01b      	beq.n	b77a0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b7768:	200a      	movs	r0, #10
   b776a:	f005 ff6d 	bl	bd648 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b776e:	2501      	movs	r5, #1
   b7770:	2300      	movs	r3, #0
   b7772:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7776:	2320      	movs	r3, #32
   b7778:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b777c:	9300      	str	r3, [sp, #0]
   b777e:	9501      	str	r5, [sp, #4]
   b7780:	462b      	mov	r3, r5
   b7782:	a806      	add	r0, sp, #24
   b7784:	f005 f862 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b7788:	462b      	mov	r3, r5
   b778a:	2204      	movs	r2, #4
   b778c:	a906      	add	r1, sp, #24
   b778e:	a804      	add	r0, sp, #16
   b7790:	f005 f938 	bl	bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b7794:	4621      	mov	r1, r4
   b7796:	a804      	add	r0, sp, #16
   b7798:	f005 f946 	bl	bca28 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b779c:	b00c      	add	sp, #48	; 0x30
   b779e:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b77a0:	2100      	movs	r1, #0
   b77a2:	e7d4      	b.n	b774e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b77a4 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b77a4:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b77a6:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b77a8:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b77aa:	2500      	movs	r5, #0
   b77ac:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b77b0:	2222      	movs	r2, #34	; 0x22
   b77b2:	9301      	str	r3, [sp, #4]
   b77b4:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b77b6:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b77b8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b77bc:	a806      	add	r0, sp, #24
   b77be:	f005 f845 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b77c2:	462b      	mov	r3, r5
   b77c4:	2202      	movs	r2, #2
   b77c6:	a906      	add	r1, sp, #24
   b77c8:	a804      	add	r0, sp, #16
   b77ca:	f005 f91b 	bl	bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b77ce:	4621      	mov	r1, r4
   b77d0:	a804      	add	r0, sp, #16
   b77d2:	f005 f929 	bl	bca28 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b77d6:	b00d      	add	sp, #52	; 0x34
   b77d8:	bd30      	pop	{r4, r5, pc}

000b77da <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b77da:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b77dc:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b77de:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b77e0:	2200      	movs	r2, #0
   b77e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b77e6:	2221      	movs	r2, #33	; 0x21
   b77e8:	9301      	str	r3, [sp, #4]
   b77ea:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b77ec:	460d      	mov	r5, r1
   b77ee:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b77f0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b77f4:	a806      	add	r0, sp, #24
   b77f6:	f005 f829 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b77fa:	2305      	movs	r3, #5
   b77fc:	2202      	movs	r2, #2
   b77fe:	a906      	add	r1, sp, #24
   b7800:	a804      	add	r0, sp, #16
   b7802:	f005 f8ff 	bl	bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b7806:	4629      	mov	r1, r5
   b7808:	a804      	add	r0, sp, #16
   b780a:	f005 f90d 	bl	bca28 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b780e:	7625      	strb	r5, [r4, #24]
}
   b7810:	b00d      	add	sp, #52	; 0x34
   b7812:	bd30      	pop	{r4, r5, pc}

000b7814 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7814:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7816:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7818:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b781a:	2200      	movs	r2, #0
   b781c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7820:	2221      	movs	r2, #33	; 0x21
   b7822:	9301      	str	r3, [sp, #4]
   b7824:	9200      	str	r2, [sp, #0]
   b7826:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b782a:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b782c:	a806      	add	r0, sp, #24
   b782e:	f005 f80d 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7832:	2305      	movs	r3, #5
   b7834:	2202      	movs	r2, #2
   b7836:	a906      	add	r1, sp, #24
   b7838:	a804      	add	r0, sp, #16
   b783a:	f005 f8e3 	bl	bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b783e:	a804      	add	r0, sp, #16
   b7840:	f005 f8e5 	bl	bca0e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b7844:	b2c0      	uxtb	r0, r0
   b7846:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b7848:	b00c      	add	sp, #48	; 0x30
   b784a:	bd10      	pop	{r4, pc}

000b784c <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b784c:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b784e:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b7850:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7852:	2501      	movs	r5, #1
   b7854:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7858:	2321      	movs	r3, #33	; 0x21
   b785a:	9300      	str	r3, [sp, #0]
   b785c:	9501      	str	r5, [sp, #4]
   b785e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b7862:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7864:	462b      	mov	r3, r5
   b7866:	a806      	add	r0, sp, #24
   b7868:	f004 fff0 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b786c:	2302      	movs	r3, #2
   b786e:	462a      	mov	r2, r5
   b7870:	a906      	add	r1, sp, #24
   b7872:	a804      	add	r0, sp, #16
   b7874:	f005 f8c6 	bl	bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b7878:	4629      	mov	r1, r5
   b787a:	a804      	add	r0, sp, #16
   b787c:	f005 f8d4 	bl	bca28 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b7880:	200a      	movs	r0, #10
   b7882:	f005 fee1 	bl	bd648 <delay>
  getRange();
   b7886:	4620      	mov	r0, r4
   b7888:	f7ff ffc4 	bl	b7814 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b788c:	b00d      	add	sp, #52	; 0x34
   b788e:	bd30      	pop	{r4, r5, pc}

000b7890 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b7890:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7892:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b7894:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7896:	2500      	movs	r5, #0
   b7898:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b789c:	230f      	movs	r3, #15
   b789e:	9300      	str	r3, [sp, #0]
   b78a0:	9601      	str	r6, [sp, #4]
   b78a2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b78a6:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b78a8:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b78aa:	a804      	add	r0, sp, #16
   b78ac:	f004 ffce 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b78b0:	a804      	add	r0, sp, #16
   b78b2:	f005 f88b 	bl	bc9cc <_ZN23Adafruit_BusIO_Register4readEv>
   b78b6:	283d      	cmp	r0, #61	; 0x3d
   b78b8:	d115      	bne.n	b78e6 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b78ba:	4620      	mov	r0, r4
   b78bc:	f7ff ffc6 	bl	b784c <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b78c0:	2103      	movs	r1, #3
   b78c2:	4620      	mov	r0, r4
   b78c4:	f7ff ff0a 	bl	b76dc <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b78c8:	4631      	mov	r1, r6
   b78ca:	4620      	mov	r0, r4
   b78cc:	f7ff ff38 	bl	b7740 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b78d0:	4629      	mov	r1, r5
   b78d2:	4620      	mov	r0, r4
   b78d4:	f7ff ff81 	bl	b77da <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b78d8:	4620      	mov	r0, r4
   b78da:	4629      	mov	r1, r5
   b78dc:	f7ff ff62 	bl	b77a4 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b78e0:	4630      	mov	r0, r6
}
   b78e2:	b00a      	add	sp, #40	; 0x28
   b78e4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b78e6:	4628      	mov	r0, r5
   b78e8:	e7fb      	b.n	b78e2 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b78ea <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b78ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b78ec:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b78ee:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b78f0:	b95b      	cbnz	r3, b790a <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b78f2:	2010      	movs	r0, #16
   b78f4:	e9cd 1200 	strd	r1, r2, [sp]
   b78f8:	f7fc fbcd 	bl	b4096 <_Znwj>
   b78fc:	4605      	mov	r5, r0
   b78fe:	b118      	cbz	r0, b7908 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b7900:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7904:	f005 f8a9 	bl	bca5a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b7908:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b790a:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b790c:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b790e:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b7910:	2101      	movs	r1, #1
   b7912:	f005 f8be 	bl	bca92 <_ZN18Adafruit_I2CDevice5beginEb>
   b7916:	b128      	cbz	r0, b7924 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b7918:	4620      	mov	r0, r4
}
   b791a:	b003      	add	sp, #12
   b791c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b7920:	f7ff bfb6 	b.w	b7890 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b7924:	b003      	add	sp, #12
   b7926:	bd30      	pop	{r4, r5, pc}

000b7928 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7928:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b792a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b792c:	b08b      	sub	sp, #44	; 0x2c
   b792e:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b7930:	2500      	movs	r5, #0
   b7932:	2232      	movs	r2, #50	; 0x32
   b7934:	2102      	movs	r1, #2
   b7936:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b793a:	e9cd 2100 	strd	r2, r1, [sp]
   b793e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7942:	a804      	add	r0, sp, #16
   b7944:	f004 ff82 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b7948:	462a      	mov	r2, r5
   b794a:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b794e:	a804      	add	r0, sp, #16
   b7950:	f004 ffdc 	bl	bc90c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7954:	b00b      	add	sp, #44	; 0x2c
   b7956:	bd30      	pop	{r4, r5, pc}

000b7958 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b7958:	b530      	push	{r4, r5, lr}
   b795a:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b795c:	2500      	movs	r5, #0
  value |= latch << 1;
   b795e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b7962:	0064      	lsls	r4, r4, #1
   b7964:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b7968:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b796c:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b7970:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b7974:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b7978:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b797c:	2301      	movs	r3, #1
  value |= latch << 1;
   b797e:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7982:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b7986:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b7988:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b798a:	2230      	movs	r2, #48	; 0x30
   b798c:	9301      	str	r3, [sp, #4]
   b798e:	9200      	str	r2, [sp, #0]
   b7990:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7994:	a804      	add	r0, sp, #16
   b7996:	f004 ff59 	bl	bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b799a:	462a      	mov	r2, r5
   b799c:	4621      	mov	r1, r4
   b799e:	a804      	add	r0, sp, #16
   b79a0:	f004 ffb4 	bl	bc90c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b79a4:	b00b      	add	sp, #44	; 0x2c
   b79a6:	bd30      	pop	{r4, r5, pc}

000b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b79a8:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b79aa:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b79ac:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b79ae:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b79b0:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b79b2:	041b      	lsls	r3, r3, #16
   b79b4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b79b8:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b79ba:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b79bc:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b79c0:	bd10      	pop	{r4, pc}

000b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b79c2:	1843      	adds	r3, r0, r1
   b79c4:	5c40      	ldrb	r0, [r0, r1]
   b79c6:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b79c8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b79cc:	4770      	bx	lr

000b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b79ce:	b410      	push	{r4}
    if (base == 0) {
   b79d0:	b92a      	cbnz	r2, b79de <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b79d2:	6802      	ldr	r2, [r0, #0]
}
   b79d4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b79d8:	6892      	ldr	r2, [r2, #8]
   b79da:	b2c9      	uxtb	r1, r1
   b79dc:	4710      	bx	r2
}
   b79de:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b79e2:	b2d2      	uxtb	r2, r2
   b79e4:	f008 be75 	b.w	c06d2 <_ZN5Print11printNumberEmh>

000b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b79e8:	b912      	cbnz	r2, b79f0 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b79ea:	6803      	ldr	r3, [r0, #0]
   b79ec:	689b      	ldr	r3, [r3, #8]
   b79ee:	4718      	bx	r3
        return printNumber(val, base) + t;
   b79f0:	b2d2      	uxtb	r2, r2
   b79f2:	f008 be6e 	b.w	c06d2 <_ZN5Print11printNumberEmh>

000b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b79f6:	b510      	push	{r4, lr}
   b79f8:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b79fa:	f7ff fff5 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b79fe:	4620      	mov	r0, r4
    }
   b7a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b7a04:	f008 be4d 	b.w	c06a2 <_ZN5Print7printlnEv>

000b7a08 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b7a08:	6803      	ldr	r3, [r0, #0]
   b7a0a:	b2c9      	uxtb	r1, r1
   b7a0c:	689b      	ldr	r3, [r3, #8]
   b7a0e:	4718      	bx	r3

000b7a10 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7a10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b7a14:	8002      	strh	r2, [r0, #0]
   b7a16:	2142      	movs	r1, #66	; 0x42
   b7a18:	2200      	movs	r2, #0
   b7a1a:	b510      	push	{r4, lr}
   b7a1c:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7a20:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7a24:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b7a28:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7a2c:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b7a30:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b7a34:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b7a38:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b7a3c:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b7a40:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b7a44:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b7a48:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b7a4c:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b7a50:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b7a54:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b7a58:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b7a5c:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b7a60:	2180      	movs	r1, #128	; 0x80
   b7a62:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b7a66:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b7a6a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b7a6e:	4925      	ldr	r1, [pc, #148]	; (b7b04 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b7a70:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b7a74:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b7a78:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b7a7c:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b7a80:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b7a84:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b7a88:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b7a8c:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b7a90:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b7a94:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b7a98:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b7a9c:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b7aa0:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b7aa4:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b7aa8:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b7aac:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b7ab0:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b7ab4:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b7ab8:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b7abc:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b7ac0:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b7ac4:	4910      	ldr	r1, [pc, #64]	; (b7b08 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b7ac6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b7aca:	f640 1164 	movw	r1, #2404	; 0x964
   b7ace:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b7ad2:	2158      	movs	r1, #88	; 0x58
   b7ad4:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7ad8:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7ada:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b7ade:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b7ae2:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b7ae6:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b7aea:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b7aee:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b7af2:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7af6:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7afa:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b7afe:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b7b02:	bd10      	pop	{r4, pc}
   b7b04:	02020000 	.word	0x02020000
   b7b08:	64640200 	.word	0x64640200

000b7b0c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b7b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b0e:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b7b10:	460d      	mov	r5, r1
   b7b12:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b7b16:	b9a9      	cbnz	r1, b7b44 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b7b18:	b1a8      	cbz	r0, b7b46 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b7b1a:	f7fc fac0 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7b1e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b7b22:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7b26:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b7b2a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7b2e:	b913      	cbnz	r3, b7b36 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b7b30:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7b34:	b123      	cbz	r3, b7b40 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b7b36:	4920      	ldr	r1, [pc, #128]	; (b7bb8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b7b38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7b3c:	f008 fdc7 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b7b40:	2001      	movs	r0, #1
   b7b42:	e011      	b.n	b7b68 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b7b44:	b9b8      	cbnz	r0, b7b76 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b7b46:	4628      	mov	r0, r5
   b7b48:	f7fc faa7 	bl	b409a <_Znaj>
   b7b4c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7b50:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b7b54:	bb60      	cbnz	r0, b7bb0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7b56:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b7b5a:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7b5e:	b923      	cbnz	r3, b7b6a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b7b60:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7b64:	b90b      	cbnz	r3, b7b6a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b7b66:	2000      	movs	r0, #0
}
   b7b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b7b6a:	4914      	ldr	r1, [pc, #80]	; (b7bbc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7b6c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7b70:	f008 fdad 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   b7b74:	e7f7      	b.n	b7b66 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b7b76:	4608      	mov	r0, r1
   b7b78:	f7fc fa8f 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b7b7c:	4606      	mov	r6, r0
   b7b7e:	b940      	cbnz	r0, b7b92 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7b80:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7b84:	b91b      	cbnz	r3, b7b8e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b7b86:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7b8a:	2b00      	cmp	r3, #0
   b7b8c:	d0eb      	beq.n	b7b66 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7b8e:	490c      	ldr	r1, [pc, #48]	; (b7bc0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b7b90:	e7ec      	b.n	b7b6c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b7b92:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b7b96:	42aa      	cmp	r2, r5
   b7b98:	bf28      	it	cs
   b7b9a:	462a      	movcs	r2, r5
   b7b9c:	4639      	mov	r1, r7
   b7b9e:	f00a fb15 	bl	c21cc <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b7ba2:	4638      	mov	r0, r7
   b7ba4:	f7fc fa7b 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b7ba8:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b7bac:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b7bb0:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b7bb4:	e7c4      	b.n	b7b40 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b7bb6:	bf00      	nop
   b7bb8:	000c4a74 	.word	0x000c4a74
   b7bbc:	000c4a9f 	.word	0x000c4a9f
   b7bc0:	000c4aca 	.word	0x000c4aca

000b7bc4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b7bc4:	290d      	cmp	r1, #13
   b7bc6:	f000 80cd 	beq.w	b7d64 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b7bca:	d809      	bhi.n	b7be0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b7bcc:	2902      	cmp	r1, #2
   b7bce:	f000 80a7 	beq.w	b7d20 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b7bd2:	2906      	cmp	r1, #6
   b7bd4:	f000 80be 	beq.w	b7d54 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b7bd8:	2901      	cmp	r1, #1
   b7bda:	d016      	beq.n	b7c0a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b7bdc:	2000      	movs	r0, #0
}
   b7bde:	4770      	bx	lr
  switch (Class)
   b7be0:	2913      	cmp	r1, #19
   b7be2:	f000 80d4 	beq.w	b7d8e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b7be6:	2928      	cmp	r1, #40	; 0x28
   b7be8:	f000 80dc 	beq.w	b7da4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b7bec:	2910      	cmp	r1, #16
   b7bee:	d1f5      	bne.n	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b7bf0:	2a10      	cmp	r2, #16
   b7bf2:	f000 80c9 	beq.w	b7d88 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b7bf6:	f200 80ba 	bhi.w	b7d6e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b7bfa:	2a02      	cmp	r2, #2
   b7bfc:	f000 80c1 	beq.w	b7d82 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b7c00:	2a03      	cmp	r2, #3
   b7c02:	d1eb      	bne.n	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b7c04:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b7c08:	e066      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7c0a:	2a26      	cmp	r2, #38	; 0x26
   b7c0c:	d854      	bhi.n	b7cb8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b7c0e:	2a00      	cmp	r2, #0
   b7c10:	d0e4      	beq.n	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7c12:	3a01      	subs	r2, #1
   b7c14:	2a25      	cmp	r2, #37	; 0x25
   b7c16:	d8e1      	bhi.n	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7c18:	a301      	add	r3, pc, #4	; (adr r3, b7c20 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b7c1a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b7c1e:	bf00      	nop
   b7c20:	000b7cd7 	.word	0x000b7cd7
   b7c24:	000b7bdd 	.word	0x000b7bdd
   b7c28:	000b7ce1 	.word	0x000b7ce1
   b7c2c:	000b7ce5 	.word	0x000b7ce5
   b7c30:	000b7ce9 	.word	0x000b7ce9
   b7c34:	000b7bdd 	.word	0x000b7bdd
   b7c38:	000b7ced 	.word	0x000b7ced
   b7c3c:	000b7bdd 	.word	0x000b7bdd
   b7c40:	000b7cf1 	.word	0x000b7cf1
   b7c44:	000b7bdd 	.word	0x000b7bdd
   b7c48:	000b7bdd 	.word	0x000b7bdd
   b7c4c:	000b7bdd 	.word	0x000b7bdd
   b7c50:	000b7bdd 	.word	0x000b7bdd
   b7c54:	000b7bdd 	.word	0x000b7bdd
   b7c58:	000b7bdd 	.word	0x000b7bdd
   b7c5c:	000b7bdd 	.word	0x000b7bdd
   b7c60:	000b7cf5 	.word	0x000b7cf5
   b7c64:	000b7cf9 	.word	0x000b7cf9
   b7c68:	000b7cfd 	.word	0x000b7cfd
   b7c6c:	000b7d01 	.word	0x000b7d01
   b7c70:	000b7bdd 	.word	0x000b7bdd
   b7c74:	000b7bdd 	.word	0x000b7bdd
   b7c78:	000b7d05 	.word	0x000b7d05
   b7c7c:	000b7bdd 	.word	0x000b7bdd
   b7c80:	000b7bdd 	.word	0x000b7bdd
   b7c84:	000b7bdd 	.word	0x000b7bdd
   b7c88:	000b7bdd 	.word	0x000b7bdd
   b7c8c:	000b7bdd 	.word	0x000b7bdd
   b7c90:	000b7bdd 	.word	0x000b7bdd
   b7c94:	000b7bdd 	.word	0x000b7bdd
   b7c98:	000b7bdd 	.word	0x000b7bdd
   b7c9c:	000b7bdd 	.word	0x000b7bdd
   b7ca0:	000b7d09 	.word	0x000b7d09
   b7ca4:	000b7d0d 	.word	0x000b7d0d
   b7ca8:	000b7bdd 	.word	0x000b7bdd
   b7cac:	000b7bdd 	.word	0x000b7bdd
   b7cb0:	000b7bdd 	.word	0x000b7bdd
   b7cb4:	000b7d11 	.word	0x000b7d11
   b7cb8:	2a3c      	cmp	r2, #60	; 0x3c
   b7cba:	d02d      	beq.n	b7d18 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b7cbc:	d805      	bhi.n	b7cca <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b7cbe:	2a35      	cmp	r2, #53	; 0x35
   b7cc0:	d028      	beq.n	b7d14 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b7cc2:	2a3b      	cmp	r2, #59	; 0x3b
   b7cc4:	d18a      	bne.n	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b7cc6:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b7cc8:	e006      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7cca:	2a60      	cmp	r2, #96	; 0x60
   b7ccc:	d026      	beq.n	b7d1c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b7cce:	2a61      	cmp	r2, #97	; 0x61
   b7cd0:	d184      	bne.n	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b7cd2:	6980      	ldr	r0, [r0, #24]
   b7cd4:	e000      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b7cd6:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b7cd8:	3800      	subs	r0, #0
   b7cda:	bf18      	it	ne
   b7cdc:	2001      	movne	r0, #1
   b7cde:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b7ce0:	6900      	ldr	r0, [r0, #16]
   b7ce2:	e7f9      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b7ce4:	6940      	ldr	r0, [r0, #20]
   b7ce6:	e7f7      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b7ce8:	69c0      	ldr	r0, [r0, #28]
   b7cea:	e7f5      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b7cec:	6a00      	ldr	r0, [r0, #32]
   b7cee:	e7f3      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b7cf0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7cf2:	e7f1      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b7cf4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7cf6:	e7ef      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b7cf8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b7cfa:	e7ed      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b7cfc:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7cfe:	e7eb      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b7d00:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b7d02:	e7e9      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b7d04:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7d06:	e7e7      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b7d08:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7d0a:	e7e5      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b7d0c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b7d0e:	e7e3      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b7d10:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b7d12:	e7e1      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b7d14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b7d16:	e7df      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b7d18:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b7d1a:	e7dd      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b7d1c:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b7d1e:	e7db      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7d20:	2a34      	cmp	r2, #52	; 0x34
   b7d22:	d015      	beq.n	b7d50 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b7d24:	d806      	bhi.n	b7d34 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b7d26:	2a13      	cmp	r2, #19
   b7d28:	d00b      	beq.n	b7d42 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b7d2a:	2a15      	cmp	r2, #21
   b7d2c:	f47f af56 	bne.w	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b7d30:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b7d32:	e7d1      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7d34:	2a72      	cmp	r2, #114	; 0x72
   b7d36:	d006      	beq.n	b7d46 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b7d38:	2a73      	cmp	r2, #115	; 0x73
   b7d3a:	f47f af4f 	bne.w	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b7d3e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b7d40:	e7ca      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b7d42:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b7d44:	e7c8      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b7d46:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b7d48:	2b00      	cmp	r3, #0
   b7d4a:	d13b      	bne.n	b7dc4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b7d4c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b7d4e:	e7c3      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b7d50:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b7d52:	e7c1      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7d54:	b122      	cbz	r2, b7d60 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b7d56:	2a08      	cmp	r2, #8
   b7d58:	f47f af40 	bne.w	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b7d5c:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b7d5e:	e7bb      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b7d60:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b7d62:	e7b9      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7d64:	2a03      	cmp	r2, #3
   b7d66:	f47f af39 	bne.w	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b7d6a:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b7d6c:	e7b4      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7d6e:	2a14      	cmp	r2, #20
   b7d70:	d005      	beq.n	b7d7e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b7d72:	2a15      	cmp	r2, #21
   b7d74:	f47f af32 	bne.w	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b7d78:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b7d7c:	e7ac      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b7d7e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b7d80:	e7aa      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b7d82:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b7d86:	e7a7      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b7d88:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b7d8c:	e7a4      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7d8e:	2a60      	cmp	r2, #96	; 0x60
   b7d90:	d005      	beq.n	b7d9e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b7d92:	2a80      	cmp	r2, #128	; 0x80
   b7d94:	f47f af22 	bne.w	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b7d98:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b7d9c:	e79c      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b7d9e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b7da2:	e799      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7da4:	2a01      	cmp	r2, #1
   b7da6:	d007      	beq.n	b7db8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b7da8:	2a02      	cmp	r2, #2
   b7daa:	d008      	beq.n	b7dbe <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b7dac:	2a00      	cmp	r2, #0
   b7dae:	f47f af15 	bne.w	b7bdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b7db2:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b7db6:	e78f      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b7db8:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b7dbc:	e78c      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b7dbe:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b7dc2:	e789      	b.n	b7cd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b7dc4:	2001      	movs	r0, #1
   b7dc6:	4770      	bx	lr

000b7dc8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b7dc8:	290d      	cmp	r1, #13
   b7dca:	d035      	beq.n	b7e38 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b7dcc:	d807      	bhi.n	b7dde <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b7dce:	2902      	cmp	r1, #2
   b7dd0:	d019      	beq.n	b7e06 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b7dd2:	2906      	cmp	r1, #6
   b7dd4:	d02a      	beq.n	b7e2c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b7dd6:	2901      	cmp	r1, #1
   b7dd8:	d00d      	beq.n	b7df6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b7dda:	2000      	movs	r0, #0
}
   b7ddc:	4770      	bx	lr
  switch (Class)
   b7dde:	2913      	cmp	r1, #19
   b7de0:	d02f      	beq.n	b7e42 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b7de2:	2928      	cmp	r1, #40	; 0x28
   b7de4:	d034      	beq.n	b7e50 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b7de6:	2910      	cmp	r1, #16
   b7de8:	d1f7      	bne.n	b7dda <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b7dea:	3a02      	subs	r2, #2
   b7dec:	b2d2      	uxtb	r2, r2
   b7dee:	2a13      	cmp	r2, #19
   b7df0:	d8f3      	bhi.n	b7dda <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b7df2:	4b1f      	ldr	r3, [pc, #124]	; (b7e70 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b7df4:	e004      	b.n	b7e00 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b7df6:	3a01      	subs	r2, #1
   b7df8:	b2d2      	uxtb	r2, r2
   b7dfa:	2a60      	cmp	r2, #96	; 0x60
   b7dfc:	d8ed      	bhi.n	b7dda <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b7dfe:	4b1d      	ldr	r3, [pc, #116]	; (b7e74 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b7e00:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b7e04:	4770      	bx	lr
    switch (ID)
   b7e06:	2a34      	cmp	r2, #52	; 0x34
   b7e08:	d027      	beq.n	b7e5a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b7e0a:	d807      	bhi.n	b7e1c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b7e0c:	2a13      	cmp	r2, #19
   b7e0e:	d026      	beq.n	b7e5e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b7e10:	2a15      	cmp	r2, #21
   b7e12:	bf14      	ite	ne
   b7e14:	2000      	movne	r0, #0
   b7e16:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b7e1a:	4770      	bx	lr
   b7e1c:	2a72      	cmp	r2, #114	; 0x72
   b7e1e:	d020      	beq.n	b7e62 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b7e20:	2a73      	cmp	r2, #115	; 0x73
   b7e22:	bf14      	ite	ne
   b7e24:	2000      	movne	r0, #0
   b7e26:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b7e2a:	4770      	bx	lr
    switch (ID)
   b7e2c:	b1e2      	cbz	r2, b7e68 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b7e2e:	2a08      	cmp	r2, #8
   b7e30:	bf14      	ite	ne
   b7e32:	2000      	movne	r0, #0
   b7e34:	2006      	moveq	r0, #6
   b7e36:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b7e38:	2a03      	cmp	r2, #3
   b7e3a:	bf14      	ite	ne
   b7e3c:	2000      	movne	r0, #0
   b7e3e:	201c      	moveq	r0, #28
   b7e40:	4770      	bx	lr
    switch (ID)
   b7e42:	2a60      	cmp	r2, #96	; 0x60
   b7e44:	d012      	beq.n	b7e6c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b7e46:	2a80      	cmp	r2, #128	; 0x80
   b7e48:	bf14      	ite	ne
   b7e4a:	2000      	movne	r0, #0
   b7e4c:	20a4      	moveq	r0, #164	; 0xa4
   b7e4e:	4770      	bx	lr
    switch (ID)
   b7e50:	2a02      	cmp	r2, #2
   b7e52:	d8c2      	bhi.n	b7dda <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b7e54:	4b08      	ldr	r3, [pc, #32]	; (b7e78 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b7e56:	5c98      	ldrb	r0, [r3, r2]
   b7e58:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b7e5a:	200c      	movs	r0, #12
   b7e5c:	4770      	bx	lr
   b7e5e:	2048      	movs	r0, #72	; 0x48
   b7e60:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b7e62:	f44f 7004 	mov.w	r0, #528	; 0x210
   b7e66:	4770      	bx	lr
   b7e68:	2014      	movs	r0, #20
   b7e6a:	4770      	bx	lr
   b7e6c:	2008      	movs	r0, #8
   b7e6e:	4770      	bx	lr
   b7e70:	000c578a 	.word	0x000c578a
   b7e74:	000c56c8 	.word	0x000c56c8
   b7e78:	000c57b2 	.word	0x000c57b2

000b7e7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b7e7c:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b7e7e:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b7e82:	07ca      	lsls	r2, r1, #31
   b7e84:	d415      	bmi.n	b7eb2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b7e86:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b7e8a:	4b59      	ldr	r3, [pc, #356]	; (b7ff0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b7e8c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b7e90:	429a      	cmp	r2, r3
   b7e92:	d101      	bne.n	b7e98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b7e94:	078b      	lsls	r3, r1, #30
   b7e96:	d40c      	bmi.n	b7eb2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b7e98:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b7e9c:	2b47      	cmp	r3, #71	; 0x47
   b7e9e:	d174      	bne.n	b7f8a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b7ea0:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b7ea4:	f245 1441 	movw	r4, #20801	; 0x5141
   b7ea8:	42a3      	cmp	r3, r4
   b7eaa:	d104      	bne.n	b7eb6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b7eac:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b7eb0:	d06b      	beq.n	b7f8a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b7eb2:	2001      	movs	r0, #1
   b7eb4:	e070      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b7eb6:	f245 1442 	movw	r4, #20802	; 0x5142
   b7eba:	42a3      	cmp	r3, r4
   b7ebc:	d102      	bne.n	b7ec4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b7ebe:	f011 0f08 	tst.w	r1, #8
   b7ec2:	e7f5      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b7ec4:	f245 3442 	movw	r4, #21314	; 0x5342
   b7ec8:	42a3      	cmp	r3, r4
   b7eca:	d102      	bne.n	b7ed2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b7ecc:	f011 0f10 	tst.w	r1, #16
   b7ed0:	e7ee      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b7ed2:	f244 1447 	movw	r4, #16711	; 0x4147
   b7ed6:	42a3      	cmp	r3, r4
   b7ed8:	d102      	bne.n	b7ee0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b7eda:	f011 0f20 	tst.w	r1, #32
   b7ede:	e7e7      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b7ee0:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b7ee4:	42a3      	cmp	r3, r4
   b7ee6:	d102      	bne.n	b7eee <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b7ee8:	f011 0f40 	tst.w	r1, #64	; 0x40
   b7eec:	e7e0      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b7eee:	f245 144c 	movw	r4, #20812	; 0x514c
   b7ef2:	42a3      	cmp	r3, r4
   b7ef4:	d102      	bne.n	b7efc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b7ef6:	f011 0f80 	tst.w	r1, #128	; 0x80
   b7efa:	e7d9      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b7efc:	f245 114e 	movw	r1, #20814	; 0x514e
   b7f00:	428b      	cmp	r3, r1
   b7f02:	d104      	bne.n	b7f0e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b7f04:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7f08:	f013 0f01 	tst.w	r3, #1
   b7f0c:	e7d0      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b7f0e:	f245 314e 	movw	r1, #21326	; 0x534e
   b7f12:	428b      	cmp	r3, r1
   b7f14:	d104      	bne.n	b7f20 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b7f16:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7f1a:	f013 0f02 	tst.w	r3, #2
   b7f1e:	e7c7      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b7f20:	f245 1150 	movw	r1, #20816	; 0x5150
   b7f24:	428b      	cmp	r3, r1
   b7f26:	d104      	bne.n	b7f32 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b7f28:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7f2c:	f013 0f04 	tst.w	r3, #4
   b7f30:	e7be      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b7f32:	f245 1151 	movw	r1, #20817	; 0x5151
   b7f36:	428b      	cmp	r3, r1
   b7f38:	d104      	bne.n	b7f44 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b7f3a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7f3e:	f013 0f08 	tst.w	r3, #8
   b7f42:	e7b5      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b7f44:	f245 3152 	movw	r1, #21330	; 0x5352
   b7f48:	428b      	cmp	r3, r1
   b7f4a:	d104      	bne.n	b7f56 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b7f4c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7f50:	f013 0f10 	tst.w	r3, #16
   b7f54:	e7ac      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b7f56:	f244 1153 	movw	r1, #16723	; 0x4153
   b7f5a:	428b      	cmp	r3, r1
   b7f5c:	d104      	bne.n	b7f68 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b7f5e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7f62:	f013 0f20 	tst.w	r3, #32
   b7f66:	e7a3      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b7f68:	f245 4153 	movw	r1, #21587	; 0x5453
   b7f6c:	428b      	cmp	r3, r1
   b7f6e:	d104      	bne.n	b7f7a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b7f70:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b7f74:	f013 0f40 	tst.w	r3, #64	; 0x40
   b7f78:	e79a      	b.n	b7eb0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b7f7a:	f245 6153 	movw	r1, #22099	; 0x5653
   b7f7e:	428b      	cmp	r3, r1
   b7f80:	d103      	bne.n	b7f8a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b7f82:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b7f86:	2b00      	cmp	r3, #0
   b7f88:	db93      	blt.n	b7eb2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b7f8a:	4b1a      	ldr	r3, [pc, #104]	; (b7ff4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b7f8c:	429a      	cmp	r2, r3
   b7f8e:	d104      	bne.n	b7f9a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b7f90:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7f94:	f000 0001 	and.w	r0, r0, #1
}
   b7f98:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b7f9a:	4b17      	ldr	r3, [pc, #92]	; (b7ff8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b7f9c:	429a      	cmp	r2, r3
   b7f9e:	d104      	bne.n	b7faa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b7fa0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7fa4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b7fa8:	e7f6      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b7faa:	4b14      	ldr	r3, [pc, #80]	; (b7ffc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b7fac:	429a      	cmp	r2, r3
   b7fae:	d104      	bne.n	b7fba <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b7fb0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7fb4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b7fb8:	e7ee      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b7fba:	4b11      	ldr	r3, [pc, #68]	; (b8000 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b7fbc:	429a      	cmp	r2, r3
   b7fbe:	d104      	bne.n	b7fca <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b7fc0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7fc4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b7fc8:	e7e6      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b7fca:	4b0e      	ldr	r3, [pc, #56]	; (b8004 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b7fcc:	429a      	cmp	r2, r3
   b7fce:	d104      	bne.n	b7fda <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b7fd0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7fd4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b7fd8:	e7de      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b7fda:	4b0b      	ldr	r3, [pc, #44]	; (b8008 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b7fdc:	429a      	cmp	r2, r3
   b7fde:	d104      	bne.n	b7fea <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b7fe0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b7fe4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b7fe8:	e7d6      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b7fea:	2000      	movs	r0, #0
   b7fec:	e7d4      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b7fee:	bf00      	nop
   b7ff0:	4d544400 	.word	0x4d544400
   b7ff4:	4d4c5200 	.word	0x4d4c5200
   b7ff8:	434d5200 	.word	0x434d5200
   b7ffc:	54585400 	.word	0x54585400
   b8000:	574c5600 	.word	0x574c5600
   b8004:	47545600 	.word	0x47545600
   b8008:	41445a00 	.word	0x41445a00

000b800c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b800c:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8010:	2b2a      	cmp	r3, #42	; 0x2a
   b8012:	d157      	bne.n	b80c4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8014:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b8018:	2b47      	cmp	r3, #71	; 0x47
   b801a:	d153      	bne.n	b80c4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b801c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8020:	4a29      	ldr	r2, [pc, #164]	; (b80c8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b8026:	4293      	cmp	r3, r2
   b8028:	d011      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b802a:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b802e:	2a47      	cmp	r2, #71	; 0x47
   b8030:	d11a      	bne.n	b8068 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8032:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b8036:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b803a:	3941      	subs	r1, #65	; 0x41
   b803c:	b289      	uxth	r1, r1
   b803e:	2910      	cmp	r1, #16
   b8040:	d907      	bls.n	b8052 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8042:	f022 0110 	bic.w	r1, r2, #16
   b8046:	f245 3042 	movw	r0, #21314	; 0x5342
   b804a:	4281      	cmp	r1, r0
   b804c:	d129      	bne.n	b80a2 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b804e:	2001      	movs	r0, #1
}
   b8050:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8052:	481e      	ldr	r0, [pc, #120]	; (b80cc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8054:	fa20 f101 	lsr.w	r1, r0, r1
   b8058:	07c9      	lsls	r1, r1, #31
   b805a:	d4f8      	bmi.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b805c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8060:	f245 4153 	movw	r1, #21587	; 0x5453
   b8064:	428a      	cmp	r2, r1
   b8066:	d0f2      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8068:	4a19      	ldr	r2, [pc, #100]	; (b80d0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b806a:	4293      	cmp	r3, r2
   b806c:	d0ef      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b806e:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8072:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8076:	4293      	cmp	r3, r2
   b8078:	d0e9      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b807a:	4a16      	ldr	r2, [pc, #88]	; (b80d4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b807c:	4293      	cmp	r3, r2
   b807e:	d0e6      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8080:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8084:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8088:	4293      	cmp	r3, r2
   b808a:	d0e0      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b808c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8090:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8094:	4293      	cmp	r3, r2
   b8096:	d0da      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8098:	480f      	ldr	r0, [pc, #60]	; (b80d8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b809a:	1a1b      	subs	r3, r3, r0
   b809c:	4258      	negs	r0, r3
   b809e:	4158      	adcs	r0, r3
   b80a0:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b80a2:	f244 1147 	movw	r1, #16711	; 0x4147
   b80a6:	428a      	cmp	r2, r1
   b80a8:	d0d1      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b80aa:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b80ae:	428a      	cmp	r2, r1
   b80b0:	d0cd      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b80b2:	f245 314e 	movw	r1, #21326	; 0x534e
   b80b6:	428a      	cmp	r2, r1
   b80b8:	d0c9      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b80ba:	f244 1153 	movw	r1, #16723	; 0x4153
   b80be:	428a      	cmp	r2, r1
   b80c0:	d0c5      	beq.n	b804e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b80c2:	e7cb      	b.n	b805c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b80c4:	2000      	movs	r0, #0
   b80c6:	4770      	bx	lr
   b80c8:	4d544400 	.word	0x4d544400
   b80cc:	0001a803 	.word	0x0001a803
   b80d0:	4d4c5200 	.word	0x4d4c5200
   b80d4:	54585400 	.word	0x54585400
   b80d8:	41445a00 	.word	0x41445a00

000b80dc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b80dc:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b80de:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b80e2:	07ca      	lsls	r2, r1, #31
   b80e4:	d415      	bmi.n	b8112 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b80e6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b80ea:	4b59      	ldr	r3, [pc, #356]	; (b8250 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b80ec:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b80f0:	429a      	cmp	r2, r3
   b80f2:	d101      	bne.n	b80f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b80f4:	078b      	lsls	r3, r1, #30
   b80f6:	d40c      	bmi.n	b8112 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b80f8:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b80fc:	2b47      	cmp	r3, #71	; 0x47
   b80fe:	d174      	bne.n	b81ea <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b8100:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8104:	f245 1441 	movw	r4, #20801	; 0x5141
   b8108:	42a3      	cmp	r3, r4
   b810a:	d104      	bne.n	b8116 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b810c:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8110:	d06b      	beq.n	b81ea <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8112:	2001      	movs	r0, #1
   b8114:	e070      	b.n	b81f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8116:	f245 1442 	movw	r4, #20802	; 0x5142
   b811a:	42a3      	cmp	r3, r4
   b811c:	d102      	bne.n	b8124 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b811e:	f011 0f08 	tst.w	r1, #8
   b8122:	e7f5      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8124:	f245 3442 	movw	r4, #21314	; 0x5342
   b8128:	42a3      	cmp	r3, r4
   b812a:	d102      	bne.n	b8132 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b812c:	f011 0f10 	tst.w	r1, #16
   b8130:	e7ee      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8132:	f244 1447 	movw	r4, #16711	; 0x4147
   b8136:	42a3      	cmp	r3, r4
   b8138:	d102      	bne.n	b8140 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b813a:	f011 0f20 	tst.w	r1, #32
   b813e:	e7e7      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8140:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8144:	42a3      	cmp	r3, r4
   b8146:	d102      	bne.n	b814e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8148:	f011 0f40 	tst.w	r1, #64	; 0x40
   b814c:	e7e0      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b814e:	f245 144c 	movw	r4, #20812	; 0x514c
   b8152:	42a3      	cmp	r3, r4
   b8154:	d102      	bne.n	b815c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8156:	f011 0f80 	tst.w	r1, #128	; 0x80
   b815a:	e7d9      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b815c:	f245 114e 	movw	r1, #20814	; 0x514e
   b8160:	428b      	cmp	r3, r1
   b8162:	d104      	bne.n	b816e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8164:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8168:	f013 0f01 	tst.w	r3, #1
   b816c:	e7d0      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b816e:	f245 314e 	movw	r1, #21326	; 0x534e
   b8172:	428b      	cmp	r3, r1
   b8174:	d104      	bne.n	b8180 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8176:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b817a:	f013 0f02 	tst.w	r3, #2
   b817e:	e7c7      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8180:	f245 1150 	movw	r1, #20816	; 0x5150
   b8184:	428b      	cmp	r3, r1
   b8186:	d104      	bne.n	b8192 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8188:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b818c:	f013 0f04 	tst.w	r3, #4
   b8190:	e7be      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8192:	f245 1151 	movw	r1, #20817	; 0x5151
   b8196:	428b      	cmp	r3, r1
   b8198:	d104      	bne.n	b81a4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b819a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b819e:	f013 0f08 	tst.w	r3, #8
   b81a2:	e7b5      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b81a4:	f245 3152 	movw	r1, #21330	; 0x5352
   b81a8:	428b      	cmp	r3, r1
   b81aa:	d104      	bne.n	b81b6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b81ac:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b81b0:	f013 0f10 	tst.w	r3, #16
   b81b4:	e7ac      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b81b6:	f244 1153 	movw	r1, #16723	; 0x4153
   b81ba:	428b      	cmp	r3, r1
   b81bc:	d104      	bne.n	b81c8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b81be:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b81c2:	f013 0f20 	tst.w	r3, #32
   b81c6:	e7a3      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b81c8:	f245 4153 	movw	r1, #21587	; 0x5453
   b81cc:	428b      	cmp	r3, r1
   b81ce:	d104      	bne.n	b81da <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b81d0:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b81d4:	f013 0f40 	tst.w	r3, #64	; 0x40
   b81d8:	e79a      	b.n	b8110 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b81da:	f245 6153 	movw	r1, #22099	; 0x5653
   b81de:	428b      	cmp	r3, r1
   b81e0:	d103      	bne.n	b81ea <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b81e2:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b81e6:	2b00      	cmp	r3, #0
   b81e8:	db93      	blt.n	b8112 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b81ea:	4b1a      	ldr	r3, [pc, #104]	; (b8254 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b81ec:	429a      	cmp	r2, r3
   b81ee:	d104      	bne.n	b81fa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b81f0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b81f4:	f000 0001 	and.w	r0, r0, #1
}
   b81f8:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b81fa:	4b17      	ldr	r3, [pc, #92]	; (b8258 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b81fc:	429a      	cmp	r2, r3
   b81fe:	d104      	bne.n	b820a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b8200:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8204:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8208:	e7f6      	b.n	b81f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b820a:	4b14      	ldr	r3, [pc, #80]	; (b825c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b820c:	429a      	cmp	r2, r3
   b820e:	d104      	bne.n	b821a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8210:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8214:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8218:	e7ee      	b.n	b81f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b821a:	4b11      	ldr	r3, [pc, #68]	; (b8260 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b821c:	429a      	cmp	r2, r3
   b821e:	d104      	bne.n	b822a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8220:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8224:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8228:	e7e6      	b.n	b81f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b822a:	4b0e      	ldr	r3, [pc, #56]	; (b8264 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b822c:	429a      	cmp	r2, r3
   b822e:	d104      	bne.n	b823a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8230:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8234:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8238:	e7de      	b.n	b81f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b823a:	4b0b      	ldr	r3, [pc, #44]	; (b8268 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b823c:	429a      	cmp	r2, r3
   b823e:	d104      	bne.n	b824a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8240:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8244:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8248:	e7d6      	b.n	b81f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b824a:	2000      	movs	r0, #0
   b824c:	e7d4      	b.n	b81f8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b824e:	bf00      	nop
   b8250:	4d544400 	.word	0x4d544400
   b8254:	4d4c5200 	.word	0x4d4c5200
   b8258:	434d5200 	.word	0x434d5200
   b825c:	54585400 	.word	0x54585400
   b8260:	574c5600 	.word	0x574c5600
   b8264:	47545600 	.word	0x47545600
   b8268:	41445a00 	.word	0x41445a00

000b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b826c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8270:	b110      	cbz	r0, b8278 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8272:	6803      	ldr	r3, [r0, #0]
   b8274:	689b      	ldr	r3, [r3, #8]
   b8276:	4718      	bx	r3
}
   b8278:	4770      	bx	lr
	...

000b827c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b827c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b827e:	4b3d      	ldr	r3, [pc, #244]	; (b8374 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8280:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8282:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8286:	6818      	ldr	r0, [r3, #0]
   b8288:	9000      	str	r0, [sp, #0]
   b828a:	889b      	ldrh	r3, [r3, #4]
   b828c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8290:	2205      	movs	r2, #5
   b8292:	4629      	mov	r1, r5
   b8294:	4668      	mov	r0, sp
   b8296:	f009 ff89 	bl	c21ac <memcmp>
   b829a:	b928      	cbnz	r0, b82a8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b829c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b82a0:	b113      	cbz	r3, b82a8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b82a2:	2001      	movs	r0, #1
}
   b82a4:	b003      	add	sp, #12
   b82a6:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b82a8:	4933      	ldr	r1, [pc, #204]	; (b8378 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b82aa:	4668      	mov	r0, sp
   b82ac:	f00a f81c 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b82b0:	2205      	movs	r2, #5
   b82b2:	4629      	mov	r1, r5
   b82b4:	4668      	mov	r0, sp
   b82b6:	f009 ff79 	bl	c21ac <memcmp>
   b82ba:	b918      	cbnz	r0, b82c4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b82bc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b82c0:	2b00      	cmp	r3, #0
   b82c2:	d1ee      	bne.n	b82a2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b82c4:	492d      	ldr	r1, [pc, #180]	; (b837c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b82c6:	4668      	mov	r0, sp
   b82c8:	f00a f80e 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b82cc:	2205      	movs	r2, #5
   b82ce:	4629      	mov	r1, r5
   b82d0:	4668      	mov	r0, sp
   b82d2:	f009 ff6b 	bl	c21ac <memcmp>
   b82d6:	b918      	cbnz	r0, b82e0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b82d8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b82dc:	2b00      	cmp	r3, #0
   b82de:	d1e0      	bne.n	b82a2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b82e0:	4927      	ldr	r1, [pc, #156]	; (b8380 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b82e2:	4668      	mov	r0, sp
   b82e4:	f00a f800 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b82e8:	2205      	movs	r2, #5
   b82ea:	4629      	mov	r1, r5
   b82ec:	4668      	mov	r0, sp
   b82ee:	f009 ff5d 	bl	c21ac <memcmp>
   b82f2:	b918      	cbnz	r0, b82fc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b82f4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b82f8:	2b00      	cmp	r3, #0
   b82fa:	d1d2      	bne.n	b82a2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b82fc:	4921      	ldr	r1, [pc, #132]	; (b8384 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b82fe:	4668      	mov	r0, sp
   b8300:	f009 fff2 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8304:	2205      	movs	r2, #5
   b8306:	4629      	mov	r1, r5
   b8308:	4668      	mov	r0, sp
   b830a:	f009 ff4f 	bl	c21ac <memcmp>
   b830e:	b918      	cbnz	r0, b8318 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8310:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8314:	2b00      	cmp	r3, #0
   b8316:	d1c4      	bne.n	b82a2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b8318:	491b      	ldr	r1, [pc, #108]	; (b8388 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b831a:	4668      	mov	r0, sp
   b831c:	f009 ffe4 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8320:	2205      	movs	r2, #5
   b8322:	4629      	mov	r1, r5
   b8324:	4668      	mov	r0, sp
   b8326:	f009 ff41 	bl	c21ac <memcmp>
   b832a:	b918      	cbnz	r0, b8334 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b832c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8330:	2b00      	cmp	r3, #0
   b8332:	d1b6      	bne.n	b82a2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8334:	4915      	ldr	r1, [pc, #84]	; (b838c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b8336:	4668      	mov	r0, sp
   b8338:	f009 ffd6 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b833c:	2205      	movs	r2, #5
   b833e:	4629      	mov	r1, r5
   b8340:	4668      	mov	r0, sp
   b8342:	f009 ff33 	bl	c21ac <memcmp>
   b8346:	b918      	cbnz	r0, b8350 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b8348:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b834c:	2b00      	cmp	r3, #0
   b834e:	d1a8      	bne.n	b82a2 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8350:	490f      	ldr	r1, [pc, #60]	; (b8390 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8352:	4668      	mov	r0, sp
   b8354:	f009 ffc8 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8358:	2205      	movs	r2, #5
   b835a:	4629      	mov	r1, r5
   b835c:	4668      	mov	r0, sp
   b835e:	f009 ff25 	bl	c21ac <memcmp>
   b8362:	b928      	cbnz	r0, b8370 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8364:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8368:	3800      	subs	r0, #0
   b836a:	bf18      	it	ne
   b836c:	2001      	movne	r0, #1
   b836e:	e799      	b.n	b82a4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8370:	2000      	movs	r0, #0
   b8372:	e797      	b.n	b82a4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8374:	000c4b20 	.word	0x000c4b20
   b8378:	000c4af6 	.word	0x000c4af6
   b837c:	000c4afc 	.word	0x000c4afc
   b8380:	000c4b02 	.word	0x000c4b02
   b8384:	000c4b08 	.word	0x000c4b08
   b8388:	000c4b0e 	.word	0x000c4b0e
   b838c:	000c4b14 	.word	0x000c4b14
   b8390:	000c4b1a 	.word	0x000c4b1a

000b8394 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8394:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8396:	4b62      	ldr	r3, [pc, #392]	; (b8520 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b8398:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b839a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b839e:	6818      	ldr	r0, [r3, #0]
   b83a0:	9000      	str	r0, [sp, #0]
   b83a2:	889b      	ldrh	r3, [r3, #4]
   b83a4:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83a8:	2205      	movs	r2, #5
   b83aa:	4629      	mov	r1, r5
   b83ac:	4668      	mov	r0, sp
   b83ae:	f009 fefd 	bl	c21ac <memcmp>
   b83b2:	b978      	cbnz	r0, b83d4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b83b4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b83b8:	b163      	cbz	r3, b83d4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b83ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b83be:	b14a      	cbz	r2, b83d4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b83c0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b83c4:	2a00      	cmp	r2, #0
   b83c6:	f040 80a3 	bne.w	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b83ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b83ce:	2b00      	cmp	r3, #0
   b83d0:	f040 809e 	bne.w	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b83d4:	4953      	ldr	r1, [pc, #332]	; (b8524 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b83d6:	4668      	mov	r0, sp
   b83d8:	f009 ff86 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b83dc:	2205      	movs	r2, #5
   b83de:	4629      	mov	r1, r5
   b83e0:	4668      	mov	r0, sp
   b83e2:	f009 fee3 	bl	c21ac <memcmp>
   b83e6:	b978      	cbnz	r0, b8408 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b83e8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b83ec:	b163      	cbz	r3, b8408 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b83ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b83f2:	b14a      	cbz	r2, b8408 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b83f4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b83f8:	2a00      	cmp	r2, #0
   b83fa:	f040 8089 	bne.w	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b83fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8402:	2b00      	cmp	r3, #0
   b8404:	f040 8084 	bne.w	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b8408:	4947      	ldr	r1, [pc, #284]	; (b8528 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b840a:	4668      	mov	r0, sp
   b840c:	f009 ff6c 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8410:	2205      	movs	r2, #5
   b8412:	4629      	mov	r1, r5
   b8414:	4668      	mov	r0, sp
   b8416:	f009 fec9 	bl	c21ac <memcmp>
   b841a:	b968      	cbnz	r0, b8438 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b841c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8420:	b153      	cbz	r3, b8438 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8422:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8426:	b13a      	cbz	r2, b8438 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b8428:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b842c:	2a00      	cmp	r2, #0
   b842e:	d16f      	bne.n	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8430:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8434:	2b00      	cmp	r3, #0
   b8436:	d16b      	bne.n	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b8438:	493c      	ldr	r1, [pc, #240]	; (b852c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b843a:	4668      	mov	r0, sp
   b843c:	f009 ff54 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8440:	2205      	movs	r2, #5
   b8442:	4629      	mov	r1, r5
   b8444:	4668      	mov	r0, sp
   b8446:	f009 feb1 	bl	c21ac <memcmp>
   b844a:	b968      	cbnz	r0, b8468 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b844c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8450:	b153      	cbz	r3, b8468 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8452:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8456:	b13a      	cbz	r2, b8468 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b8458:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b845c:	2a00      	cmp	r2, #0
   b845e:	d157      	bne.n	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8460:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8464:	2b00      	cmp	r3, #0
   b8466:	d153      	bne.n	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b8468:	4931      	ldr	r1, [pc, #196]	; (b8530 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b846a:	4668      	mov	r0, sp
   b846c:	f009 ff3c 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8470:	2205      	movs	r2, #5
   b8472:	4629      	mov	r1, r5
   b8474:	4668      	mov	r0, sp
   b8476:	f009 fe99 	bl	c21ac <memcmp>
   b847a:	b968      	cbnz	r0, b8498 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b847c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8480:	b153      	cbz	r3, b8498 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8482:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8486:	b13a      	cbz	r2, b8498 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b8488:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b848c:	2a00      	cmp	r2, #0
   b848e:	d13f      	bne.n	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8490:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8494:	2b00      	cmp	r3, #0
   b8496:	d13b      	bne.n	b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b8498:	4926      	ldr	r1, [pc, #152]	; (b8534 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b849a:	4668      	mov	r0, sp
   b849c:	f009 ff24 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b84a0:	2205      	movs	r2, #5
   b84a2:	4629      	mov	r1, r5
   b84a4:	4668      	mov	r0, sp
   b84a6:	f009 fe81 	bl	c21ac <memcmp>
   b84aa:	b958      	cbnz	r0, b84c4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b84ac:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b84b0:	b143      	cbz	r3, b84c4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b84b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b84b6:	b12a      	cbz	r2, b84c4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b84b8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b84bc:	bb42      	cbnz	r2, b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b84be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b84c2:	bb2b      	cbnz	r3, b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b84c4:	491c      	ldr	r1, [pc, #112]	; (b8538 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b84c6:	4668      	mov	r0, sp
   b84c8:	f009 ff0e 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b84cc:	2205      	movs	r2, #5
   b84ce:	4629      	mov	r1, r5
   b84d0:	4668      	mov	r0, sp
   b84d2:	f009 fe6b 	bl	c21ac <memcmp>
   b84d6:	b940      	cbnz	r0, b84ea <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b84d8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b84dc:	b12b      	cbz	r3, b84ea <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b84de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b84e0:	b11a      	cbz	r2, b84ea <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b84e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b84e4:	b9a2      	cbnz	r2, b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b84e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b84e8:	b993      	cbnz	r3, b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b84ea:	4914      	ldr	r1, [pc, #80]	; (b853c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b84ec:	4668      	mov	r0, sp
   b84ee:	f009 fefb 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b84f2:	2205      	movs	r2, #5
   b84f4:	4629      	mov	r1, r5
   b84f6:	4668      	mov	r0, sp
   b84f8:	f009 fe58 	bl	c21ac <memcmp>
   b84fc:	b958      	cbnz	r0, b8516 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b84fe:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8502:	b153      	cbz	r3, b851a <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b8504:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8506:	b120      	cbz	r0, b8512 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b8508:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b850a:	b90a      	cbnz	r2, b8510 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b850c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b850e:	b100      	cbz	r0, b8512 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b8510:	2001      	movs	r0, #1
}
   b8512:	b003      	add	sp, #12
   b8514:	bd30      	pop	{r4, r5, pc}
  return false;
   b8516:	2000      	movs	r0, #0
   b8518:	e7fb      	b.n	b8512 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b851a:	4618      	mov	r0, r3
   b851c:	e7f9      	b.n	b8512 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b851e:	bf00      	nop
   b8520:	000c4b20 	.word	0x000c4b20
   b8524:	000c4af6 	.word	0x000c4af6
   b8528:	000c4afc 	.word	0x000c4afc
   b852c:	000c4b02 	.word	0x000c4b02
   b8530:	000c4b08 	.word	0x000c4b08
   b8534:	000c4b0e 	.word	0x000c4b0e
   b8538:	000c4b14 	.word	0x000c4b14
   b853c:	000c4b1a 	.word	0x000c4b1a

000b8540 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8540:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8542:	4b38      	ldr	r3, [pc, #224]	; (b8624 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8544:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8546:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b854a:	6818      	ldr	r0, [r3, #0]
   b854c:	9000      	str	r0, [sp, #0]
   b854e:	889b      	ldrh	r3, [r3, #4]
   b8550:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8554:	2205      	movs	r2, #5
   b8556:	4629      	mov	r1, r5
   b8558:	4668      	mov	r0, sp
   b855a:	f009 fe27 	bl	c21ac <memcmp>
   b855e:	b920      	cbnz	r0, b856a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8560:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8564:	3001      	adds	r0, #1
}
   b8566:	b003      	add	sp, #12
   b8568:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b856a:	492f      	ldr	r1, [pc, #188]	; (b8628 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b856c:	4668      	mov	r0, sp
   b856e:	f009 febb 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8572:	2205      	movs	r2, #5
   b8574:	4629      	mov	r1, r5
   b8576:	4668      	mov	r0, sp
   b8578:	f009 fe18 	bl	c21ac <memcmp>
   b857c:	b910      	cbnz	r0, b8584 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b857e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8582:	e7ef      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8584:	4929      	ldr	r1, [pc, #164]	; (b862c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b8586:	4668      	mov	r0, sp
   b8588:	f009 feae 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b858c:	2205      	movs	r2, #5
   b858e:	4629      	mov	r1, r5
   b8590:	4668      	mov	r0, sp
   b8592:	f009 fe0b 	bl	c21ac <memcmp>
   b8596:	b910      	cbnz	r0, b859e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b8598:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b859c:	e7e2      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b859e:	4924      	ldr	r1, [pc, #144]	; (b8630 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b85a0:	4668      	mov	r0, sp
   b85a2:	f009 fea1 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85a6:	2205      	movs	r2, #5
   b85a8:	4629      	mov	r1, r5
   b85aa:	4668      	mov	r0, sp
   b85ac:	f009 fdfe 	bl	c21ac <memcmp>
   b85b0:	b910      	cbnz	r0, b85b8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b85b2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b85b6:	e7d5      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b85b8:	491e      	ldr	r1, [pc, #120]	; (b8634 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b85ba:	4668      	mov	r0, sp
   b85bc:	f009 fe94 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85c0:	2205      	movs	r2, #5
   b85c2:	4629      	mov	r1, r5
   b85c4:	4668      	mov	r0, sp
   b85c6:	f009 fdf1 	bl	c21ac <memcmp>
   b85ca:	b910      	cbnz	r0, b85d2 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b85cc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b85d0:	e7c8      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b85d2:	4919      	ldr	r1, [pc, #100]	; (b8638 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b85d4:	4668      	mov	r0, sp
   b85d6:	f009 fe87 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85da:	2205      	movs	r2, #5
   b85dc:	4629      	mov	r1, r5
   b85de:	4668      	mov	r0, sp
   b85e0:	f009 fde4 	bl	c21ac <memcmp>
   b85e4:	b910      	cbnz	r0, b85ec <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b85e6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b85ea:	e7bb      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b85ec:	4913      	ldr	r1, [pc, #76]	; (b863c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b85ee:	4668      	mov	r0, sp
   b85f0:	f009 fe7a 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85f4:	2205      	movs	r2, #5
   b85f6:	4629      	mov	r1, r5
   b85f8:	4668      	mov	r0, sp
   b85fa:	f009 fdd7 	bl	c21ac <memcmp>
   b85fe:	b910      	cbnz	r0, b8606 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b8600:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8604:	e7ae      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8606:	490e      	ldr	r1, [pc, #56]	; (b8640 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b8608:	4668      	mov	r0, sp
   b860a:	f009 fe6d 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b860e:	2205      	movs	r2, #5
   b8610:	4629      	mov	r1, r5
   b8612:	4668      	mov	r0, sp
   b8614:	f009 fdca 	bl	c21ac <memcmp>
   b8618:	b910      	cbnz	r0, b8620 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b861a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b861e:	e7a1      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b8620:	2000      	movs	r0, #0
   b8622:	e7a0      	b.n	b8566 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b8624:	000c4b20 	.word	0x000c4b20
   b8628:	000c4af6 	.word	0x000c4af6
   b862c:	000c4afc 	.word	0x000c4afc
   b8630:	000c4b02 	.word	0x000c4b02
   b8634:	000c4b08 	.word	0x000c4b08
   b8638:	000c4b0e 	.word	0x000c4b0e
   b863c:	000c4b14 	.word	0x000c4b14
   b8640:	000c4b1a 	.word	0x000c4b1a

000b8644 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8644:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8646:	4b38      	ldr	r3, [pc, #224]	; (b8728 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b8648:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b864a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b864e:	6818      	ldr	r0, [r3, #0]
   b8650:	9000      	str	r0, [sp, #0]
   b8652:	889b      	ldrh	r3, [r3, #4]
   b8654:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8658:	2205      	movs	r2, #5
   b865a:	4629      	mov	r1, r5
   b865c:	4668      	mov	r0, sp
   b865e:	f009 fda5 	bl	c21ac <memcmp>
   b8662:	b920      	cbnz	r0, b866e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8664:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8668:	3002      	adds	r0, #2
}
   b866a:	b003      	add	sp, #12
   b866c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b866e:	492f      	ldr	r1, [pc, #188]	; (b872c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8670:	4668      	mov	r0, sp
   b8672:	f009 fe39 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8676:	2205      	movs	r2, #5
   b8678:	4629      	mov	r1, r5
   b867a:	4668      	mov	r0, sp
   b867c:	f009 fd96 	bl	c21ac <memcmp>
   b8680:	b910      	cbnz	r0, b8688 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8682:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8686:	e7ef      	b.n	b8668 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8688:	4929      	ldr	r1, [pc, #164]	; (b8730 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b868a:	4668      	mov	r0, sp
   b868c:	f009 fe2c 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8690:	2205      	movs	r2, #5
   b8692:	4629      	mov	r1, r5
   b8694:	4668      	mov	r0, sp
   b8696:	f009 fd89 	bl	c21ac <memcmp>
   b869a:	b910      	cbnz	r0, b86a2 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b869c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b86a0:	e7e2      	b.n	b8668 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b86a2:	4924      	ldr	r1, [pc, #144]	; (b8734 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b86a4:	4668      	mov	r0, sp
   b86a6:	f009 fe1f 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86aa:	2205      	movs	r2, #5
   b86ac:	4629      	mov	r1, r5
   b86ae:	4668      	mov	r0, sp
   b86b0:	f009 fd7c 	bl	c21ac <memcmp>
   b86b4:	b910      	cbnz	r0, b86bc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b86b6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b86ba:	e7d5      	b.n	b8668 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b86bc:	491e      	ldr	r1, [pc, #120]	; (b8738 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b86be:	4668      	mov	r0, sp
   b86c0:	f009 fe12 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86c4:	2205      	movs	r2, #5
   b86c6:	4629      	mov	r1, r5
   b86c8:	4668      	mov	r0, sp
   b86ca:	f009 fd6f 	bl	c21ac <memcmp>
   b86ce:	b910      	cbnz	r0, b86d6 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b86d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b86d4:	e7c8      	b.n	b8668 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b86d6:	4919      	ldr	r1, [pc, #100]	; (b873c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b86d8:	4668      	mov	r0, sp
   b86da:	f009 fe05 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86de:	2205      	movs	r2, #5
   b86e0:	4629      	mov	r1, r5
   b86e2:	4668      	mov	r0, sp
   b86e4:	f009 fd62 	bl	c21ac <memcmp>
   b86e8:	b910      	cbnz	r0, b86f0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b86ea:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b86ee:	e7bb      	b.n	b8668 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b86f0:	4913      	ldr	r1, [pc, #76]	; (b8740 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b86f2:	4668      	mov	r0, sp
   b86f4:	f009 fdf8 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86f8:	2205      	movs	r2, #5
   b86fa:	4629      	mov	r1, r5
   b86fc:	4668      	mov	r0, sp
   b86fe:	f009 fd55 	bl	c21ac <memcmp>
   b8702:	b910      	cbnz	r0, b870a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b8704:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8708:	e7ae      	b.n	b8668 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b870a:	490e      	ldr	r1, [pc, #56]	; (b8744 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b870c:	4668      	mov	r0, sp
   b870e:	f009 fdeb 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8712:	2205      	movs	r2, #5
   b8714:	4629      	mov	r1, r5
   b8716:	4668      	mov	r0, sp
   b8718:	f009 fd48 	bl	c21ac <memcmp>
   b871c:	b910      	cbnz	r0, b8724 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b871e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8722:	e7a1      	b.n	b8668 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b8724:	2000      	movs	r0, #0
   b8726:	e7a0      	b.n	b866a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b8728:	000c4b20 	.word	0x000c4b20
   b872c:	000c4af6 	.word	0x000c4af6
   b8730:	000c4afc 	.word	0x000c4afc
   b8734:	000c4b02 	.word	0x000c4b02
   b8738:	000c4b08 	.word	0x000c4b08
   b873c:	000c4b0e 	.word	0x000c4b0e
   b8740:	000c4b14 	.word	0x000c4b14
   b8744:	000c4b1a 	.word	0x000c4b1a

000b8748 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b8748:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b874a:	4b39      	ldr	r3, [pc, #228]	; (b8830 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b874c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b874e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8752:	6818      	ldr	r0, [r3, #0]
   b8754:	9000      	str	r0, [sp, #0]
   b8756:	889b      	ldrh	r3, [r3, #4]
   b8758:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b875c:	2205      	movs	r2, #5
   b875e:	4629      	mov	r1, r5
   b8760:	4668      	mov	r0, sp
   b8762:	f009 fd23 	bl	c21ac <memcmp>
   b8766:	b920      	cbnz	r0, b8772 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8768:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b876c:	3066      	adds	r0, #102	; 0x66
}
   b876e:	b003      	add	sp, #12
   b8770:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8772:	4930      	ldr	r1, [pc, #192]	; (b8834 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8774:	4668      	mov	r0, sp
   b8776:	f009 fdb7 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b877a:	2205      	movs	r2, #5
   b877c:	4629      	mov	r1, r5
   b877e:	4668      	mov	r0, sp
   b8780:	f009 fd14 	bl	c21ac <memcmp>
   b8784:	b910      	cbnz	r0, b878c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b8786:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b878a:	e7ef      	b.n	b876c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b878c:	492a      	ldr	r1, [pc, #168]	; (b8838 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b878e:	4668      	mov	r0, sp
   b8790:	f009 fdaa 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8794:	2205      	movs	r2, #5
   b8796:	4629      	mov	r1, r5
   b8798:	4668      	mov	r0, sp
   b879a:	f009 fd07 	bl	c21ac <memcmp>
   b879e:	b910      	cbnz	r0, b87a6 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b87a0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b87a4:	e7e2      	b.n	b876c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b87a6:	4925      	ldr	r1, [pc, #148]	; (b883c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b87a8:	4668      	mov	r0, sp
   b87aa:	f009 fd9d 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87ae:	2205      	movs	r2, #5
   b87b0:	4629      	mov	r1, r5
   b87b2:	4668      	mov	r0, sp
   b87b4:	f009 fcfa 	bl	c21ac <memcmp>
   b87b8:	b910      	cbnz	r0, b87c0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b87ba:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b87be:	e7d5      	b.n	b876c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b87c0:	491f      	ldr	r1, [pc, #124]	; (b8840 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b87c2:	4668      	mov	r0, sp
   b87c4:	f009 fd90 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87c8:	2205      	movs	r2, #5
   b87ca:	4629      	mov	r1, r5
   b87cc:	4668      	mov	r0, sp
   b87ce:	f009 fced 	bl	c21ac <memcmp>
   b87d2:	b910      	cbnz	r0, b87da <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b87d4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b87d8:	e7c8      	b.n	b876c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b87da:	491a      	ldr	r1, [pc, #104]	; (b8844 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b87dc:	4668      	mov	r0, sp
   b87de:	f009 fd83 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87e2:	2205      	movs	r2, #5
   b87e4:	4629      	mov	r1, r5
   b87e6:	4668      	mov	r0, sp
   b87e8:	f009 fce0 	bl	c21ac <memcmp>
   b87ec:	b910      	cbnz	r0, b87f4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b87ee:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b87f2:	e7bb      	b.n	b876c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b87f4:	4914      	ldr	r1, [pc, #80]	; (b8848 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b87f6:	4668      	mov	r0, sp
   b87f8:	f009 fd76 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87fc:	2205      	movs	r2, #5
   b87fe:	4629      	mov	r1, r5
   b8800:	4668      	mov	r0, sp
   b8802:	f009 fcd3 	bl	c21ac <memcmp>
   b8806:	b918      	cbnz	r0, b8810 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b8808:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b880c:	3034      	adds	r0, #52	; 0x34
   b880e:	e7ae      	b.n	b876e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8810:	490e      	ldr	r1, [pc, #56]	; (b884c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8812:	4668      	mov	r0, sp
   b8814:	f009 fd68 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8818:	2205      	movs	r2, #5
   b881a:	4629      	mov	r1, r5
   b881c:	4668      	mov	r0, sp
   b881e:	f009 fcc5 	bl	c21ac <memcmp>
   b8822:	b910      	cbnz	r0, b882a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8824:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8828:	e7f0      	b.n	b880c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b882a:	2000      	movs	r0, #0
   b882c:	e79f      	b.n	b876e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b882e:	bf00      	nop
   b8830:	000c4b20 	.word	0x000c4b20
   b8834:	000c4af6 	.word	0x000c4af6
   b8838:	000c4afc 	.word	0x000c4afc
   b883c:	000c4b02 	.word	0x000c4b02
   b8840:	000c4b08 	.word	0x000c4b08
   b8844:	000c4b0e 	.word	0x000c4b0e
   b8848:	000c4b14 	.word	0x000c4b14
   b884c:	000c4b1a 	.word	0x000c4b1a

000b8850 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b8850:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8852:	4b39      	ldr	r3, [pc, #228]	; (b8938 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b8854:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8856:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b885a:	6818      	ldr	r0, [r3, #0]
   b885c:	9000      	str	r0, [sp, #0]
   b885e:	889b      	ldrh	r3, [r3, #4]
   b8860:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8864:	2205      	movs	r2, #5
   b8866:	4629      	mov	r1, r5
   b8868:	4668      	mov	r0, sp
   b886a:	f009 fc9f 	bl	c21ac <memcmp>
   b886e:	b920      	cbnz	r0, b887a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8870:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8874:	3067      	adds	r0, #103	; 0x67
}
   b8876:	b003      	add	sp, #12
   b8878:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b887a:	4930      	ldr	r1, [pc, #192]	; (b893c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b887c:	4668      	mov	r0, sp
   b887e:	f009 fd33 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8882:	2205      	movs	r2, #5
   b8884:	4629      	mov	r1, r5
   b8886:	4668      	mov	r0, sp
   b8888:	f009 fc90 	bl	c21ac <memcmp>
   b888c:	b910      	cbnz	r0, b8894 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b888e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8892:	e7ef      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8894:	492a      	ldr	r1, [pc, #168]	; (b8940 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b8896:	4668      	mov	r0, sp
   b8898:	f009 fd26 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b889c:	2205      	movs	r2, #5
   b889e:	4629      	mov	r1, r5
   b88a0:	4668      	mov	r0, sp
   b88a2:	f009 fc83 	bl	c21ac <memcmp>
   b88a6:	b910      	cbnz	r0, b88ae <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b88a8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b88ac:	e7e2      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b88ae:	4925      	ldr	r1, [pc, #148]	; (b8944 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b88b0:	4668      	mov	r0, sp
   b88b2:	f009 fd19 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88b6:	2205      	movs	r2, #5
   b88b8:	4629      	mov	r1, r5
   b88ba:	4668      	mov	r0, sp
   b88bc:	f009 fc76 	bl	c21ac <memcmp>
   b88c0:	b910      	cbnz	r0, b88c8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b88c2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b88c6:	e7d5      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b88c8:	491f      	ldr	r1, [pc, #124]	; (b8948 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b88ca:	4668      	mov	r0, sp
   b88cc:	f009 fd0c 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88d0:	2205      	movs	r2, #5
   b88d2:	4629      	mov	r1, r5
   b88d4:	4668      	mov	r0, sp
   b88d6:	f009 fc69 	bl	c21ac <memcmp>
   b88da:	b910      	cbnz	r0, b88e2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b88dc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b88e0:	e7c8      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b88e2:	491a      	ldr	r1, [pc, #104]	; (b894c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b88e4:	4668      	mov	r0, sp
   b88e6:	f009 fcff 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88ea:	2205      	movs	r2, #5
   b88ec:	4629      	mov	r1, r5
   b88ee:	4668      	mov	r0, sp
   b88f0:	f009 fc5c 	bl	c21ac <memcmp>
   b88f4:	b910      	cbnz	r0, b88fc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b88f6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b88fa:	e7bb      	b.n	b8874 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b88fc:	4914      	ldr	r1, [pc, #80]	; (b8950 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b88fe:	4668      	mov	r0, sp
   b8900:	f009 fcf2 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8904:	2205      	movs	r2, #5
   b8906:	4629      	mov	r1, r5
   b8908:	4668      	mov	r0, sp
   b890a:	f009 fc4f 	bl	c21ac <memcmp>
   b890e:	b918      	cbnz	r0, b8918 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b8910:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8914:	3035      	adds	r0, #53	; 0x35
   b8916:	e7ae      	b.n	b8876 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8918:	490e      	ldr	r1, [pc, #56]	; (b8954 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b891a:	4668      	mov	r0, sp
   b891c:	f009 fce4 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8920:	2205      	movs	r2, #5
   b8922:	4629      	mov	r1, r5
   b8924:	4668      	mov	r0, sp
   b8926:	f009 fc41 	bl	c21ac <memcmp>
   b892a:	b910      	cbnz	r0, b8932 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b892c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8930:	e7f0      	b.n	b8914 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b8932:	2000      	movs	r0, #0
   b8934:	e79f      	b.n	b8876 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b8936:	bf00      	nop
   b8938:	000c4b20 	.word	0x000c4b20
   b893c:	000c4af6 	.word	0x000c4af6
   b8940:	000c4afc 	.word	0x000c4afc
   b8944:	000c4b02 	.word	0x000c4b02
   b8948:	000c4b08 	.word	0x000c4b08
   b894c:	000c4b0e 	.word	0x000c4b0e
   b8950:	000c4b14 	.word	0x000c4b14
   b8954:	000c4b1a 	.word	0x000c4b1a

000b8958 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b8958:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b895a:	4b39      	ldr	r3, [pc, #228]	; (b8a40 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b895c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b895e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8962:	6818      	ldr	r0, [r3, #0]
   b8964:	9000      	str	r0, [sp, #0]
   b8966:	889b      	ldrh	r3, [r3, #4]
   b8968:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b896c:	2205      	movs	r2, #5
   b896e:	4629      	mov	r1, r5
   b8970:	4668      	mov	r0, sp
   b8972:	f009 fc1b 	bl	c21ac <memcmp>
   b8976:	b928      	cbnz	r0, b8984 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b8978:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b897c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b8980:	b003      	add	sp, #12
   b8982:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8984:	492f      	ldr	r1, [pc, #188]	; (b8a44 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b8986:	4668      	mov	r0, sp
   b8988:	f009 fcae 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b898c:	2205      	movs	r2, #5
   b898e:	4629      	mov	r1, r5
   b8990:	4668      	mov	r0, sp
   b8992:	f009 fc0b 	bl	c21ac <memcmp>
   b8996:	b910      	cbnz	r0, b899e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b8998:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b899c:	e7ee      	b.n	b897c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b899e:	492a      	ldr	r1, [pc, #168]	; (b8a48 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b89a0:	4668      	mov	r0, sp
   b89a2:	f009 fca1 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89a6:	2205      	movs	r2, #5
   b89a8:	4629      	mov	r1, r5
   b89aa:	4668      	mov	r0, sp
   b89ac:	f009 fbfe 	bl	c21ac <memcmp>
   b89b0:	b910      	cbnz	r0, b89b8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b89b2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b89b6:	e7e1      	b.n	b897c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b89b8:	4924      	ldr	r1, [pc, #144]	; (b8a4c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b89ba:	4668      	mov	r0, sp
   b89bc:	f009 fc94 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89c0:	2205      	movs	r2, #5
   b89c2:	4629      	mov	r1, r5
   b89c4:	4668      	mov	r0, sp
   b89c6:	f009 fbf1 	bl	c21ac <memcmp>
   b89ca:	b910      	cbnz	r0, b89d2 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b89cc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b89d0:	e7d4      	b.n	b897c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b89d2:	491f      	ldr	r1, [pc, #124]	; (b8a50 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b89d4:	4668      	mov	r0, sp
   b89d6:	f009 fc87 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89da:	2205      	movs	r2, #5
   b89dc:	4629      	mov	r1, r5
   b89de:	4668      	mov	r0, sp
   b89e0:	f009 fbe4 	bl	c21ac <memcmp>
   b89e4:	b910      	cbnz	r0, b89ec <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b89e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b89ea:	e7c7      	b.n	b897c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b89ec:	4919      	ldr	r1, [pc, #100]	; (b8a54 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b89ee:	4668      	mov	r0, sp
   b89f0:	f009 fc7a 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89f4:	2205      	movs	r2, #5
   b89f6:	4629      	mov	r1, r5
   b89f8:	4668      	mov	r0, sp
   b89fa:	f009 fbd7 	bl	c21ac <memcmp>
   b89fe:	b910      	cbnz	r0, b8a06 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b8a00:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8a04:	e7ba      	b.n	b897c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8a06:	4914      	ldr	r1, [pc, #80]	; (b8a58 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b8a08:	4668      	mov	r0, sp
   b8a0a:	f009 fc6d 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a0e:	2205      	movs	r2, #5
   b8a10:	4629      	mov	r1, r5
   b8a12:	4668      	mov	r0, sp
   b8a14:	f009 fbca 	bl	c21ac <memcmp>
   b8a18:	b918      	cbnz	r0, b8a22 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b8a1a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b8a1e:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8a20:	e7ae      	b.n	b8980 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8a22:	490e      	ldr	r1, [pc, #56]	; (b8a5c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b8a24:	4668      	mov	r0, sp
   b8a26:	f009 fc5f 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a2a:	2205      	movs	r2, #5
   b8a2c:	4629      	mov	r1, r5
   b8a2e:	4668      	mov	r0, sp
   b8a30:	f009 fbbc 	bl	c21ac <memcmp>
   b8a34:	b910      	cbnz	r0, b8a3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b8a36:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8a3a:	e7f0      	b.n	b8a1e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b8a3c:	2000      	movs	r0, #0
   b8a3e:	e79f      	b.n	b8980 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b8a40:	000c4b20 	.word	0x000c4b20
   b8a44:	000c4af6 	.word	0x000c4af6
   b8a48:	000c4afc 	.word	0x000c4afc
   b8a4c:	000c4b02 	.word	0x000c4b02
   b8a50:	000c4b08 	.word	0x000c4b08
   b8a54:	000c4b0e 	.word	0x000c4b0e
   b8a58:	000c4b14 	.word	0x000c4b14
   b8a5c:	000c4b1a 	.word	0x000c4b1a

000b8a60 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b8a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8a62:	4b3a      	ldr	r3, [pc, #232]	; (b8b4c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b8a64:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a66:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8a6a:	6818      	ldr	r0, [r3, #0]
   b8a6c:	9000      	str	r0, [sp, #0]
   b8a6e:	889b      	ldrh	r3, [r3, #4]
   b8a70:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a74:	2205      	movs	r2, #5
   b8a76:	4629      	mov	r1, r5
   b8a78:	4668      	mov	r0, sp
   b8a7a:	f009 fb97 	bl	c21ac <memcmp>
   b8a7e:	b930      	cbnz	r0, b8a8e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b8a80:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8a84:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8a88:	3001      	adds	r0, #1
}
   b8a8a:	b003      	add	sp, #12
   b8a8c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8a8e:	4930      	ldr	r1, [pc, #192]	; (b8b50 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b8a90:	4668      	mov	r0, sp
   b8a92:	f009 fc29 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a96:	2205      	movs	r2, #5
   b8a98:	4629      	mov	r1, r5
   b8a9a:	4668      	mov	r0, sp
   b8a9c:	f009 fb86 	bl	c21ac <memcmp>
   b8aa0:	b910      	cbnz	r0, b8aa8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b8aa2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8aa6:	e7ed      	b.n	b8a84 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8aa8:	492a      	ldr	r1, [pc, #168]	; (b8b54 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b8aaa:	4668      	mov	r0, sp
   b8aac:	f009 fc1c 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ab0:	2205      	movs	r2, #5
   b8ab2:	4629      	mov	r1, r5
   b8ab4:	4668      	mov	r0, sp
   b8ab6:	f009 fb79 	bl	c21ac <memcmp>
   b8aba:	b910      	cbnz	r0, b8ac2 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b8abc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8ac0:	e7e0      	b.n	b8a84 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8ac2:	4925      	ldr	r1, [pc, #148]	; (b8b58 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b8ac4:	4668      	mov	r0, sp
   b8ac6:	f009 fc0f 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8aca:	2205      	movs	r2, #5
   b8acc:	4629      	mov	r1, r5
   b8ace:	4668      	mov	r0, sp
   b8ad0:	f009 fb6c 	bl	c21ac <memcmp>
   b8ad4:	b910      	cbnz	r0, b8adc <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b8ad6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8ada:	e7d3      	b.n	b8a84 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8adc:	491f      	ldr	r1, [pc, #124]	; (b8b5c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b8ade:	4668      	mov	r0, sp
   b8ae0:	f009 fc02 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ae4:	2205      	movs	r2, #5
   b8ae6:	4629      	mov	r1, r5
   b8ae8:	4668      	mov	r0, sp
   b8aea:	f009 fb5f 	bl	c21ac <memcmp>
   b8aee:	b910      	cbnz	r0, b8af6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b8af0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8af4:	e7c6      	b.n	b8a84 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8af6:	491a      	ldr	r1, [pc, #104]	; (b8b60 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b8af8:	4668      	mov	r0, sp
   b8afa:	f009 fbf5 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8afe:	2205      	movs	r2, #5
   b8b00:	4629      	mov	r1, r5
   b8b02:	4668      	mov	r0, sp
   b8b04:	f009 fb52 	bl	c21ac <memcmp>
   b8b08:	b910      	cbnz	r0, b8b10 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8b0a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8b0e:	e7b9      	b.n	b8a84 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8b10:	4914      	ldr	r1, [pc, #80]	; (b8b64 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b8b12:	4668      	mov	r0, sp
   b8b14:	f009 fbe8 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b18:	2205      	movs	r2, #5
   b8b1a:	4629      	mov	r1, r5
   b8b1c:	4668      	mov	r0, sp
   b8b1e:	f009 fb45 	bl	c21ac <memcmp>
   b8b22:	b918      	cbnz	r0, b8b2c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b8b24:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8b28:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8b2a:	e7ad      	b.n	b8a88 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8b2c:	490e      	ldr	r1, [pc, #56]	; (b8b68 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b8b2e:	4668      	mov	r0, sp
   b8b30:	f009 fbda 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b34:	2205      	movs	r2, #5
   b8b36:	4629      	mov	r1, r5
   b8b38:	4668      	mov	r0, sp
   b8b3a:	f009 fb37 	bl	c21ac <memcmp>
   b8b3e:	b910      	cbnz	r0, b8b46 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8b40:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8b44:	e7f0      	b.n	b8b28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b8b46:	2000      	movs	r0, #0
   b8b48:	e79f      	b.n	b8a8a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b8b4a:	bf00      	nop
   b8b4c:	000c4b20 	.word	0x000c4b20
   b8b50:	000c4af6 	.word	0x000c4af6
   b8b54:	000c4afc 	.word	0x000c4afc
   b8b58:	000c4b02 	.word	0x000c4b02
   b8b5c:	000c4b08 	.word	0x000c4b08
   b8b60:	000c4b0e 	.word	0x000c4b0e
   b8b64:	000c4b14 	.word	0x000c4b14
   b8b68:	000c4b1a 	.word	0x000c4b1a

000b8b6c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b8b6c:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b8b6e:	4b30      	ldr	r3, [pc, #192]	; (b8c30 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b8b70:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b72:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8b76:	6818      	ldr	r0, [r3, #0]
   b8b78:	9000      	str	r0, [sp, #0]
   b8b7a:	889b      	ldrh	r3, [r3, #4]
   b8b7c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b80:	2205      	movs	r2, #5
   b8b82:	4621      	mov	r1, r4
   b8b84:	4668      	mov	r0, sp
   b8b86:	f009 fb11 	bl	c21ac <memcmp>
   b8b8a:	b910      	cbnz	r0, b8b92 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b8b8c:	2064      	movs	r0, #100	; 0x64
}
   b8b8e:	b002      	add	sp, #8
   b8b90:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b8b92:	4928      	ldr	r1, [pc, #160]	; (b8c34 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b8b94:	4668      	mov	r0, sp
   b8b96:	f009 fba7 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b9a:	2205      	movs	r2, #5
   b8b9c:	4621      	mov	r1, r4
   b8b9e:	4668      	mov	r0, sp
   b8ba0:	f009 fb04 	bl	c21ac <memcmp>
   b8ba4:	2800      	cmp	r0, #0
   b8ba6:	d0f1      	beq.n	b8b8c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b8ba8:	4923      	ldr	r1, [pc, #140]	; (b8c38 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b8baa:	4668      	mov	r0, sp
   b8bac:	f009 fb9c 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bb0:	2205      	movs	r2, #5
   b8bb2:	4621      	mov	r1, r4
   b8bb4:	4668      	mov	r0, sp
   b8bb6:	f009 faf9 	bl	c21ac <memcmp>
   b8bba:	2800      	cmp	r0, #0
   b8bbc:	d0e6      	beq.n	b8b8c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b8bbe:	491f      	ldr	r1, [pc, #124]	; (b8c3c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b8bc0:	4668      	mov	r0, sp
   b8bc2:	f009 fb91 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bc6:	2205      	movs	r2, #5
   b8bc8:	4621      	mov	r1, r4
   b8bca:	4668      	mov	r0, sp
   b8bcc:	f009 faee 	bl	c21ac <memcmp>
   b8bd0:	2800      	cmp	r0, #0
   b8bd2:	d0db      	beq.n	b8b8c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b8bd4:	491a      	ldr	r1, [pc, #104]	; (b8c40 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b8bd6:	4668      	mov	r0, sp
   b8bd8:	f009 fb86 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bdc:	2205      	movs	r2, #5
   b8bde:	4621      	mov	r1, r4
   b8be0:	4668      	mov	r0, sp
   b8be2:	f009 fae3 	bl	c21ac <memcmp>
   b8be6:	2800      	cmp	r0, #0
   b8be8:	d0d0      	beq.n	b8b8c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b8bea:	4916      	ldr	r1, [pc, #88]	; (b8c44 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b8bec:	4668      	mov	r0, sp
   b8bee:	f009 fb7b 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bf2:	2205      	movs	r2, #5
   b8bf4:	4621      	mov	r1, r4
   b8bf6:	4668      	mov	r0, sp
   b8bf8:	f009 fad8 	bl	c21ac <memcmp>
   b8bfc:	2800      	cmp	r0, #0
   b8bfe:	d0c5      	beq.n	b8b8c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b8c00:	4911      	ldr	r1, [pc, #68]	; (b8c48 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b8c02:	4668      	mov	r0, sp
   b8c04:	f009 fb70 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c08:	2205      	movs	r2, #5
   b8c0a:	4621      	mov	r1, r4
   b8c0c:	4668      	mov	r0, sp
   b8c0e:	f009 facd 	bl	c21ac <memcmp>
   b8c12:	b148      	cbz	r0, b8c28 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b8c14:	490d      	ldr	r1, [pc, #52]	; (b8c4c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b8c16:	4668      	mov	r0, sp
   b8c18:	f009 fb66 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c1c:	2205      	movs	r2, #5
   b8c1e:	4621      	mov	r1, r4
   b8c20:	4668      	mov	r0, sp
   b8c22:	f009 fac3 	bl	c21ac <memcmp>
   b8c26:	b908      	cbnz	r0, b8c2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b8c28:	2032      	movs	r0, #50	; 0x32
   b8c2a:	e7b0      	b.n	b8b8e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b8c2c:	2000      	movs	r0, #0
   b8c2e:	e7ae      	b.n	b8b8e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b8c30:	000c4b20 	.word	0x000c4b20
   b8c34:	000c4af6 	.word	0x000c4af6
   b8c38:	000c4afc 	.word	0x000c4afc
   b8c3c:	000c4b02 	.word	0x000c4b02
   b8c40:	000c4b08 	.word	0x000c4b08
   b8c44:	000c4b0e 	.word	0x000c4b0e
   b8c48:	000c4b14 	.word	0x000c4b14
   b8c4c:	000c4b1a 	.word	0x000c4b1a

000b8c50 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b8c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8c52:	4b38      	ldr	r3, [pc, #224]	; (b8d34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b8c54:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c56:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c5a:	6818      	ldr	r0, [r3, #0]
   b8c5c:	9000      	str	r0, [sp, #0]
   b8c5e:	889b      	ldrh	r3, [r3, #4]
   b8c60:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c64:	2205      	movs	r2, #5
   b8c66:	4629      	mov	r1, r5
   b8c68:	4668      	mov	r0, sp
   b8c6a:	f009 fa9f 	bl	c21ac <memcmp>
   b8c6e:	b918      	cbnz	r0, b8c78 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b8c70:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b8c74:	b003      	add	sp, #12
   b8c76:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c78:	492f      	ldr	r1, [pc, #188]	; (b8d38 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b8c7a:	4668      	mov	r0, sp
   b8c7c:	f009 fb34 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c80:	2205      	movs	r2, #5
   b8c82:	4629      	mov	r1, r5
   b8c84:	4668      	mov	r0, sp
   b8c86:	f009 fa91 	bl	c21ac <memcmp>
   b8c8a:	b910      	cbnz	r0, b8c92 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b8c8c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8c90:	e7f0      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8c92:	492a      	ldr	r1, [pc, #168]	; (b8d3c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b8c94:	4668      	mov	r0, sp
   b8c96:	f009 fb27 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c9a:	2205      	movs	r2, #5
   b8c9c:	4629      	mov	r1, r5
   b8c9e:	4668      	mov	r0, sp
   b8ca0:	f009 fa84 	bl	c21ac <memcmp>
   b8ca4:	b910      	cbnz	r0, b8cac <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b8ca6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8caa:	e7e3      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8cac:	4924      	ldr	r1, [pc, #144]	; (b8d40 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b8cae:	4668      	mov	r0, sp
   b8cb0:	f009 fb1a 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cb4:	2205      	movs	r2, #5
   b8cb6:	4629      	mov	r1, r5
   b8cb8:	4668      	mov	r0, sp
   b8cba:	f009 fa77 	bl	c21ac <memcmp>
   b8cbe:	b910      	cbnz	r0, b8cc6 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b8cc0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8cc4:	e7d6      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8cc6:	491f      	ldr	r1, [pc, #124]	; (b8d44 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b8cc8:	4668      	mov	r0, sp
   b8cca:	f009 fb0d 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cce:	2205      	movs	r2, #5
   b8cd0:	4629      	mov	r1, r5
   b8cd2:	4668      	mov	r0, sp
   b8cd4:	f009 fa6a 	bl	c21ac <memcmp>
   b8cd8:	b910      	cbnz	r0, b8ce0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b8cda:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8cde:	e7c9      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8ce0:	4919      	ldr	r1, [pc, #100]	; (b8d48 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b8ce2:	4668      	mov	r0, sp
   b8ce4:	f009 fb00 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ce8:	2205      	movs	r2, #5
   b8cea:	4629      	mov	r1, r5
   b8cec:	4668      	mov	r0, sp
   b8cee:	f009 fa5d 	bl	c21ac <memcmp>
   b8cf2:	b910      	cbnz	r0, b8cfa <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b8cf4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8cf8:	e7bc      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8cfa:	4914      	ldr	r1, [pc, #80]	; (b8d4c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b8cfc:	4668      	mov	r0, sp
   b8cfe:	f009 faf3 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d02:	2205      	movs	r2, #5
   b8d04:	4629      	mov	r1, r5
   b8d06:	4668      	mov	r0, sp
   b8d08:	f009 fa50 	bl	c21ac <memcmp>
   b8d0c:	b910      	cbnz	r0, b8d14 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b8d0e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8d12:	e7af      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8d14:	490e      	ldr	r1, [pc, #56]	; (b8d50 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b8d16:	4668      	mov	r0, sp
   b8d18:	f009 fae6 	bl	c22e8 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d1c:	2205      	movs	r2, #5
   b8d1e:	4629      	mov	r1, r5
   b8d20:	4668      	mov	r0, sp
   b8d22:	f009 fa43 	bl	c21ac <memcmp>
   b8d26:	b910      	cbnz	r0, b8d2e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b8d28:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8d2c:	e7a2      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b8d2e:	2000      	movs	r0, #0
   b8d30:	e7a0      	b.n	b8c74 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b8d32:	bf00      	nop
   b8d34:	000c4b20 	.word	0x000c4b20
   b8d38:	000c4af6 	.word	0x000c4af6
   b8d3c:	000c4afc 	.word	0x000c4afc
   b8d40:	000c4b02 	.word	0x000c4b02
   b8d44:	000c4b08 	.word	0x000c4b08
   b8d48:	000c4b0e 	.word	0x000c4b0e
   b8d4c:	000c4b14 	.word	0x000c4b14
   b8d50:	000c4b1a 	.word	0x000c4b1a

000b8d54 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b8d54:	4770      	bx	lr
	...

000b8d58 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b8d58:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b8d5a:	8813      	ldrh	r3, [r2, #0]
   b8d5c:	4d0c      	ldr	r5, [pc, #48]	; (b8d90 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b8d5e:	2b01      	cmp	r3, #1
{
   b8d60:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b8d62:	d10e      	bne.n	b8d82 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b8d64:	020a      	lsls	r2, r1, #8
   b8d66:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b8d6a:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b8d6c:	3301      	adds	r3, #1
   b8d6e:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b8d70:	f7ff fff0 	bl	b8d54 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b8d74:	8820      	ldrh	r0, [r4, #0]
   b8d76:	882b      	ldrh	r3, [r5, #0]
}
   b8d78:	4298      	cmp	r0, r3
   b8d7a:	bf14      	ite	ne
   b8d7c:	2003      	movne	r0, #3
   b8d7e:	2000      	moveq	r0, #0
   b8d80:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b8d82:	2b02      	cmp	r3, #2
   b8d84:	d1f2      	bne.n	b8d6c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b8d86:	882a      	ldrh	r2, [r5, #0]
   b8d88:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b8d8a:	3206      	adds	r2, #6
   b8d8c:	e7ed      	b.n	b8d6a <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b8d8e:	bf00      	nop
   b8d90:	2003e61e 	.word	0x2003e61e

000b8d94 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b8d94:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b8d96:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b8d98:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b8d9a:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b8d9c:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b8d9e:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b8da2:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b8da6:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b8daa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b8dae:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b8db2:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b8db4:	4413      	add	r3, r2
   b8db6:	734b      	strb	r3, [r1, #13]
   b8db8:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b8dba:	b293      	uxth	r3, r2
   b8dbc:	429c      	cmp	r4, r3
   b8dbe:	d90a      	bls.n	b8dd6 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b8dc0:	688b      	ldr	r3, [r1, #8]
   b8dc2:	7b08      	ldrb	r0, [r1, #12]
   b8dc4:	5c9b      	ldrb	r3, [r3, r2]
   b8dc6:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b8dc8:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b8dca:	b2db      	uxtb	r3, r3
   b8dcc:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b8dce:	4403      	add	r3, r0
   b8dd0:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b8dd2:	3201      	adds	r2, #1
   b8dd4:	e7f1      	b.n	b8dba <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b8dd6:	bd30      	pop	{r4, r5, pc}

000b8dd8 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b8dd8:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b8ddc:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b8dde:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b8de2:	b2c9      	uxtb	r1, r1
   b8de4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b8de8:	4419      	add	r1, r3
   b8dea:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b8dee:	4770      	bx	lr

000b8df0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b8df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b8df4:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b8df8:	f10b 0b08 	add.w	fp, fp, #8
   b8dfc:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b8e00:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b8e04:	f1ab 0302 	sub.w	r3, fp, #2
{
   b8e08:	4604      	mov	r4, r0
   b8e0a:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b8e0c:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b8e0e:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b8e10:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b8e12:	f1ba 0f00 	cmp.w	sl, #0
   b8e16:	f000 80a6 	beq.w	b8f66 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b8e1a:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b8e1c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b8e20:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e24:	4556      	cmp	r6, sl
   b8e26:	bf28      	it	cs
   b8e28:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b8e2a:	ebaa 0a06 	sub.w	sl, sl, r6
   b8e2e:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b8e32:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b8e36:	bf02      	ittt	eq
   b8e38:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b8e3c:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b8e3e:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b8e42:	f006 f95d 	bl	bf100 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b8e46:	f1b9 0f00 	cmp.w	r9, #0
   b8e4a:	d15c      	bne.n	b8f06 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b8e4c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e50:	6803      	ldr	r3, [r0, #0]
   b8e52:	21b5      	movs	r1, #181	; 0xb5
   b8e54:	689b      	ldr	r3, [r3, #8]
   b8e56:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b8e58:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e5c:	6803      	ldr	r3, [r0, #0]
   b8e5e:	2162      	movs	r1, #98	; 0x62
   b8e60:	689b      	ldr	r3, [r3, #8]
   b8e62:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b8e64:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e68:	7829      	ldrb	r1, [r5, #0]
   b8e6a:	6803      	ldr	r3, [r0, #0]
   b8e6c:	689b      	ldr	r3, [r3, #8]
   b8e6e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b8e70:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e74:	7869      	ldrb	r1, [r5, #1]
   b8e76:	6803      	ldr	r3, [r0, #0]
   b8e78:	689b      	ldr	r3, [r3, #8]
   b8e7a:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b8e7c:	78a9      	ldrb	r1, [r5, #2]
   b8e7e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e82:	f7fe fdc1 	bl	b7a08 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b8e86:	8869      	ldrh	r1, [r5, #2]
   b8e88:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e8c:	0a09      	lsrs	r1, r1, #8
   b8e8e:	f7fe fdbb 	bl	b7a08 <_ZN7TwoWire5writeEi.isra.0>
   b8e92:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b8e94:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b8e96:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8e9a:	fa1f f983 	uxth.w	r9, r3
   b8e9e:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b8ea2:	454a      	cmp	r2, r9
   b8ea4:	b2bf      	uxth	r7, r7
   b8ea6:	d90d      	bls.n	b8ec4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b8ea8:	42be      	cmp	r6, r7
   b8eaa:	d90b      	bls.n	b8ec4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b8eac:	68aa      	ldr	r2, [r5, #8]
   b8eae:	6801      	ldr	r1, [r0, #0]
   b8eb0:	9301      	str	r3, [sp, #4]
   b8eb2:	4442      	add	r2, r8
   b8eb4:	688f      	ldr	r7, [r1, #8]
   b8eb6:	5cd1      	ldrb	r1, [r2, r3]
   b8eb8:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b8eba:	9b01      	ldr	r3, [sp, #4]
   b8ebc:	3301      	adds	r3, #1
   b8ebe:	e7e9      	b.n	b8e94 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b8ec0:	46b9      	mov	r9, r7
   b8ec2:	e7a6      	b.n	b8e12 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b8ec4:	3e02      	subs	r6, #2
      startSpot += x;
   b8ec6:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b8ec8:	42b7      	cmp	r7, r6
      startSpot += x;
   b8eca:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b8ece:	d10c      	bne.n	b8eea <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b8ed0:	6803      	ldr	r3, [r0, #0]
   b8ed2:	7b29      	ldrb	r1, [r5, #12]
   b8ed4:	689b      	ldr	r3, [r3, #8]
   b8ed6:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b8ed8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8edc:	7b69      	ldrb	r1, [r5, #13]
   b8ede:	6803      	ldr	r3, [r0, #0]
   b8ee0:	689b      	ldr	r3, [r3, #8]
   b8ee2:	4798      	blx	r3
        bytesSent += 2;
   b8ee4:	f109 0708 	add.w	r7, r9, #8
   b8ee8:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b8eea:	455f      	cmp	r7, fp
   b8eec:	d2e8      	bcs.n	b8ec0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b8eee:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b8ef2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8ef6:	f006 f90a 	bl	bf10e <_ZN7TwoWire15endTransmissionEh>
   b8efa:	2800      	cmp	r0, #0
   b8efc:	d0e0      	beq.n	b8ec0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b8efe:	200c      	movs	r0, #12
}
   b8f00:	b003      	add	sp, #12
   b8f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f06:	2200      	movs	r2, #0
   b8f08:	b291      	uxth	r1, r2
   b8f0a:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b8f0e:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b8f10:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f14:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b8f16:	d910      	bls.n	b8f3a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b8f18:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b8f1c:	eb08 0c02 	add.w	ip, r8, r2
   b8f20:	1c53      	adds	r3, r2, #1
   b8f22:	45f4      	cmp	ip, lr
   b8f24:	9301      	str	r3, [sp, #4]
   b8f26:	da08      	bge.n	b8f3a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b8f28:	68a9      	ldr	r1, [r5, #8]
   b8f2a:	6802      	ldr	r2, [r0, #0]
   b8f2c:	f811 100c 	ldrb.w	r1, [r1, ip]
   b8f30:	6892      	ldr	r2, [r2, #8]
   b8f32:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b8f34:	9b01      	ldr	r3, [sp, #4]
   b8f36:	461a      	mov	r2, r3
   b8f38:	e7e6      	b.n	b8f08 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b8f3a:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b8f3c:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b8f3e:	429f      	cmp	r7, r3
      startSpot += x;
   b8f40:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b8f44:	d1d1      	bne.n	b8eea <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b8f46:	3e02      	subs	r6, #2
   b8f48:	42b2      	cmp	r2, r6
   b8f4a:	d1ce      	bne.n	b8eea <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b8f4c:	6803      	ldr	r3, [r0, #0]
   b8f4e:	7b29      	ldrb	r1, [r5, #12]
   b8f50:	689b      	ldr	r3, [r3, #8]
   b8f52:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b8f54:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f58:	7b69      	ldrb	r1, [r5, #13]
   b8f5a:	6803      	ldr	r3, [r0, #0]
   b8f5c:	689b      	ldr	r3, [r3, #8]
   b8f5e:	4798      	blx	r3
        bytesSent += 2;
   b8f60:	fa1f f78b 	uxth.w	r7, fp
   b8f64:	e7c1      	b.n	b8eea <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b8f66:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8f6a:	f006 f8d4 	bl	bf116 <_ZN7TwoWire15endTransmissionEv>
   b8f6e:	2800      	cmp	r0, #0
   b8f70:	d0c6      	beq.n	b8f00 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b8f72:	e7c4      	b.n	b8efe <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b8f74 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b8f74:	b570      	push	{r4, r5, r6, lr}
   b8f76:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b8f78:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b8f7c:	6803      	ldr	r3, [r0, #0]
{
   b8f7e:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b8f80:	689b      	ldr	r3, [r3, #8]
   b8f82:	21b5      	movs	r1, #181	; 0xb5
   b8f84:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b8f86:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8f8a:	6803      	ldr	r3, [r0, #0]
   b8f8c:	2162      	movs	r1, #98	; 0x62
   b8f8e:	689b      	ldr	r3, [r3, #8]
   b8f90:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b8f92:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8f96:	7821      	ldrb	r1, [r4, #0]
   b8f98:	6803      	ldr	r3, [r0, #0]
   b8f9a:	689b      	ldr	r3, [r3, #8]
   b8f9c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b8f9e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8fa2:	7861      	ldrb	r1, [r4, #1]
   b8fa4:	6803      	ldr	r3, [r0, #0]
   b8fa6:	689b      	ldr	r3, [r3, #8]
   b8fa8:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b8faa:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8fae:	78a1      	ldrb	r1, [r4, #2]
   b8fb0:	6803      	ldr	r3, [r0, #0]
   b8fb2:	689b      	ldr	r3, [r3, #8]
   b8fb4:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b8fb6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8fba:	8861      	ldrh	r1, [r4, #2]
   b8fbc:	6803      	ldr	r3, [r0, #0]
   b8fbe:	0a09      	lsrs	r1, r1, #8
   b8fc0:	689b      	ldr	r3, [r3, #8]
   b8fc2:	4798      	blx	r3
   b8fc4:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b8fc6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8fca:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b8fcc:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8fce:	b2b2      	uxth	r2, r6
   b8fd0:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b8fd2:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8fd4:	d904      	bls.n	b8fe0 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b8fd6:	68a1      	ldr	r1, [r4, #8]
   b8fd8:	5c89      	ldrb	r1, [r1, r2]
   b8fda:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b8fdc:	3601      	adds	r6, #1
   b8fde:	e7f2      	b.n	b8fc6 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b8fe0:	7b21      	ldrb	r1, [r4, #12]
   b8fe2:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b8fe4:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b8fe8:	7b61      	ldrb	r1, [r4, #13]
   b8fea:	6803      	ldr	r3, [r0, #0]
}
   b8fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b8ff0:	689b      	ldr	r3, [r3, #8]
   b8ff2:	4718      	bx	r3

000b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b8ff4:	b510      	push	{r4, lr}
   b8ff6:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b8ff8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b8ffc:	f007 fe04 	bl	c0c08 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b9000:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9004:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b9008:	429a      	cmp	r2, r3
   b900a:	d90b      	bls.n	b9024 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b900c:	28ff      	cmp	r0, #255	; 0xff
   b900e:	d101      	bne.n	b9014 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9010:	7822      	ldrb	r2, [r4, #0]
   b9012:	b13a      	cbz	r2, b9024 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9014:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b9018:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b901a:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b901e:	3301      	adds	r3, #1
   b9020:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9024:	bd10      	pop	{r4, pc}
	...

000b9028 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b9028:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b902c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9030:	4604      	mov	r4, r0
   b9032:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9034:	b97b      	cbnz	r3, b9056 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9036:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b903a:	b923      	cbnz	r3, b9046 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b903c:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9040:	2b00      	cmp	r3, #0
   b9042:	f000 80ca 	beq.w	b91da <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9046:	4966      	ldr	r1, [pc, #408]	; (b91e0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9048:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b904c:	b004      	add	sp, #16
   b904e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9052:	f007 bb22 	b.w	c069a <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9056:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b905a:	4a62      	ldr	r2, [pc, #392]	; (b91e4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b905c:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b905e:	2600      	movs	r6, #0
   b9060:	2301      	movs	r3, #1
   b9062:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9066:	4669      	mov	r1, sp
   b9068:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b906c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9070:	9200      	str	r2, [sp, #0]
   b9072:	f88d 6004 	strb.w	r6, [sp, #4]
   b9076:	f007 fd27 	bl	c0ac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b907a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b907e:	4631      	mov	r1, r6
   b9080:	f008 f9ad 	bl	c13de <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9084:	21b5      	movs	r1, #181	; 0xb5
   b9086:	4620      	mov	r0, r4
   b9088:	f7ff ffb4 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b908c:	2162      	movs	r1, #98	; 0x62
   b908e:	4620      	mov	r0, r4
   b9090:	f7ff ffb0 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9094:	7829      	ldrb	r1, [r5, #0]
   b9096:	4620      	mov	r0, r4
   b9098:	f7ff ffac 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b909c:	7869      	ldrb	r1, [r5, #1]
   b909e:	4620      	mov	r0, r4
   b90a0:	f7ff ffa8 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b90a4:	78a9      	ldrb	r1, [r5, #2]
   b90a6:	4620      	mov	r0, r4
   b90a8:	f7ff ffa4 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b90ac:	8869      	ldrh	r1, [r5, #2]
   b90ae:	4620      	mov	r0, r4
   b90b0:	0a09      	lsrs	r1, r1, #8
   b90b2:	f7ff ff9f 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b90b6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b90ba:	2b00      	cmp	r3, #0
   b90bc:	d042      	beq.n	b9144 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b90be:	494a      	ldr	r1, [pc, #296]	; (b91e8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b90c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b90c4:	f007 fae9 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b90c8:	2210      	movs	r2, #16
   b90ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b90ce:	21b5      	movs	r1, #181	; 0xb5
   b90d0:	f7fe fc8a 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b90d4:	4945      	ldr	r1, [pc, #276]	; (b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b90d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b90da:	f007 fade 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b90de:	2210      	movs	r2, #16
   b90e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b90e4:	2162      	movs	r1, #98	; 0x62
   b90e6:	f7fe fc7f 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b90ea:	4940      	ldr	r1, [pc, #256]	; (b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b90ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b90f0:	f007 fad3 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b90f4:	2210      	movs	r2, #16
   b90f6:	7829      	ldrb	r1, [r5, #0]
   b90f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b90fc:	f7fe fc74 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9100:	493a      	ldr	r1, [pc, #232]	; (b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9102:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9106:	f007 fac8 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b910a:	2210      	movs	r2, #16
   b910c:	7869      	ldrb	r1, [r5, #1]
   b910e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9112:	f7fe fc69 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9116:	4935      	ldr	r1, [pc, #212]	; (b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9118:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b911c:	f007 fabd 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9120:	2210      	movs	r2, #16
   b9122:	78a9      	ldrb	r1, [r5, #2]
   b9124:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9128:	f007 fad3 	bl	c06d2 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b912c:	492f      	ldr	r1, [pc, #188]	; (b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b912e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9132:	f007 fab2 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9136:	8869      	ldrh	r1, [r5, #2]
   b9138:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b913c:	2210      	movs	r2, #16
   b913e:	0a09      	lsrs	r1, r1, #8
   b9140:	f007 fac7 	bl	c06d2 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9144:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9148:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b914a:	886a      	ldrh	r2, [r5, #2]
   b914c:	b2b3      	uxth	r3, r6
   b914e:	429a      	cmp	r2, r3
   b9150:	d916      	bls.n	b9180 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9152:	461f      	mov	r7, r3
   b9154:	68ab      	ldr	r3, [r5, #8]
   b9156:	4620      	mov	r0, r4
   b9158:	5dd9      	ldrb	r1, [r3, r7]
   b915a:	f7ff ff4b 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b915e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9162:	b15b      	cbz	r3, b917c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9164:	4641      	mov	r1, r8
   b9166:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b916a:	f007 fa96 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b916e:	68ab      	ldr	r3, [r5, #8]
   b9170:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9174:	5dd9      	ldrb	r1, [r3, r7]
   b9176:	2210      	movs	r2, #16
   b9178:	f7fe fc36 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b917c:	3601      	adds	r6, #1
   b917e:	e7e4      	b.n	b914a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9180:	7b29      	ldrb	r1, [r5, #12]
   b9182:	4620      	mov	r0, r4
   b9184:	f7ff ff36 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9188:	7b69      	ldrb	r1, [r5, #13]
   b918a:	4620      	mov	r0, r4
   b918c:	f7ff ff32 	bl	b8ff4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9190:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9194:	2101      	movs	r1, #1
   b9196:	f008 f922 	bl	c13de <digitalWrite>
  _spiPort->endTransaction();
   b919a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b919e:	f007 fc79 	bl	c0a94 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b91a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b91a6:	b1c3      	cbz	r3, b91da <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b91a8:	4910      	ldr	r1, [pc, #64]	; (b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b91aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91ae:	f007 fa74 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b91b2:	7b29      	ldrb	r1, [r5, #12]
   b91b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91b8:	2210      	movs	r2, #16
   b91ba:	f7fe fc15 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b91be:	490b      	ldr	r1, [pc, #44]	; (b91ec <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b91c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91c4:	f007 fa69 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b91c8:	7b69      	ldrb	r1, [r5, #13]
   b91ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b91ce:	2210      	movs	r2, #16
}
   b91d0:	b004      	add	sp, #16
   b91d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b91d6:	f7fe bc0e 	b.w	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b91da:	b004      	add	sp, #16
   b91dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b91e0:	000c4b26 	.word	0x000c4b26
   b91e4:	000c4904 	.word	0x000c4904
   b91e8:	000c4b5b 	.word	0x000c4b5b
   b91ec:	000c47c8 	.word	0x000c47c8

000b91f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b91f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b91f2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b91f6:	4604      	mov	r4, r0
   b91f8:	460d      	mov	r5, r1
   b91fa:	4616      	mov	r6, r2
  if (_printDebug == true)
   b91fc:	2b00      	cmp	r3, #0
   b91fe:	f000 8082 	beq.w	b9306 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b9202:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9206:	4940      	ldr	r1, [pc, #256]	; (b9308 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9208:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b920c:	f007 fa45 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9210:	782b      	ldrb	r3, [r5, #0]
   b9212:	2b01      	cmp	r3, #1
   b9214:	d13c      	bne.n	b9290 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b9216:	493d      	ldr	r1, [pc, #244]	; (b930c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b9218:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b921c:	f007 fa3d 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9220:	493b      	ldr	r1, [pc, #236]	; (b9310 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9222:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9226:	f007 fa38 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b922a:	882b      	ldrh	r3, [r5, #0]
   b922c:	f240 7201 	movw	r2, #1793	; 0x701
   b9230:	4293      	cmp	r3, r2
   b9232:	d145      	bne.n	b92c0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9234:	4937      	ldr	r1, [pc, #220]	; (b9314 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b9236:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b923a:	f007 fa2e 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b923e:	4936      	ldr	r1, [pc, #216]	; (b9318 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9240:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9244:	f007 fa29 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
   b9248:	8869      	ldrh	r1, [r5, #2]
   b924a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b924e:	2210      	movs	r2, #16
   b9250:	f007 fa3f 	bl	c06d2 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9254:	2f01      	cmp	r7, #1
   b9256:	d101      	bne.n	b925c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9258:	2e00      	cmp	r6, #0
   b925a:	d049      	beq.n	b92f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b925c:	492f      	ldr	r1, [pc, #188]	; (b931c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b925e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9262:	4f2f      	ldr	r7, [pc, #188]	; (b9320 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9264:	f007 fa19 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
   b9268:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b926a:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b926c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9270:	b2b3      	uxth	r3, r6
   b9272:	429a      	cmp	r2, r3
   b9274:	d941      	bls.n	b92fa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9276:	4639      	mov	r1, r7
   b9278:	f007 fa0f 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b927c:	b2b3      	uxth	r3, r6
   b927e:	68a9      	ldr	r1, [r5, #8]
   b9280:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9284:	5cc9      	ldrb	r1, [r1, r3]
   b9286:	2210      	movs	r2, #16
   b9288:	f7fe fbae 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b928c:	3601      	adds	r6, #1
   b928e:	e7ec      	b.n	b926a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9290:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9292:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9296:	d101      	bne.n	b929c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b9298:	4922      	ldr	r1, [pc, #136]	; (b9324 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b929a:	e7bf      	b.n	b921c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b929c:	2b06      	cmp	r3, #6
   b929e:	d101      	bne.n	b92a4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b92a0:	4921      	ldr	r1, [pc, #132]	; (b9328 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b92a2:	e7bb      	b.n	b921c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b92a4:	2b0a      	cmp	r3, #10
   b92a6:	d101      	bne.n	b92ac <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b92a8:	4920      	ldr	r1, [pc, #128]	; (b932c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b92aa:	e7b7      	b.n	b921c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b92ac:	4920      	ldr	r1, [pc, #128]	; (b9330 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b92ae:	f007 f9f4 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b92b2:	7829      	ldrb	r1, [r5, #0]
   b92b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b92b8:	2210      	movs	r2, #16
   b92ba:	f7fe fb95 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b92be:	e7af      	b.n	b9220 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b92c0:	f640 0206 	movw	r2, #2054	; 0x806
   b92c4:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b92c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b92ca:	d101      	bne.n	b92d0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b92cc:	4919      	ldr	r1, [pc, #100]	; (b9334 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b92ce:	e7b4      	b.n	b923a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b92d0:	f640 1206 	movw	r2, #2310	; 0x906
   b92d4:	4293      	cmp	r3, r2
   b92d6:	d101      	bne.n	b92dc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b92d8:	4917      	ldr	r1, [pc, #92]	; (b9338 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b92da:	e7ae      	b.n	b923a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b92dc:	4914      	ldr	r1, [pc, #80]	; (b9330 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b92de:	f007 f9dc 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b92e2:	7869      	ldrb	r1, [r5, #1]
   b92e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b92e8:	2210      	movs	r2, #16
   b92ea:	f7fe fb7d 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b92ee:	e7a6      	b.n	b923e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b92f0:	4912      	ldr	r1, [pc, #72]	; (b933c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b92f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b92f6:	f007 f9d0 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b92fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b92fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b9302:	f007 b9ce 	b.w	c06a2 <_ZN5Print7printlnEv>
}
   b9306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9308:	000c4b6c 	.word	0x000c4b6c
   b930c:	000c4b71 	.word	0x000c4b71
   b9310:	000c4b81 	.word	0x000c4b81
   b9314:	000c4b86 	.word	0x000c4b86
   b9318:	000c4b94 	.word	0x000c4b94
   b931c:	000c4b9d 	.word	0x000c4b9d
   b9320:	000c47c8 	.word	0x000c47c8
   b9324:	000c4b75 	.word	0x000c4b75
   b9328:	000c4b79 	.word	0x000c4b79
   b932c:	000c4b7d 	.word	0x000c4b7d
   b9330:	000c4df2 	.word	0x000c4df2
   b9334:	000c4b8a 	.word	0x000c4b8a
   b9338:	000c4b8f 	.word	0x000c4b8f
   b933c:	000c4ba7 	.word	0x000c4ba7

000b9340 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9340:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9342:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b9346:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9348:	b955      	cbnz	r5, b9360 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b934a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b934e:	b90b      	cbnz	r3, b9354 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9350:	2000      	movs	r0, #0
}
   b9352:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9354:	491a      	ldr	r1, [pc, #104]	; (b93c0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9356:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b935a:	f007 f9b8 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   b935e:	e7f7      	b.n	b9350 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9360:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9364:	b12b      	cbz	r3, b9372 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b9366:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b936a:	2b00      	cmp	r3, #0
   b936c:	d0f0      	beq.n	b9350 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b936e:	4915      	ldr	r1, [pc, #84]	; (b93c4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9370:	e7f1      	b.n	b9356 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9372:	4628      	mov	r0, r5
   b9374:	f7fa fe91 	bl	b409a <_Znaj>
   b9378:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b937c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9380:	b930      	cbnz	r0, b9390 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9382:	b91b      	cbnz	r3, b938c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9384:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b9388:	2b00      	cmp	r3, #0
   b938a:	d0e1      	beq.n	b9350 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b938c:	490e      	ldr	r1, [pc, #56]	; (b93c8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b938e:	e7e2      	b.n	b9356 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9390:	b17b      	cbz	r3, b93b2 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9392:	490e      	ldr	r1, [pc, #56]	; (b93cc <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9394:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9398:	f007 f97f 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b939c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b93a0:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b93a4:	220a      	movs	r2, #10
   b93a6:	4628      	mov	r0, r5
   b93a8:	f007 f993 	bl	c06d2 <_ZN5Print11printNumberEmh>
        n += println();
   b93ac:	4628      	mov	r0, r5
   b93ae:	f007 f978 	bl	c06a2 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b93b2:	2300      	movs	r3, #0
   b93b4:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b93b8:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b93bc:	2001      	movs	r0, #1
   b93be:	e7c8      	b.n	b9352 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b93c0:	000c4bb9 	.word	0x000c4bb9
   b93c4:	000c4c0a 	.word	0x000c4c0a
   b93c8:	000c4c4d 	.word	0x000c4c4d
   b93cc:	000c4c71 	.word	0x000c4c71

000b93d0 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b93d0:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b93d4:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b93d8:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b93da:	bf3b      	ittet	cc
   b93dc:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b93e0:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b93e2:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b93e4:	1a80      	subcc	r0, r0, r2
   b93e6:	b280      	uxth	r0, r0
}
   b93e8:	4770      	bx	lr

000b93ea <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b93ea:	b508      	push	{r3, lr}
   b93ec:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b93ee:	f7ff ffef 	bl	b93d0 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b93f2:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b93f6:	1a18      	subs	r0, r3, r0
}
   b93f8:	b280      	uxth	r0, r0
   b93fa:	bd08      	pop	{r3, pc}

000b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b93fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b9400:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9404:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b9408:	1aed      	subs	r5, r5, r3
   b940a:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b940c:	4295      	cmp	r5, r2
   b940e:	bf28      	it	cs
   b9410:	4615      	movcs	r5, r2
{
   b9412:	4616      	mov	r6, r2
   b9414:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9416:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b941a:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b941c:	462a      	mov	r2, r5
   b941e:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9420:	b2bf      	uxth	r7, r7
{
   b9422:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9424:	f008 fed2 	bl	c21cc <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b9428:	b19f      	cbz	r7, b9452 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b942a:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b942e:	463a      	mov	r2, r7
   b9430:	eb08 0105 	add.w	r1, r8, r5
   b9434:	f008 feca 	bl	c21cc <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b9438:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b943c:	4620      	mov	r0, r4
   b943e:	f7ff ffc7 	bl	b93d0 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9442:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b9446:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b9448:	bf38      	it	cc
   b944a:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b944e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9452:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b9456:	4416      	add	r6, r2
   b9458:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b945c:	e7ee      	b.n	b943c <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9460 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9460:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9462:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b9466:	4604      	mov	r4, r0
   b9468:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b946a:	b113      	cbz	r3, b9472 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b946c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9470:	b953      	cbnz	r3, b9488 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9472:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b9476:	b128      	cbz	r0, b9484 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b9478:	4924      	ldr	r1, [pc, #144]	; (b950c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b947a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b947e:	f007 f926 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9482:	2000      	movs	r0, #0
}
   b9484:	b003      	add	sp, #12
   b9486:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b9488:	f7ff ffaf 	bl	b93ea <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b948c:	886b      	ldrh	r3, [r5, #2]
   b948e:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9490:	b29b      	uxth	r3, r3
   b9492:	4283      	cmp	r3, r0
   b9494:	d908      	bls.n	b94a8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9496:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b949a:	b91b      	cbnz	r3, b94a4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b949c:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b94a0:	2800      	cmp	r0, #0
   b94a2:	d0ef      	beq.n	b9484 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b94a4:	491a      	ldr	r1, [pc, #104]	; (b9510 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b94a6:	e7e8      	b.n	b947a <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b94a8:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b94ac:	2202      	movs	r2, #2
   b94ae:	4669      	mov	r1, sp
   b94b0:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b94b2:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b94b6:	f7ff ffa1 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b94ba:	2201      	movs	r2, #1
   b94bc:	4629      	mov	r1, r5
   b94be:	4620      	mov	r0, r4
   b94c0:	f7ff ff9c 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b94c4:	2201      	movs	r2, #1
   b94c6:	18a9      	adds	r1, r5, r2
   b94c8:	4620      	mov	r0, r4
   b94ca:	f7ff ff97 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b94ce:	886b      	ldrh	r3, [r5, #2]
   b94d0:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b94d4:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b94d6:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b94d8:	a901      	add	r1, sp, #4
   b94da:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b94dc:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b94e0:	f7ff ff8c 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b94e4:	886a      	ldrh	r2, [r5, #2]
   b94e6:	68a9      	ldr	r1, [r5, #8]
   b94e8:	4620      	mov	r0, r4
   b94ea:	f7ff ff87 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b94ee:	2201      	movs	r2, #1
   b94f0:	f105 010c 	add.w	r1, r5, #12
   b94f4:	4620      	mov	r0, r4
   b94f6:	f7ff ff81 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b94fa:	4620      	mov	r0, r4
   b94fc:	2201      	movs	r2, #1
   b94fe:	f105 010d 	add.w	r1, r5, #13
   b9502:	f7ff ff7b 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b9506:	2001      	movs	r0, #1
   b9508:	e7bc      	b.n	b9484 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b950a:	bf00      	nop
   b950c:	000c4c97 	.word	0x000c4c97
   b9510:	000c4cbf 	.word	0x000c4cbf

000b9514 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b9514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b9518:	780e      	ldrb	r6, [r1, #0]
   b951a:	2e0d      	cmp	r6, #13
{
   b951c:	4604      	mov	r4, r0
   b951e:	460d      	mov	r5, r1
  switch (msg->cls)
   b9520:	f001 8228 	beq.w	ba974 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b9524:	d809      	bhi.n	b953a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b9526:	2e02      	cmp	r6, #2
   b9528:	f000 879a 	beq.w	ba460 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b952c:	2e06      	cmp	r6, #6
   b952e:	f001 81cc 	beq.w	ba8ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9532:	2e01      	cmp	r6, #1
   b9534:	d04f      	beq.n	b95d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b9536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b953a:	2e13      	cmp	r6, #19
   b953c:	f001 83eb 	beq.w	bad16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9540:	2e28      	cmp	r6, #40	; 0x28
   b9542:	f001 84ca 	beq.w	baeda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b9546:	2e10      	cmp	r6, #16
   b9548:	d1f5      	bne.n	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b954a:	680b      	ldr	r3, [r1, #0]
   b954c:	4a8e      	ldr	r2, [pc, #568]	; (b9788 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b954e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9552:	4293      	cmp	r3, r2
   b9554:	f041 826a 	bne.w	baa2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b9558:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b955a:	2e00      	cmp	r6, #0
   b955c:	d0eb      	beq.n	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b955e:	68a8      	ldr	r0, [r5, #8]
   b9560:	2100      	movs	r1, #0
   b9562:	f7fe fa21 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9566:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b9568:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b956a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b956c:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b956e:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9570:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9572:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9574:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9576:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9578:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b957a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b957c:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b957e:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9580:	68a8      	ldr	r0, [r5, #8]
   b9582:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9584:	2108      	movs	r1, #8
   b9586:	f7fe fa0f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b958a:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b958c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b958e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9590:	210c      	movs	r1, #12
   b9592:	f7fe fa16 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9596:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9598:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b959a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b959c:	210e      	movs	r1, #14
   b959e:	f7fe fa10 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b95a2:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b95a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b95a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b95aa:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b95ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b95ae:	6a1a      	ldr	r2, [r3, #32]
   b95b0:	b17a      	cbz	r2, b95d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b95b2:	7819      	ldrb	r1, [r3, #0]
   b95b4:	0708      	lsls	r0, r1, #28
   b95b6:	d40c      	bmi.n	b95d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b95b8:	1d19      	adds	r1, r3, #4
   b95ba:	3314      	adds	r3, #20
   b95bc:	f851 0b04 	ldr.w	r0, [r1], #4
   b95c0:	f842 0b04 	str.w	r0, [r2], #4
   b95c4:	4299      	cmp	r1, r3
   b95c6:	d1f9      	bne.n	b95bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b95c8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b95ca:	7813      	ldrb	r3, [r2, #0]
   b95cc:	f043 0308 	orr.w	r3, r3, #8
   b95d0:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b95d2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b95d4:	e03d      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b95d6:	680b      	ldr	r3, [r1, #0]
   b95d8:	4a6c      	ldr	r2, [pc, #432]	; (b978c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b95da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b95de:	4293      	cmp	r3, r2
   b95e0:	d141      	bne.n	b9666 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b95e2:	68c6      	ldr	r6, [r0, #12]
   b95e4:	2e00      	cmp	r6, #0
   b95e6:	d0a6      	beq.n	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b95e8:	68a8      	ldr	r0, [r5, #8]
   b95ea:	2100      	movs	r1, #0
   b95ec:	f7fe f9dc 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b95f0:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b95f2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b95f4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b95f6:	2104      	movs	r1, #4
   b95f8:	f7fe f9d6 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b95fc:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b95fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9600:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9602:	2108      	movs	r1, #8
   b9604:	f7fe f9d0 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9608:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b960a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b960c:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b960e:	210c      	movs	r1, #12
   b9610:	f7fe f9ca 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9614:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b9616:	68a8      	ldr	r0, [r5, #8]
   b9618:	68e6      	ldr	r6, [r4, #12]
   b961a:	2110      	movs	r1, #16
   b961c:	f7fe f9c4 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9620:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9622:	68e3      	ldr	r3, [r4, #12]
   b9624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9628:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b962a:	68e3      	ldr	r3, [r4, #12]
   b962c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b962e:	b17a      	cbz	r2, b9650 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9630:	7819      	ldrb	r1, [r3, #0]
   b9632:	0709      	lsls	r1, r1, #28
   b9634:	d40c      	bmi.n	b9650 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b9636:	1d19      	adds	r1, r3, #4
   b9638:	3318      	adds	r3, #24
   b963a:	f851 0b04 	ldr.w	r0, [r1], #4
   b963e:	f842 0b04 	str.w	r0, [r2], #4
   b9642:	4299      	cmp	r1, r3
   b9644:	d1f9      	bne.n	b963a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9646:	68e2      	ldr	r2, [r4, #12]
   b9648:	7813      	ldrb	r3, [r2, #0]
   b964a:	f043 0308 	orr.w	r3, r3, #8
   b964e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9650:	68e3      	ldr	r3, [r4, #12]
   b9652:	781b      	ldrb	r3, [r3, #0]
   b9654:	075f      	lsls	r7, r3, #29
   b9656:	f57f af6e 	bpl.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b965a:	4629      	mov	r1, r5
   b965c:	4620      	mov	r0, r4
}
   b965e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9662:	f7ff befd 	b.w	b9460 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b9666:	4a4a      	ldr	r2, [pc, #296]	; (b9790 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b9668:	4293      	cmp	r3, r2
   b966a:	d13d      	bne.n	b96e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b966c:	6906      	ldr	r6, [r0, #16]
   b966e:	2e00      	cmp	r6, #0
   b9670:	f43f af61 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9674:	68a8      	ldr	r0, [r5, #8]
   b9676:	2100      	movs	r1, #0
   b9678:	f7fe f996 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b967c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b967e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9680:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9682:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9684:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9686:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9688:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b968a:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b968c:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b968e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9690:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9692:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9694:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9696:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9698:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b969a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b969c:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b969e:	68a8      	ldr	r0, [r5, #8]
   b96a0:	6926      	ldr	r6, [r4, #16]
   b96a2:	2108      	movs	r1, #8
   b96a4:	f7fe f980 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b96a8:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b96aa:	68a8      	ldr	r0, [r5, #8]
   b96ac:	6926      	ldr	r6, [r4, #16]
   b96ae:	210c      	movs	r1, #12
   b96b0:	f7fe f97a 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b96b4:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b96b6:	6923      	ldr	r3, [r4, #16]
   b96b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b96bc:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b96be:	6923      	ldr	r3, [r4, #16]
   b96c0:	6a1a      	ldr	r2, [r3, #32]
   b96c2:	b17a      	cbz	r2, b96e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b96c4:	7819      	ldrb	r1, [r3, #0]
   b96c6:	070e      	lsls	r6, r1, #28
   b96c8:	d40c      	bmi.n	b96e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b96ca:	1d19      	adds	r1, r3, #4
   b96cc:	3314      	adds	r3, #20
   b96ce:	f851 0b04 	ldr.w	r0, [r1], #4
   b96d2:	f842 0b04 	str.w	r0, [r2], #4
   b96d6:	4299      	cmp	r1, r3
   b96d8:	d1f9      	bne.n	b96ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b96da:	6922      	ldr	r2, [r4, #16]
   b96dc:	7813      	ldrb	r3, [r2, #0]
   b96de:	f043 0308 	orr.w	r3, r3, #8
   b96e2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b96e4:	6923      	ldr	r3, [r4, #16]
   b96e6:	e7b4      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b96e8:	4a2a      	ldr	r2, [pc, #168]	; (b9794 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b96ea:	4293      	cmp	r3, r2
   b96ec:	d154      	bne.n	b9798 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b96ee:	6946      	ldr	r6, [r0, #20]
   b96f0:	2e00      	cmp	r6, #0
   b96f2:	f43f af20 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b96f6:	68a8      	ldr	r0, [r5, #8]
   b96f8:	2100      	movs	r1, #0
   b96fa:	f7fe f955 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b96fe:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b9700:	68a8      	ldr	r0, [r5, #8]
   b9702:	6966      	ldr	r6, [r4, #20]
   b9704:	2104      	movs	r1, #4
   b9706:	f7fe f95c 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b970a:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b970c:	68a8      	ldr	r0, [r5, #8]
   b970e:	6966      	ldr	r6, [r4, #20]
   b9710:	2106      	movs	r1, #6
   b9712:	f7fe f956 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9716:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b9718:	68a8      	ldr	r0, [r5, #8]
   b971a:	6966      	ldr	r6, [r4, #20]
   b971c:	2108      	movs	r1, #8
   b971e:	f7fe f950 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9722:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b9724:	68a8      	ldr	r0, [r5, #8]
   b9726:	6966      	ldr	r6, [r4, #20]
   b9728:	210a      	movs	r1, #10
   b972a:	f7fe f94a 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b972e:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b9730:	68a8      	ldr	r0, [r5, #8]
   b9732:	6966      	ldr	r6, [r4, #20]
   b9734:	210c      	movs	r1, #12
   b9736:	f7fe f944 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b973a:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b973c:	68a8      	ldr	r0, [r5, #8]
   b973e:	6966      	ldr	r6, [r4, #20]
   b9740:	210e      	movs	r1, #14
   b9742:	f7fe f93e 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9746:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b9748:	68a8      	ldr	r0, [r5, #8]
   b974a:	6966      	ldr	r6, [r4, #20]
   b974c:	2110      	movs	r1, #16
   b974e:	f7fe f938 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9752:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9754:	6963      	ldr	r3, [r4, #20]
   b9756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b975a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b975c:	6963      	ldr	r3, [r4, #20]
   b975e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9760:	b17a      	cbz	r2, b9782 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9762:	7819      	ldrb	r1, [r3, #0]
   b9764:	0708      	lsls	r0, r1, #28
   b9766:	d40c      	bmi.n	b9782 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9768:	1d19      	adds	r1, r3, #4
   b976a:	3318      	adds	r3, #24
   b976c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9770:	f842 0b04 	str.w	r0, [r2], #4
   b9774:	4299      	cmp	r1, r3
   b9776:	d1f9      	bne.n	b976c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9778:	6962      	ldr	r2, [r4, #20]
   b977a:	7813      	ldrb	r3, [r2, #0]
   b977c:	f043 0308 	orr.w	r3, r3, #8
   b9780:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9782:	6963      	ldr	r3, [r4, #20]
   b9784:	e765      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9786:	bf00      	nop
   b9788:	00101400 	.word	0x00101400
   b978c:	00140100 	.word	0x00140100
   b9790:	00100300 	.word	0x00100300
   b9794:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9798:	4a8c      	ldr	r2, [pc, #560]	; (b99cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b979a:	4293      	cmp	r3, r2
   b979c:	d149      	bne.n	b9832 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b979e:	69c6      	ldr	r6, [r0, #28]
   b97a0:	2e00      	cmp	r6, #0
   b97a2:	f43f aec8 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b97a6:	68a8      	ldr	r0, [r5, #8]
   b97a8:	2100      	movs	r1, #0
   b97aa:	f7fe f8fd 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b97ae:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b97b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b97b2:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b97b4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b97b6:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b97ba:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97bc:	2108      	movs	r1, #8
   b97be:	f7fe f8f3 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b97c2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b97c6:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97c8:	210c      	movs	r1, #12
   b97ca:	f7fe f8ed 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b97ce:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97d0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b97d2:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b97d4:	2110      	movs	r1, #16
   b97d6:	f7fe f8e7 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b97da:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b97dc:	68a8      	ldr	r0, [r5, #8]
   b97de:	69e6      	ldr	r6, [r4, #28]
   b97e0:	2114      	movs	r1, #20
   b97e2:	f7fe f8e1 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b97e6:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b97e8:	68a8      	ldr	r0, [r5, #8]
   b97ea:	69e6      	ldr	r6, [r4, #28]
   b97ec:	2118      	movs	r1, #24
   b97ee:	f7fe f8db 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b97f2:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b97f4:	68a8      	ldr	r0, [r5, #8]
   b97f6:	69e6      	ldr	r6, [r4, #28]
   b97f8:	211c      	movs	r1, #28
   b97fa:	f7fe f8d5 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b97fe:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9800:	69e3      	ldr	r3, [r4, #28]
   b9802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9806:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9808:	69e3      	ldr	r3, [r4, #28]
   b980a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b980c:	b17a      	cbz	r2, b982e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b980e:	7819      	ldrb	r1, [r3, #0]
   b9810:	0709      	lsls	r1, r1, #28
   b9812:	d40c      	bmi.n	b982e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9814:	1d19      	adds	r1, r3, #4
   b9816:	3324      	adds	r3, #36	; 0x24
   b9818:	f851 0b04 	ldr.w	r0, [r1], #4
   b981c:	f842 0b04 	str.w	r0, [r2], #4
   b9820:	4299      	cmp	r1, r3
   b9822:	d1f9      	bne.n	b9818 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9824:	69e2      	ldr	r2, [r4, #28]
   b9826:	7813      	ldrb	r3, [r2, #0]
   b9828:	f043 0308 	orr.w	r3, r3, #8
   b982c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b982e:	69e3      	ldr	r3, [r4, #28]
   b9830:	e70f      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9832:	4a67      	ldr	r2, [pc, #412]	; (b99d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9834:	4293      	cmp	r3, r2
   b9836:	f040 80cd 	bne.w	b99d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b983a:	6a06      	ldr	r6, [r0, #32]
   b983c:	2e00      	cmp	r6, #0
   b983e:	f43f ae7a 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9842:	68a8      	ldr	r0, [r5, #8]
   b9844:	2100      	movs	r1, #0
   b9846:	f7fe f8af 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b984a:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b984c:	68a8      	ldr	r0, [r5, #8]
   b984e:	6a26      	ldr	r6, [r4, #32]
   b9850:	2104      	movs	r1, #4
   b9852:	f7fe f8b6 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9856:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b9858:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b985a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b985c:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b985e:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9860:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9862:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9864:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9866:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b9868:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b986a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b986c:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b986e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9870:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9872:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9874:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9876:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9878:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b987a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b987c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b987e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9880:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9882:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9884:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9886:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b9888:	210c      	movs	r1, #12
   b988a:	68a8      	ldr	r0, [r5, #8]
   b988c:	6a26      	ldr	r6, [r4, #32]
   b988e:	f7fe f88b 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9892:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9894:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9896:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9898:	2110      	movs	r1, #16
   b989a:	f7fe f885 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b989e:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b98a0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b98a2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b98a4:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b98a6:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b98a8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b98aa:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b98ac:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b98ae:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b98b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b98b2:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b98b4:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b98b6:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b98b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b98ba:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b98bc:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b98be:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98c0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b98c2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98c4:	2118      	movs	r1, #24
   b98c6:	f7fe f86f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b98ca:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b98ce:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98d0:	211c      	movs	r1, #28
   b98d2:	f7fe f869 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b98d6:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b98da:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98dc:	2120      	movs	r1, #32
   b98de:	f7fe f863 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b98e2:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98e4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b98e6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98e8:	2124      	movs	r1, #36	; 0x24
   b98ea:	f7fe f85d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b98ee:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b98f0:	68a8      	ldr	r0, [r5, #8]
   b98f2:	6a26      	ldr	r6, [r4, #32]
   b98f4:	2128      	movs	r1, #40	; 0x28
   b98f6:	f7fe f857 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98fa:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b98fc:	6a26      	ldr	r6, [r4, #32]
   b98fe:	68a8      	ldr	r0, [r5, #8]
   b9900:	212c      	movs	r1, #44	; 0x2c
   b9902:	f7fe f851 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9906:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9908:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b990a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b990c:	2130      	movs	r1, #48	; 0x30
   b990e:	f7fe f84b 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9912:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9914:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9916:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9918:	2134      	movs	r1, #52	; 0x34
   b991a:	f7fe f845 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b991e:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9920:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9922:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9924:	2138      	movs	r1, #56	; 0x38
   b9926:	f7fe f83f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b992a:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b992c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b992e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9930:	213c      	movs	r1, #60	; 0x3c
   b9932:	f7fe f839 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9936:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9938:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b993a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b993c:	2140      	movs	r1, #64	; 0x40
   b993e:	f7fe f833 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9942:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b9944:	68a8      	ldr	r0, [r5, #8]
   b9946:	6a26      	ldr	r6, [r4, #32]
   b9948:	2144      	movs	r1, #68	; 0x44
   b994a:	f7fe f82d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b994e:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b9950:	68a8      	ldr	r0, [r5, #8]
   b9952:	6a26      	ldr	r6, [r4, #32]
   b9954:	2148      	movs	r1, #72	; 0x48
   b9956:	f7fe f827 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b995a:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b995c:	68a8      	ldr	r0, [r5, #8]
   b995e:	6a26      	ldr	r6, [r4, #32]
   b9960:	214c      	movs	r1, #76	; 0x4c
   b9962:	f7fe f82e 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9966:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b996a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b996c:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b996e:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9972:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9976:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9978:	68a8      	ldr	r0, [r5, #8]
   b997a:	2154      	movs	r1, #84	; 0x54
   b997c:	f7fe f814 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9980:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9982:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9984:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9986:	2158      	movs	r1, #88	; 0x58
   b9988:	f7fe f81b 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b998c:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b9990:	68a8      	ldr	r0, [r5, #8]
   b9992:	6a26      	ldr	r6, [r4, #32]
   b9994:	215a      	movs	r1, #90	; 0x5a
   b9996:	f7fe f814 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b999a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b999e:	6a22      	ldr	r2, [r4, #32]
   b99a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b99a4:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b99a6:	6a22      	ldr	r2, [r4, #32]
   b99a8:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b99aa:	6a21      	ldr	r1, [r4, #32]
   b99ac:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b99ae:	b158      	cbz	r0, b99c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b99b0:	780b      	ldrb	r3, [r1, #0]
   b99b2:	071b      	lsls	r3, r3, #28
   b99b4:	d408      	bmi.n	b99c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b99b6:	225c      	movs	r2, #92	; 0x5c
   b99b8:	3104      	adds	r1, #4
   b99ba:	f008 fc07 	bl	c21cc <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b99be:	6a22      	ldr	r2, [r4, #32]
   b99c0:	7813      	ldrb	r3, [r2, #0]
   b99c2:	f043 0308 	orr.w	r3, r3, #8
   b99c6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b99c8:	6a23      	ldr	r3, [r4, #32]
   b99ca:	e642      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b99cc:	00200500 	.word	0x00200500
   b99d0:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b99d4:	4a8e      	ldr	r2, [pc, #568]	; (b9c10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b99d6:	4293      	cmp	r3, r2
   b99d8:	d137      	bne.n	b9a4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b99da:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b99dc:	2b00      	cmp	r3, #0
   b99de:	f43f adaa 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b99e2:	688a      	ldr	r2, [r1, #8]
   b99e4:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b99e6:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b99e8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b99ea:	68a8      	ldr	r0, [r5, #8]
   b99ec:	2104      	movs	r1, #4
   b99ee:	f7fd ffdb 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99f2:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b99f4:	68a8      	ldr	r0, [r5, #8]
   b99f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b99f8:	2108      	movs	r1, #8
   b99fa:	f7fd ffd5 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99fe:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b9a00:	68a8      	ldr	r0, [r5, #8]
   b9a02:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9a04:	210c      	movs	r1, #12
   b9a06:	f7fd ffcf 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a0a:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b9a0c:	68a8      	ldr	r0, [r5, #8]
   b9a0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9a10:	2110      	movs	r1, #16
   b9a12:	f7fd ffc9 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a16:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a1e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9a24:	b17a      	cbz	r2, b9a46 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9a26:	7819      	ldrb	r1, [r3, #0]
   b9a28:	070f      	lsls	r7, r1, #28
   b9a2a:	d40c      	bmi.n	b9a46 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b9a2c:	1d19      	adds	r1, r3, #4
   b9a2e:	3318      	adds	r3, #24
   b9a30:	f851 0b04 	ldr.w	r0, [r1], #4
   b9a34:	f842 0b04 	str.w	r0, [r2], #4
   b9a38:	4299      	cmp	r1, r3
   b9a3a:	d1f9      	bne.n	b9a30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b9a3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9a3e:	7813      	ldrb	r3, [r2, #0]
   b9a40:	f043 0308 	orr.w	r3, r3, #8
   b9a44:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b9a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a48:	e603      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b9a4a:	4a72      	ldr	r2, [pc, #456]	; (b9c14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b9a4c:	4293      	cmp	r3, r2
   b9a4e:	d139      	bne.n	b9ac4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b9a50:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b9a52:	2e00      	cmp	r6, #0
   b9a54:	f43f ad6f 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b9a58:	68a8      	ldr	r0, [r5, #8]
   b9a5a:	2100      	movs	r1, #0
   b9a5c:	f7fd ffa4 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a60:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a62:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a66:	2104      	movs	r1, #4
   b9a68:	f7fd ff9e 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9a6c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a72:	2108      	movs	r1, #8
   b9a74:	f7fd ff98 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9a78:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a7a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a7e:	210c      	movs	r1, #12
   b9a80:	f7fd ff92 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9a84:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b9a86:	68a8      	ldr	r0, [r5, #8]
   b9a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b9a8a:	2110      	movs	r1, #16
   b9a8c:	f7fd ff8c 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a90:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9a92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a98:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9a9e:	b17a      	cbz	r2, b9ac0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9aa0:	7819      	ldrb	r1, [r3, #0]
   b9aa2:	070e      	lsls	r6, r1, #28
   b9aa4:	d40c      	bmi.n	b9ac0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b9aa6:	1d19      	adds	r1, r3, #4
   b9aa8:	3318      	adds	r3, #24
   b9aaa:	f851 0b04 	ldr.w	r0, [r1], #4
   b9aae:	f842 0b04 	str.w	r0, [r2], #4
   b9ab2:	4299      	cmp	r1, r3
   b9ab4:	d1f9      	bne.n	b9aaa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ab6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b9ab8:	7813      	ldrb	r3, [r2, #0]
   b9aba:	f043 0308 	orr.w	r3, r3, #8
   b9abe:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9ac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9ac2:	e5c6      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b9ac4:	4a54      	ldr	r2, [pc, #336]	; (b9c18 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b9ac6:	4293      	cmp	r3, r2
   b9ac8:	d151      	bne.n	b9b6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b9aca:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b9acc:	2e00      	cmp	r6, #0
   b9ace:	f43f ad32 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b9ad2:	68a8      	ldr	r0, [r5, #8]
   b9ad4:	2100      	movs	r1, #0
   b9ad6:	f7fd ff67 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ada:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9adc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9ade:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ae0:	2104      	movs	r1, #4
   b9ae2:	f7fd ff61 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9ae6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ae8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9aea:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9aec:	2108      	movs	r1, #8
   b9aee:	f7fd ff5b 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9af2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9af4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9af6:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9af8:	210c      	movs	r1, #12
   b9afa:	f7fd ff55 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9afe:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b9b00:	68a8      	ldr	r0, [r5, #8]
   b9b02:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9b04:	2110      	movs	r1, #16
   b9b06:	f7fd ff4f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b0a:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b9b0c:	68a8      	ldr	r0, [r5, #8]
   b9b0e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9b10:	2114      	movs	r1, #20
   b9b12:	f7fd ff49 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b16:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b18:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9b1a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b1c:	2118      	movs	r1, #24
   b9b1e:	f7fd ff43 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9b22:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b9b24:	68a8      	ldr	r0, [r5, #8]
   b9b26:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9b28:	211c      	movs	r1, #28
   b9b2a:	f7fd ff3d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b2e:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b9b30:	68a8      	ldr	r0, [r5, #8]
   b9b32:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9b34:	2120      	movs	r1, #32
   b9b36:	f7fd ff37 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b3a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9b3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9b42:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9b44:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9b48:	b17a      	cbz	r2, b9b6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9b4a:	7819      	ldrb	r1, [r3, #0]
   b9b4c:	0708      	lsls	r0, r1, #28
   b9b4e:	d40c      	bmi.n	b9b6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b9b50:	1d19      	adds	r1, r3, #4
   b9b52:	3328      	adds	r3, #40	; 0x28
   b9b54:	f851 0b04 	ldr.w	r0, [r1], #4
   b9b58:	f842 0b04 	str.w	r0, [r2], #4
   b9b5c:	4299      	cmp	r1, r3
   b9b5e:	d1f9      	bne.n	b9b54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b9b60:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b9b62:	7813      	ldrb	r3, [r2, #0]
   b9b64:	f043 0308 	orr.w	r3, r3, #8
   b9b68:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b9b6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9b6c:	e571      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b9b6e:	4a2b      	ldr	r2, [pc, #172]	; (b9c1c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b9b70:	4293      	cmp	r3, r2
   b9b72:	d155      	bne.n	b9c20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b9b74:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9b76:	2b00      	cmp	r3, #0
   b9b78:	f43f acdd 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9b7c:	688a      	ldr	r2, [r1, #8]
   b9b7e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b9b80:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b9b82:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b9b84:	68a8      	ldr	r0, [r5, #8]
   b9b86:	2104      	movs	r1, #4
   b9b88:	f7fd ff0e 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b8c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b8e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9b90:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b92:	2108      	movs	r1, #8
   b9b94:	f7fd ff08 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9b98:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b9a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9b9c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b9e:	210c      	movs	r1, #12
   b9ba0:	f7fd ff02 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9ba4:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ba6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9ba8:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9baa:	2110      	movs	r1, #16
   b9bac:	f7fd fefc 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9bb0:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9bb2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b9bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9bb6:	7d12      	ldrb	r2, [r2, #20]
   b9bb8:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9bba:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b9bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9bbe:	7d52      	ldrb	r2, [r2, #21]
   b9bc0:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9bc2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b9bc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9bc6:	7d92      	ldrb	r2, [r2, #22]
   b9bc8:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9bca:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b9bce:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9bd0:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b9bd2:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b9bd4:	68a8      	ldr	r0, [r5, #8]
   b9bd6:	2118      	movs	r1, #24
   b9bd8:	f7fd fee6 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bdc:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9be4:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b9bea:	b17a      	cbz	r2, b9c0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9bec:	7819      	ldrb	r1, [r3, #0]
   b9bee:	0709      	lsls	r1, r1, #28
   b9bf0:	d40c      	bmi.n	b9c0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b9bf2:	1d19      	adds	r1, r3, #4
   b9bf4:	3320      	adds	r3, #32
   b9bf6:	f851 0b04 	ldr.w	r0, [r1], #4
   b9bfa:	f842 0b04 	str.w	r0, [r2], #4
   b9bfe:	4299      	cmp	r1, r3
   b9c00:	d1f9      	bne.n	b9bf6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9c02:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b9c04:	7813      	ldrb	r3, [r2, #0]
   b9c06:	f043 0308 	orr.w	r3, r3, #8
   b9c0a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9c0e:	e520      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9c10:	00140900 	.word	0x00140900
   b9c14:	00141100 	.word	0x00141100
   b9c18:	00241200 	.word	0x00241200
   b9c1c:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b9c20:	4a30      	ldr	r2, [pc, #192]	; (b9ce4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b9c22:	4293      	cmp	r3, r2
   b9c24:	d160      	bne.n	b9ce8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b9c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b9c28:	2b00      	cmp	r3, #0
   b9c2a:	f43f ac84 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9c2e:	688a      	ldr	r2, [r1, #8]
   b9c30:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b9c32:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b9c34:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9c36:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b9c38:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9c3a:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b9c3c:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b9c3e:	68a8      	ldr	r0, [r5, #8]
   b9c40:	2104      	movs	r1, #4
   b9c42:	f7fd feb1 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c46:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c48:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9c4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c4c:	2108      	movs	r1, #8
   b9c4e:	f7fd feab 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9c52:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c54:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9c56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c58:	210c      	movs	r1, #12
   b9c5a:	f7fd fea5 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9c5e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c60:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9c62:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c64:	2110      	movs	r1, #16
   b9c66:	f7fd fe9f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9c6a:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c6c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9c6e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c70:	2114      	movs	r1, #20
   b9c72:	f7fd fe99 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9c76:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9c78:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b9c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9c7c:	7e12      	ldrb	r2, [r2, #24]
   b9c7e:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9c80:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b9c82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9c84:	7e52      	ldrb	r2, [r2, #25]
   b9c86:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9c88:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b9c8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9c8c:	7e92      	ldrb	r2, [r2, #26]
   b9c8e:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9c90:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b9c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9c94:	7ed2      	ldrb	r2, [r2, #27]
   b9c96:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b9c98:	68a8      	ldr	r0, [r5, #8]
   b9c9a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9c9c:	211c      	movs	r1, #28
   b9c9e:	f7fd fe83 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ca2:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b9ca4:	68a8      	ldr	r0, [r5, #8]
   b9ca6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9ca8:	2120      	movs	r1, #32
   b9caa:	f7fd fe7d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cae:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9cb6:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9cb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9cbc:	b17a      	cbz	r2, b9cde <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9cbe:	7819      	ldrb	r1, [r3, #0]
   b9cc0:	070f      	lsls	r7, r1, #28
   b9cc2:	d40c      	bmi.n	b9cde <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b9cc4:	1d19      	adds	r1, r3, #4
   b9cc6:	3328      	adds	r3, #40	; 0x28
   b9cc8:	f851 0b04 	ldr.w	r0, [r1], #4
   b9ccc:	f842 0b04 	str.w	r0, [r2], #4
   b9cd0:	4299      	cmp	r1, r3
   b9cd2:	d1f9      	bne.n	b9cc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b9cd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b9cd6:	7813      	ldrb	r3, [r2, #0]
   b9cd8:	f043 0308 	orr.w	r3, r3, #8
   b9cdc:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b9cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9ce0:	e4b7      	b.n	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9ce2:	bf00      	nop
   b9ce4:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b9ce8:	4aa1      	ldr	r2, [pc, #644]	; (b9f70 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b9cea:	4293      	cmp	r3, r2
   b9cec:	f040 80f0 	bne.w	b9ed0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b9cf0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b9cf2:	2e00      	cmp	r6, #0
   b9cf4:	f43f ac1f 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b9cf8:	68a8      	ldr	r0, [r5, #8]
   b9cfa:	2100      	movs	r1, #0
   b9cfc:	f7fd fe54 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d00:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9d02:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d06:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9d08:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9d0a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d0e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9d10:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   b9d12:	68a8      	ldr	r0, [r5, #8]
   b9d14:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9d16:	2106      	movs	r1, #6
   b9d18:	f7fd fe53 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9d1c:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b9d1e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9d20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d22:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9d24:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9d26:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d2a:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9d2c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9d2e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d32:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9d34:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9d36:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9d38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d3a:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9d3c:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   b9d3e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b9d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d42:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b9d44:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   b9d46:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9d48:	68a8      	ldr	r0, [r5, #8]
   b9d4a:	2110      	movs	r1, #16
   b9d4c:	f7fd fe2c 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d50:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d52:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b9d54:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d56:	2114      	movs	r1, #20
   b9d58:	f7fd fe26 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b9d5c:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9d5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b9d60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d62:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b9d64:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9d66:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b9d68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d6a:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b9d6c:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9d6e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b9d70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d72:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b9d74:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9d76:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b9d78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9d7a:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b9d7c:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d7e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b9d80:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d82:	211c      	movs	r1, #28
   b9d84:	f7fd fe10 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b9d88:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d8a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b9d8c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d8e:	2120      	movs	r1, #32
   b9d90:	f7fd fe0a 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b9d94:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d96:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b9d98:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d9a:	2124      	movs	r1, #36	; 0x24
   b9d9c:	f7fd fe04 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b9da0:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9da2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b9da4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9da6:	2128      	movs	r1, #40	; 0x28
   b9da8:	f7fd fdfe 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b9dac:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   b9dae:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9db0:	68a8      	ldr	r0, [r5, #8]
   b9db2:	212c      	movs	r1, #44	; 0x2c
   b9db4:	f7fd fdf8 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9db8:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   b9dba:	68a8      	ldr	r0, [r5, #8]
   b9dbc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9dbe:	2130      	movs	r1, #48	; 0x30
   b9dc0:	f7fd fdf2 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dc4:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dc6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b9dc8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dca:	2134      	movs	r1, #52	; 0x34
   b9dcc:	f7fd fdec 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b9dd0:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dd2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b9dd4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dd6:	2138      	movs	r1, #56	; 0x38
   b9dd8:	f7fd fde6 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b9ddc:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dde:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b9de0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9de2:	213c      	movs	r1, #60	; 0x3c
   b9de4:	f7fd fde0 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b9de8:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dea:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b9dec:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dee:	2140      	movs	r1, #64	; 0x40
   b9df0:	f7fd fdda 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b9df4:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   b9df6:	68a8      	ldr	r0, [r5, #8]
   b9df8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9dfa:	2144      	movs	r1, #68	; 0x44
   b9dfc:	f7fd fdd4 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e00:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e02:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b9e04:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e06:	2148      	movs	r1, #72	; 0x48
   b9e08:	f7fd fdce 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b9e0c:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e0e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b9e10:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e12:	214c      	movs	r1, #76	; 0x4c
   b9e14:	f7fd fdc8 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b9e18:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e1a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b9e1c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e1e:	2150      	movs	r1, #80	; 0x50
   b9e20:	f7fd fdc2 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b9e24:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e26:	2154      	movs	r1, #84	; 0x54
   b9e28:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b9e2a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e2c:	f7fd fdbc 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b9e30:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   b9e32:	68a8      	ldr	r0, [r5, #8]
   b9e34:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e36:	2158      	movs	r1, #88	; 0x58
   b9e38:	f7fd fdc3 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e3c:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   b9e40:	68a8      	ldr	r0, [r5, #8]
   b9e42:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e44:	215a      	movs	r1, #90	; 0x5a
   b9e46:	f7fd fdbc 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e4a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   b9e4e:	68a8      	ldr	r0, [r5, #8]
   b9e50:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e52:	215c      	movs	r1, #92	; 0x5c
   b9e54:	f7fd fdb5 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e58:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9e5c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b9e5e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9e60:	215e      	movs	r1, #94	; 0x5e
   b9e62:	f7fd fdae 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b9e66:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   b9e6a:	68a8      	ldr	r0, [r5, #8]
   b9e6c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e6e:	2160      	movs	r1, #96	; 0x60
   b9e70:	f7fd fda7 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e74:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   b9e78:	68a8      	ldr	r0, [r5, #8]
   b9e7a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e7c:	2162      	movs	r1, #98	; 0x62
   b9e7e:	f7fd fda0 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e82:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   b9e86:	68a8      	ldr	r0, [r5, #8]
   b9e88:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e8a:	2164      	movs	r1, #100	; 0x64
   b9e8c:	f7fd fd8c 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e90:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   b9e92:	68a8      	ldr	r0, [r5, #8]
   b9e94:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9e96:	2168      	movs	r1, #104	; 0x68
   b9e98:	f7fd fd86 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e9c:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9e9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9ea4:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b9ea6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9ea8:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9eaa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b9eac:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   b9eb0:	b158      	cbz	r0, b9eca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9eb2:	780b      	ldrb	r3, [r1, #0]
   b9eb4:	071e      	lsls	r6, r3, #28
   b9eb6:	d408      	bmi.n	b9eca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   b9eb8:	2274      	movs	r2, #116	; 0x74
   b9eba:	3104      	adds	r1, #4
   b9ebc:	f008 f986 	bl	c21cc <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ec0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b9ec2:	7813      	ldrb	r3, [r2, #0]
   b9ec4:	f043 0308 	orr.w	r3, r3, #8
   b9ec8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   b9eca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9ecc:	f7ff bbc1 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   b9ed0:	4a28      	ldr	r2, [pc, #160]	; (b9f74 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   b9ed2:	4293      	cmp	r3, r2
   b9ed4:	d150      	bne.n	b9f78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   b9ed6:	6a86      	ldr	r6, [r0, #40]	; 0x28
   b9ed8:	2e00      	cmp	r6, #0
   b9eda:	f43f ab2c 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   b9ede:	68a8      	ldr	r0, [r5, #8]
   b9ee0:	2100      	movs	r1, #0
   b9ee2:	f7fd fd61 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ee6:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   b9ee8:	68a8      	ldr	r0, [r5, #8]
   b9eea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b9eec:	2104      	movs	r1, #4
   b9eee:	f7fd fd5b 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ef2:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ef4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b9ef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ef8:	2108      	movs	r1, #8
   b9efa:	f7fd fd55 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b9efe:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   b9f00:	68a8      	ldr	r0, [r5, #8]
   b9f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b9f04:	210c      	movs	r1, #12
   b9f06:	f7fd fd5c 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f0a:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   b9f0c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   b9f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b9f10:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   b9f12:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   b9f14:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   b9f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b9f18:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   b9f1a:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   b9f1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   b9f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b9f20:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   b9f22:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   b9f24:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   b9f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b9f28:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   b9f2a:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   b9f2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   b9f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b9f30:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   b9f32:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   b9f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b9f36:	68aa      	ldr	r2, [r5, #8]
   b9f38:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   b9f3a:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b9f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f42:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b9f46:	6a1a      	ldr	r2, [r3, #32]
   b9f48:	b17a      	cbz	r2, b9f6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f4a:	7819      	ldrb	r1, [r3, #0]
   b9f4c:	0708      	lsls	r0, r1, #28
   b9f4e:	d40c      	bmi.n	b9f6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   b9f50:	1d19      	adds	r1, r3, #4
   b9f52:	3318      	adds	r3, #24
   b9f54:	f851 0b04 	ldr.w	r0, [r1], #4
   b9f58:	f842 0b04 	str.w	r0, [r2], #4
   b9f5c:	4299      	cmp	r1, r3
   b9f5e:	d1f9      	bne.n	b9f54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   b9f60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b9f62:	7813      	ldrb	r3, [r2, #0]
   b9f64:	f043 0308 	orr.w	r3, r3, #8
   b9f68:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   b9f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b9f6c:	f7ff bb71 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9f70:	00741700 	.word	0x00741700
   b9f74:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   b9f78:	4a84      	ldr	r2, [pc, #528]	; (ba18c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   b9f7a:	4293      	cmp	r3, r2
   b9f7c:	d13a      	bne.n	b9ff4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   b9f7e:	6c06      	ldr	r6, [r0, #64]	; 0x40
   b9f80:	2e00      	cmp	r6, #0
   b9f82:	f43f aad8 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   b9f86:	68a8      	ldr	r0, [r5, #8]
   b9f88:	2100      	movs	r1, #0
   b9f8a:	f7fd fd0d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f8e:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f90:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   b9f92:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f94:	2104      	movs	r1, #4
   b9f96:	f7fd fd07 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   b9f9a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f9c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   b9f9e:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fa0:	2108      	movs	r1, #8
   b9fa2:	f7fd fd01 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   b9fa6:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   b9fa8:	68a8      	ldr	r0, [r5, #8]
   b9faa:	6c26      	ldr	r6, [r4, #64]	; 0x40
   b9fac:	210c      	movs	r1, #12
   b9fae:	f7fd fcfb 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fb2:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   b9fb4:	68a8      	ldr	r0, [r5, #8]
   b9fb6:	6c26      	ldr	r6, [r4, #64]	; 0x40
   b9fb8:	2110      	movs	r1, #16
   b9fba:	f7fd fcf5 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fbe:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b9fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9fc6:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b9fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9fcc:	b17a      	cbz	r2, b9fee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9fce:	7819      	ldrb	r1, [r3, #0]
   b9fd0:	0709      	lsls	r1, r1, #28
   b9fd2:	d40c      	bmi.n	b9fee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   b9fd4:	1d19      	adds	r1, r3, #4
   b9fd6:	3318      	adds	r3, #24
   b9fd8:	f851 0b04 	ldr.w	r0, [r1], #4
   b9fdc:	f842 0b04 	str.w	r0, [r2], #4
   b9fe0:	4299      	cmp	r1, r3
   b9fe2:	d1f9      	bne.n	b9fd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   b9fe4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b9fe6:	7813      	ldrb	r3, [r2, #0]
   b9fe8:	f043 0308 	orr.w	r3, r3, #8
   b9fec:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   b9fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b9ff0:	f7ff bb2f 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   b9ff4:	4a66      	ldr	r2, [pc, #408]	; (ba190 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   b9ff6:	4293      	cmp	r3, r2
   b9ff8:	d138      	bne.n	ba06c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   b9ffa:	6c46      	ldr	r6, [r0, #68]	; 0x44
   b9ffc:	2e00      	cmp	r6, #0
   b9ffe:	f43f aa9a 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba002:	68a8      	ldr	r0, [r5, #8]
   ba004:	2100      	movs	r1, #0
   ba006:	f7fd fccf 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba00a:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba00c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba00e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba010:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba012:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba014:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba016:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba018:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba01a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba01c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba01e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba020:	7a52      	ldrb	r2, [r2, #9]
   ba022:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba024:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba026:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba028:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba02a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba02c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba02e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba030:	7ad2      	ldrb	r2, [r2, #11]
   ba032:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba034:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba036:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba038:	210c      	movs	r1, #12
   ba03a:	f7fd fcb5 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba03e:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba040:	68a8      	ldr	r0, [r5, #8]
   ba042:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba044:	2110      	movs	r1, #16
   ba046:	f7fd fcbc 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba04a:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba04c:	68a8      	ldr	r0, [r5, #8]
   ba04e:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba050:	2112      	movs	r1, #18
   ba052:	f7fd fcb6 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba056:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba058:	68ab      	ldr	r3, [r5, #8]
   ba05a:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba05c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba05e:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba060:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba066:	61da      	str	r2, [r3, #28]
   ba068:	f7ff ba65 	b.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba06c:	4a49      	ldr	r2, [pc, #292]	; (ba194 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba06e:	4293      	cmp	r3, r2
   ba070:	d162      	bne.n	ba138 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba072:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba074:	2b00      	cmp	r3, #0
   ba076:	f43f aa5e 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba07a:	688a      	ldr	r2, [r1, #8]
   ba07c:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba07e:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba080:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba082:	68a8      	ldr	r0, [r5, #8]
   ba084:	2104      	movs	r1, #4
   ba086:	f7fd fc8f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba08a:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba08c:	68a8      	ldr	r0, [r5, #8]
   ba08e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba090:	2108      	movs	r1, #8
   ba092:	f7fd fc89 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba096:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba098:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba09a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba09c:	210c      	movs	r1, #12
   ba09e:	f7fd fc83 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba0a2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0a4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba0a6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0a8:	2110      	movs	r1, #16
   ba0aa:	f7fd fc7d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba0ae:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba0b2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0b4:	2114      	movs	r1, #20
   ba0b6:	f7fd fc77 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba0ba:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba0bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba0be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba0c0:	7e12      	ldrb	r2, [r2, #24]
   ba0c2:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba0c4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba0c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba0c8:	7e52      	ldrb	r2, [r2, #25]
   ba0ca:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba0cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba0ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba0d0:	7e92      	ldrb	r2, [r2, #26]
   ba0d2:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba0d4:	211c      	movs	r1, #28
   ba0d6:	68a8      	ldr	r0, [r5, #8]
   ba0d8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba0da:	f7fd fc65 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0de:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba0e0:	68a8      	ldr	r0, [r5, #8]
   ba0e2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba0e4:	2120      	movs	r1, #32
   ba0e6:	f7fd fc5f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0ea:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba0ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba0ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba0f0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba0f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba0f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba0fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba0fc:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba100:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba10a:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba10c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba10e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba110:	b17a      	cbz	r2, ba132 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba112:	7819      	ldrb	r1, [r3, #0]
   ba114:	070f      	lsls	r7, r1, #28
   ba116:	d40c      	bmi.n	ba132 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba118:	1d19      	adds	r1, r3, #4
   ba11a:	332c      	adds	r3, #44	; 0x2c
   ba11c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba120:	f842 0b04 	str.w	r0, [r2], #4
   ba124:	4299      	cmp	r1, r3
   ba126:	d1f9      	bne.n	ba11c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba128:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba12a:	7813      	ldrb	r3, [r2, #0]
   ba12c:	f043 0308 	orr.w	r3, r3, #8
   ba130:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba132:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba134:	f7ff ba8d 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba138:	784a      	ldrb	r2, [r1, #1]
   ba13a:	2a35      	cmp	r2, #53	; 0x35
   ba13c:	d17f      	bne.n	ba23e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba13e:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba140:	2e00      	cmp	r6, #0
   ba142:	f43f a9f8 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba146:	68a8      	ldr	r0, [r5, #8]
   ba148:	2100      	movs	r1, #0
   ba14a:	f7fd fc2d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba14e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba150:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba152:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba154:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba156:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba158:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba15a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba15c:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba15e:	725a      	strb	r2, [r3, #9]
   ba160:	f04f 0808 	mov.w	r8, #8
   ba164:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba166:	f04f 0a0c 	mov.w	sl, #12
   ba16a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba16c:	7a59      	ldrb	r1, [r3, #9]
   ba16e:	b2ba      	uxth	r2, r7
   ba170:	4291      	cmp	r1, r2
   ba172:	d811      	bhi.n	ba198 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba174:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba176:	2201      	movs	r2, #1
   ba178:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba17c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba17e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba182:	2800      	cmp	r0, #0
   ba184:	d14d      	bne.n	ba222 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba186:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba188:	f7ff ba63 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba18c:	00142200 	.word	0x00142200
   ba190:	00182600 	.word	0x00182600
   ba194:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba198:	886a      	ldrh	r2, [r5, #2]
   ba19a:	fb0a f607 	mul.w	r6, sl, r7
   ba19e:	3a08      	subs	r2, #8
   ba1a0:	42b2      	cmp	r2, r6
   ba1a2:	dde7      	ble.n	ba174 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba1a4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba1a6:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba1a8:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba1ac:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba1ae:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba1b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba1b2:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba1b4:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba1b6:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba1b8:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba1ba:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba1bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba1be:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba1c0:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba1c2:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba1c4:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba1c6:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba1c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba1ca:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba1cc:	4433      	add	r3, r6
   ba1ce:	78d2      	ldrb	r2, [r2, #3]
   ba1d0:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba1d2:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba1d6:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba1da:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba1de:	68a8      	ldr	r0, [r5, #8]
   ba1e0:	b289      	uxth	r1, r1
   ba1e2:	f7fd fbee 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba1e6:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba1e8:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba1ec:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba1f0:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba1f4:	68a8      	ldr	r0, [r5, #8]
   ba1f6:	b289      	uxth	r1, r1
   ba1f8:	f7fd fbe3 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba1fc:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba1fe:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba202:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba206:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba20a:	68a8      	ldr	r0, [r5, #8]
   ba20c:	b289      	uxth	r1, r1
   ba20e:	f7fd fbcb 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba212:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba214:	3701      	adds	r7, #1
   ba216:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba218:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba21a:	f108 080c 	add.w	r8, r8, #12
   ba21e:	d1a4      	bne.n	ba16a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba220:	e7a8      	b.n	ba174 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba222:	780b      	ldrb	r3, [r1, #0]
   ba224:	071e      	lsls	r6, r3, #28
   ba226:	d4ae      	bmi.n	ba186 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba228:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba22c:	3104      	adds	r1, #4
   ba22e:	f007 ffcd 	bl	c21cc <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba232:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba234:	7813      	ldrb	r3, [r2, #0]
   ba236:	f043 0308 	orr.w	r3, r3, #8
   ba23a:	7013      	strb	r3, [r2, #0]
   ba23c:	e7a3      	b.n	ba186 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba23e:	2a3c      	cmp	r2, #60	; 0x3c
   ba240:	f040 80bf 	bne.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba244:	884a      	ldrh	r2, [r1, #2]
   ba246:	2a28      	cmp	r2, #40	; 0x28
   ba248:	d002      	beq.n	ba250 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba24a:	2a40      	cmp	r2, #64	; 0x40
   ba24c:	f040 80b9 	bne.w	ba3c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   ba250:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba252:	2b00      	cmp	r3, #0
   ba254:	f43f a96f 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba258:	68aa      	ldr	r2, [r5, #8]
   ba25a:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   ba25c:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   ba25e:	68a8      	ldr	r0, [r5, #8]
   ba260:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba262:	2102      	movs	r1, #2
   ba264:	f7fd fbad 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba268:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   ba26a:	68a8      	ldr	r0, [r5, #8]
   ba26c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba26e:	2104      	movs	r1, #4
   ba270:	f7fd fb9a 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba274:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba276:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba278:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba27a:	2108      	movs	r1, #8
   ba27c:	f7fd fb94 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba280:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba282:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba284:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba286:	210c      	movs	r1, #12
   ba288:	f7fd fb8e 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba28c:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba28e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba290:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba292:	2110      	movs	r1, #16
   ba294:	f7fd fb88 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba298:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   ba29a:	886b      	ldrh	r3, [r5, #2]
   ba29c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba29e:	2b28      	cmp	r3, #40	; 0x28
   ba2a0:	d14b      	bne.n	ba33a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   ba2a2:	2600      	movs	r6, #0
   ba2a4:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   ba2a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2a8:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   ba2aa:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   ba2ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2ae:	7d12      	ldrb	r2, [r2, #20]
   ba2b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba2b4:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   ba2b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2b8:	7d52      	ldrb	r2, [r2, #21]
   ba2ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba2be:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   ba2c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2c2:	7d92      	ldrb	r2, [r2, #22]
   ba2c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   ba2c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2ca:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   ba2ce:	68a8      	ldr	r0, [r5, #8]
   ba2d0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba2d2:	2118      	movs	r1, #24
   ba2d4:	f7fd fb68 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2d8:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   ba2da:	68a8      	ldr	r0, [r5, #8]
   ba2dc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba2de:	211c      	movs	r1, #28
   ba2e0:	f7fd fb62 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2e4:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   ba2e6:	68a8      	ldr	r0, [r5, #8]
   ba2e8:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba2ea:	2120      	movs	r1, #32
   ba2ec:	f7fd fb5c 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2f0:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   ba2f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2f4:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   ba2f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba2f8:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   ba2fa:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba2fc:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba2fe:	68a8      	ldr	r0, [r5, #8]
   ba300:	f7fd fb52 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba304:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba306:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba30c:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba30e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   ba312:	b17a      	cbz	r2, ba334 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba314:	7819      	ldrb	r1, [r3, #0]
   ba316:	0708      	lsls	r0, r1, #28
   ba318:	d40c      	bmi.n	ba334 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   ba31a:	1d19      	adds	r1, r3, #4
   ba31c:	3344      	adds	r3, #68	; 0x44
   ba31e:	f851 0b04 	ldr.w	r0, [r1], #4
   ba322:	f842 0b04 	str.w	r0, [r2], #4
   ba326:	4299      	cmp	r1, r3
   ba328:	d1f9      	bne.n	ba31e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba32a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   ba32c:	7813      	ldrb	r3, [r2, #0]
   ba32e:	f043 0308 	orr.w	r3, r3, #8
   ba332:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   ba334:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba336:	f7ff b98c 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba33a:	68a8      	ldr	r0, [r5, #8]
   ba33c:	2114      	movs	r1, #20
   ba33e:	f7fd fb33 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   ba342:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba344:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba346:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba348:	2118      	movs	r1, #24
   ba34a:	f7fd fb2d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba34e:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   ba350:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   ba352:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba354:	f892 2020 	ldrb.w	r2, [r2, #32]
   ba358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba35c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   ba35e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba360:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   ba364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba368:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   ba36a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba36c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   ba370:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   ba374:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   ba376:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba378:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   ba37c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   ba380:	68a8      	ldr	r0, [r5, #8]
   ba382:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba384:	2124      	movs	r1, #36	; 0x24
   ba386:	f7fd fb0f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba38a:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   ba38c:	68a8      	ldr	r0, [r5, #8]
   ba38e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba390:	2128      	movs	r1, #40	; 0x28
   ba392:	f7fd fb09 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba396:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   ba398:	68a8      	ldr	r0, [r5, #8]
   ba39a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba39c:	212c      	movs	r1, #44	; 0x2c
   ba39e:	f7fd fb03 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3a2:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   ba3a4:	68a8      	ldr	r0, [r5, #8]
   ba3a6:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba3a8:	2130      	movs	r1, #48	; 0x30
   ba3aa:	f7fd fafd 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3ae:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   ba3b0:	2134      	movs	r1, #52	; 0x34
   ba3b2:	68a8      	ldr	r0, [r5, #8]
   ba3b4:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba3b6:	f7fd faf7 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3ba:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba3bc:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba3be:	213c      	movs	r1, #60	; 0x3c
   ba3c0:	e79d      	b.n	ba2fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   ba3c2:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   ba3c6:	d12a      	bne.n	ba41e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   ba3c8:	6d66      	ldr	r6, [r4, #84]	; 0x54
   ba3ca:	2e00      	cmp	r6, #0
   ba3cc:	f43f a8b3 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   ba3d0:	68a8      	ldr	r0, [r5, #8]
   ba3d2:	2100      	movs	r1, #0
   ba3d4:	f7fd fae8 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3d8:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba3da:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba3dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba3de:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba3e0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba3e2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba3e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba3e6:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba3e8:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba3ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba3f0:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba3f4:	6a1a      	ldr	r2, [r3, #32]
   ba3f6:	b17a      	cbz	r2, ba418 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3f8:	7819      	ldrb	r1, [r3, #0]
   ba3fa:	0709      	lsls	r1, r1, #28
   ba3fc:	d40c      	bmi.n	ba418 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   ba3fe:	1d19      	adds	r1, r3, #4
   ba400:	3314      	adds	r3, #20
   ba402:	f851 0b04 	ldr.w	r0, [r1], #4
   ba406:	f842 0b04 	str.w	r0, [r2], #4
   ba40a:	4299      	cmp	r1, r3
   ba40c:	d1f9      	bne.n	ba402 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba40e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   ba410:	7813      	ldrb	r3, [r2, #0]
   ba412:	f043 0308 	orr.w	r3, r3, #8
   ba416:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba418:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba41a:	f7ff b91a 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   ba41e:	4aa1      	ldr	r2, [pc, #644]	; (ba6a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   ba420:	4293      	cmp	r3, r2
   ba422:	f47f a888 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   ba426:	69a6      	ldr	r6, [r4, #24]
   ba428:	2e00      	cmp	r6, #0
   ba42a:	f43f a884 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   ba42e:	68a8      	ldr	r0, [r5, #8]
   ba430:	2100      	movs	r1, #0
   ba432:	f7fd fab9 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba436:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba438:	69a3      	ldr	r3, [r4, #24]
   ba43a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba43e:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba440:	69a3      	ldr	r3, [r4, #24]
   ba442:	691a      	ldr	r2, [r3, #16]
   ba444:	b14a      	cbz	r2, ba45a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba446:	7819      	ldrb	r1, [r3, #0]
   ba448:	070f      	lsls	r7, r1, #28
   ba44a:	d406      	bmi.n	ba45a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   ba44c:	685b      	ldr	r3, [r3, #4]
   ba44e:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   ba450:	69a2      	ldr	r2, [r4, #24]
   ba452:	7813      	ldrb	r3, [r2, #0]
   ba454:	f043 0308 	orr.w	r3, r3, #8
   ba458:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   ba45a:	69a3      	ldr	r3, [r4, #24]
   ba45c:	f7ff b8f9 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   ba460:	784b      	ldrb	r3, [r1, #1]
   ba462:	2b72      	cmp	r3, #114	; 0x72
   ba464:	f040 80a4 	bne.w	ba5b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   ba468:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba46a:	2b00      	cmp	r3, #0
   ba46c:	d069      	beq.n	ba542 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   ba46e:	689b      	ldr	r3, [r3, #8]
   ba470:	2b00      	cmp	r3, #0
   ba472:	d066      	beq.n	ba542 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   ba474:	688a      	ldr	r2, [r1, #8]
   ba476:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   ba478:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   ba47a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba47c:	68a8      	ldr	r0, [r5, #8]
   ba47e:	689f      	ldr	r7, [r3, #8]
   ba480:	4631      	mov	r1, r6
   ba482:	f7fd fa9e 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba486:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   ba488:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba48a:	68a8      	ldr	r0, [r5, #8]
   ba48c:	689e      	ldr	r6, [r3, #8]
   ba48e:	2104      	movs	r1, #4
   ba490:	f7fd fa8a 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba494:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   ba496:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba498:	68a8      	ldr	r0, [r5, #8]
   ba49a:	689e      	ldr	r6, [r3, #8]
   ba49c:	2108      	movs	r1, #8
   ba49e:	f7fd fa83 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4a2:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   ba4a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba4a6:	68a8      	ldr	r0, [r5, #8]
   ba4a8:	689e      	ldr	r6, [r3, #8]
   ba4aa:	210c      	movs	r1, #12
   ba4ac:	f7fd fa7c 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4b0:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   ba4b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba4b4:	68a8      	ldr	r0, [r5, #8]
   ba4b6:	689e      	ldr	r6, [r3, #8]
   ba4b8:	2110      	movs	r1, #16
   ba4ba:	f7fd fa82 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4be:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba4c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba4c2:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba4c4:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba4c6:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba4c8:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba4ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba4cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba4ce:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba4d0:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba4d2:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   ba4d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba4d6:	689e      	ldr	r6, [r3, #8]
   ba4d8:	7833      	ldrb	r3, [r6, #0]
   ba4da:	bb23      	cbnz	r3, ba526 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   ba4dc:	68a8      	ldr	r0, [r5, #8]
   ba4de:	f44f 7103 	mov.w	r1, #524	; 0x20c
   ba4e2:	f7fd fa6e 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba4e6:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba4e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba4ea:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba4ec:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba4ee:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba4f2:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   ba4f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba4f6:	689b      	ldr	r3, [r3, #8]
   ba4f8:	781a      	ldrb	r2, [r3, #0]
   ba4fa:	2a00      	cmp	r2, #0
   ba4fc:	f040 865d 	bne.w	bb1ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   ba500:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   ba502:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   ba506:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba508:	b299      	uxth	r1, r3
   ba50a:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba50c:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba50e:	d914      	bls.n	ba53a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   ba510:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   ba514:	d011      	beq.n	ba53a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   ba516:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba518:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   ba51a:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba51c:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   ba51e:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba520:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba522:	3301      	adds	r3, #1
   ba524:	e7f0      	b.n	ba508 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   ba526:	68a8      	ldr	r0, [r5, #8]
   ba528:	2114      	movs	r1, #20
   ba52a:	f7fd fa4a 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba52e:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba530:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba532:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba534:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba536:	7d92      	ldrb	r2, [r2, #22]
   ba538:	e7db      	b.n	ba4f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba53a:	7813      	ldrb	r3, [r2, #0]
   ba53c:	f043 0308 	orr.w	r3, r3, #8
   ba540:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   ba542:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba544:	2b00      	cmp	r3, #0
   ba546:	f43e aff6 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba54a:	689b      	ldr	r3, [r3, #8]
   ba54c:	2b00      	cmp	r3, #0
   ba54e:	f43e aff2 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   ba552:	22b5      	movs	r2, #181	; 0xb5
   ba554:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   ba556:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba558:	689b      	ldr	r3, [r3, #8]
   ba55a:	2262      	movs	r2, #98	; 0x62
   ba55c:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   ba55e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba560:	689b      	ldr	r3, [r3, #8]
   ba562:	2202      	movs	r2, #2
   ba564:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   ba566:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba568:	689b      	ldr	r3, [r3, #8]
   ba56a:	2272      	movs	r2, #114	; 0x72
   ba56c:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   ba56e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba570:	886a      	ldrh	r2, [r5, #2]
   ba572:	689b      	ldr	r3, [r3, #8]
   ba574:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   ba576:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba578:	689a      	ldr	r2, [r3, #8]
   ba57a:	886b      	ldrh	r3, [r5, #2]
   ba57c:	0a1b      	lsrs	r3, r3, #8
   ba57e:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   ba580:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba582:	886a      	ldrh	r2, [r5, #2]
   ba584:	6898      	ldr	r0, [r3, #8]
   ba586:	68a9      	ldr	r1, [r5, #8]
   ba588:	3006      	adds	r0, #6
   ba58a:	f007 fe1f 	bl	c21cc <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   ba58e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba590:	7b2a      	ldrb	r2, [r5, #12]
   ba592:	689b      	ldr	r3, [r3, #8]
   ba594:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   ba598:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba59a:	7b6a      	ldrb	r2, [r5, #13]
   ba59c:	689b      	ldr	r3, [r3, #8]
   ba59e:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba5a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba5a4:	7813      	ldrb	r3, [r2, #0]
   ba5a6:	f043 0308 	orr.w	r3, r3, #8
   ba5aa:	7013      	strb	r3, [r2, #0]
   ba5ac:	f7fe bfc3 	b.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   ba5b0:	2b73      	cmp	r3, #115	; 0x73
   ba5b2:	d14d      	bne.n	ba650 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   ba5b4:	6e01      	ldr	r1, [r0, #96]	; 0x60
   ba5b6:	780b      	ldrb	r3, [r1, #0]
   ba5b8:	071e      	lsls	r6, r3, #28
   ba5ba:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba5be:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   ba5c2:	d543      	bpl.n	ba64c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   ba5c4:	0843      	lsrs	r3, r0, #1
   ba5c6:	f47e afb6 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba5ca:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   ba5cc:	f44f 7688 	mov.w	r6, #272	; 0x110
   ba5d0:	688b      	ldr	r3, [r1, #8]
   ba5d2:	437e      	muls	r6, r7
   ba5d4:	22b5      	movs	r2, #181	; 0xb5
   ba5d6:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   ba5d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba5da:	689b      	ldr	r3, [r3, #8]
   ba5dc:	4433      	add	r3, r6
   ba5de:	2262      	movs	r2, #98	; 0x62
   ba5e0:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   ba5e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba5e4:	689b      	ldr	r3, [r3, #8]
   ba5e6:	4433      	add	r3, r6
   ba5e8:	2202      	movs	r2, #2
   ba5ea:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   ba5ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba5ee:	689b      	ldr	r3, [r3, #8]
   ba5f0:	4433      	add	r3, r6
   ba5f2:	2273      	movs	r2, #115	; 0x73
   ba5f4:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   ba5f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba5f8:	886a      	ldrh	r2, [r5, #2]
   ba5fa:	689b      	ldr	r3, [r3, #8]
   ba5fc:	4433      	add	r3, r6
   ba5fe:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   ba600:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba602:	886a      	ldrh	r2, [r5, #2]
   ba604:	689b      	ldr	r3, [r3, #8]
   ba606:	4433      	add	r3, r6
   ba608:	0a12      	lsrs	r2, r2, #8
   ba60a:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   ba60c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba60e:	886a      	ldrh	r2, [r5, #2]
   ba610:	6898      	ldr	r0, [r3, #8]
   ba612:	68a9      	ldr	r1, [r5, #8]
   ba614:	4430      	add	r0, r6
   ba616:	3006      	adds	r0, #6
   ba618:	f007 fdd8 	bl	c21cc <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   ba61c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba61e:	7b2a      	ldrb	r2, [r5, #12]
   ba620:	689b      	ldr	r3, [r3, #8]
   ba622:	4433      	add	r3, r6
   ba624:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   ba628:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba62a:	7b6a      	ldrb	r2, [r5, #13]
   ba62c:	689b      	ldr	r3, [r3, #8]
   ba62e:	441e      	add	r6, r3
   ba630:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   ba634:	6e21      	ldr	r1, [r4, #96]	; 0x60
   ba636:	780b      	ldrb	r3, [r1, #0]
   ba638:	2201      	movs	r2, #1
   ba63a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba63e:	40ba      	lsls	r2, r7
   ba640:	4302      	orrs	r2, r0
   ba642:	f362 03c4 	bfi	r3, r2, #3, #2
   ba646:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   ba648:	f7fe bf75 	b.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba64c:	4617      	mov	r7, r2
   ba64e:	e7bd      	b.n	ba5cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   ba650:	2b34      	cmp	r3, #52	; 0x34
   ba652:	d129      	bne.n	ba6a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   ba654:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba656:	2b00      	cmp	r3, #0
   ba658:	f43e af6d 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba65c:	689b      	ldr	r3, [r3, #8]
   ba65e:	2b00      	cmp	r3, #0
   ba660:	f43e af69 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba664:	688a      	ldr	r2, [r1, #8]
   ba666:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   ba668:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba66a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   ba66c:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba66e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba670:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba672:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   ba674:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba676:	68a8      	ldr	r0, [r5, #8]
   ba678:	689e      	ldr	r6, [r3, #8]
   ba67a:	2104      	movs	r1, #4
   ba67c:	f7fd f994 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba680:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   ba682:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba684:	68a8      	ldr	r0, [r5, #8]
   ba686:	689e      	ldr	r6, [r3, #8]
   ba688:	2108      	movs	r1, #8
   ba68a:	f7fd f99a 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba68e:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   ba690:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba692:	68a8      	ldr	r0, [r5, #8]
   ba694:	689e      	ldr	r6, [r3, #8]
   ba696:	210a      	movs	r1, #10
   ba698:	f7fd f993 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba69c:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba69e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   ba6a0:	e780      	b.n	ba5a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   ba6a2:	bf00      	nop
   ba6a4:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   ba6a8:	2b13      	cmp	r3, #19
   ba6aa:	d14a      	bne.n	ba742 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   ba6ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
   ba6ae:	2b00      	cmp	r3, #0
   ba6b0:	f43e af41 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba6b4:	688a      	ldr	r2, [r1, #8]
   ba6b6:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   ba6b8:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba6ba:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba6bc:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba6be:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba6c0:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   ba6c2:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba6c4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba6c6:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba6c8:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba6ca:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba6cc:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba6ce:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba6d0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba6d2:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba6d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba6d6:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba6d8:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba6da:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba6dc:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba6de:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba6e0:	729a      	strb	r2, [r3, #10]
   ba6e2:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba6e4:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   ba6e6:	7a3a      	ldrb	r2, [r7, #8]
   ba6e8:	b2f3      	uxtb	r3, r6
   ba6ea:	429a      	cmp	r2, r3
   ba6ec:	d809      	bhi.n	ba702 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   ba6ee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba6f0:	2201      	movs	r2, #1
   ba6f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba6f6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   ba6f8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   ba6fa:	b9a8      	cbnz	r0, ba728 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   ba6fc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba6fe:	f7fe bfa8 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba702:	886b      	ldrh	r3, [r5, #2]
   ba704:	3b08      	subs	r3, #8
   ba706:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba70a:	ea4f 0186 	mov.w	r1, r6, lsl #2
   ba70e:	ddee      	ble.n	ba6ee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba710:	3108      	adds	r1, #8
   ba712:	68a8      	ldr	r0, [r5, #8]
   ba714:	b289      	uxth	r1, r1
   ba716:	f7fd f947 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba71a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba71e:	3601      	adds	r6, #1
   ba720:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba722:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba724:	d1de      	bne.n	ba6e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   ba726:	e7e2      	b.n	ba6ee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba728:	780b      	ldrb	r3, [r1, #0]
   ba72a:	071b      	lsls	r3, r3, #28
   ba72c:	d4e6      	bmi.n	ba6fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   ba72e:	2248      	movs	r2, #72	; 0x48
   ba730:	3104      	adds	r1, #4
   ba732:	f007 fd4b 	bl	c21cc <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba736:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   ba738:	7813      	ldrb	r3, [r2, #0]
   ba73a:	f043 0308 	orr.w	r3, r3, #8
   ba73e:	7013      	strb	r3, [r2, #0]
   ba740:	e7dc      	b.n	ba6fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   ba742:	2b15      	cmp	r3, #21
   ba744:	f47e aef7 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   ba748:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   ba74a:	2b00      	cmp	r3, #0
   ba74c:	f43e aef3 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba750:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba752:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba754:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba756:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   ba758:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   ba75a:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   ba75c:	3101      	adds	r1, #1
   ba75e:	2908      	cmp	r1, #8
   ba760:	d1f7      	bne.n	ba752 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   ba762:	68a8      	ldr	r0, [r5, #8]
   ba764:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   ba766:	f7fd f92c 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba76a:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba76c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   ba76e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba770:	7a92      	ldrb	r2, [r2, #10]
   ba772:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba774:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   ba776:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba778:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   ba77a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba77c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   ba77e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba780:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   ba782:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba784:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   ba786:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba788:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   ba78a:	73da      	strb	r2, [r3, #15]
   ba78c:	2610      	movs	r6, #16
   ba78e:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba790:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba792:	7b51      	ldrb	r1, [r2, #13]
   ba794:	b2da      	uxtb	r2, r3
   ba796:	4291      	cmp	r1, r2
   ba798:	d80b      	bhi.n	ba7b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   ba79a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba79c:	2201      	movs	r2, #1
   ba79e:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba7a2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   ba7a4:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   ba7a8:	2800      	cmp	r0, #0
   ba7aa:	d17f      	bne.n	ba8ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   ba7ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba7ae:	f7fe bf50 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba7b2:	886a      	ldrh	r2, [r5, #2]
   ba7b4:	3a10      	subs	r2, #16
   ba7b6:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   ba7ba:	ea4f 1843 	mov.w	r8, r3, lsl #5
   ba7be:	ddec      	ble.n	ba79a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   ba7c0:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba7c2:	46b4      	mov	ip, r6
   ba7c4:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba7c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba7c8:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba7ca:	4440      	add	r0, r8
   ba7cc:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba7ce:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   ba7d2:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   ba7d4:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba7d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba7d8:	4437      	add	r7, r6
   ba7da:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba7dc:	4440      	add	r0, r8
   ba7de:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba7e0:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   ba7e2:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   ba7e4:	2a03      	cmp	r2, #3
   ba7e6:	d80b      	bhi.n	ba800 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba7e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba7ea:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba7ec:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   ba7f0:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba7f4:	4440      	add	r0, r8
   ba7f6:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   ba7f8:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   ba7fc:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   ba800:	3201      	adds	r2, #1
   ba802:	2a08      	cmp	r2, #8
   ba804:	f10c 0c01 	add.w	ip, ip, #1
   ba808:	d1dd      	bne.n	ba7c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   ba80a:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba80c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba80e:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   ba810:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba812:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba816:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   ba818:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   ba81a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba81c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba81e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba820:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba824:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   ba826:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba828:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba82a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba82c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba82e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba832:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   ba834:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba836:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba838:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba83a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba83c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   ba840:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   ba842:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   ba844:	3118      	adds	r1, #24
   ba846:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   ba84a:	68a8      	ldr	r0, [r5, #8]
   ba84c:	b289      	uxth	r1, r1
   ba84e:	f7fd f8b8 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba852:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba854:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   ba856:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   ba85a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba85c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba85e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba860:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba862:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   ba864:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   ba868:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba86a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba86c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba86e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba870:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   ba872:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   ba876:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba878:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba87a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba87c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba87e:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   ba880:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   ba884:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba886:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba888:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba88a:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba88c:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   ba88e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba892:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   ba894:	68aa      	ldr	r2, [r5, #8]
   ba896:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba898:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   ba89a:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   ba89c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   ba8a0:	f106 0620 	add.w	r6, r6, #32
   ba8a4:	463b      	mov	r3, r7
   ba8a6:	f47f af73 	bne.w	ba790 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   ba8aa:	e776      	b.n	ba79a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba8ac:	780b      	ldrb	r3, [r1, #0]
   ba8ae:	071f      	lsls	r7, r3, #28
   ba8b0:	f53f af7c 	bmi.w	ba7ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   ba8b4:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   ba8b8:	3102      	adds	r1, #2
   ba8ba:	f007 fc87 	bl	c21cc <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba8be:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   ba8c0:	7813      	ldrb	r3, [r2, #0]
   ba8c2:	f043 0308 	orr.w	r3, r3, #8
   ba8c6:	7013      	strb	r3, [r2, #0]
   ba8c8:	e770      	b.n	ba7ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   ba8ca:	680b      	ldr	r3, [r1, #0]
   ba8cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba8d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   ba8d4:	d12f      	bne.n	ba936 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   ba8d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
   ba8d8:	2b00      	cmp	r3, #0
   ba8da:	f43e ae2c 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba8de:	688a      	ldr	r2, [r1, #8]
   ba8e0:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   ba8e2:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   ba8e4:	6f06      	ldr	r6, [r0, #112]	; 0x70
   ba8e6:	68a8      	ldr	r0, [r5, #8]
   ba8e8:	2102      	movs	r1, #2
   ba8ea:	f7fd f86a 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba8ee:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   ba8f0:	68a8      	ldr	r0, [r5, #8]
   ba8f2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba8f4:	2104      	movs	r1, #4
   ba8f6:	f7fd f857 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8fa:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   ba8fc:	68a8      	ldr	r0, [r5, #8]
   ba8fe:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba900:	2108      	movs	r1, #8
   ba902:	f7fd f851 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba906:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   ba908:	68a8      	ldr	r0, [r5, #8]
   ba90a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba90c:	210c      	movs	r1, #12
   ba90e:	f7fd f858 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba912:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   ba914:	68a8      	ldr	r0, [r5, #8]
   ba916:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba918:	210e      	movs	r1, #14
   ba91a:	f7fd f852 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba91e:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   ba920:	68a8      	ldr	r0, [r5, #8]
   ba922:	6f26      	ldr	r6, [r4, #112]	; 0x70
   ba924:	2110      	movs	r1, #16
   ba926:	f7fd f84c 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba92a:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   ba92c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba92e:	2201      	movs	r2, #1
   ba930:	751a      	strb	r2, [r3, #20]
   ba932:	f7fe be00 	b.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   ba936:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   ba93a:	f47e adfc 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   ba93e:	6f46      	ldr	r6, [r0, #116]	; 0x74
   ba940:	2e00      	cmp	r6, #0
   ba942:	f43e adf8 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   ba946:	68a8      	ldr	r0, [r5, #8]
   ba948:	2100      	movs	r1, #0
   ba94a:	f7fd f83a 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba94e:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   ba950:	68a8      	ldr	r0, [r5, #8]
   ba952:	6f66      	ldr	r6, [r4, #116]	; 0x74
   ba954:	2102      	movs	r1, #2
   ba956:	f7fd f834 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba95a:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   ba95c:	68a8      	ldr	r0, [r5, #8]
   ba95e:	6f66      	ldr	r6, [r4, #116]	; 0x74
   ba960:	2104      	movs	r1, #4
   ba962:	f7fd f82e 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba966:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba968:	6f63      	ldr	r3, [r4, #116]	; 0x74
   ba96a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba96e:	609a      	str	r2, [r3, #8]
   ba970:	f7fe bde1 	b.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   ba974:	680b      	ldr	r3, [r1, #0]
   ba976:	4ab0      	ldr	r2, [pc, #704]	; (bac38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   ba978:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba97c:	4293      	cmp	r3, r2
   ba97e:	f47e adda 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   ba982:	6f83      	ldr	r3, [r0, #120]	; 0x78
   ba984:	2b00      	cmp	r3, #0
   ba986:	f43e add6 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba98a:	688a      	ldr	r2, [r1, #8]
   ba98c:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   ba98e:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba990:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   ba992:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   ba994:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   ba996:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   ba998:	6f86      	ldr	r6, [r0, #120]	; 0x78
   ba99a:	68a8      	ldr	r0, [r5, #8]
   ba99c:	2102      	movs	r1, #2
   ba99e:	f7fd f810 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9a2:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   ba9a4:	68a8      	ldr	r0, [r5, #8]
   ba9a6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba9a8:	2104      	movs	r1, #4
   ba9aa:	f7fd f80a 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9ae:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   ba9b0:	68a8      	ldr	r0, [r5, #8]
   ba9b2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba9b4:	2106      	movs	r1, #6
   ba9b6:	f7fd f804 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba9ba:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   ba9bc:	68a8      	ldr	r0, [r5, #8]
   ba9be:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba9c0:	2108      	movs	r1, #8
   ba9c2:	f7fc fff1 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9c6:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   ba9c8:	68a8      	ldr	r0, [r5, #8]
   ba9ca:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba9cc:	210c      	movs	r1, #12
   ba9ce:	f7fc ffeb 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9d2:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   ba9d4:	68a8      	ldr	r0, [r5, #8]
   ba9d6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba9d8:	2110      	movs	r1, #16
   ba9da:	f7fc ffe5 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9de:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   ba9e0:	68a8      	ldr	r0, [r5, #8]
   ba9e2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba9e4:	2114      	movs	r1, #20
   ba9e6:	f7fc ffdf 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9ea:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   ba9ec:	68a8      	ldr	r0, [r5, #8]
   ba9ee:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   ba9f0:	2118      	movs	r1, #24
   ba9f2:	f7fc ffd9 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9f6:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba9f8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   ba9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba9fe:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa00:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   baa02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   baa04:	b17a      	cbz	r2, baa26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baa06:	7819      	ldrb	r1, [r3, #0]
   baa08:	070e      	lsls	r6, r1, #28
   baa0a:	d40c      	bmi.n	baa26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   baa0c:	1d19      	adds	r1, r3, #4
   baa0e:	3320      	adds	r3, #32
   baa10:	f851 0b04 	ldr.w	r0, [r1], #4
   baa14:	f842 0b04 	str.w	r0, [r2], #4
   baa18:	4299      	cmp	r1, r3
   baa1a:	d1f9      	bne.n	baa10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   baa1c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   baa1e:	7813      	ldrb	r3, [r2, #0]
   baa20:	f043 0308 	orr.w	r3, r3, #8
   baa24:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   baa26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   baa28:	f7fe be13 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   baa2c:	4a83      	ldr	r2, [pc, #524]	; (bac3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   baa2e:	4293      	cmp	r3, r2
   baa30:	d158      	bne.n	baae4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   baa32:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   baa36:	2f00      	cmp	r7, #0
   baa38:	f43e ad7d 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   baa3c:	68a8      	ldr	r0, [r5, #8]
   baa3e:	2100      	movs	r1, #0
   baa40:	f7fc ffb2 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa44:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   baa46:	68a8      	ldr	r0, [r5, #8]
   baa48:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   baa4c:	2108      	movs	r1, #8
   baa4e:	f7fc ffab 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa52:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa54:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   baa56:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa5a:	210c      	movs	r1, #12
   baa5c:	f7fc ffa4 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   baa60:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa62:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   baa64:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa68:	4631      	mov	r1, r6
   baa6a:	f7fc ff9d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   baa6e:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa70:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   baa72:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa76:	2114      	movs	r1, #20
   baa78:	f7fc ff96 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   baa7c:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa7e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   baa80:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa84:	2118      	movs	r1, #24
   baa86:	f7fc ff8f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   baa8a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa8c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   baa8e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa92:	211c      	movs	r1, #28
   baa94:	f7fc ff88 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   baa98:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa9a:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   baa9c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaa0:	2120      	movs	r1, #32
   baaa2:	f7fc ff81 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   baaa6:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baaa8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   baaac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baab0:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baab2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   baab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   baab8:	b182      	cbz	r2, baadc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baaba:	7819      	ldrb	r1, [r3, #0]
   baabc:	0709      	lsls	r1, r1, #28
   baabe:	d40d      	bmi.n	baadc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   baac0:	1d19      	adds	r1, r3, #4
   baac2:	3328      	adds	r3, #40	; 0x28
   baac4:	f851 0b04 	ldr.w	r0, [r1], #4
   baac8:	f842 0b04 	str.w	r0, [r2], #4
   baacc:	4299      	cmp	r1, r3
   baace:	d1f9      	bne.n	baac4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   baad0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   baad4:	7813      	ldrb	r3, [r2, #0]
   baad6:	f043 0308 	orr.w	r3, r3, #8
   baada:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   baadc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   baae0:	f7fe bdb7 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   baae4:	784b      	ldrb	r3, [r1, #1]
   baae6:	2b02      	cmp	r3, #2
   baae8:	d158      	bne.n	bab9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   baaea:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   baaee:	2e00      	cmp	r6, #0
   baaf0:	f43e ad21 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   baaf4:	68a8      	ldr	r0, [r5, #8]
   baaf6:	2100      	movs	r1, #0
   baaf8:	f7fc ff56 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baafc:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   baafe:	68a8      	ldr	r0, [r5, #8]
   bab00:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bab04:	2104      	movs	r1, #4
   bab06:	f7fc ff5c 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab0a:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bab0c:	68a8      	ldr	r0, [r5, #8]
   bab0e:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bab12:	2106      	movs	r1, #6
   bab14:	f7fc ff55 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab18:	8170      	strh	r0, [r6, #10]
   bab1a:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bab1c:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bab20:	886b      	ldrh	r3, [r5, #2]
   bab22:	7a7a      	ldrb	r2, [r7, #9]
   bab24:	b2b1      	uxth	r1, r6
   bab26:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bab2a:	d320      	bcc.n	bab6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bab2c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bab30:	886a      	ldrh	r2, [r5, #2]
   bab32:	7a73      	ldrb	r3, [r6, #9]
   bab34:	08db      	lsrs	r3, r3, #3
   bab36:	3302      	adds	r3, #2
   bab38:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bab3c:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bab40:	d826      	bhi.n	bab90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bab42:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bab46:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bab4a:	b160      	cbz	r0, bab66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab4c:	780b      	ldrb	r3, [r1, #0]
   bab4e:	071a      	lsls	r2, r3, #28
   bab50:	d409      	bmi.n	bab66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bab52:	2288      	movs	r2, #136	; 0x88
   bab54:	3104      	adds	r1, #4
   bab56:	f007 fb39 	bl	c21cc <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bab5a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bab5e:	7813      	ldrb	r3, [r2, #0]
   bab60:	f043 0308 	orr.w	r3, r3, #8
   bab64:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bab66:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bab6a:	f7fe bd72 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bab6e:	3b08      	subs	r3, #8
   bab70:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bab74:	ddda      	ble.n	bab2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bab76:	0089      	lsls	r1, r1, #2
   bab78:	3108      	adds	r1, #8
   bab7a:	68a8      	ldr	r0, [r5, #8]
   bab7c:	b289      	uxth	r1, r1
   bab7e:	f7fc ff13 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab82:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bab86:	3601      	adds	r6, #1
   bab88:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bab8a:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bab8c:	d1c6      	bne.n	bab1c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bab8e:	e7cd      	b.n	bab2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bab90:	68a8      	ldr	r0, [r5, #8]
   bab92:	f7fc ff09 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab96:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bab9a:	e7d2      	b.n	bab42 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bab9c:	2b03      	cmp	r3, #3
   bab9e:	d14f      	bne.n	bac40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   baba0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   baba4:	2900      	cmp	r1, #0
   baba6:	f43e acc6 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   babaa:	886a      	ldrh	r2, [r5, #2]
   babac:	1f13      	subs	r3, r2, #4
   babae:	bf48      	it	mi
   babb0:	1cd3      	addmi	r3, r2, #3
   babb2:	10db      	asrs	r3, r3, #3
   babb4:	2700      	movs	r7, #0
   babb6:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   babba:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   babbc:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   babbe:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   babc2:	3b04      	subs	r3, #4
   babc4:	42bb      	cmp	r3, r7
   babc6:	dc08      	bgt.n	babda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   babc8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   babcc:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   babd0:	bb10      	cbnz	r0, bac18 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   babd2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   babd6:	f7fe bd3c 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   babda:	fa1f f887 	uxth.w	r8, r7
   babde:	f108 0104 	add.w	r1, r8, #4
   babe2:	68a8      	ldr	r0, [r5, #8]
   babe4:	b289      	uxth	r1, r1
   babe6:	f7fc fedf 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babea:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   babee:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   babf2:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   babf6:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   babfa:	68a8      	ldr	r0, [r5, #8]
   babfc:	b289      	uxth	r1, r1
   babfe:	f7fc fed3 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bac02:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bac06:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bac08:	3601      	adds	r6, #1
   bac0a:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bac0c:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bac10:	f107 0708 	add.w	r7, r7, #8
   bac14:	d1d2      	bne.n	babbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bac16:	e7d7      	b.n	babc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bac18:	780b      	ldrb	r3, [r1, #0]
   bac1a:	071b      	lsls	r3, r3, #28
   bac1c:	d4d9      	bmi.n	babd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bac1e:	f44f 720e 	mov.w	r2, #568	; 0x238
   bac22:	3108      	adds	r1, #8
   bac24:	3004      	adds	r0, #4
   bac26:	f007 fad1 	bl	c21cc <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bac2a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bac2e:	7813      	ldrb	r3, [r2, #0]
   bac30:	f043 0308 	orr.w	r3, r3, #8
   bac34:	7013      	strb	r3, [r2, #0]
   bac36:	e7cc      	b.n	babd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bac38:	001c0300 	.word	0x001c0300
   bac3c:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bac40:	2b10      	cmp	r3, #16
   bac42:	f47e ac78 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bac46:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bac4a:	2e00      	cmp	r6, #0
   bac4c:	f43e ac73 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bac50:	68a8      	ldr	r0, [r5, #8]
   bac52:	2100      	movs	r1, #0
   bac54:	f7fc fea8 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac58:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bac5a:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bac5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bac60:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bac62:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bac64:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bac66:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bac6a:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bac6c:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bac6e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bac70:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bac74:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bac76:	74da      	strb	r2, [r3, #19]
   bac78:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bac7a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bac7e:	7cc6      	ldrb	r6, [r0, #19]
   bac80:	b28a      	uxth	r2, r1
   bac82:	4296      	cmp	r6, r2
   bac84:	d80c      	bhi.n	baca0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac86:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bac8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac8e:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac90:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bac94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bac96:	bb62      	cbnz	r2, bacf2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bac98:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bac9c:	f7fe bcd9 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baca0:	886a      	ldrh	r2, [r5, #2]
   baca2:	3a10      	subs	r2, #16
   baca4:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   baca8:	dded      	ble.n	bac86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bacaa:	68aa      	ldr	r2, [r5, #8]
   bacac:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bacae:	1d0a      	adds	r2, r1, #4
   bacb0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bacb4:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bacb6:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bacb8:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bacba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bacbe:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bacc0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bacc4:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bacc6:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bacc8:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bacca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bacce:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bacd0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bacd4:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bacd6:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bacd8:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bacda:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bacde:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bace0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bace4:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bace6:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bace8:	2907      	cmp	r1, #7
   bacea:	f103 0304 	add.w	r3, r3, #4
   bacee:	d1c4      	bne.n	bac7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bacf0:	e7c9      	b.n	bac86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacf2:	7819      	ldrb	r1, [r3, #0]
   bacf4:	070f      	lsls	r7, r1, #28
   bacf6:	d4cf      	bmi.n	bac98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bacf8:	1d19      	adds	r1, r3, #4
   bacfa:	3330      	adds	r3, #48	; 0x30
   bacfc:	f851 0b04 	ldr.w	r0, [r1], #4
   bad00:	f842 0b04 	str.w	r0, [r2], #4
   bad04:	4299      	cmp	r1, r3
   bad06:	d1f9      	bne.n	bacfc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bad08:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bad0c:	7813      	ldrb	r3, [r2, #0]
   bad0e:	f043 0308 	orr.w	r3, r3, #8
   bad12:	7013      	strb	r3, [r2, #0]
   bad14:	e7c0      	b.n	bac98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bad16:	680b      	ldr	r3, [r1, #0]
   bad18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bad1c:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bad20:	d16a      	bne.n	badf8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bad22:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bad26:	2b00      	cmp	r3, #0
   bad28:	f43e ac05 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bad2c:	7818      	ldrb	r0, [r3, #0]
   bad2e:	7859      	ldrb	r1, [r3, #1]
   bad30:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bad32:	bf36      	itet	cc
   bad34:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bad38:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bad3a:	1a52      	subcc	r2, r2, r1
   bad3c:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bad3e:	2a0e      	cmp	r2, #14
   bad40:	d84b      	bhi.n	badda <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bad42:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bad44:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bad48:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bad4a:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bad4c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bad50:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bad52:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bad54:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bad56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bad5a:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bad5c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bad60:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bad62:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bad64:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bad66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bad6a:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bad6c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bad70:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bad72:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bad74:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bad76:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bad7a:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bad7c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bad80:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bad82:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bad84:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bad86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bad8a:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bad8c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bad90:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bad92:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bad94:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bad96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bad9a:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bad9c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bada0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bada2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bada4:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bada6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   badaa:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   badac:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   badb0:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   badb2:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   badb4:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   badb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   badba:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   badbc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   badc0:	7813      	ldrb	r3, [r2, #0]
   badc2:	3301      	adds	r3, #1
   badc4:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   badc6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   badca:	781a      	ldrb	r2, [r3, #0]
   badcc:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   badce:	f47e abb2 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   badd2:	2200      	movs	r2, #0
   badd4:	701a      	strb	r2, [r3, #0]
   badd6:	f7fe bbae 	b.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   badda:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   badde:	b923      	cbnz	r3, badea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bade0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bade4:	2b00      	cmp	r3, #0
   bade6:	f43e aba6 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   badea:	4996      	ldr	r1, [pc, #600]	; (bb044 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   badec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   badf0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   badf4:	f005 bc6b 	b.w	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   badf8:	784b      	ldrb	r3, [r1, #1]
   badfa:	2b80      	cmp	r3, #128	; 0x80
   badfc:	f47e ab9b 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bae00:	884b      	ldrh	r3, [r1, #2]
   bae02:	2ba4      	cmp	r3, #164	; 0xa4
   bae04:	f63e ab97 	bhi.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bae08:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bae0c:	2a00      	cmp	r2, #0
   bae0e:	f43e ab92 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bae12:	7810      	ldrb	r0, [r2, #0]
   bae14:	7851      	ldrb	r1, [r2, #1]
   bae16:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bae18:	bf36      	itet	cc
   bae1a:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bae1c:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bae1e:	1a5b      	subcc	r3, r3, r1
   bae20:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bae22:	2bf8      	cmp	r3, #248	; 0xf8
   bae24:	d84f      	bhi.n	baec6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bae26:	23ac      	movs	r3, #172	; 0xac
   bae28:	fb03 2200 	mla	r2, r3, r0, r2
   bae2c:	21b5      	movs	r1, #181	; 0xb5
   bae2e:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bae30:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bae34:	7811      	ldrb	r1, [r2, #0]
   bae36:	fb03 2201 	mla	r2, r3, r1, r2
   bae3a:	2162      	movs	r1, #98	; 0x62
   bae3c:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bae3e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bae42:	7811      	ldrb	r1, [r2, #0]
   bae44:	fb03 2201 	mla	r2, r3, r1, r2
   bae48:	2113      	movs	r1, #19
   bae4a:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bae4c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bae50:	7811      	ldrb	r1, [r2, #0]
   bae52:	fb03 2201 	mla	r2, r3, r1, r2
   bae56:	2180      	movs	r1, #128	; 0x80
   bae58:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bae5a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bae5e:	7811      	ldrb	r1, [r2, #0]
   bae60:	fb03 2201 	mla	r2, r3, r1, r2
   bae64:	8869      	ldrh	r1, [r5, #2]
   bae66:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bae68:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bae6c:	7811      	ldrb	r1, [r2, #0]
   bae6e:	fb03 2201 	mla	r2, r3, r1, r2
   bae72:	8869      	ldrh	r1, [r5, #2]
   bae74:	0a09      	lsrs	r1, r1, #8
   bae76:	71d1      	strb	r1, [r2, #7]
   bae78:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bae7a:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bae7c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bae80:	b28e      	uxth	r6, r1
   bae82:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bae84:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bae86:	d907      	bls.n	bae98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bae88:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bae8a:	fb03 2200 	mla	r2, r3, r0, r2
   bae8e:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bae90:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bae92:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bae94:	3101      	adds	r1, #1
   bae96:	e7f0      	b.n	bae7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bae98:	fb03 2200 	mla	r2, r3, r0, r2
   bae9c:	7b29      	ldrb	r1, [r5, #12]
   bae9e:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   baea2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baea6:	7b69      	ldrb	r1, [r5, #13]
   baea8:	7810      	ldrb	r0, [r2, #0]
   baeaa:	fb03 2300 	mla	r3, r3, r0, r2
   baeae:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   baeb2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baeb6:	7813      	ldrb	r3, [r2, #0]
   baeb8:	3301      	adds	r3, #1
   baeba:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   baebc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   baec0:	781a      	ldrb	r2, [r3, #0]
   baec2:	2afa      	cmp	r2, #250	; 0xfa
   baec4:	e783      	b.n	badce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   baec6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   baeca:	b923      	cbnz	r3, baed6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   baecc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   baed0:	2b00      	cmp	r3, #0
   baed2:	f43e ab30 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   baed6:	495c      	ldr	r1, [pc, #368]	; (bb048 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   baed8:	e788      	b.n	badec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   baeda:	680b      	ldr	r3, [r1, #0]
   baedc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   baee0:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   baee4:	f040 80b2 	bne.w	bb04c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   baee8:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   baeec:	2f00      	cmp	r7, #0
   baeee:	f43e ab22 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   baef2:	68a8      	ldr	r0, [r5, #8]
   baef4:	2100      	movs	r1, #0
   baef6:	f7fc fd57 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baefa:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   baefc:	68a8      	ldr	r0, [r5, #8]
   baefe:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   baf02:	2104      	movs	r1, #4
   baf04:	f7fc fd5d 	bl	b79c2 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baf08:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   baf0a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   baf0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf10:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   baf12:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   baf14:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   baf16:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf1a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   baf1c:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   baf1e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   baf20:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf24:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   baf26:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baf28:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   baf2a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf2e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   baf30:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baf32:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   baf34:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf38:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   baf3a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baf3c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   baf3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf42:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   baf44:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf46:	210c      	movs	r1, #12
   baf48:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   baf4a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf4e:	f7fc fd2b 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   baf52:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   baf54:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   baf56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf5a:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   baf5c:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   baf5e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   baf60:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   baf64:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   baf66:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf68:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   baf6a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf6e:	2114      	movs	r1, #20
   baf70:	f7fc fd1a 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   baf74:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf76:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   baf78:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf7c:	2118      	movs	r1, #24
   baf7e:	f7fc fd13 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   baf82:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf84:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   baf86:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf8a:	211c      	movs	r1, #28
   baf8c:	f7fc fd0c 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   baf90:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf92:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   baf94:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf98:	2120      	movs	r1, #32
   baf9a:	f7fc fd05 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   baf9e:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafa0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bafa2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafa6:	2124      	movs	r1, #36	; 0x24
   bafa8:	f7fc fcfe 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bafac:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafae:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bafb0:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafb4:	4631      	mov	r1, r6
   bafb6:	f7fc fcf7 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bafba:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafbc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bafbe:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafc2:	212c      	movs	r1, #44	; 0x2c
   bafc4:	f7fc fcf0 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bafc8:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafca:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bafcc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bafd0:	2130      	movs	r1, #48	; 0x30
   bafd2:	f7fc fce9 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bafd6:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bafd8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bafdc:	68a8      	ldr	r0, [r5, #8]
   bafde:	2134      	movs	r1, #52	; 0x34
   bafe0:	f7fc fce2 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafe4:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bafe6:	68a8      	ldr	r0, [r5, #8]
   bafe8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bafec:	2138      	movs	r1, #56	; 0x38
   bafee:	f7fc fcdb 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baff2:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   baff4:	68a8      	ldr	r0, [r5, #8]
   baff6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   baffa:	213c      	movs	r1, #60	; 0x3c
   baffc:	f7fc fcd4 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb000:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb002:	68a8      	ldr	r0, [r5, #8]
   bb004:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb008:	2140      	movs	r1, #64	; 0x40
   bb00a:	f7fc fccd 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb00e:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb010:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb018:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb01a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb01e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb020:	b160      	cbz	r0, bb03c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb022:	780b      	ldrb	r3, [r1, #0]
   bb024:	071e      	lsls	r6, r3, #28
   bb026:	d409      	bmi.n	bb03c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb028:	2248      	movs	r2, #72	; 0x48
   bb02a:	3104      	adds	r1, #4
   bb02c:	f007 f8ce 	bl	c21cc <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb030:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb034:	7813      	ldrb	r3, [r2, #0]
   bb036:	f043 0308 	orr.w	r3, r3, #8
   bb03a:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb03c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb040:	f7fe bb07 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb044:	000c4cfd 	.word	0x000c4cfd
   bb048:	000c4d3a 	.word	0x000c4d3a
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb04c:	4a5d      	ldr	r2, [pc, #372]	; (bb1c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb04e:	4293      	cmp	r3, r2
   bb050:	d156      	bne.n	bb100 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb052:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb056:	2e00      	cmp	r6, #0
   bb058:	f43e aa6d 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb05c:	68a8      	ldr	r0, [r5, #8]
   bb05e:	2100      	movs	r1, #0
   bb060:	f7fc fca2 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb064:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb066:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb068:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb06c:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb06e:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb070:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb072:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb076:	2108      	movs	r1, #8
   bb078:	f7fc fc96 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb07c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb07e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb080:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb084:	210c      	movs	r1, #12
   bb086:	f7fc fc8f 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb08a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb08c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb08e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb092:	2110      	movs	r1, #16
   bb094:	f7fc fc88 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb098:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb09a:	68a8      	ldr	r0, [r5, #8]
   bb09c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb0a0:	2114      	movs	r1, #20
   bb0a2:	f7fc fc81 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0a6:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb0a8:	68a8      	ldr	r0, [r5, #8]
   bb0aa:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb0ae:	2118      	movs	r1, #24
   bb0b0:	f7fc fc7a 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0b4:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb0b6:	68a8      	ldr	r0, [r5, #8]
   bb0b8:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb0bc:	211c      	movs	r1, #28
   bb0be:	f7fc fc73 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0c2:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb0c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb0c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb0cc:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb0ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb0d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb0d4:	b182      	cbz	r2, bb0f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb0d6:	7819      	ldrb	r1, [r3, #0]
   bb0d8:	0708      	lsls	r0, r1, #28
   bb0da:	d40d      	bmi.n	bb0f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb0dc:	1d19      	adds	r1, r3, #4
   bb0de:	3324      	adds	r3, #36	; 0x24
   bb0e0:	f851 0b04 	ldr.w	r0, [r1], #4
   bb0e4:	f842 0b04 	str.w	r0, [r2], #4
   bb0e8:	4299      	cmp	r1, r3
   bb0ea:	d1f9      	bne.n	bb0e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb0ec:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb0f0:	7813      	ldrb	r3, [r2, #0]
   bb0f2:	f043 0308 	orr.w	r3, r3, #8
   bb0f6:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb0f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb0fc:	f7fe baa9 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb100:	4a31      	ldr	r2, [pc, #196]	; (bb1c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb102:	4293      	cmp	r3, r2
   bb104:	f47e aa17 	bne.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb108:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb10c:	2e00      	cmp	r6, #0
   bb10e:	f43e aa12 	beq.w	b9536 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb112:	68a8      	ldr	r0, [r5, #8]
   bb114:	2100      	movs	r1, #0
   bb116:	f7fc fc47 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb11a:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb11c:	68a8      	ldr	r0, [r5, #8]
   bb11e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb122:	2108      	movs	r1, #8
   bb124:	f7fc fc40 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb128:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb12a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb12c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb130:	210c      	movs	r1, #12
   bb132:	f7fc fc39 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb136:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb138:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb13a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb13e:	2110      	movs	r1, #16
   bb140:	f7fc fc32 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb144:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb146:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb148:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb14c:	2114      	movs	r1, #20
   bb14e:	f7fc fc2b 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb152:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb154:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb156:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb15a:	2118      	movs	r1, #24
   bb15c:	f7fc fc24 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb160:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb162:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb164:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb168:	211c      	movs	r1, #28
   bb16a:	f7fc fc1d 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb16e:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb170:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb172:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb176:	2120      	movs	r1, #32
   bb178:	f7fc fc16 	bl	b79a8 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb17c:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb17e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb186:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb188:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb18c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb18e:	b182      	cbz	r2, bb1b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb190:	7819      	ldrb	r1, [r3, #0]
   bb192:	0709      	lsls	r1, r1, #28
   bb194:	d40d      	bmi.n	bb1b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb196:	1d19      	adds	r1, r3, #4
   bb198:	3328      	adds	r3, #40	; 0x28
   bb19a:	f851 0b04 	ldr.w	r0, [r1], #4
   bb19e:	f842 0b04 	str.w	r0, [r2], #4
   bb1a2:	4299      	cmp	r1, r3
   bb1a4:	d1f9      	bne.n	bb19a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb1a6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb1aa:	7813      	ldrb	r3, [r2, #0]
   bb1ac:	f043 0308 	orr.w	r3, r3, #8
   bb1b0:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb1b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb1b6:	f7fe ba4c 	b.w	b9652 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb1ba:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb1bc:	2018      	movs	r0, #24
   bb1be:	f7ff b9a2 	b.w	ba506 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb1c2:	bf00      	nop
   bb1c4:	00200100 	.word	0x00200100
   bb1c8:	00240200 	.word	0x00240200

000bb1cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb1d0:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb1d2:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb1d6:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb1da:	4604      	mov	r4, r0
   bb1dc:	460f      	mov	r7, r1
   bb1de:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb1e0:	b993      	cbnz	r3, bb208 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb1e2:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb1e6:	886b      	ldrh	r3, [r5, #2]
   bb1e8:	88aa      	ldrh	r2, [r5, #4]
   bb1ea:	3303      	adds	r3, #3
   bb1ec:	4293      	cmp	r3, r2
   bb1ee:	db03      	blt.n	bb1f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb1f0:	4639      	mov	r1, r7
   bb1f2:	4620      	mov	r0, r4
   bb1f4:	f7fd fdf0 	bl	b8dd8 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb1f8:	88ae      	ldrh	r6, [r5, #4]
   bb1fa:	bb7e      	cbnz	r6, bb25c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb1fc:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb1fe:	88ab      	ldrh	r3, [r5, #4]
   bb200:	3301      	adds	r3, #1
   bb202:	80ab      	strh	r3, [r5, #4]
}
   bb204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb208:	2b03      	cmp	r3, #3
   bb20a:	d124      	bne.n	bb256 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb20c:	7852      	ldrb	r2, [r2, #1]
   bb20e:	7829      	ldrb	r1, [r5, #0]
   bb210:	f7fc fdda 	bl	b7dc8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb214:	4680      	mov	r8, r0
   bb216:	2800      	cmp	r0, #0
   bb218:	d1e5      	bne.n	bb1e6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb21a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb21e:	b91b      	cbnz	r3, bb228 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb220:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb224:	2b00      	cmp	r3, #0
   bb226:	d0de      	beq.n	bb1e6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb228:	49b7      	ldr	r1, [pc, #732]	; (bb508 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb22a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb22e:	f005 fa34 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb232:	7829      	ldrb	r1, [r5, #0]
   bb234:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb238:	220a      	movs	r2, #10
   bb23a:	f7fc fbd5 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb23e:	49b3      	ldr	r1, [pc, #716]	; (bb50c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb240:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb244:	f005 fa29 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb248:	7869      	ldrb	r1, [r5, #1]
   bb24a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb24e:	220a      	movs	r2, #10
   bb250:	f7fc fbd1 	bl	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb254:	e7c7      	b.n	bb1e6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bb256:	f04f 0802 	mov.w	r8, #2
   bb25a:	e7c4      	b.n	bb1e6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bb25c:	2e01      	cmp	r6, #1
   bb25e:	d101      	bne.n	bb264 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bb260:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb262:	e7cc      	b.n	bb1fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bb264:	2e02      	cmp	r6, #2
   bb266:	d101      	bne.n	bb26c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bb268:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb26a:	e7c8      	b.n	bb1fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bb26c:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bb26e:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bb270:	d103      	bne.n	bb27a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bb272:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bb276:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb278:	e7c1      	b.n	bb1fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bb27a:	1d0b      	adds	r3, r1, #4
   bb27c:	429e      	cmp	r6, r3
   bb27e:	d136      	bne.n	bb2ee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bb280:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb282:	88aa      	ldrh	r2, [r5, #4]
   bb284:	f108 0306 	add.w	r3, r8, #6
   bb288:	429a      	cmp	r2, r3
   bb28a:	d1b8      	bne.n	bb1fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bb28c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb290:	2b00      	cmp	r3, #0
   bb292:	d1b4      	bne.n	bb1fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bb294:	2200      	movs	r2, #0
   bb296:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb298:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bb29c:	b91a      	cbnz	r2, bb2a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bb29e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bb2a2:	2a00      	cmp	r2, #0
   bb2a4:	d0ab      	beq.n	bb1fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb2a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bb2aa:	2b00      	cmp	r3, #0
   bb2ac:	f000 8170 	beq.w	bb590 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb2b0:	4997      	ldr	r1, [pc, #604]	; (bb510 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb2b2:	f005 f9f2 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bb2b6:	4997      	ldr	r1, [pc, #604]	; (bb514 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bb2b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb2bc:	f005 f9ed 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb2c0:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bb2c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb2c8:	220a      	movs	r2, #10
   bb2ca:	f005 fa02 	bl	c06d2 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bb2ce:	4992      	ldr	r1, [pc, #584]	; (bb518 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bb2d0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb2d4:	f005 f9e1 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bb2d8:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bb2dc:	220a      	movs	r2, #10
   bb2de:	4641      	mov	r1, r8
   bb2e0:	4620      	mov	r0, r4
   bb2e2:	f005 f9f6 	bl	c06d2 <_ZN5Print11printNumberEmh>
        n += println();
   bb2e6:	4620      	mov	r0, r4
   bb2e8:	f005 f9db 	bl	c06a2 <_ZN5Print7printlnEv>
        return n;
   bb2ec:	e787      	b.n	bb1fe <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bb2ee:	3105      	adds	r1, #5
   bb2f0:	428e      	cmp	r6, r1
   bb2f2:	f040 812f 	bne.w	bb554 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb2f6:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bb2f8:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb2fa:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bb2fc:	89a9      	ldrh	r1, [r5, #12]
   bb2fe:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bb302:	4291      	cmp	r1, r2
   bb304:	f040 80ae 	bne.w	bb464 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bb308:	2301      	movs	r3, #1
   bb30a:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bb30c:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb310:	7829      	ldrb	r1, [r5, #0]
   bb312:	4549      	cmp	r1, r9
   bb314:	d155      	bne.n	bb3c2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bb316:	786b      	ldrb	r3, [r5, #1]
   bb318:	4553      	cmp	r3, sl
   bb31a:	d152      	bne.n	bb3c2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bb31c:	2301      	movs	r3, #1
   bb31e:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bb320:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb324:	b3b3      	cbz	r3, bb394 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bb326:	497d      	ldr	r1, [pc, #500]	; (bb51c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bb328:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb32c:	f005 f9b5 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb330:	220a      	movs	r2, #10
   bb332:	8869      	ldrh	r1, [r5, #2]
   bb334:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb338:	f005 f9cb 	bl	c06d2 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bb33c:	4978      	ldr	r1, [pc, #480]	; (bb520 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bb33e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb342:	f005 f9aa 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bb346:	2200      	movs	r2, #0
   bb348:	4629      	mov	r1, r5
   bb34a:	4620      	mov	r0, r4
   bb34c:	f7fd ff50 	bl	b91f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb350:	7bab      	ldrb	r3, [r5, #14]
   bb352:	2b01      	cmp	r3, #1
   bb354:	d104      	bne.n	bb360 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bb356:	4973      	ldr	r1, [pc, #460]	; (bb524 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bb358:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb35c:	f005 f9b7 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb360:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bb364:	2b01      	cmp	r3, #1
   bb366:	d104      	bne.n	bb372 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bb368:	496f      	ldr	r1, [pc, #444]	; (bb528 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bb36a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb36e:	f005 f9ae 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb372:	7beb      	ldrb	r3, [r5, #15]
   bb374:	2b01      	cmp	r3, #1
   bb376:	d104      	bne.n	bb382 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bb378:	496c      	ldr	r1, [pc, #432]	; (bb52c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bb37a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb37e:	f005 f9a6 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb382:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bb386:	2b01      	cmp	r3, #1
   bb388:	d104      	bne.n	bb394 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bb38a:	4969      	ldr	r1, [pc, #420]	; (bb530 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bb38c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb390:	f005 f99d 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bb394:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb398:	b91b      	cbnz	r3, bb3a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bb39a:	4629      	mov	r1, r5
   bb39c:	4620      	mov	r0, r4
   bb39e:	f7fe f8b9 	bl	b9514 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb3a2:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb3a6:	2b03      	cmp	r3, #3
   bb3a8:	f47f af6b 	bne.w	bb282 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bb3ac:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb3b0:	b108      	cbz	r0, bb3b6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bb3b2:	f7f8 fe74 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bb3b6:	2300      	movs	r3, #0
   bb3b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bb3bc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb3c0:	e75f      	b.n	bb282 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb3c2:	882b      	ldrh	r3, [r5, #0]
   bb3c4:	f240 1205 	movw	r2, #261	; 0x105
   bb3c8:	4293      	cmp	r3, r2
   bb3ca:	d123      	bne.n	bb414 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bb3cc:	68ab      	ldr	r3, [r5, #8]
   bb3ce:	781a      	ldrb	r2, [r3, #0]
   bb3d0:	454a      	cmp	r2, r9
   bb3d2:	d102      	bne.n	bb3da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb3d4:	785b      	ldrb	r3, [r3, #1]
   bb3d6:	4553      	cmp	r3, sl
   bb3d8:	d0a0      	beq.n	bb31c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb3da:	786a      	ldrb	r2, [r5, #1]
   bb3dc:	4620      	mov	r0, r4
   bb3de:	f7fc fbf1 	bl	b7bc4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb3e2:	2800      	cmp	r0, #0
   bb3e4:	d09c      	beq.n	bb320 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bb3e6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb3ea:	2b00      	cmp	r3, #0
   bb3ec:	d0d2      	beq.n	bb394 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bb3ee:	4951      	ldr	r1, [pc, #324]	; (bb534 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bb3f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb3f4:	f005 f951 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bb3f8:	2210      	movs	r2, #16
   bb3fa:	7829      	ldrb	r1, [r5, #0]
   bb3fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb400:	f7fc faf2 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb404:	4941      	ldr	r1, [pc, #260]	; (bb50c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb406:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb40a:	f005 f946 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bb40e:	7869      	ldrb	r1, [r5, #1]
   bb410:	2210      	movs	r2, #16
   bb412:	e022      	b.n	bb45a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb414:	2b05      	cmp	r3, #5
   bb416:	d1e0      	bne.n	bb3da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb418:	68ab      	ldr	r3, [r5, #8]
   bb41a:	781a      	ldrb	r2, [r3, #0]
   bb41c:	454a      	cmp	r2, r9
   bb41e:	d1dc      	bne.n	bb3da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb420:	785b      	ldrb	r3, [r3, #1]
   bb422:	4553      	cmp	r3, sl
   bb424:	d1d9      	bne.n	bb3da <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bb426:	2303      	movs	r3, #3
   bb428:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bb42a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb42e:	2b00      	cmp	r3, #0
   bb430:	d0b0      	beq.n	bb394 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bb432:	4941      	ldr	r1, [pc, #260]	; (bb538 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bb434:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb438:	f005 f92f 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bb43c:	68ab      	ldr	r3, [r5, #8]
   bb43e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb442:	7819      	ldrb	r1, [r3, #0]
   bb444:	2210      	movs	r2, #16
   bb446:	f7fc facf 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bb44a:	493c      	ldr	r1, [pc, #240]	; (bb53c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bb44c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb450:	f005 f923 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bb454:	68ab      	ldr	r3, [r5, #8]
   bb456:	7859      	ldrb	r1, [r3, #1]
   bb458:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bb45a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb45e:	f7fc faca 	bl	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb462:	e75d      	b.n	bb320 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bb464:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb466:	782b      	ldrb	r3, [r5, #0]
   bb468:	454b      	cmp	r3, r9
   bb46a:	d143      	bne.n	bb4f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bb46c:	786a      	ldrb	r2, [r5, #1]
   bb46e:	4552      	cmp	r2, sl
   bb470:	d140      	bne.n	bb4f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bb472:	2300      	movs	r3, #0
   bb474:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb476:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb47a:	b91b      	cbnz	r3, bb484 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bb47c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb480:	2b00      	cmp	r3, #0
   bb482:	d08e      	beq.n	bb3a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bb484:	492e      	ldr	r1, [pc, #184]	; (bb540 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bb486:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb48a:	f005 f906 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bb48e:	492d      	ldr	r1, [pc, #180]	; (bb544 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bb490:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb494:	f005 f901 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bb498:	7b29      	ldrb	r1, [r5, #12]
   bb49a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb49e:	220a      	movs	r2, #10
   bb4a0:	f7fc faa2 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bb4a4:	4928      	ldr	r1, [pc, #160]	; (bb548 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bb4a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4aa:	f005 f8f6 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bb4ae:	7b69      	ldrb	r1, [r5, #13]
   bb4b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4b4:	220a      	movs	r2, #10
   bb4b6:	f7fc fa97 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bb4ba:	4924      	ldr	r1, [pc, #144]	; (bb54c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bb4bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4c0:	f005 f8eb 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bb4c4:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bb4c8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4cc:	220a      	movs	r2, #10
   bb4ce:	f7fc fa8b 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bb4d2:	491f      	ldr	r1, [pc, #124]	; (bb550 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bb4d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4d8:	f005 f8df 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bb4dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4e0:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bb4e4:	220a      	movs	r2, #10
   bb4e6:	f7fc fa7f 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bb4ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4ee:	f005 f8d8 	bl	c06a2 <_ZN5Print7printlnEv>
   bb4f2:	e756      	b.n	bb3a2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb4f4:	2b05      	cmp	r3, #5
   bb4f6:	d1be      	bne.n	bb476 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb4f8:	68ab      	ldr	r3, [r5, #8]
   bb4fa:	781a      	ldrb	r2, [r3, #0]
   bb4fc:	454a      	cmp	r2, r9
   bb4fe:	d1ba      	bne.n	bb476 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb500:	785b      	ldrb	r3, [r3, #1]
   bb502:	4553      	cmp	r3, sl
   bb504:	d1b7      	bne.n	bb476 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb506:	e7b4      	b.n	bb472 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bb508:	000c4d7c 	.word	0x000c4d7c
   bb50c:	000c4ded 	.word	0x000c4ded
   bb510:	000c4ef5 	.word	0x000c4ef5
   bb514:	000c4f4c 	.word	0x000c4f4c
   bb518:	000c4f62 	.word	0x000c4f62
   bb51c:	000c4e29 	.word	0x000c4e29
   bb520:	000c4e3a 	.word	0x000c4e3a
   bb524:	000c4e46 	.word	0x000c4e46
   bb528:	000c4e5a 	.word	0x000c4e5a
   bb52c:	000c4e6e 	.word	0x000c4e6e
   bb530:	000c4e88 	.word	0x000c4e88
   bb534:	000c4df5 	.word	0x000c4df5
   bb538:	000c4db4 	.word	0x000c4db4
   bb53c:	000c4de3 	.word	0x000c4de3
   bb540:	000c4ea2 	.word	0x000c4ea2
   bb544:	000c4eb3 	.word	0x000c4eb3
   bb548:	000c4ec0 	.word	0x000c4ec0
   bb54c:	000c4ecd 	.word	0x000c4ecd
   bb550:	000c4ee1 	.word	0x000c4ee1
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb554:	786a      	ldrb	r2, [r5, #1]
   bb556:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bb558:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb55c:	4620      	mov	r0, r4
   bb55e:	f7fc fb31 	bl	b7bc4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bb562:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bb566:	2800      	cmp	r0, #0
   bb568:	bf18      	it	ne
   bb56a:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bb56e:	2b00      	cmp	r3, #0
   bb570:	f47f ae87 	bne.w	bb282 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bb574:	1ef3      	subs	r3, r6, #3
   bb576:	454b      	cmp	r3, r9
   bb578:	f77f ae83 	ble.w	bb282 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bb57c:	3e04      	subs	r6, #4
   bb57e:	eba6 0609 	sub.w	r6, r6, r9
   bb582:	4546      	cmp	r6, r8
   bb584:	da02      	bge.n	bb58c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bb586:	68ab      	ldr	r3, [r5, #8]
   bb588:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb58a:	e67a      	b.n	bb282 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bb58c:	2301      	movs	r3, #1
   bb58e:	e681      	b.n	bb294 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb590:	4900      	ldr	r1, [pc, #0]	; (bb594 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bb592:	e68e      	b.n	bb2b2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bb594:	000c4f1a 	.word	0x000c4f1a

000bb598 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bb598:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb59a:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bb59e:	4604      	mov	r4, r0
   bb5a0:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb5a2:	b113      	cbz	r3, bb5aa <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bb5a4:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bb5a8:	b953      	cbnz	r3, bb5c0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bb5aa:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bb5ae:	b128      	cbz	r0, bb5bc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bb5b0:	490e      	ldr	r1, [pc, #56]	; (bb5ec <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb5b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5b6:	f005 f88a 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bb5ba:	2000      	movs	r0, #0
}
   bb5bc:	b003      	add	sp, #12
   bb5be:	bd30      	pop	{r4, r5, pc}
   bb5c0:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bb5c2:	f7fd ff12 	bl	b93ea <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bb5c6:	4285      	cmp	r5, r0
   bb5c8:	9901      	ldr	r1, [sp, #4]
   bb5ca:	d908      	bls.n	bb5de <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb5cc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb5d0:	b91b      	cbnz	r3, bb5da <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bb5d2:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bb5d6:	2800      	cmp	r0, #0
   bb5d8:	d0f0      	beq.n	bb5bc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb5da:	4905      	ldr	r1, [pc, #20]	; (bb5f0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bb5dc:	e7e9      	b.n	bb5b2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bb5de:	4620      	mov	r0, r4
   bb5e0:	462a      	mov	r2, r5
   bb5e2:	f7fd ff0b 	bl	b93fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bb5e6:	2001      	movs	r0, #1
   bb5e8:	e7e8      	b.n	bb5bc <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bb5ea:	bf00      	nop
   bb5ec:	000c4f7a 	.word	0x000c4f7a
   bb5f0:	000c4fa5 	.word	0x000c4fa5

000bb5f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bb5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb5f8:	4604      	mov	r4, r0
   bb5fa:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bb5fc:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bb600:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bb604:	f88d 100f 	strb.w	r1, [sp, #15]
   bb608:	4615      	mov	r5, r2
   bb60a:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bb60c:	b118      	cbz	r0, bb616 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bb60e:	6803      	ldr	r3, [r0, #0]
   bb610:	b2c9      	uxtb	r1, r1
   bb612:	689b      	ldr	r3, [r3, #8]
   bb614:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bb616:	7823      	ldrb	r3, [r4, #0]
   bb618:	2b01      	cmp	r3, #1
   bb61a:	d80e      	bhi.n	bb63a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb61c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb620:	2bb5      	cmp	r3, #181	; 0xb5
   bb622:	d12e      	bne.n	bb682 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bb624:	2300      	movs	r3, #0
   bb626:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb62a:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bb62c:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb630:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb634:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb636:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bb63a:	7826      	ldrb	r6, [r4, #0]
   bb63c:	2e02      	cmp	r6, #2
   bb63e:	f040 81d5 	bne.w	bb9ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bb642:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb646:	bb5b      	cbnz	r3, bb6a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bb648:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb64c:	2bb5      	cmp	r3, #181	; 0xb5
   bb64e:	d001      	beq.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bb650:	2300      	movs	r3, #0
   bb652:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb654:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb658:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb65c:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb660:	2b01      	cmp	r3, #1
   bb662:	f040 81a3 	bne.w	bb9ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb666:	463b      	mov	r3, r7
   bb668:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb66c:	4620      	mov	r0, r4
   bb66e:	f7ff fdad 	bl	bb1cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bb672:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb676:	3301      	adds	r3, #1
   bb678:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bb67c:	b005      	add	sp, #20
   bb67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bb682:	2b24      	cmp	r3, #36	; 0x24
   bb684:	d105      	bne.n	bb692 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bb686:	2300      	movs	r3, #0
   bb688:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bb68c:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb68e:	7023      	strb	r3, [r4, #0]
   bb690:	e7d3      	b.n	bb63a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bb692:	2bd3      	cmp	r3, #211	; 0xd3
   bb694:	d1d1      	bne.n	bb63a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bb696:	2300      	movs	r3, #0
   bb698:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb69c:	2303      	movs	r3, #3
   bb69e:	e7f6      	b.n	bb68e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bb6a0:	2b01      	cmp	r3, #1
   bb6a2:	d103      	bne.n	bb6ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bb6a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb6a8:	2b62      	cmp	r3, #98	; 0x62
   bb6aa:	e7d0      	b.n	bb64e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bb6ac:	2b02      	cmp	r3, #2
   bb6ae:	d10e      	bne.n	bb6ce <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bb6b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb6b4:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bb6b8:	2200      	movs	r2, #0
   bb6ba:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bb6be:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bb6c2:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bb6c6:	88eb      	ldrh	r3, [r5, #6]
   bb6c8:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bb6cc:	e7c2      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bb6ce:	2b03      	cmp	r3, #3
   bb6d0:	f040 80b7 	bne.w	bb842 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb6d4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bb6d8:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bb6dc:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb6e0:	2905      	cmp	r1, #5
   bb6e2:	d0b7      	beq.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bb6e4:	42b9      	cmp	r1, r7
   bb6e6:	d10c      	bne.n	bb702 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bb6e8:	4546      	cmp	r6, r8
   bb6ea:	d10a      	bne.n	bb702 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb6ec:	2300      	movs	r3, #0
   bb6ee:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb6f2:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bb6f4:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bb6f8:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bb6fa:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bb6fe:	80ab      	strh	r3, [r5, #4]
   bb700:	e7a8      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bb702:	4632      	mov	r2, r6
   bb704:	4620      	mov	r0, r4
   bb706:	f7fc fa5d 	bl	b7bc4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb70a:	2800      	cmp	r0, #0
   bb70c:	f000 8095 	beq.w	bb83a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bb710:	4632      	mov	r2, r6
   bb712:	4620      	mov	r0, r4
   bb714:	f7fc fb58 	bl	b7dc8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bb718:	4606      	mov	r6, r0
   bb71a:	b9e8      	cbnz	r0, bb758 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb71c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb720:	b913      	cbnz	r3, bb728 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bb722:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb726:	b1bb      	cbz	r3, bb758 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb728:	49a7      	ldr	r1, [pc, #668]	; (bb9c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bb72a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb72e:	f004 ffb4 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bb732:	220a      	movs	r2, #10
   bb734:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb738:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb73c:	f7fc f954 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb740:	49a2      	ldr	r1, [pc, #648]	; (bb9cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb742:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb746:	f004 ffa8 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bb74a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb74e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb752:	220a      	movs	r2, #10
   bb754:	f7fc f94f 	bl	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bb758:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bb75c:	b1a3      	cbz	r3, bb788 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb75e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb762:	b913      	cbnz	r3, bb76a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bb764:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb768:	b123      	cbz	r3, bb774 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bb76a:	4999      	ldr	r1, [pc, #612]	; (bb9d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bb76c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb770:	f004 ffad 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bb774:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb778:	b108      	cbz	r0, bb77e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bb77a:	f7f8 fc90 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bb77e:	2300      	movs	r3, #0
   bb780:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bb784:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bb788:	4630      	mov	r0, r6
   bb78a:	f7f8 fc86 	bl	b409a <_Znaj>
   bb78e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb792:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bb796:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bb79a:	bb38      	cbnz	r0, bb7ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb79c:	b913      	cbnz	r3, bb7a4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bb79e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb7a2:	b1e3      	cbz	r3, bb7de <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bb7a4:	498b      	ldr	r1, [pc, #556]	; (bb9d4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bb7a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7aa:	f004 ff76 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bb7ae:	2210      	movs	r2, #16
   bb7b0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb7b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7b8:	f7fc f916 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb7bc:	4983      	ldr	r1, [pc, #524]	; (bb9cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb7be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7c2:	f004 ff6a 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bb7c6:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb7ca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7ce:	2210      	movs	r2, #16
   bb7d0:	f7fc f911 	bl	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bb7d4:	4980      	ldr	r1, [pc, #512]	; (bb9d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bb7d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7da:	f004 ff78 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb7de:	2300      	movs	r3, #0
   bb7e0:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb7e4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bb7e8:	702b      	strb	r3, [r5, #0]
   bb7ea:	e783      	b.n	bb6f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bb7ec:	2203      	movs	r2, #3
   bb7ee:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bb7f2:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bb7f6:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bb7fa:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bb7fe:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bb802:	2b00      	cmp	r3, #0
   bb804:	f43f af26 	beq.w	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bb808:	4974      	ldr	r1, [pc, #464]	; (bb9dc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bb80a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb80e:	f004 ff44 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bb812:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb816:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb81a:	2210      	movs	r2, #16
   bb81c:	f7fc f8e4 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bb820:	496a      	ldr	r1, [pc, #424]	; (bb9cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb822:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb826:	f004 ff38 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bb82a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb82e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb832:	2210      	movs	r2, #16
   bb834:	f7fc f8df 	bl	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb838:	e70c      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bb83a:	2301      	movs	r3, #1
   bb83c:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bb840:	e708      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bb842:	2b04      	cmp	r3, #4
   bb844:	d104      	bne.n	bb850 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bb846:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bb84a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bb84e:	e701      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bb850:	2b05      	cmp	r3, #5
   bb852:	d106      	bne.n	bb862 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bb854:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb858:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb85c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bb860:	e7f3      	b.n	bb84a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bb862:	2b06      	cmp	r3, #6
   bb864:	d12b      	bne.n	bb8be <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bb866:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb86a:	bb13      	cbnz	r3, bb8b2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb86c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb870:	b913      	cbnz	r3, bb878 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bb872:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb876:	b1bb      	cbz	r3, bb8a8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bb878:	4959      	ldr	r1, [pc, #356]	; (bb9e0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bb87a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb87e:	f004 ff0c 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bb882:	2210      	movs	r2, #16
   bb884:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb888:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb88c:	f7fc f8ac 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb890:	494e      	ldr	r1, [pc, #312]	; (bb9cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb892:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb896:	f004 ff00 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bb89a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bb89e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb8a2:	2210      	movs	r2, #16
   bb8a4:	f7fc f8a7 	bl	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bb8a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb8ac:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bb8b0:	e6d0      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bb8b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb8b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb8ba:	701a      	strb	r2, [r3, #0]
   bb8bc:	e6ca      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bb8be:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb8c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bb8c4:	f47f aec6 	bne.w	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bb8c8:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bb8cc:	bb9b      	cbnz	r3, bb936 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bb8ce:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bb8d2:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb8d6:	2b02      	cmp	r3, #2
   bb8d8:	f47f aebc 	bne.w	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bb8dc:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb8e0:	2905      	cmp	r1, #5
   bb8e2:	f47f aeb7 	bne.w	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bb8e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb8ea:	781a      	ldrb	r2, [r3, #0]
   bb8ec:	42ba      	cmp	r2, r7
   bb8ee:	f47f aeb1 	bne.w	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bb8f2:	785a      	ldrb	r2, [r3, #1]
   bb8f4:	4542      	cmp	r2, r8
   bb8f6:	f47f aead 	bne.w	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bb8fa:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bb8fe:	2a02      	cmp	r2, #2
   bb900:	d121      	bne.n	bb946 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bb902:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bb906:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bb90a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bb90e:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bb912:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bb916:	2001      	movs	r0, #1
   bb918:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bb91c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bb920:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bb924:	781b      	ldrb	r3, [r3, #0]
   bb926:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bb928:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bb92c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bb930:	7852      	ldrb	r2, [r2, #1]
   bb932:	705a      	strb	r2, [r3, #1]
   bb934:	e68e      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bb936:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bb938:	bf16      	itet	ne
   bb93a:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bb93e:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bb942:	705a      	strbne	r2, [r3, #1]
   bb944:	e7c5      	b.n	bb8d2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb946:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb94a:	b923      	cbnz	r3, bb956 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bb94c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb950:	2b00      	cmp	r3, #0
   bb952:	f43f ae7f 	beq.w	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bb956:	4923      	ldr	r1, [pc, #140]	; (bb9e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bb958:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb95c:	f004 fe9d 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bb960:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb964:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb968:	7819      	ldrb	r1, [r3, #0]
   bb96a:	2210      	movs	r2, #16
   bb96c:	f7fc f83c 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bb970:	4916      	ldr	r1, [pc, #88]	; (bb9cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bb972:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb976:	f004 fe90 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bb97a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bb97e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb982:	7859      	ldrb	r1, [r3, #1]
   bb984:	2210      	movs	r2, #16
   bb986:	f7fc f82f 	bl	b79e8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bb98a:	4917      	ldr	r1, [pc, #92]	; (bb9e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bb98c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb990:	f004 fe83 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bb994:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bb998:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bb99c:	220a      	movs	r2, #10
   bb99e:	4630      	mov	r0, r6
   bb9a0:	f004 fe97 	bl	c06d2 <_ZN5Print11printNumberEmh>
        n += println();
   bb9a4:	4630      	mov	r0, r6
   bb9a6:	f004 fe7c 	bl	c06a2 <_ZN5Print7printlnEv>
        return n;
   bb9aa:	e653      	b.n	bb654 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb9ac:	b913      	cbnz	r3, bb9b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bb9ae:	463b      	mov	r3, r7
   bb9b0:	462a      	mov	r2, r5
   bb9b2:	e65b      	b.n	bb66c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bb9b4:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bb9b6:	bf08      	it	eq
   bb9b8:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bb9bc:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb9be:	bf18      	it	ne
   bb9c0:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bb9c4:	e652      	b.n	bb66c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bb9c6:	bf00      	nop
   bb9c8:	000c4fe6 	.word	0x000c4fe6
   bb9cc:	000c4ded 	.word	0x000c4ded
   bb9d0:	000c501b 	.word	0x000c501b
   bb9d4:	000c505d 	.word	0x000c505d
   bb9d8:	000c50a2 	.word	0x000c50a2
   bb9dc:	000c50d4 	.word	0x000c50d4
   bb9e0:	000c5105 	.word	0x000c5105
   bb9e4:	000c5135 	.word	0x000c5135
   bb9e8:	000c5165 	.word	0x000c5165
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bb9ec:	2e01      	cmp	r6, #1
   bb9ee:	f040 8188 	bne.w	bbd02 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bb9f2:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bb9f6:	2b00      	cmp	r3, #0
   bb9f8:	d146      	bne.n	bba88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bb9fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb9fe:	2a24      	cmp	r2, #36	; 0x24
   bba00:	f000 8086 	beq.w	bbb10 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bba04:	2300      	movs	r3, #0
   bba06:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bba08:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bba0c:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bba0e:	bf04      	itt	eq
   bba10:	23fb      	moveq	r3, #251	; 0xfb
   bba12:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bba16:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bba1a:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bba1e:	3501      	adds	r5, #1
   bba20:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bba22:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bba24:	bf08      	it	eq
   bba26:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bba28:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bba2c:	bf08      	it	eq
   bba2e:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bba30:	2d00      	cmp	r5, #0
   bba32:	f47f ae23 	bne.w	bb67c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bba36:	4620      	mov	r0, r4
   bba38:	f7fc fc20 	bl	b827c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bba3c:	2800      	cmp	r0, #0
   bba3e:	f000 8120 	beq.w	bbc82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bba42:	4620      	mov	r0, r4
   bba44:	f7fc fd7c 	bl	b8540 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bba48:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bba4a:	4620      	mov	r0, r4
   bba4c:	f7fc fdfa 	bl	b8644 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bba50:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bba52:	4620      	mov	r0, r4
   bba54:	f7fd f88a 	bl	b8b6c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bba58:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bba5a:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bba5c:	1e41      	subs	r1, r0, #1
   bba5e:	428e      	cmp	r6, r1
   bba60:	f280 80b4 	bge.w	bbbcc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bba64:	783a      	ldrb	r2, [r7, #0]
   bba66:	3a04      	subs	r2, #4
   bba68:	4296      	cmp	r6, r2
   bba6a:	f280 80af 	bge.w	bbbcc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bba6e:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bba70:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bba74:	f000 80ad 	beq.w	bbbd2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bba78:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bba7a:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bba7e:	bf18      	it	ne
   bba80:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bba82:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bba84:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bba86:	e7ea      	b.n	bba5e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bba88:	2b01      	cmp	r3, #1
   bba8a:	d103      	bne.n	bba94 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bba8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bba90:	2a47      	cmp	r2, #71	; 0x47
   bba92:	e7b5      	b.n	bba00 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bba94:	b2da      	uxtb	r2, r3
   bba96:	2a05      	cmp	r2, #5
   bba98:	d93a      	bls.n	bbb10 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bba9a:	4620      	mov	r0, r4
   bba9c:	f7fc fbee 	bl	b827c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbaa0:	b308      	cbz	r0, bbae6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbaa2:	4620      	mov	r0, r4
   bbaa4:	f7fc fd4c 	bl	b8540 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbaa8:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbaaa:	4620      	mov	r0, r4
   bbaac:	f7fc fdca 	bl	b8644 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbab0:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbab2:	4620      	mov	r0, r4
   bbab4:	f7fd f85a 	bl	b8b6c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bbab8:	782b      	ldrb	r3, [r5, #0]
   bbaba:	4283      	cmp	r3, r0
   bbabc:	d213      	bcs.n	bbae6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bbabe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbac2:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbac4:	782b      	ldrb	r3, [r5, #0]
   bbac6:	3301      	adds	r3, #1
   bbac8:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bbaca:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbacc:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bbace:	d10a      	bne.n	bbae6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbad0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbad4:	b913      	cbnz	r3, bbadc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bbad6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbada:	b123      	cbz	r3, bbae6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bbadc:	498f      	ldr	r1, [pc, #572]	; (bbd1c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bbade:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbae2:	f004 fdf4 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bbae6:	4620      	mov	r0, r4
   bbae8:	f7fc f9c8 	bl	b7e7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbaec:	b128      	cbz	r0, bbafa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bbaee:	2201      	movs	r2, #1
   bbaf0:	f10d 010f 	add.w	r1, sp, #15
   bbaf4:	4620      	mov	r0, r4
   bbaf6:	f7ff fd4f 	bl	bb598 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbafa:	4620      	mov	r0, r4
   bbafc:	f7fc faee 	bl	b80dc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbb00:	2800      	cmp	r0, #0
   bbb02:	d081      	beq.n	bba08 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bbb04:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbb08:	4620      	mov	r0, r4
   bbb0a:	f7fc fbaf 	bl	b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bbb0e:	e77b      	b.n	bba08 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bbb10:	18e2      	adds	r2, r4, r3
   bbb12:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbb16:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bbb1a:	2b05      	cmp	r3, #5
   bbb1c:	f47f af74 	bne.w	bba08 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bbb20:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bbb24:	b923      	cbnz	r3, bbb30 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bbb26:	4620      	mov	r0, r4
   bbb28:	f7fc fa70 	bl	b800c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bbb2c:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bbb30:	4620      	mov	r0, r4
   bbb32:	f7fc fba3 	bl	b827c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbb36:	b1b8      	cbz	r0, bbb68 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbb38:	4620      	mov	r0, r4
   bbb3a:	f7fc fd01 	bl	b8540 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbb3e:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbb40:	4620      	mov	r0, r4
   bbb42:	f7fc fd7f 	bl	b8644 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbb46:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbb48:	4620      	mov	r0, r4
   bbb4a:	f7fd f80f 	bl	b8b6c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bbb4e:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbb50:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bbb52:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bbb54:	2100      	movs	r1, #0
   bbb56:	4628      	mov	r0, r5
   bbb58:	f006 fb60 	bl	c221c <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bbb5c:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bbb60:	602b      	str	r3, [r5, #0]
   bbb62:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bbb66:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bbb68:	4620      	mov	r0, r4
   bbb6a:	f7fc f987 	bl	b7e7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbb6e:	b128      	cbz	r0, bbb7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bbb70:	2206      	movs	r2, #6
   bbb72:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bbb76:	4620      	mov	r0, r4
   bbb78:	f7ff fd0e 	bl	bb598 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbb7c:	4620      	mov	r0, r4
   bbb7e:	f7fc faad 	bl	b80dc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbb82:	b1e8      	cbz	r0, bbbc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bbb84:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bbb88:	4620      	mov	r0, r4
   bbb8a:	f7fc fb6f 	bl	b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bbb8e:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bbb92:	4620      	mov	r0, r4
   bbb94:	f7fc fb6a 	bl	b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bbb98:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bbb9c:	4620      	mov	r0, r4
   bbb9e:	f7fc fb65 	bl	b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bbba2:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bbba6:	4620      	mov	r0, r4
   bbba8:	f7fc fb60 	bl	b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bbbac:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bbbb0:	4620      	mov	r0, r4
   bbbb2:	f7fc fb5b 	bl	b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bbbb6:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bbbba:	4620      	mov	r0, r4
   bbbbc:	f7fc fb56 	bl	b826c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bbbc0:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bbbc4:	2b05      	cmp	r3, #5
   bbbc6:	f67f af1f 	bls.w	bba08 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bbbca:	e766      	b.n	bba9a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bbbcc:	2d2a      	cmp	r5, #42	; 0x2a
   bbbce:	f040 808b 	bne.w	bbce8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bbbd2:	091a      	lsrs	r2, r3, #4
   bbbd4:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bbbd8:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bbbda:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bbbdc:	f003 030f 	and.w	r3, r3, #15
   bbbe0:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bbbe4:	bf84      	itt	hi
   bbbe6:	3237      	addhi	r2, #55	; 0x37
   bbbe8:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bbbea:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bbbee:	bf88      	it	hi
   bbbf0:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bbbf4:	f818 3006 	ldrb.w	r3, [r8, r6]
   bbbf8:	42ab      	cmp	r3, r5
   bbbfa:	eb08 0b06 	add.w	fp, r8, r6
   bbbfe:	d143      	bne.n	bbc88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bbc00:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bbc04:	4553      	cmp	r3, sl
   bbc06:	d13f      	bne.n	bbc88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bbc08:	4620      	mov	r0, r4
   bbc0a:	f7fc fd9d 	bl	b8748 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bbc0e:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbc10:	4620      	mov	r0, r4
   bbc12:	f7fc fe1d 	bl	b8850 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbc16:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbc18:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbc1a:	2100      	movs	r1, #0
   bbc1c:	f006 fafe 	bl	c221c <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bbc20:	783a      	ldrb	r2, [r7, #0]
   bbc22:	4641      	mov	r1, r8
   bbc24:	4630      	mov	r0, r6
   bbc26:	f006 fad1 	bl	c21cc <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bbc2a:	783b      	ldrb	r3, [r7, #0]
   bbc2c:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbc2e:	4620      	mov	r0, r4
   bbc30:	f7fd f80e 	bl	b8c50 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bbc34:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bbc36:	f025 0503 	bic.w	r5, r5, #3
   bbc3a:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbc3e:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bbc40:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bbc44:	4620      	mov	r0, r4
   bbc46:	f7fc fba5 	bl	b8394 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bbc4a:	b1d0      	cbz	r0, bbc82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bbc4c:	f01a 0104 	ands.w	r1, sl, #4
   bbc50:	d117      	bne.n	bbc82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bbc52:	4620      	mov	r0, r4
   bbc54:	9102      	str	r1, [sp, #8]
   bbc56:	f7fc fe7f 	bl	b8958 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bbc5a:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbc5c:	4620      	mov	r0, r4
   bbc5e:	f7fc feff 	bl	b8a60 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbc62:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbc64:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbc66:	464a      	mov	r2, r9
   bbc68:	f006 fad8 	bl	c221c <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bbc6c:	783a      	ldrb	r2, [r7, #0]
   bbc6e:	4641      	mov	r1, r8
   bbc70:	4650      	mov	r0, sl
   bbc72:	f006 faab 	bl	c21cc <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbc76:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bbc7a:	783b      	ldrb	r3, [r7, #0]
   bbc7c:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbc80:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bbc82:	2300      	movs	r3, #0
   bbc84:	7023      	strb	r3, [r4, #0]
   bbc86:	e4f9      	b.n	bb67c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbc88:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbc8c:	b91b      	cbnz	r3, bbc96 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bbc8e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbc92:	2b00      	cmp	r3, #0
   bbc94:	d0f5      	beq.n	bbc82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bbc96:	4922      	ldr	r1, [pc, #136]	; (bbd20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bbc98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc9c:	f004 fcfd 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bbca0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbca4:	6803      	ldr	r3, [r0, #0]
   bbca6:	4629      	mov	r1, r5
   bbca8:	689b      	ldr	r3, [r3, #8]
   bbcaa:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bbcac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcb0:	6803      	ldr	r3, [r0, #0]
   bbcb2:	4651      	mov	r1, sl
   bbcb4:	689b      	ldr	r3, [r3, #8]
   bbcb6:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bbcb8:	491a      	ldr	r1, [pc, #104]	; (bbd24 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bbcba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcbe:	f004 fcec 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bbcc2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcc6:	f89b 1000 	ldrb.w	r1, [fp]
   bbcca:	6803      	ldr	r3, [r0, #0]
   bbccc:	689b      	ldr	r3, [r3, #8]
   bbcce:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bbcd0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcd4:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bbcd8:	6803      	ldr	r3, [r0, #0]
   bbcda:	689b      	ldr	r3, [r3, #8]
   bbcdc:	4798      	blx	r3
              _debugSerial->println();
   bbcde:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbce2:	f004 fcde 	bl	c06a2 <_ZN5Print7printlnEv>
   bbce6:	e7cc      	b.n	bbc82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbce8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbcec:	b91b      	cbnz	r3, bbcf6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bbcee:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbcf2:	2b00      	cmp	r3, #0
   bbcf4:	d0c5      	beq.n	bbc82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bbcf6:	490c      	ldr	r1, [pc, #48]	; (bbd28 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bbcf8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbcfc:	f004 fce7 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbd00:	e7bf      	b.n	bbc82 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bbd02:	2e03      	cmp	r6, #3
   bbd04:	f47f acba 	bne.w	bb67c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bbd08:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbd0c:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bbd10:	4620      	mov	r0, r4
   bbd12:	f7fd f821 	bl	b8d58 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bbd16:	7020      	strb	r0, [r4, #0]
}
   bbd18:	e4b0      	b.n	bb67c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bbd1a:	bf00      	nop
   bbd1c:	000c516c 	.word	0x000c516c
   bbd20:	000c518a 	.word	0x000c518a
   bbd24:	000c51b5 	.word	0x000c51b5
   bbd28:	000c51bb 	.word	0x000c51bb

000bbd2c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bbd2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bbd30:	4604      	mov	r4, r0
   bbd32:	4699      	mov	r9, r3
   bbd34:	460f      	mov	r7, r1
   bbd36:	4690      	mov	r8, r2
   bbd38:	f001 f94c 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bbd3c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bbd40:	1ac0      	subs	r0, r0, r3
   bbd42:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bbd46:	4298      	cmp	r0, r3
   bbd48:	f0c0 80a8 	bcc.w	bbe9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bbd4c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bbd50:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbd54:	f003 f9d4 	bl	bf100 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bbd58:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbd5c:	21fd      	movs	r1, #253	; 0xfd
   bbd5e:	f7fb fe53 	bl	b7a08 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bbd62:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbd66:	2100      	movs	r1, #0
   bbd68:	f003 f9d1 	bl	bf10e <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bbd6c:	4605      	mov	r5, r0
   bbd6e:	b1a8      	cbz	r0, bbd9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbd70:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd74:	b933      	cbnz	r3, bbd84 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bbd76:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbd7a:	b91b      	cbnz	r3, bbd84 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bbd7c:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bbd7e:	b002      	add	sp, #8
   bbd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bbd84:	4946      	ldr	r1, [pc, #280]	; (bbea0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bbd86:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd8a:	f004 fc86 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bbd8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbd92:	220a      	movs	r2, #10
   bbd94:	4629      	mov	r1, r5
   bbd96:	f7fb fe2e 	bl	b79f6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbd9a:	e7ef      	b.n	bbd7c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bbd9c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bbda0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbda4:	2202      	movs	r2, #2
   bbda6:	f003 f9a8 	bl	bf0fa <_ZN7TwoWire11requestFromEhj>
   bbdaa:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bbdac:	2d02      	cmp	r5, #2
   bbdae:	d008      	beq.n	bbdc2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbdb0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbdb4:	b91b      	cbnz	r3, bbdbe <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bbdb6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbdba:	2b00      	cmp	r3, #0
   bbdbc:	d0de      	beq.n	bbd7c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bbdbe:	4939      	ldr	r1, [pc, #228]	; (bbea4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bbdc0:	e7e1      	b.n	bbd86 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bbdc2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbdc6:	6803      	ldr	r3, [r0, #0]
   bbdc8:	695b      	ldr	r3, [r3, #20]
   bbdca:	4798      	blx	r3
   bbdcc:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bbdce:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbdd2:	6803      	ldr	r3, [r0, #0]
   bbdd4:	695b      	ldr	r3, [r3, #20]
   bbdd6:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bbdd8:	b2c6      	uxtb	r6, r0
   bbdda:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bbdde:	b22a      	sxth	r2, r5
   bbde0:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bbde2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbde6:	b955      	cbnz	r5, bbdfe <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bbde8:	b123      	cbz	r3, bbdf4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bbdea:	492f      	ldr	r1, [pc, #188]	; (bbea8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bbdec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbdf0:	f004 fc6d 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbdf4:	f001 f8ee 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bbdf8:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bbdfc:	e7be      	b.n	bbd7c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bbdfe:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bbe00:	bfb8      	it	lt
   bbe02:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bbe06:	2d64      	cmp	r5, #100	; 0x64
   bbe08:	d936      	bls.n	bbe78 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bbe0a:	b17b      	cbz	r3, bbe2c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bbe0c:	4927      	ldr	r1, [pc, #156]	; (bbeac <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bbe0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe12:	f004 fc42 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbe16:	4629      	mov	r1, r5
   bbe18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe1c:	220a      	movs	r2, #10
   bbe1e:	f004 fc58 	bl	c06d2 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bbe22:	4923      	ldr	r1, [pc, #140]	; (bbeb0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bbe24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe28:	f004 fc51 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bbe2c:	2d00      	cmp	r5, #0
   bbe2e:	d035      	beq.n	bbe9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bbe30:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bbe32:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bbe36:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbe3a:	42ae      	cmp	r6, r5
   bbe3c:	bf28      	it	cs
   bbe3e:	462e      	movcs	r6, r5
   bbe40:	4632      	mov	r2, r6
   bbe42:	f003 f95a 	bl	bf0fa <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bbe46:	b2c0      	uxtb	r0, r0
   bbe48:	4286      	cmp	r6, r0
   bbe4a:	d197      	bne.n	bbd7c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bbe4c:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bbe50:	fa1f f38a 	uxth.w	r3, sl
   bbe54:	429e      	cmp	r6, r3
   bbe56:	d91e      	bls.n	bbe96 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bbe58:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bbe5c:	6803      	ldr	r3, [r0, #0]
   bbe5e:	695b      	ldr	r3, [r3, #20]
   bbe60:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bbe62:	f8cd 9000 	str.w	r9, [sp]
   bbe66:	b2c1      	uxtb	r1, r0
   bbe68:	4643      	mov	r3, r8
   bbe6a:	463a      	mov	r2, r7
   bbe6c:	4620      	mov	r0, r4
   bbe6e:	f7ff fbc1 	bl	bb5f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bbe72:	f10a 0a01 	add.w	sl, sl, #1
   bbe76:	e7eb      	b.n	bbe50 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bbe78:	2b00      	cmp	r3, #0
   bbe7a:	d0d7      	beq.n	bbe2c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bbe7c:	490d      	ldr	r1, [pc, #52]	; (bbeb4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bbe7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe82:	f004 fc0a 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
   bbe86:	4629      	mov	r1, r5
   bbe88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe8c:	220a      	movs	r2, #10
   bbe8e:	f004 fc20 	bl	c06d2 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bbe92:	4909      	ldr	r1, [pc, #36]	; (bbeb8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bbe94:	e7c6      	b.n	bbe24 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bbe96:	1bad      	subs	r5, r5, r6
   bbe98:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bbe9a:	e7c7      	b.n	bbe2c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bbe9c:	2001      	movs	r0, #1
   bbe9e:	e76e      	b.n	bbd7e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bbea0:	000c51dc 	.word	0x000c51dc
   bbea4:	000c5210 	.word	0x000c5210
   bbea8:	000c5245 	.word	0x000c5245
   bbeac:	000c526d 	.word	0x000c526d
   bbeb0:	000c528d 	.word	0x000c528d
   bbeb4:	000c529d 	.word	0x000c529d
   bbeb8:	000c52b5 	.word	0x000c52b5

000bbebc <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bbebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bbebe:	4604      	mov	r4, r0
   bbec0:	460d      	mov	r5, r1
   bbec2:	4616      	mov	r6, r2
   bbec4:	461f      	mov	r7, r3
  while (_serialPort->available())
   bbec6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bbeca:	6803      	ldr	r3, [r0, #0]
   bbecc:	691b      	ldr	r3, [r3, #16]
   bbece:	4798      	blx	r3
   bbed0:	b160      	cbz	r0, bbeec <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bbed2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bbed6:	6803      	ldr	r3, [r0, #0]
   bbed8:	695b      	ldr	r3, [r3, #20]
   bbeda:	4798      	blx	r3
   bbedc:	9700      	str	r7, [sp, #0]
   bbede:	b2c1      	uxtb	r1, r0
   bbee0:	4633      	mov	r3, r6
   bbee2:	462a      	mov	r2, r5
   bbee4:	4620      	mov	r0, r4
   bbee6:	f7ff fb85 	bl	bb5f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bbeea:	e7ec      	b.n	bbec6 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bbeec:	2001      	movs	r0, #1
   bbeee:	b003      	add	sp, #12
   bbef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bbef4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bbef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbef8:	4604      	mov	r4, r0
   bbefa:	b087      	sub	sp, #28
   bbefc:	460d      	mov	r5, r1
   bbefe:	4616      	mov	r6, r2
   bbf00:	461f      	mov	r7, r3
   bbf02:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bbf06:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bbf0a:	fa5f f388 	uxtb.w	r3, r8
   bbf0e:	429a      	cmp	r2, r3
   bbf10:	d90b      	bls.n	bbf2a <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bbf12:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bbf16:	4620      	mov	r0, r4
   bbf18:	5cd1      	ldrb	r1, [r2, r3]
   bbf1a:	9700      	str	r7, [sp, #0]
   bbf1c:	4633      	mov	r3, r6
   bbf1e:	462a      	mov	r2, r5
   bbf20:	f7ff fb68 	bl	bb5f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bbf24:	f108 0801 	add.w	r8, r8, #1
   bbf28:	e7ed      	b.n	bbf06 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bbf2a:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bbf2e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bbf32:	4a25      	ldr	r2, [pc, #148]	; (bbfc8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bbf34:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bbf38:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bbf3c:	a902      	add	r1, sp, #8
   bbf3e:	f04f 0901 	mov.w	r9, #1
   bbf42:	9202      	str	r2, [sp, #8]
   bbf44:	9304      	str	r3, [sp, #16]
   bbf46:	f88d 800c 	strb.w	r8, [sp, #12]
   bbf4a:	f8ad 9014 	strh.w	r9, [sp, #20]
   bbf4e:	f004 fdbb 	bl	c0ac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bbf52:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bbf56:	4641      	mov	r1, r8
   bbf58:	f005 fa41 	bl	c13de <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bbf5c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bbf60:	21ff      	movs	r1, #255	; 0xff
   bbf62:	f004 fe51 	bl	c0c08 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bbf66:	28ff      	cmp	r0, #255	; 0xff
   bbf68:	d116      	bne.n	bbf98 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bbf6a:	7823      	ldrb	r3, [r4, #0]
   bbf6c:	b983      	cbnz	r3, bbf90 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bbf6e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bbf72:	4649      	mov	r1, r9
   bbf74:	f005 fa33 	bl	c13de <digitalWrite>
    _spiPort->endTransaction();
   bbf78:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bbf7c:	f004 fd8a 	bl	c0a94 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bbf80:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bbf84:	f001 fb60 	bl	bd648 <delay>
} // end checkUbloxSpi()
   bbf88:	2001      	movs	r0, #1
   bbf8a:	b007      	add	sp, #28
   bbf8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bbf90:	28ff      	cmp	r0, #255	; 0xff
   bbf92:	d101      	bne.n	bbf98 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bbf94:	7823      	ldrb	r3, [r4, #0]
   bbf96:	b163      	cbz	r3, bbfb2 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bbf98:	4601      	mov	r1, r0
   bbf9a:	9700      	str	r7, [sp, #0]
   bbf9c:	4620      	mov	r0, r4
   bbf9e:	4633      	mov	r3, r6
   bbfa0:	462a      	mov	r2, r5
   bbfa2:	f7ff fb27 	bl	bb5f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bbfa6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bbfaa:	21ff      	movs	r1, #255	; 0xff
   bbfac:	f004 fe2c 	bl	c0c08 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bbfb0:	e7ee      	b.n	bbf90 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bbfb2:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bbfb6:	2101      	movs	r1, #1
   bbfb8:	f005 fa11 	bl	c13de <digitalWrite>
  _spiPort->endTransaction();
   bbfbc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bbfc0:	f004 fd68 	bl	c0a94 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bbfc4:	e7e0      	b.n	bbf88 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bbfc6:	bf00      	nop
   bbfc8:	000c4904 	.word	0x000c4904

000bbfcc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bbfcc:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bbfce:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bbfd2:	b91c      	cbnz	r4, bbfdc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bbfd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bbfd8:	f7ff bea8 	b.w	bbd2c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bbfdc:	2c01      	cmp	r4, #1
   bbfde:	d103      	bne.n	bbfe8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bbfe0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bbfe4:	f7ff bf6a 	b.w	bbebc <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bbfe8:	2c02      	cmp	r4, #2
   bbfea:	d103      	bne.n	bbff4 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bbfec:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bbff0:	f7ff bf80 	b.w	bbef4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bbff4:	2000      	movs	r0, #0
   bbff6:	f85d 4b04 	ldr.w	r4, [sp], #4
   bbffa:	4770      	bx	lr

000bbffc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bbffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc000:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc002:	2102      	movs	r1, #2
   bc004:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc006:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc00a:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc00e:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc012:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc014:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc018:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc01c:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc020:	4604      	mov	r4, r0
   bc022:	4617      	mov	r7, r2
   bc024:	4698      	mov	r8, r3
   bc026:	f000 ffd5 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc02a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc02e:	4606      	mov	r6, r0
   bc030:	4481      	add	r9, r0
   bc032:	f000 ffcf 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc036:	4581      	cmp	r9, r0
   bc038:	f240 80a8 	bls.w	bc18c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc03c:	4643      	mov	r3, r8
   bc03e:	463a      	mov	r2, r7
   bc040:	4629      	mov	r1, r5
   bc042:	4620      	mov	r0, r4
   bc044:	f7ff ffc2 	bl	bbfcc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc048:	2800      	cmp	r0, #0
   bc04a:	f000 809b 	beq.w	bc184 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc04e:	7beb      	ldrb	r3, [r5, #15]
   bc050:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc054:	2b01      	cmp	r3, #1
   bc056:	d125      	bne.n	bc0a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc058:	2901      	cmp	r1, #1
   bc05a:	f040 80ec 	bne.w	bc236 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc05e:	7bab      	ldrb	r3, [r5, #14]
   bc060:	2b01      	cmp	r3, #1
   bc062:	782b      	ldrb	r3, [r5, #0]
   bc064:	d13b      	bne.n	bc0de <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc066:	42bb      	cmp	r3, r7
   bc068:	d13e      	bne.n	bc0e8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc06a:	786a      	ldrb	r2, [r5, #1]
   bc06c:	4542      	cmp	r2, r8
   bc06e:	d136      	bne.n	bc0de <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc070:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc074:	b913      	cbnz	r3, bc07c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc076:	200b      	movs	r0, #11
}
   bc078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc07c:	4978      	ldr	r1, [pc, #480]	; (bc260 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc07e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc082:	f004 fb0a 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc086:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc08a:	f000 ffa3 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc08e:	220a      	movs	r2, #10
   bc090:	1b81      	subs	r1, r0, r6
   bc092:	4628      	mov	r0, r5
   bc094:	f7fb fc9b 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc098:	4972      	ldr	r1, [pc, #456]	; (bc264 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc09a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc09e:	f004 fb16 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc0a2:	e7e8      	b.n	bc076 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc0a4:	2b02      	cmp	r3, #2
   bc0a6:	d137      	bne.n	bc118 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc0a8:	2901      	cmp	r1, #1
   bc0aa:	f040 80aa 	bne.w	bc202 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc0ae:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0b2:	b193      	cbz	r3, bc0da <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc0b4:	496c      	ldr	r1, [pc, #432]	; (bc268 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc0b6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0ba:	f004 faee 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc0be:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc0c2:	f000 ff87 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc0c6:	220a      	movs	r2, #10
   bc0c8:	1b81      	subs	r1, r0, r6
   bc0ca:	4628      	mov	r0, r5
   bc0cc:	f7fb fc7f 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc0d0:	4964      	ldr	r1, [pc, #400]	; (bc264 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc0d2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0d6:	f004 fafa 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc0da:	200a      	movs	r0, #10
   bc0dc:	e7cc      	b.n	bc078 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc0de:	42bb      	cmp	r3, r7
   bc0e0:	d102      	bne.n	bc0e8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc0e2:	786b      	ldrb	r3, [r5, #1]
   bc0e4:	4543      	cmp	r3, r8
   bc0e6:	d019      	beq.n	bc11c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc0e8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0ec:	b193      	cbz	r3, bc114 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc0ee:	495f      	ldr	r1, [pc, #380]	; (bc26c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc0f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0f4:	f004 fad1 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc0f8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc0fc:	f000 ff6a 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc100:	220a      	movs	r2, #10
   bc102:	1b81      	subs	r1, r0, r6
   bc104:	4628      	mov	r0, r5
   bc106:	f7fb fc62 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc10a:	4956      	ldr	r1, [pc, #344]	; (bc264 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc10c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc110:	f004 fadd 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc114:	200d      	movs	r0, #13
   bc116:	e7af      	b.n	bc078 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc118:	2901      	cmp	r1, #1
   bc11a:	d172      	bne.n	bc202 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc11c:	89eb      	ldrh	r3, [r5, #14]
   bc11e:	bb8b      	cbnz	r3, bc184 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc120:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc124:	b193      	cbz	r3, bc14c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc126:	4952      	ldr	r1, [pc, #328]	; (bc270 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc128:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc12c:	f004 fab5 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc130:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc134:	f000 ff4e 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc138:	220a      	movs	r2, #10
   bc13a:	1b81      	subs	r1, r0, r6
   bc13c:	4628      	mov	r0, r5
   bc13e:	f7fb fc46 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc142:	4948      	ldr	r1, [pc, #288]	; (bc264 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc144:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc148:	f004 fac1 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc14c:	2002      	movs	r0, #2
   bc14e:	e793      	b.n	bc078 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc150:	430b      	orrs	r3, r1
   bc152:	d117      	bne.n	bc184 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc154:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc158:	b193      	cbz	r3, bc180 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc15a:	4946      	ldr	r1, [pc, #280]	; (bc274 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc15c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc160:	f004 fa9b 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc164:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc168:	f000 ff34 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc16c:	220a      	movs	r2, #10
   bc16e:	1b81      	subs	r1, r0, r6
   bc170:	4628      	mov	r0, r5
   bc172:	f7fb fc2c 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc176:	493b      	ldr	r1, [pc, #236]	; (bc264 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc178:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc17c:	f004 faa7 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc180:	2001      	movs	r0, #1
   bc182:	e779      	b.n	bc078 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc184:	2001      	movs	r0, #1
   bc186:	f001 fa5f 	bl	bd648 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc18a:	e752      	b.n	bc032 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc18c:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc18e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc192:	2a01      	cmp	r2, #1
   bc194:	d11f      	bne.n	bc1d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc196:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc19a:	2a02      	cmp	r2, #2
   bc19c:	d11b      	bne.n	bc1d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc19e:	7baa      	ldrb	r2, [r5, #14]
   bc1a0:	2a01      	cmp	r2, #1
   bc1a2:	d118      	bne.n	bc1d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc1a4:	782a      	ldrb	r2, [r5, #0]
   bc1a6:	42ba      	cmp	r2, r7
   bc1a8:	d115      	bne.n	bc1d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc1aa:	786a      	ldrb	r2, [r5, #1]
   bc1ac:	4542      	cmp	r2, r8
   bc1ae:	d112      	bne.n	bc1d6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc1b0:	2b00      	cmp	r3, #0
   bc1b2:	f43f af60 	beq.w	bc076 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc1b6:	4930      	ldr	r1, [pc, #192]	; (bc278 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc1b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1bc:	f004 fa6d 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc1c0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc1c4:	f000 ff06 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc1c8:	220a      	movs	r2, #10
   bc1ca:	1b81      	subs	r1, r0, r6
   bc1cc:	4628      	mov	r0, r5
   bc1ce:	f7fb fbfe 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc1d2:	492a      	ldr	r1, [pc, #168]	; (bc27c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc1d4:	e761      	b.n	bc09a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc1d6:	b193      	cbz	r3, bc1fe <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc1d8:	4929      	ldr	r1, [pc, #164]	; (bc280 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc1da:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1de:	f004 fa5c 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc1e2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc1e6:	f000 fef5 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc1ea:	220a      	movs	r2, #10
   bc1ec:	1b81      	subs	r1, r0, r6
   bc1ee:	4628      	mov	r0, r5
   bc1f0:	f7fb fbed 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc1f4:	4923      	ldr	r1, [pc, #140]	; (bc284 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc1f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1fa:	f004 fa68 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc1fe:	2003      	movs	r0, #3
   bc200:	e73a      	b.n	bc078 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc202:	2903      	cmp	r1, #3
   bc204:	d1a4      	bne.n	bc150 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc206:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc20a:	b193      	cbz	r3, bc232 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc20c:	491e      	ldr	r1, [pc, #120]	; (bc288 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc20e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc212:	f004 fa42 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc216:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc21a:	f000 fedb 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc21e:	220a      	movs	r2, #10
   bc220:	1b81      	subs	r1, r0, r6
   bc222:	4628      	mov	r0, r5
   bc224:	f7fb fbd3 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc228:	490e      	ldr	r1, [pc, #56]	; (bc264 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc22a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc22e:	f004 fa4e 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc232:	2004      	movs	r0, #4
   bc234:	e720      	b.n	bc078 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc236:	2903      	cmp	r1, #3
   bc238:	d0e5      	beq.n	bc206 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc23a:	2900      	cmp	r1, #0
   bc23c:	d1a2      	bne.n	bc184 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc23e:	7bab      	ldrb	r3, [r5, #14]
   bc240:	2b01      	cmp	r3, #1
   bc242:	d19f      	bne.n	bc184 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc244:	782b      	ldrb	r3, [r5, #0]
   bc246:	42bb      	cmp	r3, r7
   bc248:	d19c      	bne.n	bc184 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc24a:	786b      	ldrb	r3, [r5, #1]
   bc24c:	4543      	cmp	r3, r8
   bc24e:	d199      	bne.n	bc184 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc250:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc254:	2b00      	cmp	r3, #0
   bc256:	f43f af0e 	beq.w	bc076 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bc25a:	490c      	ldr	r1, [pc, #48]	; (bc28c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bc25c:	e70f      	b.n	bc07e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bc25e:	bf00      	nop
   bc260:	000c52bc 	.word	0x000c52bc
   bc264:	000c52f9 	.word	0x000c52f9
   bc268:	000c52ff 	.word	0x000c52ff
   bc26c:	000c5330 	.word	0x000c5330
   bc270:	000c5362 	.word	0x000c5362
   bc274:	000c5402 	.word	0x000c5402
   bc278:	000c5443 	.word	0x000c5443
   bc27c:	000c5476 	.word	0x000c5476
   bc280:	000c547e 	.word	0x000c547e
   bc284:	000c54a1 	.word	0x000c54a1
   bc288:	000c5388 	.word	0x000c5388
   bc28c:	000c53c3 	.word	0x000c53c3

000bc290 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bc290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc294:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc296:	2102      	movs	r1, #2
   bc298:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc29a:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc29e:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2a2:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc2a6:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2a8:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2ac:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2b0:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc2b4:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bc2b8:	4604      	mov	r4, r0
   bc2ba:	4617      	mov	r7, r2
   bc2bc:	4698      	mov	r8, r3
   bc2be:	f000 fe89 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc2c2:	f240 1a01 	movw	sl, #257	; 0x101
   bc2c6:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc2c8:	f240 2b01 	movw	fp, #513	; 0x201
   bc2cc:	f000 fe82 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bc2d0:	1b80      	subs	r0, r0, r6
   bc2d2:	4548      	cmp	r0, r9
   bc2d4:	d269      	bcs.n	bc3aa <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc2d6:	4643      	mov	r3, r8
   bc2d8:	463a      	mov	r2, r7
   bc2da:	4629      	mov	r1, r5
   bc2dc:	4620      	mov	r0, r4
   bc2de:	f7ff fe75 	bl	bbfcc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc2e2:	2800      	cmp	r0, #0
   bc2e4:	d05d      	beq.n	bc3a2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc2e6:	89ea      	ldrh	r2, [r5, #14]
   bc2e8:	4552      	cmp	r2, sl
   bc2ea:	d11e      	bne.n	bc32a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc2ec:	782b      	ldrb	r3, [r5, #0]
   bc2ee:	42bb      	cmp	r3, r7
   bc2f0:	d11b      	bne.n	bc32a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc2f2:	786b      	ldrb	r3, [r5, #1]
   bc2f4:	4543      	cmp	r3, r8
   bc2f6:	d118      	bne.n	bc32a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bc2f8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc2fc:	b193      	cbz	r3, bc324 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bc2fe:	4937      	ldr	r1, [pc, #220]	; (bc3dc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bc300:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc304:	f004 f9c9 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc308:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc30c:	f000 fe62 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc310:	220a      	movs	r2, #10
   bc312:	1b81      	subs	r1, r0, r6
   bc314:	4628      	mov	r0, r5
   bc316:	f7fb fb5a 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc31a:	4931      	ldr	r1, [pc, #196]	; (bc3e0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc31c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc320:	f004 f9d5 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bc324:	200b      	movs	r0, #11
}
   bc326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc32a:	7beb      	ldrb	r3, [r5, #15]
   bc32c:	2b01      	cmp	r3, #1
   bc32e:	d11d      	bne.n	bc36c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bc330:	782b      	ldrb	r3, [r5, #0]
   bc332:	42bb      	cmp	r3, r7
   bc334:	d102      	bne.n	bc33c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bc336:	786b      	ldrb	r3, [r5, #1]
   bc338:	4543      	cmp	r3, r8
   bc33a:	d032      	beq.n	bc3a2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc33c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc340:	b193      	cbz	r3, bc368 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bc342:	4928      	ldr	r1, [pc, #160]	; (bc3e4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bc344:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc348:	f004 f9a7 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc34c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc350:	f000 fe40 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc354:	220a      	movs	r2, #10
   bc356:	1b81      	subs	r1, r0, r6
   bc358:	4628      	mov	r0, r5
   bc35a:	f7fb fb38 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc35e:	4920      	ldr	r1, [pc, #128]	; (bc3e0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc360:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc364:	f004 f9b3 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc368:	200d      	movs	r0, #13
   bc36a:	e7dc      	b.n	bc326 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc36c:	455a      	cmp	r2, fp
   bc36e:	d018      	beq.n	bc3a2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bc370:	b9bb      	cbnz	r3, bc3a2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc372:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc376:	b193      	cbz	r3, bc39e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bc378:	491b      	ldr	r1, [pc, #108]	; (bc3e8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bc37a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc37e:	f004 f98c 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc382:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc386:	f000 fe25 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc38a:	220a      	movs	r2, #10
   bc38c:	1b81      	subs	r1, r0, r6
   bc38e:	4628      	mov	r0, r5
   bc390:	f7fb fb1d 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc394:	4912      	ldr	r1, [pc, #72]	; (bc3e0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc396:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc39a:	f004 f998 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bc39e:	2002      	movs	r0, #2
   bc3a0:	e7c1      	b.n	bc326 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc3a2:	2001      	movs	r0, #1
   bc3a4:	f001 f950 	bl	bd648 <delay>
  while (millis() - startTime < maxTime)
   bc3a8:	e790      	b.n	bc2cc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bc3aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3ae:	b193      	cbz	r3, bc3d6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bc3b0:	490e      	ldr	r1, [pc, #56]	; (bc3ec <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bc3b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3b6:	f004 f970 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc3ba:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3be:	f000 fe09 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
   bc3c2:	220a      	movs	r2, #10
   bc3c4:	1b81      	subs	r1, r0, r6
   bc3c6:	4628      	mov	r0, r5
   bc3c8:	f7fb fb01 	bl	b79ce <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bc3cc:	4908      	ldr	r1, [pc, #32]	; (bc3f0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bc3ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3d2:	f004 f97c 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc3d6:	2003      	movs	r0, #3
   bc3d8:	e7a5      	b.n	bc326 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bc3da:	bf00      	nop
   bc3dc:	000c54a8 	.word	0x000c54a8
   bc3e0:	000c52f9 	.word	0x000c52f9
   bc3e4:	000c54e2 	.word	0x000c54e2
   bc3e8:	000c5516 	.word	0x000c5516
   bc3ec:	000c554f 	.word	0x000c554f
   bc3f0:	000c5574 	.word	0x000c5574

000bc3f4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bc3f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc3f8:	4604      	mov	r4, r0
   bc3fa:	4698      	mov	r8, r3
   bc3fc:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bc3fe:	f7fc fcc9 	bl	b8d94 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bc402:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bc406:	460d      	mov	r5, r1
  if (_printDebug == true)
   bc408:	b14b      	cbz	r3, bc41e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bc40a:	492a      	ldr	r1, [pc, #168]	; (bc4b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bc40c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc410:	f004 f943 	bl	c069a <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bc414:	2201      	movs	r2, #1
   bc416:	4629      	mov	r1, r5
   bc418:	4620      	mov	r0, r4
   bc41a:	f7fc fee9 	bl	b91f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bc41e:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bc422:	b993      	cbnz	r3, bc44a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bc424:	463a      	mov	r2, r7
   bc426:	4629      	mov	r1, r5
   bc428:	4620      	mov	r0, r4
   bc42a:	f7fc fce1 	bl	b8df0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bc42e:	4606      	mov	r6, r0
   bc430:	b188      	cbz	r0, bc456 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc432:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc436:	b123      	cbz	r3, bc442 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bc438:	491f      	ldr	r1, [pc, #124]	; (bc4b8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bc43a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc43e:	f004 f946 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bc442:	4630      	mov	r0, r6
   bc444:	b002      	add	sp, #8
   bc446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc44a:	2b01      	cmp	r3, #1
   bc44c:	d11b      	bne.n	bc486 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bc44e:	4629      	mov	r1, r5
   bc450:	4620      	mov	r0, r4
   bc452:	f7fc fd8f 	bl	b8f74 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bc456:	b35f      	cbz	r7, bc4b0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc458:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bc45a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc45e:	2a06      	cmp	r2, #6
   bc460:	d002      	beq.n	bc468 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bc462:	f1b8 0f00 	cmp.w	r8, #0
   bc466:	d015      	beq.n	bc494 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bc468:	b123      	cbz	r3, bc474 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bc46a:	4914      	ldr	r1, [pc, #80]	; (bc4bc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bc46c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc470:	f004 f92d 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc474:	786b      	ldrb	r3, [r5, #1]
   bc476:	782a      	ldrb	r2, [r5, #0]
   bc478:	9700      	str	r7, [sp, #0]
   bc47a:	4629      	mov	r1, r5
   bc47c:	4620      	mov	r0, r4
   bc47e:	f7ff fdbd 	bl	bbffc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc482:	4606      	mov	r6, r0
   bc484:	e7dd      	b.n	bc442 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bc486:	2b02      	cmp	r3, #2
   bc488:	d1e5      	bne.n	bc456 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bc48a:	4629      	mov	r1, r5
   bc48c:	4620      	mov	r0, r4
   bc48e:	f7fc fdcb 	bl	b9028 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bc492:	e7e0      	b.n	bc456 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc494:	b123      	cbz	r3, bc4a0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bc496:	490a      	ldr	r1, [pc, #40]	; (bc4c0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bc498:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc49c:	f004 f917 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc4a0:	786b      	ldrb	r3, [r5, #1]
   bc4a2:	782a      	ldrb	r2, [r5, #0]
   bc4a4:	9700      	str	r7, [sp, #0]
   bc4a6:	4629      	mov	r1, r5
   bc4a8:	4620      	mov	r0, r4
   bc4aa:	f7ff fef1 	bl	bc290 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bc4ae:	e7e8      	b.n	bc482 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bc4b0:	463e      	mov	r6, r7
   bc4b2:	e7c6      	b.n	bc442 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bc4b4:	000c558f 	.word	0x000c558f
   bc4b8:	000c559a 	.word	0x000c559a
   bc4bc:	000c55b2 	.word	0x000c55b2
   bc4c0:	000c55d8 	.word	0x000c55d8

000bc4c4 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bc4c4:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bc4c6:	4b09      	ldr	r3, [pc, #36]	; (bc4ec <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bc4c8:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc4cc:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc4d0:	2300      	movs	r3, #0
   bc4d2:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bc4d6:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bc4d8:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bc4dc:	f7ff ff8a 	bl	bc3f4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bc4e0:	f1a0 030b 	sub.w	r3, r0, #11
   bc4e4:	4258      	negs	r0, r3
   bc4e6:	4158      	adcs	r0, r3
   bc4e8:	bd38      	pop	{r3, r4, r5, pc}
   bc4ea:	bf00      	nop
   bc4ec:	00010006 	.word	0x00010006

000bc4f0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bc4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc4f2:	4615      	mov	r5, r2
   bc4f4:	461a      	mov	r2, r3
   bc4f6:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc4f8:	9301      	str	r3, [sp, #4]
   bc4fa:	f7ff ffe3 	bl	bc4c4 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc4fe:	b190      	cbz	r0, bc526 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc500:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc504:	4b09      	ldr	r3, [pc, #36]	; (bc52c <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bc506:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc50a:	2300      	movs	r3, #0
   bc50c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc510:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc512:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc514:	4620      	mov	r0, r4
   bc516:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc51a:	f7ff ff6b 	bl	bc3f4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc51e:	f1a0 030a 	sub.w	r3, r0, #10
   bc522:	4258      	negs	r0, r3
   bc524:	4158      	adcs	r0, r3
}
   bc526:	b003      	add	sp, #12
   bc528:	bd30      	pop	{r4, r5, pc}
   bc52a:	bf00      	nop
   bc52c:	00140006 	.word	0x00140006

000bc530 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bc530:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc532:	4615      	mov	r5, r2
   bc534:	461a      	mov	r2, r3
   bc536:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc538:	9301      	str	r3, [sp, #4]
   bc53a:	f7ff ffc3 	bl	bc4c4 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc53e:	b190      	cbz	r0, bc566 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc540:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc544:	4b09      	ldr	r3, [pc, #36]	; (bc56c <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bc546:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc54a:	2300      	movs	r3, #0
   bc54c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc550:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc552:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc554:	4620      	mov	r0, r4
   bc556:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc55a:	f7ff ff4b 	bl	bc3f4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc55e:	f1a0 030a 	sub.w	r3, r0, #10
   bc562:	4258      	negs	r0, r3
   bc564:	4158      	adcs	r0, r3
}
   bc566:	b003      	add	sp, #12
   bc568:	bd30      	pop	{r4, r5, pc}
   bc56a:	bf00      	nop
   bc56c:	00140006 	.word	0x00140006

000bc570 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bc570:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bc572:	460a      	mov	r2, r1
   bc574:	2100      	movs	r1, #0
   bc576:	f7ff bfbb 	b.w	bc4f0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bc57c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bc57c:	b510      	push	{r4, lr}
   bc57e:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bc580:	2074      	movs	r0, #116	; 0x74
   bc582:	f7f7 fd88 	bl	b4096 <_Znwj>
   bc586:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bc588:	b960      	cbnz	r0, bc5a4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc58a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc58e:	b913      	cbnz	r3, bc596 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bc590:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc594:	b128      	cbz	r0, bc5a2 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bc596:	4908      	ldr	r1, [pc, #32]	; (bc5b8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bc598:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc59c:	f004 f897 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc5a0:	2000      	movs	r0, #0
}
   bc5a2:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc5a4:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bc5a6:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bc5aa:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bc5ae:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bc5b0:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bc5b2:	2001      	movs	r0, #1
   bc5b4:	e7f5      	b.n	bc5a2 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bc5b6:	bf00      	nop
   bc5b8:	000c5601 	.word	0x000c5601

000bc5bc <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bc5bc:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc5be:	6a03      	ldr	r3, [r0, #32]
{
   bc5c0:	4604      	mov	r4, r0
   bc5c2:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bc5c4:	b91b      	cbnz	r3, bc5ce <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bc5c6:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc5c8:	f7ff ffd8 	bl	bc57c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc5cc:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc5ce:	6a20      	ldr	r0, [r4, #32]
   bc5d0:	b180      	cbz	r0, bc5f4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc5d2:	7803      	ldrb	r3, [r0, #0]
   bc5d4:	f003 0303 	and.w	r3, r3, #3
   bc5d8:	2b03      	cmp	r3, #3
   bc5da:	d10d      	bne.n	bc5f8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bc5dc:	2307      	movs	r3, #7
   bc5de:	2201      	movs	r2, #1
   bc5e0:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc5e4:	4620      	mov	r0, r4
   bc5e6:	f7ff fcf1 	bl	bbfcc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bc5ea:	6a23      	ldr	r3, [r4, #32]
   bc5ec:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bc5f0:	f000 0001 	and.w	r0, r0, #1
}
   bc5f4:	b002      	add	sp, #8
   bc5f6:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bc5f8:	2b01      	cmp	r3, #1
   bc5fa:	f04f 0300 	mov.w	r3, #0
   bc5fe:	d011      	beq.n	bc624 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bc600:	f240 7101 	movw	r1, #1793	; 0x701
   bc604:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bc608:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bc60c:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc610:	4620      	mov	r0, r4
   bc612:	f7ff feef 	bl	bc3f4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc616:	280b      	cmp	r0, #11
   bc618:	d006      	beq.n	bc628 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc61a:	f1a0 030d 	sub.w	r3, r0, #13
   bc61e:	4258      	negs	r0, r3
   bc620:	4158      	adcs	r0, r3
   bc622:	e7e7      	b.n	bc5f4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bc624:	4618      	mov	r0, r3
   bc626:	e7e5      	b.n	bc5f4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bc628:	2001      	movs	r0, #1
   bc62a:	e7e3      	b.n	bc5f4 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bc62c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bc62c:	b510      	push	{r4, lr}
   bc62e:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bc630:	2018      	movs	r0, #24
   bc632:	f7f7 fd30 	bl	b4096 <_Znwj>
   bc636:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bc638:	b960      	cbnz	r0, bc654 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc63a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc63e:	b913      	cbnz	r3, bc646 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bc640:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc644:	b128      	cbz	r0, bc652 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bc646:	4905      	ldr	r1, [pc, #20]	; (bc65c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bc648:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc64c:	f004 f83f 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc650:	2000      	movs	r0, #0
}
   bc652:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bc654:	2300      	movs	r3, #0
   bc656:	7503      	strb	r3, [r0, #20]
  return (true);
   bc658:	2001      	movs	r0, #1
   bc65a:	e7fa      	b.n	bc652 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bc65c:	000c5628 	.word	0x000c5628

000bc660 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bc660:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bc662:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bc664:	4605      	mov	r5, r0
   bc666:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bc668:	b18b      	cbz	r3, bc68e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bc66a:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc66e:	4b13      	ldr	r3, [pc, #76]	; (bc6bc <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bc670:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc674:	2300      	movs	r3, #0
   bc676:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc67a:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bc67c:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc67e:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bc682:	f7ff feb7 	bl	bc3f4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc686:	280b      	cmp	r0, #11
   bc688:	d10b      	bne.n	bc6a2 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bc68a:	2401      	movs	r4, #1
   bc68c:	e00d      	b.n	bc6aa <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bc68e:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bc690:	f7ff ffcc 	bl	bc62c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bc694:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bc696:	9a01      	ldr	r2, [sp, #4]
   bc698:	2c00      	cmp	r4, #0
   bc69a:	d1e6      	bne.n	bc66a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bc69c:	4620      	mov	r0, r4
   bc69e:	b002      	add	sp, #8
   bc6a0:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc6a2:	f1a0 030d 	sub.w	r3, r0, #13
   bc6a6:	425c      	negs	r4, r3
   bc6a8:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bc6aa:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bc6ac:	b110      	cbz	r0, bc6b4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bc6ae:	2118      	movs	r1, #24
   bc6b0:	f7f7 fcf7 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bc6b4:	2300      	movs	r3, #0
   bc6b6:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bc6b8:	e7f0      	b.n	bc69c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bc6ba:	bf00      	nop
   bc6bc:	00010006 	.word	0x00010006

000bc6c0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bc6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bc6c2:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bc6c6:	4604      	mov	r4, r0
   bc6c8:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bc6ca:	b145      	cbz	r5, bc6de <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bc6cc:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bc6d0:	b9b1      	cbnz	r1, bc700 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc6d2:	4620      	mov	r0, r4
}
   bc6d4:	b003      	add	sp, #12
   bc6d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc6da:	f7ff bfc1 	b.w	bc660 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bc6de:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bc6e0:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bc6e4:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bc6e8:	f002 fd0a 	bl	bf100 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bc6ec:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc6f0:	f002 fd11 	bl	bf116 <_ZN7TwoWire15endTransmissionEv>
   bc6f4:	9a01      	ldr	r2, [sp, #4]
   bc6f6:	2800      	cmp	r0, #0
   bc6f8:	d0e8      	beq.n	bc6cc <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bc6fa:	4628      	mov	r0, r5
   bc6fc:	b003      	add	sp, #12
   bc6fe:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc700:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc702:	bf18      	it	ne
   bc704:	2104      	movne	r1, #4
   bc706:	e7e4      	b.n	bc6d2 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bc708 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bc708:	b570      	push	{r4, r5, r6, lr}
   bc70a:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bc70c:	2300      	movs	r3, #0
   bc70e:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bc712:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bc716:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bc71a:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bc71e:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bc722:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bc724:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bc728:	b91b      	cbnz	r3, bc732 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bc72a:	f44f 7180 	mov.w	r1, #256	; 0x100
   bc72e:	f7fb f9ed 	bl	b7b0c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bc732:	4620      	mov	r0, r4
   bc734:	f7fc fe04 	bl	b9340 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bc738:	4631      	mov	r1, r6
   bc73a:	4620      	mov	r0, r4
   bc73c:	f7ff ffc0 	bl	bc6c0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc740:	b110      	cbz	r0, bc748 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bc742:	2501      	movs	r5, #1
}
   bc744:	4628      	mov	r0, r5
   bc746:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc748:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc74c:	b913      	cbnz	r3, bc754 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bc74e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc752:	b123      	cbz	r3, bc75e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bc754:	4917      	ldr	r1, [pc, #92]	; (bc7b4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bc756:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc75a:	f003 ffb8 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc75e:	4631      	mov	r1, r6
   bc760:	4620      	mov	r0, r4
   bc762:	f7ff ffad 	bl	bc6c0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc766:	2800      	cmp	r0, #0
   bc768:	d1eb      	bne.n	bc742 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc76a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc76e:	b913      	cbnz	r3, bc776 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bc770:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc774:	b123      	cbz	r3, bc780 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bc776:	4910      	ldr	r1, [pc, #64]	; (bc7b8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bc778:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc77c:	f003 ffa7 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc780:	4631      	mov	r1, r6
   bc782:	4620      	mov	r0, r4
   bc784:	f7ff ff9c 	bl	bc6c0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bc788:	2800      	cmp	r0, #0
   bc78a:	d1da      	bne.n	bc742 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bc78c:	2d00      	cmp	r5, #0
   bc78e:	d0d9      	beq.n	bc744 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc790:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bc794:	2d00      	cmp	r5, #0
   bc796:	d0d5      	beq.n	bc744 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc798:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc79c:	b91b      	cbnz	r3, bc7a6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bc79e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc7a2:	2b00      	cmp	r3, #0
   bc7a4:	d0cd      	beq.n	bc742 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bc7a6:	4905      	ldr	r1, [pc, #20]	; (bc7bc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bc7a8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7ac:	f003 ff8f 	bl	c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc7b0:	e7c8      	b.n	bc744 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc7b2:	bf00      	nop
   bc7b4:	000c564f 	.word	0x000c564f
   bc7b8:	000c5673 	.word	0x000c5673
   bc7bc:	000c5696 	.word	0x000c5696

000bc7c0 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bc7c0:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc7c2:	6a03      	ldr	r3, [r0, #32]
{
   bc7c4:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bc7c6:	b91b      	cbnz	r3, bc7d0 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bc7c8:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc7ca:	f7ff fed7 	bl	bc57c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc7ce:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc7d0:	6a20      	ldr	r0, [r4, #32]
   bc7d2:	b1b0      	cbz	r0, bc802 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bc7d4:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bc7d8:	07db      	lsls	r3, r3, #31
   bc7da:	d402      	bmi.n	bc7e2 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bc7dc:	4620      	mov	r0, r4
   bc7de:	f7ff feed 	bl	bc5bc <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bc7e2:	6a23      	ldr	r3, [r4, #32]
   bc7e4:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bc7e8:	f36f 0200 	bfc	r2, #0, #1
   bc7ec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bc7f0:	6a23      	ldr	r3, [r4, #32]
   bc7f2:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bc7f6:	f36f 0200 	bfc	r2, #0, #1
   bc7fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bc7fe:	6a23      	ldr	r3, [r4, #32]
   bc800:	69d8      	ldr	r0, [r3, #28]
}
   bc802:	b002      	add	sp, #8
   bc804:	bd10      	pop	{r4, pc}

000bc806 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bc806:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bc808:	6a03      	ldr	r3, [r0, #32]
{
   bc80a:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bc80c:	b91b      	cbnz	r3, bc816 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bc80e:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bc810:	f7ff feb4 	bl	bc57c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bc814:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bc816:	6a20      	ldr	r0, [r4, #32]
   bc818:	b1b0      	cbz	r0, bc848 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bc81a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bc81e:	079b      	lsls	r3, r3, #30
   bc820:	d402      	bmi.n	bc828 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bc822:	4620      	mov	r0, r4
   bc824:	f7ff feca 	bl	bc5bc <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bc828:	6a23      	ldr	r3, [r4, #32]
   bc82a:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bc82e:	f36f 0241 	bfc	r2, #1, #1
   bc832:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bc836:	6a23      	ldr	r3, [r4, #32]
   bc838:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bc83c:	f36f 0200 	bfc	r2, #0, #1
   bc840:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bc844:	6a23      	ldr	r3, [r4, #32]
   bc846:	6a18      	ldr	r0, [r3, #32]
}
   bc848:	b002      	add	sp, #8
   bc84a:	bd10      	pop	{r4, pc}

000bc84c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bc84c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bc84e:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bc850:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bc854:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bc856:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bc85a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bc85c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bc860:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bc862:	2500      	movs	r5, #0
  _width = width;
   bc864:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bc868:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bc86a:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bc86e:	7303      	strb	r3, [r0, #12]
}
   bc870:	bd30      	pop	{r4, r5, pc}

000bc872 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc872:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bc874:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bc876:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc878:	b085      	sub	sp, #20
   bc87a:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bc87c:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bc87e:	f88d 400c 	strb.w	r4, [sp, #12]
   bc882:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc884:	460e      	mov	r6, r1
   bc886:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bc888:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bc88c:	b140      	cbz	r0, bc8a0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bc88e:	7b5b      	ldrb	r3, [r3, #13]
   bc890:	9301      	str	r3, [sp, #4]
   bc892:	ab03      	add	r3, sp, #12
   bc894:	9300      	str	r3, [sp, #0]
   bc896:	2301      	movs	r3, #1
   bc898:	f000 f90a 	bl	bcab0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bc89c:	b005      	add	sp, #20
   bc89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bc8a0:	6858      	ldr	r0, [r3, #4]
   bc8a2:	2800      	cmp	r0, #0
   bc8a4:	d0fa      	beq.n	bc89c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bc8a6:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bc8aa:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bc8ae:	f1be 0f03 	cmp.w	lr, #3
   bc8b2:	d10c      	bne.n	bc8ce <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bc8b4:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bc8b8:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bc8bc:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bc8be:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bc8c2:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bc8c6:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bc8c8:	f000 fa2b 	bl	bcd22 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bc8cc:	e7e6      	b.n	bc89c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bc8ce:	f1be 0f00 	cmp.w	lr, #0
   bc8d2:	d109      	bne.n	bc8e8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bc8d4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bc8d8:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bc8dc:	f8cd c000 	str.w	ip, [sp]
   bc8e0:	ab03      	add	r3, sp, #12
   bc8e2:	463a      	mov	r2, r7
   bc8e4:	4631      	mov	r1, r6
   bc8e6:	e7ef      	b.n	bc8c8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bc8e8:	f1be 0f02 	cmp.w	lr, #2
   bc8ec:	d102      	bne.n	bc8f4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bc8ee:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bc8f2:	e7f1      	b.n	bc8d8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bc8f4:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bc8f8:	bf01      	itttt	eq
   bc8fa:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bc8fe:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bc902:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bc906:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bc90a:	e7e7      	b.n	bc8dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bc90c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bc90c:	b4f0      	push	{r4, r5, r6, r7}
   bc90e:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bc910:	b902      	cbnz	r2, bc914 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bc912:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bc914:	2a04      	cmp	r2, #4
   bc916:	d814      	bhi.n	bc942 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bc918:	f100 050f 	add.w	r5, r0, #15
   bc91c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bc91e:	1884      	adds	r4, r0, r2
   bc920:	4629      	mov	r1, r5
   bc922:	4284      	cmp	r4, r0
   bc924:	d009      	beq.n	bc93a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bc926:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bc928:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bc92a:	b927      	cbnz	r7, bc936 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bc92c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bc92e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bc930:	3501      	adds	r5, #1
   bc932:	3c01      	subs	r4, #1
   bc934:	e7f5      	b.n	bc922 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bc936:	73a6      	strb	r6, [r4, #14]
   bc938:	e7f9      	b.n	bc92e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bc93a:	4620      	mov	r0, r4
}
   bc93c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bc93e:	f7ff bf98 	b.w	bc872 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bc942:	2000      	movs	r0, #0
   bc944:	bcf0      	pop	{r4, r5, r6, r7}
   bc946:	4770      	bx	lr

000bc948 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bc948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bc94a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bc94c:	7a85      	ldrb	r5, [r0, #10]
   bc94e:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bc952:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bc954:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bc956:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bc958:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bc95a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bc95e:	b140      	cbz	r0, bc972 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bc960:	2100      	movs	r1, #0
   bc962:	e9cd 2100 	strd	r2, r1, [sp]
   bc966:	a903      	add	r1, sp, #12
   bc968:	7b62      	ldrb	r2, [r4, #13]
   bc96a:	f000 f90f 	bl	bcb8c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bc96e:	b004      	add	sp, #16
   bc970:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bc972:	6860      	ldr	r0, [r4, #4]
   bc974:	2800      	cmp	r0, #0
   bc976:	d0fa      	beq.n	bc96e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bc978:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bc97a:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bc97c:	2903      	cmp	r1, #3
   bc97e:	d10d      	bne.n	bc99c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bc980:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bc984:	21ff      	movs	r1, #255	; 0xff
   bc986:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bc98a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bc98e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bc992:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bc994:	a903      	add	r1, sp, #12
   bc996:	f000 f9f6 	bl	bcd86 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bc99a:	e7e8      	b.n	bc96e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bc99c:	b941      	cbnz	r1, bc9b0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bc99e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bc9a2:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bc9a6:	21ff      	movs	r1, #255	; 0xff
   bc9a8:	e9cd 2100 	strd	r2, r1, [sp]
   bc9ac:	4622      	mov	r2, r4
   bc9ae:	e7f1      	b.n	bc994 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bc9b0:	2902      	cmp	r1, #2
   bc9b2:	d102      	bne.n	bc9ba <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bc9b4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bc9b8:	e7f3      	b.n	bc9a2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bc9ba:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bc9bc:	bf02      	ittt	eq
   bc9be:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bc9c2:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bc9c6:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bc9ca:	e7ec      	b.n	bc9a6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bc9cc <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bc9cc:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bc9ce:	f100 050f 	add.w	r5, r0, #15
   bc9d2:	7b02      	ldrb	r2, [r0, #12]
   bc9d4:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bc9d6:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bc9d8:	f7ff ffb6 	bl	bc948 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bc9dc:	b178      	cbz	r0, bc9fe <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bc9de:	7b22      	ldrb	r2, [r4, #12]
   bc9e0:	4629      	mov	r1, r5
   bc9e2:	4422      	add	r2, r4
  uint32_t value = 0;
   bc9e4:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bc9e6:	42a2      	cmp	r2, r4
   bc9e8:	d00b      	beq.n	bca02 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bc9ea:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bc9ec:	7ba0      	ldrb	r0, [r4, #14]
   bc9ee:	b920      	cbnz	r0, bc9fa <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bc9f0:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bc9f2:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bc9f4:	3a01      	subs	r2, #1
   bc9f6:	3101      	adds	r1, #1
   bc9f8:	e7f5      	b.n	bc9e6 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bc9fa:	7808      	ldrb	r0, [r1, #0]
   bc9fc:	e7f9      	b.n	bc9f2 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bc9fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bca02:	bd38      	pop	{r3, r4, r5, pc}

000bca04 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bca04:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bca06:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bca08:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bca0a:	7143      	strb	r3, [r0, #5]
}
   bca0c:	bd10      	pop	{r4, pc}

000bca0e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bca0e:	b510      	push	{r4, lr}
   bca10:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bca12:	6800      	ldr	r0, [r0, #0]
   bca14:	f7ff ffda 	bl	bc9cc <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bca18:	7922      	ldrb	r2, [r4, #4]
   bca1a:	2301      	movs	r3, #1
   bca1c:	4093      	lsls	r3, r2
  val >>= _shift;
   bca1e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bca20:	3b01      	subs	r3, #1
  val >>= _shift;
   bca22:	40d0      	lsrs	r0, r2
}
   bca24:	4018      	ands	r0, r3
   bca26:	bd10      	pop	{r4, pc}

000bca28 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bca28:	b570      	push	{r4, r5, r6, lr}
   bca2a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bca2c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bca2e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bca30:	f7ff ffcc 	bl	bc9cc <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bca34:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bca36:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bca38:	2201      	movs	r2, #1
   bca3a:	409a      	lsls	r2, r3
   bca3c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bca3e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bca42:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bca46:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bca48:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bca4a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bca4e:	4329      	orrs	r1, r5
   bca50:	7b02      	ldrb	r2, [r0, #12]
}
   bca52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bca56:	f7ff bf59 	b.w	bc90c <_ZN23Adafruit_BusIO_Register5writeEmh>

000bca5a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bca5a:	6042      	str	r2, [r0, #4]
  _begun = false;
   bca5c:	2200      	movs	r2, #0
   bca5e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bca60:	2220      	movs	r2, #32
  _addr = addr;
   bca62:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bca64:	60c2      	str	r2, [r0, #12]
#endif
}
   bca66:	4770      	bx	lr

000bca68 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bca68:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bca6a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bca6c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bca6e:	b153      	cbz	r3, bca86 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bca70:	7821      	ldrb	r1, [r4, #0]
   bca72:	6860      	ldr	r0, [r4, #4]
   bca74:	f002 fb44 	bl	bf100 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bca78:	6860      	ldr	r0, [r4, #4]
   bca7a:	f002 fb4c 	bl	bf116 <_ZN7TwoWire15endTransmissionEv>
   bca7e:	fab0 f080 	clz	r0, r0
   bca82:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bca84:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bca86:	2101      	movs	r1, #1
   bca88:	f000 f803 	bl	bca92 <_ZN18Adafruit_I2CDevice5beginEb>
   bca8c:	2800      	cmp	r0, #0
   bca8e:	d1ef      	bne.n	bca70 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bca90:	e7f8      	b.n	bca84 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bca92 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bca92:	b538      	push	{r3, r4, r5, lr}
   bca94:	4604      	mov	r4, r0
  _wire->begin();
   bca96:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bca98:	460d      	mov	r5, r1
  _wire->begin();
   bca9a:	f002 faff 	bl	bf09c <_ZN7TwoWire5beginEv>
  _begun = true;
   bca9e:	2001      	movs	r0, #1
   bcaa0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bcaa2:	b125      	cbz	r5, bcaae <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bcaa4:	4620      	mov	r0, r4
}
   bcaa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bcaaa:	f7ff bfdd 	b.w	bca68 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bcaae:	bd38      	pop	{r3, r4, r5, pc}

000bcab0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bcab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcab4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bcab8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bcaba:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bcabc:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bcabe:	4432      	add	r2, r6
   bcac0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bcac2:	4604      	mov	r4, r0
   bcac4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bcac6:	d902      	bls.n	bcace <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bcac8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bcaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bcace:	7801      	ldrb	r1, [r0, #0]
   bcad0:	6840      	ldr	r0, [r0, #4]
   bcad2:	f002 fb15 	bl	bf100 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcad6:	b97e      	cbnz	r6, bcaf8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bcad8:	6860      	ldr	r0, [r4, #4]
   bcada:	6803      	ldr	r3, [r0, #0]
   bcadc:	462a      	mov	r2, r5
   bcade:	68db      	ldr	r3, [r3, #12]
   bcae0:	4641      	mov	r1, r8
   bcae2:	4798      	blx	r3
   bcae4:	4285      	cmp	r5, r0
   bcae6:	d1ef      	bne.n	bcac8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bcae8:	6860      	ldr	r0, [r4, #4]
   bcaea:	4639      	mov	r1, r7
   bcaec:	f002 fb0f 	bl	bf10e <_ZN7TwoWire15endTransmissionEh>
   bcaf0:	fab0 f080 	clz	r0, r0
   bcaf4:	0940      	lsrs	r0, r0, #5
   bcaf6:	e7e8      	b.n	bcaca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcaf8:	f1b9 0f00 	cmp.w	r9, #0
   bcafc:	d0ec      	beq.n	bcad8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bcafe:	6860      	ldr	r0, [r4, #4]
   bcb00:	6803      	ldr	r3, [r0, #0]
   bcb02:	4632      	mov	r2, r6
   bcb04:	68db      	ldr	r3, [r3, #12]
   bcb06:	4649      	mov	r1, r9
   bcb08:	4798      	blx	r3
   bcb0a:	4286      	cmp	r6, r0
   bcb0c:	d1dc      	bne.n	bcac8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bcb0e:	e7e3      	b.n	bcad8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bcb10 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bcb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcb14:	4615      	mov	r5, r2
   bcb16:	4604      	mov	r4, r0
   bcb18:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bcb1a:	b2d2      	uxtb	r2, r2
   bcb1c:	7801      	ldrb	r1, [r0, #0]
   bcb1e:	6840      	ldr	r0, [r0, #4]
   bcb20:	f002 fad9 	bl	bf0d6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bcb24:	4285      	cmp	r5, r0
   bcb26:	d10d      	bne.n	bcb44 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bcb28:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bcb2a:	fa1f f887 	uxth.w	r8, r7
   bcb2e:	45a8      	cmp	r8, r5
   bcb30:	f107 0701 	add.w	r7, r7, #1
   bcb34:	d209      	bcs.n	bcb4a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bcb36:	6860      	ldr	r0, [r4, #4]
   bcb38:	6803      	ldr	r3, [r0, #0]
   bcb3a:	695b      	ldr	r3, [r3, #20]
   bcb3c:	4798      	blx	r3
   bcb3e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bcb42:	e7f2      	b.n	bcb2a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bcb44:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bcb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcb4a:	2001      	movs	r0, #1
   bcb4c:	e7fb      	b.n	bcb46 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bcb4e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bcb4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcb52:	4607      	mov	r7, r0
   bcb54:	4688      	mov	r8, r1
   bcb56:	4616      	mov	r6, r2
   bcb58:	4699      	mov	r9, r3
  size_t pos = 0;
   bcb5a:	2500      	movs	r5, #0
  while (pos < len) {
   bcb5c:	42b5      	cmp	r5, r6
   bcb5e:	d212      	bcs.n	bcb86 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bcb60:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bcb62:	1b74      	subs	r4, r6, r5
   bcb64:	4294      	cmp	r4, r2
   bcb66:	bf28      	it	cs
   bcb68:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bcb6a:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bcb6c:	42ab      	cmp	r3, r5
   bcb6e:	bf94      	ite	ls
   bcb70:	464b      	movls	r3, r9
   bcb72:	2300      	movhi	r3, #0
   bcb74:	4622      	mov	r2, r4
   bcb76:	eb08 0105 	add.w	r1, r8, r5
   bcb7a:	4638      	mov	r0, r7
   bcb7c:	f7ff ffc8 	bl	bcb10 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bcb80:	b110      	cbz	r0, bcb88 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bcb82:	4425      	add	r5, r4
  while (pos < len) {
   bcb84:	e7ea      	b.n	bcb5c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bcb86:	2001      	movs	r0, #1
}
   bcb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bcb8c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bcb8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bcb8e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bcb90:	2300      	movs	r3, #0
   bcb92:	e9cd 3300 	strd	r3, r3, [sp]
   bcb96:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bcb9a:	9e06      	ldr	r6, [sp, #24]
   bcb9c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bcb9e:	f7ff ff87 	bl	bcab0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bcba2:	b140      	cbz	r0, bcbb6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bcba4:	2301      	movs	r3, #1
   bcba6:	4632      	mov	r2, r6
   bcba8:	4629      	mov	r1, r5
   bcbaa:	4620      	mov	r0, r4
}
   bcbac:	b002      	add	sp, #8
   bcbae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bcbb2:	f7ff bfcc 	b.w	bcb4e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bcbb6:	b002      	add	sp, #8
   bcbb8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bcbbc <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bcbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcbc0:	4604      	mov	r4, r0
  if (_spi) {
   bcbc2:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bcbc4:	b085      	sub	sp, #20
   bcbc6:	460d      	mov	r5, r1
  if (_spi) {
   bcbc8:	b140      	cbz	r0, bcbdc <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bcbca:	2300      	movs	r3, #0
   bcbcc:	9300      	str	r3, [sp, #0]
   bcbce:	4613      	mov	r3, r2
   bcbd0:	460a      	mov	r2, r1
   bcbd2:	f004 f81f 	bl	c0c14 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bcbd6:	b005      	add	sp, #20
   bcbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bcbdc:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bcbde:	68a0      	ldr	r0, [r4, #8]
   bcbe0:	4f48      	ldr	r7, [pc, #288]	; (bcd04 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bcbe2:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bcbe6:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bcbe8:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bcbea:	bf0c      	ite	eq
   bcbec:	f04f 0b01 	moveq.w	fp, #1
   bcbf0:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bcbf4:	ea1b 0f03 	tst.w	fp, r3
   bcbf8:	eb01 0302 	add.w	r3, r1, r2
   bcbfc:	bf0c      	ite	eq
   bcbfe:	f04f 0901 	moveq.w	r9, #1
   bcc02:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bcc06:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bcc08:	9303      	str	r3, [sp, #12]
   bcc0a:	9b03      	ldr	r3, [sp, #12]
   bcc0c:	42ab      	cmp	r3, r5
   bcc0e:	d0e2      	beq.n	bcbd6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bcc10:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bcc14:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bcc16:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bcc1a:	b117      	cbz	r7, bcc22 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bcc1c:	4638      	mov	r0, r7
   bcc1e:	f000 f9c9 	bl	bcfb4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bcc22:	7b63      	ldrb	r3, [r4, #13]
   bcc24:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bcc28:	d141      	bne.n	bccae <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcc2a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bcc2e:	1c5a      	adds	r2, r3, #1
   bcc30:	d00f      	beq.n	bcc52 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bcc32:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcc36:	bf14      	ite	ne
   bcc38:	2301      	movne	r3, #1
   bcc3a:	2300      	moveq	r3, #0
   bcc3c:	454b      	cmp	r3, r9
   bcc3e:	d008      	beq.n	bcc52 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bcc40:	6963      	ldr	r3, [r4, #20]
   bcc42:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bcc44:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bcc46:	2900      	cmp	r1, #0
   bcc48:	d02c      	beq.n	bcca4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bcc4a:	4302      	orrs	r2, r0
   bcc4c:	601a      	str	r2, [r3, #0]
   bcc4e:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bcc52:	69a1      	ldr	r1, [r4, #24]
   bcc54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcc56:	680a      	ldr	r2, [r1, #0]
   bcc58:	4313      	orrs	r3, r2
   bcc5a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcc5c:	b117      	cbz	r7, bcc64 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bcc5e:	4638      	mov	r0, r7
   bcc60:	f000 f9a8 	bl	bcfb4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bcc64:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcc68:	3301      	adds	r3, #1
   bcc6a:	d006      	beq.n	bcc7a <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bcc6c:	69e3      	ldr	r3, [r4, #28]
   bcc6e:	681a      	ldr	r2, [r3, #0]
   bcc70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcc72:	421a      	tst	r2, r3
            reply |= b;
   bcc74:	bf18      	it	ne
   bcc76:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bcc7a:	69a1      	ldr	r1, [r4, #24]
   bcc7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcc7e:	680a      	ldr	r2, [r1, #0]
   bcc80:	ea22 0303 	bic.w	r3, r2, r3
   bcc84:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bcc86:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcc8a:	3301      	adds	r3, #1
        buffer[i] = reply;
   bcc8c:	bf18      	it	ne
   bcc8e:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bcc92:	7b23      	ldrb	r3, [r4, #12]
   bcc94:	2b00      	cmp	r3, #0
   bcc96:	d132      	bne.n	bccfe <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bcc98:	0076      	lsls	r6, r6, #1
   bcc9a:	b2f6      	uxtb	r6, r6
   bcc9c:	2e00      	cmp	r6, #0
   bcc9e:	d1bc      	bne.n	bcc1a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bcca0:	3501      	adds	r5, #1
   bcca2:	e7b2      	b.n	bcc0a <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bcca4:	ea22 0200 	bic.w	r2, r2, r0
   bcca8:	601a      	str	r2, [r3, #0]
   bccaa:	4689      	mov	r9, r1
   bccac:	e7d1      	b.n	bcc52 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bccae:	69a1      	ldr	r1, [r4, #24]
   bccb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bccb2:	680a      	ldr	r2, [r1, #0]
   bccb4:	4313      	orrs	r3, r2
   bccb6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bccb8:	b117      	cbz	r7, bccc0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bccba:	4638      	mov	r0, r7
   bccbc:	f000 f97a 	bl	bcfb4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bccc0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bccc4:	3301      	adds	r3, #1
   bccc6:	d008      	beq.n	bccda <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bccc8:	6963      	ldr	r3, [r4, #20]
   bccca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bcccc:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bccce:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bccd2:	bf14      	ite	ne
   bccd4:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bccd6:	438a      	biceq	r2, r1
   bccd8:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bccda:	69a1      	ldr	r1, [r4, #24]
   bccdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bccde:	680a      	ldr	r2, [r1, #0]
   bcce0:	ea22 0303 	bic.w	r3, r2, r3
   bcce4:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bcce6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bccea:	3301      	adds	r3, #1
   bccec:	d0cb      	beq.n	bcc86 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bccee:	69e3      	ldr	r3, [r4, #28]
   bccf0:	681a      	ldr	r2, [r3, #0]
   bccf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bccf4:	421a      	tst	r2, r3
            reply |= b;
   bccf6:	bf18      	it	ne
   bccf8:	ea46 0808 	orrne.w	r8, r6, r8
   bccfc:	e7c3      	b.n	bcc86 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bccfe:	0876      	lsrs	r6, r6, #1
   bcd00:	e7cc      	b.n	bcc9c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bcd02:	bf00      	nop
   bcd04:	0007a120 	.word	0x0007a120

000bcd08 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bcd08:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bcd0a:	2201      	movs	r2, #1
  uint8_t data = send;
   bcd0c:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bcd10:	f10d 0107 	add.w	r1, sp, #7
   bcd14:	f7ff ff52 	bl	bcbbc <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bcd18:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bcd1c:	b003      	add	sp, #12
   bcd1e:	f85d fb04 	ldr.w	pc, [sp], #4

000bcd22 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bcd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcd26:	4604      	mov	r4, r0
  if (_spi) {
   bcd28:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bcd2a:	460e      	mov	r6, r1
   bcd2c:	4617      	mov	r7, r2
   bcd2e:	461d      	mov	r5, r3
  if (_spi) {
   bcd30:	b110      	cbz	r0, bcd38 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bcd32:	6861      	ldr	r1, [r4, #4]
   bcd34:	f003 fec8 	bl	c0ac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bcd38:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcd3c:	2100      	movs	r1, #0
   bcd3e:	b280      	uxth	r0, r0
   bcd40:	f004 fb4d 	bl	c13de <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bcd44:	9b06      	ldr	r3, [sp, #24]
   bcd46:	eb05 0803 	add.w	r8, r5, r3
   bcd4a:	4545      	cmp	r5, r8
   bcd4c:	d108      	bne.n	bcd60 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bcd4e:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bcd50:	42b7      	cmp	r7, r6
   bcd52:	d00b      	beq.n	bcd6c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bcd54:	f816 1b01 	ldrb.w	r1, [r6], #1
   bcd58:	4620      	mov	r0, r4
   bcd5a:	f7ff ffd5 	bl	bcd08 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bcd5e:	e7f7      	b.n	bcd50 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bcd60:	f815 1b01 	ldrb.w	r1, [r5], #1
   bcd64:	4620      	mov	r0, r4
   bcd66:	f7ff ffcf 	bl	bcd08 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bcd6a:	e7ee      	b.n	bcd4a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bcd6c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcd70:	2101      	movs	r1, #1
   bcd72:	b280      	uxth	r0, r0
   bcd74:	f004 fb33 	bl	c13de <digitalWrite>

  if (_spi) {
   bcd78:	6820      	ldr	r0, [r4, #0]
   bcd7a:	b108      	cbz	r0, bcd80 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bcd7c:	f003 fe8a 	bl	c0a94 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bcd80:	2001      	movs	r0, #1
   bcd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcd86 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bcd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcd8a:	4604      	mov	r4, r0
  if (_spi) {
   bcd8c:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bcd8e:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bcd92:	460e      	mov	r6, r1
   bcd94:	4617      	mov	r7, r2
   bcd96:	461d      	mov	r5, r3
  if (_spi) {
   bcd98:	b110      	cbz	r0, bcda0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bcd9a:	6861      	ldr	r1, [r4, #4]
   bcd9c:	f003 fe94 	bl	c0ac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bcda0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcda4:	2100      	movs	r1, #0
   bcda6:	b280      	uxth	r0, r0
   bcda8:	f004 fb19 	bl	c13de <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bcdac:	4437      	add	r7, r6
   bcdae:	42be      	cmp	r6, r7
   bcdb0:	d10a      	bne.n	bcdc8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bcdb2:	9b06      	ldr	r3, [sp, #24]
   bcdb4:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bcdb6:	42ae      	cmp	r6, r5
   bcdb8:	d00c      	beq.n	bcdd4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bcdba:	4641      	mov	r1, r8
   bcdbc:	4620      	mov	r0, r4
   bcdbe:	f7ff ffa3 	bl	bcd08 <_ZN18Adafruit_SPIDevice8transferEh>
   bcdc2:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bcdc6:	e7f6      	b.n	bcdb6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bcdc8:	f816 1b01 	ldrb.w	r1, [r6], #1
   bcdcc:	4620      	mov	r0, r4
   bcdce:	f7ff ff9b 	bl	bcd08 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bcdd2:	e7ec      	b.n	bcdae <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bcdd4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcdd8:	2101      	movs	r1, #1
   bcdda:	b280      	uxth	r0, r0
   bcddc:	f004 faff 	bl	c13de <digitalWrite>

  if (_spi) {
   bcde0:	6820      	ldr	r0, [r4, #0]
   bcde2:	b108      	cbz	r0, bcde8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bcde4:	f003 fe56 	bl	c0a94 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bcde8:	2001      	movs	r0, #1
   bcdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bcdf0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bcdf0:	b508      	push	{r3, lr}
   bcdf2:	4b02      	ldr	r3, [pc, #8]	; (bcdfc <hal_ble_stack_init+0xc>)
   bcdf4:	681b      	ldr	r3, [r3, #0]
   bcdf6:	689b      	ldr	r3, [r3, #8]
   bcdf8:	9301      	str	r3, [sp, #4]
   bcdfa:	bd08      	pop	{r3, pc}
   bcdfc:	00030278 	.word	0x00030278

000bce00 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bce00:	b508      	push	{r3, lr}
   bce02:	4b02      	ldr	r3, [pc, #8]	; (bce0c <hal_ble_gap_set_tx_power+0xc>)
   bce04:	681b      	ldr	r3, [r3, #0]
   bce06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bce08:	9301      	str	r3, [sp, #4]
   bce0a:	bd08      	pop	{r3, pc}
   bce0c:	00030278 	.word	0x00030278

000bce10 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bce10:	b508      	push	{r3, lr}
   bce12:	4b02      	ldr	r3, [pc, #8]	; (bce1c <hal_ble_gap_set_advertising_data+0xc>)
   bce14:	681b      	ldr	r3, [r3, #0]
   bce16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bce18:	9301      	str	r3, [sp, #4]
   bce1a:	bd08      	pop	{r3, pc}
   bce1c:	00030278 	.word	0x00030278

000bce20 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bce20:	b508      	push	{r3, lr}
   bce22:	4b02      	ldr	r3, [pc, #8]	; (bce2c <hal_ble_gap_set_scan_response_data+0xc>)
   bce24:	681b      	ldr	r3, [r3, #0]
   bce26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bce28:	9301      	str	r3, [sp, #4]
   bce2a:	bd08      	pop	{r3, pc}
   bce2c:	00030278 	.word	0x00030278

000bce30 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bce30:	b508      	push	{r3, lr}
   bce32:	4b02      	ldr	r3, [pc, #8]	; (bce3c <hal_ble_gap_start_advertising+0xc>)
   bce34:	681b      	ldr	r3, [r3, #0]
   bce36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bce38:	9301      	str	r3, [sp, #4]
   bce3a:	bd08      	pop	{r3, pc}
   bce3c:	00030278 	.word	0x00030278

000bce40 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bce40:	b508      	push	{r3, lr}
   bce42:	4b03      	ldr	r3, [pc, #12]	; (bce50 <hal_ble_gap_disconnect+0x10>)
   bce44:	681b      	ldr	r3, [r3, #0]
   bce46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bce4a:	9301      	str	r3, [sp, #4]
   bce4c:	bd08      	pop	{r3, pc}
   bce4e:	0000      	.short	0x0000
   bce50:	00030278 	.word	0x00030278

000bce54 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bce54:	b508      	push	{r3, lr}
   bce56:	4b03      	ldr	r3, [pc, #12]	; (bce64 <hal_ble_gatt_server_add_service+0x10>)
   bce58:	681b      	ldr	r3, [r3, #0]
   bce5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bce5e:	9301      	str	r3, [sp, #4]
   bce60:	bd08      	pop	{r3, pc}
   bce62:	0000      	.short	0x0000
   bce64:	00030278 	.word	0x00030278

000bce68 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bce68:	b508      	push	{r3, lr}
   bce6a:	4b03      	ldr	r3, [pc, #12]	; (bce78 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bce6c:	681b      	ldr	r3, [r3, #0]
   bce6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bce72:	9301      	str	r3, [sp, #4]
   bce74:	bd08      	pop	{r3, pc}
   bce76:	0000      	.short	0x0000
   bce78:	00030278 	.word	0x00030278

000bce7c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bce7c:	b508      	push	{r3, lr}
   bce7e:	4b03      	ldr	r3, [pc, #12]	; (bce8c <hal_ble_gatt_client_write_with_response+0x10>)
   bce80:	681b      	ldr	r3, [r3, #0]
   bce82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bce86:	9301      	str	r3, [sp, #4]
   bce88:	bd08      	pop	{r3, pc}
   bce8a:	0000      	.short	0x0000
   bce8c:	00030278 	.word	0x00030278

000bce90 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bce90:	b508      	push	{r3, lr}
   bce92:	4b03      	ldr	r3, [pc, #12]	; (bcea0 <hal_ble_gatt_client_write_without_response+0x10>)
   bce94:	681b      	ldr	r3, [r3, #0]
   bce96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bce9a:	9301      	str	r3, [sp, #4]
   bce9c:	bd08      	pop	{r3, pc}
   bce9e:	0000      	.short	0x0000
   bcea0:	00030278 	.word	0x00030278

000bcea4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bcea4:	b508      	push	{r3, lr}
   bcea6:	4b03      	ldr	r3, [pc, #12]	; (bceb4 <hal_ble_gatt_server_add_characteristic+0x10>)
   bcea8:	681b      	ldr	r3, [r3, #0]
   bceaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bceae:	9301      	str	r3, [sp, #4]
   bceb0:	bd08      	pop	{r3, pc}
   bceb2:	0000      	.short	0x0000
   bceb4:	00030278 	.word	0x00030278

000bceb8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bceb8:	b508      	push	{r3, lr}
   bceba:	4b03      	ldr	r3, [pc, #12]	; (bcec8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bcebc:	681b      	ldr	r3, [r3, #0]
   bcebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bcec2:	9301      	str	r3, [sp, #4]
   bcec4:	bd08      	pop	{r3, pc}
   bcec6:	0000      	.short	0x0000
   bcec8:	00030278 	.word	0x00030278

000bcecc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcecc:	b508      	push	{r3, lr}
   bcece:	4b03      	ldr	r3, [pc, #12]	; (bcedc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bced0:	681b      	ldr	r3, [r3, #0]
   bced2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bced6:	9301      	str	r3, [sp, #4]
   bced8:	bd08      	pop	{r3, pc}
   bceda:	0000      	.short	0x0000
   bcedc:	00030278 	.word	0x00030278

000bcee0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcee0:	b508      	push	{r3, lr}
   bcee2:	4b03      	ldr	r3, [pc, #12]	; (bcef0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bcee4:	681b      	ldr	r3, [r3, #0]
   bcee6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bceea:	9301      	str	r3, [sp, #4]
   bceec:	bd08      	pop	{r3, pc}
   bceee:	0000      	.short	0x0000
   bcef0:	00030278 	.word	0x00030278

000bcef4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bcef4:	b508      	push	{r3, lr}
   bcef6:	4b02      	ldr	r3, [pc, #8]	; (bcf00 <os_thread_yield+0xc>)
   bcef8:	681b      	ldr	r3, [r3, #0]
   bcefa:	68db      	ldr	r3, [r3, #12]
   bcefc:	9301      	str	r3, [sp, #4]
   bcefe:	bd08      	pop	{r3, pc}
   bcf00:	00030248 	.word	0x00030248

000bcf04 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bcf04:	b508      	push	{r3, lr}
   bcf06:	4b02      	ldr	r3, [pc, #8]	; (bcf10 <os_thread_scheduling+0xc>)
   bcf08:	681b      	ldr	r3, [r3, #0]
   bcf0a:	69db      	ldr	r3, [r3, #28]
   bcf0c:	9301      	str	r3, [sp, #4]
   bcf0e:	bd08      	pop	{r3, pc}
   bcf10:	00030248 	.word	0x00030248

000bcf14 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bcf14:	b508      	push	{r3, lr}
   bcf16:	4b02      	ldr	r3, [pc, #8]	; (bcf20 <os_timer_create+0xc>)
   bcf18:	681b      	ldr	r3, [r3, #0]
   bcf1a:	6a1b      	ldr	r3, [r3, #32]
   bcf1c:	9301      	str	r3, [sp, #4]
   bcf1e:	bd08      	pop	{r3, pc}
   bcf20:	00030248 	.word	0x00030248

000bcf24 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bcf24:	b508      	push	{r3, lr}
   bcf26:	4b02      	ldr	r3, [pc, #8]	; (bcf30 <os_timer_destroy+0xc>)
   bcf28:	681b      	ldr	r3, [r3, #0]
   bcf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcf2c:	9301      	str	r3, [sp, #4]
   bcf2e:	bd08      	pop	{r3, pc}
   bcf30:	00030248 	.word	0x00030248

000bcf34 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bcf34:	b508      	push	{r3, lr}
   bcf36:	4b02      	ldr	r3, [pc, #8]	; (bcf40 <os_timer_get_id+0xc>)
   bcf38:	681b      	ldr	r3, [r3, #0]
   bcf3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcf3c:	9301      	str	r3, [sp, #4]
   bcf3e:	bd08      	pop	{r3, pc}
   bcf40:	00030248 	.word	0x00030248

000bcf44 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bcf44:	b508      	push	{r3, lr}
   bcf46:	4b02      	ldr	r3, [pc, #8]	; (bcf50 <os_timer_change+0xc>)
   bcf48:	681b      	ldr	r3, [r3, #0]
   bcf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcf4c:	9301      	str	r3, [sp, #4]
   bcf4e:	bd08      	pop	{r3, pc}
   bcf50:	00030248 	.word	0x00030248

000bcf54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bcf54:	b508      	push	{r3, lr}
   bcf56:	4b02      	ldr	r3, [pc, #8]	; (bcf60 <os_mutex_recursive_create+0xc>)
   bcf58:	681b      	ldr	r3, [r3, #0]
   bcf5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcf5c:	9301      	str	r3, [sp, #4]
   bcf5e:	bd08      	pop	{r3, pc}
   bcf60:	00030248 	.word	0x00030248

000bcf64 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bcf64:	b508      	push	{r3, lr}
   bcf66:	4b02      	ldr	r3, [pc, #8]	; (bcf70 <os_mutex_recursive_destroy+0xc>)
   bcf68:	681b      	ldr	r3, [r3, #0]
   bcf6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bcf6c:	9301      	str	r3, [sp, #4]
   bcf6e:	bd08      	pop	{r3, pc}
   bcf70:	00030248 	.word	0x00030248

000bcf74 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bcf74:	b508      	push	{r3, lr}
   bcf76:	4b02      	ldr	r3, [pc, #8]	; (bcf80 <os_mutex_recursive_lock+0xc>)
   bcf78:	681b      	ldr	r3, [r3, #0]
   bcf7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcf7c:	9301      	str	r3, [sp, #4]
   bcf7e:	bd08      	pop	{r3, pc}
   bcf80:	00030248 	.word	0x00030248

000bcf84 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bcf84:	b508      	push	{r3, lr}
   bcf86:	4b02      	ldr	r3, [pc, #8]	; (bcf90 <os_mutex_recursive_unlock+0xc>)
   bcf88:	681b      	ldr	r3, [r3, #0]
   bcf8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcf8c:	9301      	str	r3, [sp, #4]
   bcf8e:	bd08      	pop	{r3, pc}
   bcf90:	00030248 	.word	0x00030248

000bcf94 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bcf94:	b508      	push	{r3, lr}
   bcf96:	4b02      	ldr	r3, [pc, #8]	; (bcfa0 <os_timer_set_id+0xc>)
   bcf98:	681b      	ldr	r3, [r3, #0]
   bcf9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bcf9c:	9301      	str	r3, [sp, #4]
   bcf9e:	bd08      	pop	{r3, pc}
   bcfa0:	00030248 	.word	0x00030248

000bcfa4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bcfa4:	b508      	push	{r3, lr}
   bcfa6:	4b02      	ldr	r3, [pc, #8]	; (bcfb0 <HAL_RNG_GetRandomNumber+0xc>)
   bcfa8:	681b      	ldr	r3, [r3, #0]
   bcfaa:	685b      	ldr	r3, [r3, #4]
   bcfac:	9301      	str	r3, [sp, #4]
   bcfae:	bd08      	pop	{r3, pc}
   bcfb0:	00030218 	.word	0x00030218

000bcfb4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bcfb4:	b508      	push	{r3, lr}
   bcfb6:	4b02      	ldr	r3, [pc, #8]	; (bcfc0 <HAL_Delay_Microseconds+0xc>)
   bcfb8:	681b      	ldr	r3, [r3, #0]
   bcfba:	68db      	ldr	r3, [r3, #12]
   bcfbc:	9301      	str	r3, [sp, #4]
   bcfbe:	bd08      	pop	{r3, pc}
   bcfc0:	00030218 	.word	0x00030218

000bcfc4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bcfc4:	b508      	push	{r3, lr}
   bcfc6:	4b02      	ldr	r3, [pc, #8]	; (bcfd0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bcfc8:	681b      	ldr	r3, [r3, #0]
   bcfca:	691b      	ldr	r3, [r3, #16]
   bcfcc:	9301      	str	r3, [sp, #4]
   bcfce:	bd08      	pop	{r3, pc}
   bcfd0:	00030218 	.word	0x00030218

000bcfd4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bcfd4:	b508      	push	{r3, lr}
   bcfd6:	4b02      	ldr	r3, [pc, #8]	; (bcfe0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bcfd8:	681b      	ldr	r3, [r3, #0]
   bcfda:	695b      	ldr	r3, [r3, #20]
   bcfdc:	9301      	str	r3, [sp, #4]
   bcfde:	bd08      	pop	{r3, pc}
   bcfe0:	00030218 	.word	0x00030218

000bcfe4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bcfe4:	b508      	push	{r3, lr}
   bcfe6:	4b02      	ldr	r3, [pc, #8]	; (bcff0 <hal_rtc_time_is_valid+0xc>)
   bcfe8:	681b      	ldr	r3, [r3, #0]
   bcfea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcfec:	9301      	str	r3, [sp, #4]
   bcfee:	bd08      	pop	{r3, pc}
   bcff0:	00030218 	.word	0x00030218

000bcff4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bcff4:	b508      	push	{r3, lr}
   bcff6:	4b02      	ldr	r3, [pc, #8]	; (bd000 <hal_rtc_get_time+0xc>)
   bcff8:	681b      	ldr	r3, [r3, #0]
   bcffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcffc:	9301      	str	r3, [sp, #4]
   bcffe:	bd08      	pop	{r3, pc}
   bd000:	00030218 	.word	0x00030218

000bd004 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd004:	b508      	push	{r3, lr}
   bd006:	4b02      	ldr	r3, [pc, #8]	; (bd010 <HAL_Validate_Pin_Function+0xc>)
   bd008:	681b      	ldr	r3, [r3, #0]
   bd00a:	685b      	ldr	r3, [r3, #4]
   bd00c:	9301      	str	r3, [sp, #4]
   bd00e:	bd08      	pop	{r3, pc}
   bd010:	0003022c 	.word	0x0003022c

000bd014 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd014:	b508      	push	{r3, lr}
   bd016:	4b02      	ldr	r3, [pc, #8]	; (bd020 <HAL_Pin_Mode+0xc>)
   bd018:	681b      	ldr	r3, [r3, #0]
   bd01a:	689b      	ldr	r3, [r3, #8]
   bd01c:	9301      	str	r3, [sp, #4]
   bd01e:	bd08      	pop	{r3, pc}
   bd020:	0003022c 	.word	0x0003022c

000bd024 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd024:	b508      	push	{r3, lr}
   bd026:	4b02      	ldr	r3, [pc, #8]	; (bd030 <HAL_Get_Pin_Mode+0xc>)
   bd028:	681b      	ldr	r3, [r3, #0]
   bd02a:	68db      	ldr	r3, [r3, #12]
   bd02c:	9301      	str	r3, [sp, #4]
   bd02e:	bd08      	pop	{r3, pc}
   bd030:	0003022c 	.word	0x0003022c

000bd034 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd034:	b508      	push	{r3, lr}
   bd036:	4b02      	ldr	r3, [pc, #8]	; (bd040 <HAL_GPIO_Write+0xc>)
   bd038:	681b      	ldr	r3, [r3, #0]
   bd03a:	691b      	ldr	r3, [r3, #16]
   bd03c:	9301      	str	r3, [sp, #4]
   bd03e:	bd08      	pop	{r3, pc}
   bd040:	0003022c 	.word	0x0003022c

000bd044 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd044:	b508      	push	{r3, lr}
   bd046:	4b02      	ldr	r3, [pc, #8]	; (bd050 <HAL_Interrupts_Enable_All+0xc>)
   bd048:	681b      	ldr	r3, [r3, #0]
   bd04a:	6a1b      	ldr	r3, [r3, #32]
   bd04c:	9301      	str	r3, [sp, #4]
   bd04e:	bd08      	pop	{r3, pc}
   bd050:	0003022c 	.word	0x0003022c

000bd054 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd054:	b508      	push	{r3, lr}
   bd056:	4b02      	ldr	r3, [pc, #8]	; (bd060 <HAL_Interrupts_Disable_All+0xc>)
   bd058:	681b      	ldr	r3, [r3, #0]
   bd05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd05c:	9301      	str	r3, [sp, #4]
   bd05e:	bd08      	pop	{r3, pc}
   bd060:	0003022c 	.word	0x0003022c

000bd064 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd064:	b508      	push	{r3, lr}
   bd066:	4b02      	ldr	r3, [pc, #8]	; (bd070 <hal_i2c_set_speed+0xc>)
   bd068:	681b      	ldr	r3, [r3, #0]
   bd06a:	681b      	ldr	r3, [r3, #0]
   bd06c:	9301      	str	r3, [sp, #4]
   bd06e:	bd08      	pop	{r3, pc}
   bd070:	00030228 	.word	0x00030228

000bd074 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd074:	b508      	push	{r3, lr}
   bd076:	4b02      	ldr	r3, [pc, #8]	; (bd080 <hal_i2c_begin+0xc>)
   bd078:	681b      	ldr	r3, [r3, #0]
   bd07a:	68db      	ldr	r3, [r3, #12]
   bd07c:	9301      	str	r3, [sp, #4]
   bd07e:	bd08      	pop	{r3, pc}
   bd080:	00030228 	.word	0x00030228

000bd084 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd084:	b508      	push	{r3, lr}
   bd086:	4b02      	ldr	r3, [pc, #8]	; (bd090 <hal_i2c_begin_transmission+0xc>)
   bd088:	681b      	ldr	r3, [r3, #0]
   bd08a:	699b      	ldr	r3, [r3, #24]
   bd08c:	9301      	str	r3, [sp, #4]
   bd08e:	bd08      	pop	{r3, pc}
   bd090:	00030228 	.word	0x00030228

000bd094 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd094:	b508      	push	{r3, lr}
   bd096:	4b02      	ldr	r3, [pc, #8]	; (bd0a0 <hal_i2c_end_transmission+0xc>)
   bd098:	681b      	ldr	r3, [r3, #0]
   bd09a:	69db      	ldr	r3, [r3, #28]
   bd09c:	9301      	str	r3, [sp, #4]
   bd09e:	bd08      	pop	{r3, pc}
   bd0a0:	00030228 	.word	0x00030228

000bd0a4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd0a4:	b508      	push	{r3, lr}
   bd0a6:	4b02      	ldr	r3, [pc, #8]	; (bd0b0 <hal_i2c_write+0xc>)
   bd0a8:	681b      	ldr	r3, [r3, #0]
   bd0aa:	6a1b      	ldr	r3, [r3, #32]
   bd0ac:	9301      	str	r3, [sp, #4]
   bd0ae:	bd08      	pop	{r3, pc}
   bd0b0:	00030228 	.word	0x00030228

000bd0b4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd0b4:	b508      	push	{r3, lr}
   bd0b6:	4b02      	ldr	r3, [pc, #8]	; (bd0c0 <hal_i2c_available+0xc>)
   bd0b8:	681b      	ldr	r3, [r3, #0]
   bd0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd0bc:	9301      	str	r3, [sp, #4]
   bd0be:	bd08      	pop	{r3, pc}
   bd0c0:	00030228 	.word	0x00030228

000bd0c4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd0c4:	b508      	push	{r3, lr}
   bd0c6:	4b02      	ldr	r3, [pc, #8]	; (bd0d0 <hal_i2c_read+0xc>)
   bd0c8:	681b      	ldr	r3, [r3, #0]
   bd0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd0cc:	9301      	str	r3, [sp, #4]
   bd0ce:	bd08      	pop	{r3, pc}
   bd0d0:	00030228 	.word	0x00030228

000bd0d4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd0d4:	b508      	push	{r3, lr}
   bd0d6:	4b02      	ldr	r3, [pc, #8]	; (bd0e0 <hal_i2c_peek+0xc>)
   bd0d8:	681b      	ldr	r3, [r3, #0]
   bd0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd0dc:	9301      	str	r3, [sp, #4]
   bd0de:	bd08      	pop	{r3, pc}
   bd0e0:	00030228 	.word	0x00030228

000bd0e4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd0e4:	b508      	push	{r3, lr}
   bd0e6:	4b02      	ldr	r3, [pc, #8]	; (bd0f0 <hal_i2c_flush+0xc>)
   bd0e8:	681b      	ldr	r3, [r3, #0]
   bd0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd0ec:	9301      	str	r3, [sp, #4]
   bd0ee:	bd08      	pop	{r3, pc}
   bd0f0:	00030228 	.word	0x00030228

000bd0f4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd0f4:	b508      	push	{r3, lr}
   bd0f6:	4b02      	ldr	r3, [pc, #8]	; (bd100 <hal_i2c_is_enabled+0xc>)
   bd0f8:	681b      	ldr	r3, [r3, #0]
   bd0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd0fc:	9301      	str	r3, [sp, #4]
   bd0fe:	bd08      	pop	{r3, pc}
   bd100:	00030228 	.word	0x00030228

000bd104 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd104:	b508      	push	{r3, lr}
   bd106:	4b02      	ldr	r3, [pc, #8]	; (bd110 <hal_i2c_init+0xc>)
   bd108:	681b      	ldr	r3, [r3, #0]
   bd10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd10c:	9301      	str	r3, [sp, #4]
   bd10e:	bd08      	pop	{r3, pc}
   bd110:	00030228 	.word	0x00030228

000bd114 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd114:	b508      	push	{r3, lr}
   bd116:	4b02      	ldr	r3, [pc, #8]	; (bd120 <hal_i2c_request_ex+0xc>)
   bd118:	681b      	ldr	r3, [r3, #0]
   bd11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd11c:	9301      	str	r3, [sp, #4]
   bd11e:	bd08      	pop	{r3, pc}
   bd120:	00030228 	.word	0x00030228

000bd124 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd124:	b508      	push	{r3, lr}
   bd126:	4b02      	ldr	r3, [pc, #8]	; (bd130 <inet_inet_ntop+0xc>)
   bd128:	681b      	ldr	r3, [r3, #0]
   bd12a:	695b      	ldr	r3, [r3, #20]
   bd12c:	9301      	str	r3, [sp, #4]
   bd12e:	bd08      	pop	{r3, pc}
   bd130:	00030264 	.word	0x00030264

000bd134 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd134:	b508      	push	{r3, lr}
   bd136:	4b02      	ldr	r3, [pc, #8]	; (bd140 <netdb_freeaddrinfo+0xc>)
   bd138:	681b      	ldr	r3, [r3, #0]
   bd13a:	689b      	ldr	r3, [r3, #8]
   bd13c:	9301      	str	r3, [sp, #4]
   bd13e:	bd08      	pop	{r3, pc}
   bd140:	00030268 	.word	0x00030268

000bd144 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd144:	b508      	push	{r3, lr}
   bd146:	4b02      	ldr	r3, [pc, #8]	; (bd150 <netdb_getaddrinfo+0xc>)
   bd148:	681b      	ldr	r3, [r3, #0]
   bd14a:	68db      	ldr	r3, [r3, #12]
   bd14c:	9301      	str	r3, [sp, #4]
   bd14e:	bd08      	pop	{r3, pc}
   bd150:	00030268 	.word	0x00030268

000bd154 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd154:	b508      	push	{r3, lr}
   bd156:	4b02      	ldr	r3, [pc, #8]	; (bd160 <HAL_Servo_Attach+0xc>)
   bd158:	681b      	ldr	r3, [r3, #0]
   bd15a:	691b      	ldr	r3, [r3, #16]
   bd15c:	9301      	str	r3, [sp, #4]
   bd15e:	bd08      	pop	{r3, pc}
   bd160:	00030224 	.word	0x00030224

000bd164 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd164:	b508      	push	{r3, lr}
   bd166:	4b02      	ldr	r3, [pc, #8]	; (bd170 <HAL_Servo_Detach+0xc>)
   bd168:	681b      	ldr	r3, [r3, #0]
   bd16a:	695b      	ldr	r3, [r3, #20]
   bd16c:	9301      	str	r3, [sp, #4]
   bd16e:	bd08      	pop	{r3, pc}
   bd170:	00030224 	.word	0x00030224

000bd174 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bd174:	b508      	push	{r3, lr}
   bd176:	4b02      	ldr	r3, [pc, #8]	; (bd180 <HAL_Servo_Write_Pulse_Width+0xc>)
   bd178:	681b      	ldr	r3, [r3, #0]
   bd17a:	699b      	ldr	r3, [r3, #24]
   bd17c:	9301      	str	r3, [sp, #4]
   bd17e:	bd08      	pop	{r3, pc}
   bd180:	00030224 	.word	0x00030224

000bd184 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bd184:	b508      	push	{r3, lr}
   bd186:	4b02      	ldr	r3, [pc, #8]	; (bd190 <hal_spi_begin+0xc>)
   bd188:	681b      	ldr	r3, [r3, #0]
   bd18a:	681b      	ldr	r3, [r3, #0]
   bd18c:	9301      	str	r3, [sp, #4]
   bd18e:	bd08      	pop	{r3, pc}
   bd190:	00030230 	.word	0x00030230

000bd194 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bd194:	b508      	push	{r3, lr}
   bd196:	4b02      	ldr	r3, [pc, #8]	; (bd1a0 <hal_spi_set_clock_divider+0xc>)
   bd198:	681b      	ldr	r3, [r3, #0]
   bd19a:	691b      	ldr	r3, [r3, #16]
   bd19c:	9301      	str	r3, [sp, #4]
   bd19e:	bd08      	pop	{r3, pc}
   bd1a0:	00030230 	.word	0x00030230

000bd1a4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bd1a4:	b508      	push	{r3, lr}
   bd1a6:	4b02      	ldr	r3, [pc, #8]	; (bd1b0 <hal_spi_transfer+0xc>)
   bd1a8:	681b      	ldr	r3, [r3, #0]
   bd1aa:	695b      	ldr	r3, [r3, #20]
   bd1ac:	9301      	str	r3, [sp, #4]
   bd1ae:	bd08      	pop	{r3, pc}
   bd1b0:	00030230 	.word	0x00030230

000bd1b4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bd1b4:	b508      	push	{r3, lr}
   bd1b6:	4b02      	ldr	r3, [pc, #8]	; (bd1c0 <hal_spi_init+0xc>)
   bd1b8:	681b      	ldr	r3, [r3, #0]
   bd1ba:	69db      	ldr	r3, [r3, #28]
   bd1bc:	9301      	str	r3, [sp, #4]
   bd1be:	bd08      	pop	{r3, pc}
   bd1c0:	00030230 	.word	0x00030230

000bd1c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bd1c4:	b508      	push	{r3, lr}
   bd1c6:	4b02      	ldr	r3, [pc, #8]	; (bd1d0 <hal_spi_is_enabled+0xc>)
   bd1c8:	681b      	ldr	r3, [r3, #0]
   bd1ca:	6a1b      	ldr	r3, [r3, #32]
   bd1cc:	9301      	str	r3, [sp, #4]
   bd1ce:	bd08      	pop	{r3, pc}
   bd1d0:	00030230 	.word	0x00030230

000bd1d4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bd1d4:	b508      	push	{r3, lr}
   bd1d6:	4b02      	ldr	r3, [pc, #8]	; (bd1e0 <hal_spi_info+0xc>)
   bd1d8:	681b      	ldr	r3, [r3, #0]
   bd1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd1dc:	9301      	str	r3, [sp, #4]
   bd1de:	bd08      	pop	{r3, pc}
   bd1e0:	00030230 	.word	0x00030230

000bd1e4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bd1e4:	b508      	push	{r3, lr}
   bd1e6:	4b02      	ldr	r3, [pc, #8]	; (bd1f0 <hal_spi_transfer_dma+0xc>)
   bd1e8:	681b      	ldr	r3, [r3, #0]
   bd1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd1ec:	9301      	str	r3, [sp, #4]
   bd1ee:	bd08      	pop	{r3, pc}
   bd1f0:	00030230 	.word	0x00030230

000bd1f4 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bd1f4:	b508      	push	{r3, lr}
   bd1f6:	4b02      	ldr	r3, [pc, #8]	; (bd200 <hal_spi_begin_ext+0xc>)
   bd1f8:	681b      	ldr	r3, [r3, #0]
   bd1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd1fc:	9301      	str	r3, [sp, #4]
   bd1fe:	bd08      	pop	{r3, pc}
   bd200:	00030230 	.word	0x00030230

000bd204 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bd204:	b508      	push	{r3, lr}
   bd206:	4b02      	ldr	r3, [pc, #8]	; (bd210 <hal_spi_transfer_dma_status+0xc>)
   bd208:	681b      	ldr	r3, [r3, #0]
   bd20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd20c:	9301      	str	r3, [sp, #4]
   bd20e:	bd08      	pop	{r3, pc}
   bd210:	00030230 	.word	0x00030230

000bd214 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bd214:	b508      	push	{r3, lr}
   bd216:	4b02      	ldr	r3, [pc, #8]	; (bd220 <hal_spi_set_settings+0xc>)
   bd218:	681b      	ldr	r3, [r3, #0]
   bd21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd21c:	9301      	str	r3, [sp, #4]
   bd21e:	bd08      	pop	{r3, pc}
   bd220:	00030230 	.word	0x00030230

000bd224 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bd224:	b508      	push	{r3, lr}
   bd226:	4b02      	ldr	r3, [pc, #8]	; (bd230 <hal_spi_acquire+0xc>)
   bd228:	681b      	ldr	r3, [r3, #0]
   bd22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd22c:	9301      	str	r3, [sp, #4]
   bd22e:	bd08      	pop	{r3, pc}
   bd230:	00030230 	.word	0x00030230

000bd234 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bd234:	b508      	push	{r3, lr}
   bd236:	4b02      	ldr	r3, [pc, #8]	; (bd240 <hal_spi_release+0xc>)
   bd238:	681b      	ldr	r3, [r3, #0]
   bd23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd23c:	9301      	str	r3, [sp, #4]
   bd23e:	bd08      	pop	{r3, pc}
   bd240:	00030230 	.word	0x00030230

000bd244 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd244:	b508      	push	{r3, lr}
   bd246:	4b02      	ldr	r3, [pc, #8]	; (bd250 <hal_usart_end+0xc>)
   bd248:	681b      	ldr	r3, [r3, #0]
   bd24a:	689b      	ldr	r3, [r3, #8]
   bd24c:	9301      	str	r3, [sp, #4]
   bd24e:	bd08      	pop	{r3, pc}
   bd250:	0003023c 	.word	0x0003023c

000bd254 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd254:	b508      	push	{r3, lr}
   bd256:	4b02      	ldr	r3, [pc, #8]	; (bd260 <hal_usart_write+0xc>)
   bd258:	681b      	ldr	r3, [r3, #0]
   bd25a:	68db      	ldr	r3, [r3, #12]
   bd25c:	9301      	str	r3, [sp, #4]
   bd25e:	bd08      	pop	{r3, pc}
   bd260:	0003023c 	.word	0x0003023c

000bd264 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd264:	b508      	push	{r3, lr}
   bd266:	4b02      	ldr	r3, [pc, #8]	; (bd270 <hal_usart_available+0xc>)
   bd268:	681b      	ldr	r3, [r3, #0]
   bd26a:	691b      	ldr	r3, [r3, #16]
   bd26c:	9301      	str	r3, [sp, #4]
   bd26e:	bd08      	pop	{r3, pc}
   bd270:	0003023c 	.word	0x0003023c

000bd274 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd274:	b508      	push	{r3, lr}
   bd276:	4b02      	ldr	r3, [pc, #8]	; (bd280 <hal_usart_read+0xc>)
   bd278:	681b      	ldr	r3, [r3, #0]
   bd27a:	695b      	ldr	r3, [r3, #20]
   bd27c:	9301      	str	r3, [sp, #4]
   bd27e:	bd08      	pop	{r3, pc}
   bd280:	0003023c 	.word	0x0003023c

000bd284 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd284:	b508      	push	{r3, lr}
   bd286:	4b02      	ldr	r3, [pc, #8]	; (bd290 <hal_usart_peek+0xc>)
   bd288:	681b      	ldr	r3, [r3, #0]
   bd28a:	699b      	ldr	r3, [r3, #24]
   bd28c:	9301      	str	r3, [sp, #4]
   bd28e:	bd08      	pop	{r3, pc}
   bd290:	0003023c 	.word	0x0003023c

000bd294 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd294:	b508      	push	{r3, lr}
   bd296:	4b02      	ldr	r3, [pc, #8]	; (bd2a0 <hal_usart_flush+0xc>)
   bd298:	681b      	ldr	r3, [r3, #0]
   bd29a:	69db      	ldr	r3, [r3, #28]
   bd29c:	9301      	str	r3, [sp, #4]
   bd29e:	bd08      	pop	{r3, pc}
   bd2a0:	0003023c 	.word	0x0003023c

000bd2a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd2a4:	b508      	push	{r3, lr}
   bd2a6:	4b02      	ldr	r3, [pc, #8]	; (bd2b0 <hal_usart_is_enabled+0xc>)
   bd2a8:	681b      	ldr	r3, [r3, #0]
   bd2aa:	6a1b      	ldr	r3, [r3, #32]
   bd2ac:	9301      	str	r3, [sp, #4]
   bd2ae:	bd08      	pop	{r3, pc}
   bd2b0:	0003023c 	.word	0x0003023c

000bd2b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd2b4:	b508      	push	{r3, lr}
   bd2b6:	4b02      	ldr	r3, [pc, #8]	; (bd2c0 <hal_usart_available_data_for_write+0xc>)
   bd2b8:	681b      	ldr	r3, [r3, #0]
   bd2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd2bc:	9301      	str	r3, [sp, #4]
   bd2be:	bd08      	pop	{r3, pc}
   bd2c0:	0003023c 	.word	0x0003023c

000bd2c4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd2c4:	b508      	push	{r3, lr}
   bd2c6:	4b02      	ldr	r3, [pc, #8]	; (bd2d0 <hal_usart_begin_config+0xc>)
   bd2c8:	681b      	ldr	r3, [r3, #0]
   bd2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd2cc:	9301      	str	r3, [sp, #4]
   bd2ce:	bd08      	pop	{r3, pc}
   bd2d0:	0003023c 	.word	0x0003023c

000bd2d4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd2d4:	b508      	push	{r3, lr}
   bd2d6:	4b02      	ldr	r3, [pc, #8]	; (bd2e0 <hal_usart_init_ex+0xc>)
   bd2d8:	681b      	ldr	r3, [r3, #0]
   bd2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd2dc:	9301      	str	r3, [sp, #4]
   bd2de:	bd08      	pop	{r3, pc}
   bd2e0:	0003023c 	.word	0x0003023c

000bd2e4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd2e4:	b508      	push	{r3, lr}
   bd2e6:	4b02      	ldr	r3, [pc, #8]	; (bd2f0 <HAL_USB_USART_Init+0xc>)
   bd2e8:	681b      	ldr	r3, [r3, #0]
   bd2ea:	681b      	ldr	r3, [r3, #0]
   bd2ec:	9301      	str	r3, [sp, #4]
   bd2ee:	bd08      	pop	{r3, pc}
   bd2f0:	0003024c 	.word	0x0003024c

000bd2f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd2f4:	b508      	push	{r3, lr}
   bd2f6:	4b02      	ldr	r3, [pc, #8]	; (bd300 <HAL_USB_USART_Begin+0xc>)
   bd2f8:	681b      	ldr	r3, [r3, #0]
   bd2fa:	685b      	ldr	r3, [r3, #4]
   bd2fc:	9301      	str	r3, [sp, #4]
   bd2fe:	bd08      	pop	{r3, pc}
   bd300:	0003024c 	.word	0x0003024c

000bd304 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd304:	b508      	push	{r3, lr}
   bd306:	4b02      	ldr	r3, [pc, #8]	; (bd310 <HAL_USB_USART_End+0xc>)
   bd308:	681b      	ldr	r3, [r3, #0]
   bd30a:	689b      	ldr	r3, [r3, #8]
   bd30c:	9301      	str	r3, [sp, #4]
   bd30e:	bd08      	pop	{r3, pc}
   bd310:	0003024c 	.word	0x0003024c

000bd314 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd314:	b508      	push	{r3, lr}
   bd316:	4b02      	ldr	r3, [pc, #8]	; (bd320 <HAL_USB_USART_Available_Data+0xc>)
   bd318:	681b      	ldr	r3, [r3, #0]
   bd31a:	691b      	ldr	r3, [r3, #16]
   bd31c:	9301      	str	r3, [sp, #4]
   bd31e:	bd08      	pop	{r3, pc}
   bd320:	0003024c 	.word	0x0003024c

000bd324 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd324:	b508      	push	{r3, lr}
   bd326:	4b02      	ldr	r3, [pc, #8]	; (bd330 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd328:	681b      	ldr	r3, [r3, #0]
   bd32a:	695b      	ldr	r3, [r3, #20]
   bd32c:	9301      	str	r3, [sp, #4]
   bd32e:	bd08      	pop	{r3, pc}
   bd330:	0003024c 	.word	0x0003024c

000bd334 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd334:	b508      	push	{r3, lr}
   bd336:	4b02      	ldr	r3, [pc, #8]	; (bd340 <HAL_USB_USART_Receive_Data+0xc>)
   bd338:	681b      	ldr	r3, [r3, #0]
   bd33a:	699b      	ldr	r3, [r3, #24]
   bd33c:	9301      	str	r3, [sp, #4]
   bd33e:	bd08      	pop	{r3, pc}
   bd340:	0003024c 	.word	0x0003024c

000bd344 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd344:	b508      	push	{r3, lr}
   bd346:	4b02      	ldr	r3, [pc, #8]	; (bd350 <HAL_USB_USART_Send_Data+0xc>)
   bd348:	681b      	ldr	r3, [r3, #0]
   bd34a:	69db      	ldr	r3, [r3, #28]
   bd34c:	9301      	str	r3, [sp, #4]
   bd34e:	bd08      	pop	{r3, pc}
   bd350:	0003024c 	.word	0x0003024c

000bd354 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd354:	b508      	push	{r3, lr}
   bd356:	4b02      	ldr	r3, [pc, #8]	; (bd360 <HAL_USB_USART_Flush_Data+0xc>)
   bd358:	681b      	ldr	r3, [r3, #0]
   bd35a:	6a1b      	ldr	r3, [r3, #32]
   bd35c:	9301      	str	r3, [sp, #4]
   bd35e:	bd08      	pop	{r3, pc}
   bd360:	0003024c 	.word	0x0003024c

000bd364 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd364:	b508      	push	{r3, lr}
   bd366:	4b02      	ldr	r3, [pc, #8]	; (bd370 <panic_+0xc>)
   bd368:	681b      	ldr	r3, [r3, #0]
   bd36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd36c:	9301      	str	r3, [sp, #4]
   bd36e:	bd08      	pop	{r3, pc}
   bd370:	00030260 	.word	0x00030260

000bd374 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd374:	b508      	push	{r3, lr}
   bd376:	4b02      	ldr	r3, [pc, #8]	; (bd380 <log_message+0xc>)
   bd378:	681b      	ldr	r3, [r3, #0]
   bd37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd37c:	9301      	str	r3, [sp, #4]
   bd37e:	bd08      	pop	{r3, pc}
   bd380:	00030260 	.word	0x00030260

000bd384 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd384:	b508      	push	{r3, lr}
   bd386:	4b02      	ldr	r3, [pc, #8]	; (bd390 <log_level_name+0xc>)
   bd388:	681b      	ldr	r3, [r3, #0]
   bd38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd38c:	9301      	str	r3, [sp, #4]
   bd38e:	bd08      	pop	{r3, pc}
   bd390:	00030260 	.word	0x00030260

000bd394 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd394:	b508      	push	{r3, lr}
   bd396:	4b02      	ldr	r3, [pc, #8]	; (bd3a0 <log_set_callbacks+0xc>)
   bd398:	681b      	ldr	r3, [r3, #0]
   bd39a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd39c:	9301      	str	r3, [sp, #4]
   bd39e:	bd08      	pop	{r3, pc}
   bd3a0:	00030260 	.word	0x00030260

000bd3a4 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bd3a4:	b508      	push	{r3, lr}
   bd3a6:	4b03      	ldr	r3, [pc, #12]	; (bd3b4 <led_set_status_active+0x10>)
   bd3a8:	681b      	ldr	r3, [r3, #0]
   bd3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bd3ae:	9301      	str	r3, [sp, #4]
   bd3b0:	bd08      	pop	{r3, pc}
   bd3b2:	0000      	.short	0x0000
   bd3b4:	00030260 	.word	0x00030260

000bd3b8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd3b8:	b508      	push	{r3, lr}
   bd3ba:	4b02      	ldr	r3, [pc, #8]	; (bd3c4 <system_mode+0xc>)
   bd3bc:	681b      	ldr	r3, [r3, #0]
   bd3be:	681b      	ldr	r3, [r3, #0]
   bd3c0:	9301      	str	r3, [sp, #4]
   bd3c2:	bd08      	pop	{r3, pc}
   bd3c4:	00030220 	.word	0x00030220

000bd3c8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd3c8:	b508      	push	{r3, lr}
   bd3ca:	4b02      	ldr	r3, [pc, #8]	; (bd3d4 <set_system_mode+0xc>)
   bd3cc:	681b      	ldr	r3, [r3, #0]
   bd3ce:	685b      	ldr	r3, [r3, #4]
   bd3d0:	9301      	str	r3, [sp, #4]
   bd3d2:	bd08      	pop	{r3, pc}
   bd3d4:	00030220 	.word	0x00030220

000bd3d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd3d8:	b508      	push	{r3, lr}
   bd3da:	4b02      	ldr	r3, [pc, #8]	; (bd3e4 <system_delay_ms+0xc>)
   bd3dc:	681b      	ldr	r3, [r3, #0]
   bd3de:	695b      	ldr	r3, [r3, #20]
   bd3e0:	9301      	str	r3, [sp, #4]
   bd3e2:	bd08      	pop	{r3, pc}
   bd3e4:	00030220 	.word	0x00030220

000bd3e8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd3e8:	b508      	push	{r3, lr}
   bd3ea:	4b02      	ldr	r3, [pc, #8]	; (bd3f4 <application_thread_current+0xc>)
   bd3ec:	681b      	ldr	r3, [r3, #0]
   bd3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd3f0:	9301      	str	r3, [sp, #4]
   bd3f2:	bd08      	pop	{r3, pc}
   bd3f4:	00030220 	.word	0x00030220

000bd3f8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd3f8:	b508      	push	{r3, lr}
   bd3fa:	4b02      	ldr	r3, [pc, #8]	; (bd404 <application_thread_invoke+0xc>)
   bd3fc:	681b      	ldr	r3, [r3, #0]
   bd3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd400:	9301      	str	r3, [sp, #4]
   bd402:	bd08      	pop	{r3, pc}
   bd404:	00030220 	.word	0x00030220

000bd408 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd408:	b508      	push	{r3, lr}
   bd40a:	4b02      	ldr	r3, [pc, #8]	; (bd414 <system_thread_get_state+0xc>)
   bd40c:	681b      	ldr	r3, [r3, #0]
   bd40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd410:	9301      	str	r3, [sp, #4]
   bd412:	bd08      	pop	{r3, pc}
   bd414:	00030220 	.word	0x00030220

000bd418 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bd418:	b508      	push	{r3, lr}
   bd41a:	4b02      	ldr	r3, [pc, #8]	; (bd424 <led_pattern_period+0xc>)
   bd41c:	681b      	ldr	r3, [r3, #0]
   bd41e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd420:	9301      	str	r3, [sp, #4]
   bd422:	bd08      	pop	{r3, pc}
   bd424:	00030220 	.word	0x00030220

000bd428 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd428:	b508      	push	{r3, lr}
   bd42a:	4b03      	ldr	r3, [pc, #12]	; (bd438 <system_ctrl_set_app_request_handler+0x10>)
   bd42c:	681b      	ldr	r3, [r3, #0]
   bd42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd432:	9301      	str	r3, [sp, #4]
   bd434:	bd08      	pop	{r3, pc}
   bd436:	0000      	.short	0x0000
   bd438:	00030220 	.word	0x00030220

000bd43c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd43c:	b508      	push	{r3, lr}
   bd43e:	4b03      	ldr	r3, [pc, #12]	; (bd44c <system_ctrl_set_result+0x10>)
   bd440:	681b      	ldr	r3, [r3, #0]
   bd442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd446:	9301      	str	r3, [sp, #4]
   bd448:	bd08      	pop	{r3, pc}
   bd44a:	0000      	.short	0x0000
   bd44c:	00030220 	.word	0x00030220

000bd450 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd450:	b508      	push	{r3, lr}
   bd452:	4b02      	ldr	r3, [pc, #8]	; (bd45c <spark_process+0xc>)
   bd454:	681b      	ldr	r3, [r3, #0]
   bd456:	689b      	ldr	r3, [r3, #8]
   bd458:	9301      	str	r3, [sp, #4]
   bd45a:	bd08      	pop	{r3, pc}
   bd45c:	00030244 	.word	0x00030244

000bd460 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd460:	b508      	push	{r3, lr}
   bd462:	4b02      	ldr	r3, [pc, #8]	; (bd46c <spark_cloud_flag_connected+0xc>)
   bd464:	681b      	ldr	r3, [r3, #0]
   bd466:	695b      	ldr	r3, [r3, #20]
   bd468:	9301      	str	r3, [sp, #4]
   bd46a:	bd08      	pop	{r3, pc}
   bd46c:	00030244 	.word	0x00030244

000bd470 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd470:	b508      	push	{r3, lr}
   bd472:	4b02      	ldr	r3, [pc, #8]	; (bd47c <spark_send_event+0xc>)
   bd474:	681b      	ldr	r3, [r3, #0]
   bd476:	6a1b      	ldr	r3, [r3, #32]
   bd478:	9301      	str	r3, [sp, #4]
   bd47a:	bd08      	pop	{r3, pc}
   bd47c:	00030244 	.word	0x00030244

000bd480 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bd480:	b508      	push	{r3, lr}
   bd482:	4b02      	ldr	r3, [pc, #8]	; (bd48c <spark_subscribe+0xc>)
   bd484:	681b      	ldr	r3, [r3, #0]
   bd486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd488:	9301      	str	r3, [sp, #4]
   bd48a:	bd08      	pop	{r3, pc}
   bd48c:	00030244 	.word	0x00030244

000bd490 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd490:	b508      	push	{r3, lr}
   bd492:	4b02      	ldr	r3, [pc, #8]	; (bd49c <spark_sync_time_pending+0xc>)
   bd494:	681b      	ldr	r3, [r3, #0]
   bd496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd498:	9301      	str	r3, [sp, #4]
   bd49a:	bd08      	pop	{r3, pc}
   bd49c:	00030244 	.word	0x00030244

000bd4a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd4a0:	b508      	push	{r3, lr}
   bd4a2:	4b02      	ldr	r3, [pc, #8]	; (bd4ac <spark_set_random_seed_from_cloud_handler+0xc>)
   bd4a4:	681b      	ldr	r3, [r3, #0]
   bd4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd4a8:	9301      	str	r3, [sp, #4]
   bd4aa:	bd08      	pop	{r3, pc}
   bd4ac:	00030244 	.word	0x00030244

000bd4b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd4b0:	b508      	push	{r3, lr}
   bd4b2:	4b02      	ldr	r3, [pc, #8]	; (bd4bc <network_connect+0xc>)
   bd4b4:	681b      	ldr	r3, [r3, #0]
   bd4b6:	685b      	ldr	r3, [r3, #4]
   bd4b8:	9301      	str	r3, [sp, #4]
   bd4ba:	bd08      	pop	{r3, pc}
   bd4bc:	00030240 	.word	0x00030240

000bd4c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd4c0:	b508      	push	{r3, lr}
   bd4c2:	4b02      	ldr	r3, [pc, #8]	; (bd4cc <network_connecting+0xc>)
   bd4c4:	681b      	ldr	r3, [r3, #0]
   bd4c6:	689b      	ldr	r3, [r3, #8]
   bd4c8:	9301      	str	r3, [sp, #4]
   bd4ca:	bd08      	pop	{r3, pc}
   bd4cc:	00030240 	.word	0x00030240

000bd4d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd4d0:	b508      	push	{r3, lr}
   bd4d2:	4b02      	ldr	r3, [pc, #8]	; (bd4dc <network_disconnect+0xc>)
   bd4d4:	681b      	ldr	r3, [r3, #0]
   bd4d6:	68db      	ldr	r3, [r3, #12]
   bd4d8:	9301      	str	r3, [sp, #4]
   bd4da:	bd08      	pop	{r3, pc}
   bd4dc:	00030240 	.word	0x00030240

000bd4e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd4e0:	b508      	push	{r3, lr}
   bd4e2:	4b02      	ldr	r3, [pc, #8]	; (bd4ec <network_ready+0xc>)
   bd4e4:	681b      	ldr	r3, [r3, #0]
   bd4e6:	691b      	ldr	r3, [r3, #16]
   bd4e8:	9301      	str	r3, [sp, #4]
   bd4ea:	bd08      	pop	{r3, pc}
   bd4ec:	00030240 	.word	0x00030240

000bd4f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd4f0:	b508      	push	{r3, lr}
   bd4f2:	4b02      	ldr	r3, [pc, #8]	; (bd4fc <network_on+0xc>)
   bd4f4:	681b      	ldr	r3, [r3, #0]
   bd4f6:	695b      	ldr	r3, [r3, #20]
   bd4f8:	9301      	str	r3, [sp, #4]
   bd4fa:	bd08      	pop	{r3, pc}
   bd4fc:	00030240 	.word	0x00030240

000bd500 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd500:	b508      	push	{r3, lr}
   bd502:	4b02      	ldr	r3, [pc, #8]	; (bd50c <network_off+0xc>)
   bd504:	681b      	ldr	r3, [r3, #0]
   bd506:	699b      	ldr	r3, [r3, #24]
   bd508:	9301      	str	r3, [sp, #4]
   bd50a:	bd08      	pop	{r3, pc}
   bd50c:	00030240 	.word	0x00030240

000bd510 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd510:	b508      	push	{r3, lr}
   bd512:	4b02      	ldr	r3, [pc, #8]	; (bd51c <network_listen+0xc>)
   bd514:	681b      	ldr	r3, [r3, #0]
   bd516:	69db      	ldr	r3, [r3, #28]
   bd518:	9301      	str	r3, [sp, #4]
   bd51a:	bd08      	pop	{r3, pc}
   bd51c:	00030240 	.word	0x00030240

000bd520 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd520:	b508      	push	{r3, lr}
   bd522:	4b02      	ldr	r3, [pc, #8]	; (bd52c <network_listening+0xc>)
   bd524:	681b      	ldr	r3, [r3, #0]
   bd526:	6a1b      	ldr	r3, [r3, #32]
   bd528:	9301      	str	r3, [sp, #4]
   bd52a:	bd08      	pop	{r3, pc}
   bd52c:	00030240 	.word	0x00030240

000bd530 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd530:	b508      	push	{r3, lr}
   bd532:	4b02      	ldr	r3, [pc, #8]	; (bd53c <network_set_listen_timeout+0xc>)
   bd534:	681b      	ldr	r3, [r3, #0]
   bd536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd538:	9301      	str	r3, [sp, #4]
   bd53a:	bd08      	pop	{r3, pc}
   bd53c:	00030240 	.word	0x00030240

000bd540 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd540:	b508      	push	{r3, lr}
   bd542:	4b02      	ldr	r3, [pc, #8]	; (bd54c <network_get_listen_timeout+0xc>)
   bd544:	681b      	ldr	r3, [r3, #0]
   bd546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd548:	9301      	str	r3, [sp, #4]
   bd54a:	bd08      	pop	{r3, pc}
   bd54c:	00030240 	.word	0x00030240

000bd550 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd550:	b508      	push	{r3, lr}
   bd552:	4b02      	ldr	r3, [pc, #8]	; (bd55c <network_is_on+0xc>)
   bd554:	681b      	ldr	r3, [r3, #0]
   bd556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd558:	9301      	str	r3, [sp, #4]
   bd55a:	bd08      	pop	{r3, pc}
   bd55c:	00030240 	.word	0x00030240

000bd560 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd560:	b508      	push	{r3, lr}
   bd562:	4b02      	ldr	r3, [pc, #8]	; (bd56c <network_is_off+0xc>)
   bd564:	681b      	ldr	r3, [r3, #0]
   bd566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd568:	9301      	str	r3, [sp, #4]
   bd56a:	bd08      	pop	{r3, pc}
   bd56c:	00030240 	.word	0x00030240

000bd570 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd570:	b508      	push	{r3, lr}
   bd572:	4b02      	ldr	r3, [pc, #8]	; (bd57c <malloc+0xc>)
   bd574:	681b      	ldr	r3, [r3, #0]
   bd576:	681b      	ldr	r3, [r3, #0]
   bd578:	9301      	str	r3, [sp, #4]
   bd57a:	bd08      	pop	{r3, pc}
   bd57c:	0003021c 	.word	0x0003021c

000bd580 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd580:	b508      	push	{r3, lr}
   bd582:	4b02      	ldr	r3, [pc, #8]	; (bd58c <free+0xc>)
   bd584:	681b      	ldr	r3, [r3, #0]
   bd586:	685b      	ldr	r3, [r3, #4]
   bd588:	9301      	str	r3, [sp, #4]
   bd58a:	bd08      	pop	{r3, pc}
   bd58c:	0003021c 	.word	0x0003021c

000bd590 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd590:	b508      	push	{r3, lr}
   bd592:	4b02      	ldr	r3, [pc, #8]	; (bd59c <realloc+0xc>)
   bd594:	681b      	ldr	r3, [r3, #0]
   bd596:	689b      	ldr	r3, [r3, #8]
   bd598:	9301      	str	r3, [sp, #4]
   bd59a:	bd08      	pop	{r3, pc}
   bd59c:	0003021c 	.word	0x0003021c

000bd5a0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bd5a0:	b508      	push	{r3, lr}
   bd5a2:	4b02      	ldr	r3, [pc, #8]	; (bd5ac <sprintf+0xc>)
   bd5a4:	681b      	ldr	r3, [r3, #0]
   bd5a6:	68db      	ldr	r3, [r3, #12]
   bd5a8:	9301      	str	r3, [sp, #4]
   bd5aa:	bd08      	pop	{r3, pc}
   bd5ac:	0003021c 	.word	0x0003021c

000bd5b0 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd5b0:	b508      	push	{r3, lr}
   bd5b2:	4b02      	ldr	r3, [pc, #8]	; (bd5bc <snprintf+0xc>)
   bd5b4:	681b      	ldr	r3, [r3, #0]
   bd5b6:	69db      	ldr	r3, [r3, #28]
   bd5b8:	9301      	str	r3, [sp, #4]
   bd5ba:	bd08      	pop	{r3, pc}
   bd5bc:	0003021c 	.word	0x0003021c

000bd5c0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd5c0:	b508      	push	{r3, lr}
   bd5c2:	4b02      	ldr	r3, [pc, #8]	; (bd5cc <vsnprintf+0xc>)
   bd5c4:	681b      	ldr	r3, [r3, #0]
   bd5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd5c8:	9301      	str	r3, [sp, #4]
   bd5ca:	bd08      	pop	{r3, pc}
   bd5cc:	0003021c 	.word	0x0003021c

000bd5d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd5d0:	b508      	push	{r3, lr}
   bd5d2:	4b02      	ldr	r3, [pc, #8]	; (bd5dc <abort+0xc>)
   bd5d4:	681b      	ldr	r3, [r3, #0]
   bd5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd5d8:	9301      	str	r3, [sp, #4]
   bd5da:	bd08      	pop	{r3, pc}
   bd5dc:	0003021c 	.word	0x0003021c

000bd5e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd5e0:	b508      	push	{r3, lr}
   bd5e2:	4b02      	ldr	r3, [pc, #8]	; (bd5ec <_malloc_r+0xc>)
   bd5e4:	681b      	ldr	r3, [r3, #0]
   bd5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd5e8:	9301      	str	r3, [sp, #4]
   bd5ea:	bd08      	pop	{r3, pc}
   bd5ec:	0003021c 	.word	0x0003021c

000bd5f0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd5f0:	b508      	push	{r3, lr}
   bd5f2:	4b02      	ldr	r3, [pc, #8]	; (bd5fc <__errno+0xc>)
   bd5f4:	681b      	ldr	r3, [r3, #0]
   bd5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd5f8:	9301      	str	r3, [sp, #4]
   bd5fa:	bd08      	pop	{r3, pc}
   bd5fc:	0003021c 	.word	0x0003021c

000bd600 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd600:	b508      	push	{r3, lr}
   bd602:	4b02      	ldr	r3, [pc, #8]	; (bd60c <__assert_func+0xc>)
   bd604:	681b      	ldr	r3, [r3, #0]
   bd606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd608:	9301      	str	r3, [sp, #4]
   bd60a:	bd08      	pop	{r3, pc}
   bd60c:	0003021c 	.word	0x0003021c

000bd610 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd610:	b508      	push	{r3, lr}
   bd612:	4b02      	ldr	r3, [pc, #8]	; (bd61c <newlib_impure_ptr_callback+0xc>)
   bd614:	681b      	ldr	r3, [r3, #0]
   bd616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd618:	9301      	str	r3, [sp, #4]
   bd61a:	bd08      	pop	{r3, pc}
   bd61c:	0003021c 	.word	0x0003021c

000bd620 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd620:	b508      	push	{r3, lr}
   bd622:	4b02      	ldr	r3, [pc, #8]	; (bd62c <localtime_r+0xc>)
   bd624:	681b      	ldr	r3, [r3, #0]
   bd626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd628:	9301      	str	r3, [sp, #4]
   bd62a:	bd08      	pop	{r3, pc}
   bd62c:	0003021c 	.word	0x0003021c

000bd630 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bd630:	428a      	cmp	r2, r1
{
   bd632:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bd634:	d007      	beq.n	bd646 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bd636:	1a44      	subs	r4, r0, r1
   bd638:	9802      	ldr	r0, [sp, #8]
   bd63a:	1ac0      	subs	r0, r0, r3
   bd63c:	4344      	muls	r4, r0
   bd63e:	1a50      	subs	r0, r2, r1
   bd640:	fb94 f0f0 	sdiv	r0, r4, r0
   bd644:	4418      	add	r0, r3
}
   bd646:	bd10      	pop	{r4, pc}

000bd648 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd648:	2100      	movs	r1, #0
   bd64a:	f7ff bec5 	b.w	bd3d8 <system_delay_ms>

000bd64e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd64e:	b510      	push	{r4, lr}
      if (_M_empty())
   bd650:	6883      	ldr	r3, [r0, #8]
   bd652:	4604      	mov	r4, r0
   bd654:	b90b      	cbnz	r3, bd65a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd656:	f003 ff5b 	bl	c1510 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd65a:	68c3      	ldr	r3, [r0, #12]
   bd65c:	4798      	blx	r3
      if (_M_manager)
   bd65e:	68a3      	ldr	r3, [r4, #8]
   bd660:	b11b      	cbz	r3, bd66a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd662:	2203      	movs	r2, #3
   bd664:	4621      	mov	r1, r4
   bd666:	4620      	mov	r0, r4
   bd668:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd66a:	4620      	mov	r0, r4
   bd66c:	2110      	movs	r1, #16
}
   bd66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd672:	f7f6 bd16 	b.w	b40a2 <_ZdlPvj>

000bd676 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd676:	4770      	bx	lr

000bd678 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bd678:	4770      	bx	lr

000bd67a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bd67a:	4770      	bx	lr

000bd67c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd67c:	4770      	bx	lr
	...

000bd680 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd680:	4b06      	ldr	r3, [pc, #24]	; (bd69c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd682:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd684:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bd686:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd68a:	d005      	beq.n	bd698 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd68c:	4608      	mov	r0, r1
   bd68e:	f003 ff43 	bl	c1518 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd692:	2800      	cmp	r0, #0
   bd694:	bf08      	it	eq
   bd696:	2400      	moveq	r4, #0
      }
   bd698:	4620      	mov	r0, r4
   bd69a:	bd10      	pop	{r4, pc}
   bd69c:	000c5958 	.word	0x000c5958

000bd6a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd6a0:	4b06      	ldr	r3, [pc, #24]	; (bd6bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd6a2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd6a4:	b510      	push	{r4, lr}
   bd6a6:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd6aa:	d005      	beq.n	bd6b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd6ac:	4608      	mov	r0, r1
   bd6ae:	f003 ff33 	bl	c1518 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd6b2:	2800      	cmp	r0, #0
   bd6b4:	bf08      	it	eq
   bd6b6:	2400      	moveq	r4, #0
      }
   bd6b8:	4620      	mov	r0, r4
   bd6ba:	bd10      	pop	{r4, pc}
   bd6bc:	000c5958 	.word	0x000c5958

000bd6c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd6c0:	4b06      	ldr	r3, [pc, #24]	; (bd6dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd6c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd6c4:	b510      	push	{r4, lr}
   bd6c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd6ca:	d005      	beq.n	bd6d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd6cc:	4608      	mov	r0, r1
   bd6ce:	f003 ff23 	bl	c1518 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd6d2:	2800      	cmp	r0, #0
   bd6d4:	bf08      	it	eq
   bd6d6:	2400      	moveq	r4, #0
      }
   bd6d8:	4620      	mov	r0, r4
   bd6da:	bd10      	pop	{r4, pc}
   bd6dc:	000c5958 	.word	0x000c5958

000bd6e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd6e0:	b510      	push	{r4, lr}
   bd6e2:	2168      	movs	r1, #104	; 0x68
   bd6e4:	4604      	mov	r4, r0
   bd6e6:	f7f6 fcdc 	bl	b40a2 <_ZdlPvj>
   bd6ea:	4620      	mov	r0, r4
   bd6ec:	bd10      	pop	{r4, pc}

000bd6ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd6ee:	b510      	push	{r4, lr}
   bd6f0:	2128      	movs	r1, #40	; 0x28
   bd6f2:	4604      	mov	r4, r0
   bd6f4:	f7f6 fcd5 	bl	b40a2 <_ZdlPvj>
   bd6f8:	4620      	mov	r0, r4
   bd6fa:	bd10      	pop	{r4, pc}

000bd6fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd6fc:	b510      	push	{r4, lr}
   bd6fe:	2130      	movs	r1, #48	; 0x30
   bd700:	4604      	mov	r4, r0
   bd702:	f7f6 fcce 	bl	b40a2 <_ZdlPvj>
   bd706:	4620      	mov	r0, r4
   bd708:	bd10      	pop	{r4, pc}

000bd70a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bd70a:	2168      	movs	r1, #104	; 0x68
   bd70c:	f7f6 bcc9 	b.w	b40a2 <_ZdlPvj>

000bd710 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd710:	2128      	movs	r1, #40	; 0x28
   bd712:	f7f6 bcc6 	b.w	b40a2 <_ZdlPvj>

000bd716 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd716:	2130      	movs	r1, #48	; 0x30
   bd718:	f7f6 bcc3 	b.w	b40a2 <_ZdlPvj>

000bd71c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bd71c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd71e:	2500      	movs	r5, #0
   bd720:	1cec      	adds	r4, r5, #3
   bd722:	428c      	cmp	r4, r1
   bd724:	d80d      	bhi.n	bd742 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bd726:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bd728:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bd72a:	5d87      	ldrb	r7, [r0, r6]
   bd72c:	4297      	cmp	r7, r2
   bd72e:	d105      	bne.n	bd73c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bd730:	4426      	add	r6, r4
   bd732:	42b1      	cmp	r1, r6
   bd734:	d305      	bcc.n	bd742 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bd736:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bd738:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bd73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bd73c:	3401      	adds	r4, #1
   bd73e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd740:	e7ee      	b.n	bd720 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bd742:	2000      	movs	r0, #0
   bd744:	e7f9      	b.n	bd73a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bd748 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bd748:	4a02      	ldr	r2, [pc, #8]	; (bd754 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bd74a:	4903      	ldr	r1, [pc, #12]	; (bd758 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bd74c:	200a      	movs	r0, #10
   bd74e:	f7ff be09 	b.w	bd364 <panic_>
   bd752:	bf00      	nop
   bd754:	000bcfb5 	.word	0x000bcfb5
   bd758:	000c57b5 	.word	0x000c57b5

000bd75c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd75c:	b430      	push	{r4, r5}
   bd75e:	460d      	mov	r5, r1
   bd760:	4611      	mov	r1, r2
   bd762:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bd764:	6803      	ldr	r3, [r0, #0]
   bd766:	6809      	ldr	r1, [r1, #0]
   bd768:	6828      	ldr	r0, [r5, #0]
   bd76a:	e9d3 4300 	ldrd	r4, r3, [r3]
   bd76e:	46a4      	mov	ip, r4
      }
   bd770:	bc30      	pop	{r4, r5}
   bd772:	4760      	bx	ip

000bd774 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bd774:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd776:	b538      	push	{r3, r4, r5, lr}
   bd778:	4604      	mov	r4, r0
	switch (__op)
   bd77a:	d102      	bne.n	bd782 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bd77c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bd77e:	6023      	str	r3, [r4, #0]
	}
   bd780:	e003      	b.n	bd78a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bd782:	2a02      	cmp	r2, #2
   bd784:	d003      	beq.n	bd78e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bd786:	2a03      	cmp	r2, #3
   bd788:	d00d      	beq.n	bd7a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bd78a:	2000      	movs	r0, #0
   bd78c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bd78e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bd790:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd792:	f7f6 fc80 	bl	b4096 <_Znwj>
   bd796:	4603      	mov	r3, r0
   bd798:	2800      	cmp	r0, #0
   bd79a:	d0f0      	beq.n	bd77e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bd79c:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd7a0:	e883 0003 	stmia.w	r3, {r0, r1}
   bd7a4:	e7eb      	b.n	bd77e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bd7a6:	6800      	ldr	r0, [r0, #0]
   bd7a8:	2800      	cmp	r0, #0
   bd7aa:	d0ee      	beq.n	bd78a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bd7ac:	2108      	movs	r1, #8
   bd7ae:	f7f6 fc78 	bl	b40a2 <_ZdlPvj>
   bd7b2:	e7ea      	b.n	bd78a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bd7b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd7b4:	b510      	push	{r4, lr}
   bd7b6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bd7b8:	3058      	adds	r0, #88	; 0x58
   bd7ba:	f7f6 fdef 	bl	b439c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bd7be:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bd7c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd7c6:	f003 ba7d 	b.w	c0cc4 <_ZN6StringD1Ev>

000bd7ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd7ca:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd7cc:	6843      	ldr	r3, [r0, #4]
   bd7ce:	3b01      	subs	r3, #1
    {
   bd7d0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd7d2:	6043      	str	r3, [r0, #4]
   bd7d4:	b963      	cbnz	r3, bd7f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd7d6:	6803      	ldr	r3, [r0, #0]
   bd7d8:	689b      	ldr	r3, [r3, #8]
   bd7da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd7dc:	68a3      	ldr	r3, [r4, #8]
   bd7de:	3b01      	subs	r3, #1
   bd7e0:	60a3      	str	r3, [r4, #8]
   bd7e2:	b92b      	cbnz	r3, bd7f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd7e4:	6823      	ldr	r3, [r4, #0]
   bd7e6:	4620      	mov	r0, r4
   bd7e8:	68db      	ldr	r3, [r3, #12]
    }
   bd7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd7ee:	4718      	bx	r3
    }
   bd7f0:	bd10      	pop	{r4, pc}

000bd7f2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bd7f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd7f6:	b2da      	uxtb	r2, r3
   bd7f8:	2a09      	cmp	r2, #9
   bd7fa:	d801      	bhi.n	bd800 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bd7fc:	4618      	mov	r0, r3
   bd7fe:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bd800:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd804:	2b05      	cmp	r3, #5
   bd806:	d801      	bhi.n	bd80c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bd808:	3857      	subs	r0, #87	; 0x57
   bd80a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bd80c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd810:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bd812:	bf94      	ite	ls
   bd814:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bd816:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   bd81a:	4770      	bx	lr

000bd81c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bd81c:	b510      	push	{r4, lr}
            locked_(false) {
   bd81e:	2300      	movs	r3, #0
   bd820:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd822:	4b04      	ldr	r3, [pc, #16]	; (bd834 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bd824:	4604      	mov	r4, r0
   bd826:	6818      	ldr	r0, [r3, #0]
   bd828:	f7ff fba4 	bl	bcf74 <os_mutex_recursive_lock>
        locked_ = true;
   bd82c:	2301      	movs	r3, #1
   bd82e:	7023      	strb	r3, [r4, #0]
    }
   bd830:	4620      	mov	r0, r4
   bd832:	bd10      	pop	{r4, pc}
   bd834:	2003e628 	.word	0x2003e628

000bd838 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bd838:	b510      	push	{r4, lr}
        if (locked_) {
   bd83a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bd83c:	4604      	mov	r4, r0
        if (locked_) {
   bd83e:	b11b      	cbz	r3, bd848 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bd840:	4b02      	ldr	r3, [pc, #8]	; (bd84c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bd842:	6818      	ldr	r0, [r3, #0]
   bd844:	f7ff fb9e 	bl	bcf84 <os_mutex_recursive_unlock>
    }
   bd848:	4620      	mov	r0, r4
   bd84a:	bd10      	pop	{r4, pc}
   bd84c:	2003e628 	.word	0x2003e628

000bd850 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bd850:	b082      	sub	sp, #8
   bd852:	4603      	mov	r3, r0
    address_ = addr;
   bd854:	6808      	ldr	r0, [r1, #0]
   bd856:	6849      	ldr	r1, [r1, #4]
   bd858:	466a      	mov	r2, sp
   bd85a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bd85c:	466a      	mov	r2, sp
   bd85e:	ca03      	ldmia	r2!, {r0, r1}
   bd860:	6018      	str	r0, [r3, #0]
}
   bd862:	4618      	mov	r0, r3
    address_ = addr.address_;
   bd864:	6059      	str	r1, [r3, #4]
}
   bd866:	b002      	add	sp, #8
   bd868:	4770      	bx	lr

000bd86a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bd86a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bd86c:	7982      	ldrb	r2, [r0, #6]
   bd86e:	798b      	ldrb	r3, [r1, #6]
   bd870:	429a      	cmp	r2, r3
   bd872:	d106      	bne.n	bd882 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bd874:	2206      	movs	r2, #6
   bd876:	f004 fc99 	bl	c21ac <memcmp>
   bd87a:	fab0 f080 	clz	r0, r0
   bd87e:	0940      	lsrs	r0, r0, #5
}
   bd880:	bd08      	pop	{r3, pc}
    return false;
   bd882:	2000      	movs	r0, #0
   bd884:	e7fc      	b.n	bd880 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bd886 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bd886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bd88a:	6003      	str	r3, [r0, #0]
   bd88c:	8083      	strh	r3, [r0, #4]
}
   bd88e:	2000      	movs	r0, #0
   bd890:	4770      	bx	lr

000bd892 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bd892:	b508      	push	{r3, lr}
   bd894:	4602      	mov	r2, r0
        : address_{} {
   bd896:	2100      	movs	r1, #0
   bd898:	6001      	str	r1, [r0, #0]
   bd89a:	6041      	str	r1, [r0, #4]
    clear();
   bd89c:	f7ff fff3 	bl	bd886 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bd8a0:	7191      	strb	r1, [r2, #6]
}
   bd8a2:	4610      	mov	r0, r2
   bd8a4:	bd08      	pop	{r3, pc}
	...

000bd8a8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bd8a8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bd8aa:	2301      	movs	r3, #1
   bd8ac:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd8ae:	4b05      	ldr	r3, [pc, #20]	; (bd8c4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   bd8b0:	4602      	mov	r2, r0
   bd8b2:	f103 0110 	add.w	r1, r3, #16
   bd8b6:	f853 4b04 	ldr.w	r4, [r3], #4
   bd8ba:	f842 4b04 	str.w	r4, [r2], #4
   bd8be:	428b      	cmp	r3, r1
   bd8c0:	d1f9      	bne.n	bd8b6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   bd8c2:	bd10      	pop	{r4, pc}
   bd8c4:	000c5966 	.word	0x000c5966

000bd8c8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bd8c8:	b510      	push	{r4, lr}
    if (uuid128) {
   bd8ca:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bd8cc:	4604      	mov	r4, r0
    if (uuid128) {
   bd8ce:	b1b1      	cbz	r1, bd8fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bd8d0:	2a01      	cmp	r2, #1
   bd8d2:	f101 0210 	add.w	r2, r1, #16
   bd8d6:	d10a      	bne.n	bd8ee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bd8d8:	4601      	mov	r1, r0
   bd8da:	f853 0b04 	ldr.w	r0, [r3], #4
   bd8de:	f841 0b04 	str.w	r0, [r1], #4
   bd8e2:	4293      	cmp	r3, r2
   bd8e4:	d1f9      	bne.n	bd8da <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bd8e6:	2301      	movs	r3, #1
   bd8e8:	6123      	str	r3, [r4, #16]
}
   bd8ea:	4620      	mov	r0, r4
   bd8ec:	bd10      	pop	{r4, pc}
   bd8ee:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bd8f0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bd8f4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bd8f8:	429a      	cmp	r2, r3
   bd8fa:	d1f9      	bne.n	bd8f0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bd8fc:	e7f3      	b.n	bd8e6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bd8fe:	2210      	movs	r2, #16
   bd900:	f004 fc8c 	bl	c221c <memset>
   bd904:	e7f1      	b.n	bd8ea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bd906 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bd906:	b538      	push	{r3, r4, r5, lr}
   bd908:	4604      	mov	r4, r0
   bd90a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bd90c:	461a      	mov	r2, r3
   bd90e:	f7ff ffdb 	bl	bd8c8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bd912:	81a5      	strh	r5, [r4, #12]
}
   bd914:	4620      	mov	r0, r4
   bd916:	bd38      	pop	{r3, r4, r5, pc}

000bd918 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bd918:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bd91a:	6902      	ldr	r2, [r0, #16]
   bd91c:	b922      	cbnz	r2, bd928 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bd91e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd920:	3800      	subs	r0, #0
   bd922:	bf18      	it	ne
   bd924:	2001      	movne	r0, #1
}
   bd926:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd928:	4902      	ldr	r1, [pc, #8]	; (bd934 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bd92a:	2210      	movs	r2, #16
   bd92c:	f004 fc3e 	bl	c21ac <memcmp>
   bd930:	e7f6      	b.n	bd920 <_ZNK8particle7BleUuid7isValidEv+0x8>
   bd932:	bf00      	nop
   bd934:	000c5986 	.word	0x000c5986

000bd938 <_ZNK8particle7BleUuid4typeEv>:
}
   bd938:	6900      	ldr	r0, [r0, #16]
   bd93a:	4770      	bx	lr

000bd93c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bd93c:	b538      	push	{r3, r4, r5, lr}
   bd93e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bd940:	2214      	movs	r2, #20
   bd942:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bd944:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bd946:	f004 fc69 	bl	c221c <memset>
    if (type_ == BleUuidType::SHORT) {
   bd94a:	6923      	ldr	r3, [r4, #16]
   bd94c:	b91b      	cbnz	r3, bd956 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bd94e:	89a3      	ldrh	r3, [r4, #12]
   bd950:	802b      	strh	r3, [r5, #0]
}
   bd952:	4628      	mov	r0, r5
   bd954:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bd956:	2301      	movs	r3, #1
   bd958:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bd95a:	4621      	mov	r1, r4
   bd95c:	462b      	mov	r3, r5
   bd95e:	f104 0210 	add.w	r2, r4, #16
   bd962:	f851 0b04 	ldr.w	r0, [r1], #4
   bd966:	f843 0b04 	str.w	r0, [r3], #4
   bd96a:	4291      	cmp	r1, r2
   bd96c:	d1f9      	bne.n	bd962 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bd96e:	e7f0      	b.n	bd952 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bd970 <_ZNK8particle7BleUuid7shortedEv>:
}
   bd970:	8980      	ldrh	r0, [r0, #12]
   bd972:	4770      	bx	lr

000bd974 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bd974:	4770      	bx	lr

000bd976 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bd976:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bd978:	6902      	ldr	r2, [r0, #16]
   bd97a:	690b      	ldr	r3, [r1, #16]
   bd97c:	429a      	cmp	r2, r3
   bd97e:	d106      	bne.n	bd98e <_ZNK8particle7BleUuideqERKS0_+0x18>
   bd980:	2210      	movs	r2, #16
   bd982:	f004 fc13 	bl	c21ac <memcmp>
   bd986:	fab0 f080 	clz	r0, r0
   bd98a:	0940      	lsrs	r0, r0, #5
}
   bd98c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bd98e:	2000      	movs	r0, #0
   bd990:	e7fc      	b.n	bd98c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bd994 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bd994:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bd996:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bd99a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd99c:	4b34      	ldr	r3, [pc, #208]	; (bda70 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bd99e:	460c      	mov	r4, r1
   bd9a0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bd9a2:	4602      	mov	r2, r0
   bd9a4:	f103 0110 	add.w	r1, r3, #16
   bd9a8:	f853 0b04 	ldr.w	r0, [r3], #4
   bd9ac:	f842 0b04 	str.w	r0, [r2], #4
   bd9b0:	428b      	cmp	r3, r1
   bd9b2:	d1f9      	bne.n	bd9a8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bd9b4:	b344      	cbz	r4, bda08 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bd9b6:	2124      	movs	r1, #36	; 0x24
   bd9b8:	4620      	mov	r0, r4
   bd9ba:	f004 fcfc 	bl	c23b6 <strnlen>
   bd9be:	2804      	cmp	r0, #4
   bd9c0:	f04f 0500 	mov.w	r5, #0
   bd9c4:	d123      	bne.n	bda0e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   bd9c6:	f8ad 5004 	strh.w	r5, [sp, #4]
   bd9ca:	af01      	add	r7, sp, #4
   bd9cc:	1ca5      	adds	r5, r4, #2
   bd9ce:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   bd9d0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   bd9d4:	f7ff ff0d 	bl	bd7f2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   bd9d8:	f1b0 0800 	subs.w	r8, r0, #0
   bd9dc:	db12      	blt.n	bda04 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   bd9de:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   bd9e2:	f7ff ff06 	bl	bd7f2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   bd9e6:	2800      	cmp	r0, #0
   bd9e8:	db0c      	blt.n	bda04 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   bd9ea:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bd9ec:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   bd9f0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bd9f2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   bd9f6:	d1eb      	bne.n	bd9d0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   bd9f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   bd9fc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   bd9fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bda02:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bda04:	2300      	movs	r3, #0
   bda06:	6133      	str	r3, [r6, #16]
}
   bda08:	b002      	add	sp, #8
   bda0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bda0e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bda12:	2124      	movs	r1, #36	; 0x24
   bda14:	4620      	mov	r0, r4
   bda16:	f004 fcce 	bl	c23b6 <strnlen>
   bda1a:	42a8      	cmp	r0, r5
   bda1c:	d807      	bhi.n	bda2e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bda1e:	4642      	mov	r2, r8
   bda20:	2100      	movs	r1, #0
   bda22:	4630      	mov	r0, r6
}
   bda24:	b002      	add	sp, #8
   bda26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bda2a:	f004 bbf7 	b.w	c221c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bda2e:	f1b8 0f00 	cmp.w	r8, #0
   bda32:	d0e9      	beq.n	bda08 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bda34:	5d60      	ldrb	r0, [r4, r5]
   bda36:	f7ff fedc 	bl	bd7f2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bda3a:	0603      	lsls	r3, r0, #24
   bda3c:	d415      	bmi.n	bda6a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bda3e:	0100      	lsls	r0, r0, #4
   bda40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bda44:	b2c7      	uxtb	r7, r0
   bda46:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bda4a:	2124      	movs	r1, #36	; 0x24
   bda4c:	4620      	mov	r0, r4
   bda4e:	f004 fcb2 	bl	c23b6 <strnlen>
   bda52:	3501      	adds	r5, #1
   bda54:	42a8      	cmp	r0, r5
   bda56:	d908      	bls.n	bda6a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bda58:	5d60      	ldrb	r0, [r4, r5]
   bda5a:	f7ff feca 	bl	bd7f2 <_ZN8particle11hexToNibbleEc>
   bda5e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bda60:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bda62:	bfa4      	itt	ge
   bda64:	4338      	orrge	r0, r7
   bda66:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bda6a:	3501      	adds	r5, #1
   bda6c:	e7d1      	b.n	bda12 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bda6e:	bf00      	nop
   bda70:	000c5966 	.word	0x000c5966

000bda74 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bda74:	b513      	push	{r0, r1, r4, lr}
   bda76:	4604      	mov	r4, r0
   bda78:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bda7a:	f7ff ff15 	bl	bd8a8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bda7e:	4620      	mov	r0, r4
   bda80:	9901      	ldr	r1, [sp, #4]
   bda82:	f7ff ff87 	bl	bd994 <_ZN8particle7BleUuid9constructEPKc>
}
   bda86:	4620      	mov	r0, r4
   bda88:	b002      	add	sp, #8
   bda8a:	bd10      	pop	{r4, pc}

000bda8c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bda8c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bda8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bda92:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bda94:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bda96:	8043      	strh	r3, [r0, #2]
   bda98:	220e      	movs	r2, #14
   bda9a:	4629      	mov	r1, r5
   bda9c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bda9e:	7105      	strb	r5, [r0, #4]
   bdaa0:	3006      	adds	r0, #6
   bdaa2:	f004 fbbb 	bl	c221c <memset>
   bdaa6:	f104 0014 	add.w	r0, r4, #20
   bdaaa:	f7ff fefd 	bl	bd8a8 <_ZN8particle7BleUuidC1Ev>
   bdaae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bdab2:	f7ff fef9 	bl	bd8a8 <_ZN8particle7BleUuidC1Ev>
   bdab6:	4904      	ldr	r1, [pc, #16]	; (bdac8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bdab8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bdabc:	f003 f94d 	bl	c0d5a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bdac0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bdac2:	4620      	mov	r0, r4
   bdac4:	bd38      	pop	{r3, r4, r5, pc}
   bdac6:	bf00      	nop
   bdac8:	000c5acb 	.word	0x000c5acb

000bdacc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bdacc:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bdace:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bdad2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bdad6:	4293      	cmp	r3, r2
   bdad8:	4618      	mov	r0, r3
   bdada:	d006      	beq.n	bdaea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bdadc:	6804      	ldr	r4, [r0, #0]
   bdade:	8824      	ldrh	r4, [r4, #0]
   bdae0:	428c      	cmp	r4, r1
   bdae2:	f103 0308 	add.w	r3, r3, #8
   bdae6:	d1f6      	bne.n	bdad6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bdae8:	bd10      	pop	{r4, pc}
        return nullptr;
   bdaea:	2000      	movs	r0, #0
   bdaec:	e7fc      	b.n	bdae8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bdaf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bdaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdaf2:	4606      	mov	r6, r0
   bdaf4:	b085      	sub	sp, #20
   bdaf6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bdaf8:	460d      	mov	r5, r1
   bdafa:	2900      	cmp	r1, #0
   bdafc:	d050      	beq.n	bdba0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bdafe:	2a00      	cmp	r2, #0
   bdb00:	d04e      	beq.n	bdba0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bdb02:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bdb04:	7823      	ldrb	r3, [r4, #0]
   bdb06:	2af4      	cmp	r2, #244	; 0xf4
   bdb08:	bf28      	it	cs
   bdb0a:	22f4      	movcs	r2, #244	; 0xf4
   bdb0c:	b343      	cbz	r3, bdb60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bdb0e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bdb10:	0798      	lsls	r0, r3, #30
   bdb12:	d509      	bpl.n	bdb28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bdb14:	89a0      	ldrh	r0, [r4, #12]
   bdb16:	9203      	str	r2, [sp, #12]
   bdb18:	2300      	movs	r3, #0
   bdb1a:	f7ff f9a5 	bl	bce68 <hal_ble_gatt_server_set_characteristic_value>
   bdb1e:	2800      	cmp	r0, #0
   bdb20:	9a03      	ldr	r2, [sp, #12]
   bdb22:	da03      	bge.n	bdb2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bdb24:	b005      	add	sp, #20
   bdb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bdb28:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bdb2c:	6834      	ldr	r4, [r6, #0]
   bdb2e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bdb30:	06d9      	lsls	r1, r3, #27
   bdb32:	d509      	bpl.n	bdb48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bdb34:	2f01      	cmp	r7, #1
   bdb36:	d007      	beq.n	bdb48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdb38:	89a0      	ldrh	r0, [r4, #12]
   bdb3a:	2300      	movs	r3, #0
   bdb3c:	4629      	mov	r1, r5
}
   bdb3e:	b005      	add	sp, #20
   bdb40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdb44:	f7ff b9c2 	b.w	bcecc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bdb48:	069b      	lsls	r3, r3, #26
   bdb4a:	d5eb      	bpl.n	bdb24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bdb4c:	2f02      	cmp	r7, #2
   bdb4e:	d0e9      	beq.n	bdb24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdb50:	89a0      	ldrh	r0, [r4, #12]
   bdb52:	2300      	movs	r3, #0
   bdb54:	4629      	mov	r1, r5
}
   bdb56:	b005      	add	sp, #20
   bdb58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdb5c:	f7ff b9c0 	b.w	bcee0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bdb60:	8860      	ldrh	r0, [r4, #2]
   bdb62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bdb66:	4288      	cmp	r0, r1
   bdb68:	d01c      	beq.n	bdba4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bdb6a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bdb6c:	074e      	lsls	r6, r1, #29
   bdb6e:	d501      	bpl.n	bdb74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bdb70:	2f01      	cmp	r7, #1
   bdb72:	d104      	bne.n	bdb7e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bdb74:	070b      	lsls	r3, r1, #28
   bdb76:	d409      	bmi.n	bdb8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bdb78:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bdb7c:	e7d2      	b.n	bdb24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bdb7e:	89a1      	ldrh	r1, [r4, #12]
   bdb80:	9300      	str	r3, [sp, #0]
   bdb82:	4613      	mov	r3, r2
   bdb84:	462a      	mov	r2, r5
   bdb86:	f7ff f983 	bl	bce90 <hal_ble_gatt_client_write_without_response>
   bdb8a:	e7cb      	b.n	bdb24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bdb8c:	2f02      	cmp	r7, #2
   bdb8e:	d0f3      	beq.n	bdb78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bdb90:	2300      	movs	r3, #0
   bdb92:	89a1      	ldrh	r1, [r4, #12]
   bdb94:	9300      	str	r3, [sp, #0]
   bdb96:	4613      	mov	r3, r2
   bdb98:	462a      	mov	r2, r5
   bdb9a:	f7ff f96f 	bl	bce7c <hal_ble_gatt_client_write_with_response>
   bdb9e:	e7c1      	b.n	bdb24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bdba0:	4802      	ldr	r0, [pc, #8]	; (bdbac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bdba2:	e7bf      	b.n	bdb24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bdba4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bdba8:	e7bc      	b.n	bdb24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bdbaa:	bf00      	nop
   bdbac:	fffffef2 	.word	0xfffffef2

000bdbb0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bdbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdbb4:	2600      	movs	r6, #0
   bdbb6:	6006      	str	r6, [r0, #0]
   bdbb8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bdbba:	2028      	movs	r0, #40	; 0x28
   bdbbc:	460c      	mov	r4, r1
   bdbbe:	f7f6 fa6a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdbc2:	1e05      	subs	r5, r0, #0
   bdbc4:	f105 080c 	add.w	r8, r5, #12
   bdbc8:	d00f      	beq.n	bdbea <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bdbca:	2301      	movs	r3, #1
   bdbcc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bdbd0:	4b08      	ldr	r3, [pc, #32]	; (bdbf4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bdbd2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bdbd4:	4640      	mov	r0, r8
   bdbd6:	f7ff fe67 	bl	bd8a8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bdbda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bdbdc:	622e      	str	r6, [r5, #32]
   bdbde:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bdbe2:	4646      	mov	r6, r8
   bdbe4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bdbe6:	6823      	ldr	r3, [r4, #0]
   bdbe8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bdbea:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdbee:	4638      	mov	r0, r7
   bdbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdbf4:	000c5928 	.word	0x000c5928

000bdbf8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bdbf8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdbfa:	2500      	movs	r5, #0
   bdbfc:	6005      	str	r5, [r0, #0]
   bdbfe:	4606      	mov	r6, r0
   bdc00:	2030      	movs	r0, #48	; 0x30
   bdc02:	f7f6 fa48 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdc06:	4604      	mov	r4, r0
   bdc08:	b188      	cbz	r0, bdc2e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bdc0a:	2301      	movs	r3, #1
   bdc0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bdc10:	4b09      	ldr	r3, [pc, #36]	; (bdc38 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bdc12:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bdc14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdc18:	8183      	strh	r3, [r0, #12]
   bdc1a:	300e      	adds	r0, #14
   bdc1c:	f7ff fe39 	bl	bd892 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bdc20:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bdc24:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bdc28:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bdc2c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bdc2e:	6074      	str	r4, [r6, #4]
   bdc30:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bdc32:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdc34:	4630      	mov	r0, r6
   bdc36:	bd70      	pop	{r4, r5, r6, pc}
   bdc38:	000c5944 	.word	0x000c5944

000bdc3c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bdc3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdc3e:	460d      	mov	r5, r1
   bdc40:	4604      	mov	r4, r0
    WiringBleLock lk;
   bdc42:	a801      	add	r0, sp, #4
   bdc44:	f7ff fdea 	bl	bd81c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bdc48:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bdc4a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bdc4e:	6023      	str	r3, [r4, #0]
   bdc50:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bdc54:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bdc56:	a801      	add	r0, sp, #4
   bdc58:	f7ff fdee 	bl	bd838 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bdc5c:	4620      	mov	r0, r4
   bdc5e:	b003      	add	sp, #12
   bdc60:	bd30      	pop	{r4, r5, pc}

000bdc62 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bdc62:	b530      	push	{r4, r5, lr}
   bdc64:	4605      	mov	r5, r0
   bdc66:	b087      	sub	sp, #28
   bdc68:	460c      	mov	r4, r1
    WiringBleLock lk;
   bdc6a:	a801      	add	r0, sp, #4
   bdc6c:	f7ff fdd6 	bl	bd81c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bdc70:	682a      	ldr	r2, [r5, #0]
   bdc72:	6823      	ldr	r3, [r4, #0]
   bdc74:	8812      	ldrh	r2, [r2, #0]
   bdc76:	881b      	ldrh	r3, [r3, #0]
   bdc78:	429a      	cmp	r2, r3
   bdc7a:	d10d      	bne.n	bdc98 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bdc7c:	4629      	mov	r1, r5
   bdc7e:	a802      	add	r0, sp, #8
   bdc80:	f7ff ffdc 	bl	bdc3c <_ZNK8particle13BlePeerDevice7addressEv>
   bdc84:	4621      	mov	r1, r4
   bdc86:	a804      	add	r0, sp, #16
   bdc88:	f7ff ffd8 	bl	bdc3c <_ZNK8particle13BlePeerDevice7addressEv>
   bdc8c:	a904      	add	r1, sp, #16
   bdc8e:	a802      	add	r0, sp, #8
   bdc90:	f7ff fdeb 	bl	bd86a <_ZNK8particle10BleAddresseqERKS0_>
   bdc94:	4604      	mov	r4, r0
   bdc96:	b900      	cbnz	r0, bdc9a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bdc98:	2400      	movs	r4, #0
    WiringBleLock lk;
   bdc9a:	a801      	add	r0, sp, #4
   bdc9c:	f7ff fdcc 	bl	bd838 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bdca0:	4620      	mov	r0, r4
   bdca2:	b007      	add	sp, #28
   bdca4:	bd30      	pop	{r4, r5, pc}
	...

000bdca8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bdca8:	b510      	push	{r4, lr}
   bdcaa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bdcac:	2064      	movs	r0, #100	; 0x64
   bdcae:	f7f6 f9f2 	bl	b4096 <_Znwj>
   bdcb2:	b168      	cbz	r0, bdcd0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bdcb4:	2300      	movs	r3, #0
   bdcb6:	e9c0 3300 	strd	r3, r3, [r0]
   bdcba:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bdcbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bdcc2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bdcc6:	6203      	str	r3, [r0, #32]
   bdcc8:	62c3      	str	r3, [r0, #44]	; 0x2c
   bdcca:	63c3      	str	r3, [r0, #60]	; 0x3c
   bdccc:	64c3      	str	r3, [r0, #76]	; 0x4c
   bdcce:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bdcd0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bdcd2:	b920      	cbnz	r0, bdcde <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bdcd4:	4a0a      	ldr	r2, [pc, #40]	; (bdd00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bdcd6:	490b      	ldr	r1, [pc, #44]	; (bdd04 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bdcd8:	200a      	movs	r0, #10
   bdcda:	f7ff fb43 	bl	bd364 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bdcde:	2000      	movs	r0, #0
   bdce0:	f7ff f886 	bl	bcdf0 <hal_ble_stack_init>
   bdce4:	b120      	cbz	r0, bdcf0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bdce6:	4a06      	ldr	r2, [pc, #24]	; (bdd00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bdce8:	4907      	ldr	r1, [pc, #28]	; (bdd08 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bdcea:	200a      	movs	r0, #10
   bdcec:	f7ff fb3a 	bl	bd364 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bdcf0:	6821      	ldr	r1, [r4, #0]
   bdcf2:	4806      	ldr	r0, [pc, #24]	; (bdd0c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bdcf4:	2200      	movs	r2, #0
   bdcf6:	f7ff f8df 	bl	bceb8 <hal_ble_set_callback_on_periph_link_events>
}
   bdcfa:	4620      	mov	r0, r4
   bdcfc:	bd10      	pop	{r4, pc}
   bdcfe:	bf00      	nop
   bdd00:	000bcfb5 	.word	0x000bcfb5
   bdd04:	000c57b5 	.word	0x000c57b5
   bdd08:	000c57f3 	.word	0x000c57f3
   bdd0c:	000be2cd 	.word	0x000be2cd

000bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bdd10:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bdd12:	4c0a      	ldr	r4, [pc, #40]	; (bdd3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bdd14:	7823      	ldrb	r3, [r4, #0]
   bdd16:	f3bf 8f5b 	dmb	ish
   bdd1a:	07db      	lsls	r3, r3, #31
   bdd1c:	d40c      	bmi.n	bdd38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bdd1e:	4620      	mov	r0, r4
   bdd20:	f7f6 f9ce 	bl	b40c0 <__cxa_guard_acquire>
   bdd24:	b140      	cbz	r0, bdd38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bdd26:	4806      	ldr	r0, [pc, #24]	; (bdd40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bdd28:	f7ff ffbe 	bl	bdca8 <_ZN8particle14BleLocalDeviceC1Ev>
   bdd2c:	4620      	mov	r0, r4
   bdd2e:	f7f6 f9cc 	bl	b40ca <__cxa_guard_release>
   bdd32:	4804      	ldr	r0, [pc, #16]	; (bdd44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bdd34:	f004 fa24 	bl	c2180 <atexit>
    return instance;
}
   bdd38:	4801      	ldr	r0, [pc, #4]	; (bdd40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bdd3a:	bd10      	pop	{r4, pc}
   bdd3c:	2003e620 	.word	0x2003e620
   bdd40:	2003e62c 	.word	0x2003e62c
   bdd44:	000bdf85 	.word	0x000bdf85

000bdd48 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bdd48:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bdd4a:	6803      	ldr	r3, [r0, #0]
   bdd4c:	3b09      	subs	r3, #9
   bdd4e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bdd50:	b08d      	sub	sp, #52	; 0x34
   bdd52:	4604      	mov	r4, r0
   bdd54:	460d      	mov	r5, r1
    switch (event->type) {
   bdd56:	d811      	bhi.n	bdd7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bdd58:	f7ff ffda 	bl	bdd10 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bdd5c:	88a1      	ldrh	r1, [r4, #4]
   bdd5e:	6800      	ldr	r0, [r0, #0]
   bdd60:	f7ff feb4 	bl	bdacc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   bdd64:	4603      	mov	r3, r0
   bdd66:	b958      	cbnz	r0, bdd80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   bdd68:	2220      	movs	r2, #32
   bdd6a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bdd6e:	4a0b      	ldr	r2, [pc, #44]	; (bdd9c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bdd70:	9200      	str	r2, [sp, #0]
   bdd72:	490b      	ldr	r1, [pc, #44]	; (bdda0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bdd74:	aa04      	add	r2, sp, #16
   bdd76:	2032      	movs	r0, #50	; 0x32
   bdd78:	f7ff fafc 	bl	bd374 <log_message>
}
   bdd7c:	b00d      	add	sp, #52	; 0x34
   bdd7e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bdd80:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bdd82:	2a00      	cmp	r2, #0
   bdd84:	d0fa      	beq.n	bdd7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bdd86:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bdd8a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bdd8e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bdd92:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bdd94:	aa04      	add	r2, sp, #16
   bdd96:	a903      	add	r1, sp, #12
   bdd98:	47a0      	blx	r4
}
   bdd9a:	e7ef      	b.n	bdd7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bdd9c:	000c5835 	.word	0x000c5835
   bdda0:	000c57cc 	.word	0x000c57cc

000bdda4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bdda4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bdda6:	2000      	movs	r0, #0
   bdda8:	f7ff f822 	bl	bcdf0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bddac:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bddb0:	bd08      	pop	{r3, pc}

000bddb2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bddb2:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bddb4:	2100      	movs	r1, #0
   bddb6:	f7ff b823 	b.w	bce00 <hal_ble_gap_set_tx_power>

000bddba <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bddba:	b919      	cbnz	r1, bddc4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bddbc:	460a      	mov	r2, r1
   bddbe:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bddc0:	f7ff b826 	b.w	bce10 <hal_ble_gap_set_advertising_data>
   bddc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bddc8:	2200      	movs	r2, #0
   bddca:	e7f9      	b.n	bddc0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bddcc <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bddcc:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bddce:	69d8      	ldr	r0, [r3, #28]
}
   bddd0:	2800      	cmp	r0, #0
   bddd2:	bfd4      	ite	le
   bddd4:	2000      	movle	r0, #0
   bddd6:	2001      	movgt	r0, #1
   bddd8:	4770      	bx	lr

000bddda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bddda:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bdddc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdde0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bdde2:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bdde6:	42ae      	cmp	r6, r5
   bdde8:	d004      	beq.n	bddf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bddea:	4628      	mov	r0, r5
   bddec:	f002 ff6a 	bl	c0cc4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bddf0:	3510      	adds	r5, #16
   bddf2:	e7f8      	b.n	bdde6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bddf4:	6820      	ldr	r0, [r4, #0]
   bddf6:	f7ff fbc3 	bl	bd580 <free>
}
   bddfa:	4620      	mov	r0, r4
   bddfc:	bd70      	pop	{r4, r5, r6, pc}

000bddfe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bddfe:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bde00:	1e14      	subs	r4, r2, #0
   bde02:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bde04:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bde06:	db02      	blt.n	bde0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bde08:	1862      	adds	r2, r4, r1
   bde0a:	429a      	cmp	r2, r3
   bde0c:	dd00      	ble.n	bde10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bde0e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bde10:	682a      	ldr	r2, [r5, #0]
   bde12:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bde14:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bde16:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bde18:	1a52      	subs	r2, r2, r1
   bde1a:	f004 f9e5 	bl	c21e8 <memmove>
    size_ -= n;
   bde1e:	686a      	ldr	r2, [r5, #4]
   bde20:	1b12      	subs	r2, r2, r4
   bde22:	606a      	str	r2, [r5, #4]
}
   bde24:	bd38      	pop	{r3, r4, r5, pc}

000bde26 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bde26:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bde28:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bde2a:	4604      	mov	r4, r0
   bde2c:	460d      	mov	r5, r1
   bde2e:	ab01      	add	r3, sp, #4
   bde30:	e9d0 0100 	ldrd	r0, r1, [r0]
   bde34:	f7ff fc72 	bl	bd71c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bde38:	4602      	mov	r2, r0
   bde3a:	b138      	cbz	r0, bde4c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bde3c:	9901      	ldr	r1, [sp, #4]
   bde3e:	4620      	mov	r0, r4
   bde40:	f7ff ffdd 	bl	bddfe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bde44:	4629      	mov	r1, r5
   bde46:	4620      	mov	r0, r4
   bde48:	f7ff ffed 	bl	bde26 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bde4c:	b003      	add	sp, #12
   bde4e:	bd30      	pop	{r4, r5, pc}

000bde50 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bde50:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bde52:	460c      	mov	r4, r1
   bde54:	b929      	cbnz	r1, bde62 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bde56:	460a      	mov	r2, r1
   bde58:	4608      	mov	r0, r1
}
   bde5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bde5e:	f7fe bfdf 	b.w	bce20 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   bde62:	2101      	movs	r1, #1
   bde64:	4620      	mov	r0, r4
   bde66:	f7ff ffde 	bl	bde26 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bde6a:	e9d4 0100 	ldrd	r0, r1, [r4]
   bde6e:	2200      	movs	r2, #0
   bde70:	e7f3      	b.n	bde5a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000bde72 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   bde72:	b538      	push	{r3, r4, r5, lr}
   bde74:	4604      	mov	r4, r0
   bde76:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   bde78:	f7ff ff9f 	bl	bddba <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   bde7c:	2800      	cmp	r0, #0
   bde7e:	db0a      	blt.n	bde96 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   bde80:	4629      	mov	r1, r5
   bde82:	4620      	mov	r0, r4
   bde84:	f7ff ffe4 	bl	bde50 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   bde88:	2800      	cmp	r0, #0
   bde8a:	db04      	blt.n	bde96 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   bde8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bde90:	2000      	movs	r0, #0
   bde92:	f7fe bfcd 	b.w	bce30 <hal_ble_gap_start_advertising>
}
   bde96:	bd38      	pop	{r3, r4, r5, pc}

000bde98 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bde98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bde9a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bde9c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bde9e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdea0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bdea2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdea4:	f7f6 f8f7 	bl	b4096 <_Znwj>
   bdea8:	b118      	cbz	r0, bdeb2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bdeaa:	682b      	ldr	r3, [r5, #0]
   bdeac:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bdeae:	686b      	ldr	r3, [r5, #4]
   bdeb0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bdeb2:	4b03      	ldr	r3, [pc, #12]	; (bdec0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bdeb4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bdeb6:	4b03      	ldr	r3, [pc, #12]	; (bdec4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdeb8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bdeba:	60a3      	str	r3, [r4, #8]
      }
   bdebc:	4620      	mov	r0, r4
   bdebe:	bd38      	pop	{r3, r4, r5, pc}
   bdec0:	000bd75d 	.word	0x000bd75d
   bdec4:	000bd775 	.word	0x000bd775

000bdec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bdec8:	680b      	ldr	r3, [r1, #0]
   bdeca:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bdecc:	b113      	cbz	r3, bded4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bdece:	685a      	ldr	r2, [r3, #4]
   bded0:	3201      	adds	r2, #1
   bded2:	605a      	str	r2, [r3, #4]
      }
   bded4:	4770      	bx	lr

000bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bded6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bded8:	f851 3b04 	ldr.w	r3, [r1], #4
   bdedc:	4604      	mov	r4, r0
   bdede:	f840 3b04 	str.w	r3, [r0], #4
   bdee2:	f7ff fff1 	bl	bdec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bdee6:	6823      	ldr	r3, [r4, #0]
   bdee8:	b90b      	cbnz	r3, bdeee <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bdeea:	f7ff fc2d 	bl	bd748 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bdeee:	4620      	mov	r0, r4
   bdef0:	bd10      	pop	{r4, pc}

000bdef2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bdef2:	b510      	push	{r4, lr}
   bdef4:	f851 3b04 	ldr.w	r3, [r1], #4
   bdef8:	4604      	mov	r4, r0
   bdefa:	f840 3b04 	str.w	r3, [r0], #4
   bdefe:	f7ff ffe3 	bl	bdec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bdf02:	4620      	mov	r0, r4
   bdf04:	bd10      	pop	{r4, pc}

000bdf06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bdf06:	b510      	push	{r4, lr}
   bdf08:	f851 3b04 	ldr.w	r3, [r1], #4
   bdf0c:	4604      	mov	r4, r0
   bdf0e:	f840 3b04 	str.w	r3, [r0], #4
   bdf12:	f7ff ffd9 	bl	bdec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bdf16:	4620      	mov	r0, r4
   bdf18:	bd10      	pop	{r4, pc}

000bdf1a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bdf1a:	b510      	push	{r4, lr}
   bdf1c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bdf1e:	3004      	adds	r0, #4
   bdf20:	f7f7 f92c 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bdf24:	4620      	mov	r0, r4
   bdf26:	bd10      	pop	{r4, pc}

000bdf28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdf28:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bdf2a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdf2e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bdf30:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bdf34:	42ae      	cmp	r6, r5
   bdf36:	d004      	beq.n	bdf42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bdf38:	1d28      	adds	r0, r5, #4
   bdf3a:	f7f7 f91f 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdf3e:	3508      	adds	r5, #8
   bdf40:	e7f8      	b.n	bdf34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bdf42:	6820      	ldr	r0, [r4, #0]
   bdf44:	f7ff fb1c 	bl	bd580 <free>
}
   bdf48:	4620      	mov	r0, r4
   bdf4a:	bd70      	pop	{r4, r5, r6, pc}

000bdf4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdf4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bdf4e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdf52:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bdf54:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bdf58:	42ae      	cmp	r6, r5
   bdf5a:	d004      	beq.n	bdf66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bdf5c:	1d28      	adds	r0, r5, #4
   bdf5e:	f7f7 f90d 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdf62:	3508      	adds	r5, #8
   bdf64:	e7f8      	b.n	bdf58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bdf66:	6820      	ldr	r0, [r4, #0]
   bdf68:	f7ff fb0a 	bl	bd580 <free>
}
   bdf6c:	4620      	mov	r0, r4
   bdf6e:	bd70      	pop	{r4, r5, r6, pc}

000bdf70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bdf70:	b510      	push	{r4, lr}
   bdf72:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bdf74:	3024      	adds	r0, #36	; 0x24
   bdf76:	f7ff ffe9 	bl	bdf4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bdf7a:	f104 0018 	add.w	r0, r4, #24
   bdf7e:	f7ff ffd3 	bl	bdf28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bdf82:	bd10      	pop	{r4, pc}

000bdf84 <__tcf_0>:
    static BleLocalDevice instance;
   bdf84:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bdf86:	4b17      	ldr	r3, [pc, #92]	; (bdfe4 <__tcf_0+0x60>)
   bdf88:	681c      	ldr	r4, [r3, #0]
   bdf8a:	b354      	cbz	r4, bdfe2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bdf8c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bdf90:	f7f6 fa04 	bl	b439c <_ZNSt14_Function_baseD1Ev>
   bdf94:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bdf98:	f7f6 fa00 	bl	b439c <_ZNSt14_Function_baseD1Ev>
   bdf9c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bdfa0:	f7f6 f9fc 	bl	b439c <_ZNSt14_Function_baseD1Ev>
   bdfa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bdfa8:	f7f6 f9f8 	bl	b439c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bdfac:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bdfb0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bdfb4:	42ae      	cmp	r6, r5
   bdfb6:	d004      	beq.n	bdfc2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bdfb8:	1d28      	adds	r0, r5, #4
   bdfba:	f7f7 f8df 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bdfbe:	3508      	adds	r5, #8
   bdfc0:	e7f8      	b.n	bdfb4 <__tcf_0+0x30>
    ::free(ptr);
   bdfc2:	69a0      	ldr	r0, [r4, #24]
   bdfc4:	f7ff fadc 	bl	bd580 <free>
    ~BleLocalDeviceImpl() = default;
   bdfc8:	f104 000c 	add.w	r0, r4, #12
   bdfcc:	f7ff ffbe 	bl	bdf4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bdfd0:	4620      	mov	r0, r4
   bdfd2:	f7ff ffa9 	bl	bdf28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bdfd6:	4620      	mov	r0, r4
   bdfd8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bdfda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bdfde:	f7f6 b860 	b.w	b40a2 <_ZdlPvj>
   bdfe2:	bd70      	pop	{r4, r5, r6, pc}
   bdfe4:	2003e62c 	.word	0x2003e62c

000bdfe8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bdfe8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bdfea:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bdfec:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bdff0:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bdff4:	6803      	ldr	r3, [r0, #0]
   bdff6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bdff8:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bdffa:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bdffc:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bdffe:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   be000:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   be002:	f7f7 f8bb 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   be006:	b002      	add	sp, #8
   be008:	bd10      	pop	{r4, pc}

000be00a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   be00a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   be00c:	b510      	push	{r4, lr}
      if (_M_empty())
   be00e:	b90a      	cbnz	r2, be014 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   be010:	f003 fa7e 	bl	c1510 <_ZSt25__throw_bad_function_callv>
    }
   be014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be018:	68c3      	ldr	r3, [r0, #12]
   be01a:	4718      	bx	r3

000be01c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   be01c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   be01e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   be020:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be022:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be024:	dd03      	ble.n	be02e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   be026:	f7ff fab3 	bl	bd590 <realloc>
            if (!d) {
   be02a:	b918      	cbnz	r0, be034 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   be02c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   be02e:	f7ff faa7 	bl	bd580 <free>
        T* d = nullptr;
   be032:	2000      	movs	r0, #0
        data_ = d;
   be034:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be036:	60a5      	str	r5, [r4, #8]
        return true;
   be038:	2001      	movs	r0, #1
   be03a:	e7f7      	b.n	be02c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000be03c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   be03c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   be03e:	6883      	ldr	r3, [r0, #8]
   be040:	428b      	cmp	r3, r1
   be042:	da02      	bge.n	be04a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   be044:	f7ff ffea 	bl	be01c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   be048:	bd08      	pop	{r3, pc}
    return true;
   be04a:	2001      	movs	r0, #1
   be04c:	e7fc      	b.n	be048 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000be04e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be052:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be054:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be056:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be058:	4419      	add	r1, r3
   be05a:	6883      	ldr	r3, [r0, #8]
   be05c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be05e:	4604      	mov	r4, r0
   be060:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be062:	dc12      	bgt.n	be08a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   be064:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be066:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be068:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   be06a:	1bd2      	subs	r2, r2, r7
   be06c:	4631      	mov	r1, r6
   be06e:	1970      	adds	r0, r6, r5
   be070:	f004 f8ba 	bl	c21e8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   be074:	462a      	mov	r2, r5
   be076:	4641      	mov	r1, r8
   be078:	4630      	mov	r0, r6
   be07a:	f004 f8a7 	bl	c21cc <memcpy>
    size_ += n;
   be07e:	6863      	ldr	r3, [r4, #4]
   be080:	442b      	add	r3, r5
   be082:	6063      	str	r3, [r4, #4]
    return true;
   be084:	2001      	movs	r0, #1
}
   be086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be08a:	f7ff ffc7 	bl	be01c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be08e:	2800      	cmp	r0, #0
   be090:	d1e8      	bne.n	be064 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   be092:	e7f8      	b.n	be086 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000be094 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be096:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be098:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   be09c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be09e:	4604      	mov	r4, r0
   be0a0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be0a2:	da0b      	bge.n	be0bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   be0a4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be0a6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be0a8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   be0aa:	1b52      	subs	r2, r2, r5
   be0ac:	1c48      	adds	r0, r1, #1
   be0ae:	f004 f89b 	bl	c21e8 <memmove>
    new(p) T(std::move(value));
   be0b2:	557e      	strb	r6, [r7, r5]
    ++size_;
   be0b4:	6863      	ldr	r3, [r4, #4]
   be0b6:	3301      	adds	r3, #1
   be0b8:	6063      	str	r3, [r4, #4]
}
   be0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be0bc:	3101      	adds	r1, #1
   be0be:	f7ff ffad 	bl	be01c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be0c2:	2800      	cmp	r0, #0
   be0c4:	d1ee      	bne.n	be0a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   be0c6:	e7f8      	b.n	be0ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000be0c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be0c8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   be0ca:	6841      	ldr	r1, [r0, #4]
   be0cc:	f7ff bfe2 	b.w	be094 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000be0d0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be0d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be0d4:	4604      	mov	r4, r0
   be0d6:	461d      	mov	r5, r3
   be0d8:	460f      	mov	r7, r1
   be0da:	ab01      	add	r3, sp, #4
   be0dc:	4690      	mov	r8, r2
   be0de:	460a      	mov	r2, r1
   be0e0:	e9d0 0100 	ldrd	r0, r1, [r0]
   be0e4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   be0e8:	f7ff fb18 	bl	bd71c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   be0ec:	1cae      	adds	r6, r5, #2
   be0ee:	6863      	ldr	r3, [r4, #4]
   be0f0:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   be0f2:	f1b9 0f00 	cmp.w	r9, #0
   be0f6:	d126      	bne.n	be146 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   be0f8:	b328      	cbz	r0, be146 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be0fa:	4433      	add	r3, r6
   be0fc:	1a1b      	subs	r3, r3, r0
   be0fe:	2bff      	cmp	r3, #255	; 0xff
   be100:	d809      	bhi.n	be116 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   be102:	9901      	ldr	r1, [sp, #4]
   be104:	4620      	mov	r0, r4
   be106:	f7ff fe7a 	bl	bddfe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be10a:	6861      	ldr	r1, [r4, #4]
   be10c:	4620      	mov	r0, r4
   be10e:	4431      	add	r1, r6
   be110:	f7ff ff94 	bl	be03c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be114:	b918      	cbnz	r0, be11e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   be116:	6860      	ldr	r0, [r4, #4]
}
   be118:	b003      	add	sp, #12
   be11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   be11e:	1c6a      	adds	r2, r5, #1
   be120:	9901      	ldr	r1, [sp, #4]
   be122:	b2d2      	uxtb	r2, r2
   be124:	4620      	mov	r0, r4
   be126:	f7ff ffb5 	bl	be094 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   be12a:	9901      	ldr	r1, [sp, #4]
   be12c:	463a      	mov	r2, r7
   be12e:	3101      	adds	r1, #1
   be130:	4620      	mov	r0, r4
   be132:	f7ff ffaf 	bl	be094 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   be136:	9901      	ldr	r1, [sp, #4]
   be138:	462b      	mov	r3, r5
   be13a:	4642      	mov	r2, r8
   be13c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   be13e:	4620      	mov	r0, r4
   be140:	f7ff ff85 	bl	be04e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   be144:	e7e7      	b.n	be116 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be146:	18f1      	adds	r1, r6, r3
   be148:	29ff      	cmp	r1, #255	; 0xff
   be14a:	d8e4      	bhi.n	be116 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be14c:	4620      	mov	r0, r4
   be14e:	f7ff ff75 	bl	be03c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be152:	2800      	cmp	r0, #0
   be154:	d0df      	beq.n	be116 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   be156:	1c69      	adds	r1, r5, #1
   be158:	b2c9      	uxtb	r1, r1
   be15a:	4620      	mov	r0, r4
   be15c:	f7ff ffb4 	bl	be0c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   be160:	4639      	mov	r1, r7
   be162:	4620      	mov	r0, r4
   be164:	f7ff ffb0 	bl	be0c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   be168:	6861      	ldr	r1, [r4, #4]
   be16a:	462b      	mov	r3, r5
   be16c:	4642      	mov	r2, r8
   be16e:	e7e6      	b.n	be13e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000be170 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be170:	b430      	push	{r4, r5}
   be172:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   be176:	b11a      	cbz	r2, be180 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   be178:	9502      	str	r5, [sp, #8]
}
   be17a:	bc30      	pop	{r4, r5}
   be17c:	f7ff bfa8 	b.w	be0d0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   be180:	6840      	ldr	r0, [r0, #4]
}
   be182:	bc30      	pop	{r4, r5}
   be184:	4770      	bx	lr

000be186 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   be186:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   be188:	2300      	movs	r3, #0
   be18a:	e9c0 3300 	strd	r3, r3, [r0]
   be18e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be190:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be192:	9300      	str	r3, [sp, #0]
   be194:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be196:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be19a:	4619      	mov	r1, r3
   be19c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   be1a0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be1a2:	f7ff ffe5 	bl	be170 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be1a6:	4620      	mov	r0, r4
   be1a8:	b004      	add	sp, #16
   be1aa:	bd10      	pop	{r4, pc}

000be1ac <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   be1ac:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   be1ae:	9300      	str	r3, [sp, #0]
   be1b0:	4613      	mov	r3, r2
   be1b2:	460a      	mov	r2, r1
   be1b4:	21ff      	movs	r1, #255	; 0xff
   be1b6:	f7ff ffdb 	bl	be170 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be1ba:	b003      	add	sp, #12
   be1bc:	f85d fb04 	ldr.w	pc, [sp], #4

000be1c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be1c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be1c4:	4604      	mov	r4, r0
   be1c6:	460d      	mov	r5, r1
   be1c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be1ca:	d914      	bls.n	be1f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be1cc:	4290      	cmp	r0, r2
   be1ce:	d213      	bcs.n	be1f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be1d0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be1d4:	1a75      	subs	r5, r6, r1
   be1d6:	f1a1 0708 	sub.w	r7, r1, #8
   be1da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be1dc:	42b7      	cmp	r7, r6
   be1de:	d018      	beq.n	be212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be1e0:	b11c      	cbz	r4, be1ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be1e2:	4631      	mov	r1, r6
   be1e4:	4620      	mov	r0, r4
   be1e6:	f7ff fe8e 	bl	bdf06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   be1ea:	1d30      	adds	r0, r6, #4
   be1ec:	f7f6 ffc6 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be1f0:	3e08      	subs	r6, #8
   be1f2:	3c08      	subs	r4, #8
   be1f4:	e7f2      	b.n	be1dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be1f6:	d00c      	beq.n	be212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be1f8:	42b5      	cmp	r5, r6
   be1fa:	d00a      	beq.n	be212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be1fc:	b11c      	cbz	r4, be206 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be1fe:	4629      	mov	r1, r5
   be200:	4620      	mov	r0, r4
   be202:	f7ff fe80 	bl	bdf06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be206:	1d28      	adds	r0, r5, #4
   be208:	f7f6 ffb8 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be20c:	3508      	adds	r5, #8
   be20e:	3408      	adds	r4, #8
   be210:	e7f2      	b.n	be1f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be214 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be216:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be218:	6846      	ldr	r6, [r0, #4]
   be21a:	4668      	mov	r0, sp
   be21c:	f7ff fe73 	bl	bdf06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be220:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   be224:	429f      	cmp	r7, r3
   be226:	db12      	blt.n	be24e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   be228:	3701      	adds	r7, #1
        if (n > 0) {
   be22a:	2f00      	cmp	r7, #0
   be22c:	dd29      	ble.n	be282 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   be22e:	00f8      	lsls	r0, r7, #3
   be230:	f7ff f99e 	bl	bd570 <malloc>
            if (!d) {
   be234:	4605      	mov	r5, r0
   be236:	b1f0      	cbz	r0, be276 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   be238:	e9d4 1200 	ldrd	r1, r2, [r4]
   be23c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be240:	f7ff ffbe 	bl	be1c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be244:	6820      	ldr	r0, [r4, #0]
   be246:	f7ff f99b 	bl	bd580 <free>
        data_ = d;
   be24a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   be24c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be24e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be250:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be252:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   be256:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be25a:	4631      	mov	r1, r6
   be25c:	f106 0008 	add.w	r0, r6, #8
   be260:	f7ff ffae 	bl	be1c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be264:	b11e      	cbz	r6, be26e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   be266:	4669      	mov	r1, sp
   be268:	4630      	mov	r0, r6
   be26a:	f7ff fe4c 	bl	bdf06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   be26e:	6863      	ldr	r3, [r4, #4]
   be270:	3301      	adds	r3, #1
   be272:	6063      	str	r3, [r4, #4]
    return true;
   be274:	2501      	movs	r5, #1
   be276:	a801      	add	r0, sp, #4
   be278:	f7f6 ff80 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be27c:	4628      	mov	r0, r5
   be27e:	b003      	add	sp, #12
   be280:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   be282:	2500      	movs	r5, #0
   be284:	e7de      	b.n	be244 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000be286 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   be288:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be28c:	4605      	mov	r5, r0
   be28e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   be290:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   be294:	42a6      	cmp	r6, r4
   be296:	d005      	beq.n	be2a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   be298:	4639      	mov	r1, r7
   be29a:	4620      	mov	r0, r4
   be29c:	f7ff fce1 	bl	bdc62 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   be2a0:	b108      	cbz	r0, be2a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   be2a2:	b914      	cbnz	r4, be2aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   be2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   be2a6:	3408      	adds	r4, #8
   be2a8:	e7f4      	b.n	be294 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   be2aa:	1d20      	adds	r0, r4, #4
   be2ac:	f7f6 ff66 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   be2b0:	e9d5 3200 	ldrd	r3, r2, [r5]
   be2b4:	f104 0108 	add.w	r1, r4, #8
   be2b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be2bc:	4620      	mov	r0, r4
   be2be:	f7ff ff7f 	bl	be1c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   be2c2:	686b      	ldr	r3, [r5, #4]
   be2c4:	3b01      	subs	r3, #1
   be2c6:	606b      	str	r3, [r5, #4]
    return true;
   be2c8:	e7ec      	b.n	be2a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000be2cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be2d0:	4605      	mov	r5, r0
   be2d2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   be2d4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be2d6:	460c      	mov	r4, r1
        WiringBleLock lk;
   be2d8:	f7ff faa0 	bl	bd81c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   be2dc:	682e      	ldr	r6, [r5, #0]
   be2de:	1ef3      	subs	r3, r6, #3
   be2e0:	2b0d      	cmp	r3, #13
   be2e2:	d83c      	bhi.n	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be2e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   be2e8:	0053000e 	.word	0x0053000e
   be2ec:	00d1003b 	.word	0x00d1003b
   be2f0:	003b003b 	.word	0x003b003b
   be2f4:	003b003b 	.word	0x003b003b
   be2f8:	009b003b 	.word	0x009b003b
   be2fc:	009b009b 	.word	0x009b009b
   be300:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   be304:	a804      	add	r0, sp, #16
   be306:	f7ff fc77 	bl	bdbf8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   be30a:	9b04      	ldr	r3, [sp, #16]
   be30c:	89aa      	ldrh	r2, [r5, #12]
   be30e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   be310:	6869      	ldr	r1, [r5, #4]
   be312:	9804      	ldr	r0, [sp, #16]
   be314:	3108      	adds	r1, #8
   be316:	3002      	adds	r0, #2
   be318:	f7ff fa9a 	bl	bd850 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   be31c:	a904      	add	r1, sp, #16
   be31e:	a806      	add	r0, sp, #24
   be320:	f7ff fdf1 	bl	bdf06 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   be324:	a906      	add	r1, sp, #24
   be326:	f104 0018 	add.w	r0, r4, #24
   be32a:	f7ff ff73 	bl	be214 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   be32e:	4605      	mov	r5, r0
   be330:	a807      	add	r0, sp, #28
   be332:	f7f6 ff23 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be336:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   be338:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   be33a:	b9b5      	cbnz	r5, be36a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   be33c:	4b5d      	ldr	r3, [pc, #372]	; (be4b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   be33e:	495e      	ldr	r1, [pc, #376]	; (be4b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be340:	9300      	str	r3, [sp, #0]
   be342:	2032      	movs	r0, #50	; 0x32
   be344:	462b      	mov	r3, r5
   be346:	aa06      	add	r2, sp, #24
   be348:	9507      	str	r5, [sp, #28]
   be34a:	f7ff f813 	bl	bd374 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   be34e:	9b04      	ldr	r3, [sp, #16]
   be350:	4629      	mov	r1, r5
   be352:	8818      	ldrh	r0, [r3, #0]
   be354:	f7fe fd74 	bl	bce40 <hal_ble_gap_disconnect>
   be358:	a805      	add	r0, sp, #20
   be35a:	f7f6 ff0f 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   be35e:	a803      	add	r0, sp, #12
   be360:	f7ff fa6a 	bl	bd838 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   be364:	b00e      	add	sp, #56	; 0x38
   be366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   be36a:	4a54      	ldr	r2, [pc, #336]	; (be4bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   be36c:	9200      	str	r2, [sp, #0]
   be36e:	2300      	movs	r3, #0
   be370:	4951      	ldr	r1, [pc, #324]	; (be4b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be372:	9307      	str	r3, [sp, #28]
   be374:	aa06      	add	r2, sp, #24
   be376:	2001      	movs	r0, #1
   be378:	f7fe fffc 	bl	bd374 <log_message>
                if (impl->connectedCallback_) {
   be37c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   be37e:	2b00      	cmp	r3, #0
   be380:	d0ea      	beq.n	be358 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   be382:	a904      	add	r1, sp, #16
   be384:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be388:	f7ff fe3f 	bl	be00a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   be38c:	e7e4      	b.n	be358 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be38e:	89a9      	ldrh	r1, [r5, #12]
   be390:	4620      	mov	r0, r4
   be392:	f7ff fb9b 	bl	bdacc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be396:	4606      	mov	r6, r0
   be398:	2800      	cmp	r0, #0
   be39a:	d0e0      	beq.n	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   be39c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   be39e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   be3a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be3a6:	8029      	strh	r1, [r5, #0]
   be3a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   be3ac:	429a      	cmp	r2, r3
   be3ae:	d003      	beq.n	be3b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   be3b0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   be3b4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   be3b6:	e7f9      	b.n	be3ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   be3b8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   be3bc:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be3c0:	45b8      	cmp	r8, r7
   be3c2:	d004      	beq.n	be3ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   be3c4:	1d38      	adds	r0, r7, #4
   be3c6:	f7f6 fed9 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be3ca:	3708      	adds	r7, #8
   be3cc:	e7f8      	b.n	be3c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   be3ce:	2300      	movs	r3, #0
   be3d0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   be3d2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   be3d6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be3da:	45b8      	cmp	r8, r7
   be3dc:	d004      	beq.n	be3e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   be3de:	1d38      	adds	r0, r7, #4
   be3e0:	f7f6 fecc 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be3e4:	3708      	adds	r7, #8
   be3e6:	e7f8      	b.n	be3da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   be3e8:	2300      	movs	r3, #0
   be3ea:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   be3ec:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   be3ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be3f0:	b123      	cbz	r3, be3fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   be3f2:	4631      	mov	r1, r6
   be3f4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be3f8:	f7ff fe07 	bl	be00a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   be3fc:	2300      	movs	r3, #0
   be3fe:	2220      	movs	r2, #32
   be400:	e9cd 2306 	strd	r2, r3, [sp, #24]
   be404:	4a2e      	ldr	r2, [pc, #184]	; (be4c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   be406:	9200      	str	r2, [sp, #0]
   be408:	492b      	ldr	r1, [pc, #172]	; (be4b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be40a:	aa06      	add	r2, sp, #24
   be40c:	2001      	movs	r0, #1
   be40e:	f7fe ffb1 	bl	bd374 <log_message>
                    impl->peers_.removeOne(*peer);
   be412:	4631      	mov	r1, r6
   be414:	f104 0018 	add.w	r0, r4, #24
   be418:	f7ff ff35 	bl	be286 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   be41c:	e79f      	b.n	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be41e:	89a9      	ldrh	r1, [r5, #12]
   be420:	4620      	mov	r0, r4
   be422:	f7ff fb53 	bl	bdacc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be426:	2800      	cmp	r0, #0
   be428:	d099      	beq.n	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   be42a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   be42c:	2b00      	cmp	r3, #0
   be42e:	d096      	beq.n	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   be430:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be432:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   be434:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be438:	d001      	beq.n	be43e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   be43a:	2e10      	cmp	r6, #16
   be43c:	d117      	bne.n	be46e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   be43e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   be440:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   be442:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   be444:	2506      	movs	r5, #6
                        };
   be446:	f88d 3015 	strb.w	r3, [sp, #21]
   be44a:	9104      	str	r1, [sp, #16]
   be44c:	f88d 2014 	strb.w	r2, [sp, #20]
   be450:	9006      	str	r0, [sp, #24]
   be452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   be456:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   be458:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   be45c:	9508      	str	r5, [sp, #32]
   be45e:	e883 0003 	stmia.w	r3, {r0, r1}
   be462:	6d23      	ldr	r3, [r4, #80]	; 0x50
   be464:	a906      	add	r1, sp, #24
   be466:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be46a:	4798      	blx	r3
   be46c:	e777      	b.n	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   be46e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   be470:	bf01      	itttt	eq
   be472:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   be474:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   be476:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   be47a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   be47c:	bf0f      	iteee	eq
   be47e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   be482:	461a      	movne	r2, r3
   be484:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   be486:	461d      	movne	r5, r3
   be488:	e7dd      	b.n	be446 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be48a:	89a9      	ldrh	r1, [r5, #12]
   be48c:	4620      	mov	r0, r4
   be48e:	f7ff fb1d 	bl	bdacc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   be492:	4601      	mov	r1, r0
   be494:	2800      	cmp	r0, #0
   be496:	f43f af62 	beq.w	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be49a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   be49c:	2b00      	cmp	r3, #0
   be49e:	f43f af5e 	beq.w	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   be4a2:	686b      	ldr	r3, [r5, #4]
   be4a4:	9306      	str	r3, [sp, #24]
   be4a6:	aa06      	add	r2, sp, #24
   be4a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   be4aa:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be4ae:	4798      	blx	r3
   be4b0:	e755      	b.n	be35e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be4b2:	bf00      	nop
   be4b4:	000c584d 	.word	0x000c584d
   be4b8:	000c57cc 	.word	0x000c57cc
   be4bc:	000c5873 	.word	0x000c5873
   be4c0:	000c5890 	.word	0x000c5890

000be4c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   be4c4:	b513      	push	{r0, r1, r4, lr}
   be4c6:	460b      	mov	r3, r1
   be4c8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be4ca:	e9d0 0100 	ldrd	r0, r1, [r0]
   be4ce:	466c      	mov	r4, sp
   be4d0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   be4d4:	e893 0003 	ldmia.w	r3, {r0, r1}
   be4d8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   be4dc:	e894 0003 	ldmia.w	r4, {r0, r1}
   be4e0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   be4e4:	b002      	add	sp, #8
   be4e6:	bd10      	pop	{r4, pc}

000be4e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   be4e8:	b538      	push	{r3, r4, r5, lr}
   be4ea:	4605      	mov	r5, r0
   be4ec:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   be4ee:	f7ff ffe9 	bl	be4c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be4f2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   be4f4:	68a2      	ldr	r2, [r4, #8]
   be4f6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be4f8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be4fa:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   be4fc:	68e2      	ldr	r2, [r4, #12]
   be4fe:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   be500:	60e3      	str	r3, [r4, #12]
      }
   be502:	bd38      	pop	{r3, r4, r5, pc}

000be504 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   be504:	b570      	push	{r4, r5, r6, lr}
   be506:	4604      	mov	r4, r0
   be508:	b08c      	sub	sp, #48	; 0x30
   be50a:	460e      	mov	r6, r1
   be50c:	9201      	str	r2, [sp, #4]
   be50e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   be510:	f7ff fabc 	bl	bda8c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   be514:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   be516:	9901      	ldr	r1, [sp, #4]
   be518:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be51c:	f002 fc73 	bl	c0e06 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   be520:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   be524:	b1cd      	cbz	r5, be55a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   be526:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   be528:	9502      	str	r5, [sp, #8]
   be52a:	a902      	add	r1, sp, #8
   be52c:	a804      	add	r0, sp, #16
   be52e:	9303      	str	r3, [sp, #12]
   be530:	f7ff fcb2 	bl	bde98 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   be534:	2300      	movs	r3, #0
	__x.swap(*this);
   be536:	a908      	add	r1, sp, #32
   be538:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   be53a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   be53c:	f7ff ffd4 	bl	be4e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   be540:	4631      	mov	r1, r6
   be542:	a808      	add	r0, sp, #32
   be544:	f7ff ffd0 	bl	be4e8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   be548:	a808      	add	r0, sp, #32
   be54a:	f7f5 ff27 	bl	b439c <_ZNSt14_Function_baseD1Ev>
   be54e:	a804      	add	r0, sp, #16
   be550:	f7f5 ff24 	bl	b439c <_ZNSt14_Function_baseD1Ev>
    }
   be554:	4620      	mov	r0, r4
   be556:	b00c      	add	sp, #48	; 0x30
   be558:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   be55a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   be55c:	e7ea      	b.n	be534 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000be560 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   be560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be564:	b087      	sub	sp, #28
   be566:	461d      	mov	r5, r3
   be568:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   be56c:	4680      	mov	r8, r0
   be56e:	468b      	mov	fp, r1
   be570:	4692      	mov	sl, r2
   be572:	9912      	ldr	r1, [sp, #72]	; 0x48
   be574:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be576:	2200      	movs	r2, #0
   be578:	2068      	movs	r0, #104	; 0x68
   be57a:	9102      	str	r1, [sp, #8]
   be57c:	9204      	str	r2, [sp, #16]
   be57e:	f7f5 fd8a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be582:	1e06      	subs	r6, r0, #0
   be584:	f106 090c 	add.w	r9, r6, #12
   be588:	d018      	beq.n	be5bc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   be58a:	2201      	movs	r2, #1
	: _M_impl(__a)
   be58c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   be58e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   be592:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   be594:	4a15      	ldr	r2, [pc, #84]	; (be5ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   be596:	f847 2b20 	str.w	r2, [r7], #32
   be59a:	9b03      	ldr	r3, [sp, #12]
   be59c:	9100      	str	r1, [sp, #0]
   be59e:	465a      	mov	r2, fp
   be5a0:	4651      	mov	r1, sl
   be5a2:	4648      	mov	r0, r9
   be5a4:	f7ff ffae 	bl	be504 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   be5a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be5aa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   be5ac:	682b      	ldr	r3, [r5, #0]
   be5ae:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   be5b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be5b2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   be5b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be5b8:	6823      	ldr	r3, [r4, #0]
   be5ba:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   be5bc:	a904      	add	r1, sp, #16
   be5be:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   be5c0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   be5c4:	f7ff fd10 	bl	bdfe8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   be5c8:	a805      	add	r0, sp, #20
   be5ca:	f7f6 fdd7 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   be5ce:	f8d8 3000 	ldr.w	r3, [r8]
   be5d2:	b93b      	cbnz	r3, be5e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   be5d4:	4a06      	ldr	r2, [pc, #24]	; (be5f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   be5d6:	4907      	ldr	r1, [pc, #28]	; (be5f4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   be5d8:	200a      	movs	r0, #10
}
   be5da:	b007      	add	sp, #28
   be5dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   be5e0:	f7fe bec0 	b.w	bd364 <panic_>
}
   be5e4:	b007      	add	sp, #28
   be5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be5ea:	bf00      	nop
   be5ec:	000c590c 	.word	0x000c590c
   be5f0:	000bcfb5 	.word	0x000bcfb5
   be5f4:	000c57b5 	.word	0x000c57b5

000be5f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be5f8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be5fc:	4604      	mov	r4, r0
   be5fe:	460d      	mov	r5, r1
   be600:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be602:	d914      	bls.n	be62e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be604:	4290      	cmp	r0, r2
   be606:	d213      	bcs.n	be630 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be608:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be60c:	1a75      	subs	r5, r6, r1
   be60e:	f1a1 0708 	sub.w	r7, r1, #8
   be612:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be614:	42b7      	cmp	r7, r6
   be616:	d018      	beq.n	be64a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be618:	b11c      	cbz	r4, be622 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be61a:	4631      	mov	r1, r6
   be61c:	4620      	mov	r0, r4
   be61e:	f7ff fc68 	bl	bdef2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be622:	1d30      	adds	r0, r6, #4
   be624:	f7f6 fdaa 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be628:	3e08      	subs	r6, #8
   be62a:	3c08      	subs	r4, #8
   be62c:	e7f2      	b.n	be614 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be62e:	d00c      	beq.n	be64a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be630:	42b5      	cmp	r5, r6
   be632:	d00a      	beq.n	be64a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be634:	b11c      	cbz	r4, be63e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be636:	4629      	mov	r1, r5
   be638:	4620      	mov	r0, r4
   be63a:	f7ff fc5a 	bl	bdef2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be63e:	1d28      	adds	r0, r5, #4
   be640:	f7f6 fd9c 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be644:	3508      	adds	r5, #8
   be646:	3408      	adds	r4, #8
   be648:	e7f2      	b.n	be630 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be64c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be64c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be64e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be650:	4605      	mov	r5, r0
        if (n > 0) {
   be652:	dd11      	ble.n	be678 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be654:	00f0      	lsls	r0, r6, #3
   be656:	f7fe ff8b 	bl	bd570 <malloc>
            if (!d) {
   be65a:	4604      	mov	r4, r0
   be65c:	b158      	cbz	r0, be676 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be65e:	e9d5 1200 	ldrd	r1, r2, [r5]
   be662:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be666:	f7ff ffc7 	bl	be5f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be66a:	6828      	ldr	r0, [r5, #0]
   be66c:	f7fe ff88 	bl	bd580 <free>
        data_ = d;
   be670:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be672:	60ae      	str	r6, [r5, #8]
        return true;
   be674:	2001      	movs	r0, #1
    }
   be676:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be678:	2400      	movs	r4, #0
   be67a:	e7f6      	b.n	be66a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be67c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be67c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be67e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be680:	6845      	ldr	r5, [r0, #4]
   be682:	4668      	mov	r0, sp
   be684:	f7ff fc35 	bl	bdef2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be688:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be68c:	4299      	cmp	r1, r3
   be68e:	da10      	bge.n	be6b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be690:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be692:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be694:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be698:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be69c:	4629      	mov	r1, r5
   be69e:	f105 0008 	add.w	r0, r5, #8
   be6a2:	f7ff ffa9 	bl	be5f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be6a6:	b98d      	cbnz	r5, be6cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be6a8:	6863      	ldr	r3, [r4, #4]
   be6aa:	3301      	adds	r3, #1
   be6ac:	6063      	str	r3, [r4, #4]
    return true;
   be6ae:	2601      	movs	r6, #1
   be6b0:	e006      	b.n	be6c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be6b2:	3101      	adds	r1, #1
   be6b4:	4620      	mov	r0, r4
   be6b6:	f7ff ffc9 	bl	be64c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be6ba:	4606      	mov	r6, r0
   be6bc:	2800      	cmp	r0, #0
   be6be:	d1e7      	bne.n	be690 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   be6c0:	a801      	add	r0, sp, #4
   be6c2:	f7f6 fd5b 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be6c6:	4630      	mov	r0, r6
   be6c8:	b002      	add	sp, #8
   be6ca:	bd70      	pop	{r4, r5, r6, pc}
   be6cc:	4669      	mov	r1, sp
   be6ce:	4628      	mov	r0, r5
   be6d0:	f7ff fc0f 	bl	bdef2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be6d4:	e7e8      	b.n	be6a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be6d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be6d6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be6da:	4604      	mov	r4, r0
   be6dc:	460d      	mov	r5, r1
   be6de:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be6e0:	d914      	bls.n	be70c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be6e2:	4290      	cmp	r0, r2
   be6e4:	d213      	bcs.n	be70e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be6e6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be6ea:	1a75      	subs	r5, r6, r1
   be6ec:	f1a1 0708 	sub.w	r7, r1, #8
   be6f0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be6f2:	42b7      	cmp	r7, r6
   be6f4:	d018      	beq.n	be728 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be6f6:	b11c      	cbz	r4, be700 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   be6f8:	4631      	mov	r1, r6
   be6fa:	4620      	mov	r0, r4
   be6fc:	f7ff fbeb 	bl	bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   be700:	1d30      	adds	r0, r6, #4
   be702:	f7f6 fd3b 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be706:	3e08      	subs	r6, #8
   be708:	3c08      	subs	r4, #8
   be70a:	e7f2      	b.n	be6f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be70c:	d00c      	beq.n	be728 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be70e:	42b5      	cmp	r5, r6
   be710:	d00a      	beq.n	be728 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be712:	b11c      	cbz	r4, be71c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be714:	4629      	mov	r1, r5
   be716:	4620      	mov	r0, r4
   be718:	f7ff fbdd 	bl	bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   be71c:	1d28      	adds	r0, r5, #4
   be71e:	f7f6 fd2d 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be722:	3508      	adds	r5, #8
   be724:	3408      	adds	r4, #8
   be726:	e7f2      	b.n	be70e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be72a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be72a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be72c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be72e:	4605      	mov	r5, r0
        if (n > 0) {
   be730:	dd11      	ble.n	be756 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be732:	00f0      	lsls	r0, r6, #3
   be734:	f7fe ff1c 	bl	bd570 <malloc>
            if (!d) {
   be738:	4604      	mov	r4, r0
   be73a:	b158      	cbz	r0, be754 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be73c:	e9d5 1200 	ldrd	r1, r2, [r5]
   be740:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be744:	f7ff ffc7 	bl	be6d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be748:	6828      	ldr	r0, [r5, #0]
   be74a:	f7fe ff19 	bl	bd580 <free>
        data_ = d;
   be74e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be750:	60ae      	str	r6, [r5, #8]
        return true;
   be752:	2001      	movs	r0, #1
    }
   be754:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be756:	2400      	movs	r4, #0
   be758:	e7f6      	b.n	be748 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be75a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be75a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be75c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be75e:	6845      	ldr	r5, [r0, #4]
   be760:	4668      	mov	r0, sp
   be762:	f7ff fbb8 	bl	bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be766:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be76a:	4299      	cmp	r1, r3
   be76c:	da10      	bge.n	be790 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be76e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be770:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be772:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be776:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be77a:	4629      	mov	r1, r5
   be77c:	f105 0008 	add.w	r0, r5, #8
   be780:	f7ff ffa9 	bl	be6d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be784:	b98d      	cbnz	r5, be7aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be786:	6863      	ldr	r3, [r4, #4]
   be788:	3301      	adds	r3, #1
   be78a:	6063      	str	r3, [r4, #4]
    return true;
   be78c:	2601      	movs	r6, #1
   be78e:	e006      	b.n	be79e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be790:	3101      	adds	r1, #1
   be792:	4620      	mov	r0, r4
   be794:	f7ff ffc9 	bl	be72a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be798:	4606      	mov	r6, r0
   be79a:	2800      	cmp	r0, #0
   be79c:	d1e7      	bne.n	be76e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   be79e:	a801      	add	r0, sp, #4
   be7a0:	f7f6 fcec 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be7a4:	4630      	mov	r0, r6
   be7a6:	b002      	add	sp, #8
   be7a8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   be7aa:	4669      	mov	r1, sp
   be7ac:	4628      	mov	r0, r5
   be7ae:	f7ff fb92 	bl	bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   be7b2:	e7e8      	b.n	be786 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be7b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be7b8:	4617      	mov	r7, r2
   be7ba:	b0a1      	sub	sp, #132	; 0x84
   be7bc:	4680      	mov	r8, r0
    WiringBleLock lk;
   be7be:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be7c0:	460e      	mov	r6, r1
    WiringBleLock lk;
   be7c2:	f7ff f82b 	bl	bd81c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be7c6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   be7c8:	7923      	ldrb	r3, [r4, #4]
   be7ca:	b953      	cbnz	r3, be7e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   be7cc:	4639      	mov	r1, r7
   be7ce:	4640      	mov	r0, r8
   be7d0:	f7ff fb81 	bl	bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   be7d4:	a80a      	add	r0, sp, #40	; 0x28
   be7d6:	f7ff f82f 	bl	bd838 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   be7da:	4640      	mov	r0, r8
   be7dc:	b021      	add	sp, #132	; 0x84
   be7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   be7e2:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   be7e4:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   be7e8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   be7ec:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   be7ee:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   be7f2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   be7f6:	9b03      	ldr	r3, [sp, #12]
   be7f8:	429d      	cmp	r5, r3
   be7fa:	d021      	beq.n	be840 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   be7fc:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   be800:	4658      	mov	r0, fp
   be802:	f109 0114 	add.w	r1, r9, #20
   be806:	f7ff f8b6 	bl	bd976 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   be80a:	b1b8      	cbz	r0, be83c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   be80c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   be810:	4650      	mov	r0, sl
   be812:	f7ff f8b0 	bl	bd976 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   be816:	b188      	cbz	r0, be83c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   be818:	6823      	ldr	r3, [r4, #0]
   be81a:	f8d9 2000 	ldr.w	r2, [r9]
   be81e:	4053      	eors	r3, r2
   be820:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   be824:	d10a      	bne.n	be83c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   be826:	2220      	movs	r2, #32
   be828:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   be82c:	4a5e      	ldr	r2, [pc, #376]	; (be9a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   be82e:	9200      	str	r2, [sp, #0]
   be830:	aa15      	add	r2, sp, #84	; 0x54
   be832:	495e      	ldr	r1, [pc, #376]	; (be9ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   be834:	2032      	movs	r0, #50	; 0x32
   be836:	f7fe fd9d 	bl	bd374 <log_message>
   be83a:	e7c7      	b.n	be7cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   be83c:	3508      	adds	r5, #8
   be83e:	e7da      	b.n	be7f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   be840:	4650      	mov	r0, sl
   be842:	f7ff f869 	bl	bd918 <_ZNK8particle7BleUuid7isValidEv>
   be846:	b960      	cbnz	r0, be862 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   be848:	4959      	ldr	r1, [pc, #356]	; (be9b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   be84a:	2201      	movs	r2, #1
   be84c:	a815      	add	r0, sp, #84	; 0x54
   be84e:	ad15      	add	r5, sp, #84	; 0x54
   be850:	f7ff f83a 	bl	bd8c8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   be854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be856:	46d4      	mov	ip, sl
   be858:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   be85c:	682b      	ldr	r3, [r5, #0]
   be85e:	f8cc 3000 	str.w	r3, [ip]
   be862:	6833      	ldr	r3, [r6, #0]
   be864:	e9d3 5300 	ldrd	r5, r3, [r3]
   be868:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   be86c:	455d      	cmp	r5, fp
   be86e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   be870:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   be872:	d06e      	beq.n	be952 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   be874:	f855 0b08 	ldr.w	r0, [r5], #8
   be878:	f7ff f87d 	bl	bd976 <_ZNK8particle7BleUuideqERKS0_>
   be87c:	2800      	cmp	r0, #0
   be87e:	d0f5      	beq.n	be86c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   be880:	f104 0a14 	add.w	sl, r4, #20
   be884:	4650      	mov	r0, sl
   be886:	f7ff f847 	bl	bd918 <_ZNK8particle7BleUuid7isValidEv>
   be88a:	b988      	cbnz	r0, be8b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   be88c:	4b49      	ldr	r3, [pc, #292]	; (be9b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be88e:	4948      	ldr	r1, [pc, #288]	; (be9b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   be890:	881a      	ldrh	r2, [r3, #0]
   be892:	3201      	adds	r2, #1
   be894:	b292      	uxth	r2, r2
   be896:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be898:	a815      	add	r0, sp, #84	; 0x54
   be89a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   be89c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   be89e:	f7ff f832 	bl	bd906 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   be8a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be8a4:	46d4      	mov	ip, sl
   be8a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   be8aa:	682b      	ldr	r3, [r5, #0]
   be8ac:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   be8b0:	4b41      	ldr	r3, [pc, #260]	; (be9b8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   be8b2:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   be8b4:	2228      	movs	r2, #40	; 0x28
   be8b6:	2100      	movs	r1, #0
   be8b8:	a816      	add	r0, sp, #88	; 0x58
   be8ba:	f003 fcaf 	bl	c221c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   be8be:	4651      	mov	r1, sl
   be8c0:	a804      	add	r0, sp, #16
   be8c2:	f7ff f83b 	bl	bd93c <_ZN8particle7BleUuid7halUUIDEv>
   be8c6:	ab04      	add	r3, sp, #16
   be8c8:	aa18      	add	r2, sp, #96	; 0x60
   be8ca:	f10d 0c20 	add.w	ip, sp, #32
   be8ce:	6818      	ldr	r0, [r3, #0]
   be8d0:	6859      	ldr	r1, [r3, #4]
   be8d2:	4615      	mov	r5, r2
   be8d4:	c503      	stmia	r5!, {r0, r1}
   be8d6:	3308      	adds	r3, #8
   be8d8:	4563      	cmp	r3, ip
   be8da:	462a      	mov	r2, r5
   be8dc:	d1f7      	bne.n	be8ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   be8de:	6818      	ldr	r0, [r3, #0]
   be8e0:	6028      	str	r0, [r5, #0]
    return value_;
   be8e2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   be8e4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   be8e8:	f8d9 3000 	ldr.w	r3, [r9]
   be8ec:	8a9b      	ldrh	r3, [r3, #20]
   be8ee:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   be8f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be8f4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   be8f6:	4b31      	ldr	r3, [pc, #196]	; (be9bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   be8f8:	2200      	movs	r2, #0
   be8fa:	1da1      	adds	r1, r4, #6
   be8fc:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   be8fe:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   be902:	f7fe facf 	bl	bcea4 <hal_ble_gatt_server_add_characteristic>
   be906:	2800      	cmp	r0, #0
   be908:	f47f af60 	bne.w	be7cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   be90c:	2301      	movs	r3, #1
   be90e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   be910:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   be912:	4639      	mov	r1, r7
        return characteristics_;
   be914:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   be916:	a80d      	add	r0, sp, #52	; 0x34
   be918:	f7ff fadd 	bl	bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   be91c:	4620      	mov	r0, r4
   be91e:	a90d      	add	r1, sp, #52	; 0x34
   be920:	f7ff ff1b 	bl	be75a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   be924:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be926:	a80e      	add	r0, sp, #56	; 0x38
   be928:	f7f6 fc28 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be92c:	2c00      	cmp	r4, #0
   be92e:	f47f af4d 	bne.w	be7cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   be932:	2320      	movs	r3, #32
   be934:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   be938:	4b21      	ldr	r3, [pc, #132]	; (be9c0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   be93a:	9300      	str	r3, [sp, #0]
   be93c:	aa0d      	add	r2, sp, #52	; 0x34
   be93e:	4623      	mov	r3, r4
   be940:	e777      	b.n	be832 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   be942:	4639      	mov	r1, r7
   be944:	4640      	mov	r0, r8
   be946:	f7ff fac6 	bl	bded6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   be94a:	a80c      	add	r0, sp, #48	; 0x30
   be94c:	f7f6 fc16 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be950:	e740      	b.n	be7d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   be952:	a80b      	add	r0, sp, #44	; 0x2c
   be954:	f7ff f92c 	bl	bdbb0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   be958:	4651      	mov	r1, sl
   be95a:	a815      	add	r0, sp, #84	; 0x54
   be95c:	f7fe ffee 	bl	bd93c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   be960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   be962:	2300      	movs	r3, #0
   be964:	3214      	adds	r2, #20
   be966:	a915      	add	r1, sp, #84	; 0x54
   be968:	2001      	movs	r0, #1
   be96a:	f7fe fa73 	bl	bce54 <hal_ble_gatt_server_add_service>
   be96e:	2800      	cmp	r0, #0
   be970:	d1e7      	bne.n	be942 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   be972:	6835      	ldr	r5, [r6, #0]
   be974:	a90b      	add	r1, sp, #44	; 0x2c
   be976:	a80d      	add	r0, sp, #52	; 0x34
   be978:	f7ff fabb 	bl	bdef2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   be97c:	4628      	mov	r0, r5
   be97e:	a90d      	add	r1, sp, #52	; 0x34
   be980:	f7ff fe7c 	bl	be67c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   be984:	4605      	mov	r5, r0
   be986:	a80e      	add	r0, sp, #56	; 0x38
   be988:	f7f6 fbf8 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be98c:	2d00      	cmp	r5, #0
   be98e:	d0d8      	beq.n	be942 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   be990:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   be992:	6853      	ldr	r3, [r2, #4]
   be994:	6812      	ldr	r2, [r2, #0]
   be996:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   be99a:	3b01      	subs	r3, #1
   be99c:	a80c      	add	r0, sp, #48	; 0x30
   be99e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   be9a2:	f7f6 fbeb 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be9a6:	e76b      	b.n	be880 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   be9a8:	000c58af 	.word	0x000c58af
   be9ac:	000c57cc 	.word	0x000c57cc
   be9b0:	000c5976 	.word	0x000c5976
   be9b4:	2003e624 	.word	0x2003e624
   be9b8:	002c0003 	.word	0x002c0003
   be9bc:	000bdd49 	.word	0x000bdd49
   be9c0:	000c58da 	.word	0x000c58da

000be9c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   be9c4:	4802      	ldr	r0, [pc, #8]	; (be9d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   be9c6:	2300      	movs	r3, #0
   be9c8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   be9ca:	f7fe bac3 	b.w	bcf54 <os_mutex_recursive_create>
   be9ce:	bf00      	nop
   be9d0:	2003e628 	.word	0x2003e628

000be9d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   be9d4:	2200      	movs	r2, #0
   be9d6:	6840      	ldr	r0, [r0, #4]
   be9d8:	4611      	mov	r1, r2
   be9da:	f7fe bd81 	b.w	bd4e0 <network_ready>

000be9de <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   be9de:	2200      	movs	r2, #0
   be9e0:	6840      	ldr	r0, [r0, #4]
   be9e2:	4611      	mov	r1, r2
   be9e4:	f7fe bd9c 	b.w	bd520 <network_listening>

000be9e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   be9e8:	2200      	movs	r2, #0
   be9ea:	6840      	ldr	r0, [r0, #4]
   be9ec:	4611      	mov	r1, r2
   be9ee:	f7fe bda7 	b.w	bd540 <network_get_listen_timeout>

000be9f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   be9f2:	6840      	ldr	r0, [r0, #4]
   be9f4:	2200      	movs	r2, #0
   be9f6:	f7fe bd9b 	b.w	bd530 <network_set_listen_timeout>

000be9fa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   be9fa:	6840      	ldr	r0, [r0, #4]
   be9fc:	2200      	movs	r2, #0
   be9fe:	f081 0101 	eor.w	r1, r1, #1
   bea02:	f7fe bd85 	b.w	bd510 <network_listen>

000bea06 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bea06:	2300      	movs	r3, #0
   bea08:	6840      	ldr	r0, [r0, #4]
   bea0a:	461a      	mov	r2, r3
   bea0c:	4619      	mov	r1, r3
   bea0e:	f7fe bd77 	b.w	bd500 <network_off>

000bea12 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bea12:	2300      	movs	r3, #0
   bea14:	6840      	ldr	r0, [r0, #4]
   bea16:	461a      	mov	r2, r3
   bea18:	4619      	mov	r1, r3
   bea1a:	f7fe bd69 	b.w	bd4f0 <network_on>

000bea1e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bea1e:	2200      	movs	r2, #0
   bea20:	6840      	ldr	r0, [r0, #4]
   bea22:	4611      	mov	r1, r2
   bea24:	f7fe bd4c 	b.w	bd4c0 <network_connecting>

000bea28 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bea28:	6840      	ldr	r0, [r0, #4]
   bea2a:	2200      	movs	r2, #0
   bea2c:	2102      	movs	r1, #2
   bea2e:	f7fe bd4f 	b.w	bd4d0 <network_disconnect>

000bea32 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bea32:	2300      	movs	r3, #0
   bea34:	6840      	ldr	r0, [r0, #4]
   bea36:	461a      	mov	r2, r3
   bea38:	f7fe bd3a 	b.w	bd4b0 <network_connect>

000bea3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bea3c:	4b08      	ldr	r3, [pc, #32]	; (bea60 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bea3e:	b510      	push	{r4, lr}
   bea40:	2428      	movs	r4, #40	; 0x28
   bea42:	4622      	mov	r2, r4
   bea44:	4618      	mov	r0, r3
   bea46:	2100      	movs	r1, #0
   bea48:	f003 fbe8 	bl	c221c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bea4c:	4b05      	ldr	r3, [pc, #20]	; (bea64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bea4e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bea50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bea54:	6042      	str	r2, [r0, #4]
   bea56:	2204      	movs	r2, #4
   bea58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bea5a:	4a03      	ldr	r2, [pc, #12]	; (bea68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bea5c:	601a      	str	r2, [r3, #0]
   bea5e:	bd10      	pop	{r4, pc}
   bea60:	2003e638 	.word	0x2003e638
   bea64:	2003e630 	.word	0x2003e630
   bea68:	000c59a0 	.word	0x000c59a0

000bea6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bea6c:	4770      	bx	lr

000bea6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bea6e:	2000      	movs	r0, #0
   bea70:	4770      	bx	lr

000bea72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bea72:	b510      	push	{r4, lr}
   bea74:	2110      	movs	r1, #16
   bea76:	4604      	mov	r4, r0
   bea78:	f7f5 fb13 	bl	b40a2 <_ZdlPvj>
   bea7c:	4620      	mov	r0, r4
   bea7e:	bd10      	pop	{r4, pc}

000bea80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bea80:	b508      	push	{r3, lr}
      { delete this; }
   bea82:	f7ff fff6 	bl	bea72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bea86:	bd08      	pop	{r3, pc}

000bea88 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bea88:	b530      	push	{r4, r5, lr}
        type_(type) {
   bea8a:	2200      	movs	r2, #0
   bea8c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bea90:	6002      	str	r2, [r0, #0]
   bea92:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bea94:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bea96:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bea98:	680c      	ldr	r4, [r1, #0]
   bea9a:	8085      	strh	r5, [r0, #4]
   bea9c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bea9e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   beaa0:	bd30      	pop	{r4, r5, pc}

000beaa2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   beaa2:	b510      	push	{r4, lr}
   beaa4:	4604      	mov	r4, r0
    free((void*)msg_);
   beaa6:	6800      	ldr	r0, [r0, #0]
   beaa8:	f7fe fd6a 	bl	bd580 <free>
}
   beaac:	4620      	mov	r0, r4
   beaae:	bd10      	pop	{r4, pc}

000beab0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   beab0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   beab2:	68c4      	ldr	r4, [r0, #12]
   beab4:	b1f4      	cbz	r4, beaf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   beab6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   beab8:	2b02      	cmp	r3, #2
   beaba:	d103      	bne.n	beac4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   beabc:	f104 000c 	add.w	r0, r4, #12
   beac0:	f7ff ffef 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   beac4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   beac6:	b135      	cbz	r5, bead6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   beac8:	4628      	mov	r0, r5
   beaca:	f7f5 fc67 	bl	b439c <_ZNSt14_Function_baseD1Ev>
   beace:	2110      	movs	r1, #16
   bead0:	4628      	mov	r0, r5
   bead2:	f7f5 fae6 	bl	b40a2 <_ZdlPvj>
   bead6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bead8:	b135      	cbz	r5, beae8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   beada:	4628      	mov	r0, r5
   beadc:	f7f5 fc5e 	bl	b439c <_ZNSt14_Function_baseD1Ev>
   beae0:	2110      	movs	r1, #16
   beae2:	4628      	mov	r0, r5
   beae4:	f7f5 fadd 	bl	b40a2 <_ZdlPvj>
   beae8:	4620      	mov	r0, r4
   beaea:	2114      	movs	r1, #20
   beaec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   beaf0:	f7f5 bad7 	b.w	b40a2 <_ZdlPvj>
   beaf4:	bd38      	pop	{r3, r4, r5, pc}

000beaf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   beaf6:	680b      	ldr	r3, [r1, #0]
   beaf8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   beafa:	684b      	ldr	r3, [r1, #4]
   beafc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   beafe:	b113      	cbz	r3, beb06 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   beb00:	685a      	ldr	r2, [r3, #4]
   beb02:	3201      	adds	r2, #1
   beb04:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   beb06:	4770      	bx	lr

000beb08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   beb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   beb0a:	4604      	mov	r4, r0
   beb0c:	4668      	mov	r0, sp
   beb0e:	460d      	mov	r5, r1
   beb10:	f7ff fff1 	bl	beaf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   beb14:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   beb16:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   beb18:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   beb1a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   beb1c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   beb1e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   beb20:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   beb22:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   beb24:	f7f6 fb2a 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   beb28:	b135      	cbz	r5, beb38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   beb2a:	1d28      	adds	r0, r5, #4
   beb2c:	f7f6 fb26 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beb30:	2108      	movs	r1, #8
   beb32:	4628      	mov	r0, r5
   beb34:	f7f5 fab5 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   beb38:	4620      	mov	r0, r4
   beb3a:	b003      	add	sp, #12
   beb3c:	bd30      	pop	{r4, r5, pc}

000beb3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   beb3e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   beb40:	b510      	push	{r4, lr}
      if (_M_empty())
   beb42:	b90a      	cbnz	r2, beb48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   beb44:	f002 fce4 	bl	c1510 <_ZSt25__throw_bad_function_callv>
    }
   beb48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   beb4c:	68c3      	ldr	r3, [r0, #12]
   beb4e:	4718      	bx	r3

000beb50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   beb50:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   beb52:	6800      	ldr	r0, [r0, #0]
   beb54:	f100 0110 	add.w	r1, r0, #16
   beb58:	f7ff fff1 	bl	beb3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   beb5c:	bd08      	pop	{r3, pc}

000beb5e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   beb5e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   beb60:	b510      	push	{r4, lr}
      if (_M_empty())
   beb62:	b90a      	cbnz	r2, beb68 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   beb64:	f002 fcd4 	bl	c1510 <_ZSt25__throw_bad_function_callv>
    }
   beb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   beb6c:	68c3      	ldr	r3, [r0, #12]
   beb6e:	4718      	bx	r3

000beb70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   beb70:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   beb72:	6800      	ldr	r0, [r0, #0]
   beb74:	f100 0110 	add.w	r1, r0, #16
   beb78:	f7ff fff1 	bl	beb5e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   beb7c:	bd08      	pop	{r3, pc}
	...

000beb80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   beb80:	b538      	push	{r3, r4, r5, lr}
   beb82:	2300      	movs	r3, #0
   beb84:	4604      	mov	r4, r0
   beb86:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   beb88:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   beb8a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   beb8c:	f7f5 fa83 	bl	b4096 <_Znwj>
   beb90:	b128      	cbz	r0, beb9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   beb92:	2301      	movs	r3, #1
   beb94:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   beb98:	4b02      	ldr	r3, [pc, #8]	; (beba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   beb9a:	6003      	str	r3, [r0, #0]
   beb9c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   beb9e:	6020      	str	r0, [r4, #0]
	}
   beba0:	4620      	mov	r0, r4
   beba2:	bd38      	pop	{r3, r4, r5, pc}
   beba4:	000c59dc 	.word	0x000c59dc

000beba8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   beba8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bebaa:	2300      	movs	r3, #0
   bebac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bebae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bebb0:	4604      	mov	r4, r0
   bebb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bebb4:	b12b      	cbz	r3, bebc2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bebb6:	2202      	movs	r2, #2
   bebb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bebba:	68eb      	ldr	r3, [r5, #12]
   bebbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bebbe:	68ab      	ldr	r3, [r5, #8]
   bebc0:	60a3      	str	r3, [r4, #8]
    }
   bebc2:	4620      	mov	r0, r4
   bebc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bebc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bebc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bebca:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bebcc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bebce:	4668      	mov	r0, sp
   bebd0:	f7ff ff5a 	bl	bea88 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bebd4:	f04f 0302 	mov.w	r3, #2
   bebd8:	e8d4 2f4f 	ldrexb	r2, [r4]
   bebdc:	2a00      	cmp	r2, #0
   bebde:	d103      	bne.n	bebe8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bebe0:	e8c4 3f41 	strexb	r1, r3, [r4]
   bebe4:	2900      	cmp	r1, #0
   bebe6:	d1f7      	bne.n	bebd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bebe8:	d125      	bne.n	bec36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bebea:	f104 050c 	add.w	r5, r4, #12
   bebee:	4669      	mov	r1, sp
   bebf0:	4628      	mov	r0, r5
   bebf2:	f7ff ff49 	bl	bea88 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bebf6:	f3bf 8f5b 	dmb	ish
   bebfa:	2301      	movs	r3, #1
   bebfc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bebfe:	2000      	movs	r0, #0
   bec00:	f104 0308 	add.w	r3, r4, #8
   bec04:	f3bf 8f5b 	dmb	ish
   bec08:	e853 6f00 	ldrex	r6, [r3]
   bec0c:	e843 0200 	strex	r2, r0, [r3]
   bec10:	2a00      	cmp	r2, #0
   bec12:	d1f9      	bne.n	bec08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bec14:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bec18:	b16e      	cbz	r6, bec36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bec1a:	f7fe fbe5 	bl	bd3e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bec1e:	b178      	cbz	r0, bec40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bec20:	4629      	mov	r1, r5
   bec22:	4630      	mov	r0, r6
   bec24:	f7ff ff8b 	bl	beb3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bec28:	4630      	mov	r0, r6
   bec2a:	f7f5 fbb7 	bl	b439c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bec2e:	2110      	movs	r1, #16
   bec30:	4630      	mov	r0, r6
   bec32:	f7f5 fa36 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bec36:	4668      	mov	r0, sp
   bec38:	f7ff ff33 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
    }
   bec3c:	b009      	add	sp, #36	; 0x24
   bec3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bec40:	4631      	mov	r1, r6
   bec42:	a802      	add	r0, sp, #8
   bec44:	f7ff ffb0 	bl	beba8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bec48:	68e0      	ldr	r0, [r4, #12]
   bec4a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bec4e:	b108      	cbz	r0, bec54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bec50:	f003 fb52 	bl	c22f8 <strdup>
        type_(type) {
   bec54:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bec56:	2010      	movs	r0, #16
   bec58:	f8ad 501c 	strh.w	r5, [sp, #28]
   bec5c:	f7f5 fa1b 	bl	b4096 <_Znwj>
   bec60:	4605      	mov	r5, r0
   bec62:	b1e8      	cbz	r0, beca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bec64:	2700      	movs	r7, #0
   bec66:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bec68:	2018      	movs	r0, #24
   bec6a:	f7f5 fa14 	bl	b4096 <_Znwj>
   bec6e:	4604      	mov	r4, r0
   bec70:	b188      	cbz	r0, bec96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bec72:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bec74:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bec76:	a802      	add	r0, sp, #8
   bec78:	f7ff fc24 	bl	be4c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bec7c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bec7e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bec80:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bec82:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bec84:	9204      	str	r2, [sp, #16]
   bec86:	a906      	add	r1, sp, #24
   bec88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bec8a:	60e3      	str	r3, [r4, #12]
   bec8c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bec90:	9205      	str	r2, [sp, #20]
   bec92:	f7ff fef9 	bl	bea88 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bec96:	4b08      	ldr	r3, [pc, #32]	; (becb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bec98:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bec9a:	4b08      	ldr	r3, [pc, #32]	; (becbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bec9c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bec9e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   beca0:	a806      	add	r0, sp, #24
   beca2:	f7ff fefe 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   beca6:	a802      	add	r0, sp, #8
   beca8:	f7f5 fb78 	bl	b439c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   becac:	2200      	movs	r2, #0
   becae:	4629      	mov	r1, r5
   becb0:	4803      	ldr	r0, [pc, #12]	; (becc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   becb2:	f7fe fba1 	bl	bd3f8 <application_thread_invoke>
   becb6:	e7b7      	b.n	bec28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   becb8:	000beb51 	.word	0x000beb51
   becbc:	000bedd5 	.word	0x000bedd5
   becc0:	000bd64f 	.word	0x000bd64f

000becc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   becc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   becc8:	b08b      	sub	sp, #44	; 0x2c
   becca:	4605      	mov	r5, r0
   beccc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   becd0:	460f      	mov	r7, r1
   becd2:	4690      	mov	r8, r2
   becd4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   becd6:	f7fe fbc3 	bl	bd460 <spark_cloud_flag_connected>
   becda:	ae07      	add	r6, sp, #28
    if (!connected()) {
   becdc:	4683      	mov	fp, r0
   becde:	bb38      	cbnz	r0, bed30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bece0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bece4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bece6:	a905      	add	r1, sp, #20
   bece8:	4630      	mov	r0, r6
   becea:	f8ad 3018 	strh.w	r3, [sp, #24]
   becee:	f7ff fecb 	bl	bea88 <_ZN8particle5ErrorC1EOS0_>
   becf2:	2014      	movs	r0, #20
   becf4:	f7f5 f9cf 	bl	b4096 <_Znwj>
   becf8:	4604      	mov	r4, r0
   becfa:	b148      	cbz	r0, bed10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   becfc:	2302      	movs	r3, #2
   becfe:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bed00:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bed02:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bed06:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bed08:	4631      	mov	r1, r6
   bed0a:	300c      	adds	r0, #12
   bed0c:	f7ff febc 	bl	bea88 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bed10:	4628      	mov	r0, r5
	: __shared_count(__p)
   bed12:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bed14:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bed18:	f7ff ff32 	bl	beb80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bed1c:	4630      	mov	r0, r6
   bed1e:	f7ff fec0 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bed22:	a805      	add	r0, sp, #20
   bed24:	f7ff febd 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bed28:	4628      	mov	r0, r5
   bed2a:	b00b      	add	sp, #44	; 0x2c
   bed2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bed30:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bed32:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bed34:	2014      	movs	r0, #20
   bed36:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bed3a:	9307      	str	r3, [sp, #28]
   bed3c:	f7f5 f9ab 	bl	b4096 <_Znwj>
   bed40:	4601      	mov	r1, r0
   bed42:	b118      	cbz	r0, bed4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bed44:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bed48:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bed4a:	7044      	strb	r4, [r0, #1]
   bed4c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bed4e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bed50:	f7ff ff16 	bl	beb80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bed54:	4b1e      	ldr	r3, [pc, #120]	; (bedd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bed56:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bed58:	2008      	movs	r0, #8
   bed5a:	f7f5 f99c 	bl	b4096 <_Znwj>
   bed5e:	4604      	mov	r4, r0
   bed60:	b110      	cbz	r0, bed68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bed62:	a903      	add	r1, sp, #12
   bed64:	f7ff fec7 	bl	beaf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bed68:	9600      	str	r6, [sp, #0]
   bed6a:	fa5f f38a 	uxtb.w	r3, sl
   bed6e:	464a      	mov	r2, r9
   bed70:	4641      	mov	r1, r8
   bed72:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bed74:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bed76:	f7fe fb7b 	bl	bd470 <spark_send_event>
   bed7a:	b9b8      	cbnz	r0, bedac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bed7c:	9b03      	ldr	r3, [sp, #12]
   bed7e:	785b      	ldrb	r3, [r3, #1]
   bed80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bed84:	b993      	cbnz	r3, bedac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bed86:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bed8a:	a905      	add	r1, sp, #20
   bed8c:	a803      	add	r0, sp, #12
   bed8e:	9205      	str	r2, [sp, #20]
   bed90:	f8ad 3018 	strh.w	r3, [sp, #24]
   bed94:	f7ff ff18 	bl	bebc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bed98:	a805      	add	r0, sp, #20
   bed9a:	f7ff fe82 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bed9e:	a805      	add	r0, sp, #20
   beda0:	9909      	ldr	r1, [sp, #36]	; 0x24
   beda2:	f7ff feb1 	bl	beb08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   beda6:	a806      	add	r0, sp, #24
   beda8:	f7f6 f9e8 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bedac:	a903      	add	r1, sp, #12
   bedae:	a805      	add	r0, sp, #20
   bedb0:	f7ff fea1 	bl	beaf6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bedb4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bedb6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bedb8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bedba:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bedbc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bedbe:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bedc0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bedc2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bedc4:	f7f6 f9da 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bedc8:	a804      	add	r0, sp, #16
   bedca:	f7f6 f9d7 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bedce:	e7ab      	b.n	bed28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bedd0:	000bee51 	.word	0x000bee51

000bedd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bedd4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bedd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bedd8:	4605      	mov	r5, r0
	switch (__op)
   bedda:	d103      	bne.n	bede4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   beddc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bedde:	6003      	str	r3, [r0, #0]
      }
   bede0:	2000      	movs	r0, #0
   bede2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bede4:	2a02      	cmp	r2, #2
   bede6:	d010      	beq.n	bee0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bede8:	2a03      	cmp	r2, #3
   bedea:	d1f9      	bne.n	bede0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bedec:	6804      	ldr	r4, [r0, #0]
   bedee:	2c00      	cmp	r4, #0
   bedf0:	d0f6      	beq.n	bede0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bedf2:	f104 0010 	add.w	r0, r4, #16
   bedf6:	f7ff fe54 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bedfa:	4620      	mov	r0, r4
   bedfc:	f7f5 face 	bl	b439c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bee00:	2118      	movs	r1, #24
   bee02:	4620      	mov	r0, r4
   bee04:	f7f5 f94d 	bl	b40a2 <_ZdlPvj>
   bee08:	e7ea      	b.n	bede0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bee0a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bee0c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bee0e:	f7f5 f942 	bl	b4096 <_Znwj>
   bee12:	4604      	mov	r4, r0
   bee14:	b150      	cbz	r0, bee2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bee16:	4631      	mov	r1, r6
   bee18:	f7ff fec6 	bl	beba8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bee1c:	6930      	ldr	r0, [r6, #16]
   bee1e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bee22:	b108      	cbz	r0, bee28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bee24:	f003 fa68 	bl	c22f8 <strdup>
        type_(type) {
   bee28:	6120      	str	r0, [r4, #16]
   bee2a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bee2c:	602c      	str	r4, [r5, #0]
	}
   bee2e:	e7d7      	b.n	bede0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bee30 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bee30:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bee32:	2300      	movs	r3, #0
   bee34:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bee36:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bee38:	4604      	mov	r4, r0
   bee3a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bee3c:	b12b      	cbz	r3, bee4a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bee3e:	2202      	movs	r2, #2
   bee40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bee42:	68eb      	ldr	r3, [r5, #12]
   bee44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bee46:	68ab      	ldr	r3, [r5, #8]
   bee48:	60a3      	str	r3, [r4, #8]
    }
   bee4a:	4620      	mov	r0, r4
   bee4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000bee50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bee50:	b5f0      	push	{r4, r5, r6, r7, lr}
   bee52:	b089      	sub	sp, #36	; 0x24
   bee54:	4604      	mov	r4, r0
   bee56:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bee58:	a801      	add	r0, sp, #4
   bee5a:	4611      	mov	r1, r2
   bee5c:	f7ff fe54 	bl	beb08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bee60:	b1a4      	cbz	r4, bee8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bee62:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bee64:	b11d      	cbz	r5, bee6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bee66:	4628      	mov	r0, r5
   bee68:	f003 fa46 	bl	c22f8 <strdup>
   bee6c:	4605      	mov	r5, r0
   bee6e:	a801      	add	r0, sp, #4
   bee70:	a903      	add	r1, sp, #12
        type_(type) {
   bee72:	9503      	str	r5, [sp, #12]
   bee74:	f8ad 4010 	strh.w	r4, [sp, #16]
   bee78:	f7ff fea6 	bl	bebc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bee7c:	a803      	add	r0, sp, #12
   bee7e:	f7ff fe10 	bl	beaa2 <_ZN8particle5ErrorD1Ev>
   bee82:	a802      	add	r0, sp, #8
   bee84:	f7f6 f97a 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bee88:	b009      	add	sp, #36	; 0x24
   bee8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bee8c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bee8e:	2301      	movs	r3, #1
   bee90:	e8d5 2f4f 	ldrexb	r2, [r5]
   bee94:	2a00      	cmp	r2, #0
   bee96:	d103      	bne.n	beea0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bee98:	e8c5 3f41 	strexb	r1, r3, [r5]
   bee9c:	2900      	cmp	r1, #0
   bee9e:	d1f7      	bne.n	bee90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   beea0:	d1ef      	bne.n	bee82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   beea2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   beea4:	f3bf 8f5b 	dmb	ish
   beea8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   beeaa:	1d2b      	adds	r3, r5, #4
   beeac:	f3bf 8f5b 	dmb	ish
   beeb0:	e853 6f00 	ldrex	r6, [r3]
   beeb4:	e843 4200 	strex	r2, r4, [r3]
   beeb8:	2a00      	cmp	r2, #0
   beeba:	d1f9      	bne.n	beeb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   beebc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   beec0:	2e00      	cmp	r6, #0
   beec2:	d0de      	beq.n	bee82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   beec4:	4620      	mov	r0, r4
   beec6:	f7fe fa8f 	bl	bd3e8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   beeca:	4607      	mov	r7, r0
   beecc:	b160      	cbz	r0, beee8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   beece:	f105 010c 	add.w	r1, r5, #12
   beed2:	4630      	mov	r0, r6
   beed4:	f7ff fe43 	bl	beb5e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   beed8:	4630      	mov	r0, r6
   beeda:	f7f5 fa5f 	bl	b439c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   beede:	2110      	movs	r1, #16
   beee0:	4630      	mov	r0, r6
   beee2:	f7f5 f8de 	bl	b40a2 <_ZdlPvj>
   beee6:	e7cc      	b.n	bee82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   beee8:	4631      	mov	r1, r6
   beeea:	a803      	add	r0, sp, #12
   beeec:	f7ff ffa0 	bl	bee30 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   beef0:	7b2b      	ldrb	r3, [r5, #12]
   beef2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   beef6:	2010      	movs	r0, #16
   beef8:	f7f5 f8cd 	bl	b4096 <_Znwj>
   beefc:	4605      	mov	r5, r0
   beefe:	b1d0      	cbz	r0, bef36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bef00:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bef02:	2014      	movs	r0, #20
   bef04:	f7f5 f8c7 	bl	b4096 <_Znwj>
   bef08:	4604      	mov	r4, r0
   bef0a:	b178      	cbz	r0, bef2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bef0c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bef0e:	4601      	mov	r1, r0
   bef10:	a803      	add	r0, sp, #12
   bef12:	f7ff fad7 	bl	be4c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef16:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bef18:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bef1a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bef1c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bef1e:	9205      	str	r2, [sp, #20]
   bef20:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bef22:	60e3      	str	r3, [r4, #12]
   bef24:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bef28:	9206      	str	r2, [sp, #24]
   bef2a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bef2c:	4b06      	ldr	r3, [pc, #24]	; (bef48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bef2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bef30:	4b06      	ldr	r3, [pc, #24]	; (bef4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bef32:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bef34:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bef36:	a803      	add	r0, sp, #12
   bef38:	f7f5 fa30 	bl	b439c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bef3c:	2200      	movs	r2, #0
   bef3e:	4629      	mov	r1, r5
   bef40:	4803      	ldr	r0, [pc, #12]	; (bef50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bef42:	f7fe fa59 	bl	bd3f8 <application_thread_invoke>
   bef46:	e7c7      	b.n	beed8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bef48:	000beb71 	.word	0x000beb71
   bef4c:	000bef55 	.word	0x000bef55
   bef50:	000bd64f 	.word	0x000bd64f

000bef54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bef54:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bef56:	b570      	push	{r4, r5, r6, lr}
   bef58:	4604      	mov	r4, r0
	switch (__op)
   bef5a:	d103      	bne.n	bef64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bef5c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bef5e:	6003      	str	r3, [r0, #0]
      }
   bef60:	2000      	movs	r0, #0
   bef62:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bef64:	2a02      	cmp	r2, #2
   bef66:	d00c      	beq.n	bef82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bef68:	2a03      	cmp	r2, #3
   bef6a:	d1f9      	bne.n	bef60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bef6c:	6804      	ldr	r4, [r0, #0]
   bef6e:	2c00      	cmp	r4, #0
   bef70:	d0f6      	beq.n	bef60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bef72:	4620      	mov	r0, r4
   bef74:	f7f5 fa12 	bl	b439c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bef78:	2114      	movs	r1, #20
   bef7a:	4620      	mov	r0, r4
   bef7c:	f7f5 f891 	bl	b40a2 <_ZdlPvj>
   bef80:	e7ee      	b.n	bef60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bef82:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bef84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bef86:	f7f5 f886 	bl	b4096 <_Znwj>
   bef8a:	4605      	mov	r5, r0
   bef8c:	b120      	cbz	r0, bef98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bef8e:	4631      	mov	r1, r6
   bef90:	f7ff ff4e 	bl	bee30 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bef94:	7c33      	ldrb	r3, [r6, #16]
   bef96:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bef98:	6025      	str	r5, [r4, #0]
	}
   bef9a:	e7e1      	b.n	bef60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bef9c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bef9c:	2200      	movs	r2, #0
   bef9e:	6840      	ldr	r0, [r0, #4]
   befa0:	4611      	mov	r1, r2
   befa2:	f7fe babd 	b.w	bd520 <network_listening>

000befa6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   befa6:	2200      	movs	r2, #0
   befa8:	6840      	ldr	r0, [r0, #4]
   befaa:	4611      	mov	r1, r2
   befac:	f7fe bac8 	b.w	bd540 <network_get_listen_timeout>

000befb0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   befb0:	6840      	ldr	r0, [r0, #4]
   befb2:	2200      	movs	r2, #0
   befb4:	f7fe babc 	b.w	bd530 <network_set_listen_timeout>

000befb8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   befb8:	6840      	ldr	r0, [r0, #4]
   befba:	2200      	movs	r2, #0
   befbc:	f081 0101 	eor.w	r1, r1, #1
   befc0:	f7fe baa6 	b.w	bd510 <network_listen>

000befc4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   befc4:	2300      	movs	r3, #0
   befc6:	6840      	ldr	r0, [r0, #4]
   befc8:	461a      	mov	r2, r3
   befca:	4619      	mov	r1, r3
   befcc:	f7fe ba98 	b.w	bd500 <network_off>

000befd0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   befd0:	2300      	movs	r3, #0
   befd2:	6840      	ldr	r0, [r0, #4]
   befd4:	461a      	mov	r2, r3
   befd6:	4619      	mov	r1, r3
   befd8:	f7fe ba8a 	b.w	bd4f0 <network_on>

000befdc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   befdc:	2200      	movs	r2, #0
   befde:	6840      	ldr	r0, [r0, #4]
   befe0:	4611      	mov	r1, r2
   befe2:	f7fe ba7d 	b.w	bd4e0 <network_ready>

000befe6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   befe6:	2200      	movs	r2, #0
   befe8:	6840      	ldr	r0, [r0, #4]
   befea:	4611      	mov	r1, r2
   befec:	f7fe ba68 	b.w	bd4c0 <network_connecting>

000beff0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   beff0:	6840      	ldr	r0, [r0, #4]
   beff2:	2200      	movs	r2, #0
   beff4:	2102      	movs	r1, #2
   beff6:	f7fe ba6b 	b.w	bd4d0 <network_disconnect>

000beffa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   beffa:	2300      	movs	r3, #0
   beffc:	6840      	ldr	r0, [r0, #4]
   beffe:	461a      	mov	r2, r3
   bf000:	f7fe ba56 	b.w	bd4b0 <network_connect>

000bf004 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf004:	4b02      	ldr	r3, [pc, #8]	; (bf010 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf006:	2203      	movs	r2, #3
   bf008:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf00a:	4a02      	ldr	r2, [pc, #8]	; (bf014 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf00c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf00e:	4770      	bx	lr
   bf010:	2003e660 	.word	0x2003e660
   bf014:	000c59f8 	.word	0x000c59f8

000bf018 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf018:	4770      	bx	lr

000bf01a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf01c:	4606      	mov	r6, r0
   bf01e:	4615      	mov	r5, r2
   bf020:	460c      	mov	r4, r1
   bf022:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf024:	42bc      	cmp	r4, r7
   bf026:	d006      	beq.n	bf036 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf028:	6833      	ldr	r3, [r6, #0]
   bf02a:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf02e:	689b      	ldr	r3, [r3, #8]
   bf030:	4630      	mov	r0, r6
   bf032:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf034:	e7f6      	b.n	bf024 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf036:	4628      	mov	r0, r5
   bf038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf03a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf03a:	7c00      	ldrb	r0, [r0, #16]
   bf03c:	2200      	movs	r2, #0
   bf03e:	f7fe b831 	b.w	bd0a4 <hal_i2c_write>

000bf042 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf042:	7c00      	ldrb	r0, [r0, #16]
   bf044:	2100      	movs	r1, #0
   bf046:	f7fe b835 	b.w	bd0b4 <hal_i2c_available>

000bf04a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf04a:	7c00      	ldrb	r0, [r0, #16]
   bf04c:	2100      	movs	r1, #0
   bf04e:	f7fe b839 	b.w	bd0c4 <hal_i2c_read>

000bf052 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf052:	7c00      	ldrb	r0, [r0, #16]
   bf054:	2100      	movs	r1, #0
   bf056:	f7fe b83d 	b.w	bd0d4 <hal_i2c_peek>

000bf05a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf05a:	7c00      	ldrb	r0, [r0, #16]
   bf05c:	2100      	movs	r1, #0
   bf05e:	f7fe b841 	b.w	bd0e4 <hal_i2c_flush>

000bf062 <_ZN7TwoWireD0Ev>:
   bf062:	b510      	push	{r4, lr}
   bf064:	2114      	movs	r1, #20
   bf066:	4604      	mov	r4, r0
   bf068:	f7f5 f81b 	bl	b40a2 <_ZdlPvj>
   bf06c:	4620      	mov	r0, r4
   bf06e:	bd10      	pop	{r4, pc}

000bf070 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf070:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf076:	4604      	mov	r4, r0
   bf078:	4608      	mov	r0, r1
   bf07a:	2100      	movs	r1, #0
   bf07c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf080:	4b03      	ldr	r3, [pc, #12]	; (bf090 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bf082:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bf084:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bf086:	4611      	mov	r1, r2
   bf088:	f7fe f83c 	bl	bd104 <hal_i2c_init>
}
   bf08c:	4620      	mov	r0, r4
   bf08e:	bd10      	pop	{r4, pc}
   bf090:	000c5a34 	.word	0x000c5a34

000bf094 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf094:	7c00      	ldrb	r0, [r0, #16]
   bf096:	2200      	movs	r2, #0
   bf098:	f7fd bfe4 	b.w	bd064 <hal_i2c_set_speed>

000bf09c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf09c:	2300      	movs	r3, #0
   bf09e:	7c00      	ldrb	r0, [r0, #16]
   bf0a0:	461a      	mov	r2, r3
   bf0a2:	4619      	mov	r1, r3
   bf0a4:	f7fd bfe6 	b.w	bd074 <hal_i2c_begin>

000bf0a8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf0a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf0aa:	2200      	movs	r2, #0
   bf0ac:	2314      	movs	r3, #20
   bf0ae:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bf0b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bf0b6:	780b      	ldrb	r3, [r1, #0]
   bf0b8:	f88d 3008 	strb.w	r3, [sp, #8]
   bf0bc:	684b      	ldr	r3, [r1, #4]
   bf0be:	9303      	str	r3, [sp, #12]
   bf0c0:	68cb      	ldr	r3, [r1, #12]
   bf0c2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf0c4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bf0c6:	7a0b      	ldrb	r3, [r1, #8]
   bf0c8:	9305      	str	r3, [sp, #20]
   bf0ca:	a901      	add	r1, sp, #4
   bf0cc:	f7fe f822 	bl	bd114 <hal_i2c_request_ex>
}
   bf0d0:	b007      	add	sp, #28
   bf0d2:	f85d fb04 	ldr.w	pc, [sp], #4

000bf0d6 <_ZN7TwoWire11requestFromEhjh>:
{
   bf0d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf0d8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf0da:	f88d 1000 	strb.w	r1, [sp]
   bf0de:	f04f 0164 	mov.w	r1, #100	; 0x64
   bf0e2:	9103      	str	r1, [sp, #12]
   bf0e4:	bf18      	it	ne
   bf0e6:	2301      	movne	r3, #1
   bf0e8:	4669      	mov	r1, sp
    size_ = size;
   bf0ea:	9201      	str	r2, [sp, #4]
   bf0ec:	f88d 3008 	strb.w	r3, [sp, #8]
   bf0f0:	f7ff ffda 	bl	bf0a8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf0f4:	b005      	add	sp, #20
   bf0f6:	f85d fb04 	ldr.w	pc, [sp], #4

000bf0fa <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bf0fa:	2301      	movs	r3, #1
   bf0fc:	f7ff bfeb 	b.w	bf0d6 <_ZN7TwoWire11requestFromEhjh>

000bf100 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf100:	7c00      	ldrb	r0, [r0, #16]
   bf102:	2200      	movs	r2, #0
   bf104:	f7fd bfbe 	b.w	bd084 <hal_i2c_begin_transmission>

000bf108 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bf108:	b2c9      	uxtb	r1, r1
   bf10a:	f7ff bff9 	b.w	bf100 <_ZN7TwoWire17beginTransmissionEh>

000bf10e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf10e:	7c00      	ldrb	r0, [r0, #16]
   bf110:	2200      	movs	r2, #0
   bf112:	f7fd bfbf 	b.w	bd094 <hal_i2c_end_transmission>

000bf116 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf116:	2101      	movs	r1, #1
   bf118:	f7ff bff9 	b.w	bf10e <_ZN7TwoWire15endTransmissionEh>

000bf11c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bf11c:	f7fd bf9a 	b.w	bd054 <HAL_Interrupts_Disable_All>

000bf120 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bf120:	f7fd bf90 	b.w	bd044 <HAL_Interrupts_Enable_All>

000bf124 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf124:	4770      	bx	lr

000bf126 <_ZN9IPAddressD0Ev>:
   bf126:	b510      	push	{r4, lr}
   bf128:	2118      	movs	r1, #24
   bf12a:	4604      	mov	r4, r0
   bf12c:	f7f4 ffb9 	bl	b40a2 <_ZdlPvj>
   bf130:	4620      	mov	r0, r4
   bf132:	bd10      	pop	{r4, pc}

000bf134 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf134:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf136:	7d03      	ldrb	r3, [r0, #20]
   bf138:	2b06      	cmp	r3, #6
{
   bf13a:	b08d      	sub	sp, #52	; 0x34
   bf13c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf13e:	f100 0704 	add.w	r7, r0, #4
   bf142:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf146:	d012      	beq.n	bf16e <_ZNK9IPAddress7printToER5Print+0x3a>
   bf148:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf14c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf150:	220a      	movs	r2, #10
   bf152:	4630      	mov	r0, r6
   bf154:	f001 fabd 	bl	c06d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bf158:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bf15a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bf15c:	d019      	beq.n	bf192 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bf15e:	2c00      	cmp	r4, #0
   bf160:	d0f4      	beq.n	bf14c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bf162:	212e      	movs	r1, #46	; 0x2e
   bf164:	4630      	mov	r0, r6
   bf166:	f001 fa95 	bl	c0694 <_ZN5Print5printEc>
   bf16a:	4404      	add	r4, r0
   bf16c:	e7ee      	b.n	bf14c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf16e:	232f      	movs	r3, #47	; 0x2f
   bf170:	466a      	mov	r2, sp
   bf172:	4639      	mov	r1, r7
   bf174:	200a      	movs	r0, #10
		buf[0] = 0;
   bf176:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf17a:	f7fd ffd3 	bl	bd124 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bf17e:	4668      	mov	r0, sp
   bf180:	f003 f8d7 	bl	c2332 <strlen>
   bf184:	6833      	ldr	r3, [r6, #0]
   bf186:	4602      	mov	r2, r0
   bf188:	68db      	ldr	r3, [r3, #12]
   bf18a:	4669      	mov	r1, sp
   bf18c:	4630      	mov	r0, r6
   bf18e:	4798      	blx	r3
   bf190:	4604      	mov	r4, r0
    }
    return n;
}
   bf192:	4620      	mov	r0, r4
   bf194:	b00d      	add	sp, #52	; 0x34
   bf196:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bf198 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bf198:	b510      	push	{r4, lr}
   bf19a:	4b05      	ldr	r3, [pc, #20]	; (bf1b0 <_ZN9IPAddressC1Ev+0x18>)
   bf19c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bf19e:	2211      	movs	r2, #17
   bf1a0:	f840 3b04 	str.w	r3, [r0], #4
   bf1a4:	2100      	movs	r1, #0
   bf1a6:	f003 f839 	bl	c221c <memset>
}
   bf1aa:	4620      	mov	r0, r4
   bf1ac:	bd10      	pop	{r4, pc}
   bf1ae:	bf00      	nop
   bf1b0:	000c5a5c 	.word	0x000c5a5c

000bf1b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bf1b4:	4603      	mov	r3, r0
   bf1b6:	4a07      	ldr	r2, [pc, #28]	; (bf1d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bf1b8:	b510      	push	{r4, lr}
   bf1ba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bf1be:	f101 0210 	add.w	r2, r1, #16
   bf1c2:	f851 4b04 	ldr.w	r4, [r1], #4
   bf1c6:	f843 4b04 	str.w	r4, [r3], #4
   bf1ca:	4291      	cmp	r1, r2
   bf1cc:	d1f9      	bne.n	bf1c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bf1ce:	780a      	ldrb	r2, [r1, #0]
   bf1d0:	701a      	strb	r2, [r3, #0]
}
   bf1d2:	bd10      	pop	{r4, pc}
   bf1d4:	000c5a5c 	.word	0x000c5a5c

000bf1d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bf1d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bf1da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bf1de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bf1e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bf1e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bf1ea:	2304      	movs	r3, #4
   bf1ec:	6041      	str	r1, [r0, #4]
   bf1ee:	7503      	strb	r3, [r0, #20]
}
   bf1f0:	bd10      	pop	{r4, pc}
	...

000bf1f4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bf1f4:	b507      	push	{r0, r1, r2, lr}
   bf1f6:	4b06      	ldr	r3, [pc, #24]	; (bf210 <_ZN9IPAddressC1EPKh+0x1c>)
   bf1f8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bf1fa:	78cb      	ldrb	r3, [r1, #3]
   bf1fc:	9300      	str	r3, [sp, #0]
   bf1fe:	788b      	ldrb	r3, [r1, #2]
   bf200:	784a      	ldrb	r2, [r1, #1]
   bf202:	7809      	ldrb	r1, [r1, #0]
   bf204:	f7ff ffe8 	bl	bf1d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bf208:	b003      	add	sp, #12
   bf20a:	f85d fb04 	ldr.w	pc, [sp], #4
   bf20e:	bf00      	nop
   bf210:	000c5a5c 	.word	0x000c5a5c

000bf214 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bf214:	f100 0310 	add.w	r3, r0, #16
   bf218:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bf21a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bf21e:	2901      	cmp	r1, #1
   bf220:	4618      	mov	r0, r3
   bf222:	d108      	bne.n	bf236 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bf224:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bf228:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bf22c:	3a01      	subs	r2, #1
   bf22e:	f103 0310 	add.w	r3, r3, #16
   bf232:	d1f2      	bne.n	bf21a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bf234:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bf236:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bf238:	bf04      	itt	eq
   bf23a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bf23e:	1852      	addeq	r2, r2, r1
   bf240:	e7f4      	b.n	bf22c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bf242 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bf242:	b40e      	push	{r1, r2, r3}
   bf244:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf246:	b088      	sub	sp, #32
   bf248:	af00      	add	r7, sp, #0
   bf24a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf24e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf250:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf254:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf256:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf258:	462b      	mov	r3, r5
   bf25a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bf25c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf25e:	f7fe f9af 	bl	bd5c0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bf262:	280f      	cmp	r0, #15
   bf264:	687a      	ldr	r2, [r7, #4]
   bf266:	d91a      	bls.n	bf29e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bf268:	f100 0308 	add.w	r3, r0, #8
   bf26c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bf270:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bf272:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf276:	1c41      	adds	r1, r0, #1
   bf278:	462b      	mov	r3, r5
   bf27a:	4668      	mov	r0, sp
        va_start(args, fmt);
   bf27c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf27e:	f7fe f99f 	bl	bd5c0 <vsnprintf>
        if (n > 0) {
   bf282:	1e02      	subs	r2, r0, #0
   bf284:	dd04      	ble.n	bf290 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bf286:	6823      	ldr	r3, [r4, #0]
   bf288:	4669      	mov	r1, sp
   bf28a:	689b      	ldr	r3, [r3, #8]
   bf28c:	4620      	mov	r0, r4
   bf28e:	4798      	blx	r3
   bf290:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bf292:	3720      	adds	r7, #32
   bf294:	46bd      	mov	sp, r7
   bf296:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bf29a:	b003      	add	sp, #12
   bf29c:	4770      	bx	lr
    } else if (n > 0) {
   bf29e:	2800      	cmp	r0, #0
   bf2a0:	d0f7      	beq.n	bf292 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bf2a2:	6823      	ldr	r3, [r4, #0]
   bf2a4:	4602      	mov	r2, r0
   bf2a6:	689b      	ldr	r3, [r3, #8]
   bf2a8:	f107 0110 	add.w	r1, r7, #16
   bf2ac:	4620      	mov	r0, r4
   bf2ae:	4798      	blx	r3
}
   bf2b0:	e7ef      	b.n	bf292 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bf2b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf2b2:	b538      	push	{r3, r4, r5, lr}
   bf2b4:	680b      	ldr	r3, [r1, #0]
   bf2b6:	6003      	str	r3, [r0, #0]
   bf2b8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bf2ba:	6843      	ldr	r3, [r0, #4]
   bf2bc:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf2be:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bf2c0:	d008      	beq.n	bf2d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bf2c2:	b115      	cbz	r5, bf2ca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bf2c4:	686b      	ldr	r3, [r5, #4]
   bf2c6:	3301      	adds	r3, #1
   bf2c8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bf2ca:	6860      	ldr	r0, [r4, #4]
   bf2cc:	b108      	cbz	r0, bf2d2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bf2ce:	f7fe fa7c 	bl	bd7ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bf2d2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf2d4:	bd38      	pop	{r3, r4, r5, pc}

000bf2d6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bf2d6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf2d8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bf2da:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf2de:	689b      	ldr	r3, [r3, #8]
   bf2e0:	2201      	movs	r2, #1
   bf2e2:	f10d 0107 	add.w	r1, sp, #7
   bf2e6:	4798      	blx	r3
}
   bf2e8:	b003      	add	sp, #12
   bf2ea:	f85d fb04 	ldr.w	pc, [sp], #4

000bf2ee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf2ee:	460b      	mov	r3, r1
   bf2f0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bf2f2:	2200      	movs	r2, #0
   bf2f4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bf2f6:	e9c0 2200 	strd	r2, r2, [r0]
   bf2fa:	4604      	mov	r4, r0
        t_ = t;
   bf2fc:	6083      	str	r3, [r0, #8]
    if (t) {
   bf2fe:	b90b      	cbnz	r3, bf304 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bf300:	4620      	mov	r0, r4
   bf302:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bf304:	f7ff ffd5 	bl	bf2b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bf308:	e7fa      	b.n	bf300 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bf30a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bf30a:	6883      	ldr	r3, [r0, #8]
   bf30c:	b1eb      	cbz	r3, bf34a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bf30e:	781a      	ldrb	r2, [r3, #0]
   bf310:	2a03      	cmp	r2, #3
   bf312:	d81a      	bhi.n	bf34a <_ZNK5spark9JSONValue4typeEv+0x40>
   bf314:	e8df f002 	tbb	[pc, r2]
   bf318:	1b021704 	.word	0x1b021704
   bf31c:	2005      	movs	r0, #5
   bf31e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bf320:	6802      	ldr	r2, [r0, #0]
   bf322:	685b      	ldr	r3, [r3, #4]
   bf324:	6852      	ldr	r2, [r2, #4]
   bf326:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bf328:	282d      	cmp	r0, #45	; 0x2d
   bf32a:	d012      	beq.n	bf352 <_ZNK5spark9JSONValue4typeEv+0x48>
   bf32c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf330:	2b09      	cmp	r3, #9
   bf332:	d90e      	bls.n	bf352 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bf334:	2874      	cmp	r0, #116	; 0x74
   bf336:	d00e      	beq.n	bf356 <_ZNK5spark9JSONValue4typeEv+0x4c>
   bf338:	2866      	cmp	r0, #102	; 0x66
   bf33a:	d00c      	beq.n	bf356 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bf33c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bf340:	4258      	negs	r0, r3
   bf342:	4158      	adcs	r0, r3
   bf344:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bf346:	2006      	movs	r0, #6
   bf348:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bf34a:	2000      	movs	r0, #0
   bf34c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bf34e:	2004      	movs	r0, #4
   bf350:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bf352:	2003      	movs	r0, #3
   bf354:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bf356:	2002      	movs	r0, #2
}
   bf358:	4770      	bx	lr

000bf35a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bf35a:	b510      	push	{r4, lr}
   bf35c:	4604      	mov	r4, r0
    switch (type()) {
   bf35e:	f7ff ffd4 	bl	bf30a <_ZNK5spark9JSONValue4typeEv>
   bf362:	2802      	cmp	r0, #2
   bf364:	d00e      	beq.n	bf384 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bf366:	1ec3      	subs	r3, r0, #3
   bf368:	b2db      	uxtb	r3, r3
   bf36a:	2b01      	cmp	r3, #1
   bf36c:	d814      	bhi.n	bf398 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bf36e:	6822      	ldr	r2, [r4, #0]
   bf370:	68a3      	ldr	r3, [r4, #8]
   bf372:	6850      	ldr	r0, [r2, #4]
   bf374:	685b      	ldr	r3, [r3, #4]
}
   bf376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bf37a:	220a      	movs	r2, #10
   bf37c:	2100      	movs	r1, #0
   bf37e:	4418      	add	r0, r3
   bf380:	f003 bf02 	b.w	c3188 <strtol>
        const char* const s = d_->json + t_->start;
   bf384:	6822      	ldr	r2, [r4, #0]
   bf386:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bf388:	6852      	ldr	r2, [r2, #4]
   bf38a:	685b      	ldr	r3, [r3, #4]
   bf38c:	5cd0      	ldrb	r0, [r2, r3]
   bf38e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bf392:	4258      	negs	r0, r3
   bf394:	4158      	adcs	r0, r3
}
   bf396:	bd10      	pop	{r4, pc}
    switch (type()) {
   bf398:	2000      	movs	r0, #0
   bf39a:	e7fc      	b.n	bf396 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bf39c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf39c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf39e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bf3a0:	e9c0 3300 	strd	r3, r3, [r0]
   bf3a4:	4604      	mov	r4, r0
        n_(0) {
   bf3a6:	480e      	ldr	r0, [pc, #56]	; (bf3e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bf3a8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bf3ac:	b1a9      	cbz	r1, bf3da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bf3ae:	780b      	ldrb	r3, [r1, #0]
   bf3b0:	2b03      	cmp	r3, #3
   bf3b2:	d006      	beq.n	bf3c2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bf3b4:	b98b      	cbnz	r3, bf3da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bf3b6:	6813      	ldr	r3, [r2, #0]
   bf3b8:	6858      	ldr	r0, [r3, #4]
   bf3ba:	684b      	ldr	r3, [r1, #4]
   bf3bc:	5cc3      	ldrb	r3, [r0, r3]
   bf3be:	2b6e      	cmp	r3, #110	; 0x6e
   bf3c0:	d007      	beq.n	bf3d2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bf3c2:	6813      	ldr	r3, [r2, #0]
   bf3c4:	684d      	ldr	r5, [r1, #4]
   bf3c6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bf3c8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bf3ca:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bf3cc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bf3ce:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bf3d0:	60e3      	str	r3, [r4, #12]
   bf3d2:	4611      	mov	r1, r2
   bf3d4:	4620      	mov	r0, r4
   bf3d6:	f7ff ff6c 	bl	bf2b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf3da:	4620      	mov	r0, r4
   bf3dc:	bd38      	pop	{r3, r4, r5, pc}
   bf3de:	bf00      	nop
   bf3e0:	000c5acb 	.word	0x000c5acb

000bf3e4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf3e4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf3e6:	2500      	movs	r5, #0
   bf3e8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bf3ea:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bf3ee:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bf3f2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf3f6:	4604      	mov	r4, r0
   bf3f8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bf3fa:	b14b      	cbz	r3, bf410 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bf3fc:	781a      	ldrb	r2, [r3, #0]
   bf3fe:	2a01      	cmp	r2, #1
   bf400:	d106      	bne.n	bf410 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bf402:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bf406:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bf408:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bf40a:	6143      	str	r3, [r0, #20]
   bf40c:	f7ff ff51 	bl	bf2b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf410:	4620      	mov	r0, r4
   bf412:	bd38      	pop	{r3, r4, r5, pc}

000bf414 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bf414:	b510      	push	{r4, lr}
    if (!n_) {
   bf416:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bf418:	4604      	mov	r4, r0
    if (!n_) {
   bf41a:	b163      	cbz	r3, bf436 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bf41c:	6880      	ldr	r0, [r0, #8]
   bf41e:	60e0      	str	r0, [r4, #12]
    --n_;
   bf420:	3b01      	subs	r3, #1
    ++t_;
   bf422:	3010      	adds	r0, #16
   bf424:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bf426:	6120      	str	r0, [r4, #16]
    --n_;
   bf428:	6163      	str	r3, [r4, #20]
    if (n_) {
   bf42a:	b113      	cbz	r3, bf432 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bf42c:	f7ff fef2 	bl	bf214 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bf430:	60a0      	str	r0, [r4, #8]
    return true;
   bf432:	2001      	movs	r0, #1
   bf434:	e000      	b.n	bf438 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bf436:	4618      	mov	r0, r3
}
   bf438:	bd10      	pop	{r4, pc}

000bf43a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf43a:	b510      	push	{r4, lr}
    write('}');
   bf43c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf43e:	4604      	mov	r4, r0
    write('}');
   bf440:	f7ff ff49 	bl	bf2d6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bf444:	2301      	movs	r3, #1
   bf446:	7123      	strb	r3, [r4, #4]
}
   bf448:	4620      	mov	r0, r4
   bf44a:	bd10      	pop	{r4, pc}

000bf44c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bf44c:	b508      	push	{r3, lr}
    switch (state_) {
   bf44e:	7903      	ldrb	r3, [r0, #4]
   bf450:	2b01      	cmp	r3, #1
   bf452:	d002      	beq.n	bf45a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bf454:	2b02      	cmp	r3, #2
   bf456:	d004      	beq.n	bf462 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bf458:	bd08      	pop	{r3, pc}
        write(',');
   bf45a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bf45c:	f7ff ff3b 	bl	bf2d6 <_ZN5spark10JSONWriter5writeEc>
}
   bf460:	e7fa      	b.n	bf458 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bf462:	213a      	movs	r1, #58	; 0x3a
   bf464:	e7fa      	b.n	bf45c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bf466 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bf466:	b510      	push	{r4, lr}
   bf468:	4604      	mov	r4, r0
    writeSeparator();
   bf46a:	f7ff ffef 	bl	bf44c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bf46e:	4620      	mov	r0, r4
   bf470:	217b      	movs	r1, #123	; 0x7b
   bf472:	f7ff ff30 	bl	bf2d6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bf476:	2300      	movs	r3, #0
   bf478:	7123      	strb	r3, [r4, #4]
}
   bf47a:	4620      	mov	r0, r4
   bf47c:	bd10      	pop	{r4, pc}
	...

000bf480 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bf480:	b513      	push	{r0, r1, r4, lr}
   bf482:	4604      	mov	r4, r0
   bf484:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf486:	f7ff ffe1 	bl	bf44c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bf48a:	6823      	ldr	r3, [r4, #0]
   bf48c:	9a01      	ldr	r2, [sp, #4]
   bf48e:	68db      	ldr	r3, [r3, #12]
   bf490:	4903      	ldr	r1, [pc, #12]	; (bf4a0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bf492:	4620      	mov	r0, r4
   bf494:	4798      	blx	r3
    state_ = NEXT;
   bf496:	2301      	movs	r3, #1
}
   bf498:	4620      	mov	r0, r4
    state_ = NEXT;
   bf49a:	7123      	strb	r3, [r4, #4]
}
   bf49c:	b002      	add	sp, #8
   bf49e:	bd10      	pop	{r4, pc}
   bf4a0:	000c44cc 	.word	0x000c44cc

000bf4a4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bf4a4:	b513      	push	{r0, r1, r4, lr}
   bf4a6:	4604      	mov	r4, r0
   bf4a8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf4aa:	f7ff ffcf 	bl	bf44c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bf4ae:	6823      	ldr	r3, [r4, #0]
   bf4b0:	9a01      	ldr	r2, [sp, #4]
   bf4b2:	68db      	ldr	r3, [r3, #12]
   bf4b4:	4903      	ldr	r1, [pc, #12]	; (bf4c4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bf4b6:	4620      	mov	r0, r4
   bf4b8:	4798      	blx	r3
    state_ = NEXT;
   bf4ba:	2301      	movs	r3, #1
}
   bf4bc:	4620      	mov	r0, r4
    state_ = NEXT;
   bf4be:	7123      	strb	r3, [r4, #4]
}
   bf4c0:	b002      	add	sp, #8
   bf4c2:	bd10      	pop	{r4, pc}
   bf4c4:	000c5a68 	.word	0x000c5a68

000bf4c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf4cc:	460d      	mov	r5, r1
    write('"');
   bf4ce:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf4d0:	4690      	mov	r8, r2
   bf4d2:	4604      	mov	r4, r0
    write('"');
   bf4d4:	f7ff feff 	bl	bf2d6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bf4d8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bf580 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bf4dc:	44a8      	add	r8, r5
    const char *s = str;
   bf4de:	462f      	mov	r7, r5
    while (s != end) {
   bf4e0:	4547      	cmp	r7, r8
   bf4e2:	46ba      	mov	sl, r7
   bf4e4:	d03d      	beq.n	bf562 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bf4e6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bf4ea:	2e22      	cmp	r6, #34	; 0x22
   bf4ec:	d006      	beq.n	bf4fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf4ee:	2e5c      	cmp	r6, #92	; 0x5c
   bf4f0:	d004      	beq.n	bf4fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf4f2:	4630      	mov	r0, r6
   bf4f4:	f002 fe52 	bl	c219c <isprint>
   bf4f8:	2800      	cmp	r0, #0
   bf4fa:	d1f1      	bne.n	bf4e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bf4fc:	6823      	ldr	r3, [r4, #0]
   bf4fe:	ebaa 0205 	sub.w	r2, sl, r5
   bf502:	689b      	ldr	r3, [r3, #8]
   bf504:	4629      	mov	r1, r5
   bf506:	4620      	mov	r0, r4
   bf508:	4798      	blx	r3
            write('\\');
   bf50a:	215c      	movs	r1, #92	; 0x5c
   bf50c:	4620      	mov	r0, r4
   bf50e:	f7ff fee2 	bl	bf2d6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bf512:	2e0d      	cmp	r6, #13
   bf514:	d80a      	bhi.n	bf52c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bf516:	2e07      	cmp	r6, #7
   bf518:	d91c      	bls.n	bf554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf51a:	f1a6 0308 	sub.w	r3, r6, #8
   bf51e:	2b05      	cmp	r3, #5
   bf520:	d818      	bhi.n	bf554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf522:	e8df f003 	tbb	[pc, r3]
   bf526:	0f0d      	.short	0x0f0d
   bf528:	15131711 	.word	0x15131711
   bf52c:	2e22      	cmp	r6, #34	; 0x22
   bf52e:	d001      	beq.n	bf534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bf530:	2e5c      	cmp	r6, #92	; 0x5c
   bf532:	d10f      	bne.n	bf554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bf534:	4631      	mov	r1, r6
                write('b');
   bf536:	4620      	mov	r0, r4
   bf538:	f7ff fecd 	bl	bf2d6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bf53c:	463d      	mov	r5, r7
    while (s != end) {
   bf53e:	e7cf      	b.n	bf4e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bf540:	2162      	movs	r1, #98	; 0x62
   bf542:	e7f8      	b.n	bf536 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bf544:	2174      	movs	r1, #116	; 0x74
   bf546:	e7f6      	b.n	bf536 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bf548:	216e      	movs	r1, #110	; 0x6e
   bf54a:	e7f4      	b.n	bf536 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bf54c:	2166      	movs	r1, #102	; 0x66
   bf54e:	e7f2      	b.n	bf536 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bf550:	2172      	movs	r1, #114	; 0x72
   bf552:	e7f0      	b.n	bf536 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bf554:	6823      	ldr	r3, [r4, #0]
   bf556:	4632      	mov	r2, r6
   bf558:	68db      	ldr	r3, [r3, #12]
   bf55a:	4649      	mov	r1, r9
   bf55c:	4620      	mov	r0, r4
   bf55e:	4798      	blx	r3
                break;
   bf560:	e7ec      	b.n	bf53c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bf562:	42bd      	cmp	r5, r7
   bf564:	d005      	beq.n	bf572 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bf566:	6823      	ldr	r3, [r4, #0]
   bf568:	1b7a      	subs	r2, r7, r5
   bf56a:	689b      	ldr	r3, [r3, #8]
   bf56c:	4629      	mov	r1, r5
   bf56e:	4620      	mov	r0, r4
   bf570:	4798      	blx	r3
    }
    write('"');
   bf572:	2122      	movs	r1, #34	; 0x22
   bf574:	4620      	mov	r0, r4
   bf576:	f7ff feae 	bl	bf2d6 <_ZN5spark10JSONWriter5writeEc>
}
   bf57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf57e:	bf00      	nop
   bf580:	000c5a6b 	.word	0x000c5a6b

000bf584 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bf584:	b513      	push	{r0, r1, r4, lr}
   bf586:	4604      	mov	r4, r0
   bf588:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf58c:	f7ff ff5e 	bl	bf44c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bf590:	4620      	mov	r0, r4
   bf592:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf596:	f7ff ff97 	bl	bf4c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bf59a:	2302      	movs	r3, #2
}
   bf59c:	4620      	mov	r0, r4
    state_ = VALUE;
   bf59e:	7123      	strb	r3, [r4, #4]
}
   bf5a0:	b002      	add	sp, #8
   bf5a2:	bd10      	pop	{r4, pc}

000bf5a4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bf5a4:	b513      	push	{r0, r1, r4, lr}
   bf5a6:	4604      	mov	r4, r0
   bf5a8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf5ac:	f7ff ff4e 	bl	bf44c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bf5b0:	4620      	mov	r0, r4
   bf5b2:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf5b6:	f7ff ff87 	bl	bf4c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bf5ba:	2301      	movs	r3, #1
}
   bf5bc:	4620      	mov	r0, r4
    state_ = NEXT;
   bf5be:	7123      	strb	r3, [r4, #4]
}
   bf5c0:	b002      	add	sp, #8
   bf5c2:	bd10      	pop	{r4, pc}

000bf5c4 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bf5c4:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bf5c6:	460b      	mov	r3, r1
    s->update(ticks);
   bf5c8:	6892      	ldr	r2, [r2, #8]
   bf5ca:	4601      	mov	r1, r0
   bf5cc:	4618      	mov	r0, r3
   bf5ce:	4710      	bx	r2

000bf5d0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bf5d0:	b570      	push	{r4, r5, r6, lr}
   bf5d2:	4c0e      	ldr	r4, [pc, #56]	; (bf60c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bf5d4:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bf5d6:	2500      	movs	r5, #0
   bf5d8:	241c      	movs	r4, #28
   bf5da:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf5de:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bf5e2:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bf5e6:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf5e8:	f004 0403 	and.w	r4, r4, #3
   bf5ec:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bf5f0:	b2e4      	uxtb	r4, r4
   bf5f2:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bf5f4:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bf5f6:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bf5f8:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bf5fa:	7c42      	ldrb	r2, [r0, #17]
   bf5fc:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bf5fe:	bf0a      	itet	eq
   bf600:	4b03      	ldreq	r3, [pc, #12]	; (bf610 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bf602:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bf604:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bf608:	bd70      	pop	{r4, r5, r6, pc}
   bf60a:	bf00      	nop
   bf60c:	000c4944 	.word	0x000c4944
   bf610:	000bf5c5 	.word	0x000bf5c5

000bf614 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bf614:	6880      	ldr	r0, [r0, #8]
   bf616:	6803      	ldr	r3, [r0, #0]
   bf618:	68db      	ldr	r3, [r3, #12]
   bf61a:	4718      	bx	r3

000bf61c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bf61c:	4770      	bx	lr

000bf61e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bf61e:	4608      	mov	r0, r1
   bf620:	b111      	cbz	r1, bf628 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bf622:	680b      	ldr	r3, [r1, #0]
   bf624:	685b      	ldr	r3, [r3, #4]
   bf626:	4718      	bx	r3
}
   bf628:	4770      	bx	lr

000bf62a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bf62a:	4770      	bx	lr

000bf62c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf62c:	4770      	bx	lr

000bf62e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bf62e:	4770      	bx	lr

000bf630 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bf630:	4770      	bx	lr

000bf632 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bf632:	b538      	push	{r3, r4, r5, lr}
   bf634:	4604      	mov	r4, r0
   bf636:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bf638:	6800      	ldr	r0, [r0, #0]
   bf63a:	212e      	movs	r1, #46	; 0x2e
   bf63c:	f002 fe40 	bl	c22c0 <strchrnul>
    size = s - category;
   bf640:	6823      	ldr	r3, [r4, #0]
   bf642:	1ac3      	subs	r3, r0, r3
   bf644:	602b      	str	r3, [r5, #0]
    if (size) {
   bf646:	b123      	cbz	r3, bf652 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bf648:	7803      	ldrb	r3, [r0, #0]
   bf64a:	b103      	cbz	r3, bf64e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bf64c:	3001      	adds	r0, #1
   bf64e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf650:	6020      	str	r0, [r4, #0]
}
   bf652:	4618      	mov	r0, r3
   bf654:	bd38      	pop	{r3, r4, r5, pc}

000bf656 <_ZN5spark16JSONStreamWriterD0Ev>:
   bf656:	b510      	push	{r4, lr}
   bf658:	210c      	movs	r1, #12
   bf65a:	4604      	mov	r4, r0
   bf65c:	f7f4 fd21 	bl	b40a2 <_ZdlPvj>
   bf660:	4620      	mov	r0, r4
   bf662:	bd10      	pop	{r4, pc}

000bf664 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bf664:	b510      	push	{r4, lr}
   bf666:	2104      	movs	r1, #4
   bf668:	4604      	mov	r4, r0
   bf66a:	f7f4 fd1a 	bl	b40a2 <_ZdlPvj>
   bf66e:	4620      	mov	r0, r4
   bf670:	bd10      	pop	{r4, pc}

000bf672 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf672:	b510      	push	{r4, lr}
   bf674:	2104      	movs	r1, #4
   bf676:	4604      	mov	r4, r0
   bf678:	f7f4 fd13 	bl	b40a2 <_ZdlPvj>
   bf67c:	4620      	mov	r0, r4
   bf67e:	bd10      	pop	{r4, pc}

000bf680 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bf680:	f7fd bc78 	b.w	bcf74 <os_mutex_recursive_lock>

000bf684 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bf684:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bf686:	f002 fe25 	bl	c22d4 <strcmp>
}
   bf68a:	fab0 f080 	clz	r0, r0
   bf68e:	0940      	lsrs	r0, r0, #5
   bf690:	bd08      	pop	{r3, pc}

000bf692 <__tcf_1>:
   bf692:	4770      	bx	lr

000bf694 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bf694:	b510      	push	{r4, lr}
   bf696:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bf698:	f001 fd90 	bl	c11bc <_Z16_fetch_usbserialv>
   bf69c:	4284      	cmp	r4, r0
   bf69e:	d010      	beq.n	bf6c2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bf6a0:	f001 ff0e 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   bf6a4:	4284      	cmp	r4, r0
   bf6a6:	d105      	bne.n	bf6b4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bf6a8:	f001 ff0a 	bl	c14c0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bf6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bf6b0:	f001 bd1f 	b.w	c10f2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bf6b4:	b12c      	cbz	r4, bf6c2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bf6b6:	6823      	ldr	r3, [r4, #0]
   bf6b8:	4620      	mov	r0, r4
   bf6ba:	685b      	ldr	r3, [r3, #4]
}
   bf6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf6c0:	4718      	bx	r3
   bf6c2:	bd10      	pop	{r4, pc}

000bf6c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf6c4:	680b      	ldr	r3, [r1, #0]
   bf6c6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf6c8:	684b      	ldr	r3, [r1, #4]
   bf6ca:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf6cc:	b113      	cbz	r3, bf6d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bf6ce:	685a      	ldr	r2, [r3, #4]
   bf6d0:	3201      	adds	r2, #1
   bf6d2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf6d4:	4770      	bx	lr

000bf6d6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bf6d6:	b513      	push	{r0, r1, r4, lr}
   bf6d8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bf6da:	4608      	mov	r0, r1
   bf6dc:	9101      	str	r1, [sp, #4]
   bf6de:	f002 fe28 	bl	c2332 <strlen>
   bf6e2:	9901      	ldr	r1, [sp, #4]
   bf6e4:	4602      	mov	r2, r0
   bf6e6:	4620      	mov	r0, r4
}
   bf6e8:	b002      	add	sp, #8
   bf6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bf6ee:	f7ff bf59 	b.w	bf5a4 <_ZN5spark10JSONWriter5valueEPKcj>

000bf6f2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bf6f2:	b513      	push	{r0, r1, r4, lr}
   bf6f4:	4604      	mov	r4, r0
    write(str, strlen(str));
   bf6f6:	4608      	mov	r0, r1
   bf6f8:	9101      	str	r1, [sp, #4]
   bf6fa:	f002 fe1a 	bl	c2332 <strlen>
   bf6fe:	6823      	ldr	r3, [r4, #0]
   bf700:	9901      	ldr	r1, [sp, #4]
   bf702:	68db      	ldr	r3, [r3, #12]
   bf704:	4602      	mov	r2, r0
   bf706:	4620      	mov	r0, r4
}
   bf708:	b002      	add	sp, #8
   bf70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bf70e:	4718      	bx	r3

000bf710 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bf710:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf712:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bf714:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf718:	68db      	ldr	r3, [r3, #12]
   bf71a:	2201      	movs	r2, #1
   bf71c:	f10d 0107 	add.w	r1, sp, #7
   bf720:	4798      	blx	r3
}
   bf722:	b003      	add	sp, #12
   bf724:	f85d fb04 	ldr.w	pc, [sp], #4

000bf728 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf728:	b40e      	push	{r1, r2, r3}
   bf72a:	b503      	push	{r0, r1, lr}
   bf72c:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bf72e:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf730:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bf734:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bf736:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bf738:	f001 f8c1 	bl	c08be <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bf73c:	b002      	add	sp, #8
   bf73e:	f85d eb04 	ldr.w	lr, [sp], #4
   bf742:	b003      	add	sp, #12
   bf744:	4770      	bx	lr

000bf746 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bf746:	680a      	ldr	r2, [r1, #0]
   bf748:	6002      	str	r2, [r0, #0]
   bf74a:	684a      	ldr	r2, [r1, #4]
   bf74c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bf74e:	2200      	movs	r2, #0
   bf750:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bf754:	b510      	push	{r4, lr}
   bf756:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf758:	688c      	ldr	r4, [r1, #8]
   bf75a:	6084      	str	r4, [r0, #8]
   bf75c:	68cc      	ldr	r4, [r1, #12]
   bf75e:	60c4      	str	r4, [r0, #12]
   bf760:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf762:	608a      	str	r2, [r1, #8]
   bf764:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf766:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf768:	610a      	str	r2, [r1, #16]
   bf76a:	bd10      	pop	{r4, pc}

000bf76c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bf770:	e9d0 8400 	ldrd	r8, r4, [r0]
   bf774:	f04f 0a14 	mov.w	sl, #20
   bf778:	9300      	str	r3, [sp, #0]
   bf77a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bf77e:	4b18      	ldr	r3, [pc, #96]	; (bf7e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf780:	10a4      	asrs	r4, r4, #2
   bf782:	4617      	mov	r7, r2
   bf784:	435c      	muls	r4, r3
   bf786:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bf788:	2c00      	cmp	r4, #0
   bf78a:	dd21      	ble.n	bf7d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bf78c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bf78e:	fb0a f006 	mul.w	r0, sl, r6
   bf792:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bf796:	463a      	mov	r2, r7
   bf798:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bf79c:	5828      	ldr	r0, [r5, r0]
   bf79e:	9101      	str	r1, [sp, #4]
   bf7a0:	455f      	cmp	r7, fp
   bf7a2:	bf28      	it	cs
   bf7a4:	465a      	movcs	r2, fp
   bf7a6:	f002 fddf 	bl	c2368 <strncmp>
                if (cmp == 0) {
   bf7aa:	2800      	cmp	r0, #0
   bf7ac:	9901      	ldr	r1, [sp, #4]
   bf7ae:	f04f 0301 	mov.w	r3, #1
   bf7b2:	d10b      	bne.n	bf7cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bf7b4:	455f      	cmp	r7, fp
   bf7b6:	d103      	bne.n	bf7c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bf7b8:	9a00      	ldr	r2, [sp, #0]
   bf7ba:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf7bc:	4634      	mov	r4, r6
   bf7be:	e7e3      	b.n	bf788 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bf7c0:	d9fc      	bls.n	bf7bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bf7c2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bf7c4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bf7c8:	3e01      	subs	r6, #1
   bf7ca:	e7f7      	b.n	bf7bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bf7cc:	dbf9      	blt.n	bf7c2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bf7ce:	e7f5      	b.n	bf7bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bf7d0:	eba5 0508 	sub.w	r5, r5, r8
}
   bf7d4:	4802      	ldr	r0, [pc, #8]	; (bf7e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf7d6:	10ad      	asrs	r5, r5, #2
   bf7d8:	4368      	muls	r0, r5
   bf7da:	b003      	add	sp, #12
   bf7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf7e0:	cccccccd 	.word	0xcccccccd

000bf7e4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf7e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bf7e6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bf7e8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf7ea:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bf7ec:	b303      	cbz	r3, bf830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bf7ee:	b1f9      	cbz	r1, bf830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bf7f0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bf7f2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bf7f6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bf7f8:	a903      	add	r1, sp, #12
   bf7fa:	a801      	add	r0, sp, #4
   bf7fc:	f7ff ff19 	bl	bf632 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bf800:	4601      	mov	r1, r0
   bf802:	b1a8      	cbz	r0, bf830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bf804:	f10d 030b 	add.w	r3, sp, #11
   bf808:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bf80a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bf80e:	4620      	mov	r0, r4
   bf810:	f7ff ffac 	bl	bf76c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bf814:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bf818:	b153      	cbz	r3, bf830 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bf81a:	6823      	ldr	r3, [r4, #0]
   bf81c:	2414      	movs	r4, #20
   bf81e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bf822:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bf824:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bf828:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bf82a:	bfa8      	it	ge
   bf82c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bf82e:	e7e3      	b.n	bf7f8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bf830:	4628      	mov	r0, r5
   bf832:	b004      	add	sp, #16
   bf834:	bd70      	pop	{r4, r5, r6, pc}
	...

000bf838 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bf838:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bf83a:	4c09      	ldr	r4, [pc, #36]	; (bf860 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bf83c:	7823      	ldrb	r3, [r4, #0]
   bf83e:	f3bf 8f5b 	dmb	ish
   bf842:	07db      	lsls	r3, r3, #31
   bf844:	d409      	bmi.n	bf85a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf846:	4620      	mov	r0, r4
   bf848:	f7f4 fc3a 	bl	b40c0 <__cxa_guard_acquire>
   bf84c:	b128      	cbz	r0, bf85a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf84e:	4620      	mov	r0, r4
   bf850:	f7f4 fc3b 	bl	b40ca <__cxa_guard_release>
   bf854:	4803      	ldr	r0, [pc, #12]	; (bf864 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bf856:	f002 fc93 	bl	c2180 <atexit>
}
   bf85a:	4803      	ldr	r0, [pc, #12]	; (bf868 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bf85c:	bd10      	pop	{r4, pc}
   bf85e:	bf00      	nop
   bf860:	2003e66c 	.word	0x2003e66c
   bf864:	000bf62b 	.word	0x000bf62b
   bf868:	2003dbbc 	.word	0x2003dbbc

000bf86c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bf86c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bf86e:	4c09      	ldr	r4, [pc, #36]	; (bf894 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bf870:	7823      	ldrb	r3, [r4, #0]
   bf872:	f3bf 8f5b 	dmb	ish
   bf876:	07db      	lsls	r3, r3, #31
   bf878:	d409      	bmi.n	bf88e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bf87a:	4620      	mov	r0, r4
   bf87c:	f7f4 fc20 	bl	b40c0 <__cxa_guard_acquire>
   bf880:	b128      	cbz	r0, bf88e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bf882:	4620      	mov	r0, r4
   bf884:	f7f4 fc21 	bl	b40ca <__cxa_guard_release>
   bf888:	4803      	ldr	r0, [pc, #12]	; (bf898 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bf88a:	f002 fc79 	bl	c2180 <atexit>
    return &factory;
}
   bf88e:	4803      	ldr	r0, [pc, #12]	; (bf89c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bf890:	bd10      	pop	{r4, pc}
   bf892:	bf00      	nop
   bf894:	2003e670 	.word	0x2003e670
   bf898:	000bf693 	.word	0x000bf693
   bf89c:	2003dbc0 	.word	0x2003dbc0

000bf8a0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bf8a0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bf8a2:	2500      	movs	r5, #0
   bf8a4:	4604      	mov	r4, r0
   bf8a6:	e9c0 5500 	strd	r5, r5, [r0]
   bf8aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf8ae:	6085      	str	r5, [r0, #8]
   bf8b0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bf8b2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bf8b6:	f7fd fb4d 	bl	bcf54 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bf8ba:	f7ff ffbd 	bl	bf838 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bf8be:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bf8c0:	f7ff ffd4 	bl	bf86c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bf8c4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bf8c6:	6220      	str	r0, [r4, #32]
}
   bf8c8:	4620      	mov	r0, r4
   bf8ca:	bd38      	pop	{r3, r4, r5, pc}

000bf8cc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bf8cc:	b510      	push	{r4, lr}
    static LogManager mgr;
   bf8ce:	4c0a      	ldr	r4, [pc, #40]	; (bf8f8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   bf8d0:	7823      	ldrb	r3, [r4, #0]
   bf8d2:	f3bf 8f5b 	dmb	ish
   bf8d6:	07db      	lsls	r3, r3, #31
   bf8d8:	d40c      	bmi.n	bf8f4 <_ZN5spark10LogManager8instanceEv+0x28>
   bf8da:	4620      	mov	r0, r4
   bf8dc:	f7f4 fbf0 	bl	b40c0 <__cxa_guard_acquire>
   bf8e0:	b140      	cbz	r0, bf8f4 <_ZN5spark10LogManager8instanceEv+0x28>
   bf8e2:	4806      	ldr	r0, [pc, #24]	; (bf8fc <_ZN5spark10LogManager8instanceEv+0x30>)
   bf8e4:	f7ff ffdc 	bl	bf8a0 <_ZN5spark10LogManagerC1Ev>
   bf8e8:	4620      	mov	r0, r4
   bf8ea:	f7f4 fbee 	bl	b40ca <__cxa_guard_release>
   bf8ee:	4804      	ldr	r0, [pc, #16]	; (bf900 <_ZN5spark10LogManager8instanceEv+0x34>)
   bf8f0:	f002 fc46 	bl	c2180 <atexit>
    return &mgr;
}
   bf8f4:	4801      	ldr	r0, [pc, #4]	; (bf8fc <_ZN5spark10LogManager8instanceEv+0x30>)
   bf8f6:	bd10      	pop	{r4, pc}
   bf8f8:	2003e668 	.word	0x2003e668
   bf8fc:	2003e678 	.word	0x2003e678
   bf900:	000bfe21 	.word	0x000bfe21

000bf904 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bf904:	4a02      	ldr	r2, [pc, #8]	; (bf910 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bf906:	4903      	ldr	r1, [pc, #12]	; (bf914 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bf908:	4803      	ldr	r0, [pc, #12]	; (bf918 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bf90a:	2300      	movs	r3, #0
   bf90c:	f7fd bd42 	b.w	bd394 <log_set_callbacks>
   bf910:	000bfc05 	.word	0x000bfc05
   bf914:	000bfb91 	.word	0x000bfb91
   bf918:	000bfb11 	.word	0x000bfb11

000bf91c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bf91c:	2300      	movs	r3, #0
   bf91e:	461a      	mov	r2, r3
   bf920:	4619      	mov	r1, r3
   bf922:	4618      	mov	r0, r3
   bf924:	f7fd bd36 	b.w	bd394 <log_set_callbacks>

000bf928 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bf928:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bf92a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bf92c:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf92e:	4668      	mov	r0, sp
   bf930:	f7ff fec8 	bl	bf6c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bf934:	466a      	mov	r2, sp
   bf936:	4629      	mov	r1, r5
   bf938:	4620      	mov	r0, r4
   bf93a:	f7ff fd53 	bl	bf3e4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bf93e:	a801      	add	r0, sp, #4
   bf940:	f7f5 fc1c 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf944:	4620      	mov	r0, r4
   bf946:	b003      	add	sp, #12
   bf948:	bd30      	pop	{r4, r5, pc}

000bf94a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bf94a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bf94c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bf94e:	4604      	mov	r4, r0
   bf950:	4668      	mov	r0, sp
   bf952:	f7ff feb7 	bl	bf6c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bf956:	466a      	mov	r2, sp
   bf958:	4629      	mov	r1, r5
   bf95a:	4620      	mov	r0, r4
   bf95c:	f7ff fd1e 	bl	bf39c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bf960:	a801      	add	r0, sp, #4
   bf962:	f7f5 fc0b 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf966:	4620      	mov	r0, r4
   bf968:	b003      	add	sp, #12
   bf96a:	bd30      	pop	{r4, r5, pc}

000bf96c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bf96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bf96e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bf970:	4604      	mov	r4, r0
   bf972:	4668      	mov	r0, sp
   bf974:	f7ff fea6 	bl	bf6c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bf978:	466a      	mov	r2, sp
   bf97a:	4629      	mov	r1, r5
   bf97c:	4620      	mov	r0, r4
   bf97e:	f7ff fcb6 	bl	bf2ee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bf982:	a801      	add	r0, sp, #4
   bf984:	f7f5 fbfa 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf988:	4620      	mov	r0, r4
   bf98a:	b003      	add	sp, #12
   bf98c:	bd30      	pop	{r4, r5, pc}
	...

000bf990 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bf990:	b570      	push	{r4, r5, r6, lr}
   bf992:	b08a      	sub	sp, #40	; 0x28
   bf994:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bf996:	4601      	mov	r1, r0
   bf998:	a804      	add	r0, sp, #16
   bf99a:	f7ff ffc5 	bl	bf928 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bf99e:	4e14      	ldr	r6, [pc, #80]	; (bf9f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bf9a0:	a804      	add	r0, sp, #16
   bf9a2:	f7ff fd37 	bl	bf414 <_ZN5spark18JSONObjectIterator4nextEv>
   bf9a6:	b1e8      	cbz	r0, bf9e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bf9a8:	a904      	add	r1, sp, #16
   bf9aa:	4668      	mov	r0, sp
   bf9ac:	f7ff ffcd 	bl	bf94a <_ZNK5spark18JSONObjectIterator4nameEv>
   bf9b0:	9802      	ldr	r0, [sp, #8]
   bf9b2:	4631      	mov	r1, r6
   bf9b4:	f7ff fe66 	bl	bf684 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bf9b8:	4604      	mov	r4, r0
   bf9ba:	b110      	cbz	r0, bf9c2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bf9bc:	1e2c      	subs	r4, r5, #0
   bf9be:	bf18      	it	ne
   bf9c0:	2401      	movne	r4, #1
   bf9c2:	a801      	add	r0, sp, #4
   bf9c4:	f7f5 fbda 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf9c8:	2c00      	cmp	r4, #0
   bf9ca:	d0e9      	beq.n	bf9a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bf9cc:	a904      	add	r1, sp, #16
   bf9ce:	4668      	mov	r0, sp
   bf9d0:	f7ff ffcc 	bl	bf96c <_ZNK5spark18JSONObjectIterator5valueEv>
   bf9d4:	4668      	mov	r0, sp
   bf9d6:	f7ff fcc0 	bl	bf35a <_ZNK5spark9JSONValue5toIntEv>
   bf9da:	6028      	str	r0, [r5, #0]
   bf9dc:	a801      	add	r0, sp, #4
   bf9de:	f7f5 fbcd 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf9e2:	e7dd      	b.n	bf9a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bf9e4:	a805      	add	r0, sp, #20
   bf9e6:	f7f5 fbc9 	bl	b517c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf9ea:	b00a      	add	sp, #40	; 0x28
   bf9ec:	bd70      	pop	{r4, r5, r6, pc}
   bf9ee:	bf00      	nop
   bf9f0:	000c5a71 	.word	0x000c5a71

000bf9f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bf9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf9f6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bf9f8:	4620      	mov	r0, r4
   bf9fa:	4913      	ldr	r1, [pc, #76]	; (bfa48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bf9fc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bf9fe:	f002 fc69 	bl	c22d4 <strcmp>
   bfa02:	b950      	cbnz	r0, bfa1a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bfa04:	f001 fbda 	bl	c11bc <_Z16_fetch_usbserialv>
   bfa08:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bfa0c:	f001 fbc6 	bl	c119c <_ZN9USBSerial5beginEl>
}
   bfa10:	b003      	add	sp, #12
   bfa12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bfa16:	f001 bbd1 	b.w	c11bc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bfa1a:	490c      	ldr	r1, [pc, #48]	; (bfa4c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bfa1c:	4620      	mov	r0, r4
   bfa1e:	f002 fc59 	bl	c22d4 <strcmp>
   bfa22:	b978      	cbnz	r0, bfa44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bfa24:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bfa28:	a901      	add	r1, sp, #4
   bfa2a:	4628      	mov	r0, r5
        int baud = 9600;
   bfa2c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bfa2e:	f7ff ffaf 	bl	bf990 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bfa32:	f001 fd45 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   bfa36:	9901      	ldr	r1, [sp, #4]
   bfa38:	f001 fb58 	bl	c10ec <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bfa3c:	f001 fd40 	bl	c14c0 <_Z22__fetch_global_Serial1v>
}
   bfa40:	b003      	add	sp, #12
   bfa42:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bfa44:	2000      	movs	r0, #0
   bfa46:	e7fb      	b.n	bfa40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bfa48:	000c5a76 	.word	0x000c5a76
   bfa4c:	000c5a7d 	.word	0x000c5a7d

000bfa50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfa50:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bfa52:	e9d0 5300 	ldrd	r5, r3, [r0]
   bfa56:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfa58:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bfa5a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfa5e:	42ae      	cmp	r6, r5
   bfa60:	d005      	beq.n	bfa6e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bfa62:	f105 0008 	add.w	r0, r5, #8
   bfa66:	f7ff fff3 	bl	bfa50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfa6a:	3514      	adds	r5, #20
   bfa6c:	e7f7      	b.n	bfa5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bfa6e:	6820      	ldr	r0, [r4, #0]
   bfa70:	f7fd fd86 	bl	bd580 <free>
}
   bfa74:	4620      	mov	r0, r4
   bfa76:	bd70      	pop	{r4, r5, r6, pc}

000bfa78 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bfa78:	b510      	push	{r4, lr}
   bfa7a:	4604      	mov	r4, r0
   bfa7c:	300c      	adds	r0, #12
   bfa7e:	f7ff ffe7 	bl	bfa50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfa82:	4620      	mov	r0, r4
   bfa84:	f7fe f9a9 	bl	bddda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bfa88:	4620      	mov	r0, r4
   bfa8a:	bd10      	pop	{r4, pc}

000bfa8c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bfa8c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bfa8e:	4b04      	ldr	r3, [pc, #16]	; (bfaa0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bfa90:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bfa92:	f840 3b04 	str.w	r3, [r0], #4
   bfa96:	f7ff ffef 	bl	bfa78 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bfa9a:	4620      	mov	r0, r4
   bfa9c:	bd10      	pop	{r4, pc}
   bfa9e:	bf00      	nop
   bfaa0:	000c492c 	.word	0x000c492c

000bfaa4 <_ZN5spark16StreamLogHandlerD0Ev>:
   bfaa4:	b510      	push	{r4, lr}
   bfaa6:	4604      	mov	r4, r0
   bfaa8:	f7ff fff0 	bl	bfa8c <_ZN5spark16StreamLogHandlerD1Ev>
   bfaac:	4620      	mov	r0, r4
   bfaae:	2124      	movs	r1, #36	; 0x24
   bfab0:	f7f4 faf7 	bl	b40a2 <_ZdlPvj>
   bfab4:	4620      	mov	r0, r4
   bfab6:	bd10      	pop	{r4, pc}

000bfab8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bfab8:	b510      	push	{r4, lr}
   bfaba:	4b03      	ldr	r3, [pc, #12]	; (bfac8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bfabc:	6003      	str	r3, [r0, #0]
   bfabe:	4604      	mov	r4, r0
   bfac0:	f7ff ffe4 	bl	bfa8c <_ZN5spark16StreamLogHandlerD1Ev>
   bfac4:	4620      	mov	r0, r4
   bfac6:	bd10      	pop	{r4, pc}
   bfac8:	000c5b18 	.word	0x000c5b18

000bfacc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bfacc:	b510      	push	{r4, lr}
   bface:	4604      	mov	r4, r0
   bfad0:	f7ff fff2 	bl	bfab8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bfad4:	4620      	mov	r0, r4
   bfad6:	2124      	movs	r1, #36	; 0x24
   bfad8:	f7f4 fae3 	bl	b40a2 <_ZdlPvj>
   bfadc:	4620      	mov	r0, r4
   bfade:	bd10      	pop	{r4, pc}

000bfae0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bfae0:	2200      	movs	r2, #0
   bfae2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bfae6:	b510      	push	{r4, lr}
        capacity_(0) {
   bfae8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bfaea:	680c      	ldr	r4, [r1, #0]
   bfaec:	6004      	str	r4, [r0, #0]
   bfaee:	684c      	ldr	r4, [r1, #4]
   bfaf0:	6044      	str	r4, [r0, #4]
   bfaf2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfaf4:	600a      	str	r2, [r1, #0]
   bfaf6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bfaf8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfafa:	608a      	str	r2, [r1, #8]
}
   bfafc:	bd10      	pop	{r4, pc}

000bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   bfafe:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bfb00:	6803      	ldr	r3, [r0, #0]
   bfb02:	4604      	mov	r4, r0
   bfb04:	6818      	ldr	r0, [r3, #0]
   bfb06:	f7fd fa3d 	bl	bcf84 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bfb0a:	4620      	mov	r0, r4
   bfb0c:	bd10      	pop	{r4, pc}
	...

000bfb10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bfb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfb14:	b087      	sub	sp, #28
   bfb16:	4680      	mov	r8, r0
   bfb18:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bfb1a:	4b1c      	ldr	r3, [pc, #112]	; (bfb8c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bfb1c:	685b      	ldr	r3, [r3, #4]
   bfb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfb22:	4689      	mov	r9, r1
   bfb24:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bfb26:	b96b      	cbnz	r3, bfb44 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bfb28:	f7ff fed0 	bl	bf8cc <_ZN5spark10LogManager8instanceEv>
   bfb2c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfb2e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bfb32:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfb34:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bfb36:	f7ff fda3 	bl	bf680 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bfb3a:	7b23      	ldrb	r3, [r4, #12]
   bfb3c:	b12b      	cbz	r3, bfb4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bfb3e:	a805      	add	r0, sp, #20
   bfb40:	f7ff ffdd 	bl	bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bfb44:	b007      	add	sp, #28
   bfb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bfb4a:	2301      	movs	r3, #1
   bfb4c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bfb4e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bfb52:	fa5f f989 	uxtb.w	r9, r9
   bfb56:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfb5a:	45aa      	cmp	sl, r5
   bfb5c:	d012      	beq.n	bfb84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bfb5e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bfb62:	4631      	mov	r1, r6
   bfb64:	1d38      	adds	r0, r7, #4
   bfb66:	f7ff fe3d 	bl	bf7e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfb6a:	4581      	cmp	r9, r0
   bfb6c:	d3f5      	bcc.n	bfb5a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bfb6e:	683b      	ldr	r3, [r7, #0]
   bfb70:	9a03      	ldr	r2, [sp, #12]
   bfb72:	9200      	str	r2, [sp, #0]
   bfb74:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bfb78:	464a      	mov	r2, r9
   bfb7a:	4633      	mov	r3, r6
   bfb7c:	4641      	mov	r1, r8
   bfb7e:	4638      	mov	r0, r7
   bfb80:	47d8      	blx	fp
   bfb82:	e7ea      	b.n	bfb5a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bfb84:	2300      	movs	r3, #0
   bfb86:	7323      	strb	r3, [r4, #12]
   bfb88:	e7d9      	b.n	bfb3e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bfb8a:	bf00      	nop
   bfb8c:	e000ed00 	.word	0xe000ed00

000bfb90 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bfb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfb94:	469b      	mov	fp, r3
   bfb96:	4b1a      	ldr	r3, [pc, #104]	; (bfc00 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bfb98:	685b      	ldr	r3, [r3, #4]
   bfb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfb9e:	4680      	mov	r8, r0
   bfba0:	4689      	mov	r9, r1
   bfba2:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bfba4:	b96b      	cbnz	r3, bfbc2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bfba6:	f7ff fe91 	bl	bf8cc <_ZN5spark10LogManager8instanceEv>
   bfbaa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfbac:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bfbb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfbb2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfbb4:	f7ff fd64 	bl	bf680 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bfbb8:	7b23      	ldrb	r3, [r4, #12]
   bfbba:	b12b      	cbz	r3, bfbc8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bfbbc:	a801      	add	r0, sp, #4
   bfbbe:	f7ff ff9e 	bl	bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfbc2:	b003      	add	sp, #12
   bfbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bfbc8:	2301      	movs	r3, #1
   bfbca:	7323      	strb	r3, [r4, #12]
   bfbcc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bfbd0:	b2f6      	uxtb	r6, r6
   bfbd2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfbd6:	4555      	cmp	r5, sl
   bfbd8:	d00e      	beq.n	bfbf8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bfbda:	f855 7b04 	ldr.w	r7, [r5], #4
   bfbde:	4659      	mov	r1, fp
   bfbe0:	1d38      	adds	r0, r7, #4
   bfbe2:	f7ff fdff 	bl	bf7e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfbe6:	4286      	cmp	r6, r0
   bfbe8:	d3f5      	bcc.n	bfbd6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bfbea:	683b      	ldr	r3, [r7, #0]
   bfbec:	464a      	mov	r2, r9
   bfbee:	68db      	ldr	r3, [r3, #12]
   bfbf0:	4641      	mov	r1, r8
   bfbf2:	4638      	mov	r0, r7
   bfbf4:	4798      	blx	r3
   bfbf6:	e7ee      	b.n	bfbd6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bfbf8:	2300      	movs	r3, #0
   bfbfa:	7323      	strb	r3, [r4, #12]
   bfbfc:	e7de      	b.n	bfbbc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bfbfe:	bf00      	nop
   bfc00:	e000ed00 	.word	0xe000ed00

000bfc04 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bfc04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bfc08:	4b16      	ldr	r3, [pc, #88]	; (bfc64 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bfc0a:	685b      	ldr	r3, [r3, #4]
   bfc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfc10:	4605      	mov	r5, r0
   bfc12:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bfc14:	bb1b      	cbnz	r3, bfc5e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bfc16:	f7ff fe59 	bl	bf8cc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bfc1a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bfc1e:	4604      	mov	r4, r0
   bfc20:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfc22:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfc24:	f7ff fd2c 	bl	bf680 <_ZN14RecursiveMutex4lockEv.isra.0>
   bfc28:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bfc2c:	2446      	movs	r4, #70	; 0x46
   bfc2e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfc32:	45b0      	cmp	r8, r6
   bfc34:	d109      	bne.n	bfc4a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bfc36:	a801      	add	r0, sp, #4
   bfc38:	f7ff ff61 	bl	bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bfc3c:	42a5      	cmp	r5, r4
   bfc3e:	bfb4      	ite	lt
   bfc40:	2000      	movlt	r0, #0
   bfc42:	2001      	movge	r0, #1
}
   bfc44:	b002      	add	sp, #8
   bfc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bfc4a:	f856 0b04 	ldr.w	r0, [r6], #4
   bfc4e:	4639      	mov	r1, r7
   bfc50:	3004      	adds	r0, #4
   bfc52:	f7ff fdc7 	bl	bf7e4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bfc56:	4284      	cmp	r4, r0
   bfc58:	bfa8      	it	ge
   bfc5a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bfc5c:	e7e9      	b.n	bfc32 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bfc5e:	2000      	movs	r0, #0
   bfc60:	e7f0      	b.n	bfc44 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bfc62:	bf00      	nop
   bfc64:	e000ed00 	.word	0xe000ed00

000bfc68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfc6a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bfc6e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfc70:	4604      	mov	r4, r0
   bfc72:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfc74:	db0d      	blt.n	bfc92 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bfc76:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bfc78:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bfc7a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bfc7c:	dd04      	ble.n	bfc88 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bfc7e:	00b9      	lsls	r1, r7, #2
   bfc80:	f7fd fc86 	bl	bd590 <realloc>
            if (!d) {
   bfc84:	b918      	cbnz	r0, bfc8e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bfc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bfc88:	f7fd fc7a 	bl	bd580 <free>
        T* d = nullptr;
   bfc8c:	2000      	movs	r0, #0
        data_ = d;
   bfc8e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bfc90:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bfc92:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bfc94:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bfc96:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bfc9a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfc9c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bfca0:	1d08      	adds	r0, r1, #4
   bfca2:	f002 faa1 	bl	c21e8 <memmove>
    new(p) T(std::move(value));
   bfca6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bfcaa:	6863      	ldr	r3, [r4, #4]
   bfcac:	3301      	adds	r3, #1
   bfcae:	6063      	str	r3, [r4, #4]
    return true;
   bfcb0:	2001      	movs	r0, #1
   bfcb2:	e7e8      	b.n	bfc86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bfcb4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfcb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bfcb6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfcba:	4604      	mov	r4, r0
   bfcbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfcbe:	9301      	str	r3, [sp, #4]
   bfcc0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bfcc2:	f7ff fcdd 	bl	bf680 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bfcc6:	e9d4 3200 	ldrd	r3, r2, [r4]
   bfcca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bfcce:	4293      	cmp	r3, r2
   bfcd0:	4619      	mov	r1, r3
   bfcd2:	d00b      	beq.n	bfcec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bfcd4:	6809      	ldr	r1, [r1, #0]
   bfcd6:	42a9      	cmp	r1, r5
   bfcd8:	f103 0304 	add.w	r3, r3, #4
   bfcdc:	d1f7      	bne.n	bfcce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bfcde:	a801      	add	r0, sp, #4
   bfce0:	f7ff ff0d 	bl	bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfce4:	2500      	movs	r5, #0
}
   bfce6:	4628      	mov	r0, r5
   bfce8:	b003      	add	sp, #12
   bfcea:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bfcec:	4629      	mov	r1, r5
   bfcee:	4620      	mov	r0, r4
   bfcf0:	f7ff ffba 	bl	bfc68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bfcf4:	4605      	mov	r5, r0
   bfcf6:	2800      	cmp	r0, #0
   bfcf8:	d0f1      	beq.n	bfcde <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bfcfa:	6863      	ldr	r3, [r4, #4]
   bfcfc:	2b01      	cmp	r3, #1
   bfcfe:	d101      	bne.n	bfd04 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bfd00:	f7ff fe00 	bl	bf904 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfd04:	a801      	add	r0, sp, #4
   bfd06:	f7ff fefa 	bl	bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfd0a:	e7ec      	b.n	bfce6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bfd0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfd0c:	b570      	push	{r4, r5, r6, lr}
   bfd0e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bfd10:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfd14:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bfd16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bfd1a:	4282      	cmp	r2, r0
   bfd1c:	d00f      	beq.n	bfd3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bfd1e:	4601      	mov	r1, r0
            if (*p == value) {
   bfd20:	681d      	ldr	r5, [r3, #0]
   bfd22:	f851 6b04 	ldr.w	r6, [r1], #4
   bfd26:	42ae      	cmp	r6, r5
   bfd28:	d107      	bne.n	bfd3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfd2a:	1a52      	subs	r2, r2, r1
   bfd2c:	f002 fa5c 	bl	c21e8 <memmove>
    --size_;
   bfd30:	6863      	ldr	r3, [r4, #4]
   bfd32:	3b01      	subs	r3, #1
   bfd34:	6063      	str	r3, [r4, #4]
    return true;
   bfd36:	2001      	movs	r0, #1
}
   bfd38:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bfd3a:	4608      	mov	r0, r1
   bfd3c:	e7ed      	b.n	bfd1a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bfd3e:	2000      	movs	r0, #0
   bfd40:	e7fa      	b.n	bfd38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bfd42 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfd42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bfd44:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfd48:	4604      	mov	r4, r0
   bfd4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bfd4c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfd4e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bfd50:	f7ff fc96 	bl	bf680 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bfd54:	a901      	add	r1, sp, #4
   bfd56:	4620      	mov	r0, r4
   bfd58:	f7ff ffd8 	bl	bfd0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bfd5c:	b118      	cbz	r0, bfd66 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bfd5e:	6863      	ldr	r3, [r4, #4]
   bfd60:	b90b      	cbnz	r3, bfd66 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bfd62:	f7ff fddb 	bl	bf91c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfd66:	a803      	add	r0, sp, #12
   bfd68:	f7ff fec9 	bl	bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfd6c:	b004      	add	sp, #16
   bfd6e:	bd10      	pop	{r4, pc}

000bfd70 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bfd70:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bfd72:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bfd76:	2318      	movs	r3, #24
   bfd78:	4604      	mov	r4, r0
   bfd7a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bfd7e:	42ae      	cmp	r6, r5
   bfd80:	d015      	beq.n	bfdae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bfd82:	f105 0110 	add.w	r1, r5, #16
   bfd86:	4620      	mov	r0, r4
   bfd88:	f7ff ffc0 	bl	bfd0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bfd8c:	6863      	ldr	r3, [r4, #4]
   bfd8e:	b90b      	cbnz	r3, bfd94 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bfd90:	f7ff fdc4 	bl	bf91c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bfd94:	69e0      	ldr	r0, [r4, #28]
   bfd96:	6929      	ldr	r1, [r5, #16]
   bfd98:	6803      	ldr	r3, [r0, #0]
   bfd9a:	68db      	ldr	r3, [r3, #12]
   bfd9c:	4798      	blx	r3
        if (h.stream) {
   bfd9e:	6969      	ldr	r1, [r5, #20]
   bfda0:	b119      	cbz	r1, bfdaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bfda2:	6a20      	ldr	r0, [r4, #32]
   bfda4:	6803      	ldr	r3, [r0, #0]
   bfda6:	68db      	ldr	r3, [r3, #12]
   bfda8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bfdaa:	3518      	adds	r5, #24
   bfdac:	e7e7      	b.n	bfd7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bfdae:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bfdb2:	2618      	movs	r6, #24
   bfdb4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfdb8:	42ae      	cmp	r6, r5
   bfdba:	d004      	beq.n	bfdc6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bfdbc:	4628      	mov	r0, r5
   bfdbe:	f000 ff81 	bl	c0cc4 <_ZN6StringD1Ev>
   bfdc2:	3518      	adds	r5, #24
   bfdc4:	e7f8      	b.n	bfdb8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bfdc6:	2300      	movs	r3, #0
   bfdc8:	6163      	str	r3, [r4, #20]
}
   bfdca:	bd70      	pop	{r4, r5, r6, pc}

000bfdcc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bfdcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bfdce:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bfdd0:	f7ff fda4 	bl	bf91c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfdd4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bfdd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfdda:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfddc:	f7ff fc50 	bl	bf680 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bfde0:	4620      	mov	r0, r4
   bfde2:	f7ff ffc5 	bl	bfd70 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bfde6:	a801      	add	r0, sp, #4
   bfde8:	f7ff fe89 	bl	bfafe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bfdec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bfdee:	b108      	cbz	r0, bfdf4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bfdf0:	f7fd f8b8 	bl	bcf64 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bfdf4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bfdf8:	2618      	movs	r6, #24
   bfdfa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfdfe:	42ae      	cmp	r6, r5
   bfe00:	d004      	beq.n	bfe0c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bfe02:	4628      	mov	r0, r5
   bfe04:	f000 ff5e 	bl	c0cc4 <_ZN6StringD1Ev>
   bfe08:	3518      	adds	r5, #24
   bfe0a:	e7f8      	b.n	bfdfe <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bfe0c:	6920      	ldr	r0, [r4, #16]
   bfe0e:	f7fd fbb7 	bl	bd580 <free>
   bfe12:	6820      	ldr	r0, [r4, #0]
   bfe14:	f7fd fbb4 	bl	bd580 <free>
}
   bfe18:	4620      	mov	r0, r4
   bfe1a:	b002      	add	sp, #8
   bfe1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bfe20 <__tcf_2>:
    static LogManager mgr;
   bfe20:	4801      	ldr	r0, [pc, #4]	; (bfe28 <__tcf_2+0x8>)
   bfe22:	f7ff bfd3 	b.w	bfdcc <_ZN5spark10LogManagerD1Ev>
   bfe26:	bf00      	nop
   bfe28:	2003e678 	.word	0x2003e678

000bfe2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bfe2c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bfe2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfe30:	4604      	mov	r4, r0
   bfe32:	460d      	mov	r5, r1
   bfe34:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bfe36:	d915      	bls.n	bfe64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bfe38:	4290      	cmp	r0, r2
   bfe3a:	d214      	bcs.n	bfe66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bfe3c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bfe40:	1a75      	subs	r5, r6, r1
   bfe42:	f1a1 0714 	sub.w	r7, r1, #20
   bfe46:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bfe48:	42b7      	cmp	r7, r6
   bfe4a:	d01a      	beq.n	bfe82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bfe4c:	b11c      	cbz	r4, bfe56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bfe4e:	4631      	mov	r1, r6
   bfe50:	4620      	mov	r0, r4
   bfe52:	f7ff fc78 	bl	bf746 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bfe56:	f106 0008 	add.w	r0, r6, #8
   bfe5a:	f7ff fdf9 	bl	bfa50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   bfe5e:	3e14      	subs	r6, #20
   bfe60:	3c14      	subs	r4, #20
   bfe62:	e7f1      	b.n	bfe48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   bfe64:	d00d      	beq.n	bfe82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   bfe66:	42b5      	cmp	r5, r6
   bfe68:	d00b      	beq.n	bfe82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   bfe6a:	b11c      	cbz	r4, bfe74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   bfe6c:	4629      	mov	r1, r5
   bfe6e:	4620      	mov	r0, r4
   bfe70:	f7ff fc69 	bl	bf746 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   bfe74:	f105 0008 	add.w	r0, r5, #8
   bfe78:	f7ff fdea 	bl	bfa50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   bfe7c:	3514      	adds	r5, #20
   bfe7e:	3414      	adds	r4, #20
   bfe80:	e7f1      	b.n	bfe66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   bfe82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfe84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bfe84:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bfe86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfe88:	4604      	mov	r4, r0
   bfe8a:	460d      	mov	r5, r1
   bfe8c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bfe8e:	d914      	bls.n	bfeba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   bfe90:	4290      	cmp	r0, r2
   bfe92:	d213      	bcs.n	bfebc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   bfe94:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   bfe98:	1a75      	subs	r5, r6, r1
   bfe9a:	f1a1 0710 	sub.w	r7, r1, #16
   bfe9e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bfea0:	42b7      	cmp	r7, r6
   bfea2:	d018      	beq.n	bfed6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   bfea4:	b11c      	cbz	r4, bfeae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bfea6:	4631      	mov	r1, r6
   bfea8:	4620      	mov	r0, r4
   bfeaa:	f000 ff87 	bl	c0dbc <_ZN6StringC1EOS_>
                end->~T();
   bfeae:	4630      	mov	r0, r6
   bfeb0:	f000 ff08 	bl	c0cc4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bfeb4:	3e10      	subs	r6, #16
   bfeb6:	3c10      	subs	r4, #16
   bfeb8:	e7f2      	b.n	bfea0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bfeba:	d00c      	beq.n	bfed6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bfebc:	42b5      	cmp	r5, r6
   bfebe:	d00a      	beq.n	bfed6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bfec0:	b11c      	cbz	r4, bfeca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bfec2:	4629      	mov	r1, r5
   bfec4:	4620      	mov	r0, r4
   bfec6:	f000 ff79 	bl	c0dbc <_ZN6StringC1EOS_>
                p->~T();
   bfeca:	4628      	mov	r0, r5
   bfecc:	f000 fefa 	bl	c0cc4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bfed0:	3510      	adds	r5, #16
   bfed2:	3410      	adds	r4, #16
   bfed4:	e7f2      	b.n	bfebc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bfed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfed8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bfed8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bfeda:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bfedc:	4605      	mov	r5, r0
        if (n > 0) {
   bfede:	dd11      	ble.n	bff04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bfee0:	0130      	lsls	r0, r6, #4
   bfee2:	f7fd fb45 	bl	bd570 <malloc>
            if (!d) {
   bfee6:	4604      	mov	r4, r0
   bfee8:	b158      	cbz	r0, bff02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bfeea:	e9d5 1200 	ldrd	r1, r2, [r5]
   bfeee:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bfef2:	f7ff ffc7 	bl	bfe84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bfef6:	6828      	ldr	r0, [r5, #0]
   bfef8:	f7fd fb42 	bl	bd580 <free>
        data_ = d;
   bfefc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bfefe:	60ae      	str	r6, [r5, #8]
        return true;
   bff00:	2001      	movs	r0, #1
    }
   bff02:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bff04:	2400      	movs	r4, #0
   bff06:	e7f6      	b.n	bfef6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bff08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bff0c:	4690      	mov	r8, r2
   bff0e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bff10:	2300      	movs	r3, #0
   bff12:	9103      	str	r1, [sp, #12]
    return size_;
   bff14:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bff18:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bff1a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bff1c:	4299      	cmp	r1, r3
        capacity_(0) {
   bff1e:	e9c0 3300 	strd	r3, r3, [r0]
   bff22:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bff26:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bff2a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bff2e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bff30:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bff32:	dc23      	bgt.n	bff7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bff34:	e9d8 5700 	ldrd	r5, r7, [r8]
   bff38:	2314      	movs	r3, #20
   bff3a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bff3e:	42af      	cmp	r7, r5
   bff40:	d03b      	beq.n	bffba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bff42:	4629      	mov	r1, r5
   bff44:	a80b      	add	r0, sp, #44	; 0x2c
   bff46:	f000 ff39 	bl	c0dbc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bff4a:	a90b      	add	r1, sp, #44	; 0x2c
   bff4c:	a80f      	add	r0, sp, #60	; 0x3c
   bff4e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bff50:	f000 ff34 	bl	c0dbc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff54:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bff58:	4299      	cmp	r1, r3
   bff5a:	da1b      	bge.n	bff94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bff5c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bff5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bff60:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bff64:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bff68:	4631      	mov	r1, r6
   bff6a:	f106 0010 	add.w	r0, r6, #16
   bff6e:	f7ff ff89 	bl	bfe84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bff72:	b9ee      	cbnz	r6, bffb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bff74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bff76:	3301      	adds	r3, #1
   bff78:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bff7a:	e011      	b.n	bffa0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bff7c:	a808      	add	r0, sp, #32
   bff7e:	f7ff ffab 	bl	bfed8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bff82:	2800      	cmp	r0, #0
   bff84:	d1d6      	bne.n	bff34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bff86:	a808      	add	r0, sp, #32
   bff88:	f7fd ff27 	bl	bddda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bff8c:	4620      	mov	r0, r4
   bff8e:	b015      	add	sp, #84	; 0x54
   bff90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bff94:	3101      	adds	r1, #1
   bff96:	a808      	add	r0, sp, #32
   bff98:	f7ff ff9e 	bl	bfed8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bff9c:	2800      	cmp	r0, #0
   bff9e:	d1dd      	bne.n	bff5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   bffa0:	a80f      	add	r0, sp, #60	; 0x3c
   bffa2:	f000 fe8f 	bl	c0cc4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   bffa6:	a80b      	add	r0, sp, #44	; 0x2c
   bffa8:	f000 fe8c 	bl	c0cc4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   bffac:	3514      	adds	r5, #20
   bffae:	e7c6      	b.n	bff3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   bffb0:	a90f      	add	r1, sp, #60	; 0x3c
   bffb2:	4630      	mov	r0, r6
   bffb4:	f000 ff02 	bl	c0dbc <_ZN6StringC1EOS_>
   bffb8:	e7dc      	b.n	bff74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   bffba:	2600      	movs	r6, #0
   bffbc:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   bffc0:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   bffc2:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   bffc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   bffca:	429e      	cmp	r6, r3
   bffcc:	da7c      	bge.n	c00c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   bffce:	0133      	lsls	r3, r6, #4
   bffd0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   bffd2:	9306      	str	r3, [sp, #24]
        if (!category) {
   bffd4:	b90b      	cbnz	r3, bffda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   bffd6:	3601      	adds	r6, #1
   bffd8:	e7f5      	b.n	bffc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   bffda:	2300      	movs	r3, #0
   bffdc:	9307      	str	r3, [sp, #28]
   bffde:	fb09 f306 	mul.w	r3, r9, r6
   bffe2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bffe4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   bffe6:	a907      	add	r1, sp, #28
   bffe8:	a806      	add	r0, sp, #24
   bffea:	f7ff fb22 	bl	bf632 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bffee:	4682      	mov	sl, r0
   bfff0:	2800      	cmp	r0, #0
   bfff2:	d0f0      	beq.n	bffd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   bfff4:	f04f 0300 	mov.w	r3, #0
   bfff8:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bfffc:	4601      	mov	r1, r0
   bfffe:	9a07      	ldr	r2, [sp, #28]
   c0000:	f10d 0317 	add.w	r3, sp, #23
   c0004:	4628      	mov	r0, r5
   c0006:	f7ff fbb1 	bl	bf76c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c000a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c000e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0010:	2f00      	cmp	r7, #0
   c0012:	d14a      	bne.n	c00aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0014:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c0018:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c001c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0020:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0024:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c0028:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c002c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c002e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0032:	4293      	cmp	r3, r2
   c0034:	db17      	blt.n	c0066 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c0036:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c003a:	f1ba 0f00 	cmp.w	sl, #0
   c003e:	dd30      	ble.n	c00a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0040:	fb09 f00a 	mul.w	r0, r9, sl
   c0044:	f7fd fa94 	bl	bd570 <malloc>
            if (!d) {
   c0048:	4683      	mov	fp, r0
   c004a:	b360      	cbz	r0, c00a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c004c:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0050:	fb09 1202 	mla	r2, r9, r2, r1
   c0054:	f7ff feea 	bl	bfe2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0058:	6828      	ldr	r0, [r5, #0]
   c005a:	f7fd fa91 	bl	bd580 <free>
        data_ = d;
   c005e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0062:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c0066:	682b      	ldr	r3, [r5, #0]
   c0068:	9a01      	ldr	r2, [sp, #4]
   c006a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c006e:	686a      	ldr	r2, [r5, #4]
   c0070:	4651      	mov	r1, sl
   c0072:	fb09 3202 	mla	r2, r9, r2, r3
   c0076:	f10a 0014 	add.w	r0, sl, #20
   c007a:	f7ff fed7 	bl	bfe2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c007e:	f1ba 0f00 	cmp.w	sl, #0
   c0082:	d003      	beq.n	c008c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0084:	a90f      	add	r1, sp, #60	; 0x3c
   c0086:	4650      	mov	r0, sl
   c0088:	f7ff fb5d 	bl	bf746 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c008c:	686b      	ldr	r3, [r5, #4]
   c008e:	3301      	adds	r3, #1
   c0090:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0092:	a811      	add	r0, sp, #68	; 0x44
   c0094:	f7ff fcdc 	bl	bfa50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0098:	b13f      	cbz	r7, c00aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c009a:	a80b      	add	r0, sp, #44	; 0x2c
   c009c:	f7ff fcd8 	bl	bfa50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c00a0:	e771      	b.n	bff86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c00a2:	46bb      	mov	fp, r7
   c00a4:	e7d8      	b.n	c0058 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c00a6:	2701      	movs	r7, #1
   c00a8:	e7f3      	b.n	c0092 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c00aa:	9b01      	ldr	r3, [sp, #4]
   c00ac:	682d      	ldr	r5, [r5, #0]
   c00ae:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c00b2:	9b06      	ldr	r3, [sp, #24]
   c00b4:	781b      	ldrb	r3, [r3, #0]
   c00b6:	b92b      	cbnz	r3, c00c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c00b8:	f8d8 3000 	ldr.w	r3, [r8]
   c00bc:	9a02      	ldr	r2, [sp, #8]
   c00be:	4413      	add	r3, r2
   c00c0:	7c1b      	ldrb	r3, [r3, #16]
   c00c2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c00c4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c00c6:	e78e      	b.n	bffe6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c00c8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c00ca:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c00cc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c00ce:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c00d0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c00d2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c00d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c00d6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c00d8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c00da:	60a2      	str	r2, [r4, #8]
   c00dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c00de:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c00e0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c00e2:	60e2      	str	r2, [r4, #12]
   c00e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c00e6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c00e8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c00ea:	6122      	str	r2, [r4, #16]
   c00ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c00ee:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c00f0:	9b03      	ldr	r3, [sp, #12]
   c00f2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c00f4:	6162      	str	r2, [r4, #20]
   c00f6:	7623      	strb	r3, [r4, #24]
   c00f8:	e7cf      	b.n	c009a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c00fc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c00fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   c00fe:	4604      	mov	r4, r0
   c0100:	b087      	sub	sp, #28
   c0102:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0104:	4626      	mov	r6, r4
        stream_(&stream) {
   c0106:	4619      	mov	r1, r3
   c0108:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c010a:	4617      	mov	r7, r2
        stream_(&stream) {
   c010c:	f7f5 fcde 	bl	b5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0110:	4b0b      	ldr	r3, [pc, #44]	; (c0140 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0112:	f846 3b04 	str.w	r3, [r6], #4
   c0116:	4669      	mov	r1, sp
   c0118:	a803      	add	r0, sp, #12
   c011a:	f7f5 fcd7 	bl	b5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c011e:	aa03      	add	r2, sp, #12
   c0120:	4639      	mov	r1, r7
   c0122:	4630      	mov	r0, r6
   c0124:	f7ff fef0 	bl	bff08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0128:	a803      	add	r0, sp, #12
   c012a:	f7f5 fa3f 	bl	b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c012e:	4668      	mov	r0, sp
   c0130:	f7f5 fa3c 	bl	b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0134:	4b03      	ldr	r3, [pc, #12]	; (c0144 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c0136:	6023      	str	r3, [r4, #0]
}
   c0138:	4620      	mov	r0, r4
        stream_(&stream) {
   c013a:	6225      	str	r5, [r4, #32]
}
   c013c:	b007      	add	sp, #28
   c013e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0140:	000c492c 	.word	0x000c492c
   c0144:	000c5b00 	.word	0x000c5b00

000c0148 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c0148:	b5f0      	push	{r4, r5, r6, r7, lr}
   c014a:	460f      	mov	r7, r1
   c014c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c014e:	491d      	ldr	r1, [pc, #116]	; (c01c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0150:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0152:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0154:	4616      	mov	r6, r2
   c0156:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0158:	f002 f8bc 	bl	c22d4 <strcmp>
   c015c:	b9c0      	cbnz	r0, c0190 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c015e:	b1a4      	cbz	r4, c018a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0160:	4629      	mov	r1, r5
   c0162:	a801      	add	r0, sp, #4
   c0164:	f7ff fcbc 	bl	bfae0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0168:	4917      	ldr	r1, [pc, #92]	; (c01c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c016a:	2024      	movs	r0, #36	; 0x24
   c016c:	f001 f9cc 	bl	c1508 <_ZnwjRKSt9nothrow_t>
   c0170:	4605      	mov	r5, r0
   c0172:	b130      	cbz	r0, c0182 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0174:	ab01      	add	r3, sp, #4
   c0176:	4632      	mov	r2, r6
   c0178:	4621      	mov	r1, r4
   c017a:	f7ff ffbf 	bl	c00fc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c017e:	4b13      	ldr	r3, [pc, #76]	; (c01cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0180:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0182:	a801      	add	r0, sp, #4
   c0184:	f7f5 fa12 	bl	b55ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0188:	462c      	mov	r4, r5
}
   c018a:	4620      	mov	r0, r4
   c018c:	b005      	add	sp, #20
   c018e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0190:	490f      	ldr	r1, [pc, #60]	; (c01d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0192:	4638      	mov	r0, r7
   c0194:	f002 f89e 	bl	c22d4 <strcmp>
   c0198:	b990      	cbnz	r0, c01c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c019a:	2c00      	cmp	r4, #0
   c019c:	d0f5      	beq.n	c018a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c019e:	4629      	mov	r1, r5
   c01a0:	a801      	add	r0, sp, #4
   c01a2:	f7ff fc9d 	bl	bfae0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c01a6:	4908      	ldr	r1, [pc, #32]	; (c01c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c01a8:	2024      	movs	r0, #36	; 0x24
   c01aa:	f001 f9ad 	bl	c1508 <_ZnwjRKSt9nothrow_t>
   c01ae:	4605      	mov	r5, r0
   c01b0:	2800      	cmp	r0, #0
   c01b2:	d0e6      	beq.n	c0182 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c01b4:	ab01      	add	r3, sp, #4
   c01b6:	4632      	mov	r2, r6
   c01b8:	4621      	mov	r1, r4
   c01ba:	f7ff ff9f 	bl	c00fc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c01be:	e7e0      	b.n	c0182 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c01c0:	2400      	movs	r4, #0
   c01c2:	e7e2      	b.n	c018a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c01c4:	000c5a85 	.word	0x000c5a85
   c01c8:	000c5c24 	.word	0x000c5c24
   c01cc:	000c5b18 	.word	0x000c5b18
   c01d0:	000c5a89 	.word	0x000c5a89

000c01d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c01d4:	4b01      	ldr	r3, [pc, #4]	; (c01dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c01d6:	4a02      	ldr	r2, [pc, #8]	; (c01e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c01d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c01da:	4770      	bx	lr
   c01dc:	2003e674 	.word	0x2003e674
   c01e0:	000c5a9a 	.word	0x000c5a9a

000c01e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c01e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c01e8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c01ea:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c01ee:	4604      	mov	r4, r0
   c01f0:	460e      	mov	r6, r1
   c01f2:	4617      	mov	r7, r2
   c01f4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c01f6:	f000 ffe1 	bl	c11bc <_Z16_fetch_usbserialv>
   c01fa:	4581      	cmp	r9, r0
   c01fc:	d04c      	beq.n	c0298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c01fe:	792b      	ldrb	r3, [r5, #4]
   c0200:	0719      	lsls	r1, r3, #28
   c0202:	d504      	bpl.n	c020e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0204:	696a      	ldr	r2, [r5, #20]
   c0206:	4954      	ldr	r1, [pc, #336]	; (c0358 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c0208:	4620      	mov	r0, r4
   c020a:	f7ff fa8d 	bl	bf728 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c020e:	f1b8 0f00 	cmp.w	r8, #0
   c0212:	d00d      	beq.n	c0230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0214:	215b      	movs	r1, #91	; 0x5b
   c0216:	4620      	mov	r0, r4
   c0218:	f7ff fa7a 	bl	bf710 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c021c:	4641      	mov	r1, r8
   c021e:	4620      	mov	r0, r4
   c0220:	f7ff fa67 	bl	bf6f2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0224:	6823      	ldr	r3, [r4, #0]
   c0226:	494d      	ldr	r1, [pc, #308]	; (c035c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c0228:	68db      	ldr	r3, [r3, #12]
   c022a:	2202      	movs	r2, #2
   c022c:	4620      	mov	r0, r4
   c022e:	4798      	blx	r3
    if (attr.has_file) {
   c0230:	792b      	ldrb	r3, [r5, #4]
   c0232:	07da      	lsls	r2, r3, #31
   c0234:	d523      	bpl.n	c027e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c0236:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c023a:	212f      	movs	r1, #47	; 0x2f
   c023c:	4640      	mov	r0, r8
   c023e:	f002 f8c6 	bl	c23ce <strrchr>
    if (s1) {
   c0242:	b108      	cbz	r0, c0248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0244:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c0248:	4641      	mov	r1, r8
   c024a:	4620      	mov	r0, r4
   c024c:	f7ff fa51 	bl	bf6f2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0250:	792b      	ldrb	r3, [r5, #4]
   c0252:	079b      	lsls	r3, r3, #30
   c0254:	d508      	bpl.n	c0268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c0256:	213a      	movs	r1, #58	; 0x3a
   c0258:	4620      	mov	r0, r4
   c025a:	f7ff fa59 	bl	bf710 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c025e:	68ea      	ldr	r2, [r5, #12]
   c0260:	493f      	ldr	r1, [pc, #252]	; (c0360 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0262:	4620      	mov	r0, r4
   c0264:	f7ff fa60 	bl	bf728 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c0268:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c026a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c026c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0270:	68db      	ldr	r3, [r3, #12]
   c0272:	bf14      	ite	ne
   c0274:	493b      	ldrne	r1, [pc, #236]	; (c0364 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c0276:	493c      	ldreq	r1, [pc, #240]	; (c0368 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c0278:	2202      	movs	r2, #2
            write(": ", 2);
   c027a:	4620      	mov	r0, r4
   c027c:	4798      	blx	r3
    if (attr.has_function) {
   c027e:	792b      	ldrb	r3, [r5, #4]
   c0280:	0758      	lsls	r0, r3, #29
   c0282:	d51d      	bpl.n	c02c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0284:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0286:	460b      	mov	r3, r1
   c0288:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c028a:	f813 0b01 	ldrb.w	r0, [r3], #1
   c028e:	b160      	cbz	r0, c02aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0290:	2820      	cmp	r0, #32
   c0292:	d108      	bne.n	c02a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0294:	4619      	mov	r1, r3
   c0296:	e7f7      	b.n	c0288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c0298:	4834      	ldr	r0, [pc, #208]	; (c036c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c029a:	f000 f966 	bl	c056a <_ZN5spark12NetworkClass9listeningEv>
   c029e:	2800      	cmp	r0, #0
   c02a0:	d0ad      	beq.n	c01fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c02a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c02a6:	2828      	cmp	r0, #40	; 0x28
   c02a8:	d1ee      	bne.n	c0288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c02aa:	6823      	ldr	r3, [r4, #0]
   c02ac:	1a52      	subs	r2, r2, r1
   c02ae:	68db      	ldr	r3, [r3, #12]
   c02b0:	4620      	mov	r0, r4
   c02b2:	4798      	blx	r3
        write("(): ", 4);
   c02b4:	6823      	ldr	r3, [r4, #0]
   c02b6:	492e      	ldr	r1, [pc, #184]	; (c0370 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c02b8:	68db      	ldr	r3, [r3, #12]
   c02ba:	2204      	movs	r2, #4
   c02bc:	4620      	mov	r0, r4
   c02be:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c02c0:	2100      	movs	r1, #0
   c02c2:	4638      	mov	r0, r7
   c02c4:	f7fd f85e 	bl	bd384 <log_level_name>
   c02c8:	4601      	mov	r1, r0
    write(s);
   c02ca:	4620      	mov	r0, r4
   c02cc:	f7ff fa11 	bl	bf6f2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c02d0:	6823      	ldr	r3, [r4, #0]
   c02d2:	4925      	ldr	r1, [pc, #148]	; (c0368 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c02d4:	68db      	ldr	r3, [r3, #12]
   c02d6:	2202      	movs	r2, #2
   c02d8:	4620      	mov	r0, r4
   c02da:	4798      	blx	r3
    if (msg) {
   c02dc:	b11e      	cbz	r6, c02e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c02de:	4631      	mov	r1, r6
   c02e0:	4620      	mov	r0, r4
   c02e2:	f7ff fa06 	bl	bf6f2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c02e6:	792b      	ldrb	r3, [r5, #4]
   c02e8:	f013 0f30 	tst.w	r3, #48	; 0x30
   c02ec:	d02c      	beq.n	c0348 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c02ee:	6823      	ldr	r3, [r4, #0]
   c02f0:	4920      	ldr	r1, [pc, #128]	; (c0374 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c02f2:	68db      	ldr	r3, [r3, #12]
   c02f4:	2202      	movs	r2, #2
   c02f6:	4620      	mov	r0, r4
   c02f8:	4798      	blx	r3
        if (attr.has_code) {
   c02fa:	792b      	ldrb	r3, [r5, #4]
   c02fc:	06d9      	lsls	r1, r3, #27
   c02fe:	d50a      	bpl.n	c0316 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0300:	6823      	ldr	r3, [r4, #0]
   c0302:	491d      	ldr	r1, [pc, #116]	; (c0378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0304:	68db      	ldr	r3, [r3, #12]
   c0306:	2207      	movs	r2, #7
   c0308:	4620      	mov	r0, r4
   c030a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c030c:	69aa      	ldr	r2, [r5, #24]
   c030e:	491b      	ldr	r1, [pc, #108]	; (c037c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0310:	4620      	mov	r0, r4
   c0312:	f7ff fa09 	bl	bf728 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0316:	792b      	ldrb	r3, [r5, #4]
   c0318:	069a      	lsls	r2, r3, #26
   c031a:	d511      	bpl.n	c0340 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c031c:	06db      	lsls	r3, r3, #27
   c031e:	d505      	bpl.n	c032c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0320:	6823      	ldr	r3, [r4, #0]
   c0322:	4910      	ldr	r1, [pc, #64]	; (c0364 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0324:	68db      	ldr	r3, [r3, #12]
   c0326:	2202      	movs	r2, #2
   c0328:	4620      	mov	r0, r4
   c032a:	4798      	blx	r3
            write("details = ", 10);
   c032c:	6823      	ldr	r3, [r4, #0]
   c032e:	4914      	ldr	r1, [pc, #80]	; (c0380 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0330:	68db      	ldr	r3, [r3, #12]
   c0332:	4620      	mov	r0, r4
   c0334:	220a      	movs	r2, #10
   c0336:	4798      	blx	r3
            write(attr.details);
   c0338:	69e9      	ldr	r1, [r5, #28]
   c033a:	4620      	mov	r0, r4
   c033c:	f7ff f9d9 	bl	bf6f2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0340:	215d      	movs	r1, #93	; 0x5d
   c0342:	4620      	mov	r0, r4
   c0344:	f7ff f9e4 	bl	bf710 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0348:	6823      	ldr	r3, [r4, #0]
   c034a:	490e      	ldr	r1, [pc, #56]	; (c0384 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c034c:	68db      	ldr	r3, [r3, #12]
   c034e:	4620      	mov	r0, r4
   c0350:	2202      	movs	r2, #2
}
   c0352:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0356:	4718      	bx	r3
   c0358:	000c5a9e 	.word	0x000c5a9e
   c035c:	000c5aa5 	.word	0x000c5aa5
   c0360:	000c44cc 	.word	0x000c44cc
   c0364:	000c5aa8 	.word	0x000c5aa8
   c0368:	000c5aad 	.word	0x000c5aad
   c036c:	2003e6a0 	.word	0x2003e6a0
   c0370:	000c5aab 	.word	0x000c5aab
   c0374:	000c5ab0 	.word	0x000c5ab0
   c0378:	000c5ab3 	.word	0x000c5ab3
   c037c:	000c5abb 	.word	0x000c5abb
   c0380:	000c5abe 	.word	0x000c5abe
   c0384:	000c5ac9 	.word	0x000c5ac9

000c0388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c038c:	b085      	sub	sp, #20
    return stream_;
   c038e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0392:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0394:	4605      	mov	r5, r0
   c0396:	460f      	mov	r7, r1
   c0398:	4690      	mov	r8, r2
   c039a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c039c:	f000 ff0e 	bl	c11bc <_Z16_fetch_usbserialv>
   c03a0:	4581      	cmp	r9, r0
   c03a2:	d105      	bne.n	c03b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c03a4:	4849      	ldr	r0, [pc, #292]	; (c04cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c03a6:	f000 f8e0 	bl	c056a <_ZN5spark12NetworkClass9listeningEv>
   c03aa:	2800      	cmp	r0, #0
   c03ac:	f040 808a 	bne.w	c04c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c03b0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c03b2:	4a47      	ldr	r2, [pc, #284]	; (c04d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c03b4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c03b6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c03ba:	a801      	add	r0, sp, #4
        strm_(stream) {
   c03bc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c03be:	f88d 9008 	strb.w	r9, [sp, #8]
   c03c2:	f7ff f850 	bl	bf466 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c03c6:	4649      	mov	r1, r9
   c03c8:	4640      	mov	r0, r8
   c03ca:	f7fc ffdb 	bl	bd384 <log_level_name>
    json.name("l", 1).value(s);
   c03ce:	4941      	ldr	r1, [pc, #260]	; (c04d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c03d0:	4680      	mov	r8, r0
   c03d2:	2201      	movs	r2, #1
   c03d4:	a801      	add	r0, sp, #4
   c03d6:	f7ff f8d5 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c03da:	4641      	mov	r1, r8
   c03dc:	f7ff f97b 	bl	bf6d6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c03e0:	b13f      	cbz	r7, c03f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c03e2:	493d      	ldr	r1, [pc, #244]	; (c04d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c03e4:	2201      	movs	r2, #1
   c03e6:	a801      	add	r0, sp, #4
   c03e8:	f7ff f8cc 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c03ec:	4639      	mov	r1, r7
   c03ee:	f7ff f972 	bl	bf6d6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c03f2:	b13e      	cbz	r6, c0404 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c03f4:	4939      	ldr	r1, [pc, #228]	; (c04dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c03f6:	2201      	movs	r2, #1
   c03f8:	a801      	add	r0, sp, #4
   c03fa:	f7ff f8c3 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c03fe:	4631      	mov	r1, r6
   c0400:	f7ff f969 	bl	bf6d6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0404:	7923      	ldrb	r3, [r4, #4]
   c0406:	07df      	lsls	r7, r3, #31
   c0408:	d50e      	bpl.n	c0428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c040a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c040c:	212f      	movs	r1, #47	; 0x2f
   c040e:	4630      	mov	r0, r6
   c0410:	f001 ffdd 	bl	c23ce <strrchr>
    if (s1) {
   c0414:	b100      	cbz	r0, c0418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c0416:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c0418:	4931      	ldr	r1, [pc, #196]	; (c04e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c041a:	2201      	movs	r2, #1
   c041c:	a801      	add	r0, sp, #4
   c041e:	f7ff f8b1 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c0422:	4631      	mov	r1, r6
   c0424:	f7ff f957 	bl	bf6d6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c0428:	7923      	ldrb	r3, [r4, #4]
   c042a:	079e      	lsls	r6, r3, #30
   c042c:	d507      	bpl.n	c043e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c042e:	492d      	ldr	r1, [pc, #180]	; (c04e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0430:	2202      	movs	r2, #2
   c0432:	a801      	add	r0, sp, #4
   c0434:	f7ff f8a6 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c0438:	68e1      	ldr	r1, [r4, #12]
   c043a:	f7ff f821 	bl	bf480 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c043e:	7923      	ldrb	r3, [r4, #4]
   c0440:	0758      	lsls	r0, r3, #29
   c0442:	d514      	bpl.n	c046e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0444:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0446:	4633      	mov	r3, r6
   c0448:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c044a:	f813 2b01 	ldrb.w	r2, [r3], #1
   c044e:	b12a      	cbz	r2, c045c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0450:	2a20      	cmp	r2, #32
   c0452:	d101      	bne.n	c0458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0454:	461e      	mov	r6, r3
   c0456:	e7f7      	b.n	c0448 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c0458:	2a28      	cmp	r2, #40	; 0x28
   c045a:	d1f5      	bne.n	c0448 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c045c:	4922      	ldr	r1, [pc, #136]	; (c04e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c045e:	2202      	movs	r2, #2
   c0460:	a801      	add	r0, sp, #4
   c0462:	f7ff f88f 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c0466:	1bba      	subs	r2, r7, r6
   c0468:	4631      	mov	r1, r6
   c046a:	f7ff f89b 	bl	bf5a4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c046e:	7923      	ldrb	r3, [r4, #4]
   c0470:	0719      	lsls	r1, r3, #28
   c0472:	d507      	bpl.n	c0484 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0474:	491d      	ldr	r1, [pc, #116]	; (c04ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0476:	2201      	movs	r2, #1
   c0478:	a801      	add	r0, sp, #4
   c047a:	f7ff f883 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c047e:	6961      	ldr	r1, [r4, #20]
   c0480:	f7ff f810 	bl	bf4a4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0484:	7923      	ldrb	r3, [r4, #4]
   c0486:	06da      	lsls	r2, r3, #27
   c0488:	d508      	bpl.n	c049c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c048a:	2204      	movs	r2, #4
   c048c:	4918      	ldr	r1, [pc, #96]	; (c04f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c048e:	eb0d 0002 	add.w	r0, sp, r2
   c0492:	f7ff f877 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c0496:	69a1      	ldr	r1, [r4, #24]
   c0498:	f7fe fff2 	bl	bf480 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c049c:	7923      	ldrb	r3, [r4, #4]
   c049e:	069b      	lsls	r3, r3, #26
   c04a0:	d507      	bpl.n	c04b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c04a2:	4914      	ldr	r1, [pc, #80]	; (c04f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c04a4:	2206      	movs	r2, #6
   c04a6:	a801      	add	r0, sp, #4
   c04a8:	f7ff f86c 	bl	bf584 <_ZN5spark10JSONWriter4nameEPKcj>
   c04ac:	69e1      	ldr	r1, [r4, #28]
   c04ae:	f7ff f912 	bl	bf6d6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c04b2:	a801      	add	r0, sp, #4
   c04b4:	f7fe ffc1 	bl	bf43a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c04b8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c04ba:	490f      	ldr	r1, [pc, #60]	; (c04f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c04bc:	6803      	ldr	r3, [r0, #0]
   c04be:	2202      	movs	r2, #2
   c04c0:	68db      	ldr	r3, [r3, #12]
   c04c2:	4798      	blx	r3
}
   c04c4:	b005      	add	sp, #20
   c04c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c04ca:	bf00      	nop
   c04cc:	2003e6a0 	.word	0x2003e6a0
   c04d0:	000c5ae8 	.word	0x000c5ae8
   c04d4:	000c5a7b 	.word	0x000c5a7b
   c04d8:	000c5acc 	.word	0x000c5acc
   c04dc:	000c5fbe 	.word	0x000c5fbe
   c04e0:	000c4630 	.word	0x000c4630
   c04e4:	000c5ace 	.word	0x000c5ace
   c04e8:	000c5ad1 	.word	0x000c5ad1
   c04ec:	000c4777 	.word	0x000c4777
   c04f0:	000c5ad4 	.word	0x000c5ad4
   c04f4:	000c5ad9 	.word	0x000c5ad9
   c04f8:	000c5ac9 	.word	0x000c5ac9

000c04fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c04fc:	2300      	movs	r3, #0
   c04fe:	6840      	ldr	r0, [r0, #4]
   c0500:	461a      	mov	r2, r3
   c0502:	f7fc bfd5 	b.w	bd4b0 <network_connect>

000c0506 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c0506:	6840      	ldr	r0, [r0, #4]
   c0508:	2200      	movs	r2, #0
   c050a:	2102      	movs	r1, #2
   c050c:	f7fc bfe0 	b.w	bd4d0 <network_disconnect>

000c0510 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c0510:	2200      	movs	r2, #0
   c0512:	6840      	ldr	r0, [r0, #4]
   c0514:	4611      	mov	r1, r2
   c0516:	f7fc bfd3 	b.w	bd4c0 <network_connecting>

000c051a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c051a:	2200      	movs	r2, #0
   c051c:	6840      	ldr	r0, [r0, #4]
   c051e:	4611      	mov	r1, r2
   c0520:	f7fc bfde 	b.w	bd4e0 <network_ready>

000c0524 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c0524:	2300      	movs	r3, #0
   c0526:	6840      	ldr	r0, [r0, #4]
   c0528:	461a      	mov	r2, r3
   c052a:	4619      	mov	r1, r3
   c052c:	f7fc bfe0 	b.w	bd4f0 <network_on>

000c0530 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c0530:	2300      	movs	r3, #0
   c0532:	6840      	ldr	r0, [r0, #4]
   c0534:	461a      	mov	r2, r3
   c0536:	4619      	mov	r1, r3
   c0538:	f7fc bfe2 	b.w	bd500 <network_off>

000c053c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c053c:	6840      	ldr	r0, [r0, #4]
   c053e:	2100      	movs	r1, #0
   c0540:	f7fd b806 	b.w	bd550 <network_is_on>

000c0544 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c0544:	6840      	ldr	r0, [r0, #4]
   c0546:	2100      	movs	r1, #0
   c0548:	f7fd b80a 	b.w	bd560 <network_is_off>

000c054c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c054c:	6840      	ldr	r0, [r0, #4]
   c054e:	2200      	movs	r2, #0
   c0550:	f081 0101 	eor.w	r1, r1, #1
   c0554:	f7fc bfdc 	b.w	bd510 <network_listen>

000c0558 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c0558:	6840      	ldr	r0, [r0, #4]
   c055a:	2200      	movs	r2, #0
   c055c:	f7fc bfe8 	b.w	bd530 <network_set_listen_timeout>

000c0560 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c0560:	2200      	movs	r2, #0
   c0562:	6840      	ldr	r0, [r0, #4]
   c0564:	4611      	mov	r1, r2
   c0566:	f7fc bfeb 	b.w	bd540 <network_get_listen_timeout>

000c056a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c056a:	2200      	movs	r2, #0
   c056c:	6840      	ldr	r0, [r0, #4]
   c056e:	4611      	mov	r1, r2
   c0570:	f7fc bfd6 	b.w	bd520 <network_listening>

000c0574 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0578:	b095      	sub	sp, #84	; 0x54
   c057a:	4614      	mov	r4, r2
   c057c:	460d      	mov	r5, r1
   c057e:	4607      	mov	r7, r0
    IPAddress addr;
   c0580:	f7fe fe0a 	bl	bf198 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0584:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c0586:	221c      	movs	r2, #28
   c0588:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c058a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c058c:	f001 fe46 	bl	c221c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0590:	2340      	movs	r3, #64	; 0x40
   c0592:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0594:	4620      	mov	r0, r4
   c0596:	466b      	mov	r3, sp
   c0598:	aa0c      	add	r2, sp, #48	; 0x30
   c059a:	2100      	movs	r1, #0
   c059c:	f7fc fdd2 	bl	bd144 <netdb_getaddrinfo>
    if (!r) {
   c05a0:	4604      	mov	r4, r0
   c05a2:	2800      	cmp	r0, #0
   c05a4:	d14b      	bne.n	c063e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c05a6:	4602      	mov	r2, r0
   c05a8:	2101      	movs	r1, #1
   c05aa:	6868      	ldr	r0, [r5, #4]
   c05ac:	f7fc ff98 	bl	bd4e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c05b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c05b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c05b4:	4622      	mov	r2, r4
   c05b6:	6868      	ldr	r0, [r5, #4]
   c05b8:	f7fc ff92 	bl	bd4e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c05bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c05be:	4681      	mov	r9, r0
        bool ok = false;
   c05c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c05c2:	2e00      	cmp	r6, #0
   c05c4:	d03b      	beq.n	c063e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c05c6:	2900      	cmp	r1, #0
   c05c8:	d139      	bne.n	c063e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c05ca:	6873      	ldr	r3, [r6, #4]
   c05cc:	2b02      	cmp	r3, #2
   c05ce:	d003      	beq.n	c05d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c05d0:	2b0a      	cmp	r3, #10
   c05d2:	d011      	beq.n	c05f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c05d4:	69f6      	ldr	r6, [r6, #28]
   c05d6:	e7f4      	b.n	c05c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c05d8:	f1b8 0f00 	cmp.w	r8, #0
   c05dc:	d0fa      	beq.n	c05d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c05de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c05e0:	a806      	add	r0, sp, #24
   c05e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c05e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c05e6:	f7fe fe05 	bl	bf1f4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c05ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c05ec:	1d3c      	adds	r4, r7, #4
   c05ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c05f0:	682b      	ldr	r3, [r5, #0]
   c05f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c05f4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c05f6:	e7ed      	b.n	c05d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c05f8:	f1b9 0f00 	cmp.w	r9, #0
   c05fc:	d0ea      	beq.n	c05d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c05fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c0600:	2210      	movs	r2, #16
   c0602:	a801      	add	r0, sp, #4
   c0604:	f001 fe0a 	bl	c221c <memset>
                    a.v = 6;
   c0608:	2306      	movs	r3, #6
   c060a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c060e:	ad01      	add	r5, sp, #4
   c0610:	f104 0308 	add.w	r3, r4, #8
   c0614:	3418      	adds	r4, #24
   c0616:	6818      	ldr	r0, [r3, #0]
   c0618:	6859      	ldr	r1, [r3, #4]
   c061a:	462a      	mov	r2, r5
   c061c:	c203      	stmia	r2!, {r0, r1}
   c061e:	3308      	adds	r3, #8
   c0620:	42a3      	cmp	r3, r4
   c0622:	4615      	mov	r5, r2
   c0624:	d1f7      	bne.n	c0616 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c0626:	a901      	add	r1, sp, #4
   c0628:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c062a:	ad07      	add	r5, sp, #28
   c062c:	f7fe fdc2 	bl	bf1b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c0630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0632:	1d3c      	adds	r4, r7, #4
   c0634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c0636:	682b      	ldr	r3, [r5, #0]
   c0638:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c063a:	4649      	mov	r1, r9
   c063c:	e7ca      	b.n	c05d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c063e:	9800      	ldr	r0, [sp, #0]
   c0640:	f7fc fd78 	bl	bd134 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c0644:	4638      	mov	r0, r7
   c0646:	b015      	add	sp, #84	; 0x54
   c0648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c064c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c064c:	4b02      	ldr	r3, [pc, #8]	; (c0658 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c064e:	4a03      	ldr	r2, [pc, #12]	; (c065c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c0650:	601a      	str	r2, [r3, #0]
   c0652:	2200      	movs	r2, #0
   c0654:	605a      	str	r2, [r3, #4]

} // spark
   c0656:	4770      	bx	lr
   c0658:	2003e6a0 	.word	0x2003e6a0
   c065c:	000c5b60 	.word	0x000c5b60

000c0660 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0662:	4606      	mov	r6, r0
   c0664:	460d      	mov	r5, r1
  size_t n = 0;
   c0666:	188f      	adds	r7, r1, r2
   c0668:	2400      	movs	r4, #0
  while (size--) {
   c066a:	42bd      	cmp	r5, r7
   c066c:	d00c      	beq.n	c0688 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c066e:	6833      	ldr	r3, [r6, #0]
   c0670:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0674:	689b      	ldr	r3, [r3, #8]
   c0676:	4630      	mov	r0, r6
   c0678:	4798      	blx	r3
     if (chunk>=0)
   c067a:	1e03      	subs	r3, r0, #0
   c067c:	db01      	blt.n	c0682 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c067e:	441c      	add	r4, r3
  while (size--) {
   c0680:	e7f3      	b.n	c066a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0682:	2c00      	cmp	r4, #0
   c0684:	bf08      	it	eq
   c0686:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c0688:	4620      	mov	r0, r4
   c068a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c068c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c068c:	b508      	push	{r3, lr}
  return write(str);
   c068e:	f7f6 fadd 	bl	b6c4c <_ZN5Print5writeEPKc>
}
   c0692:	bd08      	pop	{r3, pc}

000c0694 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0694:	6803      	ldr	r3, [r0, #0]
   c0696:	689b      	ldr	r3, [r3, #8]
   c0698:	4718      	bx	r3

000c069a <_ZN5Print5printEPK19__FlashStringHelper>:
   c069a:	b508      	push	{r3, lr}
   c069c:	f7f6 fad6 	bl	b6c4c <_ZN5Print5writeEPKc>
   c06a0:	bd08      	pop	{r3, pc}

000c06a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c06a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c06a4:	210d      	movs	r1, #13
{
   c06a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   c06a8:	f7ff fff4 	bl	c0694 <_ZN5Print5printEc>
  n += print('\n');
   c06ac:	210a      	movs	r1, #10
  size_t n = print('\r');
   c06ae:	4604      	mov	r4, r0
  n += print('\n');
   c06b0:	4628      	mov	r0, r5
   c06b2:	f7ff ffef 	bl	c0694 <_ZN5Print5printEc>
  return n;
}
   c06b6:	4420      	add	r0, r4
   c06b8:	bd38      	pop	{r3, r4, r5, pc}

000c06ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c06ba:	b538      	push	{r3, r4, r5, lr}
   c06bc:	4605      	mov	r5, r0
  return write(str);
   c06be:	f7f6 fac5 	bl	b6c4c <_ZN5Print5writeEPKc>
   c06c2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c06c4:	4628      	mov	r0, r5
   c06c6:	f7ff ffec 	bl	c06a2 <_ZN5Print7printlnEv>
  return n;
}
   c06ca:	4420      	add	r0, r4
   c06cc:	bd38      	pop	{r3, r4, r5, pc}

000c06ce <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c06ce:	f7ff bff4 	b.w	c06ba <_ZN5Print7printlnEPKc>

000c06d2 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c06d2:	b530      	push	{r4, r5, lr}
   c06d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c06d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c06d8:	2a01      	cmp	r2, #1
  *str = '\0';
   c06da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c06de:	bf98      	it	ls
   c06e0:	220a      	movls	r2, #10
   c06e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c06e4:	460d      	mov	r5, r1
   c06e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c06ea:	fb01 5312 	mls	r3, r1, r2, r5
   c06ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c06f2:	2b09      	cmp	r3, #9
   c06f4:	bf94      	ite	ls
   c06f6:	3330      	addls	r3, #48	; 0x30
   c06f8:	3337      	addhi	r3, #55	; 0x37
   c06fa:	b2db      	uxtb	r3, r3
  } while(n);
   c06fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c06fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c0702:	d9ef      	bls.n	c06e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c0704:	4621      	mov	r1, r4
   c0706:	f7f6 faa1 	bl	b6c4c <_ZN5Print5writeEPKc>
}
   c070a:	b00b      	add	sp, #44	; 0x2c
   c070c:	bd30      	pop	{r4, r5, pc}
	...

000c0710 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   c0710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0714:	ec55 4b10 	vmov	r4, r5, d0
   c0718:	4606      	mov	r6, r0
   c071a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   c071c:	ee10 2a10 	vmov	r2, s0
   c0720:	ee10 0a10 	vmov	r0, s0
   c0724:	462b      	mov	r3, r5
   c0726:	4629      	mov	r1, r5
   c0728:	f001 fc5e 	bl	c1fe8 <__aeabi_dcmpun>
   c072c:	b140      	cbz	r0, c0740 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   c072e:	4953      	ldr	r1, [pc, #332]	; (c087c <_ZN5Print10printFloatEdh+0x16c>)
   c0730:	4630      	mov	r0, r6
   c0732:	f7f6 fa8b 	bl	b6c4c <_ZN5Print5writeEPKc>
   c0736:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   c0738:	4650      	mov	r0, sl
   c073a:	b003      	add	sp, #12
   c073c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   c0740:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   c0744:	4b4e      	ldr	r3, [pc, #312]	; (c0880 <_ZN5Print10printFloatEdh+0x170>)
   c0746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c074a:	4620      	mov	r0, r4
   c074c:	4649      	mov	r1, r9
   c074e:	f001 fc4b 	bl	c1fe8 <__aeabi_dcmpun>
   c0752:	b948      	cbnz	r0, c0768 <_ZN5Print10printFloatEdh+0x58>
   c0754:	4b4a      	ldr	r3, [pc, #296]	; (c0880 <_ZN5Print10printFloatEdh+0x170>)
   c0756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c075a:	4620      	mov	r0, r4
   c075c:	4649      	mov	r1, r9
   c075e:	f001 fc25 	bl	c1fac <__aeabi_dcmple>
   c0762:	b908      	cbnz	r0, c0768 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   c0764:	4947      	ldr	r1, [pc, #284]	; (c0884 <_ZN5Print10printFloatEdh+0x174>)
   c0766:	e7e3      	b.n	c0730 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   c0768:	4b47      	ldr	r3, [pc, #284]	; (c0888 <_ZN5Print10printFloatEdh+0x178>)
   c076a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   c076e:	4620      	mov	r0, r4
   c0770:	4629      	mov	r1, r5
   c0772:	f001 fc2f 	bl	c1fd4 <__aeabi_dcmpgt>
   c0776:	b108      	cbz	r0, c077c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   c0778:	4944      	ldr	r1, [pc, #272]	; (c088c <_ZN5Print10printFloatEdh+0x17c>)
   c077a:	e7d9      	b.n	c0730 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   c077c:	4b44      	ldr	r3, [pc, #272]	; (c0890 <_ZN5Print10printFloatEdh+0x180>)
   c077e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   c0782:	4620      	mov	r0, r4
   c0784:	4629      	mov	r1, r5
   c0786:	f001 fc07 	bl	c1f98 <__aeabi_dcmplt>
   c078a:	2800      	cmp	r0, #0
   c078c:	d1f4      	bne.n	c0778 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   c078e:	2200      	movs	r2, #0
   c0790:	2300      	movs	r3, #0
   c0792:	4620      	mov	r0, r4
   c0794:	4629      	mov	r1, r5
   c0796:	f001 fbff 	bl	c1f98 <__aeabi_dcmplt>
   c079a:	b1d0      	cbz	r0, c07d2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   c079c:	212d      	movs	r1, #45	; 0x2d
   c079e:	4630      	mov	r0, r6
   c07a0:	f7ff ff78 	bl	c0694 <_ZN5Print5printEc>
     number = -number;
   c07a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   c07a8:	4682      	mov	sl, r0
     number = -number;
   c07aa:	461d      	mov	r5, r3
  double rounding = 0.5;
   c07ac:	4939      	ldr	r1, [pc, #228]	; (c0894 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   c07ae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; c089c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   c07b2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   c07b6:	2000      	movs	r0, #0
    rounding /= 10.0;
   c07b8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   c07bc:	fa5f f38b 	uxtb.w	r3, fp
   c07c0:	429f      	cmp	r7, r3
   c07c2:	d908      	bls.n	c07d6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   c07c4:	4642      	mov	r2, r8
   c07c6:	464b      	mov	r3, r9
   c07c8:	f001 fa9e 	bl	c1d08 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   c07cc:	f10b 0b01 	add.w	fp, fp, #1
   c07d0:	e7f4      	b.n	c07bc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   c07d2:	4682      	mov	sl, r0
   c07d4:	e7ea      	b.n	c07ac <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   c07d6:	4622      	mov	r2, r4
   c07d8:	462b      	mov	r3, r5
   c07da:	f000 ffb5 	bl	c1748 <__adddf3>
   c07de:	460d      	mov	r5, r1
   c07e0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   c07e2:	f001 fc3f 	bl	c2064 <__aeabi_d2uiz>
   c07e6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   c07e8:	f001 f8ea 	bl	c19c0 <__aeabi_ui2d>
   c07ec:	4602      	mov	r2, r0
   c07ee:	460b      	mov	r3, r1
   c07f0:	4620      	mov	r0, r4
   c07f2:	4629      	mov	r1, r5
   c07f4:	f000 ffa6 	bl	c1744 <__aeabi_dsub>
        return printNumber(val, base) + t;
   c07f8:	220a      	movs	r2, #10
   c07fa:	4604      	mov	r4, r0
   c07fc:	460d      	mov	r5, r1
   c07fe:	4630      	mov	r0, r6
   c0800:	4641      	mov	r1, r8
   c0802:	f7ff ff66 	bl	c06d2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   c0806:	4482      	add	sl, r0
  if (digits > 0) {
   c0808:	2f00      	cmp	r7, #0
   c080a:	d095      	beq.n	c0738 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   c080c:	4922      	ldr	r1, [pc, #136]	; (c0898 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   c080e:	f8df 908c 	ldr.w	r9, [pc, #140]	; c089c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   c0812:	4630      	mov	r0, r6
   c0814:	f7f6 fa1a 	bl	b6c4c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   c0818:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   c081c:	4482      	add	sl, r0
  while (digits-- > 0)
   c081e:	2f00      	cmp	r7, #0
   c0820:	d08a      	beq.n	c0738 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   c0822:	4642      	mov	r2, r8
   c0824:	464b      	mov	r3, r9
   c0826:	4620      	mov	r0, r4
   c0828:	4629      	mov	r1, r5
   c082a:	f001 f943 	bl	c1ab4 <__aeabi_dmul>
   c082e:	4604      	mov	r4, r0
   c0830:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   c0832:	f001 fbef 	bl	c2014 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   c0836:	f1b0 0b00 	subs.w	fp, r0, #0
   c083a:	da1c      	bge.n	c0876 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   c083c:	212d      	movs	r1, #45	; 0x2d
   c083e:	4630      	mov	r0, r6
   c0840:	f7ff ff28 	bl	c0694 <_ZN5Print5printEc>
            val = -n;
   c0844:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   c0848:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   c084a:	220a      	movs	r2, #10
   c084c:	4630      	mov	r0, r6
   c084e:	9301      	str	r3, [sp, #4]
   c0850:	f7ff ff3f 	bl	c06d2 <_ZN5Print11printNumberEmh>
   c0854:	9b01      	ldr	r3, [sp, #4]
   c0856:	4418      	add	r0, r3
    n += print(toPrint);
   c0858:	4482      	add	sl, r0
    remainder -= toPrint;
   c085a:	4658      	mov	r0, fp
   c085c:	f001 f8c0 	bl	c19e0 <__aeabi_i2d>
   c0860:	4602      	mov	r2, r0
   c0862:	460b      	mov	r3, r1
   c0864:	4620      	mov	r0, r4
   c0866:	4629      	mov	r1, r5
   c0868:	f000 ff6c 	bl	c1744 <__aeabi_dsub>
   c086c:	3f01      	subs	r7, #1
   c086e:	4604      	mov	r4, r0
   c0870:	460d      	mov	r5, r1
   c0872:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   c0874:	e7d3      	b.n	c081e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   c0876:	4659      	mov	r1, fp
        size_t t = 0;
   c0878:	2300      	movs	r3, #0
   c087a:	e7e6      	b.n	c084a <_ZN5Print10printFloatEdh+0x13a>
   c087c:	000c5b94 	.word	0x000c5b94
   c0880:	7fefffff 	.word	0x7fefffff
   c0884:	000c5b98 	.word	0x000c5b98
   c0888:	41efffff 	.word	0x41efffff
   c088c:	000c5b9c 	.word	0x000c5b9c
   c0890:	c1efffff 	.word	0xc1efffff
   c0894:	3fe00000 	.word	0x3fe00000
   c0898:	000c4c4b 	.word	0x000c4c4b
   c089c:	40240000 	.word	0x40240000

000c08a0 <_ZN5Print5printEfi>:
{
   c08a0:	b538      	push	{r3, r4, r5, lr}
   c08a2:	4604      	mov	r4, r0
   c08a4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   c08a8:	b2cd      	uxtb	r5, r1
   c08aa:	f001 f8ab 	bl	c1a04 <__aeabi_f2d>
   c08ae:	ec41 0b10 	vmov	d0, r0, r1
   c08b2:	4629      	mov	r1, r5
   c08b4:	4620      	mov	r0, r4
}
   c08b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   c08ba:	f7ff bf29 	b.w	c0710 <_ZN5Print10printFloatEdh>

000c08be <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c08be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c08c2:	b086      	sub	sp, #24
   c08c4:	af00      	add	r7, sp, #0
   c08c6:	4605      	mov	r5, r0
   c08c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c08ca:	1d38      	adds	r0, r7, #4
   c08cc:	2114      	movs	r1, #20
{
   c08ce:	4614      	mov	r4, r2
    va_copy(args2, args);
   c08d0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c08d2:	f7fc fe75 	bl	bd5c0 <vsnprintf>

    if (n<bufsize)
   c08d6:	2813      	cmp	r0, #19
   c08d8:	d80e      	bhi.n	c08f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c08da:	1d39      	adds	r1, r7, #4
   c08dc:	4628      	mov	r0, r5
   c08de:	f7f6 f9b5 	bl	b6c4c <_ZN5Print5writeEPKc>
   c08e2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c08e4:	b11e      	cbz	r6, c08ee <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c08e6:	4628      	mov	r0, r5
   c08e8:	f7ff fedb 	bl	c06a2 <_ZN5Print7printlnEv>
   c08ec:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c08ee:	4620      	mov	r0, r4
   c08f0:	3718      	adds	r7, #24
   c08f2:	46bd      	mov	sp, r7
   c08f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c08f8:	f100 0308 	add.w	r3, r0, #8
   c08fc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c0900:	46e8      	mov	r8, sp
        char bigger[n+1];
   c0902:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c0906:	4622      	mov	r2, r4
   c0908:	1c41      	adds	r1, r0, #1
   c090a:	683b      	ldr	r3, [r7, #0]
   c090c:	4668      	mov	r0, sp
   c090e:	f7fc fe57 	bl	bd5c0 <vsnprintf>
  return write(str);
   c0912:	4669      	mov	r1, sp
   c0914:	4628      	mov	r0, r5
   c0916:	f7f6 f999 	bl	b6c4c <_ZN5Print5writeEPKc>
   c091a:	4604      	mov	r4, r0
   c091c:	46c5      	mov	sp, r8
   c091e:	e7e1      	b.n	c08e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c0920 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0920:	4b01      	ldr	r3, [pc, #4]	; (c0928 <_GLOBAL__sub_I_RGB+0x8>)
   c0922:	2200      	movs	r2, #0
   c0924:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0926:	4770      	bx	lr
   c0928:	2003e6a8 	.word	0x2003e6a8

000c092c <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c092c:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c0930:	1c53      	adds	r3, r2, #1
   c0932:	d00b      	beq.n	c094c <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c0934:	8843      	ldrh	r3, [r0, #2]
   c0936:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c0938:	428b      	cmp	r3, r1
   c093a:	d803      	bhi.n	c0944 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c093c:	4288      	cmp	r0, r1
   c093e:	4603      	mov	r3, r0
   c0940:	bf28      	it	cs
   c0942:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c0944:	4619      	mov	r1, r3
   c0946:	b290      	uxth	r0, r2
   c0948:	f7fc bc14 	b.w	bd174 <HAL_Servo_Write_Pulse_Width>
}
   c094c:	4770      	bx	lr

000c094e <_ZN5Servo5writeEi>:
{
   c094e:	b513      	push	{r0, r1, r4, lr}
   c0950:	4604      	mov	r4, r0
   c0952:	4608      	mov	r0, r1
   c0954:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c0958:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c095c:	4288      	cmp	r0, r1
   c095e:	db10      	blt.n	c0982 <_ZN5Servo5writeEi+0x34>
   c0960:	4290      	cmp	r0, r2
   c0962:	bfa8      	it	ge
   c0964:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0966:	88a3      	ldrh	r3, [r4, #4]
   c0968:	9300      	str	r3, [sp, #0]
   c096a:	8863      	ldrh	r3, [r4, #2]
   c096c:	f7fc fe60 	bl	bd630 <_Z3mapiiiii>
   c0970:	68e1      	ldr	r1, [r4, #12]
   c0972:	4401      	add	r1, r0
   c0974:	b289      	uxth	r1, r1
   c0976:	4620      	mov	r0, r4
}
   c0978:	b002      	add	sp, #8
   c097a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c097e:	f7ff bfd5 	b.w	c092c <_ZN5Servo17writeMicrosecondsEt>
   c0982:	4608      	mov	r0, r1
   c0984:	e7ef      	b.n	c0966 <_ZN5Servo5writeEi+0x18>
	...

000c0988 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c0988:	4a04      	ldr	r2, [pc, #16]	; (c099c <_ZN5Servo11resetFieldsEv+0x14>)
   c098a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c098e:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c0992:	23b4      	movs	r3, #180	; 0xb4
   c0994:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c0996:	2300      	movs	r3, #0
   c0998:	60c3      	str	r3, [r0, #12]
}
   c099a:	4770      	bx	lr
   c099c:	0220ffff 	.word	0x0220ffff

000c09a0 <_ZN5ServoC1Ev>:
Servo::Servo()
   c09a0:	b508      	push	{r3, lr}
  this->resetFields();
   c09a2:	f7ff fff1 	bl	c0988 <_ZN5Servo11resetFieldsEv>
}
   c09a6:	bd08      	pop	{r3, pc}

000c09a8 <_ZN5Servo6detachEv>:
{
   c09a8:	b510      	push	{r4, lr}
   c09aa:	4604      	mov	r4, r0
   c09ac:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c09b0:	1c43      	adds	r3, r0, #1
   c09b2:	d007      	beq.n	c09c4 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c09b4:	b280      	uxth	r0, r0
   c09b6:	f7fc fbd5 	bl	bd164 <HAL_Servo_Detach>
  this->resetFields();
   c09ba:	4620      	mov	r0, r4
   c09bc:	f7ff ffe4 	bl	c0988 <_ZN5Servo11resetFieldsEv>
  return true;
   c09c0:	2001      	movs	r0, #1
}
   c09c2:	bd10      	pop	{r4, pc}
    return false;
   c09c4:	2000      	movs	r0, #0
   c09c6:	e7fc      	b.n	c09c2 <_ZN5Servo6detachEv+0x1a>

000c09c8 <_ZN5Servo6attachEtttss>:
{
   c09c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c09cc:	460d      	mov	r5, r1
   c09ce:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c09d0:	2102      	movs	r1, #2
   c09d2:	4628      	mov	r0, r5
{
   c09d4:	4690      	mov	r8, r2
   c09d6:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c09d8:	f7fc fb14 	bl	bd004 <HAL_Validate_Pin_Function>
   c09dc:	2802      	cmp	r0, #2
   c09de:	d003      	beq.n	c09e8 <_ZN5Servo6attachEtttss+0x20>
    return false;
   c09e0:	2600      	movs	r6, #0
}
   c09e2:	4630      	mov	r0, r6
   c09e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c09e8:	4628      	mov	r0, r5
   c09ea:	f000 fca9 	bl	c1340 <pinAvailable>
   c09ee:	4606      	mov	r6, r0
   c09f0:	2800      	cmp	r0, #0
   c09f2:	d0f5      	beq.n	c09e0 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c09f4:	f9b4 3000 	ldrsh.w	r3, [r4]
   c09f8:	3301      	adds	r3, #1
   c09fa:	d002      	beq.n	c0a02 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c09fc:	4620      	mov	r0, r4
   c09fe:	f7ff ffd3 	bl	c09a8 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c0a02:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c0a06:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c0a08:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c0a0c:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c0a0e:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c0a12:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c0a14:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c0a16:	4628      	mov	r0, r5
   c0a18:	f7fc fb9c 	bl	bd154 <HAL_Servo_Attach>
  return true;
   c0a1c:	e7e1      	b.n	c09e2 <_ZN5Servo6attachEtttss+0x1a>

000c0a1e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c0a1e:	2100      	movs	r1, #0
   c0a20:	f7fc bc08 	b.w	bd234 <hal_spi_release>

000c0a24 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c0a24:	2100      	movs	r1, #0
   c0a26:	f7fc bbfd 	b.w	bd224 <hal_spi_acquire>

000c0a2a <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c0a2a:	b510      	push	{r4, lr}
   c0a2c:	4604      	mov	r4, r0
   c0a2e:	4608      	mov	r0, r1
{
    _spi = spi;
   c0a30:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c0a32:	f7fc fbbf 	bl	bd1b4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c0a36:	2300      	movs	r3, #0
   c0a38:	6063      	str	r3, [r4, #4]
}
   c0a3a:	4620      	mov	r0, r4
   c0a3c:	bd10      	pop	{r4, pc}

000c0a3e <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0a3e:	b513      	push	{r0, r1, r4, lr}
   c0a40:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c0a42:	7800      	ldrb	r0, [r0, #0]
   c0a44:	f7ff ffee 	bl	c0a24 <_ZN8SPIClass4lockEv.isra.0>
   c0a48:	b958      	cbnz	r0, c0a62 <_ZN8SPIClass5beginEv+0x24>
   c0a4a:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c0a4c:	9001      	str	r0, [sp, #4]
   c0a4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c0a52:	f7fc fb97 	bl	bd184 <hal_spi_begin>
        unlock();
   c0a56:	9801      	ldr	r0, [sp, #4]
    }
}
   c0a58:	b002      	add	sp, #8
   c0a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0a5e:	f7ff bfde 	b.w	c0a1e <_ZN8SPIClass6unlockEv.isra.0>
   c0a62:	b002      	add	sp, #8
   c0a64:	bd10      	pop	{r4, pc}

000c0a66 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c0a66:	b513      	push	{r0, r1, r4, lr}
   c0a68:	4604      	mov	r4, r0
    if (!lock())
   c0a6a:	7800      	ldrb	r0, [r0, #0]
{
   c0a6c:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c0a70:	f7ff ffd8 	bl	c0a24 <_ZN8SPIClass4lockEv.isra.0>
   c0a74:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0a78:	4603      	mov	r3, r0
   c0a7a:	b948      	cbnz	r0, c0a90 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c0a7c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c0a7e:	9000      	str	r0, [sp, #0]
   c0a80:	f7fc fbb8 	bl	bd1f4 <hal_spi_begin_ext>
        unlock();
   c0a84:	9800      	ldr	r0, [sp, #0]
    }
}
   c0a86:	b002      	add	sp, #8
   c0a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0a8c:	f7ff bfc7 	b.w	c0a1e <_ZN8SPIClass6unlockEv.isra.0>
   c0a90:	b002      	add	sp, #8
   c0a92:	bd10      	pop	{r4, pc}

000c0a94 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c0a94:	7800      	ldrb	r0, [r0, #0]
   c0a96:	f7ff bfc2 	b.w	c0a1e <_ZN8SPIClass6unlockEv.isra.0>
	...

000c0a9c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c0a9c:	0840      	lsrs	r0, r0, #1
{
   c0a9e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c0aa0:	6018      	str	r0, [r3, #0]
   c0aa2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c0aa4:	6818      	ldr	r0, [r3, #0]
   c0aa6:	4288      	cmp	r0, r1
   c0aa8:	b2e5      	uxtb	r5, r4
   c0aaa:	d906      	bls.n	c0aba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c0aac:	3401      	adds	r4, #1
   c0aae:	2c08      	cmp	r4, #8
   c0ab0:	d002      	beq.n	c0ab8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c0ab2:	0840      	lsrs	r0, r0, #1
   c0ab4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c0ab6:	e7f5      	b.n	c0aa4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c0ab8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c0aba:	4b02      	ldr	r3, [pc, #8]	; (c0ac4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c0abc:	5d5b      	ldrb	r3, [r3, r5]
   c0abe:	7013      	strb	r3, [r2, #0]
}
   c0ac0:	bd30      	pop	{r4, r5, pc}
   c0ac2:	bf00      	nop
   c0ac4:	000c5ba0 	.word	0x000c5ba0

000c0ac8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c0ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0acc:	4606      	mov	r6, r0
   c0ace:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c0ad0:	7800      	ldrb	r0, [r0, #0]
{
   c0ad2:	460c      	mov	r4, r1
    CHECK(lock());
   c0ad4:	f7ff ffa6 	bl	c0a24 <_ZN8SPIClass4lockEv.isra.0>
   c0ad8:	2800      	cmp	r0, #0
   c0ada:	db1b      	blt.n	c0b14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c0adc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0ade:	2214      	movs	r2, #20
   c0ae0:	2100      	movs	r1, #0
   c0ae2:	a809      	add	r0, sp, #36	; 0x24
   c0ae4:	f001 fb9a 	bl	c221c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0ae8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0aea:	2200      	movs	r2, #0
   c0aec:	a909      	add	r1, sp, #36	; 0x24
   c0aee:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c0af0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c0af4:	f7fc fb6e 	bl	bd1d4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c0af8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c0afc:	b113      	cbz	r3, c0b04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c0afe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c0b02:	b155      	cbz	r5, c0b1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c0b04:	2700      	movs	r7, #0
   c0b06:	46b9      	mov	r9, r7
   c0b08:	46b8      	mov	r8, r7
   c0b0a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c0b0c:	7923      	ldrb	r3, [r4, #4]
   c0b0e:	b15d      	cbz	r5, c0b28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c0b10:	b1c3      	cbz	r3, c0b44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c0b12:	2000      	movs	r0, #0
}
   c0b14:	b00f      	add	sp, #60	; 0x3c
   c0b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c0b1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c0b1e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c0b22:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c0b26:	e7f1      	b.n	c0b0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c0b28:	2b00      	cmp	r3, #0
   c0b2a:	d135      	bne.n	c0b98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c0b2c:	68a3      	ldr	r3, [r4, #8]
   c0b2e:	4543      	cmp	r3, r8
   c0b30:	d108      	bne.n	c0b44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c0b32:	f88d 9020 	strb.w	r9, [sp, #32]
   c0b36:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0b3a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0b3e:	89a3      	ldrh	r3, [r4, #12]
   c0b40:	429a      	cmp	r2, r3
   c0b42:	d0e6      	beq.n	c0b12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c0b44:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0b46:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c0b48:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0b4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   c0b4e:	ab04      	add	r3, sp, #16
   c0b50:	f10d 020f 	add.w	r2, sp, #15
   c0b54:	f7ff ffa2 	bl	c0a9c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c0b58:	7921      	ldrb	r1, [r4, #4]
   c0b5a:	b985      	cbnz	r5, c0b7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c0b5c:	b989      	cbnz	r1, c0b82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0b5e:	68a3      	ldr	r3, [r4, #8]
   c0b60:	4543      	cmp	r3, r8
   c0b62:	d30e      	bcc.n	c0b82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c0b64:	f88d 9020 	strb.w	r9, [sp, #32]
   c0b68:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0b6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0b70:	89a3      	ldrh	r3, [r4, #12]
   c0b72:	429a      	cmp	r2, r3
   c0b74:	d105      	bne.n	c0b82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c0b76:	9b04      	ldr	r3, [sp, #16]
   c0b78:	4543      	cmp	r3, r8
   c0b7a:	d102      	bne.n	c0b82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0b7c:	e7c9      	b.n	c0b12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c0b7e:	2900      	cmp	r1, #0
   c0b80:	d1f9      	bne.n	c0b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c0b82:	2300      	movs	r3, #0
   c0b84:	9301      	str	r3, [sp, #4]
   c0b86:	7b63      	ldrb	r3, [r4, #13]
   c0b88:	9300      	str	r3, [sp, #0]
   c0b8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c0b8e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c0b90:	7830      	ldrb	r0, [r6, #0]
   c0b92:	f7fc fb3f 	bl	bd214 <hal_spi_set_settings>
   c0b96:	e7bc      	b.n	c0b12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c0b98:	e9cd 5500 	strd	r5, r5, [sp]
   c0b9c:	462b      	mov	r3, r5
   c0b9e:	462a      	mov	r2, r5
   c0ba0:	2101      	movs	r1, #1
   c0ba2:	e7f5      	b.n	c0b90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c0ba4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c0ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0ba8:	b088      	sub	sp, #32
    unsigned clock = 0;
   c0baa:	2300      	movs	r3, #0
{
   c0bac:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c0bae:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c0bb0:	9302      	str	r3, [sp, #8]
{
   c0bb2:	460e      	mov	r6, r1
   c0bb4:	4617      	mov	r7, r2
    if (!lock())
   c0bb6:	f7ff ff35 	bl	c0a24 <_ZN8SPIClass4lockEv.isra.0>
   c0bba:	4605      	mov	r5, r0
   c0bbc:	bb00      	cbnz	r0, c0c00 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c0bbe:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0bc2:	4601      	mov	r1, r0
   c0bc4:	2214      	movs	r2, #20
   c0bc6:	a803      	add	r0, sp, #12
   c0bc8:	f001 fb28 	bl	c221c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0bcc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0bce:	462a      	mov	r2, r5
   c0bd0:	a903      	add	r1, sp, #12
   c0bd2:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c0bd4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c0bd8:	f7fc fafc 	bl	bd1d4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0bdc:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c0bde:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0be2:	ab02      	add	r3, sp, #8
   c0be4:	f10d 0207 	add.w	r2, sp, #7
   c0be8:	fb07 f106 	mul.w	r1, r7, r6
   c0bec:	f7ff ff56 	bl	c0a9c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c0bf0:	7820      	ldrb	r0, [r4, #0]
   c0bf2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c0bf6:	f7fc facd 	bl	bd194 <hal_spi_set_clock_divider>
        unlock();
   c0bfa:	7820      	ldrb	r0, [r4, #0]
   c0bfc:	f7ff ff0f 	bl	c0a1e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c0c00:	9802      	ldr	r0, [sp, #8]
   c0c02:	b008      	add	sp, #32
   c0c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0c08 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c0c08:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c0c0a:	7800      	ldrb	r0, [r0, #0]
   c0c0c:	f7fc faca 	bl	bd1a4 <hal_spi_transfer>
}
   c0c10:	b2c0      	uxtb	r0, r0
   c0c12:	bd08      	pop	{r3, pc}

000c0c14 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c0c14:	b530      	push	{r4, r5, lr}
   c0c16:	b087      	sub	sp, #28
   c0c18:	4604      	mov	r4, r0
   c0c1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c0c1c:	9500      	str	r5, [sp, #0]
   c0c1e:	7800      	ldrb	r0, [r0, #0]
   c0c20:	f7fc fae0 	bl	bd1e4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c0c24:	b93d      	cbnz	r5, c0c36 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c0c26:	7820      	ldrb	r0, [r4, #0]
   c0c28:	a902      	add	r1, sp, #8
   c0c2a:	f7fc faeb 	bl	bd204 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c0c2e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c0c32:	07db      	lsls	r3, r3, #31
   c0c34:	d4f7      	bmi.n	c0c26 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c0c36:	b007      	add	sp, #28
   c0c38:	bd30      	pop	{r4, r5, pc}

000c0c3a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c0c3a:	b510      	push	{r4, lr}
   c0c3c:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c0c3e:	f7fc f9c9 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c0c42:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c0c44:	6823      	ldr	r3, [r4, #0]
   c0c46:	4620      	mov	r0, r4
   c0c48:	695b      	ldr	r3, [r3, #20]
   c0c4a:	4798      	blx	r3
    if (c >= 0) return c;
   c0c4c:	2800      	cmp	r0, #0
   c0c4e:	da08      	bge.n	c0c62 <_ZN6Stream9timedReadEv+0x28>
   c0c50:	f7fc f9c0 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c0c54:	68e3      	ldr	r3, [r4, #12]
   c0c56:	1ac0      	subs	r0, r0, r3
   c0c58:	68a3      	ldr	r3, [r4, #8]
   c0c5a:	4298      	cmp	r0, r3
   c0c5c:	d3f2      	bcc.n	c0c44 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c0c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c0c62:	bd10      	pop	{r4, pc}

000c0c64 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c0c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0c68:	4607      	mov	r7, r0
   c0c6a:	4688      	mov	r8, r1
   c0c6c:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c0c6e:	461d      	mov	r5, r3
   c0c70:	b173      	cbz	r3, c0c90 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c0c72:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c0c74:	4638      	mov	r0, r7
   c0c76:	f7ff ffe0 	bl	c0c3a <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c0c7a:	1e03      	subs	r3, r0, #0
   c0c7c:	db05      	blt.n	c0c8a <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c0c7e:	4543      	cmp	r3, r8
   c0c80:	d003      	beq.n	c0c8a <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c0c82:	5533      	strb	r3, [r6, r4]
    index++;
   c0c84:	3401      	adds	r4, #1
  while (index < length) {
   c0c86:	42a5      	cmp	r5, r4
   c0c88:	d1f4      	bne.n	c0c74 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c0c8a:	4620      	mov	r0, r4
   c0c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c0c90:	461c      	mov	r4, r3
   c0c92:	e7fa      	b.n	c0c8a <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c0c94 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c0c94:	b570      	push	{r4, r5, r6, lr}
   c0c96:	460d      	mov	r5, r1
  String ret;
   c0c98:	4909      	ldr	r1, [pc, #36]	; (c0cc0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c0c9a:	4604      	mov	r4, r0
   c0c9c:	4616      	mov	r6, r2
  String ret;
   c0c9e:	f000 f85c 	bl	c0d5a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c0ca2:	4628      	mov	r0, r5
   c0ca4:	f7ff ffc9 	bl	c0c3a <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c0ca8:	2800      	cmp	r0, #0
   c0caa:	db06      	blt.n	c0cba <_ZN6Stream15readStringUntilEc+0x26>
   c0cac:	4286      	cmp	r6, r0
   c0cae:	d004      	beq.n	c0cba <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c0cb0:	b2c1      	uxtb	r1, r0
   c0cb2:	4620      	mov	r0, r4
   c0cb4:	f000 f8d0 	bl	c0e58 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c0cb8:	e7f3      	b.n	c0ca2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c0cba:	4620      	mov	r0, r4
   c0cbc:	bd70      	pop	{r4, r5, r6, pc}
   c0cbe:	bf00      	nop
   c0cc0:	000c5acb 	.word	0x000c5acb

000c0cc4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c0cc4:	b510      	push	{r4, lr}
   c0cc6:	4604      	mov	r4, r0
{
	free(buffer);
   c0cc8:	6800      	ldr	r0, [r0, #0]
   c0cca:	f7fc fc59 	bl	bd580 <free>
}
   c0cce:	4620      	mov	r0, r4
   c0cd0:	bd10      	pop	{r4, pc}

000c0cd2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c0cd2:	b510      	push	{r4, lr}
   c0cd4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c0cd6:	6800      	ldr	r0, [r0, #0]
   c0cd8:	b108      	cbz	r0, c0cde <_ZN6String10invalidateEv+0xc>
   c0cda:	f7fc fc51 	bl	bd580 <free>
	buffer = NULL;
   c0cde:	2300      	movs	r3, #0
	capacity = len = 0;
   c0ce0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c0ce4:	6023      	str	r3, [r4, #0]
}
   c0ce6:	bd10      	pop	{r4, pc}

000c0ce8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c0ce8:	b538      	push	{r3, r4, r5, lr}
   c0cea:	4604      	mov	r4, r0
   c0cec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c0cee:	6800      	ldr	r0, [r0, #0]
   c0cf0:	3101      	adds	r1, #1
   c0cf2:	f7fc fc4d 	bl	bd590 <realloc>
	if (newbuffer) {
   c0cf6:	b110      	cbz	r0, c0cfe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c0cf8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c0cfc:	2001      	movs	r0, #1
	}
	return 0;
}
   c0cfe:	bd38      	pop	{r3, r4, r5, pc}

000c0d00 <_ZN6String7reserveEj>:
{
   c0d00:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c0d02:	6803      	ldr	r3, [r0, #0]
{
   c0d04:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c0d06:	b123      	cbz	r3, c0d12 <_ZN6String7reserveEj+0x12>
   c0d08:	6843      	ldr	r3, [r0, #4]
   c0d0a:	428b      	cmp	r3, r1
   c0d0c:	d301      	bcc.n	c0d12 <_ZN6String7reserveEj+0x12>
   c0d0e:	2001      	movs	r0, #1
}
   c0d10:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c0d12:	4620      	mov	r0, r4
   c0d14:	f7ff ffe8 	bl	c0ce8 <_ZN6String12changeBufferEj>
   c0d18:	2800      	cmp	r0, #0
   c0d1a:	d0f9      	beq.n	c0d10 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c0d1c:	68a3      	ldr	r3, [r4, #8]
   c0d1e:	2b00      	cmp	r3, #0
   c0d20:	d1f5      	bne.n	c0d0e <_ZN6String7reserveEj+0xe>
   c0d22:	6822      	ldr	r2, [r4, #0]
   c0d24:	7013      	strb	r3, [r2, #0]
   c0d26:	e7f2      	b.n	c0d0e <_ZN6String7reserveEj+0xe>

000c0d28 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c0d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0d2a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c0d2c:	4611      	mov	r1, r2
   c0d2e:	9201      	str	r2, [sp, #4]
{
   c0d30:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c0d32:	f7ff ffe5 	bl	c0d00 <_ZN6String7reserveEj>
   c0d36:	9a01      	ldr	r2, [sp, #4]
   c0d38:	b928      	cbnz	r0, c0d46 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c0d3a:	4620      	mov	r0, r4
   c0d3c:	f7ff ffc9 	bl	c0cd2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c0d40:	4620      	mov	r0, r4
   c0d42:	b003      	add	sp, #12
   c0d44:	bd30      	pop	{r4, r5, pc}
	len = length;
   c0d46:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c0d48:	4629      	mov	r1, r5
   c0d4a:	6820      	ldr	r0, [r4, #0]
   c0d4c:	f001 fa3e 	bl	c21cc <memcpy>
	buffer[len] = 0;
   c0d50:	6822      	ldr	r2, [r4, #0]
   c0d52:	68a3      	ldr	r3, [r4, #8]
   c0d54:	2100      	movs	r1, #0
   c0d56:	54d1      	strb	r1, [r2, r3]
	return *this;
   c0d58:	e7f2      	b.n	c0d40 <_ZN6String4copyEPKcj+0x18>

000c0d5a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c0d5a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c0d5c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c0d5e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c0d62:	4604      	mov	r4, r0
	len = 0;
   c0d64:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0d66:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c0d68:	b141      	cbz	r1, c0d7c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c0d6a:	4608      	mov	r0, r1
   c0d6c:	9101      	str	r1, [sp, #4]
   c0d6e:	f001 fae0 	bl	c2332 <strlen>
   c0d72:	9901      	ldr	r1, [sp, #4]
   c0d74:	4602      	mov	r2, r0
   c0d76:	4620      	mov	r0, r4
   c0d78:	f7ff ffd6 	bl	c0d28 <_ZN6String4copyEPKcj>
}
   c0d7c:	4620      	mov	r0, r4
   c0d7e:	b002      	add	sp, #8
   c0d80:	bd10      	pop	{r4, pc}

000c0d82 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c0d82:	b538      	push	{r3, r4, r5, lr}
   c0d84:	4605      	mov	r5, r0
	if (buffer) {
   c0d86:	6800      	ldr	r0, [r0, #0]
{
   c0d88:	460c      	mov	r4, r1
	if (buffer) {
   c0d8a:	b168      	cbz	r0, c0da8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c0d8c:	686a      	ldr	r2, [r5, #4]
   c0d8e:	688b      	ldr	r3, [r1, #8]
   c0d90:	429a      	cmp	r2, r3
   c0d92:	d307      	bcc.n	c0da4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c0d94:	6809      	ldr	r1, [r1, #0]
   c0d96:	f001 faa7 	bl	c22e8 <strcpy>
			len = rhs.len;
   c0d9a:	68a3      	ldr	r3, [r4, #8]
   c0d9c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c0d9e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c0da0:	60a3      	str	r3, [r4, #8]
}
   c0da2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c0da4:	f7fc fbec 	bl	bd580 <free>
	buffer = rhs.buffer;
   c0da8:	6823      	ldr	r3, [r4, #0]
   c0daa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c0dac:	6863      	ldr	r3, [r4, #4]
   c0dae:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c0db0:	68a3      	ldr	r3, [r4, #8]
   c0db2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c0db4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c0db6:	e9c4 3300 	strd	r3, r3, [r4]
   c0dba:	e7f1      	b.n	c0da0 <_ZN6String4moveERS_+0x1e>

000c0dbc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c0dbc:	b510      	push	{r4, lr}
	buffer = NULL;
   c0dbe:	2300      	movs	r3, #0
	capacity = 0;
   c0dc0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c0dc4:	4604      	mov	r4, r0
	len = 0;
   c0dc6:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0dc8:	7303      	strb	r3, [r0, #12]
	move(rval);
   c0dca:	f7ff ffda 	bl	c0d82 <_ZN6String4moveERS_>
}
   c0dce:	4620      	mov	r0, r4
   c0dd0:	bd10      	pop	{r4, pc}

000c0dd2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c0dd2:	4288      	cmp	r0, r1
{
   c0dd4:	b510      	push	{r4, lr}
   c0dd6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c0dd8:	d005      	beq.n	c0de6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c0dda:	680b      	ldr	r3, [r1, #0]
   c0ddc:	b12b      	cbz	r3, c0dea <_ZN6StringaSERKS_+0x18>
   c0dde:	688a      	ldr	r2, [r1, #8]
   c0de0:	4619      	mov	r1, r3
   c0de2:	f7ff ffa1 	bl	c0d28 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0de6:	4620      	mov	r0, r4
   c0de8:	bd10      	pop	{r4, pc}
	else invalidate();
   c0dea:	f7ff ff72 	bl	c0cd2 <_ZN6String10invalidateEv>
   c0dee:	e7fa      	b.n	c0de6 <_ZN6StringaSERKS_+0x14>

000c0df0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c0df0:	b510      	push	{r4, lr}
	buffer = NULL;
   c0df2:	2300      	movs	r3, #0
String::String(const String &value)
   c0df4:	4604      	mov	r4, r0
	capacity = 0;
   c0df6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c0dfa:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0dfc:	7303      	strb	r3, [r0, #12]
	*this = value;
   c0dfe:	f7ff ffe8 	bl	c0dd2 <_ZN6StringaSERKS_>
}
   c0e02:	4620      	mov	r0, r4
   c0e04:	bd10      	pop	{r4, pc}

000c0e06 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c0e06:	b513      	push	{r0, r1, r4, lr}
   c0e08:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c0e0a:	b159      	cbz	r1, c0e24 <_ZN6StringaSEPKc+0x1e>
   c0e0c:	4608      	mov	r0, r1
   c0e0e:	9101      	str	r1, [sp, #4]
   c0e10:	f001 fa8f 	bl	c2332 <strlen>
   c0e14:	9901      	ldr	r1, [sp, #4]
   c0e16:	4602      	mov	r2, r0
   c0e18:	4620      	mov	r0, r4
   c0e1a:	f7ff ff85 	bl	c0d28 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0e1e:	4620      	mov	r0, r4
   c0e20:	b002      	add	sp, #8
   c0e22:	bd10      	pop	{r4, pc}
	else invalidate();
   c0e24:	f7ff ff55 	bl	c0cd2 <_ZN6String10invalidateEv>
   c0e28:	e7f9      	b.n	c0e1e <_ZN6StringaSEPKc+0x18>

000c0e2a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c0e2a:	b570      	push	{r4, r5, r6, lr}
   c0e2c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c0e2e:	460e      	mov	r6, r1
   c0e30:	b909      	cbnz	r1, c0e36 <_ZN6String6concatEPKcj+0xc>
   c0e32:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c0e34:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c0e36:	b16a      	cbz	r2, c0e54 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c0e38:	6884      	ldr	r4, [r0, #8]
   c0e3a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c0e3c:	4621      	mov	r1, r4
   c0e3e:	f7ff ff5f 	bl	c0d00 <_ZN6String7reserveEj>
   c0e42:	2800      	cmp	r0, #0
   c0e44:	d0f5      	beq.n	c0e32 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c0e46:	6828      	ldr	r0, [r5, #0]
   c0e48:	68ab      	ldr	r3, [r5, #8]
   c0e4a:	4631      	mov	r1, r6
   c0e4c:	4418      	add	r0, r3
   c0e4e:	f001 fa4b 	bl	c22e8 <strcpy>
	len = newlen;
   c0e52:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c0e54:	2001      	movs	r0, #1
   c0e56:	e7ed      	b.n	c0e34 <_ZN6String6concatEPKcj+0xa>

000c0e58 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c0e58:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c0e5a:	2300      	movs	r3, #0
	buf[0] = c;
   c0e5c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c0e60:	2201      	movs	r2, #1
   c0e62:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c0e64:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c0e68:	f7ff ffdf 	bl	c0e2a <_ZN6String6concatEPKcj>
}
   c0e6c:	b003      	add	sp, #12
   c0e6e:	f85d fb04 	ldr.w	pc, [sp], #4

000c0e72 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c0e72:	6883      	ldr	r3, [r0, #8]
   c0e74:	428b      	cmp	r3, r1
   c0e76:	d903      	bls.n	c0e80 <_ZNK6StringixEj+0xe>
   c0e78:	6800      	ldr	r0, [r0, #0]
   c0e7a:	b110      	cbz	r0, c0e82 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c0e7c:	5c40      	ldrb	r0, [r0, r1]
   c0e7e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c0e80:	2000      	movs	r0, #0
}
   c0e82:	4770      	bx	lr

000c0e84 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c0e84:	f7ff bff5 	b.w	c0e72 <_ZNK6StringixEj>

000c0e88 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c0e88:	4b05      	ldr	r3, [pc, #20]	; (c0ea0 <_GLOBAL__sub_I_System+0x18>)
   c0e8a:	2202      	movs	r2, #2
   c0e8c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c0e8e:	4b05      	ldr	r3, [pc, #20]	; (c0ea4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c0e90:	4a05      	ldr	r2, [pc, #20]	; (c0ea8 <_GLOBAL__sub_I_System+0x20>)
   c0e92:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c0e94:	2000      	movs	r0, #0
   c0e96:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c0e9a:	f7fc ba95 	b.w	bd3c8 <set_system_mode>
   c0e9e:	bf00      	nop
   c0ea0:	2003e6c4 	.word	0x2003e6c4
   c0ea4:	2003e6b8 	.word	0x2003e6b8
   c0ea8:	ffff0000 	.word	0xffff0000

000c0eac <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0eb0:	4a15      	ldr	r2, [pc, #84]	; (c0f08 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0eb2:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0f14 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0eb6:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0eba:	1980      	adds	r0, r0, r6
   c0ebc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0ec0:	4b12      	ldr	r3, [pc, #72]	; (c0f0c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0ec2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c0ec6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c0eca:	1986      	adds	r6, r0, r6
   c0ecc:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0ed0:	42bb      	cmp	r3, r7
   c0ed2:	bf08      	it	eq
   c0ed4:	42b2      	cmpeq	r2, r6
{
   c0ed6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c0ed8:	d013      	beq.n	c0f02 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c0eda:	a903      	add	r1, sp, #12
   c0edc:	4668      	mov	r0, sp
   c0ede:	e9cd 6700 	strd	r6, r7, [sp]
   c0ee2:	f7fc fb9d 	bl	bd620 <localtime_r>
	calendar_time.tm_year += 1900;
   c0ee6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ee8:	4d09      	ldr	r5, [pc, #36]	; (c0f10 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0eea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0eee:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c0ef0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c0ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c0efa:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0efe:	6823      	ldr	r3, [r4, #0]
   c0f00:	602b      	str	r3, [r5, #0]
    }
}
   c0f02:	b00c      	add	sp, #48	; 0x30
   c0f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0f08:	2003e6f8 	.word	0x2003e6f8
   c0f0c:	2003e6f0 	.word	0x2003e6f0
   c0f10:	2003e6cc 	.word	0x2003e6cc
   c0f14:	2003e700 	.word	0x2003e700

000c0f18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c0f18:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0f1a:	2000      	movs	r0, #0
   c0f1c:	f7fc fab8 	bl	bd490 <spark_sync_time_pending>
   c0f20:	b128      	cbz	r0, c0f2e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0f22:	f7fc fa9d 	bl	bd460 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0f26:	f080 0001 	eor.w	r0, r0, #1
   c0f2a:	b2c0      	uxtb	r0, r0
    }
   c0f2c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0f2e:	2001      	movs	r0, #1
   c0f30:	e7fc      	b.n	c0f2c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0f34 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c0f34:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c0f36:	f7ff ffb9 	bl	c0eac <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c0f3a:	4b02      	ldr	r3, [pc, #8]	; (c0f44 <_ZN9TimeClass5monthEx+0x10>)
   c0f3c:	6918      	ldr	r0, [r3, #16]
}
   c0f3e:	3001      	adds	r0, #1
   c0f40:	bd08      	pop	{r3, pc}
   c0f42:	bf00      	nop
   c0f44:	2003e6cc 	.word	0x2003e6cc

000c0f48 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c0f48:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0f4a:	2000      	movs	r0, #0
   c0f4c:	f7fc f84a 	bl	bcfe4 <hal_rtc_time_is_valid>
    if (rtcstate)
   c0f50:	4604      	mov	r4, r0
   c0f52:	b9a0      	cbnz	r0, c0f7e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c0f54:	f7fc fa30 	bl	bd3b8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0f58:	2801      	cmp	r0, #1
   c0f5a:	d110      	bne.n	c0f7e <_ZN9TimeClass7isValidEv+0x36>
   c0f5c:	4620      	mov	r0, r4
   c0f5e:	f7fc fa53 	bl	bd408 <system_thread_get_state>
   c0f62:	b960      	cbnz	r0, c0f7e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c0f64:	f7ff ffd8 	bl	c0f18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0f68:	b910      	cbnz	r0, c0f70 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0f6a:	f7fc fa71 	bl	bd450 <spark_process>
        while (_while() && !_condition()) {
   c0f6e:	e7f9      	b.n	c0f64 <_ZN9TimeClass7isValidEv+0x1c>
   c0f70:	f7ff ffd2 	bl	c0f18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c0f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0f78:	2000      	movs	r0, #0
   c0f7a:	f7fc b833 	b.w	bcfe4 <hal_rtc_time_is_valid>
}
   c0f7e:	4620      	mov	r0, r4
   c0f80:	bd10      	pop	{r4, pc}

000c0f82 <_ZN9TimeClass3nowEv>:
{
   c0f82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c0f84:	f7ff ffe0 	bl	c0f48 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c0f88:	2210      	movs	r2, #16
   c0f8a:	2100      	movs	r1, #0
   c0f8c:	4668      	mov	r0, sp
   c0f8e:	f001 f945 	bl	c221c <memset>
    hal_rtc_get_time(&tv, nullptr);
   c0f92:	2100      	movs	r1, #0
   c0f94:	4668      	mov	r0, sp
   c0f96:	f7fc f82d 	bl	bcff4 <hal_rtc_get_time>
}
   c0f9a:	9800      	ldr	r0, [sp, #0]
   c0f9c:	b005      	add	sp, #20
   c0f9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0fa4 <_ZN9TimeClass4hourEv>:
{
   c0fa4:	b508      	push	{r3, lr}
	return hour(now());
   c0fa6:	f7ff ffec 	bl	c0f82 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0faa:	17c1      	asrs	r1, r0, #31
   c0fac:	f7ff ff7e 	bl	c0eac <_ZL22Refresh_UnixTime_Cachex>
}
   c0fb0:	4b01      	ldr	r3, [pc, #4]	; (c0fb8 <_ZN9TimeClass4hourEv+0x14>)
   c0fb2:	6898      	ldr	r0, [r3, #8]
   c0fb4:	bd08      	pop	{r3, pc}
   c0fb6:	bf00      	nop
   c0fb8:	2003e6cc 	.word	0x2003e6cc

000c0fbc <_ZN9TimeClass6minuteEv>:
{
   c0fbc:	b508      	push	{r3, lr}
	return minute(now());
   c0fbe:	f7ff ffe0 	bl	c0f82 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0fc2:	17c1      	asrs	r1, r0, #31
   c0fc4:	f7ff ff72 	bl	c0eac <_ZL22Refresh_UnixTime_Cachex>
}
   c0fc8:	4b01      	ldr	r3, [pc, #4]	; (c0fd0 <_ZN9TimeClass6minuteEv+0x14>)
   c0fca:	6858      	ldr	r0, [r3, #4]
   c0fcc:	bd08      	pop	{r3, pc}
   c0fce:	bf00      	nop
   c0fd0:	2003e6cc 	.word	0x2003e6cc

000c0fd4 <_ZN9TimeClass6secondEv>:
{
   c0fd4:	b508      	push	{r3, lr}
	return second(now());
   c0fd6:	f7ff ffd4 	bl	c0f82 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0fda:	17c1      	asrs	r1, r0, #31
   c0fdc:	f7ff ff66 	bl	c0eac <_ZL22Refresh_UnixTime_Cachex>
}
   c0fe0:	4b01      	ldr	r3, [pc, #4]	; (c0fe8 <_ZN9TimeClass6secondEv+0x14>)
   c0fe2:	6818      	ldr	r0, [r3, #0]
   c0fe4:	bd08      	pop	{r3, pc}
   c0fe6:	bf00      	nop
   c0fe8:	2003e6cc 	.word	0x2003e6cc

000c0fec <_ZN9TimeClass3dayEv>:
{
   c0fec:	b508      	push	{r3, lr}
	return day(now());
   c0fee:	f7ff ffc8 	bl	c0f82 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0ff2:	17c1      	asrs	r1, r0, #31
   c0ff4:	f7ff ff5a 	bl	c0eac <_ZL22Refresh_UnixTime_Cachex>
}
   c0ff8:	4b01      	ldr	r3, [pc, #4]	; (c1000 <_ZN9TimeClass3dayEv+0x14>)
   c0ffa:	68d8      	ldr	r0, [r3, #12]
   c0ffc:	bd08      	pop	{r3, pc}
   c0ffe:	bf00      	nop
   c1000:	2003e6cc 	.word	0x2003e6cc

000c1004 <_ZN9TimeClass5monthEv>:
{
   c1004:	b508      	push	{r3, lr}
	return month(now());
   c1006:	f7ff ffbc 	bl	c0f82 <_ZN9TimeClass3nowEv>
}
   c100a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c100e:	17c1      	asrs	r1, r0, #31
   c1010:	f7ff bf90 	b.w	c0f34 <_ZN9TimeClass5monthEx>

000c1014 <_ZN9TimeClass4yearEv>:
{
   c1014:	b508      	push	{r3, lr}
	return year(now());
   c1016:	f7ff ffb4 	bl	c0f82 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c101a:	17c1      	asrs	r1, r0, #31
   c101c:	f7ff ff46 	bl	c0eac <_ZL22Refresh_UnixTime_Cachex>
}
   c1020:	4b01      	ldr	r3, [pc, #4]	; (c1028 <_ZN9TimeClass4yearEv+0x14>)
   c1022:	6958      	ldr	r0, [r3, #20]
   c1024:	bd08      	pop	{r3, pc}
   c1026:	bf00      	nop
   c1028:	2003e6cc 	.word	0x2003e6cc

000c102c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c102c:	4b02      	ldr	r3, [pc, #8]	; (c1038 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c102e:	681a      	ldr	r2, [r3, #0]
   c1030:	4b02      	ldr	r3, [pc, #8]	; (c103c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1032:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1034:	4770      	bx	lr
   c1036:	bf00      	nop
   c1038:	2003dbc4 	.word	0x2003dbc4
   c103c:	2003e6c8 	.word	0x2003e6c8

000c1040 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1040:	4770      	bx	lr

000c1042 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1042:	7441      	strb	r1, [r0, #17]
}
   c1044:	4770      	bx	lr

000c1046 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1046:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1048:	7c00      	ldrb	r0, [r0, #16]
   c104a:	f7fc f933 	bl	bd2b4 <hal_usart_available_data_for_write>
}
   c104e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1052:	bd08      	pop	{r3, pc}

000c1054 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1054:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c1056:	7c00      	ldrb	r0, [r0, #16]
   c1058:	f7fc f904 	bl	bd264 <hal_usart_available>
}
   c105c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1060:	bd08      	pop	{r3, pc}

000c1062 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1062:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1064:	7c00      	ldrb	r0, [r0, #16]
   c1066:	f7fc f90d 	bl	bd284 <hal_usart_peek>
}
   c106a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c106e:	bd08      	pop	{r3, pc}

000c1070 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1070:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1072:	7c00      	ldrb	r0, [r0, #16]
   c1074:	f7fc f8fe 	bl	bd274 <hal_usart_read>
}
   c1078:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c107c:	bd08      	pop	{r3, pc}

000c107e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c107e:	7c00      	ldrb	r0, [r0, #16]
   c1080:	f7fc b908 	b.w	bd294 <hal_usart_flush>

000c1084 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1084:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1086:	7c45      	ldrb	r5, [r0, #17]
{
   c1088:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c108a:	b12d      	cbz	r5, c1098 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c108c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c108e:	b003      	add	sp, #12
   c1090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1094:	f7fc b8de 	b.w	bd254 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1098:	7c00      	ldrb	r0, [r0, #16]
   c109a:	9101      	str	r1, [sp, #4]
   c109c:	f7fc f90a 	bl	bd2b4 <hal_usart_available_data_for_write>
   c10a0:	2800      	cmp	r0, #0
   c10a2:	9901      	ldr	r1, [sp, #4]
   c10a4:	dcf2      	bgt.n	c108c <_ZN11USARTSerial5writeEh+0x8>
}
   c10a6:	4628      	mov	r0, r5
   c10a8:	b003      	add	sp, #12
   c10aa:	bd30      	pop	{r4, r5, pc}

000c10ac <_ZN11USARTSerialD0Ev>:
   c10ac:	b510      	push	{r4, lr}
   c10ae:	2114      	movs	r1, #20
   c10b0:	4604      	mov	r4, r0
   c10b2:	f7f2 fff6 	bl	b40a2 <_ZdlPvj>
   c10b6:	4620      	mov	r0, r4
   c10b8:	bd10      	pop	{r4, pc}
	...

000c10bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c10bc:	b510      	push	{r4, lr}
   c10be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c10c2:	4604      	mov	r4, r0
   c10c4:	4608      	mov	r0, r1
   c10c6:	4611      	mov	r1, r2
   c10c8:	2200      	movs	r2, #0
   c10ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c10ce:	4b04      	ldr	r3, [pc, #16]	; (c10e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c10d0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c10d2:	2301      	movs	r3, #1
  _serial = serial;
   c10d4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c10d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c10d8:	f7fc f8fc 	bl	bd2d4 <hal_usart_init_ex>
}
   c10dc:	4620      	mov	r0, r4
   c10de:	bd10      	pop	{r4, pc}
   c10e0:	000c5bcc 	.word	0x000c5bcc

000c10e4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c10e4:	7c00      	ldrb	r0, [r0, #16]
   c10e6:	2300      	movs	r3, #0
   c10e8:	f7fc b8ec 	b.w	bd2c4 <hal_usart_begin_config>

000c10ec <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c10ec:	2200      	movs	r2, #0
   c10ee:	f7ff bff9 	b.w	c10e4 <_ZN11USARTSerial5beginEmm>

000c10f2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c10f2:	7c00      	ldrb	r0, [r0, #16]
   c10f4:	f7fc b8a6 	b.w	bd244 <hal_usart_end>

000c10f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c10f8:	7441      	strb	r1, [r0, #17]
}
   c10fa:	4770      	bx	lr

000c10fc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c10fc:	4770      	bx	lr

000c10fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c10fe:	4770      	bx	lr

000c1100 <_ZN9USBSerial4readEv>:
{
   c1100:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1102:	2100      	movs	r1, #0
   c1104:	7c00      	ldrb	r0, [r0, #16]
   c1106:	f7fc f915 	bl	bd334 <HAL_USB_USART_Receive_Data>
}
   c110a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c110e:	bd08      	pop	{r3, pc}

000c1110 <_ZN9USBSerial4peekEv>:
{
   c1110:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1112:	2101      	movs	r1, #1
   c1114:	7c00      	ldrb	r0, [r0, #16]
   c1116:	f7fc f90d 	bl	bd334 <HAL_USB_USART_Receive_Data>
}
   c111a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c111e:	bd08      	pop	{r3, pc}

000c1120 <_ZN9USBSerial17availableForWriteEv>:
{
   c1120:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1122:	7c00      	ldrb	r0, [r0, #16]
   c1124:	f7fc f8fe 	bl	bd324 <HAL_USB_USART_Available_Data_For_Write>
}
   c1128:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c112c:	bd08      	pop	{r3, pc}

000c112e <_ZN9USBSerial9availableEv>:
{
   c112e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1130:	7c00      	ldrb	r0, [r0, #16]
   c1132:	f7fc f8ef 	bl	bd314 <HAL_USB_USART_Available_Data>
}
   c1136:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c113a:	bd08      	pop	{r3, pc}

000c113c <_ZN9USBSerial5writeEh>:
{
   c113c:	b513      	push	{r0, r1, r4, lr}
   c113e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1140:	7c00      	ldrb	r0, [r0, #16]
{
   c1142:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1144:	f7fc f8ee 	bl	bd324 <HAL_USB_USART_Available_Data_For_Write>
   c1148:	2800      	cmp	r0, #0
   c114a:	9901      	ldr	r1, [sp, #4]
   c114c:	dc01      	bgt.n	c1152 <_ZN9USBSerial5writeEh+0x16>
   c114e:	7c60      	ldrb	r0, [r4, #17]
   c1150:	b120      	cbz	r0, c115c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1152:	7c20      	ldrb	r0, [r4, #16]
   c1154:	f7fc f8f6 	bl	bd344 <HAL_USB_USART_Send_Data>
   c1158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c115c:	b002      	add	sp, #8
   c115e:	bd10      	pop	{r4, pc}

000c1160 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1160:	7c00      	ldrb	r0, [r0, #16]
   c1162:	f7fc b8f7 	b.w	bd354 <HAL_USB_USART_Flush_Data>

000c1166 <_ZN9USBSerialD0Ev>:
   c1166:	b510      	push	{r4, lr}
   c1168:	2114      	movs	r1, #20
   c116a:	4604      	mov	r4, r0
   c116c:	f7f2 ff99 	bl	b40a2 <_ZdlPvj>
   c1170:	4620      	mov	r0, r4
   c1172:	bd10      	pop	{r4, pc}

000c1174 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1174:	b510      	push	{r4, lr}
   c1176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c117a:	4604      	mov	r4, r0
   c117c:	4608      	mov	r0, r1
   c117e:	2100      	movs	r1, #0
   c1180:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1184:	4b04      	ldr	r3, [pc, #16]	; (c1198 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1186:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1188:	2301      	movs	r3, #1
  _serial = serial;
   c118a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c118c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c118e:	4611      	mov	r1, r2
   c1190:	f7fc f8a8 	bl	bd2e4 <HAL_USB_USART_Init>
}
   c1194:	4620      	mov	r0, r4
   c1196:	bd10      	pop	{r4, pc}
   c1198:	000c5bfc 	.word	0x000c5bfc

000c119c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c119c:	7c00      	ldrb	r0, [r0, #16]
   c119e:	2200      	movs	r2, #0
   c11a0:	f7fc b8a8 	b.w	bd2f4 <HAL_USB_USART_Begin>

000c11a4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c11a4:	7c00      	ldrb	r0, [r0, #16]
   c11a6:	f7fc b8ad 	b.w	bd304 <HAL_USB_USART_End>

000c11aa <_Z19acquireSerialBufferv>:
{
   c11aa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c11ac:	2214      	movs	r2, #20
{
   c11ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c11b0:	2100      	movs	r1, #0
   c11b2:	f001 f833 	bl	c221c <memset>
}
   c11b6:	4620      	mov	r0, r4
   c11b8:	bd10      	pop	{r4, pc}
	...

000c11bc <_Z16_fetch_usbserialv>:
{
   c11bc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c11be:	4c0f      	ldr	r4, [pc, #60]	; (c11fc <_Z16_fetch_usbserialv+0x40>)
{
   c11c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c11c2:	a803      	add	r0, sp, #12
   c11c4:	f7ff fff1 	bl	c11aa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c11c8:	7821      	ldrb	r1, [r4, #0]
   c11ca:	f3bf 8f5b 	dmb	ish
   c11ce:	f011 0101 	ands.w	r1, r1, #1
   c11d2:	d10f      	bne.n	c11f4 <_Z16_fetch_usbserialv+0x38>
   c11d4:	4620      	mov	r0, r4
   c11d6:	9101      	str	r1, [sp, #4]
   c11d8:	f7f2 ff72 	bl	b40c0 <__cxa_guard_acquire>
   c11dc:	9901      	ldr	r1, [sp, #4]
   c11de:	b148      	cbz	r0, c11f4 <_Z16_fetch_usbserialv+0x38>
   c11e0:	aa03      	add	r2, sp, #12
   c11e2:	4807      	ldr	r0, [pc, #28]	; (c1200 <_Z16_fetch_usbserialv+0x44>)
   c11e4:	f7ff ffc6 	bl	c1174 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c11e8:	4620      	mov	r0, r4
   c11ea:	f7f2 ff6e 	bl	b40ca <__cxa_guard_release>
   c11ee:	4805      	ldr	r0, [pc, #20]	; (c1204 <_Z16_fetch_usbserialv+0x48>)
   c11f0:	f000 ffc6 	bl	c2180 <atexit>
	return _usbserial;
}
   c11f4:	4802      	ldr	r0, [pc, #8]	; (c1200 <_Z16_fetch_usbserialv+0x44>)
   c11f6:	b008      	add	sp, #32
   c11f8:	bd10      	pop	{r4, pc}
   c11fa:	bf00      	nop
   c11fc:	2003e708 	.word	0x2003e708
   c1200:	2003e70c 	.word	0x2003e70c
   c1204:	000c10fd 	.word	0x000c10fd

000c1208 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c1208:	4b01      	ldr	r3, [pc, #4]	; (c1210 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c120a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c120c:	4770      	bx	lr
   c120e:	bf00      	nop
   c1210:	2003dbc8 	.word	0x2003dbc8

000c1214 <serialEventRun>:
{
   c1214:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c1216:	4b0b      	ldr	r3, [pc, #44]	; (c1244 <serialEventRun+0x30>)
   c1218:	b143      	cbz	r3, c122c <serialEventRun+0x18>
   c121a:	f7ff ffcf 	bl	c11bc <_Z16_fetch_usbserialv>
   c121e:	6803      	ldr	r3, [r0, #0]
   c1220:	691b      	ldr	r3, [r3, #16]
   c1222:	4798      	blx	r3
   c1224:	2800      	cmp	r0, #0
   c1226:	dd01      	ble.n	c122c <serialEventRun+0x18>
        serialEvent();
   c1228:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c122c:	4b06      	ldr	r3, [pc, #24]	; (c1248 <serialEventRun+0x34>)
   c122e:	b143      	cbz	r3, c1242 <serialEventRun+0x2e>
   c1230:	f000 f946 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   c1234:	6803      	ldr	r3, [r0, #0]
   c1236:	691b      	ldr	r3, [r3, #16]
   c1238:	4798      	blx	r3
   c123a:	2800      	cmp	r0, #0
   c123c:	dd01      	ble.n	c1242 <serialEventRun+0x2e>
        serialEvent1();
   c123e:	f3af 8000 	nop.w
}
   c1242:	bd08      	pop	{r3, pc}
	...

000c124c <_post_loop>:
{
   c124c:	b508      	push	{r3, lr}
	serialEventRun();
   c124e:	f7ff ffe1 	bl	c1214 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1252:	f7fb febf 	bl	bcfd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c1256:	4b01      	ldr	r3, [pc, #4]	; (c125c <_post_loop+0x10>)
   c1258:	6018      	str	r0, [r3, #0]
}
   c125a:	bd08      	pop	{r3, pc}
   c125c:	2003e728 	.word	0x2003e728

000c1260 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1260:	4805      	ldr	r0, [pc, #20]	; (c1278 <_Z33system_initialize_user_backup_ramv+0x18>)
   c1262:	4a06      	ldr	r2, [pc, #24]	; (c127c <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1264:	4906      	ldr	r1, [pc, #24]	; (c1280 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c1266:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1268:	1a12      	subs	r2, r2, r0
   c126a:	f000 ffaf 	bl	c21cc <memcpy>
    __backup_sram_signature = signature;
   c126e:	4b05      	ldr	r3, [pc, #20]	; (c1284 <_Z33system_initialize_user_backup_ramv+0x24>)
   c1270:	4a05      	ldr	r2, [pc, #20]	; (c1288 <_Z33system_initialize_user_backup_ramv+0x28>)
   c1272:	601a      	str	r2, [r3, #0]
}
   c1274:	bd08      	pop	{r3, pc}
   c1276:	bf00      	nop
   c1278:	2003f400 	.word	0x2003f400
   c127c:	2003f404 	.word	0x2003f404
   c1280:	000c6104 	.word	0x000c6104
   c1284:	2003f400 	.word	0x2003f400
   c1288:	9a271c1e 	.word	0x9a271c1e

000c128c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c128c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c128e:	2300      	movs	r3, #0
   c1290:	9300      	str	r3, [sp, #0]
   c1292:	461a      	mov	r2, r3
   c1294:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1298:	f7fc f8d0 	bl	bd43c <system_ctrl_set_result>
}
   c129c:	b003      	add	sp, #12
   c129e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c12a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c12a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c12a6:	8843      	ldrh	r3, [r0, #2]
   c12a8:	2b0a      	cmp	r3, #10
   c12aa:	d008      	beq.n	c12be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c12ac:	2b50      	cmp	r3, #80	; 0x50
   c12ae:	d10b      	bne.n	c12c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c12b0:	4b09      	ldr	r3, [pc, #36]	; (c12d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c12b2:	681b      	ldr	r3, [r3, #0]
   c12b4:	b14b      	cbz	r3, c12ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c12b6:	b003      	add	sp, #12
   c12b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c12bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c12be:	f7ff ffe5 	bl	c128c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c12c2:	b003      	add	sp, #12
   c12c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c12c8:	2300      	movs	r3, #0
   c12ca:	9300      	str	r3, [sp, #0]
   c12cc:	461a      	mov	r2, r3
   c12ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c12d2:	f7fc f8b3 	bl	bd43c <system_ctrl_set_result>
}
   c12d6:	e7f4      	b.n	c12c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c12d8:	2003e724 	.word	0x2003e724

000c12dc <module_user_init_hook>:
{
   c12dc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c12de:	4812      	ldr	r0, [pc, #72]	; (c1328 <module_user_init_hook+0x4c>)
   c12e0:	2100      	movs	r1, #0
   c12e2:	f7fc f995 	bl	bd610 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c12e6:	4b11      	ldr	r3, [pc, #68]	; (c132c <module_user_init_hook+0x50>)
   c12e8:	681a      	ldr	r2, [r3, #0]
   c12ea:	4b11      	ldr	r3, [pc, #68]	; (c1330 <module_user_init_hook+0x54>)
   c12ec:	429a      	cmp	r2, r3
   c12ee:	4b11      	ldr	r3, [pc, #68]	; (c1334 <module_user_init_hook+0x58>)
   c12f0:	bf0c      	ite	eq
   c12f2:	2201      	moveq	r2, #1
   c12f4:	2200      	movne	r2, #0
   c12f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c12f8:	d001      	beq.n	c12fe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c12fa:	f7ff ffb1 	bl	c1260 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c12fe:	f7fb fe51 	bl	bcfa4 <HAL_RNG_GetRandomNumber>
   c1302:	4604      	mov	r4, r0
    srand(seed);
   c1304:	f000 ff92 	bl	c222c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c1308:	4b0b      	ldr	r3, [pc, #44]	; (c1338 <module_user_init_hook+0x5c>)
   c130a:	b113      	cbz	r3, c1312 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c130c:	4620      	mov	r0, r4
   c130e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1312:	2100      	movs	r1, #0
   c1314:	4808      	ldr	r0, [pc, #32]	; (c1338 <module_user_init_hook+0x5c>)
   c1316:	f7fc f8c3 	bl	bd4a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c131a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c131e:	4807      	ldr	r0, [pc, #28]	; (c133c <module_user_init_hook+0x60>)
   c1320:	2100      	movs	r1, #0
   c1322:	f7fc b881 	b.w	bd428 <system_ctrl_set_app_request_handler>
   c1326:	bf00      	nop
   c1328:	000c1209 	.word	0x000c1209
   c132c:	2003f400 	.word	0x2003f400
   c1330:	9a271c1e 	.word	0x9a271c1e
   c1334:	2003e720 	.word	0x2003e720
   c1338:	00000000 	.word	0x00000000
   c133c:	000c12a5 	.word	0x000c12a5

000c1340 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1340:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1342:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1344:	d902      	bls.n	c134c <pinAvailable+0xc>
    return false;
   c1346:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1348:	b002      	add	sp, #8
   c134a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c134c:	f1a0 030b 	sub.w	r3, r0, #11
   c1350:	2b02      	cmp	r3, #2
   c1352:	d81a      	bhi.n	c138a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1354:	4c17      	ldr	r4, [pc, #92]	; (c13b4 <pinAvailable+0x74>)
   c1356:	7821      	ldrb	r1, [r4, #0]
   c1358:	f3bf 8f5b 	dmb	ish
   c135c:	f011 0101 	ands.w	r1, r1, #1
   c1360:	d10b      	bne.n	c137a <pinAvailable+0x3a>
   c1362:	4620      	mov	r0, r4
   c1364:	9101      	str	r1, [sp, #4]
   c1366:	f7f2 feab 	bl	b40c0 <__cxa_guard_acquire>
   c136a:	9901      	ldr	r1, [sp, #4]
   c136c:	b128      	cbz	r0, c137a <pinAvailable+0x3a>
   c136e:	4812      	ldr	r0, [pc, #72]	; (c13b8 <pinAvailable+0x78>)
   c1370:	f7ff fb5b 	bl	c0a2a <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1374:	4620      	mov	r0, r4
   c1376:	f7f2 fea8 	bl	b40ca <__cxa_guard_release>
   c137a:	4b0f      	ldr	r3, [pc, #60]	; (c13b8 <pinAvailable+0x78>)
   c137c:	7818      	ldrb	r0, [r3, #0]
   c137e:	f7fb ff21 	bl	bd1c4 <hal_spi_is_enabled>
   c1382:	2800      	cmp	r0, #0
   c1384:	d1df      	bne.n	c1346 <pinAvailable+0x6>
  return true; // 'pin' is available
   c1386:	2001      	movs	r0, #1
   c1388:	e7de      	b.n	c1348 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c138a:	2801      	cmp	r0, #1
   c138c:	d809      	bhi.n	c13a2 <pinAvailable+0x62>
   c138e:	f000 f857 	bl	c1440 <_Z19__fetch_global_Wirev>
   c1392:	2100      	movs	r1, #0
   c1394:	7c00      	ldrb	r0, [r0, #16]
   c1396:	f7fb fead 	bl	bd0f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c139a:	f080 0001 	eor.w	r0, r0, #1
   c139e:	b2c0      	uxtb	r0, r0
   c13a0:	e7d2      	b.n	c1348 <pinAvailable+0x8>
   c13a2:	3809      	subs	r0, #9
   c13a4:	2801      	cmp	r0, #1
   c13a6:	d8ee      	bhi.n	c1386 <pinAvailable+0x46>
   c13a8:	f000 f88a 	bl	c14c0 <_Z22__fetch_global_Serial1v>
   c13ac:	7c00      	ldrb	r0, [r0, #16]
   c13ae:	f7fb ff79 	bl	bd2a4 <hal_usart_is_enabled>
   c13b2:	e7f2      	b.n	c139a <pinAvailable+0x5a>
   c13b4:	2003dda0 	.word	0x2003dda0
   c13b8:	2003dda4 	.word	0x2003dda4

000c13bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c13bc:	2825      	cmp	r0, #37	; 0x25
{
   c13be:	b538      	push	{r3, r4, r5, lr}
   c13c0:	4604      	mov	r4, r0
   c13c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c13c4:	d80a      	bhi.n	c13dc <pinMode+0x20>
   c13c6:	29ff      	cmp	r1, #255	; 0xff
   c13c8:	d008      	beq.n	c13dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c13ca:	f7ff ffb9 	bl	c1340 <pinAvailable>
   c13ce:	b128      	cbz	r0, c13dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c13d0:	4629      	mov	r1, r5
   c13d2:	4620      	mov	r0, r4
}
   c13d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c13d8:	f7fb be1c 	b.w	bd014 <HAL_Pin_Mode>
}
   c13dc:	bd38      	pop	{r3, r4, r5, pc}

000c13de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c13de:	b538      	push	{r3, r4, r5, lr}
   c13e0:	4604      	mov	r4, r0
   c13e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c13e4:	f7fb fe1e 	bl	bd024 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c13e8:	28ff      	cmp	r0, #255	; 0xff
   c13ea:	d010      	beq.n	c140e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c13ec:	2806      	cmp	r0, #6
   c13ee:	d804      	bhi.n	c13fa <digitalWrite+0x1c>
   c13f0:	234d      	movs	r3, #77	; 0x4d
   c13f2:	fa23 f000 	lsr.w	r0, r3, r0
   c13f6:	07c3      	lsls	r3, r0, #31
   c13f8:	d409      	bmi.n	c140e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c13fa:	4620      	mov	r0, r4
   c13fc:	f7ff ffa0 	bl	c1340 <pinAvailable>
   c1400:	b128      	cbz	r0, c140e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1402:	4629      	mov	r1, r5
   c1404:	4620      	mov	r0, r4
}
   c1406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c140a:	f7fb be13 	b.w	bd034 <HAL_GPIO_Write>
}
   c140e:	bd38      	pop	{r3, r4, r5, pc}

000c1410 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1410:	4770      	bx	lr
	...

000c1414 <_Z17acquireWireBufferv>:
{
   c1414:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1416:	2520      	movs	r5, #32
   c1418:	2314      	movs	r3, #20
{
   c141a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c141c:	6003      	str	r3, [r0, #0]
   c141e:	6085      	str	r5, [r0, #8]
   c1420:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1422:	4906      	ldr	r1, [pc, #24]	; (c143c <_Z17acquireWireBufferv+0x28>)
   c1424:	4628      	mov	r0, r5
   c1426:	f000 f871 	bl	c150c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c142a:	4904      	ldr	r1, [pc, #16]	; (c143c <_Z17acquireWireBufferv+0x28>)
	};
   c142c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c142e:	4628      	mov	r0, r5
   c1430:	f000 f86c 	bl	c150c <_ZnajRKSt9nothrow_t>
	};
   c1434:	60e0      	str	r0, [r4, #12]
}
   c1436:	4620      	mov	r0, r4
   c1438:	bd38      	pop	{r3, r4, r5, pc}
   c143a:	bf00      	nop
   c143c:	000c5c24 	.word	0x000c5c24

000c1440 <_Z19__fetch_global_Wirev>:
{
   c1440:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1442:	4d0e      	ldr	r5, [pc, #56]	; (c147c <_Z19__fetch_global_Wirev+0x3c>)
   c1444:	7829      	ldrb	r1, [r5, #0]
   c1446:	f3bf 8f5b 	dmb	ish
   c144a:	f011 0401 	ands.w	r4, r1, #1
{
   c144e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1450:	d111      	bne.n	c1476 <_Z19__fetch_global_Wirev+0x36>
   c1452:	4628      	mov	r0, r5
   c1454:	f7f2 fe34 	bl	b40c0 <__cxa_guard_acquire>
   c1458:	b168      	cbz	r0, c1476 <_Z19__fetch_global_Wirev+0x36>
   c145a:	a801      	add	r0, sp, #4
   c145c:	f7ff ffda 	bl	c1414 <_Z17acquireWireBufferv>
   c1460:	aa01      	add	r2, sp, #4
   c1462:	4621      	mov	r1, r4
   c1464:	4806      	ldr	r0, [pc, #24]	; (c1480 <_Z19__fetch_global_Wirev+0x40>)
   c1466:	f7fd fe03 	bl	bf070 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c146a:	4628      	mov	r0, r5
   c146c:	f7f2 fe2d 	bl	b40ca <__cxa_guard_release>
   c1470:	4804      	ldr	r0, [pc, #16]	; (c1484 <_Z19__fetch_global_Wirev+0x44>)
   c1472:	f000 fe85 	bl	c2180 <atexit>
	return wire;
}
   c1476:	4802      	ldr	r0, [pc, #8]	; (c1480 <_Z19__fetch_global_Wirev+0x40>)
   c1478:	b007      	add	sp, #28
   c147a:	bd30      	pop	{r4, r5, pc}
   c147c:	2003e72c 	.word	0x2003e72c
   c1480:	2003e730 	.word	0x2003e730
   c1484:	000c1411 	.word	0x000c1411

000c1488 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1488:	4770      	bx	lr
	...

000c148c <_Z20acquireSerial1Bufferv>:
{
   c148c:	b538      	push	{r3, r4, r5, lr}
   c148e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c1490:	2514      	movs	r5, #20
   c1492:	462a      	mov	r2, r5
   c1494:	2100      	movs	r1, #0
   c1496:	f000 fec1 	bl	c221c <memset>
   c149a:	8025      	strh	r5, [r4, #0]
   c149c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c149e:	4907      	ldr	r1, [pc, #28]	; (c14bc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c14a0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14a2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c14a4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14a6:	f000 f831 	bl	c150c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14aa:	4904      	ldr	r1, [pc, #16]	; (c14bc <_Z20acquireSerial1Bufferv+0x30>)
    };
   c14ac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14ae:	4628      	mov	r0, r5
   c14b0:	f000 f82c 	bl	c150c <_ZnajRKSt9nothrow_t>
    };
   c14b4:	60e0      	str	r0, [r4, #12]
}
   c14b6:	4620      	mov	r0, r4
   c14b8:	bd38      	pop	{r3, r4, r5, pc}
   c14ba:	bf00      	nop
   c14bc:	000c5c24 	.word	0x000c5c24

000c14c0 <_Z22__fetch_global_Serial1v>:
{
   c14c0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c14c2:	4d0e      	ldr	r5, [pc, #56]	; (c14fc <_Z22__fetch_global_Serial1v+0x3c>)
   c14c4:	7829      	ldrb	r1, [r5, #0]
   c14c6:	f3bf 8f5b 	dmb	ish
   c14ca:	f011 0401 	ands.w	r4, r1, #1
{
   c14ce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c14d0:	d111      	bne.n	c14f6 <_Z22__fetch_global_Serial1v+0x36>
   c14d2:	4628      	mov	r0, r5
   c14d4:	f7f2 fdf4 	bl	b40c0 <__cxa_guard_acquire>
   c14d8:	b168      	cbz	r0, c14f6 <_Z22__fetch_global_Serial1v+0x36>
   c14da:	a801      	add	r0, sp, #4
   c14dc:	f7ff ffd6 	bl	c148c <_Z20acquireSerial1Bufferv>
   c14e0:	aa01      	add	r2, sp, #4
   c14e2:	4621      	mov	r1, r4
   c14e4:	4806      	ldr	r0, [pc, #24]	; (c1500 <_Z22__fetch_global_Serial1v+0x40>)
   c14e6:	f7ff fde9 	bl	c10bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c14ea:	4628      	mov	r0, r5
   c14ec:	f7f2 fded 	bl	b40ca <__cxa_guard_release>
   c14f0:	4804      	ldr	r0, [pc, #16]	; (c1504 <_Z22__fetch_global_Serial1v+0x44>)
   c14f2:	f000 fe45 	bl	c2180 <atexit>
    return serial1;
}
   c14f6:	4802      	ldr	r0, [pc, #8]	; (c1500 <_Z22__fetch_global_Serial1v+0x40>)
   c14f8:	b007      	add	sp, #28
   c14fa:	bd30      	pop	{r4, r5, pc}
   c14fc:	2003e744 	.word	0x2003e744
   c1500:	2003e748 	.word	0x2003e748
   c1504:	000c1489 	.word	0x000c1489

000c1508 <_ZnwjRKSt9nothrow_t>:
   c1508:	f7f2 bdc5 	b.w	b4096 <_Znwj>

000c150c <_ZnajRKSt9nothrow_t>:
   c150c:	f7f2 bdc5 	b.w	b409a <_Znaj>

000c1510 <_ZSt25__throw_bad_function_callv>:
   c1510:	b508      	push	{r3, lr}
   c1512:	f7fc f85d 	bl	bd5d0 <abort>
	...

000c1518 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1518:	4901      	ldr	r1, [pc, #4]	; (c1520 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c151a:	f000 b8f9 	b.w	c1710 <_ZNKSt9type_infoeqERKS_>
   c151e:	bf00      	nop
   c1520:	000c5c40 	.word	0x000c5c40

000c1524 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1526:	2400      	movs	r4, #0
   c1528:	2310      	movs	r3, #16
   c152a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c152e:	6803      	ldr	r3, [r0, #0]
   c1530:	4615      	mov	r5, r2
   c1532:	699e      	ldr	r6, [r3, #24]
   c1534:	6812      	ldr	r2, [r2, #0]
   c1536:	466b      	mov	r3, sp
   c1538:	e9cd 4400 	strd	r4, r4, [sp]
   c153c:	47b0      	blx	r6
   c153e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c1542:	f003 0306 	and.w	r3, r3, #6
   c1546:	2b06      	cmp	r3, #6
   c1548:	bf03      	ittte	eq
   c154a:	9b00      	ldreq	r3, [sp, #0]
   c154c:	602b      	streq	r3, [r5, #0]
   c154e:	2001      	moveq	r0, #1
   c1550:	4620      	movne	r0, r4
   c1552:	b004      	add	sp, #16
   c1554:	bd70      	pop	{r4, r5, r6, pc}

000c1556 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c1556:	9800      	ldr	r0, [sp, #0]
   c1558:	4290      	cmp	r0, r2
   c155a:	bf14      	ite	ne
   c155c:	2001      	movne	r0, #1
   c155e:	2006      	moveq	r0, #6
   c1560:	4770      	bx	lr
	...

000c1564 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c1564:	b510      	push	{r4, lr}
   c1566:	4b03      	ldr	r3, [pc, #12]	; (c1574 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c1568:	6003      	str	r3, [r0, #0]
   c156a:	4604      	mov	r4, r0
   c156c:	f000 f8cd 	bl	c170a <_ZNSt9type_infoD1Ev>
   c1570:	4620      	mov	r0, r4
   c1572:	bd10      	pop	{r4, pc}
   c1574:	000c5c80 	.word	0x000c5c80

000c1578 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c1578:	b510      	push	{r4, lr}
   c157a:	4604      	mov	r4, r0
   c157c:	f7ff fff2 	bl	c1564 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1580:	4620      	mov	r0, r4
   c1582:	2108      	movs	r1, #8
   c1584:	f7f2 fd8d 	bl	b40a2 <_ZdlPvj>
   c1588:	4620      	mov	r0, r4
   c158a:	bd10      	pop	{r4, pc}

000c158c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1590:	461f      	mov	r7, r3
   c1592:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c1596:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c159a:	4598      	cmp	r8, r3
   c159c:	4606      	mov	r6, r0
   c159e:	4615      	mov	r5, r2
   c15a0:	d107      	bne.n	c15b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c15a2:	9907      	ldr	r1, [sp, #28]
   c15a4:	f000 f8b4 	bl	c1710 <_ZNKSt9type_infoeqERKS_>
   c15a8:	b118      	cbz	r0, c15b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c15aa:	7165      	strb	r5, [r4, #5]
   c15ac:	2000      	movs	r0, #0
   c15ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c15b2:	4639      	mov	r1, r7
   c15b4:	4630      	mov	r0, r6
   c15b6:	f000 f8ab 	bl	c1710 <_ZNKSt9type_infoeqERKS_>
   c15ba:	2800      	cmp	r0, #0
   c15bc:	d0f6      	beq.n	c15ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c15be:	2301      	movs	r3, #1
   c15c0:	f8c4 8000 	str.w	r8, [r4]
   c15c4:	7125      	strb	r5, [r4, #4]
   c15c6:	71a3      	strb	r3, [r4, #6]
   c15c8:	e7f0      	b.n	c15ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c15ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c15ca:	b538      	push	{r3, r4, r5, lr}
   c15cc:	4615      	mov	r5, r2
   c15ce:	461c      	mov	r4, r3
   c15d0:	f000 f89e 	bl	c1710 <_ZNKSt9type_infoeqERKS_>
   c15d4:	b120      	cbz	r0, c15e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c15d6:	2308      	movs	r3, #8
   c15d8:	60e3      	str	r3, [r4, #12]
   c15da:	2306      	movs	r3, #6
   c15dc:	6025      	str	r5, [r4, #0]
   c15de:	7123      	strb	r3, [r4, #4]
   c15e0:	bd38      	pop	{r3, r4, r5, pc}

000c15e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c15e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c15e4:	4605      	mov	r5, r0
   c15e6:	460c      	mov	r4, r1
   c15e8:	9201      	str	r2, [sp, #4]
   c15ea:	461e      	mov	r6, r3
   c15ec:	f000 f890 	bl	c1710 <_ZNKSt9type_infoeqERKS_>
   c15f0:	b950      	cbnz	r0, c1608 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c15f2:	2e03      	cmp	r6, #3
   c15f4:	d808      	bhi.n	c1608 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c15f6:	6823      	ldr	r3, [r4, #0]
   c15f8:	9a01      	ldr	r2, [sp, #4]
   c15fa:	695b      	ldr	r3, [r3, #20]
   c15fc:	4629      	mov	r1, r5
   c15fe:	4620      	mov	r0, r4
   c1600:	b002      	add	sp, #8
   c1602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1606:	4718      	bx	r3
   c1608:	b002      	add	sp, #8
   c160a:	bd70      	pop	{r4, r5, r6, pc}

000c160c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c160c:	b510      	push	{r4, lr}
   c160e:	4b03      	ldr	r3, [pc, #12]	; (c161c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1610:	6003      	str	r3, [r0, #0]
   c1612:	4604      	mov	r4, r0
   c1614:	f7ff ffa6 	bl	c1564 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1618:	4620      	mov	r0, r4
   c161a:	bd10      	pop	{r4, pc}
   c161c:	000c5ce0 	.word	0x000c5ce0

000c1620 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c1620:	b510      	push	{r4, lr}
   c1622:	4604      	mov	r4, r0
   c1624:	f7ff fff2 	bl	c160c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c1628:	4620      	mov	r0, r4
   c162a:	210c      	movs	r1, #12
   c162c:	f7f2 fd39 	bl	b40a2 <_ZdlPvj>
   c1630:	4620      	mov	r0, r4
   c1632:	bd10      	pop	{r4, pc}

000c1634 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c1634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c1636:	9f08      	ldr	r7, [sp, #32]
   c1638:	4297      	cmp	r7, r2
   c163a:	4605      	mov	r5, r0
   c163c:	460e      	mov	r6, r1
   c163e:	4614      	mov	r4, r2
   c1640:	d00a      	beq.n	c1658 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c1642:	68a8      	ldr	r0, [r5, #8]
   c1644:	6802      	ldr	r2, [r0, #0]
   c1646:	9708      	str	r7, [sp, #32]
   c1648:	6a15      	ldr	r5, [r2, #32]
   c164a:	4631      	mov	r1, r6
   c164c:	4622      	mov	r2, r4
   c164e:	46ac      	mov	ip, r5
   c1650:	b003      	add	sp, #12
   c1652:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1656:	4760      	bx	ip
   c1658:	4619      	mov	r1, r3
   c165a:	9301      	str	r3, [sp, #4]
   c165c:	f000 f858 	bl	c1710 <_ZNKSt9type_infoeqERKS_>
   c1660:	9b01      	ldr	r3, [sp, #4]
   c1662:	2800      	cmp	r0, #0
   c1664:	d0ed      	beq.n	c1642 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c1666:	2006      	movs	r0, #6
   c1668:	b003      	add	sp, #12
   c166a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c166c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c166c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1670:	460d      	mov	r5, r1
   c1672:	4619      	mov	r1, r3
   c1674:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c1678:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c167c:	4681      	mov	r9, r0
   c167e:	4617      	mov	r7, r2
   c1680:	4698      	mov	r8, r3
   c1682:	f000 f845 	bl	c1710 <_ZNKSt9type_infoeqERKS_>
   c1686:	b190      	cbz	r0, c16ae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c1688:	2d00      	cmp	r5, #0
   c168a:	6034      	str	r4, [r6, #0]
   c168c:	7137      	strb	r7, [r6, #4]
   c168e:	db09      	blt.n	c16a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c1690:	1961      	adds	r1, r4, r5
   c1692:	458a      	cmp	sl, r1
   c1694:	bf0c      	ite	eq
   c1696:	2106      	moveq	r1, #6
   c1698:	2101      	movne	r1, #1
   c169a:	71b1      	strb	r1, [r6, #6]
   c169c:	2000      	movs	r0, #0
   c169e:	b001      	add	sp, #4
   c16a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c16a4:	3502      	adds	r5, #2
   c16a6:	d1f9      	bne.n	c169c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c16a8:	2301      	movs	r3, #1
   c16aa:	71b3      	strb	r3, [r6, #6]
   c16ac:	e7f6      	b.n	c169c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c16ae:	4554      	cmp	r4, sl
   c16b0:	d106      	bne.n	c16c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c16b2:	4659      	mov	r1, fp
   c16b4:	4648      	mov	r0, r9
   c16b6:	f000 f82b 	bl	c1710 <_ZNKSt9type_infoeqERKS_>
   c16ba:	b108      	cbz	r0, c16c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c16bc:	7177      	strb	r7, [r6, #5]
   c16be:	e7ed      	b.n	c169c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c16c0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c16c4:	6803      	ldr	r3, [r0, #0]
   c16c6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c16ca:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c16ce:	69dc      	ldr	r4, [r3, #28]
   c16d0:	463a      	mov	r2, r7
   c16d2:	4643      	mov	r3, r8
   c16d4:	4629      	mov	r1, r5
   c16d6:	46a4      	mov	ip, r4
   c16d8:	b001      	add	sp, #4
   c16da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c16de:	4760      	bx	ip

000c16e0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c16e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c16e4:	4607      	mov	r7, r0
   c16e6:	460c      	mov	r4, r1
   c16e8:	4615      	mov	r5, r2
   c16ea:	461e      	mov	r6, r3
   c16ec:	f7ff ff6d 	bl	c15ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c16f0:	b948      	cbnz	r0, c1706 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c16f2:	68b8      	ldr	r0, [r7, #8]
   c16f4:	6803      	ldr	r3, [r0, #0]
   c16f6:	699f      	ldr	r7, [r3, #24]
   c16f8:	462a      	mov	r2, r5
   c16fa:	4633      	mov	r3, r6
   c16fc:	4621      	mov	r1, r4
   c16fe:	46bc      	mov	ip, r7
   c1700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1704:	4760      	bx	ip
   c1706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c170a <_ZNSt9type_infoD1Ev>:
   c170a:	4770      	bx	lr

000c170c <_ZNKSt9type_info14__is_pointer_pEv>:
   c170c:	2000      	movs	r0, #0
   c170e:	4770      	bx	lr

000c1710 <_ZNKSt9type_infoeqERKS_>:
   c1710:	4281      	cmp	r1, r0
   c1712:	b508      	push	{r3, lr}
   c1714:	d00e      	beq.n	c1734 <_ZNKSt9type_infoeqERKS_+0x24>
   c1716:	6840      	ldr	r0, [r0, #4]
   c1718:	7803      	ldrb	r3, [r0, #0]
   c171a:	2b2a      	cmp	r3, #42	; 0x2a
   c171c:	d00c      	beq.n	c1738 <_ZNKSt9type_infoeqERKS_+0x28>
   c171e:	6849      	ldr	r1, [r1, #4]
   c1720:	780b      	ldrb	r3, [r1, #0]
   c1722:	2b2a      	cmp	r3, #42	; 0x2a
   c1724:	bf08      	it	eq
   c1726:	3101      	addeq	r1, #1
   c1728:	f000 fdd4 	bl	c22d4 <strcmp>
   c172c:	fab0 f080 	clz	r0, r0
   c1730:	0940      	lsrs	r0, r0, #5
   c1732:	bd08      	pop	{r3, pc}
   c1734:	2001      	movs	r0, #1
   c1736:	e7fc      	b.n	c1732 <_ZNKSt9type_infoeqERKS_+0x22>
   c1738:	2000      	movs	r0, #0
   c173a:	e7fa      	b.n	c1732 <_ZNKSt9type_infoeqERKS_+0x22>

000c173c <__aeabi_drsub>:
   c173c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c1740:	e002      	b.n	c1748 <__adddf3>
   c1742:	bf00      	nop

000c1744 <__aeabi_dsub>:
   c1744:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c1748 <__adddf3>:
   c1748:	b530      	push	{r4, r5, lr}
   c174a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c174e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c1752:	ea94 0f05 	teq	r4, r5
   c1756:	bf08      	it	eq
   c1758:	ea90 0f02 	teqeq	r0, r2
   c175c:	bf1f      	itttt	ne
   c175e:	ea54 0c00 	orrsne.w	ip, r4, r0
   c1762:	ea55 0c02 	orrsne.w	ip, r5, r2
   c1766:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c176a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c176e:	f000 80e2 	beq.w	c1936 <__adddf3+0x1ee>
   c1772:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c1776:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c177a:	bfb8      	it	lt
   c177c:	426d      	neglt	r5, r5
   c177e:	dd0c      	ble.n	c179a <__adddf3+0x52>
   c1780:	442c      	add	r4, r5
   c1782:	ea80 0202 	eor.w	r2, r0, r2
   c1786:	ea81 0303 	eor.w	r3, r1, r3
   c178a:	ea82 0000 	eor.w	r0, r2, r0
   c178e:	ea83 0101 	eor.w	r1, r3, r1
   c1792:	ea80 0202 	eor.w	r2, r0, r2
   c1796:	ea81 0303 	eor.w	r3, r1, r3
   c179a:	2d36      	cmp	r5, #54	; 0x36
   c179c:	bf88      	it	hi
   c179e:	bd30      	pophi	{r4, r5, pc}
   c17a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c17a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c17a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c17ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c17b0:	d002      	beq.n	c17b8 <__adddf3+0x70>
   c17b2:	4240      	negs	r0, r0
   c17b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c17b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c17bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c17c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c17c4:	d002      	beq.n	c17cc <__adddf3+0x84>
   c17c6:	4252      	negs	r2, r2
   c17c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c17cc:	ea94 0f05 	teq	r4, r5
   c17d0:	f000 80a7 	beq.w	c1922 <__adddf3+0x1da>
   c17d4:	f1a4 0401 	sub.w	r4, r4, #1
   c17d8:	f1d5 0e20 	rsbs	lr, r5, #32
   c17dc:	db0d      	blt.n	c17fa <__adddf3+0xb2>
   c17de:	fa02 fc0e 	lsl.w	ip, r2, lr
   c17e2:	fa22 f205 	lsr.w	r2, r2, r5
   c17e6:	1880      	adds	r0, r0, r2
   c17e8:	f141 0100 	adc.w	r1, r1, #0
   c17ec:	fa03 f20e 	lsl.w	r2, r3, lr
   c17f0:	1880      	adds	r0, r0, r2
   c17f2:	fa43 f305 	asr.w	r3, r3, r5
   c17f6:	4159      	adcs	r1, r3
   c17f8:	e00e      	b.n	c1818 <__adddf3+0xd0>
   c17fa:	f1a5 0520 	sub.w	r5, r5, #32
   c17fe:	f10e 0e20 	add.w	lr, lr, #32
   c1802:	2a01      	cmp	r2, #1
   c1804:	fa03 fc0e 	lsl.w	ip, r3, lr
   c1808:	bf28      	it	cs
   c180a:	f04c 0c02 	orrcs.w	ip, ip, #2
   c180e:	fa43 f305 	asr.w	r3, r3, r5
   c1812:	18c0      	adds	r0, r0, r3
   c1814:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c1818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c181c:	d507      	bpl.n	c182e <__adddf3+0xe6>
   c181e:	f04f 0e00 	mov.w	lr, #0
   c1822:	f1dc 0c00 	rsbs	ip, ip, #0
   c1826:	eb7e 0000 	sbcs.w	r0, lr, r0
   c182a:	eb6e 0101 	sbc.w	r1, lr, r1
   c182e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c1832:	d31b      	bcc.n	c186c <__adddf3+0x124>
   c1834:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c1838:	d30c      	bcc.n	c1854 <__adddf3+0x10c>
   c183a:	0849      	lsrs	r1, r1, #1
   c183c:	ea5f 0030 	movs.w	r0, r0, rrx
   c1840:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c1844:	f104 0401 	add.w	r4, r4, #1
   c1848:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c184c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c1850:	f080 809a 	bcs.w	c1988 <__adddf3+0x240>
   c1854:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c1858:	bf08      	it	eq
   c185a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c185e:	f150 0000 	adcs.w	r0, r0, #0
   c1862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1866:	ea41 0105 	orr.w	r1, r1, r5
   c186a:	bd30      	pop	{r4, r5, pc}
   c186c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c1870:	4140      	adcs	r0, r0
   c1872:	eb41 0101 	adc.w	r1, r1, r1
   c1876:	3c01      	subs	r4, #1
   c1878:	bf28      	it	cs
   c187a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c187e:	d2e9      	bcs.n	c1854 <__adddf3+0x10c>
   c1880:	f091 0f00 	teq	r1, #0
   c1884:	bf04      	itt	eq
   c1886:	4601      	moveq	r1, r0
   c1888:	2000      	moveq	r0, #0
   c188a:	fab1 f381 	clz	r3, r1
   c188e:	bf08      	it	eq
   c1890:	3320      	addeq	r3, #32
   c1892:	f1a3 030b 	sub.w	r3, r3, #11
   c1896:	f1b3 0220 	subs.w	r2, r3, #32
   c189a:	da0c      	bge.n	c18b6 <__adddf3+0x16e>
   c189c:	320c      	adds	r2, #12
   c189e:	dd08      	ble.n	c18b2 <__adddf3+0x16a>
   c18a0:	f102 0c14 	add.w	ip, r2, #20
   c18a4:	f1c2 020c 	rsb	r2, r2, #12
   c18a8:	fa01 f00c 	lsl.w	r0, r1, ip
   c18ac:	fa21 f102 	lsr.w	r1, r1, r2
   c18b0:	e00c      	b.n	c18cc <__adddf3+0x184>
   c18b2:	f102 0214 	add.w	r2, r2, #20
   c18b6:	bfd8      	it	le
   c18b8:	f1c2 0c20 	rsble	ip, r2, #32
   c18bc:	fa01 f102 	lsl.w	r1, r1, r2
   c18c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   c18c4:	bfdc      	itt	le
   c18c6:	ea41 010c 	orrle.w	r1, r1, ip
   c18ca:	4090      	lslle	r0, r2
   c18cc:	1ae4      	subs	r4, r4, r3
   c18ce:	bfa2      	ittt	ge
   c18d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c18d4:	4329      	orrge	r1, r5
   c18d6:	bd30      	popge	{r4, r5, pc}
   c18d8:	ea6f 0404 	mvn.w	r4, r4
   c18dc:	3c1f      	subs	r4, #31
   c18de:	da1c      	bge.n	c191a <__adddf3+0x1d2>
   c18e0:	340c      	adds	r4, #12
   c18e2:	dc0e      	bgt.n	c1902 <__adddf3+0x1ba>
   c18e4:	f104 0414 	add.w	r4, r4, #20
   c18e8:	f1c4 0220 	rsb	r2, r4, #32
   c18ec:	fa20 f004 	lsr.w	r0, r0, r4
   c18f0:	fa01 f302 	lsl.w	r3, r1, r2
   c18f4:	ea40 0003 	orr.w	r0, r0, r3
   c18f8:	fa21 f304 	lsr.w	r3, r1, r4
   c18fc:	ea45 0103 	orr.w	r1, r5, r3
   c1900:	bd30      	pop	{r4, r5, pc}
   c1902:	f1c4 040c 	rsb	r4, r4, #12
   c1906:	f1c4 0220 	rsb	r2, r4, #32
   c190a:	fa20 f002 	lsr.w	r0, r0, r2
   c190e:	fa01 f304 	lsl.w	r3, r1, r4
   c1912:	ea40 0003 	orr.w	r0, r0, r3
   c1916:	4629      	mov	r1, r5
   c1918:	bd30      	pop	{r4, r5, pc}
   c191a:	fa21 f004 	lsr.w	r0, r1, r4
   c191e:	4629      	mov	r1, r5
   c1920:	bd30      	pop	{r4, r5, pc}
   c1922:	f094 0f00 	teq	r4, #0
   c1926:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c192a:	bf06      	itte	eq
   c192c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c1930:	3401      	addeq	r4, #1
   c1932:	3d01      	subne	r5, #1
   c1934:	e74e      	b.n	c17d4 <__adddf3+0x8c>
   c1936:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c193a:	bf18      	it	ne
   c193c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c1940:	d029      	beq.n	c1996 <__adddf3+0x24e>
   c1942:	ea94 0f05 	teq	r4, r5
   c1946:	bf08      	it	eq
   c1948:	ea90 0f02 	teqeq	r0, r2
   c194c:	d005      	beq.n	c195a <__adddf3+0x212>
   c194e:	ea54 0c00 	orrs.w	ip, r4, r0
   c1952:	bf04      	itt	eq
   c1954:	4619      	moveq	r1, r3
   c1956:	4610      	moveq	r0, r2
   c1958:	bd30      	pop	{r4, r5, pc}
   c195a:	ea91 0f03 	teq	r1, r3
   c195e:	bf1e      	ittt	ne
   c1960:	2100      	movne	r1, #0
   c1962:	2000      	movne	r0, #0
   c1964:	bd30      	popne	{r4, r5, pc}
   c1966:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c196a:	d105      	bne.n	c1978 <__adddf3+0x230>
   c196c:	0040      	lsls	r0, r0, #1
   c196e:	4149      	adcs	r1, r1
   c1970:	bf28      	it	cs
   c1972:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c1976:	bd30      	pop	{r4, r5, pc}
   c1978:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c197c:	bf3c      	itt	cc
   c197e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c1982:	bd30      	popcc	{r4, r5, pc}
   c1984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1988:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c198c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1990:	f04f 0000 	mov.w	r0, #0
   c1994:	bd30      	pop	{r4, r5, pc}
   c1996:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c199a:	bf1a      	itte	ne
   c199c:	4619      	movne	r1, r3
   c199e:	4610      	movne	r0, r2
   c19a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c19a4:	bf1c      	itt	ne
   c19a6:	460b      	movne	r3, r1
   c19a8:	4602      	movne	r2, r0
   c19aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c19ae:	bf06      	itte	eq
   c19b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c19b4:	ea91 0f03 	teqeq	r1, r3
   c19b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c19bc:	bd30      	pop	{r4, r5, pc}
   c19be:	bf00      	nop

000c19c0 <__aeabi_ui2d>:
   c19c0:	f090 0f00 	teq	r0, #0
   c19c4:	bf04      	itt	eq
   c19c6:	2100      	moveq	r1, #0
   c19c8:	4770      	bxeq	lr
   c19ca:	b530      	push	{r4, r5, lr}
   c19cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c19d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c19d4:	f04f 0500 	mov.w	r5, #0
   c19d8:	f04f 0100 	mov.w	r1, #0
   c19dc:	e750      	b.n	c1880 <__adddf3+0x138>
   c19de:	bf00      	nop

000c19e0 <__aeabi_i2d>:
   c19e0:	f090 0f00 	teq	r0, #0
   c19e4:	bf04      	itt	eq
   c19e6:	2100      	moveq	r1, #0
   c19e8:	4770      	bxeq	lr
   c19ea:	b530      	push	{r4, r5, lr}
   c19ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c19f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c19f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c19f8:	bf48      	it	mi
   c19fa:	4240      	negmi	r0, r0
   c19fc:	f04f 0100 	mov.w	r1, #0
   c1a00:	e73e      	b.n	c1880 <__adddf3+0x138>
   c1a02:	bf00      	nop

000c1a04 <__aeabi_f2d>:
   c1a04:	0042      	lsls	r2, r0, #1
   c1a06:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c1a0a:	ea4f 0131 	mov.w	r1, r1, rrx
   c1a0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c1a12:	bf1f      	itttt	ne
   c1a14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c1a18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c1a1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c1a20:	4770      	bxne	lr
   c1a22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c1a26:	bf08      	it	eq
   c1a28:	4770      	bxeq	lr
   c1a2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c1a2e:	bf04      	itt	eq
   c1a30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c1a34:	4770      	bxeq	lr
   c1a36:	b530      	push	{r4, r5, lr}
   c1a38:	f44f 7460 	mov.w	r4, #896	; 0x380
   c1a3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c1a44:	e71c      	b.n	c1880 <__adddf3+0x138>
   c1a46:	bf00      	nop

000c1a48 <__aeabi_ul2d>:
   c1a48:	ea50 0201 	orrs.w	r2, r0, r1
   c1a4c:	bf08      	it	eq
   c1a4e:	4770      	bxeq	lr
   c1a50:	b530      	push	{r4, r5, lr}
   c1a52:	f04f 0500 	mov.w	r5, #0
   c1a56:	e00a      	b.n	c1a6e <__aeabi_l2d+0x16>

000c1a58 <__aeabi_l2d>:
   c1a58:	ea50 0201 	orrs.w	r2, r0, r1
   c1a5c:	bf08      	it	eq
   c1a5e:	4770      	bxeq	lr
   c1a60:	b530      	push	{r4, r5, lr}
   c1a62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c1a66:	d502      	bpl.n	c1a6e <__aeabi_l2d+0x16>
   c1a68:	4240      	negs	r0, r0
   c1a6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c1a6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1a72:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1a76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c1a7a:	f43f aed8 	beq.w	c182e <__adddf3+0xe6>
   c1a7e:	f04f 0203 	mov.w	r2, #3
   c1a82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1a86:	bf18      	it	ne
   c1a88:	3203      	addne	r2, #3
   c1a8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1a8e:	bf18      	it	ne
   c1a90:	3203      	addne	r2, #3
   c1a92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c1a96:	f1c2 0320 	rsb	r3, r2, #32
   c1a9a:	fa00 fc03 	lsl.w	ip, r0, r3
   c1a9e:	fa20 f002 	lsr.w	r0, r0, r2
   c1aa2:	fa01 fe03 	lsl.w	lr, r1, r3
   c1aa6:	ea40 000e 	orr.w	r0, r0, lr
   c1aaa:	fa21 f102 	lsr.w	r1, r1, r2
   c1aae:	4414      	add	r4, r2
   c1ab0:	e6bd      	b.n	c182e <__adddf3+0xe6>
   c1ab2:	bf00      	nop

000c1ab4 <__aeabi_dmul>:
   c1ab4:	b570      	push	{r4, r5, r6, lr}
   c1ab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c1aba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c1abe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c1ac2:	bf1d      	ittte	ne
   c1ac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c1ac8:	ea94 0f0c 	teqne	r4, ip
   c1acc:	ea95 0f0c 	teqne	r5, ip
   c1ad0:	f000 f8de 	bleq	c1c90 <__aeabi_dmul+0x1dc>
   c1ad4:	442c      	add	r4, r5
   c1ad6:	ea81 0603 	eor.w	r6, r1, r3
   c1ada:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c1ade:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c1ae2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c1ae6:	bf18      	it	ne
   c1ae8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c1aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1af4:	d038      	beq.n	c1b68 <__aeabi_dmul+0xb4>
   c1af6:	fba0 ce02 	umull	ip, lr, r0, r2
   c1afa:	f04f 0500 	mov.w	r5, #0
   c1afe:	fbe1 e502 	umlal	lr, r5, r1, r2
   c1b02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c1b06:	fbe0 e503 	umlal	lr, r5, r0, r3
   c1b0a:	f04f 0600 	mov.w	r6, #0
   c1b0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   c1b12:	f09c 0f00 	teq	ip, #0
   c1b16:	bf18      	it	ne
   c1b18:	f04e 0e01 	orrne.w	lr, lr, #1
   c1b1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c1b20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c1b24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c1b28:	d204      	bcs.n	c1b34 <__aeabi_dmul+0x80>
   c1b2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c1b2e:	416d      	adcs	r5, r5
   c1b30:	eb46 0606 	adc.w	r6, r6, r6
   c1b34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c1b38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c1b3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c1b40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c1b44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c1b48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c1b4c:	bf88      	it	hi
   c1b4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c1b52:	d81e      	bhi.n	c1b92 <__aeabi_dmul+0xde>
   c1b54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c1b58:	bf08      	it	eq
   c1b5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c1b5e:	f150 0000 	adcs.w	r0, r0, #0
   c1b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1b66:	bd70      	pop	{r4, r5, r6, pc}
   c1b68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c1b6c:	ea46 0101 	orr.w	r1, r6, r1
   c1b70:	ea40 0002 	orr.w	r0, r0, r2
   c1b74:	ea81 0103 	eor.w	r1, r1, r3
   c1b78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c1b7c:	bfc2      	ittt	gt
   c1b7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   c1b82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c1b86:	bd70      	popgt	{r4, r5, r6, pc}
   c1b88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1b8c:	f04f 0e00 	mov.w	lr, #0
   c1b90:	3c01      	subs	r4, #1
   c1b92:	f300 80ab 	bgt.w	c1cec <__aeabi_dmul+0x238>
   c1b96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c1b9a:	bfde      	ittt	le
   c1b9c:	2000      	movle	r0, #0
   c1b9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c1ba2:	bd70      	pople	{r4, r5, r6, pc}
   c1ba4:	f1c4 0400 	rsb	r4, r4, #0
   c1ba8:	3c20      	subs	r4, #32
   c1baa:	da35      	bge.n	c1c18 <__aeabi_dmul+0x164>
   c1bac:	340c      	adds	r4, #12
   c1bae:	dc1b      	bgt.n	c1be8 <__aeabi_dmul+0x134>
   c1bb0:	f104 0414 	add.w	r4, r4, #20
   c1bb4:	f1c4 0520 	rsb	r5, r4, #32
   c1bb8:	fa00 f305 	lsl.w	r3, r0, r5
   c1bbc:	fa20 f004 	lsr.w	r0, r0, r4
   c1bc0:	fa01 f205 	lsl.w	r2, r1, r5
   c1bc4:	ea40 0002 	orr.w	r0, r0, r2
   c1bc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c1bcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c1bd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c1bd4:	fa21 f604 	lsr.w	r6, r1, r4
   c1bd8:	eb42 0106 	adc.w	r1, r2, r6
   c1bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1be0:	bf08      	it	eq
   c1be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1be6:	bd70      	pop	{r4, r5, r6, pc}
   c1be8:	f1c4 040c 	rsb	r4, r4, #12
   c1bec:	f1c4 0520 	rsb	r5, r4, #32
   c1bf0:	fa00 f304 	lsl.w	r3, r0, r4
   c1bf4:	fa20 f005 	lsr.w	r0, r0, r5
   c1bf8:	fa01 f204 	lsl.w	r2, r1, r4
   c1bfc:	ea40 0002 	orr.w	r0, r0, r2
   c1c00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1c04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c1c08:	f141 0100 	adc.w	r1, r1, #0
   c1c0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1c10:	bf08      	it	eq
   c1c12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1c16:	bd70      	pop	{r4, r5, r6, pc}
   c1c18:	f1c4 0520 	rsb	r5, r4, #32
   c1c1c:	fa00 f205 	lsl.w	r2, r0, r5
   c1c20:	ea4e 0e02 	orr.w	lr, lr, r2
   c1c24:	fa20 f304 	lsr.w	r3, r0, r4
   c1c28:	fa01 f205 	lsl.w	r2, r1, r5
   c1c2c:	ea43 0302 	orr.w	r3, r3, r2
   c1c30:	fa21 f004 	lsr.w	r0, r1, r4
   c1c34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1c38:	fa21 f204 	lsr.w	r2, r1, r4
   c1c3c:	ea20 0002 	bic.w	r0, r0, r2
   c1c40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c1c44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c1c48:	bf08      	it	eq
   c1c4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c1c4e:	bd70      	pop	{r4, r5, r6, pc}
   c1c50:	f094 0f00 	teq	r4, #0
   c1c54:	d10f      	bne.n	c1c76 <__aeabi_dmul+0x1c2>
   c1c56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c1c5a:	0040      	lsls	r0, r0, #1
   c1c5c:	eb41 0101 	adc.w	r1, r1, r1
   c1c60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1c64:	bf08      	it	eq
   c1c66:	3c01      	subeq	r4, #1
   c1c68:	d0f7      	beq.n	c1c5a <__aeabi_dmul+0x1a6>
   c1c6a:	ea41 0106 	orr.w	r1, r1, r6
   c1c6e:	f095 0f00 	teq	r5, #0
   c1c72:	bf18      	it	ne
   c1c74:	4770      	bxne	lr
   c1c76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c1c7a:	0052      	lsls	r2, r2, #1
   c1c7c:	eb43 0303 	adc.w	r3, r3, r3
   c1c80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c1c84:	bf08      	it	eq
   c1c86:	3d01      	subeq	r5, #1
   c1c88:	d0f7      	beq.n	c1c7a <__aeabi_dmul+0x1c6>
   c1c8a:	ea43 0306 	orr.w	r3, r3, r6
   c1c8e:	4770      	bx	lr
   c1c90:	ea94 0f0c 	teq	r4, ip
   c1c94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c1c98:	bf18      	it	ne
   c1c9a:	ea95 0f0c 	teqne	r5, ip
   c1c9e:	d00c      	beq.n	c1cba <__aeabi_dmul+0x206>
   c1ca0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1ca4:	bf18      	it	ne
   c1ca6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1caa:	d1d1      	bne.n	c1c50 <__aeabi_dmul+0x19c>
   c1cac:	ea81 0103 	eor.w	r1, r1, r3
   c1cb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1cb4:	f04f 0000 	mov.w	r0, #0
   c1cb8:	bd70      	pop	{r4, r5, r6, pc}
   c1cba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1cbe:	bf06      	itte	eq
   c1cc0:	4610      	moveq	r0, r2
   c1cc2:	4619      	moveq	r1, r3
   c1cc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1cc8:	d019      	beq.n	c1cfe <__aeabi_dmul+0x24a>
   c1cca:	ea94 0f0c 	teq	r4, ip
   c1cce:	d102      	bne.n	c1cd6 <__aeabi_dmul+0x222>
   c1cd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c1cd4:	d113      	bne.n	c1cfe <__aeabi_dmul+0x24a>
   c1cd6:	ea95 0f0c 	teq	r5, ip
   c1cda:	d105      	bne.n	c1ce8 <__aeabi_dmul+0x234>
   c1cdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c1ce0:	bf1c      	itt	ne
   c1ce2:	4610      	movne	r0, r2
   c1ce4:	4619      	movne	r1, r3
   c1ce6:	d10a      	bne.n	c1cfe <__aeabi_dmul+0x24a>
   c1ce8:	ea81 0103 	eor.w	r1, r1, r3
   c1cec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c1cf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c1cf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1cf8:	f04f 0000 	mov.w	r0, #0
   c1cfc:	bd70      	pop	{r4, r5, r6, pc}
   c1cfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c1d02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c1d06:	bd70      	pop	{r4, r5, r6, pc}

000c1d08 <__aeabi_ddiv>:
   c1d08:	b570      	push	{r4, r5, r6, lr}
   c1d0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c1d0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c1d12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c1d16:	bf1d      	ittte	ne
   c1d18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c1d1c:	ea94 0f0c 	teqne	r4, ip
   c1d20:	ea95 0f0c 	teqne	r5, ip
   c1d24:	f000 f8a7 	bleq	c1e76 <__aeabi_ddiv+0x16e>
   c1d28:	eba4 0405 	sub.w	r4, r4, r5
   c1d2c:	ea81 0e03 	eor.w	lr, r1, r3
   c1d30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c1d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c1d38:	f000 8088 	beq.w	c1e4c <__aeabi_ddiv+0x144>
   c1d3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c1d40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c1d44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c1d48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c1d4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c1d50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c1d54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c1d58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c1d5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c1d60:	429d      	cmp	r5, r3
   c1d62:	bf08      	it	eq
   c1d64:	4296      	cmpeq	r6, r2
   c1d66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c1d6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c1d6e:	d202      	bcs.n	c1d76 <__aeabi_ddiv+0x6e>
   c1d70:	085b      	lsrs	r3, r3, #1
   c1d72:	ea4f 0232 	mov.w	r2, r2, rrx
   c1d76:	1ab6      	subs	r6, r6, r2
   c1d78:	eb65 0503 	sbc.w	r5, r5, r3
   c1d7c:	085b      	lsrs	r3, r3, #1
   c1d7e:	ea4f 0232 	mov.w	r2, r2, rrx
   c1d82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c1d86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c1d8a:	ebb6 0e02 	subs.w	lr, r6, r2
   c1d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1d92:	bf22      	ittt	cs
   c1d94:	1ab6      	subcs	r6, r6, r2
   c1d96:	4675      	movcs	r5, lr
   c1d98:	ea40 000c 	orrcs.w	r0, r0, ip
   c1d9c:	085b      	lsrs	r3, r3, #1
   c1d9e:	ea4f 0232 	mov.w	r2, r2, rrx
   c1da2:	ebb6 0e02 	subs.w	lr, r6, r2
   c1da6:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1daa:	bf22      	ittt	cs
   c1dac:	1ab6      	subcs	r6, r6, r2
   c1dae:	4675      	movcs	r5, lr
   c1db0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c1db4:	085b      	lsrs	r3, r3, #1
   c1db6:	ea4f 0232 	mov.w	r2, r2, rrx
   c1dba:	ebb6 0e02 	subs.w	lr, r6, r2
   c1dbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1dc2:	bf22      	ittt	cs
   c1dc4:	1ab6      	subcs	r6, r6, r2
   c1dc6:	4675      	movcs	r5, lr
   c1dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c1dcc:	085b      	lsrs	r3, r3, #1
   c1dce:	ea4f 0232 	mov.w	r2, r2, rrx
   c1dd2:	ebb6 0e02 	subs.w	lr, r6, r2
   c1dd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   c1dda:	bf22      	ittt	cs
   c1ddc:	1ab6      	subcs	r6, r6, r2
   c1dde:	4675      	movcs	r5, lr
   c1de0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c1de4:	ea55 0e06 	orrs.w	lr, r5, r6
   c1de8:	d018      	beq.n	c1e1c <__aeabi_ddiv+0x114>
   c1dea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c1dee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c1df2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c1df6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c1dfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c1dfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c1e02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c1e06:	d1c0      	bne.n	c1d8a <__aeabi_ddiv+0x82>
   c1e08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1e0c:	d10b      	bne.n	c1e26 <__aeabi_ddiv+0x11e>
   c1e0e:	ea41 0100 	orr.w	r1, r1, r0
   c1e12:	f04f 0000 	mov.w	r0, #0
   c1e16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c1e1a:	e7b6      	b.n	c1d8a <__aeabi_ddiv+0x82>
   c1e1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c1e20:	bf04      	itt	eq
   c1e22:	4301      	orreq	r1, r0
   c1e24:	2000      	moveq	r0, #0
   c1e26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c1e2a:	bf88      	it	hi
   c1e2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c1e30:	f63f aeaf 	bhi.w	c1b92 <__aeabi_dmul+0xde>
   c1e34:	ebb5 0c03 	subs.w	ip, r5, r3
   c1e38:	bf04      	itt	eq
   c1e3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   c1e3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c1e42:	f150 0000 	adcs.w	r0, r0, #0
   c1e46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1e4a:	bd70      	pop	{r4, r5, r6, pc}
   c1e4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c1e50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c1e54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c1e58:	bfc2      	ittt	gt
   c1e5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   c1e5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c1e62:	bd70      	popgt	{r4, r5, r6, pc}
   c1e64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c1e68:	f04f 0e00 	mov.w	lr, #0
   c1e6c:	3c01      	subs	r4, #1
   c1e6e:	e690      	b.n	c1b92 <__aeabi_dmul+0xde>
   c1e70:	ea45 0e06 	orr.w	lr, r5, r6
   c1e74:	e68d      	b.n	c1b92 <__aeabi_dmul+0xde>
   c1e76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c1e7a:	ea94 0f0c 	teq	r4, ip
   c1e7e:	bf08      	it	eq
   c1e80:	ea95 0f0c 	teqeq	r5, ip
   c1e84:	f43f af3b 	beq.w	c1cfe <__aeabi_dmul+0x24a>
   c1e88:	ea94 0f0c 	teq	r4, ip
   c1e8c:	d10a      	bne.n	c1ea4 <__aeabi_ddiv+0x19c>
   c1e8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c1e92:	f47f af34 	bne.w	c1cfe <__aeabi_dmul+0x24a>
   c1e96:	ea95 0f0c 	teq	r5, ip
   c1e9a:	f47f af25 	bne.w	c1ce8 <__aeabi_dmul+0x234>
   c1e9e:	4610      	mov	r0, r2
   c1ea0:	4619      	mov	r1, r3
   c1ea2:	e72c      	b.n	c1cfe <__aeabi_dmul+0x24a>
   c1ea4:	ea95 0f0c 	teq	r5, ip
   c1ea8:	d106      	bne.n	c1eb8 <__aeabi_ddiv+0x1b0>
   c1eaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c1eae:	f43f aefd 	beq.w	c1cac <__aeabi_dmul+0x1f8>
   c1eb2:	4610      	mov	r0, r2
   c1eb4:	4619      	mov	r1, r3
   c1eb6:	e722      	b.n	c1cfe <__aeabi_dmul+0x24a>
   c1eb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c1ebc:	bf18      	it	ne
   c1ebe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c1ec2:	f47f aec5 	bne.w	c1c50 <__aeabi_dmul+0x19c>
   c1ec6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c1eca:	f47f af0d 	bne.w	c1ce8 <__aeabi_dmul+0x234>
   c1ece:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c1ed2:	f47f aeeb 	bne.w	c1cac <__aeabi_dmul+0x1f8>
   c1ed6:	e712      	b.n	c1cfe <__aeabi_dmul+0x24a>

000c1ed8 <__gedf2>:
   c1ed8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c1edc:	e006      	b.n	c1eec <__cmpdf2+0x4>
   c1ede:	bf00      	nop

000c1ee0 <__ledf2>:
   c1ee0:	f04f 0c01 	mov.w	ip, #1
   c1ee4:	e002      	b.n	c1eec <__cmpdf2+0x4>
   c1ee6:	bf00      	nop

000c1ee8 <__cmpdf2>:
   c1ee8:	f04f 0c01 	mov.w	ip, #1
   c1eec:	f84d cd04 	str.w	ip, [sp, #-4]!
   c1ef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1ef8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1efc:	bf18      	it	ne
   c1efe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c1f02:	d01b      	beq.n	c1f3c <__cmpdf2+0x54>
   c1f04:	b001      	add	sp, #4
   c1f06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c1f0a:	bf0c      	ite	eq
   c1f0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c1f10:	ea91 0f03 	teqne	r1, r3
   c1f14:	bf02      	ittt	eq
   c1f16:	ea90 0f02 	teqeq	r0, r2
   c1f1a:	2000      	moveq	r0, #0
   c1f1c:	4770      	bxeq	lr
   c1f1e:	f110 0f00 	cmn.w	r0, #0
   c1f22:	ea91 0f03 	teq	r1, r3
   c1f26:	bf58      	it	pl
   c1f28:	4299      	cmppl	r1, r3
   c1f2a:	bf08      	it	eq
   c1f2c:	4290      	cmpeq	r0, r2
   c1f2e:	bf2c      	ite	cs
   c1f30:	17d8      	asrcs	r0, r3, #31
   c1f32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c1f36:	f040 0001 	orr.w	r0, r0, #1
   c1f3a:	4770      	bx	lr
   c1f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1f44:	d102      	bne.n	c1f4c <__cmpdf2+0x64>
   c1f46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c1f4a:	d107      	bne.n	c1f5c <__cmpdf2+0x74>
   c1f4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1f54:	d1d6      	bne.n	c1f04 <__cmpdf2+0x1c>
   c1f56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c1f5a:	d0d3      	beq.n	c1f04 <__cmpdf2+0x1c>
   c1f5c:	f85d 0b04 	ldr.w	r0, [sp], #4
   c1f60:	4770      	bx	lr
   c1f62:	bf00      	nop

000c1f64 <__aeabi_cdrcmple>:
   c1f64:	4684      	mov	ip, r0
   c1f66:	4610      	mov	r0, r2
   c1f68:	4662      	mov	r2, ip
   c1f6a:	468c      	mov	ip, r1
   c1f6c:	4619      	mov	r1, r3
   c1f6e:	4663      	mov	r3, ip
   c1f70:	e000      	b.n	c1f74 <__aeabi_cdcmpeq>
   c1f72:	bf00      	nop

000c1f74 <__aeabi_cdcmpeq>:
   c1f74:	b501      	push	{r0, lr}
   c1f76:	f7ff ffb7 	bl	c1ee8 <__cmpdf2>
   c1f7a:	2800      	cmp	r0, #0
   c1f7c:	bf48      	it	mi
   c1f7e:	f110 0f00 	cmnmi.w	r0, #0
   c1f82:	bd01      	pop	{r0, pc}

000c1f84 <__aeabi_dcmpeq>:
   c1f84:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1f88:	f7ff fff4 	bl	c1f74 <__aeabi_cdcmpeq>
   c1f8c:	bf0c      	ite	eq
   c1f8e:	2001      	moveq	r0, #1
   c1f90:	2000      	movne	r0, #0
   c1f92:	f85d fb08 	ldr.w	pc, [sp], #8
   c1f96:	bf00      	nop

000c1f98 <__aeabi_dcmplt>:
   c1f98:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1f9c:	f7ff ffea 	bl	c1f74 <__aeabi_cdcmpeq>
   c1fa0:	bf34      	ite	cc
   c1fa2:	2001      	movcc	r0, #1
   c1fa4:	2000      	movcs	r0, #0
   c1fa6:	f85d fb08 	ldr.w	pc, [sp], #8
   c1faa:	bf00      	nop

000c1fac <__aeabi_dcmple>:
   c1fac:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1fb0:	f7ff ffe0 	bl	c1f74 <__aeabi_cdcmpeq>
   c1fb4:	bf94      	ite	ls
   c1fb6:	2001      	movls	r0, #1
   c1fb8:	2000      	movhi	r0, #0
   c1fba:	f85d fb08 	ldr.w	pc, [sp], #8
   c1fbe:	bf00      	nop

000c1fc0 <__aeabi_dcmpge>:
   c1fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1fc4:	f7ff ffce 	bl	c1f64 <__aeabi_cdrcmple>
   c1fc8:	bf94      	ite	ls
   c1fca:	2001      	movls	r0, #1
   c1fcc:	2000      	movhi	r0, #0
   c1fce:	f85d fb08 	ldr.w	pc, [sp], #8
   c1fd2:	bf00      	nop

000c1fd4 <__aeabi_dcmpgt>:
   c1fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c1fd8:	f7ff ffc4 	bl	c1f64 <__aeabi_cdrcmple>
   c1fdc:	bf34      	ite	cc
   c1fde:	2001      	movcc	r0, #1
   c1fe0:	2000      	movcs	r0, #0
   c1fe2:	f85d fb08 	ldr.w	pc, [sp], #8
   c1fe6:	bf00      	nop

000c1fe8 <__aeabi_dcmpun>:
   c1fe8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c1fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c1ff0:	d102      	bne.n	c1ff8 <__aeabi_dcmpun+0x10>
   c1ff2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c1ff6:	d10a      	bne.n	c200e <__aeabi_dcmpun+0x26>
   c1ff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c1ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c2000:	d102      	bne.n	c2008 <__aeabi_dcmpun+0x20>
   c2002:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c2006:	d102      	bne.n	c200e <__aeabi_dcmpun+0x26>
   c2008:	f04f 0000 	mov.w	r0, #0
   c200c:	4770      	bx	lr
   c200e:	f04f 0001 	mov.w	r0, #1
   c2012:	4770      	bx	lr

000c2014 <__aeabi_d2iz>:
   c2014:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c2018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c201c:	d215      	bcs.n	c204a <__aeabi_d2iz+0x36>
   c201e:	d511      	bpl.n	c2044 <__aeabi_d2iz+0x30>
   c2020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c2024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c2028:	d912      	bls.n	c2050 <__aeabi_d2iz+0x3c>
   c202a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c202e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c2032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c2036:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c203a:	fa23 f002 	lsr.w	r0, r3, r2
   c203e:	bf18      	it	ne
   c2040:	4240      	negne	r0, r0
   c2042:	4770      	bx	lr
   c2044:	f04f 0000 	mov.w	r0, #0
   c2048:	4770      	bx	lr
   c204a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c204e:	d105      	bne.n	c205c <__aeabi_d2iz+0x48>
   c2050:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c2054:	bf08      	it	eq
   c2056:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c205a:	4770      	bx	lr
   c205c:	f04f 0000 	mov.w	r0, #0
   c2060:	4770      	bx	lr
   c2062:	bf00      	nop

000c2064 <__aeabi_d2uiz>:
   c2064:	004a      	lsls	r2, r1, #1
   c2066:	d211      	bcs.n	c208c <__aeabi_d2uiz+0x28>
   c2068:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c206c:	d211      	bcs.n	c2092 <__aeabi_d2uiz+0x2e>
   c206e:	d50d      	bpl.n	c208c <__aeabi_d2uiz+0x28>
   c2070:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c2074:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c2078:	d40e      	bmi.n	c2098 <__aeabi_d2uiz+0x34>
   c207a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c207e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c2082:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c2086:	fa23 f002 	lsr.w	r0, r3, r2
   c208a:	4770      	bx	lr
   c208c:	f04f 0000 	mov.w	r0, #0
   c2090:	4770      	bx	lr
   c2092:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c2096:	d102      	bne.n	c209e <__aeabi_d2uiz+0x3a>
   c2098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c209c:	4770      	bx	lr
   c209e:	f04f 0000 	mov.w	r0, #0
   c20a2:	4770      	bx	lr

000c20a4 <__aeabi_d2f>:
   c20a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c20a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c20ac:	bf24      	itt	cs
   c20ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c20b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c20b6:	d90d      	bls.n	c20d4 <__aeabi_d2f+0x30>
   c20b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c20bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c20c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c20c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c20c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c20cc:	bf08      	it	eq
   c20ce:	f020 0001 	biceq.w	r0, r0, #1
   c20d2:	4770      	bx	lr
   c20d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c20d8:	d121      	bne.n	c211e <__aeabi_d2f+0x7a>
   c20da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c20de:	bfbc      	itt	lt
   c20e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c20e4:	4770      	bxlt	lr
   c20e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c20ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c20ee:	f1c2 0218 	rsb	r2, r2, #24
   c20f2:	f1c2 0c20 	rsb	ip, r2, #32
   c20f6:	fa10 f30c 	lsls.w	r3, r0, ip
   c20fa:	fa20 f002 	lsr.w	r0, r0, r2
   c20fe:	bf18      	it	ne
   c2100:	f040 0001 	orrne.w	r0, r0, #1
   c2104:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c2108:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c210c:	fa03 fc0c 	lsl.w	ip, r3, ip
   c2110:	ea40 000c 	orr.w	r0, r0, ip
   c2114:	fa23 f302 	lsr.w	r3, r3, r2
   c2118:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c211c:	e7cc      	b.n	c20b8 <__aeabi_d2f+0x14>
   c211e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c2122:	d107      	bne.n	c2134 <__aeabi_d2f+0x90>
   c2124:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c2128:	bf1e      	ittt	ne
   c212a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c212e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c2132:	4770      	bxne	lr
   c2134:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c2138:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c213c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c2140:	4770      	bx	lr
   c2142:	bf00      	nop

000c2144 <__aeabi_d2ulz>:
   c2144:	b5d0      	push	{r4, r6, r7, lr}
   c2146:	4b0c      	ldr	r3, [pc, #48]	; (c2178 <__aeabi_d2ulz+0x34>)
   c2148:	2200      	movs	r2, #0
   c214a:	4606      	mov	r6, r0
   c214c:	460f      	mov	r7, r1
   c214e:	f7ff fcb1 	bl	c1ab4 <__aeabi_dmul>
   c2152:	f7ff ff87 	bl	c2064 <__aeabi_d2uiz>
   c2156:	4604      	mov	r4, r0
   c2158:	f7ff fc32 	bl	c19c0 <__aeabi_ui2d>
   c215c:	4b07      	ldr	r3, [pc, #28]	; (c217c <__aeabi_d2ulz+0x38>)
   c215e:	2200      	movs	r2, #0
   c2160:	f7ff fca8 	bl	c1ab4 <__aeabi_dmul>
   c2164:	4602      	mov	r2, r0
   c2166:	460b      	mov	r3, r1
   c2168:	4630      	mov	r0, r6
   c216a:	4639      	mov	r1, r7
   c216c:	f7ff faea 	bl	c1744 <__aeabi_dsub>
   c2170:	f7ff ff78 	bl	c2064 <__aeabi_d2uiz>
   c2174:	4621      	mov	r1, r4
   c2176:	bdd0      	pop	{r4, r6, r7, pc}
   c2178:	3df00000 	.word	0x3df00000
   c217c:	41f00000 	.word	0x41f00000

000c2180 <atexit>:
   c2180:	2300      	movs	r3, #0
   c2182:	4601      	mov	r1, r0
   c2184:	461a      	mov	r2, r3
   c2186:	4618      	mov	r0, r3
   c2188:	f001 b808 	b.w	c319c <__register_exitproc>

000c218c <atof>:
   c218c:	2100      	movs	r1, #0
   c218e:	f000 bf6d 	b.w	c306c <strtod>

000c2192 <atoi>:
   c2192:	220a      	movs	r2, #10
   c2194:	2100      	movs	r1, #0
   c2196:	f000 bff7 	b.w	c3188 <strtol>
	...

000c219c <isprint>:
   c219c:	4b02      	ldr	r3, [pc, #8]	; (c21a8 <isprint+0xc>)
   c219e:	4418      	add	r0, r3
   c21a0:	7840      	ldrb	r0, [r0, #1]
   c21a2:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c21a6:	4770      	bx	lr
   c21a8:	000c5de0 	.word	0x000c5de0

000c21ac <memcmp>:
   c21ac:	b510      	push	{r4, lr}
   c21ae:	3901      	subs	r1, #1
   c21b0:	4402      	add	r2, r0
   c21b2:	4290      	cmp	r0, r2
   c21b4:	d101      	bne.n	c21ba <memcmp+0xe>
   c21b6:	2000      	movs	r0, #0
   c21b8:	e005      	b.n	c21c6 <memcmp+0x1a>
   c21ba:	7803      	ldrb	r3, [r0, #0]
   c21bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c21c0:	42a3      	cmp	r3, r4
   c21c2:	d001      	beq.n	c21c8 <memcmp+0x1c>
   c21c4:	1b18      	subs	r0, r3, r4
   c21c6:	bd10      	pop	{r4, pc}
   c21c8:	3001      	adds	r0, #1
   c21ca:	e7f2      	b.n	c21b2 <memcmp+0x6>

000c21cc <memcpy>:
   c21cc:	440a      	add	r2, r1
   c21ce:	4291      	cmp	r1, r2
   c21d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c21d4:	d100      	bne.n	c21d8 <memcpy+0xc>
   c21d6:	4770      	bx	lr
   c21d8:	b510      	push	{r4, lr}
   c21da:	f811 4b01 	ldrb.w	r4, [r1], #1
   c21de:	f803 4f01 	strb.w	r4, [r3, #1]!
   c21e2:	4291      	cmp	r1, r2
   c21e4:	d1f9      	bne.n	c21da <memcpy+0xe>
   c21e6:	bd10      	pop	{r4, pc}

000c21e8 <memmove>:
   c21e8:	4288      	cmp	r0, r1
   c21ea:	b510      	push	{r4, lr}
   c21ec:	eb01 0402 	add.w	r4, r1, r2
   c21f0:	d902      	bls.n	c21f8 <memmove+0x10>
   c21f2:	4284      	cmp	r4, r0
   c21f4:	4623      	mov	r3, r4
   c21f6:	d807      	bhi.n	c2208 <memmove+0x20>
   c21f8:	1e43      	subs	r3, r0, #1
   c21fa:	42a1      	cmp	r1, r4
   c21fc:	d008      	beq.n	c2210 <memmove+0x28>
   c21fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   c2202:	f803 2f01 	strb.w	r2, [r3, #1]!
   c2206:	e7f8      	b.n	c21fa <memmove+0x12>
   c2208:	4402      	add	r2, r0
   c220a:	4601      	mov	r1, r0
   c220c:	428a      	cmp	r2, r1
   c220e:	d100      	bne.n	c2212 <memmove+0x2a>
   c2210:	bd10      	pop	{r4, pc}
   c2212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c2216:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c221a:	e7f7      	b.n	c220c <memmove+0x24>

000c221c <memset>:
   c221c:	4402      	add	r2, r0
   c221e:	4603      	mov	r3, r0
   c2220:	4293      	cmp	r3, r2
   c2222:	d100      	bne.n	c2226 <memset+0xa>
   c2224:	4770      	bx	lr
   c2226:	f803 1b01 	strb.w	r1, [r3], #1
   c222a:	e7f9      	b.n	c2220 <memset+0x4>

000c222c <srand>:
   c222c:	b538      	push	{r3, r4, r5, lr}
   c222e:	4b10      	ldr	r3, [pc, #64]	; (c2270 <srand+0x44>)
   c2230:	681d      	ldr	r5, [r3, #0]
   c2232:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c2234:	4604      	mov	r4, r0
   c2236:	b9b3      	cbnz	r3, c2266 <srand+0x3a>
   c2238:	2018      	movs	r0, #24
   c223a:	f7fb f999 	bl	bd570 <malloc>
   c223e:	4602      	mov	r2, r0
   c2240:	63a8      	str	r0, [r5, #56]	; 0x38
   c2242:	b920      	cbnz	r0, c224e <srand+0x22>
   c2244:	4b0b      	ldr	r3, [pc, #44]	; (c2274 <srand+0x48>)
   c2246:	480c      	ldr	r0, [pc, #48]	; (c2278 <srand+0x4c>)
   c2248:	2142      	movs	r1, #66	; 0x42
   c224a:	f7fb f9d9 	bl	bd600 <__assert_func>
   c224e:	490b      	ldr	r1, [pc, #44]	; (c227c <srand+0x50>)
   c2250:	4b0b      	ldr	r3, [pc, #44]	; (c2280 <srand+0x54>)
   c2252:	e9c0 1300 	strd	r1, r3, [r0]
   c2256:	4b0b      	ldr	r3, [pc, #44]	; (c2284 <srand+0x58>)
   c2258:	6083      	str	r3, [r0, #8]
   c225a:	230b      	movs	r3, #11
   c225c:	8183      	strh	r3, [r0, #12]
   c225e:	2100      	movs	r1, #0
   c2260:	2001      	movs	r0, #1
   c2262:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c2266:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c2268:	2200      	movs	r2, #0
   c226a:	611c      	str	r4, [r3, #16]
   c226c:	615a      	str	r2, [r3, #20]
   c226e:	bd38      	pop	{r3, r4, r5, pc}
   c2270:	2003dbc8 	.word	0x2003dbc8
   c2274:	000c5d19 	.word	0x000c5d19
   c2278:	000c5d30 	.word	0x000c5d30
   c227c:	abcd330e 	.word	0xabcd330e
   c2280:	e66d1234 	.word	0xe66d1234
   c2284:	0005deec 	.word	0x0005deec

000c2288 <strcat>:
   c2288:	b510      	push	{r4, lr}
   c228a:	4602      	mov	r2, r0
   c228c:	7814      	ldrb	r4, [r2, #0]
   c228e:	4613      	mov	r3, r2
   c2290:	3201      	adds	r2, #1
   c2292:	2c00      	cmp	r4, #0
   c2294:	d1fa      	bne.n	c228c <strcat+0x4>
   c2296:	3b01      	subs	r3, #1
   c2298:	f811 2b01 	ldrb.w	r2, [r1], #1
   c229c:	f803 2f01 	strb.w	r2, [r3, #1]!
   c22a0:	2a00      	cmp	r2, #0
   c22a2:	d1f9      	bne.n	c2298 <strcat+0x10>
   c22a4:	bd10      	pop	{r4, pc}

000c22a6 <strchr>:
   c22a6:	b2c9      	uxtb	r1, r1
   c22a8:	4603      	mov	r3, r0
   c22aa:	f810 2b01 	ldrb.w	r2, [r0], #1
   c22ae:	b11a      	cbz	r2, c22b8 <strchr+0x12>
   c22b0:	428a      	cmp	r2, r1
   c22b2:	d1f9      	bne.n	c22a8 <strchr+0x2>
   c22b4:	4618      	mov	r0, r3
   c22b6:	4770      	bx	lr
   c22b8:	2900      	cmp	r1, #0
   c22ba:	bf18      	it	ne
   c22bc:	2300      	movne	r3, #0
   c22be:	e7f9      	b.n	c22b4 <strchr+0xe>

000c22c0 <strchrnul>:
   c22c0:	b510      	push	{r4, lr}
   c22c2:	4604      	mov	r4, r0
   c22c4:	f7ff ffef 	bl	c22a6 <strchr>
   c22c8:	b918      	cbnz	r0, c22d2 <strchrnul+0x12>
   c22ca:	4620      	mov	r0, r4
   c22cc:	f000 f831 	bl	c2332 <strlen>
   c22d0:	4420      	add	r0, r4
   c22d2:	bd10      	pop	{r4, pc}

000c22d4 <strcmp>:
   c22d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   c22d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   c22dc:	2a01      	cmp	r2, #1
   c22de:	bf28      	it	cs
   c22e0:	429a      	cmpcs	r2, r3
   c22e2:	d0f7      	beq.n	c22d4 <strcmp>
   c22e4:	1ad0      	subs	r0, r2, r3
   c22e6:	4770      	bx	lr

000c22e8 <strcpy>:
   c22e8:	4603      	mov	r3, r0
   c22ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   c22ee:	f803 2b01 	strb.w	r2, [r3], #1
   c22f2:	2a00      	cmp	r2, #0
   c22f4:	d1f9      	bne.n	c22ea <strcpy+0x2>
   c22f6:	4770      	bx	lr

000c22f8 <strdup>:
   c22f8:	4b02      	ldr	r3, [pc, #8]	; (c2304 <strdup+0xc>)
   c22fa:	4601      	mov	r1, r0
   c22fc:	6818      	ldr	r0, [r3, #0]
   c22fe:	f000 b803 	b.w	c2308 <_strdup_r>
   c2302:	bf00      	nop
   c2304:	2003dbc8 	.word	0x2003dbc8

000c2308 <_strdup_r>:
   c2308:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c230a:	4604      	mov	r4, r0
   c230c:	4608      	mov	r0, r1
   c230e:	460d      	mov	r5, r1
   c2310:	f000 f80f 	bl	c2332 <strlen>
   c2314:	1c42      	adds	r2, r0, #1
   c2316:	4611      	mov	r1, r2
   c2318:	4620      	mov	r0, r4
   c231a:	9201      	str	r2, [sp, #4]
   c231c:	f7fb f960 	bl	bd5e0 <_malloc_r>
   c2320:	4604      	mov	r4, r0
   c2322:	b118      	cbz	r0, c232c <_strdup_r+0x24>
   c2324:	9a01      	ldr	r2, [sp, #4]
   c2326:	4629      	mov	r1, r5
   c2328:	f7ff ff50 	bl	c21cc <memcpy>
   c232c:	4620      	mov	r0, r4
   c232e:	b003      	add	sp, #12
   c2330:	bd30      	pop	{r4, r5, pc}

000c2332 <strlen>:
   c2332:	4603      	mov	r3, r0
   c2334:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2338:	2a00      	cmp	r2, #0
   c233a:	d1fb      	bne.n	c2334 <strlen+0x2>
   c233c:	1a18      	subs	r0, r3, r0
   c233e:	3801      	subs	r0, #1
   c2340:	4770      	bx	lr
	...

000c2344 <strlwr>:
   c2344:	b510      	push	{r4, lr}
   c2346:	4c07      	ldr	r4, [pc, #28]	; (c2364 <strlwr+0x20>)
   c2348:	1e42      	subs	r2, r0, #1
   c234a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c234e:	b903      	cbnz	r3, c2352 <strlwr+0xe>
   c2350:	bd10      	pop	{r4, pc}
   c2352:	5ce1      	ldrb	r1, [r4, r3]
   c2354:	f001 0103 	and.w	r1, r1, #3
   c2358:	2901      	cmp	r1, #1
   c235a:	bf08      	it	eq
   c235c:	3320      	addeq	r3, #32
   c235e:	7013      	strb	r3, [r2, #0]
   c2360:	e7f3      	b.n	c234a <strlwr+0x6>
   c2362:	bf00      	nop
   c2364:	000c5de1 	.word	0x000c5de1

000c2368 <strncmp>:
   c2368:	b510      	push	{r4, lr}
   c236a:	b17a      	cbz	r2, c238c <strncmp+0x24>
   c236c:	4603      	mov	r3, r0
   c236e:	3901      	subs	r1, #1
   c2370:	1884      	adds	r4, r0, r2
   c2372:	f813 0b01 	ldrb.w	r0, [r3], #1
   c2376:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c237a:	4290      	cmp	r0, r2
   c237c:	d101      	bne.n	c2382 <strncmp+0x1a>
   c237e:	42a3      	cmp	r3, r4
   c2380:	d101      	bne.n	c2386 <strncmp+0x1e>
   c2382:	1a80      	subs	r0, r0, r2
   c2384:	bd10      	pop	{r4, pc}
   c2386:	2800      	cmp	r0, #0
   c2388:	d1f3      	bne.n	c2372 <strncmp+0xa>
   c238a:	e7fa      	b.n	c2382 <strncmp+0x1a>
   c238c:	4610      	mov	r0, r2
   c238e:	e7f9      	b.n	c2384 <strncmp+0x1c>

000c2390 <strncpy>:
   c2390:	b510      	push	{r4, lr}
   c2392:	3901      	subs	r1, #1
   c2394:	4603      	mov	r3, r0
   c2396:	b132      	cbz	r2, c23a6 <strncpy+0x16>
   c2398:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c239c:	f803 4b01 	strb.w	r4, [r3], #1
   c23a0:	3a01      	subs	r2, #1
   c23a2:	2c00      	cmp	r4, #0
   c23a4:	d1f7      	bne.n	c2396 <strncpy+0x6>
   c23a6:	441a      	add	r2, r3
   c23a8:	2100      	movs	r1, #0
   c23aa:	4293      	cmp	r3, r2
   c23ac:	d100      	bne.n	c23b0 <strncpy+0x20>
   c23ae:	bd10      	pop	{r4, pc}
   c23b0:	f803 1b01 	strb.w	r1, [r3], #1
   c23b4:	e7f9      	b.n	c23aa <strncpy+0x1a>

000c23b6 <strnlen>:
   c23b6:	b510      	push	{r4, lr}
   c23b8:	4602      	mov	r2, r0
   c23ba:	4401      	add	r1, r0
   c23bc:	428a      	cmp	r2, r1
   c23be:	4613      	mov	r3, r2
   c23c0:	d003      	beq.n	c23ca <strnlen+0x14>
   c23c2:	781c      	ldrb	r4, [r3, #0]
   c23c4:	3201      	adds	r2, #1
   c23c6:	2c00      	cmp	r4, #0
   c23c8:	d1f8      	bne.n	c23bc <strnlen+0x6>
   c23ca:	1a18      	subs	r0, r3, r0
   c23cc:	bd10      	pop	{r4, pc}

000c23ce <strrchr>:
   c23ce:	b538      	push	{r3, r4, r5, lr}
   c23d0:	4603      	mov	r3, r0
   c23d2:	460c      	mov	r4, r1
   c23d4:	b969      	cbnz	r1, c23f2 <strrchr+0x24>
   c23d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c23da:	f7ff bf64 	b.w	c22a6 <strchr>
   c23de:	1c43      	adds	r3, r0, #1
   c23e0:	4605      	mov	r5, r0
   c23e2:	4621      	mov	r1, r4
   c23e4:	4618      	mov	r0, r3
   c23e6:	f7ff ff5e 	bl	c22a6 <strchr>
   c23ea:	2800      	cmp	r0, #0
   c23ec:	d1f7      	bne.n	c23de <strrchr+0x10>
   c23ee:	4628      	mov	r0, r5
   c23f0:	bd38      	pop	{r3, r4, r5, pc}
   c23f2:	2500      	movs	r5, #0
   c23f4:	e7f5      	b.n	c23e2 <strrchr+0x14>

000c23f6 <strstr>:
   c23f6:	780a      	ldrb	r2, [r1, #0]
   c23f8:	b570      	push	{r4, r5, r6, lr}
   c23fa:	b96a      	cbnz	r2, c2418 <strstr+0x22>
   c23fc:	bd70      	pop	{r4, r5, r6, pc}
   c23fe:	429a      	cmp	r2, r3
   c2400:	d109      	bne.n	c2416 <strstr+0x20>
   c2402:	460c      	mov	r4, r1
   c2404:	4605      	mov	r5, r0
   c2406:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c240a:	2b00      	cmp	r3, #0
   c240c:	d0f6      	beq.n	c23fc <strstr+0x6>
   c240e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c2412:	429e      	cmp	r6, r3
   c2414:	d0f7      	beq.n	c2406 <strstr+0x10>
   c2416:	3001      	adds	r0, #1
   c2418:	7803      	ldrb	r3, [r0, #0]
   c241a:	2b00      	cmp	r3, #0
   c241c:	d1ef      	bne.n	c23fe <strstr+0x8>
   c241e:	4618      	mov	r0, r3
   c2420:	e7ec      	b.n	c23fc <strstr+0x6>

000c2422 <sulp>:
   c2422:	b570      	push	{r4, r5, r6, lr}
   c2424:	4604      	mov	r4, r0
   c2426:	460d      	mov	r5, r1
   c2428:	ec45 4b10 	vmov	d0, r4, r5
   c242c:	4616      	mov	r6, r2
   c242e:	f001 fe0f 	bl	c4050 <__ulp>
   c2432:	ec51 0b10 	vmov	r0, r1, d0
   c2436:	b17e      	cbz	r6, c2458 <sulp+0x36>
   c2438:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c243c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c2440:	2b00      	cmp	r3, #0
   c2442:	dd09      	ble.n	c2458 <sulp+0x36>
   c2444:	051b      	lsls	r3, r3, #20
   c2446:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c244a:	2400      	movs	r4, #0
   c244c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c2450:	4622      	mov	r2, r4
   c2452:	462b      	mov	r3, r5
   c2454:	f7ff fb2e 	bl	c1ab4 <__aeabi_dmul>
   c2458:	bd70      	pop	{r4, r5, r6, pc}
   c245a:	0000      	movs	r0, r0
   c245c:	0000      	movs	r0, r0
	...

000c2460 <_strtod_l>:
   c2460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2464:	ed2d 8b02 	vpush	{d8}
   c2468:	b09d      	sub	sp, #116	; 0x74
   c246a:	461f      	mov	r7, r3
   c246c:	2300      	movs	r3, #0
   c246e:	9318      	str	r3, [sp, #96]	; 0x60
   c2470:	4ba2      	ldr	r3, [pc, #648]	; (c26fc <_strtod_l+0x29c>)
   c2472:	9213      	str	r2, [sp, #76]	; 0x4c
   c2474:	681b      	ldr	r3, [r3, #0]
   c2476:	9305      	str	r3, [sp, #20]
   c2478:	4604      	mov	r4, r0
   c247a:	4618      	mov	r0, r3
   c247c:	4688      	mov	r8, r1
   c247e:	f7ff ff58 	bl	c2332 <strlen>
   c2482:	f04f 0a00 	mov.w	sl, #0
   c2486:	4605      	mov	r5, r0
   c2488:	f04f 0b00 	mov.w	fp, #0
   c248c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2492:	781a      	ldrb	r2, [r3, #0]
   c2494:	2a2b      	cmp	r2, #43	; 0x2b
   c2496:	d04e      	beq.n	c2536 <_strtod_l+0xd6>
   c2498:	d83b      	bhi.n	c2512 <_strtod_l+0xb2>
   c249a:	2a0d      	cmp	r2, #13
   c249c:	d834      	bhi.n	c2508 <_strtod_l+0xa8>
   c249e:	2a08      	cmp	r2, #8
   c24a0:	d834      	bhi.n	c250c <_strtod_l+0xac>
   c24a2:	2a00      	cmp	r2, #0
   c24a4:	d03e      	beq.n	c2524 <_strtod_l+0xc4>
   c24a6:	2300      	movs	r3, #0
   c24a8:	930a      	str	r3, [sp, #40]	; 0x28
   c24aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c24ac:	7833      	ldrb	r3, [r6, #0]
   c24ae:	2b30      	cmp	r3, #48	; 0x30
   c24b0:	f040 80b0 	bne.w	c2614 <_strtod_l+0x1b4>
   c24b4:	7873      	ldrb	r3, [r6, #1]
   c24b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c24ba:	2b58      	cmp	r3, #88	; 0x58
   c24bc:	d168      	bne.n	c2590 <_strtod_l+0x130>
   c24be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c24c0:	9301      	str	r3, [sp, #4]
   c24c2:	ab18      	add	r3, sp, #96	; 0x60
   c24c4:	9702      	str	r7, [sp, #8]
   c24c6:	9300      	str	r3, [sp, #0]
   c24c8:	4a8d      	ldr	r2, [pc, #564]	; (c2700 <_strtod_l+0x2a0>)
   c24ca:	ab19      	add	r3, sp, #100	; 0x64
   c24cc:	a917      	add	r1, sp, #92	; 0x5c
   c24ce:	4620      	mov	r0, r4
   c24d0:	f000 ff2e 	bl	c3330 <__gethex>
   c24d4:	f010 0707 	ands.w	r7, r0, #7
   c24d8:	4605      	mov	r5, r0
   c24da:	d005      	beq.n	c24e8 <_strtod_l+0x88>
   c24dc:	2f06      	cmp	r7, #6
   c24de:	d12c      	bne.n	c253a <_strtod_l+0xda>
   c24e0:	3601      	adds	r6, #1
   c24e2:	2300      	movs	r3, #0
   c24e4:	9617      	str	r6, [sp, #92]	; 0x5c
   c24e6:	930a      	str	r3, [sp, #40]	; 0x28
   c24e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c24ea:	2b00      	cmp	r3, #0
   c24ec:	f040 8590 	bne.w	c3010 <_strtod_l+0xbb0>
   c24f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c24f2:	b1eb      	cbz	r3, c2530 <_strtod_l+0xd0>
   c24f4:	4652      	mov	r2, sl
   c24f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c24fa:	ec43 2b10 	vmov	d0, r2, r3
   c24fe:	b01d      	add	sp, #116	; 0x74
   c2500:	ecbd 8b02 	vpop	{d8}
   c2504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2508:	2a20      	cmp	r2, #32
   c250a:	d1cc      	bne.n	c24a6 <_strtod_l+0x46>
   c250c:	3301      	adds	r3, #1
   c250e:	9317      	str	r3, [sp, #92]	; 0x5c
   c2510:	e7be      	b.n	c2490 <_strtod_l+0x30>
   c2512:	2a2d      	cmp	r2, #45	; 0x2d
   c2514:	d1c7      	bne.n	c24a6 <_strtod_l+0x46>
   c2516:	2201      	movs	r2, #1
   c2518:	920a      	str	r2, [sp, #40]	; 0x28
   c251a:	1c5a      	adds	r2, r3, #1
   c251c:	9217      	str	r2, [sp, #92]	; 0x5c
   c251e:	785b      	ldrb	r3, [r3, #1]
   c2520:	2b00      	cmp	r3, #0
   c2522:	d1c2      	bne.n	c24aa <_strtod_l+0x4a>
   c2524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c2526:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c252a:	2b00      	cmp	r3, #0
   c252c:	f040 856e 	bne.w	c300c <_strtod_l+0xbac>
   c2530:	4652      	mov	r2, sl
   c2532:	465b      	mov	r3, fp
   c2534:	e7e1      	b.n	c24fa <_strtod_l+0x9a>
   c2536:	2200      	movs	r2, #0
   c2538:	e7ee      	b.n	c2518 <_strtod_l+0xb8>
   c253a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c253c:	b13a      	cbz	r2, c254e <_strtod_l+0xee>
   c253e:	2135      	movs	r1, #53	; 0x35
   c2540:	a81a      	add	r0, sp, #104	; 0x68
   c2542:	f001 fe90 	bl	c4266 <__copybits>
   c2546:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2548:	4620      	mov	r0, r4
   c254a:	f001 fa4f 	bl	c39ec <_Bfree>
   c254e:	3f01      	subs	r7, #1
   c2550:	2f04      	cmp	r7, #4
   c2552:	d806      	bhi.n	c2562 <_strtod_l+0x102>
   c2554:	e8df f007 	tbb	[pc, r7]
   c2558:	1714030a 	.word	0x1714030a
   c255c:	0a          	.byte	0x0a
   c255d:	00          	.byte	0x00
   c255e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c2562:	0728      	lsls	r0, r5, #28
   c2564:	d5c0      	bpl.n	c24e8 <_strtod_l+0x88>
   c2566:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c256a:	e7bd      	b.n	c24e8 <_strtod_l+0x88>
   c256c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c2570:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c2572:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c2576:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c257a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c257e:	e7f0      	b.n	c2562 <_strtod_l+0x102>
   c2580:	f8df b180 	ldr.w	fp, [pc, #384]	; c2704 <_strtod_l+0x2a4>
   c2584:	e7ed      	b.n	c2562 <_strtod_l+0x102>
   c2586:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c258a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c258e:	e7e8      	b.n	c2562 <_strtod_l+0x102>
   c2590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2592:	1c5a      	adds	r2, r3, #1
   c2594:	9217      	str	r2, [sp, #92]	; 0x5c
   c2596:	785b      	ldrb	r3, [r3, #1]
   c2598:	2b30      	cmp	r3, #48	; 0x30
   c259a:	d0f9      	beq.n	c2590 <_strtod_l+0x130>
   c259c:	2b00      	cmp	r3, #0
   c259e:	d0a3      	beq.n	c24e8 <_strtod_l+0x88>
   c25a0:	2301      	movs	r3, #1
   c25a2:	f04f 0900 	mov.w	r9, #0
   c25a6:	9304      	str	r3, [sp, #16]
   c25a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c25aa:	9308      	str	r3, [sp, #32]
   c25ac:	f8cd 901c 	str.w	r9, [sp, #28]
   c25b0:	464f      	mov	r7, r9
   c25b2:	220a      	movs	r2, #10
   c25b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c25b6:	7806      	ldrb	r6, [r0, #0]
   c25b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c25bc:	b2d9      	uxtb	r1, r3
   c25be:	2909      	cmp	r1, #9
   c25c0:	d92a      	bls.n	c2618 <_strtod_l+0x1b8>
   c25c2:	9905      	ldr	r1, [sp, #20]
   c25c4:	462a      	mov	r2, r5
   c25c6:	f7ff fecf 	bl	c2368 <strncmp>
   c25ca:	b398      	cbz	r0, c2634 <_strtod_l+0x1d4>
   c25cc:	2000      	movs	r0, #0
   c25ce:	4632      	mov	r2, r6
   c25d0:	463d      	mov	r5, r7
   c25d2:	9005      	str	r0, [sp, #20]
   c25d4:	4603      	mov	r3, r0
   c25d6:	2a65      	cmp	r2, #101	; 0x65
   c25d8:	d001      	beq.n	c25de <_strtod_l+0x17e>
   c25da:	2a45      	cmp	r2, #69	; 0x45
   c25dc:	d118      	bne.n	c2610 <_strtod_l+0x1b0>
   c25de:	b91d      	cbnz	r5, c25e8 <_strtod_l+0x188>
   c25e0:	9a04      	ldr	r2, [sp, #16]
   c25e2:	4302      	orrs	r2, r0
   c25e4:	d09e      	beq.n	c2524 <_strtod_l+0xc4>
   c25e6:	2500      	movs	r5, #0
   c25e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c25ec:	f108 0201 	add.w	r2, r8, #1
   c25f0:	9217      	str	r2, [sp, #92]	; 0x5c
   c25f2:	f898 2001 	ldrb.w	r2, [r8, #1]
   c25f6:	2a2b      	cmp	r2, #43	; 0x2b
   c25f8:	d075      	beq.n	c26e6 <_strtod_l+0x286>
   c25fa:	2a2d      	cmp	r2, #45	; 0x2d
   c25fc:	d07b      	beq.n	c26f6 <_strtod_l+0x296>
   c25fe:	f04f 0c00 	mov.w	ip, #0
   c2602:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c2606:	2909      	cmp	r1, #9
   c2608:	f240 8082 	bls.w	c2710 <_strtod_l+0x2b0>
   c260c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2610:	2600      	movs	r6, #0
   c2612:	e09d      	b.n	c2750 <_strtod_l+0x2f0>
   c2614:	2300      	movs	r3, #0
   c2616:	e7c4      	b.n	c25a2 <_strtod_l+0x142>
   c2618:	2f08      	cmp	r7, #8
   c261a:	bfd8      	it	le
   c261c:	9907      	ldrle	r1, [sp, #28]
   c261e:	f100 0001 	add.w	r0, r0, #1
   c2622:	bfda      	itte	le
   c2624:	fb02 3301 	mlale	r3, r2, r1, r3
   c2628:	9307      	strle	r3, [sp, #28]
   c262a:	fb02 3909 	mlagt	r9, r2, r9, r3
   c262e:	3701      	adds	r7, #1
   c2630:	9017      	str	r0, [sp, #92]	; 0x5c
   c2632:	e7bf      	b.n	c25b4 <_strtod_l+0x154>
   c2634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2636:	195a      	adds	r2, r3, r5
   c2638:	9217      	str	r2, [sp, #92]	; 0x5c
   c263a:	5d5a      	ldrb	r2, [r3, r5]
   c263c:	2f00      	cmp	r7, #0
   c263e:	d037      	beq.n	c26b0 <_strtod_l+0x250>
   c2640:	9005      	str	r0, [sp, #20]
   c2642:	463d      	mov	r5, r7
   c2644:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c2648:	2b09      	cmp	r3, #9
   c264a:	d912      	bls.n	c2672 <_strtod_l+0x212>
   c264c:	2301      	movs	r3, #1
   c264e:	e7c2      	b.n	c25d6 <_strtod_l+0x176>
   c2650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2652:	1c5a      	adds	r2, r3, #1
   c2654:	9217      	str	r2, [sp, #92]	; 0x5c
   c2656:	785a      	ldrb	r2, [r3, #1]
   c2658:	3001      	adds	r0, #1
   c265a:	2a30      	cmp	r2, #48	; 0x30
   c265c:	d0f8      	beq.n	c2650 <_strtod_l+0x1f0>
   c265e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c2662:	2b08      	cmp	r3, #8
   c2664:	f200 84d9 	bhi.w	c301a <_strtod_l+0xbba>
   c2668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c266a:	9005      	str	r0, [sp, #20]
   c266c:	2000      	movs	r0, #0
   c266e:	9308      	str	r3, [sp, #32]
   c2670:	4605      	mov	r5, r0
   c2672:	3a30      	subs	r2, #48	; 0x30
   c2674:	f100 0301 	add.w	r3, r0, #1
   c2678:	d014      	beq.n	c26a4 <_strtod_l+0x244>
   c267a:	9905      	ldr	r1, [sp, #20]
   c267c:	4419      	add	r1, r3
   c267e:	9105      	str	r1, [sp, #20]
   c2680:	462b      	mov	r3, r5
   c2682:	eb00 0e05 	add.w	lr, r0, r5
   c2686:	210a      	movs	r1, #10
   c2688:	4573      	cmp	r3, lr
   c268a:	d113      	bne.n	c26b4 <_strtod_l+0x254>
   c268c:	182b      	adds	r3, r5, r0
   c268e:	2b08      	cmp	r3, #8
   c2690:	f105 0501 	add.w	r5, r5, #1
   c2694:	4405      	add	r5, r0
   c2696:	dc1c      	bgt.n	c26d2 <_strtod_l+0x272>
   c2698:	9907      	ldr	r1, [sp, #28]
   c269a:	230a      	movs	r3, #10
   c269c:	fb03 2301 	mla	r3, r3, r1, r2
   c26a0:	9307      	str	r3, [sp, #28]
   c26a2:	2300      	movs	r3, #0
   c26a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c26a6:	1c51      	adds	r1, r2, #1
   c26a8:	9117      	str	r1, [sp, #92]	; 0x5c
   c26aa:	7852      	ldrb	r2, [r2, #1]
   c26ac:	4618      	mov	r0, r3
   c26ae:	e7c9      	b.n	c2644 <_strtod_l+0x1e4>
   c26b0:	4638      	mov	r0, r7
   c26b2:	e7d2      	b.n	c265a <_strtod_l+0x1fa>
   c26b4:	2b08      	cmp	r3, #8
   c26b6:	dc04      	bgt.n	c26c2 <_strtod_l+0x262>
   c26b8:	9e07      	ldr	r6, [sp, #28]
   c26ba:	434e      	muls	r6, r1
   c26bc:	9607      	str	r6, [sp, #28]
   c26be:	3301      	adds	r3, #1
   c26c0:	e7e2      	b.n	c2688 <_strtod_l+0x228>
   c26c2:	f103 0c01 	add.w	ip, r3, #1
   c26c6:	f1bc 0f10 	cmp.w	ip, #16
   c26ca:	bfd8      	it	le
   c26cc:	fb01 f909 	mulle.w	r9, r1, r9
   c26d0:	e7f5      	b.n	c26be <_strtod_l+0x25e>
   c26d2:	2d10      	cmp	r5, #16
   c26d4:	bfdc      	itt	le
   c26d6:	230a      	movle	r3, #10
   c26d8:	fb03 2909 	mlale	r9, r3, r9, r2
   c26dc:	e7e1      	b.n	c26a2 <_strtod_l+0x242>
   c26de:	2300      	movs	r3, #0
   c26e0:	9305      	str	r3, [sp, #20]
   c26e2:	2301      	movs	r3, #1
   c26e4:	e77c      	b.n	c25e0 <_strtod_l+0x180>
   c26e6:	f04f 0c00 	mov.w	ip, #0
   c26ea:	f108 0202 	add.w	r2, r8, #2
   c26ee:	9217      	str	r2, [sp, #92]	; 0x5c
   c26f0:	f898 2002 	ldrb.w	r2, [r8, #2]
   c26f4:	e785      	b.n	c2602 <_strtod_l+0x1a2>
   c26f6:	f04f 0c01 	mov.w	ip, #1
   c26fa:	e7f6      	b.n	c26ea <_strtod_l+0x28a>
   c26fc:	000c5f54 	.word	0x000c5f54
   c2700:	000c5d90 	.word	0x000c5d90
   c2704:	7ff00000 	.word	0x7ff00000
   c2708:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c270a:	1c51      	adds	r1, r2, #1
   c270c:	9117      	str	r1, [sp, #92]	; 0x5c
   c270e:	7852      	ldrb	r2, [r2, #1]
   c2710:	2a30      	cmp	r2, #48	; 0x30
   c2712:	d0f9      	beq.n	c2708 <_strtod_l+0x2a8>
   c2714:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c2718:	2908      	cmp	r1, #8
   c271a:	f63f af79 	bhi.w	c2610 <_strtod_l+0x1b0>
   c271e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c2722:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2724:	9206      	str	r2, [sp, #24]
   c2726:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2728:	1c51      	adds	r1, r2, #1
   c272a:	9117      	str	r1, [sp, #92]	; 0x5c
   c272c:	7852      	ldrb	r2, [r2, #1]
   c272e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c2732:	2e09      	cmp	r6, #9
   c2734:	d937      	bls.n	c27a6 <_strtod_l+0x346>
   c2736:	9e06      	ldr	r6, [sp, #24]
   c2738:	1b89      	subs	r1, r1, r6
   c273a:	2908      	cmp	r1, #8
   c273c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c2740:	dc02      	bgt.n	c2748 <_strtod_l+0x2e8>
   c2742:	4576      	cmp	r6, lr
   c2744:	bfa8      	it	ge
   c2746:	4676      	movge	r6, lr
   c2748:	f1bc 0f00 	cmp.w	ip, #0
   c274c:	d000      	beq.n	c2750 <_strtod_l+0x2f0>
   c274e:	4276      	negs	r6, r6
   c2750:	2d00      	cmp	r5, #0
   c2752:	d14d      	bne.n	c27f0 <_strtod_l+0x390>
   c2754:	9904      	ldr	r1, [sp, #16]
   c2756:	4301      	orrs	r1, r0
   c2758:	f47f aec6 	bne.w	c24e8 <_strtod_l+0x88>
   c275c:	2b00      	cmp	r3, #0
   c275e:	f47f aee1 	bne.w	c2524 <_strtod_l+0xc4>
   c2762:	2a69      	cmp	r2, #105	; 0x69
   c2764:	d027      	beq.n	c27b6 <_strtod_l+0x356>
   c2766:	dc24      	bgt.n	c27b2 <_strtod_l+0x352>
   c2768:	2a49      	cmp	r2, #73	; 0x49
   c276a:	d024      	beq.n	c27b6 <_strtod_l+0x356>
   c276c:	2a4e      	cmp	r2, #78	; 0x4e
   c276e:	f47f aed9 	bne.w	c2524 <_strtod_l+0xc4>
   c2772:	499f      	ldr	r1, [pc, #636]	; (c29f0 <_strtod_l+0x590>)
   c2774:	a817      	add	r0, sp, #92	; 0x5c
   c2776:	f001 f833 	bl	c37e0 <__match>
   c277a:	2800      	cmp	r0, #0
   c277c:	f43f aed2 	beq.w	c2524 <_strtod_l+0xc4>
   c2780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2782:	781b      	ldrb	r3, [r3, #0]
   c2784:	2b28      	cmp	r3, #40	; 0x28
   c2786:	d12d      	bne.n	c27e4 <_strtod_l+0x384>
   c2788:	499a      	ldr	r1, [pc, #616]	; (c29f4 <_strtod_l+0x594>)
   c278a:	aa1a      	add	r2, sp, #104	; 0x68
   c278c:	a817      	add	r0, sp, #92	; 0x5c
   c278e:	f001 f83b 	bl	c3808 <__hexnan>
   c2792:	2805      	cmp	r0, #5
   c2794:	d126      	bne.n	c27e4 <_strtod_l+0x384>
   c2796:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c2798:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c279c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c27a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c27a4:	e6a0      	b.n	c24e8 <_strtod_l+0x88>
   c27a6:	210a      	movs	r1, #10
   c27a8:	fb01 2e0e 	mla	lr, r1, lr, r2
   c27ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c27b0:	e7b9      	b.n	c2726 <_strtod_l+0x2c6>
   c27b2:	2a6e      	cmp	r2, #110	; 0x6e
   c27b4:	e7db      	b.n	c276e <_strtod_l+0x30e>
   c27b6:	4990      	ldr	r1, [pc, #576]	; (c29f8 <_strtod_l+0x598>)
   c27b8:	a817      	add	r0, sp, #92	; 0x5c
   c27ba:	f001 f811 	bl	c37e0 <__match>
   c27be:	2800      	cmp	r0, #0
   c27c0:	f43f aeb0 	beq.w	c2524 <_strtod_l+0xc4>
   c27c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c27c6:	498d      	ldr	r1, [pc, #564]	; (c29fc <_strtod_l+0x59c>)
   c27c8:	3b01      	subs	r3, #1
   c27ca:	a817      	add	r0, sp, #92	; 0x5c
   c27cc:	9317      	str	r3, [sp, #92]	; 0x5c
   c27ce:	f001 f807 	bl	c37e0 <__match>
   c27d2:	b910      	cbnz	r0, c27da <_strtod_l+0x37a>
   c27d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c27d6:	3301      	adds	r3, #1
   c27d8:	9317      	str	r3, [sp, #92]	; 0x5c
   c27da:	f8df b230 	ldr.w	fp, [pc, #560]	; c2a0c <_strtod_l+0x5ac>
   c27de:	f04f 0a00 	mov.w	sl, #0
   c27e2:	e681      	b.n	c24e8 <_strtod_l+0x88>
   c27e4:	4886      	ldr	r0, [pc, #536]	; (c2a00 <_strtod_l+0x5a0>)
   c27e6:	f001 fd93 	bl	c4310 <nan>
   c27ea:	ec5b ab10 	vmov	sl, fp, d0
   c27ee:	e67b      	b.n	c24e8 <_strtod_l+0x88>
   c27f0:	9b05      	ldr	r3, [sp, #20]
   c27f2:	9807      	ldr	r0, [sp, #28]
   c27f4:	1af3      	subs	r3, r6, r3
   c27f6:	2f00      	cmp	r7, #0
   c27f8:	bf08      	it	eq
   c27fa:	462f      	moveq	r7, r5
   c27fc:	2d10      	cmp	r5, #16
   c27fe:	9306      	str	r3, [sp, #24]
   c2800:	46a8      	mov	r8, r5
   c2802:	bfa8      	it	ge
   c2804:	f04f 0810 	movge.w	r8, #16
   c2808:	f7ff f8da 	bl	c19c0 <__aeabi_ui2d>
   c280c:	2d09      	cmp	r5, #9
   c280e:	4682      	mov	sl, r0
   c2810:	468b      	mov	fp, r1
   c2812:	dd13      	ble.n	c283c <_strtod_l+0x3dc>
   c2814:	4b7b      	ldr	r3, [pc, #492]	; (c2a04 <_strtod_l+0x5a4>)
   c2816:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c281a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c281e:	f7ff f949 	bl	c1ab4 <__aeabi_dmul>
   c2822:	4682      	mov	sl, r0
   c2824:	4648      	mov	r0, r9
   c2826:	468b      	mov	fp, r1
   c2828:	f7ff f8ca 	bl	c19c0 <__aeabi_ui2d>
   c282c:	4602      	mov	r2, r0
   c282e:	460b      	mov	r3, r1
   c2830:	4650      	mov	r0, sl
   c2832:	4659      	mov	r1, fp
   c2834:	f7fe ff88 	bl	c1748 <__adddf3>
   c2838:	4682      	mov	sl, r0
   c283a:	468b      	mov	fp, r1
   c283c:	2d0f      	cmp	r5, #15
   c283e:	dc38      	bgt.n	c28b2 <_strtod_l+0x452>
   c2840:	9b06      	ldr	r3, [sp, #24]
   c2842:	2b00      	cmp	r3, #0
   c2844:	f43f ae50 	beq.w	c24e8 <_strtod_l+0x88>
   c2848:	dd24      	ble.n	c2894 <_strtod_l+0x434>
   c284a:	2b16      	cmp	r3, #22
   c284c:	dc0b      	bgt.n	c2866 <_strtod_l+0x406>
   c284e:	496d      	ldr	r1, [pc, #436]	; (c2a04 <_strtod_l+0x5a4>)
   c2850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c2854:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2858:	4652      	mov	r2, sl
   c285a:	465b      	mov	r3, fp
   c285c:	f7ff f92a 	bl	c1ab4 <__aeabi_dmul>
   c2860:	4682      	mov	sl, r0
   c2862:	468b      	mov	fp, r1
   c2864:	e640      	b.n	c24e8 <_strtod_l+0x88>
   c2866:	9a06      	ldr	r2, [sp, #24]
   c2868:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c286c:	4293      	cmp	r3, r2
   c286e:	db20      	blt.n	c28b2 <_strtod_l+0x452>
   c2870:	4c64      	ldr	r4, [pc, #400]	; (c2a04 <_strtod_l+0x5a4>)
   c2872:	f1c5 050f 	rsb	r5, r5, #15
   c2876:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c287a:	4652      	mov	r2, sl
   c287c:	465b      	mov	r3, fp
   c287e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2882:	f7ff f917 	bl	c1ab4 <__aeabi_dmul>
   c2886:	9b06      	ldr	r3, [sp, #24]
   c2888:	1b5d      	subs	r5, r3, r5
   c288a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c288e:	e9d4 2300 	ldrd	r2, r3, [r4]
   c2892:	e7e3      	b.n	c285c <_strtod_l+0x3fc>
   c2894:	9b06      	ldr	r3, [sp, #24]
   c2896:	3316      	adds	r3, #22
   c2898:	db0b      	blt.n	c28b2 <_strtod_l+0x452>
   c289a:	9b05      	ldr	r3, [sp, #20]
   c289c:	1b9e      	subs	r6, r3, r6
   c289e:	4b59      	ldr	r3, [pc, #356]	; (c2a04 <_strtod_l+0x5a4>)
   c28a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c28a4:	e9d6 2300 	ldrd	r2, r3, [r6]
   c28a8:	4650      	mov	r0, sl
   c28aa:	4659      	mov	r1, fp
   c28ac:	f7ff fa2c 	bl	c1d08 <__aeabi_ddiv>
   c28b0:	e7d6      	b.n	c2860 <_strtod_l+0x400>
   c28b2:	9b06      	ldr	r3, [sp, #24]
   c28b4:	eba5 0808 	sub.w	r8, r5, r8
   c28b8:	4498      	add	r8, r3
   c28ba:	f1b8 0f00 	cmp.w	r8, #0
   c28be:	dd74      	ble.n	c29aa <_strtod_l+0x54a>
   c28c0:	f018 030f 	ands.w	r3, r8, #15
   c28c4:	d00a      	beq.n	c28dc <_strtod_l+0x47c>
   c28c6:	494f      	ldr	r1, [pc, #316]	; (c2a04 <_strtod_l+0x5a4>)
   c28c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c28cc:	4652      	mov	r2, sl
   c28ce:	465b      	mov	r3, fp
   c28d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   c28d4:	f7ff f8ee 	bl	c1ab4 <__aeabi_dmul>
   c28d8:	4682      	mov	sl, r0
   c28da:	468b      	mov	fp, r1
   c28dc:	f038 080f 	bics.w	r8, r8, #15
   c28e0:	d04f      	beq.n	c2982 <_strtod_l+0x522>
   c28e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c28e6:	dd22      	ble.n	c292e <_strtod_l+0x4ce>
   c28e8:	2500      	movs	r5, #0
   c28ea:	462e      	mov	r6, r5
   c28ec:	9507      	str	r5, [sp, #28]
   c28ee:	9505      	str	r5, [sp, #20]
   c28f0:	2322      	movs	r3, #34	; 0x22
   c28f2:	f8df b118 	ldr.w	fp, [pc, #280]	; c2a0c <_strtod_l+0x5ac>
   c28f6:	6023      	str	r3, [r4, #0]
   c28f8:	f04f 0a00 	mov.w	sl, #0
   c28fc:	9b07      	ldr	r3, [sp, #28]
   c28fe:	2b00      	cmp	r3, #0
   c2900:	f43f adf2 	beq.w	c24e8 <_strtod_l+0x88>
   c2904:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2906:	4620      	mov	r0, r4
   c2908:	f001 f870 	bl	c39ec <_Bfree>
   c290c:	9905      	ldr	r1, [sp, #20]
   c290e:	4620      	mov	r0, r4
   c2910:	f001 f86c 	bl	c39ec <_Bfree>
   c2914:	4631      	mov	r1, r6
   c2916:	4620      	mov	r0, r4
   c2918:	f001 f868 	bl	c39ec <_Bfree>
   c291c:	9907      	ldr	r1, [sp, #28]
   c291e:	4620      	mov	r0, r4
   c2920:	f001 f864 	bl	c39ec <_Bfree>
   c2924:	4629      	mov	r1, r5
   c2926:	4620      	mov	r0, r4
   c2928:	f001 f860 	bl	c39ec <_Bfree>
   c292c:	e5dc      	b.n	c24e8 <_strtod_l+0x88>
   c292e:	4b36      	ldr	r3, [pc, #216]	; (c2a08 <_strtod_l+0x5a8>)
   c2930:	9304      	str	r3, [sp, #16]
   c2932:	2300      	movs	r3, #0
   c2934:	ea4f 1828 	mov.w	r8, r8, asr #4
   c2938:	4650      	mov	r0, sl
   c293a:	4659      	mov	r1, fp
   c293c:	4699      	mov	r9, r3
   c293e:	f1b8 0f01 	cmp.w	r8, #1
   c2942:	dc21      	bgt.n	c2988 <_strtod_l+0x528>
   c2944:	b10b      	cbz	r3, c294a <_strtod_l+0x4ea>
   c2946:	4682      	mov	sl, r0
   c2948:	468b      	mov	fp, r1
   c294a:	4b2f      	ldr	r3, [pc, #188]	; (c2a08 <_strtod_l+0x5a8>)
   c294c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c2950:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c2954:	4652      	mov	r2, sl
   c2956:	465b      	mov	r3, fp
   c2958:	e9d9 0100 	ldrd	r0, r1, [r9]
   c295c:	f7ff f8aa 	bl	c1ab4 <__aeabi_dmul>
   c2960:	4b2a      	ldr	r3, [pc, #168]	; (c2a0c <_strtod_l+0x5ac>)
   c2962:	460a      	mov	r2, r1
   c2964:	400b      	ands	r3, r1
   c2966:	492a      	ldr	r1, [pc, #168]	; (c2a10 <_strtod_l+0x5b0>)
   c2968:	428b      	cmp	r3, r1
   c296a:	4682      	mov	sl, r0
   c296c:	d8bc      	bhi.n	c28e8 <_strtod_l+0x488>
   c296e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c2972:	428b      	cmp	r3, r1
   c2974:	bf86      	itte	hi
   c2976:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c2a14 <_strtod_l+0x5b4>
   c297a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c297e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c2982:	2300      	movs	r3, #0
   c2984:	9304      	str	r3, [sp, #16]
   c2986:	e084      	b.n	c2a92 <_strtod_l+0x632>
   c2988:	f018 0f01 	tst.w	r8, #1
   c298c:	d005      	beq.n	c299a <_strtod_l+0x53a>
   c298e:	9b04      	ldr	r3, [sp, #16]
   c2990:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2994:	f7ff f88e 	bl	c1ab4 <__aeabi_dmul>
   c2998:	2301      	movs	r3, #1
   c299a:	9a04      	ldr	r2, [sp, #16]
   c299c:	3208      	adds	r2, #8
   c299e:	f109 0901 	add.w	r9, r9, #1
   c29a2:	ea4f 0868 	mov.w	r8, r8, asr #1
   c29a6:	9204      	str	r2, [sp, #16]
   c29a8:	e7c9      	b.n	c293e <_strtod_l+0x4de>
   c29aa:	d0ea      	beq.n	c2982 <_strtod_l+0x522>
   c29ac:	f1c8 0800 	rsb	r8, r8, #0
   c29b0:	f018 020f 	ands.w	r2, r8, #15
   c29b4:	d00a      	beq.n	c29cc <_strtod_l+0x56c>
   c29b6:	4b13      	ldr	r3, [pc, #76]	; (c2a04 <_strtod_l+0x5a4>)
   c29b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c29bc:	4650      	mov	r0, sl
   c29be:	4659      	mov	r1, fp
   c29c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29c4:	f7ff f9a0 	bl	c1d08 <__aeabi_ddiv>
   c29c8:	4682      	mov	sl, r0
   c29ca:	468b      	mov	fp, r1
   c29cc:	ea5f 1828 	movs.w	r8, r8, asr #4
   c29d0:	d0d7      	beq.n	c2982 <_strtod_l+0x522>
   c29d2:	f1b8 0f1f 	cmp.w	r8, #31
   c29d6:	dd1f      	ble.n	c2a18 <_strtod_l+0x5b8>
   c29d8:	2500      	movs	r5, #0
   c29da:	462e      	mov	r6, r5
   c29dc:	9507      	str	r5, [sp, #28]
   c29de:	9505      	str	r5, [sp, #20]
   c29e0:	2322      	movs	r3, #34	; 0x22
   c29e2:	f04f 0a00 	mov.w	sl, #0
   c29e6:	f04f 0b00 	mov.w	fp, #0
   c29ea:	6023      	str	r3, [r4, #0]
   c29ec:	e786      	b.n	c28fc <_strtod_l+0x49c>
   c29ee:	bf00      	nop
   c29f0:	000c5b95 	.word	0x000c5b95
   c29f4:	000c5da4 	.word	0x000c5da4
   c29f8:	000c5b99 	.word	0x000c5b99
   c29fc:	000c5d89 	.word	0x000c5d89
   c2a00:	000c5acb 	.word	0x000c5acb
   c2a04:	000c5fe8 	.word	0x000c5fe8
   c2a08:	000c5fc0 	.word	0x000c5fc0
   c2a0c:	7ff00000 	.word	0x7ff00000
   c2a10:	7ca00000 	.word	0x7ca00000
   c2a14:	7fefffff 	.word	0x7fefffff
   c2a18:	f018 0310 	ands.w	r3, r8, #16
   c2a1c:	bf18      	it	ne
   c2a1e:	236a      	movne	r3, #106	; 0x6a
   c2a20:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c2dd0 <_strtod_l+0x970>
   c2a24:	9304      	str	r3, [sp, #16]
   c2a26:	4650      	mov	r0, sl
   c2a28:	4659      	mov	r1, fp
   c2a2a:	2300      	movs	r3, #0
   c2a2c:	f018 0f01 	tst.w	r8, #1
   c2a30:	d004      	beq.n	c2a3c <_strtod_l+0x5dc>
   c2a32:	e9d9 2300 	ldrd	r2, r3, [r9]
   c2a36:	f7ff f83d 	bl	c1ab4 <__aeabi_dmul>
   c2a3a:	2301      	movs	r3, #1
   c2a3c:	ea5f 0868 	movs.w	r8, r8, asr #1
   c2a40:	f109 0908 	add.w	r9, r9, #8
   c2a44:	d1f2      	bne.n	c2a2c <_strtod_l+0x5cc>
   c2a46:	b10b      	cbz	r3, c2a4c <_strtod_l+0x5ec>
   c2a48:	4682      	mov	sl, r0
   c2a4a:	468b      	mov	fp, r1
   c2a4c:	9b04      	ldr	r3, [sp, #16]
   c2a4e:	b1c3      	cbz	r3, c2a82 <_strtod_l+0x622>
   c2a50:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c2a54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c2a58:	2b00      	cmp	r3, #0
   c2a5a:	4659      	mov	r1, fp
   c2a5c:	dd11      	ble.n	c2a82 <_strtod_l+0x622>
   c2a5e:	2b1f      	cmp	r3, #31
   c2a60:	f340 8124 	ble.w	c2cac <_strtod_l+0x84c>
   c2a64:	2b34      	cmp	r3, #52	; 0x34
   c2a66:	bfde      	ittt	le
   c2a68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c2a6c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c2a70:	fa03 f202 	lslle.w	r2, r3, r2
   c2a74:	f04f 0a00 	mov.w	sl, #0
   c2a78:	bfcc      	ite	gt
   c2a7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c2a7e:	ea02 0b01 	andle.w	fp, r2, r1
   c2a82:	2200      	movs	r2, #0
   c2a84:	2300      	movs	r3, #0
   c2a86:	4650      	mov	r0, sl
   c2a88:	4659      	mov	r1, fp
   c2a8a:	f7ff fa7b 	bl	c1f84 <__aeabi_dcmpeq>
   c2a8e:	2800      	cmp	r0, #0
   c2a90:	d1a2      	bne.n	c29d8 <_strtod_l+0x578>
   c2a92:	9b07      	ldr	r3, [sp, #28]
   c2a94:	9300      	str	r3, [sp, #0]
   c2a96:	9908      	ldr	r1, [sp, #32]
   c2a98:	462b      	mov	r3, r5
   c2a9a:	463a      	mov	r2, r7
   c2a9c:	4620      	mov	r0, r4
   c2a9e:	f001 f80d 	bl	c3abc <__s2b>
   c2aa2:	9007      	str	r0, [sp, #28]
   c2aa4:	2800      	cmp	r0, #0
   c2aa6:	f43f af1f 	beq.w	c28e8 <_strtod_l+0x488>
   c2aaa:	9b05      	ldr	r3, [sp, #20]
   c2aac:	1b9e      	subs	r6, r3, r6
   c2aae:	9b06      	ldr	r3, [sp, #24]
   c2ab0:	2b00      	cmp	r3, #0
   c2ab2:	bfb4      	ite	lt
   c2ab4:	4633      	movlt	r3, r6
   c2ab6:	2300      	movge	r3, #0
   c2ab8:	930c      	str	r3, [sp, #48]	; 0x30
   c2aba:	9b06      	ldr	r3, [sp, #24]
   c2abc:	2500      	movs	r5, #0
   c2abe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2ac2:	9312      	str	r3, [sp, #72]	; 0x48
   c2ac4:	462e      	mov	r6, r5
   c2ac6:	9b07      	ldr	r3, [sp, #28]
   c2ac8:	4620      	mov	r0, r4
   c2aca:	6859      	ldr	r1, [r3, #4]
   c2acc:	f000 ff4e 	bl	c396c <_Balloc>
   c2ad0:	9005      	str	r0, [sp, #20]
   c2ad2:	2800      	cmp	r0, #0
   c2ad4:	f43f af0c 	beq.w	c28f0 <_strtod_l+0x490>
   c2ad8:	9b07      	ldr	r3, [sp, #28]
   c2ada:	691a      	ldr	r2, [r3, #16]
   c2adc:	3202      	adds	r2, #2
   c2ade:	f103 010c 	add.w	r1, r3, #12
   c2ae2:	0092      	lsls	r2, r2, #2
   c2ae4:	300c      	adds	r0, #12
   c2ae6:	f7ff fb71 	bl	c21cc <memcpy>
   c2aea:	ec4b ab10 	vmov	d0, sl, fp
   c2aee:	aa1a      	add	r2, sp, #104	; 0x68
   c2af0:	a919      	add	r1, sp, #100	; 0x64
   c2af2:	4620      	mov	r0, r4
   c2af4:	f001 fb28 	bl	c4148 <__d2b>
   c2af8:	ec4b ab18 	vmov	d8, sl, fp
   c2afc:	9018      	str	r0, [sp, #96]	; 0x60
   c2afe:	2800      	cmp	r0, #0
   c2b00:	f43f aef6 	beq.w	c28f0 <_strtod_l+0x490>
   c2b04:	2101      	movs	r1, #1
   c2b06:	4620      	mov	r0, r4
   c2b08:	f001 f872 	bl	c3bf0 <__i2b>
   c2b0c:	4606      	mov	r6, r0
   c2b0e:	2800      	cmp	r0, #0
   c2b10:	f43f aeee 	beq.w	c28f0 <_strtod_l+0x490>
   c2b14:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c2b16:	9904      	ldr	r1, [sp, #16]
   c2b18:	2b00      	cmp	r3, #0
   c2b1a:	bfab      	itete	ge
   c2b1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c2b1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c2b20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c2b22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c2b26:	bfac      	ite	ge
   c2b28:	eb03 0902 	addge.w	r9, r3, r2
   c2b2c:	1ad7      	sublt	r7, r2, r3
   c2b2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c2b30:	eba3 0801 	sub.w	r8, r3, r1
   c2b34:	4490      	add	r8, r2
   c2b36:	4ba1      	ldr	r3, [pc, #644]	; (c2dbc <_strtod_l+0x95c>)
   c2b38:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c2b3c:	4598      	cmp	r8, r3
   c2b3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c2b42:	f280 80c7 	bge.w	c2cd4 <_strtod_l+0x874>
   c2b46:	eba3 0308 	sub.w	r3, r3, r8
   c2b4a:	2b1f      	cmp	r3, #31
   c2b4c:	eba2 0203 	sub.w	r2, r2, r3
   c2b50:	f04f 0101 	mov.w	r1, #1
   c2b54:	f300 80b1 	bgt.w	c2cba <_strtod_l+0x85a>
   c2b58:	fa01 f303 	lsl.w	r3, r1, r3
   c2b5c:	930d      	str	r3, [sp, #52]	; 0x34
   c2b5e:	2300      	movs	r3, #0
   c2b60:	9308      	str	r3, [sp, #32]
   c2b62:	eb09 0802 	add.w	r8, r9, r2
   c2b66:	9b04      	ldr	r3, [sp, #16]
   c2b68:	45c1      	cmp	r9, r8
   c2b6a:	4417      	add	r7, r2
   c2b6c:	441f      	add	r7, r3
   c2b6e:	464b      	mov	r3, r9
   c2b70:	bfa8      	it	ge
   c2b72:	4643      	movge	r3, r8
   c2b74:	42bb      	cmp	r3, r7
   c2b76:	bfa8      	it	ge
   c2b78:	463b      	movge	r3, r7
   c2b7a:	2b00      	cmp	r3, #0
   c2b7c:	bfc2      	ittt	gt
   c2b7e:	eba8 0803 	subgt.w	r8, r8, r3
   c2b82:	1aff      	subgt	r7, r7, r3
   c2b84:	eba9 0903 	subgt.w	r9, r9, r3
   c2b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c2b8a:	2b00      	cmp	r3, #0
   c2b8c:	dd17      	ble.n	c2bbe <_strtod_l+0x75e>
   c2b8e:	4631      	mov	r1, r6
   c2b90:	461a      	mov	r2, r3
   c2b92:	4620      	mov	r0, r4
   c2b94:	f001 f8ec 	bl	c3d70 <__pow5mult>
   c2b98:	4606      	mov	r6, r0
   c2b9a:	2800      	cmp	r0, #0
   c2b9c:	f43f aea8 	beq.w	c28f0 <_strtod_l+0x490>
   c2ba0:	4601      	mov	r1, r0
   c2ba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c2ba4:	4620      	mov	r0, r4
   c2ba6:	f001 f839 	bl	c3c1c <__multiply>
   c2baa:	900b      	str	r0, [sp, #44]	; 0x2c
   c2bac:	2800      	cmp	r0, #0
   c2bae:	f43f ae9f 	beq.w	c28f0 <_strtod_l+0x490>
   c2bb2:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2bb4:	4620      	mov	r0, r4
   c2bb6:	f000 ff19 	bl	c39ec <_Bfree>
   c2bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2bbc:	9318      	str	r3, [sp, #96]	; 0x60
   c2bbe:	f1b8 0f00 	cmp.w	r8, #0
   c2bc2:	f300 808c 	bgt.w	c2cde <_strtod_l+0x87e>
   c2bc6:	9b06      	ldr	r3, [sp, #24]
   c2bc8:	2b00      	cmp	r3, #0
   c2bca:	dd08      	ble.n	c2bde <_strtod_l+0x77e>
   c2bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c2bce:	9905      	ldr	r1, [sp, #20]
   c2bd0:	4620      	mov	r0, r4
   c2bd2:	f001 f8cd 	bl	c3d70 <__pow5mult>
   c2bd6:	9005      	str	r0, [sp, #20]
   c2bd8:	2800      	cmp	r0, #0
   c2bda:	f43f ae89 	beq.w	c28f0 <_strtod_l+0x490>
   c2bde:	2f00      	cmp	r7, #0
   c2be0:	dd08      	ble.n	c2bf4 <_strtod_l+0x794>
   c2be2:	9905      	ldr	r1, [sp, #20]
   c2be4:	463a      	mov	r2, r7
   c2be6:	4620      	mov	r0, r4
   c2be8:	f001 f91c 	bl	c3e24 <__lshift>
   c2bec:	9005      	str	r0, [sp, #20]
   c2bee:	2800      	cmp	r0, #0
   c2bf0:	f43f ae7e 	beq.w	c28f0 <_strtod_l+0x490>
   c2bf4:	f1b9 0f00 	cmp.w	r9, #0
   c2bf8:	dd08      	ble.n	c2c0c <_strtod_l+0x7ac>
   c2bfa:	4631      	mov	r1, r6
   c2bfc:	464a      	mov	r2, r9
   c2bfe:	4620      	mov	r0, r4
   c2c00:	f001 f910 	bl	c3e24 <__lshift>
   c2c04:	4606      	mov	r6, r0
   c2c06:	2800      	cmp	r0, #0
   c2c08:	f43f ae72 	beq.w	c28f0 <_strtod_l+0x490>
   c2c0c:	9a05      	ldr	r2, [sp, #20]
   c2c0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2c10:	4620      	mov	r0, r4
   c2c12:	f001 f993 	bl	c3f3c <__mdiff>
   c2c16:	4605      	mov	r5, r0
   c2c18:	2800      	cmp	r0, #0
   c2c1a:	f43f ae69 	beq.w	c28f0 <_strtod_l+0x490>
   c2c1e:	68c3      	ldr	r3, [r0, #12]
   c2c20:	930b      	str	r3, [sp, #44]	; 0x2c
   c2c22:	2300      	movs	r3, #0
   c2c24:	60c3      	str	r3, [r0, #12]
   c2c26:	4631      	mov	r1, r6
   c2c28:	f001 f96c 	bl	c3f04 <__mcmp>
   c2c2c:	2800      	cmp	r0, #0
   c2c2e:	da60      	bge.n	c2cf2 <_strtod_l+0x892>
   c2c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2c32:	ea53 030a 	orrs.w	r3, r3, sl
   c2c36:	f040 8082 	bne.w	c2d3e <_strtod_l+0x8de>
   c2c3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2c3e:	2b00      	cmp	r3, #0
   c2c40:	d17d      	bne.n	c2d3e <_strtod_l+0x8de>
   c2c42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c2c46:	0d1b      	lsrs	r3, r3, #20
   c2c48:	051b      	lsls	r3, r3, #20
   c2c4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c2c4e:	d976      	bls.n	c2d3e <_strtod_l+0x8de>
   c2c50:	696b      	ldr	r3, [r5, #20]
   c2c52:	b913      	cbnz	r3, c2c5a <_strtod_l+0x7fa>
   c2c54:	692b      	ldr	r3, [r5, #16]
   c2c56:	2b01      	cmp	r3, #1
   c2c58:	dd71      	ble.n	c2d3e <_strtod_l+0x8de>
   c2c5a:	4629      	mov	r1, r5
   c2c5c:	2201      	movs	r2, #1
   c2c5e:	4620      	mov	r0, r4
   c2c60:	f001 f8e0 	bl	c3e24 <__lshift>
   c2c64:	4631      	mov	r1, r6
   c2c66:	4605      	mov	r5, r0
   c2c68:	f001 f94c 	bl	c3f04 <__mcmp>
   c2c6c:	2800      	cmp	r0, #0
   c2c6e:	dd66      	ble.n	c2d3e <_strtod_l+0x8de>
   c2c70:	9904      	ldr	r1, [sp, #16]
   c2c72:	4a53      	ldr	r2, [pc, #332]	; (c2dc0 <_strtod_l+0x960>)
   c2c74:	465b      	mov	r3, fp
   c2c76:	2900      	cmp	r1, #0
   c2c78:	f000 8081 	beq.w	c2d7e <_strtod_l+0x91e>
   c2c7c:	ea02 010b 	and.w	r1, r2, fp
   c2c80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c2c84:	dc7b      	bgt.n	c2d7e <_strtod_l+0x91e>
   c2c86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c2c8a:	f77f aea9 	ble.w	c29e0 <_strtod_l+0x580>
   c2c8e:	4b4d      	ldr	r3, [pc, #308]	; (c2dc4 <_strtod_l+0x964>)
   c2c90:	4650      	mov	r0, sl
   c2c92:	4659      	mov	r1, fp
   c2c94:	2200      	movs	r2, #0
   c2c96:	f7fe ff0d 	bl	c1ab4 <__aeabi_dmul>
   c2c9a:	460b      	mov	r3, r1
   c2c9c:	4303      	orrs	r3, r0
   c2c9e:	bf08      	it	eq
   c2ca0:	2322      	moveq	r3, #34	; 0x22
   c2ca2:	4682      	mov	sl, r0
   c2ca4:	468b      	mov	fp, r1
   c2ca6:	bf08      	it	eq
   c2ca8:	6023      	streq	r3, [r4, #0]
   c2caa:	e62b      	b.n	c2904 <_strtod_l+0x4a4>
   c2cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2cb0:	fa02 f303 	lsl.w	r3, r2, r3
   c2cb4:	ea03 0a0a 	and.w	sl, r3, sl
   c2cb8:	e6e3      	b.n	c2a82 <_strtod_l+0x622>
   c2cba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c2cbe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c2cc2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c2cc6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c2cca:	fa01 f308 	lsl.w	r3, r1, r8
   c2cce:	9308      	str	r3, [sp, #32]
   c2cd0:	910d      	str	r1, [sp, #52]	; 0x34
   c2cd2:	e746      	b.n	c2b62 <_strtod_l+0x702>
   c2cd4:	2300      	movs	r3, #0
   c2cd6:	9308      	str	r3, [sp, #32]
   c2cd8:	2301      	movs	r3, #1
   c2cda:	930d      	str	r3, [sp, #52]	; 0x34
   c2cdc:	e741      	b.n	c2b62 <_strtod_l+0x702>
   c2cde:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2ce0:	4642      	mov	r2, r8
   c2ce2:	4620      	mov	r0, r4
   c2ce4:	f001 f89e 	bl	c3e24 <__lshift>
   c2ce8:	9018      	str	r0, [sp, #96]	; 0x60
   c2cea:	2800      	cmp	r0, #0
   c2cec:	f47f af6b 	bne.w	c2bc6 <_strtod_l+0x766>
   c2cf0:	e5fe      	b.n	c28f0 <_strtod_l+0x490>
   c2cf2:	465f      	mov	r7, fp
   c2cf4:	d16e      	bne.n	c2dd4 <_strtod_l+0x974>
   c2cf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2cf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2cfc:	b342      	cbz	r2, c2d50 <_strtod_l+0x8f0>
   c2cfe:	4a32      	ldr	r2, [pc, #200]	; (c2dc8 <_strtod_l+0x968>)
   c2d00:	4293      	cmp	r3, r2
   c2d02:	d128      	bne.n	c2d56 <_strtod_l+0x8f6>
   c2d04:	9b04      	ldr	r3, [sp, #16]
   c2d06:	4651      	mov	r1, sl
   c2d08:	b1eb      	cbz	r3, c2d46 <_strtod_l+0x8e6>
   c2d0a:	4b2d      	ldr	r3, [pc, #180]	; (c2dc0 <_strtod_l+0x960>)
   c2d0c:	403b      	ands	r3, r7
   c2d0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c2d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2d16:	d819      	bhi.n	c2d4c <_strtod_l+0x8ec>
   c2d18:	0d1b      	lsrs	r3, r3, #20
   c2d1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c2d1e:	fa02 f303 	lsl.w	r3, r2, r3
   c2d22:	4299      	cmp	r1, r3
   c2d24:	d117      	bne.n	c2d56 <_strtod_l+0x8f6>
   c2d26:	4b29      	ldr	r3, [pc, #164]	; (c2dcc <_strtod_l+0x96c>)
   c2d28:	429f      	cmp	r7, r3
   c2d2a:	d102      	bne.n	c2d32 <_strtod_l+0x8d2>
   c2d2c:	3101      	adds	r1, #1
   c2d2e:	f43f addf 	beq.w	c28f0 <_strtod_l+0x490>
   c2d32:	4b23      	ldr	r3, [pc, #140]	; (c2dc0 <_strtod_l+0x960>)
   c2d34:	403b      	ands	r3, r7
   c2d36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c2d3a:	f04f 0a00 	mov.w	sl, #0
   c2d3e:	9b04      	ldr	r3, [sp, #16]
   c2d40:	2b00      	cmp	r3, #0
   c2d42:	d1a4      	bne.n	c2c8e <_strtod_l+0x82e>
   c2d44:	e5de      	b.n	c2904 <_strtod_l+0x4a4>
   c2d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2d4a:	e7ea      	b.n	c2d22 <_strtod_l+0x8c2>
   c2d4c:	4613      	mov	r3, r2
   c2d4e:	e7e8      	b.n	c2d22 <_strtod_l+0x8c2>
   c2d50:	ea53 030a 	orrs.w	r3, r3, sl
   c2d54:	d08c      	beq.n	c2c70 <_strtod_l+0x810>
   c2d56:	9b08      	ldr	r3, [sp, #32]
   c2d58:	b1db      	cbz	r3, c2d92 <_strtod_l+0x932>
   c2d5a:	423b      	tst	r3, r7
   c2d5c:	d0ef      	beq.n	c2d3e <_strtod_l+0x8de>
   c2d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2d60:	9a04      	ldr	r2, [sp, #16]
   c2d62:	4650      	mov	r0, sl
   c2d64:	4659      	mov	r1, fp
   c2d66:	b1c3      	cbz	r3, c2d9a <_strtod_l+0x93a>
   c2d68:	f7ff fb5b 	bl	c2422 <sulp>
   c2d6c:	4602      	mov	r2, r0
   c2d6e:	460b      	mov	r3, r1
   c2d70:	ec51 0b18 	vmov	r0, r1, d8
   c2d74:	f7fe fce8 	bl	c1748 <__adddf3>
   c2d78:	4682      	mov	sl, r0
   c2d7a:	468b      	mov	fp, r1
   c2d7c:	e7df      	b.n	c2d3e <_strtod_l+0x8de>
   c2d7e:	4013      	ands	r3, r2
   c2d80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c2d84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c2d88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c2d8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c2d90:	e7d5      	b.n	c2d3e <_strtod_l+0x8de>
   c2d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2d94:	ea13 0f0a 	tst.w	r3, sl
   c2d98:	e7e0      	b.n	c2d5c <_strtod_l+0x8fc>
   c2d9a:	f7ff fb42 	bl	c2422 <sulp>
   c2d9e:	4602      	mov	r2, r0
   c2da0:	460b      	mov	r3, r1
   c2da2:	ec51 0b18 	vmov	r0, r1, d8
   c2da6:	f7fe fccd 	bl	c1744 <__aeabi_dsub>
   c2daa:	2200      	movs	r2, #0
   c2dac:	2300      	movs	r3, #0
   c2dae:	4682      	mov	sl, r0
   c2db0:	468b      	mov	fp, r1
   c2db2:	f7ff f8e7 	bl	c1f84 <__aeabi_dcmpeq>
   c2db6:	2800      	cmp	r0, #0
   c2db8:	d0c1      	beq.n	c2d3e <_strtod_l+0x8de>
   c2dba:	e611      	b.n	c29e0 <_strtod_l+0x580>
   c2dbc:	fffffc02 	.word	0xfffffc02
   c2dc0:	7ff00000 	.word	0x7ff00000
   c2dc4:	39500000 	.word	0x39500000
   c2dc8:	000fffff 	.word	0x000fffff
   c2dcc:	7fefffff 	.word	0x7fefffff
   c2dd0:	000c5db8 	.word	0x000c5db8
   c2dd4:	4631      	mov	r1, r6
   c2dd6:	4628      	mov	r0, r5
   c2dd8:	f001 fa12 	bl	c4200 <__ratio>
   c2ddc:	ec59 8b10 	vmov	r8, r9, d0
   c2de0:	ee10 0a10 	vmov	r0, s0
   c2de4:	2200      	movs	r2, #0
   c2de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c2dea:	4649      	mov	r1, r9
   c2dec:	f7ff f8de 	bl	c1fac <__aeabi_dcmple>
   c2df0:	2800      	cmp	r0, #0
   c2df2:	d07a      	beq.n	c2eea <_strtod_l+0xa8a>
   c2df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2df6:	2b00      	cmp	r3, #0
   c2df8:	d04a      	beq.n	c2e90 <_strtod_l+0xa30>
   c2dfa:	4b95      	ldr	r3, [pc, #596]	; (c3050 <_strtod_l+0xbf0>)
   c2dfc:	2200      	movs	r2, #0
   c2dfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2e02:	f8df 924c 	ldr.w	r9, [pc, #588]	; c3050 <_strtod_l+0xbf0>
   c2e06:	f04f 0800 	mov.w	r8, #0
   c2e0a:	4b92      	ldr	r3, [pc, #584]	; (c3054 <_strtod_l+0xbf4>)
   c2e0c:	403b      	ands	r3, r7
   c2e0e:	930d      	str	r3, [sp, #52]	; 0x34
   c2e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2e12:	4b91      	ldr	r3, [pc, #580]	; (c3058 <_strtod_l+0xbf8>)
   c2e14:	429a      	cmp	r2, r3
   c2e16:	f040 80b0 	bne.w	c2f7a <_strtod_l+0xb1a>
   c2e1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2e1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c2e22:	ec4b ab10 	vmov	d0, sl, fp
   c2e26:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c2e2a:	f001 f911 	bl	c4050 <__ulp>
   c2e2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2e32:	ec53 2b10 	vmov	r2, r3, d0
   c2e36:	f7fe fe3d 	bl	c1ab4 <__aeabi_dmul>
   c2e3a:	4652      	mov	r2, sl
   c2e3c:	465b      	mov	r3, fp
   c2e3e:	f7fe fc83 	bl	c1748 <__adddf3>
   c2e42:	460b      	mov	r3, r1
   c2e44:	4983      	ldr	r1, [pc, #524]	; (c3054 <_strtod_l+0xbf4>)
   c2e46:	4a85      	ldr	r2, [pc, #532]	; (c305c <_strtod_l+0xbfc>)
   c2e48:	4019      	ands	r1, r3
   c2e4a:	4291      	cmp	r1, r2
   c2e4c:	4682      	mov	sl, r0
   c2e4e:	d960      	bls.n	c2f12 <_strtod_l+0xab2>
   c2e50:	ee18 3a90 	vmov	r3, s17
   c2e54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c2e58:	4293      	cmp	r3, r2
   c2e5a:	d104      	bne.n	c2e66 <_strtod_l+0xa06>
   c2e5c:	ee18 3a10 	vmov	r3, s16
   c2e60:	3301      	adds	r3, #1
   c2e62:	f43f ad45 	beq.w	c28f0 <_strtod_l+0x490>
   c2e66:	f8df b200 	ldr.w	fp, [pc, #512]	; c3068 <_strtod_l+0xc08>
   c2e6a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c2e6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2e70:	4620      	mov	r0, r4
   c2e72:	f000 fdbb 	bl	c39ec <_Bfree>
   c2e76:	9905      	ldr	r1, [sp, #20]
   c2e78:	4620      	mov	r0, r4
   c2e7a:	f000 fdb7 	bl	c39ec <_Bfree>
   c2e7e:	4631      	mov	r1, r6
   c2e80:	4620      	mov	r0, r4
   c2e82:	f000 fdb3 	bl	c39ec <_Bfree>
   c2e86:	4629      	mov	r1, r5
   c2e88:	4620      	mov	r0, r4
   c2e8a:	f000 fdaf 	bl	c39ec <_Bfree>
   c2e8e:	e61a      	b.n	c2ac6 <_strtod_l+0x666>
   c2e90:	f1ba 0f00 	cmp.w	sl, #0
   c2e94:	d11b      	bne.n	c2ece <_strtod_l+0xa6e>
   c2e96:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2e9a:	b9f3      	cbnz	r3, c2eda <_strtod_l+0xa7a>
   c2e9c:	4b6c      	ldr	r3, [pc, #432]	; (c3050 <_strtod_l+0xbf0>)
   c2e9e:	2200      	movs	r2, #0
   c2ea0:	4640      	mov	r0, r8
   c2ea2:	4649      	mov	r1, r9
   c2ea4:	f7ff f878 	bl	c1f98 <__aeabi_dcmplt>
   c2ea8:	b9d0      	cbnz	r0, c2ee0 <_strtod_l+0xa80>
   c2eaa:	4640      	mov	r0, r8
   c2eac:	4649      	mov	r1, r9
   c2eae:	4b6c      	ldr	r3, [pc, #432]	; (c3060 <_strtod_l+0xc00>)
   c2eb0:	2200      	movs	r2, #0
   c2eb2:	f7fe fdff 	bl	c1ab4 <__aeabi_dmul>
   c2eb6:	4680      	mov	r8, r0
   c2eb8:	4689      	mov	r9, r1
   c2eba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c2ebe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c2ec2:	9315      	str	r3, [sp, #84]	; 0x54
   c2ec4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c2ec8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2ecc:	e79d      	b.n	c2e0a <_strtod_l+0x9aa>
   c2ece:	f1ba 0f01 	cmp.w	sl, #1
   c2ed2:	d102      	bne.n	c2eda <_strtod_l+0xa7a>
   c2ed4:	2f00      	cmp	r7, #0
   c2ed6:	f43f ad83 	beq.w	c29e0 <_strtod_l+0x580>
   c2eda:	4b62      	ldr	r3, [pc, #392]	; (c3064 <_strtod_l+0xc04>)
   c2edc:	2200      	movs	r2, #0
   c2ede:	e78e      	b.n	c2dfe <_strtod_l+0x99e>
   c2ee0:	f8df 917c 	ldr.w	r9, [pc, #380]	; c3060 <_strtod_l+0xc00>
   c2ee4:	f04f 0800 	mov.w	r8, #0
   c2ee8:	e7e7      	b.n	c2eba <_strtod_l+0xa5a>
   c2eea:	4b5d      	ldr	r3, [pc, #372]	; (c3060 <_strtod_l+0xc00>)
   c2eec:	4640      	mov	r0, r8
   c2eee:	4649      	mov	r1, r9
   c2ef0:	2200      	movs	r2, #0
   c2ef2:	f7fe fddf 	bl	c1ab4 <__aeabi_dmul>
   c2ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2ef8:	4680      	mov	r8, r0
   c2efa:	4689      	mov	r9, r1
   c2efc:	b933      	cbnz	r3, c2f0c <_strtod_l+0xaac>
   c2efe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2f02:	900e      	str	r0, [sp, #56]	; 0x38
   c2f04:	930f      	str	r3, [sp, #60]	; 0x3c
   c2f06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c2f0a:	e7dd      	b.n	c2ec8 <_strtod_l+0xa68>
   c2f0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c2f10:	e7f9      	b.n	c2f06 <_strtod_l+0xaa6>
   c2f12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c2f16:	9b04      	ldr	r3, [sp, #16]
   c2f18:	2b00      	cmp	r3, #0
   c2f1a:	d1a8      	bne.n	c2e6e <_strtod_l+0xa0e>
   c2f1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c2f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2f22:	0d1b      	lsrs	r3, r3, #20
   c2f24:	051b      	lsls	r3, r3, #20
   c2f26:	429a      	cmp	r2, r3
   c2f28:	d1a1      	bne.n	c2e6e <_strtod_l+0xa0e>
   c2f2a:	4640      	mov	r0, r8
   c2f2c:	4649      	mov	r1, r9
   c2f2e:	f001 fa05 	bl	c433c <__aeabi_d2lz>
   c2f32:	f7fe fd91 	bl	c1a58 <__aeabi_l2d>
   c2f36:	4602      	mov	r2, r0
   c2f38:	460b      	mov	r3, r1
   c2f3a:	4640      	mov	r0, r8
   c2f3c:	4649      	mov	r1, r9
   c2f3e:	f7fe fc01 	bl	c1744 <__aeabi_dsub>
   c2f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c2f44:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c2f48:	ea43 030a 	orr.w	r3, r3, sl
   c2f4c:	4313      	orrs	r3, r2
   c2f4e:	4680      	mov	r8, r0
   c2f50:	4689      	mov	r9, r1
   c2f52:	d055      	beq.n	c3000 <_strtod_l+0xba0>
   c2f54:	a336      	add	r3, pc, #216	; (adr r3, c3030 <_strtod_l+0xbd0>)
   c2f56:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f5a:	f7ff f81d 	bl	c1f98 <__aeabi_dcmplt>
   c2f5e:	2800      	cmp	r0, #0
   c2f60:	f47f acd0 	bne.w	c2904 <_strtod_l+0x4a4>
   c2f64:	a334      	add	r3, pc, #208	; (adr r3, c3038 <_strtod_l+0xbd8>)
   c2f66:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f6a:	4640      	mov	r0, r8
   c2f6c:	4649      	mov	r1, r9
   c2f6e:	f7ff f831 	bl	c1fd4 <__aeabi_dcmpgt>
   c2f72:	2800      	cmp	r0, #0
   c2f74:	f43f af7b 	beq.w	c2e6e <_strtod_l+0xa0e>
   c2f78:	e4c4      	b.n	c2904 <_strtod_l+0x4a4>
   c2f7a:	9b04      	ldr	r3, [sp, #16]
   c2f7c:	b333      	cbz	r3, c2fcc <_strtod_l+0xb6c>
   c2f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c2f80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c2f84:	d822      	bhi.n	c2fcc <_strtod_l+0xb6c>
   c2f86:	a32e      	add	r3, pc, #184	; (adr r3, c3040 <_strtod_l+0xbe0>)
   c2f88:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2f8c:	4640      	mov	r0, r8
   c2f8e:	4649      	mov	r1, r9
   c2f90:	f7ff f80c 	bl	c1fac <__aeabi_dcmple>
   c2f94:	b1a0      	cbz	r0, c2fc0 <_strtod_l+0xb60>
   c2f96:	4649      	mov	r1, r9
   c2f98:	4640      	mov	r0, r8
   c2f9a:	f7ff f863 	bl	c2064 <__aeabi_d2uiz>
   c2f9e:	2801      	cmp	r0, #1
   c2fa0:	bf38      	it	cc
   c2fa2:	2001      	movcc	r0, #1
   c2fa4:	f7fe fd0c 	bl	c19c0 <__aeabi_ui2d>
   c2fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c2faa:	4680      	mov	r8, r0
   c2fac:	4689      	mov	r9, r1
   c2fae:	bb23      	cbnz	r3, c2ffa <_strtod_l+0xb9a>
   c2fb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2fb4:	9010      	str	r0, [sp, #64]	; 0x40
   c2fb6:	9311      	str	r3, [sp, #68]	; 0x44
   c2fb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c2fbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2fc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2fc4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c2fc8:	1a9b      	subs	r3, r3, r2
   c2fca:	9309      	str	r3, [sp, #36]	; 0x24
   c2fcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2fd0:	eeb0 0a48 	vmov.f32	s0, s16
   c2fd4:	eef0 0a68 	vmov.f32	s1, s17
   c2fd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c2fdc:	f001 f838 	bl	c4050 <__ulp>
   c2fe0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2fe4:	ec53 2b10 	vmov	r2, r3, d0
   c2fe8:	f7fe fd64 	bl	c1ab4 <__aeabi_dmul>
   c2fec:	ec53 2b18 	vmov	r2, r3, d8
   c2ff0:	f7fe fbaa 	bl	c1748 <__adddf3>
   c2ff4:	4682      	mov	sl, r0
   c2ff6:	468b      	mov	fp, r1
   c2ff8:	e78d      	b.n	c2f16 <_strtod_l+0xab6>
   c2ffa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c2ffe:	e7db      	b.n	c2fb8 <_strtod_l+0xb58>
   c3000:	a311      	add	r3, pc, #68	; (adr r3, c3048 <_strtod_l+0xbe8>)
   c3002:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3006:	f7fe ffc7 	bl	c1f98 <__aeabi_dcmplt>
   c300a:	e7b2      	b.n	c2f72 <_strtod_l+0xb12>
   c300c:	2300      	movs	r3, #0
   c300e:	930a      	str	r3, [sp, #40]	; 0x28
   c3010:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c3012:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3014:	6013      	str	r3, [r2, #0]
   c3016:	f7ff ba6b 	b.w	c24f0 <_strtod_l+0x90>
   c301a:	2a65      	cmp	r2, #101	; 0x65
   c301c:	f43f ab5f 	beq.w	c26de <_strtod_l+0x27e>
   c3020:	2a45      	cmp	r2, #69	; 0x45
   c3022:	f43f ab5c 	beq.w	c26de <_strtod_l+0x27e>
   c3026:	2301      	movs	r3, #1
   c3028:	f7ff bb94 	b.w	c2754 <_strtod_l+0x2f4>
   c302c:	f3af 8000 	nop.w
   c3030:	94a03595 	.word	0x94a03595
   c3034:	3fdfffff 	.word	0x3fdfffff
   c3038:	35afe535 	.word	0x35afe535
   c303c:	3fe00000 	.word	0x3fe00000
   c3040:	ffc00000 	.word	0xffc00000
   c3044:	41dfffff 	.word	0x41dfffff
   c3048:	94a03595 	.word	0x94a03595
   c304c:	3fcfffff 	.word	0x3fcfffff
   c3050:	3ff00000 	.word	0x3ff00000
   c3054:	7ff00000 	.word	0x7ff00000
   c3058:	7fe00000 	.word	0x7fe00000
   c305c:	7c9fffff 	.word	0x7c9fffff
   c3060:	3fe00000 	.word	0x3fe00000
   c3064:	bff00000 	.word	0xbff00000
   c3068:	7fefffff 	.word	0x7fefffff

000c306c <strtod>:
   c306c:	460a      	mov	r2, r1
   c306e:	4601      	mov	r1, r0
   c3070:	4802      	ldr	r0, [pc, #8]	; (c307c <strtod+0x10>)
   c3072:	4b03      	ldr	r3, [pc, #12]	; (c3080 <strtod+0x14>)
   c3074:	6800      	ldr	r0, [r0, #0]
   c3076:	f7ff b9f3 	b.w	c2460 <_strtod_l>
   c307a:	bf00      	nop
   c307c:	2003dbc8 	.word	0x2003dbc8
   c3080:	2003dc34 	.word	0x2003dc34

000c3084 <_strtol_l.constprop.0>:
   c3084:	2b01      	cmp	r3, #1
   c3086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c308a:	d001      	beq.n	c3090 <_strtol_l.constprop.0+0xc>
   c308c:	2b24      	cmp	r3, #36	; 0x24
   c308e:	d906      	bls.n	c309e <_strtol_l.constprop.0+0x1a>
   c3090:	f7fa faae 	bl	bd5f0 <__errno>
   c3094:	2316      	movs	r3, #22
   c3096:	6003      	str	r3, [r0, #0]
   c3098:	2000      	movs	r0, #0
   c309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c309e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c3184 <_strtol_l.constprop.0+0x100>
   c30a2:	460d      	mov	r5, r1
   c30a4:	462e      	mov	r6, r5
   c30a6:	f815 4b01 	ldrb.w	r4, [r5], #1
   c30aa:	f814 700c 	ldrb.w	r7, [r4, ip]
   c30ae:	f017 0708 	ands.w	r7, r7, #8
   c30b2:	d1f7      	bne.n	c30a4 <_strtol_l.constprop.0+0x20>
   c30b4:	2c2d      	cmp	r4, #45	; 0x2d
   c30b6:	d132      	bne.n	c311e <_strtol_l.constprop.0+0x9a>
   c30b8:	782c      	ldrb	r4, [r5, #0]
   c30ba:	2701      	movs	r7, #1
   c30bc:	1cb5      	adds	r5, r6, #2
   c30be:	2b00      	cmp	r3, #0
   c30c0:	d05b      	beq.n	c317a <_strtol_l.constprop.0+0xf6>
   c30c2:	2b10      	cmp	r3, #16
   c30c4:	d109      	bne.n	c30da <_strtol_l.constprop.0+0x56>
   c30c6:	2c30      	cmp	r4, #48	; 0x30
   c30c8:	d107      	bne.n	c30da <_strtol_l.constprop.0+0x56>
   c30ca:	782c      	ldrb	r4, [r5, #0]
   c30cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c30d0:	2c58      	cmp	r4, #88	; 0x58
   c30d2:	d14d      	bne.n	c3170 <_strtol_l.constprop.0+0xec>
   c30d4:	786c      	ldrb	r4, [r5, #1]
   c30d6:	2310      	movs	r3, #16
   c30d8:	3502      	adds	r5, #2
   c30da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c30de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c30e2:	f04f 0c00 	mov.w	ip, #0
   c30e6:	fbb8 f9f3 	udiv	r9, r8, r3
   c30ea:	4666      	mov	r6, ip
   c30ec:	fb03 8a19 	mls	sl, r3, r9, r8
   c30f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c30f4:	f1be 0f09 	cmp.w	lr, #9
   c30f8:	d816      	bhi.n	c3128 <_strtol_l.constprop.0+0xa4>
   c30fa:	4674      	mov	r4, lr
   c30fc:	42a3      	cmp	r3, r4
   c30fe:	dd24      	ble.n	c314a <_strtol_l.constprop.0+0xc6>
   c3100:	f1bc 0f00 	cmp.w	ip, #0
   c3104:	db1e      	blt.n	c3144 <_strtol_l.constprop.0+0xc0>
   c3106:	45b1      	cmp	r9, r6
   c3108:	d31c      	bcc.n	c3144 <_strtol_l.constprop.0+0xc0>
   c310a:	d101      	bne.n	c3110 <_strtol_l.constprop.0+0x8c>
   c310c:	45a2      	cmp	sl, r4
   c310e:	db19      	blt.n	c3144 <_strtol_l.constprop.0+0xc0>
   c3110:	fb06 4603 	mla	r6, r6, r3, r4
   c3114:	f04f 0c01 	mov.w	ip, #1
   c3118:	f815 4b01 	ldrb.w	r4, [r5], #1
   c311c:	e7e8      	b.n	c30f0 <_strtol_l.constprop.0+0x6c>
   c311e:	2c2b      	cmp	r4, #43	; 0x2b
   c3120:	bf04      	itt	eq
   c3122:	782c      	ldrbeq	r4, [r5, #0]
   c3124:	1cb5      	addeq	r5, r6, #2
   c3126:	e7ca      	b.n	c30be <_strtol_l.constprop.0+0x3a>
   c3128:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c312c:	f1be 0f19 	cmp.w	lr, #25
   c3130:	d801      	bhi.n	c3136 <_strtol_l.constprop.0+0xb2>
   c3132:	3c37      	subs	r4, #55	; 0x37
   c3134:	e7e2      	b.n	c30fc <_strtol_l.constprop.0+0x78>
   c3136:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c313a:	f1be 0f19 	cmp.w	lr, #25
   c313e:	d804      	bhi.n	c314a <_strtol_l.constprop.0+0xc6>
   c3140:	3c57      	subs	r4, #87	; 0x57
   c3142:	e7db      	b.n	c30fc <_strtol_l.constprop.0+0x78>
   c3144:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c3148:	e7e6      	b.n	c3118 <_strtol_l.constprop.0+0x94>
   c314a:	f1bc 0f00 	cmp.w	ip, #0
   c314e:	da05      	bge.n	c315c <_strtol_l.constprop.0+0xd8>
   c3150:	2322      	movs	r3, #34	; 0x22
   c3152:	6003      	str	r3, [r0, #0]
   c3154:	4646      	mov	r6, r8
   c3156:	b942      	cbnz	r2, c316a <_strtol_l.constprop.0+0xe6>
   c3158:	4630      	mov	r0, r6
   c315a:	e79e      	b.n	c309a <_strtol_l.constprop.0+0x16>
   c315c:	b107      	cbz	r7, c3160 <_strtol_l.constprop.0+0xdc>
   c315e:	4276      	negs	r6, r6
   c3160:	2a00      	cmp	r2, #0
   c3162:	d0f9      	beq.n	c3158 <_strtol_l.constprop.0+0xd4>
   c3164:	f1bc 0f00 	cmp.w	ip, #0
   c3168:	d000      	beq.n	c316c <_strtol_l.constprop.0+0xe8>
   c316a:	1e69      	subs	r1, r5, #1
   c316c:	6011      	str	r1, [r2, #0]
   c316e:	e7f3      	b.n	c3158 <_strtol_l.constprop.0+0xd4>
   c3170:	2430      	movs	r4, #48	; 0x30
   c3172:	2b00      	cmp	r3, #0
   c3174:	d1b1      	bne.n	c30da <_strtol_l.constprop.0+0x56>
   c3176:	2308      	movs	r3, #8
   c3178:	e7af      	b.n	c30da <_strtol_l.constprop.0+0x56>
   c317a:	2c30      	cmp	r4, #48	; 0x30
   c317c:	d0a5      	beq.n	c30ca <_strtol_l.constprop.0+0x46>
   c317e:	230a      	movs	r3, #10
   c3180:	e7ab      	b.n	c30da <_strtol_l.constprop.0+0x56>
   c3182:	bf00      	nop
   c3184:	000c5de1 	.word	0x000c5de1

000c3188 <strtol>:
   c3188:	4613      	mov	r3, r2
   c318a:	460a      	mov	r2, r1
   c318c:	4601      	mov	r1, r0
   c318e:	4802      	ldr	r0, [pc, #8]	; (c3198 <strtol+0x10>)
   c3190:	6800      	ldr	r0, [r0, #0]
   c3192:	f7ff bf77 	b.w	c3084 <_strtol_l.constprop.0>
   c3196:	bf00      	nop
   c3198:	2003dbc8 	.word	0x2003dbc8

000c319c <__register_exitproc>:
   c319c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c31a0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c325c <__register_exitproc+0xc0>
   c31a4:	4606      	mov	r6, r0
   c31a6:	f8d8 0000 	ldr.w	r0, [r8]
   c31aa:	461f      	mov	r7, r3
   c31ac:	460d      	mov	r5, r1
   c31ae:	4691      	mov	r9, r2
   c31b0:	f000 fbc6 	bl	c3940 <__retarget_lock_acquire_recursive>
   c31b4:	4b25      	ldr	r3, [pc, #148]	; (c324c <__register_exitproc+0xb0>)
   c31b6:	681c      	ldr	r4, [r3, #0]
   c31b8:	b934      	cbnz	r4, c31c8 <__register_exitproc+0x2c>
   c31ba:	4c25      	ldr	r4, [pc, #148]	; (c3250 <__register_exitproc+0xb4>)
   c31bc:	601c      	str	r4, [r3, #0]
   c31be:	4b25      	ldr	r3, [pc, #148]	; (c3254 <__register_exitproc+0xb8>)
   c31c0:	b113      	cbz	r3, c31c8 <__register_exitproc+0x2c>
   c31c2:	681b      	ldr	r3, [r3, #0]
   c31c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c31c8:	6863      	ldr	r3, [r4, #4]
   c31ca:	2b1f      	cmp	r3, #31
   c31cc:	dd07      	ble.n	c31de <__register_exitproc+0x42>
   c31ce:	f8d8 0000 	ldr.w	r0, [r8]
   c31d2:	f000 fbb7 	bl	c3944 <__retarget_lock_release_recursive>
   c31d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c31da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c31de:	b34e      	cbz	r6, c3234 <__register_exitproc+0x98>
   c31e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c31e4:	b988      	cbnz	r0, c320a <__register_exitproc+0x6e>
   c31e6:	4b1c      	ldr	r3, [pc, #112]	; (c3258 <__register_exitproc+0xbc>)
   c31e8:	b923      	cbnz	r3, c31f4 <__register_exitproc+0x58>
   c31ea:	f8d8 0000 	ldr.w	r0, [r8]
   c31ee:	f000 fba8 	bl	c3942 <__retarget_lock_release>
   c31f2:	e7f0      	b.n	c31d6 <__register_exitproc+0x3a>
   c31f4:	f44f 7084 	mov.w	r0, #264	; 0x108
   c31f8:	f7fa f9ba 	bl	bd570 <malloc>
   c31fc:	2800      	cmp	r0, #0
   c31fe:	d0f4      	beq.n	c31ea <__register_exitproc+0x4e>
   c3200:	2300      	movs	r3, #0
   c3202:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c3206:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c320a:	6863      	ldr	r3, [r4, #4]
   c320c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c3210:	2201      	movs	r2, #1
   c3212:	409a      	lsls	r2, r3
   c3214:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c3218:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c321c:	4313      	orrs	r3, r2
   c321e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c3222:	2e02      	cmp	r6, #2
   c3224:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c3228:	bf02      	ittt	eq
   c322a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c322e:	4313      	orreq	r3, r2
   c3230:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c3234:	6863      	ldr	r3, [r4, #4]
   c3236:	f8d8 0000 	ldr.w	r0, [r8]
   c323a:	1c5a      	adds	r2, r3, #1
   c323c:	3302      	adds	r3, #2
   c323e:	6062      	str	r2, [r4, #4]
   c3240:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c3244:	f000 fb7e 	bl	c3944 <__retarget_lock_release_recursive>
   c3248:	2000      	movs	r0, #0
   c324a:	e7c6      	b.n	c31da <__register_exitproc+0x3e>
   c324c:	2003e7e8 	.word	0x2003e7e8
   c3250:	2003e75c 	.word	0x2003e75c
   c3254:	00000000 	.word	0x00000000
   c3258:	000bd571 	.word	0x000bd571
   c325c:	2003dc2c 	.word	0x2003dc2c

000c3260 <rshift>:
   c3260:	6903      	ldr	r3, [r0, #16]
   c3262:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c3266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c326a:	ea4f 1261 	mov.w	r2, r1, asr #5
   c326e:	f100 0414 	add.w	r4, r0, #20
   c3272:	dd45      	ble.n	c3300 <rshift+0xa0>
   c3274:	f011 011f 	ands.w	r1, r1, #31
   c3278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c327c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c3280:	d10c      	bne.n	c329c <rshift+0x3c>
   c3282:	f100 0710 	add.w	r7, r0, #16
   c3286:	4629      	mov	r1, r5
   c3288:	42b1      	cmp	r1, r6
   c328a:	d334      	bcc.n	c32f6 <rshift+0x96>
   c328c:	1a9b      	subs	r3, r3, r2
   c328e:	009b      	lsls	r3, r3, #2
   c3290:	1eea      	subs	r2, r5, #3
   c3292:	4296      	cmp	r6, r2
   c3294:	bf38      	it	cc
   c3296:	2300      	movcc	r3, #0
   c3298:	4423      	add	r3, r4
   c329a:	e015      	b.n	c32c8 <rshift+0x68>
   c329c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c32a0:	f1c1 0820 	rsb	r8, r1, #32
   c32a4:	40cf      	lsrs	r7, r1
   c32a6:	f105 0e04 	add.w	lr, r5, #4
   c32aa:	46a1      	mov	r9, r4
   c32ac:	4576      	cmp	r6, lr
   c32ae:	46f4      	mov	ip, lr
   c32b0:	d815      	bhi.n	c32de <rshift+0x7e>
   c32b2:	1a9a      	subs	r2, r3, r2
   c32b4:	0092      	lsls	r2, r2, #2
   c32b6:	3a04      	subs	r2, #4
   c32b8:	3501      	adds	r5, #1
   c32ba:	42ae      	cmp	r6, r5
   c32bc:	bf38      	it	cc
   c32be:	2200      	movcc	r2, #0
   c32c0:	18a3      	adds	r3, r4, r2
   c32c2:	50a7      	str	r7, [r4, r2]
   c32c4:	b107      	cbz	r7, c32c8 <rshift+0x68>
   c32c6:	3304      	adds	r3, #4
   c32c8:	1b1a      	subs	r2, r3, r4
   c32ca:	42a3      	cmp	r3, r4
   c32cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c32d0:	bf08      	it	eq
   c32d2:	2300      	moveq	r3, #0
   c32d4:	6102      	str	r2, [r0, #16]
   c32d6:	bf08      	it	eq
   c32d8:	6143      	streq	r3, [r0, #20]
   c32da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c32de:	f8dc c000 	ldr.w	ip, [ip]
   c32e2:	fa0c fc08 	lsl.w	ip, ip, r8
   c32e6:	ea4c 0707 	orr.w	r7, ip, r7
   c32ea:	f849 7b04 	str.w	r7, [r9], #4
   c32ee:	f85e 7b04 	ldr.w	r7, [lr], #4
   c32f2:	40cf      	lsrs	r7, r1
   c32f4:	e7da      	b.n	c32ac <rshift+0x4c>
   c32f6:	f851 cb04 	ldr.w	ip, [r1], #4
   c32fa:	f847 cf04 	str.w	ip, [r7, #4]!
   c32fe:	e7c3      	b.n	c3288 <rshift+0x28>
   c3300:	4623      	mov	r3, r4
   c3302:	e7e1      	b.n	c32c8 <rshift+0x68>

000c3304 <__hexdig_fun>:
   c3304:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c3308:	2b09      	cmp	r3, #9
   c330a:	d802      	bhi.n	c3312 <__hexdig_fun+0xe>
   c330c:	3820      	subs	r0, #32
   c330e:	b2c0      	uxtb	r0, r0
   c3310:	4770      	bx	lr
   c3312:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c3316:	2b05      	cmp	r3, #5
   c3318:	d801      	bhi.n	c331e <__hexdig_fun+0x1a>
   c331a:	3847      	subs	r0, #71	; 0x47
   c331c:	e7f7      	b.n	c330e <__hexdig_fun+0xa>
   c331e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c3322:	2b05      	cmp	r3, #5
   c3324:	d801      	bhi.n	c332a <__hexdig_fun+0x26>
   c3326:	3827      	subs	r0, #39	; 0x27
   c3328:	e7f1      	b.n	c330e <__hexdig_fun+0xa>
   c332a:	2000      	movs	r0, #0
   c332c:	4770      	bx	lr
	...

000c3330 <__gethex>:
   c3330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3334:	ed2d 8b02 	vpush	{d8}
   c3338:	b089      	sub	sp, #36	; 0x24
   c333a:	ee08 0a10 	vmov	s16, r0
   c333e:	9304      	str	r3, [sp, #16]
   c3340:	4bb4      	ldr	r3, [pc, #720]	; (c3614 <__gethex+0x2e4>)
   c3342:	681b      	ldr	r3, [r3, #0]
   c3344:	9301      	str	r3, [sp, #4]
   c3346:	4618      	mov	r0, r3
   c3348:	468b      	mov	fp, r1
   c334a:	4690      	mov	r8, r2
   c334c:	f7fe fff1 	bl	c2332 <strlen>
   c3350:	9b01      	ldr	r3, [sp, #4]
   c3352:	f8db 2000 	ldr.w	r2, [fp]
   c3356:	4403      	add	r3, r0
   c3358:	4682      	mov	sl, r0
   c335a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c335e:	9305      	str	r3, [sp, #20]
   c3360:	1c93      	adds	r3, r2, #2
   c3362:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c3366:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c336a:	32fe      	adds	r2, #254	; 0xfe
   c336c:	18d1      	adds	r1, r2, r3
   c336e:	461f      	mov	r7, r3
   c3370:	f813 0b01 	ldrb.w	r0, [r3], #1
   c3374:	9100      	str	r1, [sp, #0]
   c3376:	2830      	cmp	r0, #48	; 0x30
   c3378:	d0f8      	beq.n	c336c <__gethex+0x3c>
   c337a:	f7ff ffc3 	bl	c3304 <__hexdig_fun>
   c337e:	4604      	mov	r4, r0
   c3380:	2800      	cmp	r0, #0
   c3382:	d13a      	bne.n	c33fa <__gethex+0xca>
   c3384:	9901      	ldr	r1, [sp, #4]
   c3386:	4652      	mov	r2, sl
   c3388:	4638      	mov	r0, r7
   c338a:	f7fe ffed 	bl	c2368 <strncmp>
   c338e:	4605      	mov	r5, r0
   c3390:	2800      	cmp	r0, #0
   c3392:	d168      	bne.n	c3466 <__gethex+0x136>
   c3394:	f817 000a 	ldrb.w	r0, [r7, sl]
   c3398:	eb07 060a 	add.w	r6, r7, sl
   c339c:	f7ff ffb2 	bl	c3304 <__hexdig_fun>
   c33a0:	2800      	cmp	r0, #0
   c33a2:	d062      	beq.n	c346a <__gethex+0x13a>
   c33a4:	4633      	mov	r3, r6
   c33a6:	7818      	ldrb	r0, [r3, #0]
   c33a8:	2830      	cmp	r0, #48	; 0x30
   c33aa:	461f      	mov	r7, r3
   c33ac:	f103 0301 	add.w	r3, r3, #1
   c33b0:	d0f9      	beq.n	c33a6 <__gethex+0x76>
   c33b2:	f7ff ffa7 	bl	c3304 <__hexdig_fun>
   c33b6:	2301      	movs	r3, #1
   c33b8:	fab0 f480 	clz	r4, r0
   c33bc:	0964      	lsrs	r4, r4, #5
   c33be:	4635      	mov	r5, r6
   c33c0:	9300      	str	r3, [sp, #0]
   c33c2:	463a      	mov	r2, r7
   c33c4:	4616      	mov	r6, r2
   c33c6:	3201      	adds	r2, #1
   c33c8:	7830      	ldrb	r0, [r6, #0]
   c33ca:	f7ff ff9b 	bl	c3304 <__hexdig_fun>
   c33ce:	2800      	cmp	r0, #0
   c33d0:	d1f8      	bne.n	c33c4 <__gethex+0x94>
   c33d2:	9901      	ldr	r1, [sp, #4]
   c33d4:	4652      	mov	r2, sl
   c33d6:	4630      	mov	r0, r6
   c33d8:	f7fe ffc6 	bl	c2368 <strncmp>
   c33dc:	b980      	cbnz	r0, c3400 <__gethex+0xd0>
   c33de:	b94d      	cbnz	r5, c33f4 <__gethex+0xc4>
   c33e0:	eb06 050a 	add.w	r5, r6, sl
   c33e4:	462a      	mov	r2, r5
   c33e6:	4616      	mov	r6, r2
   c33e8:	3201      	adds	r2, #1
   c33ea:	7830      	ldrb	r0, [r6, #0]
   c33ec:	f7ff ff8a 	bl	c3304 <__hexdig_fun>
   c33f0:	2800      	cmp	r0, #0
   c33f2:	d1f8      	bne.n	c33e6 <__gethex+0xb6>
   c33f4:	1bad      	subs	r5, r5, r6
   c33f6:	00ad      	lsls	r5, r5, #2
   c33f8:	e004      	b.n	c3404 <__gethex+0xd4>
   c33fa:	2400      	movs	r4, #0
   c33fc:	4625      	mov	r5, r4
   c33fe:	e7e0      	b.n	c33c2 <__gethex+0x92>
   c3400:	2d00      	cmp	r5, #0
   c3402:	d1f7      	bne.n	c33f4 <__gethex+0xc4>
   c3404:	7833      	ldrb	r3, [r6, #0]
   c3406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c340a:	2b50      	cmp	r3, #80	; 0x50
   c340c:	d13b      	bne.n	c3486 <__gethex+0x156>
   c340e:	7873      	ldrb	r3, [r6, #1]
   c3410:	2b2b      	cmp	r3, #43	; 0x2b
   c3412:	d02c      	beq.n	c346e <__gethex+0x13e>
   c3414:	2b2d      	cmp	r3, #45	; 0x2d
   c3416:	d02e      	beq.n	c3476 <__gethex+0x146>
   c3418:	1c71      	adds	r1, r6, #1
   c341a:	f04f 0900 	mov.w	r9, #0
   c341e:	7808      	ldrb	r0, [r1, #0]
   c3420:	f7ff ff70 	bl	c3304 <__hexdig_fun>
   c3424:	1e43      	subs	r3, r0, #1
   c3426:	b2db      	uxtb	r3, r3
   c3428:	2b18      	cmp	r3, #24
   c342a:	d82c      	bhi.n	c3486 <__gethex+0x156>
   c342c:	f1a0 0210 	sub.w	r2, r0, #16
   c3430:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c3434:	f7ff ff66 	bl	c3304 <__hexdig_fun>
   c3438:	1e43      	subs	r3, r0, #1
   c343a:	b2db      	uxtb	r3, r3
   c343c:	2b18      	cmp	r3, #24
   c343e:	d91d      	bls.n	c347c <__gethex+0x14c>
   c3440:	f1b9 0f00 	cmp.w	r9, #0
   c3444:	d000      	beq.n	c3448 <__gethex+0x118>
   c3446:	4252      	negs	r2, r2
   c3448:	4415      	add	r5, r2
   c344a:	f8cb 1000 	str.w	r1, [fp]
   c344e:	b1e4      	cbz	r4, c348a <__gethex+0x15a>
   c3450:	9b00      	ldr	r3, [sp, #0]
   c3452:	2b00      	cmp	r3, #0
   c3454:	bf14      	ite	ne
   c3456:	2700      	movne	r7, #0
   c3458:	2706      	moveq	r7, #6
   c345a:	4638      	mov	r0, r7
   c345c:	b009      	add	sp, #36	; 0x24
   c345e:	ecbd 8b02 	vpop	{d8}
   c3462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3466:	463e      	mov	r6, r7
   c3468:	4625      	mov	r5, r4
   c346a:	2401      	movs	r4, #1
   c346c:	e7ca      	b.n	c3404 <__gethex+0xd4>
   c346e:	f04f 0900 	mov.w	r9, #0
   c3472:	1cb1      	adds	r1, r6, #2
   c3474:	e7d3      	b.n	c341e <__gethex+0xee>
   c3476:	f04f 0901 	mov.w	r9, #1
   c347a:	e7fa      	b.n	c3472 <__gethex+0x142>
   c347c:	230a      	movs	r3, #10
   c347e:	fb03 0202 	mla	r2, r3, r2, r0
   c3482:	3a10      	subs	r2, #16
   c3484:	e7d4      	b.n	c3430 <__gethex+0x100>
   c3486:	4631      	mov	r1, r6
   c3488:	e7df      	b.n	c344a <__gethex+0x11a>
   c348a:	1bf3      	subs	r3, r6, r7
   c348c:	3b01      	subs	r3, #1
   c348e:	4621      	mov	r1, r4
   c3490:	2b07      	cmp	r3, #7
   c3492:	dc0b      	bgt.n	c34ac <__gethex+0x17c>
   c3494:	ee18 0a10 	vmov	r0, s16
   c3498:	f000 fa68 	bl	c396c <_Balloc>
   c349c:	4604      	mov	r4, r0
   c349e:	b940      	cbnz	r0, c34b2 <__gethex+0x182>
   c34a0:	4b5d      	ldr	r3, [pc, #372]	; (c3618 <__gethex+0x2e8>)
   c34a2:	4602      	mov	r2, r0
   c34a4:	21de      	movs	r1, #222	; 0xde
   c34a6:	485d      	ldr	r0, [pc, #372]	; (c361c <__gethex+0x2ec>)
   c34a8:	f7fa f8aa 	bl	bd600 <__assert_func>
   c34ac:	3101      	adds	r1, #1
   c34ae:	105b      	asrs	r3, r3, #1
   c34b0:	e7ee      	b.n	c3490 <__gethex+0x160>
   c34b2:	f100 0914 	add.w	r9, r0, #20
   c34b6:	f04f 0b00 	mov.w	fp, #0
   c34ba:	f1ca 0301 	rsb	r3, sl, #1
   c34be:	f8cd 9008 	str.w	r9, [sp, #8]
   c34c2:	f8cd b000 	str.w	fp, [sp]
   c34c6:	9306      	str	r3, [sp, #24]
   c34c8:	42b7      	cmp	r7, r6
   c34ca:	d340      	bcc.n	c354e <__gethex+0x21e>
   c34cc:	9802      	ldr	r0, [sp, #8]
   c34ce:	9b00      	ldr	r3, [sp, #0]
   c34d0:	f840 3b04 	str.w	r3, [r0], #4
   c34d4:	eba0 0009 	sub.w	r0, r0, r9
   c34d8:	1080      	asrs	r0, r0, #2
   c34da:	0146      	lsls	r6, r0, #5
   c34dc:	6120      	str	r0, [r4, #16]
   c34de:	4618      	mov	r0, r3
   c34e0:	f000 fb36 	bl	c3b50 <__hi0bits>
   c34e4:	1a30      	subs	r0, r6, r0
   c34e6:	f8d8 6000 	ldr.w	r6, [r8]
   c34ea:	42b0      	cmp	r0, r6
   c34ec:	dd63      	ble.n	c35b6 <__gethex+0x286>
   c34ee:	1b87      	subs	r7, r0, r6
   c34f0:	4639      	mov	r1, r7
   c34f2:	4620      	mov	r0, r4
   c34f4:	f000 feda 	bl	c42ac <__any_on>
   c34f8:	4682      	mov	sl, r0
   c34fa:	b1a8      	cbz	r0, c3528 <__gethex+0x1f8>
   c34fc:	1e7b      	subs	r3, r7, #1
   c34fe:	1159      	asrs	r1, r3, #5
   c3500:	f003 021f 	and.w	r2, r3, #31
   c3504:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c3508:	f04f 0a01 	mov.w	sl, #1
   c350c:	fa0a f202 	lsl.w	r2, sl, r2
   c3510:	420a      	tst	r2, r1
   c3512:	d009      	beq.n	c3528 <__gethex+0x1f8>
   c3514:	4553      	cmp	r3, sl
   c3516:	dd05      	ble.n	c3524 <__gethex+0x1f4>
   c3518:	1eb9      	subs	r1, r7, #2
   c351a:	4620      	mov	r0, r4
   c351c:	f000 fec6 	bl	c42ac <__any_on>
   c3520:	2800      	cmp	r0, #0
   c3522:	d145      	bne.n	c35b0 <__gethex+0x280>
   c3524:	f04f 0a02 	mov.w	sl, #2
   c3528:	4639      	mov	r1, r7
   c352a:	4620      	mov	r0, r4
   c352c:	f7ff fe98 	bl	c3260 <rshift>
   c3530:	443d      	add	r5, r7
   c3532:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c3536:	42ab      	cmp	r3, r5
   c3538:	da4c      	bge.n	c35d4 <__gethex+0x2a4>
   c353a:	ee18 0a10 	vmov	r0, s16
   c353e:	4621      	mov	r1, r4
   c3540:	f000 fa54 	bl	c39ec <_Bfree>
   c3544:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3546:	2300      	movs	r3, #0
   c3548:	6013      	str	r3, [r2, #0]
   c354a:	27a3      	movs	r7, #163	; 0xa3
   c354c:	e785      	b.n	c345a <__gethex+0x12a>
   c354e:	1e73      	subs	r3, r6, #1
   c3550:	9a05      	ldr	r2, [sp, #20]
   c3552:	9303      	str	r3, [sp, #12]
   c3554:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c3558:	4293      	cmp	r3, r2
   c355a:	d019      	beq.n	c3590 <__gethex+0x260>
   c355c:	f1bb 0f20 	cmp.w	fp, #32
   c3560:	d107      	bne.n	c3572 <__gethex+0x242>
   c3562:	9b02      	ldr	r3, [sp, #8]
   c3564:	9a00      	ldr	r2, [sp, #0]
   c3566:	f843 2b04 	str.w	r2, [r3], #4
   c356a:	9302      	str	r3, [sp, #8]
   c356c:	2300      	movs	r3, #0
   c356e:	9300      	str	r3, [sp, #0]
   c3570:	469b      	mov	fp, r3
   c3572:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c3576:	f7ff fec5 	bl	c3304 <__hexdig_fun>
   c357a:	9b00      	ldr	r3, [sp, #0]
   c357c:	f000 000f 	and.w	r0, r0, #15
   c3580:	fa00 f00b 	lsl.w	r0, r0, fp
   c3584:	4303      	orrs	r3, r0
   c3586:	9300      	str	r3, [sp, #0]
   c3588:	f10b 0b04 	add.w	fp, fp, #4
   c358c:	9b03      	ldr	r3, [sp, #12]
   c358e:	e00d      	b.n	c35ac <__gethex+0x27c>
   c3590:	9b03      	ldr	r3, [sp, #12]
   c3592:	9a06      	ldr	r2, [sp, #24]
   c3594:	4413      	add	r3, r2
   c3596:	42bb      	cmp	r3, r7
   c3598:	d3e0      	bcc.n	c355c <__gethex+0x22c>
   c359a:	4618      	mov	r0, r3
   c359c:	9901      	ldr	r1, [sp, #4]
   c359e:	9307      	str	r3, [sp, #28]
   c35a0:	4652      	mov	r2, sl
   c35a2:	f7fe fee1 	bl	c2368 <strncmp>
   c35a6:	9b07      	ldr	r3, [sp, #28]
   c35a8:	2800      	cmp	r0, #0
   c35aa:	d1d7      	bne.n	c355c <__gethex+0x22c>
   c35ac:	461e      	mov	r6, r3
   c35ae:	e78b      	b.n	c34c8 <__gethex+0x198>
   c35b0:	f04f 0a03 	mov.w	sl, #3
   c35b4:	e7b8      	b.n	c3528 <__gethex+0x1f8>
   c35b6:	da0a      	bge.n	c35ce <__gethex+0x29e>
   c35b8:	1a37      	subs	r7, r6, r0
   c35ba:	4621      	mov	r1, r4
   c35bc:	ee18 0a10 	vmov	r0, s16
   c35c0:	463a      	mov	r2, r7
   c35c2:	f000 fc2f 	bl	c3e24 <__lshift>
   c35c6:	1bed      	subs	r5, r5, r7
   c35c8:	4604      	mov	r4, r0
   c35ca:	f100 0914 	add.w	r9, r0, #20
   c35ce:	f04f 0a00 	mov.w	sl, #0
   c35d2:	e7ae      	b.n	c3532 <__gethex+0x202>
   c35d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c35d8:	42a8      	cmp	r0, r5
   c35da:	dd72      	ble.n	c36c2 <__gethex+0x392>
   c35dc:	1b45      	subs	r5, r0, r5
   c35de:	42ae      	cmp	r6, r5
   c35e0:	dc36      	bgt.n	c3650 <__gethex+0x320>
   c35e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c35e6:	2b02      	cmp	r3, #2
   c35e8:	d02a      	beq.n	c3640 <__gethex+0x310>
   c35ea:	2b03      	cmp	r3, #3
   c35ec:	d02c      	beq.n	c3648 <__gethex+0x318>
   c35ee:	2b01      	cmp	r3, #1
   c35f0:	d11c      	bne.n	c362c <__gethex+0x2fc>
   c35f2:	42ae      	cmp	r6, r5
   c35f4:	d11a      	bne.n	c362c <__gethex+0x2fc>
   c35f6:	2e01      	cmp	r6, #1
   c35f8:	d112      	bne.n	c3620 <__gethex+0x2f0>
   c35fa:	9a04      	ldr	r2, [sp, #16]
   c35fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c3600:	6013      	str	r3, [r2, #0]
   c3602:	2301      	movs	r3, #1
   c3604:	6123      	str	r3, [r4, #16]
   c3606:	f8c9 3000 	str.w	r3, [r9]
   c360a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c360c:	2762      	movs	r7, #98	; 0x62
   c360e:	601c      	str	r4, [r3, #0]
   c3610:	e723      	b.n	c345a <__gethex+0x12a>
   c3612:	bf00      	nop
   c3614:	000c5f54 	.word	0x000c5f54
   c3618:	000c5ee1 	.word	0x000c5ee1
   c361c:	000c5ef2 	.word	0x000c5ef2
   c3620:	1e71      	subs	r1, r6, #1
   c3622:	4620      	mov	r0, r4
   c3624:	f000 fe42 	bl	c42ac <__any_on>
   c3628:	2800      	cmp	r0, #0
   c362a:	d1e6      	bne.n	c35fa <__gethex+0x2ca>
   c362c:	ee18 0a10 	vmov	r0, s16
   c3630:	4621      	mov	r1, r4
   c3632:	f000 f9db 	bl	c39ec <_Bfree>
   c3636:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3638:	2300      	movs	r3, #0
   c363a:	6013      	str	r3, [r2, #0]
   c363c:	2750      	movs	r7, #80	; 0x50
   c363e:	e70c      	b.n	c345a <__gethex+0x12a>
   c3640:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3642:	2b00      	cmp	r3, #0
   c3644:	d1f2      	bne.n	c362c <__gethex+0x2fc>
   c3646:	e7d8      	b.n	c35fa <__gethex+0x2ca>
   c3648:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c364a:	2b00      	cmp	r3, #0
   c364c:	d1d5      	bne.n	c35fa <__gethex+0x2ca>
   c364e:	e7ed      	b.n	c362c <__gethex+0x2fc>
   c3650:	1e6f      	subs	r7, r5, #1
   c3652:	f1ba 0f00 	cmp.w	sl, #0
   c3656:	d131      	bne.n	c36bc <__gethex+0x38c>
   c3658:	b127      	cbz	r7, c3664 <__gethex+0x334>
   c365a:	4639      	mov	r1, r7
   c365c:	4620      	mov	r0, r4
   c365e:	f000 fe25 	bl	c42ac <__any_on>
   c3662:	4682      	mov	sl, r0
   c3664:	117b      	asrs	r3, r7, #5
   c3666:	2101      	movs	r1, #1
   c3668:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c366c:	f007 071f 	and.w	r7, r7, #31
   c3670:	fa01 f707 	lsl.w	r7, r1, r7
   c3674:	421f      	tst	r7, r3
   c3676:	4629      	mov	r1, r5
   c3678:	4620      	mov	r0, r4
   c367a:	bf18      	it	ne
   c367c:	f04a 0a02 	orrne.w	sl, sl, #2
   c3680:	1b76      	subs	r6, r6, r5
   c3682:	f7ff fded 	bl	c3260 <rshift>
   c3686:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c368a:	2702      	movs	r7, #2
   c368c:	f1ba 0f00 	cmp.w	sl, #0
   c3690:	d048      	beq.n	c3724 <__gethex+0x3f4>
   c3692:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c3696:	2b02      	cmp	r3, #2
   c3698:	d015      	beq.n	c36c6 <__gethex+0x396>
   c369a:	2b03      	cmp	r3, #3
   c369c:	d017      	beq.n	c36ce <__gethex+0x39e>
   c369e:	2b01      	cmp	r3, #1
   c36a0:	d109      	bne.n	c36b6 <__gethex+0x386>
   c36a2:	f01a 0f02 	tst.w	sl, #2
   c36a6:	d006      	beq.n	c36b6 <__gethex+0x386>
   c36a8:	f8d9 0000 	ldr.w	r0, [r9]
   c36ac:	ea4a 0a00 	orr.w	sl, sl, r0
   c36b0:	f01a 0f01 	tst.w	sl, #1
   c36b4:	d10e      	bne.n	c36d4 <__gethex+0x3a4>
   c36b6:	f047 0710 	orr.w	r7, r7, #16
   c36ba:	e033      	b.n	c3724 <__gethex+0x3f4>
   c36bc:	f04f 0a01 	mov.w	sl, #1
   c36c0:	e7d0      	b.n	c3664 <__gethex+0x334>
   c36c2:	2701      	movs	r7, #1
   c36c4:	e7e2      	b.n	c368c <__gethex+0x35c>
   c36c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c36c8:	f1c3 0301 	rsb	r3, r3, #1
   c36cc:	9315      	str	r3, [sp, #84]	; 0x54
   c36ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c36d0:	2b00      	cmp	r3, #0
   c36d2:	d0f0      	beq.n	c36b6 <__gethex+0x386>
   c36d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c36d8:	f104 0314 	add.w	r3, r4, #20
   c36dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c36e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c36e4:	f04f 0c00 	mov.w	ip, #0
   c36e8:	4618      	mov	r0, r3
   c36ea:	f853 2b04 	ldr.w	r2, [r3], #4
   c36ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c36f2:	d01c      	beq.n	c372e <__gethex+0x3fe>
   c36f4:	3201      	adds	r2, #1
   c36f6:	6002      	str	r2, [r0, #0]
   c36f8:	2f02      	cmp	r7, #2
   c36fa:	f104 0314 	add.w	r3, r4, #20
   c36fe:	d13f      	bne.n	c3780 <__gethex+0x450>
   c3700:	f8d8 2000 	ldr.w	r2, [r8]
   c3704:	3a01      	subs	r2, #1
   c3706:	42b2      	cmp	r2, r6
   c3708:	d10a      	bne.n	c3720 <__gethex+0x3f0>
   c370a:	1171      	asrs	r1, r6, #5
   c370c:	2201      	movs	r2, #1
   c370e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c3712:	f006 061f 	and.w	r6, r6, #31
   c3716:	fa02 f606 	lsl.w	r6, r2, r6
   c371a:	421e      	tst	r6, r3
   c371c:	bf18      	it	ne
   c371e:	4617      	movne	r7, r2
   c3720:	f047 0720 	orr.w	r7, r7, #32
   c3724:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3726:	601c      	str	r4, [r3, #0]
   c3728:	9b04      	ldr	r3, [sp, #16]
   c372a:	601d      	str	r5, [r3, #0]
   c372c:	e695      	b.n	c345a <__gethex+0x12a>
   c372e:	4299      	cmp	r1, r3
   c3730:	f843 cc04 	str.w	ip, [r3, #-4]
   c3734:	d8d8      	bhi.n	c36e8 <__gethex+0x3b8>
   c3736:	68a3      	ldr	r3, [r4, #8]
   c3738:	459b      	cmp	fp, r3
   c373a:	db19      	blt.n	c3770 <__gethex+0x440>
   c373c:	6861      	ldr	r1, [r4, #4]
   c373e:	ee18 0a10 	vmov	r0, s16
   c3742:	3101      	adds	r1, #1
   c3744:	f000 f912 	bl	c396c <_Balloc>
   c3748:	4681      	mov	r9, r0
   c374a:	b918      	cbnz	r0, c3754 <__gethex+0x424>
   c374c:	4b1a      	ldr	r3, [pc, #104]	; (c37b8 <__gethex+0x488>)
   c374e:	4602      	mov	r2, r0
   c3750:	2184      	movs	r1, #132	; 0x84
   c3752:	e6a8      	b.n	c34a6 <__gethex+0x176>
   c3754:	6922      	ldr	r2, [r4, #16]
   c3756:	3202      	adds	r2, #2
   c3758:	f104 010c 	add.w	r1, r4, #12
   c375c:	0092      	lsls	r2, r2, #2
   c375e:	300c      	adds	r0, #12
   c3760:	f7fe fd34 	bl	c21cc <memcpy>
   c3764:	4621      	mov	r1, r4
   c3766:	ee18 0a10 	vmov	r0, s16
   c376a:	f000 f93f 	bl	c39ec <_Bfree>
   c376e:	464c      	mov	r4, r9
   c3770:	6923      	ldr	r3, [r4, #16]
   c3772:	1c5a      	adds	r2, r3, #1
   c3774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c3778:	6122      	str	r2, [r4, #16]
   c377a:	2201      	movs	r2, #1
   c377c:	615a      	str	r2, [r3, #20]
   c377e:	e7bb      	b.n	c36f8 <__gethex+0x3c8>
   c3780:	6922      	ldr	r2, [r4, #16]
   c3782:	455a      	cmp	r2, fp
   c3784:	dd0b      	ble.n	c379e <__gethex+0x46e>
   c3786:	2101      	movs	r1, #1
   c3788:	4620      	mov	r0, r4
   c378a:	f7ff fd69 	bl	c3260 <rshift>
   c378e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c3792:	3501      	adds	r5, #1
   c3794:	42ab      	cmp	r3, r5
   c3796:	f6ff aed0 	blt.w	c353a <__gethex+0x20a>
   c379a:	2701      	movs	r7, #1
   c379c:	e7c0      	b.n	c3720 <__gethex+0x3f0>
   c379e:	f016 061f 	ands.w	r6, r6, #31
   c37a2:	d0fa      	beq.n	c379a <__gethex+0x46a>
   c37a4:	4453      	add	r3, sl
   c37a6:	f1c6 0620 	rsb	r6, r6, #32
   c37aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c37ae:	f000 f9cf 	bl	c3b50 <__hi0bits>
   c37b2:	42b0      	cmp	r0, r6
   c37b4:	dbe7      	blt.n	c3786 <__gethex+0x456>
   c37b6:	e7f0      	b.n	c379a <__gethex+0x46a>
   c37b8:	000c5ee1 	.word	0x000c5ee1

000c37bc <L_shift>:
   c37bc:	f1c2 0208 	rsb	r2, r2, #8
   c37c0:	0092      	lsls	r2, r2, #2
   c37c2:	b570      	push	{r4, r5, r6, lr}
   c37c4:	f1c2 0620 	rsb	r6, r2, #32
   c37c8:	6843      	ldr	r3, [r0, #4]
   c37ca:	6804      	ldr	r4, [r0, #0]
   c37cc:	fa03 f506 	lsl.w	r5, r3, r6
   c37d0:	432c      	orrs	r4, r5
   c37d2:	40d3      	lsrs	r3, r2
   c37d4:	6004      	str	r4, [r0, #0]
   c37d6:	f840 3f04 	str.w	r3, [r0, #4]!
   c37da:	4288      	cmp	r0, r1
   c37dc:	d3f4      	bcc.n	c37c8 <L_shift+0xc>
   c37de:	bd70      	pop	{r4, r5, r6, pc}

000c37e0 <__match>:
   c37e0:	b530      	push	{r4, r5, lr}
   c37e2:	6803      	ldr	r3, [r0, #0]
   c37e4:	3301      	adds	r3, #1
   c37e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   c37ea:	b914      	cbnz	r4, c37f2 <__match+0x12>
   c37ec:	6003      	str	r3, [r0, #0]
   c37ee:	2001      	movs	r0, #1
   c37f0:	bd30      	pop	{r4, r5, pc}
   c37f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   c37f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c37fa:	2d19      	cmp	r5, #25
   c37fc:	bf98      	it	ls
   c37fe:	3220      	addls	r2, #32
   c3800:	42a2      	cmp	r2, r4
   c3802:	d0f0      	beq.n	c37e6 <__match+0x6>
   c3804:	2000      	movs	r0, #0
   c3806:	e7f3      	b.n	c37f0 <__match+0x10>

000c3808 <__hexnan>:
   c3808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c380c:	680b      	ldr	r3, [r1, #0]
   c380e:	115e      	asrs	r6, r3, #5
   c3810:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c3814:	f013 031f 	ands.w	r3, r3, #31
   c3818:	b087      	sub	sp, #28
   c381a:	bf18      	it	ne
   c381c:	3604      	addne	r6, #4
   c381e:	2500      	movs	r5, #0
   c3820:	1f37      	subs	r7, r6, #4
   c3822:	4690      	mov	r8, r2
   c3824:	6802      	ldr	r2, [r0, #0]
   c3826:	9301      	str	r3, [sp, #4]
   c3828:	4682      	mov	sl, r0
   c382a:	f846 5c04 	str.w	r5, [r6, #-4]
   c382e:	46b9      	mov	r9, r7
   c3830:	463c      	mov	r4, r7
   c3832:	9502      	str	r5, [sp, #8]
   c3834:	46ab      	mov	fp, r5
   c3836:	7851      	ldrb	r1, [r2, #1]
   c3838:	1c53      	adds	r3, r2, #1
   c383a:	9303      	str	r3, [sp, #12]
   c383c:	b341      	cbz	r1, c3890 <__hexnan+0x88>
   c383e:	4608      	mov	r0, r1
   c3840:	9205      	str	r2, [sp, #20]
   c3842:	9104      	str	r1, [sp, #16]
   c3844:	f7ff fd5e 	bl	c3304 <__hexdig_fun>
   c3848:	2800      	cmp	r0, #0
   c384a:	d14f      	bne.n	c38ec <__hexnan+0xe4>
   c384c:	9904      	ldr	r1, [sp, #16]
   c384e:	9a05      	ldr	r2, [sp, #20]
   c3850:	2920      	cmp	r1, #32
   c3852:	d818      	bhi.n	c3886 <__hexnan+0x7e>
   c3854:	9b02      	ldr	r3, [sp, #8]
   c3856:	459b      	cmp	fp, r3
   c3858:	dd13      	ble.n	c3882 <__hexnan+0x7a>
   c385a:	454c      	cmp	r4, r9
   c385c:	d206      	bcs.n	c386c <__hexnan+0x64>
   c385e:	2d07      	cmp	r5, #7
   c3860:	dc04      	bgt.n	c386c <__hexnan+0x64>
   c3862:	462a      	mov	r2, r5
   c3864:	4649      	mov	r1, r9
   c3866:	4620      	mov	r0, r4
   c3868:	f7ff ffa8 	bl	c37bc <L_shift>
   c386c:	4544      	cmp	r4, r8
   c386e:	d950      	bls.n	c3912 <__hexnan+0x10a>
   c3870:	2300      	movs	r3, #0
   c3872:	f1a4 0904 	sub.w	r9, r4, #4
   c3876:	f844 3c04 	str.w	r3, [r4, #-4]
   c387a:	f8cd b008 	str.w	fp, [sp, #8]
   c387e:	464c      	mov	r4, r9
   c3880:	461d      	mov	r5, r3
   c3882:	9a03      	ldr	r2, [sp, #12]
   c3884:	e7d7      	b.n	c3836 <__hexnan+0x2e>
   c3886:	2929      	cmp	r1, #41	; 0x29
   c3888:	d156      	bne.n	c3938 <__hexnan+0x130>
   c388a:	3202      	adds	r2, #2
   c388c:	f8ca 2000 	str.w	r2, [sl]
   c3890:	f1bb 0f00 	cmp.w	fp, #0
   c3894:	d050      	beq.n	c3938 <__hexnan+0x130>
   c3896:	454c      	cmp	r4, r9
   c3898:	d206      	bcs.n	c38a8 <__hexnan+0xa0>
   c389a:	2d07      	cmp	r5, #7
   c389c:	dc04      	bgt.n	c38a8 <__hexnan+0xa0>
   c389e:	462a      	mov	r2, r5
   c38a0:	4649      	mov	r1, r9
   c38a2:	4620      	mov	r0, r4
   c38a4:	f7ff ff8a 	bl	c37bc <L_shift>
   c38a8:	4544      	cmp	r4, r8
   c38aa:	d934      	bls.n	c3916 <__hexnan+0x10e>
   c38ac:	f1a8 0204 	sub.w	r2, r8, #4
   c38b0:	4623      	mov	r3, r4
   c38b2:	f853 1b04 	ldr.w	r1, [r3], #4
   c38b6:	f842 1f04 	str.w	r1, [r2, #4]!
   c38ba:	429f      	cmp	r7, r3
   c38bc:	d2f9      	bcs.n	c38b2 <__hexnan+0xaa>
   c38be:	1b3b      	subs	r3, r7, r4
   c38c0:	f023 0303 	bic.w	r3, r3, #3
   c38c4:	3304      	adds	r3, #4
   c38c6:	3401      	adds	r4, #1
   c38c8:	3e03      	subs	r6, #3
   c38ca:	42b4      	cmp	r4, r6
   c38cc:	bf88      	it	hi
   c38ce:	2304      	movhi	r3, #4
   c38d0:	4443      	add	r3, r8
   c38d2:	2200      	movs	r2, #0
   c38d4:	f843 2b04 	str.w	r2, [r3], #4
   c38d8:	429f      	cmp	r7, r3
   c38da:	d2fb      	bcs.n	c38d4 <__hexnan+0xcc>
   c38dc:	683b      	ldr	r3, [r7, #0]
   c38de:	b91b      	cbnz	r3, c38e8 <__hexnan+0xe0>
   c38e0:	4547      	cmp	r7, r8
   c38e2:	d127      	bne.n	c3934 <__hexnan+0x12c>
   c38e4:	2301      	movs	r3, #1
   c38e6:	603b      	str	r3, [r7, #0]
   c38e8:	2005      	movs	r0, #5
   c38ea:	e026      	b.n	c393a <__hexnan+0x132>
   c38ec:	3501      	adds	r5, #1
   c38ee:	2d08      	cmp	r5, #8
   c38f0:	f10b 0b01 	add.w	fp, fp, #1
   c38f4:	dd06      	ble.n	c3904 <__hexnan+0xfc>
   c38f6:	4544      	cmp	r4, r8
   c38f8:	d9c3      	bls.n	c3882 <__hexnan+0x7a>
   c38fa:	2300      	movs	r3, #0
   c38fc:	f844 3c04 	str.w	r3, [r4, #-4]
   c3900:	2501      	movs	r5, #1
   c3902:	3c04      	subs	r4, #4
   c3904:	6822      	ldr	r2, [r4, #0]
   c3906:	f000 000f 	and.w	r0, r0, #15
   c390a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c390e:	6022      	str	r2, [r4, #0]
   c3910:	e7b7      	b.n	c3882 <__hexnan+0x7a>
   c3912:	2508      	movs	r5, #8
   c3914:	e7b5      	b.n	c3882 <__hexnan+0x7a>
   c3916:	9b01      	ldr	r3, [sp, #4]
   c3918:	2b00      	cmp	r3, #0
   c391a:	d0df      	beq.n	c38dc <__hexnan+0xd4>
   c391c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3920:	f1c3 0320 	rsb	r3, r3, #32
   c3924:	fa22 f303 	lsr.w	r3, r2, r3
   c3928:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c392c:	401a      	ands	r2, r3
   c392e:	f846 2c04 	str.w	r2, [r6, #-4]
   c3932:	e7d3      	b.n	c38dc <__hexnan+0xd4>
   c3934:	3f04      	subs	r7, #4
   c3936:	e7d1      	b.n	c38dc <__hexnan+0xd4>
   c3938:	2004      	movs	r0, #4
   c393a:	b007      	add	sp, #28
   c393c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c3940 <__retarget_lock_acquire_recursive>:
   c3940:	4770      	bx	lr

000c3942 <__retarget_lock_release>:
   c3942:	4770      	bx	lr

000c3944 <__retarget_lock_release_recursive>:
   c3944:	4770      	bx	lr

000c3946 <__ascii_mbtowc>:
   c3946:	b082      	sub	sp, #8
   c3948:	b901      	cbnz	r1, c394c <__ascii_mbtowc+0x6>
   c394a:	a901      	add	r1, sp, #4
   c394c:	b142      	cbz	r2, c3960 <__ascii_mbtowc+0x1a>
   c394e:	b14b      	cbz	r3, c3964 <__ascii_mbtowc+0x1e>
   c3950:	7813      	ldrb	r3, [r2, #0]
   c3952:	600b      	str	r3, [r1, #0]
   c3954:	7812      	ldrb	r2, [r2, #0]
   c3956:	1e10      	subs	r0, r2, #0
   c3958:	bf18      	it	ne
   c395a:	2001      	movne	r0, #1
   c395c:	b002      	add	sp, #8
   c395e:	4770      	bx	lr
   c3960:	4610      	mov	r0, r2
   c3962:	e7fb      	b.n	c395c <__ascii_mbtowc+0x16>
   c3964:	f06f 0001 	mvn.w	r0, #1
   c3968:	e7f8      	b.n	c395c <__ascii_mbtowc+0x16>
	...

000c396c <_Balloc>:
   c396c:	b570      	push	{r4, r5, r6, lr}
   c396e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c3970:	4604      	mov	r4, r0
   c3972:	460d      	mov	r5, r1
   c3974:	b976      	cbnz	r6, c3994 <_Balloc+0x28>
   c3976:	2010      	movs	r0, #16
   c3978:	f7f9 fdfa 	bl	bd570 <malloc>
   c397c:	4602      	mov	r2, r0
   c397e:	6260      	str	r0, [r4, #36]	; 0x24
   c3980:	b920      	cbnz	r0, c398c <_Balloc+0x20>
   c3982:	4b18      	ldr	r3, [pc, #96]	; (c39e4 <_Balloc+0x78>)
   c3984:	4818      	ldr	r0, [pc, #96]	; (c39e8 <_Balloc+0x7c>)
   c3986:	2166      	movs	r1, #102	; 0x66
   c3988:	f7f9 fe3a 	bl	bd600 <__assert_func>
   c398c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c3990:	6006      	str	r6, [r0, #0]
   c3992:	60c6      	str	r6, [r0, #12]
   c3994:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c3996:	68f3      	ldr	r3, [r6, #12]
   c3998:	b183      	cbz	r3, c39bc <_Balloc+0x50>
   c399a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c399c:	68db      	ldr	r3, [r3, #12]
   c399e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c39a2:	b9b8      	cbnz	r0, c39d4 <_Balloc+0x68>
   c39a4:	2101      	movs	r1, #1
   c39a6:	fa01 f605 	lsl.w	r6, r1, r5
   c39aa:	1d72      	adds	r2, r6, #5
   c39ac:	0092      	lsls	r2, r2, #2
   c39ae:	4620      	mov	r0, r4
   c39b0:	f000 fc9d 	bl	c42ee <_calloc_r>
   c39b4:	b160      	cbz	r0, c39d0 <_Balloc+0x64>
   c39b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c39ba:	e00e      	b.n	c39da <_Balloc+0x6e>
   c39bc:	2221      	movs	r2, #33	; 0x21
   c39be:	2104      	movs	r1, #4
   c39c0:	4620      	mov	r0, r4
   c39c2:	f000 fc94 	bl	c42ee <_calloc_r>
   c39c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c39c8:	60f0      	str	r0, [r6, #12]
   c39ca:	68db      	ldr	r3, [r3, #12]
   c39cc:	2b00      	cmp	r3, #0
   c39ce:	d1e4      	bne.n	c399a <_Balloc+0x2e>
   c39d0:	2000      	movs	r0, #0
   c39d2:	bd70      	pop	{r4, r5, r6, pc}
   c39d4:	6802      	ldr	r2, [r0, #0]
   c39d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c39da:	2300      	movs	r3, #0
   c39dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c39e0:	e7f7      	b.n	c39d2 <_Balloc+0x66>
   c39e2:	bf00      	nop
   c39e4:	000c5d19 	.word	0x000c5d19
   c39e8:	000c5f66 	.word	0x000c5f66

000c39ec <_Bfree>:
   c39ec:	b570      	push	{r4, r5, r6, lr}
   c39ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c39f0:	4605      	mov	r5, r0
   c39f2:	460c      	mov	r4, r1
   c39f4:	b976      	cbnz	r6, c3a14 <_Bfree+0x28>
   c39f6:	2010      	movs	r0, #16
   c39f8:	f7f9 fdba 	bl	bd570 <malloc>
   c39fc:	4602      	mov	r2, r0
   c39fe:	6268      	str	r0, [r5, #36]	; 0x24
   c3a00:	b920      	cbnz	r0, c3a0c <_Bfree+0x20>
   c3a02:	4b09      	ldr	r3, [pc, #36]	; (c3a28 <_Bfree+0x3c>)
   c3a04:	4809      	ldr	r0, [pc, #36]	; (c3a2c <_Bfree+0x40>)
   c3a06:	218a      	movs	r1, #138	; 0x8a
   c3a08:	f7f9 fdfa 	bl	bd600 <__assert_func>
   c3a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c3a10:	6006      	str	r6, [r0, #0]
   c3a12:	60c6      	str	r6, [r0, #12]
   c3a14:	b13c      	cbz	r4, c3a26 <_Bfree+0x3a>
   c3a16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c3a18:	6862      	ldr	r2, [r4, #4]
   c3a1a:	68db      	ldr	r3, [r3, #12]
   c3a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c3a20:	6021      	str	r1, [r4, #0]
   c3a22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c3a26:	bd70      	pop	{r4, r5, r6, pc}
   c3a28:	000c5d19 	.word	0x000c5d19
   c3a2c:	000c5f66 	.word	0x000c5f66

000c3a30 <__multadd>:
   c3a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c3a34:	690d      	ldr	r5, [r1, #16]
   c3a36:	4607      	mov	r7, r0
   c3a38:	460c      	mov	r4, r1
   c3a3a:	461e      	mov	r6, r3
   c3a3c:	f101 0c14 	add.w	ip, r1, #20
   c3a40:	2000      	movs	r0, #0
   c3a42:	f8dc 3000 	ldr.w	r3, [ip]
   c3a46:	b299      	uxth	r1, r3
   c3a48:	fb02 6101 	mla	r1, r2, r1, r6
   c3a4c:	0c1e      	lsrs	r6, r3, #16
   c3a4e:	0c0b      	lsrs	r3, r1, #16
   c3a50:	fb02 3306 	mla	r3, r2, r6, r3
   c3a54:	b289      	uxth	r1, r1
   c3a56:	3001      	adds	r0, #1
   c3a58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c3a5c:	4285      	cmp	r5, r0
   c3a5e:	f84c 1b04 	str.w	r1, [ip], #4
   c3a62:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c3a66:	dcec      	bgt.n	c3a42 <__multadd+0x12>
   c3a68:	b30e      	cbz	r6, c3aae <__multadd+0x7e>
   c3a6a:	68a3      	ldr	r3, [r4, #8]
   c3a6c:	42ab      	cmp	r3, r5
   c3a6e:	dc19      	bgt.n	c3aa4 <__multadd+0x74>
   c3a70:	6861      	ldr	r1, [r4, #4]
   c3a72:	4638      	mov	r0, r7
   c3a74:	3101      	adds	r1, #1
   c3a76:	f7ff ff79 	bl	c396c <_Balloc>
   c3a7a:	4680      	mov	r8, r0
   c3a7c:	b928      	cbnz	r0, c3a8a <__multadd+0x5a>
   c3a7e:	4602      	mov	r2, r0
   c3a80:	4b0c      	ldr	r3, [pc, #48]	; (c3ab4 <__multadd+0x84>)
   c3a82:	480d      	ldr	r0, [pc, #52]	; (c3ab8 <__multadd+0x88>)
   c3a84:	21b5      	movs	r1, #181	; 0xb5
   c3a86:	f7f9 fdbb 	bl	bd600 <__assert_func>
   c3a8a:	6922      	ldr	r2, [r4, #16]
   c3a8c:	3202      	adds	r2, #2
   c3a8e:	f104 010c 	add.w	r1, r4, #12
   c3a92:	0092      	lsls	r2, r2, #2
   c3a94:	300c      	adds	r0, #12
   c3a96:	f7fe fb99 	bl	c21cc <memcpy>
   c3a9a:	4621      	mov	r1, r4
   c3a9c:	4638      	mov	r0, r7
   c3a9e:	f7ff ffa5 	bl	c39ec <_Bfree>
   c3aa2:	4644      	mov	r4, r8
   c3aa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c3aa8:	3501      	adds	r5, #1
   c3aaa:	615e      	str	r6, [r3, #20]
   c3aac:	6125      	str	r5, [r4, #16]
   c3aae:	4620      	mov	r0, r4
   c3ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c3ab4:	000c5ee1 	.word	0x000c5ee1
   c3ab8:	000c5f66 	.word	0x000c5f66

000c3abc <__s2b>:
   c3abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3ac0:	460c      	mov	r4, r1
   c3ac2:	4615      	mov	r5, r2
   c3ac4:	461f      	mov	r7, r3
   c3ac6:	2209      	movs	r2, #9
   c3ac8:	3308      	adds	r3, #8
   c3aca:	4606      	mov	r6, r0
   c3acc:	fb93 f3f2 	sdiv	r3, r3, r2
   c3ad0:	2100      	movs	r1, #0
   c3ad2:	2201      	movs	r2, #1
   c3ad4:	429a      	cmp	r2, r3
   c3ad6:	db09      	blt.n	c3aec <__s2b+0x30>
   c3ad8:	4630      	mov	r0, r6
   c3ada:	f7ff ff47 	bl	c396c <_Balloc>
   c3ade:	b940      	cbnz	r0, c3af2 <__s2b+0x36>
   c3ae0:	4602      	mov	r2, r0
   c3ae2:	4b19      	ldr	r3, [pc, #100]	; (c3b48 <__s2b+0x8c>)
   c3ae4:	4819      	ldr	r0, [pc, #100]	; (c3b4c <__s2b+0x90>)
   c3ae6:	21ce      	movs	r1, #206	; 0xce
   c3ae8:	f7f9 fd8a 	bl	bd600 <__assert_func>
   c3aec:	0052      	lsls	r2, r2, #1
   c3aee:	3101      	adds	r1, #1
   c3af0:	e7f0      	b.n	c3ad4 <__s2b+0x18>
   c3af2:	9b08      	ldr	r3, [sp, #32]
   c3af4:	6143      	str	r3, [r0, #20]
   c3af6:	2d09      	cmp	r5, #9
   c3af8:	f04f 0301 	mov.w	r3, #1
   c3afc:	6103      	str	r3, [r0, #16]
   c3afe:	dd16      	ble.n	c3b2e <__s2b+0x72>
   c3b00:	f104 0909 	add.w	r9, r4, #9
   c3b04:	46c8      	mov	r8, r9
   c3b06:	442c      	add	r4, r5
   c3b08:	f818 3b01 	ldrb.w	r3, [r8], #1
   c3b0c:	4601      	mov	r1, r0
   c3b0e:	3b30      	subs	r3, #48	; 0x30
   c3b10:	220a      	movs	r2, #10
   c3b12:	4630      	mov	r0, r6
   c3b14:	f7ff ff8c 	bl	c3a30 <__multadd>
   c3b18:	45a0      	cmp	r8, r4
   c3b1a:	d1f5      	bne.n	c3b08 <__s2b+0x4c>
   c3b1c:	f1a5 0408 	sub.w	r4, r5, #8
   c3b20:	444c      	add	r4, r9
   c3b22:	1b2d      	subs	r5, r5, r4
   c3b24:	1963      	adds	r3, r4, r5
   c3b26:	42bb      	cmp	r3, r7
   c3b28:	db04      	blt.n	c3b34 <__s2b+0x78>
   c3b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3b2e:	340a      	adds	r4, #10
   c3b30:	2509      	movs	r5, #9
   c3b32:	e7f6      	b.n	c3b22 <__s2b+0x66>
   c3b34:	f814 3b01 	ldrb.w	r3, [r4], #1
   c3b38:	4601      	mov	r1, r0
   c3b3a:	3b30      	subs	r3, #48	; 0x30
   c3b3c:	220a      	movs	r2, #10
   c3b3e:	4630      	mov	r0, r6
   c3b40:	f7ff ff76 	bl	c3a30 <__multadd>
   c3b44:	e7ee      	b.n	c3b24 <__s2b+0x68>
   c3b46:	bf00      	nop
   c3b48:	000c5ee1 	.word	0x000c5ee1
   c3b4c:	000c5f66 	.word	0x000c5f66

000c3b50 <__hi0bits>:
   c3b50:	0c03      	lsrs	r3, r0, #16
   c3b52:	041b      	lsls	r3, r3, #16
   c3b54:	b9d3      	cbnz	r3, c3b8c <__hi0bits+0x3c>
   c3b56:	0400      	lsls	r0, r0, #16
   c3b58:	2310      	movs	r3, #16
   c3b5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c3b5e:	bf04      	itt	eq
   c3b60:	0200      	lsleq	r0, r0, #8
   c3b62:	3308      	addeq	r3, #8
   c3b64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c3b68:	bf04      	itt	eq
   c3b6a:	0100      	lsleq	r0, r0, #4
   c3b6c:	3304      	addeq	r3, #4
   c3b6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c3b72:	bf04      	itt	eq
   c3b74:	0080      	lsleq	r0, r0, #2
   c3b76:	3302      	addeq	r3, #2
   c3b78:	2800      	cmp	r0, #0
   c3b7a:	db05      	blt.n	c3b88 <__hi0bits+0x38>
   c3b7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c3b80:	f103 0301 	add.w	r3, r3, #1
   c3b84:	bf08      	it	eq
   c3b86:	2320      	moveq	r3, #32
   c3b88:	4618      	mov	r0, r3
   c3b8a:	4770      	bx	lr
   c3b8c:	2300      	movs	r3, #0
   c3b8e:	e7e4      	b.n	c3b5a <__hi0bits+0xa>

000c3b90 <__lo0bits>:
   c3b90:	6803      	ldr	r3, [r0, #0]
   c3b92:	f013 0207 	ands.w	r2, r3, #7
   c3b96:	4601      	mov	r1, r0
   c3b98:	d00b      	beq.n	c3bb2 <__lo0bits+0x22>
   c3b9a:	07da      	lsls	r2, r3, #31
   c3b9c:	d423      	bmi.n	c3be6 <__lo0bits+0x56>
   c3b9e:	0798      	lsls	r0, r3, #30
   c3ba0:	bf49      	itett	mi
   c3ba2:	085b      	lsrmi	r3, r3, #1
   c3ba4:	089b      	lsrpl	r3, r3, #2
   c3ba6:	2001      	movmi	r0, #1
   c3ba8:	600b      	strmi	r3, [r1, #0]
   c3baa:	bf5c      	itt	pl
   c3bac:	600b      	strpl	r3, [r1, #0]
   c3bae:	2002      	movpl	r0, #2
   c3bb0:	4770      	bx	lr
   c3bb2:	b298      	uxth	r0, r3
   c3bb4:	b9a8      	cbnz	r0, c3be2 <__lo0bits+0x52>
   c3bb6:	0c1b      	lsrs	r3, r3, #16
   c3bb8:	2010      	movs	r0, #16
   c3bba:	b2da      	uxtb	r2, r3
   c3bbc:	b90a      	cbnz	r2, c3bc2 <__lo0bits+0x32>
   c3bbe:	3008      	adds	r0, #8
   c3bc0:	0a1b      	lsrs	r3, r3, #8
   c3bc2:	071a      	lsls	r2, r3, #28
   c3bc4:	bf04      	itt	eq
   c3bc6:	091b      	lsreq	r3, r3, #4
   c3bc8:	3004      	addeq	r0, #4
   c3bca:	079a      	lsls	r2, r3, #30
   c3bcc:	bf04      	itt	eq
   c3bce:	089b      	lsreq	r3, r3, #2
   c3bd0:	3002      	addeq	r0, #2
   c3bd2:	07da      	lsls	r2, r3, #31
   c3bd4:	d403      	bmi.n	c3bde <__lo0bits+0x4e>
   c3bd6:	085b      	lsrs	r3, r3, #1
   c3bd8:	f100 0001 	add.w	r0, r0, #1
   c3bdc:	d005      	beq.n	c3bea <__lo0bits+0x5a>
   c3bde:	600b      	str	r3, [r1, #0]
   c3be0:	4770      	bx	lr
   c3be2:	4610      	mov	r0, r2
   c3be4:	e7e9      	b.n	c3bba <__lo0bits+0x2a>
   c3be6:	2000      	movs	r0, #0
   c3be8:	4770      	bx	lr
   c3bea:	2020      	movs	r0, #32
   c3bec:	4770      	bx	lr
	...

000c3bf0 <__i2b>:
   c3bf0:	b510      	push	{r4, lr}
   c3bf2:	460c      	mov	r4, r1
   c3bf4:	2101      	movs	r1, #1
   c3bf6:	f7ff feb9 	bl	c396c <_Balloc>
   c3bfa:	4602      	mov	r2, r0
   c3bfc:	b928      	cbnz	r0, c3c0a <__i2b+0x1a>
   c3bfe:	4b05      	ldr	r3, [pc, #20]	; (c3c14 <__i2b+0x24>)
   c3c00:	4805      	ldr	r0, [pc, #20]	; (c3c18 <__i2b+0x28>)
   c3c02:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c3c06:	f7f9 fcfb 	bl	bd600 <__assert_func>
   c3c0a:	2301      	movs	r3, #1
   c3c0c:	6144      	str	r4, [r0, #20]
   c3c0e:	6103      	str	r3, [r0, #16]
   c3c10:	bd10      	pop	{r4, pc}
   c3c12:	bf00      	nop
   c3c14:	000c5ee1 	.word	0x000c5ee1
   c3c18:	000c5f66 	.word	0x000c5f66

000c3c1c <__multiply>:
   c3c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3c20:	4691      	mov	r9, r2
   c3c22:	690a      	ldr	r2, [r1, #16]
   c3c24:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c3c28:	429a      	cmp	r2, r3
   c3c2a:	bfb8      	it	lt
   c3c2c:	460b      	movlt	r3, r1
   c3c2e:	460c      	mov	r4, r1
   c3c30:	bfbc      	itt	lt
   c3c32:	464c      	movlt	r4, r9
   c3c34:	4699      	movlt	r9, r3
   c3c36:	6927      	ldr	r7, [r4, #16]
   c3c38:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c3c3c:	68a3      	ldr	r3, [r4, #8]
   c3c3e:	6861      	ldr	r1, [r4, #4]
   c3c40:	eb07 060a 	add.w	r6, r7, sl
   c3c44:	42b3      	cmp	r3, r6
   c3c46:	b085      	sub	sp, #20
   c3c48:	bfb8      	it	lt
   c3c4a:	3101      	addlt	r1, #1
   c3c4c:	f7ff fe8e 	bl	c396c <_Balloc>
   c3c50:	b930      	cbnz	r0, c3c60 <__multiply+0x44>
   c3c52:	4602      	mov	r2, r0
   c3c54:	4b44      	ldr	r3, [pc, #272]	; (c3d68 <__multiply+0x14c>)
   c3c56:	4845      	ldr	r0, [pc, #276]	; (c3d6c <__multiply+0x150>)
   c3c58:	f240 115d 	movw	r1, #349	; 0x15d
   c3c5c:	f7f9 fcd0 	bl	bd600 <__assert_func>
   c3c60:	f100 0514 	add.w	r5, r0, #20
   c3c64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c3c68:	462b      	mov	r3, r5
   c3c6a:	2200      	movs	r2, #0
   c3c6c:	4543      	cmp	r3, r8
   c3c6e:	d321      	bcc.n	c3cb4 <__multiply+0x98>
   c3c70:	f104 0314 	add.w	r3, r4, #20
   c3c74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c3c78:	f109 0314 	add.w	r3, r9, #20
   c3c7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c3c80:	9202      	str	r2, [sp, #8]
   c3c82:	1b3a      	subs	r2, r7, r4
   c3c84:	3a15      	subs	r2, #21
   c3c86:	f022 0203 	bic.w	r2, r2, #3
   c3c8a:	3204      	adds	r2, #4
   c3c8c:	f104 0115 	add.w	r1, r4, #21
   c3c90:	428f      	cmp	r7, r1
   c3c92:	bf38      	it	cc
   c3c94:	2204      	movcc	r2, #4
   c3c96:	9201      	str	r2, [sp, #4]
   c3c98:	9a02      	ldr	r2, [sp, #8]
   c3c9a:	9303      	str	r3, [sp, #12]
   c3c9c:	429a      	cmp	r2, r3
   c3c9e:	d80c      	bhi.n	c3cba <__multiply+0x9e>
   c3ca0:	2e00      	cmp	r6, #0
   c3ca2:	dd03      	ble.n	c3cac <__multiply+0x90>
   c3ca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c3ca8:	2b00      	cmp	r3, #0
   c3caa:	d05a      	beq.n	c3d62 <__multiply+0x146>
   c3cac:	6106      	str	r6, [r0, #16]
   c3cae:	b005      	add	sp, #20
   c3cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3cb4:	f843 2b04 	str.w	r2, [r3], #4
   c3cb8:	e7d8      	b.n	c3c6c <__multiply+0x50>
   c3cba:	f8b3 a000 	ldrh.w	sl, [r3]
   c3cbe:	f1ba 0f00 	cmp.w	sl, #0
   c3cc2:	d024      	beq.n	c3d0e <__multiply+0xf2>
   c3cc4:	f104 0e14 	add.w	lr, r4, #20
   c3cc8:	46a9      	mov	r9, r5
   c3cca:	f04f 0c00 	mov.w	ip, #0
   c3cce:	f85e 2b04 	ldr.w	r2, [lr], #4
   c3cd2:	f8d9 1000 	ldr.w	r1, [r9]
   c3cd6:	fa1f fb82 	uxth.w	fp, r2
   c3cda:	b289      	uxth	r1, r1
   c3cdc:	fb0a 110b 	mla	r1, sl, fp, r1
   c3ce0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c3ce4:	f8d9 2000 	ldr.w	r2, [r9]
   c3ce8:	4461      	add	r1, ip
   c3cea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c3cee:	fb0a c20b 	mla	r2, sl, fp, ip
   c3cf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c3cf6:	b289      	uxth	r1, r1
   c3cf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c3cfc:	4577      	cmp	r7, lr
   c3cfe:	f849 1b04 	str.w	r1, [r9], #4
   c3d02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c3d06:	d8e2      	bhi.n	c3cce <__multiply+0xb2>
   c3d08:	9a01      	ldr	r2, [sp, #4]
   c3d0a:	f845 c002 	str.w	ip, [r5, r2]
   c3d0e:	9a03      	ldr	r2, [sp, #12]
   c3d10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c3d14:	3304      	adds	r3, #4
   c3d16:	f1b9 0f00 	cmp.w	r9, #0
   c3d1a:	d020      	beq.n	c3d5e <__multiply+0x142>
   c3d1c:	6829      	ldr	r1, [r5, #0]
   c3d1e:	f104 0c14 	add.w	ip, r4, #20
   c3d22:	46ae      	mov	lr, r5
   c3d24:	f04f 0a00 	mov.w	sl, #0
   c3d28:	f8bc b000 	ldrh.w	fp, [ip]
   c3d2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c3d30:	fb09 220b 	mla	r2, r9, fp, r2
   c3d34:	4492      	add	sl, r2
   c3d36:	b289      	uxth	r1, r1
   c3d38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c3d3c:	f84e 1b04 	str.w	r1, [lr], #4
   c3d40:	f85c 2b04 	ldr.w	r2, [ip], #4
   c3d44:	f8be 1000 	ldrh.w	r1, [lr]
   c3d48:	0c12      	lsrs	r2, r2, #16
   c3d4a:	fb09 1102 	mla	r1, r9, r2, r1
   c3d4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c3d52:	4567      	cmp	r7, ip
   c3d54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c3d58:	d8e6      	bhi.n	c3d28 <__multiply+0x10c>
   c3d5a:	9a01      	ldr	r2, [sp, #4]
   c3d5c:	50a9      	str	r1, [r5, r2]
   c3d5e:	3504      	adds	r5, #4
   c3d60:	e79a      	b.n	c3c98 <__multiply+0x7c>
   c3d62:	3e01      	subs	r6, #1
   c3d64:	e79c      	b.n	c3ca0 <__multiply+0x84>
   c3d66:	bf00      	nop
   c3d68:	000c5ee1 	.word	0x000c5ee1
   c3d6c:	000c5f66 	.word	0x000c5f66

000c3d70 <__pow5mult>:
   c3d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3d74:	4615      	mov	r5, r2
   c3d76:	f012 0203 	ands.w	r2, r2, #3
   c3d7a:	4606      	mov	r6, r0
   c3d7c:	460f      	mov	r7, r1
   c3d7e:	d007      	beq.n	c3d90 <__pow5mult+0x20>
   c3d80:	4c25      	ldr	r4, [pc, #148]	; (c3e18 <__pow5mult+0xa8>)
   c3d82:	3a01      	subs	r2, #1
   c3d84:	2300      	movs	r3, #0
   c3d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c3d8a:	f7ff fe51 	bl	c3a30 <__multadd>
   c3d8e:	4607      	mov	r7, r0
   c3d90:	10ad      	asrs	r5, r5, #2
   c3d92:	d03d      	beq.n	c3e10 <__pow5mult+0xa0>
   c3d94:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c3d96:	b97c      	cbnz	r4, c3db8 <__pow5mult+0x48>
   c3d98:	2010      	movs	r0, #16
   c3d9a:	f7f9 fbe9 	bl	bd570 <malloc>
   c3d9e:	4602      	mov	r2, r0
   c3da0:	6270      	str	r0, [r6, #36]	; 0x24
   c3da2:	b928      	cbnz	r0, c3db0 <__pow5mult+0x40>
   c3da4:	4b1d      	ldr	r3, [pc, #116]	; (c3e1c <__pow5mult+0xac>)
   c3da6:	481e      	ldr	r0, [pc, #120]	; (c3e20 <__pow5mult+0xb0>)
   c3da8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c3dac:	f7f9 fc28 	bl	bd600 <__assert_func>
   c3db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c3db4:	6004      	str	r4, [r0, #0]
   c3db6:	60c4      	str	r4, [r0, #12]
   c3db8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c3dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c3dc0:	b94c      	cbnz	r4, c3dd6 <__pow5mult+0x66>
   c3dc2:	f240 2171 	movw	r1, #625	; 0x271
   c3dc6:	4630      	mov	r0, r6
   c3dc8:	f7ff ff12 	bl	c3bf0 <__i2b>
   c3dcc:	2300      	movs	r3, #0
   c3dce:	f8c8 0008 	str.w	r0, [r8, #8]
   c3dd2:	4604      	mov	r4, r0
   c3dd4:	6003      	str	r3, [r0, #0]
   c3dd6:	f04f 0900 	mov.w	r9, #0
   c3dda:	07eb      	lsls	r3, r5, #31
   c3ddc:	d50a      	bpl.n	c3df4 <__pow5mult+0x84>
   c3dde:	4639      	mov	r1, r7
   c3de0:	4622      	mov	r2, r4
   c3de2:	4630      	mov	r0, r6
   c3de4:	f7ff ff1a 	bl	c3c1c <__multiply>
   c3de8:	4639      	mov	r1, r7
   c3dea:	4680      	mov	r8, r0
   c3dec:	4630      	mov	r0, r6
   c3dee:	f7ff fdfd 	bl	c39ec <_Bfree>
   c3df2:	4647      	mov	r7, r8
   c3df4:	106d      	asrs	r5, r5, #1
   c3df6:	d00b      	beq.n	c3e10 <__pow5mult+0xa0>
   c3df8:	6820      	ldr	r0, [r4, #0]
   c3dfa:	b938      	cbnz	r0, c3e0c <__pow5mult+0x9c>
   c3dfc:	4622      	mov	r2, r4
   c3dfe:	4621      	mov	r1, r4
   c3e00:	4630      	mov	r0, r6
   c3e02:	f7ff ff0b 	bl	c3c1c <__multiply>
   c3e06:	6020      	str	r0, [r4, #0]
   c3e08:	f8c0 9000 	str.w	r9, [r0]
   c3e0c:	4604      	mov	r4, r0
   c3e0e:	e7e4      	b.n	c3dda <__pow5mult+0x6a>
   c3e10:	4638      	mov	r0, r7
   c3e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c3e16:	bf00      	nop
   c3e18:	000c60b0 	.word	0x000c60b0
   c3e1c:	000c5d19 	.word	0x000c5d19
   c3e20:	000c5f66 	.word	0x000c5f66

000c3e24 <__lshift>:
   c3e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3e28:	460c      	mov	r4, r1
   c3e2a:	6849      	ldr	r1, [r1, #4]
   c3e2c:	6923      	ldr	r3, [r4, #16]
   c3e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c3e32:	68a3      	ldr	r3, [r4, #8]
   c3e34:	4607      	mov	r7, r0
   c3e36:	4691      	mov	r9, r2
   c3e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c3e3c:	f108 0601 	add.w	r6, r8, #1
   c3e40:	42b3      	cmp	r3, r6
   c3e42:	db0b      	blt.n	c3e5c <__lshift+0x38>
   c3e44:	4638      	mov	r0, r7
   c3e46:	f7ff fd91 	bl	c396c <_Balloc>
   c3e4a:	4605      	mov	r5, r0
   c3e4c:	b948      	cbnz	r0, c3e62 <__lshift+0x3e>
   c3e4e:	4602      	mov	r2, r0
   c3e50:	4b2a      	ldr	r3, [pc, #168]	; (c3efc <__lshift+0xd8>)
   c3e52:	482b      	ldr	r0, [pc, #172]	; (c3f00 <__lshift+0xdc>)
   c3e54:	f240 11d9 	movw	r1, #473	; 0x1d9
   c3e58:	f7f9 fbd2 	bl	bd600 <__assert_func>
   c3e5c:	3101      	adds	r1, #1
   c3e5e:	005b      	lsls	r3, r3, #1
   c3e60:	e7ee      	b.n	c3e40 <__lshift+0x1c>
   c3e62:	2300      	movs	r3, #0
   c3e64:	f100 0114 	add.w	r1, r0, #20
   c3e68:	f100 0210 	add.w	r2, r0, #16
   c3e6c:	4618      	mov	r0, r3
   c3e6e:	4553      	cmp	r3, sl
   c3e70:	db37      	blt.n	c3ee2 <__lshift+0xbe>
   c3e72:	6920      	ldr	r0, [r4, #16]
   c3e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c3e78:	f104 0314 	add.w	r3, r4, #20
   c3e7c:	f019 091f 	ands.w	r9, r9, #31
   c3e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c3e84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c3e88:	d02f      	beq.n	c3eea <__lshift+0xc6>
   c3e8a:	f1c9 0e20 	rsb	lr, r9, #32
   c3e8e:	468a      	mov	sl, r1
   c3e90:	f04f 0c00 	mov.w	ip, #0
   c3e94:	681a      	ldr	r2, [r3, #0]
   c3e96:	fa02 f209 	lsl.w	r2, r2, r9
   c3e9a:	ea42 020c 	orr.w	r2, r2, ip
   c3e9e:	f84a 2b04 	str.w	r2, [sl], #4
   c3ea2:	f853 2b04 	ldr.w	r2, [r3], #4
   c3ea6:	4298      	cmp	r0, r3
   c3ea8:	fa22 fc0e 	lsr.w	ip, r2, lr
   c3eac:	d8f2      	bhi.n	c3e94 <__lshift+0x70>
   c3eae:	1b03      	subs	r3, r0, r4
   c3eb0:	3b15      	subs	r3, #21
   c3eb2:	f023 0303 	bic.w	r3, r3, #3
   c3eb6:	3304      	adds	r3, #4
   c3eb8:	f104 0215 	add.w	r2, r4, #21
   c3ebc:	4290      	cmp	r0, r2
   c3ebe:	bf38      	it	cc
   c3ec0:	2304      	movcc	r3, #4
   c3ec2:	f841 c003 	str.w	ip, [r1, r3]
   c3ec6:	f1bc 0f00 	cmp.w	ip, #0
   c3eca:	d001      	beq.n	c3ed0 <__lshift+0xac>
   c3ecc:	f108 0602 	add.w	r6, r8, #2
   c3ed0:	3e01      	subs	r6, #1
   c3ed2:	4638      	mov	r0, r7
   c3ed4:	612e      	str	r6, [r5, #16]
   c3ed6:	4621      	mov	r1, r4
   c3ed8:	f7ff fd88 	bl	c39ec <_Bfree>
   c3edc:	4628      	mov	r0, r5
   c3ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c3ee2:	f842 0f04 	str.w	r0, [r2, #4]!
   c3ee6:	3301      	adds	r3, #1
   c3ee8:	e7c1      	b.n	c3e6e <__lshift+0x4a>
   c3eea:	3904      	subs	r1, #4
   c3eec:	f853 2b04 	ldr.w	r2, [r3], #4
   c3ef0:	f841 2f04 	str.w	r2, [r1, #4]!
   c3ef4:	4298      	cmp	r0, r3
   c3ef6:	d8f9      	bhi.n	c3eec <__lshift+0xc8>
   c3ef8:	e7ea      	b.n	c3ed0 <__lshift+0xac>
   c3efa:	bf00      	nop
   c3efc:	000c5ee1 	.word	0x000c5ee1
   c3f00:	000c5f66 	.word	0x000c5f66

000c3f04 <__mcmp>:
   c3f04:	b530      	push	{r4, r5, lr}
   c3f06:	6902      	ldr	r2, [r0, #16]
   c3f08:	690c      	ldr	r4, [r1, #16]
   c3f0a:	1b12      	subs	r2, r2, r4
   c3f0c:	d10e      	bne.n	c3f2c <__mcmp+0x28>
   c3f0e:	f100 0314 	add.w	r3, r0, #20
   c3f12:	3114      	adds	r1, #20
   c3f14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c3f18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c3f1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c3f20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c3f24:	42a5      	cmp	r5, r4
   c3f26:	d003      	beq.n	c3f30 <__mcmp+0x2c>
   c3f28:	d305      	bcc.n	c3f36 <__mcmp+0x32>
   c3f2a:	2201      	movs	r2, #1
   c3f2c:	4610      	mov	r0, r2
   c3f2e:	bd30      	pop	{r4, r5, pc}
   c3f30:	4283      	cmp	r3, r0
   c3f32:	d3f3      	bcc.n	c3f1c <__mcmp+0x18>
   c3f34:	e7fa      	b.n	c3f2c <__mcmp+0x28>
   c3f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3f3a:	e7f7      	b.n	c3f2c <__mcmp+0x28>

000c3f3c <__mdiff>:
   c3f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3f40:	460c      	mov	r4, r1
   c3f42:	4606      	mov	r6, r0
   c3f44:	4611      	mov	r1, r2
   c3f46:	4620      	mov	r0, r4
   c3f48:	4690      	mov	r8, r2
   c3f4a:	f7ff ffdb 	bl	c3f04 <__mcmp>
   c3f4e:	1e05      	subs	r5, r0, #0
   c3f50:	d110      	bne.n	c3f74 <__mdiff+0x38>
   c3f52:	4629      	mov	r1, r5
   c3f54:	4630      	mov	r0, r6
   c3f56:	f7ff fd09 	bl	c396c <_Balloc>
   c3f5a:	b930      	cbnz	r0, c3f6a <__mdiff+0x2e>
   c3f5c:	4b3a      	ldr	r3, [pc, #232]	; (c4048 <__mdiff+0x10c>)
   c3f5e:	4602      	mov	r2, r0
   c3f60:	f240 2132 	movw	r1, #562	; 0x232
   c3f64:	4839      	ldr	r0, [pc, #228]	; (c404c <__mdiff+0x110>)
   c3f66:	f7f9 fb4b 	bl	bd600 <__assert_func>
   c3f6a:	2301      	movs	r3, #1
   c3f6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c3f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3f74:	bfa4      	itt	ge
   c3f76:	4643      	movge	r3, r8
   c3f78:	46a0      	movge	r8, r4
   c3f7a:	4630      	mov	r0, r6
   c3f7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c3f80:	bfa6      	itte	ge
   c3f82:	461c      	movge	r4, r3
   c3f84:	2500      	movge	r5, #0
   c3f86:	2501      	movlt	r5, #1
   c3f88:	f7ff fcf0 	bl	c396c <_Balloc>
   c3f8c:	b920      	cbnz	r0, c3f98 <__mdiff+0x5c>
   c3f8e:	4b2e      	ldr	r3, [pc, #184]	; (c4048 <__mdiff+0x10c>)
   c3f90:	4602      	mov	r2, r0
   c3f92:	f44f 7110 	mov.w	r1, #576	; 0x240
   c3f96:	e7e5      	b.n	c3f64 <__mdiff+0x28>
   c3f98:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c3f9c:	6926      	ldr	r6, [r4, #16]
   c3f9e:	60c5      	str	r5, [r0, #12]
   c3fa0:	f104 0914 	add.w	r9, r4, #20
   c3fa4:	f108 0514 	add.w	r5, r8, #20
   c3fa8:	f100 0e14 	add.w	lr, r0, #20
   c3fac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c3fb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c3fb4:	f108 0210 	add.w	r2, r8, #16
   c3fb8:	46f2      	mov	sl, lr
   c3fba:	2100      	movs	r1, #0
   c3fbc:	f859 3b04 	ldr.w	r3, [r9], #4
   c3fc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c3fc4:	fa1f f883 	uxth.w	r8, r3
   c3fc8:	fa11 f18b 	uxtah	r1, r1, fp
   c3fcc:	0c1b      	lsrs	r3, r3, #16
   c3fce:	eba1 0808 	sub.w	r8, r1, r8
   c3fd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c3fd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c3fda:	fa1f f888 	uxth.w	r8, r8
   c3fde:	1419      	asrs	r1, r3, #16
   c3fe0:	454e      	cmp	r6, r9
   c3fe2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c3fe6:	f84a 3b04 	str.w	r3, [sl], #4
   c3fea:	d8e7      	bhi.n	c3fbc <__mdiff+0x80>
   c3fec:	1b33      	subs	r3, r6, r4
   c3fee:	3b15      	subs	r3, #21
   c3ff0:	f023 0303 	bic.w	r3, r3, #3
   c3ff4:	3304      	adds	r3, #4
   c3ff6:	3415      	adds	r4, #21
   c3ff8:	42a6      	cmp	r6, r4
   c3ffa:	bf38      	it	cc
   c3ffc:	2304      	movcc	r3, #4
   c3ffe:	441d      	add	r5, r3
   c4000:	4473      	add	r3, lr
   c4002:	469e      	mov	lr, r3
   c4004:	462e      	mov	r6, r5
   c4006:	4566      	cmp	r6, ip
   c4008:	d30e      	bcc.n	c4028 <__mdiff+0xec>
   c400a:	f10c 0203 	add.w	r2, ip, #3
   c400e:	1b52      	subs	r2, r2, r5
   c4010:	f022 0203 	bic.w	r2, r2, #3
   c4014:	3d03      	subs	r5, #3
   c4016:	45ac      	cmp	ip, r5
   c4018:	bf38      	it	cc
   c401a:	2200      	movcc	r2, #0
   c401c:	441a      	add	r2, r3
   c401e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c4022:	b17b      	cbz	r3, c4044 <__mdiff+0x108>
   c4024:	6107      	str	r7, [r0, #16]
   c4026:	e7a3      	b.n	c3f70 <__mdiff+0x34>
   c4028:	f856 8b04 	ldr.w	r8, [r6], #4
   c402c:	fa11 f288 	uxtah	r2, r1, r8
   c4030:	1414      	asrs	r4, r2, #16
   c4032:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c4036:	b292      	uxth	r2, r2
   c4038:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c403c:	f84e 2b04 	str.w	r2, [lr], #4
   c4040:	1421      	asrs	r1, r4, #16
   c4042:	e7e0      	b.n	c4006 <__mdiff+0xca>
   c4044:	3f01      	subs	r7, #1
   c4046:	e7ea      	b.n	c401e <__mdiff+0xe2>
   c4048:	000c5ee1 	.word	0x000c5ee1
   c404c:	000c5f66 	.word	0x000c5f66

000c4050 <__ulp>:
   c4050:	b082      	sub	sp, #8
   c4052:	ed8d 0b00 	vstr	d0, [sp]
   c4056:	9b01      	ldr	r3, [sp, #4]
   c4058:	4912      	ldr	r1, [pc, #72]	; (c40a4 <__ulp+0x54>)
   c405a:	4019      	ands	r1, r3
   c405c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c4060:	2900      	cmp	r1, #0
   c4062:	dd05      	ble.n	c4070 <__ulp+0x20>
   c4064:	2200      	movs	r2, #0
   c4066:	460b      	mov	r3, r1
   c4068:	ec43 2b10 	vmov	d0, r2, r3
   c406c:	b002      	add	sp, #8
   c406e:	4770      	bx	lr
   c4070:	4249      	negs	r1, r1
   c4072:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c4076:	ea4f 5021 	mov.w	r0, r1, asr #20
   c407a:	f04f 0200 	mov.w	r2, #0
   c407e:	f04f 0300 	mov.w	r3, #0
   c4082:	da04      	bge.n	c408e <__ulp+0x3e>
   c4084:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c4088:	fa41 f300 	asr.w	r3, r1, r0
   c408c:	e7ec      	b.n	c4068 <__ulp+0x18>
   c408e:	f1a0 0114 	sub.w	r1, r0, #20
   c4092:	291e      	cmp	r1, #30
   c4094:	bfda      	itte	le
   c4096:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c409a:	fa20 f101 	lsrle.w	r1, r0, r1
   c409e:	2101      	movgt	r1, #1
   c40a0:	460a      	mov	r2, r1
   c40a2:	e7e1      	b.n	c4068 <__ulp+0x18>
   c40a4:	7ff00000 	.word	0x7ff00000

000c40a8 <__b2d>:
   c40a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c40aa:	6905      	ldr	r5, [r0, #16]
   c40ac:	f100 0714 	add.w	r7, r0, #20
   c40b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c40b4:	1f2e      	subs	r6, r5, #4
   c40b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c40ba:	4620      	mov	r0, r4
   c40bc:	f7ff fd48 	bl	c3b50 <__hi0bits>
   c40c0:	f1c0 0320 	rsb	r3, r0, #32
   c40c4:	280a      	cmp	r0, #10
   c40c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; c4144 <__b2d+0x9c>
   c40ca:	600b      	str	r3, [r1, #0]
   c40cc:	dc14      	bgt.n	c40f8 <__b2d+0x50>
   c40ce:	f1c0 0e0b 	rsb	lr, r0, #11
   c40d2:	fa24 f10e 	lsr.w	r1, r4, lr
   c40d6:	42b7      	cmp	r7, r6
   c40d8:	ea41 030c 	orr.w	r3, r1, ip
   c40dc:	bf34      	ite	cc
   c40de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c40e2:	2100      	movcs	r1, #0
   c40e4:	3015      	adds	r0, #21
   c40e6:	fa04 f000 	lsl.w	r0, r4, r0
   c40ea:	fa21 f10e 	lsr.w	r1, r1, lr
   c40ee:	ea40 0201 	orr.w	r2, r0, r1
   c40f2:	ec43 2b10 	vmov	d0, r2, r3
   c40f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c40f8:	42b7      	cmp	r7, r6
   c40fa:	bf3a      	itte	cc
   c40fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c4100:	f1a5 0608 	subcc.w	r6, r5, #8
   c4104:	2100      	movcs	r1, #0
   c4106:	380b      	subs	r0, #11
   c4108:	d017      	beq.n	c413a <__b2d+0x92>
   c410a:	f1c0 0c20 	rsb	ip, r0, #32
   c410e:	fa04 f500 	lsl.w	r5, r4, r0
   c4112:	42be      	cmp	r6, r7
   c4114:	fa21 f40c 	lsr.w	r4, r1, ip
   c4118:	ea45 0504 	orr.w	r5, r5, r4
   c411c:	bf8c      	ite	hi
   c411e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c4122:	2400      	movls	r4, #0
   c4124:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c4128:	fa01 f000 	lsl.w	r0, r1, r0
   c412c:	fa24 f40c 	lsr.w	r4, r4, ip
   c4130:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c4134:	ea40 0204 	orr.w	r2, r0, r4
   c4138:	e7db      	b.n	c40f2 <__b2d+0x4a>
   c413a:	ea44 030c 	orr.w	r3, r4, ip
   c413e:	460a      	mov	r2, r1
   c4140:	e7d7      	b.n	c40f2 <__b2d+0x4a>
   c4142:	bf00      	nop
   c4144:	3ff00000 	.word	0x3ff00000

000c4148 <__d2b>:
   c4148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c414c:	4689      	mov	r9, r1
   c414e:	2101      	movs	r1, #1
   c4150:	ec57 6b10 	vmov	r6, r7, d0
   c4154:	4690      	mov	r8, r2
   c4156:	f7ff fc09 	bl	c396c <_Balloc>
   c415a:	4604      	mov	r4, r0
   c415c:	b930      	cbnz	r0, c416c <__d2b+0x24>
   c415e:	4602      	mov	r2, r0
   c4160:	4b25      	ldr	r3, [pc, #148]	; (c41f8 <__d2b+0xb0>)
   c4162:	4826      	ldr	r0, [pc, #152]	; (c41fc <__d2b+0xb4>)
   c4164:	f240 310a 	movw	r1, #778	; 0x30a
   c4168:	f7f9 fa4a 	bl	bd600 <__assert_func>
   c416c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c4170:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c4174:	bb35      	cbnz	r5, c41c4 <__d2b+0x7c>
   c4176:	2e00      	cmp	r6, #0
   c4178:	9301      	str	r3, [sp, #4]
   c417a:	d028      	beq.n	c41ce <__d2b+0x86>
   c417c:	4668      	mov	r0, sp
   c417e:	9600      	str	r6, [sp, #0]
   c4180:	f7ff fd06 	bl	c3b90 <__lo0bits>
   c4184:	9900      	ldr	r1, [sp, #0]
   c4186:	b300      	cbz	r0, c41ca <__d2b+0x82>
   c4188:	9a01      	ldr	r2, [sp, #4]
   c418a:	f1c0 0320 	rsb	r3, r0, #32
   c418e:	fa02 f303 	lsl.w	r3, r2, r3
   c4192:	430b      	orrs	r3, r1
   c4194:	40c2      	lsrs	r2, r0
   c4196:	6163      	str	r3, [r4, #20]
   c4198:	9201      	str	r2, [sp, #4]
   c419a:	9b01      	ldr	r3, [sp, #4]
   c419c:	61a3      	str	r3, [r4, #24]
   c419e:	2b00      	cmp	r3, #0
   c41a0:	bf14      	ite	ne
   c41a2:	2202      	movne	r2, #2
   c41a4:	2201      	moveq	r2, #1
   c41a6:	6122      	str	r2, [r4, #16]
   c41a8:	b1d5      	cbz	r5, c41e0 <__d2b+0x98>
   c41aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c41ae:	4405      	add	r5, r0
   c41b0:	f8c9 5000 	str.w	r5, [r9]
   c41b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c41b8:	f8c8 0000 	str.w	r0, [r8]
   c41bc:	4620      	mov	r0, r4
   c41be:	b003      	add	sp, #12
   c41c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c41c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c41c8:	e7d5      	b.n	c4176 <__d2b+0x2e>
   c41ca:	6161      	str	r1, [r4, #20]
   c41cc:	e7e5      	b.n	c419a <__d2b+0x52>
   c41ce:	a801      	add	r0, sp, #4
   c41d0:	f7ff fcde 	bl	c3b90 <__lo0bits>
   c41d4:	9b01      	ldr	r3, [sp, #4]
   c41d6:	6163      	str	r3, [r4, #20]
   c41d8:	2201      	movs	r2, #1
   c41da:	6122      	str	r2, [r4, #16]
   c41dc:	3020      	adds	r0, #32
   c41de:	e7e3      	b.n	c41a8 <__d2b+0x60>
   c41e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c41e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c41e8:	f8c9 0000 	str.w	r0, [r9]
   c41ec:	6918      	ldr	r0, [r3, #16]
   c41ee:	f7ff fcaf 	bl	c3b50 <__hi0bits>
   c41f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c41f6:	e7df      	b.n	c41b8 <__d2b+0x70>
   c41f8:	000c5ee1 	.word	0x000c5ee1
   c41fc:	000c5f66 	.word	0x000c5f66

000c4200 <__ratio>:
   c4200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4204:	4688      	mov	r8, r1
   c4206:	4669      	mov	r1, sp
   c4208:	4681      	mov	r9, r0
   c420a:	f7ff ff4d 	bl	c40a8 <__b2d>
   c420e:	a901      	add	r1, sp, #4
   c4210:	4640      	mov	r0, r8
   c4212:	ec55 4b10 	vmov	r4, r5, d0
   c4216:	f7ff ff47 	bl	c40a8 <__b2d>
   c421a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c421e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c4222:	eba3 0c02 	sub.w	ip, r3, r2
   c4226:	e9dd 3200 	ldrd	r3, r2, [sp]
   c422a:	1a9b      	subs	r3, r3, r2
   c422c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c4230:	ec51 0b10 	vmov	r0, r1, d0
   c4234:	2b00      	cmp	r3, #0
   c4236:	bfd6      	itet	le
   c4238:	460a      	movle	r2, r1
   c423a:	462a      	movgt	r2, r5
   c423c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c4240:	468b      	mov	fp, r1
   c4242:	462f      	mov	r7, r5
   c4244:	bfd4      	ite	le
   c4246:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c424a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c424e:	4620      	mov	r0, r4
   c4250:	ee10 2a10 	vmov	r2, s0
   c4254:	465b      	mov	r3, fp
   c4256:	4639      	mov	r1, r7
   c4258:	f7fd fd56 	bl	c1d08 <__aeabi_ddiv>
   c425c:	ec41 0b10 	vmov	d0, r0, r1
   c4260:	b003      	add	sp, #12
   c4262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c4266 <__copybits>:
   c4266:	3901      	subs	r1, #1
   c4268:	b570      	push	{r4, r5, r6, lr}
   c426a:	1149      	asrs	r1, r1, #5
   c426c:	6914      	ldr	r4, [r2, #16]
   c426e:	3101      	adds	r1, #1
   c4270:	f102 0314 	add.w	r3, r2, #20
   c4274:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c4278:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c427c:	1f05      	subs	r5, r0, #4
   c427e:	42a3      	cmp	r3, r4
   c4280:	d30c      	bcc.n	c429c <__copybits+0x36>
   c4282:	1aa3      	subs	r3, r4, r2
   c4284:	3b11      	subs	r3, #17
   c4286:	f023 0303 	bic.w	r3, r3, #3
   c428a:	3211      	adds	r2, #17
   c428c:	42a2      	cmp	r2, r4
   c428e:	bf88      	it	hi
   c4290:	2300      	movhi	r3, #0
   c4292:	4418      	add	r0, r3
   c4294:	2300      	movs	r3, #0
   c4296:	4288      	cmp	r0, r1
   c4298:	d305      	bcc.n	c42a6 <__copybits+0x40>
   c429a:	bd70      	pop	{r4, r5, r6, pc}
   c429c:	f853 6b04 	ldr.w	r6, [r3], #4
   c42a0:	f845 6f04 	str.w	r6, [r5, #4]!
   c42a4:	e7eb      	b.n	c427e <__copybits+0x18>
   c42a6:	f840 3b04 	str.w	r3, [r0], #4
   c42aa:	e7f4      	b.n	c4296 <__copybits+0x30>

000c42ac <__any_on>:
   c42ac:	f100 0214 	add.w	r2, r0, #20
   c42b0:	6900      	ldr	r0, [r0, #16]
   c42b2:	114b      	asrs	r3, r1, #5
   c42b4:	4298      	cmp	r0, r3
   c42b6:	b510      	push	{r4, lr}
   c42b8:	db11      	blt.n	c42de <__any_on+0x32>
   c42ba:	dd0a      	ble.n	c42d2 <__any_on+0x26>
   c42bc:	f011 011f 	ands.w	r1, r1, #31
   c42c0:	d007      	beq.n	c42d2 <__any_on+0x26>
   c42c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c42c6:	fa24 f001 	lsr.w	r0, r4, r1
   c42ca:	fa00 f101 	lsl.w	r1, r0, r1
   c42ce:	428c      	cmp	r4, r1
   c42d0:	d10b      	bne.n	c42ea <__any_on+0x3e>
   c42d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c42d6:	4293      	cmp	r3, r2
   c42d8:	d803      	bhi.n	c42e2 <__any_on+0x36>
   c42da:	2000      	movs	r0, #0
   c42dc:	bd10      	pop	{r4, pc}
   c42de:	4603      	mov	r3, r0
   c42e0:	e7f7      	b.n	c42d2 <__any_on+0x26>
   c42e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c42e6:	2900      	cmp	r1, #0
   c42e8:	d0f5      	beq.n	c42d6 <__any_on+0x2a>
   c42ea:	2001      	movs	r0, #1
   c42ec:	e7f6      	b.n	c42dc <__any_on+0x30>

000c42ee <_calloc_r>:
   c42ee:	b513      	push	{r0, r1, r4, lr}
   c42f0:	434a      	muls	r2, r1
   c42f2:	4611      	mov	r1, r2
   c42f4:	9201      	str	r2, [sp, #4]
   c42f6:	f7f9 f973 	bl	bd5e0 <_malloc_r>
   c42fa:	4604      	mov	r4, r0
   c42fc:	b118      	cbz	r0, c4306 <_calloc_r+0x18>
   c42fe:	9a01      	ldr	r2, [sp, #4]
   c4300:	2100      	movs	r1, #0
   c4302:	f7fd ff8b 	bl	c221c <memset>
   c4306:	4620      	mov	r0, r4
   c4308:	b002      	add	sp, #8
   c430a:	bd10      	pop	{r4, pc}
   c430c:	0000      	movs	r0, r0
	...

000c4310 <nan>:
   c4310:	ed9f 0b01 	vldr	d0, [pc, #4]	; c4318 <nan+0x8>
   c4314:	4770      	bx	lr
   c4316:	bf00      	nop
   c4318:	00000000 	.word	0x00000000
   c431c:	7ff80000 	.word	0x7ff80000

000c4320 <__ascii_wctomb>:
   c4320:	b149      	cbz	r1, c4336 <__ascii_wctomb+0x16>
   c4322:	2aff      	cmp	r2, #255	; 0xff
   c4324:	bf85      	ittet	hi
   c4326:	238a      	movhi	r3, #138	; 0x8a
   c4328:	6003      	strhi	r3, [r0, #0]
   c432a:	700a      	strbls	r2, [r1, #0]
   c432c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c4330:	bf98      	it	ls
   c4332:	2001      	movls	r0, #1
   c4334:	4770      	bx	lr
   c4336:	4608      	mov	r0, r1
   c4338:	4770      	bx	lr
	...

000c433c <__aeabi_d2lz>:
   c433c:	b538      	push	{r3, r4, r5, lr}
   c433e:	2200      	movs	r2, #0
   c4340:	2300      	movs	r3, #0
   c4342:	4604      	mov	r4, r0
   c4344:	460d      	mov	r5, r1
   c4346:	f7fd fe27 	bl	c1f98 <__aeabi_dcmplt>
   c434a:	b928      	cbnz	r0, c4358 <__aeabi_d2lz+0x1c>
   c434c:	4620      	mov	r0, r4
   c434e:	4629      	mov	r1, r5
   c4350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c4354:	f7fd bef6 	b.w	c2144 <__aeabi_d2ulz>
   c4358:	4620      	mov	r0, r4
   c435a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c435e:	f7fd fef1 	bl	c2144 <__aeabi_d2ulz>
   c4362:	4240      	negs	r0, r0
   c4364:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c4368:	bd38      	pop	{r3, r4, r5, pc}
   c436a:	bf00      	nop

000c436c <dynalib_user>:
   c436c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c437c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c438c:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c439c:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c43ac:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c43bc:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c43cc:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c43dc:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c43ec:	4544 7525 003e 7453 7461 7375 203a 6425     DE%u>.Status: %d
   c43fc:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c440c:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c441c:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c442c:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c443c:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c444c:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c445c:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c446c:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c447c:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c448c:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c449c:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c44ac:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   c44bc:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   c44cc:	6425 5b00 4157 4e52 205d 654d 7373 6761     %d.[WARN] Messag
   c44dc:	2065 6843 6365 736b 6d75 4420 656f 2073     e Checksum Does 
   c44ec:	6f4e 2074 614d 6374 2168 203a 7325 5700     Not Match!: %s.W
   c44fc:	7261 696e 676e 202c 6863 6365 736b 6d75     arning, checksum
   c450c:	6420 656f 2073 6f6e 2074 616d 6374 0068      does not match.
   c451c:	6361 006b 746d 0072 6552 6563 7669 6465     ack.mtr.Received
   c452c:	4d20 746f 726f 4320 6d6f 616d 646e 203a      Motor Command: 
   c453c:	534c 6570 6465 253d 2c64 5352 6570 6465     LSpeed=%d,RSpeed
   c454c:	253d 0064 6572 0071 7470 0073 505b 5455     =%d.req.pts.[PUT
   c455c:	5d53 5220 6365 6965 6576 2064 7453 6972     S] Received Stri
   c456c:	676e 4320 6d6f 616d 646e 203a 7325 7300     ng Command: %s.s
   c457c:	6370 6800 6177 6100 7475 6400 706d 5b00     pc.hwa.aut.dmp.[
   c458c:	4e49 4f46 205d 6552 6563 7669 6465 4c20     INFO] Received L
   c459c:	4554 4d20 7365 6173 6567 203a 7325 4e00     TE Message: %s.N
   c45ac:	7765 4220 2054 6f43 6d6d 6e61 3a64 5b00     ew BT Command:.[
   c45bc:	4e49 4f46 205d 6552 6563 7669 6465 4220     INFO] Received B
   c45cc:	454c 4d20 7365 6173 6567 203a 7325 4300     LE Message: %s.C
   c45dc:	4843 6275 4500 7272 726f 202c 6f43 6c75     CHub.Error, Coul
   c45ec:	2064 6f6e 2074 6e69 7469 6169 696c 657a     d not initialize
   c45fc:	4720 5350 2500 3230 2564 3230 2564 3430      GPS.%02d%02d%04
   c460c:	2564 3230 2564 3230 2564 3230 0064 7325     d%02d%02d%02d.%s
   c461c:	252c 2c66 6625 252c 2c66 6625 252c 2c66     ,%f,%f,%f,%f,%f,
   c462c:	6625 252c 0066 654e 2077 4258 6565 4320     %f,%f.New XBee C
   c463c:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   c464c:	6365 6965 6576 2064 4258 6565 4d20 7365     eceived XBee Mes
   c465c:	6173 6567 203a 7325 4500 746e 7265 6e69     sage: %s.Enterin
   c466c:	2067 6144 6174 4f20 6666 6f6c 6461 7265     g Data Offloader
   c467c:	4d20 646f 0065 002f 7245 6f72 2c72 6320      Mode./.Error, c
   c468c:	756f 646c 6e20 746f 6f20 6570 206e 6f72     ould not open ro
   c469c:	746f 5320 2044 6163 6472 6420 7269 6365     ot SD card direc
   c46ac:	6f74 7972 5700 6961 6974 676e 6620 726f     tory.Waiting for
   c46bc:	4320 4843 6275 6320 6e6f 656e 7463 6f69      CCHub connectio
   c46cc:	2e6e 2e2e 5300 6174 7472 6e69 2067 7274     n....Starting tr
   c46dc:	6e61 6673 7265 2e2e 002e 6843 6365 696b     ansfer....Checki
   c46ec:	676e 6920 2066 6966 656c 2520 2073 7369     ng if file %s is
   c46fc:	6120 2e20 7363 2076 726f 2e20 7874 2e74      a .csv or .txt.
   c470c:	2e2e 2e00 7363 0076 6966 656c 6f64 656e     ....csv.filedone
   c471c:	6600 6c69 6e65 6d61 0065 6553 646e 6e69     .filename.Sendin
   c472c:	2067 6f63 6d6d 6e61 2064 7325 4600 6c69     g command %s.Fil
   c473c:	2065 7325 6920 2073 2061 632e 7673 6f20     e %s is a .csv o
   c474c:	2072 742e 7478 7020 6972 746e 6e69 2067     r .txt printing 
   c475c:	6164 6174 6600 6c69 6365 6d6f 0070 7325     data.filecomp.%s
   c476c:	3025 7832 4200 746f 6431 7461 4200 6425     %02x.Bot1dat.B%d
   c477c:	4343 6e73 2573 2e30 6636 2520 2e30 6636     CCsns%0.6f %0.6f
   c478c:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
   c479c:	4200 6425 4241 7573 2570 2064 6425 2520     .B%dABsup%d %d %
   c47ac:	362e 2066 2e25 6636 0020 3142 4343 7470     .6f %.6f .B1CCpt
   c47bc:	6273 6769 6f62 0074 580a 203a 0020 2020     sbigbot..X:  .  
   c47cc:	5909 203a 0020 2020 5a09 203a 0020 580a     .Y:  .  .Z:  ..X
   c47dc:	203a 2000 5909 203a 2000 5a09 203a 2000     : . .Y: . .Z: . 
   c47ec:	5475 7365 616c 0020 5047 2053 6144 6174     uTesla .GPS Data
   c47fc:	203a 614c 3a74 3025 362e 2066 6f4c 3a6e     : Lat:%0.6f Lon:
   c480c:	3025 362e 0a66 4600 6961 656c 2064 6f74     %0.6f..Failed to
   c481c:	6620 6e69 2064 494c 3353 444d 204c 6863      find LIS3MDL ch
   c482c:	7069 4c00 5349 4d33 4c44 4620 756f 646e     ip.LIS3MDL Found
   c483c:	0021 6157 6574 4272 746f 5f00 4f4c 2e47     !.WaterBot._LOG.
   c484c:	7874 0074 7245 6f72 3a72 6320 756f 646c     txt.Error: could
   c485c:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   c486c:	4453 6320 7261 2164 5400 6d69 2c65 614c     SD card!.Time,La
   c487c:	6974 7574 6564 4c2c 6e6f 6967 7574 6564     titude,Longitude
   c488c:	542c 6d65 6570 6172 7574 6572 702c 2c48     ,Temperature,pH,
   c489c:	6944 7373 6c6f 6576 2064 324f 432c 6e6f     Dissolved O2,Con
   c48ac:	7564 7463 7669 7469 2079 2e30 4b31 432c     ductivity 0.1K,C
   c48bc:	6e6f 7564 7463 7669 7469 2079 4b31 5b00     onductivity 1K.[
   c48cc:	4e49 4f46 205d 6157 6574 4272 746f 2520     INFO] WaterBot %
   c48dc:	3a64 5320 6174 7472 6465 4c20 676f 6967     d: Started Loggi
   c48ec:	676e 0021 7874 7200 0078 666f 0066 0000     ng!.tx.rx.off...

000c48fc <_ZTVN8particle11SPISettingsE>:
	...
   c4904:	432d 000b 40d1 000b 4175 000b               -C...@..uA..

000c4910 <_ZTV5Timer>:
	...
   c4918:	43b1 000b 4405 000b 41db 000b               .C...D...A..

000c4924 <_ZTVN5spark10LogHandlerE>:
	...
   c4934:	40a9 000b 40d3 000b                         .@...@..

000c493c <_ZTVN8particle9LEDStatusE>:
	...
   c4944:	4269 000b 4285 000b 40dd 000b               iB...B...@..

000c4950 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c4958:	4299 000b 42cd 000b 01e5 000c 40d5 000b     .B...B.......@..

000c4968 <_ZTV4File>:
	...
   c4970:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c4980:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c4990:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c49a0:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c49b0:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   c49c0:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c49d0:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c49e0:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   c49f0:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c4a00:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   c4a10:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c4a20:	6232 0030                                   2b0.

000c4a24 <CSWTCH.267>:
   c4a24:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c4a34:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c4a44:	444d 004c                                   MDL.

000c4a48 <CSWTCH.26>:
   c4a48:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c4a58 <_ZTV16Adafruit_LIS3MDL>:
	...
   c4a60:	758b 000b 75d5 000b 7589 000b 7685 000b     .u...u...u...v..
   c4a70:	758d 000b 6573 5074 6361 656b 4374 6766     .u..setPacketCfg
   c4a80:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c4a90:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c4aa0:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c4ab0:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c4ac0:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c4ad0:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c4ae0:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c4af0:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c4b00:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c4b10:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c4b20:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c4b30:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c4b40:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c4b50:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c4b60:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c4b70:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c4b80:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c4b90:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c4ba0:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c4bb0:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c4bc0:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c4bd0:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c4be0:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c4bf0:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c4c00:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c4c10:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c4c20:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c4c30:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c4c40:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c4c50:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c4c60:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c4c70:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c4c80:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c4c90:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c4ca0:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c4cb0:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c4cc0:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c4cd0:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c4ce0:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c4cf0:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c4d00:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c4d10:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c4d20:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c4d30:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c4d40:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c4d50:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c4d60:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c4d70:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c4d80:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c4d90:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c4da0:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c4db0:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c4dc0:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c4dd0:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c4de0:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c4df0:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c4e00:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c4e10:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c4e20:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c4e30:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c4e40:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c4e50:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c4e60:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c4e70:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c4e80:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c4e90:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c4ea0:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c4eb0:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c4ec0:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c4ed0:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c4ee0:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c4ef0:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c4f00:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c4f10:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c4f20:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c4f30:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c4f40:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c4f50:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c4f60:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c4f70:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c4f80:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c4f90:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c4fa0:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c4fb0:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c4fc0:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c4fd0:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c4fe0:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c4ff0:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c5000:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c5010:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c5020:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c5030:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c5040:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c5050:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c5060:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c5070:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c5080:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c5090:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c50a0:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c50b0:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c50c0:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c50d0:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c50e0:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c50f0:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c5100:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c5110:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c5120:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c5130:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c5140:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c5150:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c5160:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c5170:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c5180:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c5190:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c51a0:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c51b0:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c51c0:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c51d0:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c51e0:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c51f0:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c5200:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c5210:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c5220:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c5230:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c5240:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c5250:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c5260:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c5270:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c5280:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c5290:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c52a0:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c52b0:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c52c0:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c52d0:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c52e0:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c52f0:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c5300:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c5310:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c5320:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c5330:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c5340:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c5350:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c5360:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c5370:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c5380:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c5390:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c53a0:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c53b0:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c53c0:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c53d0:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c53e0:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c53f0:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c5400:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c5410:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c5420:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c5430:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c5440:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c5450:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c5460:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c5470:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c5480:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c5490:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c54a0:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c54b0:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c54c0:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c54d0:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c54e0:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c54f0:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c5500:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c5510:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c5520:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c5530:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c5540:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c5550:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c5560:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c5570:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c5580:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c5590:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c55a0:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c55b0:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c55c0:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c55d0:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c55e0:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c55f0:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c5600:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c5610:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c5620:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c5630:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c5640:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c5650:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c5660:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c5670:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c5680:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c5690:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c56a0:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c56b0:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c56c0:	7365 2e73 2e2e 0000                         ess.....

000c56c8 <CSWTCH.334>:
   c56c8:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c56d8:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c56e8:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c5708:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c5730:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c5784:	0000 0010 0004                              ......

000c578a <CSWTCH.335>:
   c578a:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c57a6:	002c 0000 0000 0000 0010 0024               ,.........$.

000c57b2 <CSWTCH.336>:
   c57b2:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c57c2:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c57d2:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c57e2:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c57f2:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c5802:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c5812:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c5822:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c5832:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c5842:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c5852:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c5862:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c5872:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c5882:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c5892:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c58a2:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c58b2:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c58c2:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c58d2:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c58e2:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c58f2:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c5904 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c590c:	d67d 000b d6e1 000b d7b5 000b d70b 000b     }...............
   c591c:	d681 000b                                   ....

000c5920 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5928:	d679 000b d6ef 000b d67b 000b d711 000b     y.......{.......
   c5938:	d6a1 000b                                   ....

000c593c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5944:	d677 000b d6fd 000b df71 000b d717 000b     w.......q.......
   c5954:	d6c1 000b                                   ....

000c5958 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c5964:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c5976 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c5976:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c5986 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c5986:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c5998 <_ZTVN5spark13CellularClassE>:
	...
   c59a0:	ea33 000b ea29 000b ea1f 000b e9d5 000b     3...)...........
   c59b0:	ea13 000b ea07 000b 053d 000c 0545 000c     ........=...E...
   c59c0:	e9fb 000b e9f3 000b e9e9 000b e9df 000b     ................
   c59d0:	0575 000c                                   u...

000c59d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c59dc:	ea6d 000b ea73 000b eab1 000b ea81 000b     m...s...........
   c59ec:	ea6f 000b                                   o...

000c59f0 <_ZTVN5spark13EthernetClassE>:
	...
   c59f8:	effb 000b eff1 000b efe7 000b efdd 000b     ................
   c5a08:	efd1 000b efc5 000b 053d 000c 0545 000c     ........=...E...
   c5a18:	efb9 000b efb1 000b efa7 000b ef9d 000b     ................
   c5a28:	0575 000c                                   u...

000c5a2c <_ZTV7TwoWire>:
	...
   c5a34:	f019 000b f063 000b f03b 000b f01b 000b     ....c...;.......
   c5a44:	f043 000b f04b 000b f053 000b f05b 000b     C...K...S...[...

000c5a54 <_ZTV9IPAddress>:
	...
   c5a5c:	f135 000b f125 000b f127 000b 7525 7500     5...%...'...%u.u
   c5a6c:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c5a7c:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c5a8c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c5a9c:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c5aac:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c5abc:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c5acc:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c5adc:	6961 006c                                   ail.

000c5ae0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c5ae8:	f631 000b f657 000b f615 000b f243 000b     1...W.......C...

000c5af8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c5b00:	fa8d 000b faa5 000b 01e5 000c 40d5 000b     .............@..

000c5b10 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c5b18:	fab9 000b facd 000b 0389 000c f61d 000b     ................

000c5b28 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c5b30:	f62f 000b f665 000b 0149 000c f61f 000b     /...e...I.......

000c5b40 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c5b48:	f62d 000b f673 000b f9f5 000b f695 000b     -...s...........

000c5b58 <_ZTVN5spark12NetworkClassE>:
	...
   c5b60:	04fd 000c 0507 000c 0511 000c 051b 000c     ................
   c5b70:	0525 000c 0531 000c 053d 000c 0545 000c     %...1...=...E...
   c5b80:	054d 000c 0559 000c 0561 000c 056b 000c     M...Y...a...k...
   c5b90:	0575 000c 616e 006e 6e69 0066 766f 0066     u...nan.inf.ovf.

000c5ba0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c5ba0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c5bb0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c5bc0:	6d69 0065                                   ime.

000c5bc4 <_ZTV11USARTSerial>:
	...
   c5bcc:	1041 000c 10ad 000c 1085 000c 0661 000c     A...........a...
   c5bdc:	1055 000c 1071 000c 1063 000c 107f 000c     U...q...c.......
   c5bec:	1043 000c 1047 000c                         C...G...

000c5bf4 <_ZTV9USBSerial>:
	...
   c5bfc:	10ff 000c 1167 000c 113d 000c 0661 000c     ....g...=...a...
   c5c0c:	112f 000c 1101 000c 1111 000c 1161 000c     /...........a...
   c5c1c:	1121 000c 10f9 000c                         !.......

000c5c24 <_ZSt7nothrow>:
	...

000c5c25 <_ZTSSt19_Sp_make_shared_tag>:
   c5c25:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c5c35:	6572 5f64 6174 0067 0000                     red_tag....

000c5c40 <_ZTISt19_Sp_make_shared_tag>:
   c5c40:	5c80 000c 5c25 000c                         .\..%\..

000c5c48 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c5c48:	5ce0 000c 5c54 000c 5d04 000c               .\..T\...]..

000c5c54 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c5c54:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c5c64:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c5c74:	0045 0000                                   E...

000c5c78 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c5c78:	0000 0000 5c48 000c 1565 000c 1579 000c     ....H\..e...y...
   c5c88:	170d 000c 170d 000c 15e3 000c 1525 000c     ............%...
   c5c98:	15cb 000c 158d 000c 1557 000c               ........W...

000c5ca4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c5ca4:	5ce0 000c 5cb0 000c 5c48 000c               .\...\..H\..

000c5cb0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c5cb0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c5cc0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c5cd0:	666e 456f 0000 0000                         nfoE....

000c5cd8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c5cd8:	0000 0000 5ca4 000c 160d 000c 1621 000c     .....\......!...
   c5ce8:	170d 000c 170d 000c 15e3 000c 1525 000c     ............%...
   c5cf8:	16e1 000c 166d 000c 1635 000c               ....m...5...

000c5d04 <_ZTISt9type_info>:
   c5d04:	5c80 000c 5d0c 000c                         .\...]..

000c5d0c <_ZTSSt9type_info>:
   c5d0c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c5d1c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c5d2c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c5d3c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c5d4c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c5d5c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c5d6c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c5d7c:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   c5d8c:	7974 0000                                   ty..

000c5d90 <fpi.1>:
   c5d90:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c5da0:	0000 0000                                   ....

000c5da4 <fpinan.0>:
   c5da4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c5db4:	0000 0000                                   ....

000c5db8 <tinytens>:
   c5db8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c5dc8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c5dd8:	6f43 64ac 0628 1168                         Co.d(.h.

000c5de0 <_ctype_>:
   c5de0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c5df0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c5e00:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c5e10:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c5e20:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c5e30:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c5e40:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c5e50:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c5e60:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c5ee0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c5ef0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c5f00:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5f10:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5f20:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c5f30:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c5f40:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c5f50:	632e 0000                                   .c..

000c5f54 <_C_numeric_locale>:
   c5f54:	4c4b 000c 5acb 000c dc30 2003 4f50 4953     KL...Z..0.. POSI
   c5f64:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c5f74:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5f84:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5f94:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c5fa4:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c5fb4:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c5fc0 <__mprec_bigtens>:
   c5fc0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c5fd0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c5fe0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c5fe8 <__mprec_tens>:
   c5fe8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c5ff8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c6008:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c6018:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c6028:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c6038:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c6048:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c6058:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c6068:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c6078:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c6088:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c6098:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c60a8:	9db4 79d9 7843 44ea                         ...yCx.D

000c60b0 <p05.0>:
   c60b0:	0005 0000 0019 0000 007d 0000               ........}...

000c60bc <link_const_variable_data_end>:
   c60bc:	000b5b31 	.word	0x000b5b31
   c60c0:	000be9c5 	.word	0x000be9c5
   c60c4:	000bea3d 	.word	0x000bea3d
   c60c8:	000bf005 	.word	0x000bf005
   c60cc:	000c01d5 	.word	0x000c01d5
   c60d0:	000c064d 	.word	0x000c064d
   c60d4:	000c0921 	.word	0x000c0921
   c60d8:	000c0e89 	.word	0x000c0e89
   c60dc:	000c102d 	.word	0x000c102d
